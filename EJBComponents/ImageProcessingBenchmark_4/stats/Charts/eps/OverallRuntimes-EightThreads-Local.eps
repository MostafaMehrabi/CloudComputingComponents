%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-EightThreads-Local.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:43:16 PM
%%BoundingBox: 0 0 620 525
%%HiResBoundingBox: 0 0 619.5600 524.7601
%%CropBox: 0 0 619.5600 524.7601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -524.76 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 524.76 li
619.56 524.76 li
619.56 0 li
cp
clp
gsave
0 524.76 mo
620 524.76 li
620 -.23999 li
0 -.23999 li
cp
clp
0 0 mo
619.559 0 li
619.559 524.762 li
0 524.762 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
54.602 469.32 mo
604.441 469.32 li
54.602 452.16 mo
604.441 452.16 li
54.602 417.961 mo
604.441 417.961 li
54.602 400.801 mo
604.441 400.801 li
54.602 366.48 mo
604.441 366.48 li
54.602 349.441 mo
604.441 349.441 li
54.602 315.121 mo
604.441 315.121 li
54.602 297.961 mo
604.441 297.961 li
54.602 263.762 mo
604.441 263.762 li
54.602 246.602 mo
604.441 246.602 li
54.602 212.398 mo
604.441 212.398 li
54.602 195.238 mo
604.441 195.238 li
54.602 160.922 mo
604.441 160.922 li
54.602 143.879 mo
604.441 143.879 li
54.602 109.559 mo
604.441 109.559 li
54.602 92.398 mo
604.441 92.398 li
54.602 58.199 mo
604.441 58.199 li
54.602 41.039 mo
604.441 41.039 li
.140414 .108034 .108034 0 cmyk
@
54.602 435 mo
604.441 435 li
54.602 383.641 mo
604.441 383.641 li
54.602 332.281 mo
604.441 332.281 li
54.602 280.922 mo
604.441 280.922 li
54.602 229.441 mo
604.441 229.441 li
54.602 178.078 mo
604.441 178.078 li
54.602 126.719 mo
604.441 126.719 li
54.602 75.238 mo
604.441 75.238 li
54.602 23.879 mo
604.441 23.879 li
.328344 .284215 .278569 .000915541 cmyk
@
89.039 23.879 mo
89.039 486.48 li
157.68 23.879 mo
157.68 486.48 li
226.441 23.879 mo
226.441 486.48 li
295.199 23.879 mo
295.199 486.48 li
363.84 23.879 mo
363.84 486.48 li
432.602 23.879 mo
432.602 486.48 li
501.359 23.879 mo
501.359 486.48 li
570 23.879 mo
570 486.48 li
.178592 .148898 .143923 0 cmyk
@
54.602 23.879 mo
54.602 486.48 li
123.359 23.879 mo
123.359 486.48 li
192.121 23.879 mo
192.121 486.48 li
260.762 23.879 mo
260.762 486.48 li
329.52 23.879 mo
329.52 486.48 li
398.281 23.879 mo
398.281 486.48 li
466.922 23.879 mo
466.922 486.48 li
535.68 23.879 mo
535.68 486.48 li
604.441 23.879 mo
604.441 486.48 li
.328344 .284215 .278569 .000915541 cmyk
@
28.32 478.441 mo
43.558 478.441 li
43.558 493.078 li
28.32 493.078 li
cp
0 0 0 0 cmyk
ef
28.32 427.078 mo
43.558 427.078 li
43.558 441.719 li
28.32 441.719 li
cp
ef
28.32 375.719 mo
43.558 375.719 li
43.558 390.36 li
28.32 390.36 li
cp
ef
28.32 324.238 mo
43.558 324.238 li
43.558 338.879 li
28.32 338.879 li
cp
ef
28.32 272.879 mo
43.558 272.879 li
43.558 287.52 li
28.32 287.52 li
cp
ef
28.32 221.52 mo
43.558 221.52 li
43.558 236.161 li
28.32 236.161 li
cp
ef
28.32 170.039 mo
43.558 170.039 li
43.558 184.801 li
28.32 184.801 li
cp
ef
22.199 118.68 mo
43.558 118.68 li
43.558 133.321 li
22.199 133.321 li
cp
ef
22.199 67.32 mo
43.558 67.32 li
43.558 81.961 li
22.199 81.961 li
cp
ef
22.199 15.961 mo
43.558 15.961 li
43.558 30.602 li
22.199 30.602 li
cp
ef
.96 lw
54.602 486.48 mo
604.441 486.48 li
.367803 .29575 .300999 .00198367 cmyk
@
54.602 486.48 mo
54.602 490.32 li
123.359 486.48 mo
123.359 490.32 li
192.121 486.48 mo
192.121 490.32 li
260.762 486.48 mo
260.762 490.32 li
329.52 486.48 mo
329.52 490.32 li
398.281 486.48 mo
398.281 490.32 li
466.922 486.48 mo
466.922 490.32 li
535.68 486.48 mo
535.68 490.32 li
604.441 486.48 mo
604.441 490.32 li
@
gsave
54.602 23.879 mo
605.04 23.879 li
605.04 487.078 li
54.602 487.078 li
cp
clp
1 lc
54.602 471 mo
123.359 478.559 li
192.121 482.641 li
260.762 482.039 li
329.52 482.039 li
398.281 480.961 li
535.68 480.961 li
604.441 481.32 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
59.672 476.02 mo
49.59 465.941 li
49.59 476.02 mo
59.672 465.941 li
.62768 .285466 0 0 cmyk
@
128.43 483.578 mo
118.352 473.5 li
118.352 483.578 mo
128.43 473.5 li
@
197.07 487.66 mo
186.988 477.578 li
186.988 487.66 mo
197.07 477.578 li
@
265.828 486.941 mo
255.75 476.859 li
255.75 486.941 mo
265.828 476.859 li
@
334.469 486.941 mo
324.391 476.859 li
324.391 486.941 mo
334.469 476.859 li
@
403.23 485.98 mo
393.148 475.898 li
393.148 485.98 mo
403.23 475.898 li
@
471.988 485.98 mo
461.91 475.898 li
461.91 485.98 mo
471.988 475.898 li
@
540.629 485.98 mo
530.551 475.898 li
530.551 485.98 mo
540.629 475.898 li
@
609.391 486.219 mo
599.309 476.141 li
599.309 486.219 mo
609.391 476.141 li
@
gsave
54.602 23.879 mo
605.04 23.879 li
605.04 487.078 li
54.602 487.078 li
cp
clp
.96 lw
1 lc
54.602 445.32 mo
123.359 465.602 li
192.121 475.801 li
260.762 475.801 li
329.52 475.199 li
398.281 472.441 li
466.922 474.48 li
535.68 471 li
604.441 475.801 li
.466651 0 .889799 0 cmyk
@
grestore
59.672 450.34 mo
49.59 440.262 li
49.59 450.34 mo
59.672 440.262 li
.466651 0 .889799 0 cmyk
@
128.43 470.5 mo
118.352 460.422 li
118.352 470.5 mo
128.43 460.422 li
@
197.07 480.82 mo
186.988 470.738 li
186.988 480.82 mo
197.07 470.738 li
@
265.828 480.82 mo
255.75 470.738 li
255.75 480.82 mo
265.828 470.738 li
@
334.469 480.102 mo
324.391 470.02 li
324.391 480.102 mo
334.469 470.02 li
@
403.23 477.34 mo
393.148 467.262 li
393.148 477.34 mo
403.23 467.262 li
@
471.988 479.379 mo
461.91 469.301 li
461.91 479.379 mo
471.988 469.301 li
@
540.629 476.02 mo
530.551 465.941 li
530.551 476.02 mo
540.629 465.941 li
@
609.391 480.82 mo
599.309 470.738 li
599.309 480.82 mo
609.391 470.738 li
@
gsave
54.602 23.879 mo
605.04 23.879 li
605.04 487.078 li
54.602 487.078 li
cp
clp
.96 lw
1 lc
54.602 349.078 mo
123.359 416.879 li
192.121 450.48 li
260.762 450.48 li
329.52 447 li
398.281 443.641 li
466.922 438.48 li
535.68 443.281 li
604.441 443.641 li
0 .990631 1 .000396735 cmyk
@
grestore
59.672 353.98 mo
49.59 343.898 li
49.59 353.98 mo
59.672 343.898 li
0 .990631 1 .000396735 cmyk
@
128.43 421.898 mo
118.352 411.82 li
118.352 421.898 mo
128.43 411.82 li
@
197.07 455.379 mo
186.988 445.301 li
186.988 455.379 mo
197.07 445.301 li
@
265.828 455.379 mo
255.75 445.301 li
255.75 455.379 mo
265.828 445.301 li
@
334.469 452.02 mo
324.391 441.941 li
324.391 452.02 mo
334.469 441.941 li
@
403.23 448.539 mo
393.148 438.461 li
393.148 448.539 mo
403.23 438.461 li
@
471.988 443.5 mo
461.91 433.422 li
461.91 443.5 mo
471.988 433.422 li
@
540.629 448.301 mo
530.551 438.219 li
530.551 448.301 mo
540.629 438.219 li
@
609.391 448.539 mo
599.309 438.461 li
599.309 448.539 mo
609.391 438.461 li
@
gsave
54.602 23.879 mo
605.04 23.879 li
605.04 487.078 li
54.602 487.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.602 397.32 mo
123.359 441.602 li
192.121 463.199 li
260.762 460.441 li
329.52 464.16 li
398.281 458.641 li
466.922 459 li
535.68 454.559 li
604.441 453.602 li
@
grestore
59.672 402.34 mo
49.59 392.262 li
49.59 402.34 mo
59.672 392.262 li
@
128.43 446.5 mo
118.352 436.422 li
118.352 446.5 mo
128.43 436.422 li
@
197.07 468.102 mo
186.988 458.02 li
186.988 468.102 mo
197.07 458.02 li
@
265.828 465.34 mo
255.75 455.262 li
255.75 465.34 mo
265.828 455.262 li
@
334.469 469.18 mo
324.391 459.102 li
324.391 469.18 mo
334.469 459.102 li
@
403.23 463.66 mo
393.148 453.578 li
393.148 463.66 mo
403.23 453.578 li
@
471.988 464.02 mo
461.91 453.941 li
461.91 464.02 mo
471.988 453.941 li
@
540.629 459.578 mo
530.551 449.5 li
530.551 459.578 mo
540.629 449.5 li
@
609.391 458.5 mo
599.309 448.422 li
599.309 458.5 mo
609.391 448.422 li
@
gsave
54.602 23.879 mo
605.04 23.879 li
605.04 487.078 li
54.602 487.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.602 243.238 mo
123.359 363.121 li
192.121 423.121 li
260.762 420.961 li
329.52 423.121 li
398.281 409.32 li
466.922 400.441 li
535.68 417.602 li
604.441 399.719 li
.62768 .285466 0 0 cmyk
@
grestore
59.191 247.66 mo
50.07 238.539 li
50.07 247.66 mo
59.191 238.539 li
.62768 .285466 0 0 cmyk
@
127.949 367.539 mo
118.828 358.422 li
118.828 367.539 mo
127.949 358.422 li
@
196.59 427.539 mo
187.469 418.422 li
187.469 427.539 mo
196.59 418.422 li
@
265.352 425.5 mo
256.23 416.379 li
256.23 425.5 mo
265.352 416.379 li
@
333.988 427.539 mo
324.871 418.422 li
324.871 427.539 mo
333.988 418.422 li
@
402.75 413.859 mo
393.629 404.738 li
393.629 413.859 mo
402.75 404.738 li
@
471.512 404.98 mo
462.391 395.859 li
462.391 404.98 mo
471.512 395.859 li
@
540.148 422.02 mo
531.031 412.898 li
531.031 422.02 mo
540.148 412.898 li
@
608.91 404.262 mo
599.789 395.141 li
599.789 404.262 mo
608.91 395.141 li
@
gsave
54.602 23.879 mo
605.04 23.879 li
605.04 487.078 li
54.602 487.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
54.602 299.398 mo
123.359 391.922 li
192.121 438.121 li
260.762 437.398 li
329.52 438.121 li
398.281 428.16 li
466.922 426.48 li
535.68 425.52 li
604.441 422.762 li
.466651 0 .889799 0 cmyk
@
grestore
59.672 304.301 mo
49.59 294.219 li
49.59 304.301 mo
59.672 294.219 li
.466651 0 .889799 0 cmyk
@
128.43 396.82 mo
118.352 386.738 li
118.352 396.82 mo
128.43 386.738 li
@
197.07 443.141 mo
186.988 433.059 li
186.988 443.141 mo
197.07 433.059 li
@
265.828 442.422 mo
255.75 432.34 li
255.75 442.422 mo
265.828 432.34 li
@
334.469 443.141 mo
324.391 433.059 li
324.391 443.141 mo
334.469 433.059 li
@
403.23 433.18 mo
393.148 423.102 li
393.148 433.18 mo
403.23 423.102 li
@
471.988 431.5 mo
461.91 421.422 li
461.91 431.5 mo
471.988 421.422 li
@
540.629 430.422 mo
530.551 420.34 li
530.551 430.422 mo
540.629 420.34 li
@
609.391 427.66 mo
599.309 417.578 li
599.309 427.66 mo
609.391 417.578 li
@
28.352 478.445 mo
43.54 478.445 li
43.54 493.093 li
28.352 493.093 li
cp
0 0 0 0 cmyk
ef
34.035 486.129 mo
34.031 486.711 33.984 487.242 33.898 487.723 cv
33.805 488.207 33.652 488.621 33.441 488.965 cv
33.223 489.309 32.945 489.578 32.605 489.766 cv
32.258 489.953 31.836 490.043 31.336 490.047 cv
30.859 490.043 30.457 489.961 30.133 489.793 cv
29.805 489.625 29.543 489.375 29.344 489.043 cv
29.141 488.715 28.996 488.309 28.918 487.824 cv
28.832 487.344 28.793 486.789 28.793 486.164 cv
28.793 485.586 28.84 485.059 28.934 484.574 cv
29.027 484.098 29.18 483.684 29.391 483.332 cv
29.602 482.988 29.879 482.719 30.223 482.527 cv
30.566 482.34 30.988 482.246 31.488 482.242 cv
31.965 482.246 32.367 482.332 32.695 482.5 cv
33.023 482.672 33.285 482.922 33.484 483.25 cv
33.684 483.582 33.824 483.988 33.91 484.469 cv
33.988 484.953 34.031 485.504 34.035 486.129 cv
cp
33.004 486.199 mo
33 485.824 32.988 485.484 32.965 485.18 cv
32.938 484.879 32.895 484.613 32.844 484.383 cv
32.789 484.156 32.723 483.961 32.637 483.789 cv
32.551 483.625 32.449 483.488 32.336 483.379 cv
32.215 483.277 32.082 483.199 31.934 483.145 cv
31.785 483.098 31.617 483.07 31.43 483.07 cv
31.098 483.07 30.828 483.148 30.621 483.305 cv
30.41 483.461 30.246 483.676 30.129 483.949 cv
30.012 484.223 29.93 484.543 29.887 484.91 cv
29.844 485.277 29.824 485.672 29.824 486.094 cv
29.824 486.664 29.852 487.148 29.91 487.539 cv
29.969 487.937 30.063 488.258 30.188 488.508 cv
30.313 488.758 30.473 488.941 30.676 489.055 cv
30.871 489.168 31.113 489.223 31.395 489.223 cv
31.613 489.223 31.805 489.187 31.973 489.117 cv
32.137 489.047 32.277 488.949 32.398 488.816 cv
32.516 488.687 32.617 488.527 32.695 488.344 cv
32.773 488.164 32.836 487.961 32.883 487.734 cv
32.93 487.512 32.961 487.273 32.977 487.012 cv
32.992 486.754 33 486.48 33.004 486.199 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.598 489.297 mo
36.598 489.578 36.551 489.762 36.457 489.855 cv
36.363 489.945 36.195 489.988 35.961 489.992 cv
35.723 489.988 35.563 489.945 35.473 489.855 cv
35.379 489.766 35.332 489.586 35.336 489.316 cv
35.332 489.039 35.379 488.855 35.473 488.762 cv
35.566 488.672 35.734 488.625 35.977 488.625 cv
36.211 488.625 36.371 488.672 36.461 488.762 cv
36.551 488.852 36.598 489.031 36.598 489.297 cv
cp
f
43.141 486.129 mo
43.137 486.711 43.09 487.242 43.004 487.723 cv
42.91 488.207 42.758 488.621 42.547 488.965 cv
42.328 489.309 42.051 489.578 41.711 489.766 cv
41.363 489.953 40.941 490.043 40.441 490.047 cv
39.965 490.043 39.563 489.961 39.238 489.793 cv
38.91 489.625 38.648 489.375 38.449 489.043 cv
38.246 488.715 38.102 488.309 38.023 487.824 cv
37.938 487.344 37.898 486.789 37.898 486.164 cv
37.898 485.586 37.945 485.059 38.039 484.574 cv
38.133 484.098 38.285 483.684 38.496 483.332 cv
38.707 482.988 38.984 482.719 39.328 482.527 cv
39.672 482.34 40.094 482.246 40.594 482.242 cv
41.07 482.246 41.473 482.332 41.801 482.5 cv
42.129 482.672 42.391 482.922 42.59 483.25 cv
42.789 483.582 42.93 483.988 43.016 484.469 cv
43.094 484.953 43.137 485.504 43.141 486.129 cv
cp
42.109 486.199 mo
42.105 485.824 42.094 485.484 42.07 485.18 cv
42.043 484.879 42 484.613 41.949 484.383 cv
41.895 484.156 41.828 483.961 41.742 483.789 cv
41.656 483.625 41.555 483.488 41.441 483.379 cv
41.32 483.277 41.188 483.199 41.039 483.145 cv
40.891 483.098 40.723 483.07 40.535 483.07 cv
40.203 483.07 39.934 483.148 39.727 483.305 cv
39.516 483.461 39.352 483.676 39.234 483.949 cv
39.117 484.223 39.035 484.543 38.992 484.91 cv
38.949 485.277 38.93 485.672 38.93 486.094 cv
38.93 486.664 38.957 487.148 39.016 487.539 cv
39.074 487.937 39.168 488.258 39.293 488.508 cv
39.418 488.758 39.578 488.941 39.781 489.055 cv
39.977 489.168 40.219 489.223 40.5 489.223 cv
40.719 489.223 40.91 489.187 41.078 489.117 cv
41.242 489.047 41.383 488.949 41.504 488.816 cv
41.621 488.687 41.723 488.527 41.801 488.344 cv
41.879 488.164 41.941 487.961 41.988 487.734 cv
42.035 487.512 42.066 487.273 42.082 487.012 cv
42.098 486.754 42.105 486.48 42.109 486.199 cv
cp
f
28.352 427.051 mo
43.54 427.051 li
43.54 441.699 li
28.352 441.699 li
cp
0 0 0 0 cmyk
ef
33.801 438.133 mo
33.797 438.207 33.793 438.27 33.785 438.32 cv
33.773 438.375 33.758 438.418 33.738 438.445 cv
33.715 438.48 33.691 438.504 33.668 438.512 cv
33.645 438.527 33.617 438.531 33.59 438.531 cv
29.629 438.531 li
29.602 438.531 29.578 438.527 29.555 438.512 cv
29.531 438.504 29.508 438.48 29.488 438.445 cv
29.465 438.418 29.449 438.375 29.438 438.32 cv
29.422 438.27 29.414 438.207 29.418 438.133 cv
29.414 438.062 29.422 438.004 29.438 437.953 cv
29.449 437.902 29.461 437.859 29.48 437.824 cv
29.496 437.793 29.52 437.77 29.543 437.75 cv
29.566 437.734 29.594 437.723 29.629 437.723 cv
31.215 437.723 li
31.215 431.957 li
29.746 432.828 li
29.672 432.875 29.613 432.898 29.57 432.902 cv
29.523 432.914 29.488 432.906 29.461 432.875 cv
29.43 432.852 29.41 432.809 29.402 432.75 cv
29.395 432.691 29.391 432.617 29.391 432.523 cv
29.391 432.461 29.391 432.402 29.398 432.355 cv
29.402 432.309 29.414 432.27 29.426 432.238 cv
29.434 432.207 29.449 432.18 29.473 432.156 cv
29.496 432.133 29.523 432.109 29.559 432.086 cv
31.309 430.969 li
31.32 430.957 31.34 430.945 31.367 430.937 cv
31.387 430.93 31.418 430.922 31.453 430.914 cv
31.484 430.906 31.523 430.902 31.574 430.902 cv
31.617 430.902 31.676 430.902 31.754 430.898 cv
31.844 430.902 31.922 430.906 31.988 430.91 cv
32.047 430.922 32.098 430.934 32.133 430.941 cv
32.164 430.957 32.188 430.973 32.203 430.992 cv
32.215 431.016 32.219 431.039 32.223 431.062 cv
32.223 437.723 li
33.59 437.723 li
33.617 437.723 33.648 437.734 33.68 437.75 cv
33.707 437.77 33.727 437.793 33.746 437.824 cv
33.762 437.859 33.777 437.902 33.785 437.953 cv
33.793 438.004 33.797 438.062 33.801 438.133 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.598 437.891 mo
36.598 438.172 36.551 438.355 36.457 438.449 cv
36.363 438.539 36.195 438.582 35.961 438.586 cv
35.723 438.582 35.563 438.539 35.473 438.449 cv
35.379 438.359 35.332 438.18 35.336 437.91 cv
35.332 437.633 35.379 437.449 35.473 437.355 cv
35.566 437.266 35.734 437.219 35.977 437.219 cv
36.211 437.219 36.371 437.266 36.461 437.355 cv
36.551 437.445 36.598 437.625 36.598 437.891 cv
cp
f
42.855 436.094 mo
42.855 436.5 42.785 436.863 42.648 437.18 cv
42.512 437.496 42.32 437.762 42.07 437.98 cv
41.82 438.199 41.52 438.363 41.176 438.473 cv
40.824 438.582 40.441 438.637 40.023 438.641 cv
39.785 438.637 39.563 438.621 39.355 438.59 cv
39.141 438.559 38.953 438.52 38.793 438.473 cv
38.625 438.426 38.492 438.379 38.391 438.328 cv
38.285 438.285 38.215 438.246 38.188 438.215 cv
38.156 438.187 38.137 438.164 38.125 438.137 cv
38.113 438.117 38.102 438.09 38.094 438.055 cv
38.078 438.023 38.074 437.98 38.074 437.93 cv
38.07 437.879 38.066 437.816 38.07 437.746 cv
38.066 437.684 38.07 437.625 38.078 437.57 cv
38.082 437.516 38.094 437.473 38.109 437.441 cv
38.125 437.41 38.141 437.387 38.164 437.367 cv
38.18 437.355 38.207 437.348 38.238 437.344 cv
38.277 437.348 38.336 437.371 38.418 437.418 cv
38.5 437.465 38.609 437.52 38.75 437.574 cv
38.887 437.633 39.059 437.684 39.266 437.734 cv
39.469 437.789 39.715 437.816 39.996 437.812 cv
40.258 437.816 40.496 437.785 40.719 437.719 cv
40.934 437.66 41.121 437.562 41.281 437.426 cv
41.438 437.297 41.563 437.129 41.652 436.926 cv
41.742 436.723 41.789 436.477 41.789 436.187 cv
41.789 435.945 41.75 435.734 41.676 435.547 cv
41.598 435.363 41.48 435.207 41.324 435.082 cv
41.164 434.961 40.965 434.871 40.723 434.809 cv
40.48 434.754 40.191 434.723 39.855 434.719 cv
39.617 434.723 39.41 434.734 39.242 434.754 cv
39.066 434.781 38.906 434.793 38.758 434.789 cv
38.645 434.793 38.566 434.766 38.523 434.711 cv
38.473 434.66 38.449 434.562 38.453 434.418 cv
38.453 431.328 li
38.449 431.203 38.48 431.105 38.543 431.043 cv
38.605 430.98 38.691 430.949 38.805 430.949 cv
42.164 430.949 li
42.195 430.949 42.223 430.961 42.254 430.977 cv
42.277 430.996 42.305 431.02 42.328 431.055 cv
42.348 431.094 42.359 431.141 42.371 431.191 cv
42.379 431.25 42.387 431.312 42.387 431.383 cv
42.387 431.523 42.367 431.633 42.328 431.711 cv
42.289 431.789 42.234 431.828 42.172 431.828 cv
39.461 431.828 li
39.461 433.953 li
39.59 433.937 39.727 433.926 39.867 433.922 cv
40.004 433.918 40.16 433.914 40.344 433.914 cv
40.758 433.914 41.125 433.969 41.438 434.07 cv
41.75 434.18 42.008 434.324 42.219 434.512 cv
42.426 434.699 42.586 434.93 42.695 435.199 cv
42.801 435.469 42.855 435.766 42.855 436.094 cv
cp
f
28.352 375.66 mo
43.54 375.66 li
43.54 390.308 li
28.352 390.308 li
cp
0 0 0 0 cmyk
ef
33.738 384.969 mo
33.738 385.32 33.676 385.637 33.555 385.914 cv
33.434 386.195 33.258 386.434 33.031 386.633 cv
32.801 386.832 32.523 386.984 32.191 387.094 cv
31.859 387.199 31.484 387.25 31.066 387.254 cv
30.809 387.25 30.57 387.23 30.352 387.191 cv
30.129 387.148 29.93 387.102 29.762 387.043 cv
29.586 386.988 29.445 386.93 29.332 386.867 cv
29.219 386.809 29.145 386.766 29.117 386.738 cv
29.086 386.711 29.066 386.684 29.051 386.656 cv
29.035 386.629 29.02 386.594 29.008 386.555 cv
28.996 386.516 28.988 386.469 28.984 386.41 cv
28.977 386.355 28.973 386.285 28.977 386.203 cv
28.973 386.062 28.988 385.965 29.016 385.906 cv
29.043 385.855 29.082 385.828 29.137 385.824 cv
29.172 385.828 29.242 385.859 29.352 385.918 cv
29.453 385.984 29.59 386.051 29.762 386.121 cv
29.926 386.195 30.121 386.266 30.344 386.324 cv
30.566 386.391 30.816 386.422 31.09 386.418 cv
31.355 386.422 31.586 386.387 31.789 386.32 cv
31.984 386.254 32.152 386.16 32.293 386.039 cv
32.426 385.918 32.531 385.773 32.602 385.605 cv
32.668 385.441 32.699 385.262 32.703 385.062 cv
32.699 384.848 32.656 384.652 32.57 384.48 cv
32.48 384.309 32.355 384.16 32.191 384.035 cv
32.023 383.91 31.816 383.816 31.574 383.75 cv
31.328 383.684 31.051 383.648 30.738 383.648 cv
29.992 383.648 li
29.957 383.648 29.926 383.645 29.898 383.629 cv
29.867 383.617 29.84 383.594 29.82 383.559 cv
29.797 383.531 29.781 383.488 29.766 383.437 cv
29.75 383.387 29.742 383.32 29.746 383.238 cv
29.742 383.164 29.746 383.102 29.762 383.051 cv
29.77 383.004 29.789 382.965 29.813 382.934 cv
29.832 382.906 29.855 382.887 29.883 382.871 cv
29.91 382.859 29.941 382.852 29.98 382.848 cv
30.645 382.848 li
30.902 382.852 31.133 382.82 31.34 382.75 cv
31.543 382.687 31.715 382.59 31.859 382.461 cv
32 382.34 32.109 382.191 32.188 382.012 cv
32.262 381.84 32.301 381.645 32.305 381.43 cv
32.301 381.273 32.277 381.125 32.227 380.98 cv
32.176 380.84 32.098 380.715 32 380.609 cv
31.895 380.504 31.766 380.422 31.609 380.359 cv
31.449 380.301 31.266 380.27 31.059 380.266 cv
30.828 380.27 30.621 380.305 30.434 380.371 cv
30.242 380.441 30.07 380.512 29.926 380.59 cv
29.773 380.668 29.652 380.742 29.555 380.809 cv
29.457 380.879 29.387 380.914 29.352 380.91 cv
29.32 380.914 29.297 380.91 29.277 380.898 cv
29.254 380.891 29.234 380.871 29.223 380.84 cv
29.207 380.812 29.199 380.77 29.195 380.715 cv
29.188 380.664 29.184 380.594 29.188 380.508 cv
29.184 380.449 29.188 380.398 29.191 380.352 cv
29.195 380.309 29.203 380.27 29.215 380.234 cv
29.227 380.203 29.238 380.172 29.258 380.145 cv
29.27 380.117 29.297 380.086 29.336 380.047 cv
29.371 380.012 29.445 379.957 29.563 379.883 cv
29.672 379.816 29.813 379.746 29.98 379.676 cv
30.145 379.609 30.336 379.555 30.555 379.504 cv
30.77 379.461 31.004 379.437 31.258 379.434 cv
31.609 379.437 31.918 379.48 32.188 379.57 cv
32.449 379.66 32.672 379.789 32.852 379.949 cv
33.027 380.117 33.16 380.312 33.254 380.539 cv
33.34 380.77 33.387 381.023 33.387 381.301 cv
33.387 381.539 33.352 381.762 33.289 381.965 cv
33.223 382.176 33.133 382.355 33.012 382.512 cv
32.891 382.672 32.742 382.809 32.566 382.918 cv
32.391 383.031 32.188 383.109 31.957 383.148 cv
31.957 383.16 li
32.219 383.191 32.457 383.254 32.676 383.355 cv
32.891 383.461 33.078 383.594 33.238 383.746 cv
33.391 383.906 33.512 384.09 33.605 384.297 cv
33.691 384.508 33.738 384.73 33.738 384.969 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.613 386.5 mo
36.609 386.781 36.563 386.965 36.473 387.059 cv
36.379 387.148 36.211 387.191 35.973 387.195 cv
35.734 387.191 35.574 387.148 35.484 387.059 cv
35.395 386.969 35.348 386.789 35.352 386.52 cv
35.348 386.242 35.395 386.059 35.488 385.965 cv
35.578 385.875 35.746 385.828 35.992 385.824 cv
36.223 385.828 36.383 385.875 36.477 385.961 cv
36.563 386.055 36.609 386.234 36.613 386.5 cv
cp
f
43.172 383.324 mo
43.168 383.91 43.121 384.441 43.035 384.922 cv
42.941 385.406 42.789 385.82 42.578 386.164 cv
42.359 386.512 42.082 386.781 41.738 386.969 cv
41.395 387.16 40.969 387.25 40.469 387.254 cv
39.984 387.25 39.582 387.168 39.258 387 cv
38.93 386.828 38.668 386.578 38.469 386.246 cv
38.27 385.918 38.125 385.512 38.043 385.027 cv
37.957 384.547 37.918 383.992 37.918 383.359 cv
37.918 382.785 37.965 382.254 38.059 381.766 cv
38.152 381.285 38.305 380.867 38.516 380.52 cv
38.727 380.176 39.004 379.91 39.352 379.719 cv
39.691 379.531 40.113 379.437 40.621 379.434 cv
41.098 379.437 41.5 379.52 41.828 379.687 cv
42.152 379.859 42.418 380.109 42.621 380.437 cv
42.82 380.77 42.961 381.18 43.047 381.66 cv
43.125 382.148 43.168 382.703 43.172 383.324 cv
cp
42.141 383.395 mo
42.137 383.02 42.121 382.68 42.098 382.375 cv
42.066 382.078 42.027 381.809 41.977 381.574 cv
41.922 381.344 41.855 381.148 41.773 380.98 cv
41.688 380.816 41.586 380.68 41.469 380.57 cv
41.352 380.465 41.215 380.383 41.066 380.332 cv
40.914 380.285 40.746 380.262 40.563 380.258 cv
40.227 380.262 39.957 380.34 39.75 380.496 cv
39.539 380.652 39.375 380.867 39.258 381.141 cv
39.137 381.414 39.055 381.738 39.016 382.105 cv
38.969 382.477 38.949 382.871 38.953 383.289 cv
38.949 383.859 38.977 384.34 39.039 384.738 cv
39.094 385.137 39.188 385.461 39.32 385.707 cv
39.445 385.961 39.609 386.145 39.805 386.254 cv
40 386.371 40.238 386.426 40.527 386.426 cv
40.742 386.426 40.934 386.391 41.102 386.32 cv
41.266 386.25 41.41 386.152 41.531 386.02 cv
41.648 385.891 41.746 385.73 41.828 385.547 cv
41.902 385.363 41.965 385.16 42.016 384.934 cv
42.059 384.711 42.094 384.469 42.113 384.207 cv
42.129 383.949 42.137 383.68 42.141 383.395 cv
cp
f
28.352 324.262 mo
43.54 324.262 li
43.54 338.91 li
28.352 338.91 li
cp
0 0 0 0 cmyk
ef
34.105 333.582 mo
34.102 333.715 34.082 333.816 34.047 333.887 cv
34.004 333.961 33.949 334 33.887 333.996 cv
33.027 333.996 li
33.027 335.59 li
33.023 335.625 33.016 335.652 33.004 335.672 cv
32.984 335.695 32.957 335.711 32.918 335.727 cv
32.879 335.742 32.824 335.754 32.762 335.762 cv
32.695 335.77 32.613 335.773 32.516 335.773 cv
32.414 335.773 32.336 335.77 32.273 335.762 cv
32.211 335.754 32.16 335.742 32.121 335.727 cv
32.082 335.711 32.055 335.695 32.039 335.672 cv
32.023 335.652 32.016 335.625 32.02 335.59 cv
32.02 333.996 li
28.918 333.996 li
28.871 334 28.836 333.992 28.805 333.98 cv
28.773 333.973 28.742 333.953 28.719 333.918 cv
28.688 333.891 28.672 333.844 28.664 333.781 cv
28.656 333.723 28.652 333.648 28.652 333.551 cv
28.652 333.48 28.652 333.414 28.656 333.355 cv
28.66 333.297 28.668 333.242 28.68 333.195 cv
28.691 333.148 28.707 333.102 28.727 333.055 cv
28.746 333.008 28.77 332.961 28.797 332.91 cv
31.5 328.301 li
31.52 328.273 31.547 328.246 31.586 328.219 cv
31.621 328.199 31.672 328.18 31.734 328.16 cv
31.793 328.148 31.863 328.137 31.953 328.129 cv
32.039 328.125 32.145 328.121 32.266 328.121 cv
32.395 328.121 32.508 328.129 32.605 328.137 cv
32.703 328.152 32.781 328.164 32.844 328.176 cv
32.898 328.195 32.945 328.215 32.98 328.238 cv
33.008 328.262 33.023 328.293 33.027 328.324 cv
33.027 333.168 li
33.887 333.168 li
33.949 333.172 34.004 333.207 34.043 333.27 cv
34.082 333.34 34.102 333.441 34.105 333.582 cv
cp
32.02 329.004 mo
32.012 329.004 li
29.574 333.168 li
32.02 333.168 li
cp
.629114 .553033 .543389 .289647 cmyk
f
36.598 335.098 mo
36.598 335.379 36.551 335.562 36.457 335.656 cv
36.363 335.746 36.195 335.789 35.961 335.793 cv
35.723 335.789 35.563 335.746 35.473 335.656 cv
35.379 335.566 35.332 335.387 35.336 335.117 cv
35.332 334.84 35.379 334.656 35.473 334.562 cv
35.566 334.473 35.734 334.426 35.977 334.426 cv
36.211 334.426 36.371 334.473 36.461 334.562 cv
36.551 334.652 36.598 334.832 36.598 335.098 cv
cp
f
42.855 333.301 mo
42.855 333.707 42.785 334.07 42.648 334.387 cv
42.512 334.703 42.32 334.969 42.07 335.187 cv
41.82 335.406 41.52 335.57 41.176 335.68 cv
40.824 335.789 40.441 335.844 40.023 335.848 cv
39.785 335.844 39.563 335.828 39.355 335.797 cv
39.141 335.766 38.953 335.727 38.793 335.68 cv
38.625 335.633 38.492 335.586 38.391 335.535 cv
38.285 335.492 38.215 335.453 38.188 335.422 cv
38.156 335.395 38.137 335.371 38.125 335.344 cv
38.113 335.324 38.102 335.297 38.094 335.262 cv
38.078 335.23 38.074 335.187 38.074 335.137 cv
38.07 335.086 38.066 335.023 38.07 334.953 cv
38.066 334.891 38.07 334.832 38.078 334.777 cv
38.082 334.723 38.094 334.68 38.109 334.648 cv
38.125 334.617 38.141 334.594 38.164 334.574 cv
38.18 334.562 38.207 334.555 38.238 334.551 cv
38.277 334.555 38.336 334.578 38.418 334.625 cv
38.5 334.672 38.609 334.727 38.75 334.781 cv
38.887 334.84 39.059 334.891 39.266 334.941 cv
39.469 334.996 39.715 335.023 39.996 335.02 cv
40.258 335.023 40.496 334.992 40.719 334.926 cv
40.934 334.867 41.121 334.77 41.281 334.633 cv
41.438 334.504 41.563 334.336 41.652 334.133 cv
41.742 333.93 41.789 333.684 41.789 333.395 cv
41.789 333.152 41.75 332.941 41.676 332.754 cv
41.598 332.57 41.48 332.414 41.324 332.289 cv
41.164 332.168 40.965 332.078 40.723 332.016 cv
40.48 331.961 40.191 331.93 39.855 331.926 cv
39.617 331.93 39.41 331.941 39.242 331.961 cv
39.066 331.988 38.906 332 38.758 331.996 cv
38.645 332 38.566 331.973 38.523 331.918 cv
38.473 331.867 38.449 331.77 38.453 331.625 cv
38.453 328.535 li
38.449 328.41 38.48 328.312 38.543 328.25 cv
38.605 328.187 38.691 328.156 38.805 328.156 cv
42.164 328.156 li
42.195 328.156 42.223 328.168 42.254 328.184 cv
42.277 328.203 42.305 328.227 42.328 328.262 cv
42.348 328.301 42.359 328.348 42.371 328.398 cv
42.379 328.457 42.387 328.52 42.387 328.59 cv
42.387 328.73 42.367 328.84 42.328 328.918 cv
42.289 328.996 42.234 329.035 42.172 329.035 cv
39.461 329.035 li
39.461 331.16 li
39.59 331.145 39.727 331.133 39.867 331.129 cv
40.004 331.125 40.16 331.121 40.344 331.121 cv
40.758 331.121 41.125 331.176 41.438 331.277 cv
41.75 331.387 42.008 331.531 42.219 331.719 cv
42.426 331.906 42.586 332.137 42.695 332.406 cv
42.801 332.676 42.855 332.973 42.855 333.301 cv
cp
f
28.352 272.871 mo
43.54 272.871 li
43.54 287.519 li
28.352 287.519 li
cp
0 0 0 0 cmyk
ef
33.98 281.875 mo
33.977 282.207 33.926 282.527 33.828 282.84 cv
33.723 283.152 33.566 283.426 33.359 283.66 cv
33.145 283.895 32.879 284.086 32.555 284.227 cv
32.227 284.367 31.844 284.434 31.406 284.437 cv
31.09 284.434 30.809 284.398 30.57 284.32 cv
30.324 284.246 30.113 284.133 29.938 283.988 cv
29.754 283.848 29.605 283.672 29.488 283.457 cv
29.367 283.25 29.27 283.008 29.199 282.734 cv
29.121 282.465 29.07 282.172 29.043 281.848 cv
29.008 281.531 28.992 281.187 28.996 280.82 cv
28.992 280.496 29.012 280.168 29.051 279.836 cv
29.086 279.504 29.148 279.184 29.238 278.875 cv
29.324 278.566 29.445 278.277 29.602 278.004 cv
29.758 277.734 29.949 277.496 30.184 277.293 cv
30.414 277.094 30.695 276.934 31.02 276.816 cv
31.34 276.699 31.715 276.641 32.152 276.641 cv
32.293 276.641 32.441 276.652 32.59 276.668 cv
32.738 276.691 32.875 276.715 33 276.738 cv
33.125 276.77 33.23 276.801 33.316 276.836 cv
33.402 276.871 33.457 276.898 33.484 276.922 cv
33.512 276.945 33.531 276.969 33.547 276.992 cv
33.555 277.016 33.566 277.043 33.578 277.074 cv
33.582 277.105 33.59 277.141 33.598 277.172 cv
33.602 277.211 33.602 277.254 33.605 277.309 cv
33.602 277.379 33.602 277.441 33.602 277.492 cv
33.598 277.543 33.59 277.582 33.578 277.613 cv
33.563 277.645 33.543 277.668 33.523 277.684 cv
33.5 277.699 33.473 277.707 33.441 277.707 cv
33.395 277.707 33.336 277.695 33.262 277.668 cv
33.188 277.641 33.098 277.609 32.992 277.574 cv
32.887 277.543 32.758 277.512 32.609 277.484 cv
32.457 277.461 32.285 277.449 32.086 277.445 cv
31.723 277.449 31.41 277.523 31.148 277.668 cv
30.883 277.82 30.668 278.02 30.504 278.266 cv
30.34 278.52 30.215 278.809 30.137 279.137 cv
30.055 279.465 30.012 279.809 30 280.168 cv
30.102 280.109 30.215 280.051 30.344 279.992 cv
30.469 279.937 30.605 279.887 30.758 279.836 cv
30.906 279.793 31.066 279.754 31.234 279.723 cv
31.402 279.691 31.582 279.676 31.777 279.676 cv
32.184 279.676 32.531 279.734 32.813 279.844 cv
33.094 279.957 33.32 280.109 33.492 280.305 cv
33.664 280.504 33.789 280.738 33.867 281.004 cv
33.941 281.277 33.977 281.566 33.98 281.875 cv
cp
32.957 281.969 mo
32.953 281.742 32.93 281.535 32.891 281.348 cv
32.844 281.164 32.77 281.008 32.664 280.879 cv
32.559 280.75 32.418 280.648 32.242 280.578 cv
32.066 280.508 31.852 280.473 31.594 280.473 cv
31.449 280.473 31.305 280.488 31.16 280.512 cv
31.012 280.539 30.871 280.574 30.738 280.617 cv
30.605 280.664 30.477 280.715 30.352 280.777 cv
30.227 280.84 30.113 280.906 30.02 280.969 cv
30.016 281.477 30.047 281.898 30.113 282.238 cv
30.176 282.578 30.27 282.852 30.395 283.055 cv
30.516 283.262 30.672 283.406 30.855 283.492 cv
31.035 283.582 31.25 283.625 31.5 283.625 cv
31.75 283.625 31.965 283.578 32.148 283.484 cv
32.332 283.391 32.484 283.266 32.605 283.105 cv
32.727 282.949 32.816 282.773 32.871 282.574 cv
32.926 282.379 32.953 282.176 32.957 281.969 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.598 283.687 mo
36.598 283.969 36.551 284.152 36.457 284.246 cv
36.363 284.336 36.195 284.379 35.961 284.383 cv
35.723 284.379 35.563 284.336 35.473 284.246 cv
35.379 284.156 35.332 283.977 35.336 283.707 cv
35.332 283.43 35.379 283.246 35.473 283.152 cv
35.566 283.062 35.734 283.016 35.977 283.016 cv
36.211 283.016 36.371 283.062 36.461 283.152 cv
36.551 283.242 36.598 283.422 36.598 283.687 cv
cp
f
43.141 280.52 mo
43.137 281.102 43.09 281.633 43.004 282.113 cv
42.91 282.598 42.758 283.012 42.547 283.355 cv
42.328 283.699 42.051 283.969 41.711 284.156 cv
41.363 284.344 40.941 284.434 40.441 284.437 cv
39.965 284.434 39.563 284.352 39.238 284.184 cv
38.91 284.016 38.648 283.766 38.449 283.434 cv
38.246 283.105 38.102 282.699 38.023 282.215 cv
37.938 281.734 37.898 281.18 37.898 280.555 cv
37.898 279.977 37.945 279.449 38.039 278.965 cv
38.133 278.488 38.285 278.074 38.496 277.723 cv
38.707 277.379 38.984 277.109 39.328 276.918 cv
39.672 276.73 40.094 276.637 40.594 276.633 cv
41.07 276.637 41.473 276.723 41.801 276.891 cv
42.129 277.062 42.391 277.312 42.59 277.641 cv
42.789 277.973 42.93 278.379 43.016 278.859 cv
43.094 279.344 43.137 279.895 43.141 280.52 cv
cp
42.109 280.59 mo
42.105 280.215 42.094 279.875 42.07 279.57 cv
42.043 279.27 42 279.004 41.949 278.773 cv
41.895 278.547 41.828 278.352 41.742 278.18 cv
41.656 278.016 41.555 277.879 41.441 277.77 cv
41.32 277.668 41.188 277.59 41.039 277.535 cv
40.891 277.488 40.723 277.461 40.535 277.461 cv
40.203 277.461 39.934 277.539 39.727 277.695 cv
39.516 277.852 39.352 278.066 39.234 278.34 cv
39.117 278.613 39.035 278.934 38.992 279.301 cv
38.949 279.668 38.93 280.062 38.93 280.484 cv
38.93 281.055 38.957 281.539 39.016 281.93 cv
39.074 282.328 39.168 282.648 39.293 282.898 cv
39.418 283.148 39.578 283.332 39.781 283.445 cv
39.977 283.559 40.219 283.613 40.5 283.613 cv
40.719 283.613 40.91 283.578 41.078 283.508 cv
41.242 283.437 41.383 283.34 41.504 283.207 cv
41.621 283.078 41.723 282.918 41.801 282.734 cv
41.879 282.555 41.941 282.352 41.988 282.125 cv
42.035 281.902 42.066 281.664 42.082 281.402 cv
42.098 281.145 42.105 280.871 42.109 280.59 cv
cp
f
28.352 221.469 mo
43.54 221.469 li
43.54 236.121 li
28.352 236.121 li
cp
0 0 0 0 cmyk
ef
33.895 225.773 mo
33.891 225.844 33.887 225.91 33.887 225.965 cv
33.879 226.023 33.871 226.078 33.863 226.129 cv
33.848 226.184 33.836 226.234 33.82 226.281 cv
33.805 226.332 33.785 226.383 33.762 226.437 cv
31.031 232.727 li
31.012 232.777 30.984 232.816 30.957 232.844 cv
30.926 232.875 30.891 232.898 30.844 232.914 cv
30.797 232.93 30.738 232.937 30.672 232.945 cv
30.598 232.953 30.512 232.957 30.418 232.957 cv
30.277 232.957 30.176 232.949 30.105 232.937 cv
30.031 232.926 29.977 232.91 29.945 232.883 cv
29.91 232.859 29.895 232.828 29.898 232.789 cv
29.902 232.754 29.918 232.711 29.941 232.656 cv
32.813 226.227 li
29.176 226.227 li
29.098 226.23 29.043 226.191 29.004 226.109 cv
28.965 226.035 28.945 225.926 28.949 225.781 cv
28.945 225.707 28.949 225.641 28.965 225.586 cv
28.973 225.531 28.988 225.488 29.008 225.449 cv
29.027 225.414 29.051 225.387 29.078 225.367 cv
29.105 225.352 29.137 225.34 29.176 225.34 cv
33.59 225.34 li
33.645 225.34 33.691 225.348 33.734 225.359 cv
33.773 225.371 33.805 225.395 33.828 225.43 cv
33.848 225.465 33.867 225.508 33.879 225.562 cv
33.887 225.617 33.891 225.687 33.895 225.773 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.598 232.281 mo
36.598 232.562 36.551 232.746 36.457 232.84 cv
36.363 232.93 36.195 232.973 35.961 232.977 cv
35.723 232.973 35.563 232.93 35.473 232.84 cv
35.379 232.75 35.332 232.57 35.336 232.301 cv
35.332 232.023 35.379 231.84 35.473 231.746 cv
35.566 231.656 35.734 231.609 35.977 231.609 cv
36.211 231.609 36.371 231.656 36.461 231.746 cv
36.551 231.836 36.598 232.016 36.598 232.281 cv
cp
f
42.855 230.484 mo
42.855 230.891 42.785 231.254 42.648 231.57 cv
42.512 231.887 42.32 232.152 42.07 232.371 cv
41.82 232.59 41.52 232.754 41.176 232.863 cv
40.824 232.973 40.441 233.027 40.023 233.031 cv
39.785 233.027 39.563 233.012 39.355 232.98 cv
39.141 232.949 38.953 232.91 38.793 232.863 cv
38.625 232.816 38.492 232.77 38.391 232.719 cv
38.285 232.676 38.215 232.637 38.188 232.605 cv
38.156 232.578 38.137 232.555 38.125 232.527 cv
38.113 232.508 38.102 232.48 38.094 232.445 cv
38.078 232.414 38.074 232.371 38.074 232.32 cv
38.07 232.27 38.066 232.207 38.07 232.137 cv
38.066 232.074 38.07 232.016 38.078 231.961 cv
38.082 231.906 38.094 231.863 38.109 231.832 cv
38.125 231.801 38.141 231.777 38.164 231.758 cv
38.18 231.746 38.207 231.738 38.238 231.734 cv
38.277 231.738 38.336 231.762 38.418 231.809 cv
38.5 231.855 38.609 231.91 38.75 231.965 cv
38.887 232.023 39.059 232.074 39.266 232.125 cv
39.469 232.18 39.715 232.207 39.996 232.203 cv
40.258 232.207 40.496 232.176 40.719 232.109 cv
40.934 232.051 41.121 231.953 41.281 231.816 cv
41.438 231.687 41.563 231.52 41.652 231.316 cv
41.742 231.113 41.789 230.867 41.789 230.578 cv
41.789 230.336 41.75 230.125 41.676 229.937 cv
41.598 229.754 41.48 229.598 41.324 229.473 cv
41.164 229.352 40.965 229.262 40.723 229.199 cv
40.48 229.145 40.191 229.113 39.855 229.109 cv
39.617 229.113 39.41 229.125 39.242 229.145 cv
39.066 229.172 38.906 229.184 38.758 229.18 cv
38.645 229.184 38.566 229.156 38.523 229.102 cv
38.473 229.051 38.449 228.953 38.453 228.809 cv
38.453 225.719 li
38.449 225.594 38.48 225.496 38.543 225.434 cv
38.605 225.371 38.691 225.34 38.805 225.34 cv
42.164 225.34 li
42.195 225.34 42.223 225.352 42.254 225.367 cv
42.277 225.387 42.305 225.41 42.328 225.445 cv
42.348 225.484 42.359 225.531 42.371 225.582 cv
42.379 225.641 42.387 225.703 42.387 225.773 cv
42.387 225.914 42.367 226.023 42.328 226.102 cv
42.289 226.18 42.234 226.219 42.172 226.219 cv
39.461 226.219 li
39.461 228.344 li
39.59 228.328 39.727 228.316 39.867 228.312 cv
40.004 228.309 40.16 228.305 40.344 228.305 cv
40.758 228.305 41.125 228.359 41.438 228.461 cv
41.75 228.57 42.008 228.715 42.219 228.902 cv
42.426 229.09 42.586 229.32 42.695 229.59 cv
42.801 229.859 42.855 230.156 42.855 230.484 cv
cp
f
28.352 170.078 mo
43.54 170.078 li
43.54 184.73 li
28.352 184.73 li
cp
0 0 0 0 cmyk
ef
33.844 177.422 mo
33.844 177.75 33.824 178.082 33.785 178.418 cv
33.746 178.754 33.68 179.078 33.586 179.391 cv
33.492 179.703 33.363 179.996 33.207 180.262 cv
33.047 180.535 32.848 180.77 32.609 180.973 cv
32.367 181.176 32.082 181.336 31.754 181.449 cv
31.422 181.562 31.039 181.617 30.605 181.621 cv
30.434 181.617 30.27 181.605 30.113 181.59 cv
29.953 181.566 29.813 181.543 29.688 181.512 cv
29.559 181.48 29.453 181.449 29.367 181.414 cv
29.281 181.379 29.219 181.344 29.18 181.309 cv
29.141 181.273 29.109 181.227 29.094 181.164 cv
29.07 181.109 29.063 181.027 29.066 180.918 cv
29.063 180.84 29.066 180.77 29.074 180.715 cv
29.082 180.664 29.09 180.625 29.102 180.598 cv
29.113 180.574 29.129 180.559 29.152 180.543 cv
29.168 180.535 29.195 180.527 29.23 180.527 cv
29.273 180.527 29.336 180.543 29.414 180.57 cv
29.492 180.602 29.59 180.633 29.707 180.668 cv
29.824 180.707 29.965 180.742 30.129 180.766 cv
30.289 180.797 30.469 180.809 30.668 180.809 cv
31.047 180.809 31.371 180.738 31.645 180.59 cv
31.914 180.449 32.137 180.25 32.309 180 cv
32.48 179.754 32.609 179.469 32.695 179.145 cv
32.781 178.824 32.828 178.484 32.836 178.121 cv
32.629 178.242 32.379 178.348 32.094 178.441 cv
31.801 178.535 31.469 178.582 31.098 178.582 cv
30.672 178.582 30.316 178.527 30.031 178.41 cv
29.742 178.301 29.512 178.141 29.34 177.937 cv
29.164 177.738 29.039 177.504 28.965 177.227 cv
28.887 176.957 28.852 176.656 28.852 176.332 cv
28.852 175.996 28.898 175.68 28.996 175.375 cv
29.094 175.074 29.246 174.805 29.453 174.574 cv
29.66 174.348 29.926 174.164 30.246 174.023 cv
30.566 173.887 30.949 173.82 31.395 173.816 cv
31.711 173.82 31.988 173.859 32.234 173.937 cv
32.477 174.02 32.691 174.137 32.871 174.285 cv
33.051 174.441 33.203 174.621 33.328 174.832 cv
33.453 175.043 33.551 175.285 33.629 175.555 cv
33.703 175.824 33.758 176.117 33.793 176.43 cv
33.824 176.75 33.844 177.078 33.844 177.422 cv
cp
32.816 177.309 mo
32.813 176.812 32.781 176.391 32.719 176.047 cv
32.652 175.707 32.555 175.43 32.426 175.219 cv
32.293 175.008 32.133 174.855 31.949 174.762 cv
31.758 174.668 31.543 174.621 31.301 174.621 cv
31.043 174.621 30.824 174.668 30.648 174.758 cv
30.465 174.852 30.316 174.977 30.207 175.129 cv
30.09 175.285 30.008 175.457 29.953 175.652 cv
29.898 175.848 29.871 176.051 29.871 176.254 cv
29.871 176.488 29.895 176.699 29.945 176.891 cv
29.992 177.082 30.07 177.242 30.184 177.375 cv
30.289 177.508 30.434 177.613 30.609 177.684 cv
30.781 177.762 30.996 177.797 31.262 177.793 cv
31.551 177.797 31.836 177.754 32.109 177.66 cv
32.383 177.574 32.617 177.457 32.816 177.309 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.598 180.871 mo
36.598 181.152 36.551 181.336 36.457 181.43 cv
36.363 181.52 36.195 181.562 35.961 181.566 cv
35.723 181.562 35.563 181.52 35.473 181.43 cv
35.379 181.34 35.332 181.16 35.336 180.891 cv
35.332 180.613 35.379 180.43 35.473 180.336 cv
35.566 180.246 35.734 180.199 35.977 180.199 cv
36.211 180.199 36.371 180.246 36.461 180.336 cv
36.551 180.426 36.598 180.605 36.598 180.871 cv
cp
f
43.141 177.703 mo
43.137 178.285 43.09 178.816 43.004 179.297 cv
42.91 179.781 42.758 180.195 42.547 180.539 cv
42.328 180.883 42.051 181.152 41.711 181.34 cv
41.363 181.527 40.941 181.617 40.441 181.621 cv
39.965 181.617 39.563 181.535 39.238 181.367 cv
38.91 181.199 38.648 180.949 38.449 180.617 cv
38.246 180.289 38.102 179.883 38.023 179.398 cv
37.938 178.918 37.898 178.363 37.898 177.738 cv
37.898 177.16 37.945 176.633 38.039 176.148 cv
38.133 175.672 38.285 175.258 38.496 174.906 cv
38.707 174.562 38.984 174.293 39.328 174.102 cv
39.672 173.914 40.094 173.82 40.594 173.816 cv
41.07 173.82 41.473 173.906 41.801 174.074 cv
42.129 174.246 42.391 174.496 42.59 174.824 cv
42.789 175.156 42.93 175.562 43.016 176.043 cv
43.094 176.527 43.137 177.078 43.141 177.703 cv
cp
42.109 177.773 mo
42.105 177.398 42.094 177.059 42.07 176.754 cv
42.043 176.453 42 176.187 41.949 175.957 cv
41.895 175.73 41.828 175.535 41.742 175.363 cv
41.656 175.199 41.555 175.062 41.441 174.953 cv
41.32 174.852 41.188 174.773 41.039 174.719 cv
40.891 174.672 40.723 174.645 40.535 174.645 cv
40.203 174.645 39.934 174.723 39.727 174.879 cv
39.516 175.035 39.352 175.25 39.234 175.523 cv
39.117 175.797 39.035 176.117 38.992 176.484 cv
38.949 176.852 38.93 177.246 38.93 177.668 cv
38.93 178.238 38.957 178.723 39.016 179.113 cv
39.074 179.512 39.168 179.832 39.293 180.082 cv
39.418 180.332 39.578 180.516 39.781 180.629 cv
39.977 180.742 40.219 180.797 40.5 180.797 cv
40.719 180.797 40.91 180.762 41.078 180.691 cv
41.242 180.621 41.383 180.523 41.504 180.391 cv
41.621 180.262 41.723 180.102 41.801 179.918 cv
41.879 179.738 41.941 179.535 41.988 179.309 cv
42.035 179.086 42.066 178.848 42.082 178.586 cv
42.098 178.328 42.105 178.055 42.109 177.773 cv
cp
f
22.27 118.68 mo
43.54 118.68 li
43.54 133.328 li
22.27 133.328 li
cp
0 0 0 0 cmyk
ef
27.73 129.703 mo
27.727 129.777 27.723 129.84 27.715 129.891 cv
27.703 129.945 27.688 129.988 27.668 130.016 cv
27.645 130.051 27.621 130.074 27.598 130.082 cv
27.574 130.098 27.547 130.102 27.52 130.102 cv
23.559 130.102 li
23.531 130.102 23.508 130.098 23.484 130.082 cv
23.461 130.074 23.438 130.051 23.418 130.016 cv
23.395 129.988 23.379 129.945 23.367 129.891 cv
23.352 129.84 23.344 129.777 23.348 129.703 cv
23.344 129.633 23.352 129.574 23.367 129.523 cv
23.379 129.473 23.391 129.43 23.41 129.395 cv
23.426 129.363 23.449 129.34 23.473 129.32 cv
23.496 129.305 23.523 129.293 23.559 129.293 cv
25.145 129.293 li
25.145 123.527 li
23.676 124.398 li
23.602 124.445 23.543 124.469 23.5 124.473 cv
23.453 124.484 23.418 124.477 23.391 124.445 cv
23.359 124.422 23.34 124.379 23.332 124.32 cv
23.324 124.262 23.32 124.187 23.32 124.094 cv
23.32 124.031 23.32 123.973 23.328 123.926 cv
23.332 123.879 23.344 123.84 23.355 123.809 cv
23.363 123.777 23.379 123.75 23.402 123.727 cv
23.426 123.703 23.453 123.68 23.488 123.656 cv
25.238 122.539 li
25.25 122.527 25.27 122.516 25.297 122.508 cv
25.316 122.5 25.348 122.492 25.383 122.484 cv
25.414 122.477 25.453 122.473 25.504 122.473 cv
25.547 122.473 25.605 122.473 25.684 122.469 cv
25.773 122.473 25.852 122.477 25.918 122.48 cv
25.977 122.492 26.027 122.504 26.063 122.512 cv
26.094 122.527 26.117 122.543 26.133 122.562 cv
26.145 122.586 26.148 122.609 26.152 122.633 cv
26.152 129.293 li
27.52 129.293 li
27.547 129.293 27.578 129.305 27.609 129.32 cv
27.637 129.34 27.656 129.363 27.676 129.395 cv
27.691 129.43 27.707 129.473 27.715 129.523 cv
27.723 129.574 27.727 129.633 27.73 129.703 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.047 126.293 mo
34.043 126.875 33.996 127.406 33.91 127.887 cv
33.816 128.371 33.664 128.785 33.453 129.129 cv
33.234 129.473 32.957 129.742 32.617 129.93 cv
32.27 130.117 31.848 130.207 31.348 130.211 cv
30.871 130.207 30.469 130.125 30.145 129.957 cv
29.816 129.789 29.555 129.539 29.355 129.207 cv
29.152 128.879 29.008 128.473 28.93 127.988 cv
28.844 127.508 28.805 126.953 28.805 126.328 cv
28.805 125.75 28.852 125.223 28.945 124.738 cv
29.039 124.262 29.191 123.848 29.402 123.496 cv
29.613 123.152 29.891 122.883 30.234 122.691 cv
30.578 122.504 31 122.41 31.5 122.406 cv
31.977 122.41 32.379 122.496 32.707 122.664 cv
33.035 122.836 33.297 123.086 33.496 123.414 cv
33.695 123.746 33.836 124.152 33.922 124.633 cv
34 125.117 34.043 125.668 34.047 126.293 cv
cp
33.016 126.363 mo
33.012 125.988 33 125.648 32.977 125.344 cv
32.949 125.043 32.906 124.777 32.855 124.547 cv
32.801 124.32 32.734 124.125 32.648 123.953 cv
32.563 123.789 32.461 123.652 32.348 123.543 cv
32.227 123.441 32.094 123.363 31.945 123.309 cv
31.797 123.262 31.629 123.234 31.441 123.234 cv
31.109 123.234 30.84 123.312 30.633 123.469 cv
30.422 123.625 30.258 123.84 30.141 124.113 cv
30.023 124.387 29.941 124.707 29.898 125.074 cv
29.855 125.441 29.836 125.836 29.836 126.258 cv
29.836 126.828 29.863 127.312 29.922 127.703 cv
29.98 128.102 30.074 128.422 30.199 128.672 cv
30.324 128.922 30.484 129.105 30.688 129.219 cv
30.883 129.332 31.125 129.387 31.406 129.387 cv
31.625 129.387 31.816 129.352 31.984 129.281 cv
32.148 129.211 32.289 129.113 32.41 128.98 cv
32.527 128.852 32.629 128.691 32.707 128.508 cv
32.785 128.328 32.848 128.125 32.895 127.898 cv
32.941 127.676 32.973 127.437 32.988 127.176 cv
33.004 126.918 33.012 126.645 33.016 126.363 cv
cp
f
36.566 129.461 mo
36.566 129.742 36.52 129.926 36.426 130.02 cv
36.332 130.109 36.164 130.152 35.93 130.156 cv
35.691 130.152 35.531 130.109 35.441 130.02 cv
35.348 129.93 35.301 129.75 35.305 129.48 cv
35.301 129.203 35.348 129.02 35.441 128.926 cv
35.535 128.836 35.703 128.789 35.945 128.789 cv
36.18 128.789 36.34 128.836 36.43 128.926 cv
36.52 129.016 36.566 129.195 36.566 129.461 cv
cp
f
42.906 127.664 mo
42.906 128.07 42.836 128.434 42.699 128.75 cv
42.563 129.066 42.371 129.332 42.121 129.551 cv
41.871 129.77 41.57 129.934 41.227 130.043 cv
40.875 130.152 40.492 130.207 40.074 130.211 cv
39.836 130.207 39.613 130.191 39.406 130.16 cv
39.191 130.129 39.004 130.09 38.844 130.043 cv
38.676 129.996 38.543 129.949 38.441 129.898 cv
38.336 129.855 38.266 129.816 38.238 129.785 cv
38.207 129.758 38.188 129.734 38.176 129.707 cv
38.164 129.687 38.152 129.66 38.145 129.625 cv
38.129 129.594 38.125 129.551 38.125 129.5 cv
38.121 129.449 38.117 129.387 38.121 129.316 cv
38.117 129.254 38.121 129.195 38.129 129.141 cv
38.133 129.086 38.145 129.043 38.16 129.012 cv
38.176 128.98 38.191 128.957 38.215 128.937 cv
38.23 128.926 38.258 128.918 38.289 128.914 cv
38.328 128.918 38.387 128.941 38.469 128.988 cv
38.551 129.035 38.66 129.09 38.801 129.145 cv
38.938 129.203 39.109 129.254 39.316 129.305 cv
39.52 129.359 39.766 129.387 40.047 129.383 cv
40.309 129.387 40.547 129.355 40.77 129.289 cv
40.984 129.23 41.172 129.133 41.332 128.996 cv
41.488 128.867 41.613 128.699 41.703 128.496 cv
41.793 128.293 41.84 128.047 41.84 127.758 cv
41.84 127.516 41.801 127.305 41.727 127.117 cv
41.648 126.934 41.531 126.777 41.375 126.652 cv
41.215 126.531 41.016 126.441 40.773 126.379 cv
40.531 126.324 40.242 126.293 39.906 126.289 cv
39.668 126.293 39.461 126.305 39.293 126.324 cv
39.117 126.352 38.957 126.363 38.809 126.359 cv
38.695 126.363 38.617 126.336 38.574 126.281 cv
38.523 126.23 38.5 126.133 38.504 125.988 cv
38.504 122.898 li
38.5 122.773 38.531 122.676 38.594 122.613 cv
38.656 122.551 38.742 122.52 38.855 122.52 cv
42.215 122.52 li
42.246 122.52 42.273 122.531 42.305 122.547 cv
42.328 122.566 42.355 122.59 42.379 122.625 cv
42.398 122.664 42.41 122.711 42.422 122.762 cv
42.43 122.82 42.438 122.883 42.438 122.953 cv
42.438 123.094 42.418 123.203 42.379 123.281 cv
42.34 123.359 42.285 123.398 42.223 123.398 cv
39.512 123.398 li
39.512 125.523 li
39.641 125.508 39.777 125.496 39.918 125.492 cv
40.055 125.488 40.211 125.484 40.395 125.484 cv
40.809 125.484 41.176 125.539 41.488 125.641 cv
41.801 125.75 42.059 125.895 42.27 126.082 cv
42.477 126.27 42.637 126.5 42.746 126.77 cv
42.852 127.039 42.906 127.336 42.906 127.664 cv
cp
f
22.27 67.289 mo
43.54 67.289 li
43.54 81.941 li
22.27 81.941 li
cp
0 0 0 0 cmyk
ef
27.742 78.32 mo
27.738 78.395 27.73 78.457 27.723 78.508 cv
27.707 78.559 27.691 78.602 27.676 78.629 cv
27.652 78.664 27.633 78.687 27.609 78.699 cv
27.586 78.715 27.559 78.719 27.531 78.719 cv
23.563 78.719 li
23.531 78.719 23.508 78.715 23.488 78.699 cv
23.461 78.687 23.438 78.664 23.418 78.629 cv
23.395 78.602 23.379 78.559 23.367 78.508 cv
23.355 78.457 23.348 78.395 23.352 78.32 cv
23.348 78.25 23.355 78.191 23.367 78.141 cv
23.379 78.09 23.395 78.047 23.414 78.012 cv
23.43 77.98 23.449 77.957 23.477 77.937 cv
23.5 77.922 23.527 77.91 23.563 77.91 cv
25.148 77.91 li
25.148 72.133 li
23.68 73.008 li
23.602 73.051 23.543 73.074 23.5 73.078 cv
23.453 73.09 23.418 73.082 23.391 73.051 cv
23.363 73.027 23.344 72.984 23.336 72.926 cv
23.324 72.867 23.32 72.793 23.324 72.699 cv
23.32 72.637 23.324 72.578 23.332 72.531 cv
23.336 72.484 23.344 72.445 23.355 72.414 cv
23.367 72.383 23.383 72.355 23.406 72.332 cv
23.426 72.309 23.453 72.285 23.492 72.262 cv
25.242 71.141 li
25.258 71.133 25.277 71.121 25.301 71.109 cv
25.324 71.105 25.352 71.098 25.387 71.086 cv
25.422 71.082 25.465 71.078 25.512 71.074 cv
25.559 71.074 25.617 71.074 25.688 71.07 cv
25.781 71.074 25.859 71.078 25.922 71.082 cv
25.984 71.094 26.031 71.102 26.066 71.113 cv
26.102 71.129 26.125 71.148 26.137 71.168 cv
26.148 71.191 26.156 71.215 26.156 71.234 cv
26.156 77.91 li
27.531 77.91 li
27.559 77.91 27.586 77.922 27.617 77.937 cv
27.641 77.957 27.664 77.98 27.688 78.012 cv
27.703 78.047 27.719 78.09 27.727 78.141 cv
27.734 78.191 27.738 78.25 27.742 78.32 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
33.82 78.285 mo
33.82 78.355 33.813 78.418 33.805 78.473 cv
33.789 78.527 33.777 78.574 33.762 78.609 cv
33.746 78.648 33.723 78.676 33.691 78.691 cv
33.66 78.711 33.629 78.719 33.598 78.719 cv
29.398 78.719 li
29.34 78.719 29.293 78.715 29.254 78.699 cv
29.211 78.687 29.176 78.664 29.148 78.629 cv
29.117 78.602 29.094 78.555 29.082 78.496 cv
29.066 78.437 29.063 78.367 29.063 78.277 cv
29.063 78.203 29.063 78.133 29.07 78.074 cv
29.074 78.016 29.09 77.965 29.109 77.918 cv
29.129 77.875 29.152 77.832 29.188 77.785 cv
29.215 77.742 29.254 77.691 29.305 77.637 cv
30.824 76.078 li
31.172 75.719 31.453 75.395 31.668 75.109 cv
31.875 74.824 32.039 74.566 32.156 74.328 cv
32.273 74.098 32.348 73.883 32.387 73.687 cv
32.418 73.496 32.438 73.316 32.441 73.148 cv
32.438 72.98 32.41 72.82 32.355 72.668 cv
32.297 72.52 32.215 72.387 32.109 72.273 cv
32 72.16 31.863 72.07 31.707 72.004 cv
31.543 71.937 31.359 71.906 31.148 71.902 cv
30.902 71.906 30.68 71.937 30.484 72.004 cv
30.285 72.07 30.113 72.145 29.969 72.219 cv
29.82 72.301 29.699 72.371 29.602 72.437 cv
29.5 72.504 29.426 72.539 29.379 72.535 cv
29.352 72.539 29.324 72.531 29.305 72.512 cv
29.277 72.5 29.262 72.473 29.25 72.437 cv
29.234 72.402 29.223 72.355 29.215 72.297 cv
29.207 72.238 29.203 72.168 29.203 72.086 cv
29.203 72.027 29.203 71.977 29.207 71.934 cv
29.211 71.891 29.219 71.855 29.23 71.82 cv
29.238 71.793 29.25 71.762 29.27 71.734 cv
29.281 71.707 29.313 71.672 29.363 71.629 cv
29.406 71.59 29.488 71.535 29.605 71.461 cv
29.719 71.395 29.863 71.324 30.039 71.254 cv
30.211 71.187 30.402 71.133 30.613 71.082 cv
30.82 71.039 31.043 71.016 31.277 71.012 cv
31.645 71.016 31.965 71.066 32.242 71.168 cv
32.516 71.273 32.746 71.414 32.93 71.59 cv
33.109 71.773 33.242 71.984 33.336 72.219 cv
33.422 72.461 33.469 72.715 33.473 72.984 cv
33.469 73.23 33.445 73.473 33.406 73.711 cv
33.359 73.953 33.27 74.215 33.133 74.492 cv
32.992 74.773 32.793 75.082 32.531 75.426 cv
32.27 75.77 31.922 76.164 31.488 76.605 cv
30.285 77.863 li
33.59 77.863 li
33.617 77.863 33.648 77.875 33.68 77.891 cv
33.711 77.91 33.734 77.934 33.758 77.969 cv
33.773 78.004 33.789 78.051 33.805 78.102 cv
33.813 78.156 33.82 78.215 33.82 78.285 cv
cp
f
36.57 78.078 mo
36.566 78.359 36.52 78.543 36.43 78.637 cv
36.336 78.727 36.168 78.77 35.93 78.773 cv
35.691 78.77 35.531 78.727 35.441 78.637 cv
35.352 78.547 35.305 78.367 35.309 78.098 cv
35.305 77.82 35.352 77.637 35.445 77.543 cv
35.535 77.453 35.703 77.406 35.949 77.402 cv
36.18 77.406 36.34 77.453 36.434 77.539 cv
36.52 77.633 36.566 77.812 36.57 78.078 cv
cp
f
43.199 74.902 mo
43.195 75.488 43.148 76.02 43.063 76.5 cv
42.969 76.984 42.816 77.398 42.605 77.742 cv
42.387 78.09 42.109 78.359 41.766 78.547 cv
41.422 78.738 40.996 78.828 40.496 78.832 cv
40.012 78.828 39.609 78.746 39.285 78.578 cv
38.957 78.406 38.695 78.156 38.496 77.824 cv
38.297 77.496 38.152 77.09 38.07 76.605 cv
37.984 76.125 37.945 75.57 37.945 74.937 cv
37.945 74.363 37.992 73.832 38.086 73.344 cv
38.18 72.863 38.332 72.445 38.543 72.098 cv
38.754 71.754 39.031 71.488 39.379 71.297 cv
39.719 71.109 40.141 71.016 40.648 71.012 cv
41.125 71.016 41.527 71.098 41.855 71.266 cv
42.18 71.437 42.445 71.687 42.648 72.016 cv
42.848 72.348 42.988 72.758 43.074 73.238 cv
43.152 73.727 43.195 74.281 43.199 74.902 cv
cp
42.168 74.973 mo
42.164 74.598 42.148 74.258 42.125 73.953 cv
42.094 73.656 42.055 73.387 42.004 73.152 cv
41.949 72.922 41.883 72.727 41.801 72.559 cv
41.715 72.395 41.613 72.258 41.496 72.148 cv
41.379 72.043 41.242 71.961 41.094 71.91 cv
40.941 71.863 40.773 71.84 40.59 71.836 cv
40.254 71.84 39.984 71.918 39.777 72.074 cv
39.566 72.23 39.402 72.445 39.285 72.719 cv
39.164 72.992 39.082 73.316 39.043 73.684 cv
38.996 74.055 38.977 74.449 38.98 74.867 cv
38.977 75.437 39.004 75.918 39.066 76.316 cv
39.121 76.715 39.215 77.039 39.348 77.285 cv
39.473 77.539 39.637 77.723 39.832 77.832 cv
40.027 77.949 40.266 78.004 40.555 78.004 cv
40.77 78.004 40.961 77.969 41.129 77.898 cv
41.293 77.828 41.438 77.73 41.559 77.598 cv
41.676 77.469 41.773 77.309 41.855 77.125 cv
41.93 76.941 41.992 76.738 42.043 76.512 cv
42.086 76.289 42.121 76.047 42.141 75.785 cv
42.156 75.527 42.164 75.258 42.168 74.973 cv
cp
f
22.27 15.891 mo
43.54 15.891 li
43.54 30.539 li
22.27 30.539 li
cp
0 0 0 0 cmyk
ef
27.73 26.91 mo
27.727 26.984 27.723 27.047 27.715 27.098 cv
27.703 27.152 27.688 27.195 27.668 27.223 cv
27.645 27.258 27.621 27.281 27.598 27.289 cv
27.574 27.305 27.547 27.309 27.52 27.309 cv
23.559 27.309 li
23.531 27.309 23.508 27.305 23.484 27.289 cv
23.461 27.281 23.438 27.258 23.418 27.223 cv
23.395 27.195 23.379 27.152 23.367 27.098 cv
23.352 27.047 23.344 26.984 23.348 26.91 cv
23.344 26.84 23.352 26.781 23.367 26.73 cv
23.379 26.68 23.391 26.637 23.41 26.602 cv
23.426 26.57 23.449 26.547 23.473 26.527 cv
23.496 26.512 23.523 26.5 23.559 26.5 cv
25.145 26.5 li
25.145 20.734 li
23.676 21.605 li
23.602 21.652 23.543 21.676 23.5 21.68 cv
23.453 21.691 23.418 21.684 23.391 21.652 cv
23.359 21.629 23.34 21.586 23.332 21.527 cv
23.324 21.469 23.32 21.395 23.32 21.301 cv
23.32 21.238 23.32 21.18 23.328 21.133 cv
23.332 21.086 23.344 21.047 23.355 21.016 cv
23.363 20.984 23.379 20.957 23.402 20.934 cv
23.426 20.91 23.453 20.887 23.488 20.863 cv
25.238 19.746 li
25.25 19.734 25.27 19.723 25.297 19.715 cv
25.316 19.707 25.348 19.699 25.383 19.691 cv
25.414 19.684 25.453 19.68 25.504 19.68 cv
25.547 19.68 25.605 19.68 25.684 19.676 cv
25.773 19.68 25.852 19.684 25.918 19.687 cv
25.977 19.699 26.027 19.711 26.063 19.719 cv
26.094 19.734 26.117 19.75 26.133 19.77 cv
26.145 19.793 26.148 19.816 26.152 19.84 cv
26.152 26.5 li
27.52 26.5 li
27.547 26.5 27.578 26.512 27.609 26.527 cv
27.637 26.547 27.656 26.57 27.676 26.602 cv
27.691 26.637 27.707 26.68 27.715 26.73 cv
27.723 26.781 27.727 26.84 27.73 26.91 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
33.738 25.141 mo
33.738 25.488 33.676 25.805 33.555 26.082 cv
33.434 26.363 33.262 26.602 33.035 26.801 cv
32.809 27 32.527 27.152 32.195 27.258 cv
31.863 27.363 31.488 27.414 31.07 27.418 cv
30.816 27.414 30.578 27.395 30.359 27.355 cv
30.137 27.316 29.941 27.27 29.773 27.215 cv
29.598 27.16 29.457 27.102 29.344 27.039 cv
29.227 26.977 29.152 26.934 29.129 26.906 cv
29.098 26.879 29.078 26.852 29.063 26.824 cv
29.047 26.797 29.031 26.762 29.02 26.723 cv
29.008 26.684 29 26.637 28.992 26.582 cv
28.984 26.527 28.98 26.457 28.984 26.371 cv
28.98 26.23 28.996 26.133 29.027 26.078 cv
29.055 26.023 29.094 25.996 29.148 25.996 cv
29.184 25.996 29.254 26.027 29.359 26.09 cv
29.465 26.152 29.602 26.223 29.77 26.293 cv
29.934 26.371 30.129 26.437 30.352 26.496 cv
30.574 26.562 30.82 26.594 31.098 26.59 cv
31.355 26.594 31.59 26.559 31.793 26.488 cv
31.992 26.422 32.16 26.328 32.297 26.207 cv
32.434 26.09 32.535 25.949 32.605 25.777 cv
32.672 25.613 32.707 25.43 32.707 25.234 cv
32.707 25.02 32.66 24.828 32.574 24.652 cv
32.484 24.484 32.359 24.336 32.195 24.207 cv
32.027 24.086 31.82 23.988 31.578 23.922 cv
31.328 23.859 31.051 23.828 30.746 23.824 cv
30.004 23.824 li
29.969 23.828 29.938 23.82 29.906 23.805 cv
29.875 23.789 29.848 23.766 29.828 23.734 cv
29.805 23.703 29.785 23.664 29.773 23.613 cv
29.758 23.562 29.754 23.496 29.754 23.41 cv
29.754 23.34 29.758 23.277 29.77 23.227 cv
29.781 23.18 29.797 23.141 29.82 23.109 cv
29.836 23.082 29.863 23.062 29.895 23.047 cv
29.922 23.039 29.953 23.031 29.988 23.027 cv
30.648 23.027 li
30.906 23.031 31.137 22.996 31.344 22.926 cv
31.547 22.859 31.723 22.766 31.863 22.637 cv
32.004 22.516 32.113 22.367 32.191 22.191 cv
32.27 22.02 32.309 21.824 32.309 21.605 cv
32.309 21.453 32.281 21.305 32.23 21.16 cv
32.18 21.02 32.105 20.895 32.004 20.789 cv
31.902 20.684 31.77 20.602 31.613 20.539 cv
31.449 20.484 31.27 20.453 31.066 20.449 cv
30.84 20.453 30.629 20.488 30.441 20.551 cv
30.246 20.621 30.078 20.691 29.934 20.77 cv
29.781 20.848 29.66 20.922 29.566 20.988 cv
29.469 21.059 29.398 21.094 29.359 21.09 cv
29.332 21.094 29.309 21.09 29.289 21.078 cv
29.266 21.07 29.246 21.051 29.234 21.02 cv
29.219 20.992 29.211 20.949 29.203 20.895 cv
29.195 20.844 29.191 20.773 29.195 20.687 cv
29.191 20.629 29.195 20.578 29.203 20.531 cv
29.207 20.488 29.215 20.449 29.227 20.414 cv
29.234 20.383 29.246 20.352 29.266 20.324 cv
29.277 20.301 29.305 20.27 29.344 20.23 cv
29.383 20.191 29.457 20.137 29.57 20.066 cv
29.684 19.996 29.824 19.93 29.992 19.859 cv
30.156 19.793 30.348 19.734 30.566 19.684 cv
30.781 19.641 31.016 19.617 31.266 19.613 cv
31.617 19.617 31.926 19.66 32.191 19.75 cv
32.457 19.844 32.676 19.973 32.855 20.133 cv
33.031 20.301 33.164 20.496 33.254 20.723 cv
33.34 20.949 33.387 21.203 33.387 21.48 cv
33.387 21.719 33.355 21.941 33.293 22.145 cv
33.23 22.352 33.137 22.531 33.016 22.687 cv
32.895 22.848 32.746 22.984 32.57 23.094 cv
32.395 23.211 32.191 23.285 31.961 23.324 cv
31.961 23.336 li
32.223 23.367 32.461 23.434 32.68 23.535 cv
32.895 23.637 33.082 23.766 33.242 23.922 cv
33.395 24.078 33.516 24.262 33.605 24.473 cv
33.691 24.684 33.738 24.906 33.738 25.141 cv
cp
f
36.566 26.668 mo
36.566 26.949 36.52 27.133 36.426 27.227 cv
36.332 27.316 36.164 27.359 35.93 27.363 cv
35.691 27.359 35.531 27.316 35.441 27.227 cv
35.348 27.137 35.301 26.957 35.305 26.687 cv
35.301 26.41 35.348 26.227 35.441 26.133 cv
35.535 26.043 35.703 25.996 35.945 25.996 cv
36.18 25.996 36.34 26.043 36.43 26.133 cv
36.52 26.223 36.566 26.402 36.566 26.668 cv
cp
f
42.906 24.871 mo
42.906 25.277 42.836 25.641 42.699 25.957 cv
42.563 26.273 42.371 26.539 42.121 26.758 cv
41.871 26.977 41.57 27.141 41.227 27.25 cv
40.875 27.359 40.492 27.414 40.074 27.418 cv
39.836 27.414 39.613 27.398 39.406 27.367 cv
39.191 27.336 39.004 27.297 38.844 27.25 cv
38.676 27.203 38.543 27.156 38.441 27.105 cv
38.336 27.062 38.266 27.023 38.238 26.992 cv
38.207 26.965 38.188 26.941 38.176 26.914 cv
38.164 26.895 38.152 26.867 38.145 26.832 cv
38.129 26.801 38.125 26.758 38.125 26.707 cv
38.121 26.656 38.117 26.594 38.121 26.523 cv
38.117 26.461 38.121 26.402 38.129 26.348 cv
38.133 26.293 38.145 26.25 38.16 26.219 cv
38.176 26.187 38.191 26.164 38.215 26.145 cv
38.23 26.133 38.258 26.125 38.289 26.121 cv
38.328 26.125 38.387 26.148 38.469 26.195 cv
38.551 26.242 38.66 26.297 38.801 26.352 cv
38.938 26.41 39.109 26.461 39.316 26.512 cv
39.52 26.566 39.766 26.594 40.047 26.59 cv
40.309 26.594 40.547 26.562 40.77 26.496 cv
40.984 26.437 41.172 26.34 41.332 26.203 cv
41.488 26.074 41.613 25.906 41.703 25.703 cv
41.793 25.5 41.84 25.254 41.84 24.965 cv
41.84 24.723 41.801 24.512 41.727 24.324 cv
41.648 24.141 41.531 23.984 41.375 23.859 cv
41.215 23.738 41.016 23.648 40.773 23.586 cv
40.531 23.531 40.242 23.5 39.906 23.496 cv
39.668 23.5 39.461 23.512 39.293 23.531 cv
39.117 23.559 38.957 23.57 38.809 23.566 cv
38.695 23.57 38.617 23.543 38.574 23.488 cv
38.523 23.437 38.5 23.34 38.504 23.195 cv
38.504 20.105 li
38.5 19.98 38.531 19.883 38.594 19.82 cv
38.656 19.758 38.742 19.727 38.855 19.727 cv
42.215 19.727 li
42.246 19.727 42.273 19.738 42.305 19.754 cv
42.328 19.773 42.355 19.797 42.379 19.832 cv
42.398 19.871 42.41 19.918 42.422 19.969 cv
42.43 20.027 42.438 20.09 42.438 20.16 cv
42.438 20.301 42.418 20.41 42.379 20.488 cv
42.34 20.566 42.285 20.605 42.223 20.605 cv
39.512 20.605 li
39.512 22.73 li
39.641 22.715 39.777 22.703 39.918 22.699 cv
40.055 22.695 40.211 22.691 40.395 22.691 cv
40.809 22.691 41.176 22.746 41.488 22.848 cv
41.801 22.957 42.059 23.102 42.27 23.289 cv
42.477 23.477 42.637 23.707 42.746 23.977 cv
42.852 24.246 42.906 24.543 42.906 24.871 cv
cp
f
57.078 505.137 mo
57.074 505.211 57.07 505.273 57.063 505.324 cv
57.051 505.379 57.035 505.422 57.016 505.449 cv
56.992 505.484 56.969 505.508 56.945 505.516 cv
56.922 505.531 56.895 505.535 56.867 505.535 cv
52.906 505.535 li
52.879 505.535 52.855 505.531 52.832 505.516 cv
52.809 505.508 52.785 505.484 52.766 505.449 cv
52.742 505.422 52.727 505.379 52.715 505.324 cv
52.699 505.273 52.691 505.211 52.695 505.137 cv
52.691 505.066 52.699 505.008 52.715 504.957 cv
52.727 504.906 52.738 504.863 52.758 504.828 cv
52.773 504.797 52.797 504.773 52.82 504.754 cv
52.844 504.738 52.871 504.727 52.906 504.727 cv
54.492 504.727 li
54.492 498.961 li
53.023 499.832 li
52.949 499.879 52.891 499.902 52.848 499.906 cv
52.801 499.918 52.766 499.91 52.738 499.879 cv
52.707 499.855 52.688 499.812 52.68 499.754 cv
52.672 499.695 52.668 499.621 52.668 499.527 cv
52.668 499.465 52.668 499.406 52.676 499.359 cv
52.68 499.312 52.691 499.273 52.703 499.242 cv
52.711 499.211 52.727 499.184 52.75 499.16 cv
52.773 499.137 52.801 499.113 52.836 499.09 cv
54.586 497.973 li
54.598 497.961 54.617 497.949 54.645 497.941 cv
54.664 497.934 54.695 497.926 54.73 497.918 cv
54.762 497.91 54.801 497.906 54.852 497.906 cv
54.895 497.906 54.953 497.906 55.031 497.902 cv
55.121 497.906 55.199 497.91 55.266 497.914 cv
55.324 497.926 55.375 497.937 55.41 497.945 cv
55.441 497.961 55.465 497.977 55.48 497.996 cv
55.492 498.02 55.496 498.043 55.5 498.066 cv
55.5 504.727 li
56.867 504.727 li
56.895 504.727 56.926 504.738 56.957 504.754 cv
56.984 504.773 57.004 504.797 57.023 504.828 cv
57.039 504.863 57.055 504.906 57.063 504.957 cv
57.07 505.008 57.074 505.066 57.078 505.137 cv
cp
f
125.793 505.102 mo
125.793 505.172 125.785 505.234 125.777 505.289 cv
125.762 505.344 125.75 505.391 125.734 505.426 cv
125.719 505.465 125.695 505.492 125.664 505.508 cv
125.633 505.527 125.602 505.535 125.57 505.535 cv
121.379 505.535 li
121.324 505.535 121.277 505.531 121.238 505.516 cv
121.195 505.508 121.16 505.484 121.133 505.449 cv
121.102 505.422 121.078 505.375 121.066 505.312 cv
121.051 505.254 121.047 505.184 121.047 505.098 cv
121.047 505.023 121.047 504.953 121.055 504.891 cv
121.059 504.832 121.074 504.781 121.094 504.734 cv
121.113 504.691 121.137 504.648 121.168 504.602 cv
121.195 504.562 121.234 504.512 121.289 504.457 cv
122.805 502.898 li
123.152 502.539 123.43 502.219 123.645 501.934 cv
123.855 501.648 124.02 501.387 124.137 501.152 cv
124.246 500.918 124.324 500.707 124.363 500.516 cv
124.398 500.324 124.414 500.145 124.418 499.973 cv
124.414 499.809 124.387 499.648 124.332 499.496 cv
124.273 499.348 124.191 499.215 124.086 499.102 cv
123.977 498.992 123.844 498.902 123.684 498.832 cv
123.52 498.766 123.332 498.734 123.129 498.73 cv
122.879 498.734 122.66 498.766 122.465 498.832 cv
122.27 498.902 122.098 498.977 121.949 499.051 cv
121.801 499.133 121.676 499.203 121.582 499.266 cv
121.48 499.332 121.41 499.367 121.363 499.363 cv
121.332 499.367 121.305 499.359 121.285 499.34 cv
121.262 499.328 121.242 499.301 121.23 499.266 cv
121.215 499.234 121.207 499.187 121.199 499.125 cv
121.191 499.066 121.188 498.996 121.188 498.914 cv
121.188 498.855 121.188 498.805 121.191 498.762 cv
121.195 498.723 121.203 498.687 121.215 498.652 cv
121.223 498.625 121.234 498.594 121.254 498.562 cv
121.266 498.535 121.297 498.504 121.348 498.461 cv
121.391 498.422 121.473 498.363 121.59 498.293 cv
121.703 498.223 121.848 498.156 122.023 498.086 cv
122.195 498.02 122.387 497.961 122.598 497.91 cv
122.805 497.867 123.023 497.844 123.254 497.84 cv
123.621 497.844 123.941 497.895 124.219 497.996 cv
124.492 498.102 124.723 498.242 124.902 498.422 cv
125.082 498.602 125.219 498.812 125.313 499.051 cv
125.402 499.289 125.445 499.543 125.449 499.809 cv
125.445 500.059 125.426 500.301 125.383 500.535 cv
125.336 500.777 125.242 501.035 125.109 501.312 cv
124.969 501.594 124.77 501.906 124.508 502.246 cv
124.246 502.59 123.898 502.98 123.465 503.426 cv
122.266 504.68 li
125.566 504.68 li
125.594 504.68 125.625 504.691 125.656 504.707 cv
125.684 504.727 125.707 504.75 125.73 504.785 cv
125.746 504.824 125.762 504.871 125.777 504.918 cv
125.785 504.973 125.793 505.031 125.793 505.102 cv
cp
f
194.836 503.379 mo
194.832 503.512 194.813 503.613 194.777 503.684 cv
194.734 503.758 194.68 503.797 194.617 503.793 cv
193.758 503.793 li
193.758 505.387 li
193.754 505.422 193.746 505.449 193.734 505.469 cv
193.715 505.492 193.688 505.508 193.648 505.523 cv
193.609 505.539 193.555 505.551 193.492 505.559 cv
193.426 505.566 193.344 505.57 193.246 505.57 cv
193.145 505.57 193.066 505.566 193.004 505.559 cv
192.941 505.551 192.891 505.539 192.852 505.523 cv
192.813 505.508 192.785 505.492 192.77 505.469 cv
192.754 505.449 192.746 505.422 192.75 505.387 cv
192.75 503.793 li
189.648 503.793 li
189.602 503.797 189.566 503.789 189.535 503.777 cv
189.504 503.77 189.473 503.75 189.449 503.715 cv
189.418 503.687 189.402 503.641 189.395 503.578 cv
189.387 503.52 189.383 503.445 189.383 503.348 cv
189.383 503.277 189.383 503.211 189.387 503.152 cv
189.391 503.094 189.398 503.039 189.41 502.992 cv
189.422 502.945 189.438 502.898 189.457 502.852 cv
189.477 502.805 189.5 502.758 189.527 502.707 cv
192.23 498.098 li
192.25 498.07 192.277 498.043 192.316 498.016 cv
192.352 497.996 192.402 497.977 192.465 497.957 cv
192.523 497.945 192.594 497.934 192.684 497.926 cv
192.77 497.922 192.875 497.918 192.996 497.918 cv
193.125 497.918 193.238 497.926 193.336 497.934 cv
193.434 497.949 193.512 497.961 193.574 497.973 cv
193.629 497.992 193.676 498.012 193.711 498.035 cv
193.738 498.059 193.754 498.09 193.758 498.121 cv
193.758 502.965 li
194.617 502.965 li
194.68 502.969 194.734 503.004 194.773 503.066 cv
194.813 503.137 194.832 503.238 194.836 503.379 cv
cp
192.75 498.801 mo
192.742 498.801 li
190.305 502.965 li
192.75 502.965 li
cp
f
263.438 503.082 mo
263.434 503.414 263.383 503.734 263.285 504.047 cv
263.18 504.359 263.023 504.633 262.816 504.867 cv
262.602 505.102 262.336 505.293 262.012 505.434 cv
261.684 505.574 261.301 505.641 260.863 505.645 cv
260.547 505.641 260.266 505.605 260.027 505.527 cv
259.781 505.453 259.57 505.34 259.395 505.195 cv
259.211 505.055 259.063 504.879 258.945 504.664 cv
258.824 504.457 258.727 504.215 258.656 503.941 cv
258.578 503.672 258.527 503.379 258.5 503.055 cv
258.465 502.738 258.449 502.395 258.453 502.027 cv
258.449 501.703 258.469 501.375 258.508 501.043 cv
258.543 500.711 258.605 500.391 258.695 500.082 cv
258.781 499.773 258.902 499.484 259.059 499.211 cv
259.215 498.941 259.406 498.703 259.641 498.5 cv
259.871 498.301 260.152 498.141 260.477 498.023 cv
260.797 497.906 261.172 497.848 261.609 497.848 cv
261.75 497.848 261.898 497.859 262.047 497.875 cv
262.195 497.898 262.332 497.922 262.457 497.945 cv
262.582 497.977 262.688 498.008 262.773 498.043 cv
262.859 498.078 262.914 498.105 262.941 498.129 cv
262.969 498.152 262.988 498.176 263.004 498.199 cv
263.012 498.223 263.023 498.25 263.035 498.281 cv
263.039 498.312 263.047 498.348 263.055 498.379 cv
263.059 498.418 263.059 498.461 263.063 498.516 cv
263.059 498.586 263.059 498.648 263.059 498.699 cv
263.055 498.75 263.047 498.789 263.035 498.82 cv
263.02 498.852 263 498.875 262.98 498.891 cv
262.957 498.906 262.93 498.914 262.898 498.914 cv
262.852 498.914 262.793 498.902 262.719 498.875 cv
262.645 498.848 262.555 498.816 262.449 498.781 cv
262.344 498.75 262.215 498.719 262.066 498.691 cv
261.914 498.668 261.742 498.656 261.543 498.652 cv
261.18 498.656 260.867 498.73 260.605 498.875 cv
260.34 499.027 260.125 499.227 259.961 499.473 cv
259.797 499.727 259.672 500.016 259.594 500.344 cv
259.512 500.672 259.469 501.016 259.457 501.375 cv
259.559 501.316 259.672 501.258 259.801 501.199 cv
259.926 501.145 260.063 501.094 260.215 501.043 cv
260.363 501 260.523 500.961 260.691 500.93 cv
260.859 500.898 261.039 500.883 261.234 500.883 cv
261.641 500.883 261.988 500.941 262.27 501.051 cv
262.551 501.164 262.777 501.316 262.949 501.512 cv
263.121 501.711 263.246 501.945 263.324 502.211 cv
263.398 502.484 263.434 502.773 263.438 503.082 cv
cp
262.414 503.176 mo
262.41 502.949 262.387 502.742 262.348 502.555 cv
262.301 502.371 262.227 502.215 262.121 502.086 cv
262.016 501.957 261.875 501.855 261.699 501.785 cv
261.523 501.715 261.309 501.68 261.051 501.68 cv
260.906 501.68 260.762 501.695 260.617 501.719 cv
260.469 501.746 260.328 501.781 260.195 501.824 cv
260.063 501.871 259.934 501.922 259.809 501.984 cv
259.684 502.047 259.57 502.113 259.477 502.176 cv
259.473 502.684 259.504 503.105 259.57 503.445 cv
259.633 503.785 259.727 504.059 259.852 504.262 cv
259.973 504.469 260.129 504.613 260.313 504.699 cv
260.492 504.789 260.707 504.832 260.957 504.832 cv
261.207 504.832 261.422 504.785 261.605 504.691 cv
261.789 504.598 261.941 504.473 262.063 504.312 cv
262.184 504.156 262.273 503.98 262.328 503.781 cv
262.383 503.586 262.41 503.383 262.414 503.176 cv
cp
f
332.16 503.59 mo
332.16 503.918 332.102 504.211 331.984 504.465 cv
331.867 504.723 331.695 504.937 331.477 505.113 cv
331.254 505.293 330.984 505.426 330.66 505.512 cv
330.332 505.598 329.961 505.641 329.547 505.645 cv
329.156 505.641 328.805 505.602 328.496 505.523 cv
328.188 505.445 327.926 505.324 327.711 505.16 cv
327.496 505 327.332 504.805 327.219 504.566 cv
327.105 504.336 327.051 504.066 327.051 503.766 cv
327.051 503.531 327.09 503.312 327.168 503.109 cv
327.246 502.91 327.355 502.727 327.504 502.559 cv
327.648 502.395 327.832 502.238 328.047 502.09 cv
328.258 501.941 328.5 501.801 328.773 501.668 cv
328.539 501.551 328.332 501.426 328.152 501.285 cv
327.973 501.152 327.82 501.004 327.695 500.844 cv
327.57 500.687 327.473 500.52 327.41 500.336 cv
327.34 500.16 327.309 499.965 327.313 499.754 cv
327.309 499.492 327.355 499.242 327.457 499.008 cv
327.551 498.773 327.695 498.57 327.891 498.398 cv
328.078 498.227 328.324 498.094 328.629 497.992 cv
328.926 497.895 329.277 497.844 329.676 497.84 cv
330.059 497.844 330.387 497.891 330.668 497.98 cv
330.941 498.074 331.172 498.199 331.359 498.355 cv
331.539 498.516 331.676 498.699 331.762 498.914 cv
331.848 499.133 331.891 499.363 331.891 499.605 cv
331.891 499.805 331.855 499.996 331.793 500.18 cv
331.723 500.367 331.629 500.543 331.508 500.703 cv
331.379 500.871 331.227 501.023 331.047 501.164 cv
330.867 501.305 330.66 501.437 330.426 501.562 cv
330.703 501.703 330.949 501.844 331.168 501.984 cv
331.383 502.129 331.563 502.285 331.711 502.449 cv
331.852 502.617 331.965 502.793 332.043 502.977 cv
332.121 503.164 332.16 503.367 332.16 503.59 cv
cp
330.895 499.699 mo
330.895 499.535 330.863 499.387 330.809 499.254 cv
330.75 499.121 330.668 499.008 330.563 498.914 cv
330.449 498.82 330.313 498.75 330.152 498.703 cv
329.988 498.656 329.805 498.633 329.602 498.629 cv
329.176 498.633 328.855 498.727 328.641 498.914 cv
328.422 499.105 328.316 499.367 328.316 499.699 cv
328.316 499.852 328.34 499.996 328.395 500.125 cv
328.445 500.258 328.527 500.379 328.641 500.496 cv
328.75 500.613 328.891 500.73 329.063 500.84 cv
329.23 500.953 329.434 501.066 329.672 501.187 cv
330.063 500.984 330.367 500.762 330.578 500.516 cv
330.789 500.27 330.895 499.996 330.895 499.699 cv
cp
331.141 503.695 mo
331.141 503.516 331.105 503.355 331.039 503.207 cv
330.973 503.066 330.871 502.93 330.738 502.797 cv
330.602 502.672 330.434 502.547 330.234 502.426 cv
330.031 502.309 329.801 502.184 329.535 502.055 cv
329.285 502.18 329.066 502.301 328.887 502.418 cv
328.699 502.539 328.547 502.664 328.43 502.793 cv
328.305 502.926 328.215 503.062 328.16 503.203 cv
328.098 503.344 328.07 503.5 328.07 503.672 cv
328.07 504.051 328.199 504.344 328.461 504.551 cv
328.719 504.762 329.105 504.867 329.625 504.863 cv
330.121 504.867 330.5 504.762 330.758 504.551 cv
331.012 504.34 331.141 504.055 331.141 503.695 cv
cp
f
397.691 505.137 mo
397.688 505.211 397.684 505.273 397.676 505.324 cv
397.664 505.379 397.648 505.422 397.629 505.449 cv
397.605 505.484 397.582 505.508 397.559 505.516 cv
397.535 505.531 397.508 505.535 397.48 505.535 cv
393.52 505.535 li
393.492 505.535 393.469 505.531 393.445 505.516 cv
393.422 505.508 393.398 505.484 393.379 505.449 cv
393.355 505.422 393.34 505.379 393.328 505.324 cv
393.313 505.273 393.305 505.211 393.309 505.137 cv
393.305 505.066 393.313 505.008 393.328 504.957 cv
393.34 504.906 393.352 504.863 393.371 504.828 cv
393.387 504.797 393.41 504.773 393.434 504.754 cv
393.457 504.738 393.484 504.727 393.52 504.727 cv
395.105 504.727 li
395.105 498.961 li
393.637 499.832 li
393.563 499.879 393.504 499.902 393.461 499.906 cv
393.414 499.918 393.379 499.91 393.352 499.879 cv
393.32 499.855 393.301 499.812 393.293 499.754 cv
393.285 499.695 393.281 499.621 393.281 499.527 cv
393.281 499.465 393.281 499.406 393.289 499.359 cv
393.293 499.312 393.305 499.273 393.316 499.242 cv
393.324 499.211 393.34 499.184 393.363 499.16 cv
393.387 499.137 393.414 499.113 393.449 499.09 cv
395.199 497.973 li
395.211 497.961 395.23 497.949 395.258 497.941 cv
395.277 497.934 395.309 497.926 395.344 497.918 cv
395.375 497.91 395.414 497.906 395.465 497.906 cv
395.508 497.906 395.566 497.906 395.645 497.902 cv
395.734 497.906 395.813 497.91 395.879 497.914 cv
395.938 497.926 395.988 497.937 396.023 497.945 cv
396.055 497.961 396.078 497.977 396.094 497.996 cv
396.105 498.02 396.109 498.043 396.113 498.066 cv
396.113 504.727 li
397.48 504.727 li
397.508 504.727 397.539 504.738 397.57 504.754 cv
397.598 504.773 397.617 504.797 397.637 504.828 cv
397.652 504.863 397.668 504.906 397.676 504.957 cv
397.684 505.008 397.688 505.066 397.691 505.137 cv
cp
f
404.043 501.727 mo
404.039 502.309 403.992 502.84 403.906 503.32 cv
403.813 503.805 403.66 504.219 403.449 504.562 cv
403.23 504.906 402.953 505.176 402.613 505.363 cv
402.266 505.551 401.844 505.641 401.344 505.645 cv
400.867 505.641 400.465 505.559 400.141 505.391 cv
399.813 505.223 399.551 504.973 399.352 504.641 cv
399.148 504.312 399.004 503.906 398.926 503.422 cv
398.84 502.941 398.801 502.387 398.801 501.762 cv
398.801 501.184 398.848 500.656 398.941 500.172 cv
399.035 499.695 399.188 499.281 399.398 498.93 cv
399.609 498.586 399.887 498.316 400.23 498.125 cv
400.574 497.937 400.996 497.844 401.496 497.84 cv
401.973 497.844 402.375 497.93 402.703 498.098 cv
403.031 498.27 403.293 498.52 403.492 498.848 cv
403.691 499.18 403.832 499.586 403.918 500.066 cv
403.996 500.551 404.039 501.102 404.043 501.727 cv
cp
403.012 501.797 mo
403.008 501.422 402.996 501.082 402.973 500.777 cv
402.945 500.477 402.902 500.211 402.852 499.98 cv
402.797 499.754 402.73 499.559 402.645 499.387 cv
402.559 499.223 402.457 499.086 402.344 498.977 cv
402.223 498.875 402.09 498.797 401.941 498.742 cv
401.793 498.695 401.625 498.668 401.438 498.668 cv
401.105 498.668 400.836 498.746 400.629 498.902 cv
400.418 499.059 400.254 499.273 400.137 499.547 cv
400.02 499.82 399.938 500.141 399.895 500.508 cv
399.852 500.875 399.832 501.27 399.832 501.691 cv
399.832 502.262 399.859 502.746 399.918 503.137 cv
399.977 503.535 400.07 503.855 400.195 504.105 cv
400.32 504.355 400.48 504.539 400.684 504.652 cv
400.879 504.766 401.121 504.82 401.402 504.82 cv
401.621 504.82 401.813 504.785 401.98 504.715 cv
402.145 504.645 402.285 504.547 402.406 504.414 cv
402.523 504.285 402.625 504.125 402.703 503.941 cv
402.781 503.762 402.844 503.559 402.891 503.332 cv
402.938 503.109 402.969 502.871 402.984 502.609 cv
403 502.352 403.008 502.078 403.012 501.797 cv
cp
f
466.398 505.137 mo
466.395 505.211 466.391 505.273 466.383 505.324 cv
466.371 505.379 466.355 505.422 466.336 505.449 cv
466.313 505.484 466.289 505.508 466.266 505.516 cv
466.242 505.531 466.215 505.535 466.188 505.535 cv
462.227 505.535 li
462.199 505.535 462.176 505.531 462.152 505.516 cv
462.129 505.508 462.105 505.484 462.086 505.449 cv
462.063 505.422 462.047 505.379 462.035 505.324 cv
462.02 505.273 462.012 505.211 462.016 505.137 cv
462.012 505.066 462.02 505.008 462.035 504.957 cv
462.047 504.906 462.059 504.863 462.078 504.828 cv
462.094 504.797 462.117 504.773 462.141 504.754 cv
462.164 504.738 462.191 504.727 462.227 504.727 cv
463.813 504.727 li
463.813 498.961 li
462.344 499.832 li
462.27 499.879 462.211 499.902 462.168 499.906 cv
462.121 499.918 462.086 499.91 462.059 499.879 cv
462.027 499.855 462.008 499.812 462 499.754 cv
461.992 499.695 461.988 499.621 461.988 499.527 cv
461.988 499.465 461.988 499.406 461.996 499.359 cv
462 499.312 462.012 499.273 462.023 499.242 cv
462.031 499.211 462.047 499.184 462.07 499.16 cv
462.094 499.137 462.121 499.113 462.156 499.09 cv
463.906 497.973 li
463.918 497.961 463.938 497.949 463.965 497.941 cv
463.984 497.934 464.016 497.926 464.051 497.918 cv
464.082 497.91 464.121 497.906 464.172 497.906 cv
464.215 497.906 464.273 497.906 464.352 497.902 cv
464.441 497.906 464.52 497.91 464.586 497.914 cv
464.645 497.926 464.695 497.937 464.73 497.945 cv
464.762 497.961 464.785 497.977 464.801 497.996 cv
464.813 498.02 464.816 498.043 464.82 498.066 cv
464.82 504.727 li
466.188 504.727 li
466.215 504.727 466.246 504.738 466.277 504.754 cv
466.305 504.773 466.324 504.797 466.344 504.828 cv
466.359 504.863 466.375 504.906 466.383 504.957 cv
466.391 505.008 466.395 505.066 466.398 505.137 cv
cp
f
472.504 505.102 mo
472.504 505.172 472.496 505.234 472.488 505.289 cv
472.473 505.344 472.461 505.391 472.445 505.426 cv
472.43 505.465 472.406 505.492 472.375 505.508 cv
472.344 505.527 472.313 505.535 472.281 505.535 cv
468.09 505.535 li
468.035 505.535 467.988 505.531 467.949 505.516 cv
467.906 505.508 467.871 505.484 467.844 505.449 cv
467.813 505.422 467.789 505.375 467.777 505.312 cv
467.762 505.254 467.758 505.184 467.758 505.098 cv
467.758 505.023 467.758 504.953 467.766 504.891 cv
467.77 504.832 467.785 504.781 467.805 504.734 cv
467.824 504.691 467.848 504.648 467.879 504.602 cv
467.906 504.562 467.945 504.512 468 504.457 cv
469.516 502.898 li
469.863 502.539 470.141 502.219 470.355 501.934 cv
470.566 501.648 470.73 501.387 470.848 501.152 cv
470.957 500.918 471.035 500.707 471.074 500.516 cv
471.109 500.324 471.125 500.145 471.129 499.973 cv
471.125 499.809 471.098 499.648 471.043 499.496 cv
470.984 499.348 470.902 499.215 470.797 499.102 cv
470.688 498.992 470.555 498.902 470.395 498.832 cv
470.23 498.766 470.043 498.734 469.84 498.73 cv
469.59 498.734 469.371 498.766 469.176 498.832 cv
468.98 498.902 468.809 498.977 468.66 499.051 cv
468.512 499.133 468.387 499.203 468.293 499.266 cv
468.191 499.332 468.121 499.367 468.074 499.363 cv
468.043 499.367 468.016 499.359 467.996 499.34 cv
467.973 499.328 467.953 499.301 467.941 499.266 cv
467.926 499.234 467.918 499.187 467.91 499.125 cv
467.902 499.066 467.898 498.996 467.898 498.914 cv
467.898 498.855 467.898 498.805 467.902 498.762 cv
467.906 498.723 467.914 498.687 467.926 498.652 cv
467.934 498.625 467.945 498.594 467.965 498.562 cv
467.977 498.535 468.008 498.504 468.059 498.461 cv
468.102 498.422 468.184 498.363 468.301 498.293 cv
468.414 498.223 468.559 498.156 468.734 498.086 cv
468.906 498.02 469.098 497.961 469.309 497.91 cv
469.516 497.867 469.734 497.844 469.965 497.84 cv
470.332 497.844 470.652 497.895 470.93 497.996 cv
471.203 498.102 471.434 498.242 471.613 498.422 cv
471.793 498.602 471.93 498.812 472.023 499.051 cv
472.113 499.289 472.156 499.543 472.16 499.809 cv
472.156 500.059 472.137 500.301 472.094 500.535 cv
472.047 500.777 471.953 501.035 471.82 501.312 cv
471.68 501.594 471.48 501.906 471.219 502.246 cv
470.957 502.59 470.609 502.98 470.176 503.426 cv
468.977 504.68 li
472.277 504.68 li
472.305 504.68 472.336 504.691 472.367 504.707 cv
472.395 504.727 472.418 504.75 472.441 504.785 cv
472.457 504.824 472.473 504.871 472.488 504.918 cv
472.496 504.973 472.504 505.031 472.504 505.102 cv
cp
f
535.129 505.137 mo
535.125 505.211 535.121 505.273 535.113 505.324 cv
535.102 505.379 535.086 505.422 535.066 505.449 cv
535.043 505.484 535.02 505.508 534.996 505.516 cv
534.973 505.531 534.945 505.535 534.918 505.535 cv
530.957 505.535 li
530.93 505.535 530.906 505.531 530.883 505.516 cv
530.859 505.508 530.836 505.484 530.816 505.449 cv
530.793 505.422 530.777 505.379 530.766 505.324 cv
530.75 505.273 530.742 505.211 530.746 505.137 cv
530.742 505.066 530.75 505.008 530.766 504.957 cv
530.777 504.906 530.789 504.863 530.809 504.828 cv
530.824 504.797 530.848 504.773 530.871 504.754 cv
530.895 504.738 530.922 504.727 530.957 504.727 cv
532.543 504.727 li
532.543 498.961 li
531.074 499.832 li
531 499.879 530.941 499.902 530.898 499.906 cv
530.852 499.918 530.816 499.91 530.789 499.879 cv
530.758 499.855 530.738 499.812 530.73 499.754 cv
530.723 499.695 530.719 499.621 530.719 499.527 cv
530.719 499.465 530.719 499.406 530.727 499.359 cv
530.73 499.312 530.742 499.273 530.754 499.242 cv
530.762 499.211 530.777 499.184 530.801 499.16 cv
530.824 499.137 530.852 499.113 530.887 499.09 cv
532.637 497.973 li
532.648 497.961 532.668 497.949 532.695 497.941 cv
532.715 497.934 532.746 497.926 532.781 497.918 cv
532.813 497.91 532.852 497.906 532.902 497.906 cv
532.945 497.906 533.004 497.906 533.082 497.902 cv
533.172 497.906 533.25 497.91 533.316 497.914 cv
533.375 497.926 533.426 497.937 533.461 497.945 cv
533.492 497.961 533.516 497.977 533.531 497.996 cv
533.543 498.02 533.547 498.043 533.551 498.066 cv
533.551 504.727 li
534.918 504.727 li
534.945 504.727 534.977 504.738 535.008 504.754 cv
535.035 504.773 535.055 504.797 535.074 504.828 cv
535.09 504.863 535.105 504.906 535.113 504.957 cv
535.121 505.008 535.125 505.066 535.129 505.137 cv
cp
f
541.555 503.379 mo
541.551 503.512 541.531 503.613 541.496 503.684 cv
541.453 503.758 541.398 503.797 541.336 503.793 cv
540.477 503.793 li
540.477 505.387 li
540.473 505.422 540.465 505.449 540.453 505.469 cv
540.434 505.492 540.406 505.508 540.367 505.523 cv
540.328 505.539 540.273 505.551 540.211 505.559 cv
540.145 505.566 540.063 505.57 539.965 505.57 cv
539.863 505.57 539.785 505.566 539.723 505.559 cv
539.66 505.551 539.609 505.539 539.57 505.523 cv
539.531 505.508 539.504 505.492 539.488 505.469 cv
539.473 505.449 539.465 505.422 539.469 505.387 cv
539.469 503.793 li
536.367 503.793 li
536.32 503.797 536.285 503.789 536.254 503.777 cv
536.223 503.77 536.191 503.75 536.168 503.715 cv
536.137 503.687 536.121 503.641 536.113 503.578 cv
536.105 503.52 536.102 503.445 536.102 503.348 cv
536.102 503.277 536.102 503.211 536.105 503.152 cv
536.109 503.094 536.117 503.039 536.129 502.992 cv
536.141 502.945 536.156 502.898 536.176 502.852 cv
536.195 502.805 536.219 502.758 536.246 502.707 cv
538.949 498.098 li
538.969 498.07 538.996 498.043 539.035 498.016 cv
539.07 497.996 539.121 497.977 539.184 497.957 cv
539.242 497.945 539.313 497.934 539.402 497.926 cv
539.488 497.922 539.594 497.918 539.715 497.918 cv
539.844 497.918 539.957 497.926 540.055 497.934 cv
540.152 497.949 540.23 497.961 540.293 497.973 cv
540.348 497.992 540.395 498.012 540.43 498.035 cv
540.457 498.059 540.473 498.09 540.477 498.121 cv
540.477 502.965 li
541.336 502.965 li
541.398 502.969 541.453 503.004 541.492 503.066 cv
541.531 503.137 541.551 503.238 541.555 503.379 cv
cp
539.469 498.801 mo
539.461 498.801 li
537.023 502.965 li
539.469 502.965 li
cp
f
603.852 505.137 mo
603.848 505.211 603.844 505.273 603.836 505.324 cv
603.824 505.379 603.809 505.422 603.789 505.449 cv
603.766 505.484 603.742 505.508 603.719 505.516 cv
603.695 505.531 603.668 505.535 603.641 505.535 cv
599.68 505.535 li
599.652 505.535 599.629 505.531 599.605 505.516 cv
599.582 505.508 599.559 505.484 599.539 505.449 cv
599.516 505.422 599.5 505.379 599.488 505.324 cv
599.473 505.273 599.465 505.211 599.469 505.137 cv
599.465 505.066 599.473 505.008 599.488 504.957 cv
599.5 504.906 599.512 504.863 599.531 504.828 cv
599.547 504.797 599.57 504.773 599.594 504.754 cv
599.617 504.738 599.645 504.727 599.68 504.727 cv
601.266 504.727 li
601.266 498.961 li
599.797 499.832 li
599.723 499.879 599.664 499.902 599.621 499.906 cv
599.574 499.918 599.539 499.91 599.512 499.879 cv
599.48 499.855 599.461 499.812 599.453 499.754 cv
599.445 499.695 599.441 499.621 599.441 499.527 cv
599.441 499.465 599.441 499.406 599.449 499.359 cv
599.453 499.312 599.465 499.273 599.477 499.242 cv
599.484 499.211 599.5 499.184 599.523 499.16 cv
599.547 499.137 599.574 499.113 599.609 499.09 cv
601.359 497.973 li
601.371 497.961 601.391 497.949 601.418 497.941 cv
601.438 497.934 601.469 497.926 601.504 497.918 cv
601.535 497.91 601.574 497.906 601.625 497.906 cv
601.668 497.906 601.727 497.906 601.805 497.902 cv
601.895 497.906 601.973 497.91 602.039 497.914 cv
602.098 497.926 602.148 497.937 602.184 497.945 cv
602.215 497.961 602.238 497.977 602.254 497.996 cv
602.266 498.02 602.27 498.043 602.273 498.066 cv
602.273 504.727 li
603.641 504.727 li
603.668 504.727 603.699 504.738 603.73 504.754 cv
603.758 504.773 603.777 504.797 603.797 504.828 cv
603.813 504.863 603.828 504.906 603.836 504.957 cv
603.844 505.008 603.848 505.066 603.852 505.137 cv
cp
f
610.148 503.082 mo
610.145 503.414 610.094 503.734 609.996 504.047 cv
609.891 504.359 609.734 504.633 609.527 504.867 cv
609.313 505.102 609.047 505.293 608.723 505.434 cv
608.395 505.574 608.012 505.641 607.574 505.645 cv
607.258 505.641 606.977 505.605 606.738 505.527 cv
606.492 505.453 606.281 505.34 606.105 505.195 cv
605.922 505.055 605.773 504.879 605.656 504.664 cv
605.535 504.457 605.438 504.215 605.367 503.941 cv
605.289 503.672 605.238 503.379 605.211 503.055 cv
605.176 502.738 605.16 502.395 605.164 502.027 cv
605.16 501.703 605.18 501.375 605.219 501.043 cv
605.254 500.711 605.316 500.391 605.406 500.082 cv
605.492 499.773 605.613 499.484 605.77 499.211 cv
605.926 498.941 606.117 498.703 606.352 498.5 cv
606.582 498.301 606.863 498.141 607.188 498.023 cv
607.508 497.906 607.883 497.848 608.32 497.848 cv
608.461 497.848 608.609 497.859 608.758 497.875 cv
608.906 497.898 609.043 497.922 609.168 497.945 cv
609.293 497.977 609.398 498.008 609.484 498.043 cv
609.57 498.078 609.625 498.105 609.652 498.129 cv
609.68 498.152 609.699 498.176 609.715 498.199 cv
609.723 498.223 609.734 498.25 609.746 498.281 cv
609.75 498.312 609.758 498.348 609.766 498.379 cv
609.77 498.418 609.77 498.461 609.773 498.516 cv
609.77 498.586 609.77 498.648 609.77 498.699 cv
609.766 498.75 609.758 498.789 609.746 498.82 cv
609.73 498.852 609.711 498.875 609.691 498.891 cv
609.668 498.906 609.641 498.914 609.609 498.914 cv
609.563 498.914 609.504 498.902 609.43 498.875 cv
609.355 498.848 609.266 498.816 609.16 498.781 cv
609.055 498.75 608.926 498.719 608.777 498.691 cv
608.625 498.668 608.453 498.656 608.254 498.652 cv
607.891 498.656 607.578 498.73 607.316 498.875 cv
607.051 499.027 606.836 499.227 606.672 499.473 cv
606.508 499.727 606.383 500.016 606.305 500.344 cv
606.223 500.672 606.18 501.016 606.168 501.375 cv
606.27 501.316 606.383 501.258 606.512 501.199 cv
606.637 501.145 606.773 501.094 606.926 501.043 cv
607.074 501 607.234 500.961 607.402 500.93 cv
607.57 500.898 607.75 500.883 607.945 500.883 cv
608.352 500.883 608.699 500.941 608.98 501.051 cv
609.262 501.164 609.488 501.316 609.66 501.512 cv
609.832 501.711 609.957 501.945 610.035 502.211 cv
610.109 502.484 610.145 502.773 610.148 503.082 cv
cp
609.125 503.176 mo
609.121 502.949 609.098 502.742 609.059 502.555 cv
609.012 502.371 608.938 502.215 608.832 502.086 cv
608.727 501.957 608.586 501.855 608.41 501.785 cv
608.234 501.715 608.02 501.68 607.762 501.68 cv
607.617 501.68 607.473 501.695 607.328 501.719 cv
607.18 501.746 607.039 501.781 606.906 501.824 cv
606.773 501.871 606.645 501.922 606.52 501.984 cv
606.395 502.047 606.281 502.113 606.188 502.176 cv
606.184 502.684 606.215 503.105 606.281 503.445 cv
606.344 503.785 606.438 504.059 606.563 504.262 cv
606.684 504.469 606.84 504.613 607.023 504.699 cv
607.203 504.789 607.418 504.832 607.668 504.832 cv
607.918 504.832 608.133 504.785 608.316 504.691 cv
608.5 504.598 608.652 504.473 608.773 504.312 cv
608.895 504.156 608.984 503.98 609.039 503.781 cv
609.094 503.586 609.121 503.383 609.125 503.176 cv
cp
f
16.977 312.984 mo
17.02 312.988 17.055 312.996 17.086 313.008 cv
17.117 313.027 17.145 313.062 17.164 313.109 cv
17.184 313.164 17.195 313.234 17.211 313.328 cv
17.219 313.422 17.227 313.547 17.227 313.703 cv
17.227 313.84 17.219 313.953 17.211 314.035 cv
17.195 314.121 17.184 314.187 17.16 314.238 cv
17.141 314.293 17.105 314.332 17.063 314.359 cv
17.023 314.391 16.973 314.418 16.906 314.434 cv
14.531 315.363 li
14.262 315.477 14.016 315.59 13.785 315.703 cv
13.563 315.82 13.367 315.957 13.203 316.117 cv
13.043 316.281 12.914 316.473 12.82 316.687 cv
12.73 316.91 12.688 317.172 12.684 317.473 cv
12.684 318.371 li
16.977 318.371 li
17.02 318.375 17.055 318.387 17.086 318.406 cv
17.117 318.434 17.145 318.469 17.16 318.516 cv
17.18 318.566 17.191 318.633 17.207 318.719 cv
17.219 318.805 17.227 318.914 17.227 319.039 cv
17.227 319.172 17.219 319.277 17.207 319.363 cv
17.191 319.449 17.18 319.52 17.16 319.57 cv
17.145 319.625 17.117 319.66 17.086 319.68 cv
17.055 319.703 17.02 319.715 16.977 319.711 cv
7.641 319.711 li
7.438 319.715 7.297 319.66 7.215 319.551 cv
7.137 319.445 7.098 319.332 7.094 319.211 cv
7.094 317.07 li
7.098 316.82 7.102 316.605 7.113 316.434 cv
7.129 316.266 7.145 316.113 7.156 315.977 cv
7.227 315.59 7.332 315.246 7.477 314.945 cv
7.625 314.648 7.813 314.398 8.031 314.195 cv
8.258 313.992 8.512 313.84 8.801 313.738 cv
9.09 313.637 9.41 313.586 9.754 313.586 cv
10.094 313.586 10.395 313.633 10.66 313.723 cv
10.93 313.816 11.168 313.949 11.371 314.117 cv
11.582 314.289 11.758 314.492 11.906 314.73 cv
12.055 314.973 12.184 315.242 12.285 315.535 cv
12.363 315.371 12.453 315.219 12.563 315.082 cv
12.676 314.949 12.813 314.824 12.965 314.703 cv
13.125 314.59 13.305 314.477 13.504 314.371 cv
13.707 314.27 13.934 314.168 14.188 314.059 cv
16.406 313.156 li
16.594 313.086 16.727 313.039 16.801 313.016 cv
16.879 313 16.938 312.988 16.977 312.984 cv
cp
9.895 315.004 mo
9.504 315.004 9.168 315.094 8.895 315.27 cv
8.621 315.449 8.426 315.746 8.305 316.156 cv
8.27 316.289 8.242 316.434 8.227 316.598 cv
8.211 316.762 8.203 316.977 8.203 317.238 cv
8.203 318.371 li
11.602 318.371 li
11.602 317.062 li
11.602 316.711 11.559 316.406 11.473 316.145 cv
11.387 315.891 11.27 315.676 11.113 315.504 cv
10.965 315.336 10.781 315.211 10.57 315.125 cv
10.363 315.047 10.141 315.004 9.895 315.004 cv
cp
f
16.984 305.184 mo
17.031 305.187 17.066 305.195 17.09 305.211 cv
17.121 305.23 17.145 305.266 17.164 305.309 cv
17.184 305.355 17.195 305.414 17.211 305.488 cv
17.219 305.566 17.227 305.66 17.227 305.766 cv
17.227 305.891 17.219 305.988 17.211 306.059 cv
17.195 306.137 17.184 306.195 17.164 306.238 cv
17.145 306.285 17.121 306.316 17.09 306.328 cv
17.066 306.348 17.031 306.355 16.984 306.352 cv
16.059 306.352 li
16.504 306.754 16.824 307.148 17.023 307.535 cv
17.227 307.93 17.324 308.324 17.328 308.719 cv
17.324 309.191 17.25 309.586 17.094 309.902 cv
16.941 310.223 16.73 310.48 16.461 310.676 cv
16.195 310.879 15.883 311.02 15.523 311.102 cv
15.168 311.191 14.734 311.234 14.227 311.23 cv
9.973 311.23 li
9.934 311.234 9.898 311.227 9.867 311.203 cv
9.84 311.187 9.816 311.152 9.789 311.098 cv
9.77 311.051 9.754 310.98 9.742 310.895 cv
9.738 310.812 9.734 310.711 9.73 310.582 cv
9.734 310.461 9.738 310.355 9.742 310.27 cv
9.754 310.187 9.77 310.121 9.789 310.074 cv
9.816 310.027 9.84 309.992 9.867 309.969 cv
9.898 309.949 9.934 309.941 9.973 309.937 cv
14.055 309.937 li
14.469 309.941 14.797 309.91 15.043 309.848 cv
15.289 309.789 15.5 309.699 15.672 309.574 cv
15.852 309.457 15.984 309.301 16.078 309.109 cv
16.176 308.926 16.227 308.707 16.223 308.457 cv
16.227 308.137 16.109 307.816 15.879 307.492 cv
15.652 307.176 15.316 306.836 14.871 306.477 cv
9.973 306.477 li
9.934 306.477 9.898 306.469 9.867 306.449 cv
9.84 306.434 9.816 306.398 9.789 306.344 cv
9.77 306.293 9.754 306.227 9.742 306.145 cv
9.738 306.066 9.734 305.961 9.73 305.828 cv
9.734 305.707 9.738 305.602 9.742 305.516 cv
9.754 305.434 9.77 305.371 9.789 305.324 cv
9.816 305.281 9.84 305.246 9.867 305.219 cv
9.898 305.199 9.934 305.187 9.973 305.184 cv
cp
f
16.984 296.773 mo
17.031 296.773 17.066 296.785 17.09 296.805 cv
17.121 296.828 17.145 296.863 17.164 296.906 cv
17.184 296.957 17.195 297.02 17.211 297.102 cv
17.219 297.184 17.227 297.289 17.227 297.41 cv
17.227 297.543 17.219 297.648 17.211 297.73 cv
17.195 297.816 17.184 297.883 17.164 297.926 cv
17.145 297.977 17.121 298.008 17.09 298.027 cv
17.066 298.051 17.031 298.062 16.984 298.059 cv
12.879 298.059 li
12.48 298.062 12.16 298.094 11.914 298.152 cv
11.672 298.219 11.461 298.309 11.281 298.426 cv
11.105 298.543 10.969 298.699 10.875 298.887 cv
10.781 299.082 10.734 299.301 10.734 299.547 cv
10.734 299.871 10.852 300.195 11.078 300.516 cv
11.313 300.84 11.645 301.176 12.082 301.527 cv
16.984 301.527 li
17.031 301.531 17.066 301.543 17.09 301.559 cv
17.121 301.582 17.145 301.613 17.164 301.66 cv
17.184 301.707 17.195 301.773 17.211 301.852 cv
17.219 301.937 17.227 302.043 17.227 302.172 cv
17.227 302.301 17.219 302.406 17.211 302.484 cv
17.195 302.57 17.184 302.637 17.164 302.684 cv
17.145 302.738 17.121 302.77 17.09 302.785 cv
17.066 302.805 17.031 302.816 16.984 302.812 cv
9.973 302.812 li
9.934 302.816 9.898 302.809 9.867 302.789 cv
9.84 302.777 9.816 302.746 9.789 302.695 cv
9.77 302.652 9.754 302.59 9.742 302.516 cv
9.738 302.445 9.734 302.352 9.73 302.227 cv
9.734 302.117 9.738 302.02 9.742 301.941 cv
9.754 301.867 9.77 301.809 9.789 301.766 cv
9.816 301.727 9.84 301.699 9.867 301.68 cv
9.898 301.664 9.934 301.656 9.973 301.652 cv
10.898 301.652 li
10.457 301.262 10.137 300.867 9.93 300.473 cv
9.727 300.082 9.621 299.684 9.621 299.281 cv
9.621 298.812 9.703 298.422 9.859 298.102 cv
10.023 297.785 10.234 297.523 10.496 297.324 cv
10.762 297.129 11.07 296.988 11.426 296.902 cv
11.781 296.816 12.211 296.773 12.707 296.773 cv
cp
f
16.469 290.898 mo
16.625 290.898 16.742 290.91 16.828 290.93 cv
16.918 290.953 16.984 290.984 17.023 291.023 cv
17.066 291.066 17.105 291.129 17.141 291.211 cv
17.176 291.297 17.203 291.391 17.23 291.496 cv
17.25 291.605 17.27 291.719 17.289 291.836 cv
17.301 291.953 17.309 292.074 17.313 292.191 cv
17.309 292.559 17.262 292.871 17.168 293.129 cv
17.074 293.391 16.93 293.602 16.73 293.766 cv
16.539 293.934 16.293 294.055 15.992 294.129 cv
15.695 294.207 15.344 294.246 14.934 294.242 cv
10.836 294.242 li
10.836 295.223 li
10.84 295.301 10.797 295.363 10.711 295.41 cv
10.629 295.457 10.496 295.48 10.305 295.48 cv
10.211 295.48 10.129 295.477 10.059 295.461 cv
9.996 295.453 9.938 295.434 9.891 295.41 cv
9.848 295.391 9.816 295.363 9.797 295.328 cv
9.781 295.297 9.773 295.262 9.77 295.215 cv
9.77 294.242 li
8.102 294.242 li
8.07 294.246 8.035 294.234 8 294.215 cv
7.973 294.199 7.945 294.168 7.918 294.113 cv
7.898 294.066 7.883 294 7.867 293.914 cv
7.859 293.836 7.852 293.73 7.852 293.602 cv
7.852 293.473 7.859 293.367 7.867 293.285 cv
7.883 293.203 7.898 293.137 7.918 293.09 cv
7.945 293.043 7.973 293.012 8 292.988 cv
8.035 292.973 8.07 292.961 8.102 292.957 cv
9.77 292.957 li
9.77 291.156 li
9.773 291.117 9.781 291.082 9.797 291.047 cv
9.816 291.02 9.848 290.992 9.891 290.965 cv
9.938 290.945 9.996 290.93 10.059 290.914 cv
10.129 290.906 10.211 290.898 10.305 290.898 cv
10.496 290.898 10.629 290.922 10.711 290.969 cv
10.797 291.016 10.84 291.078 10.836 291.156 cv
10.836 292.957 li
14.75 292.957 li
15.234 292.961 15.598 292.891 15.844 292.742 cv
16.094 292.602 16.219 292.344 16.215 291.973 cv
16.219 291.859 16.207 291.754 16.18 291.656 cv
16.16 291.566 16.137 291.484 16.105 291.406 cv
16.082 291.336 16.055 291.273 16.031 291.219 cv
16.008 291.172 15.996 291.125 15.996 291.078 cv
15.996 291.055 16.004 291.027 16.016 291.004 cv
16.031 290.98 16.055 290.965 16.09 290.949 cv
16.129 290.941 16.18 290.93 16.238 290.914 cv
16.305 290.906 16.383 290.898 16.469 290.898 cv
cp
f
16.984 287.883 mo
17.031 287.887 17.066 287.898 17.09 287.914 cv
17.121 287.937 17.145 287.969 17.164 288.016 cv
17.184 288.062 17.195 288.129 17.211 288.207 cv
17.219 288.293 17.227 288.398 17.227 288.527 cv
17.227 288.656 17.219 288.762 17.211 288.84 cv
17.195 288.926 17.184 288.992 17.164 289.039 cv
17.145 289.094 17.121 289.125 17.09 289.141 cv
17.066 289.16 17.031 289.172 16.984 289.168 cv
9.973 289.168 li
9.938 289.172 9.906 289.16 9.871 289.141 cv
9.844 289.125 9.816 289.094 9.793 289.039 cv
9.773 288.992 9.758 288.926 9.746 288.84 cv
9.738 288.762 9.734 288.656 9.73 288.527 cv
9.734 288.398 9.738 288.293 9.746 288.207 cv
9.758 288.129 9.773 288.062 9.793 288.016 cv
9.816 287.969 9.844 287.937 9.871 287.914 cv
9.906 287.898 9.938 287.887 9.973 287.883 cv
cp
7.602 287.734 mo
7.906 287.734 8.113 287.793 8.219 287.906 cv
8.332 288.02 8.387 288.23 8.383 288.535 cv
8.387 288.84 8.332 289.047 8.223 289.156 cv
8.117 289.273 7.914 289.328 7.617 289.324 cv
7.316 289.328 7.113 289.27 7.004 289.152 cv
6.898 289.039 6.844 288.828 6.84 288.52 cv
6.844 288.219 6.898 288.016 7 287.902 cv
7.109 287.793 7.309 287.734 7.602 287.734 cv
cp
f
16.984 275.059 mo
17.031 275.062 17.066 275.07 17.09 275.09 cv
17.121 275.113 17.145 275.148 17.164 275.191 cv
17.184 275.242 17.195 275.309 17.211 275.387 cv
17.219 275.473 17.227 275.574 17.227 275.699 cv
17.227 275.832 17.219 275.941 17.211 276.02 cv
17.195 276.105 17.184 276.172 17.164 276.219 cv
17.145 276.273 17.121 276.309 17.09 276.324 cv
17.066 276.348 17.031 276.355 16.984 276.355 cv
12.723 276.355 li
12.43 276.355 12.16 276.383 11.914 276.434 cv
11.672 276.488 11.461 276.57 11.281 276.684 cv
11.105 276.797 10.969 276.941 10.875 277.117 cv
10.781 277.297 10.734 277.508 10.734 277.742 cv
10.734 278.039 10.852 278.336 11.078 278.633 cv
11.313 278.937 11.645 279.266 12.082 279.621 cv
16.984 279.621 li
17.031 279.625 17.066 279.637 17.09 279.652 cv
17.121 279.676 17.145 279.707 17.164 279.754 cv
17.184 279.805 17.195 279.871 17.211 279.953 cv
17.219 280.039 17.227 280.145 17.227 280.266 cv
17.227 280.387 17.219 280.488 17.211 280.574 cv
17.195 280.66 17.184 280.73 17.164 280.777 cv
17.145 280.832 17.121 280.863 17.09 280.879 cv
17.066 280.898 17.031 280.91 16.984 280.906 cv
12.723 280.906 li
12.43 280.91 12.16 280.937 11.914 280.992 cv
11.672 281.051 11.461 281.137 11.281 281.25 cv
11.105 281.363 10.969 281.508 10.875 281.68 cv
10.781 281.859 10.734 282.066 10.734 282.301 cv
10.734 282.602 10.852 282.898 11.078 283.199 cv
11.313 283.5 11.645 283.828 12.082 284.18 cv
16.984 284.18 li
17.031 284.184 17.066 284.195 17.09 284.211 cv
17.121 284.234 17.145 284.266 17.164 284.312 cv
17.184 284.359 17.195 284.426 17.211 284.504 cv
17.219 284.59 17.227 284.695 17.227 284.824 cv
17.227 284.953 17.219 285.059 17.211 285.137 cv
17.195 285.223 17.184 285.289 17.164 285.336 cv
17.145 285.391 17.121 285.422 17.09 285.437 cv
17.066 285.457 17.031 285.469 16.984 285.465 cv
9.973 285.465 li
9.934 285.469 9.898 285.461 9.867 285.441 cv
9.84 285.43 9.816 285.398 9.789 285.348 cv
9.77 285.305 9.754 285.242 9.742 285.168 cv
9.738 285.098 9.734 285.004 9.73 284.879 cv
9.734 284.77 9.738 284.672 9.742 284.594 cv
9.754 284.52 9.77 284.461 9.789 284.418 cv
9.816 284.379 9.84 284.352 9.867 284.332 cv
9.898 284.316 9.934 284.309 9.973 284.305 cv
10.898 284.305 li
10.457 283.914 10.137 283.531 9.93 283.156 cv
9.727 282.789 9.621 282.41 9.621 282.027 cv
9.621 281.738 9.656 281.48 9.723 281.246 cv
9.793 281.02 9.887 280.812 10.008 280.633 cv
10.129 280.457 10.273 280.309 10.441 280.18 cv
10.613 280.059 10.805 279.953 11.008 279.867 cv
10.758 279.637 10.543 279.414 10.363 279.203 cv
10.191 278.992 10.047 278.789 9.934 278.594 cv
9.828 278.398 9.75 278.211 9.695 278.027 cv
9.648 277.844 9.621 277.656 9.621 277.469 cv
9.621 277.016 9.703 276.637 9.859 276.332 cv
10.023 276.027 10.234 275.781 10.496 275.586 cv
10.762 275.398 11.07 275.262 11.426 275.18 cv
11.781 275.102 12.156 275.062 12.551 275.059 cv
cp
f
13.176 266.727 mo
13.379 266.73 13.52 266.781 13.605 266.879 cv
13.691 266.984 13.734 267.102 13.734 267.227 cv
13.734 271.844 li
14.125 271.848 14.477 271.809 14.789 271.727 cv
15.102 271.652 15.371 271.52 15.59 271.336 cv
15.816 271.156 15.988 270.922 16.105 270.625 cv
16.23 270.336 16.289 269.977 16.285 269.551 cv
16.289 269.219 16.262 268.922 16.203 268.66 cv
16.152 268.398 16.09 268.172 16.02 267.98 cv
15.953 267.793 15.895 267.637 15.836 267.512 cv
15.785 267.391 15.758 267.297 15.754 267.234 cv
15.758 267.199 15.766 267.168 15.781 267.137 cv
15.801 267.109 15.828 267.086 15.863 267.066 cv
15.902 267.055 15.953 267.043 16.016 267.031 cv
16.082 267.027 16.16 267.023 16.254 267.02 cv
16.324 267.023 16.383 267.027 16.43 267.027 cv
16.477 267.035 16.52 267.039 16.559 267.047 cv
16.598 267.055 16.633 267.07 16.664 267.086 cv
16.695 267.109 16.727 267.133 16.754 267.156 cv
16.785 267.187 16.832 267.27 16.895 267.41 cv
16.961 267.551 17.023 267.734 17.086 267.957 cv
17.148 268.184 17.203 268.441 17.254 268.734 cv
17.301 269.027 17.324 269.34 17.328 269.672 cv
17.324 270.25 17.246 270.758 17.086 271.187 cv
16.926 271.625 16.688 271.988 16.371 272.281 cv
16.055 272.582 15.66 272.805 15.18 272.953 cv
14.703 273.102 14.145 273.176 13.508 273.176 cv
12.91 273.176 12.371 273.102 11.887 272.945 cv
11.41 272.793 11 272.566 10.664 272.27 cv
10.328 271.977 10.07 271.621 9.891 271.207 cv
9.711 270.793 9.621 270.328 9.621 269.812 cv
9.621 269.262 9.711 268.793 9.887 268.406 cv
10.066 268.02 10.305 267.703 10.602 267.449 cv
10.902 267.203 11.254 267.02 11.652 266.902 cv
12.059 266.789 12.488 266.73 12.941 266.727 cv
cp
12.793 268.02 mo
12.117 268.004 11.586 268.156 11.203 268.473 cv
10.82 268.789 10.629 269.258 10.625 269.875 cv
10.629 270.199 10.688 270.48 10.805 270.719 cv
10.926 270.961 11.086 271.16 11.281 271.32 cv
11.48 271.484 11.711 271.609 11.973 271.695 cv
12.234 271.785 12.508 271.836 12.793 271.844 cv
cp
f
6.441 258.555 mo
7.488 259.051 8.559 259.418 9.656 259.66 cv
10.758 259.902 11.863 260.023 12.973 260.023 cv
14.09 260.023 15.199 259.902 16.293 259.652 cv
17.391 259.41 18.461 259.047 19.516 258.57 cv
19.574 258.547 19.629 258.535 19.676 258.527 cv
19.719 258.527 19.754 258.543 19.785 258.578 cv
19.813 258.617 19.832 258.672 19.848 258.746 cv
19.855 258.824 19.863 258.93 19.867 259.055 cv
19.863 259.152 19.859 259.23 19.859 259.297 cv
19.852 259.367 19.844 259.426 19.828 259.473 cv
19.813 259.523 19.793 259.566 19.773 259.594 cv
19.75 259.629 19.727 259.652 19.703 259.664 cv
19.172 259.945 18.637 260.191 18.094 260.402 cv
17.551 260.621 17 260.801 16.441 260.941 cv
15.879 261.09 15.313 261.199 14.738 261.27 cv
14.164 261.348 13.582 261.383 12.996 261.379 cv
12.41 261.383 11.832 261.344 11.258 261.258 cv
10.688 261.18 10.121 261.062 9.555 260.914 cv
8.992 260.766 8.438 260.586 7.891 260.375 cv
7.348 260.164 6.805 259.926 6.27 259.656 cv
6.25 259.652 6.234 259.637 6.215 259.613 cv
6.203 259.59 6.188 259.559 6.168 259.516 cv
6.156 259.477 6.145 259.418 6.133 259.344 cv
6.129 259.273 6.125 259.18 6.121 259.062 cv
6.125 258.945 6.133 258.852 6.145 258.773 cv
6.164 258.703 6.184 258.645 6.207 258.602 cv
6.234 258.562 6.27 258.539 6.309 258.531 cv
6.355 258.527 6.398 258.535 6.441 258.555 cv
cp
f
16.977 245.273 mo
17.02 245.273 17.055 245.285 17.086 245.305 cv
17.117 245.328 17.145 245.367 17.16 245.418 cv
17.18 245.473 17.191 245.539 17.207 245.621 cv
17.219 245.707 17.227 245.816 17.227 245.945 cv
17.227 246.074 17.219 246.18 17.207 246.266 cv
17.191 246.355 17.18 246.426 17.16 246.477 cv
17.145 246.527 17.117 246.562 17.086 246.582 cv
17.055 246.605 17.02 246.617 16.977 246.613 cv
8.195 246.613 li
8.195 246.629 li
17.016 250.184 li
17.055 250.199 17.086 250.223 17.109 250.25 cv
17.137 250.281 17.16 250.324 17.176 250.375 cv
17.195 250.434 17.207 250.496 17.215 250.57 cv
17.223 250.645 17.227 250.734 17.227 250.836 cv
17.227 250.949 17.219 251.043 17.211 251.117 cv
17.195 251.199 17.184 251.266 17.168 251.312 cv
17.152 251.367 17.133 251.406 17.102 251.434 cv
17.078 251.465 17.047 251.484 17.016 251.492 cv
8.195 254.891 li
8.195 254.898 li
16.977 254.898 li
17.02 254.902 17.055 254.91 17.086 254.93 cv
17.117 254.953 17.145 254.992 17.16 255.043 cv
17.18 255.098 17.191 255.168 17.207 255.25 cv
17.219 255.34 17.227 255.449 17.227 255.578 cv
17.227 255.711 17.219 255.816 17.207 255.902 cv
17.191 255.988 17.18 256.059 17.16 256.105 cv
17.145 256.16 17.117 256.195 17.086 256.211 cv
17.055 256.234 17.02 256.242 16.977 256.238 cv
7.703 256.238 li
7.488 256.242 7.332 256.184 7.234 256.066 cv
7.145 255.949 7.098 255.82 7.094 255.676 cv
7.094 254.852 li
7.098 254.687 7.113 254.539 7.141 254.41 cv
7.176 254.285 7.223 254.176 7.289 254.078 cv
7.359 253.984 7.445 253.902 7.547 253.84 cv
7.652 253.777 7.777 253.723 7.914 253.676 cv
15.215 250.789 li
15.215 250.75 li
7.938 247.75 li
7.785 247.695 7.652 247.633 7.539 247.562 cv
7.434 247.496 7.344 247.418 7.277 247.336 cv
7.215 247.254 7.168 247.164 7.137 247.062 cv
7.109 246.965 7.098 246.848 7.094 246.715 cv
7.094 245.852 li
7.098 245.773 7.109 245.695 7.129 245.625 cv
7.156 245.555 7.191 245.496 7.238 245.445 cv
7.289 245.395 7.352 245.352 7.426 245.32 cv
7.504 245.289 7.598 245.273 7.703 245.273 cv
cp
f
16.984 241.453 mo
17.031 241.457 17.066 241.469 17.09 241.484 cv
17.121 241.508 17.145 241.539 17.164 241.586 cv
17.184 241.633 17.195 241.699 17.211 241.777 cv
17.219 241.863 17.227 241.969 17.227 242.098 cv
17.227 242.227 17.219 242.332 17.211 242.41 cv
17.195 242.496 17.184 242.562 17.164 242.609 cv
17.145 242.664 17.121 242.695 17.09 242.711 cv
17.066 242.73 17.031 242.742 16.984 242.738 cv
9.973 242.738 li
9.938 242.742 9.906 242.73 9.871 242.711 cv
9.844 242.695 9.816 242.664 9.793 242.609 cv
9.773 242.562 9.758 242.496 9.746 242.41 cv
9.738 242.332 9.734 242.227 9.73 242.098 cv
9.734 241.969 9.738 241.863 9.746 241.777 cv
9.758 241.699 9.773 241.633 9.793 241.586 cv
9.816 241.539 9.844 241.508 9.871 241.484 cv
9.906 241.469 9.938 241.457 9.973 241.453 cv
cp
7.602 241.305 mo
7.906 241.305 8.113 241.363 8.219 241.477 cv
8.332 241.59 8.387 241.801 8.383 242.105 cv
8.387 242.41 8.332 242.617 8.223 242.727 cv
8.117 242.844 7.914 242.898 7.617 242.895 cv
7.316 242.898 7.113 242.84 7.004 242.723 cv
6.898 242.609 6.844 242.398 6.84 242.09 cv
6.844 241.789 6.898 241.586 7 241.473 cv
7.109 241.363 7.309 241.305 7.602 241.305 cv
cp
f
16.984 233.031 mo
17.031 233.031 17.066 233.043 17.09 233.062 cv
17.121 233.086 17.145 233.121 17.164 233.164 cv
17.184 233.215 17.195 233.277 17.211 233.359 cv
17.219 233.441 17.227 233.547 17.227 233.668 cv
17.227 233.801 17.219 233.906 17.211 233.988 cv
17.195 234.074 17.184 234.141 17.164 234.184 cv
17.145 234.234 17.121 234.266 17.09 234.285 cv
17.066 234.309 17.031 234.32 16.984 234.316 cv
12.879 234.316 li
12.48 234.32 12.16 234.352 11.914 234.41 cv
11.672 234.477 11.461 234.566 11.281 234.684 cv
11.105 234.801 10.969 234.957 10.875 235.145 cv
10.781 235.34 10.734 235.559 10.734 235.805 cv
10.734 236.129 10.852 236.453 11.078 236.773 cv
11.313 237.098 11.645 237.434 12.082 237.785 cv
16.984 237.785 li
17.031 237.789 17.066 237.801 17.09 237.816 cv
17.121 237.84 17.145 237.871 17.164 237.918 cv
17.184 237.965 17.195 238.031 17.211 238.109 cv
17.219 238.195 17.227 238.301 17.227 238.43 cv
17.227 238.559 17.219 238.664 17.211 238.742 cv
17.195 238.828 17.184 238.895 17.164 238.941 cv
17.145 238.996 17.121 239.027 17.09 239.043 cv
17.066 239.062 17.031 239.074 16.984 239.07 cv
9.973 239.07 li
9.934 239.074 9.898 239.066 9.867 239.047 cv
9.84 239.035 9.816 239.004 9.789 238.953 cv
9.77 238.91 9.754 238.848 9.742 238.773 cv
9.738 238.703 9.734 238.609 9.73 238.484 cv
9.734 238.375 9.738 238.277 9.742 238.199 cv
9.754 238.125 9.77 238.066 9.789 238.023 cv
9.816 237.984 9.84 237.957 9.867 237.937 cv
9.898 237.922 9.934 237.914 9.973 237.91 cv
10.898 237.91 li
10.457 237.52 10.137 237.125 9.93 236.73 cv
9.727 236.34 9.621 235.941 9.621 235.539 cv
9.621 235.07 9.703 234.68 9.859 234.359 cv
10.023 234.043 10.234 233.781 10.496 233.582 cv
10.762 233.387 11.07 233.246 11.426 233.16 cv
11.781 233.074 12.211 233.031 12.707 233.031 cv
cp
f
16.984 224.633 mo
17.031 224.637 17.066 224.645 17.09 224.66 cv
17.121 224.68 17.145 224.715 17.164 224.758 cv
17.184 224.805 17.195 224.863 17.211 224.937 cv
17.219 225.016 17.227 225.109 17.227 225.215 cv
17.227 225.34 17.219 225.437 17.211 225.508 cv
17.195 225.586 17.184 225.645 17.164 225.687 cv
17.145 225.734 17.121 225.766 17.09 225.777 cv
17.066 225.797 17.031 225.805 16.984 225.801 cv
16.059 225.801 li
16.504 226.203 16.824 226.598 17.023 226.984 cv
17.227 227.379 17.324 227.773 17.328 228.168 cv
17.324 228.641 17.25 229.035 17.094 229.352 cv
16.941 229.672 16.73 229.93 16.461 230.125 cv
16.195 230.328 15.883 230.469 15.523 230.551 cv
15.168 230.641 14.734 230.684 14.227 230.68 cv
9.973 230.68 li
9.934 230.684 9.898 230.676 9.867 230.652 cv
9.84 230.637 9.816 230.602 9.789 230.547 cv
9.77 230.5 9.754 230.43 9.742 230.344 cv
9.738 230.262 9.734 230.16 9.73 230.031 cv
9.734 229.91 9.738 229.805 9.742 229.719 cv
9.754 229.637 9.77 229.57 9.789 229.523 cv
9.816 229.477 9.84 229.441 9.867 229.418 cv
9.898 229.398 9.934 229.391 9.973 229.387 cv
14.055 229.387 li
14.469 229.391 14.797 229.359 15.043 229.297 cv
15.289 229.238 15.5 229.148 15.672 229.023 cv
15.852 228.906 15.984 228.75 16.078 228.559 cv
16.176 228.375 16.227 228.156 16.223 227.906 cv
16.227 227.586 16.109 227.266 15.879 226.941 cv
15.652 226.625 15.316 226.285 14.871 225.926 cv
9.973 225.926 li
9.934 225.926 9.898 225.918 9.867 225.898 cv
9.84 225.883 9.816 225.848 9.789 225.793 cv
9.77 225.742 9.754 225.676 9.742 225.594 cv
9.738 225.516 9.734 225.41 9.73 225.277 cv
9.734 225.156 9.738 225.051 9.742 224.965 cv
9.754 224.883 9.77 224.82 9.789 224.773 cv
9.816 224.73 9.84 224.695 9.867 224.668 cv
9.898 224.648 9.934 224.637 9.973 224.633 cv
cp
f
16.469 218.613 mo
16.625 218.613 16.742 218.625 16.828 218.645 cv
16.918 218.668 16.984 218.699 17.023 218.738 cv
17.066 218.781 17.105 218.844 17.141 218.926 cv
17.176 219.012 17.203 219.105 17.23 219.211 cv
17.25 219.32 17.27 219.434 17.289 219.551 cv
17.301 219.668 17.309 219.789 17.313 219.906 cv
17.309 220.273 17.262 220.586 17.168 220.844 cv
17.074 221.105 16.93 221.316 16.73 221.48 cv
16.539 221.648 16.293 221.77 15.992 221.844 cv
15.695 221.922 15.344 221.961 14.934 221.957 cv
10.836 221.957 li
10.836 222.937 li
10.84 223.016 10.797 223.078 10.711 223.125 cv
10.629 223.172 10.496 223.195 10.305 223.195 cv
10.211 223.195 10.129 223.191 10.059 223.176 cv
9.996 223.168 9.938 223.148 9.891 223.125 cv
9.848 223.105 9.816 223.078 9.797 223.043 cv
9.781 223.012 9.773 222.977 9.77 222.93 cv
9.77 221.957 li
8.102 221.957 li
8.07 221.961 8.035 221.949 8 221.93 cv
7.973 221.914 7.945 221.883 7.918 221.828 cv
7.898 221.781 7.883 221.715 7.867 221.629 cv
7.859 221.551 7.852 221.445 7.852 221.316 cv
7.852 221.187 7.859 221.082 7.867 221 cv
7.883 220.918 7.898 220.852 7.918 220.805 cv
7.945 220.758 7.973 220.727 8 220.703 cv
8.035 220.687 8.07 220.676 8.102 220.672 cv
9.77 220.672 li
9.77 218.871 li
9.773 218.832 9.781 218.797 9.797 218.762 cv
9.816 218.734 9.848 218.707 9.891 218.68 cv
9.938 218.66 9.996 218.645 10.059 218.629 cv
10.129 218.621 10.211 218.613 10.305 218.613 cv
10.496 218.613 10.629 218.637 10.711 218.684 cv
10.797 218.73 10.84 218.793 10.836 218.871 cv
10.836 220.672 li
14.75 220.672 li
15.234 220.676 15.598 220.605 15.844 220.457 cv
16.094 220.316 16.219 220.059 16.215 219.687 cv
16.219 219.574 16.207 219.469 16.18 219.371 cv
16.16 219.281 16.137 219.199 16.105 219.121 cv
16.082 219.051 16.055 218.988 16.031 218.934 cv
16.008 218.887 15.996 218.84 15.996 218.793 cv
15.996 218.77 16.004 218.742 16.016 218.719 cv
16.031 218.695 16.055 218.68 16.09 218.664 cv
16.129 218.656 16.18 218.645 16.238 218.629 cv
16.305 218.621 16.383 218.613 16.469 218.613 cv
cp
f
13.176 210.934 mo
13.379 210.937 13.52 210.988 13.605 211.086 cv
13.691 211.191 13.734 211.309 13.734 211.434 cv
13.734 216.051 li
14.125 216.055 14.477 216.016 14.789 215.934 cv
15.102 215.859 15.371 215.727 15.59 215.543 cv
15.816 215.363 15.988 215.129 16.105 214.832 cv
16.23 214.543 16.289 214.184 16.285 213.758 cv
16.289 213.426 16.262 213.129 16.203 212.867 cv
16.152 212.605 16.09 212.379 16.02 212.187 cv
15.953 212 15.895 211.844 15.836 211.719 cv
15.785 211.598 15.758 211.504 15.754 211.441 cv
15.758 211.406 15.766 211.375 15.781 211.344 cv
15.801 211.316 15.828 211.293 15.863 211.273 cv
15.902 211.262 15.953 211.25 16.016 211.238 cv
16.082 211.234 16.16 211.23 16.254 211.227 cv
16.324 211.23 16.383 211.234 16.43 211.234 cv
16.477 211.242 16.52 211.246 16.559 211.254 cv
16.598 211.262 16.633 211.277 16.664 211.293 cv
16.695 211.316 16.727 211.34 16.754 211.363 cv
16.785 211.395 16.832 211.477 16.895 211.617 cv
16.961 211.758 17.023 211.941 17.086 212.164 cv
17.148 212.391 17.203 212.648 17.254 212.941 cv
17.301 213.234 17.324 213.547 17.328 213.879 cv
17.324 214.457 17.246 214.965 17.086 215.395 cv
16.926 215.832 16.688 216.195 16.371 216.488 cv
16.055 216.789 15.66 217.012 15.18 217.16 cv
14.703 217.309 14.145 217.383 13.508 217.383 cv
12.91 217.383 12.371 217.309 11.887 217.152 cv
11.41 217 11 216.773 10.664 216.477 cv
10.328 216.184 10.07 215.828 9.891 215.414 cv
9.711 215 9.621 214.535 9.621 214.02 cv
9.621 213.469 9.711 213 9.887 212.613 cv
10.066 212.227 10.305 211.91 10.602 211.656 cv
10.902 211.41 11.254 211.227 11.652 211.109 cv
12.059 210.996 12.488 210.937 12.941 210.934 cv
cp
12.793 212.227 mo
12.117 212.211 11.586 212.363 11.203 212.68 cv
10.82 212.996 10.629 213.465 10.625 214.082 cv
10.629 214.406 10.688 214.687 10.805 214.926 cv
10.926 215.168 11.086 215.367 11.281 215.527 cv
11.48 215.691 11.711 215.816 11.973 215.902 cv
12.234 215.992 12.508 216.043 12.793 216.051 cv
cp
f
15.074 204.645 mo
15.438 204.648 15.758 204.715 16.035 204.844 cv
16.316 204.977 16.551 205.164 16.742 205.406 cv
16.938 205.652 17.082 205.945 17.18 206.281 cv
17.277 206.621 17.324 206.992 17.328 207.395 cv
17.324 207.648 17.305 207.887 17.27 208.109 cv
17.227 208.336 17.18 208.535 17.121 208.715 cv
17.063 208.895 17 209.047 16.934 209.172 cv
16.871 209.297 16.813 209.391 16.758 209.445 cv
16.707 209.504 16.637 209.543 16.539 209.566 cv
16.449 209.594 16.32 209.605 16.16 209.605 cv
16.063 209.605 15.98 209.602 15.91 209.59 cv
15.844 209.582 15.789 209.57 15.746 209.551 cv
15.707 209.539 15.676 209.516 15.656 209.488 cv
15.641 209.461 15.633 209.43 15.629 209.391 cv
15.633 209.336 15.668 209.25 15.734 209.137 cv
15.809 209.027 15.887 208.891 15.965 208.723 cv
16.051 208.562 16.125 208.371 16.195 208.145 cv
16.266 207.926 16.301 207.668 16.301 207.371 cv
16.301 207.156 16.277 206.957 16.23 206.777 cv
16.184 206.602 16.117 206.449 16.023 206.32 cv
15.938 206.191 15.82 206.09 15.676 206.02 cv
15.539 205.949 15.371 205.914 15.176 205.914 cv
14.98 205.914 14.816 205.965 14.68 206.066 cv
14.547 206.168 14.426 206.305 14.32 206.469 cv
14.219 206.637 14.129 206.82 14.043 207.027 cv
13.965 207.238 13.879 207.453 13.789 207.672 cv
13.703 207.891 13.602 208.105 13.488 208.316 cv
13.379 208.527 13.246 208.719 13.082 208.883 cv
12.926 209.055 12.73 209.187 12.504 209.285 cv
12.281 209.391 12.016 209.441 11.703 209.437 cv
11.43 209.441 11.164 209.387 10.91 209.277 cv
10.66 209.172 10.441 209.012 10.25 208.797 cv
10.063 208.586 9.91 208.32 9.793 208 cv
9.68 207.68 9.621 207.309 9.621 206.879 cv
9.621 206.695 9.637 206.508 9.668 206.32 cv
9.699 206.137 9.738 205.969 9.785 205.812 cv
9.832 205.664 9.883 205.535 9.938 205.426 cv
9.992 205.324 10.043 205.242 10.082 205.184 cv
10.129 205.133 10.164 205.098 10.191 205.074 cv
10.223 205.059 10.258 205.043 10.293 205.035 cv
10.336 205.027 10.383 205.02 10.438 205.012 cv
10.496 205.004 10.566 205 10.648 205 cv
10.738 205 10.816 205.004 10.879 205.012 cv
10.949 205.02 11 205.035 11.039 205.051 cv
11.082 205.074 11.113 205.094 11.129 205.117 cv
11.148 205.145 11.156 205.176 11.156 205.203 cv
11.156 205.254 11.129 205.32 11.07 205.406 cv
11.016 205.496 10.953 205.609 10.887 205.75 cv
10.824 205.891 10.766 206.059 10.703 206.246 cv
10.648 206.437 10.617 206.652 10.617 206.895 cv
10.617 207.117 10.645 207.309 10.691 207.473 cv
10.746 207.641 10.816 207.777 10.902 207.883 cv
10.996 207.988 11.102 208.07 11.227 208.121 cv
11.352 208.18 11.488 208.207 11.633 208.203 cv
11.836 208.207 12.004 208.156 12.141 208.051 cv
12.281 207.949 12.402 207.812 12.504 207.645 cv
12.609 207.48 12.703 207.289 12.785 207.074 cv
12.871 206.863 12.957 206.648 13.043 206.426 cv
13.133 206.207 13.234 205.988 13.34 205.77 cv
13.449 205.555 13.578 205.363 13.734 205.195 cv
13.891 205.031 14.078 204.898 14.297 204.797 cv
14.516 204.699 14.777 204.648 15.074 204.645 cv
cp
f
12.996 200.203 mo
13.582 200.203 14.164 200.242 14.738 200.312 cv
15.313 200.391 15.879 200.5 16.441 200.641 cv
17 200.789 17.551 200.965 18.094 201.176 cv
18.637 201.387 19.172 201.633 19.703 201.91 cv
19.727 201.93 19.75 201.953 19.773 201.98 cv
19.793 202.016 19.813 202.055 19.828 202.102 cv
19.844 202.152 19.852 202.211 19.859 202.277 cv
19.859 202.348 19.863 202.43 19.867 202.52 cv
19.863 202.656 19.855 202.762 19.848 202.836 cv
19.832 202.914 19.813 202.969 19.785 203 cv
19.754 203.035 19.719 203.051 19.676 203.047 cv
19.629 203.047 19.574 203.031 19.516 203.004 cv
18.465 202.527 17.395 202.168 16.297 201.922 cv
15.199 201.68 14.09 201.559 12.973 201.555 cv
11.863 201.559 10.758 201.68 9.656 201.922 cv
8.559 202.168 7.488 202.535 6.441 203.02 cv
6.398 203.043 6.355 203.051 6.309 203.043 cv
6.27 203.043 6.234 203.02 6.207 202.973 cv
6.184 202.934 6.164 202.875 6.145 202.801 cv
6.133 202.73 6.125 202.633 6.121 202.512 cv
6.125 202.402 6.129 202.312 6.133 202.238 cv
6.145 202.168 6.156 202.109 6.168 202.062 cv
6.188 202.02 6.203 201.988 6.215 201.965 cv
6.234 201.949 6.25 201.934 6.27 201.918 cv
7.336 201.387 8.434 200.965 9.555 200.66 cv
10.684 200.355 11.828 200.203 12.996 200.203 cv
cp
f
248.742 518.543 mo
248.738 518.648 248.723 518.738 248.688 518.809 cv
248.652 518.887 248.605 518.945 248.551 518.988 cv
248.492 519.039 248.43 519.074 248.363 519.09 cv
248.289 519.113 248.219 519.121 248.156 519.121 cv
247.711 519.121 li
247.57 519.121 247.449 519.109 247.344 519.078 cv
247.238 519.055 247.141 519 247.047 518.922 cv
246.953 518.848 246.859 518.746 246.766 518.613 cv
246.672 518.484 246.57 518.32 246.465 518.117 cv
243.391 512.379 li
243.227 512.086 243.063 511.777 242.902 511.449 cv
242.734 511.129 242.582 510.812 242.445 510.504 cv
242.43 510.504 li
242.438 510.879 242.445 511.262 242.453 511.648 cv
242.457 512.039 242.457 512.426 242.461 512.809 cv
242.461 518.895 li
242.457 518.934 242.445 518.969 242.426 519 cv
242.402 519.035 242.367 519.062 242.316 519.078 cv
242.262 519.098 242.191 519.109 242.109 519.125 cv
242.023 519.137 241.918 519.145 241.789 519.145 cv
241.652 519.145 241.543 519.137 241.461 519.125 cv
241.375 519.109 241.309 519.098 241.262 519.078 cv
241.211 519.062 241.176 519.035 241.152 519 cv
241.129 518.969 241.117 518.934 241.121 518.895 cv
241.121 509.59 li
241.117 509.383 241.176 509.234 241.297 509.145 cv
241.414 509.059 241.543 509.016 241.684 509.012 cv
242.344 509.012 li
242.496 509.016 242.629 509.027 242.734 509.051 cv
242.836 509.078 242.93 509.121 243.016 509.18 cv
243.098 509.242 243.176 509.324 243.258 509.43 cv
243.332 509.539 243.414 509.676 243.5 509.832 cv
245.867 514.258 li
246.012 514.531 246.152 514.797 246.289 515.051 cv
246.422 515.309 246.551 515.562 246.68 515.809 cv
246.801 516.062 246.926 516.309 247.051 516.547 cv
247.172 516.789 247.293 517.031 247.418 517.273 cv
247.426 517.273 li
247.414 516.867 247.406 516.437 247.406 515.992 cv
247.398 515.547 247.398 515.121 247.402 514.711 cv
247.402 509.238 li
247.398 509.203 247.41 509.168 247.434 509.137 cv
247.457 509.105 247.492 509.078 247.547 509.055 cv
247.594 509.031 247.664 509.016 247.75 509.004 cv
247.836 508.996 247.945 508.992 248.086 508.988 cv
248.203 508.992 248.309 508.996 248.398 509.004 cv
248.484 509.016 248.551 509.031 248.602 509.055 cv
248.648 509.078 248.684 509.105 248.707 509.137 cv
248.727 509.168 248.738 509.203 248.742 509.238 cv
cp
f
257.289 518.902 mo
257.285 518.949 257.277 518.984 257.262 519.008 cv
257.242 519.039 257.207 519.062 257.164 519.082 cv
257.117 519.102 257.059 519.113 256.984 519.129 cv
256.906 519.137 256.813 519.145 256.707 519.145 cv
256.582 519.145 256.484 519.137 256.414 519.129 cv
256.336 519.113 256.277 519.102 256.234 519.082 cv
256.188 519.062 256.156 519.039 256.145 519.008 cv
256.125 518.984 256.117 518.949 256.121 518.902 cv
256.121 517.977 li
255.719 518.422 255.324 518.742 254.938 518.941 cv
254.543 519.145 254.148 519.242 253.754 519.246 cv
253.281 519.242 252.887 519.168 252.57 519.012 cv
252.25 518.859 251.992 518.648 251.797 518.379 cv
251.594 518.113 251.453 517.801 251.371 517.441 cv
251.281 517.086 251.238 516.652 251.242 516.145 cv
251.242 511.891 li
251.238 511.852 251.246 511.816 251.27 511.785 cv
251.285 511.758 251.32 511.734 251.375 511.707 cv
251.422 511.687 251.492 511.672 251.578 511.66 cv
251.66 511.656 251.762 511.652 251.891 511.648 cv
252.012 511.652 252.117 511.656 252.203 511.66 cv
252.285 511.672 252.352 511.687 252.398 511.707 cv
252.445 511.734 252.48 511.758 252.504 511.785 cv
252.523 511.816 252.531 511.852 252.535 511.891 cv
252.535 515.973 li
252.531 516.387 252.563 516.715 252.625 516.961 cv
252.684 517.207 252.773 517.418 252.898 517.59 cv
253.016 517.77 253.172 517.902 253.363 517.996 cv
253.547 518.094 253.766 518.145 254.016 518.141 cv
254.336 518.145 254.656 518.027 254.98 517.797 cv
255.297 517.57 255.637 517.234 255.996 516.789 cv
255.996 511.891 li
255.996 511.852 256.004 511.816 256.023 511.785 cv
256.039 511.758 256.074 511.734 256.129 511.707 cv
256.18 511.687 256.246 511.672 256.328 511.66 cv
256.406 511.656 256.512 511.652 256.645 511.648 cv
256.766 511.652 256.871 511.656 256.957 511.66 cv
257.039 511.672 257.102 511.687 257.148 511.707 cv
257.191 511.734 257.227 511.758 257.254 511.785 cv
257.273 511.816 257.285 511.852 257.289 511.891 cv
cp
f
270.066 518.902 mo
270.063 518.949 270.055 518.984 270.035 519.008 cv
270.012 519.039 269.977 519.062 269.934 519.082 cv
269.883 519.102 269.816 519.113 269.738 519.129 cv
269.652 519.137 269.551 519.145 269.426 519.145 cv
269.293 519.145 269.184 519.137 269.105 519.129 cv
269.02 519.113 268.953 519.102 268.906 519.082 cv
268.852 519.062 268.816 519.039 268.801 519.008 cv
268.777 518.984 268.77 518.949 268.77 518.902 cv
268.77 514.641 li
268.77 514.348 268.742 514.078 268.691 513.832 cv
268.637 513.59 268.555 513.379 268.441 513.199 cv
268.328 513.023 268.184 512.887 268.008 512.793 cv
267.828 512.699 267.617 512.652 267.383 512.652 cv
267.086 512.652 266.789 512.77 266.492 512.996 cv
266.188 513.23 265.859 513.562 265.504 514 cv
265.504 518.902 li
265.5 518.949 265.488 518.984 265.473 519.008 cv
265.449 519.039 265.418 519.062 265.371 519.082 cv
265.32 519.102 265.254 519.113 265.172 519.129 cv
265.086 519.137 264.98 519.145 264.859 519.145 cv
264.738 519.145 264.637 519.137 264.551 519.129 cv
264.465 519.113 264.395 519.102 264.348 519.082 cv
264.293 519.062 264.262 519.039 264.246 519.008 cv
264.227 518.984 264.215 518.949 264.219 518.902 cv
264.219 514.641 li
264.215 514.348 264.188 514.078 264.133 513.832 cv
264.074 513.59 263.988 513.379 263.875 513.199 cv
263.762 513.023 263.617 512.887 263.445 512.793 cv
263.266 512.699 263.059 512.652 262.824 512.652 cv
262.523 512.652 262.227 512.77 261.926 512.996 cv
261.625 513.23 261.297 513.562 260.945 514 cv
260.945 518.902 li
260.941 518.949 260.93 518.984 260.914 519.008 cv
260.891 519.039 260.859 519.062 260.813 519.082 cv
260.766 519.102 260.699 519.113 260.621 519.129 cv
260.535 519.137 260.43 519.145 260.301 519.145 cv
260.172 519.145 260.066 519.137 259.988 519.129 cv
259.902 519.113 259.836 519.102 259.789 519.082 cv
259.734 519.062 259.703 519.039 259.688 519.008 cv
259.668 518.984 259.656 518.949 259.66 518.902 cv
259.66 511.891 li
259.656 511.852 259.664 511.816 259.684 511.785 cv
259.695 511.758 259.727 511.734 259.777 511.707 cv
259.82 511.687 259.883 511.672 259.957 511.66 cv
260.027 511.656 260.121 511.652 260.246 511.648 cv
260.355 511.652 260.453 511.656 260.531 511.66 cv
260.605 511.672 260.664 511.687 260.707 511.707 cv
260.746 511.734 260.773 511.758 260.793 511.785 cv
260.809 511.816 260.816 511.852 260.82 511.891 cv
260.82 512.816 li
261.211 512.375 261.594 512.055 261.969 511.848 cv
262.336 511.645 262.715 511.539 263.098 511.539 cv
263.387 511.539 263.645 511.574 263.879 511.641 cv
264.105 511.711 264.313 511.805 264.492 511.926 cv
264.668 512.047 264.816 512.191 264.945 512.359 cv
265.066 512.531 265.172 512.723 265.258 512.926 cv
265.488 512.676 265.711 512.461 265.922 512.281 cv
266.133 512.109 266.336 511.965 266.531 511.852 cv
266.727 511.746 266.914 511.668 267.098 511.613 cv
267.281 511.566 267.469 511.539 267.656 511.539 cv
268.109 511.539 268.488 511.621 268.793 511.777 cv
269.098 511.941 269.344 512.152 269.539 512.414 cv
269.727 512.68 269.863 512.988 269.945 513.344 cv
270.023 513.699 270.063 514.074 270.066 514.469 cv
cp
f
278.867 515.301 mo
278.863 515.91 278.797 516.461 278.668 516.945 cv
278.531 517.434 278.336 517.848 278.082 518.187 cv
277.824 518.531 277.508 518.793 277.137 518.973 cv
276.762 519.156 276.336 519.242 275.852 519.246 cv
275.625 519.242 275.418 519.223 275.23 519.18 cv
275.043 519.133 274.855 519.062 274.676 518.965 cv
274.488 518.867 274.309 518.742 274.129 518.59 cv
273.945 518.441 273.754 518.262 273.555 518.047 cv
273.555 518.902 li
273.555 518.949 273.543 518.984 273.523 519.012 cv
273.5 519.047 273.465 519.07 273.422 519.086 cv
273.371 519.102 273.313 519.113 273.246 519.129 cv
273.172 519.137 273.082 519.145 272.977 519.145 cv
272.867 519.145 272.781 519.137 272.711 519.129 cv
272.637 519.113 272.574 519.102 272.531 519.086 cv
272.48 519.07 272.449 519.047 272.438 519.012 cv
272.418 518.984 272.41 518.949 272.414 518.902 cv
272.414 508.492 li
272.41 508.453 272.422 508.418 272.441 508.383 cv
272.457 508.355 272.488 508.328 272.543 508.305 cv
272.59 508.285 272.656 508.27 272.742 508.258 cv
272.82 508.25 272.926 508.246 273.055 508.242 cv
273.184 508.246 273.289 508.25 273.375 508.258 cv
273.453 508.27 273.52 508.285 273.566 508.305 cv
273.613 508.328 273.645 508.355 273.668 508.383 cv
273.684 508.418 273.695 508.453 273.699 508.492 cv
273.699 512.691 li
273.906 512.48 274.109 512.301 274.305 512.156 cv
274.5 512.012 274.688 511.895 274.875 511.801 cv
275.059 511.715 275.246 511.648 275.438 511.602 cv
275.621 511.562 275.82 511.539 276.031 511.539 cv
276.535 511.539 276.969 511.641 277.336 511.844 cv
277.695 512.047 277.988 512.32 278.215 512.656 cv
278.438 513 278.605 513.398 278.711 513.855 cv
278.813 514.312 278.863 514.793 278.867 515.301 cv
cp
277.535 515.449 mo
277.531 515.094 277.504 514.746 277.453 514.406 cv
277.395 514.07 277.301 513.773 277.164 513.512 cv
277.027 513.254 276.848 513.043 276.625 512.883 cv
276.398 512.727 276.117 512.648 275.785 512.645 cv
275.617 512.648 275.453 512.672 275.293 512.715 cv
275.129 512.766 274.965 512.844 274.797 512.949 cv
274.629 513.062 274.453 513.203 274.277 513.371 cv
274.094 513.547 273.902 513.762 273.699 514.016 cv
273.699 516.812 li
274.055 517.246 274.395 517.578 274.719 517.801 cv
275.043 518.031 275.379 518.145 275.73 518.141 cv
276.051 518.145 276.328 518.066 276.563 517.906 cv
276.789 517.754 276.977 517.547 277.121 517.285 cv
277.266 517.031 277.371 516.742 277.438 516.422 cv
277.5 516.105 277.531 515.781 277.535 515.449 cv
cp
f
286.777 515.094 mo
286.773 515.297 286.723 515.437 286.625 515.523 cv
286.52 515.609 286.402 515.652 286.277 515.652 cv
281.66 515.652 li
281.656 516.043 281.695 516.395 281.777 516.707 cv
281.852 517.02 281.984 517.289 282.168 517.508 cv
282.348 517.734 282.582 517.906 282.879 518.023 cv
283.168 518.148 283.527 518.207 283.953 518.203 cv
284.285 518.207 284.582 518.18 284.844 518.121 cv
285.105 518.07 285.332 518.008 285.523 517.937 cv
285.711 517.871 285.867 517.812 285.992 517.754 cv
286.113 517.703 286.207 517.676 286.27 517.672 cv
286.305 517.676 286.336 517.684 286.367 517.699 cv
286.395 517.719 286.418 517.746 286.438 517.781 cv
286.449 517.82 286.461 517.871 286.473 517.934 cv
286.477 518 286.48 518.078 286.484 518.172 cv
286.48 518.242 286.477 518.301 286.477 518.348 cv
286.469 518.395 286.465 518.437 286.457 518.477 cv
286.449 518.516 286.434 518.551 286.418 518.582 cv
286.395 518.613 286.371 518.645 286.348 518.672 cv
286.316 518.703 286.234 518.75 286.094 518.812 cv
285.953 518.879 285.77 518.941 285.547 519.004 cv
285.32 519.066 285.063 519.121 284.77 519.172 cv
284.477 519.219 284.164 519.242 283.832 519.246 cv
283.254 519.242 282.746 519.164 282.316 519.004 cv
281.879 518.844 281.516 518.605 281.223 518.289 cv
280.922 517.973 280.699 517.578 280.551 517.098 cv
280.402 516.621 280.328 516.062 280.328 515.426 cv
280.328 514.828 280.402 514.289 280.559 513.805 cv
280.711 513.328 280.938 512.918 281.234 512.582 cv
281.527 512.246 281.883 511.988 282.297 511.809 cv
282.711 511.629 283.176 511.539 283.691 511.539 cv
284.242 511.539 284.711 511.629 285.098 511.805 cv
285.484 511.984 285.801 512.223 286.055 512.52 cv
286.301 512.82 286.484 513.172 286.602 513.57 cv
286.715 513.977 286.773 514.406 286.777 514.859 cv
cp
285.484 514.711 mo
285.5 514.035 285.348 513.504 285.031 513.121 cv
284.715 512.738 284.246 512.547 283.629 512.543 cv
283.305 512.547 283.023 512.605 282.785 512.723 cv
282.543 512.844 282.344 513.004 282.184 513.199 cv
282.02 513.398 281.895 513.629 281.809 513.891 cv
281.719 514.152 281.668 514.426 281.66 514.711 cv
cp
f
292.84 512.348 mo
292.836 512.465 292.836 512.562 292.832 512.637 cv
292.824 512.719 292.813 512.781 292.801 512.82 cv
292.781 512.867 292.762 512.898 292.742 512.922 cv
292.715 512.945 292.684 512.957 292.645 512.957 cv
292.602 512.957 292.551 512.945 292.492 512.922 cv
292.43 512.898 292.359 512.875 292.289 512.852 cv
292.211 512.828 292.129 512.809 292.035 512.785 cv
291.941 512.77 291.84 512.758 291.73 512.754 cv
291.598 512.758 291.469 512.785 291.348 512.832 cv
291.223 512.887 291.094 512.973 290.957 513.09 cv
290.816 513.215 290.672 513.371 290.523 513.566 cv
290.371 513.762 290.203 514.004 290.023 514.289 cv
290.023 518.902 li
290.02 518.949 290.008 518.984 289.992 519.008 cv
289.969 519.039 289.938 519.062 289.891 519.082 cv
289.844 519.102 289.777 519.113 289.699 519.129 cv
289.613 519.137 289.508 519.145 289.379 519.145 cv
289.25 519.145 289.145 519.137 289.066 519.129 cv
288.98 519.113 288.914 519.102 288.867 519.082 cv
288.813 519.062 288.781 519.039 288.766 519.008 cv
288.746 518.984 288.734 518.949 288.738 518.902 cv
288.738 511.891 li
288.734 511.852 288.742 511.816 288.762 511.785 cv
288.773 511.758 288.805 511.734 288.855 511.707 cv
288.898 511.687 288.961 511.672 289.035 511.66 cv
289.105 511.656 289.199 511.652 289.324 511.648 cv
289.434 511.652 289.531 511.656 289.609 511.66 cv
289.684 511.672 289.742 511.687 289.785 511.707 cv
289.824 511.734 289.852 511.758 289.871 511.785 cv
289.887 511.816 289.895 511.852 289.898 511.891 cv
289.898 512.91 li
290.086 512.629 290.27 512.402 290.441 512.227 cv
290.609 512.051 290.77 511.91 290.922 511.809 cv
291.07 511.707 291.219 511.637 291.367 511.598 cv
291.516 511.559 291.664 511.539 291.816 511.539 cv
291.883 511.539 291.961 511.543 292.047 511.551 cv
292.133 511.559 292.223 511.574 292.316 511.594 cv
292.41 511.617 292.492 511.641 292.57 511.664 cv
292.641 511.691 292.695 511.719 292.73 511.742 cv
292.758 511.773 292.777 511.797 292.793 511.816 cv
292.801 511.844 292.813 511.875 292.82 511.906 cv
292.828 511.945 292.832 511.996 292.836 512.066 cv
292.836 512.137 292.836 512.23 292.84 512.348 cv
cp
f
304.602 515.316 mo
304.598 515.895 304.523 516.422 304.375 516.898 cv
304.223 517.383 303.996 517.797 303.699 518.141 cv
303.398 518.492 303.023 518.762 302.578 518.953 cv
302.125 519.148 301.605 519.242 301.016 519.246 cv
300.438 519.242 299.934 519.16 299.508 518.988 cv
299.078 518.82 298.723 518.57 298.438 518.242 cv
298.148 517.914 297.934 517.52 297.797 517.051 cv
297.656 516.586 297.59 516.055 297.59 515.457 cv
297.59 514.891 297.66 514.363 297.809 513.883 cv
297.953 513.402 298.18 512.988 298.48 512.637 cv
298.777 512.289 299.148 512.02 299.598 511.828 cv
300.043 511.637 300.566 511.539 301.164 511.539 cv
301.742 511.539 302.242 511.625 302.672 511.797 cv
303.098 511.969 303.457 512.219 303.742 512.547 cv
304.027 512.875 304.242 513.273 304.387 513.738 cv
304.527 514.207 304.598 514.734 304.602 515.316 cv
cp
303.27 515.402 mo
303.266 515.027 303.23 514.668 303.164 514.328 cv
303.09 513.992 302.973 513.699 302.813 513.441 cv
302.648 513.191 302.43 512.988 302.152 512.836 cv
301.871 512.691 301.523 512.617 301.113 512.613 cv
300.727 512.617 300.398 512.684 300.125 512.816 cv
299.848 512.953 299.621 513.145 299.445 513.391 cv
299.266 513.637 299.133 513.93 299.051 514.266 cv
298.961 514.605 298.918 514.973 298.922 515.371 cv
298.918 515.758 298.953 516.121 299.027 516.457 cv
299.094 516.797 299.211 517.09 299.379 517.34 cv
299.543 517.594 299.766 517.797 300.043 517.941 cv
300.32 518.094 300.668 518.168 301.082 518.164 cv
301.457 518.168 301.785 518.098 302.066 517.961 cv
302.344 517.828 302.57 517.641 302.75 517.391 cv
302.926 517.148 303.055 516.855 303.141 516.52 cv
303.223 516.184 303.266 515.812 303.27 515.402 cv
cp
f
310.332 509.004 mo
310.328 509.105 310.324 509.184 310.316 509.242 cv
310.305 509.305 310.293 509.355 310.281 509.387 cv
310.266 509.426 310.25 509.449 310.23 509.461 cv
310.207 509.477 310.18 509.484 310.152 509.48 cv
310.113 509.484 310.066 509.473 310.016 509.445 cv
309.957 509.426 309.891 509.398 309.816 509.367 cv
309.734 509.34 309.645 509.312 309.539 509.289 cv
309.43 509.266 309.305 509.254 309.172 509.254 cv
308.977 509.254 308.813 509.285 308.68 509.348 cv
308.539 509.41 308.43 509.508 308.352 509.641 cv
308.266 509.773 308.207 509.945 308.172 510.156 cv
308.133 510.367 308.113 510.625 308.117 510.922 cv
308.117 511.687 li
309.684 511.687 li
309.723 511.691 309.758 511.699 309.789 511.715 cv
309.816 511.734 309.844 511.766 309.867 511.809 cv
309.891 511.855 309.906 511.914 309.922 511.977 cv
309.93 512.047 309.938 512.129 309.941 512.223 cv
309.938 512.414 309.914 512.547 309.871 512.629 cv
309.82 512.715 309.758 512.758 309.684 512.754 cv
308.117 512.754 li
308.117 518.902 li
308.113 518.949 308.105 518.984 308.086 519.008 cv
308.063 519.039 308.027 519.062 307.98 519.082 cv
307.93 519.102 307.863 519.113 307.781 519.129 cv
307.695 519.137 307.59 519.145 307.473 519.145 cv
307.344 519.145 307.242 519.137 307.16 519.129 cv
307.074 519.113 307.008 519.102 306.961 519.082 cv
306.91 519.062 306.875 519.039 306.855 519.008 cv
306.832 518.984 306.82 518.949 306.824 518.902 cv
306.824 512.754 li
305.836 512.754 li
305.75 512.758 305.688 512.715 305.648 512.629 cv
305.605 512.547 305.582 512.414 305.586 512.223 cv
305.582 512.129 305.59 512.047 305.602 511.977 cv
305.609 511.914 305.625 511.855 305.648 511.809 cv
305.668 511.766 305.691 511.734 305.727 511.715 cv
305.754 511.699 305.793 511.691 305.836 511.687 cv
306.824 511.687 li
306.824 510.961 li
306.82 510.477 306.867 510.059 306.961 509.703 cv
307.051 509.355 307.188 509.066 307.375 508.844 cv
307.559 508.621 307.793 508.457 308.082 508.348 cv
308.363 508.242 308.699 508.187 309.086 508.187 cv
309.262 508.187 309.438 508.207 309.613 508.238 cv
309.781 508.277 309.914 508.312 310.012 508.348 cv
310.102 508.391 310.164 508.426 310.199 508.453 cv
310.227 508.488 310.254 508.527 310.277 508.574 cv
310.297 508.625 310.309 508.687 310.32 508.754 cv
310.324 508.828 310.328 508.91 310.332 509.004 cv
cp
f
320.527 516.27 mo
320.523 516.742 320.438 517.164 320.266 517.531 cv
320.09 517.906 319.848 518.219 319.539 518.473 cv
319.23 518.73 318.867 518.922 318.449 519.051 cv
318.027 519.18 317.578 519.242 317.098 519.246 cv
316.758 519.242 316.441 519.215 316.156 519.16 cv
315.867 519.102 315.613 519.035 315.387 518.949 cv
315.16 518.871 314.969 518.785 314.816 518.691 cv
314.66 518.605 314.555 518.527 314.496 518.465 cv
314.438 518.402 314.395 518.324 314.367 518.23 cv
314.336 518.137 314.32 518.008 314.324 517.844 cv
314.32 517.73 314.324 517.637 314.34 517.559 cv
314.348 517.484 314.363 517.422 314.387 517.375 cv
314.402 517.328 314.43 517.297 314.465 517.277 cv
314.492 517.262 314.527 517.254 314.57 517.25 cv
314.641 517.254 314.742 517.297 314.879 517.383 cv
315.008 517.473 315.18 517.57 315.391 517.672 cv
315.598 517.781 315.848 517.879 316.141 517.965 cv
316.434 518.059 316.773 518.102 317.16 518.102 cv
317.449 518.102 317.715 518.062 317.957 517.984 cv
318.195 517.906 318.402 517.797 318.582 517.652 cv
318.754 517.512 318.891 517.336 318.984 517.125 cv
319.078 516.918 319.125 516.684 319.125 516.418 cv
319.125 516.137 319.059 515.891 318.93 515.684 cv
318.797 515.484 318.625 515.309 318.414 515.152 cv
318.199 515.004 317.957 514.863 317.684 514.73 cv
317.41 514.605 317.129 514.473 316.848 514.34 cv
316.559 514.207 316.281 514.062 316.012 513.898 cv
315.742 513.742 315.5 513.551 315.289 513.332 cv
315.07 513.113 314.898 512.859 314.77 512.562 cv
314.633 512.273 314.566 511.922 314.57 511.508 cv
314.566 511.09 314.645 510.715 314.801 510.383 cv
314.953 510.055 315.164 509.777 315.441 509.551 cv
315.711 509.332 316.035 509.16 316.414 509.043 cv
316.789 508.926 317.199 508.867 317.637 508.867 cv
317.855 508.867 318.078 508.887 318.309 508.926 cv
318.531 508.965 318.742 509.016 318.945 509.078 cv
319.141 509.145 319.32 509.219 319.48 509.297 cv
319.633 509.379 319.734 509.445 319.789 509.492 cv
319.836 509.547 319.871 509.586 319.887 509.609 cv
319.902 509.641 319.914 509.676 319.926 509.719 cv
319.934 509.766 319.941 509.82 319.949 509.879 cv
319.953 509.945 319.957 510.023 319.957 510.121 cv
319.957 510.215 319.953 510.301 319.945 510.371 cv
319.938 510.449 319.926 510.508 319.91 510.555 cv
319.895 510.602 319.871 510.637 319.844 510.66 cv
319.813 510.684 319.781 510.695 319.746 510.695 cv
319.688 510.695 319.598 510.66 319.477 510.59 cv
319.352 510.52 319.199 510.437 319.027 510.344 cv
318.848 510.254 318.641 510.172 318.402 510.094 cv
318.156 510.02 317.887 509.98 317.59 509.98 cv
317.309 509.98 317.063 510.02 316.855 510.094 cv
316.645 510.172 316.473 510.273 316.34 510.395 cv
316.203 510.52 316.102 510.664 316.035 510.836 cv
315.969 511.008 315.938 511.191 315.938 511.383 cv
315.938 511.668 316 511.91 316.129 512.109 cv
316.258 512.312 316.43 512.492 316.648 512.645 cv
316.859 512.805 317.105 512.945 317.383 513.074 cv
317.656 513.207 317.938 513.34 318.227 513.469 cv
318.512 513.602 318.793 513.746 319.066 513.902 cv
319.34 514.062 319.586 514.25 319.805 514.465 cv
320.02 514.684 320.191 514.937 320.328 515.23 cv
320.457 515.523 320.523 515.871 320.527 516.27 cv
cp
f
328.297 518.902 mo
328.293 518.949 328.285 518.984 328.27 519.008 cv
328.25 519.039 328.215 519.062 328.172 519.082 cv
328.125 519.102 328.066 519.113 327.992 519.129 cv
327.914 519.137 327.82 519.145 327.715 519.145 cv
327.59 519.145 327.492 519.137 327.422 519.129 cv
327.344 519.113 327.285 519.102 327.242 519.082 cv
327.195 519.062 327.164 519.039 327.152 519.008 cv
327.133 518.984 327.125 518.949 327.129 518.902 cv
327.129 517.977 li
326.727 518.422 326.332 518.742 325.945 518.941 cv
325.551 519.145 325.156 519.242 324.762 519.246 cv
324.289 519.242 323.895 519.168 323.578 519.012 cv
323.258 518.859 323 518.648 322.805 518.379 cv
322.602 518.113 322.461 517.801 322.379 517.441 cv
322.289 517.086 322.246 516.652 322.25 516.145 cv
322.25 511.891 li
322.246 511.852 322.254 511.816 322.277 511.785 cv
322.293 511.758 322.328 511.734 322.383 511.707 cv
322.43 511.687 322.5 511.672 322.586 511.66 cv
322.668 511.656 322.77 511.652 322.898 511.648 cv
323.02 511.652 323.125 511.656 323.211 511.66 cv
323.293 511.672 323.359 511.687 323.406 511.707 cv
323.453 511.734 323.488 511.758 323.512 511.785 cv
323.531 511.816 323.539 511.852 323.543 511.891 cv
323.543 515.973 li
323.539 516.387 323.57 516.715 323.633 516.961 cv
323.691 517.207 323.781 517.418 323.906 517.59 cv
324.023 517.77 324.18 517.902 324.371 517.996 cv
324.555 518.094 324.773 518.145 325.023 518.141 cv
325.344 518.145 325.664 518.027 325.988 517.797 cv
326.305 517.57 326.645 517.234 327.004 516.789 cv
327.004 511.891 li
327.004 511.852 327.012 511.816 327.031 511.785 cv
327.047 511.758 327.082 511.734 327.137 511.707 cv
327.188 511.687 327.254 511.672 327.336 511.66 cv
327.414 511.656 327.52 511.652 327.652 511.648 cv
327.773 511.652 327.879 511.656 327.965 511.66 cv
328.047 511.672 328.109 511.687 328.156 511.707 cv
328.199 511.734 328.234 511.758 328.262 511.785 cv
328.281 511.816 328.293 511.852 328.297 511.891 cv
cp
f
337.152 515.301 mo
337.148 515.91 337.082 516.461 336.953 516.945 cv
336.816 517.434 336.621 517.848 336.367 518.187 cv
336.109 518.531 335.793 518.793 335.422 518.973 cv
335.047 519.156 334.621 519.242 334.137 519.246 cv
333.91 519.242 333.703 519.223 333.516 519.18 cv
333.328 519.133 333.141 519.062 332.961 518.965 cv
332.773 518.867 332.594 518.742 332.414 518.59 cv
332.23 518.441 332.039 518.262 331.84 518.047 cv
331.84 518.902 li
331.84 518.949 331.828 518.984 331.809 519.012 cv
331.785 519.047 331.75 519.07 331.707 519.086 cv
331.656 519.102 331.598 519.113 331.531 519.129 cv
331.457 519.137 331.367 519.145 331.262 519.145 cv
331.152 519.145 331.066 519.137 330.996 519.129 cv
330.922 519.113 330.859 519.102 330.816 519.086 cv
330.766 519.07 330.734 519.047 330.723 519.012 cv
330.703 518.984 330.695 518.949 330.699 518.902 cv
330.699 508.492 li
330.695 508.453 330.707 508.418 330.727 508.383 cv
330.742 508.355 330.773 508.328 330.828 508.305 cv
330.875 508.285 330.941 508.27 331.027 508.258 cv
331.105 508.25 331.211 508.246 331.34 508.242 cv
331.469 508.246 331.574 508.25 331.66 508.258 cv
331.738 508.27 331.805 508.285 331.852 508.305 cv
331.898 508.328 331.93 508.355 331.953 508.383 cv
331.969 508.418 331.98 508.453 331.984 508.492 cv
331.984 512.691 li
332.191 512.48 332.395 512.301 332.59 512.156 cv
332.785 512.012 332.973 511.895 333.16 511.801 cv
333.344 511.715 333.531 511.648 333.723 511.602 cv
333.906 511.562 334.105 511.539 334.316 511.539 cv
334.82 511.539 335.254 511.641 335.621 511.844 cv
335.98 512.047 336.273 512.32 336.5 512.656 cv
336.723 513 336.891 513.398 336.996 513.855 cv
337.098 514.312 337.148 514.793 337.152 515.301 cv
cp
335.82 515.449 mo
335.816 515.094 335.789 514.746 335.738 514.406 cv
335.68 514.07 335.586 513.773 335.449 513.512 cv
335.313 513.254 335.133 513.043 334.91 512.883 cv
334.684 512.727 334.402 512.648 334.07 512.645 cv
333.902 512.648 333.738 512.672 333.578 512.715 cv
333.414 512.766 333.25 512.844 333.082 512.949 cv
332.914 513.062 332.738 513.203 332.563 513.371 cv
332.379 513.547 332.188 513.762 331.984 514.016 cv
331.984 516.812 li
332.34 517.246 332.68 517.578 333.004 517.801 cv
333.328 518.031 333.664 518.145 334.016 518.141 cv
334.336 518.145 334.613 518.066 334.848 517.906 cv
335.074 517.754 335.262 517.547 335.406 517.285 cv
335.551 517.031 335.656 516.742 335.723 516.422 cv
335.785 516.105 335.816 515.781 335.82 515.449 cv
cp
f
342.289 515.164 mo
342.289 515.367 342.266 515.504 342.219 515.582 cv
342.172 515.66 342.102 515.699 342.016 515.699 cv
338.758 515.699 li
338.664 515.699 338.598 515.66 338.551 515.578 cv
338.504 515.5 338.48 515.363 338.48 515.164 cv
338.48 514.969 338.504 514.828 338.551 514.75 cv
338.598 514.672 338.664 514.633 338.758 514.633 cv
342.016 514.633 li
342.055 514.633 342.094 514.641 342.129 514.656 cv
342.16 514.672 342.188 514.703 342.215 514.746 cv
342.234 514.793 342.254 514.848 342.27 514.914 cv
342.281 514.984 342.289 515.07 342.289 515.164 cv
cp
f
345.539 518.895 mo
345.535 518.937 345.527 518.973 345.508 519.004 cv
345.484 519.035 345.445 519.062 345.398 519.078 cv
345.344 519.098 345.277 519.109 345.191 519.125 cv
345.105 519.137 344.996 519.145 344.871 519.145 cv
344.742 519.145 344.637 519.137 344.551 519.125 cv
344.461 519.109 344.391 519.098 344.34 519.078 cv
344.285 519.062 344.25 519.035 344.23 519.004 cv
344.207 518.973 344.195 518.937 344.199 518.895 cv
344.199 509.215 li
344.195 509.176 344.207 509.141 344.234 509.105 cv
344.254 509.078 344.293 509.051 344.352 509.031 cv
344.402 509.016 344.473 509 344.563 508.984 cv
344.645 508.973 344.746 508.969 344.871 508.965 cv
344.996 508.969 345.105 508.973 345.191 508.984 cv
345.277 509 345.344 509.016 345.398 509.031 cv
345.445 509.051 345.484 509.078 345.508 509.105 cv
345.527 509.141 345.535 509.176 345.539 509.215 cv
cp
f
358.527 518.902 mo
358.523 518.949 358.516 518.984 358.496 519.008 cv
358.473 519.039 358.438 519.062 358.395 519.082 cv
358.344 519.102 358.277 519.113 358.199 519.129 cv
358.113 519.137 358.012 519.145 357.887 519.145 cv
357.754 519.145 357.645 519.137 357.566 519.129 cv
357.48 519.113 357.414 519.102 357.367 519.082 cv
357.313 519.062 357.277 519.039 357.262 519.008 cv
357.238 518.984 357.23 518.949 357.23 518.902 cv
357.23 514.641 li
357.23 514.348 357.203 514.078 357.152 513.832 cv
357.098 513.59 357.016 513.379 356.902 513.199 cv
356.789 513.023 356.645 512.887 356.469 512.793 cv
356.289 512.699 356.078 512.652 355.844 512.652 cv
355.547 512.652 355.25 512.77 354.953 512.996 cv
354.648 513.23 354.32 513.562 353.965 514 cv
353.965 518.902 li
353.961 518.949 353.949 518.984 353.934 519.008 cv
353.91 519.039 353.879 519.062 353.832 519.082 cv
353.781 519.102 353.715 519.113 353.633 519.129 cv
353.547 519.137 353.441 519.145 353.32 519.145 cv
353.199 519.145 353.098 519.137 353.012 519.129 cv
352.926 519.113 352.855 519.102 352.809 519.082 cv
352.754 519.062 352.723 519.039 352.707 519.008 cv
352.688 518.984 352.676 518.949 352.68 518.902 cv
352.68 514.641 li
352.676 514.348 352.648 514.078 352.594 513.832 cv
352.535 513.59 352.449 513.379 352.336 513.199 cv
352.223 513.023 352.078 512.887 351.906 512.793 cv
351.727 512.699 351.52 512.652 351.285 512.652 cv
350.984 512.652 350.688 512.77 350.387 512.996 cv
350.086 513.23 349.758 513.562 349.406 514 cv
349.406 518.902 li
349.402 518.949 349.391 518.984 349.375 519.008 cv
349.352 519.039 349.32 519.062 349.273 519.082 cv
349.227 519.102 349.16 519.113 349.082 519.129 cv
348.996 519.137 348.891 519.145 348.762 519.145 cv
348.633 519.145 348.527 519.137 348.449 519.129 cv
348.363 519.113 348.297 519.102 348.25 519.082 cv
348.195 519.062 348.164 519.039 348.148 519.008 cv
348.129 518.984 348.117 518.949 348.121 518.902 cv
348.121 511.891 li
348.117 511.852 348.125 511.816 348.145 511.785 cv
348.156 511.758 348.188 511.734 348.238 511.707 cv
348.281 511.687 348.344 511.672 348.418 511.66 cv
348.488 511.656 348.582 511.652 348.707 511.648 cv
348.816 511.652 348.914 511.656 348.992 511.66 cv
349.066 511.672 349.125 511.687 349.168 511.707 cv
349.207 511.734 349.234 511.758 349.254 511.785 cv
349.27 511.816 349.277 511.852 349.281 511.891 cv
349.281 512.816 li
349.672 512.375 350.055 512.055 350.43 511.848 cv
350.797 511.645 351.176 511.539 351.559 511.539 cv
351.848 511.539 352.105 511.574 352.34 511.641 cv
352.566 511.711 352.773 511.805 352.953 511.926 cv
353.129 512.047 353.277 512.191 353.406 512.359 cv
353.527 512.531 353.633 512.723 353.719 512.926 cv
353.949 512.676 354.172 512.461 354.383 512.281 cv
354.594 512.109 354.797 511.965 354.992 511.852 cv
355.188 511.746 355.375 511.668 355.559 511.613 cv
355.742 511.566 355.93 511.539 356.117 511.539 cv
356.57 511.539 356.949 511.621 357.254 511.777 cv
357.559 511.941 357.805 512.152 358 512.414 cv
358.188 512.68 358.324 512.988 358.406 513.344 cv
358.484 513.699 358.523 514.074 358.527 514.469 cv
cp
f
366.16 518.91 mo
366.156 518.973 366.137 519.02 366.098 519.051 cv
366.055 519.082 365.996 519.105 365.926 519.121 cv
365.848 519.137 365.742 519.145 365.605 519.145 cv
365.469 519.145 365.359 519.137 365.281 519.121 cv
365.195 519.105 365.137 519.082 365.105 519.051 cv
365.066 519.02 365.051 518.973 365.055 518.91 cv
365.055 518.211 li
364.746 518.539 364.402 518.793 364.027 518.973 cv
363.648 519.156 363.25 519.242 362.832 519.246 cv
362.457 519.242 362.125 519.195 361.828 519.102 cv
361.531 519.004 361.277 518.867 361.066 518.684 cv
360.855 518.504 360.691 518.281 360.574 518.016 cv
360.457 517.754 360.398 517.453 360.402 517.109 cv
360.398 516.719 360.477 516.375 360.641 516.082 cv
360.797 515.793 361.031 515.551 361.336 515.359 cv
361.637 515.168 362.004 515.023 362.441 514.926 cv
362.875 514.832 363.367 514.785 363.914 514.781 cv
364.883 514.781 li
364.883 514.234 li
364.879 513.965 364.852 513.727 364.797 513.52 cv
364.738 513.312 364.645 513.141 364.52 513 cv
364.387 512.863 364.223 512.758 364.023 512.687 cv
363.816 512.617 363.566 512.582 363.277 512.582 cv
362.957 512.582 362.672 512.621 362.422 512.695 cv
362.164 512.773 361.945 512.855 361.758 512.945 cv
361.57 513.039 361.41 513.125 361.285 513.195 cv
361.152 513.273 361.059 513.309 361 513.309 cv
360.957 513.309 360.922 513.301 360.891 513.277 cv
360.859 513.262 360.832 513.23 360.809 513.184 cv
360.785 513.145 360.766 513.09 360.758 513.023 cv
360.742 512.961 360.738 512.891 360.742 512.809 cv
360.738 512.684 360.746 512.578 360.77 512.5 cv
360.785 512.426 360.832 512.355 360.902 512.285 cv
360.973 512.219 361.094 512.141 361.266 512.051 cv
361.438 511.961 361.633 511.879 361.855 511.801 cv
362.078 511.73 362.324 511.668 362.59 511.613 cv
362.855 511.566 363.121 511.539 363.395 511.539 cv
363.895 511.539 364.324 511.598 364.676 511.711 cv
365.027 511.828 365.313 511.996 365.535 512.215 cv
365.75 512.437 365.91 512.711 366.012 513.035 cv
366.109 513.367 366.156 513.75 366.16 514.18 cv
cp
364.883 515.707 mo
363.781 515.707 li
363.426 515.711 363.121 515.742 362.863 515.797 cv
362.602 515.859 362.387 515.945 362.215 516.062 cv
362.043 516.18 361.918 516.32 361.84 516.484 cv
361.758 516.648 361.715 516.836 361.719 517.047 cv
361.715 517.414 361.832 517.707 362.063 517.918 cv
362.293 518.137 362.617 518.242 363.035 518.242 cv
363.371 518.242 363.684 518.156 363.973 517.984 cv
364.262 517.812 364.563 517.551 364.883 517.195 cv
cp
f
374.379 512.207 mo
374.375 512.391 374.352 512.523 374.305 512.602 cv
374.254 512.684 374.191 512.723 374.117 512.723 cv
373.109 512.723 li
373.289 512.91 373.418 513.117 373.492 513.344 cv
373.563 513.57 373.598 513.805 373.602 514.047 cv
373.598 514.453 373.531 514.812 373.406 515.125 cv
373.273 515.437 373.09 515.703 372.848 515.914 cv
372.605 516.133 372.316 516.297 371.988 516.41 cv
371.652 516.527 371.285 516.586 370.883 516.582 cv
370.594 516.586 370.32 516.547 370.066 516.469 cv
369.805 516.395 369.609 516.301 369.473 516.184 cv
369.379 516.281 369.301 516.387 369.242 516.504 cv
369.18 516.625 369.148 516.762 369.152 516.914 cv
369.148 517.098 369.234 517.25 369.406 517.367 cv
369.574 517.492 369.797 517.555 370.078 517.562 cv
371.91 517.641 li
372.258 517.652 372.574 517.699 372.867 517.785 cv
373.156 517.871 373.41 517.996 373.625 518.152 cv
373.836 518.312 374.004 518.504 374.125 518.734 cv
374.242 518.969 374.301 519.238 374.305 519.543 cv
374.301 519.863 374.234 520.168 374.102 520.461 cv
373.965 520.75 373.758 521.004 373.48 521.227 cv
373.199 521.445 372.844 521.621 372.414 521.75 cv
371.984 521.875 371.477 521.937 370.891 521.941 cv
370.32 521.937 369.836 521.891 369.441 521.797 cv
369.043 521.699 368.719 521.566 368.465 521.402 cv
368.211 521.234 368.027 521.039 367.914 520.809 cv
367.797 520.574 367.738 520.32 367.742 520.055 cv
367.738 519.883 367.758 519.719 367.805 519.559 cv
367.844 519.395 367.906 519.242 367.992 519.098 cv
368.074 518.953 368.184 518.816 368.313 518.68 cv
368.438 518.551 368.582 518.418 368.754 518.289 cv
368.496 518.16 368.309 517.996 368.188 517.797 cv
368.066 517.602 368.008 517.391 368.008 517.156 cv
368.008 516.844 368.07 516.559 368.199 516.309 cv
368.328 516.059 368.488 515.836 368.684 515.637 cv
368.52 515.445 368.395 515.23 368.301 514.988 cv
368.207 514.75 368.16 514.457 368.16 514.109 cv
368.16 513.715 368.227 513.355 368.363 513.035 cv
368.496 512.719 368.684 512.453 368.926 512.234 cv
369.164 512.02 369.449 511.852 369.785 511.73 cv
370.117 511.617 370.484 511.559 370.883 511.555 cv
371.094 511.559 371.293 511.57 371.477 511.59 cv
371.66 511.617 371.832 511.648 371.996 511.687 cv
374.117 511.687 li
374.203 511.691 374.27 511.734 374.313 511.816 cv
374.355 511.906 374.375 512.035 374.379 512.207 cv
cp
372.371 514.055 mo
372.367 513.582 372.234 513.211 371.977 512.937 cv
371.711 512.672 371.34 512.535 370.859 512.535 cv
370.605 512.535 370.387 512.578 370.207 512.66 cv
370.02 512.746 369.867 512.859 369.746 513.004 cv
369.625 513.152 369.535 513.32 369.477 513.508 cv
369.414 513.695 369.383 513.895 369.387 514.102 cv
369.383 514.566 369.516 514.93 369.777 515.195 cv
370.039 515.461 370.406 515.594 370.883 515.59 cv
371.133 515.594 371.352 515.555 371.543 515.469 cv
371.727 515.391 371.883 515.277 372.008 515.137 cv
372.129 514.996 372.219 514.832 372.281 514.641 cv
372.336 514.457 372.367 514.262 372.371 514.055 cv
cp
373.016 519.613 mo
373.012 519.309 372.887 519.078 372.645 518.914 cv
372.395 518.754 372.063 518.664 371.645 518.652 cv
369.828 518.59 li
369.66 518.723 369.523 518.848 369.422 518.961 cv
369.313 519.078 369.23 519.187 369.168 519.297 cv
369.105 519.402 369.063 519.508 369.039 519.613 cv
369.016 519.715 369.004 519.82 369.004 519.93 cv
369.004 520.266 369.172 520.52 369.516 520.699 cv
369.855 520.871 370.336 520.961 370.953 520.961 cv
371.34 520.961 371.664 520.922 371.93 520.848 cv
372.188 520.77 372.398 520.668 372.563 520.547 cv
372.719 520.418 372.836 520.277 372.91 520.117 cv
372.977 519.957 373.012 519.789 373.016 519.613 cv
cp
f
381.941 515.094 mo
381.938 515.297 381.887 515.437 381.789 515.523 cv
381.684 515.609 381.566 515.652 381.441 515.652 cv
376.824 515.652 li
376.82 516.043 376.859 516.395 376.941 516.707 cv
377.016 517.02 377.148 517.289 377.332 517.508 cv
377.512 517.734 377.746 517.906 378.043 518.023 cv
378.332 518.148 378.691 518.207 379.117 518.203 cv
379.449 518.207 379.746 518.18 380.008 518.121 cv
380.27 518.07 380.496 518.008 380.688 517.937 cv
380.875 517.871 381.031 517.812 381.156 517.754 cv
381.277 517.703 381.371 517.676 381.434 517.672 cv
381.469 517.676 381.5 517.684 381.531 517.699 cv
381.559 517.719 381.582 517.746 381.602 517.781 cv
381.613 517.82 381.625 517.871 381.637 517.934 cv
381.641 518 381.645 518.078 381.648 518.172 cv
381.645 518.242 381.641 518.301 381.641 518.348 cv
381.633 518.395 381.629 518.437 381.621 518.477 cv
381.613 518.516 381.598 518.551 381.582 518.582 cv
381.559 518.613 381.535 518.645 381.512 518.672 cv
381.48 518.703 381.398 518.75 381.258 518.812 cv
381.117 518.879 380.934 518.941 380.711 519.004 cv
380.484 519.066 380.227 519.121 379.934 519.172 cv
379.641 519.219 379.328 519.242 378.996 519.246 cv
378.418 519.242 377.91 519.164 377.48 519.004 cv
377.043 518.844 376.68 518.605 376.387 518.289 cv
376.086 517.973 375.863 517.578 375.715 517.098 cv
375.566 516.621 375.492 516.062 375.492 515.426 cv
375.492 514.828 375.566 514.289 375.723 513.805 cv
375.875 513.328 376.102 512.918 376.398 512.582 cv
376.691 512.246 377.047 511.988 377.461 511.809 cv
377.875 511.629 378.34 511.539 378.855 511.539 cv
379.406 511.539 379.875 511.629 380.262 511.805 cv
380.648 511.984 380.965 512.223 381.219 512.52 cv
381.465 512.82 381.648 513.172 381.766 513.57 cv
381.879 513.977 381.938 514.406 381.941 514.859 cv
cp
380.648 514.711 mo
380.664 514.035 380.512 513.504 380.195 513.121 cv
379.879 512.738 379.41 512.547 378.793 512.543 cv
378.469 512.547 378.188 512.605 377.949 512.723 cv
377.707 512.844 377.508 513.004 377.348 513.199 cv
377.184 513.398 377.059 513.629 376.973 513.891 cv
376.883 514.152 376.832 514.426 376.824 514.711 cv
cp
f
388.305 516.992 mo
388.301 517.355 388.234 517.676 388.105 517.953 cv
387.973 518.234 387.785 518.469 387.543 518.66 cv
387.297 518.855 387.004 519 386.668 519.098 cv
386.328 519.195 385.957 519.242 385.555 519.246 cv
385.301 519.242 385.063 519.223 384.84 519.187 cv
384.613 519.145 384.414 519.098 384.234 519.039 cv
384.055 518.98 383.902 518.918 383.777 518.852 cv
383.652 518.789 383.559 518.73 383.504 518.676 cv
383.445 518.625 383.406 518.555 383.383 518.457 cv
383.355 518.367 383.344 518.238 383.344 518.078 cv
383.344 517.98 383.348 517.898 383.359 517.828 cv
383.367 517.762 383.379 517.707 383.398 517.664 cv
383.41 517.625 383.434 517.594 383.461 517.574 cv
383.488 517.559 383.52 517.551 383.559 517.547 cv
383.613 517.551 383.699 517.586 383.813 517.652 cv
383.922 517.727 384.059 517.805 384.227 517.883 cv
384.387 517.969 384.578 518.043 384.805 518.113 cv
385.023 518.184 385.281 518.219 385.578 518.219 cv
385.793 518.219 385.992 518.195 386.172 518.148 cv
386.348 518.102 386.5 518.035 386.629 517.941 cv
386.758 517.855 386.859 517.738 386.93 517.594 cv
387 517.457 387.035 517.289 387.035 517.094 cv
387.035 516.898 386.984 516.734 386.883 516.598 cv
386.781 516.465 386.645 516.344 386.48 516.238 cv
386.313 516.137 386.129 516.047 385.922 515.961 cv
385.711 515.883 385.496 515.797 385.277 515.707 cv
385.059 515.621 384.844 515.52 384.633 515.406 cv
384.422 515.297 384.23 515.164 384.066 515 cv
383.895 514.844 383.762 514.648 383.664 514.422 cv
383.559 514.199 383.508 513.934 383.512 513.621 cv
383.508 513.348 383.563 513.082 383.672 512.828 cv
383.777 512.578 383.938 512.359 384.152 512.168 cv
384.363 511.98 384.629 511.828 384.949 511.711 cv
385.27 511.598 385.641 511.539 386.07 511.539 cv
386.254 511.539 386.441 511.555 386.629 511.586 cv
386.813 511.617 386.98 511.656 387.137 511.703 cv
387.285 511.75 387.414 511.801 387.523 511.855 cv
387.625 511.91 387.707 511.961 387.766 512 cv
387.816 512.047 387.852 512.082 387.875 512.109 cv
387.891 512.141 387.906 512.176 387.914 512.211 cv
387.922 512.254 387.93 512.301 387.938 512.355 cv
387.945 512.414 387.949 512.484 387.949 512.566 cv
387.949 512.656 387.945 512.734 387.938 512.797 cv
387.93 512.867 387.914 512.918 387.898 512.957 cv
387.875 513 387.855 513.031 387.832 513.047 cv
387.805 513.066 387.773 513.074 387.746 513.074 cv
387.695 513.074 387.629 513.047 387.543 512.988 cv
387.453 512.934 387.34 512.871 387.199 512.805 cv
387.059 512.742 386.891 512.684 386.703 512.621 cv
386.512 512.566 386.297 512.535 386.055 512.535 cv
385.832 512.535 385.641 512.562 385.477 512.609 cv
385.309 512.664 385.172 512.734 385.066 512.82 cv
384.961 512.914 384.879 513.02 384.828 513.145 cv
384.77 513.27 384.742 513.406 384.746 513.551 cv
384.742 513.754 384.793 513.922 384.898 514.059 cv
385 514.199 385.137 514.32 385.305 514.422 cv
385.469 514.527 385.66 514.621 385.875 514.703 cv
386.086 514.789 386.301 514.875 386.523 514.961 cv
386.742 515.051 386.961 515.152 387.18 515.258 cv
387.395 515.367 387.586 515.496 387.754 515.652 cv
387.918 515.809 388.051 515.996 388.152 516.215 cv
388.25 516.434 388.301 516.695 388.305 516.992 cv
cp
f
144.02 11.57 mo
144.016 12.41 143.914 13.16 143.707 13.816 cv
143.5 14.48 143.191 15.039 142.781 15.496 cv
142.371 15.957 141.863 16.309 141.258 16.547 cv
140.652 16.789 139.953 16.906 139.16 16.91 cv
138.371 16.906 137.684 16.805 137.102 16.602 cv
136.516 16.398 136.027 16.086 135.641 15.664 cv
135.25 15.242 134.961 14.707 134.766 14.059 cv
134.57 13.41 134.473 12.641 134.477 11.75 cv
134.473 10.937 134.574 10.207 134.785 9.55103 cv
134.988 8.90198 135.297 8.34802 135.711 7.88702 cv
136.117 7.43402 136.625 7.08197 137.234 6.836 cv
137.836 6.59399 138.539 6.47302 139.344 6.46899 cv
140.105 6.47302 140.781 6.57397 141.367 6.77301 cv
141.949 6.97699 142.438 7.28497 142.832 7.70697 cv
143.223 8.12903 143.52 8.65997 143.719 9.30103 cv
143.918 9.94098 144.016 10.699 144.02 11.57 cv
cp
141.871 11.68 mo
141.867 11.152 141.824 10.672 141.746 10.238 cv
141.66 9.80499 141.52 9.43402 141.32 9.12097 cv
141.117 8.81201 140.852 8.57397 140.52 8.40601 cv
140.188 8.23798 139.773 8.15198 139.277 8.15198 cv
138.77 8.15198 138.348 8.25 138.012 8.43701 cv
137.676 8.62903 137.402 8.87903 137.195 9.19501 cv
136.984 9.51599 136.836 9.88702 136.754 10.309 cv
136.664 10.73 136.621 11.18 136.625 11.648 cv
136.621 12.203 136.664 12.699 136.75 13.137 cv
136.832 13.578 136.973 13.953 137.172 14.262 cv
137.367 14.574 137.633 14.809 137.965 14.973 cv
138.297 15.137 138.715 15.219 139.223 15.219 cv
139.723 15.219 140.141 15.125 140.48 14.937 cv
140.816 14.75 141.09 14.496 141.301 14.176 cv
141.504 13.855 141.652 13.48 141.742 13.051 cv
141.824 12.621 141.867 12.164 141.871 11.68 cv
cp
f
152.02 9.508 mo
152.016 9.53497 152.016 9.56598 152.016 9.60199 cv
152.012 9.64099 152.008 9.67999 152 9.72302 cv
151.992 9.76599 151.98 9.81598 151.969 9.87097 cv
151.953 9.92999 151.938 9.99597 151.918 10.066 cv
149.832 16.355 li
149.805 16.445 149.77 16.52 149.727 16.57 cv
149.68 16.629 149.605 16.672 149.508 16.699 cv
149.402 16.73 149.266 16.746 149.094 16.762 cv
148.918 16.77 148.691 16.777 148.414 16.777 cv
148.137 16.777 147.91 16.77 147.738 16.758 cv
147.563 16.742 147.426 16.723 147.328 16.691 cv
147.227 16.664 147.156 16.621 147.113 16.562 cv
147.066 16.512 147.031 16.441 147.008 16.355 cv
144.922 10.066 li
144.891 9.96503 144.863 9.87097 144.848 9.789 cv
144.824 9.70697 144.816 9.64801 144.816 9.60901 cv
144.813 9.578 144.809 9.54303 144.813 9.508 cv
144.809 9.45697 144.824 9.40997 144.855 9.37097 cv
144.883 9.33197 144.934 9.30103 145.008 9.27301 cv
145.078 9.25 145.176 9.22998 145.305 9.21899 cv
145.43 9.211 145.59 9.20697 145.785 9.203 cv
145.996 9.20697 146.168 9.21503 146.301 9.22302 cv
146.426 9.23798 146.531 9.25403 146.609 9.27698 cv
146.684 9.30103 146.734 9.336 146.77 9.37903 cv
146.797 9.42603 146.824 9.47998 146.848 9.539 cv
148.43 14.641 li
148.477 14.836 li
148.523 14.641 li
150.082 9.539 li
150.094 9.47998 150.117 9.42603 150.152 9.37903 cv
150.184 9.336 150.238 9.30103 150.313 9.27698 cv
150.383 9.25403 150.48 9.23798 150.605 9.22302 cv
150.727 9.21503 150.887 9.20697 151.086 9.203 cv
151.277 9.20697 151.434 9.211 151.555 9.21899 cv
151.676 9.22998 151.77 9.25 151.84 9.27301 cv
151.906 9.30103 151.953 9.33197 151.98 9.37097 cv
152.004 9.40997 152.016 9.45697 152.02 9.508 cv
cp
f
159.496 12.789 mo
159.492 13.027 159.441 13.203 159.336 13.316 cv
159.227 13.434 159.078 13.492 158.898 13.488 cv
154.664 13.488 li
154.66 13.789 154.695 14.059 154.77 14.297 cv
154.836 14.539 154.949 14.742 155.105 14.91 cv
155.258 15.082 155.453 15.211 155.695 15.297 cv
155.934 15.387 156.223 15.43 156.566 15.43 cv
156.906 15.43 157.207 15.406 157.469 15.355 cv
157.727 15.309 157.953 15.254 158.145 15.191 cv
158.332 15.133 158.488 15.078 158.617 15.027 cv
158.738 14.98 158.84 14.957 158.922 14.953 cv
158.965 14.957 159.004 14.965 159.039 14.98 cv
159.066 15 159.094 15.031 159.113 15.078 cv
159.133 15.125 159.145 15.191 159.156 15.277 cv
159.16 15.363 159.164 15.473 159.168 15.602 cv
159.164 15.719 159.164 15.816 159.16 15.895 cv
159.152 15.977 159.145 16.043 159.137 16.098 cv
159.125 16.156 159.109 16.207 159.09 16.242 cv
159.07 16.285 159.043 16.32 159.012 16.355 cv
158.977 16.395 158.883 16.445 158.734 16.504 cv
158.578 16.57 158.387 16.633 158.156 16.687 cv
157.918 16.75 157.648 16.797 157.352 16.844 cv
157.047 16.883 156.727 16.906 156.387 16.91 cv
155.766 16.906 155.223 16.832 154.762 16.676 cv
154.293 16.523 153.906 16.285 153.598 15.969 cv
153.281 15.652 153.047 15.254 152.898 14.77 cv
152.742 14.289 152.668 13.723 152.672 13.066 cv
152.668 12.453 152.746 11.895 152.91 11.398 cv
153.066 10.902 153.301 10.484 153.613 10.137 cv
153.918 9.79303 154.293 9.52698 154.73 9.34399 cv
155.168 9.164 155.66 9.07397 156.215 9.07001 cv
156.793 9.07397 157.293 9.15997 157.707 9.328 cv
158.121 9.50403 158.457 9.742 158.723 10.043 cv
158.984 10.348 159.18 10.707 159.309 11.121 cv
159.43 11.539 159.492 11.988 159.496 12.477 cv
cp
157.594 12.227 mo
157.605 11.676 157.496 11.242 157.262 10.93 cv
157.027 10.617 156.66 10.461 156.168 10.457 cv
155.918 10.461 155.703 10.508 155.52 10.598 cv
155.332 10.695 155.18 10.82 155.059 10.977 cv
154.934 11.137 154.84 11.324 154.777 11.539 cv
154.711 11.754 154.672 11.984 154.664 12.227 cv
cp
f
165.57 10.16 mo
165.57 10.352 165.563 10.504 165.555 10.621 cv
165.539 10.742 165.523 10.836 165.508 10.902 cv
165.484 10.973 165.457 11.02 165.426 11.043 cv
165.387 11.07 165.344 11.082 165.297 11.082 cv
165.25 11.082 165.203 11.074 165.156 11.055 cv
165.102 11.039 165.043 11.02 164.98 10.996 cv
164.91 10.977 164.84 10.957 164.766 10.937 cv
164.684 10.922 164.598 10.914 164.508 10.91 cv
164.395 10.914 164.285 10.934 164.18 10.977 cv
164.07 11.023 163.957 11.094 163.844 11.184 cv
163.723 11.277 163.602 11.402 163.477 11.555 cv
163.348 11.715 163.211 11.906 163.066 12.133 cv
163.066 16.465 li
163.063 16.52 163.047 16.562 163.02 16.602 cv
162.984 16.641 162.93 16.676 162.859 16.699 cv
162.781 16.727 162.684 16.742 162.559 16.758 cv
162.434 16.77 162.273 16.777 162.086 16.777 cv
161.891 16.777 161.734 16.77 161.609 16.758 cv
161.484 16.742 161.383 16.727 161.309 16.699 cv
161.23 16.676 161.176 16.641 161.148 16.602 cv
161.113 16.562 161.098 16.52 161.102 16.465 cv
161.102 9.51599 li
161.098 9.46899 161.113 9.422 161.141 9.37903 cv
161.164 9.34399 161.211 9.31201 161.281 9.28101 cv
161.348 9.258 161.434 9.23798 161.543 9.22302 cv
161.648 9.21503 161.781 9.20697 161.945 9.203 cv
162.109 9.20697 162.246 9.21503 162.355 9.22302 cv
162.461 9.23798 162.547 9.258 162.609 9.28101 cv
162.668 9.31201 162.711 9.34399 162.738 9.37903 cv
162.762 9.422 162.773 9.46899 162.777 9.51599 cv
162.777 10.379 li
162.957 10.121 163.129 9.90997 163.293 9.73798 cv
163.449 9.57397 163.605 9.43701 163.754 9.336 cv
163.898 9.23798 164.043 9.172 164.188 9.12903 cv
164.332 9.09399 164.477 9.07397 164.625 9.07001 cv
164.691 9.07397 164.766 9.078 164.844 9.08197 cv
164.922 9.09399 165 9.10498 165.086 9.12097 cv
165.164 9.14099 165.238 9.15997 165.305 9.18402 cv
165.363 9.20697 165.41 9.23401 165.441 9.258 cv
165.469 9.289 165.488 9.31598 165.504 9.34399 cv
165.516 9.37903 165.527 9.422 165.539 9.47302 cv
165.547 9.53101 165.555 9.61298 165.563 9.71899 cv
165.566 9.828 165.57 9.97699 165.57 10.16 cv
cp
f
172.324 16.488 mo
172.32 16.566 172.293 16.621 172.246 16.66 cv
172.191 16.703 172.109 16.73 172 16.75 cv
171.883 16.766 171.719 16.777 171.504 16.777 cv
171.266 16.777 171.094 16.766 170.992 16.75 cv
170.883 16.73 170.809 16.703 170.77 16.66 cv
170.723 16.621 170.703 16.566 170.703 16.488 cv
170.703 15.937 li
170.414 16.246 170.086 16.484 169.723 16.652 cv
169.355 16.824 168.949 16.906 168.504 16.91 cv
168.133 16.906 167.793 16.859 167.484 16.766 cv
167.176 16.672 166.91 16.531 166.684 16.336 cv
166.457 16.148 166.281 15.914 166.156 15.633 cv
166.031 15.355 165.969 15.027 165.973 14.648 cv
165.969 14.25 166.047 13.898 166.207 13.594 cv
166.363 13.297 166.602 13.051 166.918 12.855 cv
167.23 12.664 167.621 12.52 168.09 12.422 cv
168.559 12.332 169.102 12.285 169.719 12.281 cv
170.398 12.281 li
170.398 11.859 li
170.398 11.645 170.375 11.453 170.332 11.289 cv
170.285 11.129 170.211 10.992 170.113 10.879 cv
170.008 10.773 169.875 10.691 169.707 10.637 cv
169.535 10.586 169.324 10.562 169.082 10.559 cv
168.75 10.562 168.457 10.598 168.203 10.668 cv
167.941 10.742 167.715 10.824 167.52 10.91 cv
167.32 11.004 167.156 11.082 167.027 11.152 cv
166.891 11.227 166.781 11.266 166.703 11.262 cv
166.641 11.266 166.59 11.246 166.551 11.207 cv
166.504 11.172 166.469 11.121 166.441 11.051 cv
166.41 10.988 166.387 10.902 166.375 10.801 cv
166.355 10.703 166.348 10.594 166.352 10.473 cv
166.348 10.312 166.363 10.187 166.391 10.09 cv
166.414 10 166.461 9.914 166.539 9.836 cv
166.609 9.76202 166.738 9.67999 166.922 9.59003 cv
167.102 9.5 167.313 9.414 167.559 9.336 cv
167.801 9.258 168.07 9.19501 168.359 9.14502 cv
168.648 9.09802 168.945 9.07397 169.254 9.07001 cv
169.797 9.07397 170.262 9.125 170.648 9.22998 cv
171.035 9.34003 171.355 9.50403 171.605 9.72302 cv
171.855 9.94098 172.035 10.227 172.152 10.574 cv
172.262 10.926 172.32 11.34 172.324 11.812 cv
cp
170.398 13.512 mo
169.648 13.512 li
169.332 13.516 169.063 13.539 168.84 13.582 cv
168.613 13.633 168.43 13.703 168.293 13.793 cv
168.148 13.891 168.047 14.004 167.984 14.133 cv
167.918 14.27 167.883 14.418 167.887 14.586 cv
167.883 14.879 167.977 15.109 168.164 15.273 cv
168.348 15.441 168.605 15.523 168.934 15.523 cv
169.207 15.523 169.457 15.453 169.691 15.312 cv
169.918 15.172 170.156 14.969 170.398 14.695 cv
cp
f
176.25 16.465 mo
176.246 16.52 176.23 16.562 176.203 16.602 cv
176.168 16.641 176.113 16.676 176.043 16.699 cv
175.965 16.727 175.867 16.742 175.742 16.758 cv
175.617 16.77 175.457 16.777 175.27 16.777 cv
175.074 16.777 174.918 16.77 174.793 16.758 cv
174.668 16.742 174.566 16.727 174.492 16.699 cv
174.414 16.676 174.359 16.641 174.332 16.602 cv
174.297 16.562 174.281 16.52 174.285 16.465 cv
174.285 6.21899 li
174.281 6.16803 174.297 6.12097 174.332 6.078 cv
174.359 6.039 174.414 6.00403 174.492 5.97302 cv
174.566 5.94501 174.668 5.92603 174.793 5.90601 cv
174.918 5.89502 175.074 5.88702 175.27 5.883 cv
175.457 5.88702 175.617 5.89502 175.742 5.90601 cv
175.867 5.92603 175.965 5.94501 176.043 5.97302 cv
176.113 6.00403 176.168 6.039 176.203 6.078 cv
176.23 6.12097 176.246 6.16803 176.25 6.21899 cv
cp
f
180.223 16.465 mo
180.219 16.52 180.203 16.562 180.176 16.602 cv
180.141 16.641 180.086 16.676 180.016 16.699 cv
179.938 16.727 179.84 16.742 179.715 16.758 cv
179.59 16.77 179.43 16.777 179.242 16.777 cv
179.047 16.777 178.891 16.77 178.766 16.758 cv
178.641 16.742 178.539 16.727 178.465 16.699 cv
178.387 16.676 178.332 16.641 178.305 16.602 cv
178.27 16.562 178.254 16.52 178.258 16.465 cv
178.258 6.21899 li
178.254 6.16803 178.27 6.12097 178.305 6.078 cv
178.332 6.039 178.387 6.00403 178.465 5.97302 cv
178.539 5.94501 178.641 5.92603 178.766 5.90601 cv
178.891 5.89502 179.047 5.88702 179.242 5.883 cv
179.43 5.88702 179.59 5.89502 179.715 5.90601 cv
179.84 5.92603 179.938 5.94501 180.016 5.97302 cv
180.086 6.00403 180.141 6.039 180.176 6.078 cv
180.203 6.12097 180.219 6.16803 180.223 6.21899 cv
cp
f
193.387 16.465 mo
193.387 16.527 193.375 16.574 193.355 16.609 cv
193.336 16.652 193.289 16.684 193.211 16.707 cv
193.133 16.73 193.016 16.746 192.867 16.762 cv
192.711 16.77 192.508 16.777 192.25 16.777 cv
192.031 16.777 191.855 16.77 191.727 16.762 cv
191.598 16.746 191.496 16.73 191.422 16.703 cv
191.344 16.676 191.289 16.641 191.262 16.594 cv
191.227 16.555 191.203 16.5 191.184 16.434 cv
190.277 14.184 li
190.168 13.93 190.063 13.703 189.961 13.504 cv
189.852 13.309 189.738 13.145 189.613 13.012 cv
189.484 12.883 189.336 12.781 189.172 12.711 cv
189.004 12.645 188.813 12.613 188.598 12.609 cv
187.957 12.609 li
187.957 16.449 li
187.953 16.504 187.938 16.551 187.906 16.59 cv
187.871 16.633 187.816 16.668 187.738 16.691 cv
187.66 16.719 187.555 16.738 187.426 16.754 cv
187.293 16.77 187.129 16.777 186.93 16.777 cv
186.73 16.777 186.563 16.77 186.434 16.754 cv
186.297 16.738 186.191 16.719 186.117 16.691 cv
186.035 16.668 185.98 16.633 185.953 16.59 cv
185.918 16.551 185.902 16.504 185.906 16.449 cv
185.906 7.29303 li
185.902 7.06598 185.961 6.90198 186.082 6.797 cv
186.195 6.69897 186.34 6.64801 186.516 6.64502 cv
189.125 6.64502 li
189.387 6.64801 189.605 6.65198 189.781 6.65997 cv
189.949 6.672 190.105 6.68402 190.25 6.69897 cv
190.652 6.758 191.016 6.85901 191.34 6.99597 cv
191.664 7.14099 191.941 7.32397 192.168 7.547 cv
192.395 7.77698 192.566 8.04303 192.688 8.35199 cv
192.805 8.65997 192.863 9.01599 192.867 9.414 cv
192.863 9.75403 192.82 10.062 192.738 10.336 cv
192.648 10.617 192.523 10.863 192.359 11.082 cv
192.191 11.301 191.984 11.492 191.742 11.648 cv
191.496 11.812 191.219 11.941 190.91 12.039 cv
191.059 12.113 191.203 12.203 191.336 12.305 cv
191.469 12.414 191.59 12.539 191.707 12.684 cv
191.82 12.832 191.934 13 192.039 13.187 cv
192.141 13.379 192.242 13.594 192.344 13.832 cv
193.195 15.82 li
193.27 16.02 193.32 16.16 193.348 16.25 cv
193.371 16.344 193.387 16.418 193.387 16.465 cv
cp
190.746 9.625 mo
190.742 9.29303 190.668 9.01202 190.52 8.78101 cv
190.367 8.55499 190.121 8.39502 189.781 8.297 cv
189.676 8.27301 189.559 8.25 189.426 8.23401 cv
189.293 8.21899 189.109 8.211 188.875 8.211 cv
187.957 8.211 li
187.957 11.074 li
189 11.074 li
189.289 11.078 189.547 11.043 189.766 10.969 cv
189.984 10.902 190.164 10.801 190.309 10.672 cv
190.453 10.547 190.563 10.395 190.637 10.215 cv
190.707 10.039 190.742 9.84399 190.746 9.625 cv
cp
f
201.371 16.465 mo
201.367 16.52 201.355 16.562 201.332 16.602 cv
201.305 16.641 201.258 16.676 201.195 16.699 cv
201.129 16.727 201.043 16.742 200.938 16.758 cv
200.832 16.77 200.699 16.777 200.539 16.777 cv
200.363 16.777 200.223 16.77 200.121 16.758 cv
200.012 16.742 199.93 16.727 199.867 16.699 cv
199.805 16.676 199.758 16.641 199.734 16.602 cv
199.703 16.562 199.691 16.52 199.695 16.465 cv
199.695 15.664 li
199.309 16.078 198.918 16.391 198.523 16.598 cv
198.121 16.805 197.711 16.906 197.289 16.91 cv
196.809 16.906 196.406 16.832 196.082 16.676 cv
195.758 16.523 195.496 16.309 195.297 16.039 cv
195.094 15.77 194.949 15.457 194.867 15.098 cv
194.777 14.742 194.734 14.301 194.738 13.77 cv
194.738 9.51599 li
194.734 9.46899 194.75 9.422 194.781 9.37903 cv
194.809 9.34399 194.859 9.31201 194.938 9.28101 cv
195.012 9.258 195.113 9.23798 195.242 9.22302 cv
195.367 9.21503 195.523 9.20697 195.715 9.203 cv
195.902 9.20697 196.063 9.21503 196.188 9.22302 cv
196.313 9.23798 196.41 9.258 196.488 9.28101 cv
196.559 9.31201 196.613 9.34399 196.648 9.37903 cv
196.676 9.422 196.691 9.46899 196.695 9.51599 cv
196.695 13.441 li
196.691 13.809 196.715 14.086 196.766 14.277 cv
196.809 14.469 196.879 14.633 196.98 14.77 cv
197.074 14.91 197.199 15.016 197.348 15.09 cv
197.496 15.168 197.668 15.207 197.863 15.203 cv
198.113 15.207 198.363 15.117 198.617 14.93 cv
198.867 14.75 199.137 14.484 199.422 14.137 cv
199.422 9.51599 li
199.422 9.46899 199.434 9.422 199.465 9.37903 cv
199.488 9.34399 199.543 9.31201 199.621 9.28101 cv
199.695 9.258 199.793 9.23798 199.922 9.22302 cv
200.043 9.21503 200.203 9.20697 200.398 9.203 cv
200.59 9.20697 200.746 9.21503 200.871 9.22302 cv
200.992 9.23798 201.094 9.258 201.168 9.28101 cv
201.238 9.31201 201.289 9.34399 201.324 9.37903 cv
201.352 9.422 201.367 9.46899 201.371 9.51599 cv
cp
f
209.988 16.465 mo
209.984 16.52 209.969 16.562 209.941 16.602 cv
209.906 16.641 209.855 16.676 209.785 16.699 cv
209.711 16.727 209.609 16.742 209.484 16.758 cv
209.355 16.77 209.199 16.777 209.016 16.777 cv
208.82 16.777 208.66 16.77 208.535 16.758 cv
208.406 16.742 208.305 16.727 208.234 16.699 cv
208.156 16.676 208.105 16.641 208.078 16.602 cv
208.043 16.562 208.027 16.52 208.031 16.465 cv
208.031 12.5 li
208.027 12.164 208.004 11.898 207.957 11.703 cv
207.906 11.512 207.832 11.348 207.742 11.211 cv
207.648 11.074 207.531 10.969 207.383 10.891 cv
207.234 10.816 207.059 10.777 206.863 10.777 cv
206.609 10.777 206.359 10.871 206.105 11.051 cv
205.852 11.234 205.586 11.496 205.313 11.844 cv
205.313 16.465 li
205.309 16.52 205.293 16.562 205.266 16.602 cv
205.23 16.641 205.176 16.676 205.105 16.699 cv
205.027 16.727 204.93 16.742 204.805 16.758 cv
204.68 16.77 204.52 16.777 204.332 16.777 cv
204.137 16.777 203.98 16.77 203.855 16.758 cv
203.73 16.742 203.629 16.727 203.555 16.699 cv
203.477 16.676 203.422 16.641 203.395 16.602 cv
203.359 16.562 203.344 16.52 203.348 16.465 cv
203.348 9.51599 li
203.344 9.46899 203.359 9.422 203.387 9.37903 cv
203.41 9.34399 203.457 9.31201 203.527 9.28101 cv
203.594 9.258 203.68 9.23798 203.789 9.22302 cv
203.895 9.21503 204.027 9.20697 204.191 9.203 cv
204.355 9.20697 204.492 9.21503 204.602 9.22302 cv
204.707 9.23798 204.793 9.258 204.855 9.28101 cv
204.914 9.31201 204.957 9.34399 204.984 9.37903 cv
205.008 9.422 205.02 9.46899 205.023 9.51599 cv
205.023 10.316 li
205.406 9.90601 205.797 9.59399 206.195 9.383 cv
206.59 9.17603 207.008 9.07397 207.441 9.07001 cv
207.91 9.07397 208.309 9.15198 208.637 9.30499 cv
208.961 9.46503 209.223 9.67603 209.422 9.94098 cv
209.621 10.211 209.766 10.523 209.855 10.879 cv
209.941 11.238 209.984 11.668 209.988 12.172 cv
cp
f
215.859 15.781 mo
215.859 16.008 215.844 16.184 215.816 16.305 cv
215.785 16.43 215.746 16.516 215.703 16.562 cv
215.652 16.613 215.586 16.656 215.496 16.695 cv
215.402 16.734 215.293 16.766 215.176 16.797 cv
215.051 16.82 214.918 16.844 214.777 16.863 cv
214.633 16.875 214.492 16.883 214.348 16.887 cv
213.957 16.883 213.617 16.832 213.332 16.738 cv
213.047 16.637 212.813 16.488 212.625 16.281 cv
212.438 16.078 212.297 15.82 212.211 15.508 cv
212.117 15.199 212.074 14.828 212.078 14.398 cv
212.078 10.84 li
211.246 10.84 li
211.145 10.844 211.07 10.781 211.02 10.656 cv
210.965 10.535 210.938 10.332 210.941 10.043 cv
210.938 9.89502 210.945 9.76599 210.961 9.664 cv
210.973 9.56201 210.992 9.47998 211.02 9.41803 cv
211.043 9.35901 211.074 9.31598 211.117 9.289 cv
211.152 9.26599 211.199 9.25403 211.254 9.25 cv
212.078 9.25 li
212.078 7.69897 li
212.074 7.65198 212.09 7.60498 212.121 7.55902 cv
212.148 7.52002 212.199 7.48401 212.277 7.453 cv
212.352 7.42999 212.453 7.40601 212.582 7.39099 cv
212.707 7.37903 212.863 7.375 213.055 7.37097 cv
213.242 7.375 213.402 7.37903 213.531 7.39099 cv
213.656 7.40601 213.758 7.42999 213.832 7.453 cv
213.902 7.48401 213.953 7.52002 213.988 7.55902 cv
214.016 7.60498 214.031 7.65198 214.035 7.69897 cv
214.035 9.25 li
215.547 9.25 li
215.598 9.25403 215.645 9.26599 215.684 9.289 cv
215.723 9.31598 215.754 9.35901 215.781 9.41803 cv
215.805 9.47998 215.824 9.56201 215.84 9.664 cv
215.852 9.76599 215.859 9.89502 215.859 10.043 cv
215.859 10.332 215.832 10.535 215.781 10.656 cv
215.727 10.781 215.652 10.844 215.555 10.84 cv
214.035 10.84 li
214.035 14.105 li
214.031 14.484 214.09 14.77 214.215 14.957 cv
214.332 15.148 214.547 15.242 214.852 15.242 cv
214.953 15.242 215.047 15.234 215.133 15.215 cv
215.215 15.199 215.289 15.18 215.355 15.152 cv
215.418 15.133 215.473 15.109 215.52 15.09 cv
215.563 15.074 215.602 15.066 215.641 15.062 cv
215.668 15.066 215.699 15.074 215.73 15.09 cv
215.758 15.109 215.777 15.148 215.797 15.199 cv
215.809 15.258 215.824 15.332 215.84 15.422 cv
215.852 15.52 215.859 15.637 215.859 15.781 cv
cp
f
219.246 16.465 mo
219.242 16.52 219.227 16.562 219.199 16.602 cv
219.164 16.641 219.109 16.676 219.039 16.699 cv
218.961 16.727 218.863 16.742 218.738 16.758 cv
218.613 16.77 218.453 16.777 218.266 16.777 cv
218.07 16.777 217.914 16.77 217.789 16.758 cv
217.664 16.742 217.563 16.727 217.488 16.699 cv
217.41 16.676 217.355 16.641 217.328 16.602 cv
217.293 16.562 217.277 16.52 217.281 16.465 cv
217.281 9.53101 li
217.277 9.47998 217.293 9.43402 217.328 9.39502 cv
217.355 9.35498 217.41 9.32397 217.488 9.29303 cv
217.563 9.27002 217.664 9.24597 217.789 9.22699 cv
217.914 9.21503 218.07 9.20697 218.266 9.203 cv
218.453 9.20697 218.613 9.21503 218.738 9.22699 cv
218.863 9.24597 218.961 9.27002 219.039 9.29303 cv
219.109 9.32397 219.164 9.35498 219.199 9.39502 cv
219.227 9.43402 219.242 9.47998 219.246 9.53101 cv
cp
219.395 7.15997 mo
219.395 7.55902 219.313 7.83197 219.152 7.97998 cv
218.988 8.133 218.691 8.20697 218.258 8.203 cv
217.813 8.20697 217.512 8.133 217.363 7.98798 cv
217.207 7.84399 217.133 7.58197 217.133 7.19897 cv
217.133 6.80499 217.211 6.53101 217.371 6.37903 cv
217.527 6.22699 217.828 6.14801 218.273 6.14801 cv
218.707 6.14801 219.004 6.22302 219.16 6.37097 cv
219.316 6.52002 219.395 6.78497 219.395 7.15997 cv
cp
f
232.266 16.465 mo
232.262 16.52 232.246 16.562 232.219 16.602 cv
232.184 16.641 232.133 16.676 232.063 16.699 cv
231.988 16.727 231.887 16.742 231.766 16.758 cv
231.641 16.77 231.484 16.777 231.293 16.777 cv
231.094 16.777 230.934 16.77 230.809 16.758 cv
230.684 16.742 230.582 16.727 230.508 16.699 cv
230.43 16.676 230.379 16.641 230.352 16.602 cv
230.324 16.562 230.309 16.52 230.313 16.465 cv
230.313 12.344 li
230.309 12.113 230.289 11.898 230.246 11.703 cv
230.199 11.512 230.129 11.348 230.043 11.211 cv
229.949 11.074 229.836 10.969 229.699 10.891 cv
229.559 10.816 229.395 10.777 229.203 10.777 cv
228.969 10.777 228.73 10.871 228.492 11.051 cv
228.254 11.234 227.996 11.496 227.715 11.844 cv
227.715 16.465 li
227.715 16.52 227.699 16.562 227.668 16.602 cv
227.637 16.641 227.582 16.676 227.508 16.699 cv
227.43 16.727 227.328 16.742 227.207 16.758 cv
227.082 16.77 226.93 16.777 226.742 16.777 cv
226.547 16.777 226.387 16.77 226.266 16.758 cv
226.137 16.742 226.035 16.727 225.965 16.699 cv
225.887 16.676 225.836 16.641 225.805 16.602 cv
225.773 16.562 225.758 16.52 225.758 16.465 cv
225.758 12.344 li
225.758 12.113 225.734 11.898 225.691 11.703 cv
225.648 11.512 225.582 11.348 225.496 11.211 cv
225.402 11.074 225.289 10.969 225.152 10.891 cv
225.008 10.816 224.844 10.777 224.66 10.777 cv
224.418 10.777 224.18 10.871 223.941 11.051 cv
223.703 11.234 223.445 11.496 223.172 11.844 cv
223.172 16.465 li
223.168 16.52 223.152 16.562 223.125 16.602 cv
223.09 16.641 223.035 16.676 222.965 16.699 cv
222.887 16.727 222.789 16.742 222.664 16.758 cv
222.539 16.77 222.379 16.777 222.191 16.777 cv
221.996 16.777 221.84 16.77 221.715 16.758 cv
221.59 16.742 221.488 16.727 221.414 16.699 cv
221.336 16.676 221.281 16.641 221.254 16.602 cv
221.219 16.562 221.203 16.52 221.207 16.465 cv
221.207 9.51599 li
221.203 9.46899 221.219 9.422 221.246 9.37903 cv
221.27 9.34399 221.316 9.31201 221.387 9.28101 cv
221.453 9.258 221.539 9.23798 221.648 9.22302 cv
221.754 9.21503 221.887 9.20697 222.051 9.203 cv
222.215 9.20697 222.352 9.21503 222.461 9.22302 cv
222.566 9.23798 222.652 9.258 222.715 9.28101 cv
222.773 9.31201 222.816 9.34399 222.844 9.37903 cv
222.867 9.422 222.879 9.46899 222.883 9.51599 cv
222.883 10.316 li
223.266 9.90601 223.648 9.59399 224.031 9.383 cv
224.41 9.17603 224.813 9.07397 225.23 9.07001 cv
225.516 9.07397 225.77 9.10199 226 9.15997 cv
226.227 9.22302 226.434 9.30902 226.613 9.41803 cv
226.793 9.53101 226.945 9.66803 227.074 9.82001 cv
227.203 9.97699 227.313 10.148 227.402 10.34 cv
227.609 10.117 227.813 9.92603 228.016 9.76599 cv
228.211 9.60498 228.41 9.47302 228.605 9.37097 cv
228.801 9.27002 228.996 9.19501 229.191 9.14502 cv
229.387 9.09802 229.586 9.07397 229.789 9.07001 cv
230.25 9.07397 230.637 9.15198 230.957 9.30499 cv
231.27 9.46503 231.527 9.67603 231.723 9.94098 cv
231.918 10.211 232.055 10.523 232.141 10.879 cv
232.219 11.238 232.262 11.617 232.266 12.016 cv
cp
f
240.602 12.789 mo
240.598 13.027 240.547 13.203 240.441 13.316 cv
240.332 13.434 240.184 13.492 240.004 13.488 cv
235.77 13.488 li
235.766 13.789 235.801 14.059 235.875 14.297 cv
235.941 14.539 236.055 14.742 236.211 14.91 cv
236.363 15.082 236.559 15.211 236.801 15.297 cv
237.039 15.387 237.328 15.43 237.672 15.43 cv
238.012 15.43 238.313 15.406 238.574 15.355 cv
238.832 15.309 239.059 15.254 239.25 15.191 cv
239.438 15.133 239.594 15.078 239.723 15.027 cv
239.844 14.98 239.945 14.957 240.027 14.953 cv
240.07 14.957 240.109 14.965 240.145 14.98 cv
240.172 15 240.199 15.031 240.219 15.078 cv
240.238 15.125 240.25 15.191 240.262 15.277 cv
240.266 15.363 240.27 15.473 240.273 15.602 cv
240.27 15.719 240.27 15.816 240.266 15.895 cv
240.258 15.977 240.25 16.043 240.242 16.098 cv
240.23 16.156 240.215 16.207 240.195 16.242 cv
240.176 16.285 240.148 16.32 240.117 16.355 cv
240.082 16.395 239.988 16.445 239.84 16.504 cv
239.684 16.57 239.492 16.633 239.262 16.687 cv
239.023 16.75 238.754 16.797 238.457 16.844 cv
238.152 16.883 237.832 16.906 237.492 16.91 cv
236.871 16.906 236.328 16.832 235.867 16.676 cv
235.398 16.523 235.012 16.285 234.703 15.969 cv
234.387 15.652 234.152 15.254 234.004 14.77 cv
233.848 14.289 233.773 13.723 233.777 13.066 cv
233.773 12.453 233.852 11.895 234.016 11.398 cv
234.172 10.902 234.406 10.484 234.719 10.137 cv
235.023 9.79303 235.398 9.52698 235.836 9.34399 cv
236.273 9.164 236.766 9.07397 237.32 9.07001 cv
237.898 9.07397 238.398 9.15997 238.813 9.328 cv
239.227 9.50403 239.563 9.742 239.828 10.043 cv
240.09 10.348 240.285 10.707 240.414 11.121 cv
240.535 11.539 240.598 11.988 240.602 12.477 cv
cp
238.699 12.227 mo
238.711 11.676 238.602 11.242 238.367 10.93 cv
238.133 10.617 237.766 10.461 237.273 10.457 cv
237.023 10.461 236.809 10.508 236.625 10.598 cv
236.438 10.695 236.285 10.82 236.164 10.977 cv
236.039 11.137 235.945 11.324 235.883 11.539 cv
235.816 11.754 235.777 11.984 235.77 12.227 cv
cp
f
247.105 14.5 mo
247.102 14.898 247.027 15.246 246.883 15.547 cv
246.734 15.848 246.527 16.102 246.258 16.301 cv
245.984 16.508 245.664 16.656 245.297 16.758 cv
244.93 16.855 244.527 16.906 244.098 16.91 cv
243.832 16.906 243.586 16.887 243.352 16.852 cv
243.117 16.809 242.906 16.762 242.719 16.703 cv
242.531 16.645 242.375 16.582 242.25 16.52 cv
242.125 16.457 242.031 16.398 241.977 16.344 cv
241.918 16.289 241.875 16.207 241.848 16.09 cv
241.813 15.977 241.797 15.801 241.801 15.57 cv
241.797 15.422 241.805 15.301 241.816 15.207 cv
241.824 15.117 241.84 15.047 241.863 14.988 cv
241.883 14.937 241.906 14.898 241.941 14.879 cv
241.969 14.863 242.008 14.855 242.055 14.852 cv
242.109 14.855 242.195 14.887 242.309 14.949 cv
242.418 15.016 242.555 15.09 242.727 15.164 cv
242.891 15.246 243.086 15.316 243.305 15.383 cv
243.523 15.453 243.773 15.488 244.059 15.484 cv
244.234 15.488 244.391 15.469 244.531 15.43 cv
244.664 15.395 244.785 15.344 244.891 15.273 cv
244.988 15.207 245.063 15.121 245.117 15.016 cv
245.164 14.914 245.191 14.793 245.195 14.656 cv
245.191 14.5 245.145 14.367 245.051 14.258 cv
244.957 14.148 244.828 14.051 244.672 13.965 cv
244.508 13.883 244.328 13.805 244.133 13.73 cv
243.93 13.66 243.727 13.582 243.516 13.488 cv
243.305 13.402 243.098 13.301 242.902 13.184 cv
242.699 13.074 242.52 12.934 242.363 12.766 cv
242.199 12.602 242.074 12.402 241.98 12.164 cv
241.887 11.934 241.84 11.652 241.84 11.32 cv
241.84 10.992 241.902 10.687 242.031 10.406 cv
242.16 10.133 242.348 9.89502 242.594 9.69501 cv
242.836 9.5 243.133 9.34802 243.484 9.23401 cv
243.832 9.12903 244.227 9.07397 244.668 9.07001 cv
244.883 9.07397 245.094 9.09003 245.301 9.117 cv
245.504 9.15198 245.691 9.19098 245.859 9.23401 cv
246.023 9.28497 246.164 9.336 246.281 9.38702 cv
246.395 9.44501 246.477 9.492 246.527 9.52698 cv
246.574 9.57001 246.609 9.60901 246.633 9.64502 cv
246.652 9.68701 246.664 9.73401 246.676 9.78497 cv
246.684 9.84003 246.695 9.90601 246.703 9.98401 cv
246.711 10.07 246.715 10.168 246.715 10.285 cv
246.715 10.426 246.711 10.543 246.703 10.629 cv
246.695 10.723 246.68 10.793 246.664 10.84 cv
246.645 10.895 246.621 10.93 246.594 10.945 cv
246.559 10.969 246.523 10.977 246.484 10.973 cv
246.434 10.977 246.359 10.949 246.266 10.891 cv
246.164 10.84 246.043 10.781 245.895 10.715 cv
245.746 10.656 245.574 10.598 245.379 10.539 cv
245.184 10.488 244.961 10.461 244.715 10.457 cv
244.535 10.461 244.383 10.48 244.254 10.512 cv
244.121 10.551 244.012 10.602 243.934 10.668 cv
243.848 10.738 243.785 10.816 243.746 10.906 cv
243.699 11 243.68 11.098 243.684 11.199 cv
243.68 11.359 243.73 11.496 243.832 11.602 cv
243.93 11.715 244.059 11.809 244.223 11.891 cv
244.383 11.977 244.566 12.055 244.773 12.125 cv
244.977 12.199 245.184 12.281 245.395 12.363 cv
245.602 12.453 245.809 12.551 246.02 12.664 cv
246.223 12.777 246.406 12.918 246.566 13.082 cv
246.727 13.25 246.855 13.449 246.957 13.68 cv
247.051 13.914 247.102 14.187 247.105 14.5 cv
cp
f
263.047 9.5 mo
263.043 9.55902 263.035 9.62903 263.023 9.711 cv
263.004 9.79303 262.977 9.914 262.938 10.066 cv
261.082 16.355 li
261.055 16.445 261.02 16.52 260.98 16.57 cv
260.938 16.629 260.875 16.672 260.789 16.699 cv
260.703 16.73 260.578 16.746 260.422 16.762 cv
260.258 16.77 260.055 16.777 259.805 16.777 cv
259.547 16.777 259.336 16.77 259.18 16.758 cv
259.016 16.742 258.891 16.723 258.801 16.691 cv
258.707 16.664 258.641 16.621 258.602 16.562 cv
258.559 16.512 258.527 16.441 258.508 16.355 cv
257.34 12.133 li
257.324 12.062 li
257.309 12.133 li
256.234 16.355 li
256.211 16.445 256.18 16.52 256.145 16.57 cv
256.102 16.629 256.035 16.672 255.945 16.699 cv
255.848 16.73 255.723 16.746 255.563 16.762 cv
255.402 16.77 255.195 16.777 254.941 16.777 cv
254.68 16.777 254.469 16.77 254.313 16.758 cv
254.152 16.742 254.027 16.723 253.938 16.691 cv
253.844 16.664 253.777 16.621 253.738 16.562 cv
253.695 16.512 253.664 16.441 253.648 16.355 cv
251.809 10.066 li
251.758 9.91803 251.73 9.80103 251.719 9.71503 cv
251.703 9.633 251.695 9.55902 251.699 9.5 cv
251.695 9.44897 251.711 9.40601 251.742 9.36298 cv
251.77 9.328 251.82 9.297 251.898 9.27002 cv
251.973 9.25 252.074 9.22998 252.199 9.21899 cv
252.324 9.211 252.484 9.20697 252.68 9.203 cv
252.887 9.20697 253.055 9.211 253.188 9.21899 cv
253.316 9.22998 253.418 9.25 253.492 9.27301 cv
253.563 9.30103 253.613 9.336 253.645 9.37903 cv
253.672 9.42603 253.695 9.47998 253.711 9.539 cv
255.09 14.641 li
255.105 14.734 li
255.121 14.641 li
256.414 9.539 li
256.426 9.47998 256.453 9.42603 256.488 9.37903 cv
256.52 9.336 256.57 9.30103 256.641 9.27301 cv
256.707 9.25 256.801 9.22998 256.922 9.21899 cv
257.043 9.211 257.199 9.20697 257.395 9.203 cv
257.586 9.20697 257.742 9.21503 257.863 9.22302 cv
257.98 9.23798 258.074 9.25403 258.148 9.27698 cv
258.215 9.30103 258.266 9.33197 258.297 9.37097 cv
258.324 9.40997 258.348 9.45697 258.363 9.508 cv
259.75 14.648 li
259.773 14.734 li
259.789 14.641 li
261.113 9.539 li
261.121 9.47998 261.145 9.42603 261.176 9.37903 cv
261.207 9.336 261.258 9.30103 261.332 9.27301 cv
261.402 9.25 261.5 9.22998 261.625 9.21899 cv
261.746 9.211 261.906 9.20697 262.102 9.203 cv
262.293 9.20697 262.449 9.211 262.574 9.21899 cv
262.695 9.22998 262.793 9.25 262.863 9.27002 cv
262.934 9.297 262.98 9.328 263.008 9.36298 cv
263.031 9.40601 263.043 9.44897 263.047 9.5 cv
cp
f
266.262 16.465 mo
266.258 16.52 266.242 16.562 266.215 16.602 cv
266.18 16.641 266.125 16.676 266.055 16.699 cv
265.977 16.727 265.879 16.742 265.754 16.758 cv
265.629 16.77 265.469 16.777 265.281 16.777 cv
265.086 16.777 264.93 16.77 264.805 16.758 cv
264.68 16.742 264.578 16.727 264.504 16.699 cv
264.426 16.676 264.371 16.641 264.344 16.602 cv
264.309 16.562 264.293 16.52 264.297 16.465 cv
264.297 9.53101 li
264.293 9.47998 264.309 9.43402 264.344 9.39502 cv
264.371 9.35498 264.426 9.32397 264.504 9.29303 cv
264.578 9.27002 264.68 9.24597 264.805 9.22699 cv
264.93 9.21503 265.086 9.20697 265.281 9.203 cv
265.469 9.20697 265.629 9.21503 265.754 9.22699 cv
265.879 9.24597 265.977 9.27002 266.055 9.29303 cv
266.125 9.32397 266.18 9.35498 266.215 9.39502 cv
266.242 9.43402 266.258 9.47998 266.262 9.53101 cv
cp
266.41 7.15997 mo
266.41 7.55902 266.328 7.83197 266.168 7.97998 cv
266.004 8.133 265.707 8.20697 265.273 8.203 cv
264.828 8.20697 264.527 8.133 264.379 7.98798 cv
264.223 7.84399 264.148 7.58197 264.148 7.19897 cv
264.148 6.80499 264.227 6.53101 264.387 6.37903 cv
264.543 6.22699 264.844 6.14801 265.289 6.14801 cv
265.723 6.14801 266.02 6.22302 266.176 6.37097 cv
266.332 6.52002 266.41 6.78497 266.41 7.15997 cv
cp
f
272.34 15.781 mo
272.34 16.008 272.324 16.184 272.297 16.305 cv
272.266 16.43 272.227 16.516 272.184 16.562 cv
272.133 16.613 272.066 16.656 271.977 16.695 cv
271.883 16.734 271.773 16.766 271.656 16.797 cv
271.531 16.82 271.398 16.844 271.258 16.863 cv
271.113 16.875 270.973 16.883 270.828 16.887 cv
270.438 16.883 270.098 16.832 269.813 16.738 cv
269.527 16.637 269.293 16.488 269.105 16.281 cv
268.918 16.078 268.777 15.82 268.691 15.508 cv
268.598 15.199 268.555 14.828 268.559 14.398 cv
268.559 10.84 li
267.727 10.84 li
267.625 10.844 267.551 10.781 267.5 10.656 cv
267.445 10.535 267.418 10.332 267.422 10.043 cv
267.418 9.89502 267.426 9.76599 267.441 9.664 cv
267.453 9.56201 267.473 9.47998 267.5 9.41803 cv
267.523 9.35901 267.555 9.31598 267.598 9.289 cv
267.633 9.26599 267.68 9.25403 267.734 9.25 cv
268.559 9.25 li
268.559 7.69897 li
268.555 7.65198 268.57 7.60498 268.602 7.55902 cv
268.629 7.52002 268.68 7.48401 268.758 7.453 cv
268.832 7.42999 268.934 7.40601 269.063 7.39099 cv
269.188 7.37903 269.344 7.375 269.535 7.37097 cv
269.723 7.375 269.883 7.37903 270.012 7.39099 cv
270.137 7.40601 270.238 7.42999 270.313 7.453 cv
270.383 7.48401 270.434 7.52002 270.469 7.55902 cv
270.496 7.60498 270.512 7.65198 270.516 7.69897 cv
270.516 9.25 li
272.027 9.25 li
272.078 9.25403 272.125 9.26599 272.164 9.289 cv
272.203 9.31598 272.234 9.35901 272.262 9.41803 cv
272.285 9.47998 272.305 9.56201 272.32 9.664 cv
272.332 9.76599 272.34 9.89502 272.34 10.043 cv
272.34 10.332 272.313 10.535 272.262 10.656 cv
272.207 10.781 272.133 10.844 272.035 10.84 cv
270.516 10.84 li
270.516 14.105 li
270.512 14.484 270.57 14.77 270.695 14.957 cv
270.813 15.148 271.027 15.242 271.332 15.242 cv
271.434 15.242 271.527 15.234 271.613 15.215 cv
271.695 15.199 271.77 15.18 271.836 15.152 cv
271.898 15.133 271.953 15.109 272 15.09 cv
272.043 15.074 272.082 15.066 272.121 15.062 cv
272.148 15.066 272.18 15.074 272.211 15.09 cv
272.238 15.109 272.258 15.148 272.277 15.199 cv
272.289 15.258 272.305 15.332 272.32 15.422 cv
272.332 15.52 272.34 15.637 272.34 15.781 cv
cp
f
280.402 16.465 mo
280.398 16.52 280.383 16.562 280.355 16.602 cv
280.32 16.641 280.27 16.676 280.199 16.699 cv
280.125 16.727 280.023 16.742 279.898 16.758 cv
279.77 16.77 279.613 16.777 279.43 16.777 cv
279.234 16.777 279.074 16.77 278.949 16.758 cv
278.82 16.742 278.719 16.727 278.648 16.699 cv
278.57 16.676 278.52 16.641 278.492 16.602 cv
278.457 16.562 278.441 16.52 278.445 16.465 cv
278.445 12.5 li
278.441 12.164 278.418 11.898 278.371 11.703 cv
278.32 11.512 278.246 11.348 278.156 11.211 cv
278.063 11.074 277.945 10.969 277.797 10.891 cv
277.648 10.816 277.473 10.777 277.277 10.777 cv
277.023 10.777 276.773 10.871 276.52 11.051 cv
276.266 11.234 276 11.496 275.727 11.844 cv
275.727 16.465 li
275.723 16.52 275.707 16.562 275.68 16.602 cv
275.645 16.641 275.59 16.676 275.52 16.699 cv
275.441 16.727 275.344 16.742 275.219 16.758 cv
275.094 16.77 274.934 16.777 274.746 16.777 cv
274.551 16.777 274.395 16.77 274.27 16.758 cv
274.145 16.742 274.043 16.727 273.969 16.699 cv
273.891 16.676 273.836 16.641 273.809 16.602 cv
273.773 16.562 273.758 16.52 273.762 16.465 cv
273.762 6.21899 li
273.758 6.16803 273.773 6.12097 273.809 6.078 cv
273.836 6.039 273.891 6.00403 273.969 5.97302 cv
274.043 5.94501 274.145 5.92603 274.27 5.90601 cv
274.395 5.89502 274.551 5.88702 274.746 5.883 cv
274.934 5.88702 275.094 5.89502 275.219 5.90601 cv
275.344 5.92603 275.441 5.94501 275.52 5.97302 cv
275.59 6.00403 275.645 6.039 275.68 6.078 cv
275.707 6.12097 275.723 6.16803 275.727 6.21899 cv
275.727 10.059 li
276.063 9.72998 276.406 9.48401 276.758 9.31598 cv
277.105 9.15601 277.473 9.07397 277.855 9.07001 cv
278.324 9.07397 278.723 9.15198 279.051 9.30499 cv
279.375 9.46503 279.637 9.67603 279.836 9.94501 cv
280.035 10.215 280.18 10.531 280.27 10.891 cv
280.355 11.254 280.398 11.691 280.402 12.203 cv
cp
f
292.082 15.93 mo
292.078 16.082 292.074 16.207 292.063 16.305 cv
292.047 16.41 292.027 16.492 292.004 16.551 cv
291.98 16.617 291.949 16.664 291.91 16.687 cv
291.871 16.719 291.828 16.73 291.781 16.73 cv
286.715 16.73 li
286.539 16.73 286.395 16.68 286.281 16.578 cv
286.16 16.477 286.102 16.312 286.105 16.082 cv
286.105 7.29303 li
286.102 7.06598 286.16 6.90198 286.281 6.797 cv
286.395 6.69897 286.539 6.64801 286.715 6.64502 cv
291.75 6.64502 li
291.793 6.64801 291.836 6.65997 291.875 6.68402 cv
291.91 6.711 291.941 6.758 291.969 6.82001 cv
291.992 6.89099 292.008 6.97302 292.023 7.07001 cv
292.031 7.17603 292.039 7.30499 292.043 7.45697 cv
292.039 7.60498 292.031 7.72998 292.023 7.828 cv
292.008 7.93402 291.992 8.01599 291.969 8.07397 cv
291.941 8.13702 291.91 8.17999 291.875 8.20697 cv
291.836 8.23798 291.793 8.25403 291.75 8.25 cv
288.148 8.25 li
288.148 10.715 li
291.195 10.715 li
291.242 10.719 291.285 10.734 291.324 10.758 cv
291.363 10.789 291.395 10.832 291.422 10.891 cv
291.445 10.953 291.465 11.035 291.48 11.133 cv
291.492 11.234 291.5 11.355 291.5 11.5 cv
291.5 11.652 291.492 11.777 291.48 11.875 cv
291.465 11.977 291.445 12.055 291.422 12.113 cv
291.395 12.176 291.363 12.219 291.324 12.242 cv
291.285 12.27 291.242 12.285 291.195 12.281 cv
288.148 12.281 li
288.148 15.125 li
291.781 15.125 li
291.828 15.125 291.871 15.141 291.91 15.168 cv
291.949 15.199 291.98 15.246 292.004 15.305 cv
292.027 15.371 292.047 15.453 292.063 15.551 cv
292.074 15.656 292.078 15.781 292.082 15.93 cv
cp
f
295.742 16.465 mo
295.738 16.52 295.723 16.562 295.695 16.602 cv
295.66 16.641 295.605 16.676 295.535 16.699 cv
295.457 16.727 295.359 16.742 295.234 16.758 cv
295.109 16.77 294.949 16.777 294.762 16.777 cv
294.566 16.777 294.41 16.77 294.285 16.758 cv
294.16 16.742 294.059 16.727 293.984 16.699 cv
293.906 16.676 293.852 16.641 293.824 16.602 cv
293.789 16.562 293.773 16.52 293.777 16.465 cv
293.777 9.53101 li
293.773 9.47998 293.789 9.43402 293.824 9.39502 cv
293.852 9.35498 293.906 9.32397 293.984 9.29303 cv
294.059 9.27002 294.16 9.24597 294.285 9.22699 cv
294.41 9.21503 294.566 9.20697 294.762 9.203 cv
294.949 9.20697 295.109 9.21503 295.234 9.22699 cv
295.359 9.24597 295.457 9.27002 295.535 9.29303 cv
295.605 9.32397 295.66 9.35498 295.695 9.39502 cv
295.723 9.43402 295.738 9.47998 295.742 9.53101 cv
cp
295.891 7.15997 mo
295.891 7.55902 295.809 7.83197 295.648 7.97998 cv
295.484 8.133 295.188 8.20697 294.754 8.203 cv
294.309 8.20697 294.008 8.133 293.859 7.98798 cv
293.703 7.84399 293.629 7.58197 293.629 7.19897 cv
293.629 6.80499 293.707 6.53101 293.867 6.37903 cv
294.023 6.22699 294.324 6.14801 294.77 6.14801 cv
295.203 6.14801 295.5 6.22302 295.656 6.37097 cv
295.813 6.52002 295.891 6.78497 295.891 7.15997 cv
cp
f
303.969 9.99597 mo
303.965 10.25 303.938 10.434 303.883 10.551 cv
303.824 10.672 303.754 10.73 303.676 10.73 cv
302.855 10.73 li
302.969 10.855 303.051 11 303.102 11.156 cv
303.148 11.316 303.172 11.48 303.176 11.648 cv
303.172 12.059 303.105 12.418 302.973 12.73 cv
302.836 13.047 302.641 13.312 302.391 13.523 cv
302.137 13.742 301.836 13.906 301.48 14.016 cv
301.121 14.133 300.723 14.187 300.293 14.184 cv
300.066 14.187 299.855 14.16 299.652 14.102 cv
299.449 14.051 299.293 13.988 299.184 13.91 cv
299.121 13.98 299.063 14.059 299.016 14.152 cv
298.965 14.246 298.941 14.352 298.945 14.461 cv
298.941 14.617 299.008 14.738 299.141 14.832 cv
299.27 14.93 299.457 14.984 299.699 14.992 cv
301.391 15.055 li
301.785 15.07 302.137 15.129 302.445 15.223 cv
302.754 15.324 303.016 15.457 303.227 15.629 cv
303.438 15.805 303.598 16.016 303.707 16.258 cv
303.816 16.504 303.871 16.777 303.875 17.09 cv
303.871 17.426 303.797 17.75 303.648 18.059 cv
303.5 18.359 303.273 18.621 302.973 18.848 cv
302.668 19.066 302.289 19.246 301.836 19.379 cv
301.379 19.508 300.848 19.57 300.246 19.574 cv
299.648 19.57 299.145 19.523 298.727 19.434 cv
298.309 19.336 297.965 19.207 297.699 19.043 cv
297.43 18.875 297.234 18.676 297.117 18.449 cv
296.992 18.215 296.934 17.961 296.934 17.687 cv
296.934 17.516 296.953 17.355 297 17.199 cv
297.039 17.043 297.105 16.891 297.195 16.75 cv
297.277 16.605 297.383 16.473 297.508 16.34 cv
297.633 16.211 297.773 16.086 297.938 15.965 cv
297.711 15.852 297.539 15.691 297.418 15.48 cv
297.297 15.277 297.238 15.051 297.238 14.805 cv
297.238 14.504 297.305 14.227 297.445 13.969 cv
297.582 13.719 297.766 13.488 297.992 13.285 cv
297.809 13.105 297.664 12.891 297.555 12.633 cv
297.445 12.383 297.391 12.062 297.395 11.68 cv
297.391 11.277 297.461 10.918 297.605 10.594 cv
297.746 10.277 297.945 10.008 298.203 9.78497 cv
298.457 9.56598 298.762 9.39502 299.113 9.27698 cv
299.465 9.15997 299.855 9.10199 300.285 9.10199 cv
300.504 9.10199 300.711 9.117 300.91 9.14099 cv
301.109 9.172 301.297 9.20697 301.469 9.25 cv
303.676 9.25 li
303.758 9.25403 303.828 9.31201 303.887 9.422 cv
303.938 9.539 303.965 9.72998 303.969 9.99597 cv
cp
301.453 11.641 mo
301.449 11.27 301.348 10.98 301.141 10.77 cv
300.93 10.566 300.637 10.461 300.262 10.457 cv
300.066 10.461 299.895 10.492 299.754 10.555 cv
299.605 10.621 299.484 10.711 299.391 10.82 cv
299.289 10.934 299.219 11.062 299.176 11.211 cv
299.125 11.359 299.102 11.516 299.105 11.672 cv
299.102 12.031 299.207 12.309 299.418 12.512 cv
299.625 12.719 299.914 12.824 300.285 12.82 cv
300.48 12.824 300.648 12.793 300.797 12.727 cv
300.938 12.668 301.059 12.582 301.16 12.469 cv
301.254 12.363 301.328 12.234 301.379 12.09 cv
301.426 11.949 301.449 11.801 301.453 11.641 cv
cp
301.914 17.191 mo
301.914 16.953 301.82 16.777 301.633 16.652 cv
301.445 16.531 301.188 16.461 300.859 16.449 cv
299.465 16.41 li
299.328 16.512 299.219 16.605 299.141 16.695 cv
299.059 16.785 298.996 16.871 298.949 16.957 cv
298.898 17.039 298.863 17.121 298.852 17.199 cv
298.832 17.277 298.824 17.355 298.828 17.441 cv
298.824 17.695 298.957 17.895 299.219 18.031 cv
299.48 18.164 299.852 18.23 300.332 18.234 cv
300.625 18.23 300.871 18.199 301.078 18.145 cv
301.277 18.082 301.441 18.004 301.57 17.906 cv
301.691 17.805 301.781 17.695 301.836 17.574 cv
301.887 17.453 301.914 17.324 301.914 17.191 cv
cp
f
311.906 16.465 mo
311.902 16.52 311.887 16.562 311.859 16.602 cv
311.824 16.641 311.773 16.676 311.703 16.699 cv
311.629 16.727 311.527 16.742 311.402 16.758 cv
311.273 16.77 311.117 16.777 310.934 16.777 cv
310.738 16.777 310.578 16.77 310.453 16.758 cv
310.324 16.742 310.223 16.727 310.152 16.699 cv
310.074 16.676 310.023 16.641 309.996 16.602 cv
309.961 16.562 309.945 16.52 309.949 16.465 cv
309.949 12.5 li
309.945 12.164 309.922 11.898 309.875 11.703 cv
309.824 11.512 309.75 11.348 309.66 11.211 cv
309.566 11.074 309.449 10.969 309.301 10.891 cv
309.152 10.816 308.977 10.777 308.781 10.777 cv
308.527 10.777 308.277 10.871 308.023 11.051 cv
307.77 11.234 307.504 11.496 307.23 11.844 cv
307.23 16.465 li
307.227 16.52 307.211 16.562 307.184 16.602 cv
307.148 16.641 307.094 16.676 307.023 16.699 cv
306.945 16.727 306.848 16.742 306.723 16.758 cv
306.598 16.77 306.438 16.777 306.25 16.777 cv
306.055 16.777 305.898 16.77 305.773 16.758 cv
305.648 16.742 305.547 16.727 305.473 16.699 cv
305.395 16.676 305.34 16.641 305.313 16.602 cv
305.277 16.562 305.262 16.52 305.266 16.465 cv
305.266 6.21899 li
305.262 6.16803 305.277 6.12097 305.313 6.078 cv
305.34 6.039 305.395 6.00403 305.473 5.97302 cv
305.547 5.94501 305.648 5.92603 305.773 5.90601 cv
305.898 5.89502 306.055 5.88702 306.25 5.883 cv
306.438 5.88702 306.598 5.89502 306.723 5.90601 cv
306.848 5.92603 306.945 5.94501 307.023 5.97302 cv
307.094 6.00403 307.148 6.039 307.184 6.078 cv
307.211 6.12097 307.227 6.16803 307.23 6.21899 cv
307.23 10.059 li
307.566 9.72998 307.91 9.48401 308.262 9.31598 cv
308.609 9.15601 308.977 9.07397 309.359 9.07001 cv
309.828 9.07397 310.227 9.15198 310.555 9.30499 cv
310.879 9.46503 311.141 9.67603 311.34 9.94501 cv
311.539 10.215 311.684 10.531 311.773 10.891 cv
311.859 11.254 311.902 11.691 311.906 12.203 cv
cp
f
317.828 15.781 mo
317.828 16.008 317.813 16.184 317.785 16.305 cv
317.754 16.43 317.715 16.516 317.672 16.562 cv
317.621 16.613 317.555 16.656 317.465 16.695 cv
317.371 16.734 317.262 16.766 317.145 16.797 cv
317.02 16.82 316.887 16.844 316.746 16.863 cv
316.602 16.875 316.461 16.883 316.316 16.887 cv
315.926 16.883 315.586 16.832 315.301 16.738 cv
315.016 16.637 314.781 16.488 314.594 16.281 cv
314.406 16.078 314.266 15.82 314.18 15.508 cv
314.086 15.199 314.043 14.828 314.047 14.398 cv
314.047 10.84 li
313.215 10.84 li
313.113 10.844 313.039 10.781 312.988 10.656 cv
312.934 10.535 312.906 10.332 312.91 10.043 cv
312.906 9.89502 312.914 9.76599 312.93 9.664 cv
312.941 9.56201 312.961 9.47998 312.988 9.41803 cv
313.012 9.35901 313.043 9.31598 313.086 9.289 cv
313.121 9.26599 313.168 9.25403 313.223 9.25 cv
314.047 9.25 li
314.047 7.69897 li
314.043 7.65198 314.059 7.60498 314.09 7.55902 cv
314.117 7.52002 314.168 7.48401 314.246 7.453 cv
314.32 7.42999 314.422 7.40601 314.551 7.39099 cv
314.676 7.37903 314.832 7.375 315.023 7.37097 cv
315.211 7.375 315.371 7.37903 315.5 7.39099 cv
315.625 7.40601 315.727 7.42999 315.801 7.453 cv
315.871 7.48401 315.922 7.52002 315.957 7.55902 cv
315.984 7.60498 316 7.65198 316.004 7.69897 cv
316.004 9.25 li
317.516 9.25 li
317.566 9.25403 317.613 9.26599 317.652 9.289 cv
317.691 9.31598 317.723 9.35901 317.75 9.41803 cv
317.773 9.47998 317.793 9.56201 317.809 9.664 cv
317.82 9.76599 317.828 9.89502 317.828 10.043 cv
317.828 10.332 317.801 10.535 317.75 10.656 cv
317.695 10.781 317.621 10.844 317.523 10.84 cv
316.004 10.84 li
316.004 14.105 li
316 14.484 316.059 14.77 316.184 14.957 cv
316.301 15.148 316.516 15.242 316.82 15.242 cv
316.922 15.242 317.016 15.234 317.102 15.215 cv
317.184 15.199 317.258 15.18 317.324 15.152 cv
317.387 15.133 317.441 15.109 317.488 15.09 cv
317.531 15.074 317.57 15.066 317.609 15.062 cv
317.637 15.066 317.668 15.074 317.699 15.09 cv
317.727 15.109 317.746 15.148 317.766 15.199 cv
317.777 15.258 317.793 15.332 317.809 15.422 cv
317.82 15.52 317.828 15.637 317.828 15.781 cv
cp
f
329.684 7.48798 mo
329.68 7.64502 329.672 7.77301 329.664 7.875 cv
329.648 7.98401 329.629 8.07001 329.605 8.133 cv
329.574 8.19897 329.543 8.24597 329.508 8.27301 cv
329.465 8.30902 329.422 8.32397 329.379 8.32001 cv
326.855 8.32001 li
326.855 16.449 li
326.855 16.504 326.836 16.551 326.805 16.59 cv
326.766 16.633 326.711 16.668 326.637 16.691 cv
326.555 16.719 326.449 16.738 326.32 16.754 cv
326.184 16.77 326.02 16.777 325.824 16.777 cv
325.629 16.777 325.465 16.77 325.332 16.754 cv
325.199 16.738 325.094 16.719 325.016 16.691 cv
324.938 16.668 324.879 16.633 324.848 16.59 cv
324.809 16.551 324.793 16.504 324.797 16.449 cv
324.797 8.32001 li
322.273 8.32001 li
322.219 8.32397 322.172 8.30902 322.141 8.27301 cv
322.102 8.24597 322.07 8.19897 322.047 8.133 cv
322.016 8.07001 321.996 7.98401 321.988 7.875 cv
321.973 7.77301 321.969 7.64502 321.969 7.48798 cv
321.969 7.336 321.973 7.203 321.988 7.09003 cv
321.996 6.98401 322.016 6.89502 322.047 6.828 cv
322.07 6.76599 322.102 6.71899 322.141 6.68701 cv
322.172 6.65997 322.219 6.64801 322.273 6.64502 cv
329.379 6.64502 li
329.422 6.64801 329.465 6.65997 329.508 6.68701 cv
329.543 6.71899 329.574 6.76599 329.605 6.828 cv
329.629 6.89502 329.648 6.98401 329.664 7.09003 cv
329.672 7.203 329.68 7.336 329.684 7.48798 cv
cp
f
337.395 16.465 mo
337.391 16.52 337.375 16.562 337.348 16.602 cv
337.313 16.641 337.262 16.676 337.191 16.699 cv
337.117 16.727 337.016 16.742 336.891 16.758 cv
336.762 16.77 336.605 16.777 336.422 16.777 cv
336.227 16.777 336.066 16.77 335.941 16.758 cv
335.813 16.742 335.711 16.727 335.641 16.699 cv
335.563 16.676 335.512 16.641 335.484 16.602 cv
335.449 16.562 335.434 16.52 335.438 16.465 cv
335.438 12.5 li
335.434 12.164 335.41 11.898 335.363 11.703 cv
335.313 11.512 335.238 11.348 335.148 11.211 cv
335.055 11.074 334.938 10.969 334.789 10.891 cv
334.641 10.816 334.465 10.777 334.27 10.777 cv
334.016 10.777 333.766 10.871 333.512 11.051 cv
333.258 11.234 332.992 11.496 332.719 11.844 cv
332.719 16.465 li
332.715 16.52 332.699 16.562 332.672 16.602 cv
332.637 16.641 332.582 16.676 332.512 16.699 cv
332.434 16.727 332.336 16.742 332.211 16.758 cv
332.086 16.77 331.926 16.777 331.738 16.777 cv
331.543 16.777 331.387 16.77 331.262 16.758 cv
331.137 16.742 331.035 16.727 330.961 16.699 cv
330.883 16.676 330.828 16.641 330.801 16.602 cv
330.766 16.562 330.75 16.52 330.754 16.465 cv
330.754 6.21899 li
330.75 6.16803 330.766 6.12097 330.801 6.078 cv
330.828 6.039 330.883 6.00403 330.961 5.97302 cv
331.035 5.94501 331.137 5.92603 331.262 5.90601 cv
331.387 5.89502 331.543 5.88702 331.738 5.883 cv
331.926 5.88702 332.086 5.89502 332.211 5.90601 cv
332.336 5.92603 332.434 5.94501 332.512 5.97302 cv
332.582 6.00403 332.637 6.039 332.672 6.078 cv
332.699 6.12097 332.715 6.16803 332.719 6.21899 cv
332.719 10.059 li
333.055 9.72998 333.398 9.48401 333.75 9.31598 cv
334.098 9.15601 334.465 9.07397 334.848 9.07001 cv
335.316 9.07397 335.715 9.15198 336.043 9.30499 cv
336.367 9.46503 336.629 9.67603 336.828 9.94501 cv
337.027 10.215 337.172 10.531 337.262 10.891 cv
337.348 11.254 337.391 11.691 337.395 12.203 cv
cp
f
343.746 10.16 mo
343.746 10.352 343.738 10.504 343.73 10.621 cv
343.715 10.742 343.699 10.836 343.684 10.902 cv
343.66 10.973 343.633 11.02 343.602 11.043 cv
343.563 11.07 343.52 11.082 343.473 11.082 cv
343.426 11.082 343.379 11.074 343.332 11.055 cv
343.277 11.039 343.219 11.02 343.156 10.996 cv
343.086 10.977 343.016 10.957 342.941 10.937 cv
342.859 10.922 342.773 10.914 342.684 10.91 cv
342.57 10.914 342.461 10.934 342.355 10.977 cv
342.246 11.023 342.133 11.094 342.02 11.184 cv
341.898 11.277 341.777 11.402 341.652 11.555 cv
341.523 11.715 341.387 11.906 341.242 12.133 cv
341.242 16.465 li
341.238 16.52 341.223 16.562 341.195 16.602 cv
341.16 16.641 341.105 16.676 341.035 16.699 cv
340.957 16.727 340.859 16.742 340.734 16.758 cv
340.609 16.77 340.449 16.777 340.262 16.777 cv
340.066 16.777 339.91 16.77 339.785 16.758 cv
339.66 16.742 339.559 16.727 339.484 16.699 cv
339.406 16.676 339.352 16.641 339.324 16.602 cv
339.289 16.562 339.273 16.52 339.277 16.465 cv
339.277 9.51599 li
339.273 9.46899 339.289 9.422 339.316 9.37903 cv
339.34 9.34399 339.387 9.31201 339.457 9.28101 cv
339.523 9.258 339.609 9.23798 339.719 9.22302 cv
339.824 9.21503 339.957 9.20697 340.121 9.203 cv
340.285 9.20697 340.422 9.21503 340.531 9.22302 cv
340.637 9.23798 340.723 9.258 340.785 9.28101 cv
340.844 9.31201 340.887 9.34399 340.914 9.37903 cv
340.938 9.422 340.949 9.46899 340.953 9.51599 cv
340.953 10.379 li
341.133 10.121 341.305 9.90997 341.469 9.73798 cv
341.625 9.57397 341.781 9.43701 341.93 9.336 cv
342.074 9.23798 342.219 9.172 342.363 9.12903 cv
342.508 9.09399 342.652 9.07397 342.801 9.07001 cv
342.867 9.07397 342.941 9.078 343.02 9.08197 cv
343.098 9.09399 343.176 9.10498 343.262 9.12097 cv
343.34 9.14099 343.414 9.15997 343.48 9.18402 cv
343.539 9.20697 343.586 9.23401 343.617 9.258 cv
343.645 9.289 343.664 9.31598 343.68 9.34399 cv
343.691 9.37903 343.703 9.422 343.715 9.47302 cv
343.723 9.53101 343.73 9.61298 343.738 9.71899 cv
343.742 9.828 343.746 9.97699 343.746 10.16 cv
cp
f
351.223 12.789 mo
351.219 13.027 351.168 13.203 351.063 13.316 cv
350.953 13.434 350.805 13.492 350.625 13.488 cv
346.391 13.488 li
346.387 13.789 346.422 14.059 346.496 14.297 cv
346.563 14.539 346.676 14.742 346.832 14.91 cv
346.984 15.082 347.18 15.211 347.422 15.297 cv
347.66 15.387 347.949 15.43 348.293 15.43 cv
348.633 15.43 348.934 15.406 349.195 15.355 cv
349.453 15.309 349.68 15.254 349.871 15.191 cv
350.059 15.133 350.215 15.078 350.344 15.027 cv
350.465 14.98 350.566 14.957 350.648 14.953 cv
350.691 14.957 350.73 14.965 350.766 14.98 cv
350.793 15 350.82 15.031 350.84 15.078 cv
350.859 15.125 350.871 15.191 350.883 15.277 cv
350.887 15.363 350.891 15.473 350.895 15.602 cv
350.891 15.719 350.891 15.816 350.887 15.895 cv
350.879 15.977 350.871 16.043 350.863 16.098 cv
350.852 16.156 350.836 16.207 350.816 16.242 cv
350.797 16.285 350.77 16.32 350.738 16.355 cv
350.703 16.395 350.609 16.445 350.461 16.504 cv
350.305 16.57 350.113 16.633 349.883 16.687 cv
349.645 16.75 349.375 16.797 349.078 16.844 cv
348.773 16.883 348.453 16.906 348.113 16.91 cv
347.492 16.906 346.949 16.832 346.488 16.676 cv
346.02 16.523 345.633 16.285 345.324 15.969 cv
345.008 15.652 344.773 15.254 344.625 14.77 cv
344.469 14.289 344.395 13.723 344.398 13.066 cv
344.395 12.453 344.473 11.895 344.637 11.398 cv
344.793 10.902 345.027 10.484 345.34 10.137 cv
345.645 9.79303 346.02 9.52698 346.457 9.34399 cv
346.895 9.164 347.387 9.07397 347.941 9.07001 cv
348.52 9.07397 349.02 9.15997 349.434 9.328 cv
349.848 9.50403 350.184 9.742 350.449 10.043 cv
350.711 10.348 350.906 10.707 351.035 11.121 cv
351.156 11.539 351.219 11.988 351.223 12.477 cv
cp
349.32 12.227 mo
349.332 11.676 349.223 11.242 348.988 10.93 cv
348.754 10.617 348.387 10.461 347.895 10.457 cv
347.645 10.461 347.43 10.508 347.246 10.598 cv
347.059 10.695 346.906 10.82 346.785 10.977 cv
346.66 11.137 346.566 11.324 346.504 11.539 cv
346.438 11.754 346.398 11.984 346.391 12.227 cv
cp
f
358.754 16.488 mo
358.75 16.566 358.723 16.621 358.676 16.66 cv
358.621 16.703 358.539 16.73 358.43 16.75 cv
358.313 16.766 358.148 16.777 357.934 16.777 cv
357.695 16.777 357.523 16.766 357.422 16.75 cv
357.313 16.73 357.238 16.703 357.199 16.66 cv
357.152 16.621 357.133 16.566 357.133 16.488 cv
357.133 15.937 li
356.844 16.246 356.516 16.484 356.152 16.652 cv
355.785 16.824 355.379 16.906 354.934 16.91 cv
354.563 16.906 354.223 16.859 353.914 16.766 cv
353.605 16.672 353.34 16.531 353.113 16.336 cv
352.887 16.148 352.711 15.914 352.586 15.633 cv
352.461 15.355 352.398 15.027 352.402 14.648 cv
352.398 14.25 352.477 13.898 352.637 13.594 cv
352.793 13.297 353.031 13.051 353.348 12.855 cv
353.66 12.664 354.051 12.52 354.52 12.422 cv
354.988 12.332 355.531 12.285 356.148 12.281 cv
356.828 12.281 li
356.828 11.859 li
356.828 11.645 356.805 11.453 356.762 11.289 cv
356.715 11.129 356.641 10.992 356.543 10.879 cv
356.438 10.773 356.305 10.691 356.137 10.637 cv
355.965 10.586 355.754 10.562 355.512 10.559 cv
355.18 10.562 354.887 10.598 354.633 10.668 cv
354.371 10.742 354.145 10.824 353.949 10.91 cv
353.75 11.004 353.586 11.082 353.457 11.152 cv
353.32 11.227 353.211 11.266 353.133 11.262 cv
353.07 11.266 353.02 11.246 352.98 11.207 cv
352.934 11.172 352.898 11.121 352.871 11.051 cv
352.84 10.988 352.816 10.902 352.805 10.801 cv
352.785 10.703 352.777 10.594 352.781 10.473 cv
352.777 10.312 352.793 10.187 352.82 10.09 cv
352.844 10 352.891 9.914 352.969 9.836 cv
353.039 9.76202 353.168 9.67999 353.352 9.59003 cv
353.531 9.5 353.742 9.414 353.988 9.336 cv
354.23 9.258 354.5 9.19501 354.789 9.14502 cv
355.078 9.09802 355.375 9.07397 355.684 9.07001 cv
356.227 9.07397 356.691 9.125 357.078 9.22998 cv
357.465 9.34003 357.785 9.50403 358.035 9.72302 cv
358.285 9.94098 358.465 10.227 358.582 10.574 cv
358.691 10.926 358.75 11.34 358.754 11.812 cv
cp
356.828 13.512 mo
356.078 13.512 li
355.762 13.516 355.492 13.539 355.27 13.582 cv
355.043 13.633 354.859 13.703 354.723 13.793 cv
354.578 13.891 354.477 14.004 354.414 14.133 cv
354.348 14.27 354.313 14.418 354.316 14.586 cv
354.313 14.879 354.406 15.109 354.594 15.273 cv
354.777 15.441 355.035 15.523 355.363 15.523 cv
355.637 15.523 355.887 15.453 356.121 15.312 cv
356.348 15.172 356.586 14.969 356.828 14.695 cv
cp
f
367.34 16.465 mo
367.336 16.527 367.324 16.574 367.301 16.609 cv
367.273 16.652 367.227 16.684 367.168 16.707 cv
367.102 16.73 367.02 16.746 366.914 16.762 cv
366.809 16.77 366.676 16.777 366.523 16.777 cv
366.352 16.777 366.219 16.77 366.117 16.762 cv
366.012 16.746 365.926 16.73 365.863 16.707 cv
365.797 16.684 365.75 16.652 365.723 16.609 cv
365.691 16.574 365.676 16.527 365.68 16.465 cv
365.68 15.695 li
365.32 16.082 364.945 16.379 364.555 16.59 cv
364.156 16.801 363.723 16.906 363.25 16.91 cv
362.715 16.906 362.266 16.805 361.902 16.602 cv
361.535 16.398 361.238 16.125 361.008 15.773 cv
360.773 15.43 360.605 15.023 360.504 14.555 cv
360.402 14.094 360.352 13.602 360.352 13.082 cv
360.352 12.469 360.414 11.914 360.547 11.418 cv
360.676 10.926 360.871 10.504 361.129 10.156 cv
361.383 9.80902 361.699 9.54303 362.078 9.35199 cv
362.457 9.16803 362.895 9.07397 363.391 9.07001 cv
363.777 9.07397 364.129 9.15198 364.449 9.30902 cv
364.762 9.46899 365.078 9.69897 365.391 10.004 cv
365.391 6.242 li
365.391 6.19098 365.402 6.14502 365.434 6.10199 cv
365.457 6.06201 365.512 6.02698 365.59 5.99597 cv
365.664 5.96899 365.762 5.94897 365.891 5.92999 cv
366.012 5.91803 366.172 5.90997 366.367 5.90601 cv
366.559 5.90997 366.715 5.91803 366.84 5.92999 cv
366.961 5.94897 367.063 5.96899 367.137 5.99597 cv
367.207 6.02698 367.258 6.06201 367.293 6.10199 cv
367.32 6.14502 367.336 6.19098 367.34 6.242 cv
cp
365.391 11.82 mo
365.109 11.469 364.84 11.199 364.586 11.012 cv
364.324 10.824 364.055 10.73 363.777 10.73 cv
363.523 10.73 363.305 10.797 363.121 10.922 cv
362.934 11.055 362.785 11.223 362.676 11.434 cv
362.563 11.645 362.48 11.883 362.426 12.145 cv
362.371 12.41 362.344 12.68 362.344 12.949 cv
362.344 13.246 362.367 13.527 362.414 13.801 cv
362.461 14.078 362.535 14.324 362.645 14.539 cv
362.746 14.754 362.891 14.926 363.07 15.055 cv
363.246 15.187 363.469 15.254 363.738 15.25 cv
363.871 15.254 364 15.234 364.133 15.191 cv
364.258 15.156 364.391 15.094 364.523 15 cv
364.656 14.914 364.793 14.797 364.934 14.652 cv
365.074 14.512 365.227 14.336 365.391 14.129 cv
cp
f
374.16 14.5 mo
374.156 14.898 374.082 15.246 373.938 15.547 cv
373.789 15.848 373.582 16.102 373.313 16.301 cv
373.039 16.508 372.719 16.656 372.352 16.758 cv
371.984 16.855 371.582 16.906 371.152 16.91 cv
370.887 16.906 370.641 16.887 370.406 16.852 cv
370.172 16.809 369.961 16.762 369.773 16.703 cv
369.586 16.645 369.43 16.582 369.305 16.52 cv
369.18 16.457 369.086 16.398 369.031 16.344 cv
368.973 16.289 368.93 16.207 368.902 16.09 cv
368.867 15.977 368.852 15.801 368.855 15.57 cv
368.852 15.422 368.859 15.301 368.871 15.207 cv
368.879 15.117 368.895 15.047 368.918 14.988 cv
368.938 14.937 368.961 14.898 368.996 14.879 cv
369.023 14.863 369.063 14.855 369.109 14.852 cv
369.164 14.855 369.25 14.887 369.363 14.949 cv
369.473 15.016 369.609 15.09 369.781 15.164 cv
369.945 15.246 370.141 15.316 370.359 15.383 cv
370.578 15.453 370.828 15.488 371.113 15.484 cv
371.289 15.488 371.445 15.469 371.586 15.43 cv
371.719 15.395 371.84 15.344 371.945 15.273 cv
372.043 15.207 372.117 15.121 372.172 15.016 cv
372.219 14.914 372.246 14.793 372.25 14.656 cv
372.246 14.5 372.199 14.367 372.105 14.258 cv
372.012 14.148 371.883 14.051 371.727 13.965 cv
371.563 13.883 371.383 13.805 371.188 13.73 cv
370.984 13.66 370.781 13.582 370.57 13.488 cv
370.359 13.402 370.152 13.301 369.957 13.184 cv
369.754 13.074 369.574 12.934 369.418 12.766 cv
369.254 12.602 369.129 12.402 369.035 12.164 cv
368.941 11.934 368.895 11.652 368.895 11.32 cv
368.895 10.992 368.957 10.687 369.086 10.406 cv
369.215 10.133 369.402 9.89502 369.648 9.69501 cv
369.891 9.5 370.188 9.34802 370.539 9.23401 cv
370.887 9.12903 371.281 9.07397 371.723 9.07001 cv
371.938 9.07397 372.148 9.09003 372.355 9.117 cv
372.559 9.15198 372.746 9.19098 372.914 9.23401 cv
373.078 9.28497 373.219 9.336 373.336 9.38702 cv
373.449 9.44501 373.531 9.492 373.582 9.52698 cv
373.629 9.57001 373.664 9.60901 373.688 9.64502 cv
373.707 9.68701 373.719 9.73401 373.73 9.78497 cv
373.738 9.84003 373.75 9.90601 373.758 9.98401 cv
373.766 10.07 373.77 10.168 373.77 10.285 cv
373.77 10.426 373.766 10.543 373.758 10.629 cv
373.75 10.723 373.734 10.793 373.719 10.84 cv
373.699 10.895 373.676 10.93 373.648 10.945 cv
373.613 10.969 373.578 10.977 373.539 10.973 cv
373.488 10.977 373.414 10.949 373.32 10.891 cv
373.219 10.84 373.098 10.781 372.949 10.715 cv
372.801 10.656 372.629 10.598 372.434 10.539 cv
372.238 10.488 372.016 10.461 371.77 10.457 cv
371.59 10.461 371.438 10.48 371.309 10.512 cv
371.176 10.551 371.066 10.602 370.988 10.668 cv
370.902 10.738 370.84 10.816 370.801 10.906 cv
370.754 11 370.734 11.098 370.738 11.199 cv
370.734 11.359 370.785 11.496 370.887 11.602 cv
370.984 11.715 371.113 11.809 371.277 11.891 cv
371.438 11.977 371.621 12.055 371.828 12.125 cv
372.031 12.199 372.238 12.281 372.449 12.363 cv
372.656 12.453 372.863 12.551 373.074 12.664 cv
373.277 12.777 373.461 12.918 373.621 13.082 cv
373.781 13.25 373.91 13.449 374.012 13.68 cv
374.105 13.914 374.156 14.187 374.16 14.5 cv
cp
f
382.977 12.812 mo
382.973 13.113 382.945 13.324 382.891 13.441 cv
382.832 13.566 382.742 13.625 382.617 13.621 cv
379.375 13.621 li
379.246 13.625 379.152 13.562 379.098 13.437 cv
379.035 13.316 379.008 13.109 379.012 12.812 cv
379.008 12.523 379.035 12.316 379.098 12.195 cv
379.152 12.078 379.246 12.02 379.375 12.016 cv
382.617 12.016 li
382.68 12.02 382.73 12.031 382.777 12.055 cv
382.816 12.082 382.855 12.129 382.891 12.187 cv
382.918 12.254 382.941 12.336 382.957 12.437 cv
382.969 12.543 382.973 12.668 382.977 12.812 cv
cp
f
393.711 15.875 mo
393.707 16.031 393.703 16.164 393.691 16.266 cv
393.676 16.375 393.656 16.461 393.633 16.531 cv
393.605 16.602 393.57 16.652 393.535 16.684 cv
393.492 16.715 393.449 16.73 393.398 16.73 cv
388.777 16.73 li
388.602 16.73 388.457 16.68 388.344 16.578 cv
388.223 16.477 388.164 16.312 388.168 16.082 cv
388.168 6.92603 li
388.164 6.87903 388.184 6.83197 388.219 6.78497 cv
388.25 6.74597 388.305 6.711 388.387 6.68402 cv
388.461 6.65997 388.566 6.64099 388.703 6.62097 cv
388.832 6.60901 388.996 6.60199 389.199 6.59802 cv
389.395 6.60199 389.563 6.60901 389.695 6.62097 cv
389.824 6.64099 389.926 6.65997 390.008 6.68402 cv
390.082 6.711 390.141 6.74597 390.176 6.78497 cv
390.207 6.83197 390.223 6.87903 390.227 6.92603 cv
390.227 15.039 li
393.398 15.039 li
393.449 15.043 393.492 15.059 393.535 15.082 cv
393.57 15.113 393.605 15.16 393.633 15.223 cv
393.656 15.293 393.676 15.379 393.691 15.48 cv
393.703 15.59 393.707 15.719 393.711 15.875 cv
cp
f
401.832 12.918 mo
401.828 13.516 401.75 14.059 401.598 14.543 cv
401.438 15.035 401.203 15.453 400.887 15.805 cv
400.57 16.156 400.172 16.43 399.695 16.621 cv
399.215 16.812 398.656 16.906 398.02 16.91 cv
397.398 16.906 396.859 16.824 396.406 16.652 cv
395.945 16.484 395.566 16.234 395.27 15.906 cv
394.965 15.582 394.742 15.18 394.598 14.699 cv
394.453 14.223 394.383 13.676 394.383 13.059 cv
394.383 12.469 394.461 11.93 394.617 11.437 cv
394.773 10.949 395.012 10.527 395.332 10.176 cv
395.648 9.828 396.043 9.55499 396.52 9.35901 cv
396.992 9.16803 397.551 9.07397 398.191 9.07001 cv
398.816 9.07397 399.355 9.15601 399.813 9.32397 cv
400.27 9.49597 400.648 9.74597 400.945 10.07 cv
401.242 10.398 401.465 10.801 401.613 11.277 cv
401.758 11.758 401.828 12.305 401.832 12.918 cv
cp
399.813 12.996 mo
399.809 12.66 399.781 12.344 399.73 12.051 cv
399.672 11.766 399.578 11.516 399.453 11.301 cv
399.32 11.09 399.148 10.922 398.938 10.801 cv
398.719 10.684 398.449 10.625 398.121 10.621 cv
397.832 10.625 397.578 10.68 397.359 10.781 cv
397.141 10.891 396.961 11.047 396.82 11.25 cv
396.68 11.457 396.574 11.703 396.504 11.988 cv
396.434 12.281 396.398 12.609 396.398 12.973 cv
396.398 13.32 396.426 13.637 396.484 13.922 cv
396.539 14.215 396.633 14.465 396.762 14.676 cv
396.887 14.891 397.059 15.055 397.281 15.168 cv
397.496 15.289 397.766 15.348 398.09 15.344 cv
398.383 15.348 398.641 15.293 398.863 15.184 cv
399.078 15.078 399.258 14.926 399.398 14.719 cv
399.539 14.52 399.641 14.273 399.711 13.984 cv
399.773 13.699 399.809 13.371 399.813 12.996 cv
cp
f
408.648 15.359 mo
408.645 15.496 408.641 15.609 408.637 15.699 cv
408.625 15.793 408.617 15.871 408.605 15.93 cv
408.59 15.992 408.574 16.043 408.559 16.078 cv
408.539 16.121 408.496 16.168 408.438 16.227 cv
408.371 16.289 408.266 16.363 408.117 16.445 cv
407.965 16.535 407.793 16.613 407.602 16.676 cv
407.41 16.746 407.203 16.797 406.977 16.84 cv
406.75 16.879 406.516 16.898 406.281 16.902 cv
405.742 16.898 405.27 16.82 404.855 16.652 cv
404.441 16.488 404.094 16.242 403.816 15.918 cv
403.531 15.594 403.32 15.199 403.18 14.73 cv
403.039 14.266 402.969 13.727 402.969 13.121 cv
402.969 12.426 403.055 11.828 403.227 11.32 cv
403.398 10.816 403.641 10.395 403.957 10.062 cv
404.266 9.72998 404.633 9.48401 405.063 9.32001 cv
405.484 9.15997 405.953 9.078 406.465 9.078 cv
406.672 9.078 406.875 9.09802 407.078 9.133 cv
407.273 9.172 407.461 9.22302 407.637 9.28101 cv
407.809 9.34802 407.965 9.41803 408.105 9.492 cv
408.242 9.57397 408.34 9.64099 408.398 9.69501 cv
408.453 9.75403 408.492 9.80103 408.52 9.836 cv
408.539 9.87903 408.559 9.92999 408.574 9.98798 cv
408.586 10.055 408.598 10.133 408.605 10.219 cv
408.613 10.312 408.617 10.422 408.617 10.551 cv
408.617 10.855 408.59 11.066 408.539 11.187 cv
408.484 11.309 408.418 11.371 408.336 11.367 cv
408.246 11.371 408.152 11.336 408.055 11.262 cv
407.953 11.191 407.836 11.109 407.703 11.02 cv
407.57 10.934 407.41 10.852 407.223 10.777 cv
407.035 10.707 406.809 10.672 406.551 10.668 cv
406.039 10.672 405.652 10.867 405.383 11.258 cv
405.109 11.648 404.973 12.223 404.977 12.98 cv
404.973 13.355 405.008 13.687 405.078 13.973 cv
405.145 14.258 405.242 14.496 405.379 14.687 cv
405.508 14.883 405.676 15.027 405.879 15.121 cv
406.078 15.219 406.309 15.266 406.574 15.266 cv
406.84 15.266 407.074 15.227 407.273 15.145 cv
407.465 15.066 407.633 14.977 407.781 14.875 cv
407.922 14.777 408.047 14.687 408.148 14.605 cv
408.246 14.527 408.328 14.488 408.398 14.484 cv
408.441 14.488 408.48 14.5 408.516 14.523 cv
408.543 14.551 408.566 14.598 408.59 14.668 cv
408.605 14.738 408.621 14.828 408.633 14.937 cv
408.641 15.047 408.645 15.187 408.648 15.359 cv
cp
f
415.938 16.488 mo
415.934 16.566 415.906 16.621 415.859 16.66 cv
415.805 16.703 415.723 16.73 415.613 16.75 cv
415.496 16.766 415.332 16.777 415.117 16.777 cv
414.879 16.777 414.707 16.766 414.605 16.75 cv
414.496 16.73 414.422 16.703 414.383 16.66 cv
414.336 16.621 414.316 16.566 414.316 16.488 cv
414.316 15.937 li
414.027 16.246 413.699 16.484 413.336 16.652 cv
412.969 16.824 412.563 16.906 412.117 16.91 cv
411.746 16.906 411.406 16.859 411.098 16.766 cv
410.789 16.672 410.523 16.531 410.297 16.336 cv
410.07 16.148 409.895 15.914 409.77 15.633 cv
409.645 15.355 409.582 15.027 409.586 14.648 cv
409.582 14.25 409.66 13.898 409.82 13.594 cv
409.977 13.297 410.215 13.051 410.531 12.855 cv
410.844 12.664 411.234 12.52 411.703 12.422 cv
412.172 12.332 412.715 12.285 413.332 12.281 cv
414.012 12.281 li
414.012 11.859 li
414.012 11.645 413.988 11.453 413.945 11.289 cv
413.898 11.129 413.824 10.992 413.727 10.879 cv
413.621 10.773 413.488 10.691 413.32 10.637 cv
413.148 10.586 412.938 10.562 412.695 10.559 cv
412.363 10.562 412.07 10.598 411.816 10.668 cv
411.555 10.742 411.328 10.824 411.133 10.91 cv
410.934 11.004 410.77 11.082 410.641 11.152 cv
410.504 11.227 410.395 11.266 410.316 11.262 cv
410.254 11.266 410.203 11.246 410.164 11.207 cv
410.117 11.172 410.082 11.121 410.055 11.051 cv
410.023 10.988 410 10.902 409.988 10.801 cv
409.969 10.703 409.961 10.594 409.965 10.473 cv
409.961 10.312 409.977 10.187 410.004 10.09 cv
410.027 10 410.074 9.914 410.152 9.836 cv
410.223 9.76202 410.352 9.67999 410.535 9.59003 cv
410.715 9.5 410.926 9.414 411.172 9.336 cv
411.414 9.258 411.684 9.19501 411.973 9.14502 cv
412.262 9.09802 412.559 9.07397 412.867 9.07001 cv
413.41 9.07397 413.875 9.125 414.262 9.22998 cv
414.648 9.34003 414.969 9.50403 415.219 9.72302 cv
415.469 9.94098 415.648 10.227 415.766 10.574 cv
415.875 10.926 415.934 11.34 415.938 11.812 cv
cp
414.012 13.512 mo
413.262 13.512 li
412.945 13.516 412.676 13.539 412.453 13.582 cv
412.227 13.633 412.043 13.703 411.906 13.793 cv
411.762 13.891 411.66 14.004 411.598 14.133 cv
411.531 14.27 411.496 14.418 411.5 14.586 cv
411.496 14.879 411.59 15.109 411.777 15.273 cv
411.961 15.441 412.219 15.523 412.547 15.523 cv
412.82 15.523 413.07 15.453 413.305 15.312 cv
413.531 15.172 413.77 14.969 414.012 14.695 cv
cp
f
419.859 16.465 mo
419.855 16.52 419.84 16.562 419.813 16.602 cv
419.777 16.641 419.723 16.676 419.652 16.699 cv
419.574 16.727 419.477 16.742 419.352 16.758 cv
419.227 16.77 419.066 16.777 418.879 16.777 cv
418.684 16.777 418.527 16.77 418.402 16.758 cv
418.277 16.742 418.176 16.727 418.102 16.699 cv
418.023 16.676 417.969 16.641 417.941 16.602 cv
417.906 16.562 417.891 16.52 417.895 16.465 cv
417.895 6.21899 li
417.891 6.16803 417.906 6.12097 417.941 6.078 cv
417.969 6.039 418.023 6.00403 418.102 5.97302 cv
418.176 5.94501 418.277 5.92603 418.402 5.90601 cv
418.527 5.89502 418.684 5.88702 418.879 5.883 cv
419.066 5.88702 419.227 5.89502 419.352 5.90601 cv
419.477 5.92603 419.574 5.94501 419.652 5.97302 cv
419.723 6.00403 419.777 6.039 419.813 6.078 cv
419.84 6.12097 419.855 6.16803 419.859 6.21899 cv
cp
f
437.219 16.449 mo
437.215 16.504 437.203 16.551 437.176 16.59 cv
437.145 16.633 437.09 16.668 437.02 16.691 cv
436.941 16.719 436.844 16.738 436.719 16.754 cv
436.594 16.77 436.434 16.777 436.242 16.777 cv
436.055 16.777 435.898 16.77 435.777 16.754 cv
435.648 16.738 435.551 16.719 435.48 16.691 cv
435.406 16.668 435.355 16.633 435.324 16.59 cv
435.293 16.551 435.277 16.504 435.277 16.449 cv
435.277 8.242 li
435.262 8.242 li
432.34 16.441 li
432.316 16.512 432.281 16.566 432.238 16.609 cv
432.188 16.656 432.125 16.691 432.047 16.715 cv
431.965 16.742 431.863 16.758 431.738 16.766 cv
431.613 16.773 431.461 16.777 431.289 16.777 cv
431.109 16.777 430.961 16.77 430.836 16.758 cv
430.711 16.742 430.605 16.723 430.527 16.695 cv
430.441 16.668 430.379 16.633 430.336 16.59 cv
430.285 16.551 430.254 16.504 430.242 16.441 cv
427.422 8.242 li
427.406 8.242 li
427.406 16.449 li
427.402 16.504 427.387 16.551 427.363 16.59 cv
427.332 16.633 427.281 16.668 427.203 16.691 cv
427.125 16.719 427.023 16.738 426.902 16.754 cv
426.777 16.77 426.621 16.777 426.434 16.777 cv
426.242 16.777 426.086 16.77 425.965 16.754 cv
425.836 16.738 425.734 16.719 425.664 16.691 cv
425.586 16.668 425.535 16.633 425.508 16.59 cv
425.477 16.551 425.461 16.504 425.465 16.449 cv
425.465 7.46503 li
425.461 7.203 425.531 7 425.676 6.85498 cv
425.813 6.71899 426 6.64801 426.238 6.64502 cv
427.578 6.64502 li
427.816 6.64801 428.02 6.66803 428.191 6.703 cv
428.359 6.74597 428.508 6.80902 428.637 6.89801 cv
428.758 6.992 428.863 7.11298 428.949 7.258 cv
429.031 7.40997 429.102 7.59399 429.168 7.80902 cv
431.352 13.816 li
431.383 13.816 li
433.641 7.82397 li
433.707 7.60498 433.781 7.422 433.863 7.27002 cv
433.941 7.12097 434.035 7 434.145 6.90198 cv
434.25 6.81201 434.375 6.74597 434.52 6.703 cv
434.664 6.66803 434.832 6.64801 435.027 6.64502 cv
436.406 6.64502 li
436.543 6.64801 436.664 6.664 436.77 6.69897 cv
436.867 6.73798 436.949 6.79303 437.02 6.85901 cv
437.082 6.93402 437.133 7.02002 437.168 7.117 cv
437.199 7.22302 437.215 7.34003 437.219 7.46503 cv
cp
f
446.328 12.918 mo
446.324 13.516 446.246 14.059 446.094 14.543 cv
445.934 15.035 445.699 15.453 445.383 15.805 cv
445.066 16.156 444.668 16.43 444.191 16.621 cv
443.711 16.812 443.152 16.906 442.516 16.91 cv
441.895 16.906 441.355 16.824 440.902 16.652 cv
440.441 16.484 440.063 16.234 439.766 15.906 cv
439.461 15.582 439.238 15.18 439.094 14.699 cv
438.949 14.223 438.879 13.676 438.879 13.059 cv
438.879 12.469 438.957 11.93 439.113 11.437 cv
439.27 10.949 439.508 10.527 439.828 10.176 cv
440.145 9.828 440.539 9.55499 441.016 9.35901 cv
441.488 9.16803 442.047 9.07397 442.688 9.07001 cv
443.313 9.07397 443.852 9.15601 444.309 9.32397 cv
444.766 9.49597 445.145 9.74597 445.441 10.07 cv
445.738 10.398 445.961 10.801 446.109 11.277 cv
446.254 11.758 446.324 12.305 446.328 12.918 cv
cp
444.309 12.996 mo
444.305 12.66 444.277 12.344 444.227 12.051 cv
444.168 11.766 444.074 11.516 443.949 11.301 cv
443.816 11.09 443.645 10.922 443.434 10.801 cv
443.215 10.684 442.945 10.625 442.617 10.621 cv
442.328 10.625 442.074 10.68 441.855 10.781 cv
441.637 10.891 441.457 11.047 441.316 11.25 cv
441.176 11.457 441.07 11.703 441 11.988 cv
440.93 12.281 440.895 12.609 440.895 12.973 cv
440.895 13.32 440.922 13.637 440.98 13.922 cv
441.035 14.215 441.129 14.465 441.258 14.676 cv
441.383 14.891 441.555 15.055 441.777 15.168 cv
441.992 15.289 442.262 15.348 442.586 15.344 cv
442.879 15.348 443.137 15.293 443.359 15.184 cv
443.574 15.078 443.754 14.926 443.895 14.719 cv
444.035 14.52 444.137 14.273 444.207 13.984 cv
444.27 13.699 444.305 13.371 444.309 12.996 cv
cp
f
454.477 16.465 mo
454.473 16.527 454.461 16.574 454.438 16.609 cv
454.41 16.652 454.363 16.684 454.305 16.707 cv
454.238 16.73 454.156 16.746 454.051 16.762 cv
453.945 16.77 453.813 16.777 453.66 16.777 cv
453.488 16.777 453.355 16.77 453.254 16.762 cv
453.148 16.746 453.063 16.73 453 16.707 cv
452.934 16.684 452.887 16.652 452.859 16.609 cv
452.828 16.574 452.813 16.527 452.816 16.465 cv
452.816 15.695 li
452.457 16.082 452.082 16.379 451.691 16.59 cv
451.293 16.801 450.859 16.906 450.387 16.91 cv
449.852 16.906 449.402 16.805 449.039 16.602 cv
448.672 16.398 448.375 16.125 448.145 15.773 cv
447.91 15.43 447.742 15.023 447.641 14.555 cv
447.539 14.094 447.488 13.602 447.488 13.082 cv
447.488 12.469 447.551 11.914 447.684 11.418 cv
447.813 10.926 448.008 10.504 448.266 10.156 cv
448.52 9.80902 448.836 9.54303 449.215 9.35199 cv
449.594 9.16803 450.031 9.07397 450.527 9.07001 cv
450.914 9.07397 451.266 9.15198 451.586 9.30902 cv
451.898 9.46899 452.215 9.69897 452.527 10.004 cv
452.527 6.242 li
452.527 6.19098 452.539 6.14502 452.57 6.10199 cv
452.594 6.06201 452.648 6.02698 452.727 5.99597 cv
452.801 5.96899 452.898 5.94897 453.027 5.92999 cv
453.148 5.91803 453.309 5.90997 453.504 5.90601 cv
453.695 5.90997 453.852 5.91803 453.977 5.92999 cv
454.098 5.94897 454.199 5.96899 454.273 5.99597 cv
454.344 6.02698 454.395 6.06201 454.43 6.10199 cv
454.457 6.14502 454.473 6.19098 454.477 6.242 cv
cp
452.527 11.82 mo
452.246 11.469 451.977 11.199 451.723 11.012 cv
451.461 10.824 451.191 10.73 450.914 10.73 cv
450.66 10.73 450.441 10.797 450.258 10.922 cv
450.07 11.055 449.922 11.223 449.813 11.434 cv
449.699 11.645 449.617 11.883 449.563 12.145 cv
449.508 12.41 449.48 12.68 449.48 12.949 cv
449.48 13.246 449.504 13.527 449.551 13.801 cv
449.598 14.078 449.672 14.324 449.781 14.539 cv
449.883 14.754 450.027 14.926 450.207 15.055 cv
450.383 15.187 450.605 15.254 450.875 15.25 cv
451.008 15.254 451.137 15.234 451.27 15.191 cv
451.395 15.156 451.527 15.094 451.66 15 cv
451.793 14.914 451.93 14.797 452.07 14.652 cv
452.211 14.512 452.363 14.336 452.527 14.129 cv
cp
f
462.875 12.789 mo
462.871 13.027 462.82 13.203 462.715 13.316 cv
462.605 13.434 462.457 13.492 462.277 13.488 cv
458.043 13.488 li
458.039 13.789 458.074 14.059 458.148 14.297 cv
458.215 14.539 458.328 14.742 458.484 14.91 cv
458.637 15.082 458.832 15.211 459.074 15.297 cv
459.313 15.387 459.602 15.43 459.945 15.43 cv
460.285 15.43 460.586 15.406 460.848 15.355 cv
461.105 15.309 461.332 15.254 461.523 15.191 cv
461.711 15.133 461.867 15.078 461.996 15.027 cv
462.117 14.98 462.219 14.957 462.301 14.953 cv
462.344 14.957 462.383 14.965 462.418 14.98 cv
462.445 15 462.473 15.031 462.492 15.078 cv
462.512 15.125 462.523 15.191 462.535 15.277 cv
462.539 15.363 462.543 15.473 462.547 15.602 cv
462.543 15.719 462.543 15.816 462.539 15.895 cv
462.531 15.977 462.523 16.043 462.516 16.098 cv
462.504 16.156 462.488 16.207 462.469 16.242 cv
462.449 16.285 462.422 16.32 462.391 16.355 cv
462.355 16.395 462.262 16.445 462.113 16.504 cv
461.957 16.57 461.766 16.633 461.535 16.687 cv
461.297 16.75 461.027 16.797 460.73 16.844 cv
460.426 16.883 460.105 16.906 459.766 16.91 cv
459.145 16.906 458.602 16.832 458.141 16.676 cv
457.672 16.523 457.285 16.285 456.977 15.969 cv
456.66 15.652 456.426 15.254 456.277 14.77 cv
456.121 14.289 456.047 13.723 456.051 13.066 cv
456.047 12.453 456.125 11.895 456.289 11.398 cv
456.445 10.902 456.68 10.484 456.992 10.137 cv
457.297 9.79303 457.672 9.52698 458.109 9.34399 cv
458.547 9.164 459.039 9.07397 459.594 9.07001 cv
460.172 9.07397 460.672 9.15997 461.086 9.328 cv
461.5 9.50403 461.836 9.742 462.102 10.043 cv
462.363 10.348 462.559 10.707 462.688 11.121 cv
462.809 11.539 462.871 11.988 462.875 12.477 cv
cp
460.973 12.227 mo
460.984 11.676 460.875 11.242 460.641 10.93 cv
460.406 10.617 460.039 10.461 459.547 10.457 cv
459.297 10.461 459.082 10.508 458.898 10.598 cv
458.711 10.695 458.559 10.82 458.438 10.977 cv
458.313 11.137 458.219 11.324 458.156 11.539 cv
458.09 11.754 458.051 11.984 458.043 12.227 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
