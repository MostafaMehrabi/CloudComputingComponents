%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-FourThreads-Remote.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:44:14 PM
%%BoundingBox: 0 0 628 546
%%HiResBoundingBox: 0 0 627.6000 545.8801
%%CropBox: 0 0 627.6000 545.8801
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -545.88 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 545.88 li
627.6 545.88 li
627.6 0 li
cp
clp
0 0 mo
627.602 0 li
627.602 545.879 li
0 545.879 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.039 484.559 mo
612.238 484.559 li
53.039 466.801 mo
612.238 466.801 li
53.039 431.52 mo
612.238 431.52 li
53.039 413.762 mo
612.238 413.762 li
53.039 378.48 mo
612.238 378.48 li
53.039 360.719 mo
612.238 360.719 li
53.039 325.441 mo
612.238 325.441 li
53.039 307.68 mo
612.238 307.68 li
53.039 272.398 mo
612.238 272.398 li
53.039 254.641 mo
612.238 254.641 li
53.039 219.359 mo
612.238 219.359 li
53.039 201.602 mo
612.238 201.602 li
53.039 166.32 mo
612.238 166.32 li
53.039 148.559 mo
612.238 148.559 li
53.039 113.281 mo
612.238 113.281 li
53.039 95.641 mo
612.238 95.641 li
53.039 60.238 mo
612.238 60.238 li
53.039 42.602 mo
612.238 42.602 li
.140414 .108034 .108034 0 cmyk
@
53.039 449.16 mo
612.238 449.16 li
53.039 396.121 mo
612.238 396.121 li
53.039 343.078 mo
612.238 343.078 li
53.039 290.039 mo
612.238 290.039 li
53.039 237 mo
612.238 237 li
53.039 183.961 mo
612.238 183.961 li
53.039 130.922 mo
612.238 130.922 li
53.039 77.879 mo
612.238 77.879 li
53.039 24.84 mo
612.238 24.84 li
.246403 .201175 .450446 .000885023 cmyk
@
87.961 24.84 mo
87.961 502.199 li
157.922 24.84 mo
157.922 502.199 li
227.762 24.84 mo
227.762 502.199 li
297.602 24.84 mo
297.602 502.199 li
367.559 24.84 mo
367.559 502.199 li
437.398 24.84 mo
437.398 502.199 li
507.359 24.84 mo
507.359 502.199 li
577.199 24.84 mo
577.199 502.199 li
.131685 .102663 .236637 0 cmyk
@
53.039 24.84 mo
53.039 502.199 li
122.879 24.84 mo
122.879 502.199 li
192.84 24.84 mo
192.84 502.199 li
262.68 24.84 mo
262.68 502.199 li
332.641 24.84 mo
332.641 502.199 li
402.48 24.84 mo
402.48 502.199 li
472.441 24.84 mo
472.441 502.199 li
542.281 24.84 mo
542.281 502.199 li
612.238 24.84 mo
612.238 502.199 li
.246403 .201175 .450446 .000885023 cmyk
@
26.641 494.281 mo
41.879 494.281 li
41.879 508.922 li
26.641 508.922 li
cp
0 0 0 0 cmyk
ef
26.641 441.238 mo
41.879 441.238 li
41.879 455.879 li
26.641 455.879 li
cp
ef
26.641 388.199 mo
41.879 388.199 li
41.879 402.84 li
26.641 402.84 li
cp
ef
26.641 335.16 mo
41.879 335.16 li
41.879 349.801 li
26.641 349.801 li
cp
ef
26.641 282.121 mo
41.879 282.121 li
41.879 296.762 li
26.641 296.762 li
cp
ef
26.641 229.078 mo
41.879 229.078 li
41.879 243.719 li
26.641 243.719 li
cp
ef
26.641 176.039 mo
41.879 176.039 li
41.879 190.68 li
26.641 190.68 li
cp
ef
20.641 123 mo
41.879 123 li
41.879 137.641 li
20.641 137.641 li
cp
ef
20.641 69.961 mo
41.879 69.961 li
41.879 84.602 li
20.641 84.602 li
cp
ef
20.641 16.922 mo
41.879 16.922 li
41.879 31.559 li
20.641 31.559 li
cp
ef
.96 lw
53.039 502.199 mo
612.238 502.199 li
.367803 .29575 .300999 .00198367 cmyk
@
53.039 502.199 mo
53.039 506.039 li
122.879 502.199 mo
122.879 506.039 li
192.84 502.199 mo
192.84 506.039 li
262.68 502.199 mo
262.68 506.039 li
332.641 502.199 mo
332.641 506.039 li
402.48 502.199 mo
402.48 506.039 li
472.441 502.199 mo
472.441 506.039 li
542.281 502.199 mo
542.281 506.039 li
612.238 502.199 mo
612.238 506.039 li
@
gsave
52.922 24.84 mo
612.84 24.84 li
612.84 502.922 li
52.922 502.922 li
cp
clp
1 lc
53.039 472.922 mo
122.879 484.559 li
192.84 493.32 li
262.68 493.32 li
332.641 495.121 li
402.48 496.559 li
472.441 494.762 li
542.281 489.48 li
612.238 494.039 li
.719875 .440223 .0276493 0 cmyk
@
grestore
1 lw
47.879 467.789 mo
57.84 467.789 li
57.84 477.75 li
47.879 477.75 li
cp
.719875 .440223 .0276493 0 cmyk
@
117.84 479.43 mo
127.801 479.43 li
127.801 489.391 li
117.84 489.391 li
cp
@
187.68 488.309 mo
197.641 488.309 li
197.641 498.27 li
187.68 498.27 li
cp
@
257.641 488.309 mo
267.602 488.309 li
267.602 498.27 li
257.641 498.27 li
cp
@
327.48 490.109 mo
337.441 490.109 li
337.441 500.07 li
327.48 500.07 li
cp
@
397.441 491.43 mo
407.398 491.43 li
407.398 501.391 li
397.441 501.391 li
cp
@
467.281 489.75 mo
477.238 489.75 li
477.238 499.711 li
467.281 499.711 li
cp
@
537.238 484.469 mo
547.199 484.469 li
547.199 494.43 li
537.238 494.43 li
cp
@
607.078 489.031 mo
617.039 489.031 li
617.039 498.988 li
607.078 498.988 li
cp
@
gsave
52.922 24.84 mo
612.84 24.84 li
612.84 502.922 li
52.922 502.922 li
cp
clp
.96 lw
1 lc
53.039 424.441 mo
122.879 466.441 li
192.84 477.48 li
262.68 479.281 li
332.641 482.398 li
402.48 484.559 li
472.441 491.641 li
542.281 487.68 li
612.238 489.84 li
.466651 0 .889799 0 cmyk
@
grestore
47.879 419.309 mo
57.84 419.309 li
57.84 429.27 li
47.879 429.27 li
cp
.466651 0 .889799 0 cmyk
@
117.84 461.43 mo
127.801 461.43 li
127.801 471.391 li
117.84 471.391 li
cp
@
187.68 472.352 mo
197.641 472.352 li
197.641 482.309 li
187.68 482.309 li
cp
@
257.641 474.148 mo
267.602 474.148 li
267.602 484.109 li
257.641 484.109 li
cp
@
327.48 477.391 mo
337.441 477.391 li
337.441 487.352 li
327.48 487.352 li
cp
@
397.441 479.43 mo
407.398 479.43 li
407.398 489.391 li
397.441 489.391 li
cp
@
467.281 486.512 mo
477.238 486.512 li
477.238 496.469 li
467.281 496.469 li
cp
@
537.238 482.672 mo
547.199 482.672 li
547.199 492.629 li
537.238 492.629 li
cp
@
607.078 484.711 mo
617.039 484.711 li
617.039 494.672 li
607.078 494.672 li
cp
@
gsave
52.922 24.84 mo
612.84 24.84 li
612.84 502.922 li
52.922 502.922 li
cp
clp
.96 lw
1 lc
53.039 262.441 mo
122.879 358.68 li
192.84 419.16 li
262.68 426.84 li
332.641 440.281 li
402.48 450.961 li
472.441 449.16 li
542.281 452.762 li
612.238 447.359 li
0 .990631 1 .000396735 cmyk
@
grestore
47.879 257.43 mo
57.84 257.43 li
57.84 267.391 li
47.879 267.391 li
cp
0 .990631 1 .000396735 cmyk
@
117.84 353.551 mo
127.801 353.551 li
127.801 363.512 li
117.84 363.512 li
cp
@
187.68 414.031 mo
197.641 414.031 li
197.641 423.988 li
187.68 423.988 li
cp
@
257.641 421.828 mo
267.602 421.828 li
267.602 431.789 li
257.641 431.789 li
cp
@
327.48 435.27 mo
337.441 435.27 li
337.441 445.231 li
327.48 445.231 li
cp
@
397.441 445.828 mo
407.398 445.828 li
407.398 455.789 li
397.441 455.789 li
cp
@
467.281 444.148 mo
477.238 444.148 li
477.238 454.109 li
467.281 454.109 li
cp
@
537.238 447.629 mo
547.199 447.629 li
547.199 457.59 li
537.238 457.59 li
cp
@
607.078 442.352 mo
617.039 442.352 li
617.039 452.309 li
607.078 452.309 li
cp
@
gsave
52.922 24.84 mo
612.84 24.84 li
612.84 502.922 li
52.922 502.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.039 337.441 mo
122.879 405.719 li
192.84 447 li
262.68 465.121 li
332.641 460.441 li
402.48 473.52 li
472.441 464.762 li
542.281 475.32 li
612.238 475.68 li
@
grestore
47.879 332.309 mo
57.84 332.309 li
57.84 342.27 li
47.879 342.27 li
cp
@
117.84 400.59 mo
127.801 400.59 li
127.801 410.551 li
117.84 410.551 li
cp
@
187.68 441.988 mo
197.641 441.988 li
197.641 451.949 li
187.68 451.949 li
cp
@
257.641 459.988 mo
267.602 459.988 li
267.602 469.949 li
257.641 469.949 li
cp
@
327.48 455.43 mo
337.441 455.43 li
337.441 465.391 li
327.48 465.391 li
cp
@
397.441 468.512 mo
407.398 468.512 li
407.398 478.469 li
397.441 478.469 li
cp
@
467.281 459.629 mo
477.238 459.629 li
477.238 469.59 li
467.281 469.59 li
cp
@
537.238 470.309 mo
547.199 470.309 li
547.199 480.27 li
537.238 480.27 li
cp
@
607.078 470.672 mo
617.039 470.672 li
617.039 480.629 li
607.078 480.629 li
cp
@
gsave
52.922 24.84 mo
612.84 24.84 li
612.84 502.922 li
52.922 502.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.039 66.961 mo
122.879 257.879 li
192.84 347.281 li
262.68 401.039 li
332.641 390.84 li
402.48 416.281 li
472.441 400.32 li
542.281 419.16 li
612.238 393.359 li
.719875 .440223 .0276493 0 cmyk
@
grestore
47.879 61.828 mo
57.84 61.828 li
57.84 71.789 li
47.879 71.789 li
cp
.719875 .440223 .0276493 0 cmyk
@
117.84 252.75 mo
127.801 252.75 li
127.801 262.711 li
117.84 262.711 li
cp
@
187.68 342.27 mo
197.641 342.27 li
197.641 352.231 li
187.68 352.231 li
cp
@
257.641 396.031 mo
267.602 396.031 li
267.602 405.988 li
257.641 405.988 li
cp
@
327.48 385.711 mo
337.441 385.711 li
337.441 395.672 li
327.48 395.672 li
cp
@
397.441 411.27 mo
407.398 411.27 li
407.398 421.231 li
397.441 421.231 li
cp
@
467.281 395.309 mo
477.238 395.309 li
477.238 405.27 li
467.281 405.27 li
cp
@
537.238 414.031 mo
547.199 414.031 li
547.199 423.988 li
537.238 423.988 li
cp
@
607.078 388.23 mo
617.039 388.23 li
617.039 398.191 li
607.078 398.191 li
cp
@
gsave
52.922 24.84 mo
612.84 24.84 li
612.84 502.922 li
52.922 502.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.039 159.238 mo
122.879 346.68 li
192.84 403.199 li
262.68 400.32 li
332.641 420.48 li
402.48 439.32 li
472.441 432.961 li
542.281 455.16 li
612.238 443.879 li
.466651 0 .889799 0 cmyk
@
grestore
48.359 154.59 mo
57.359 154.59 li
57.359 163.59 li
48.359 163.59 li
cp
.466651 0 .889799 0 cmyk
@
118.32 342.031 mo
127.32 342.031 li
127.32 351.031 li
118.32 351.031 li
cp
@
188.16 398.672 mo
197.16 398.672 li
197.16 407.672 li
188.16 407.672 li
cp
@
258.121 395.789 mo
267.121 395.789 li
267.121 404.789 li
258.121 404.789 li
cp
@
327.961 415.949 mo
336.961 415.949 li
336.961 424.949 li
327.961 424.949 li
cp
@
397.922 434.672 mo
406.922 434.672 li
406.922 443.672 li
397.922 443.672 li
cp
@
467.762 428.309 mo
476.762 428.309 li
476.762 437.309 li
467.762 437.309 li
cp
@
537.719 450.629 mo
546.719 450.629 li
546.719 459.629 li
537.719 459.629 li
cp
@
607.559 439.23 mo
616.559 439.23 li
616.559 448.23 li
607.559 448.23 li
cp
@
26.699 494.254 mo
41.89 494.254 li
41.89 508.902 li
26.699 508.902 li
cp
0 0 0 0 cmyk
ef
32.375 501.945 mo
32.371 502.527 32.324 503.059 32.238 503.539 cv
32.145 504.023 31.992 504.437 31.781 504.781 cv
31.563 505.125 31.285 505.395 30.945 505.582 cv
30.598 505.77 30.176 505.859 29.676 505.863 cv
29.199 505.859 28.797 505.777 28.473 505.609 cv
28.145 505.441 27.883 505.191 27.684 504.859 cv
27.48 504.531 27.336 504.125 27.258 503.641 cv
27.172 503.16 27.133 502.605 27.133 501.98 cv
27.133 501.402 27.18 500.875 27.273 500.391 cv
27.367 499.914 27.52 499.5 27.73 499.148 cv
27.941 498.805 28.219 498.535 28.563 498.344 cv
28.906 498.156 29.328 498.062 29.828 498.059 cv
30.305 498.062 30.707 498.148 31.035 498.316 cv
31.363 498.488 31.625 498.738 31.824 499.066 cv
32.023 499.398 32.164 499.805 32.25 500.285 cv
32.328 500.77 32.371 501.32 32.375 501.945 cv
cp
31.344 502.016 mo
31.34 501.641 31.328 501.301 31.305 500.996 cv
31.277 500.695 31.234 500.43 31.184 500.199 cv
31.129 499.973 31.063 499.777 30.977 499.605 cv
30.891 499.441 30.789 499.305 30.676 499.195 cv
30.555 499.094 30.422 499.016 30.273 498.961 cv
30.125 498.914 29.957 498.887 29.77 498.887 cv
29.438 498.887 29.168 498.965 28.961 499.121 cv
28.75 499.277 28.586 499.492 28.469 499.766 cv
28.352 500.039 28.27 500.359 28.227 500.727 cv
28.184 501.094 28.164 501.488 28.164 501.91 cv
28.164 502.48 28.191 502.965 28.25 503.355 cv
28.309 503.754 28.402 504.074 28.527 504.324 cv
28.652 504.574 28.813 504.758 29.016 504.871 cv
29.211 504.984 29.453 505.039 29.734 505.039 cv
29.953 505.039 30.145 505.004 30.313 504.934 cv
30.477 504.863 30.617 504.766 30.738 504.633 cv
30.855 504.504 30.957 504.344 31.035 504.16 cv
31.113 503.98 31.176 503.777 31.223 503.551 cv
31.27 503.328 31.301 503.09 31.316 502.828 cv
31.332 502.57 31.34 502.297 31.344 502.016 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.938 505.113 mo
34.938 505.395 34.891 505.578 34.797 505.672 cv
34.703 505.762 34.535 505.805 34.301 505.809 cv
34.063 505.805 33.902 505.762 33.813 505.672 cv
33.719 505.582 33.672 505.402 33.676 505.133 cv
33.672 504.855 33.719 504.672 33.813 504.578 cv
33.906 504.488 34.074 504.441 34.316 504.441 cv
34.551 504.441 34.711 504.488 34.801 504.578 cv
34.891 504.668 34.938 504.848 34.938 505.113 cv
cp
f
41.48 501.945 mo
41.477 502.527 41.43 503.059 41.344 503.539 cv
41.25 504.023 41.098 504.437 40.887 504.781 cv
40.668 505.125 40.391 505.395 40.051 505.582 cv
39.703 505.77 39.281 505.859 38.781 505.863 cv
38.305 505.859 37.902 505.777 37.578 505.609 cv
37.25 505.441 36.988 505.191 36.789 504.859 cv
36.586 504.531 36.441 504.125 36.363 503.641 cv
36.277 503.16 36.238 502.605 36.238 501.98 cv
36.238 501.402 36.285 500.875 36.379 500.391 cv
36.473 499.914 36.625 499.5 36.836 499.148 cv
37.047 498.805 37.324 498.535 37.668 498.344 cv
38.012 498.156 38.434 498.062 38.934 498.059 cv
39.41 498.062 39.813 498.148 40.141 498.316 cv
40.469 498.488 40.73 498.738 40.93 499.066 cv
41.129 499.398 41.27 499.805 41.355 500.285 cv
41.434 500.77 41.477 501.32 41.48 501.945 cv
cp
40.449 502.016 mo
40.445 501.641 40.434 501.301 40.41 500.996 cv
40.383 500.695 40.34 500.43 40.289 500.199 cv
40.234 499.973 40.168 499.777 40.082 499.605 cv
39.996 499.441 39.895 499.305 39.781 499.195 cv
39.66 499.094 39.527 499.016 39.379 498.961 cv
39.23 498.914 39.063 498.887 38.875 498.887 cv
38.543 498.887 38.273 498.965 38.066 499.121 cv
37.855 499.277 37.691 499.492 37.574 499.766 cv
37.457 500.039 37.375 500.359 37.332 500.727 cv
37.289 501.094 37.27 501.488 37.27 501.91 cv
37.27 502.48 37.297 502.965 37.355 503.355 cv
37.414 503.754 37.508 504.074 37.633 504.324 cv
37.758 504.574 37.918 504.758 38.121 504.871 cv
38.316 504.984 38.559 505.039 38.84 505.039 cv
39.059 505.039 39.25 505.004 39.418 504.934 cv
39.582 504.863 39.723 504.766 39.844 504.633 cv
39.961 504.504 40.063 504.344 40.141 504.16 cv
40.219 503.98 40.281 503.777 40.328 503.551 cv
40.375 503.328 40.406 503.09 40.422 502.828 cv
40.438 502.57 40.445 502.297 40.449 502.016 cv
cp
f
26.699 441.219 mo
41.89 441.219 li
41.89 455.871 li
26.699 455.871 li
cp
0 0 0 0 cmyk
ef
32.141 452.312 mo
32.137 452.387 32.133 452.449 32.125 452.5 cv
32.113 452.555 32.098 452.598 32.078 452.625 cv
32.055 452.66 32.031 452.684 32.008 452.691 cv
31.984 452.707 31.957 452.711 31.93 452.711 cv
27.969 452.711 li
27.941 452.711 27.918 452.707 27.895 452.691 cv
27.871 452.684 27.848 452.66 27.828 452.625 cv
27.805 452.598 27.789 452.555 27.777 452.5 cv
27.762 452.449 27.754 452.387 27.758 452.312 cv
27.754 452.242 27.762 452.184 27.777 452.133 cv
27.789 452.082 27.801 452.039 27.82 452.004 cv
27.836 451.973 27.859 451.949 27.883 451.93 cv
27.906 451.914 27.934 451.902 27.969 451.902 cv
29.555 451.902 li
29.555 446.137 li
28.086 447.008 li
28.012 447.055 27.953 447.078 27.91 447.082 cv
27.863 447.094 27.828 447.086 27.801 447.055 cv
27.77 447.031 27.75 446.988 27.742 446.93 cv
27.734 446.871 27.73 446.797 27.73 446.703 cv
27.73 446.641 27.73 446.582 27.738 446.535 cv
27.742 446.488 27.754 446.449 27.766 446.418 cv
27.773 446.387 27.789 446.359 27.813 446.336 cv
27.836 446.312 27.863 446.289 27.898 446.266 cv
29.648 445.148 li
29.66 445.137 29.68 445.125 29.707 445.117 cv
29.727 445.109 29.758 445.102 29.793 445.094 cv
29.824 445.086 29.863 445.082 29.914 445.082 cv
29.957 445.082 30.016 445.082 30.094 445.078 cv
30.184 445.082 30.262 445.086 30.328 445.09 cv
30.387 445.102 30.438 445.113 30.473 445.121 cv
30.504 445.137 30.527 445.152 30.543 445.172 cv
30.555 445.195 30.559 445.219 30.563 445.242 cv
30.563 451.902 li
31.93 451.902 li
31.957 451.902 31.988 451.914 32.02 451.93 cv
32.047 451.949 32.066 451.973 32.086 452.004 cv
32.102 452.039 32.117 452.082 32.125 452.133 cv
32.133 452.184 32.137 452.242 32.141 452.312 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.938 452.07 mo
34.938 452.352 34.891 452.535 34.797 452.629 cv
34.703 452.719 34.535 452.762 34.301 452.766 cv
34.063 452.762 33.902 452.719 33.813 452.629 cv
33.719 452.539 33.672 452.359 33.676 452.09 cv
33.672 451.812 33.719 451.629 33.813 451.535 cv
33.906 451.445 34.074 451.398 34.316 451.398 cv
34.551 451.398 34.711 451.445 34.801 451.535 cv
34.891 451.625 34.938 451.805 34.938 452.07 cv
cp
f
41.195 450.273 mo
41.195 450.68 41.125 451.043 40.988 451.359 cv
40.852 451.676 40.66 451.941 40.41 452.16 cv
40.16 452.379 39.859 452.543 39.516 452.652 cv
39.164 452.762 38.781 452.816 38.363 452.82 cv
38.125 452.816 37.902 452.801 37.695 452.77 cv
37.48 452.738 37.293 452.699 37.133 452.652 cv
36.965 452.605 36.832 452.559 36.73 452.508 cv
36.625 452.465 36.555 452.426 36.527 452.395 cv
36.496 452.367 36.477 452.344 36.465 452.316 cv
36.453 452.297 36.441 452.27 36.434 452.234 cv
36.418 452.203 36.414 452.16 36.414 452.109 cv
36.41 452.059 36.406 451.996 36.41 451.926 cv
36.406 451.863 36.41 451.805 36.418 451.75 cv
36.422 451.695 36.434 451.652 36.449 451.621 cv
36.465 451.59 36.48 451.566 36.504 451.547 cv
36.52 451.535 36.547 451.527 36.578 451.523 cv
36.617 451.527 36.676 451.551 36.758 451.598 cv
36.84 451.645 36.949 451.699 37.09 451.754 cv
37.227 451.812 37.398 451.863 37.605 451.914 cv
37.809 451.969 38.055 451.996 38.336 451.992 cv
38.598 451.996 38.836 451.965 39.059 451.898 cv
39.273 451.84 39.461 451.742 39.621 451.605 cv
39.777 451.477 39.902 451.309 39.992 451.105 cv
40.082 450.902 40.129 450.656 40.129 450.367 cv
40.129 450.125 40.09 449.914 40.016 449.727 cv
39.938 449.543 39.82 449.387 39.664 449.262 cv
39.504 449.141 39.305 449.051 39.063 448.988 cv
38.82 448.934 38.531 448.902 38.195 448.898 cv
37.957 448.902 37.75 448.914 37.582 448.934 cv
37.406 448.961 37.246 448.973 37.098 448.969 cv
36.984 448.973 36.906 448.945 36.863 448.891 cv
36.813 448.84 36.789 448.742 36.793 448.598 cv
36.793 445.508 li
36.789 445.383 36.82 445.285 36.883 445.223 cv
36.945 445.16 37.031 445.129 37.145 445.129 cv
40.504 445.129 li
40.535 445.129 40.563 445.141 40.594 445.156 cv
40.617 445.176 40.645 445.199 40.668 445.234 cv
40.688 445.273 40.699 445.32 40.711 445.371 cv
40.719 445.43 40.727 445.492 40.727 445.562 cv
40.727 445.703 40.707 445.812 40.668 445.891 cv
40.629 445.969 40.574 446.008 40.512 446.008 cv
37.801 446.008 li
37.801 448.133 li
37.93 448.117 38.066 448.105 38.207 448.102 cv
38.344 448.098 38.5 448.094 38.684 448.094 cv
39.098 448.094 39.465 448.148 39.777 448.25 cv
40.09 448.359 40.348 448.504 40.559 448.691 cv
40.766 448.879 40.926 449.109 41.035 449.379 cv
41.141 449.648 41.195 449.945 41.195 450.273 cv
cp
f
26.699 388.18 mo
41.89 388.18 li
41.89 402.828 li
26.699 402.828 li
cp
0 0 0 0 cmyk
ef
32.066 397.48 mo
32.066 397.828 32.004 398.145 31.883 398.422 cv
31.762 398.703 31.59 398.941 31.363 399.141 cv
31.137 399.34 30.855 399.492 30.523 399.598 cv
30.191 399.703 29.816 399.754 29.398 399.758 cv
29.145 399.754 28.906 399.734 28.688 399.695 cv
28.465 399.656 28.27 399.609 28.102 399.555 cv
27.926 399.5 27.785 399.441 27.672 399.379 cv
27.555 399.316 27.48 399.273 27.457 399.246 cv
27.426 399.219 27.406 399.191 27.391 399.164 cv
27.375 399.137 27.359 399.102 27.348 399.062 cv
27.336 399.023 27.328 398.977 27.32 398.922 cv
27.313 398.867 27.309 398.797 27.313 398.711 cv
27.309 398.57 27.324 398.473 27.355 398.418 cv
27.383 398.363 27.422 398.336 27.477 398.336 cv
27.512 398.336 27.582 398.367 27.688 398.43 cv
27.793 398.492 27.93 398.562 28.098 398.633 cv
28.262 398.711 28.457 398.777 28.68 398.836 cv
28.902 398.902 29.148 398.934 29.426 398.93 cv
29.684 398.934 29.918 398.898 30.121 398.828 cv
30.32 398.762 30.488 398.668 30.625 398.547 cv
30.762 398.43 30.863 398.289 30.934 398.117 cv
31 397.953 31.035 397.77 31.035 397.574 cv
31.035 397.359 30.988 397.168 30.902 396.992 cv
30.813 396.824 30.688 396.676 30.523 396.547 cv
30.355 396.426 30.148 396.328 29.906 396.262 cv
29.656 396.199 29.379 396.168 29.074 396.164 cv
28.332 396.164 li
28.297 396.168 28.266 396.16 28.234 396.145 cv
28.203 396.129 28.176 396.105 28.156 396.074 cv
28.133 396.043 28.113 396.004 28.102 395.953 cv
28.086 395.902 28.082 395.836 28.082 395.75 cv
28.082 395.68 28.086 395.617 28.098 395.566 cv
28.109 395.52 28.125 395.48 28.148 395.449 cv
28.164 395.422 28.191 395.402 28.223 395.387 cv
28.25 395.379 28.281 395.371 28.316 395.367 cv
28.977 395.367 li
29.234 395.371 29.465 395.336 29.672 395.266 cv
29.875 395.199 30.051 395.105 30.191 394.977 cv
30.332 394.855 30.441 394.707 30.52 394.531 cv
30.598 394.359 30.637 394.164 30.637 393.945 cv
30.637 393.793 30.609 393.645 30.559 393.5 cv
30.508 393.359 30.434 393.234 30.332 393.129 cv
30.23 393.023 30.098 392.941 29.941 392.879 cv
29.777 392.824 29.598 392.793 29.395 392.789 cv
29.168 392.793 28.957 392.828 28.77 392.891 cv
28.574 392.961 28.406 393.031 28.262 393.109 cv
28.109 393.187 27.988 393.262 27.895 393.328 cv
27.797 393.398 27.727 393.434 27.688 393.43 cv
27.66 393.434 27.637 393.43 27.617 393.418 cv
27.594 393.41 27.574 393.391 27.563 393.359 cv
27.547 393.332 27.539 393.289 27.531 393.234 cv
27.523 393.184 27.52 393.113 27.523 393.027 cv
27.52 392.969 27.523 392.918 27.531 392.871 cv
27.535 392.828 27.543 392.789 27.555 392.754 cv
27.563 392.723 27.574 392.691 27.594 392.664 cv
27.605 392.641 27.633 392.609 27.672 392.57 cv
27.711 392.531 27.785 392.477 27.898 392.406 cv
28.012 392.336 28.152 392.27 28.32 392.199 cv
28.484 392.133 28.676 392.074 28.895 392.023 cv
29.109 391.98 29.344 391.957 29.594 391.953 cv
29.945 391.957 30.254 392 30.52 392.09 cv
30.785 392.184 31.004 392.312 31.184 392.473 cv
31.359 392.641 31.492 392.836 31.582 393.062 cv
31.668 393.289 31.715 393.543 31.715 393.82 cv
31.715 394.059 31.684 394.281 31.621 394.484 cv
31.559 394.691 31.465 394.871 31.344 395.027 cv
31.223 395.187 31.074 395.324 30.898 395.434 cv
30.723 395.551 30.52 395.625 30.289 395.664 cv
30.289 395.676 li
30.551 395.707 30.789 395.773 31.008 395.875 cv
31.223 395.977 31.41 396.105 31.57 396.262 cv
31.723 396.418 31.844 396.602 31.934 396.812 cv
32.02 397.023 32.066 397.246 32.066 397.48 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.938 399.008 mo
34.938 399.289 34.891 399.473 34.797 399.566 cv
34.703 399.656 34.535 399.699 34.301 399.703 cv
34.063 399.699 33.902 399.656 33.813 399.566 cv
33.719 399.477 33.672 399.297 33.676 399.027 cv
33.672 398.75 33.719 398.566 33.813 398.473 cv
33.906 398.383 34.074 398.336 34.316 398.336 cv
34.551 398.336 34.711 398.383 34.801 398.473 cv
34.891 398.562 34.938 398.742 34.938 399.008 cv
cp
f
41.48 395.84 mo
41.477 396.422 41.43 396.953 41.344 397.434 cv
41.25 397.918 41.098 398.332 40.887 398.676 cv
40.668 399.02 40.391 399.289 40.051 399.477 cv
39.703 399.664 39.281 399.754 38.781 399.758 cv
38.305 399.754 37.902 399.672 37.578 399.504 cv
37.25 399.336 36.988 399.086 36.789 398.754 cv
36.586 398.426 36.441 398.02 36.363 397.535 cv
36.277 397.055 36.238 396.5 36.238 395.875 cv
36.238 395.297 36.285 394.77 36.379 394.285 cv
36.473 393.809 36.625 393.395 36.836 393.043 cv
37.047 392.699 37.324 392.43 37.668 392.238 cv
38.012 392.051 38.434 391.957 38.934 391.953 cv
39.41 391.957 39.813 392.043 40.141 392.211 cv
40.469 392.383 40.73 392.633 40.93 392.961 cv
41.129 393.293 41.27 393.699 41.355 394.18 cv
41.434 394.664 41.477 395.215 41.48 395.84 cv
cp
40.449 395.91 mo
40.445 395.535 40.434 395.195 40.41 394.891 cv
40.383 394.59 40.34 394.324 40.289 394.094 cv
40.234 393.867 40.168 393.672 40.082 393.5 cv
39.996 393.336 39.895 393.199 39.781 393.09 cv
39.66 392.988 39.527 392.91 39.379 392.855 cv
39.23 392.809 39.063 392.781 38.875 392.781 cv
38.543 392.781 38.273 392.859 38.066 393.016 cv
37.855 393.172 37.691 393.387 37.574 393.66 cv
37.457 393.934 37.375 394.254 37.332 394.621 cv
37.289 394.988 37.27 395.383 37.27 395.805 cv
37.27 396.375 37.297 396.859 37.355 397.25 cv
37.414 397.648 37.508 397.969 37.633 398.219 cv
37.758 398.469 37.918 398.652 38.121 398.766 cv
38.316 398.879 38.559 398.934 38.84 398.934 cv
39.059 398.934 39.25 398.898 39.418 398.828 cv
39.582 398.758 39.723 398.66 39.844 398.527 cv
39.961 398.398 40.063 398.238 40.141 398.055 cv
40.219 397.875 40.281 397.672 40.328 397.445 cv
40.375 397.223 40.406 396.984 40.422 396.723 cv
40.438 396.465 40.445 396.191 40.449 395.91 cv
cp
f
26.699 335.141 mo
41.89 335.141 li
41.89 349.789 li
26.699 349.789 li
cp
0 0 0 0 cmyk
ef
32.445 344.453 mo
32.441 344.586 32.422 344.687 32.387 344.758 cv
32.344 344.832 32.289 344.871 32.227 344.867 cv
31.367 344.867 li
31.367 346.461 li
31.363 346.496 31.355 346.523 31.344 346.543 cv
31.324 346.566 31.297 346.582 31.258 346.598 cv
31.219 346.613 31.164 346.625 31.102 346.633 cv
31.035 346.641 30.953 346.645 30.855 346.645 cv
30.754 346.645 30.676 346.641 30.613 346.633 cv
30.551 346.625 30.5 346.613 30.461 346.598 cv
30.422 346.582 30.395 346.566 30.379 346.543 cv
30.363 346.523 30.355 346.496 30.359 346.461 cv
30.359 344.867 li
27.258 344.867 li
27.211 344.871 27.176 344.863 27.145 344.852 cv
27.113 344.844 27.082 344.824 27.059 344.789 cv
27.027 344.762 27.012 344.715 27.004 344.652 cv
26.996 344.594 26.992 344.52 26.992 344.422 cv
26.992 344.352 26.992 344.285 26.996 344.227 cv
27 344.168 27.008 344.113 27.02 344.066 cv
27.031 344.02 27.047 343.973 27.066 343.926 cv
27.086 343.879 27.109 343.832 27.137 343.781 cv
29.84 339.172 li
29.859 339.145 29.887 339.117 29.926 339.09 cv
29.961 339.07 30.012 339.051 30.074 339.031 cv
30.133 339.02 30.203 339.008 30.293 339 cv
30.379 338.996 30.484 338.992 30.605 338.992 cv
30.734 338.992 30.848 339 30.945 339.008 cv
31.043 339.023 31.121 339.035 31.184 339.047 cv
31.238 339.066 31.285 339.086 31.32 339.109 cv
31.348 339.133 31.363 339.164 31.367 339.195 cv
31.367 344.039 li
32.227 344.039 li
32.289 344.043 32.344 344.078 32.383 344.141 cv
32.422 344.211 32.441 344.312 32.445 344.453 cv
cp
30.359 339.875 mo
30.352 339.875 li
27.914 344.039 li
30.359 344.039 li
cp
.629114 .553033 .543389 .289647 cmyk
f
34.938 345.969 mo
34.938 346.25 34.891 346.434 34.797 346.527 cv
34.703 346.617 34.535 346.66 34.301 346.664 cv
34.063 346.66 33.902 346.617 33.813 346.527 cv
33.719 346.437 33.672 346.258 33.676 345.988 cv
33.672 345.711 33.719 345.527 33.813 345.434 cv
33.906 345.344 34.074 345.297 34.316 345.297 cv
34.551 345.297 34.711 345.344 34.801 345.434 cv
34.891 345.523 34.938 345.703 34.938 345.969 cv
cp
f
41.195 344.172 mo
41.195 344.578 41.125 344.941 40.988 345.258 cv
40.852 345.574 40.66 345.84 40.41 346.059 cv
40.16 346.277 39.859 346.441 39.516 346.551 cv
39.164 346.66 38.781 346.715 38.363 346.719 cv
38.125 346.715 37.902 346.699 37.695 346.668 cv
37.48 346.637 37.293 346.598 37.133 346.551 cv
36.965 346.504 36.832 346.457 36.73 346.406 cv
36.625 346.363 36.555 346.324 36.527 346.293 cv
36.496 346.266 36.477 346.242 36.465 346.215 cv
36.453 346.195 36.441 346.168 36.434 346.133 cv
36.418 346.102 36.414 346.059 36.414 346.008 cv
36.41 345.957 36.406 345.895 36.41 345.824 cv
36.406 345.762 36.41 345.703 36.418 345.648 cv
36.422 345.594 36.434 345.551 36.449 345.52 cv
36.465 345.488 36.48 345.465 36.504 345.445 cv
36.52 345.434 36.547 345.426 36.578 345.422 cv
36.617 345.426 36.676 345.449 36.758 345.496 cv
36.84 345.543 36.949 345.598 37.09 345.652 cv
37.227 345.711 37.398 345.762 37.605 345.812 cv
37.809 345.867 38.055 345.895 38.336 345.891 cv
38.598 345.895 38.836 345.863 39.059 345.797 cv
39.273 345.738 39.461 345.641 39.621 345.504 cv
39.777 345.375 39.902 345.207 39.992 345.004 cv
40.082 344.801 40.129 344.555 40.129 344.266 cv
40.129 344.023 40.09 343.812 40.016 343.625 cv
39.938 343.441 39.82 343.285 39.664 343.16 cv
39.504 343.039 39.305 342.949 39.063 342.887 cv
38.82 342.832 38.531 342.801 38.195 342.797 cv
37.957 342.801 37.75 342.812 37.582 342.832 cv
37.406 342.859 37.246 342.871 37.098 342.867 cv
36.984 342.871 36.906 342.844 36.863 342.789 cv
36.813 342.738 36.789 342.641 36.793 342.496 cv
36.793 339.406 li
36.789 339.281 36.82 339.184 36.883 339.121 cv
36.945 339.059 37.031 339.027 37.145 339.027 cv
40.504 339.027 li
40.535 339.027 40.563 339.039 40.594 339.055 cv
40.617 339.074 40.645 339.098 40.668 339.133 cv
40.688 339.172 40.699 339.219 40.711 339.27 cv
40.719 339.328 40.727 339.391 40.727 339.461 cv
40.727 339.602 40.707 339.711 40.668 339.789 cv
40.629 339.867 40.574 339.906 40.512 339.906 cv
37.801 339.906 li
37.801 342.031 li
37.93 342.016 38.066 342.004 38.207 342 cv
38.344 341.996 38.5 341.992 38.684 341.992 cv
39.098 341.992 39.465 342.047 39.777 342.148 cv
40.09 342.258 40.348 342.402 40.559 342.59 cv
40.766 342.777 40.926 343.008 41.035 343.277 cv
41.141 343.547 41.195 343.844 41.195 344.172 cv
cp
f
26.699 282.102 mo
41.89 282.102 li
41.89 296.75 li
26.699 296.75 li
cp
0 0 0 0 cmyk
ef
32.328 291.109 mo
32.324 291.445 32.273 291.77 32.176 292.078 cv
32.07 292.391 31.914 292.664 31.707 292.898 cv
31.492 293.137 31.223 293.328 30.902 293.469 cv
30.574 293.613 30.191 293.68 29.754 293.684 cv
29.434 293.68 29.152 293.645 28.91 293.566 cv
28.664 293.488 28.453 293.375 28.277 293.23 cv
28.094 293.086 27.945 292.91 27.828 292.695 cv
27.707 292.488 27.609 292.246 27.539 291.973 cv
27.465 291.703 27.414 291.406 27.387 291.086 cv
27.352 290.766 27.336 290.422 27.34 290.055 cv
27.336 289.73 27.355 289.402 27.391 289.066 cv
27.426 288.734 27.488 288.414 27.578 288.105 cv
27.668 287.797 27.789 287.508 27.945 287.234 cv
28.098 286.965 28.293 286.727 28.527 286.523 cv
28.762 286.324 29.039 286.164 29.363 286.043 cv
29.688 285.93 30.066 285.871 30.496 285.867 cv
30.641 285.871 30.785 285.879 30.938 285.895 cv
31.082 285.914 31.219 285.937 31.348 285.965 cv
31.469 285.996 31.574 286.031 31.664 286.062 cv
31.75 286.102 31.809 286.129 31.836 286.148 cv
31.863 286.172 31.883 286.195 31.898 286.219 cv
31.906 286.246 31.918 286.273 31.93 286.301 cv
31.934 286.332 31.938 286.363 31.945 286.398 cv
31.945 286.437 31.949 286.484 31.953 286.535 cv
31.949 286.609 31.949 286.672 31.949 286.719 cv
31.949 286.773 31.941 286.812 31.926 286.844 cv
31.91 286.875 31.891 286.898 31.875 286.914 cv
31.852 286.93 31.824 286.937 31.789 286.937 cv
31.746 286.937 31.688 286.926 31.613 286.898 cv
31.535 286.871 31.445 286.84 31.34 286.805 cv
31.234 286.773 31.105 286.742 30.957 286.715 cv
30.805 286.687 30.629 286.676 30.434 286.672 cv
30.066 286.676 29.754 286.75 29.492 286.895 cv
29.23 287.047 29.016 287.246 28.852 287.496 cv
28.68 287.75 28.559 288.039 28.48 288.367 cv
28.398 288.699 28.352 289.047 28.344 289.402 cv
28.441 289.348 28.555 289.289 28.688 289.227 cv
28.813 289.172 28.953 289.117 29.102 289.066 cv
29.25 289.023 29.41 288.984 29.582 288.953 cv
29.75 288.926 29.93 288.914 30.121 288.91 cv
30.531 288.914 30.875 288.969 31.16 289.078 cv
31.438 289.191 31.668 289.344 31.844 289.539 cv
32.016 289.738 32.137 289.973 32.215 290.238 cv
32.285 290.508 32.324 290.797 32.328 291.109 cv
cp
31.309 291.203 mo
31.305 290.977 31.281 290.773 31.238 290.586 cv
31.191 290.402 31.117 290.242 31.012 290.113 cv
30.906 289.984 30.766 289.887 30.59 289.812 cv
30.414 289.746 30.195 289.711 29.941 289.707 cv
29.793 289.711 29.648 289.723 29.504 289.746 cv
29.359 289.773 29.219 289.809 29.086 289.852 cv
28.945 289.898 28.816 289.953 28.695 290.012 cv
28.57 290.074 28.457 290.137 28.359 290.207 cv
28.355 290.715 28.391 291.141 28.457 291.477 cv
28.52 291.82 28.613 292.09 28.738 292.293 cv
28.863 292.5 29.016 292.648 29.199 292.734 cv
29.383 292.824 29.598 292.867 29.848 292.867 cv
30.094 292.867 30.313 292.82 30.496 292.727 cv
30.68 292.633 30.832 292.508 30.953 292.348 cv
31.074 292.191 31.164 292.012 31.223 291.812 cv
31.277 291.617 31.305 291.414 31.309 291.203 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.953 292.93 mo
34.949 293.211 34.902 293.395 34.813 293.488 cv
34.719 293.578 34.551 293.621 34.313 293.625 cv
34.074 293.621 33.914 293.578 33.824 293.488 cv
33.734 293.398 33.688 293.219 33.691 292.949 cv
33.688 292.672 33.734 292.488 33.828 292.395 cv
33.918 292.305 34.086 292.258 34.332 292.254 cv
34.563 292.258 34.723 292.305 34.816 292.391 cv
34.902 292.484 34.949 292.664 34.953 292.93 cv
cp
f
41.512 289.754 mo
41.508 290.34 41.461 290.871 41.375 291.352 cv
41.281 291.836 41.129 292.25 40.918 292.594 cv
40.699 292.941 40.422 293.211 40.078 293.398 cv
39.734 293.59 39.309 293.68 38.809 293.684 cv
38.324 293.68 37.922 293.598 37.598 293.43 cv
37.27 293.258 37.008 293.008 36.809 292.676 cv
36.609 292.348 36.465 291.941 36.383 291.457 cv
36.297 290.977 36.258 290.422 36.258 289.789 cv
36.258 289.215 36.305 288.684 36.398 288.195 cv
36.492 287.715 36.645 287.297 36.855 286.949 cv
37.066 286.605 37.344 286.34 37.691 286.148 cv
38.031 285.961 38.453 285.867 38.961 285.863 cv
39.438 285.867 39.84 285.949 40.168 286.117 cv
40.492 286.289 40.758 286.539 40.961 286.867 cv
41.16 287.199 41.301 287.609 41.387 288.09 cv
41.465 288.578 41.508 289.133 41.512 289.754 cv
cp
40.48 289.824 mo
40.477 289.449 40.461 289.109 40.438 288.805 cv
40.406 288.508 40.367 288.238 40.316 288.004 cv
40.262 287.773 40.195 287.578 40.113 287.41 cv
40.027 287.246 39.926 287.109 39.809 287 cv
39.691 286.895 39.555 286.812 39.406 286.762 cv
39.254 286.715 39.086 286.691 38.902 286.687 cv
38.566 286.691 38.297 286.77 38.09 286.926 cv
37.879 287.082 37.715 287.297 37.598 287.57 cv
37.477 287.844 37.395 288.168 37.355 288.535 cv
37.309 288.906 37.289 289.301 37.293 289.719 cv
37.289 290.289 37.316 290.77 37.379 291.168 cv
37.434 291.566 37.527 291.891 37.66 292.137 cv
37.785 292.391 37.949 292.574 38.145 292.684 cv
38.34 292.801 38.578 292.855 38.867 292.855 cv
39.082 292.855 39.273 292.82 39.441 292.75 cv
39.605 292.68 39.75 292.582 39.871 292.449 cv
39.988 292.32 40.086 292.16 40.168 291.977 cv
40.242 291.793 40.305 291.59 40.355 291.363 cv
40.398 291.141 40.434 290.898 40.453 290.637 cv
40.469 290.379 40.477 290.109 40.48 289.824 cv
cp
f
26.699 229.059 mo
41.89 229.059 li
41.89 243.711 li
26.699 243.711 li
cp
0 0 0 0 cmyk
ef
32.234 233.352 mo
32.23 233.422 32.227 233.488 32.227 233.543 cv
32.219 233.602 32.211 233.656 32.203 233.707 cv
32.188 233.762 32.176 233.812 32.16 233.859 cv
32.145 233.91 32.125 233.961 32.102 234.016 cv
29.371 240.305 li
29.352 240.355 29.324 240.395 29.297 240.422 cv
29.266 240.453 29.23 240.477 29.184 240.492 cv
29.137 240.508 29.078 240.516 29.012 240.523 cv
28.938 240.531 28.852 240.535 28.758 240.535 cv
28.617 240.535 28.516 240.527 28.445 240.516 cv
28.371 240.504 28.316 240.488 28.285 240.461 cv
28.25 240.437 28.234 240.406 28.238 240.367 cv
28.242 240.332 28.258 240.289 28.281 240.234 cv
31.152 233.805 li
27.516 233.805 li
27.438 233.809 27.383 233.77 27.344 233.687 cv
27.305 233.613 27.285 233.504 27.289 233.359 cv
27.285 233.285 27.289 233.219 27.305 233.164 cv
27.313 233.109 27.328 233.066 27.348 233.027 cv
27.367 232.992 27.391 232.965 27.418 232.945 cv
27.445 232.93 27.477 232.918 27.516 232.918 cv
31.93 232.918 li
31.984 232.918 32.031 232.926 32.074 232.937 cv
32.113 232.949 32.145 232.973 32.168 233.008 cv
32.188 233.043 32.207 233.086 32.219 233.141 cv
32.227 233.195 32.23 233.266 32.234 233.352 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.938 239.859 mo
34.938 240.141 34.891 240.324 34.797 240.418 cv
34.703 240.508 34.535 240.551 34.301 240.555 cv
34.063 240.551 33.902 240.508 33.813 240.418 cv
33.719 240.328 33.672 240.148 33.676 239.879 cv
33.672 239.602 33.719 239.418 33.813 239.324 cv
33.906 239.234 34.074 239.187 34.316 239.187 cv
34.551 239.187 34.711 239.234 34.801 239.324 cv
34.891 239.414 34.938 239.594 34.938 239.859 cv
cp
f
41.195 238.062 mo
41.195 238.469 41.125 238.832 40.988 239.148 cv
40.852 239.465 40.66 239.73 40.41 239.949 cv
40.16 240.168 39.859 240.332 39.516 240.441 cv
39.164 240.551 38.781 240.605 38.363 240.609 cv
38.125 240.605 37.902 240.59 37.695 240.559 cv
37.48 240.527 37.293 240.488 37.133 240.441 cv
36.965 240.395 36.832 240.348 36.73 240.297 cv
36.625 240.254 36.555 240.215 36.527 240.184 cv
36.496 240.156 36.477 240.133 36.465 240.105 cv
36.453 240.086 36.441 240.059 36.434 240.023 cv
36.418 239.992 36.414 239.949 36.414 239.898 cv
36.41 239.848 36.406 239.785 36.41 239.715 cv
36.406 239.652 36.41 239.594 36.418 239.539 cv
36.422 239.484 36.434 239.441 36.449 239.41 cv
36.465 239.379 36.48 239.355 36.504 239.336 cv
36.52 239.324 36.547 239.316 36.578 239.312 cv
36.617 239.316 36.676 239.34 36.758 239.387 cv
36.84 239.434 36.949 239.488 37.09 239.543 cv
37.227 239.602 37.398 239.652 37.605 239.703 cv
37.809 239.758 38.055 239.785 38.336 239.781 cv
38.598 239.785 38.836 239.754 39.059 239.687 cv
39.273 239.629 39.461 239.531 39.621 239.395 cv
39.777 239.266 39.902 239.098 39.992 238.895 cv
40.082 238.691 40.129 238.445 40.129 238.156 cv
40.129 237.914 40.09 237.703 40.016 237.516 cv
39.938 237.332 39.82 237.176 39.664 237.051 cv
39.504 236.93 39.305 236.84 39.063 236.777 cv
38.82 236.723 38.531 236.691 38.195 236.687 cv
37.957 236.691 37.75 236.703 37.582 236.723 cv
37.406 236.75 37.246 236.762 37.098 236.758 cv
36.984 236.762 36.906 236.734 36.863 236.68 cv
36.813 236.629 36.789 236.531 36.793 236.387 cv
36.793 233.297 li
36.789 233.172 36.82 233.074 36.883 233.012 cv
36.945 232.949 37.031 232.918 37.145 232.918 cv
40.504 232.918 li
40.535 232.918 40.563 232.93 40.594 232.945 cv
40.617 232.965 40.645 232.988 40.668 233.023 cv
40.688 233.062 40.699 233.109 40.711 233.16 cv
40.719 233.219 40.727 233.281 40.727 233.352 cv
40.727 233.492 40.707 233.602 40.668 233.68 cv
40.629 233.758 40.574 233.797 40.512 233.797 cv
37.801 233.797 li
37.801 235.922 li
37.93 235.906 38.066 235.895 38.207 235.891 cv
38.344 235.887 38.5 235.883 38.684 235.883 cv
39.098 235.883 39.465 235.937 39.777 236.039 cv
40.09 236.148 40.348 236.293 40.559 236.48 cv
40.766 236.668 40.926 236.898 41.035 237.168 cv
41.141 237.437 41.195 237.734 41.195 238.062 cv
cp
f
26.699 176.02 mo
41.89 176.02 li
41.89 190.672 li
26.699 190.672 li
cp
0 0 0 0 cmyk
ef
32.184 183.371 mo
32.184 183.699 32.164 184.031 32.125 184.367 cv
32.086 184.703 32.02 185.027 31.926 185.34 cv
31.832 185.652 31.703 185.945 31.547 186.211 cv
31.387 186.484 31.188 186.719 30.949 186.922 cv
30.707 187.125 30.422 187.285 30.094 187.398 cv
29.762 187.512 29.379 187.566 28.945 187.57 cv
28.773 187.566 28.609 187.555 28.453 187.539 cv
28.293 187.516 28.152 187.492 28.027 187.461 cv
27.898 187.43 27.793 187.398 27.707 187.363 cv
27.621 187.328 27.559 187.293 27.52 187.258 cv
27.48 187.223 27.449 187.176 27.434 187.113 cv
27.41 187.059 27.402 186.977 27.406 186.867 cv
27.402 186.789 27.406 186.719 27.414 186.664 cv
27.422 186.613 27.43 186.574 27.441 186.547 cv
27.453 186.523 27.469 186.508 27.492 186.492 cv
27.508 186.484 27.535 186.477 27.57 186.477 cv
27.613 186.477 27.676 186.492 27.754 186.52 cv
27.832 186.551 27.93 186.582 28.047 186.617 cv
28.164 186.656 28.305 186.691 28.469 186.715 cv
28.629 186.746 28.809 186.758 29.008 186.758 cv
29.387 186.758 29.711 186.687 29.984 186.539 cv
30.254 186.398 30.477 186.199 30.648 185.949 cv
30.82 185.703 30.949 185.418 31.035 185.094 cv
31.121 184.773 31.168 184.434 31.176 184.07 cv
30.969 184.191 30.719 184.297 30.434 184.391 cv
30.141 184.484 29.809 184.531 29.438 184.531 cv
29.012 184.531 28.656 184.477 28.371 184.359 cv
28.082 184.25 27.852 184.09 27.68 183.887 cv
27.504 183.687 27.379 183.453 27.305 183.176 cv
27.227 182.906 27.191 182.605 27.191 182.281 cv
27.191 181.945 27.238 181.629 27.336 181.324 cv
27.434 181.023 27.586 180.754 27.793 180.523 cv
28 180.297 28.266 180.113 28.586 179.973 cv
28.906 179.836 29.289 179.77 29.734 179.766 cv
30.051 179.77 30.328 179.809 30.574 179.887 cv
30.816 179.969 31.031 180.086 31.211 180.234 cv
31.391 180.391 31.543 180.57 31.668 180.781 cv
31.793 180.992 31.891 181.234 31.969 181.504 cv
32.043 181.773 32.098 182.066 32.133 182.379 cv
32.164 182.699 32.184 183.027 32.184 183.371 cv
cp
31.156 183.258 mo
31.152 182.762 31.121 182.34 31.059 181.996 cv
30.992 181.656 30.895 181.379 30.766 181.168 cv
30.633 180.957 30.473 180.805 30.289 180.711 cv
30.098 180.617 29.883 180.57 29.641 180.57 cv
29.383 180.57 29.164 180.617 28.988 180.707 cv
28.805 180.801 28.656 180.926 28.547 181.078 cv
28.43 181.234 28.348 181.406 28.293 181.602 cv
28.238 181.797 28.211 182 28.211 182.203 cv
28.211 182.437 28.234 182.648 28.285 182.84 cv
28.332 183.031 28.41 183.191 28.523 183.324 cv
28.629 183.457 28.773 183.562 28.949 183.633 cv
29.121 183.711 29.336 183.746 29.602 183.742 cv
29.891 183.746 30.176 183.703 30.449 183.609 cv
30.723 183.523 30.957 183.406 31.156 183.258 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.938 186.82 mo
34.938 187.102 34.891 187.285 34.797 187.379 cv
34.703 187.469 34.535 187.512 34.301 187.516 cv
34.063 187.512 33.902 187.469 33.813 187.379 cv
33.719 187.289 33.672 187.109 33.676 186.84 cv
33.672 186.562 33.719 186.379 33.813 186.285 cv
33.906 186.195 34.074 186.148 34.316 186.148 cv
34.551 186.148 34.711 186.195 34.801 186.285 cv
34.891 186.375 34.938 186.555 34.938 186.82 cv
cp
f
41.48 183.652 mo
41.477 184.234 41.43 184.766 41.344 185.246 cv
41.25 185.73 41.098 186.145 40.887 186.488 cv
40.668 186.832 40.391 187.102 40.051 187.289 cv
39.703 187.477 39.281 187.566 38.781 187.57 cv
38.305 187.566 37.902 187.484 37.578 187.316 cv
37.25 187.148 36.988 186.898 36.789 186.566 cv
36.586 186.238 36.441 185.832 36.363 185.348 cv
36.277 184.867 36.238 184.312 36.238 183.687 cv
36.238 183.109 36.285 182.582 36.379 182.098 cv
36.473 181.621 36.625 181.207 36.836 180.855 cv
37.047 180.512 37.324 180.242 37.668 180.051 cv
38.012 179.863 38.434 179.77 38.934 179.766 cv
39.41 179.77 39.813 179.855 40.141 180.023 cv
40.469 180.195 40.73 180.445 40.93 180.773 cv
41.129 181.105 41.27 181.512 41.355 181.992 cv
41.434 182.477 41.477 183.027 41.48 183.652 cv
cp
40.449 183.723 mo
40.445 183.348 40.434 183.008 40.41 182.703 cv
40.383 182.402 40.34 182.137 40.289 181.906 cv
40.234 181.68 40.168 181.484 40.082 181.312 cv
39.996 181.148 39.895 181.012 39.781 180.902 cv
39.66 180.801 39.527 180.723 39.379 180.668 cv
39.23 180.621 39.063 180.594 38.875 180.594 cv
38.543 180.594 38.273 180.672 38.066 180.828 cv
37.855 180.984 37.691 181.199 37.574 181.473 cv
37.457 181.746 37.375 182.066 37.332 182.434 cv
37.289 182.801 37.27 183.195 37.27 183.617 cv
37.27 184.187 37.297 184.672 37.355 185.062 cv
37.414 185.461 37.508 185.781 37.633 186.031 cv
37.758 186.281 37.918 186.465 38.121 186.578 cv
38.316 186.691 38.559 186.746 38.84 186.746 cv
39.059 186.746 39.25 186.711 39.418 186.641 cv
39.582 186.57 39.723 186.473 39.844 186.34 cv
39.961 186.211 40.063 186.051 40.141 185.867 cv
40.219 185.687 40.281 185.484 40.328 185.258 cv
40.375 185.035 40.406 184.797 40.422 184.535 cv
40.438 184.277 40.445 184.004 40.449 183.723 cv
cp
f
20.621 122.98 mo
41.891 122.98 li
41.891 137.628 li
20.621 137.628 li
cp
0 0 0 0 cmyk
ef
26.07 134 mo
26.066 134.074 26.063 134.137 26.055 134.187 cv
26.043 134.242 26.027 134.285 26.008 134.312 cv
25.984 134.348 25.961 134.371 25.938 134.379 cv
25.914 134.395 25.887 134.398 25.859 134.398 cv
21.898 134.398 li
21.871 134.398 21.848 134.395 21.824 134.379 cv
21.801 134.371 21.777 134.348 21.758 134.312 cv
21.734 134.285 21.719 134.242 21.707 134.187 cv
21.691 134.137 21.684 134.074 21.688 134 cv
21.684 133.93 21.691 133.871 21.707 133.82 cv
21.719 133.77 21.73 133.727 21.75 133.691 cv
21.766 133.66 21.789 133.637 21.813 133.617 cv
21.836 133.602 21.863 133.59 21.898 133.59 cv
23.484 133.59 li
23.484 127.824 li
22.016 128.695 li
21.941 128.742 21.883 128.766 21.84 128.77 cv
21.793 128.781 21.758 128.773 21.73 128.742 cv
21.699 128.719 21.68 128.676 21.672 128.617 cv
21.664 128.559 21.66 128.484 21.66 128.391 cv
21.66 128.328 21.66 128.27 21.668 128.223 cv
21.672 128.176 21.684 128.137 21.695 128.105 cv
21.703 128.074 21.719 128.047 21.742 128.023 cv
21.766 128 21.793 127.977 21.828 127.953 cv
23.578 126.836 li
23.59 126.824 23.609 126.812 23.637 126.805 cv
23.656 126.797 23.688 126.789 23.723 126.781 cv
23.754 126.773 23.793 126.77 23.844 126.77 cv
23.887 126.77 23.945 126.77 24.023 126.766 cv
24.113 126.77 24.191 126.773 24.258 126.777 cv
24.316 126.789 24.367 126.801 24.402 126.809 cv
24.434 126.824 24.457 126.84 24.473 126.859 cv
24.484 126.883 24.488 126.906 24.492 126.93 cv
24.492 133.59 li
25.859 133.59 li
25.887 133.59 25.918 133.602 25.949 133.617 cv
25.977 133.637 25.996 133.66 26.016 133.691 cv
26.031 133.727 26.047 133.77 26.055 133.82 cv
26.063 133.871 26.066 133.93 26.07 134 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.387 130.59 mo
32.383 131.172 32.336 131.703 32.25 132.184 cv
32.156 132.668 32.004 133.082 31.793 133.426 cv
31.574 133.77 31.297 134.039 30.957 134.227 cv
30.609 134.414 30.188 134.504 29.688 134.508 cv
29.211 134.504 28.809 134.422 28.484 134.254 cv
28.156 134.086 27.895 133.836 27.695 133.504 cv
27.492 133.176 27.348 132.77 27.27 132.285 cv
27.184 131.805 27.145 131.25 27.145 130.625 cv
27.145 130.047 27.191 129.52 27.285 129.035 cv
27.379 128.559 27.531 128.145 27.742 127.793 cv
27.953 127.449 28.23 127.18 28.574 126.988 cv
28.918 126.801 29.34 126.707 29.84 126.703 cv
30.316 126.707 30.719 126.793 31.047 126.961 cv
31.375 127.133 31.637 127.383 31.836 127.711 cv
32.035 128.043 32.176 128.449 32.262 128.93 cv
32.34 129.414 32.383 129.965 32.387 130.59 cv
cp
31.355 130.66 mo
31.352 130.285 31.34 129.945 31.316 129.641 cv
31.289 129.34 31.246 129.074 31.195 128.844 cv
31.141 128.617 31.074 128.422 30.988 128.25 cv
30.902 128.086 30.801 127.949 30.688 127.84 cv
30.566 127.738 30.434 127.66 30.285 127.605 cv
30.137 127.559 29.969 127.531 29.781 127.531 cv
29.449 127.531 29.18 127.609 28.973 127.766 cv
28.762 127.922 28.598 128.137 28.48 128.41 cv
28.363 128.684 28.281 129.004 28.238 129.371 cv
28.195 129.738 28.176 130.133 28.176 130.555 cv
28.176 131.125 28.203 131.609 28.262 132 cv
28.32 132.398 28.414 132.719 28.539 132.969 cv
28.664 133.219 28.824 133.402 29.027 133.516 cv
29.223 133.629 29.465 133.684 29.746 133.684 cv
29.965 133.684 30.156 133.648 30.324 133.578 cv
30.488 133.508 30.629 133.41 30.75 133.277 cv
30.867 133.148 30.969 132.988 31.047 132.805 cv
31.125 132.625 31.188 132.422 31.234 132.195 cv
31.281 131.973 31.313 131.734 31.328 131.473 cv
31.344 131.215 31.352 130.941 31.355 130.66 cv
cp
f
34.906 133.758 mo
34.906 134.039 34.859 134.223 34.766 134.316 cv
34.672 134.406 34.504 134.449 34.27 134.453 cv
34.031 134.449 33.871 134.406 33.781 134.316 cv
33.688 134.227 33.641 134.047 33.645 133.777 cv
33.641 133.5 33.688 133.316 33.781 133.223 cv
33.875 133.133 34.043 133.086 34.285 133.086 cv
34.52 133.086 34.68 133.133 34.77 133.223 cv
34.859 133.312 34.906 133.492 34.906 133.758 cv
cp
f
41.246 131.961 mo
41.246 132.367 41.176 132.73 41.039 133.047 cv
40.902 133.363 40.711 133.629 40.461 133.848 cv
40.211 134.066 39.91 134.23 39.566 134.34 cv
39.215 134.449 38.832 134.504 38.414 134.508 cv
38.176 134.504 37.953 134.488 37.746 134.457 cv
37.531 134.426 37.344 134.387 37.184 134.34 cv
37.016 134.293 36.883 134.246 36.781 134.195 cv
36.676 134.152 36.605 134.113 36.578 134.082 cv
36.547 134.055 36.527 134.031 36.516 134.004 cv
36.504 133.984 36.492 133.957 36.484 133.922 cv
36.469 133.891 36.465 133.848 36.465 133.797 cv
36.461 133.746 36.457 133.684 36.461 133.613 cv
36.457 133.551 36.461 133.492 36.469 133.437 cv
36.473 133.383 36.484 133.34 36.5 133.309 cv
36.516 133.277 36.531 133.254 36.555 133.234 cv
36.57 133.223 36.598 133.215 36.629 133.211 cv
36.668 133.215 36.727 133.238 36.809 133.285 cv
36.891 133.332 37 133.387 37.141 133.441 cv
37.277 133.5 37.449 133.551 37.656 133.602 cv
37.859 133.656 38.105 133.684 38.387 133.68 cv
38.648 133.684 38.887 133.652 39.109 133.586 cv
39.324 133.527 39.512 133.43 39.672 133.293 cv
39.828 133.164 39.953 132.996 40.043 132.793 cv
40.133 132.59 40.18 132.344 40.18 132.055 cv
40.18 131.812 40.141 131.602 40.066 131.414 cv
39.988 131.23 39.871 131.074 39.715 130.949 cv
39.555 130.828 39.355 130.738 39.113 130.676 cv
38.871 130.621 38.582 130.59 38.246 130.586 cv
38.008 130.59 37.801 130.602 37.633 130.621 cv
37.457 130.648 37.297 130.66 37.148 130.656 cv
37.035 130.66 36.957 130.633 36.914 130.578 cv
36.863 130.527 36.84 130.43 36.844 130.285 cv
36.844 127.195 li
36.84 127.07 36.871 126.973 36.934 126.91 cv
36.996 126.848 37.082 126.816 37.195 126.816 cv
40.555 126.816 li
40.586 126.816 40.613 126.828 40.645 126.844 cv
40.668 126.863 40.695 126.887 40.719 126.922 cv
40.738 126.961 40.75 127.008 40.762 127.059 cv
40.77 127.117 40.777 127.18 40.777 127.25 cv
40.777 127.391 40.758 127.5 40.719 127.578 cv
40.68 127.656 40.625 127.695 40.563 127.695 cv
37.852 127.695 li
37.852 129.82 li
37.98 129.805 38.117 129.793 38.258 129.789 cv
38.395 129.785 38.551 129.781 38.734 129.781 cv
39.148 129.781 39.516 129.836 39.828 129.937 cv
40.141 130.047 40.398 130.191 40.609 130.379 cv
40.816 130.566 40.977 130.797 41.086 131.066 cv
41.191 131.336 41.246 131.633 41.246 131.961 cv
cp
f
20.621 69.941 mo
41.891 69.941 li
41.891 84.589 li
20.621 84.589 li
cp
0 0 0 0 cmyk
ef
26.07 80.961 mo
26.066 81.035 26.063 81.098 26.055 81.148 cv
26.043 81.203 26.027 81.246 26.008 81.273 cv
25.984 81.309 25.961 81.332 25.938 81.34 cv
25.914 81.355 25.887 81.359 25.859 81.359 cv
21.898 81.359 li
21.871 81.359 21.848 81.355 21.824 81.34 cv
21.801 81.332 21.777 81.309 21.758 81.273 cv
21.734 81.246 21.719 81.203 21.707 81.148 cv
21.691 81.098 21.684 81.035 21.688 80.961 cv
21.684 80.891 21.691 80.832 21.707 80.781 cv
21.719 80.73 21.73 80.687 21.75 80.652 cv
21.766 80.621 21.789 80.598 21.813 80.578 cv
21.836 80.562 21.863 80.551 21.898 80.551 cv
23.484 80.551 li
23.484 74.785 li
22.016 75.656 li
21.941 75.703 21.883 75.727 21.84 75.73 cv
21.793 75.742 21.758 75.734 21.73 75.703 cv
21.699 75.68 21.68 75.637 21.672 75.578 cv
21.664 75.52 21.66 75.445 21.66 75.352 cv
21.66 75.289 21.66 75.23 21.668 75.184 cv
21.672 75.137 21.684 75.098 21.695 75.066 cv
21.703 75.035 21.719 75.008 21.742 74.984 cv
21.766 74.961 21.793 74.937 21.828 74.914 cv
23.578 73.797 li
23.59 73.785 23.609 73.773 23.637 73.766 cv
23.656 73.758 23.688 73.75 23.723 73.742 cv
23.754 73.734 23.793 73.73 23.844 73.73 cv
23.887 73.73 23.945 73.73 24.023 73.727 cv
24.113 73.73 24.191 73.734 24.258 73.738 cv
24.316 73.75 24.367 73.762 24.402 73.77 cv
24.434 73.785 24.457 73.801 24.473 73.82 cv
24.484 73.844 24.488 73.867 24.492 73.891 cv
24.492 80.551 li
25.859 80.551 li
25.887 80.551 25.918 80.562 25.949 80.578 cv
25.977 80.598 25.996 80.621 26.016 80.652 cv
26.031 80.687 26.047 80.73 26.055 80.781 cv
26.063 80.832 26.066 80.891 26.07 80.961 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.137 80.926 mo
32.137 80.996 32.129 81.059 32.121 81.113 cv
32.105 81.168 32.094 81.215 32.078 81.25 cv
32.063 81.289 32.039 81.316 32.008 81.332 cv
31.977 81.352 31.945 81.359 31.914 81.359 cv
27.723 81.359 li
27.668 81.359 27.621 81.355 27.582 81.34 cv
27.539 81.332 27.504 81.309 27.477 81.273 cv
27.445 81.246 27.422 81.199 27.41 81.137 cv
27.395 81.078 27.391 81.008 27.391 80.922 cv
27.391 80.848 27.391 80.777 27.398 80.715 cv
27.402 80.656 27.418 80.605 27.438 80.559 cv
27.457 80.516 27.48 80.473 27.512 80.426 cv
27.539 80.387 27.578 80.336 27.633 80.281 cv
29.148 78.723 li
29.496 78.363 29.773 78.043 29.988 77.758 cv
30.199 77.473 30.363 77.211 30.48 76.977 cv
30.59 76.742 30.668 76.531 30.707 76.34 cv
30.742 76.148 30.758 75.969 30.762 75.797 cv
30.758 75.633 30.73 75.473 30.676 75.32 cv
30.617 75.172 30.535 75.039 30.43 74.926 cv
30.32 74.816 30.188 74.727 30.027 74.656 cv
29.863 74.59 29.676 74.559 29.473 74.555 cv
29.223 74.559 29.004 74.59 28.809 74.656 cv
28.613 74.727 28.441 74.801 28.293 74.875 cv
28.145 74.957 28.02 75.027 27.926 75.09 cv
27.824 75.156 27.754 75.191 27.707 75.187 cv
27.676 75.191 27.648 75.184 27.629 75.164 cv
27.605 75.152 27.586 75.125 27.574 75.09 cv
27.559 75.059 27.551 75.012 27.543 74.949 cv
27.535 74.891 27.531 74.82 27.531 74.738 cv
27.531 74.68 27.531 74.629 27.535 74.586 cv
27.539 74.547 27.547 74.512 27.559 74.477 cv
27.566 74.449 27.578 74.418 27.598 74.387 cv
27.609 74.359 27.641 74.328 27.691 74.285 cv
27.734 74.246 27.816 74.187 27.934 74.117 cv
28.047 74.047 28.191 73.98 28.367 73.91 cv
28.539 73.844 28.73 73.785 28.941 73.734 cv
29.148 73.691 29.367 73.668 29.598 73.664 cv
29.965 73.668 30.285 73.719 30.563 73.82 cv
30.836 73.926 31.066 74.066 31.246 74.246 cv
31.426 74.426 31.563 74.637 31.656 74.875 cv
31.746 75.113 31.789 75.367 31.793 75.633 cv
31.789 75.883 31.77 76.125 31.727 76.359 cv
31.68 76.602 31.586 76.859 31.453 77.137 cv
31.313 77.418 31.113 77.73 30.852 78.07 cv
30.59 78.414 30.242 78.805 29.809 79.25 cv
28.609 80.504 li
31.91 80.504 li
31.938 80.504 31.969 80.516 32 80.531 cv
32.027 80.551 32.051 80.574 32.074 80.609 cv
32.09 80.648 32.105 80.695 32.121 80.742 cv
32.129 80.797 32.137 80.855 32.137 80.926 cv
cp
f
34.906 80.719 mo
34.906 81 34.859 81.184 34.766 81.277 cv
34.672 81.367 34.504 81.41 34.27 81.414 cv
34.031 81.41 33.871 81.367 33.781 81.277 cv
33.688 81.187 33.641 81.008 33.645 80.738 cv
33.641 80.461 33.688 80.277 33.781 80.184 cv
33.875 80.094 34.043 80.047 34.285 80.047 cv
34.52 80.047 34.68 80.094 34.77 80.184 cv
34.859 80.273 34.906 80.453 34.906 80.719 cv
cp
f
41.531 77.551 mo
41.527 78.133 41.48 78.664 41.395 79.145 cv
41.301 79.629 41.148 80.043 40.938 80.387 cv
40.719 80.73 40.441 81 40.102 81.187 cv
39.754 81.375 39.332 81.465 38.832 81.469 cv
38.355 81.465 37.953 81.383 37.629 81.215 cv
37.301 81.047 37.039 80.797 36.84 80.465 cv
36.637 80.137 36.492 79.73 36.414 79.246 cv
36.328 78.766 36.289 78.211 36.289 77.586 cv
36.289 77.008 36.336 76.48 36.43 75.996 cv
36.523 75.52 36.676 75.105 36.887 74.754 cv
37.098 74.41 37.375 74.141 37.719 73.949 cv
38.063 73.762 38.484 73.668 38.984 73.664 cv
39.461 73.668 39.863 73.754 40.191 73.922 cv
40.52 74.094 40.781 74.344 40.98 74.672 cv
41.18 75.004 41.32 75.41 41.406 75.891 cv
41.484 76.375 41.527 76.926 41.531 77.551 cv
cp
40.5 77.621 mo
40.496 77.246 40.484 76.906 40.461 76.602 cv
40.434 76.301 40.391 76.035 40.34 75.805 cv
40.285 75.578 40.219 75.383 40.133 75.211 cv
40.047 75.047 39.945 74.91 39.832 74.801 cv
39.711 74.699 39.578 74.621 39.43 74.566 cv
39.281 74.52 39.113 74.492 38.926 74.492 cv
38.594 74.492 38.324 74.57 38.117 74.727 cv
37.906 74.883 37.742 75.098 37.625 75.371 cv
37.508 75.645 37.426 75.965 37.383 76.332 cv
37.34 76.699 37.32 77.094 37.32 77.516 cv
37.32 78.086 37.348 78.57 37.406 78.961 cv
37.465 79.359 37.559 79.68 37.684 79.93 cv
37.809 80.18 37.969 80.363 38.172 80.477 cv
38.367 80.59 38.609 80.645 38.891 80.645 cv
39.109 80.645 39.301 80.609 39.469 80.539 cv
39.633 80.469 39.773 80.371 39.895 80.238 cv
40.012 80.109 40.113 79.949 40.191 79.766 cv
40.27 79.586 40.332 79.383 40.379 79.156 cv
40.426 78.934 40.457 78.695 40.473 78.434 cv
40.488 78.176 40.496 77.902 40.5 77.621 cv
cp
f
20.621 16.898 mo
41.891 16.898 li
41.891 31.55 li
20.621 31.55 li
cp
0 0 0 0 cmyk
ef
26.07 27.922 mo
26.066 27.996 26.063 28.059 26.055 28.109 cv
26.043 28.164 26.027 28.207 26.008 28.234 cv
25.984 28.27 25.961 28.293 25.938 28.301 cv
25.914 28.316 25.887 28.32 25.859 28.32 cv
21.898 28.32 li
21.871 28.32 21.848 28.316 21.824 28.301 cv
21.801 28.293 21.777 28.27 21.758 28.234 cv
21.734 28.207 21.719 28.164 21.707 28.109 cv
21.691 28.059 21.684 27.996 21.688 27.922 cv
21.684 27.852 21.691 27.793 21.707 27.742 cv
21.719 27.691 21.73 27.648 21.75 27.613 cv
21.766 27.582 21.789 27.559 21.813 27.539 cv
21.836 27.523 21.863 27.512 21.898 27.512 cv
23.484 27.512 li
23.484 21.746 li
22.016 22.617 li
21.941 22.664 21.883 22.687 21.84 22.691 cv
21.793 22.703 21.758 22.695 21.73 22.664 cv
21.699 22.641 21.68 22.598 21.672 22.539 cv
21.664 22.48 21.66 22.406 21.66 22.312 cv
21.66 22.25 21.66 22.191 21.668 22.145 cv
21.672 22.098 21.684 22.059 21.695 22.027 cv
21.703 21.996 21.719 21.969 21.742 21.945 cv
21.766 21.922 21.793 21.898 21.828 21.875 cv
23.578 20.758 li
23.59 20.746 23.609 20.734 23.637 20.727 cv
23.656 20.719 23.688 20.711 23.723 20.703 cv
23.754 20.695 23.793 20.691 23.844 20.691 cv
23.887 20.691 23.945 20.691 24.023 20.687 cv
24.113 20.691 24.191 20.695 24.258 20.699 cv
24.316 20.711 24.367 20.723 24.402 20.73 cv
24.434 20.746 24.457 20.762 24.473 20.781 cv
24.484 20.805 24.488 20.828 24.492 20.852 cv
24.492 27.512 li
25.859 27.512 li
25.887 27.512 25.918 27.523 25.949 27.539 cv
25.977 27.559 25.996 27.582 26.016 27.613 cv
26.031 27.648 26.047 27.691 26.055 27.742 cv
26.063 27.793 26.066 27.852 26.07 27.922 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.078 26.152 mo
32.078 26.5 32.016 26.816 31.895 27.094 cv
31.773 27.375 31.602 27.613 31.375 27.812 cv
31.148 28.012 30.867 28.164 30.535 28.27 cv
30.203 28.375 29.828 28.426 29.41 28.43 cv
29.156 28.426 28.918 28.406 28.699 28.367 cv
28.477 28.328 28.281 28.281 28.113 28.227 cv
27.938 28.172 27.797 28.113 27.684 28.051 cv
27.566 27.988 27.492 27.945 27.469 27.918 cv
27.438 27.891 27.418 27.863 27.402 27.836 cv
27.387 27.809 27.371 27.773 27.359 27.734 cv
27.348 27.695 27.34 27.648 27.332 27.594 cv
27.324 27.539 27.32 27.469 27.324 27.383 cv
27.32 27.242 27.336 27.145 27.367 27.09 cv
27.395 27.035 27.434 27.008 27.488 27.008 cv
27.523 27.008 27.594 27.039 27.699 27.102 cv
27.805 27.164 27.941 27.234 28.109 27.305 cv
28.273 27.383 28.469 27.449 28.691 27.508 cv
28.914 27.574 29.16 27.605 29.438 27.602 cv
29.695 27.605 29.93 27.57 30.133 27.5 cv
30.332 27.434 30.5 27.34 30.637 27.219 cv
30.773 27.102 30.875 26.961 30.945 26.789 cv
31.012 26.625 31.047 26.441 31.047 26.246 cv
31.047 26.031 31 25.84 30.914 25.664 cv
30.824 25.496 30.699 25.348 30.535 25.219 cv
30.367 25.098 30.16 25 29.918 24.934 cv
29.668 24.871 29.391 24.84 29.086 24.836 cv
28.344 24.836 li
28.309 24.84 28.277 24.832 28.246 24.816 cv
28.215 24.801 28.188 24.777 28.168 24.746 cv
28.145 24.715 28.125 24.676 28.113 24.625 cv
28.098 24.574 28.094 24.508 28.094 24.422 cv
28.094 24.352 28.098 24.289 28.109 24.238 cv
28.121 24.191 28.137 24.152 28.16 24.121 cv
28.176 24.094 28.203 24.074 28.234 24.059 cv
28.262 24.051 28.293 24.043 28.328 24.039 cv
28.988 24.039 li
29.246 24.043 29.477 24.008 29.684 23.937 cv
29.887 23.871 30.063 23.777 30.203 23.648 cv
30.344 23.527 30.453 23.379 30.531 23.203 cv
30.609 23.031 30.648 22.836 30.648 22.617 cv
30.648 22.465 30.621 22.316 30.57 22.172 cv
30.52 22.031 30.445 21.906 30.344 21.801 cv
30.242 21.695 30.109 21.613 29.953 21.551 cv
29.789 21.496 29.609 21.465 29.406 21.461 cv
29.18 21.465 28.969 21.5 28.781 21.562 cv
28.586 21.633 28.418 21.703 28.273 21.781 cv
28.121 21.859 28 21.934 27.906 22 cv
27.809 22.07 27.738 22.105 27.699 22.102 cv
27.672 22.105 27.648 22.102 27.629 22.09 cv
27.605 22.082 27.586 22.062 27.574 22.031 cv
27.559 22.004 27.551 21.961 27.543 21.906 cv
27.535 21.855 27.531 21.785 27.535 21.699 cv
27.531 21.641 27.535 21.59 27.543 21.543 cv
27.547 21.5 27.555 21.461 27.566 21.426 cv
27.574 21.395 27.586 21.363 27.605 21.336 cv
27.617 21.312 27.645 21.281 27.684 21.242 cv
27.723 21.203 27.797 21.148 27.91 21.078 cv
28.023 21.008 28.164 20.941 28.332 20.871 cv
28.496 20.805 28.688 20.746 28.906 20.695 cv
29.121 20.652 29.355 20.629 29.605 20.625 cv
29.957 20.629 30.266 20.672 30.531 20.762 cv
30.797 20.855 31.016 20.984 31.195 21.145 cv
31.371 21.312 31.504 21.508 31.594 21.734 cv
31.68 21.961 31.727 22.215 31.727 22.492 cv
31.727 22.73 31.695 22.953 31.633 23.156 cv
31.57 23.363 31.477 23.543 31.355 23.699 cv
31.234 23.859 31.086 23.996 30.91 24.105 cv
30.734 24.223 30.531 24.297 30.301 24.336 cv
30.301 24.348 li
30.563 24.379 30.801 24.445 31.02 24.547 cv
31.234 24.648 31.422 24.777 31.582 24.934 cv
31.734 25.09 31.855 25.273 31.945 25.484 cv
32.031 25.695 32.078 25.918 32.078 26.152 cv
cp
f
34.906 27.68 mo
34.906 27.961 34.859 28.145 34.766 28.238 cv
34.672 28.328 34.504 28.371 34.27 28.375 cv
34.031 28.371 33.871 28.328 33.781 28.238 cv
33.688 28.148 33.641 27.969 33.645 27.699 cv
33.641 27.422 33.688 27.238 33.781 27.145 cv
33.875 27.055 34.043 27.008 34.285 27.008 cv
34.52 27.008 34.68 27.055 34.77 27.145 cv
34.859 27.234 34.906 27.414 34.906 27.68 cv
cp
f
41.246 25.883 mo
41.246 26.289 41.176 26.652 41.039 26.969 cv
40.902 27.285 40.711 27.551 40.461 27.77 cv
40.211 27.988 39.91 28.152 39.566 28.262 cv
39.215 28.371 38.832 28.426 38.414 28.43 cv
38.176 28.426 37.953 28.41 37.746 28.379 cv
37.531 28.348 37.344 28.309 37.184 28.262 cv
37.016 28.215 36.883 28.168 36.781 28.117 cv
36.676 28.074 36.605 28.035 36.578 28.004 cv
36.547 27.977 36.527 27.953 36.516 27.926 cv
36.504 27.906 36.492 27.879 36.484 27.844 cv
36.469 27.812 36.465 27.77 36.465 27.719 cv
36.461 27.668 36.457 27.605 36.461 27.535 cv
36.457 27.473 36.461 27.414 36.469 27.359 cv
36.473 27.305 36.484 27.262 36.5 27.23 cv
36.516 27.199 36.531 27.176 36.555 27.156 cv
36.57 27.145 36.598 27.137 36.629 27.133 cv
36.668 27.137 36.727 27.16 36.809 27.207 cv
36.891 27.254 37 27.309 37.141 27.363 cv
37.277 27.422 37.449 27.473 37.656 27.523 cv
37.859 27.578 38.105 27.605 38.387 27.602 cv
38.648 27.605 38.887 27.574 39.109 27.508 cv
39.324 27.449 39.512 27.352 39.672 27.215 cv
39.828 27.086 39.953 26.918 40.043 26.715 cv
40.133 26.512 40.18 26.266 40.18 25.977 cv
40.18 25.734 40.141 25.523 40.066 25.336 cv
39.988 25.152 39.871 24.996 39.715 24.871 cv
39.555 24.75 39.355 24.66 39.113 24.598 cv
38.871 24.543 38.582 24.512 38.246 24.508 cv
38.008 24.512 37.801 24.523 37.633 24.543 cv
37.457 24.57 37.297 24.582 37.148 24.578 cv
37.035 24.582 36.957 24.555 36.914 24.5 cv
36.863 24.449 36.84 24.352 36.844 24.207 cv
36.844 21.117 li
36.84 20.992 36.871 20.895 36.934 20.832 cv
36.996 20.77 37.082 20.738 37.195 20.738 cv
40.555 20.738 li
40.586 20.738 40.613 20.75 40.645 20.766 cv
40.668 20.785 40.695 20.809 40.719 20.844 cv
40.738 20.883 40.75 20.93 40.762 20.98 cv
40.77 21.039 40.777 21.102 40.777 21.172 cv
40.777 21.312 40.758 21.422 40.719 21.5 cv
40.68 21.578 40.625 21.617 40.563 21.617 cv
37.852 21.617 li
37.852 23.742 li
37.98 23.727 38.117 23.715 38.258 23.711 cv
38.395 23.707 38.551 23.703 38.734 23.703 cv
39.148 23.703 39.516 23.758 39.828 23.859 cv
40.141 23.969 40.398 24.113 40.609 24.301 cv
40.816 24.488 40.977 24.719 41.086 24.988 cv
41.191 25.258 41.246 25.555 41.246 25.883 cv
cp
f
55.418 520.953 mo
55.414 521.027 55.41 521.09 55.402 521.141 cv
55.391 521.195 55.375 521.238 55.355 521.266 cv
55.332 521.301 55.309 521.324 55.285 521.332 cv
55.262 521.348 55.234 521.352 55.207 521.352 cv
51.246 521.352 li
51.219 521.352 51.195 521.348 51.172 521.332 cv
51.148 521.324 51.125 521.301 51.105 521.266 cv
51.082 521.238 51.066 521.195 51.055 521.141 cv
51.039 521.09 51.031 521.027 51.035 520.953 cv
51.031 520.883 51.039 520.824 51.055 520.773 cv
51.066 520.723 51.078 520.68 51.098 520.645 cv
51.113 520.613 51.137 520.59 51.16 520.57 cv
51.184 520.555 51.211 520.543 51.246 520.543 cv
52.832 520.543 li
52.832 514.777 li
51.363 515.648 li
51.289 515.695 51.23 515.719 51.188 515.723 cv
51.141 515.734 51.105 515.727 51.078 515.695 cv
51.047 515.672 51.027 515.629 51.02 515.57 cv
51.012 515.512 51.008 515.437 51.008 515.344 cv
51.008 515.281 51.008 515.223 51.016 515.176 cv
51.02 515.129 51.031 515.09 51.043 515.059 cv
51.051 515.027 51.066 515 51.09 514.977 cv
51.113 514.953 51.141 514.93 51.176 514.906 cv
52.926 513.789 li
52.938 513.777 52.957 513.766 52.984 513.758 cv
53.004 513.75 53.035 513.742 53.07 513.734 cv
53.102 513.727 53.141 513.723 53.191 513.723 cv
53.234 513.723 53.293 513.723 53.371 513.719 cv
53.461 513.723 53.539 513.727 53.605 513.73 cv
53.664 513.742 53.715 513.754 53.75 513.762 cv
53.781 513.777 53.805 513.793 53.82 513.812 cv
53.832 513.836 53.836 513.859 53.84 513.883 cv
53.84 520.543 li
55.207 520.543 li
55.234 520.543 55.266 520.555 55.297 520.57 cv
55.324 520.59 55.344 520.613 55.363 520.645 cv
55.379 520.68 55.395 520.723 55.402 520.773 cv
55.41 520.824 55.414 520.883 55.418 520.953 cv
cp
f
125.313 520.918 mo
125.313 520.988 125.305 521.051 125.297 521.105 cv
125.281 521.16 125.27 521.207 125.254 521.242 cv
125.238 521.281 125.215 521.309 125.184 521.324 cv
125.152 521.344 125.121 521.352 125.09 521.352 cv
120.898 521.352 li
120.844 521.352 120.797 521.348 120.758 521.332 cv
120.715 521.324 120.68 521.301 120.652 521.266 cv
120.621 521.238 120.598 521.191 120.586 521.129 cv
120.57 521.07 120.566 521 120.566 520.914 cv
120.566 520.84 120.566 520.77 120.574 520.707 cv
120.578 520.648 120.594 520.598 120.613 520.551 cv
120.633 520.508 120.656 520.465 120.688 520.418 cv
120.715 520.379 120.754 520.328 120.809 520.273 cv
122.324 518.715 li
122.672 518.355 122.949 518.035 123.164 517.75 cv
123.375 517.465 123.539 517.203 123.656 516.969 cv
123.766 516.734 123.844 516.523 123.883 516.332 cv
123.918 516.141 123.934 515.961 123.938 515.789 cv
123.934 515.625 123.906 515.465 123.852 515.312 cv
123.793 515.164 123.711 515.031 123.605 514.918 cv
123.496 514.809 123.363 514.719 123.203 514.648 cv
123.039 514.582 122.852 514.551 122.648 514.547 cv
122.398 514.551 122.18 514.582 121.984 514.648 cv
121.789 514.719 121.617 514.793 121.469 514.867 cv
121.32 514.949 121.195 515.02 121.102 515.082 cv
121 515.148 120.93 515.184 120.883 515.18 cv
120.852 515.184 120.824 515.176 120.805 515.156 cv
120.781 515.145 120.762 515.117 120.75 515.082 cv
120.734 515.051 120.727 515.004 120.719 514.941 cv
120.711 514.883 120.707 514.812 120.707 514.73 cv
120.707 514.672 120.707 514.621 120.711 514.578 cv
120.715 514.539 120.723 514.504 120.734 514.469 cv
120.742 514.441 120.754 514.41 120.773 514.379 cv
120.785 514.352 120.816 514.32 120.867 514.277 cv
120.91 514.238 120.992 514.18 121.109 514.109 cv
121.223 514.039 121.367 513.973 121.543 513.902 cv
121.715 513.836 121.906 513.777 122.117 513.727 cv
122.324 513.684 122.543 513.66 122.773 513.656 cv
123.141 513.66 123.461 513.711 123.738 513.812 cv
124.012 513.918 124.242 514.059 124.422 514.238 cv
124.602 514.418 124.738 514.629 124.832 514.867 cv
124.922 515.105 124.965 515.359 124.969 515.625 cv
124.965 515.875 124.945 516.117 124.902 516.352 cv
124.855 516.594 124.762 516.852 124.629 517.129 cv
124.488 517.41 124.289 517.723 124.027 518.062 cv
123.766 518.406 123.418 518.797 122.984 519.242 cv
121.785 520.496 li
125.086 520.496 li
125.113 520.496 125.145 520.508 125.176 520.523 cv
125.203 520.543 125.227 520.566 125.25 520.602 cv
125.266 520.641 125.281 520.687 125.297 520.734 cv
125.305 520.789 125.313 520.848 125.313 520.918 cv
cp
f
195.555 519.195 mo
195.551 519.328 195.531 519.43 195.496 519.5 cv
195.453 519.574 195.398 519.613 195.336 519.609 cv
194.477 519.609 li
194.477 521.203 li
194.473 521.238 194.465 521.266 194.453 521.285 cv
194.434 521.309 194.406 521.324 194.367 521.34 cv
194.328 521.355 194.273 521.367 194.211 521.375 cv
194.145 521.383 194.063 521.387 193.965 521.387 cv
193.863 521.387 193.785 521.383 193.723 521.375 cv
193.66 521.367 193.609 521.355 193.57 521.34 cv
193.531 521.324 193.504 521.309 193.488 521.285 cv
193.473 521.266 193.465 521.238 193.469 521.203 cv
193.469 519.609 li
190.367 519.609 li
190.32 519.613 190.285 519.605 190.254 519.594 cv
190.223 519.586 190.191 519.566 190.168 519.531 cv
190.137 519.504 190.121 519.457 190.113 519.395 cv
190.105 519.336 190.102 519.262 190.102 519.164 cv
190.102 519.094 190.102 519.027 190.105 518.969 cv
190.109 518.91 190.117 518.855 190.129 518.809 cv
190.141 518.762 190.156 518.715 190.176 518.668 cv
190.195 518.621 190.219 518.574 190.246 518.523 cv
192.949 513.914 li
192.969 513.887 192.996 513.859 193.035 513.832 cv
193.07 513.812 193.121 513.793 193.184 513.773 cv
193.242 513.762 193.313 513.75 193.402 513.742 cv
193.488 513.738 193.594 513.734 193.715 513.734 cv
193.844 513.734 193.957 513.742 194.055 513.75 cv
194.152 513.766 194.23 513.777 194.293 513.789 cv
194.348 513.809 194.395 513.828 194.43 513.852 cv
194.457 513.875 194.473 513.906 194.477 513.937 cv
194.477 518.781 li
195.336 518.781 li
195.398 518.785 195.453 518.82 195.492 518.883 cv
195.531 518.953 195.551 519.055 195.555 519.195 cv
cp
193.469 514.617 mo
193.461 514.617 li
191.023 518.781 li
193.469 518.781 li
cp
f
265.309 518.898 mo
265.305 519.23 265.254 519.551 265.156 519.863 cv
265.051 520.176 264.895 520.449 264.688 520.684 cv
264.473 520.918 264.207 521.109 263.883 521.25 cv
263.555 521.391 263.172 521.457 262.734 521.461 cv
262.418 521.457 262.137 521.422 261.898 521.344 cv
261.652 521.27 261.441 521.156 261.266 521.012 cv
261.082 520.871 260.934 520.695 260.816 520.48 cv
260.695 520.273 260.598 520.031 260.527 519.758 cv
260.449 519.488 260.398 519.195 260.371 518.871 cv
260.336 518.555 260.32 518.211 260.324 517.844 cv
260.32 517.52 260.34 517.191 260.379 516.859 cv
260.414 516.527 260.477 516.207 260.566 515.898 cv
260.652 515.59 260.773 515.301 260.93 515.027 cv
261.086 514.758 261.277 514.52 261.512 514.316 cv
261.742 514.117 262.023 513.957 262.348 513.84 cv
262.668 513.723 263.043 513.664 263.48 513.664 cv
263.621 513.664 263.77 513.676 263.918 513.691 cv
264.066 513.715 264.203 513.738 264.328 513.762 cv
264.453 513.793 264.559 513.824 264.645 513.859 cv
264.73 513.895 264.785 513.922 264.813 513.945 cv
264.84 513.969 264.859 513.992 264.875 514.016 cv
264.883 514.039 264.895 514.066 264.906 514.098 cv
264.91 514.129 264.918 514.164 264.926 514.195 cv
264.93 514.234 264.93 514.277 264.934 514.332 cv
264.93 514.402 264.93 514.465 264.93 514.516 cv
264.926 514.566 264.918 514.605 264.906 514.637 cv
264.891 514.668 264.871 514.691 264.852 514.707 cv
264.828 514.723 264.801 514.73 264.77 514.73 cv
264.723 514.73 264.664 514.719 264.59 514.691 cv
264.516 514.664 264.426 514.633 264.32 514.598 cv
264.215 514.566 264.086 514.535 263.938 514.508 cv
263.785 514.484 263.613 514.473 263.414 514.469 cv
263.051 514.473 262.738 514.547 262.477 514.691 cv
262.211 514.844 261.996 515.043 261.832 515.289 cv
261.668 515.543 261.543 515.832 261.465 516.16 cv
261.383 516.488 261.34 516.832 261.328 517.191 cv
261.43 517.133 261.543 517.074 261.672 517.016 cv
261.797 516.961 261.934 516.91 262.086 516.859 cv
262.234 516.816 262.395 516.777 262.563 516.746 cv
262.73 516.715 262.91 516.699 263.105 516.699 cv
263.512 516.699 263.859 516.758 264.141 516.867 cv
264.422 516.98 264.648 517.133 264.82 517.328 cv
264.992 517.527 265.117 517.762 265.195 518.027 cv
265.27 518.301 265.305 518.59 265.309 518.898 cv
cp
264.285 518.992 mo
264.281 518.766 264.258 518.559 264.219 518.371 cv
264.172 518.187 264.098 518.031 263.992 517.902 cv
263.887 517.773 263.746 517.672 263.57 517.602 cv
263.395 517.531 263.18 517.496 262.922 517.496 cv
262.777 517.496 262.633 517.512 262.488 517.535 cv
262.34 517.562 262.199 517.598 262.066 517.641 cv
261.934 517.687 261.805 517.738 261.68 517.801 cv
261.555 517.863 261.441 517.93 261.348 517.992 cv
261.344 518.5 261.375 518.922 261.441 519.262 cv
261.504 519.602 261.598 519.875 261.723 520.078 cv
261.844 520.285 262 520.43 262.184 520.516 cv
262.363 520.605 262.578 520.648 262.828 520.648 cv
263.078 520.648 263.293 520.602 263.477 520.508 cv
263.66 520.414 263.813 520.289 263.934 520.129 cv
264.055 519.973 264.145 519.797 264.199 519.598 cv
264.254 519.402 264.281 519.199 264.285 518.992 cv
cp
f
335.211 519.406 mo
335.211 519.734 335.152 520.027 335.035 520.281 cv
334.918 520.539 334.746 520.754 334.527 520.93 cv
334.305 521.109 334.035 521.242 333.711 521.328 cv
333.383 521.414 333.012 521.457 332.598 521.461 cv
332.207 521.457 331.855 521.418 331.547 521.34 cv
331.238 521.262 330.977 521.141 330.762 520.977 cv
330.547 520.816 330.383 520.621 330.27 520.383 cv
330.156 520.152 330.102 519.883 330.102 519.582 cv
330.102 519.348 330.141 519.129 330.219 518.926 cv
330.297 518.727 330.406 518.543 330.555 518.375 cv
330.699 518.211 330.883 518.055 331.098 517.906 cv
331.309 517.758 331.551 517.617 331.824 517.484 cv
331.59 517.367 331.383 517.242 331.203 517.102 cv
331.023 516.969 330.871 516.82 330.746 516.66 cv
330.621 516.504 330.523 516.336 330.461 516.152 cv
330.391 515.977 330.359 515.781 330.363 515.57 cv
330.359 515.309 330.406 515.059 330.508 514.824 cv
330.602 514.59 330.746 514.387 330.941 514.215 cv
331.129 514.043 331.375 513.91 331.68 513.809 cv
331.977 513.711 332.328 513.66 332.727 513.656 cv
333.109 513.66 333.438 513.707 333.719 513.797 cv
333.992 513.891 334.223 514.016 334.41 514.172 cv
334.59 514.332 334.727 514.516 334.813 514.73 cv
334.898 514.949 334.941 515.18 334.941 515.422 cv
334.941 515.621 334.906 515.812 334.844 515.996 cv
334.773 516.184 334.68 516.359 334.559 516.52 cv
334.43 516.687 334.277 516.84 334.098 516.98 cv
333.918 517.121 333.711 517.254 333.477 517.379 cv
333.754 517.52 334 517.66 334.219 517.801 cv
334.434 517.945 334.613 518.102 334.762 518.266 cv
334.902 518.434 335.016 518.609 335.094 518.793 cv
335.172 518.98 335.211 519.184 335.211 519.406 cv
cp
333.945 515.516 mo
333.945 515.352 333.914 515.203 333.859 515.07 cv
333.801 514.937 333.719 514.824 333.613 514.73 cv
333.5 514.637 333.363 514.566 333.203 514.52 cv
333.039 514.473 332.855 514.449 332.652 514.445 cv
332.227 514.449 331.906 514.543 331.691 514.73 cv
331.473 514.922 331.367 515.184 331.367 515.516 cv
331.367 515.668 331.391 515.812 331.445 515.941 cv
331.496 516.074 331.578 516.195 331.691 516.312 cv
331.801 516.43 331.941 516.547 332.113 516.656 cv
332.281 516.77 332.484 516.883 332.723 517.004 cv
333.113 516.801 333.418 516.578 333.629 516.332 cv
333.84 516.086 333.945 515.812 333.945 515.516 cv
cp
334.191 519.512 mo
334.191 519.332 334.156 519.172 334.09 519.023 cv
334.023 518.883 333.922 518.746 333.789 518.613 cv
333.652 518.488 333.484 518.363 333.285 518.242 cv
333.082 518.125 332.852 518 332.586 517.871 cv
332.336 517.996 332.117 518.117 331.938 518.234 cv
331.75 518.355 331.598 518.48 331.48 518.609 cv
331.355 518.742 331.266 518.879 331.211 519.02 cv
331.148 519.16 331.121 519.316 331.121 519.488 cv
331.121 519.867 331.25 520.16 331.512 520.367 cv
331.77 520.578 332.156 520.684 332.676 520.68 cv
333.172 520.684 333.551 520.578 333.809 520.367 cv
334.063 520.156 334.191 519.871 334.191 519.512 cv
cp
f
401.91 520.953 mo
401.906 521.027 401.902 521.09 401.895 521.141 cv
401.883 521.195 401.867 521.238 401.848 521.266 cv
401.824 521.301 401.801 521.324 401.777 521.332 cv
401.754 521.348 401.727 521.352 401.699 521.352 cv
397.738 521.352 li
397.711 521.352 397.688 521.348 397.664 521.332 cv
397.641 521.324 397.617 521.301 397.598 521.266 cv
397.574 521.238 397.559 521.195 397.547 521.141 cv
397.531 521.09 397.523 521.027 397.527 520.953 cv
397.523 520.883 397.531 520.824 397.547 520.773 cv
397.559 520.723 397.57 520.68 397.59 520.645 cv
397.605 520.613 397.629 520.59 397.652 520.57 cv
397.676 520.555 397.703 520.543 397.738 520.543 cv
399.324 520.543 li
399.324 514.777 li
397.855 515.648 li
397.781 515.695 397.723 515.719 397.68 515.723 cv
397.633 515.734 397.598 515.727 397.57 515.695 cv
397.539 515.672 397.52 515.629 397.512 515.57 cv
397.504 515.512 397.5 515.437 397.5 515.344 cv
397.5 515.281 397.5 515.223 397.508 515.176 cv
397.512 515.129 397.523 515.09 397.535 515.059 cv
397.543 515.027 397.559 515 397.582 514.977 cv
397.605 514.953 397.633 514.93 397.668 514.906 cv
399.418 513.789 li
399.43 513.777 399.449 513.766 399.477 513.758 cv
399.496 513.75 399.527 513.742 399.563 513.734 cv
399.594 513.727 399.633 513.723 399.684 513.723 cv
399.727 513.723 399.785 513.723 399.863 513.719 cv
399.953 513.723 400.031 513.727 400.098 513.73 cv
400.156 513.742 400.207 513.754 400.242 513.762 cv
400.273 513.777 400.297 513.793 400.313 513.812 cv
400.324 513.836 400.328 513.859 400.332 513.883 cv
400.332 520.543 li
401.699 520.543 li
401.727 520.543 401.758 520.555 401.789 520.57 cv
401.816 520.59 401.836 520.613 401.855 520.645 cv
401.871 520.68 401.887 520.723 401.895 520.773 cv
401.902 520.824 401.906 520.883 401.91 520.953 cv
cp
f
408.266 517.543 mo
408.262 518.125 408.215 518.656 408.129 519.137 cv
408.035 519.621 407.883 520.035 407.672 520.379 cv
407.453 520.723 407.176 520.992 406.836 521.18 cv
406.488 521.367 406.066 521.457 405.566 521.461 cv
405.09 521.457 404.688 521.375 404.363 521.207 cv
404.035 521.039 403.773 520.789 403.574 520.457 cv
403.371 520.129 403.227 519.723 403.148 519.238 cv
403.063 518.758 403.023 518.203 403.023 517.578 cv
403.023 517 403.07 516.473 403.164 515.988 cv
403.258 515.512 403.41 515.098 403.621 514.746 cv
403.832 514.402 404.109 514.133 404.453 513.941 cv
404.797 513.754 405.219 513.66 405.719 513.656 cv
406.195 513.66 406.598 513.746 406.926 513.914 cv
407.254 514.086 407.516 514.336 407.715 514.664 cv
407.914 514.996 408.055 515.402 408.141 515.883 cv
408.219 516.367 408.262 516.918 408.266 517.543 cv
cp
407.234 517.613 mo
407.23 517.238 407.219 516.898 407.195 516.594 cv
407.168 516.293 407.125 516.027 407.074 515.797 cv
407.02 515.57 406.953 515.375 406.867 515.203 cv
406.781 515.039 406.68 514.902 406.566 514.793 cv
406.445 514.691 406.313 514.613 406.164 514.559 cv
406.016 514.512 405.848 514.484 405.66 514.484 cv
405.328 514.484 405.059 514.562 404.852 514.719 cv
404.641 514.875 404.477 515.09 404.359 515.363 cv
404.242 515.637 404.16 515.957 404.117 516.324 cv
404.074 516.691 404.055 517.086 404.055 517.508 cv
404.055 518.078 404.082 518.562 404.141 518.953 cv
404.199 519.352 404.293 519.672 404.418 519.922 cv
404.543 520.172 404.703 520.355 404.906 520.469 cv
405.102 520.582 405.344 520.637 405.625 520.637 cv
405.844 520.637 406.035 520.602 406.203 520.531 cv
406.367 520.461 406.508 520.363 406.629 520.23 cv
406.746 520.102 406.848 519.941 406.926 519.758 cv
407.004 519.578 407.066 519.375 407.113 519.148 cv
407.16 518.926 407.191 518.687 407.207 518.426 cv
407.223 518.168 407.23 517.895 407.234 517.613 cv
cp
f
471.82 520.953 mo
471.816 521.027 471.813 521.09 471.805 521.141 cv
471.793 521.195 471.777 521.238 471.758 521.266 cv
471.734 521.301 471.711 521.324 471.688 521.332 cv
471.664 521.348 471.637 521.352 471.609 521.352 cv
467.648 521.352 li
467.621 521.352 467.598 521.348 467.574 521.332 cv
467.551 521.324 467.527 521.301 467.508 521.266 cv
467.484 521.238 467.469 521.195 467.457 521.141 cv
467.441 521.09 467.434 521.027 467.438 520.953 cv
467.434 520.883 467.441 520.824 467.457 520.773 cv
467.469 520.723 467.48 520.68 467.5 520.645 cv
467.516 520.613 467.539 520.59 467.563 520.57 cv
467.586 520.555 467.613 520.543 467.648 520.543 cv
469.234 520.543 li
469.234 514.777 li
467.766 515.648 li
467.691 515.695 467.633 515.719 467.59 515.723 cv
467.543 515.734 467.508 515.727 467.48 515.695 cv
467.449 515.672 467.43 515.629 467.422 515.57 cv
467.414 515.512 467.41 515.437 467.41 515.344 cv
467.41 515.281 467.41 515.223 467.418 515.176 cv
467.422 515.129 467.434 515.09 467.445 515.059 cv
467.453 515.027 467.469 515 467.492 514.977 cv
467.516 514.953 467.543 514.93 467.578 514.906 cv
469.328 513.789 li
469.34 513.777 469.359 513.766 469.387 513.758 cv
469.406 513.75 469.438 513.742 469.473 513.734 cv
469.504 513.727 469.543 513.723 469.594 513.723 cv
469.637 513.723 469.695 513.723 469.773 513.719 cv
469.863 513.723 469.941 513.727 470.008 513.73 cv
470.066 513.742 470.117 513.754 470.152 513.762 cv
470.184 513.777 470.207 513.793 470.223 513.812 cv
470.234 513.836 470.238 513.859 470.242 513.883 cv
470.242 520.543 li
471.609 520.543 li
471.637 520.543 471.668 520.555 471.699 520.57 cv
471.727 520.59 471.746 520.613 471.766 520.645 cv
471.781 520.68 471.797 520.723 471.805 520.773 cv
471.813 520.824 471.816 520.883 471.82 520.953 cv
cp
f
477.926 520.918 mo
477.926 520.988 477.918 521.051 477.91 521.105 cv
477.895 521.16 477.883 521.207 477.867 521.242 cv
477.852 521.281 477.828 521.309 477.797 521.324 cv
477.766 521.344 477.734 521.352 477.703 521.352 cv
473.512 521.352 li
473.457 521.352 473.41 521.348 473.371 521.332 cv
473.328 521.324 473.293 521.301 473.266 521.266 cv
473.234 521.238 473.211 521.191 473.199 521.129 cv
473.184 521.07 473.18 521 473.18 520.914 cv
473.18 520.84 473.18 520.77 473.188 520.707 cv
473.191 520.648 473.207 520.598 473.227 520.551 cv
473.246 520.508 473.27 520.465 473.301 520.418 cv
473.328 520.379 473.367 520.328 473.422 520.273 cv
474.938 518.715 li
475.285 518.355 475.563 518.035 475.777 517.75 cv
475.988 517.465 476.152 517.203 476.27 516.969 cv
476.379 516.734 476.457 516.523 476.496 516.332 cv
476.531 516.141 476.547 515.961 476.551 515.789 cv
476.547 515.625 476.52 515.465 476.465 515.312 cv
476.406 515.164 476.324 515.031 476.219 514.918 cv
476.109 514.809 475.977 514.719 475.816 514.648 cv
475.652 514.582 475.465 514.551 475.262 514.547 cv
475.012 514.551 474.793 514.582 474.598 514.648 cv
474.402 514.719 474.23 514.793 474.082 514.867 cv
473.934 514.949 473.809 515.02 473.715 515.082 cv
473.613 515.148 473.543 515.184 473.496 515.18 cv
473.465 515.184 473.438 515.176 473.418 515.156 cv
473.395 515.145 473.375 515.117 473.363 515.082 cv
473.348 515.051 473.34 515.004 473.332 514.941 cv
473.324 514.883 473.32 514.812 473.32 514.73 cv
473.32 514.672 473.32 514.621 473.324 514.578 cv
473.328 514.539 473.336 514.504 473.348 514.469 cv
473.355 514.441 473.367 514.41 473.387 514.379 cv
473.398 514.352 473.43 514.32 473.48 514.277 cv
473.523 514.238 473.605 514.18 473.723 514.109 cv
473.836 514.039 473.98 513.973 474.156 513.902 cv
474.328 513.836 474.52 513.777 474.73 513.727 cv
474.938 513.684 475.156 513.66 475.387 513.656 cv
475.754 513.66 476.074 513.711 476.352 513.812 cv
476.625 513.918 476.855 514.059 477.035 514.238 cv
477.215 514.418 477.352 514.629 477.445 514.867 cv
477.535 515.105 477.578 515.359 477.582 515.625 cv
477.578 515.875 477.559 516.117 477.516 516.352 cv
477.469 516.594 477.375 516.852 477.242 517.129 cv
477.102 517.41 476.902 517.723 476.641 518.062 cv
476.379 518.406 476.031 518.797 475.598 519.242 cv
474.398 520.496 li
477.699 520.496 li
477.727 520.496 477.758 520.508 477.789 520.523 cv
477.816 520.543 477.84 520.566 477.863 520.602 cv
477.879 520.641 477.895 520.687 477.91 520.734 cv
477.918 520.789 477.926 520.848 477.926 520.918 cv
cp
f
541.73 520.953 mo
541.727 521.027 541.723 521.09 541.715 521.141 cv
541.703 521.195 541.688 521.238 541.668 521.266 cv
541.645 521.301 541.621 521.324 541.598 521.332 cv
541.574 521.348 541.547 521.352 541.52 521.352 cv
537.559 521.352 li
537.531 521.352 537.508 521.348 537.484 521.332 cv
537.461 521.324 537.438 521.301 537.418 521.266 cv
537.395 521.238 537.379 521.195 537.367 521.141 cv
537.352 521.09 537.344 521.027 537.348 520.953 cv
537.344 520.883 537.352 520.824 537.367 520.773 cv
537.379 520.723 537.391 520.68 537.41 520.645 cv
537.426 520.613 537.449 520.59 537.473 520.57 cv
537.496 520.555 537.523 520.543 537.559 520.543 cv
539.145 520.543 li
539.145 514.777 li
537.676 515.648 li
537.602 515.695 537.543 515.719 537.5 515.723 cv
537.453 515.734 537.418 515.727 537.391 515.695 cv
537.359 515.672 537.34 515.629 537.332 515.57 cv
537.324 515.512 537.32 515.437 537.32 515.344 cv
537.32 515.281 537.32 515.223 537.328 515.176 cv
537.332 515.129 537.344 515.09 537.355 515.059 cv
537.363 515.027 537.379 515 537.402 514.977 cv
537.426 514.953 537.453 514.93 537.488 514.906 cv
539.238 513.789 li
539.25 513.777 539.27 513.766 539.297 513.758 cv
539.316 513.75 539.348 513.742 539.383 513.734 cv
539.414 513.727 539.453 513.723 539.504 513.723 cv
539.547 513.723 539.605 513.723 539.684 513.719 cv
539.773 513.723 539.852 513.727 539.918 513.73 cv
539.977 513.742 540.027 513.754 540.063 513.762 cv
540.094 513.777 540.117 513.793 540.133 513.812 cv
540.145 513.836 540.148 513.859 540.152 513.883 cv
540.152 520.543 li
541.52 520.543 li
541.547 520.543 541.578 520.555 541.609 520.57 cv
541.637 520.59 541.656 520.613 541.676 520.645 cv
541.691 520.68 541.707 520.723 541.715 520.773 cv
541.723 520.824 541.727 520.883 541.73 520.953 cv
cp
f
548.156 519.195 mo
548.152 519.328 548.133 519.43 548.098 519.5 cv
548.055 519.574 548 519.613 547.938 519.609 cv
547.078 519.609 li
547.078 521.203 li
547.074 521.238 547.066 521.266 547.055 521.285 cv
547.035 521.309 547.008 521.324 546.969 521.34 cv
546.93 521.355 546.875 521.367 546.813 521.375 cv
546.746 521.383 546.664 521.387 546.566 521.387 cv
546.465 521.387 546.387 521.383 546.324 521.375 cv
546.262 521.367 546.211 521.355 546.172 521.34 cv
546.133 521.324 546.105 521.309 546.09 521.285 cv
546.074 521.266 546.066 521.238 546.07 521.203 cv
546.07 519.609 li
542.969 519.609 li
542.922 519.613 542.887 519.605 542.855 519.594 cv
542.824 519.586 542.793 519.566 542.77 519.531 cv
542.738 519.504 542.723 519.457 542.715 519.395 cv
542.707 519.336 542.703 519.262 542.703 519.164 cv
542.703 519.094 542.703 519.027 542.707 518.969 cv
542.711 518.91 542.719 518.855 542.73 518.809 cv
542.742 518.762 542.758 518.715 542.777 518.668 cv
542.797 518.621 542.82 518.574 542.848 518.523 cv
545.551 513.914 li
545.57 513.887 545.598 513.859 545.637 513.832 cv
545.672 513.812 545.723 513.793 545.785 513.773 cv
545.844 513.762 545.914 513.75 546.004 513.742 cv
546.09 513.738 546.195 513.734 546.316 513.734 cv
546.445 513.734 546.559 513.742 546.656 513.75 cv
546.754 513.766 546.832 513.777 546.895 513.789 cv
546.949 513.809 546.996 513.828 547.031 513.852 cv
547.059 513.875 547.074 513.906 547.078 513.937 cv
547.078 518.781 li
547.938 518.781 li
548 518.785 548.055 518.82 548.094 518.883 cv
548.133 518.953 548.152 519.055 548.156 519.195 cv
cp
546.07 514.617 mo
546.063 514.617 li
543.625 518.781 li
546.07 518.781 li
cp
f
611.621 520.953 mo
611.617 521.027 611.613 521.09 611.605 521.141 cv
611.594 521.195 611.578 521.238 611.559 521.266 cv
611.535 521.301 611.512 521.324 611.488 521.332 cv
611.465 521.348 611.438 521.352 611.41 521.352 cv
607.449 521.352 li
607.422 521.352 607.398 521.348 607.375 521.332 cv
607.352 521.324 607.328 521.301 607.309 521.266 cv
607.285 521.238 607.27 521.195 607.258 521.141 cv
607.242 521.09 607.234 521.027 607.238 520.953 cv
607.234 520.883 607.242 520.824 607.258 520.773 cv
607.27 520.723 607.281 520.68 607.301 520.645 cv
607.316 520.613 607.34 520.59 607.363 520.57 cv
607.387 520.555 607.414 520.543 607.449 520.543 cv
609.035 520.543 li
609.035 514.777 li
607.566 515.648 li
607.492 515.695 607.434 515.719 607.391 515.723 cv
607.344 515.734 607.309 515.727 607.281 515.695 cv
607.25 515.672 607.23 515.629 607.223 515.57 cv
607.215 515.512 607.211 515.437 607.211 515.344 cv
607.211 515.281 607.211 515.223 607.219 515.176 cv
607.223 515.129 607.234 515.09 607.246 515.059 cv
607.254 515.027 607.27 515 607.293 514.977 cv
607.316 514.953 607.344 514.93 607.379 514.906 cv
609.129 513.789 li
609.141 513.777 609.16 513.766 609.188 513.758 cv
609.207 513.75 609.238 513.742 609.273 513.734 cv
609.305 513.727 609.344 513.723 609.395 513.723 cv
609.438 513.723 609.496 513.723 609.574 513.719 cv
609.664 513.723 609.742 513.727 609.809 513.73 cv
609.867 513.742 609.918 513.754 609.953 513.762 cv
609.984 513.777 610.008 513.793 610.023 513.812 cv
610.035 513.836 610.039 513.859 610.043 513.883 cv
610.043 520.543 li
611.41 520.543 li
611.438 520.543 611.469 520.555 611.5 520.57 cv
611.527 520.59 611.547 520.613 611.566 520.645 cv
611.582 520.68 611.598 520.723 611.605 520.773 cv
611.613 520.824 611.617 520.883 611.621 520.953 cv
cp
f
617.918 518.898 mo
617.914 519.23 617.863 519.551 617.766 519.863 cv
617.66 520.176 617.504 520.449 617.297 520.684 cv
617.082 520.918 616.816 521.109 616.492 521.25 cv
616.164 521.391 615.781 521.457 615.344 521.461 cv
615.027 521.457 614.746 521.422 614.508 521.344 cv
614.262 521.27 614.051 521.156 613.875 521.012 cv
613.691 520.871 613.543 520.695 613.426 520.48 cv
613.305 520.273 613.207 520.031 613.137 519.758 cv
613.059 519.488 613.008 519.195 612.98 518.871 cv
612.945 518.555 612.93 518.211 612.934 517.844 cv
612.93 517.52 612.949 517.191 612.988 516.859 cv
613.023 516.527 613.086 516.207 613.176 515.898 cv
613.262 515.59 613.383 515.301 613.539 515.027 cv
613.695 514.758 613.887 514.52 614.121 514.316 cv
614.352 514.117 614.633 513.957 614.957 513.84 cv
615.277 513.723 615.652 513.664 616.09 513.664 cv
616.23 513.664 616.379 513.676 616.527 513.691 cv
616.676 513.715 616.813 513.738 616.938 513.762 cv
617.063 513.793 617.168 513.824 617.254 513.859 cv
617.34 513.895 617.395 513.922 617.422 513.945 cv
617.449 513.969 617.469 513.992 617.484 514.016 cv
617.492 514.039 617.504 514.066 617.516 514.098 cv
617.52 514.129 617.527 514.164 617.535 514.195 cv
617.539 514.234 617.539 514.277 617.543 514.332 cv
617.539 514.402 617.539 514.465 617.539 514.516 cv
617.535 514.566 617.527 514.605 617.516 514.637 cv
617.5 514.668 617.48 514.691 617.461 514.707 cv
617.438 514.723 617.41 514.73 617.379 514.73 cv
617.332 514.73 617.273 514.719 617.199 514.691 cv
617.125 514.664 617.035 514.633 616.93 514.598 cv
616.824 514.566 616.695 514.535 616.547 514.508 cv
616.395 514.484 616.223 514.473 616.023 514.469 cv
615.66 514.473 615.348 514.547 615.086 514.691 cv
614.82 514.844 614.605 515.043 614.441 515.289 cv
614.277 515.543 614.152 515.832 614.074 516.16 cv
613.992 516.488 613.949 516.832 613.938 517.191 cv
614.039 517.133 614.152 517.074 614.281 517.016 cv
614.406 516.961 614.543 516.91 614.695 516.859 cv
614.844 516.816 615.004 516.777 615.172 516.746 cv
615.34 516.715 615.52 516.699 615.715 516.699 cv
616.121 516.699 616.469 516.758 616.75 516.867 cv
617.031 516.98 617.258 517.133 617.43 517.328 cv
617.602 517.527 617.727 517.762 617.805 518.027 cv
617.879 518.301 617.914 518.59 617.918 518.898 cv
cp
616.895 518.992 mo
616.891 518.766 616.867 518.559 616.828 518.371 cv
616.781 518.187 616.707 518.031 616.602 517.902 cv
616.496 517.773 616.355 517.672 616.18 517.602 cv
616.004 517.531 615.789 517.496 615.531 517.496 cv
615.387 517.496 615.242 517.512 615.098 517.535 cv
614.949 517.562 614.809 517.598 614.676 517.641 cv
614.543 517.687 614.414 517.738 614.289 517.801 cv
614.164 517.863 614.051 517.93 613.957 517.992 cv
613.953 518.5 613.984 518.922 614.051 519.262 cv
614.113 519.602 614.207 519.875 614.332 520.078 cv
614.453 520.285 614.609 520.43 614.793 520.516 cv
614.973 520.605 615.188 520.648 615.438 520.648 cv
615.688 520.648 615.902 520.602 616.086 520.508 cv
616.27 520.414 616.422 520.289 616.543 520.129 cv
616.664 519.973 616.754 519.797 616.809 519.598 cv
616.863 519.402 616.891 519.199 616.895 518.992 cv
cp
f
16.957 319.395 mo
17 319.398 17.035 319.406 17.066 319.418 cv
17.098 319.437 17.125 319.473 17.145 319.52 cv
17.164 319.574 17.176 319.645 17.191 319.738 cv
17.199 319.832 17.207 319.957 17.207 320.113 cv
17.207 320.25 17.199 320.363 17.191 320.445 cv
17.176 320.531 17.164 320.598 17.141 320.648 cv
17.121 320.703 17.086 320.742 17.043 320.77 cv
17.004 320.801 16.953 320.828 16.887 320.844 cv
14.512 321.773 li
14.242 321.887 13.996 322 13.766 322.113 cv
13.543 322.23 13.348 322.367 13.184 322.527 cv
13.023 322.691 12.895 322.883 12.801 323.098 cv
12.711 323.32 12.668 323.582 12.664 323.883 cv
12.664 324.781 li
16.957 324.781 li
17 324.785 17.035 324.797 17.066 324.816 cv
17.098 324.844 17.125 324.879 17.141 324.926 cv
17.16 324.977 17.172 325.043 17.188 325.129 cv
17.199 325.215 17.207 325.324 17.207 325.449 cv
17.207 325.582 17.199 325.687 17.188 325.773 cv
17.172 325.859 17.16 325.93 17.141 325.98 cv
17.125 326.035 17.098 326.07 17.066 326.09 cv
17.035 326.113 17 326.125 16.957 326.121 cv
7.621 326.121 li
7.418 326.125 7.277 326.07 7.195 325.961 cv
7.117 325.855 7.078 325.742 7.074 325.621 cv
7.074 323.48 li
7.078 323.23 7.082 323.016 7.094 322.844 cv
7.109 322.676 7.125 322.523 7.137 322.387 cv
7.207 322 7.313 321.656 7.457 321.355 cv
7.605 321.059 7.793 320.809 8.012 320.605 cv
8.238 320.402 8.492 320.25 8.781 320.148 cv
9.07 320.047 9.391 319.996 9.734 319.996 cv
10.074 319.996 10.375 320.043 10.641 320.133 cv
10.91 320.227 11.148 320.359 11.352 320.527 cv
11.563 320.699 11.738 320.902 11.887 321.141 cv
12.035 321.383 12.164 321.652 12.266 321.945 cv
12.344 321.781 12.434 321.629 12.543 321.492 cv
12.656 321.359 12.793 321.234 12.945 321.113 cv
13.105 321 13.285 320.887 13.484 320.781 cv
13.688 320.68 13.914 320.578 14.168 320.469 cv
16.387 319.566 li
16.574 319.496 16.707 319.449 16.781 319.426 cv
16.859 319.41 16.918 319.398 16.957 319.395 cv
cp
9.875 321.414 mo
9.484 321.414 9.148 321.504 8.875 321.68 cv
8.602 321.859 8.406 322.156 8.285 322.566 cv
8.25 322.699 8.223 322.844 8.207 323.008 cv
8.191 323.172 8.184 323.387 8.184 323.648 cv
8.184 324.781 li
11.582 324.781 li
11.582 323.473 li
11.582 323.121 11.539 322.816 11.453 322.555 cv
11.367 322.301 11.25 322.086 11.094 321.914 cv
10.945 321.746 10.762 321.621 10.551 321.535 cv
10.344 321.457 10.121 321.414 9.875 321.414 cv
cp
f
16.965 311.594 mo
17.012 311.598 17.047 311.605 17.07 311.621 cv
17.102 311.641 17.125 311.676 17.145 311.719 cv
17.164 311.766 17.176 311.824 17.191 311.898 cv
17.199 311.977 17.207 312.07 17.207 312.176 cv
17.207 312.301 17.199 312.398 17.191 312.469 cv
17.176 312.547 17.164 312.605 17.145 312.648 cv
17.125 312.695 17.102 312.727 17.07 312.738 cv
17.047 312.758 17.012 312.766 16.965 312.762 cv
16.039 312.762 li
16.484 313.164 16.805 313.559 17.004 313.945 cv
17.207 314.34 17.305 314.734 17.309 315.129 cv
17.305 315.602 17.23 315.996 17.074 316.312 cv
16.922 316.633 16.711 316.891 16.441 317.086 cv
16.176 317.289 15.863 317.43 15.504 317.512 cv
15.148 317.602 14.715 317.645 14.207 317.641 cv
9.953 317.641 li
9.914 317.645 9.879 317.637 9.848 317.613 cv
9.82 317.598 9.797 317.562 9.77 317.508 cv
9.75 317.461 9.734 317.391 9.723 317.305 cv
9.719 317.223 9.715 317.121 9.711 316.992 cv
9.715 316.871 9.719 316.766 9.723 316.68 cv
9.734 316.598 9.75 316.531 9.77 316.484 cv
9.797 316.437 9.82 316.402 9.848 316.379 cv
9.879 316.359 9.914 316.352 9.953 316.348 cv
14.035 316.348 li
14.449 316.352 14.777 316.32 15.023 316.258 cv
15.27 316.199 15.48 316.109 15.652 315.984 cv
15.832 315.867 15.965 315.711 16.059 315.52 cv
16.156 315.336 16.207 315.117 16.203 314.867 cv
16.207 314.547 16.09 314.227 15.859 313.902 cv
15.633 313.586 15.297 313.246 14.852 312.887 cv
9.953 312.887 li
9.914 312.887 9.879 312.879 9.848 312.859 cv
9.82 312.844 9.797 312.809 9.77 312.754 cv
9.75 312.703 9.734 312.637 9.723 312.555 cv
9.719 312.477 9.715 312.371 9.711 312.238 cv
9.715 312.117 9.719 312.012 9.723 311.926 cv
9.734 311.844 9.75 311.781 9.77 311.734 cv
9.797 311.691 9.82 311.656 9.848 311.629 cv
9.879 311.609 9.914 311.598 9.953 311.594 cv
cp
f
16.965 303.184 mo
17.012 303.184 17.047 303.195 17.07 303.215 cv
17.102 303.238 17.125 303.273 17.145 303.316 cv
17.164 303.367 17.176 303.43 17.191 303.512 cv
17.199 303.594 17.207 303.699 17.207 303.82 cv
17.207 303.953 17.199 304.059 17.191 304.141 cv
17.176 304.227 17.164 304.293 17.145 304.336 cv
17.125 304.387 17.102 304.418 17.07 304.437 cv
17.047 304.461 17.012 304.473 16.965 304.469 cv
12.859 304.469 li
12.461 304.473 12.141 304.504 11.895 304.562 cv
11.652 304.629 11.441 304.719 11.262 304.836 cv
11.086 304.953 10.949 305.109 10.855 305.297 cv
10.762 305.492 10.715 305.711 10.715 305.957 cv
10.715 306.281 10.832 306.605 11.059 306.926 cv
11.293 307.25 11.625 307.586 12.063 307.937 cv
16.965 307.937 li
17.012 307.941 17.047 307.953 17.07 307.969 cv
17.102 307.992 17.125 308.023 17.145 308.07 cv
17.164 308.117 17.176 308.184 17.191 308.262 cv
17.199 308.348 17.207 308.453 17.207 308.582 cv
17.207 308.711 17.199 308.816 17.191 308.895 cv
17.176 308.98 17.164 309.047 17.145 309.094 cv
17.125 309.148 17.102 309.18 17.07 309.195 cv
17.047 309.215 17.012 309.227 16.965 309.223 cv
9.953 309.223 li
9.914 309.227 9.879 309.219 9.848 309.199 cv
9.82 309.187 9.797 309.156 9.77 309.105 cv
9.75 309.062 9.734 309 9.723 308.926 cv
9.719 308.855 9.715 308.762 9.711 308.637 cv
9.715 308.527 9.719 308.43 9.723 308.352 cv
9.734 308.277 9.75 308.219 9.77 308.176 cv
9.797 308.137 9.82 308.109 9.848 308.09 cv
9.879 308.074 9.914 308.066 9.953 308.062 cv
10.879 308.062 li
10.438 307.672 10.117 307.277 9.91 306.883 cv
9.707 306.492 9.602 306.094 9.602 305.691 cv
9.602 305.223 9.684 304.832 9.84 304.512 cv
10.004 304.195 10.215 303.934 10.477 303.734 cv
10.742 303.539 11.051 303.398 11.406 303.312 cv
11.762 303.227 12.191 303.184 12.688 303.184 cv
cp
f
16.449 297.309 mo
16.605 297.309 16.723 297.32 16.809 297.34 cv
16.898 297.363 16.965 297.395 17.004 297.434 cv
17.047 297.477 17.086 297.539 17.121 297.621 cv
17.156 297.707 17.184 297.801 17.211 297.906 cv
17.23 298.016 17.25 298.129 17.27 298.246 cv
17.281 298.363 17.289 298.484 17.293 298.602 cv
17.289 298.969 17.242 299.281 17.148 299.539 cv
17.055 299.801 16.91 300.012 16.711 300.176 cv
16.52 300.344 16.273 300.465 15.973 300.539 cv
15.676 300.617 15.324 300.656 14.914 300.652 cv
10.816 300.652 li
10.816 301.633 li
10.82 301.711 10.777 301.773 10.691 301.82 cv
10.609 301.867 10.477 301.891 10.285 301.891 cv
10.191 301.891 10.109 301.887 10.039 301.871 cv
9.977 301.863 9.918 301.844 9.871 301.82 cv
9.828 301.801 9.797 301.773 9.777 301.738 cv
9.762 301.707 9.754 301.672 9.75 301.625 cv
9.75 300.652 li
8.082 300.652 li
8.051 300.656 8.016 300.645 7.98 300.625 cv
7.953 300.609 7.926 300.578 7.898 300.523 cv
7.879 300.477 7.863 300.41 7.848 300.324 cv
7.84 300.246 7.832 300.141 7.832 300.012 cv
7.832 299.883 7.84 299.777 7.848 299.695 cv
7.863 299.613 7.879 299.547 7.898 299.5 cv
7.926 299.453 7.953 299.422 7.98 299.398 cv
8.016 299.383 8.051 299.371 8.082 299.367 cv
9.75 299.367 li
9.75 297.566 li
9.754 297.527 9.762 297.492 9.777 297.457 cv
9.797 297.43 9.828 297.402 9.871 297.375 cv
9.918 297.355 9.977 297.34 10.039 297.324 cv
10.109 297.316 10.191 297.309 10.285 297.309 cv
10.477 297.309 10.609 297.332 10.691 297.379 cv
10.777 297.426 10.82 297.488 10.816 297.566 cv
10.816 299.367 li
14.73 299.367 li
15.215 299.371 15.578 299.301 15.824 299.152 cv
16.074 299.012 16.199 298.754 16.195 298.383 cv
16.199 298.27 16.188 298.164 16.16 298.066 cv
16.141 297.977 16.117 297.895 16.086 297.816 cv
16.063 297.746 16.035 297.684 16.012 297.629 cv
15.988 297.582 15.977 297.535 15.977 297.488 cv
15.977 297.465 15.984 297.437 15.996 297.414 cv
16.012 297.391 16.035 297.375 16.07 297.359 cv
16.109 297.352 16.16 297.34 16.219 297.324 cv
16.285 297.316 16.363 297.309 16.449 297.309 cv
cp
f
16.965 294.293 mo
17.012 294.297 17.047 294.309 17.07 294.324 cv
17.102 294.348 17.125 294.379 17.145 294.426 cv
17.164 294.473 17.176 294.539 17.191 294.617 cv
17.199 294.703 17.207 294.809 17.207 294.937 cv
17.207 295.066 17.199 295.172 17.191 295.25 cv
17.176 295.336 17.164 295.402 17.145 295.449 cv
17.125 295.504 17.102 295.535 17.07 295.551 cv
17.047 295.57 17.012 295.582 16.965 295.578 cv
9.953 295.578 li
9.918 295.582 9.887 295.57 9.852 295.551 cv
9.824 295.535 9.797 295.504 9.773 295.449 cv
9.754 295.402 9.738 295.336 9.727 295.25 cv
9.719 295.172 9.715 295.066 9.711 294.937 cv
9.715 294.809 9.719 294.703 9.727 294.617 cv
9.738 294.539 9.754 294.473 9.773 294.426 cv
9.797 294.379 9.824 294.348 9.852 294.324 cv
9.887 294.309 9.918 294.297 9.953 294.293 cv
cp
7.582 294.145 mo
7.887 294.145 8.094 294.203 8.199 294.316 cv
8.313 294.43 8.367 294.641 8.363 294.945 cv
8.367 295.25 8.313 295.457 8.203 295.566 cv
8.098 295.684 7.895 295.738 7.598 295.734 cv
7.297 295.738 7.094 295.68 6.984 295.562 cv
6.879 295.449 6.824 295.238 6.82 294.93 cv
6.824 294.629 6.879 294.426 6.98 294.312 cv
7.09 294.203 7.289 294.145 7.582 294.145 cv
cp
f
16.965 281.469 mo
17.012 281.473 17.047 281.48 17.07 281.5 cv
17.102 281.523 17.125 281.559 17.145 281.602 cv
17.164 281.652 17.176 281.719 17.191 281.797 cv
17.199 281.883 17.207 281.984 17.207 282.109 cv
17.207 282.242 17.199 282.352 17.191 282.43 cv
17.176 282.516 17.164 282.582 17.145 282.629 cv
17.125 282.684 17.102 282.719 17.07 282.734 cv
17.047 282.758 17.012 282.766 16.965 282.766 cv
12.703 282.766 li
12.41 282.766 12.141 282.793 11.895 282.844 cv
11.652 282.898 11.441 282.98 11.262 283.094 cv
11.086 283.207 10.949 283.352 10.855 283.527 cv
10.762 283.707 10.715 283.918 10.715 284.152 cv
10.715 284.449 10.832 284.746 11.059 285.043 cv
11.293 285.348 11.625 285.676 12.063 286.031 cv
16.965 286.031 li
17.012 286.035 17.047 286.047 17.07 286.062 cv
17.102 286.086 17.125 286.117 17.145 286.164 cv
17.164 286.215 17.176 286.281 17.191 286.363 cv
17.199 286.449 17.207 286.555 17.207 286.676 cv
17.207 286.797 17.199 286.898 17.191 286.984 cv
17.176 287.07 17.164 287.141 17.145 287.187 cv
17.125 287.242 17.102 287.273 17.07 287.289 cv
17.047 287.309 17.012 287.32 16.965 287.316 cv
12.703 287.316 li
12.41 287.32 12.141 287.348 11.895 287.402 cv
11.652 287.461 11.441 287.547 11.262 287.66 cv
11.086 287.773 10.949 287.918 10.855 288.09 cv
10.762 288.27 10.715 288.477 10.715 288.711 cv
10.715 289.012 10.832 289.309 11.059 289.609 cv
11.293 289.91 11.625 290.238 12.063 290.59 cv
16.965 290.59 li
17.012 290.594 17.047 290.605 17.07 290.621 cv
17.102 290.645 17.125 290.676 17.145 290.723 cv
17.164 290.77 17.176 290.836 17.191 290.914 cv
17.199 291 17.207 291.105 17.207 291.234 cv
17.207 291.363 17.199 291.469 17.191 291.547 cv
17.176 291.633 17.164 291.699 17.145 291.746 cv
17.125 291.801 17.102 291.832 17.07 291.848 cv
17.047 291.867 17.012 291.879 16.965 291.875 cv
9.953 291.875 li
9.914 291.879 9.879 291.871 9.848 291.852 cv
9.82 291.84 9.797 291.809 9.77 291.758 cv
9.75 291.715 9.734 291.652 9.723 291.578 cv
9.719 291.508 9.715 291.414 9.711 291.289 cv
9.715 291.18 9.719 291.082 9.723 291.004 cv
9.734 290.93 9.75 290.871 9.77 290.828 cv
9.797 290.789 9.82 290.762 9.848 290.742 cv
9.879 290.727 9.914 290.719 9.953 290.715 cv
10.879 290.715 li
10.438 290.324 10.117 289.941 9.91 289.566 cv
9.707 289.199 9.602 288.82 9.602 288.437 cv
9.602 288.148 9.637 287.891 9.703 287.656 cv
9.773 287.43 9.867 287.223 9.988 287.043 cv
10.109 286.867 10.254 286.719 10.422 286.59 cv
10.594 286.469 10.785 286.363 10.988 286.277 cv
10.738 286.047 10.523 285.824 10.344 285.613 cv
10.172 285.402 10.027 285.199 9.914 285.004 cv
9.809 284.809 9.73 284.621 9.676 284.437 cv
9.629 284.254 9.602 284.066 9.602 283.879 cv
9.602 283.426 9.684 283.047 9.84 282.742 cv
10.004 282.437 10.215 282.191 10.477 281.996 cv
10.742 281.809 11.051 281.672 11.406 281.59 cv
11.762 281.512 12.137 281.473 12.531 281.469 cv
cp
f
13.156 273.137 mo
13.359 273.141 13.5 273.191 13.586 273.289 cv
13.672 273.395 13.715 273.512 13.715 273.637 cv
13.715 278.254 li
14.105 278.258 14.457 278.219 14.77 278.137 cv
15.082 278.062 15.352 277.93 15.57 277.746 cv
15.797 277.566 15.969 277.332 16.086 277.035 cv
16.211 276.746 16.27 276.387 16.266 275.961 cv
16.27 275.629 16.242 275.332 16.184 275.07 cv
16.133 274.809 16.07 274.582 16 274.391 cv
15.934 274.203 15.875 274.047 15.816 273.922 cv
15.766 273.801 15.738 273.707 15.734 273.645 cv
15.738 273.609 15.746 273.578 15.762 273.547 cv
15.781 273.52 15.809 273.496 15.844 273.477 cv
15.883 273.465 15.934 273.453 15.996 273.441 cv
16.063 273.437 16.141 273.434 16.234 273.43 cv
16.305 273.434 16.363 273.437 16.41 273.437 cv
16.457 273.445 16.5 273.449 16.539 273.457 cv
16.578 273.465 16.613 273.48 16.645 273.496 cv
16.676 273.52 16.707 273.543 16.734 273.566 cv
16.766 273.598 16.813 273.68 16.875 273.82 cv
16.941 273.961 17.004 274.145 17.066 274.367 cv
17.129 274.594 17.184 274.852 17.234 275.145 cv
17.281 275.437 17.305 275.75 17.309 276.082 cv
17.305 276.66 17.227 277.168 17.066 277.598 cv
16.906 278.035 16.668 278.398 16.352 278.691 cv
16.035 278.992 15.641 279.215 15.16 279.363 cv
14.684 279.512 14.125 279.586 13.488 279.586 cv
12.891 279.586 12.352 279.512 11.867 279.355 cv
11.391 279.203 10.98 278.977 10.645 278.68 cv
10.309 278.387 10.051 278.031 9.871 277.617 cv
9.691 277.203 9.602 276.738 9.602 276.223 cv
9.602 275.672 9.691 275.203 9.867 274.816 cv
10.047 274.43 10.285 274.113 10.582 273.859 cv
10.883 273.613 11.234 273.43 11.633 273.312 cv
12.039 273.199 12.469 273.141 12.922 273.137 cv
cp
12.773 274.43 mo
12.098 274.414 11.566 274.566 11.184 274.883 cv
10.801 275.199 10.609 275.668 10.605 276.285 cv
10.609 276.609 10.668 276.891 10.785 277.129 cv
10.906 277.371 11.066 277.57 11.262 277.73 cv
11.461 277.895 11.691 278.02 11.953 278.105 cv
12.215 278.195 12.488 278.246 12.773 278.254 cv
cp
f
6.422 264.965 mo
7.469 265.461 8.539 265.828 9.637 266.07 cv
10.738 266.312 11.844 266.434 12.953 266.434 cv
14.07 266.434 15.18 266.312 16.273 266.062 cv
17.371 265.82 18.441 265.457 19.496 264.98 cv
19.555 264.957 19.609 264.945 19.656 264.937 cv
19.699 264.937 19.734 264.953 19.766 264.988 cv
19.793 265.027 19.813 265.082 19.828 265.156 cv
19.836 265.234 19.844 265.34 19.848 265.465 cv
19.844 265.562 19.84 265.641 19.84 265.707 cv
19.832 265.777 19.824 265.836 19.809 265.883 cv
19.793 265.934 19.773 265.977 19.754 266.004 cv
19.73 266.039 19.707 266.062 19.684 266.074 cv
19.152 266.355 18.617 266.602 18.074 266.812 cv
17.531 267.031 16.98 267.211 16.422 267.352 cv
15.859 267.5 15.293 267.609 14.719 267.68 cv
14.145 267.758 13.563 267.793 12.977 267.789 cv
12.391 267.793 11.813 267.754 11.238 267.668 cv
10.668 267.59 10.102 267.473 9.535 267.324 cv
8.973 267.176 8.418 266.996 7.871 266.785 cv
7.328 266.574 6.785 266.336 6.25 266.066 cv
6.23 266.062 6.215 266.047 6.195 266.023 cv
6.184 266 6.168 265.969 6.148 265.926 cv
6.137 265.887 6.125 265.828 6.113 265.754 cv
6.109 265.684 6.105 265.59 6.102 265.473 cv
6.105 265.355 6.113 265.262 6.125 265.184 cv
6.145 265.113 6.164 265.055 6.188 265.012 cv
6.215 264.973 6.25 264.949 6.289 264.941 cv
6.336 264.937 6.379 264.945 6.422 264.965 cv
cp
f
16.957 251.684 mo
17 251.684 17.035 251.695 17.066 251.715 cv
17.098 251.738 17.125 251.777 17.141 251.828 cv
17.16 251.883 17.172 251.949 17.188 252.031 cv
17.199 252.117 17.207 252.227 17.207 252.355 cv
17.207 252.484 17.199 252.59 17.188 252.676 cv
17.172 252.766 17.16 252.836 17.141 252.887 cv
17.125 252.937 17.098 252.973 17.066 252.992 cv
17.035 253.016 17 253.027 16.957 253.023 cv
8.176 253.023 li
8.176 253.039 li
16.996 256.594 li
17.035 256.609 17.066 256.633 17.09 256.66 cv
17.117 256.691 17.141 256.734 17.156 256.785 cv
17.176 256.844 17.188 256.906 17.195 256.98 cv
17.203 257.055 17.207 257.145 17.207 257.246 cv
17.207 257.359 17.199 257.453 17.191 257.527 cv
17.176 257.609 17.164 257.676 17.148 257.723 cv
17.133 257.777 17.113 257.816 17.082 257.844 cv
17.059 257.875 17.027 257.895 16.996 257.902 cv
8.176 261.301 li
8.176 261.309 li
16.957 261.309 li
17 261.312 17.035 261.32 17.066 261.34 cv
17.098 261.363 17.125 261.402 17.141 261.453 cv
17.16 261.508 17.172 261.578 17.188 261.66 cv
17.199 261.75 17.207 261.859 17.207 261.988 cv
17.207 262.121 17.199 262.227 17.188 262.312 cv
17.172 262.398 17.16 262.469 17.141 262.516 cv
17.125 262.57 17.098 262.605 17.066 262.621 cv
17.035 262.645 17 262.652 16.957 262.648 cv
7.684 262.648 li
7.469 262.652 7.313 262.594 7.215 262.477 cv
7.125 262.359 7.078 262.23 7.074 262.086 cv
7.074 261.262 li
7.078 261.098 7.094 260.949 7.121 260.82 cv
7.156 260.695 7.203 260.586 7.27 260.488 cv
7.34 260.395 7.426 260.312 7.527 260.25 cv
7.633 260.187 7.758 260.133 7.895 260.086 cv
15.195 257.199 li
15.195 257.16 li
7.918 254.16 li
7.766 254.105 7.633 254.043 7.52 253.973 cv
7.414 253.906 7.324 253.828 7.258 253.746 cv
7.195 253.664 7.148 253.574 7.117 253.473 cv
7.09 253.375 7.078 253.258 7.074 253.125 cv
7.074 252.262 li
7.078 252.184 7.09 252.105 7.109 252.035 cv
7.137 251.965 7.172 251.906 7.219 251.855 cv
7.27 251.805 7.332 251.762 7.406 251.73 cv
7.484 251.699 7.578 251.684 7.684 251.684 cv
cp
f
16.965 247.863 mo
17.012 247.867 17.047 247.879 17.07 247.895 cv
17.102 247.918 17.125 247.949 17.145 247.996 cv
17.164 248.043 17.176 248.109 17.191 248.187 cv
17.199 248.273 17.207 248.379 17.207 248.508 cv
17.207 248.637 17.199 248.742 17.191 248.82 cv
17.176 248.906 17.164 248.973 17.145 249.02 cv
17.125 249.074 17.102 249.105 17.07 249.121 cv
17.047 249.141 17.012 249.152 16.965 249.148 cv
9.953 249.148 li
9.918 249.152 9.887 249.141 9.852 249.121 cv
9.824 249.105 9.797 249.074 9.773 249.02 cv
9.754 248.973 9.738 248.906 9.727 248.82 cv
9.719 248.742 9.715 248.637 9.711 248.508 cv
9.715 248.379 9.719 248.273 9.727 248.187 cv
9.738 248.109 9.754 248.043 9.773 247.996 cv
9.797 247.949 9.824 247.918 9.852 247.895 cv
9.887 247.879 9.918 247.867 9.953 247.863 cv
cp
7.582 247.715 mo
7.887 247.715 8.094 247.773 8.199 247.887 cv
8.313 248 8.367 248.211 8.363 248.516 cv
8.367 248.82 8.313 249.027 8.203 249.137 cv
8.098 249.254 7.895 249.309 7.598 249.305 cv
7.297 249.309 7.094 249.25 6.984 249.133 cv
6.879 249.02 6.824 248.809 6.82 248.5 cv
6.824 248.199 6.879 247.996 6.98 247.883 cv
7.09 247.773 7.289 247.715 7.582 247.715 cv
cp
f
16.965 239.441 mo
17.012 239.441 17.047 239.453 17.07 239.473 cv
17.102 239.496 17.125 239.531 17.145 239.574 cv
17.164 239.625 17.176 239.687 17.191 239.77 cv
17.199 239.852 17.207 239.957 17.207 240.078 cv
17.207 240.211 17.199 240.316 17.191 240.398 cv
17.176 240.484 17.164 240.551 17.145 240.594 cv
17.125 240.645 17.102 240.676 17.07 240.695 cv
17.047 240.719 17.012 240.73 16.965 240.727 cv
12.859 240.727 li
12.461 240.73 12.141 240.762 11.895 240.82 cv
11.652 240.887 11.441 240.977 11.262 241.094 cv
11.086 241.211 10.949 241.367 10.855 241.555 cv
10.762 241.75 10.715 241.969 10.715 242.215 cv
10.715 242.539 10.832 242.863 11.059 243.184 cv
11.293 243.508 11.625 243.844 12.063 244.195 cv
16.965 244.195 li
17.012 244.199 17.047 244.211 17.07 244.227 cv
17.102 244.25 17.125 244.281 17.145 244.328 cv
17.164 244.375 17.176 244.441 17.191 244.52 cv
17.199 244.605 17.207 244.711 17.207 244.84 cv
17.207 244.969 17.199 245.074 17.191 245.152 cv
17.176 245.238 17.164 245.305 17.145 245.352 cv
17.125 245.406 17.102 245.437 17.07 245.453 cv
17.047 245.473 17.012 245.484 16.965 245.48 cv
9.953 245.48 li
9.914 245.484 9.879 245.477 9.848 245.457 cv
9.82 245.445 9.797 245.414 9.77 245.363 cv
9.75 245.32 9.734 245.258 9.723 245.184 cv
9.719 245.113 9.715 245.02 9.711 244.895 cv
9.715 244.785 9.719 244.687 9.723 244.609 cv
9.734 244.535 9.75 244.477 9.77 244.434 cv
9.797 244.395 9.82 244.367 9.848 244.348 cv
9.879 244.332 9.914 244.324 9.953 244.32 cv
10.879 244.32 li
10.438 243.93 10.117 243.535 9.91 243.141 cv
9.707 242.75 9.602 242.352 9.602 241.949 cv
9.602 241.48 9.684 241.09 9.84 240.77 cv
10.004 240.453 10.215 240.191 10.477 239.992 cv
10.742 239.797 11.051 239.656 11.406 239.57 cv
11.762 239.484 12.191 239.441 12.688 239.441 cv
cp
f
16.965 231.043 mo
17.012 231.047 17.047 231.055 17.07 231.07 cv
17.102 231.09 17.125 231.125 17.145 231.168 cv
17.164 231.215 17.176 231.273 17.191 231.348 cv
17.199 231.426 17.207 231.52 17.207 231.625 cv
17.207 231.75 17.199 231.848 17.191 231.918 cv
17.176 231.996 17.164 232.055 17.145 232.098 cv
17.125 232.145 17.102 232.176 17.07 232.187 cv
17.047 232.207 17.012 232.215 16.965 232.211 cv
16.039 232.211 li
16.484 232.613 16.805 233.008 17.004 233.395 cv
17.207 233.789 17.305 234.184 17.309 234.578 cv
17.305 235.051 17.23 235.445 17.074 235.762 cv
16.922 236.082 16.711 236.34 16.441 236.535 cv
16.176 236.738 15.863 236.879 15.504 236.961 cv
15.148 237.051 14.715 237.094 14.207 237.09 cv
9.953 237.09 li
9.914 237.094 9.879 237.086 9.848 237.062 cv
9.82 237.047 9.797 237.012 9.77 236.957 cv
9.75 236.91 9.734 236.84 9.723 236.754 cv
9.719 236.672 9.715 236.57 9.711 236.441 cv
9.715 236.32 9.719 236.215 9.723 236.129 cv
9.734 236.047 9.75 235.98 9.77 235.934 cv
9.797 235.887 9.82 235.852 9.848 235.828 cv
9.879 235.809 9.914 235.801 9.953 235.797 cv
14.035 235.797 li
14.449 235.801 14.777 235.77 15.023 235.707 cv
15.27 235.648 15.48 235.559 15.652 235.434 cv
15.832 235.316 15.965 235.16 16.059 234.969 cv
16.156 234.785 16.207 234.566 16.203 234.316 cv
16.207 233.996 16.09 233.676 15.859 233.352 cv
15.633 233.035 15.297 232.695 14.852 232.336 cv
9.953 232.336 li
9.914 232.336 9.879 232.328 9.848 232.309 cv
9.82 232.293 9.797 232.258 9.77 232.203 cv
9.75 232.152 9.734 232.086 9.723 232.004 cv
9.719 231.926 9.715 231.82 9.711 231.687 cv
9.715 231.566 9.719 231.461 9.723 231.375 cv
9.734 231.293 9.75 231.23 9.77 231.184 cv
9.797 231.141 9.82 231.105 9.848 231.078 cv
9.879 231.059 9.914 231.047 9.953 231.043 cv
cp
f
16.449 225.023 mo
16.605 225.023 16.723 225.035 16.809 225.055 cv
16.898 225.078 16.965 225.109 17.004 225.148 cv
17.047 225.191 17.086 225.254 17.121 225.336 cv
17.156 225.422 17.184 225.516 17.211 225.621 cv
17.23 225.73 17.25 225.844 17.27 225.961 cv
17.281 226.078 17.289 226.199 17.293 226.316 cv
17.289 226.684 17.242 226.996 17.148 227.254 cv
17.055 227.516 16.91 227.727 16.711 227.891 cv
16.52 228.059 16.273 228.18 15.973 228.254 cv
15.676 228.332 15.324 228.371 14.914 228.367 cv
10.816 228.367 li
10.816 229.348 li
10.82 229.426 10.777 229.488 10.691 229.535 cv
10.609 229.582 10.477 229.605 10.285 229.605 cv
10.191 229.605 10.109 229.602 10.039 229.586 cv
9.977 229.578 9.918 229.559 9.871 229.535 cv
9.828 229.516 9.797 229.488 9.777 229.453 cv
9.762 229.422 9.754 229.387 9.75 229.34 cv
9.75 228.367 li
8.082 228.367 li
8.051 228.371 8.016 228.359 7.98 228.34 cv
7.953 228.324 7.926 228.293 7.898 228.238 cv
7.879 228.191 7.863 228.125 7.848 228.039 cv
7.84 227.961 7.832 227.855 7.832 227.727 cv
7.832 227.598 7.84 227.492 7.848 227.41 cv
7.863 227.328 7.879 227.262 7.898 227.215 cv
7.926 227.168 7.953 227.137 7.98 227.113 cv
8.016 227.098 8.051 227.086 8.082 227.082 cv
9.75 227.082 li
9.75 225.281 li
9.754 225.242 9.762 225.207 9.777 225.172 cv
9.797 225.145 9.828 225.117 9.871 225.09 cv
9.918 225.07 9.977 225.055 10.039 225.039 cv
10.109 225.031 10.191 225.023 10.285 225.023 cv
10.477 225.023 10.609 225.047 10.691 225.094 cv
10.777 225.141 10.82 225.203 10.816 225.281 cv
10.816 227.082 li
14.73 227.082 li
15.215 227.086 15.578 227.016 15.824 226.867 cv
16.074 226.727 16.199 226.469 16.195 226.098 cv
16.199 225.984 16.188 225.879 16.16 225.781 cv
16.141 225.691 16.117 225.609 16.086 225.531 cv
16.063 225.461 16.035 225.398 16.012 225.344 cv
15.988 225.297 15.977 225.25 15.977 225.203 cv
15.977 225.18 15.984 225.152 15.996 225.129 cv
16.012 225.105 16.035 225.09 16.07 225.074 cv
16.109 225.066 16.16 225.055 16.219 225.039 cv
16.285 225.031 16.363 225.023 16.449 225.023 cv
cp
f
13.156 217.344 mo
13.359 217.348 13.5 217.398 13.586 217.496 cv
13.672 217.602 13.715 217.719 13.715 217.844 cv
13.715 222.461 li
14.105 222.465 14.457 222.426 14.77 222.344 cv
15.082 222.27 15.352 222.137 15.57 221.953 cv
15.797 221.773 15.969 221.539 16.086 221.242 cv
16.211 220.953 16.27 220.594 16.266 220.168 cv
16.27 219.836 16.242 219.539 16.184 219.277 cv
16.133 219.016 16.07 218.789 16 218.598 cv
15.934 218.41 15.875 218.254 15.816 218.129 cv
15.766 218.008 15.738 217.914 15.734 217.852 cv
15.738 217.816 15.746 217.785 15.762 217.754 cv
15.781 217.727 15.809 217.703 15.844 217.684 cv
15.883 217.672 15.934 217.66 15.996 217.648 cv
16.063 217.645 16.141 217.641 16.234 217.637 cv
16.305 217.641 16.363 217.645 16.41 217.645 cv
16.457 217.652 16.5 217.656 16.539 217.664 cv
16.578 217.672 16.613 217.687 16.645 217.703 cv
16.676 217.727 16.707 217.75 16.734 217.773 cv
16.766 217.805 16.813 217.887 16.875 218.027 cv
16.941 218.168 17.004 218.352 17.066 218.574 cv
17.129 218.801 17.184 219.059 17.234 219.352 cv
17.281 219.645 17.305 219.957 17.309 220.289 cv
17.305 220.867 17.227 221.375 17.066 221.805 cv
16.906 222.242 16.668 222.605 16.352 222.898 cv
16.035 223.199 15.641 223.422 15.16 223.57 cv
14.684 223.719 14.125 223.793 13.488 223.793 cv
12.891 223.793 12.352 223.719 11.867 223.562 cv
11.391 223.41 10.98 223.184 10.645 222.887 cv
10.309 222.594 10.051 222.238 9.871 221.824 cv
9.691 221.41 9.602 220.945 9.602 220.43 cv
9.602 219.879 9.691 219.41 9.867 219.023 cv
10.047 218.637 10.285 218.32 10.582 218.066 cv
10.883 217.82 11.234 217.637 11.633 217.52 cv
12.039 217.406 12.469 217.348 12.922 217.344 cv
cp
12.773 218.637 mo
12.098 218.621 11.566 218.773 11.184 219.09 cv
10.801 219.406 10.609 219.875 10.605 220.492 cv
10.609 220.816 10.668 221.098 10.785 221.336 cv
10.906 221.578 11.066 221.777 11.262 221.937 cv
11.461 222.102 11.691 222.227 11.953 222.312 cv
12.215 222.402 12.488 222.453 12.773 222.461 cv
cp
f
15.055 211.055 mo
15.418 211.059 15.738 211.125 16.016 211.254 cv
16.297 211.387 16.531 211.574 16.723 211.816 cv
16.918 212.062 17.063 212.355 17.16 212.691 cv
17.258 213.031 17.305 213.402 17.309 213.805 cv
17.305 214.059 17.285 214.297 17.25 214.52 cv
17.207 214.746 17.16 214.945 17.102 215.125 cv
17.043 215.305 16.98 215.457 16.914 215.582 cv
16.852 215.707 16.793 215.801 16.738 215.855 cv
16.688 215.914 16.617 215.953 16.52 215.977 cv
16.43 216.004 16.301 216.016 16.141 216.016 cv
16.043 216.016 15.961 216.012 15.891 216 cv
15.824 215.992 15.77 215.98 15.727 215.961 cv
15.688 215.949 15.656 215.926 15.637 215.898 cv
15.621 215.871 15.613 215.84 15.609 215.801 cv
15.613 215.746 15.648 215.66 15.715 215.547 cv
15.789 215.437 15.867 215.301 15.945 215.133 cv
16.031 214.973 16.105 214.781 16.176 214.555 cv
16.246 214.336 16.281 214.078 16.281 213.781 cv
16.281 213.566 16.258 213.367 16.211 213.187 cv
16.164 213.012 16.098 212.859 16.004 212.73 cv
15.918 212.602 15.801 212.5 15.656 212.43 cv
15.52 212.359 15.352 212.324 15.156 212.324 cv
14.961 212.324 14.797 212.375 14.66 212.477 cv
14.527 212.578 14.406 212.715 14.301 212.879 cv
14.199 213.047 14.109 213.23 14.023 213.437 cv
13.945 213.648 13.859 213.863 13.77 214.082 cv
13.684 214.301 13.582 214.516 13.469 214.727 cv
13.359 214.937 13.227 215.129 13.063 215.293 cv
12.906 215.465 12.711 215.598 12.484 215.695 cv
12.262 215.801 11.996 215.852 11.684 215.848 cv
11.41 215.852 11.145 215.797 10.891 215.687 cv
10.641 215.582 10.422 215.422 10.23 215.207 cv
10.043 214.996 9.891 214.73 9.773 214.41 cv
9.66 214.09 9.602 213.719 9.602 213.289 cv
9.602 213.105 9.617 212.918 9.648 212.73 cv
9.68 212.547 9.719 212.379 9.766 212.223 cv
9.813 212.074 9.863 211.945 9.918 211.836 cv
9.973 211.734 10.023 211.652 10.063 211.594 cv
10.109 211.543 10.145 211.508 10.172 211.484 cv
10.203 211.469 10.238 211.453 10.273 211.445 cv
10.316 211.437 10.363 211.43 10.418 211.422 cv
10.477 211.414 10.547 211.41 10.629 211.41 cv
10.719 211.41 10.797 211.414 10.859 211.422 cv
10.93 211.43 10.98 211.445 11.02 211.461 cv
11.063 211.484 11.094 211.504 11.109 211.527 cv
11.129 211.555 11.137 211.586 11.137 211.613 cv
11.137 211.664 11.109 211.73 11.051 211.816 cv
10.996 211.906 10.934 212.02 10.867 212.16 cv
10.805 212.301 10.746 212.469 10.684 212.656 cv
10.629 212.848 10.598 213.062 10.598 213.305 cv
10.598 213.527 10.625 213.719 10.672 213.883 cv
10.727 214.051 10.797 214.187 10.883 214.293 cv
10.977 214.398 11.082 214.48 11.207 214.531 cv
11.332 214.59 11.469 214.617 11.613 214.613 cv
11.816 214.617 11.984 214.566 12.121 214.461 cv
12.262 214.359 12.383 214.223 12.484 214.055 cv
12.59 213.891 12.684 213.699 12.766 213.484 cv
12.852 213.273 12.938 213.059 13.023 212.836 cv
13.113 212.617 13.215 212.398 13.32 212.18 cv
13.43 211.965 13.559 211.773 13.715 211.605 cv
13.871 211.441 14.059 211.309 14.277 211.207 cv
14.496 211.109 14.758 211.059 15.055 211.055 cv
cp
f
12.977 206.613 mo
13.563 206.613 14.145 206.652 14.719 206.723 cv
15.293 206.801 15.859 206.91 16.422 207.051 cv
16.98 207.199 17.531 207.375 18.074 207.586 cv
18.617 207.797 19.152 208.043 19.684 208.32 cv
19.707 208.34 19.73 208.363 19.754 208.391 cv
19.773 208.426 19.793 208.465 19.809 208.512 cv
19.824 208.562 19.832 208.621 19.84 208.687 cv
19.84 208.758 19.844 208.84 19.848 208.93 cv
19.844 209.066 19.836 209.172 19.828 209.246 cv
19.813 209.324 19.793 209.379 19.766 209.41 cv
19.734 209.445 19.699 209.461 19.656 209.457 cv
19.609 209.457 19.555 209.441 19.496 209.414 cv
18.445 208.937 17.375 208.578 16.277 208.332 cv
15.18 208.09 14.07 207.969 12.953 207.965 cv
11.844 207.969 10.738 208.09 9.637 208.332 cv
8.539 208.578 7.469 208.945 6.422 209.43 cv
6.379 209.453 6.336 209.461 6.289 209.453 cv
6.25 209.453 6.215 209.43 6.188 209.383 cv
6.164 209.344 6.145 209.285 6.125 209.211 cv
6.113 209.141 6.105 209.043 6.102 208.922 cv
6.105 208.812 6.109 208.723 6.113 208.648 cv
6.125 208.578 6.137 208.52 6.148 208.473 cv
6.168 208.43 6.184 208.398 6.195 208.375 cv
6.215 208.359 6.23 208.344 6.25 208.328 cv
7.316 207.797 8.414 207.375 9.535 207.07 cv
10.664 206.766 11.809 206.613 12.977 206.613 cv
cp
f
251.961 539.684 mo
251.957 539.789 251.941 539.879 251.906 539.949 cv
251.871 540.027 251.824 540.086 251.77 540.129 cv
251.711 540.18 251.648 540.215 251.582 540.23 cv
251.508 540.254 251.438 540.262 251.375 540.262 cv
250.93 540.262 li
250.789 540.262 250.668 540.25 250.563 540.219 cv
250.457 540.195 250.359 540.141 250.266 540.062 cv
250.172 539.988 250.078 539.887 249.984 539.754 cv
249.891 539.625 249.789 539.461 249.684 539.258 cv
246.609 533.52 li
246.445 533.227 246.281 532.918 246.121 532.59 cv
245.953 532.27 245.801 531.953 245.664 531.645 cv
245.648 531.645 li
245.656 532.02 245.664 532.402 245.672 532.789 cv
245.676 533.18 245.676 533.566 245.68 533.949 cv
245.68 540.035 li
245.676 540.074 245.664 540.109 245.645 540.141 cv
245.621 540.176 245.586 540.203 245.535 540.219 cv
245.48 540.238 245.41 540.25 245.328 540.266 cv
245.242 540.277 245.137 540.285 245.008 540.285 cv
244.871 540.285 244.762 540.277 244.68 540.266 cv
244.594 540.25 244.527 540.238 244.48 540.219 cv
244.43 540.203 244.395 540.176 244.371 540.141 cv
244.348 540.109 244.336 540.074 244.34 540.035 cv
244.34 530.73 li
244.336 530.523 244.395 530.375 244.516 530.285 cv
244.633 530.199 244.762 530.156 244.902 530.152 cv
245.563 530.152 li
245.715 530.156 245.848 530.168 245.953 530.191 cv
246.055 530.219 246.148 530.262 246.234 530.32 cv
246.316 530.383 246.395 530.465 246.477 530.57 cv
246.551 530.68 246.633 530.816 246.719 530.973 cv
249.086 535.398 li
249.23 535.672 249.371 535.937 249.508 536.191 cv
249.641 536.449 249.77 536.703 249.898 536.949 cv
250.02 537.203 250.145 537.449 250.27 537.687 cv
250.391 537.93 250.512 538.172 250.637 538.414 cv
250.645 538.414 li
250.633 538.008 250.625 537.578 250.625 537.133 cv
250.617 536.687 250.617 536.262 250.621 535.852 cv
250.621 530.379 li
250.617 530.344 250.629 530.309 250.652 530.277 cv
250.676 530.246 250.711 530.219 250.766 530.195 cv
250.813 530.172 250.883 530.156 250.969 530.145 cv
251.055 530.137 251.164 530.133 251.305 530.129 cv
251.422 530.133 251.527 530.137 251.617 530.145 cv
251.703 530.156 251.77 530.172 251.82 530.195 cv
251.867 530.219 251.902 530.246 251.926 530.277 cv
251.945 530.309 251.957 530.344 251.961 530.379 cv
cp
f
260.508 540.043 mo
260.504 540.09 260.496 540.125 260.48 540.148 cv
260.461 540.18 260.426 540.203 260.383 540.223 cv
260.336 540.242 260.277 540.254 260.203 540.27 cv
260.125 540.277 260.031 540.285 259.926 540.285 cv
259.801 540.285 259.703 540.277 259.633 540.27 cv
259.555 540.254 259.496 540.242 259.453 540.223 cv
259.406 540.203 259.375 540.18 259.363 540.148 cv
259.344 540.125 259.336 540.09 259.34 540.043 cv
259.34 539.117 li
258.938 539.562 258.543 539.883 258.156 540.082 cv
257.762 540.285 257.367 540.383 256.973 540.387 cv
256.5 540.383 256.105 540.309 255.789 540.152 cv
255.469 540 255.211 539.789 255.016 539.52 cv
254.813 539.254 254.672 538.941 254.59 538.582 cv
254.5 538.227 254.457 537.793 254.461 537.285 cv
254.461 533.031 li
254.457 532.992 254.465 532.957 254.488 532.926 cv
254.504 532.898 254.539 532.875 254.594 532.848 cv
254.641 532.828 254.711 532.812 254.797 532.801 cv
254.879 532.797 254.98 532.793 255.109 532.789 cv
255.23 532.793 255.336 532.797 255.422 532.801 cv
255.504 532.812 255.57 532.828 255.617 532.848 cv
255.664 532.875 255.699 532.898 255.723 532.926 cv
255.742 532.957 255.75 532.992 255.754 533.031 cv
255.754 537.113 li
255.75 537.527 255.781 537.855 255.844 538.102 cv
255.902 538.348 255.992 538.559 256.117 538.73 cv
256.234 538.91 256.391 539.043 256.582 539.137 cv
256.766 539.234 256.984 539.285 257.234 539.281 cv
257.555 539.285 257.875 539.168 258.199 538.937 cv
258.516 538.711 258.855 538.375 259.215 537.93 cv
259.215 533.031 li
259.215 532.992 259.223 532.957 259.242 532.926 cv
259.258 532.898 259.293 532.875 259.348 532.848 cv
259.398 532.828 259.465 532.812 259.547 532.801 cv
259.625 532.797 259.73 532.793 259.863 532.789 cv
259.984 532.793 260.09 532.797 260.176 532.801 cv
260.258 532.812 260.32 532.828 260.367 532.848 cv
260.41 532.875 260.445 532.898 260.473 532.926 cv
260.492 532.957 260.504 532.992 260.508 533.031 cv
cp
f
273.285 540.043 mo
273.281 540.09 273.273 540.125 273.254 540.148 cv
273.23 540.18 273.195 540.203 273.152 540.223 cv
273.102 540.242 273.035 540.254 272.957 540.27 cv
272.871 540.277 272.77 540.285 272.645 540.285 cv
272.512 540.285 272.402 540.277 272.324 540.27 cv
272.238 540.254 272.172 540.242 272.125 540.223 cv
272.07 540.203 272.035 540.18 272.02 540.148 cv
271.996 540.125 271.988 540.09 271.988 540.043 cv
271.988 535.781 li
271.988 535.488 271.961 535.219 271.91 534.973 cv
271.855 534.73 271.773 534.52 271.66 534.34 cv
271.547 534.164 271.402 534.027 271.227 533.934 cv
271.047 533.84 270.836 533.793 270.602 533.793 cv
270.305 533.793 270.008 533.91 269.711 534.137 cv
269.406 534.371 269.078 534.703 268.723 535.141 cv
268.723 540.043 li
268.719 540.09 268.707 540.125 268.691 540.148 cv
268.668 540.18 268.637 540.203 268.59 540.223 cv
268.539 540.242 268.473 540.254 268.391 540.27 cv
268.305 540.277 268.199 540.285 268.078 540.285 cv
267.957 540.285 267.855 540.277 267.77 540.27 cv
267.684 540.254 267.613 540.242 267.566 540.223 cv
267.512 540.203 267.48 540.18 267.465 540.148 cv
267.445 540.125 267.434 540.09 267.438 540.043 cv
267.438 535.781 li
267.434 535.488 267.406 535.219 267.352 534.973 cv
267.293 534.73 267.207 534.52 267.094 534.34 cv
266.98 534.164 266.836 534.027 266.664 533.934 cv
266.484 533.84 266.277 533.793 266.043 533.793 cv
265.742 533.793 265.445 533.91 265.145 534.137 cv
264.844 534.371 264.516 534.703 264.164 535.141 cv
264.164 540.043 li
264.16 540.09 264.148 540.125 264.133 540.148 cv
264.109 540.18 264.078 540.203 264.031 540.223 cv
263.984 540.242 263.918 540.254 263.84 540.27 cv
263.754 540.277 263.648 540.285 263.52 540.285 cv
263.391 540.285 263.285 540.277 263.207 540.27 cv
263.121 540.254 263.055 540.242 263.008 540.223 cv
262.953 540.203 262.922 540.18 262.906 540.148 cv
262.887 540.125 262.875 540.09 262.879 540.043 cv
262.879 533.031 li
262.875 532.992 262.883 532.957 262.902 532.926 cv
262.914 532.898 262.945 532.875 262.996 532.848 cv
263.039 532.828 263.102 532.812 263.176 532.801 cv
263.246 532.797 263.34 532.793 263.465 532.789 cv
263.574 532.793 263.672 532.797 263.75 532.801 cv
263.824 532.812 263.883 532.828 263.926 532.848 cv
263.965 532.875 263.992 532.898 264.012 532.926 cv
264.027 532.957 264.035 532.992 264.039 533.031 cv
264.039 533.957 li
264.43 533.516 264.813 533.195 265.188 532.988 cv
265.555 532.785 265.934 532.68 266.316 532.68 cv
266.605 532.68 266.863 532.715 267.098 532.781 cv
267.324 532.852 267.531 532.945 267.711 533.066 cv
267.887 533.187 268.035 533.332 268.164 533.5 cv
268.285 533.672 268.391 533.863 268.477 534.066 cv
268.707 533.816 268.93 533.602 269.141 533.422 cv
269.352 533.25 269.555 533.105 269.75 532.992 cv
269.945 532.887 270.133 532.809 270.316 532.754 cv
270.5 532.707 270.688 532.68 270.875 532.68 cv
271.328 532.68 271.707 532.762 272.012 532.918 cv
272.316 533.082 272.563 533.293 272.758 533.555 cv
272.945 533.82 273.082 534.129 273.164 534.484 cv
273.242 534.84 273.281 535.215 273.285 535.609 cv
cp
f
282.086 536.441 mo
282.082 537.051 282.016 537.602 281.887 538.086 cv
281.75 538.574 281.555 538.988 281.301 539.328 cv
281.043 539.672 280.727 539.934 280.355 540.113 cv
279.98 540.297 279.555 540.383 279.07 540.387 cv
278.844 540.383 278.637 540.363 278.449 540.32 cv
278.262 540.273 278.074 540.203 277.895 540.105 cv
277.707 540.008 277.527 539.883 277.348 539.73 cv
277.164 539.582 276.973 539.402 276.773 539.187 cv
276.773 540.043 li
276.773 540.09 276.762 540.125 276.742 540.152 cv
276.719 540.187 276.684 540.211 276.641 540.227 cv
276.59 540.242 276.531 540.254 276.465 540.27 cv
276.391 540.277 276.301 540.285 276.195 540.285 cv
276.086 540.285 276 540.277 275.93 540.27 cv
275.855 540.254 275.793 540.242 275.75 540.227 cv
275.699 540.211 275.668 540.187 275.656 540.152 cv
275.637 540.125 275.629 540.09 275.633 540.043 cv
275.633 529.633 li
275.629 529.594 275.641 529.559 275.66 529.523 cv
275.676 529.496 275.707 529.469 275.762 529.445 cv
275.809 529.426 275.875 529.41 275.961 529.398 cv
276.039 529.391 276.145 529.387 276.273 529.383 cv
276.402 529.387 276.508 529.391 276.594 529.398 cv
276.672 529.41 276.738 529.426 276.785 529.445 cv
276.832 529.469 276.863 529.496 276.887 529.523 cv
276.902 529.559 276.914 529.594 276.918 529.633 cv
276.918 533.832 li
277.125 533.621 277.328 533.441 277.523 533.297 cv
277.719 533.152 277.906 533.035 278.094 532.941 cv
278.277 532.855 278.465 532.789 278.656 532.742 cv
278.84 532.703 279.039 532.68 279.25 532.68 cv
279.754 532.68 280.188 532.781 280.555 532.984 cv
280.914 533.187 281.207 533.461 281.434 533.797 cv
281.656 534.141 281.824 534.539 281.93 534.996 cv
282.031 535.453 282.082 535.934 282.086 536.441 cv
cp
280.754 536.59 mo
280.75 536.234 280.723 535.887 280.672 535.547 cv
280.613 535.211 280.52 534.914 280.383 534.652 cv
280.246 534.395 280.066 534.184 279.844 534.023 cv
279.617 533.867 279.336 533.789 279.004 533.785 cv
278.836 533.789 278.672 533.812 278.512 533.855 cv
278.348 533.906 278.184 533.984 278.016 534.09 cv
277.848 534.203 277.672 534.344 277.496 534.512 cv
277.313 534.687 277.121 534.902 276.918 535.156 cv
276.918 537.953 li
277.273 538.387 277.613 538.719 277.938 538.941 cv
278.262 539.172 278.598 539.285 278.949 539.281 cv
279.27 539.285 279.547 539.207 279.781 539.047 cv
280.008 538.895 280.195 538.687 280.34 538.426 cv
280.484 538.172 280.59 537.883 280.656 537.562 cv
280.719 537.246 280.75 536.922 280.754 536.59 cv
cp
f
289.996 536.234 mo
289.992 536.437 289.941 536.578 289.844 536.664 cv
289.738 536.75 289.621 536.793 289.496 536.793 cv
284.879 536.793 li
284.875 537.184 284.914 537.535 284.996 537.848 cv
285.07 538.16 285.203 538.43 285.387 538.648 cv
285.566 538.875 285.801 539.047 286.098 539.164 cv
286.387 539.289 286.746 539.348 287.172 539.344 cv
287.504 539.348 287.801 539.32 288.063 539.262 cv
288.324 539.211 288.551 539.148 288.742 539.078 cv
288.93 539.012 289.086 538.953 289.211 538.895 cv
289.332 538.844 289.426 538.816 289.488 538.812 cv
289.523 538.816 289.555 538.824 289.586 538.84 cv
289.613 538.859 289.637 538.887 289.656 538.922 cv
289.668 538.961 289.68 539.012 289.691 539.074 cv
289.695 539.141 289.699 539.219 289.703 539.312 cv
289.699 539.383 289.695 539.441 289.695 539.488 cv
289.688 539.535 289.684 539.578 289.676 539.617 cv
289.668 539.656 289.652 539.691 289.637 539.723 cv
289.613 539.754 289.59 539.785 289.566 539.812 cv
289.535 539.844 289.453 539.891 289.313 539.953 cv
289.172 540.02 288.988 540.082 288.766 540.145 cv
288.539 540.207 288.281 540.262 287.988 540.312 cv
287.695 540.359 287.383 540.383 287.051 540.387 cv
286.473 540.383 285.965 540.305 285.535 540.145 cv
285.098 539.984 284.734 539.746 284.441 539.43 cv
284.141 539.113 283.918 538.719 283.77 538.238 cv
283.621 537.762 283.547 537.203 283.547 536.566 cv
283.547 535.969 283.621 535.43 283.777 534.945 cv
283.93 534.469 284.156 534.059 284.453 533.723 cv
284.746 533.387 285.102 533.129 285.516 532.949 cv
285.93 532.77 286.395 532.68 286.91 532.68 cv
287.461 532.68 287.93 532.77 288.316 532.945 cv
288.703 533.125 289.02 533.363 289.273 533.66 cv
289.52 533.961 289.703 534.312 289.82 534.711 cv
289.934 535.117 289.992 535.547 289.996 536 cv
cp
288.703 535.852 mo
288.719 535.176 288.566 534.645 288.25 534.262 cv
287.934 533.879 287.465 533.687 286.848 533.684 cv
286.523 533.687 286.242 533.746 286.004 533.863 cv
285.762 533.984 285.563 534.145 285.402 534.34 cv
285.238 534.539 285.113 534.77 285.027 535.031 cv
284.938 535.293 284.887 535.566 284.879 535.852 cv
cp
f
296.063 533.488 mo
296.059 533.605 296.059 533.703 296.055 533.777 cv
296.047 533.859 296.035 533.922 296.023 533.961 cv
296.004 534.008 295.984 534.039 295.965 534.062 cv
295.938 534.086 295.906 534.098 295.867 534.098 cv
295.824 534.098 295.773 534.086 295.715 534.062 cv
295.652 534.039 295.582 534.016 295.512 533.992 cv
295.434 533.969 295.352 533.949 295.258 533.926 cv
295.164 533.91 295.063 533.898 294.953 533.895 cv
294.82 533.898 294.691 533.926 294.57 533.973 cv
294.445 534.027 294.316 534.113 294.18 534.23 cv
294.039 534.355 293.895 534.512 293.746 534.707 cv
293.594 534.902 293.426 535.145 293.246 535.43 cv
293.246 540.043 li
293.242 540.09 293.23 540.125 293.215 540.148 cv
293.191 540.18 293.16 540.203 293.113 540.223 cv
293.066 540.242 293 540.254 292.922 540.27 cv
292.836 540.277 292.73 540.285 292.602 540.285 cv
292.473 540.285 292.367 540.277 292.289 540.27 cv
292.203 540.254 292.137 540.242 292.09 540.223 cv
292.035 540.203 292.004 540.18 291.988 540.148 cv
291.969 540.125 291.957 540.09 291.961 540.043 cv
291.961 533.031 li
291.957 532.992 291.965 532.957 291.984 532.926 cv
291.996 532.898 292.027 532.875 292.078 532.848 cv
292.121 532.828 292.184 532.812 292.258 532.801 cv
292.328 532.797 292.422 532.793 292.547 532.789 cv
292.656 532.793 292.754 532.797 292.832 532.801 cv
292.906 532.812 292.965 532.828 293.008 532.848 cv
293.047 532.875 293.074 532.898 293.094 532.926 cv
293.109 532.957 293.117 532.992 293.121 533.031 cv
293.121 534.051 li
293.309 533.77 293.492 533.543 293.664 533.367 cv
293.832 533.191 293.992 533.051 294.145 532.949 cv
294.293 532.848 294.441 532.777 294.59 532.738 cv
294.738 532.699 294.887 532.68 295.039 532.68 cv
295.105 532.68 295.184 532.684 295.27 532.691 cv
295.355 532.699 295.445 532.715 295.539 532.734 cv
295.633 532.758 295.715 532.781 295.793 532.805 cv
295.863 532.832 295.918 532.859 295.953 532.883 cv
295.98 532.914 296 532.937 296.016 532.957 cv
296.023 532.984 296.035 533.016 296.043 533.047 cv
296.051 533.086 296.055 533.137 296.059 533.207 cv
296.059 533.277 296.059 533.371 296.063 533.488 cv
cp
f
307.82 536.457 mo
307.816 537.035 307.742 537.562 307.594 538.039 cv
307.441 538.523 307.215 538.937 306.918 539.281 cv
306.617 539.633 306.242 539.902 305.797 540.094 cv
305.344 540.289 304.824 540.383 304.234 540.387 cv
303.656 540.383 303.152 540.301 302.727 540.129 cv
302.297 539.961 301.941 539.711 301.656 539.383 cv
301.367 539.055 301.152 538.66 301.016 538.191 cv
300.875 537.727 300.809 537.195 300.809 536.598 cv
300.809 536.031 300.879 535.504 301.027 535.023 cv
301.172 534.543 301.398 534.129 301.699 533.777 cv
301.996 533.43 302.367 533.16 302.816 532.969 cv
303.262 532.777 303.785 532.68 304.383 532.68 cv
304.961 532.68 305.461 532.766 305.891 532.937 cv
306.316 533.109 306.676 533.359 306.961 533.687 cv
307.246 534.016 307.461 534.414 307.605 534.879 cv
307.746 535.348 307.816 535.875 307.82 536.457 cv
cp
306.488 536.543 mo
306.484 536.168 306.449 535.809 306.383 535.469 cv
306.309 535.133 306.191 534.84 306.031 534.582 cv
305.867 534.332 305.648 534.129 305.371 533.977 cv
305.09 533.832 304.742 533.758 304.332 533.754 cv
303.945 533.758 303.617 533.824 303.344 533.957 cv
303.066 534.094 302.84 534.285 302.664 534.531 cv
302.484 534.777 302.352 535.07 302.27 535.406 cv
302.18 535.746 302.137 536.113 302.141 536.512 cv
302.137 536.898 302.172 537.262 302.246 537.598 cv
302.313 537.937 302.43 538.23 302.598 538.48 cv
302.762 538.734 302.984 538.937 303.262 539.082 cv
303.539 539.234 303.887 539.309 304.301 539.305 cv
304.676 539.309 305.004 539.238 305.285 539.102 cv
305.563 538.969 305.789 538.781 305.969 538.531 cv
306.145 538.289 306.273 537.996 306.359 537.66 cv
306.441 537.324 306.484 536.953 306.488 536.543 cv
cp
f
313.551 530.145 mo
313.547 530.246 313.543 530.324 313.535 530.383 cv
313.523 530.445 313.512 530.496 313.5 530.527 cv
313.484 530.566 313.469 530.59 313.449 530.602 cv
313.426 530.617 313.398 530.625 313.371 530.621 cv
313.332 530.625 313.285 530.613 313.234 530.586 cv
313.176 530.566 313.109 530.539 313.035 530.508 cv
312.953 530.48 312.863 530.453 312.758 530.43 cv
312.648 530.406 312.523 530.395 312.391 530.395 cv
312.195 530.395 312.031 530.426 311.898 530.488 cv
311.758 530.551 311.648 530.648 311.57 530.781 cv
311.484 530.914 311.426 531.086 311.391 531.297 cv
311.352 531.508 311.332 531.766 311.336 532.062 cv
311.336 532.828 li
312.902 532.828 li
312.941 532.832 312.977 532.84 313.008 532.855 cv
313.035 532.875 313.063 532.906 313.086 532.949 cv
313.109 532.996 313.125 533.055 313.141 533.117 cv
313.148 533.187 313.156 533.27 313.16 533.363 cv
313.156 533.555 313.133 533.687 313.09 533.77 cv
313.039 533.855 312.977 533.898 312.902 533.895 cv
311.336 533.895 li
311.336 540.043 li
311.332 540.09 311.324 540.125 311.305 540.148 cv
311.281 540.18 311.246 540.203 311.199 540.223 cv
311.148 540.242 311.082 540.254 311 540.27 cv
310.914 540.277 310.809 540.285 310.691 540.285 cv
310.563 540.285 310.461 540.277 310.379 540.27 cv
310.293 540.254 310.227 540.242 310.18 540.223 cv
310.129 540.203 310.094 540.18 310.074 540.148 cv
310.051 540.125 310.039 540.09 310.043 540.043 cv
310.043 533.895 li
309.055 533.895 li
308.969 533.898 308.906 533.855 308.867 533.77 cv
308.824 533.687 308.801 533.555 308.805 533.363 cv
308.801 533.27 308.809 533.187 308.82 533.117 cv
308.828 533.055 308.844 532.996 308.867 532.949 cv
308.887 532.906 308.91 532.875 308.945 532.855 cv
308.973 532.84 309.012 532.832 309.055 532.828 cv
310.043 532.828 li
310.043 532.102 li
310.039 531.617 310.086 531.199 310.18 530.844 cv
310.27 530.496 310.406 530.207 310.594 529.984 cv
310.777 529.762 311.012 529.598 311.301 529.488 cv
311.582 529.383 311.918 529.328 312.305 529.328 cv
312.48 529.328 312.656 529.348 312.832 529.379 cv
313 529.418 313.133 529.453 313.23 529.488 cv
313.32 529.531 313.383 529.566 313.418 529.594 cv
313.445 529.629 313.473 529.668 313.496 529.715 cv
313.516 529.766 313.527 529.828 313.539 529.895 cv
313.543 529.969 313.547 530.051 313.551 530.145 cv
cp
f
323.75 537.41 mo
323.746 537.883 323.66 538.305 323.488 538.672 cv
323.313 539.047 323.07 539.359 322.762 539.613 cv
322.453 539.871 322.09 540.062 321.672 540.191 cv
321.25 540.32 320.801 540.383 320.32 540.387 cv
319.98 540.383 319.664 540.355 319.379 540.301 cv
319.09 540.242 318.836 540.176 318.609 540.09 cv
318.383 540.012 318.191 539.926 318.039 539.832 cv
317.883 539.746 317.777 539.668 317.719 539.605 cv
317.66 539.543 317.617 539.465 317.59 539.371 cv
317.559 539.277 317.543 539.148 317.547 538.984 cv
317.543 538.871 317.547 538.777 317.563 538.699 cv
317.57 538.625 317.586 538.562 317.609 538.516 cv
317.625 538.469 317.652 538.437 317.688 538.418 cv
317.715 538.402 317.75 538.395 317.793 538.391 cv
317.863 538.395 317.965 538.437 318.102 538.523 cv
318.23 538.613 318.402 538.711 318.613 538.812 cv
318.82 538.922 319.07 539.02 319.363 539.105 cv
319.656 539.199 319.996 539.242 320.383 539.242 cv
320.672 539.242 320.938 539.203 321.18 539.125 cv
321.418 539.047 321.625 538.937 321.805 538.793 cv
321.977 538.652 322.113 538.477 322.207 538.266 cv
322.301 538.059 322.348 537.824 322.348 537.559 cv
322.348 537.277 322.281 537.031 322.152 536.824 cv
322.02 536.625 321.848 536.449 321.637 536.293 cv
321.422 536.145 321.18 536.004 320.906 535.871 cv
320.633 535.746 320.352 535.613 320.07 535.48 cv
319.781 535.348 319.504 535.203 319.234 535.039 cv
318.965 534.883 318.723 534.691 318.512 534.473 cv
318.293 534.254 318.121 534 317.992 533.703 cv
317.855 533.414 317.789 533.062 317.793 532.648 cv
317.789 532.23 317.867 531.855 318.023 531.523 cv
318.176 531.195 318.387 530.918 318.664 530.691 cv
318.934 530.473 319.258 530.301 319.637 530.184 cv
320.012 530.066 320.422 530.008 320.859 530.008 cv
321.078 530.008 321.301 530.027 321.531 530.066 cv
321.754 530.105 321.965 530.156 322.168 530.219 cv
322.363 530.285 322.543 530.359 322.703 530.437 cv
322.855 530.52 322.957 530.586 323.012 530.633 cv
323.059 530.687 323.094 530.727 323.109 530.75 cv
323.125 530.781 323.137 530.816 323.148 530.859 cv
323.156 530.906 323.164 530.961 323.172 531.02 cv
323.176 531.086 323.18 531.164 323.18 531.262 cv
323.18 531.355 323.176 531.441 323.168 531.512 cv
323.16 531.59 323.148 531.648 323.133 531.695 cv
323.117 531.742 323.094 531.777 323.066 531.801 cv
323.035 531.824 323.004 531.836 322.969 531.836 cv
322.91 531.836 322.82 531.801 322.699 531.73 cv
322.574 531.66 322.422 531.578 322.25 531.484 cv
322.07 531.395 321.863 531.312 321.625 531.234 cv
321.379 531.16 321.109 531.121 320.813 531.121 cv
320.531 531.121 320.285 531.16 320.078 531.234 cv
319.867 531.312 319.695 531.414 319.563 531.535 cv
319.426 531.66 319.324 531.805 319.258 531.977 cv
319.191 532.148 319.16 532.332 319.16 532.523 cv
319.16 532.809 319.223 533.051 319.352 533.25 cv
319.48 533.453 319.652 533.633 319.871 533.785 cv
320.082 533.945 320.328 534.086 320.605 534.215 cv
320.879 534.348 321.16 534.48 321.449 534.609 cv
321.734 534.742 322.016 534.887 322.289 535.043 cv
322.563 535.203 322.809 535.391 323.027 535.605 cv
323.242 535.824 323.414 536.078 323.551 536.371 cv
323.68 536.664 323.746 537.012 323.75 537.41 cv
cp
f
331.516 540.043 mo
331.512 540.09 331.504 540.125 331.488 540.148 cv
331.469 540.18 331.434 540.203 331.391 540.223 cv
331.344 540.242 331.285 540.254 331.211 540.27 cv
331.133 540.277 331.039 540.285 330.934 540.285 cv
330.809 540.285 330.711 540.277 330.641 540.27 cv
330.563 540.254 330.504 540.242 330.461 540.223 cv
330.414 540.203 330.383 540.18 330.371 540.148 cv
330.352 540.125 330.344 540.09 330.348 540.043 cv
330.348 539.117 li
329.945 539.562 329.551 539.883 329.164 540.082 cv
328.77 540.285 328.375 540.383 327.98 540.387 cv
327.508 540.383 327.113 540.309 326.797 540.152 cv
326.477 540 326.219 539.789 326.023 539.52 cv
325.82 539.254 325.68 538.941 325.598 538.582 cv
325.508 538.227 325.465 537.793 325.469 537.285 cv
325.469 533.031 li
325.465 532.992 325.473 532.957 325.496 532.926 cv
325.512 532.898 325.547 532.875 325.602 532.848 cv
325.648 532.828 325.719 532.812 325.805 532.801 cv
325.887 532.797 325.988 532.793 326.117 532.789 cv
326.238 532.793 326.344 532.797 326.43 532.801 cv
326.512 532.812 326.578 532.828 326.625 532.848 cv
326.672 532.875 326.707 532.898 326.73 532.926 cv
326.75 532.957 326.758 532.992 326.762 533.031 cv
326.762 537.113 li
326.758 537.527 326.789 537.855 326.852 538.102 cv
326.91 538.348 327 538.559 327.125 538.73 cv
327.242 538.91 327.398 539.043 327.59 539.137 cv
327.773 539.234 327.992 539.285 328.242 539.281 cv
328.563 539.285 328.883 539.168 329.207 538.937 cv
329.523 538.711 329.863 538.375 330.223 537.93 cv
330.223 533.031 li
330.223 532.992 330.23 532.957 330.25 532.926 cv
330.266 532.898 330.301 532.875 330.355 532.848 cv
330.406 532.828 330.473 532.812 330.555 532.801 cv
330.633 532.797 330.738 532.793 330.871 532.789 cv
330.992 532.793 331.098 532.797 331.184 532.801 cv
331.266 532.812 331.328 532.828 331.375 532.848 cv
331.418 532.875 331.453 532.898 331.48 532.926 cv
331.5 532.957 331.512 532.992 331.516 533.031 cv
cp
f
340.371 536.441 mo
340.367 537.051 340.301 537.602 340.172 538.086 cv
340.035 538.574 339.84 538.988 339.586 539.328 cv
339.328 539.672 339.012 539.934 338.641 540.113 cv
338.266 540.297 337.84 540.383 337.355 540.387 cv
337.129 540.383 336.922 540.363 336.734 540.32 cv
336.547 540.273 336.359 540.203 336.18 540.105 cv
335.992 540.008 335.813 539.883 335.633 539.73 cv
335.449 539.582 335.258 539.402 335.059 539.187 cv
335.059 540.043 li
335.059 540.09 335.047 540.125 335.027 540.152 cv
335.004 540.187 334.969 540.211 334.926 540.227 cv
334.875 540.242 334.816 540.254 334.75 540.27 cv
334.676 540.277 334.586 540.285 334.48 540.285 cv
334.371 540.285 334.285 540.277 334.215 540.27 cv
334.141 540.254 334.078 540.242 334.035 540.227 cv
333.984 540.211 333.953 540.187 333.941 540.152 cv
333.922 540.125 333.914 540.09 333.918 540.043 cv
333.918 529.633 li
333.914 529.594 333.926 529.559 333.945 529.523 cv
333.961 529.496 333.992 529.469 334.047 529.445 cv
334.094 529.426 334.16 529.41 334.246 529.398 cv
334.324 529.391 334.43 529.387 334.559 529.383 cv
334.688 529.387 334.793 529.391 334.879 529.398 cv
334.957 529.41 335.023 529.426 335.07 529.445 cv
335.117 529.469 335.148 529.496 335.172 529.523 cv
335.188 529.559 335.199 529.594 335.203 529.633 cv
335.203 533.832 li
335.41 533.621 335.613 533.441 335.809 533.297 cv
336.004 533.152 336.191 533.035 336.379 532.941 cv
336.563 532.855 336.75 532.789 336.941 532.742 cv
337.125 532.703 337.324 532.68 337.535 532.68 cv
338.039 532.68 338.473 532.781 338.84 532.984 cv
339.199 533.187 339.492 533.461 339.719 533.797 cv
339.941 534.141 340.109 534.539 340.215 534.996 cv
340.316 535.453 340.367 535.934 340.371 536.441 cv
cp
339.039 536.59 mo
339.035 536.234 339.008 535.887 338.957 535.547 cv
338.898 535.211 338.805 534.914 338.668 534.652 cv
338.531 534.395 338.352 534.184 338.129 534.023 cv
337.902 533.867 337.621 533.789 337.289 533.785 cv
337.121 533.789 336.957 533.812 336.797 533.855 cv
336.633 533.906 336.469 533.984 336.301 534.09 cv
336.133 534.203 335.957 534.344 335.781 534.512 cv
335.598 534.687 335.406 534.902 335.203 535.156 cv
335.203 537.953 li
335.559 538.387 335.898 538.719 336.223 538.941 cv
336.547 539.172 336.883 539.285 337.234 539.281 cv
337.555 539.285 337.832 539.207 338.066 539.047 cv
338.293 538.895 338.48 538.687 338.625 538.426 cv
338.77 538.172 338.875 537.883 338.941 537.562 cv
339.004 537.246 339.035 536.922 339.039 536.59 cv
cp
f
345.527 536.305 mo
345.527 536.508 345.504 536.645 345.457 536.723 cv
345.41 536.801 345.34 536.84 345.254 536.84 cv
341.996 536.84 li
341.902 536.84 341.836 536.801 341.789 536.719 cv
341.742 536.641 341.719 536.504 341.719 536.305 cv
341.719 536.109 341.742 535.969 341.789 535.891 cv
341.836 535.812 341.902 535.773 341.996 535.773 cv
345.254 535.773 li
345.293 535.773 345.332 535.781 345.367 535.797 cv
345.398 535.812 345.426 535.844 345.453 535.887 cv
345.473 535.934 345.492 535.988 345.508 536.055 cv
345.52 536.125 345.527 536.211 345.527 536.305 cv
cp
f
348.781 540.035 mo
348.777 540.078 348.77 540.113 348.75 540.145 cv
348.727 540.176 348.688 540.203 348.641 540.219 cv
348.586 540.238 348.52 540.25 348.434 540.266 cv
348.348 540.277 348.238 540.285 348.113 540.285 cv
347.984 540.285 347.879 540.277 347.793 540.266 cv
347.703 540.25 347.633 540.238 347.582 540.219 cv
347.527 540.203 347.492 540.176 347.473 540.145 cv
347.449 540.113 347.438 540.078 347.441 540.035 cv
347.441 530.355 li
347.438 530.316 347.449 530.281 347.477 530.246 cv
347.496 530.219 347.535 530.191 347.594 530.172 cv
347.645 530.156 347.715 530.141 347.805 530.125 cv
347.887 530.113 347.988 530.109 348.113 530.105 cv
348.238 530.109 348.348 530.113 348.434 530.125 cv
348.52 530.141 348.586 530.156 348.641 530.172 cv
348.688 530.191 348.727 530.219 348.75 530.246 cv
348.77 530.281 348.777 530.316 348.781 530.355 cv
cp
f
361.766 540.043 mo
361.762 540.09 361.754 540.125 361.734 540.148 cv
361.711 540.18 361.676 540.203 361.633 540.223 cv
361.582 540.242 361.516 540.254 361.438 540.27 cv
361.352 540.277 361.25 540.285 361.125 540.285 cv
360.992 540.285 360.883 540.277 360.805 540.27 cv
360.719 540.254 360.652 540.242 360.605 540.223 cv
360.551 540.203 360.516 540.18 360.5 540.148 cv
360.477 540.125 360.469 540.09 360.469 540.043 cv
360.469 535.781 li
360.469 535.488 360.441 535.219 360.391 534.973 cv
360.336 534.73 360.254 534.52 360.141 534.34 cv
360.027 534.164 359.883 534.027 359.707 533.934 cv
359.527 533.84 359.316 533.793 359.082 533.793 cv
358.785 533.793 358.488 533.91 358.191 534.137 cv
357.887 534.371 357.559 534.703 357.203 535.141 cv
357.203 540.043 li
357.199 540.09 357.188 540.125 357.172 540.148 cv
357.148 540.18 357.117 540.203 357.07 540.223 cv
357.02 540.242 356.953 540.254 356.871 540.27 cv
356.785 540.277 356.68 540.285 356.559 540.285 cv
356.438 540.285 356.336 540.277 356.25 540.27 cv
356.164 540.254 356.094 540.242 356.047 540.223 cv
355.992 540.203 355.961 540.18 355.945 540.148 cv
355.926 540.125 355.914 540.09 355.918 540.043 cv
355.918 535.781 li
355.914 535.488 355.887 535.219 355.832 534.973 cv
355.773 534.73 355.688 534.52 355.574 534.34 cv
355.461 534.164 355.316 534.027 355.145 533.934 cv
354.965 533.84 354.758 533.793 354.523 533.793 cv
354.223 533.793 353.926 533.91 353.625 534.137 cv
353.324 534.371 352.996 534.703 352.645 535.141 cv
352.645 540.043 li
352.641 540.09 352.629 540.125 352.613 540.148 cv
352.59 540.18 352.559 540.203 352.512 540.223 cv
352.465 540.242 352.398 540.254 352.32 540.27 cv
352.234 540.277 352.129 540.285 352 540.285 cv
351.871 540.285 351.766 540.277 351.688 540.27 cv
351.602 540.254 351.535 540.242 351.488 540.223 cv
351.434 540.203 351.402 540.18 351.387 540.148 cv
351.367 540.125 351.355 540.09 351.359 540.043 cv
351.359 533.031 li
351.355 532.992 351.363 532.957 351.383 532.926 cv
351.395 532.898 351.426 532.875 351.477 532.848 cv
351.52 532.828 351.582 532.812 351.656 532.801 cv
351.727 532.797 351.82 532.793 351.945 532.789 cv
352.055 532.793 352.152 532.797 352.23 532.801 cv
352.305 532.812 352.363 532.828 352.406 532.848 cv
352.445 532.875 352.473 532.898 352.492 532.926 cv
352.508 532.957 352.516 532.992 352.52 533.031 cv
352.52 533.957 li
352.91 533.516 353.293 533.195 353.668 532.988 cv
354.035 532.785 354.414 532.68 354.797 532.68 cv
355.086 532.68 355.344 532.715 355.578 532.781 cv
355.805 532.852 356.012 532.945 356.191 533.066 cv
356.367 533.187 356.516 533.332 356.645 533.5 cv
356.766 533.672 356.871 533.863 356.957 534.066 cv
357.188 533.816 357.41 533.602 357.621 533.422 cv
357.832 533.25 358.035 533.105 358.23 532.992 cv
358.426 532.887 358.613 532.809 358.797 532.754 cv
358.98 532.707 359.168 532.68 359.355 532.68 cv
359.809 532.68 360.188 532.762 360.492 532.918 cv
360.797 533.082 361.043 533.293 361.238 533.555 cv
361.426 533.82 361.563 534.129 361.645 534.484 cv
361.723 534.84 361.762 535.215 361.766 535.609 cv
cp
f
369.398 540.051 mo
369.395 540.113 369.375 540.16 369.336 540.191 cv
369.293 540.223 369.234 540.246 369.164 540.262 cv
369.086 540.277 368.98 540.285 368.844 540.285 cv
368.707 540.285 368.598 540.277 368.52 540.262 cv
368.434 540.246 368.375 540.223 368.344 540.191 cv
368.305 540.16 368.289 540.113 368.293 540.051 cv
368.293 539.352 li
367.984 539.68 367.641 539.934 367.266 540.113 cv
366.887 540.297 366.488 540.383 366.07 540.387 cv
365.695 540.383 365.363 540.336 365.066 540.242 cv
364.77 540.145 364.516 540.008 364.305 539.824 cv
364.094 539.645 363.93 539.422 363.813 539.156 cv
363.695 538.895 363.637 538.594 363.641 538.25 cv
363.637 537.859 363.715 537.516 363.879 537.223 cv
364.035 536.934 364.27 536.691 364.574 536.5 cv
364.875 536.309 365.242 536.164 365.68 536.066 cv
366.113 535.973 366.605 535.926 367.152 535.922 cv
368.121 535.922 li
368.121 535.375 li
368.117 535.105 368.09 534.867 368.035 534.66 cv
367.977 534.453 367.883 534.281 367.758 534.141 cv
367.625 534.004 367.461 533.898 367.262 533.828 cv
367.055 533.758 366.805 533.723 366.516 533.723 cv
366.195 533.723 365.91 533.762 365.66 533.836 cv
365.402 533.914 365.184 533.996 364.996 534.086 cv
364.809 534.18 364.648 534.266 364.523 534.336 cv
364.391 534.414 364.297 534.449 364.238 534.449 cv
364.195 534.449 364.16 534.441 364.129 534.418 cv
364.098 534.402 364.07 534.371 364.047 534.324 cv
364.023 534.285 364.004 534.23 363.996 534.164 cv
363.98 534.102 363.977 534.031 363.98 533.949 cv
363.977 533.824 363.984 533.719 364.008 533.641 cv
364.023 533.566 364.07 533.496 364.141 533.426 cv
364.211 533.359 364.332 533.281 364.504 533.191 cv
364.676 533.102 364.871 533.02 365.094 532.941 cv
365.316 532.871 365.563 532.809 365.828 532.754 cv
366.094 532.707 366.359 532.68 366.633 532.68 cv
367.133 532.68 367.563 532.738 367.914 532.852 cv
368.266 532.969 368.551 533.137 368.773 533.355 cv
368.988 533.578 369.148 533.852 369.25 534.176 cv
369.348 534.508 369.395 534.891 369.398 535.32 cv
cp
368.121 536.848 mo
367.02 536.848 li
366.664 536.852 366.359 536.883 366.102 536.937 cv
365.84 537 365.625 537.086 365.453 537.203 cv
365.281 537.32 365.156 537.461 365.078 537.625 cv
364.996 537.789 364.953 537.977 364.957 538.187 cv
364.953 538.555 365.07 538.848 365.301 539.059 cv
365.531 539.277 365.855 539.383 366.273 539.383 cv
366.609 539.383 366.922 539.297 367.211 539.125 cv
367.5 538.953 367.801 538.691 368.121 538.336 cv
cp
f
377.617 533.348 mo
377.613 533.531 377.59 533.664 377.543 533.742 cv
377.492 533.824 377.43 533.863 377.355 533.863 cv
376.348 533.863 li
376.527 534.051 376.656 534.258 376.73 534.484 cv
376.801 534.711 376.836 534.945 376.84 535.187 cv
376.836 535.594 376.77 535.953 376.645 536.266 cv
376.512 536.578 376.328 536.844 376.086 537.055 cv
375.844 537.273 375.555 537.437 375.227 537.551 cv
374.891 537.668 374.523 537.727 374.121 537.723 cv
373.832 537.727 373.559 537.687 373.305 537.609 cv
373.043 537.535 372.848 537.441 372.711 537.324 cv
372.617 537.422 372.539 537.527 372.48 537.645 cv
372.418 537.766 372.387 537.902 372.391 538.055 cv
372.387 538.238 372.473 538.391 372.645 538.508 cv
372.813 538.633 373.035 538.695 373.316 538.703 cv
375.148 538.781 li
375.496 538.793 375.813 538.84 376.105 538.926 cv
376.395 539.012 376.648 539.137 376.863 539.293 cv
377.074 539.453 377.242 539.645 377.363 539.875 cv
377.48 540.109 377.539 540.379 377.543 540.684 cv
377.539 541.004 377.473 541.309 377.34 541.602 cv
377.203 541.891 376.996 542.145 376.719 542.367 cv
376.438 542.586 376.082 542.762 375.652 542.891 cv
375.223 543.016 374.715 543.078 374.129 543.082 cv
373.559 543.078 373.074 543.031 372.68 542.937 cv
372.281 542.84 371.957 542.707 371.703 542.543 cv
371.449 542.375 371.266 542.18 371.152 541.949 cv
371.035 541.715 370.977 541.461 370.98 541.195 cv
370.977 541.023 370.996 540.859 371.043 540.699 cv
371.082 540.535 371.145 540.383 371.23 540.238 cv
371.313 540.094 371.422 539.957 371.551 539.82 cv
371.676 539.691 371.82 539.559 371.992 539.43 cv
371.734 539.301 371.547 539.137 371.426 538.937 cv
371.305 538.742 371.246 538.531 371.246 538.297 cv
371.246 537.984 371.309 537.699 371.438 537.449 cv
371.566 537.199 371.727 536.977 371.922 536.777 cv
371.758 536.586 371.633 536.371 371.539 536.129 cv
371.445 535.891 371.398 535.598 371.398 535.25 cv
371.398 534.855 371.465 534.496 371.602 534.176 cv
371.734 533.859 371.922 533.594 372.164 533.375 cv
372.402 533.16 372.688 532.992 373.023 532.871 cv
373.355 532.758 373.723 532.699 374.121 532.695 cv
374.332 532.699 374.531 532.711 374.715 532.73 cv
374.898 532.758 375.07 532.789 375.234 532.828 cv
377.355 532.828 li
377.441 532.832 377.508 532.875 377.551 532.957 cv
377.594 533.047 377.613 533.176 377.617 533.348 cv
cp
375.609 535.195 mo
375.605 534.723 375.473 534.352 375.215 534.078 cv
374.949 533.812 374.578 533.676 374.098 533.676 cv
373.844 533.676 373.625 533.719 373.445 533.801 cv
373.258 533.887 373.105 534 372.984 534.145 cv
372.863 534.293 372.773 534.461 372.715 534.648 cv
372.652 534.836 372.621 535.035 372.625 535.242 cv
372.621 535.707 372.754 536.07 373.016 536.336 cv
373.277 536.602 373.645 536.734 374.121 536.73 cv
374.371 536.734 374.59 536.695 374.781 536.609 cv
374.965 536.531 375.121 536.418 375.246 536.277 cv
375.367 536.137 375.457 535.973 375.52 535.781 cv
375.574 535.598 375.605 535.402 375.609 535.195 cv
cp
376.254 540.754 mo
376.25 540.449 376.125 540.219 375.883 540.055 cv
375.633 539.895 375.301 539.805 374.883 539.793 cv
373.066 539.73 li
372.898 539.863 372.762 539.988 372.66 540.102 cv
372.551 540.219 372.469 540.328 372.406 540.437 cv
372.344 540.543 372.301 540.648 372.277 540.754 cv
372.254 540.855 372.242 540.961 372.242 541.07 cv
372.242 541.406 372.41 541.66 372.754 541.84 cv
373.094 542.012 373.574 542.102 374.191 542.102 cv
374.578 542.102 374.902 542.062 375.168 541.988 cv
375.426 541.91 375.637 541.809 375.801 541.687 cv
375.957 541.559 376.074 541.418 376.148 541.258 cv
376.215 541.098 376.25 540.93 376.254 540.754 cv
cp
f
385.18 536.234 mo
385.176 536.437 385.125 536.578 385.027 536.664 cv
384.922 536.75 384.805 536.793 384.68 536.793 cv
380.063 536.793 li
380.059 537.184 380.098 537.535 380.18 537.848 cv
380.254 538.16 380.387 538.43 380.57 538.648 cv
380.75 538.875 380.984 539.047 381.281 539.164 cv
381.57 539.289 381.93 539.348 382.355 539.344 cv
382.688 539.348 382.984 539.32 383.246 539.262 cv
383.508 539.211 383.734 539.148 383.926 539.078 cv
384.113 539.012 384.27 538.953 384.395 538.895 cv
384.516 538.844 384.609 538.816 384.672 538.812 cv
384.707 538.816 384.738 538.824 384.77 538.84 cv
384.797 538.859 384.82 538.887 384.84 538.922 cv
384.852 538.961 384.863 539.012 384.875 539.074 cv
384.879 539.141 384.883 539.219 384.887 539.312 cv
384.883 539.383 384.879 539.441 384.879 539.488 cv
384.871 539.535 384.867 539.578 384.859 539.617 cv
384.852 539.656 384.836 539.691 384.82 539.723 cv
384.797 539.754 384.773 539.785 384.75 539.812 cv
384.719 539.844 384.637 539.891 384.496 539.953 cv
384.355 540.02 384.172 540.082 383.949 540.145 cv
383.723 540.207 383.465 540.262 383.172 540.312 cv
382.879 540.359 382.566 540.383 382.234 540.387 cv
381.656 540.383 381.148 540.305 380.719 540.145 cv
380.281 539.984 379.918 539.746 379.625 539.43 cv
379.324 539.113 379.102 538.719 378.953 538.238 cv
378.805 537.762 378.73 537.203 378.73 536.566 cv
378.73 535.969 378.805 535.43 378.961 534.945 cv
379.113 534.469 379.34 534.059 379.637 533.723 cv
379.93 533.387 380.285 533.129 380.699 532.949 cv
381.113 532.77 381.578 532.68 382.094 532.68 cv
382.645 532.68 383.113 532.77 383.5 532.945 cv
383.887 533.125 384.203 533.363 384.457 533.66 cv
384.703 533.961 384.887 534.312 385.004 534.711 cv
385.117 535.117 385.176 535.547 385.18 536 cv
cp
383.887 535.852 mo
383.902 535.176 383.75 534.645 383.434 534.262 cv
383.117 533.879 382.648 533.687 382.031 533.684 cv
381.707 533.687 381.426 533.746 381.188 533.863 cv
380.945 533.984 380.746 534.145 380.586 534.34 cv
380.422 534.539 380.297 534.77 380.211 535.031 cv
380.121 535.293 380.07 535.566 380.063 535.852 cv
cp
f
391.547 538.133 mo
391.543 538.496 391.477 538.816 391.348 539.094 cv
391.215 539.375 391.027 539.609 390.785 539.801 cv
390.539 539.996 390.246 540.141 389.91 540.238 cv
389.57 540.336 389.199 540.383 388.797 540.387 cv
388.543 540.383 388.305 540.363 388.082 540.328 cv
387.855 540.285 387.656 540.238 387.477 540.18 cv
387.297 540.121 387.145 540.059 387.02 539.992 cv
386.895 539.93 386.801 539.871 386.746 539.816 cv
386.688 539.766 386.648 539.695 386.625 539.598 cv
386.598 539.508 386.586 539.379 386.586 539.219 cv
386.586 539.121 386.59 539.039 386.602 538.969 cv
386.609 538.902 386.621 538.848 386.641 538.805 cv
386.652 538.766 386.676 538.734 386.703 538.715 cv
386.73 538.699 386.762 538.691 386.801 538.687 cv
386.855 538.691 386.941 538.727 387.055 538.793 cv
387.164 538.867 387.301 538.945 387.469 539.023 cv
387.629 539.109 387.82 539.184 388.047 539.254 cv
388.266 539.324 388.523 539.359 388.82 539.359 cv
389.035 539.359 389.234 539.336 389.414 539.289 cv
389.59 539.242 389.742 539.176 389.871 539.082 cv
390 538.996 390.102 538.879 390.172 538.734 cv
390.242 538.598 390.277 538.43 390.277 538.234 cv
390.277 538.039 390.227 537.875 390.125 537.738 cv
390.023 537.605 389.887 537.484 389.723 537.379 cv
389.555 537.277 389.371 537.187 389.164 537.102 cv
388.953 537.023 388.738 536.937 388.52 536.848 cv
388.301 536.762 388.086 536.66 387.875 536.547 cv
387.664 536.437 387.473 536.305 387.309 536.141 cv
387.137 535.984 387.004 535.789 386.906 535.562 cv
386.801 535.34 386.75 535.074 386.754 534.762 cv
386.75 534.488 386.805 534.223 386.914 533.969 cv
387.02 533.719 387.18 533.5 387.395 533.309 cv
387.605 533.121 387.871 532.969 388.191 532.852 cv
388.512 532.738 388.883 532.68 389.313 532.68 cv
389.496 532.68 389.684 532.695 389.871 532.727 cv
390.055 532.758 390.223 532.797 390.379 532.844 cv
390.527 532.891 390.656 532.941 390.766 532.996 cv
390.867 533.051 390.949 533.102 391.008 533.141 cv
391.059 533.187 391.094 533.223 391.117 533.25 cv
391.133 533.281 391.148 533.316 391.156 533.352 cv
391.164 533.395 391.172 533.441 391.18 533.496 cv
391.188 533.555 391.191 533.625 391.191 533.707 cv
391.191 533.797 391.188 533.875 391.18 533.937 cv
391.172 534.008 391.156 534.059 391.141 534.098 cv
391.117 534.141 391.098 534.172 391.074 534.187 cv
391.047 534.207 391.016 534.215 390.988 534.215 cv
390.938 534.215 390.871 534.187 390.785 534.129 cv
390.695 534.074 390.582 534.012 390.441 533.945 cv
390.301 533.883 390.133 533.824 389.945 533.762 cv
389.754 533.707 389.539 533.676 389.297 533.676 cv
389.074 533.676 388.883 533.703 388.719 533.75 cv
388.551 533.805 388.414 533.875 388.309 533.961 cv
388.203 534.055 388.121 534.16 388.07 534.285 cv
388.012 534.41 387.984 534.547 387.988 534.691 cv
387.984 534.895 388.035 535.062 388.141 535.199 cv
388.242 535.34 388.379 535.461 388.547 535.562 cv
388.711 535.668 388.902 535.762 389.117 535.844 cv
389.328 535.93 389.543 536.016 389.766 536.102 cv
389.984 536.191 390.203 536.293 390.422 536.398 cv
390.637 536.508 390.828 536.637 390.996 536.793 cv
391.16 536.949 391.293 537.137 391.395 537.355 cv
391.492 537.574 391.543 537.836 391.547 538.133 cv
cp
f
173.898 12.41 mo
173.895 13.25 173.793 14 173.586 14.656 cv
173.379 15.32 173.07 15.879 172.66 16.336 cv
172.25 16.797 171.742 17.148 171.137 17.387 cv
170.531 17.629 169.832 17.746 169.039 17.75 cv
168.25 17.746 167.563 17.645 166.98 17.441 cv
166.395 17.238 165.906 16.926 165.52 16.504 cv
165.129 16.082 164.84 15.547 164.645 14.898 cv
164.449 14.25 164.352 13.48 164.355 12.59 cv
164.352 11.777 164.453 11.047 164.664 10.391 cv
164.867 9.742 165.176 9.18701 165.59 8.72699 cv
165.996 8.27301 166.504 7.922 167.113 7.67603 cv
167.715 7.43402 168.418 7.31201 169.223 7.30902 cv
169.984 7.31201 170.66 7.414 171.246 7.61298 cv
171.828 7.81598 172.316 8.125 172.711 8.547 cv
173.102 8.96899 173.398 9.5 173.598 10.141 cv
173.797 10.781 173.895 11.539 173.898 12.41 cv
cp
171.75 12.52 mo
171.746 11.992 171.703 11.512 171.625 11.078 cv
171.539 10.645 171.398 10.273 171.199 9.961 cv
170.996 9.65198 170.73 9.414 170.398 9.24597 cv
170.066 9.078 169.652 8.992 169.156 8.992 cv
168.648 8.992 168.227 9.09003 167.891 9.27698 cv
167.555 9.46899 167.281 9.71899 167.074 10.035 cv
166.863 10.355 166.715 10.727 166.633 11.148 cv
166.543 11.57 166.5 12.02 166.504 12.488 cv
166.5 13.043 166.543 13.539 166.629 13.977 cv
166.711 14.418 166.852 14.793 167.051 15.102 cv
167.246 15.414 167.512 15.648 167.844 15.812 cv
168.176 15.977 168.594 16.059 169.102 16.059 cv
169.602 16.059 170.02 15.965 170.359 15.777 cv
170.695 15.59 170.969 15.336 171.18 15.016 cv
171.383 14.695 171.531 14.32 171.621 13.891 cv
171.703 13.461 171.746 13.004 171.75 12.52 cv
cp
f
181.898 10.348 mo
181.895 10.375 181.895 10.406 181.895 10.441 cv
181.891 10.48 181.887 10.52 181.879 10.562 cv
181.871 10.605 181.859 10.656 181.848 10.711 cv
181.832 10.77 181.816 10.836 181.797 10.906 cv
179.711 17.195 li
179.684 17.285 179.648 17.359 179.605 17.41 cv
179.559 17.469 179.484 17.512 179.387 17.539 cv
179.281 17.57 179.145 17.586 178.973 17.602 cv
178.797 17.609 178.57 17.617 178.293 17.617 cv
178.016 17.617 177.789 17.609 177.617 17.598 cv
177.441 17.582 177.305 17.562 177.207 17.531 cv
177.105 17.504 177.035 17.461 176.992 17.402 cv
176.945 17.352 176.91 17.281 176.887 17.195 cv
174.801 10.906 li
174.77 10.805 174.742 10.711 174.727 10.629 cv
174.703 10.547 174.695 10.488 174.695 10.449 cv
174.691 10.418 174.688 10.383 174.691 10.348 cv
174.688 10.297 174.703 10.25 174.734 10.211 cv
174.762 10.172 174.813 10.141 174.887 10.113 cv
174.957 10.09 175.055 10.07 175.184 10.059 cv
175.309 10.051 175.469 10.047 175.664 10.043 cv
175.875 10.047 176.047 10.055 176.18 10.062 cv
176.305 10.078 176.41 10.094 176.488 10.117 cv
176.563 10.141 176.613 10.176 176.648 10.219 cv
176.676 10.266 176.703 10.32 176.727 10.379 cv
178.309 15.48 li
178.355 15.676 li
178.402 15.48 li
179.961 10.379 li
179.973 10.32 179.996 10.266 180.031 10.219 cv
180.063 10.176 180.117 10.141 180.191 10.117 cv
180.262 10.094 180.359 10.078 180.484 10.062 cv
180.605 10.055 180.766 10.047 180.965 10.043 cv
181.156 10.047 181.313 10.051 181.434 10.059 cv
181.555 10.07 181.648 10.09 181.719 10.113 cv
181.785 10.141 181.832 10.172 181.859 10.211 cv
181.883 10.25 181.895 10.297 181.898 10.348 cv
cp
f
189.375 13.629 mo
189.371 13.867 189.32 14.043 189.215 14.156 cv
189.105 14.273 188.957 14.332 188.777 14.328 cv
184.543 14.328 li
184.539 14.629 184.574 14.898 184.648 15.137 cv
184.715 15.379 184.828 15.582 184.984 15.75 cv
185.137 15.922 185.332 16.051 185.574 16.137 cv
185.813 16.227 186.102 16.27 186.445 16.27 cv
186.785 16.27 187.086 16.246 187.348 16.195 cv
187.605 16.148 187.832 16.094 188.023 16.031 cv
188.211 15.973 188.367 15.918 188.496 15.867 cv
188.617 15.82 188.719 15.797 188.801 15.793 cv
188.844 15.797 188.883 15.805 188.918 15.82 cv
188.945 15.84 188.973 15.871 188.992 15.918 cv
189.012 15.965 189.023 16.031 189.035 16.117 cv
189.039 16.203 189.043 16.312 189.047 16.441 cv
189.043 16.559 189.043 16.656 189.039 16.734 cv
189.031 16.816 189.023 16.883 189.016 16.937 cv
189.004 16.996 188.988 17.047 188.969 17.082 cv
188.949 17.125 188.922 17.16 188.891 17.195 cv
188.855 17.234 188.762 17.285 188.613 17.344 cv
188.457 17.41 188.266 17.473 188.035 17.527 cv
187.797 17.59 187.527 17.637 187.23 17.684 cv
186.926 17.723 186.605 17.746 186.266 17.75 cv
185.645 17.746 185.102 17.672 184.641 17.516 cv
184.172 17.363 183.785 17.125 183.477 16.809 cv
183.16 16.492 182.926 16.094 182.777 15.609 cv
182.621 15.129 182.547 14.562 182.551 13.906 cv
182.547 13.293 182.625 12.734 182.789 12.238 cv
182.945 11.742 183.18 11.324 183.492 10.977 cv
183.797 10.633 184.172 10.367 184.609 10.184 cv
185.047 10.004 185.539 9.914 186.094 9.90997 cv
186.672 9.914 187.172 10 187.586 10.168 cv
188 10.344 188.336 10.582 188.602 10.883 cv
188.863 11.187 189.059 11.547 189.188 11.961 cv
189.309 12.379 189.371 12.828 189.375 13.316 cv
cp
187.473 13.066 mo
187.484 12.516 187.375 12.082 187.141 11.77 cv
186.906 11.457 186.539 11.301 186.047 11.297 cv
185.797 11.301 185.582 11.348 185.398 11.437 cv
185.211 11.535 185.059 11.66 184.938 11.816 cv
184.813 11.977 184.719 12.164 184.656 12.379 cv
184.59 12.594 184.551 12.824 184.543 13.066 cv
cp
f
195.449 11 mo
195.449 11.191 195.441 11.344 195.434 11.461 cv
195.418 11.582 195.402 11.676 195.387 11.742 cv
195.363 11.812 195.336 11.859 195.305 11.883 cv
195.266 11.91 195.223 11.922 195.176 11.922 cv
195.129 11.922 195.082 11.914 195.035 11.895 cv
194.98 11.879 194.922 11.859 194.859 11.836 cv
194.789 11.816 194.719 11.797 194.645 11.777 cv
194.563 11.762 194.477 11.754 194.387 11.75 cv
194.273 11.754 194.164 11.773 194.059 11.816 cv
193.949 11.863 193.836 11.934 193.723 12.023 cv
193.602 12.117 193.48 12.242 193.355 12.395 cv
193.227 12.555 193.09 12.746 192.945 12.973 cv
192.945 17.305 li
192.941 17.359 192.926 17.402 192.898 17.441 cv
192.863 17.48 192.809 17.516 192.738 17.539 cv
192.66 17.566 192.563 17.582 192.438 17.598 cv
192.313 17.609 192.152 17.617 191.965 17.617 cv
191.77 17.617 191.613 17.609 191.488 17.598 cv
191.363 17.582 191.262 17.566 191.188 17.539 cv
191.109 17.516 191.055 17.48 191.027 17.441 cv
190.992 17.402 190.977 17.359 190.98 17.305 cv
190.98 10.355 li
190.977 10.309 190.992 10.262 191.02 10.219 cv
191.043 10.184 191.09 10.152 191.16 10.121 cv
191.227 10.098 191.313 10.078 191.422 10.062 cv
191.527 10.055 191.66 10.047 191.824 10.043 cv
191.988 10.047 192.125 10.055 192.234 10.062 cv
192.34 10.078 192.426 10.098 192.488 10.121 cv
192.547 10.152 192.59 10.184 192.617 10.219 cv
192.641 10.262 192.652 10.309 192.656 10.355 cv
192.656 11.219 li
192.836 10.961 193.008 10.75 193.172 10.578 cv
193.328 10.414 193.484 10.277 193.633 10.176 cv
193.777 10.078 193.922 10.012 194.066 9.96899 cv
194.211 9.93402 194.355 9.914 194.504 9.90997 cv
194.57 9.914 194.645 9.91803 194.723 9.922 cv
194.801 9.93402 194.879 9.94501 194.965 9.961 cv
195.043 9.97998 195.117 10 195.184 10.023 cv
195.242 10.047 195.289 10.074 195.32 10.098 cv
195.348 10.129 195.367 10.156 195.383 10.184 cv
195.395 10.219 195.406 10.262 195.418 10.312 cv
195.426 10.371 195.434 10.453 195.441 10.559 cv
195.445 10.668 195.449 10.816 195.449 11 cv
cp
f
202.207 17.328 mo
202.203 17.406 202.176 17.461 202.129 17.5 cv
202.074 17.543 201.992 17.57 201.883 17.59 cv
201.766 17.605 201.602 17.617 201.387 17.617 cv
201.148 17.617 200.977 17.605 200.875 17.59 cv
200.766 17.57 200.691 17.543 200.652 17.5 cv
200.605 17.461 200.586 17.406 200.586 17.328 cv
200.586 16.777 li
200.297 17.086 199.969 17.324 199.605 17.492 cv
199.238 17.664 198.832 17.746 198.387 17.75 cv
198.016 17.746 197.676 17.699 197.367 17.605 cv
197.059 17.512 196.793 17.371 196.566 17.176 cv
196.34 16.988 196.164 16.754 196.039 16.473 cv
195.914 16.195 195.852 15.867 195.855 15.488 cv
195.852 15.09 195.93 14.738 196.09 14.434 cv
196.246 14.137 196.484 13.891 196.801 13.695 cv
197.113 13.504 197.504 13.359 197.973 13.262 cv
198.441 13.172 198.984 13.125 199.602 13.121 cv
200.281 13.121 li
200.281 12.699 li
200.281 12.484 200.258 12.293 200.215 12.129 cv
200.168 11.969 200.094 11.832 199.996 11.719 cv
199.891 11.613 199.758 11.531 199.59 11.477 cv
199.418 11.426 199.207 11.402 198.965 11.398 cv
198.633 11.402 198.34 11.437 198.086 11.508 cv
197.824 11.582 197.598 11.664 197.402 11.75 cv
197.203 11.844 197.039 11.922 196.91 11.992 cv
196.773 12.066 196.664 12.105 196.586 12.102 cv
196.523 12.105 196.473 12.086 196.434 12.047 cv
196.387 12.012 196.352 11.961 196.324 11.891 cv
196.293 11.828 196.27 11.742 196.258 11.641 cv
196.238 11.543 196.23 11.434 196.234 11.312 cv
196.23 11.152 196.246 11.027 196.273 10.93 cv
196.297 10.84 196.344 10.754 196.422 10.676 cv
196.492 10.602 196.621 10.52 196.805 10.43 cv
196.984 10.34 197.195 10.254 197.441 10.176 cv
197.684 10.098 197.953 10.035 198.242 9.98401 cv
198.531 9.93701 198.828 9.914 199.137 9.90997 cv
199.68 9.914 200.145 9.96503 200.531 10.07 cv
200.918 10.18 201.238 10.344 201.488 10.562 cv
201.738 10.781 201.918 11.066 202.035 11.414 cv
202.145 11.766 202.203 12.18 202.207 12.652 cv
cp
200.281 14.352 mo
199.531 14.352 li
199.215 14.355 198.945 14.379 198.723 14.422 cv
198.496 14.473 198.313 14.543 198.176 14.633 cv
198.031 14.73 197.93 14.844 197.867 14.973 cv
197.801 15.109 197.766 15.258 197.77 15.426 cv
197.766 15.719 197.859 15.949 198.047 16.113 cv
198.23 16.281 198.488 16.363 198.816 16.363 cv
199.09 16.363 199.34 16.293 199.574 16.152 cv
199.801 16.012 200.039 15.809 200.281 15.535 cv
cp
f
206.129 17.305 mo
206.125 17.359 206.109 17.402 206.082 17.441 cv
206.047 17.48 205.992 17.516 205.922 17.539 cv
205.844 17.566 205.746 17.582 205.621 17.598 cv
205.496 17.609 205.336 17.617 205.148 17.617 cv
204.953 17.617 204.797 17.609 204.672 17.598 cv
204.547 17.582 204.445 17.566 204.371 17.539 cv
204.293 17.516 204.238 17.48 204.211 17.441 cv
204.176 17.402 204.16 17.359 204.164 17.305 cv
204.164 7.05902 li
204.16 7.008 204.176 6.961 204.211 6.91803 cv
204.238 6.87903 204.293 6.84399 204.371 6.81201 cv
204.445 6.78497 204.547 6.76599 204.672 6.74597 cv
204.797 6.73401 204.953 6.72699 205.148 6.72302 cv
205.336 6.72699 205.496 6.73401 205.621 6.74597 cv
205.746 6.76599 205.844 6.78497 205.922 6.81201 cv
205.992 6.84399 206.047 6.87903 206.082 6.91803 cv
206.109 6.961 206.125 7.008 206.129 7.05902 cv
cp
f
210.102 17.305 mo
210.098 17.359 210.082 17.402 210.055 17.441 cv
210.02 17.48 209.965 17.516 209.895 17.539 cv
209.816 17.566 209.719 17.582 209.594 17.598 cv
209.469 17.609 209.309 17.617 209.121 17.617 cv
208.926 17.617 208.77 17.609 208.645 17.598 cv
208.52 17.582 208.418 17.566 208.344 17.539 cv
208.266 17.516 208.211 17.48 208.184 17.441 cv
208.148 17.402 208.133 17.359 208.137 17.305 cv
208.137 7.05902 li
208.133 7.008 208.148 6.961 208.184 6.91803 cv
208.211 6.87903 208.266 6.84399 208.344 6.81201 cv
208.418 6.78497 208.52 6.76599 208.645 6.74597 cv
208.77 6.73401 208.926 6.72699 209.121 6.72302 cv
209.309 6.72699 209.469 6.73401 209.594 6.74597 cv
209.719 6.76599 209.816 6.78497 209.895 6.81201 cv
209.965 6.84399 210.02 6.87903 210.055 6.91803 cv
210.082 6.961 210.098 7.008 210.102 7.05902 cv
cp
f
223.27 17.305 mo
223.27 17.367 223.258 17.414 223.238 17.449 cv
223.219 17.492 223.172 17.523 223.094 17.547 cv
223.016 17.57 222.898 17.586 222.75 17.602 cv
222.594 17.609 222.391 17.617 222.133 17.617 cv
221.914 17.617 221.738 17.609 221.609 17.602 cv
221.48 17.586 221.379 17.57 221.305 17.543 cv
221.227 17.516 221.172 17.48 221.145 17.434 cv
221.109 17.395 221.086 17.34 221.066 17.273 cv
220.16 15.023 li
220.051 14.77 219.945 14.543 219.844 14.344 cv
219.734 14.148 219.621 13.984 219.496 13.852 cv
219.367 13.723 219.219 13.621 219.055 13.551 cv
218.887 13.484 218.695 13.453 218.48 13.449 cv
217.84 13.449 li
217.84 17.289 li
217.836 17.344 217.82 17.391 217.789 17.43 cv
217.754 17.473 217.699 17.508 217.621 17.531 cv
217.543 17.559 217.438 17.578 217.309 17.594 cv
217.176 17.609 217.012 17.617 216.813 17.617 cv
216.613 17.617 216.445 17.609 216.316 17.594 cv
216.18 17.578 216.074 17.559 216 17.531 cv
215.918 17.508 215.863 17.473 215.836 17.43 cv
215.801 17.391 215.785 17.344 215.789 17.289 cv
215.789 8.133 li
215.785 7.90601 215.844 7.742 215.965 7.63702 cv
216.078 7.539 216.223 7.48798 216.398 7.48401 cv
219.008 7.48401 li
219.27 7.48798 219.488 7.492 219.664 7.5 cv
219.832 7.51202 219.988 7.52301 220.133 7.539 cv
220.535 7.59802 220.898 7.69897 221.223 7.836 cv
221.547 7.97998 221.824 8.164 222.051 8.38702 cv
222.277 8.617 222.449 8.883 222.57 9.19098 cv
222.688 9.5 222.746 9.85498 222.75 10.254 cv
222.746 10.594 222.703 10.902 222.621 11.176 cv
222.531 11.457 222.406 11.703 222.242 11.922 cv
222.074 12.141 221.867 12.332 221.625 12.488 cv
221.379 12.652 221.102 12.781 220.793 12.879 cv
220.941 12.953 221.086 13.043 221.219 13.145 cv
221.352 13.254 221.473 13.379 221.59 13.523 cv
221.703 13.672 221.816 13.84 221.922 14.027 cv
222.023 14.219 222.125 14.434 222.227 14.672 cv
223.078 16.66 li
223.152 16.859 223.203 17 223.23 17.09 cv
223.254 17.184 223.27 17.258 223.27 17.305 cv
cp
220.629 10.465 mo
220.625 10.133 220.551 9.85199 220.402 9.62097 cv
220.25 9.39502 220.004 9.23401 219.664 9.13702 cv
219.559 9.11298 219.441 9.09003 219.309 9.07397 cv
219.176 9.05902 218.992 9.05103 218.758 9.05103 cv
217.84 9.05103 li
217.84 11.914 li
218.883 11.914 li
219.172 11.918 219.43 11.883 219.648 11.809 cv
219.867 11.742 220.047 11.641 220.191 11.512 cv
220.336 11.387 220.445 11.234 220.52 11.055 cv
220.59 10.879 220.625 10.684 220.629 10.465 cv
cp
f
231.25 17.305 mo
231.246 17.359 231.234 17.402 231.211 17.441 cv
231.184 17.48 231.137 17.516 231.074 17.539 cv
231.008 17.566 230.922 17.582 230.816 17.598 cv
230.711 17.609 230.578 17.617 230.418 17.617 cv
230.242 17.617 230.102 17.609 230 17.598 cv
229.891 17.582 229.809 17.566 229.746 17.539 cv
229.684 17.516 229.637 17.48 229.613 17.441 cv
229.582 17.402 229.57 17.359 229.574 17.305 cv
229.574 16.504 li
229.188 16.918 228.797 17.23 228.402 17.437 cv
228 17.645 227.59 17.746 227.168 17.75 cv
226.688 17.746 226.285 17.672 225.961 17.516 cv
225.637 17.363 225.375 17.148 225.176 16.879 cv
224.973 16.609 224.828 16.297 224.746 15.937 cv
224.656 15.582 224.613 15.141 224.617 14.609 cv
224.617 10.355 li
224.613 10.309 224.629 10.262 224.66 10.219 cv
224.688 10.184 224.738 10.152 224.816 10.121 cv
224.891 10.098 224.992 10.078 225.121 10.062 cv
225.246 10.055 225.402 10.047 225.594 10.043 cv
225.781 10.047 225.941 10.055 226.066 10.062 cv
226.191 10.078 226.289 10.098 226.367 10.121 cv
226.438 10.152 226.492 10.184 226.527 10.219 cv
226.555 10.262 226.57 10.309 226.574 10.355 cv
226.574 14.281 li
226.57 14.648 226.594 14.926 226.645 15.117 cv
226.688 15.309 226.758 15.473 226.859 15.609 cv
226.953 15.75 227.078 15.855 227.227 15.93 cv
227.375 16.008 227.547 16.047 227.742 16.043 cv
227.992 16.047 228.242 15.957 228.496 15.77 cv
228.746 15.59 229.016 15.324 229.301 14.977 cv
229.301 10.355 li
229.301 10.309 229.313 10.262 229.344 10.219 cv
229.367 10.184 229.422 10.152 229.5 10.121 cv
229.574 10.098 229.672 10.078 229.801 10.062 cv
229.922 10.055 230.082 10.047 230.277 10.043 cv
230.469 10.047 230.625 10.055 230.75 10.062 cv
230.871 10.078 230.973 10.098 231.047 10.121 cv
231.117 10.152 231.168 10.184 231.203 10.219 cv
231.23 10.262 231.246 10.309 231.25 10.355 cv
cp
f
239.867 17.305 mo
239.863 17.359 239.848 17.402 239.82 17.441 cv
239.785 17.48 239.734 17.516 239.664 17.539 cv
239.59 17.566 239.488 17.582 239.363 17.598 cv
239.234 17.609 239.078 17.617 238.895 17.617 cv
238.699 17.617 238.539 17.609 238.414 17.598 cv
238.285 17.582 238.184 17.566 238.113 17.539 cv
238.035 17.516 237.984 17.48 237.957 17.441 cv
237.922 17.402 237.906 17.359 237.91 17.305 cv
237.91 13.34 li
237.906 13.004 237.883 12.738 237.836 12.543 cv
237.785 12.352 237.711 12.187 237.621 12.051 cv
237.527 11.914 237.41 11.809 237.262 11.73 cv
237.113 11.656 236.938 11.617 236.742 11.617 cv
236.488 11.617 236.238 11.711 235.984 11.891 cv
235.73 12.074 235.465 12.336 235.191 12.684 cv
235.191 17.305 li
235.188 17.359 235.172 17.402 235.145 17.441 cv
235.109 17.48 235.055 17.516 234.984 17.539 cv
234.906 17.566 234.809 17.582 234.684 17.598 cv
234.559 17.609 234.398 17.617 234.211 17.617 cv
234.016 17.617 233.859 17.609 233.734 17.598 cv
233.609 17.582 233.508 17.566 233.434 17.539 cv
233.355 17.516 233.301 17.48 233.273 17.441 cv
233.238 17.402 233.223 17.359 233.227 17.305 cv
233.227 10.355 li
233.223 10.309 233.238 10.262 233.266 10.219 cv
233.289 10.184 233.336 10.152 233.406 10.121 cv
233.473 10.098 233.559 10.078 233.668 10.062 cv
233.773 10.055 233.906 10.047 234.07 10.043 cv
234.234 10.047 234.371 10.055 234.48 10.062 cv
234.586 10.078 234.672 10.098 234.734 10.121 cv
234.793 10.152 234.836 10.184 234.863 10.219 cv
234.887 10.262 234.898 10.309 234.902 10.355 cv
234.902 11.156 li
235.285 10.746 235.676 10.434 236.074 10.223 cv
236.469 10.016 236.887 9.914 237.32 9.90997 cv
237.789 9.914 238.188 9.992 238.516 10.145 cv
238.84 10.305 239.102 10.516 239.301 10.781 cv
239.5 11.051 239.645 11.363 239.734 11.719 cv
239.82 12.078 239.863 12.508 239.867 13.012 cv
cp
f
245.738 16.621 mo
245.738 16.848 245.723 17.023 245.695 17.145 cv
245.664 17.27 245.625 17.355 245.582 17.402 cv
245.531 17.453 245.465 17.496 245.375 17.535 cv
245.281 17.574 245.172 17.605 245.055 17.637 cv
244.93 17.66 244.797 17.684 244.656 17.703 cv
244.512 17.715 244.371 17.723 244.227 17.727 cv
243.836 17.723 243.496 17.672 243.211 17.578 cv
242.926 17.477 242.691 17.328 242.504 17.121 cv
242.316 16.918 242.176 16.66 242.09 16.348 cv
241.996 16.039 241.953 15.668 241.957 15.238 cv
241.957 11.68 li
241.125 11.68 li
241.023 11.684 240.949 11.621 240.898 11.496 cv
240.844 11.375 240.816 11.172 240.82 10.883 cv
240.816 10.734 240.824 10.605 240.84 10.504 cv
240.852 10.402 240.871 10.32 240.898 10.258 cv
240.922 10.199 240.953 10.156 240.996 10.129 cv
241.031 10.105 241.078 10.094 241.133 10.09 cv
241.957 10.09 li
241.957 8.539 li
241.953 8.492 241.969 8.44501 242 8.39801 cv
242.027 8.35901 242.078 8.32397 242.156 8.29303 cv
242.23 8.27002 242.332 8.24597 242.461 8.22998 cv
242.586 8.21899 242.742 8.21503 242.934 8.211 cv
243.121 8.21503 243.281 8.21899 243.41 8.22998 cv
243.535 8.24597 243.637 8.27002 243.711 8.29303 cv
243.781 8.32397 243.832 8.35901 243.867 8.39801 cv
243.895 8.44501 243.91 8.492 243.914 8.539 cv
243.914 10.09 li
245.426 10.09 li
245.477 10.094 245.523 10.105 245.563 10.129 cv
245.602 10.156 245.633 10.199 245.66 10.258 cv
245.684 10.32 245.703 10.402 245.719 10.504 cv
245.73 10.605 245.738 10.734 245.738 10.883 cv
245.738 11.172 245.711 11.375 245.66 11.496 cv
245.605 11.621 245.531 11.684 245.434 11.68 cv
243.914 11.68 li
243.914 14.945 li
243.91 15.324 243.969 15.609 244.094 15.797 cv
244.211 15.988 244.426 16.082 244.73 16.082 cv
244.832 16.082 244.926 16.074 245.012 16.055 cv
245.094 16.039 245.168 16.02 245.234 15.992 cv
245.297 15.973 245.352 15.949 245.398 15.93 cv
245.441 15.914 245.48 15.906 245.52 15.902 cv
245.547 15.906 245.578 15.914 245.609 15.93 cv
245.637 15.949 245.656 15.988 245.676 16.039 cv
245.688 16.098 245.703 16.172 245.719 16.262 cv
245.73 16.359 245.738 16.477 245.738 16.621 cv
cp
f
249.125 17.305 mo
249.121 17.359 249.105 17.402 249.078 17.441 cv
249.043 17.48 248.988 17.516 248.918 17.539 cv
248.84 17.566 248.742 17.582 248.617 17.598 cv
248.492 17.609 248.332 17.617 248.145 17.617 cv
247.949 17.617 247.793 17.609 247.668 17.598 cv
247.543 17.582 247.441 17.566 247.367 17.539 cv
247.289 17.516 247.234 17.48 247.207 17.441 cv
247.172 17.402 247.156 17.359 247.16 17.305 cv
247.16 10.371 li
247.156 10.32 247.172 10.273 247.207 10.234 cv
247.234 10.195 247.289 10.164 247.367 10.133 cv
247.441 10.109 247.543 10.086 247.668 10.066 cv
247.793 10.055 247.949 10.047 248.145 10.043 cv
248.332 10.047 248.492 10.055 248.617 10.066 cv
248.742 10.086 248.84 10.109 248.918 10.133 cv
248.988 10.164 249.043 10.195 249.078 10.234 cv
249.105 10.273 249.121 10.32 249.125 10.371 cv
cp
249.273 8 mo
249.273 8.39801 249.191 8.672 249.031 8.82001 cv
248.867 8.97302 248.57 9.047 248.137 9.04303 cv
247.691 9.047 247.391 8.97302 247.242 8.828 cv
247.086 8.68402 247.012 8.422 247.012 8.039 cv
247.012 7.64502 247.09 7.37097 247.25 7.21899 cv
247.406 7.06598 247.707 6.98798 248.152 6.98798 cv
248.586 6.98798 248.883 7.06201 249.039 7.211 cv
249.195 7.35901 249.273 7.625 249.273 8 cv
cp
f
262.145 17.305 mo
262.141 17.359 262.125 17.402 262.098 17.441 cv
262.063 17.48 262.012 17.516 261.941 17.539 cv
261.867 17.566 261.766 17.582 261.645 17.598 cv
261.52 17.609 261.363 17.617 261.172 17.617 cv
260.973 17.617 260.813 17.609 260.688 17.598 cv
260.563 17.582 260.461 17.566 260.387 17.539 cv
260.309 17.516 260.258 17.48 260.23 17.441 cv
260.203 17.402 260.188 17.359 260.191 17.305 cv
260.191 13.184 li
260.188 12.953 260.168 12.738 260.125 12.543 cv
260.078 12.352 260.008 12.187 259.922 12.051 cv
259.828 11.914 259.715 11.809 259.578 11.73 cv
259.438 11.656 259.273 11.617 259.082 11.617 cv
258.848 11.617 258.609 11.711 258.371 11.891 cv
258.133 12.074 257.875 12.336 257.594 12.684 cv
257.594 17.305 li
257.594 17.359 257.578 17.402 257.547 17.441 cv
257.516 17.48 257.461 17.516 257.387 17.539 cv
257.309 17.566 257.207 17.582 257.086 17.598 cv
256.961 17.609 256.809 17.617 256.621 17.617 cv
256.426 17.617 256.266 17.609 256.145 17.598 cv
256.016 17.582 255.914 17.566 255.844 17.539 cv
255.766 17.516 255.715 17.48 255.684 17.441 cv
255.652 17.402 255.637 17.359 255.637 17.305 cv
255.637 13.184 li
255.637 12.953 255.613 12.738 255.57 12.543 cv
255.527 12.352 255.461 12.187 255.375 12.051 cv
255.281 11.914 255.168 11.809 255.031 11.73 cv
254.887 11.656 254.723 11.617 254.539 11.617 cv
254.297 11.617 254.059 11.711 253.82 11.891 cv
253.582 12.074 253.324 12.336 253.051 12.684 cv
253.051 17.305 li
253.047 17.359 253.031 17.402 253.004 17.441 cv
252.969 17.48 252.914 17.516 252.844 17.539 cv
252.766 17.566 252.668 17.582 252.543 17.598 cv
252.418 17.609 252.258 17.617 252.07 17.617 cv
251.875 17.617 251.719 17.609 251.594 17.598 cv
251.469 17.582 251.367 17.566 251.293 17.539 cv
251.215 17.516 251.16 17.48 251.133 17.441 cv
251.098 17.402 251.082 17.359 251.086 17.305 cv
251.086 10.355 li
251.082 10.309 251.098 10.262 251.125 10.219 cv
251.148 10.184 251.195 10.152 251.266 10.121 cv
251.332 10.098 251.418 10.078 251.527 10.062 cv
251.633 10.055 251.766 10.047 251.93 10.043 cv
252.094 10.047 252.23 10.055 252.34 10.062 cv
252.445 10.078 252.531 10.098 252.594 10.121 cv
252.652 10.152 252.695 10.184 252.723 10.219 cv
252.746 10.262 252.758 10.309 252.762 10.355 cv
252.762 11.156 li
253.145 10.746 253.527 10.434 253.91 10.223 cv
254.289 10.016 254.691 9.914 255.109 9.90997 cv
255.395 9.914 255.648 9.94098 255.879 10 cv
256.105 10.062 256.313 10.148 256.492 10.258 cv
256.672 10.371 256.824 10.508 256.953 10.66 cv
257.082 10.816 257.191 10.988 257.281 11.18 cv
257.488 10.957 257.691 10.766 257.895 10.605 cv
258.09 10.445 258.289 10.312 258.484 10.211 cv
258.68 10.109 258.875 10.035 259.07 9.98401 cv
259.266 9.93701 259.465 9.914 259.668 9.90997 cv
260.129 9.914 260.516 9.992 260.836 10.145 cv
261.148 10.305 261.406 10.516 261.602 10.781 cv
261.797 11.051 261.934 11.363 262.02 11.719 cv
262.098 12.078 262.141 12.457 262.145 12.855 cv
cp
f
270.484 13.629 mo
270.48 13.867 270.43 14.043 270.324 14.156 cv
270.215 14.273 270.066 14.332 269.887 14.328 cv
265.652 14.328 li
265.648 14.629 265.684 14.898 265.758 15.137 cv
265.824 15.379 265.938 15.582 266.094 15.75 cv
266.246 15.922 266.441 16.051 266.684 16.137 cv
266.922 16.227 267.211 16.27 267.555 16.27 cv
267.895 16.27 268.195 16.246 268.457 16.195 cv
268.715 16.148 268.941 16.094 269.133 16.031 cv
269.32 15.973 269.477 15.918 269.605 15.867 cv
269.727 15.82 269.828 15.797 269.91 15.793 cv
269.953 15.797 269.992 15.805 270.027 15.82 cv
270.055 15.84 270.082 15.871 270.102 15.918 cv
270.121 15.965 270.133 16.031 270.145 16.117 cv
270.148 16.203 270.152 16.312 270.156 16.441 cv
270.152 16.559 270.152 16.656 270.148 16.734 cv
270.141 16.816 270.133 16.883 270.125 16.937 cv
270.113 16.996 270.098 17.047 270.078 17.082 cv
270.059 17.125 270.031 17.16 270 17.195 cv
269.965 17.234 269.871 17.285 269.723 17.344 cv
269.566 17.41 269.375 17.473 269.145 17.527 cv
268.906 17.59 268.637 17.637 268.34 17.684 cv
268.035 17.723 267.715 17.746 267.375 17.75 cv
266.754 17.746 266.211 17.672 265.75 17.516 cv
265.281 17.363 264.895 17.125 264.586 16.809 cv
264.27 16.492 264.035 16.094 263.887 15.609 cv
263.73 15.129 263.656 14.562 263.66 13.906 cv
263.656 13.293 263.734 12.734 263.898 12.238 cv
264.055 11.742 264.289 11.324 264.602 10.977 cv
264.906 10.633 265.281 10.367 265.719 10.184 cv
266.156 10.004 266.648 9.914 267.203 9.90997 cv
267.781 9.914 268.281 10 268.695 10.168 cv
269.109 10.344 269.445 10.582 269.711 10.883 cv
269.973 11.187 270.168 11.547 270.297 11.961 cv
270.418 12.379 270.48 12.828 270.484 13.316 cv
cp
268.582 13.066 mo
268.594 12.516 268.484 12.082 268.25 11.77 cv
268.016 11.457 267.648 11.301 267.156 11.297 cv
266.906 11.301 266.691 11.348 266.508 11.437 cv
266.32 11.535 266.168 11.66 266.047 11.816 cv
265.922 11.977 265.828 12.164 265.766 12.379 cv
265.699 12.594 265.66 12.824 265.652 13.066 cv
cp
f
276.984 15.34 mo
276.98 15.738 276.906 16.086 276.762 16.387 cv
276.613 16.687 276.406 16.941 276.137 17.141 cv
275.863 17.348 275.543 17.496 275.176 17.598 cv
274.809 17.695 274.406 17.746 273.977 17.75 cv
273.711 17.746 273.465 17.727 273.23 17.691 cv
272.996 17.648 272.785 17.602 272.598 17.543 cv
272.41 17.484 272.254 17.422 272.129 17.359 cv
272.004 17.297 271.91 17.238 271.855 17.184 cv
271.797 17.129 271.754 17.047 271.727 16.93 cv
271.691 16.816 271.676 16.641 271.68 16.41 cv
271.676 16.262 271.684 16.141 271.695 16.047 cv
271.703 15.957 271.719 15.887 271.742 15.828 cv
271.762 15.777 271.785 15.738 271.82 15.719 cv
271.848 15.703 271.887 15.695 271.934 15.691 cv
271.988 15.695 272.074 15.727 272.188 15.789 cv
272.297 15.855 272.434 15.93 272.605 16.004 cv
272.77 16.086 272.965 16.156 273.184 16.223 cv
273.402 16.293 273.652 16.328 273.938 16.324 cv
274.113 16.328 274.27 16.309 274.41 16.27 cv
274.543 16.234 274.664 16.184 274.77 16.113 cv
274.867 16.047 274.941 15.961 274.996 15.855 cv
275.043 15.754 275.07 15.633 275.074 15.496 cv
275.07 15.34 275.023 15.207 274.93 15.098 cv
274.836 14.988 274.707 14.891 274.551 14.805 cv
274.387 14.723 274.207 14.645 274.012 14.57 cv
273.809 14.5 273.605 14.422 273.395 14.328 cv
273.184 14.242 272.977 14.141 272.781 14.023 cv
272.578 13.914 272.398 13.773 272.242 13.605 cv
272.078 13.441 271.953 13.242 271.859 13.004 cv
271.766 12.773 271.719 12.492 271.719 12.16 cv
271.719 11.832 271.781 11.527 271.91 11.246 cv
272.039 10.973 272.227 10.734 272.473 10.535 cv
272.715 10.34 273.012 10.187 273.363 10.074 cv
273.711 9.96899 274.105 9.914 274.547 9.90997 cv
274.762 9.914 274.973 9.92999 275.18 9.95697 cv
275.383 9.992 275.57 10.031 275.738 10.074 cv
275.902 10.125 276.043 10.176 276.16 10.227 cv
276.273 10.285 276.355 10.332 276.406 10.367 cv
276.453 10.41 276.488 10.449 276.512 10.484 cv
276.531 10.527 276.543 10.574 276.555 10.625 cv
276.563 10.68 276.574 10.746 276.582 10.824 cv
276.59 10.91 276.594 11.008 276.594 11.125 cv
276.594 11.266 276.59 11.383 276.582 11.469 cv
276.574 11.562 276.559 11.633 276.543 11.68 cv
276.523 11.734 276.5 11.77 276.473 11.785 cv
276.438 11.809 276.402 11.816 276.363 11.812 cv
276.313 11.816 276.238 11.789 276.145 11.73 cv
276.043 11.68 275.922 11.621 275.773 11.555 cv
275.625 11.496 275.453 11.437 275.258 11.379 cv
275.063 11.328 274.84 11.301 274.594 11.297 cv
274.414 11.301 274.262 11.32 274.133 11.352 cv
274 11.391 273.891 11.441 273.813 11.508 cv
273.727 11.578 273.664 11.656 273.625 11.746 cv
273.578 11.84 273.559 11.937 273.563 12.039 cv
273.559 12.199 273.609 12.336 273.711 12.441 cv
273.809 12.555 273.938 12.648 274.102 12.73 cv
274.262 12.816 274.445 12.895 274.652 12.965 cv
274.855 13.039 275.063 13.121 275.273 13.203 cv
275.48 13.293 275.688 13.391 275.898 13.504 cv
276.102 13.617 276.285 13.758 276.445 13.922 cv
276.605 14.09 276.734 14.289 276.836 14.52 cv
276.93 14.754 276.98 15.027 276.984 15.34 cv
cp
f
292.93 10.34 mo
292.926 10.398 292.918 10.469 292.906 10.551 cv
292.887 10.633 292.859 10.754 292.82 10.906 cv
290.965 17.195 li
290.938 17.285 290.902 17.359 290.863 17.41 cv
290.82 17.469 290.758 17.512 290.672 17.539 cv
290.586 17.57 290.461 17.586 290.305 17.602 cv
290.141 17.609 289.938 17.617 289.688 17.617 cv
289.43 17.617 289.219 17.609 289.063 17.598 cv
288.898 17.582 288.773 17.562 288.684 17.531 cv
288.59 17.504 288.523 17.461 288.484 17.402 cv
288.441 17.352 288.41 17.281 288.391 17.195 cv
287.223 12.973 li
287.207 12.902 li
287.191 12.973 li
286.117 17.195 li
286.094 17.285 286.063 17.359 286.027 17.41 cv
285.984 17.469 285.918 17.512 285.828 17.539 cv
285.73 17.57 285.605 17.586 285.445 17.602 cv
285.285 17.609 285.078 17.617 284.824 17.617 cv
284.563 17.617 284.352 17.609 284.195 17.598 cv
284.035 17.582 283.91 17.562 283.82 17.531 cv
283.727 17.504 283.66 17.461 283.621 17.402 cv
283.578 17.352 283.547 17.281 283.531 17.195 cv
281.691 10.906 li
281.641 10.758 281.613 10.641 281.602 10.555 cv
281.586 10.473 281.578 10.398 281.582 10.34 cv
281.578 10.289 281.594 10.246 281.625 10.203 cv
281.652 10.168 281.703 10.137 281.781 10.109 cv
281.855 10.09 281.957 10.07 282.082 10.059 cv
282.207 10.051 282.367 10.047 282.563 10.043 cv
282.77 10.047 282.938 10.051 283.07 10.059 cv
283.199 10.07 283.301 10.09 283.375 10.113 cv
283.445 10.141 283.496 10.176 283.527 10.219 cv
283.555 10.266 283.578 10.32 283.594 10.379 cv
284.973 15.48 li
284.988 15.574 li
285.004 15.48 li
286.297 10.379 li
286.309 10.32 286.336 10.266 286.371 10.219 cv
286.402 10.176 286.453 10.141 286.523 10.113 cv
286.59 10.09 286.684 10.07 286.805 10.059 cv
286.926 10.051 287.082 10.047 287.277 10.043 cv
287.469 10.047 287.625 10.055 287.746 10.062 cv
287.863 10.078 287.957 10.094 288.031 10.117 cv
288.098 10.141 288.148 10.172 288.18 10.211 cv
288.207 10.25 288.23 10.297 288.246 10.348 cv
289.633 15.488 li
289.656 15.574 li
289.672 15.48 li
290.996 10.379 li
291.004 10.32 291.027 10.266 291.059 10.219 cv
291.09 10.176 291.141 10.141 291.215 10.113 cv
291.285 10.09 291.383 10.07 291.508 10.059 cv
291.629 10.051 291.789 10.047 291.984 10.043 cv
292.176 10.047 292.332 10.051 292.457 10.059 cv
292.578 10.07 292.676 10.09 292.746 10.109 cv
292.816 10.137 292.863 10.168 292.891 10.203 cv
292.914 10.246 292.926 10.289 292.93 10.34 cv
cp
f
296.145 17.305 mo
296.141 17.359 296.125 17.402 296.098 17.441 cv
296.063 17.48 296.008 17.516 295.938 17.539 cv
295.859 17.566 295.762 17.582 295.637 17.598 cv
295.512 17.609 295.352 17.617 295.164 17.617 cv
294.969 17.617 294.813 17.609 294.688 17.598 cv
294.563 17.582 294.461 17.566 294.387 17.539 cv
294.309 17.516 294.254 17.48 294.227 17.441 cv
294.191 17.402 294.176 17.359 294.18 17.305 cv
294.18 10.371 li
294.176 10.32 294.191 10.273 294.227 10.234 cv
294.254 10.195 294.309 10.164 294.387 10.133 cv
294.461 10.109 294.563 10.086 294.688 10.066 cv
294.813 10.055 294.969 10.047 295.164 10.043 cv
295.352 10.047 295.512 10.055 295.637 10.066 cv
295.762 10.086 295.859 10.109 295.938 10.133 cv
296.008 10.164 296.063 10.195 296.098 10.234 cv
296.125 10.273 296.141 10.32 296.145 10.371 cv
cp
296.293 8 mo
296.293 8.39801 296.211 8.672 296.051 8.82001 cv
295.887 8.97302 295.59 9.047 295.156 9.04303 cv
294.711 9.047 294.41 8.97302 294.262 8.828 cv
294.105 8.68402 294.031 8.422 294.031 8.039 cv
294.031 7.64502 294.109 7.37097 294.27 7.21899 cv
294.426 7.06598 294.727 6.98798 295.172 6.98798 cv
295.605 6.98798 295.902 7.06201 296.059 7.211 cv
296.215 7.35901 296.293 7.625 296.293 8 cv
cp
f
302.223 16.621 mo
302.223 16.848 302.207 17.023 302.18 17.145 cv
302.148 17.27 302.109 17.355 302.066 17.402 cv
302.016 17.453 301.949 17.496 301.859 17.535 cv
301.766 17.574 301.656 17.605 301.539 17.637 cv
301.414 17.66 301.281 17.684 301.141 17.703 cv
300.996 17.715 300.855 17.723 300.711 17.727 cv
300.32 17.723 299.98 17.672 299.695 17.578 cv
299.41 17.477 299.176 17.328 298.988 17.121 cv
298.801 16.918 298.66 16.66 298.574 16.348 cv
298.48 16.039 298.438 15.668 298.441 15.238 cv
298.441 11.68 li
297.609 11.68 li
297.508 11.684 297.434 11.621 297.383 11.496 cv
297.328 11.375 297.301 11.172 297.305 10.883 cv
297.301 10.734 297.309 10.605 297.324 10.504 cv
297.336 10.402 297.355 10.32 297.383 10.258 cv
297.406 10.199 297.438 10.156 297.48 10.129 cv
297.516 10.105 297.563 10.094 297.617 10.09 cv
298.441 10.09 li
298.441 8.539 li
298.438 8.492 298.453 8.44501 298.484 8.39801 cv
298.512 8.35901 298.563 8.32397 298.641 8.29303 cv
298.715 8.27002 298.816 8.24597 298.945 8.22998 cv
299.07 8.21899 299.227 8.21503 299.418 8.211 cv
299.605 8.21503 299.766 8.21899 299.895 8.22998 cv
300.02 8.24597 300.121 8.27002 300.195 8.29303 cv
300.266 8.32397 300.316 8.35901 300.352 8.39801 cv
300.379 8.44501 300.395 8.492 300.398 8.539 cv
300.398 10.09 li
301.91 10.09 li
301.961 10.094 302.008 10.105 302.047 10.129 cv
302.086 10.156 302.117 10.199 302.145 10.258 cv
302.168 10.32 302.188 10.402 302.203 10.504 cv
302.215 10.605 302.223 10.734 302.223 10.883 cv
302.223 11.172 302.195 11.375 302.145 11.496 cv
302.09 11.621 302.016 11.684 301.918 11.68 cv
300.398 11.68 li
300.398 14.945 li
300.395 15.324 300.453 15.609 300.578 15.797 cv
300.695 15.988 300.91 16.082 301.215 16.082 cv
301.316 16.082 301.41 16.074 301.496 16.055 cv
301.578 16.039 301.652 16.02 301.719 15.992 cv
301.781 15.973 301.836 15.949 301.883 15.93 cv
301.926 15.914 301.965 15.906 302.004 15.902 cv
302.031 15.906 302.063 15.914 302.094 15.93 cv
302.121 15.949 302.141 15.988 302.16 16.039 cv
302.172 16.098 302.188 16.172 302.203 16.262 cv
302.215 16.359 302.223 16.477 302.223 16.621 cv
cp
f
310.281 17.305 mo
310.277 17.359 310.262 17.402 310.234 17.441 cv
310.199 17.48 310.148 17.516 310.078 17.539 cv
310.004 17.566 309.902 17.582 309.777 17.598 cv
309.648 17.609 309.492 17.617 309.309 17.617 cv
309.113 17.617 308.953 17.609 308.828 17.598 cv
308.699 17.582 308.598 17.566 308.527 17.539 cv
308.449 17.516 308.398 17.48 308.371 17.441 cv
308.336 17.402 308.32 17.359 308.324 17.305 cv
308.324 13.34 li
308.32 13.004 308.297 12.738 308.25 12.543 cv
308.199 12.352 308.125 12.187 308.035 12.051 cv
307.941 11.914 307.824 11.809 307.676 11.73 cv
307.527 11.656 307.352 11.617 307.156 11.617 cv
306.902 11.617 306.652 11.711 306.398 11.891 cv
306.145 12.074 305.879 12.336 305.605 12.684 cv
305.605 17.305 li
305.602 17.359 305.586 17.402 305.559 17.441 cv
305.523 17.48 305.469 17.516 305.398 17.539 cv
305.32 17.566 305.223 17.582 305.098 17.598 cv
304.973 17.609 304.813 17.617 304.625 17.617 cv
304.43 17.617 304.273 17.609 304.148 17.598 cv
304.023 17.582 303.922 17.566 303.848 17.539 cv
303.77 17.516 303.715 17.48 303.688 17.441 cv
303.652 17.402 303.637 17.359 303.641 17.305 cv
303.641 7.05902 li
303.637 7.008 303.652 6.961 303.688 6.91803 cv
303.715 6.87903 303.77 6.84399 303.848 6.81201 cv
303.922 6.78497 304.023 6.76599 304.148 6.74597 cv
304.273 6.73401 304.43 6.72699 304.625 6.72302 cv
304.813 6.72699 304.973 6.73401 305.098 6.74597 cv
305.223 6.76599 305.32 6.78497 305.398 6.81201 cv
305.469 6.84399 305.523 6.87903 305.559 6.91803 cv
305.586 6.961 305.602 7.008 305.605 7.05902 cv
305.605 10.898 li
305.941 10.57 306.285 10.324 306.637 10.156 cv
306.984 9.99597 307.352 9.914 307.734 9.90997 cv
308.203 9.914 308.602 9.992 308.93 10.145 cv
309.254 10.305 309.516 10.516 309.715 10.785 cv
309.914 11.055 310.059 11.371 310.148 11.73 cv
310.234 12.094 310.277 12.531 310.281 13.043 cv
cp
f
321.645 8.328 mo
321.641 8.48798 321.637 8.617 321.625 8.72302 cv
321.609 8.83197 321.586 8.91803 321.563 8.97699 cv
321.531 9.039 321.5 9.086 321.465 9.11298 cv
321.426 9.14801 321.383 9.164 321.34 9.15997 cv
318.043 9.15997 li
318.043 11.875 li
321.137 11.875 li
321.18 11.875 321.223 11.891 321.262 11.914 cv
321.297 11.945 321.328 11.988 321.359 12.047 cv
321.387 12.109 321.406 12.191 321.422 12.293 cv
321.43 12.398 321.438 12.527 321.441 12.684 cv
321.438 12.84 321.43 12.973 321.422 13.074 cv
321.406 13.184 321.387 13.27 321.359 13.332 cv
321.328 13.402 321.297 13.449 321.262 13.477 cv
321.223 13.508 321.18 13.523 321.137 13.52 cv
318.043 13.52 li
318.043 17.273 li
318.039 17.332 318.023 17.383 317.996 17.422 cv
317.961 17.469 317.906 17.504 317.828 17.527 cv
317.746 17.559 317.641 17.578 317.512 17.594 cv
317.379 17.609 317.211 17.617 317.016 17.617 cv
316.813 17.617 316.648 17.609 316.52 17.594 cv
316.383 17.578 316.277 17.559 316.203 17.527 cv
316.121 17.504 316.066 17.469 316.035 17.422 cv
316 17.383 315.98 17.332 315.984 17.273 cv
315.984 8.133 li
315.98 7.90601 316.039 7.742 316.16 7.63702 cv
316.273 7.539 316.418 7.48798 316.594 7.48401 cv
321.34 7.48401 li
321.383 7.48798 321.426 7.5 321.465 7.52698 cv
321.5 7.55902 321.531 7.60498 321.563 7.66803 cv
321.586 7.73401 321.609 7.82397 321.625 7.92999 cv
321.637 8.04303 321.641 8.17603 321.645 8.328 cv
cp
f
329.984 13.758 mo
329.98 14.355 329.902 14.898 329.75 15.383 cv
329.59 15.875 329.355 16.293 329.039 16.645 cv
328.723 16.996 328.324 17.27 327.848 17.461 cv
327.367 17.652 326.809 17.746 326.172 17.75 cv
325.551 17.746 325.012 17.664 324.559 17.492 cv
324.098 17.324 323.719 17.074 323.422 16.746 cv
323.117 16.422 322.895 16.02 322.75 15.539 cv
322.605 15.062 322.535 14.516 322.535 13.898 cv
322.535 13.309 322.613 12.77 322.77 12.277 cv
322.926 11.789 323.164 11.367 323.484 11.016 cv
323.801 10.668 324.195 10.395 324.672 10.199 cv
325.145 10.008 325.703 9.914 326.344 9.90997 cv
326.969 9.914 327.508 9.99597 327.965 10.164 cv
328.422 10.336 328.801 10.586 329.098 10.91 cv
329.395 11.238 329.617 11.641 329.766 12.117 cv
329.91 12.598 329.98 13.145 329.984 13.758 cv
cp
327.965 13.836 mo
327.961 13.5 327.934 13.184 327.883 12.891 cv
327.824 12.605 327.73 12.355 327.605 12.141 cv
327.473 11.93 327.301 11.762 327.09 11.641 cv
326.871 11.523 326.602 11.465 326.273 11.461 cv
325.984 11.465 325.73 11.52 325.512 11.621 cv
325.293 11.73 325.113 11.887 324.973 12.09 cv
324.832 12.297 324.727 12.543 324.656 12.828 cv
324.586 13.121 324.551 13.449 324.551 13.812 cv
324.551 14.16 324.578 14.477 324.637 14.762 cv
324.691 15.055 324.785 15.305 324.914 15.516 cv
325.039 15.73 325.211 15.895 325.434 16.008 cv
325.648 16.129 325.918 16.187 326.242 16.184 cv
326.535 16.187 326.793 16.133 327.016 16.023 cv
327.23 15.918 327.41 15.766 327.551 15.559 cv
327.691 15.359 327.793 15.113 327.863 14.824 cv
327.926 14.539 327.961 14.211 327.965 13.836 cv
cp
f
338.168 17.305 mo
338.164 17.359 338.152 17.402 338.129 17.441 cv
338.102 17.48 338.055 17.516 337.992 17.539 cv
337.926 17.566 337.84 17.582 337.734 17.598 cv
337.629 17.609 337.496 17.617 337.336 17.617 cv
337.16 17.617 337.02 17.609 336.918 17.598 cv
336.809 17.582 336.727 17.566 336.664 17.539 cv
336.602 17.516 336.555 17.48 336.531 17.441 cv
336.5 17.402 336.488 17.359 336.492 17.305 cv
336.492 16.504 li
336.105 16.918 335.715 17.23 335.32 17.437 cv
334.918 17.645 334.508 17.746 334.086 17.75 cv
333.605 17.746 333.203 17.672 332.879 17.516 cv
332.555 17.363 332.293 17.148 332.094 16.879 cv
331.891 16.609 331.746 16.297 331.664 15.937 cv
331.574 15.582 331.531 15.141 331.535 14.609 cv
331.535 10.355 li
331.531 10.309 331.547 10.262 331.578 10.219 cv
331.605 10.184 331.656 10.152 331.734 10.121 cv
331.809 10.098 331.91 10.078 332.039 10.062 cv
332.164 10.055 332.32 10.047 332.512 10.043 cv
332.699 10.047 332.859 10.055 332.984 10.062 cv
333.109 10.078 333.207 10.098 333.285 10.121 cv
333.355 10.152 333.41 10.184 333.445 10.219 cv
333.473 10.262 333.488 10.309 333.492 10.355 cv
333.492 14.281 li
333.488 14.648 333.512 14.926 333.563 15.117 cv
333.605 15.309 333.676 15.473 333.777 15.609 cv
333.871 15.75 333.996 15.855 334.145 15.93 cv
334.293 16.008 334.465 16.047 334.66 16.043 cv
334.91 16.047 335.16 15.957 335.414 15.77 cv
335.664 15.59 335.934 15.324 336.219 14.977 cv
336.219 10.355 li
336.219 10.309 336.23 10.262 336.262 10.219 cv
336.285 10.184 336.34 10.152 336.418 10.121 cv
336.492 10.098 336.59 10.078 336.719 10.062 cv
336.84 10.055 337 10.047 337.195 10.043 cv
337.387 10.047 337.543 10.055 337.668 10.062 cv
337.789 10.078 337.891 10.098 337.965 10.121 cv
338.035 10.152 338.086 10.184 338.121 10.219 cv
338.148 10.262 338.164 10.309 338.168 10.355 cv
cp
f
344.563 11 mo
344.563 11.191 344.555 11.344 344.547 11.461 cv
344.531 11.582 344.516 11.676 344.5 11.742 cv
344.477 11.812 344.449 11.859 344.418 11.883 cv
344.379 11.91 344.336 11.922 344.289 11.922 cv
344.242 11.922 344.195 11.914 344.148 11.895 cv
344.094 11.879 344.035 11.859 343.973 11.836 cv
343.902 11.816 343.832 11.797 343.758 11.777 cv
343.676 11.762 343.59 11.754 343.5 11.75 cv
343.387 11.754 343.277 11.773 343.172 11.816 cv
343.063 11.863 342.949 11.934 342.836 12.023 cv
342.715 12.117 342.594 12.242 342.469 12.395 cv
342.34 12.555 342.203 12.746 342.059 12.973 cv
342.059 17.305 li
342.055 17.359 342.039 17.402 342.012 17.441 cv
341.977 17.48 341.922 17.516 341.852 17.539 cv
341.773 17.566 341.676 17.582 341.551 17.598 cv
341.426 17.609 341.266 17.617 341.078 17.617 cv
340.883 17.617 340.727 17.609 340.602 17.598 cv
340.477 17.582 340.375 17.566 340.301 17.539 cv
340.223 17.516 340.168 17.48 340.141 17.441 cv
340.105 17.402 340.09 17.359 340.094 17.305 cv
340.094 10.355 li
340.09 10.309 340.105 10.262 340.133 10.219 cv
340.156 10.184 340.203 10.152 340.273 10.121 cv
340.34 10.098 340.426 10.078 340.535 10.062 cv
340.641 10.055 340.773 10.047 340.938 10.043 cv
341.102 10.047 341.238 10.055 341.348 10.062 cv
341.453 10.078 341.539 10.098 341.602 10.121 cv
341.66 10.152 341.703 10.184 341.73 10.219 cv
341.754 10.262 341.766 10.309 341.77 10.355 cv
341.77 11.219 li
341.949 10.961 342.121 10.75 342.285 10.578 cv
342.441 10.414 342.598 10.277 342.746 10.176 cv
342.891 10.078 343.035 10.012 343.18 9.96899 cv
343.324 9.93402 343.469 9.914 343.617 9.90997 cv
343.684 9.914 343.758 9.91803 343.836 9.922 cv
343.914 9.93402 343.992 9.94501 344.078 9.961 cv
344.156 9.97998 344.23 10 344.297 10.023 cv
344.355 10.047 344.402 10.074 344.434 10.098 cv
344.461 10.129 344.48 10.156 344.496 10.184 cv
344.508 10.219 344.52 10.262 344.531 10.312 cv
344.539 10.371 344.547 10.453 344.555 10.559 cv
344.559 10.668 344.563 10.816 344.563 11 cv
cp
f
356.258 8.328 mo
356.254 8.48401 356.246 8.61298 356.238 8.71503 cv
356.223 8.82397 356.203 8.90997 356.18 8.97302 cv
356.148 9.039 356.117 9.086 356.082 9.11298 cv
356.039 9.14801 355.996 9.164 355.953 9.15997 cv
353.43 9.15997 li
353.43 17.289 li
353.43 17.344 353.41 17.391 353.379 17.43 cv
353.34 17.473 353.285 17.508 353.211 17.531 cv
353.129 17.559 353.023 17.578 352.895 17.594 cv
352.758 17.609 352.594 17.617 352.398 17.617 cv
352.203 17.617 352.039 17.609 351.906 17.594 cv
351.773 17.578 351.668 17.559 351.59 17.531 cv
351.512 17.508 351.453 17.473 351.422 17.43 cv
351.383 17.391 351.367 17.344 351.371 17.289 cv
351.371 9.15997 li
348.848 9.15997 li
348.793 9.164 348.746 9.14801 348.715 9.11298 cv
348.676 9.086 348.645 9.039 348.621 8.97302 cv
348.59 8.90997 348.57 8.82397 348.563 8.71503 cv
348.547 8.61298 348.543 8.48401 348.543 8.328 cv
348.543 8.17603 348.547 8.04303 348.563 7.92999 cv
348.57 7.82397 348.59 7.73401 348.621 7.66803 cv
348.645 7.60498 348.676 7.55902 348.715 7.52698 cv
348.746 7.5 348.793 7.48798 348.848 7.48401 cv
355.953 7.48401 li
355.996 7.48798 356.039 7.5 356.082 7.52698 cv
356.117 7.55902 356.148 7.60498 356.18 7.66803 cv
356.203 7.73401 356.223 7.82397 356.238 7.92999 cv
356.246 8.04303 356.254 8.17603 356.258 8.328 cv
cp
f
363.973 17.305 mo
363.969 17.359 363.953 17.402 363.926 17.441 cv
363.891 17.48 363.84 17.516 363.77 17.539 cv
363.695 17.566 363.594 17.582 363.469 17.598 cv
363.34 17.609 363.184 17.617 363 17.617 cv
362.805 17.617 362.645 17.609 362.52 17.598 cv
362.391 17.582 362.289 17.566 362.219 17.539 cv
362.141 17.516 362.09 17.48 362.063 17.441 cv
362.027 17.402 362.012 17.359 362.016 17.305 cv
362.016 13.34 li
362.012 13.004 361.988 12.738 361.941 12.543 cv
361.891 12.352 361.816 12.187 361.727 12.051 cv
361.633 11.914 361.516 11.809 361.367 11.73 cv
361.219 11.656 361.043 11.617 360.848 11.617 cv
360.594 11.617 360.344 11.711 360.09 11.891 cv
359.836 12.074 359.57 12.336 359.297 12.684 cv
359.297 17.305 li
359.293 17.359 359.277 17.402 359.25 17.441 cv
359.215 17.48 359.16 17.516 359.09 17.539 cv
359.012 17.566 358.914 17.582 358.789 17.598 cv
358.664 17.609 358.504 17.617 358.316 17.617 cv
358.121 17.617 357.965 17.609 357.84 17.598 cv
357.715 17.582 357.613 17.566 357.539 17.539 cv
357.461 17.516 357.406 17.48 357.379 17.441 cv
357.344 17.402 357.328 17.359 357.332 17.305 cv
357.332 7.05902 li
357.328 7.008 357.344 6.961 357.379 6.91803 cv
357.406 6.87903 357.461 6.84399 357.539 6.81201 cv
357.613 6.78497 357.715 6.76599 357.84 6.74597 cv
357.965 6.73401 358.121 6.72699 358.316 6.72302 cv
358.504 6.72699 358.664 6.73401 358.789 6.74597 cv
358.914 6.76599 359.012 6.78497 359.09 6.81201 cv
359.16 6.84399 359.215 6.87903 359.25 6.91803 cv
359.277 6.961 359.293 7.008 359.297 7.05902 cv
359.297 10.898 li
359.633 10.57 359.977 10.324 360.328 10.156 cv
360.676 9.99597 361.043 9.914 361.426 9.90997 cv
361.895 9.914 362.293 9.992 362.621 10.145 cv
362.945 10.305 363.207 10.516 363.406 10.785 cv
363.605 11.055 363.75 11.371 363.84 11.73 cv
363.926 12.094 363.969 12.531 363.973 13.043 cv
cp
f
370.371 11 mo
370.371 11.191 370.363 11.344 370.355 11.461 cv
370.34 11.582 370.324 11.676 370.309 11.742 cv
370.285 11.812 370.258 11.859 370.227 11.883 cv
370.188 11.91 370.145 11.922 370.098 11.922 cv
370.051 11.922 370.004 11.914 369.957 11.895 cv
369.902 11.879 369.844 11.859 369.781 11.836 cv
369.711 11.816 369.641 11.797 369.566 11.777 cv
369.484 11.762 369.398 11.754 369.309 11.75 cv
369.195 11.754 369.086 11.773 368.98 11.816 cv
368.871 11.863 368.758 11.934 368.645 12.023 cv
368.523 12.117 368.402 12.242 368.277 12.395 cv
368.148 12.555 368.012 12.746 367.867 12.973 cv
367.867 17.305 li
367.863 17.359 367.848 17.402 367.82 17.441 cv
367.785 17.48 367.73 17.516 367.66 17.539 cv
367.582 17.566 367.484 17.582 367.359 17.598 cv
367.234 17.609 367.074 17.617 366.887 17.617 cv
366.691 17.617 366.535 17.609 366.41 17.598 cv
366.285 17.582 366.184 17.566 366.109 17.539 cv
366.031 17.516 365.977 17.48 365.949 17.441 cv
365.914 17.402 365.898 17.359 365.902 17.305 cv
365.902 10.355 li
365.898 10.309 365.914 10.262 365.941 10.219 cv
365.965 10.184 366.012 10.152 366.082 10.121 cv
366.148 10.098 366.234 10.078 366.344 10.062 cv
366.449 10.055 366.582 10.047 366.746 10.043 cv
366.91 10.047 367.047 10.055 367.156 10.062 cv
367.262 10.078 367.348 10.098 367.41 10.121 cv
367.469 10.152 367.512 10.184 367.539 10.219 cv
367.563 10.262 367.574 10.309 367.578 10.355 cv
367.578 11.219 li
367.758 10.961 367.93 10.75 368.094 10.578 cv
368.25 10.414 368.406 10.277 368.555 10.176 cv
368.699 10.078 368.844 10.012 368.988 9.96899 cv
369.133 9.93402 369.277 9.914 369.426 9.90997 cv
369.492 9.914 369.566 9.91803 369.645 9.922 cv
369.723 9.93402 369.801 9.94501 369.887 9.961 cv
369.965 9.97998 370.039 10 370.105 10.023 cv
370.164 10.047 370.211 10.074 370.242 10.098 cv
370.27 10.129 370.289 10.156 370.305 10.184 cv
370.316 10.219 370.328 10.262 370.34 10.312 cv
370.348 10.371 370.355 10.453 370.363 10.559 cv
370.367 10.668 370.371 10.816 370.371 11 cv
cp
f
377.813 13.629 mo
377.809 13.867 377.758 14.043 377.652 14.156 cv
377.543 14.273 377.395 14.332 377.215 14.328 cv
372.98 14.328 li
372.977 14.629 373.012 14.898 373.086 15.137 cv
373.152 15.379 373.266 15.582 373.422 15.75 cv
373.574 15.922 373.77 16.051 374.012 16.137 cv
374.25 16.227 374.539 16.27 374.883 16.27 cv
375.223 16.27 375.523 16.246 375.785 16.195 cv
376.043 16.148 376.27 16.094 376.461 16.031 cv
376.648 15.973 376.805 15.918 376.934 15.867 cv
377.055 15.82 377.156 15.797 377.238 15.793 cv
377.281 15.797 377.32 15.805 377.355 15.82 cv
377.383 15.84 377.41 15.871 377.43 15.918 cv
377.449 15.965 377.461 16.031 377.473 16.117 cv
377.477 16.203 377.48 16.312 377.484 16.441 cv
377.48 16.559 377.48 16.656 377.477 16.734 cv
377.469 16.816 377.461 16.883 377.453 16.937 cv
377.441 16.996 377.426 17.047 377.406 17.082 cv
377.387 17.125 377.359 17.16 377.328 17.195 cv
377.293 17.234 377.199 17.285 377.051 17.344 cv
376.895 17.41 376.703 17.473 376.473 17.527 cv
376.234 17.59 375.965 17.637 375.668 17.684 cv
375.363 17.723 375.043 17.746 374.703 17.75 cv
374.082 17.746 373.539 17.672 373.078 17.516 cv
372.609 17.363 372.223 17.125 371.914 16.809 cv
371.598 16.492 371.363 16.094 371.215 15.609 cv
371.059 15.129 370.984 14.562 370.988 13.906 cv
370.984 13.293 371.063 12.734 371.227 12.238 cv
371.383 11.742 371.617 11.324 371.93 10.977 cv
372.234 10.633 372.609 10.367 373.047 10.184 cv
373.484 10.004 373.977 9.914 374.531 9.90997 cv
375.109 9.914 375.609 10 376.023 10.168 cv
376.438 10.344 376.773 10.582 377.039 10.883 cv
377.301 11.187 377.496 11.547 377.625 11.961 cv
377.746 12.379 377.809 12.828 377.813 13.316 cv
cp
375.91 13.066 mo
375.922 12.516 375.813 12.082 375.578 11.77 cv
375.344 11.457 374.977 11.301 374.484 11.297 cv
374.234 11.301 374.02 11.348 373.836 11.437 cv
373.648 11.535 373.496 11.66 373.375 11.816 cv
373.25 11.977 373.156 12.164 373.094 12.379 cv
373.027 12.594 372.988 12.824 372.98 13.066 cv
cp
f
385.348 17.328 mo
385.344 17.406 385.316 17.461 385.27 17.5 cv
385.215 17.543 385.133 17.57 385.023 17.59 cv
384.906 17.605 384.742 17.617 384.527 17.617 cv
384.289 17.617 384.117 17.605 384.016 17.59 cv
383.906 17.57 383.832 17.543 383.793 17.5 cv
383.746 17.461 383.727 17.406 383.727 17.328 cv
383.727 16.777 li
383.438 17.086 383.109 17.324 382.746 17.492 cv
382.379 17.664 381.973 17.746 381.527 17.75 cv
381.156 17.746 380.816 17.699 380.508 17.605 cv
380.199 17.512 379.934 17.371 379.707 17.176 cv
379.48 16.988 379.305 16.754 379.18 16.473 cv
379.055 16.195 378.992 15.867 378.996 15.488 cv
378.992 15.09 379.07 14.738 379.23 14.434 cv
379.387 14.137 379.625 13.891 379.941 13.695 cv
380.254 13.504 380.645 13.359 381.113 13.262 cv
381.582 13.172 382.125 13.125 382.742 13.121 cv
383.422 13.121 li
383.422 12.699 li
383.422 12.484 383.398 12.293 383.355 12.129 cv
383.309 11.969 383.234 11.832 383.137 11.719 cv
383.031 11.613 382.898 11.531 382.73 11.477 cv
382.559 11.426 382.348 11.402 382.105 11.398 cv
381.773 11.402 381.48 11.437 381.227 11.508 cv
380.965 11.582 380.738 11.664 380.543 11.75 cv
380.344 11.844 380.18 11.922 380.051 11.992 cv
379.914 12.066 379.805 12.105 379.727 12.102 cv
379.664 12.105 379.613 12.086 379.574 12.047 cv
379.527 12.012 379.492 11.961 379.465 11.891 cv
379.434 11.828 379.41 11.742 379.398 11.641 cv
379.379 11.543 379.371 11.434 379.375 11.312 cv
379.371 11.152 379.387 11.027 379.414 10.93 cv
379.438 10.84 379.484 10.754 379.563 10.676 cv
379.633 10.602 379.762 10.52 379.945 10.43 cv
380.125 10.34 380.336 10.254 380.582 10.176 cv
380.824 10.098 381.094 10.035 381.383 9.98401 cv
381.672 9.93701 381.969 9.914 382.277 9.90997 cv
382.82 9.914 383.285 9.96503 383.672 10.07 cv
384.059 10.18 384.379 10.344 384.629 10.562 cv
384.879 10.781 385.059 11.066 385.176 11.414 cv
385.285 11.766 385.344 12.18 385.348 12.652 cv
cp
383.422 14.352 mo
382.672 14.352 li
382.355 14.355 382.086 14.379 381.863 14.422 cv
381.637 14.473 381.453 14.543 381.316 14.633 cv
381.172 14.73 381.07 14.844 381.008 14.973 cv
380.941 15.109 380.906 15.258 380.91 15.426 cv
380.906 15.719 381 15.949 381.188 16.113 cv
381.371 16.281 381.629 16.363 381.957 16.363 cv
382.23 16.363 382.48 16.293 382.715 16.152 cv
382.941 16.012 383.18 15.809 383.422 15.535 cv
cp
f
393.93 17.305 mo
393.926 17.367 393.914 17.414 393.891 17.449 cv
393.863 17.492 393.816 17.523 393.758 17.547 cv
393.691 17.57 393.609 17.586 393.504 17.602 cv
393.398 17.609 393.266 17.617 393.113 17.617 cv
392.941 17.617 392.809 17.609 392.707 17.602 cv
392.602 17.586 392.516 17.57 392.453 17.547 cv
392.387 17.523 392.34 17.492 392.313 17.449 cv
392.281 17.414 392.266 17.367 392.27 17.305 cv
392.27 16.535 li
391.91 16.922 391.535 17.219 391.145 17.43 cv
390.746 17.641 390.313 17.746 389.84 17.75 cv
389.305 17.746 388.855 17.645 388.492 17.441 cv
388.125 17.238 387.828 16.965 387.598 16.613 cv
387.363 16.27 387.195 15.863 387.094 15.395 cv
386.992 14.934 386.941 14.441 386.941 13.922 cv
386.941 13.309 387.004 12.754 387.137 12.258 cv
387.266 11.766 387.461 11.344 387.719 10.996 cv
387.973 10.648 388.289 10.383 388.668 10.191 cv
389.047 10.008 389.484 9.914 389.98 9.90997 cv
390.367 9.914 390.719 9.992 391.039 10.148 cv
391.352 10.309 391.668 10.539 391.98 10.844 cv
391.98 7.08197 li
391.98 7.03101 391.992 6.98401 392.023 6.94098 cv
392.047 6.90198 392.102 6.867 392.18 6.836 cv
392.254 6.80902 392.352 6.789 392.48 6.77002 cv
392.602 6.758 392.762 6.75 392.957 6.74597 cv
393.148 6.75 393.305 6.758 393.43 6.77002 cv
393.551 6.789 393.652 6.80902 393.727 6.836 cv
393.797 6.867 393.848 6.90198 393.883 6.94098 cv
393.91 6.98401 393.926 7.03101 393.93 7.08197 cv
cp
391.98 12.66 mo
391.699 12.309 391.43 12.039 391.176 11.852 cv
390.914 11.664 390.645 11.57 390.367 11.57 cv
390.113 11.57 389.895 11.637 389.711 11.762 cv
389.523 11.895 389.375 12.062 389.266 12.273 cv
389.152 12.484 389.07 12.723 389.016 12.984 cv
388.961 13.25 388.934 13.52 388.934 13.789 cv
388.934 14.086 388.957 14.367 389.004 14.641 cv
389.051 14.918 389.125 15.164 389.234 15.379 cv
389.336 15.594 389.48 15.766 389.66 15.895 cv
389.836 16.027 390.059 16.094 390.328 16.09 cv
390.461 16.094 390.59 16.074 390.723 16.031 cv
390.848 15.996 390.98 15.934 391.113 15.84 cv
391.246 15.754 391.383 15.637 391.523 15.492 cv
391.664 15.352 391.816 15.176 391.98 14.969 cv
cp
f
400.754 15.34 mo
400.75 15.738 400.676 16.086 400.531 16.387 cv
400.383 16.687 400.176 16.941 399.906 17.141 cv
399.633 17.348 399.313 17.496 398.945 17.598 cv
398.578 17.695 398.176 17.746 397.746 17.75 cv
397.48 17.746 397.234 17.727 397 17.691 cv
396.766 17.648 396.555 17.602 396.367 17.543 cv
396.18 17.484 396.023 17.422 395.898 17.359 cv
395.773 17.297 395.68 17.238 395.625 17.184 cv
395.566 17.129 395.523 17.047 395.496 16.93 cv
395.461 16.816 395.445 16.641 395.449 16.41 cv
395.445 16.262 395.453 16.141 395.465 16.047 cv
395.473 15.957 395.488 15.887 395.512 15.828 cv
395.531 15.777 395.555 15.738 395.59 15.719 cv
395.617 15.703 395.656 15.695 395.703 15.691 cv
395.758 15.695 395.844 15.727 395.957 15.789 cv
396.066 15.855 396.203 15.93 396.375 16.004 cv
396.539 16.086 396.734 16.156 396.953 16.223 cv
397.172 16.293 397.422 16.328 397.707 16.324 cv
397.883 16.328 398.039 16.309 398.18 16.27 cv
398.313 16.234 398.434 16.184 398.539 16.113 cv
398.637 16.047 398.711 15.961 398.766 15.855 cv
398.813 15.754 398.84 15.633 398.844 15.496 cv
398.84 15.34 398.793 15.207 398.699 15.098 cv
398.605 14.988 398.477 14.891 398.32 14.805 cv
398.156 14.723 397.977 14.645 397.781 14.57 cv
397.578 14.5 397.375 14.422 397.164 14.328 cv
396.953 14.242 396.746 14.141 396.551 14.023 cv
396.348 13.914 396.168 13.773 396.012 13.605 cv
395.848 13.441 395.723 13.242 395.629 13.004 cv
395.535 12.773 395.488 12.492 395.488 12.16 cv
395.488 11.832 395.551 11.527 395.68 11.246 cv
395.809 10.973 395.996 10.734 396.242 10.535 cv
396.484 10.34 396.781 10.187 397.133 10.074 cv
397.48 9.96899 397.875 9.914 398.316 9.90997 cv
398.531 9.914 398.742 9.92999 398.949 9.95697 cv
399.152 9.992 399.34 10.031 399.508 10.074 cv
399.672 10.125 399.813 10.176 399.93 10.227 cv
400.043 10.285 400.125 10.332 400.176 10.367 cv
400.223 10.41 400.258 10.449 400.281 10.484 cv
400.301 10.527 400.313 10.574 400.324 10.625 cv
400.332 10.68 400.344 10.746 400.352 10.824 cv
400.359 10.91 400.363 11.008 400.363 11.125 cv
400.363 11.266 400.359 11.383 400.352 11.469 cv
400.344 11.562 400.328 11.633 400.313 11.68 cv
400.293 11.734 400.27 11.77 400.242 11.785 cv
400.207 11.809 400.172 11.816 400.133 11.812 cv
400.082 11.816 400.008 11.789 399.914 11.73 cv
399.813 11.68 399.691 11.621 399.543 11.555 cv
399.395 11.496 399.223 11.437 399.027 11.379 cv
398.832 11.328 398.609 11.301 398.363 11.297 cv
398.184 11.301 398.031 11.32 397.902 11.352 cv
397.77 11.391 397.66 11.441 397.582 11.508 cv
397.496 11.578 397.434 11.656 397.395 11.746 cv
397.348 11.84 397.328 11.937 397.332 12.039 cv
397.328 12.199 397.379 12.336 397.48 12.441 cv
397.578 12.555 397.707 12.648 397.871 12.73 cv
398.031 12.816 398.215 12.895 398.422 12.965 cv
398.625 13.039 398.832 13.121 399.043 13.203 cv
399.25 13.293 399.457 13.391 399.668 13.504 cv
399.871 13.617 400.055 13.758 400.215 13.922 cv
400.375 14.09 400.504 14.289 400.605 14.52 cv
400.699 14.754 400.75 15.027 400.754 15.34 cv
cp
f
409.496 13.652 mo
409.492 13.953 409.465 14.164 409.41 14.281 cv
409.352 14.406 409.262 14.465 409.137 14.461 cv
405.895 14.461 li
405.766 14.465 405.672 14.402 405.617 14.277 cv
405.555 14.156 405.527 13.949 405.531 13.652 cv
405.527 13.363 405.555 13.156 405.617 13.035 cv
405.672 12.918 405.766 12.859 405.895 12.855 cv
409.137 12.855 li
409.199 12.859 409.25 12.871 409.297 12.895 cv
409.336 12.922 409.375 12.969 409.41 13.027 cv
409.438 13.094 409.461 13.176 409.477 13.277 cv
409.488 13.383 409.492 13.508 409.496 13.652 cv
cp
f
422.168 17.305 mo
422.168 17.367 422.156 17.414 422.137 17.449 cv
422.117 17.492 422.07 17.523 421.992 17.547 cv
421.914 17.57 421.797 17.586 421.648 17.602 cv
421.492 17.609 421.289 17.617 421.031 17.617 cv
420.813 17.617 420.637 17.609 420.508 17.602 cv
420.379 17.586 420.277 17.57 420.203 17.543 cv
420.125 17.516 420.07 17.48 420.043 17.434 cv
420.008 17.395 419.984 17.34 419.965 17.273 cv
419.059 15.023 li
418.949 14.77 418.844 14.543 418.742 14.344 cv
418.633 14.148 418.52 13.984 418.395 13.852 cv
418.266 13.723 418.117 13.621 417.953 13.551 cv
417.785 13.484 417.594 13.453 417.379 13.449 cv
416.738 13.449 li
416.738 17.289 li
416.734 17.344 416.719 17.391 416.688 17.43 cv
416.652 17.473 416.598 17.508 416.52 17.531 cv
416.441 17.559 416.336 17.578 416.207 17.594 cv
416.074 17.609 415.91 17.617 415.711 17.617 cv
415.512 17.617 415.344 17.609 415.215 17.594 cv
415.078 17.578 414.973 17.559 414.898 17.531 cv
414.816 17.508 414.762 17.473 414.734 17.43 cv
414.699 17.391 414.684 17.344 414.688 17.289 cv
414.688 8.133 li
414.684 7.90601 414.742 7.742 414.863 7.63702 cv
414.977 7.539 415.121 7.48798 415.297 7.48401 cv
417.906 7.48401 li
418.168 7.48798 418.387 7.492 418.563 7.5 cv
418.73 7.51202 418.887 7.52301 419.031 7.539 cv
419.434 7.59802 419.797 7.69897 420.121 7.836 cv
420.445 7.97998 420.723 8.164 420.949 8.38702 cv
421.176 8.617 421.348 8.883 421.469 9.19098 cv
421.586 9.5 421.645 9.85498 421.648 10.254 cv
421.645 10.594 421.602 10.902 421.52 11.176 cv
421.43 11.457 421.305 11.703 421.141 11.922 cv
420.973 12.141 420.766 12.332 420.523 12.488 cv
420.277 12.652 420 12.781 419.691 12.879 cv
419.84 12.953 419.984 13.043 420.117 13.145 cv
420.25 13.254 420.371 13.379 420.488 13.523 cv
420.602 13.672 420.715 13.84 420.82 14.027 cv
420.922 14.219 421.023 14.434 421.125 14.672 cv
421.977 16.66 li
422.051 16.859 422.102 17 422.129 17.09 cv
422.152 17.184 422.168 17.258 422.168 17.305 cv
cp
419.527 10.465 mo
419.523 10.133 419.449 9.85199 419.301 9.62097 cv
419.148 9.39502 418.902 9.23401 418.563 9.13702 cv
418.457 9.11298 418.34 9.09003 418.207 9.07397 cv
418.074 9.05902 417.891 9.05103 417.656 9.05103 cv
416.738 9.05103 li
416.738 11.914 li
417.781 11.914 li
418.07 11.918 418.328 11.883 418.547 11.809 cv
418.766 11.742 418.945 11.641 419.09 11.512 cv
419.234 11.387 419.344 11.234 419.418 11.055 cv
419.488 10.879 419.523 10.684 419.527 10.465 cv
cp
f
429.754 13.629 mo
429.75 13.867 429.699 14.043 429.594 14.156 cv
429.484 14.273 429.336 14.332 429.156 14.328 cv
424.922 14.328 li
424.918 14.629 424.953 14.898 425.027 15.137 cv
425.094 15.379 425.207 15.582 425.363 15.75 cv
425.516 15.922 425.711 16.051 425.953 16.137 cv
426.191 16.227 426.48 16.27 426.824 16.27 cv
427.164 16.27 427.465 16.246 427.727 16.195 cv
427.984 16.148 428.211 16.094 428.402 16.031 cv
428.59 15.973 428.746 15.918 428.875 15.867 cv
428.996 15.82 429.098 15.797 429.18 15.793 cv
429.223 15.797 429.262 15.805 429.297 15.82 cv
429.324 15.84 429.352 15.871 429.371 15.918 cv
429.391 15.965 429.402 16.031 429.414 16.117 cv
429.418 16.203 429.422 16.312 429.426 16.441 cv
429.422 16.559 429.422 16.656 429.418 16.734 cv
429.41 16.816 429.402 16.883 429.395 16.937 cv
429.383 16.996 429.367 17.047 429.348 17.082 cv
429.328 17.125 429.301 17.16 429.27 17.195 cv
429.234 17.234 429.141 17.285 428.992 17.344 cv
428.836 17.41 428.645 17.473 428.414 17.527 cv
428.176 17.59 427.906 17.637 427.609 17.684 cv
427.305 17.723 426.984 17.746 426.645 17.75 cv
426.023 17.746 425.48 17.672 425.02 17.516 cv
424.551 17.363 424.164 17.125 423.855 16.809 cv
423.539 16.492 423.305 16.094 423.156 15.609 cv
423 15.129 422.926 14.562 422.93 13.906 cv
422.926 13.293 423.004 12.734 423.168 12.238 cv
423.324 11.742 423.559 11.324 423.871 10.977 cv
424.176 10.633 424.551 10.367 424.988 10.184 cv
425.426 10.004 425.918 9.914 426.473 9.90997 cv
427.051 9.914 427.551 10 427.965 10.168 cv
428.379 10.344 428.715 10.582 428.98 10.883 cv
429.242 11.187 429.438 11.547 429.566 11.961 cv
429.688 12.379 429.75 12.828 429.754 13.316 cv
cp
427.852 13.066 mo
427.863 12.516 427.754 12.082 427.52 11.77 cv
427.285 11.457 426.918 11.301 426.426 11.297 cv
426.176 11.301 425.961 11.348 425.777 11.437 cv
425.59 11.535 425.438 11.66 425.316 11.816 cv
425.191 11.977 425.098 12.164 425.035 12.379 cv
424.969 12.594 424.93 12.824 424.922 13.066 cv
cp
f
442.418 17.305 mo
442.414 17.359 442.398 17.402 442.371 17.441 cv
442.336 17.48 442.285 17.516 442.215 17.539 cv
442.141 17.566 442.039 17.582 441.918 17.598 cv
441.793 17.609 441.637 17.617 441.445 17.617 cv
441.246 17.617 441.086 17.609 440.961 17.598 cv
440.836 17.582 440.734 17.566 440.66 17.539 cv
440.582 17.516 440.531 17.48 440.504 17.441 cv
440.477 17.402 440.461 17.359 440.465 17.305 cv
440.465 13.184 li
440.461 12.953 440.441 12.738 440.398 12.543 cv
440.352 12.352 440.281 12.187 440.195 12.051 cv
440.102 11.914 439.988 11.809 439.852 11.73 cv
439.711 11.656 439.547 11.617 439.355 11.617 cv
439.121 11.617 438.883 11.711 438.645 11.891 cv
438.406 12.074 438.148 12.336 437.867 12.684 cv
437.867 17.305 li
437.867 17.359 437.852 17.402 437.82 17.441 cv
437.789 17.48 437.734 17.516 437.66 17.539 cv
437.582 17.566 437.48 17.582 437.359 17.598 cv
437.234 17.609 437.082 17.617 436.895 17.617 cv
436.699 17.617 436.539 17.609 436.418 17.598 cv
436.289 17.582 436.188 17.566 436.117 17.539 cv
436.039 17.516 435.988 17.48 435.957 17.441 cv
435.926 17.402 435.91 17.359 435.91 17.305 cv
435.91 13.184 li
435.91 12.953 435.887 12.738 435.844 12.543 cv
435.801 12.352 435.734 12.187 435.648 12.051 cv
435.555 11.914 435.441 11.809 435.305 11.73 cv
435.16 11.656 434.996 11.617 434.813 11.617 cv
434.57 11.617 434.332 11.711 434.094 11.891 cv
433.855 12.074 433.598 12.336 433.324 12.684 cv
433.324 17.305 li
433.32 17.359 433.305 17.402 433.277 17.441 cv
433.242 17.48 433.188 17.516 433.117 17.539 cv
433.039 17.566 432.941 17.582 432.816 17.598 cv
432.691 17.609 432.531 17.617 432.344 17.617 cv
432.148 17.617 431.992 17.609 431.867 17.598 cv
431.742 17.582 431.641 17.566 431.566 17.539 cv
431.488 17.516 431.434 17.48 431.406 17.441 cv
431.371 17.402 431.355 17.359 431.359 17.305 cv
431.359 10.355 li
431.355 10.309 431.371 10.262 431.398 10.219 cv
431.422 10.184 431.469 10.152 431.539 10.121 cv
431.605 10.098 431.691 10.078 431.801 10.062 cv
431.906 10.055 432.039 10.047 432.203 10.043 cv
432.367 10.047 432.504 10.055 432.613 10.062 cv
432.719 10.078 432.805 10.098 432.867 10.121 cv
432.926 10.152 432.969 10.184 432.996 10.219 cv
433.02 10.262 433.031 10.309 433.035 10.355 cv
433.035 11.156 li
433.418 10.746 433.801 10.434 434.184 10.223 cv
434.563 10.016 434.965 9.914 435.383 9.90997 cv
435.668 9.914 435.922 9.94098 436.152 10 cv
436.379 10.062 436.586 10.148 436.766 10.258 cv
436.945 10.371 437.098 10.508 437.227 10.66 cv
437.355 10.816 437.465 10.988 437.555 11.18 cv
437.762 10.957 437.965 10.766 438.168 10.605 cv
438.363 10.445 438.563 10.312 438.758 10.211 cv
438.953 10.109 439.148 10.035 439.344 9.98401 cv
439.539 9.93701 439.738 9.914 439.941 9.90997 cv
440.402 9.914 440.789 9.992 441.109 10.145 cv
441.422 10.305 441.68 10.516 441.875 10.781 cv
442.07 11.051 442.207 11.363 442.293 11.719 cv
442.371 12.078 442.414 12.457 442.418 12.855 cv
cp
f
451.367 13.758 mo
451.363 14.355 451.285 14.898 451.133 15.383 cv
450.973 15.875 450.738 16.293 450.422 16.645 cv
450.105 16.996 449.707 17.27 449.23 17.461 cv
448.75 17.652 448.191 17.746 447.555 17.75 cv
446.934 17.746 446.395 17.664 445.941 17.492 cv
445.48 17.324 445.102 17.074 444.805 16.746 cv
444.5 16.422 444.277 16.02 444.133 15.539 cv
443.988 15.062 443.918 14.516 443.918 13.898 cv
443.918 13.309 443.996 12.77 444.152 12.277 cv
444.309 11.789 444.547 11.367 444.867 11.016 cv
445.184 10.668 445.578 10.395 446.055 10.199 cv
446.527 10.008 447.086 9.914 447.727 9.90997 cv
448.352 9.914 448.891 9.99597 449.348 10.164 cv
449.805 10.336 450.184 10.586 450.48 10.91 cv
450.777 11.238 451 11.641 451.148 12.117 cv
451.293 12.598 451.363 13.145 451.367 13.758 cv
cp
449.348 13.836 mo
449.344 13.5 449.316 13.184 449.266 12.891 cv
449.207 12.605 449.113 12.355 448.988 12.141 cv
448.855 11.93 448.684 11.762 448.473 11.641 cv
448.254 11.523 447.984 11.465 447.656 11.461 cv
447.367 11.465 447.113 11.52 446.895 11.621 cv
446.676 11.73 446.496 11.887 446.355 12.09 cv
446.215 12.297 446.109 12.543 446.039 12.828 cv
445.969 13.121 445.934 13.449 445.934 13.812 cv
445.934 14.16 445.961 14.477 446.02 14.762 cv
446.074 15.055 446.168 15.305 446.297 15.516 cv
446.422 15.73 446.594 15.895 446.816 16.008 cv
447.031 16.129 447.301 16.187 447.625 16.184 cv
447.918 16.187 448.176 16.133 448.398 16.023 cv
448.613 15.918 448.793 15.766 448.934 15.559 cv
449.074 15.359 449.176 15.113 449.246 14.824 cv
449.309 14.539 449.344 14.211 449.348 13.836 cv
cp
f
457.07 16.621 mo
457.07 16.848 457.055 17.023 457.027 17.145 cv
456.996 17.27 456.957 17.355 456.914 17.402 cv
456.863 17.453 456.797 17.496 456.707 17.535 cv
456.613 17.574 456.504 17.605 456.387 17.637 cv
456.262 17.66 456.129 17.684 455.988 17.703 cv
455.844 17.715 455.703 17.723 455.559 17.727 cv
455.168 17.723 454.828 17.672 454.543 17.578 cv
454.258 17.477 454.023 17.328 453.836 17.121 cv
453.648 16.918 453.508 16.66 453.422 16.348 cv
453.328 16.039 453.285 15.668 453.289 15.238 cv
453.289 11.68 li
452.457 11.68 li
452.355 11.684 452.281 11.621 452.23 11.496 cv
452.176 11.375 452.148 11.172 452.152 10.883 cv
452.148 10.734 452.156 10.605 452.172 10.504 cv
452.184 10.402 452.203 10.32 452.23 10.258 cv
452.254 10.199 452.285 10.156 452.328 10.129 cv
452.363 10.105 452.41 10.094 452.465 10.09 cv
453.289 10.09 li
453.289 8.539 li
453.285 8.492 453.301 8.44501 453.332 8.39801 cv
453.359 8.35901 453.41 8.32397 453.488 8.29303 cv
453.563 8.27002 453.664 8.24597 453.793 8.22998 cv
453.918 8.21899 454.074 8.21503 454.266 8.211 cv
454.453 8.21503 454.613 8.21899 454.742 8.22998 cv
454.867 8.24597 454.969 8.27002 455.043 8.29303 cv
455.113 8.32397 455.164 8.35901 455.199 8.39801 cv
455.227 8.44501 455.242 8.492 455.246 8.539 cv
455.246 10.09 li
456.758 10.09 li
456.809 10.094 456.855 10.105 456.895 10.129 cv
456.934 10.156 456.965 10.199 456.992 10.258 cv
457.016 10.32 457.035 10.402 457.051 10.504 cv
457.063 10.605 457.07 10.734 457.07 10.883 cv
457.07 11.172 457.043 11.375 456.992 11.496 cv
456.938 11.621 456.863 11.684 456.766 11.68 cv
455.246 11.68 li
455.246 14.945 li
455.242 15.324 455.301 15.609 455.426 15.797 cv
455.543 15.988 455.758 16.082 456.063 16.082 cv
456.164 16.082 456.258 16.074 456.344 16.055 cv
456.426 16.039 456.5 16.02 456.566 15.992 cv
456.629 15.973 456.684 15.949 456.73 15.93 cv
456.773 15.914 456.813 15.906 456.852 15.902 cv
456.879 15.906 456.91 15.914 456.941 15.93 cv
456.969 15.949 456.988 15.988 457.008 16.039 cv
457.02 16.098 457.035 16.172 457.051 16.262 cv
457.063 16.359 457.07 16.477 457.07 16.621 cv
cp
f
464.66 13.629 mo
464.656 13.867 464.605 14.043 464.5 14.156 cv
464.391 14.273 464.242 14.332 464.063 14.328 cv
459.828 14.328 li
459.824 14.629 459.859 14.898 459.934 15.137 cv
460 15.379 460.113 15.582 460.27 15.75 cv
460.422 15.922 460.617 16.051 460.859 16.137 cv
461.098 16.227 461.387 16.27 461.73 16.27 cv
462.07 16.27 462.371 16.246 462.633 16.195 cv
462.891 16.148 463.117 16.094 463.309 16.031 cv
463.496 15.973 463.652 15.918 463.781 15.867 cv
463.902 15.82 464.004 15.797 464.086 15.793 cv
464.129 15.797 464.168 15.805 464.203 15.82 cv
464.23 15.84 464.258 15.871 464.277 15.918 cv
464.297 15.965 464.309 16.031 464.32 16.117 cv
464.324 16.203 464.328 16.312 464.332 16.441 cv
464.328 16.559 464.328 16.656 464.324 16.734 cv
464.316 16.816 464.309 16.883 464.301 16.937 cv
464.289 16.996 464.273 17.047 464.254 17.082 cv
464.234 17.125 464.207 17.16 464.176 17.195 cv
464.141 17.234 464.047 17.285 463.898 17.344 cv
463.742 17.41 463.551 17.473 463.32 17.527 cv
463.082 17.59 462.813 17.637 462.516 17.684 cv
462.211 17.723 461.891 17.746 461.551 17.75 cv
460.93 17.746 460.387 17.672 459.926 17.516 cv
459.457 17.363 459.07 17.125 458.762 16.809 cv
458.445 16.492 458.211 16.094 458.063 15.609 cv
457.906 15.129 457.832 14.562 457.836 13.906 cv
457.832 13.293 457.91 12.734 458.074 12.238 cv
458.23 11.742 458.465 11.324 458.777 10.977 cv
459.082 10.633 459.457 10.367 459.895 10.184 cv
460.332 10.004 460.824 9.914 461.379 9.90997 cv
461.957 9.914 462.457 10 462.871 10.168 cv
463.285 10.344 463.621 10.582 463.887 10.883 cv
464.148 11.187 464.344 11.547 464.473 11.961 cv
464.594 12.379 464.656 12.828 464.66 13.316 cv
cp
462.758 13.066 mo
462.77 12.516 462.66 12.082 462.426 11.77 cv
462.191 11.457 461.824 11.301 461.332 11.297 cv
461.082 11.301 460.867 11.348 460.684 11.437 cv
460.496 11.535 460.344 11.66 460.223 11.816 cv
460.098 11.977 460.004 12.164 459.941 12.379 cv
459.875 12.594 459.836 12.824 459.828 13.066 cv
cp
f
481.965 17.289 mo
481.961 17.344 481.949 17.391 481.922 17.43 cv
481.891 17.473 481.836 17.508 481.766 17.531 cv
481.688 17.559 481.59 17.578 481.465 17.594 cv
481.34 17.609 481.18 17.617 480.988 17.617 cv
480.801 17.617 480.645 17.609 480.523 17.594 cv
480.395 17.578 480.297 17.559 480.227 17.531 cv
480.152 17.508 480.102 17.473 480.07 17.43 cv
480.039 17.391 480.023 17.344 480.023 17.289 cv
480.023 9.08197 li
480.008 9.08197 li
477.086 17.281 li
477.063 17.352 477.027 17.406 476.984 17.449 cv
476.934 17.496 476.871 17.531 476.793 17.555 cv
476.711 17.582 476.609 17.598 476.484 17.605 cv
476.359 17.613 476.207 17.617 476.035 17.617 cv
475.855 17.617 475.707 17.609 475.582 17.598 cv
475.457 17.582 475.352 17.562 475.273 17.535 cv
475.188 17.508 475.125 17.473 475.082 17.43 cv
475.031 17.391 475 17.344 474.988 17.281 cv
472.168 9.08197 li
472.152 9.08197 li
472.152 17.289 li
472.148 17.344 472.133 17.391 472.109 17.43 cv
472.078 17.473 472.027 17.508 471.949 17.531 cv
471.871 17.559 471.77 17.578 471.648 17.594 cv
471.523 17.609 471.367 17.617 471.18 17.617 cv
470.988 17.617 470.832 17.609 470.711 17.594 cv
470.582 17.578 470.48 17.559 470.41 17.531 cv
470.332 17.508 470.281 17.473 470.254 17.43 cv
470.223 17.391 470.207 17.344 470.211 17.289 cv
470.211 8.30499 li
470.207 8.04303 470.277 7.84003 470.422 7.69501 cv
470.559 7.55902 470.746 7.48798 470.984 7.48401 cv
472.324 7.48401 li
472.563 7.48798 472.766 7.508 472.938 7.54303 cv
473.105 7.586 473.254 7.64801 473.383 7.73798 cv
473.504 7.83197 473.609 7.953 473.695 8.09802 cv
473.777 8.25 473.848 8.43402 473.914 8.64801 cv
476.098 14.656 li
476.129 14.656 li
478.387 8.664 li
478.453 8.44501 478.527 8.26202 478.609 8.10901 cv
478.688 7.961 478.781 7.84003 478.891 7.742 cv
478.996 7.65198 479.121 7.586 479.266 7.54303 cv
479.41 7.508 479.578 7.48798 479.773 7.48401 cv
481.152 7.48401 li
481.289 7.48798 481.41 7.50403 481.516 7.539 cv
481.613 7.578 481.695 7.633 481.766 7.69897 cv
481.828 7.77301 481.879 7.85901 481.914 7.95697 cv
481.945 8.06201 481.961 8.17999 481.965 8.30499 cv
cp
f
491.074 13.758 mo
491.07 14.355 490.992 14.898 490.84 15.383 cv
490.68 15.875 490.445 16.293 490.129 16.645 cv
489.813 16.996 489.414 17.27 488.938 17.461 cv
488.457 17.652 487.898 17.746 487.262 17.75 cv
486.641 17.746 486.102 17.664 485.648 17.492 cv
485.188 17.324 484.809 17.074 484.512 16.746 cv
484.207 16.422 483.984 16.02 483.84 15.539 cv
483.695 15.062 483.625 14.516 483.625 13.898 cv
483.625 13.309 483.703 12.77 483.859 12.277 cv
484.016 11.789 484.254 11.367 484.574 11.016 cv
484.891 10.668 485.285 10.395 485.762 10.199 cv
486.234 10.008 486.793 9.914 487.434 9.90997 cv
488.059 9.914 488.598 9.99597 489.055 10.164 cv
489.512 10.336 489.891 10.586 490.188 10.91 cv
490.484 11.238 490.707 11.641 490.855 12.117 cv
491 12.598 491.07 13.145 491.074 13.758 cv
cp
489.055 13.836 mo
489.051 13.5 489.023 13.184 488.973 12.891 cv
488.914 12.605 488.82 12.355 488.695 12.141 cv
488.563 11.93 488.391 11.762 488.18 11.641 cv
487.961 11.523 487.691 11.465 487.363 11.461 cv
487.074 11.465 486.82 11.52 486.602 11.621 cv
486.383 11.73 486.203 11.887 486.063 12.09 cv
485.922 12.297 485.816 12.543 485.746 12.828 cv
485.676 13.121 485.641 13.449 485.641 13.812 cv
485.641 14.16 485.668 14.477 485.727 14.762 cv
485.781 15.055 485.875 15.305 486.004 15.516 cv
486.129 15.73 486.301 15.895 486.523 16.008 cv
486.738 16.129 487.008 16.187 487.332 16.184 cv
487.625 16.187 487.883 16.133 488.105 16.023 cv
488.32 15.918 488.5 15.766 488.641 15.559 cv
488.781 15.359 488.883 15.113 488.953 14.824 cv
489.016 14.539 489.051 14.211 489.055 13.836 cv
cp
f
499.223 17.305 mo
499.219 17.367 499.207 17.414 499.184 17.449 cv
499.156 17.492 499.109 17.523 499.051 17.547 cv
498.984 17.57 498.902 17.586 498.797 17.602 cv
498.691 17.609 498.559 17.617 498.406 17.617 cv
498.234 17.617 498.102 17.609 498 17.602 cv
497.895 17.586 497.809 17.57 497.746 17.547 cv
497.68 17.523 497.633 17.492 497.605 17.449 cv
497.574 17.414 497.559 17.367 497.563 17.305 cv
497.563 16.535 li
497.203 16.922 496.828 17.219 496.438 17.43 cv
496.039 17.641 495.605 17.746 495.133 17.75 cv
494.598 17.746 494.148 17.645 493.785 17.441 cv
493.418 17.238 493.121 16.965 492.891 16.613 cv
492.656 16.27 492.488 15.863 492.387 15.395 cv
492.285 14.934 492.234 14.441 492.234 13.922 cv
492.234 13.309 492.297 12.754 492.43 12.258 cv
492.559 11.766 492.754 11.344 493.012 10.996 cv
493.266 10.648 493.582 10.383 493.961 10.191 cv
494.34 10.008 494.777 9.914 495.273 9.90997 cv
495.66 9.914 496.012 9.992 496.332 10.148 cv
496.645 10.309 496.961 10.539 497.273 10.844 cv
497.273 7.08197 li
497.273 7.03101 497.285 6.98401 497.316 6.94098 cv
497.34 6.90198 497.395 6.867 497.473 6.836 cv
497.547 6.80902 497.645 6.789 497.773 6.77002 cv
497.895 6.758 498.055 6.75 498.25 6.74597 cv
498.441 6.75 498.598 6.758 498.723 6.77002 cv
498.844 6.789 498.945 6.80902 499.02 6.836 cv
499.09 6.867 499.141 6.90198 499.176 6.94098 cv
499.203 6.98401 499.219 7.03101 499.223 7.08197 cv
cp
497.273 12.66 mo
496.992 12.309 496.723 12.039 496.469 11.852 cv
496.207 11.664 495.938 11.57 495.66 11.57 cv
495.406 11.57 495.188 11.637 495.004 11.762 cv
494.816 11.895 494.668 12.062 494.559 12.273 cv
494.445 12.484 494.363 12.723 494.309 12.984 cv
494.254 13.25 494.227 13.52 494.227 13.789 cv
494.227 14.086 494.25 14.367 494.297 14.641 cv
494.344 14.918 494.418 15.164 494.527 15.379 cv
494.629 15.594 494.773 15.766 494.953 15.895 cv
495.129 16.027 495.352 16.094 495.621 16.09 cv
495.754 16.094 495.883 16.074 496.016 16.031 cv
496.141 15.996 496.273 15.934 496.406 15.84 cv
496.539 15.754 496.676 15.637 496.816 15.492 cv
496.957 15.352 497.109 15.176 497.273 14.969 cv
cp
f
507.625 13.629 mo
507.621 13.867 507.57 14.043 507.465 14.156 cv
507.355 14.273 507.207 14.332 507.027 14.328 cv
502.793 14.328 li
502.789 14.629 502.824 14.898 502.898 15.137 cv
502.965 15.379 503.078 15.582 503.234 15.75 cv
503.387 15.922 503.582 16.051 503.824 16.137 cv
504.063 16.227 504.352 16.27 504.695 16.27 cv
505.035 16.27 505.336 16.246 505.598 16.195 cv
505.855 16.148 506.082 16.094 506.273 16.031 cv
506.461 15.973 506.617 15.918 506.746 15.867 cv
506.867 15.82 506.969 15.797 507.051 15.793 cv
507.094 15.797 507.133 15.805 507.168 15.82 cv
507.195 15.84 507.223 15.871 507.242 15.918 cv
507.262 15.965 507.273 16.031 507.285 16.117 cv
507.289 16.203 507.293 16.312 507.297 16.441 cv
507.293 16.559 507.293 16.656 507.289 16.734 cv
507.281 16.816 507.273 16.883 507.266 16.937 cv
507.254 16.996 507.238 17.047 507.219 17.082 cv
507.199 17.125 507.172 17.16 507.141 17.195 cv
507.105 17.234 507.012 17.285 506.863 17.344 cv
506.707 17.41 506.516 17.473 506.285 17.527 cv
506.047 17.59 505.777 17.637 505.48 17.684 cv
505.176 17.723 504.855 17.746 504.516 17.75 cv
503.895 17.746 503.352 17.672 502.891 17.516 cv
502.422 17.363 502.035 17.125 501.727 16.809 cv
501.41 16.492 501.176 16.094 501.027 15.609 cv
500.871 15.129 500.797 14.562 500.801 13.906 cv
500.797 13.293 500.875 12.734 501.039 12.238 cv
501.195 11.742 501.43 11.324 501.742 10.977 cv
502.047 10.633 502.422 10.367 502.859 10.184 cv
503.297 10.004 503.789 9.914 504.344 9.90997 cv
504.922 9.914 505.422 10 505.836 10.168 cv
506.25 10.344 506.586 10.582 506.852 10.883 cv
507.113 11.187 507.309 11.547 507.438 11.961 cv
507.559 12.379 507.621 12.828 507.625 13.316 cv
cp
505.723 13.066 mo
505.734 12.516 505.625 12.082 505.391 11.77 cv
505.156 11.457 504.789 11.301 504.297 11.297 cv
504.047 11.301 503.832 11.348 503.648 11.437 cv
503.461 11.535 503.309 11.66 503.188 11.816 cv
503.063 11.977 502.969 12.164 502.906 12.379 cv
502.84 12.594 502.801 12.824 502.793 13.066 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
