%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-FourThreads-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:30:06 p.m.
%%BoundingBox: 0 0 628 546
%%HiResBoundingBox: 0 0 627.6000 545.8801
%%CropBox: 0 0 627.6000 545.8801
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -545.88 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 545.88 li
627.6 545.88 li
627.6 0 li
cp
clp
0 0 mo
627.602 0 li
627.602 545.879 li
0 545.879 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
60.961 479.762 mo
612.238 479.762 li
60.961 462.238 mo
612.238 462.238 li
60.961 427.199 mo
612.238 427.199 li
60.961 409.68 mo
612.238 409.68 li
60.961 374.762 mo
612.238 374.762 li
60.961 357.238 mo
612.238 357.238 li
60.961 322.32 mo
612.238 322.32 li
60.961 304.801 mo
612.238 304.801 li
60.961 269.762 mo
612.238 269.762 li
60.961 252.238 mo
612.238 252.238 li
60.961 217.32 mo
612.238 217.32 li
60.961 199.801 mo
612.238 199.801 li
60.961 164.762 mo
612.238 164.762 li
60.961 147.359 mo
612.238 147.359 li
60.961 112.32 mo
612.238 112.32 li
60.961 94.801 mo
612.238 94.801 li
60.961 59.879 mo
612.238 59.879 li
60.961 42.359 mo
612.238 42.359 li
.135805 .104005 .108583 0 cmyk
@
60.961 444.719 mo
612.238 444.719 li
60.961 392.281 mo
612.238 392.281 li
60.961 339.719 mo
612.238 339.719 li
60.961 287.281 mo
612.238 287.281 li
60.961 234.84 mo
612.238 234.84 li
60.961 182.281 mo
612.238 182.281 li
60.961 129.84 mo
612.238 129.84 li
60.961 77.398 mo
612.238 77.398 li
60.961 24.84 mo
612.238 24.84 li
.245457 .199985 .446387 0 cmyk
@
95.52 24.84 mo
95.52 497.16 li
164.398 24.84 mo
164.398 497.16 li
233.281 24.84 mo
233.281 497.16 li
302.16 24.84 mo
302.16 497.16 li
371.039 24.84 mo
371.039 497.16 li
439.922 24.84 mo
439.922 497.16 li
508.801 24.84 mo
508.801 497.16 li
577.801 24.84 mo
577.801 497.16 li
.129366 .100191 .235538 0 cmyk
@
60.961 24.84 mo
60.961 497.16 li
129.961 24.84 mo
129.961 497.16 li
198.84 24.84 mo
198.84 497.16 li
267.719 24.84 mo
267.719 497.16 li
336.602 24.84 mo
336.602 497.16 li
405.48 24.84 mo
405.48 497.16 li
474.359 24.84 mo
474.359 497.16 li
543.238 24.84 mo
543.238 497.16 li
612.238 24.84 mo
612.238 497.16 li
.245457 .199985 .446387 0 cmyk
@
30.359 487.922 mo
48 487.922 li
48 504.961 li
30.359 504.961 li
cp
0 0 0 0 cmyk
ef
30.359 435.359 mo
48 435.359 li
48 452.519 li
30.359 452.519 li
cp
ef
30.359 382.922 mo
48 382.922 li
48 399.961 li
30.359 399.961 li
cp
ef
30.359 330.48 mo
48 330.48 li
48 347.519 li
30.359 347.519 li
cp
ef
30.359 277.922 mo
48 277.922 li
48 295.078 li
30.359 295.078 li
cp
ef
30.359 225.48 mo
48 225.48 li
48 242.519 li
30.359 242.519 li
cp
ef
30.359 173.039 mo
48 173.039 li
48 190.078 li
30.359 190.078 li
cp
ef
23.16 120.48 mo
48 120.48 li
48 137.64 li
23.16 137.64 li
cp
ef
23.16 68.039 mo
48 68.039 li
48 85.078 li
23.16 85.078 li
cp
ef
23.16 15.602 mo
48 15.602 li
48 32.641 li
23.16 32.641 li
cp
ef
.96 lw
60.961 497.16 mo
612.238 497.16 li
.369879 .299321 .304356 .000976577 cmyk
@
60.961 497.16 mo
60.961 501.602 li
129.961 497.16 mo
129.961 501.602 li
198.84 497.16 mo
198.84 501.602 li
267.719 497.16 mo
267.719 501.602 li
336.602 497.16 mo
336.602 501.602 li
405.48 497.16 mo
405.48 501.602 li
474.359 497.16 mo
474.359 501.602 li
543.238 497.16 mo
543.238 501.602 li
612.238 497.16 mo
612.238 501.602 li
@
gsave
60.961 24.84 mo
612.84 24.84 li
612.84 497.879 li
60.961 497.879 li
cp
clp
1 lc
60.961 468.121 mo
129.961 479.762 li
198.84 488.52 li
267.719 488.52 li
336.602 490.199 li
405.48 491.641 li
474.359 489.84 li
543.238 484.559 li
612.238 489.121 li
.721279 .438239 .0234379 0 cmyk
@
grestore
1 lw
55.922 463.109 mo
65.879 463.109 li
65.879 473.07 li
55.922 473.07 li
cp
.721279 .438239 .0234379 0 cmyk
@
124.801 474.629 mo
134.762 474.629 li
134.762 484.59 li
124.801 484.59 li
cp
@
193.68 483.391 mo
203.641 483.391 li
203.641 493.352 li
193.68 493.352 li
cp
@
262.559 483.391 mo
272.52 483.391 li
272.52 493.352 li
262.559 493.352 li
cp
@
331.559 485.191 mo
341.52 485.191 li
341.52 495.148 li
331.559 495.148 li
cp
@
400.441 486.512 mo
410.398 486.512 li
410.398 496.469 li
400.441 496.469 li
cp
@
469.32 484.828 mo
479.281 484.828 li
479.281 494.789 li
469.32 494.789 li
cp
@
538.199 479.551 mo
548.16 479.551 li
548.16 489.512 li
538.199 489.512 li
cp
@
607.078 484.109 mo
617.039 484.109 li
617.039 494.07 li
607.078 494.07 li
cp
@
gsave
60.961 24.84 mo
612.84 24.84 li
612.84 497.879 li
60.961 497.879 li
cp
clp
.96 lw
1 lc
60.961 420.238 mo
129.961 461.879 li
198.84 472.68 li
267.719 474.48 li
336.602 477.602 li
405.48 479.762 li
474.359 486.719 li
543.238 482.879 li
612.238 484.922 li
.467353 0 .87747 0 cmyk
@
grestore
55.922 415.109 mo
65.879 415.109 li
65.879 425.07 li
55.922 425.07 li
cp
.467353 0 .87747 0 cmyk
@
124.801 456.75 mo
134.762 456.75 li
134.762 466.711 li
124.801 466.711 li
cp
@
193.68 467.672 mo
203.641 467.672 li
203.641 477.629 li
193.68 477.629 li
cp
@
262.559 469.352 mo
272.52 469.352 li
272.52 479.309 li
262.559 479.309 li
cp
@
331.559 472.59 mo
341.52 472.59 li
341.52 482.551 li
331.559 482.551 li
cp
@
400.441 474.629 mo
410.398 474.629 li
410.398 484.59 li
400.441 484.59 li
cp
@
469.32 481.59 mo
479.281 481.59 li
479.281 491.551 li
469.32 491.551 li
cp
@
538.199 477.75 mo
548.16 477.75 li
548.16 487.711 li
538.199 487.711 li
cp
@
607.078 479.91 mo
617.039 479.91 li
617.039 489.871 li
607.078 489.871 li
cp
@
gsave
60.961 24.84 mo
612.84 24.84 li
612.84 497.879 li
60.961 497.879 li
cp
clp
.96 lw
1 lc
60.961 260.039 mo
129.961 355.199 li
198.84 414.961 li
267.719 422.641 li
336.602 435.961 li
405.48 446.52 li
474.359 444.719 li
543.238 448.199 li
612.238 442.922 li
0 .993988 1 0 cmyk
@
grestore
55.922 254.91 mo
65.879 254.91 li
65.879 264.871 li
55.922 264.871 li
cp
0 .993988 1 0 cmyk
@
124.801 350.07 mo
134.762 350.07 li
134.762 360.031 li
124.801 360.031 li
cp
@
193.68 409.949 mo
203.641 409.949 li
203.641 419.91 li
193.68 419.91 li
cp
@
262.559 417.629 mo
272.52 417.629 li
272.52 427.59 li
262.559 427.59 li
cp
@
331.559 430.949 mo
341.52 430.949 li
341.52 440.91 li
331.559 440.91 li
cp
@
400.441 441.391 mo
410.398 441.391 li
410.398 451.352 li
400.441 451.352 li
cp
@
469.32 439.711 mo
479.281 439.711 li
479.281 449.672 li
469.32 449.672 li
cp
@
538.199 443.191 mo
548.16 443.191 li
548.16 453.148 li
538.199 453.148 li
cp
@
607.078 437.91 mo
617.039 437.91 li
617.039 447.871 li
607.078 447.871 li
cp
@
gsave
60.961 24.84 mo
612.84 24.84 li
612.84 497.879 li
60.961 497.879 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
60.961 334.199 mo
129.961 401.641 li
198.84 442.68 li
267.719 460.441 li
336.602 455.879 li
405.48 468.84 li
474.359 460.078 li
543.238 470.641 li
612.238 471 li
@
grestore
55.922 329.07 mo
65.879 329.07 li
65.879 339.031 li
55.922 339.031 li
cp
@
124.801 396.629 mo
134.762 396.629 li
134.762 406.59 li
124.801 406.59 li
cp
@
193.68 437.551 mo
203.641 437.551 li
203.641 447.512 li
193.68 447.512 li
cp
@
262.559 455.43 mo
272.52 455.43 li
272.52 465.391 li
262.559 465.391 li
cp
@
331.559 450.871 mo
341.52 450.871 li
341.52 460.828 li
331.559 460.828 li
cp
@
400.441 463.828 mo
410.398 463.828 li
410.398 473.789 li
400.441 473.789 li
cp
@
469.32 455.07 mo
479.281 455.07 li
479.281 465.031 li
469.32 465.031 li
cp
@
538.199 465.512 mo
548.16 465.512 li
548.16 475.469 li
538.199 475.469 li
cp
@
607.078 465.871 mo
617.039 465.871 li
617.039 475.828 li
607.078 475.828 li
cp
@
gsave
60.961 24.84 mo
612.84 24.84 li
612.84 497.879 li
60.961 497.879 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
60.961 66.48 mo
129.961 255.48 li
198.84 343.922 li
267.719 397.199 li
336.602 387 li
405.48 412.199 li
474.359 396.48 li
543.238 414.961 li
612.238 389.398 li
.721279 .438239 .0234379 0 cmyk
@
grestore
55.922 61.469 mo
65.879 61.469 li
65.879 71.43 li
55.922 71.43 li
cp
.721279 .438239 .0234379 0 cmyk
@
124.801 250.352 mo
134.762 250.352 li
134.762 260.309 li
124.801 260.309 li
cp
@
193.68 338.91 mo
203.641 338.91 li
203.641 348.871 li
193.68 348.871 li
cp
@
262.559 392.07 mo
272.52 392.07 li
272.52 402.031 li
262.559 402.031 li
cp
@
331.559 381.871 mo
341.52 381.871 li
341.52 391.828 li
331.559 391.828 li
cp
@
400.441 407.07 mo
410.398 407.07 li
410.398 417.031 li
400.441 417.031 li
cp
@
469.32 391.352 mo
479.281 391.352 li
479.281 401.309 li
469.32 401.309 li
cp
@
538.199 409.949 mo
548.16 409.949 li
548.16 419.91 li
538.199 419.91 li
cp
@
607.078 384.391 mo
617.039 384.391 li
617.039 394.352 li
607.078 394.352 li
cp
@
gsave
60.961 24.84 mo
612.84 24.84 li
612.84 497.879 li
60.961 497.879 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
60.961 157.801 mo
129.961 343.32 li
198.84 399.238 li
267.719 396.48 li
336.602 416.398 li
405.48 434.879 li
474.359 428.641 li
543.238 450.719 li
612.238 439.441 li
.467353 0 .87747 0 cmyk
@
grestore
56.398 153.27 mo
65.398 153.27 li
65.398 162.27 li
56.398 162.27 li
cp
.467353 0 .87747 0 cmyk
@
125.281 338.672 mo
134.281 338.672 li
134.281 347.672 li
125.281 347.672 li
cp
@
194.16 394.711 mo
203.16 394.711 li
203.16 403.711 li
194.16 403.711 li
cp
@
263.039 391.828 mo
272.039 391.828 li
272.039 400.828 li
263.039 400.828 li
cp
@
332.039 411.75 mo
341.039 411.75 li
341.039 420.75 li
332.039 420.75 li
cp
@
400.922 430.352 mo
409.922 430.352 li
409.922 439.352 li
400.922 439.352 li
cp
@
469.801 423.988 mo
478.801 423.988 li
478.801 432.988 li
469.801 432.988 li
cp
@
538.68 446.07 mo
547.68 446.07 li
547.68 455.07 li
538.68 455.07 li
cp
@
607.559 434.91 mo
616.559 434.91 li
616.559 443.91 li
607.559 443.91 li
cp
@
30.309 487.926 mo
48.036 487.926 li
48.036 505.016 li
30.309 505.016 li
cp
0 0 0 0 cmyk
ef
36.938 496.879 mo
36.934 497.562 36.883 498.184 36.777 498.746 cv
36.668 499.309 36.488 499.793 36.242 500.195 cv
35.988 500.602 35.66 500.914 35.262 501.133 cv
34.855 501.355 34.363 501.465 33.777 501.465 cv
33.219 501.465 32.746 501.367 32.367 501.168 cv
31.984 500.973 31.68 500.68 31.445 500.293 cv
31.211 499.906 31.043 499.434 30.949 498.867 cv
30.848 498.305 30.801 497.656 30.801 496.922 cv
30.801 496.25 30.855 495.629 30.965 495.062 cv
31.074 494.5 31.25 494.016 31.5 493.609 cv
31.742 493.207 32.066 492.895 32.473 492.668 cv
32.871 492.449 33.367 492.336 33.957 492.336 cv
34.516 492.336 34.988 492.437 35.371 492.633 cv
35.754 492.836 36.059 493.129 36.293 493.512 cv
36.523 493.902 36.691 494.375 36.789 494.937 cv
36.887 495.5 36.934 496.148 36.938 496.879 cv
cp
35.73 496.961 mo
35.727 496.52 35.711 496.121 35.684 495.77 cv
35.648 495.418 35.602 495.109 35.543 494.84 cv
35.477 494.57 35.398 494.34 35.301 494.145 cv
35.203 493.953 35.086 493.793 34.949 493.664 cv
34.809 493.539 34.648 493.445 34.477 493.387 cv
34.297 493.332 34.102 493.305 33.887 493.301 cv
33.496 493.305 33.18 493.395 32.941 493.578 cv
32.695 493.762 32.504 494.016 32.367 494.332 cv
32.227 494.652 32.133 495.023 32.082 495.453 cv
32.031 495.883 32.008 496.348 32.008 496.84 cv
32.008 497.504 32.039 498.066 32.109 498.527 cv
32.176 498.996 32.285 499.375 32.438 499.664 cv
32.582 499.961 32.773 500.172 33.004 500.301 cv
33.234 500.437 33.516 500.504 33.848 500.5 cv
34.102 500.504 34.324 500.465 34.52 500.379 cv
34.711 500.301 34.879 500.18 35.02 500.023 cv
35.16 499.871 35.273 499.687 35.367 499.473 cv
35.453 499.258 35.527 499.02 35.586 498.758 cv
35.637 498.5 35.676 498.219 35.699 497.914 cv
35.719 497.609 35.727 497.293 35.73 496.961 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.938 500.59 mo
39.938 500.918 39.883 501.133 39.777 501.238 cv
39.668 501.344 39.473 501.395 39.191 501.398 cv
38.914 501.395 38.723 501.344 38.621 501.242 cv
38.512 501.137 38.461 500.926 38.465 500.609 cv
38.461 500.285 38.516 500.07 38.625 499.961 cv
38.73 499.855 38.926 499.801 39.211 499.801 cv
39.484 499.801 39.672 499.855 39.781 499.961 cv
39.883 500.066 39.938 500.277 39.938 500.59 cv
cp
f
47.594 496.879 mo
47.59 497.562 47.539 498.184 47.434 498.746 cv
47.324 499.309 47.145 499.793 46.898 500.195 cv
46.645 500.602 46.316 500.914 45.918 501.133 cv
45.512 501.355 45.02 501.465 44.434 501.465 cv
43.875 501.465 43.402 501.367 43.023 501.168 cv
42.641 500.973 42.336 500.68 42.102 500.293 cv
41.867 499.906 41.699 499.434 41.605 498.867 cv
41.504 498.305 41.457 497.656 41.457 496.922 cv
41.457 496.25 41.512 495.629 41.621 495.062 cv
41.73 494.5 41.906 494.016 42.156 493.609 cv
42.398 493.207 42.723 492.895 43.129 492.668 cv
43.527 492.449 44.023 492.336 44.613 492.336 cv
45.172 492.336 45.645 492.437 46.027 492.633 cv
46.41 492.836 46.715 493.129 46.949 493.512 cv
47.18 493.902 47.348 494.375 47.445 494.937 cv
47.543 495.5 47.59 496.148 47.594 496.879 cv
cp
46.387 496.961 mo
46.383 496.52 46.367 496.121 46.34 495.77 cv
46.305 495.418 46.258 495.109 46.199 494.84 cv
46.133 494.57 46.055 494.34 45.957 494.145 cv
45.859 493.953 45.742 493.793 45.605 493.664 cv
45.465 493.539 45.305 493.445 45.133 493.387 cv
44.953 493.332 44.758 493.305 44.543 493.301 cv
44.152 493.305 43.836 493.395 43.598 493.578 cv
43.352 493.762 43.16 494.016 43.023 494.332 cv
42.883 494.652 42.789 495.023 42.738 495.453 cv
42.688 495.883 42.664 496.348 42.664 496.84 cv
42.664 497.504 42.695 498.066 42.766 498.527 cv
42.832 498.996 42.941 499.375 43.094 499.664 cv
43.238 499.961 43.43 500.172 43.66 500.301 cv
43.891 500.437 44.172 500.504 44.504 500.5 cv
44.758 500.504 44.98 500.465 45.176 500.379 cv
45.367 500.301 45.535 500.18 45.676 500.023 cv
45.816 499.871 45.93 499.687 46.023 499.473 cv
46.109 499.258 46.184 499.02 46.242 498.758 cv
46.293 498.5 46.332 498.219 46.355 497.914 cv
46.375 497.609 46.383 497.293 46.387 496.961 cv
cp
f
30.309 435.441 mo
48.036 435.441 li
48.036 452.531 li
30.309 452.531 li
cp
0 0 0 0 cmyk
ef
36.664 448.387 mo
36.66 448.477 36.652 448.547 36.641 448.605 cv
36.625 448.668 36.605 448.719 36.586 448.75 cv
36.563 448.789 36.539 448.812 36.508 448.828 cv
36.477 448.844 36.445 448.852 36.418 448.852 cv
31.781 448.852 li
31.746 448.852 31.719 448.844 31.691 448.828 cv
31.664 448.812 31.637 448.789 31.613 448.75 cv
31.586 448.719 31.566 448.668 31.555 448.605 cv
31.539 448.547 31.531 448.477 31.535 448.387 cv
31.531 448.309 31.539 448.234 31.555 448.172 cv
31.566 448.113 31.582 448.066 31.605 448.027 cv
31.621 447.992 31.648 447.961 31.68 447.937 cv
31.711 447.918 31.742 447.91 31.781 447.906 cv
33.633 447.906 li
33.633 441.16 li
31.918 442.18 li
31.828 442.23 31.758 442.258 31.711 442.266 cv
31.656 442.273 31.613 442.266 31.582 442.234 cv
31.547 442.207 31.527 442.156 31.516 442.086 cv
31.504 442.02 31.496 441.934 31.5 441.824 cv
31.496 441.75 31.5 441.684 31.512 441.625 cv
31.516 441.574 31.527 441.527 31.543 441.488 cv
31.555 441.453 31.574 441.422 31.598 441.395 cv
31.621 441.367 31.652 441.34 31.699 441.312 cv
33.742 440 li
33.758 439.988 33.777 439.977 33.809 439.969 cv
33.832 439.961 33.867 439.953 33.914 439.941 cv
33.953 439.934 34.004 439.926 34.059 439.922 cv
34.113 439.922 34.18 439.922 34.266 439.918 cv
34.371 439.922 34.465 439.926 34.539 439.934 cv
34.609 439.941 34.664 439.957 34.711 439.973 cv
34.75 439.992 34.777 440.012 34.793 440.035 cv
34.801 440.062 34.809 440.086 34.813 440.109 cv
34.813 447.906 li
36.418 447.906 li
36.453 447.91 36.488 447.918 36.52 447.937 cv
36.551 447.961 36.574 447.992 36.598 448.027 cv
36.613 448.066 36.629 448.113 36.645 448.172 cv
36.652 448.234 36.66 448.309 36.664 448.387 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.938 448.105 mo
39.938 448.434 39.883 448.648 39.777 448.754 cv
39.668 448.859 39.473 448.91 39.191 448.914 cv
38.914 448.91 38.723 448.859 38.621 448.758 cv
38.512 448.652 38.461 448.441 38.465 448.125 cv
38.461 447.801 38.516 447.586 38.625 447.477 cv
38.73 447.371 38.926 447.316 39.211 447.316 cv
39.484 447.316 39.672 447.371 39.781 447.477 cv
39.883 447.582 39.938 447.793 39.938 448.105 cv
cp
f
47.258 446 mo
47.258 446.477 47.176 446.898 47.016 447.27 cv
46.855 447.641 46.629 447.953 46.34 448.207 cv
46.043 448.461 45.695 448.656 45.293 448.785 cv
44.887 448.918 44.438 448.98 43.945 448.98 cv
43.668 448.98 43.406 448.961 43.164 448.922 cv
42.914 448.883 42.695 448.836 42.508 448.781 cv
42.313 448.727 42.156 448.672 42.031 448.613 cv
41.906 448.562 41.828 448.52 41.797 448.484 cv
41.762 448.453 41.738 448.422 41.727 448.395 cv
41.711 448.367 41.695 448.336 41.688 448.293 cv
41.672 448.258 41.664 448.207 41.664 448.145 cv
41.656 448.086 41.656 448.016 41.656 447.934 cv
41.656 447.859 41.66 447.789 41.668 447.727 cv
41.676 447.664 41.688 447.613 41.707 447.574 cv
41.723 447.535 41.742 447.508 41.77 447.488 cv
41.793 447.473 41.824 447.465 41.855 447.461 cv
41.902 447.465 41.973 447.492 42.066 447.547 cv
42.16 447.605 42.289 447.668 42.453 447.734 cv
42.617 447.801 42.816 447.863 43.059 447.922 cv
43.293 447.98 43.578 448.008 43.914 448.008 cv
44.215 448.008 44.496 447.973 44.754 447.898 cv
45.008 447.828 45.23 447.715 45.418 447.559 cv
45.602 447.406 45.746 447.211 45.852 446.973 cv
45.957 446.738 46.008 446.449 46.012 446.109 cv
46.008 445.828 45.965 445.578 45.875 445.359 cv
45.785 445.141 45.648 444.961 45.465 444.816 cv
45.277 444.676 45.043 444.57 44.762 444.496 cv
44.477 444.426 44.137 444.387 43.75 444.387 cv
43.465 444.387 43.227 444.402 43.027 444.43 cv
42.824 444.461 42.637 444.477 42.465 444.473 cv
42.336 444.477 42.242 444.445 42.191 444.383 cv
42.133 444.324 42.105 444.211 42.109 444.039 cv
42.109 440.426 li
42.105 440.277 42.141 440.168 42.215 440.09 cv
42.281 440.02 42.383 439.98 42.52 439.98 cv
46.449 439.98 li
46.484 439.98 46.52 439.992 46.555 440.012 cv
46.586 440.035 46.613 440.066 46.641 440.105 cv
46.66 440.148 46.676 440.199 46.691 440.262 cv
46.699 440.328 46.707 440.406 46.711 440.488 cv
46.707 440.656 46.684 440.781 46.645 440.871 cv
46.598 440.965 46.539 441.012 46.461 441.008 cv
43.289 441.008 li
43.289 443.496 li
43.441 443.477 43.598 443.465 43.762 443.457 cv
43.918 443.453 44.105 443.449 44.32 443.449 cv
44.805 443.449 45.23 443.512 45.598 443.633 cv
45.961 443.754 46.266 443.926 46.516 444.145 cv
46.758 444.371 46.945 444.637 47.07 444.949 cv
47.195 445.266 47.258 445.617 47.258 446 cv
cp
f
30.309 382.961 mo
48.036 382.961 li
48.036 400.051 li
30.309 400.051 li
cp
0 0 0 0 cmyk
ef
36.574 393.824 mo
36.57 394.234 36.5 394.602 36.359 394.926 cv
36.215 395.254 36.012 395.535 35.75 395.766 cv
35.484 396 35.156 396.176 34.77 396.301 cv
34.379 396.426 33.941 396.488 33.457 396.488 cv
33.152 396.488 32.875 396.461 32.621 396.414 cv
32.359 396.367 32.129 396.316 31.934 396.246 cv
31.73 396.184 31.566 396.113 31.434 396.043 cv
31.301 395.973 31.215 395.922 31.184 395.887 cv
31.145 395.859 31.121 395.828 31.105 395.793 cv
31.086 395.762 31.066 395.723 31.055 395.676 cv
31.039 395.633 31.031 395.578 31.023 395.508 cv
31.016 395.445 31.012 395.363 31.016 395.262 cv
31.012 395.102 31.027 394.988 31.063 394.922 cv
31.094 394.859 31.141 394.824 31.203 394.824 cv
31.246 394.824 31.328 394.863 31.453 394.934 cv
31.574 395.012 31.734 395.09 31.93 395.172 cv
32.121 395.258 32.348 395.336 32.613 395.406 cv
32.871 395.48 33.164 395.516 33.484 395.516 cv
33.793 395.516 34.063 395.477 34.301 395.398 cv
34.531 395.32 34.73 395.211 34.891 395.07 cv
35.047 394.93 35.164 394.762 35.246 394.566 cv
35.324 394.371 35.363 394.16 35.367 393.934 cv
35.363 393.684 35.313 393.457 35.215 393.254 cv
35.109 393.055 34.961 392.883 34.77 392.734 cv
34.57 392.59 34.332 392.477 34.047 392.398 cv
33.762 392.32 33.438 392.281 33.074 392.281 cv
32.203 392.281 li
32.16 392.281 32.125 392.273 32.09 392.258 cv
32.055 392.242 32.023 392.215 32 392.176 cv
31.973 392.141 31.953 392.094 31.938 392.035 cv
31.922 391.977 31.914 391.898 31.914 391.801 cv
31.914 391.715 31.918 391.645 31.934 391.586 cv
31.941 391.531 31.961 391.484 31.992 391.449 cv
32.016 391.414 32.047 391.391 32.078 391.371 cv
32.109 391.359 32.145 391.352 32.188 391.348 cv
32.961 391.348 li
33.262 391.352 33.531 391.312 33.773 391.23 cv
34.008 391.156 34.211 391.043 34.383 390.895 cv
34.547 390.75 34.676 390.574 34.766 390.371 cv
34.855 390.168 34.902 389.941 34.902 389.687 cv
34.902 389.508 34.871 389.332 34.813 389.164 cv
34.75 389 34.66 388.855 34.543 388.73 cv
34.422 388.605 34.27 388.508 34.09 388.437 cv
33.902 388.367 33.691 388.332 33.449 388.332 cv
33.184 388.332 32.938 388.375 32.719 388.453 cv
32.492 388.535 32.297 388.621 32.125 388.711 cv
31.949 388.805 31.805 388.891 31.691 388.969 cv
31.578 389.051 31.496 389.09 31.453 389.086 cv
31.418 389.09 31.391 389.082 31.367 389.07 cv
31.34 389.059 31.32 389.035 31.305 389 cv
31.289 388.969 31.277 388.922 31.27 388.855 cv
31.262 388.797 31.258 388.715 31.262 388.613 cv
31.258 388.547 31.258 388.488 31.266 388.434 cv
31.266 388.383 31.277 388.336 31.293 388.293 cv
31.309 388.258 31.324 388.223 31.344 388.187 cv
31.359 388.16 31.391 388.121 31.434 388.074 cv
31.477 388.031 31.563 387.969 31.699 387.887 cv
31.828 387.805 31.992 387.727 32.188 387.645 cv
32.379 387.566 32.602 387.496 32.859 387.441 cv
33.109 387.387 33.383 387.359 33.68 387.359 cv
34.086 387.359 34.449 387.414 34.762 387.516 cv
35.074 387.625 35.332 387.773 35.543 387.961 cv
35.746 388.156 35.902 388.387 36.008 388.652 cv
36.109 388.922 36.16 389.215 36.164 389.539 cv
36.16 389.82 36.125 390.082 36.055 390.316 cv
35.98 390.559 35.871 390.77 35.73 390.953 cv
35.586 391.141 35.414 391.297 35.211 391.426 cv
35.004 391.559 34.766 391.652 34.496 391.699 cv
34.496 391.711 li
34.801 391.746 35.082 391.82 35.336 391.941 cv
35.59 392.062 35.809 392.215 35.992 392.398 cv
36.172 392.582 36.313 392.797 36.418 393.039 cv
36.52 393.285 36.57 393.547 36.574 393.824 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.938 395.613 mo
39.938 395.941 39.883 396.156 39.777 396.262 cv
39.668 396.367 39.473 396.418 39.191 396.422 cv
38.914 396.418 38.723 396.367 38.621 396.266 cv
38.512 396.16 38.461 395.949 38.465 395.633 cv
38.461 395.309 38.516 395.094 38.625 394.984 cv
38.73 394.879 38.926 394.824 39.211 394.824 cv
39.484 394.824 39.672 394.879 39.781 394.984 cv
39.883 395.09 39.938 395.301 39.938 395.613 cv
cp
f
47.594 391.902 mo
47.59 392.586 47.539 393.207 47.434 393.77 cv
47.324 394.332 47.145 394.816 46.898 395.219 cv
46.645 395.625 46.316 395.937 45.918 396.156 cv
45.512 396.379 45.02 396.488 44.434 396.488 cv
43.875 396.488 43.402 396.391 43.023 396.191 cv
42.641 395.996 42.336 395.703 42.102 395.316 cv
41.867 394.93 41.699 394.457 41.605 393.891 cv
41.504 393.328 41.457 392.68 41.457 391.945 cv
41.457 391.273 41.512 390.652 41.621 390.086 cv
41.73 389.523 41.906 389.039 42.156 388.633 cv
42.398 388.23 42.723 387.918 43.129 387.691 cv
43.527 387.473 44.023 387.359 44.613 387.359 cv
45.172 387.359 45.645 387.461 46.027 387.656 cv
46.41 387.859 46.715 388.152 46.949 388.535 cv
47.18 388.926 47.348 389.398 47.445 389.961 cv
47.543 390.523 47.59 391.172 47.594 391.902 cv
cp
46.387 391.984 mo
46.383 391.543 46.367 391.145 46.34 390.793 cv
46.305 390.441 46.258 390.133 46.199 389.863 cv
46.133 389.594 46.055 389.363 45.957 389.168 cv
45.859 388.977 45.742 388.816 45.605 388.687 cv
45.465 388.562 45.305 388.469 45.133 388.41 cv
44.953 388.355 44.758 388.328 44.543 388.324 cv
44.152 388.328 43.836 388.418 43.598 388.602 cv
43.352 388.785 43.16 389.039 43.023 389.355 cv
42.883 389.676 42.789 390.047 42.738 390.477 cv
42.688 390.906 42.664 391.371 42.664 391.863 cv
42.664 392.527 42.695 393.09 42.766 393.551 cv
42.832 394.02 42.941 394.398 43.094 394.687 cv
43.238 394.984 43.43 395.195 43.66 395.324 cv
43.891 395.461 44.172 395.527 44.504 395.523 cv
44.758 395.527 44.98 395.488 45.176 395.402 cv
45.367 395.324 45.535 395.203 45.676 395.047 cv
45.816 394.895 45.93 394.711 46.023 394.496 cv
46.109 394.281 46.184 394.043 46.242 393.781 cv
46.293 393.523 46.332 393.242 46.355 392.937 cv
46.375 392.633 46.383 392.316 46.387 391.984 cv
cp
f
30.309 330.469 mo
48.036 330.469 li
48.036 347.559 li
30.309 347.559 li
cp
0 0 0 0 cmyk
ef
37.031 341.344 mo
37.027 341.5 37.004 341.617 36.961 341.703 cv
36.914 341.789 36.852 341.832 36.77 341.832 cv
35.77 341.832 li
35.77 343.699 li
35.77 343.738 35.758 343.77 35.738 343.793 cv
35.719 343.82 35.688 343.84 35.641 343.859 cv
35.594 343.875 35.531 343.887 35.457 343.898 cv
35.379 343.906 35.281 343.91 35.168 343.914 cv
35.051 343.91 34.957 343.906 34.883 343.898 cv
34.805 343.887 34.746 343.875 34.703 343.859 cv
34.656 343.84 34.625 343.82 34.609 343.793 cv
34.594 343.77 34.586 343.738 34.586 343.699 cv
34.586 341.832 li
30.953 341.832 li
30.898 341.832 30.852 341.828 30.816 341.812 cv
30.777 341.801 30.742 341.773 30.715 341.734 cv
30.684 341.699 30.664 341.648 30.652 341.578 cv
30.641 341.512 30.637 341.422 30.637 341.309 cv
30.637 341.227 30.637 341.148 30.645 341.078 cv
30.645 341.012 30.656 340.949 30.672 340.887 cv
30.684 340.832 30.699 340.777 30.727 340.723 cv
30.746 340.676 30.773 340.617 30.809 340.555 cv
33.977 335.156 li
34 335.125 34.031 335.094 34.078 335.062 cv
34.117 335.039 34.176 335.016 34.25 334.992 cv
34.316 334.977 34.402 334.965 34.508 334.957 cv
34.605 334.953 34.727 334.949 34.871 334.945 cv
35.023 334.949 35.156 334.953 35.273 334.961 cv
35.383 334.973 35.477 334.988 35.551 335.004 cv
35.617 335.027 35.672 335.051 35.711 335.078 cv
35.75 335.109 35.77 335.145 35.77 335.184 cv
35.77 340.855 li
36.77 340.855 li
36.844 340.859 36.906 340.898 36.957 340.977 cv
37.004 341.059 37.027 341.184 37.031 341.344 cv
cp
34.586 335.98 mo
34.574 335.98 li
31.715 340.855 li
34.586 340.855 li
cp
.629236 .549432 .540154 .282963 cmyk
f
39.895 343.121 mo
39.891 343.449 39.836 343.668 39.734 343.773 cv
39.625 343.879 39.43 343.93 39.148 343.934 cv
38.867 343.93 38.676 343.879 38.574 343.777 cv
38.465 343.672 38.414 343.461 38.418 343.145 cv
38.414 342.82 38.469 342.605 38.578 342.496 cv
38.688 342.391 38.883 342.336 39.168 342.332 cv
39.441 342.336 39.633 342.391 39.738 342.492 cv
39.84 342.602 39.891 342.809 39.895 343.121 cv
cp
f
47.273 341.016 mo
47.273 341.496 47.191 341.918 47.031 342.285 cv
46.871 342.656 46.645 342.969 46.352 343.223 cv
46.059 343.477 45.711 343.668 45.305 343.801 cv
44.898 343.934 44.449 344 43.957 344 cv
43.68 344 43.418 343.98 43.172 343.941 cv
42.922 343.902 42.699 343.855 42.512 343.801 cv
42.316 343.746 42.16 343.691 42.039 343.633 cv
41.914 343.578 41.836 343.535 41.801 343.5 cv
41.766 343.473 41.742 343.441 41.73 343.414 cv
41.715 343.387 41.699 343.355 41.691 343.312 cv
41.676 343.277 41.668 343.227 41.668 343.164 cv
41.66 343.105 41.66 343.035 41.664 342.949 cv
41.66 342.879 41.664 342.809 41.672 342.742 cv
41.68 342.684 41.691 342.633 41.711 342.59 cv
41.727 342.555 41.746 342.527 41.773 342.504 cv
41.797 342.488 41.828 342.477 41.863 342.477 cv
41.906 342.477 41.977 342.508 42.074 342.562 cv
42.168 342.625 42.297 342.687 42.461 342.75 cv
42.621 342.82 42.824 342.883 43.066 342.937 cv
43.305 343 43.59 343.027 43.922 343.027 cv
44.227 343.027 44.508 342.992 44.766 342.918 cv
45.023 342.848 45.242 342.734 45.43 342.574 cv
45.609 342.422 45.754 342.227 45.863 341.988 cv
45.965 341.754 46.02 341.465 46.023 341.125 cv
46.02 340.844 45.973 340.594 45.887 340.375 cv
45.793 340.16 45.656 339.98 45.477 339.832 cv
45.289 339.691 45.055 339.582 44.773 339.508 cv
44.484 339.441 44.148 339.406 43.758 339.402 cv
43.477 339.406 43.234 339.422 43.035 339.445 cv
42.832 339.477 42.645 339.488 42.473 339.484 cv
42.344 339.488 42.254 339.457 42.199 339.395 cv
42.145 339.336 42.117 339.223 42.117 339.051 cv
42.117 335.43 li
42.117 335.281 42.152 335.168 42.223 335.094 cv
42.293 335.023 42.395 334.988 42.527 334.984 cv
46.461 334.984 li
46.492 334.988 46.527 335 46.566 335.016 cv
46.598 335.039 46.629 335.07 46.652 335.109 cv
46.676 335.156 46.691 335.207 46.703 335.27 cv
46.715 335.332 46.723 335.406 46.723 335.492 cv
46.723 335.66 46.699 335.789 46.656 335.879 cv
46.613 335.973 46.551 336.02 46.473 336.016 cv
43.297 336.016 li
43.297 338.508 li
43.445 338.488 43.605 338.473 43.77 338.469 cv
43.93 338.465 44.113 338.465 44.328 338.461 cv
44.813 338.465 45.242 338.523 45.609 338.645 cv
45.977 338.766 46.281 338.937 46.527 339.156 cv
46.77 339.379 46.953 339.648 47.082 339.965 cv
47.207 340.281 47.273 340.633 47.273 341.016 cv
cp
f
30.309 277.988 mo
48.036 277.988 li
48.036 295.078 li
30.309 295.078 li
cp
0 0 0 0 cmyk
ef
36.871 288.488 mo
36.871 288.879 36.809 289.258 36.691 289.617 cv
36.566 289.984 36.383 290.301 36.141 290.574 cv
35.891 290.852 35.578 291.074 35.203 291.238 cv
34.82 291.406 34.375 291.488 33.859 291.488 cv
33.488 291.488 33.16 291.445 32.879 291.352 cv
32.594 291.266 32.348 291.133 32.137 290.961 cv
31.926 290.793 31.75 290.586 31.613 290.34 cv
31.473 290.094 31.359 289.812 31.277 289.496 cv
31.191 289.184 31.133 288.84 31.098 288.461 cv
31.059 288.09 31.039 287.687 31.043 287.254 cv
31.039 286.875 31.059 286.492 31.102 286.102 cv
31.141 285.719 31.215 285.344 31.32 284.977 cv
31.426 284.617 31.57 284.277 31.75 283.961 cv
31.93 283.645 32.156 283.367 32.43 283.133 cv
32.703 282.898 33.027 282.711 33.406 282.57 cv
33.785 282.434 34.227 282.367 34.73 282.363 cv
34.898 282.367 35.07 282.375 35.242 282.395 cv
35.414 282.418 35.574 282.449 35.723 282.48 cv
35.871 282.52 35.992 282.555 36.094 282.594 cv
36.191 282.633 36.258 282.668 36.293 282.691 cv
36.32 282.719 36.344 282.746 36.363 282.773 cv
36.379 282.805 36.395 282.836 36.402 282.871 cv
36.41 282.906 36.414 282.945 36.422 282.988 cv
36.422 283.031 36.426 283.086 36.43 283.148 cv
36.426 283.234 36.426 283.305 36.426 283.359 cv
36.422 283.422 36.41 283.469 36.398 283.504 cv
36.379 283.543 36.359 283.57 36.336 283.586 cv
36.309 283.605 36.277 283.613 36.238 283.613 cv
36.188 283.613 36.117 283.598 36.031 283.566 cv
35.941 283.535 35.836 283.5 35.715 283.457 cv
35.59 283.422 35.441 283.387 35.266 283.352 cv
35.09 283.324 34.887 283.309 34.656 283.305 cv
34.227 283.309 33.859 283.395 33.555 283.566 cv
33.25 283.738 33 283.973 32.805 284.266 cv
32.609 284.559 32.465 284.898 32.375 285.281 cv
32.277 285.672 32.223 286.074 32.215 286.492 cv
32.332 286.426 32.469 286.359 32.617 286.289 cv
32.766 286.223 32.926 286.16 33.102 286.102 cv
33.277 286.051 33.465 286.004 33.66 285.969 cv
33.855 285.937 34.066 285.922 34.293 285.918 cv
34.77 285.922 35.172 285.988 35.504 286.113 cv
35.832 286.246 36.098 286.426 36.305 286.656 cv
36.504 286.887 36.648 287.156 36.738 287.469 cv
36.824 287.781 36.871 288.121 36.871 288.488 cv
cp
35.676 288.598 mo
35.676 288.336 35.648 288.094 35.598 287.875 cv
35.543 287.66 35.453 287.477 35.332 287.32 cv
35.207 287.172 35.043 287.055 34.84 286.973 cv
34.629 286.891 34.375 286.848 34.078 286.848 cv
33.906 286.848 33.738 286.863 33.57 286.895 cv
33.398 286.926 33.234 286.969 33.078 287.016 cv
32.918 287.07 32.77 287.133 32.629 287.203 cv
32.484 287.277 32.352 287.352 32.234 287.43 cv
32.23 288.023 32.27 288.52 32.348 288.914 cv
32.422 289.312 32.531 289.629 32.676 289.867 cv
32.82 290.109 33 290.281 33.215 290.383 cv
33.43 290.488 33.68 290.539 33.969 290.535 cv
34.258 290.539 34.512 290.484 34.727 290.371 cv
34.941 290.266 35.117 290.117 35.262 289.93 cv
35.402 289.746 35.508 289.539 35.574 289.309 cv
35.641 289.078 35.676 288.844 35.676 288.598 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.938 290.613 mo
39.938 290.941 39.883 291.156 39.777 291.262 cv
39.668 291.367 39.473 291.418 39.191 291.422 cv
38.914 291.418 38.723 291.367 38.621 291.266 cv
38.512 291.16 38.461 290.949 38.465 290.633 cv
38.461 290.309 38.516 290.094 38.625 289.984 cv
38.73 289.879 38.926 289.824 39.211 289.824 cv
39.484 289.824 39.672 289.879 39.781 289.984 cv
39.883 290.09 39.938 290.301 39.938 290.613 cv
cp
f
47.594 286.902 mo
47.59 287.586 47.539 288.207 47.434 288.77 cv
47.324 289.332 47.145 289.816 46.898 290.219 cv
46.645 290.625 46.316 290.937 45.918 291.156 cv
45.512 291.379 45.02 291.488 44.434 291.488 cv
43.875 291.488 43.402 291.391 43.023 291.191 cv
42.641 290.996 42.336 290.703 42.102 290.316 cv
41.867 289.93 41.699 289.457 41.605 288.891 cv
41.504 288.328 41.457 287.68 41.457 286.945 cv
41.457 286.273 41.512 285.652 41.621 285.086 cv
41.73 284.523 41.906 284.039 42.156 283.633 cv
42.398 283.23 42.723 282.918 43.129 282.691 cv
43.527 282.473 44.023 282.359 44.613 282.359 cv
45.172 282.359 45.645 282.461 46.027 282.656 cv
46.41 282.859 46.715 283.152 46.949 283.535 cv
47.18 283.926 47.348 284.398 47.445 284.961 cv
47.543 285.523 47.59 286.172 47.594 286.902 cv
cp
46.387 286.984 mo
46.383 286.543 46.367 286.145 46.34 285.793 cv
46.305 285.441 46.258 285.133 46.199 284.863 cv
46.133 284.594 46.055 284.363 45.957 284.168 cv
45.859 283.977 45.742 283.816 45.605 283.687 cv
45.465 283.562 45.305 283.469 45.133 283.41 cv
44.953 283.355 44.758 283.328 44.543 283.324 cv
44.152 283.328 43.836 283.418 43.598 283.602 cv
43.352 283.785 43.16 284.039 43.023 284.355 cv
42.883 284.676 42.789 285.047 42.738 285.477 cv
42.688 285.906 42.664 286.371 42.664 286.863 cv
42.664 287.527 42.695 288.09 42.766 288.551 cv
42.832 289.02 42.941 289.398 43.094 289.687 cv
43.238 289.984 43.43 290.195 43.66 290.324 cv
43.891 290.461 44.172 290.527 44.504 290.523 cv
44.758 290.527 44.98 290.488 45.176 290.402 cv
45.367 290.324 45.535 290.203 45.676 290.047 cv
45.816 289.895 45.93 289.711 46.023 289.496 cv
46.109 289.281 46.184 289.043 46.242 288.781 cv
46.293 288.523 46.332 288.242 46.355 287.937 cv
46.375 287.633 46.383 287.316 46.387 286.984 cv
cp
f
30.309 225.512 mo
48.036 225.512 li
48.036 242.602 li
30.309 242.602 li
cp
0 0 0 0 cmyk
ef
36.773 230.508 mo
36.77 230.594 36.766 230.668 36.762 230.73 cv
36.754 230.801 36.746 230.863 36.734 230.922 cv
36.723 230.988 36.707 231.047 36.688 231.102 cv
36.664 231.16 36.641 231.223 36.617 231.281 cv
33.422 238.645 li
33.395 238.703 33.367 238.746 33.336 238.777 cv
33.301 238.812 33.258 238.84 33.203 238.859 cv
33.148 238.879 33.078 238.891 33 238.902 cv
32.914 238.906 32.816 238.91 32.699 238.914 cv
32.543 238.91 32.422 238.902 32.336 238.891 cv
32.25 238.875 32.188 238.859 32.148 238.828 cv
32.109 238.801 32.09 238.762 32.098 238.719 cv
32.098 238.676 32.113 238.625 32.145 238.562 cv
35.504 231.035 li
31.246 231.035 li
31.16 231.039 31.094 230.992 31.051 230.898 cv
31.008 230.809 30.988 230.68 30.988 230.516 cv
30.988 230.43 30.992 230.355 31.004 230.289 cv
31.016 230.227 31.031 230.172 31.055 230.129 cv
31.074 230.086 31.102 230.055 31.137 230.031 cv
31.168 230.012 31.207 230 31.246 230 cv
36.418 230 li
36.477 230 36.531 230.008 36.582 230.023 cv
36.629 230.039 36.664 230.066 36.691 230.105 cv
36.715 230.145 36.734 230.199 36.75 230.262 cv
36.762 230.328 36.77 230.41 36.773 230.508 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.938 238.125 mo
39.938 238.453 39.883 238.668 39.777 238.773 cv
39.668 238.879 39.473 238.93 39.191 238.934 cv
38.914 238.93 38.723 238.879 38.621 238.777 cv
38.512 238.672 38.461 238.461 38.465 238.145 cv
38.461 237.82 38.516 237.605 38.625 237.496 cv
38.73 237.391 38.926 237.336 39.211 237.336 cv
39.484 237.336 39.672 237.391 39.781 237.496 cv
39.883 237.602 39.938 237.812 39.938 238.125 cv
cp
f
47.258 236.02 mo
47.258 236.496 47.176 236.918 47.016 237.289 cv
46.855 237.66 46.629 237.973 46.34 238.227 cv
46.043 238.48 45.695 238.676 45.293 238.805 cv
44.887 238.937 44.438 239 43.945 239 cv
43.668 239 43.406 238.98 43.164 238.941 cv
42.914 238.902 42.695 238.855 42.508 238.801 cv
42.313 238.746 42.156 238.691 42.031 238.633 cv
41.906 238.582 41.828 238.539 41.797 238.504 cv
41.762 238.473 41.738 238.441 41.727 238.414 cv
41.711 238.387 41.695 238.355 41.688 238.312 cv
41.672 238.277 41.664 238.227 41.664 238.164 cv
41.656 238.105 41.656 238.035 41.656 237.953 cv
41.656 237.879 41.66 237.809 41.668 237.746 cv
41.676 237.684 41.688 237.633 41.707 237.594 cv
41.723 237.555 41.742 237.527 41.77 237.508 cv
41.793 237.492 41.824 237.484 41.855 237.48 cv
41.902 237.484 41.973 237.512 42.066 237.566 cv
42.16 237.625 42.289 237.687 42.453 237.754 cv
42.617 237.82 42.816 237.883 43.059 237.941 cv
43.293 238 43.578 238.027 43.914 238.027 cv
44.215 238.027 44.496 237.992 44.754 237.918 cv
45.008 237.848 45.23 237.734 45.418 237.578 cv
45.602 237.426 45.746 237.23 45.852 236.992 cv
45.957 236.758 46.008 236.469 46.012 236.129 cv
46.008 235.848 45.965 235.598 45.875 235.379 cv
45.785 235.16 45.648 234.98 45.465 234.836 cv
45.277 234.695 45.043 234.59 44.762 234.516 cv
44.477 234.445 44.137 234.406 43.75 234.406 cv
43.465 234.406 43.227 234.422 43.027 234.449 cv
42.824 234.48 42.637 234.496 42.465 234.492 cv
42.336 234.496 42.242 234.465 42.191 234.402 cv
42.133 234.344 42.105 234.23 42.109 234.059 cv
42.109 230.445 li
42.105 230.297 42.141 230.187 42.215 230.109 cv
42.281 230.039 42.383 230 42.52 230 cv
46.449 230 li
46.484 230 46.52 230.012 46.555 230.031 cv
46.586 230.055 46.613 230.086 46.641 230.125 cv
46.66 230.168 46.676 230.219 46.691 230.281 cv
46.699 230.348 46.707 230.426 46.711 230.508 cv
46.707 230.676 46.684 230.801 46.645 230.891 cv
46.598 230.984 46.539 231.031 46.461 231.027 cv
43.289 231.027 li
43.289 233.516 li
43.441 233.496 43.598 233.484 43.762 233.477 cv
43.918 233.473 44.105 233.469 44.32 233.469 cv
44.805 233.469 45.23 233.531 45.598 233.652 cv
45.961 233.773 46.266 233.945 46.516 234.164 cv
46.758 234.391 46.945 234.656 47.07 234.969 cv
47.195 235.285 47.258 235.637 47.258 236.02 cv
cp
f
30.309 173.02 mo
48.036 173.02 li
48.036 190.11 li
30.309 190.11 li
cp
0 0 0 0 cmyk
ef
36.711 181.594 mo
36.707 181.98 36.684 182.367 36.641 182.758 cv
36.594 183.152 36.516 183.531 36.41 183.895 cv
36.297 184.258 36.152 184.598 35.969 184.914 cv
35.781 185.234 35.547 185.516 35.27 185.75 cv
34.984 185.992 34.648 186.176 34.266 186.309 cv
33.875 186.441 33.43 186.508 32.922 186.508 cv
32.723 186.508 32.531 186.492 32.348 186.469 cv
32.16 186.441 31.992 186.414 31.848 186.379 cv
31.695 186.344 31.57 186.305 31.473 186.262 cv
31.371 186.223 31.297 186.184 31.254 186.141 cv
31.207 186.102 31.176 186.047 31.156 185.973 cv
31.133 185.902 31.121 185.805 31.125 185.687 cv
31.121 185.586 31.125 185.508 31.133 185.449 cv
31.137 185.391 31.148 185.344 31.164 185.312 cv
31.18 185.281 31.199 185.262 31.223 185.246 cv
31.246 185.238 31.277 185.23 31.316 185.227 cv
31.363 185.23 31.434 185.246 31.527 185.277 cv
31.617 185.312 31.73 185.352 31.875 185.391 cv
32.012 185.434 32.176 185.473 32.363 185.504 cv
32.547 185.543 32.758 185.559 32.996 185.555 cv
33.438 185.559 33.816 185.473 34.137 185.301 cv
34.449 185.129 34.711 184.902 34.914 184.613 cv
35.117 184.328 35.266 183.992 35.367 183.609 cv
35.465 183.23 35.52 182.832 35.531 182.41 cv
35.285 182.555 34.996 182.68 34.66 182.785 cv
34.32 182.898 33.934 182.953 33.496 182.949 cv
33.004 182.953 32.59 182.887 32.254 182.75 cv
31.918 182.617 31.645 182.434 31.441 182.199 cv
31.234 181.969 31.09 181.691 31.004 181.367 cv
30.914 181.051 30.871 180.699 30.871 180.32 cv
30.871 179.93 30.926 179.559 31.043 179.199 cv
31.152 178.848 31.332 178.535 31.578 178.266 cv
31.816 177.996 32.125 177.781 32.504 177.621 cv
32.875 177.461 33.324 177.379 33.848 177.379 cv
34.215 177.379 34.539 177.426 34.828 177.52 cv
35.109 177.613 35.359 177.75 35.574 177.926 cv
35.781 178.102 35.961 178.312 36.109 178.562 cv
36.254 178.812 36.371 179.094 36.461 179.406 cv
36.547 179.723 36.609 180.066 36.652 180.434 cv
36.688 180.805 36.707 181.191 36.711 181.594 cv
cp
35.512 181.465 mo
35.512 180.883 35.473 180.391 35.395 179.988 cv
35.316 179.59 35.199 179.266 35.051 179.016 cv
34.898 178.77 34.715 178.59 34.496 178.48 cv
34.273 178.371 34.02 178.316 33.738 178.316 cv
33.434 178.316 33.18 178.371 32.973 178.48 cv
32.762 178.59 32.59 178.734 32.457 178.91 cv
32.32 179.094 32.219 179.297 32.156 179.523 cv
32.09 179.754 32.059 179.992 32.063 180.23 cv
32.059 180.504 32.09 180.75 32.148 180.969 cv
32.203 181.195 32.293 181.383 32.426 181.539 cv
32.551 181.695 32.719 181.816 32.926 181.902 cv
33.129 181.988 33.383 182.031 33.688 182.027 cv
34.027 182.031 34.359 181.98 34.684 181.875 cv
35 181.773 35.277 181.637 35.512 181.465 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.938 185.633 mo
39.938 185.961 39.883 186.176 39.777 186.281 cv
39.668 186.387 39.473 186.437 39.191 186.441 cv
38.914 186.437 38.723 186.387 38.621 186.285 cv
38.512 186.18 38.461 185.969 38.465 185.652 cv
38.461 185.328 38.516 185.113 38.625 185.004 cv
38.73 184.898 38.926 184.844 39.211 184.844 cv
39.484 184.844 39.672 184.898 39.781 185.004 cv
39.883 185.109 39.938 185.32 39.938 185.633 cv
cp
f
47.594 181.922 mo
47.59 182.605 47.539 183.227 47.434 183.789 cv
47.324 184.352 47.145 184.836 46.898 185.238 cv
46.645 185.645 46.316 185.957 45.918 186.176 cv
45.512 186.398 45.02 186.508 44.434 186.508 cv
43.875 186.508 43.402 186.41 43.023 186.211 cv
42.641 186.016 42.336 185.723 42.102 185.336 cv
41.867 184.949 41.699 184.477 41.605 183.91 cv
41.504 183.348 41.457 182.699 41.457 181.965 cv
41.457 181.293 41.512 180.672 41.621 180.105 cv
41.73 179.543 41.906 179.059 42.156 178.652 cv
42.398 178.25 42.723 177.937 43.129 177.711 cv
43.527 177.492 44.023 177.379 44.613 177.379 cv
45.172 177.379 45.645 177.48 46.027 177.676 cv
46.41 177.879 46.715 178.172 46.949 178.555 cv
47.18 178.945 47.348 179.418 47.445 179.98 cv
47.543 180.543 47.59 181.191 47.594 181.922 cv
cp
46.387 182.004 mo
46.383 181.562 46.367 181.164 46.34 180.812 cv
46.305 180.461 46.258 180.152 46.199 179.883 cv
46.133 179.613 46.055 179.383 45.957 179.187 cv
45.859 178.996 45.742 178.836 45.605 178.707 cv
45.465 178.582 45.305 178.488 45.133 178.43 cv
44.953 178.375 44.758 178.348 44.543 178.344 cv
44.152 178.348 43.836 178.437 43.598 178.621 cv
43.352 178.805 43.16 179.059 43.023 179.375 cv
42.883 179.695 42.789 180.066 42.738 180.496 cv
42.688 180.926 42.664 181.391 42.664 181.883 cv
42.664 182.547 42.695 183.109 42.766 183.57 cv
42.832 184.039 42.941 184.418 43.094 184.707 cv
43.238 185.004 43.43 185.215 43.66 185.344 cv
43.891 185.48 44.172 185.547 44.504 185.543 cv
44.758 185.547 44.98 185.508 45.176 185.422 cv
45.367 185.344 45.535 185.223 45.676 185.066 cv
45.816 184.914 45.93 184.73 46.023 184.516 cv
46.109 184.301 46.184 184.062 46.242 183.801 cv
46.293 183.543 46.332 183.262 46.355 182.957 cv
46.375 182.652 46.383 182.336 46.387 182.004 cv
cp
f
23.211 120.539 mo
48.031 120.539 li
48.031 137.629 li
23.211 137.629 li
cp
0 0 0 0 cmyk
ef
29.586 133.434 mo
29.582 133.523 29.574 133.594 29.563 133.652 cv
29.547 133.715 29.527 133.766 29.508 133.797 cv
29.484 133.836 29.461 133.859 29.43 133.875 cv
29.398 133.891 29.367 133.898 29.34 133.898 cv
24.703 133.898 li
24.668 133.898 24.641 133.891 24.613 133.875 cv
24.586 133.859 24.559 133.836 24.535 133.797 cv
24.508 133.766 24.488 133.715 24.477 133.652 cv
24.461 133.594 24.453 133.523 24.457 133.434 cv
24.453 133.355 24.461 133.281 24.477 133.219 cv
24.488 133.16 24.504 133.113 24.527 133.074 cv
24.543 133.039 24.57 133.008 24.602 132.984 cv
24.633 132.965 24.664 132.957 24.703 132.953 cv
26.555 132.953 li
26.555 126.207 li
24.84 127.227 li
24.75 127.277 24.68 127.305 24.633 127.312 cv
24.578 127.32 24.535 127.312 24.504 127.281 cv
24.469 127.254 24.449 127.203 24.438 127.133 cv
24.426 127.066 24.418 126.98 24.422 126.871 cv
24.418 126.797 24.422 126.73 24.434 126.672 cv
24.438 126.621 24.449 126.574 24.465 126.535 cv
24.477 126.5 24.496 126.469 24.52 126.441 cv
24.543 126.414 24.574 126.387 24.621 126.359 cv
26.664 125.047 li
26.68 125.035 26.699 125.023 26.73 125.016 cv
26.754 125.008 26.789 125 26.836 124.988 cv
26.875 124.98 26.926 124.973 26.98 124.969 cv
27.035 124.969 27.102 124.969 27.188 124.965 cv
27.293 124.969 27.387 124.973 27.461 124.98 cv
27.531 124.988 27.586 125.004 27.633 125.02 cv
27.672 125.039 27.699 125.059 27.715 125.082 cv
27.723 125.109 27.73 125.133 27.734 125.156 cv
27.734 132.953 li
29.34 132.953 li
29.375 132.957 29.41 132.965 29.441 132.984 cv
29.473 133.008 29.496 133.039 29.52 133.074 cv
29.535 133.113 29.551 133.16 29.566 133.219 cv
29.574 133.281 29.582 133.355 29.586 133.434 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
36.977 129.441 mo
36.973 130.125 36.922 130.746 36.816 131.309 cv
36.707 131.871 36.527 132.355 36.281 132.758 cv
36.027 133.164 35.699 133.477 35.301 133.695 cv
34.895 133.918 34.402 134.027 33.816 134.027 cv
33.258 134.027 32.785 133.93 32.406 133.73 cv
32.023 133.535 31.719 133.242 31.484 132.855 cv
31.25 132.469 31.082 131.996 30.988 131.43 cv
30.887 130.867 30.84 130.219 30.84 129.484 cv
30.84 128.812 30.895 128.191 31.004 127.625 cv
31.113 127.062 31.289 126.578 31.539 126.172 cv
31.781 125.77 32.105 125.457 32.512 125.23 cv
32.91 125.012 33.406 124.898 33.996 124.898 cv
34.555 124.898 35.027 125 35.41 125.195 cv
35.793 125.398 36.098 125.691 36.332 126.074 cv
36.563 126.465 36.73 126.937 36.828 127.5 cv
36.926 128.062 36.973 128.711 36.977 129.441 cv
cp
35.77 129.523 mo
35.766 129.082 35.75 128.684 35.723 128.332 cv
35.688 127.98 35.641 127.672 35.582 127.402 cv
35.516 127.133 35.438 126.902 35.34 126.707 cv
35.242 126.516 35.125 126.355 34.988 126.227 cv
34.848 126.102 34.688 126.008 34.516 125.949 cv
34.336 125.895 34.141 125.867 33.926 125.863 cv
33.535 125.867 33.219 125.957 32.98 126.141 cv
32.734 126.324 32.543 126.578 32.406 126.895 cv
32.266 127.215 32.172 127.586 32.121 128.016 cv
32.07 128.445 32.047 128.91 32.047 129.402 cv
32.047 130.066 32.078 130.629 32.148 131.09 cv
32.215 131.559 32.324 131.937 32.477 132.227 cv
32.621 132.523 32.813 132.734 33.043 132.863 cv
33.273 133 33.555 133.066 33.887 133.062 cv
34.141 133.066 34.363 133.027 34.559 132.941 cv
34.75 132.863 34.918 132.742 35.059 132.586 cv
35.199 132.434 35.313 132.25 35.406 132.035 cv
35.492 131.82 35.566 131.582 35.625 131.32 cv
35.676 131.062 35.715 130.781 35.738 130.477 cv
35.758 130.172 35.766 129.855 35.77 129.523 cv
cp
f
39.902 133.152 mo
39.902 133.48 39.848 133.695 39.742 133.801 cv
39.633 133.906 39.438 133.957 39.156 133.961 cv
38.879 133.957 38.688 133.906 38.586 133.805 cv
38.477 133.699 38.426 133.488 38.43 133.172 cv
38.426 132.848 38.48 132.633 38.59 132.523 cv
38.695 132.418 38.891 132.363 39.176 132.363 cv
39.449 132.363 39.637 132.418 39.746 132.523 cv
39.848 132.629 39.902 132.84 39.902 133.152 cv
cp
f
47.27 131.047 mo
47.27 131.523 47.188 131.945 47.027 132.316 cv
46.867 132.687 46.641 133 46.352 133.254 cv
46.055 133.508 45.707 133.703 45.305 133.832 cv
44.898 133.965 44.449 134.027 43.957 134.027 cv
43.68 134.027 43.418 134.008 43.176 133.969 cv
42.926 133.93 42.707 133.883 42.52 133.828 cv
42.324 133.773 42.168 133.719 42.043 133.66 cv
41.918 133.609 41.84 133.566 41.809 133.531 cv
41.773 133.5 41.75 133.469 41.738 133.441 cv
41.723 133.414 41.707 133.383 41.699 133.34 cv
41.684 133.305 41.676 133.254 41.676 133.191 cv
41.668 133.133 41.668 133.062 41.668 132.98 cv
41.668 132.906 41.672 132.836 41.68 132.773 cv
41.688 132.711 41.699 132.66 41.719 132.621 cv
41.734 132.582 41.754 132.555 41.781 132.535 cv
41.805 132.52 41.836 132.512 41.867 132.508 cv
41.914 132.512 41.984 132.539 42.078 132.594 cv
42.172 132.652 42.301 132.715 42.465 132.781 cv
42.629 132.848 42.828 132.91 43.07 132.969 cv
43.305 133.027 43.59 133.055 43.926 133.055 cv
44.227 133.055 44.508 133.02 44.766 132.945 cv
45.02 132.875 45.242 132.762 45.43 132.605 cv
45.613 132.453 45.758 132.258 45.863 132.02 cv
45.969 131.785 46.02 131.496 46.023 131.156 cv
46.02 130.875 45.977 130.625 45.887 130.406 cv
45.797 130.187 45.66 130.008 45.477 129.863 cv
45.289 129.723 45.055 129.617 44.773 129.543 cv
44.488 129.473 44.148 129.434 43.762 129.434 cv
43.477 129.434 43.238 129.449 43.039 129.477 cv
42.836 129.508 42.648 129.523 42.477 129.52 cv
42.348 129.523 42.254 129.492 42.203 129.43 cv
42.145 129.371 42.117 129.258 42.121 129.086 cv
42.121 125.473 li
42.117 125.324 42.152 125.215 42.227 125.137 cv
42.293 125.066 42.395 125.027 42.531 125.027 cv
46.461 125.027 li
46.496 125.027 46.531 125.039 46.566 125.059 cv
46.598 125.082 46.625 125.113 46.652 125.152 cv
46.672 125.195 46.688 125.246 46.703 125.309 cv
46.711 125.375 46.719 125.453 46.723 125.535 cv
46.719 125.703 46.695 125.828 46.656 125.918 cv
46.609 126.012 46.551 126.059 46.473 126.055 cv
43.301 126.055 li
43.301 128.543 li
43.453 128.523 43.609 128.512 43.773 128.504 cv
43.93 128.5 44.117 128.496 44.332 128.496 cv
44.816 128.496 45.242 128.559 45.609 128.68 cv
45.973 128.801 46.277 128.973 46.527 129.191 cv
46.77 129.418 46.957 129.684 47.082 129.996 cv
47.207 130.312 47.27 130.664 47.27 131.047 cv
cp
f
23.211 68.059 mo
48.031 68.059 li
48.031 85.149 li
23.211 85.149 li
cp
0 0 0 0 cmyk
ef
29.598 80.941 mo
29.594 81.031 29.586 81.105 29.574 81.164 cv
29.559 81.227 29.539 81.277 29.52 81.309 cv
29.496 81.348 29.473 81.371 29.441 81.387 cv
29.41 81.402 29.379 81.41 29.348 81.41 cv
24.707 81.41 li
24.676 81.41 24.645 81.402 24.617 81.387 cv
24.59 81.371 24.563 81.348 24.539 81.309 cv
24.508 81.277 24.488 81.227 24.48 81.164 cv
24.465 81.105 24.461 81.031 24.461 80.941 cv
24.461 80.863 24.465 80.793 24.48 80.73 cv
24.488 80.672 24.508 80.625 24.531 80.582 cv
24.551 80.547 24.574 80.516 24.605 80.492 cv
24.633 80.473 24.668 80.461 24.707 80.461 cv
26.563 80.461 li
26.563 73.707 li
24.844 74.727 li
24.754 74.777 24.684 74.805 24.633 74.812 cv
24.578 74.82 24.539 74.812 24.508 74.781 cv
24.477 74.754 24.453 74.703 24.441 74.633 cv
24.43 74.566 24.426 74.48 24.426 74.371 cv
24.426 74.297 24.426 74.23 24.434 74.172 cv
24.438 74.121 24.449 74.074 24.465 74.035 cv
24.477 74 24.496 73.969 24.523 73.941 cv
24.547 73.914 24.582 73.887 24.625 73.855 cv
26.672 72.543 li
26.688 72.535 26.711 72.523 26.738 72.512 cv
26.766 72.504 26.801 72.496 26.844 72.484 cv
26.883 72.477 26.93 72.469 26.988 72.465 cv
27.039 72.465 27.109 72.465 27.191 72.461 cv
27.301 72.465 27.391 72.469 27.469 72.477 cv
27.539 72.488 27.598 72.5 27.637 72.516 cv
27.676 72.531 27.703 72.555 27.719 72.578 cv
27.734 72.605 27.742 72.629 27.742 72.656 cv
27.742 80.461 li
29.348 80.461 li
29.383 80.461 29.414 80.473 29.449 80.492 cv
29.48 80.516 29.508 80.547 29.531 80.582 cv
29.547 80.625 29.563 80.672 29.578 80.73 cv
29.586 80.793 29.594 80.863 29.598 80.941 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
36.648 80.902 mo
36.645 80.988 36.641 81.062 36.633 81.125 cv
36.621 81.191 36.605 81.246 36.586 81.285 cv
36.563 81.332 36.531 81.363 36.5 81.379 cv
36.461 81.402 36.426 81.41 36.391 81.41 cv
31.48 81.41 li
31.414 81.41 31.355 81.402 31.309 81.387 cv
31.258 81.371 31.219 81.348 31.188 81.309 cv
31.152 81.277 31.125 81.223 31.109 81.152 cv
31.09 81.082 31.082 80.996 31.086 80.895 cv
31.082 80.805 31.086 80.727 31.098 80.656 cv
31.102 80.59 31.117 80.527 31.145 80.473 cv
31.164 80.422 31.195 80.371 31.23 80.316 cv
31.266 80.266 31.313 80.211 31.371 80.148 cv
33.148 78.32 li
33.555 77.902 33.883 77.523 34.133 77.187 cv
34.375 76.855 34.566 76.551 34.707 76.273 cv
34.84 76.004 34.93 75.754 34.973 75.527 cv
35.012 75.301 35.031 75.09 35.035 74.895 cv
35.031 74.699 35 74.516 34.934 74.336 cv
34.867 74.164 34.77 74.008 34.648 73.871 cv
34.52 73.742 34.363 73.637 34.176 73.555 cv
33.984 73.48 33.77 73.441 33.527 73.437 cv
33.238 73.441 32.977 73.48 32.75 73.555 cv
32.516 73.637 32.316 73.723 32.148 73.809 cv
31.973 73.902 31.828 73.984 31.715 74.062 cv
31.598 74.141 31.512 74.18 31.457 74.18 cv
31.422 74.18 31.395 74.172 31.371 74.152 cv
31.344 74.137 31.32 74.105 31.305 74.062 cv
31.285 74.023 31.273 73.969 31.266 73.898 cv
31.258 73.828 31.254 73.746 31.254 73.648 cv
31.254 73.582 31.254 73.523 31.258 73.473 cv
31.262 73.422 31.27 73.379 31.281 73.34 cv
31.293 73.309 31.309 73.273 31.328 73.238 cv
31.344 73.211 31.379 73.172 31.438 73.121 cv
31.488 73.074 31.586 73.008 31.723 72.922 cv
31.855 72.84 32.023 72.758 32.23 72.68 cv
32.43 72.602 32.652 72.535 32.902 72.477 cv
33.145 72.426 33.402 72.398 33.676 72.395 cv
34.102 72.398 34.48 72.461 34.805 72.578 cv
35.125 72.703 35.391 72.867 35.609 73.074 cv
35.82 73.289 35.98 73.535 36.086 73.809 cv
36.191 74.09 36.246 74.387 36.246 74.699 cv
36.246 74.988 36.219 75.27 36.168 75.551 cv
36.117 75.832 36.012 76.137 35.848 76.465 cv
35.684 76.793 35.449 77.156 35.145 77.555 cv
34.84 77.957 34.43 78.418 33.922 78.937 cv
32.516 80.406 li
36.383 80.406 li
36.414 80.41 36.449 80.418 36.488 80.437 cv
36.52 80.461 36.551 80.492 36.578 80.531 cv
36.602 80.574 36.621 80.629 36.633 80.687 cv
36.641 80.75 36.645 80.82 36.648 80.902 cv
cp
f
39.891 80.66 mo
39.887 80.988 39.832 81.207 39.73 81.312 cv
39.621 81.418 39.426 81.469 39.145 81.473 cv
38.863 81.469 38.672 81.418 38.57 81.316 cv
38.461 81.211 38.41 81 38.414 80.684 cv
38.41 80.359 38.465 80.145 38.574 80.035 cv
38.684 79.93 38.879 79.875 39.164 79.871 cv
39.438 79.875 39.629 79.93 39.734 80.031 cv
39.836 80.141 39.887 80.348 39.891 80.66 cv
cp
f
47.605 76.945 mo
47.602 77.629 47.547 78.254 47.441 78.816 cv
47.332 79.383 47.156 79.867 46.906 80.27 cv
46.656 80.676 46.328 80.988 45.93 81.207 cv
45.523 81.43 45.027 81.539 44.441 81.539 cv
43.879 81.539 43.41 81.441 43.027 81.242 cv
42.645 81.043 42.336 80.75 42.102 80.363 cv
41.867 79.977 41.699 79.5 41.605 78.934 cv
41.504 78.371 41.457 77.723 41.461 76.988 cv
41.457 76.312 41.512 75.691 41.625 75.125 cv
41.73 74.559 41.91 74.074 42.16 73.668 cv
42.406 73.266 42.73 72.949 43.133 72.727 cv
43.535 72.508 44.027 72.398 44.617 72.395 cv
45.176 72.398 45.648 72.5 46.035 72.695 cv
46.414 72.898 46.723 73.191 46.957 73.574 cv
47.188 73.965 47.355 74.437 47.457 75 cv
47.555 75.566 47.602 76.215 47.605 76.945 cv
cp
46.398 77.027 mo
46.395 76.586 46.379 76.191 46.348 75.836 cv
46.313 75.484 46.266 75.172 46.207 74.902 cv
46.141 74.633 46.059 74.398 45.965 74.203 cv
45.863 74.008 45.746 73.848 45.613 73.723 cv
45.473 73.598 45.316 73.508 45.141 73.449 cv
44.965 73.395 44.77 73.367 44.551 73.363 cv
44.16 73.367 43.844 73.457 43.602 73.637 cv
43.359 73.82 43.168 74.07 43.027 74.391 cv
42.887 74.711 42.789 75.09 42.742 75.52 cv
42.688 75.953 42.664 76.414 42.668 76.906 cv
42.664 77.574 42.699 78.141 42.77 78.602 cv
42.84 79.07 42.949 79.449 43.098 79.738 cv
43.246 80.035 43.434 80.246 43.668 80.375 cv
43.895 80.512 44.176 80.578 44.508 80.574 cv
44.762 80.578 44.988 80.535 45.184 80.449 cv
45.379 80.367 45.543 80.25 45.684 80.094 cv
45.82 79.941 45.938 79.758 46.031 79.543 cv
46.121 79.328 46.195 79.09 46.254 78.828 cv
46.305 78.57 46.344 78.289 46.367 77.98 cv
46.387 77.68 46.395 77.359 46.398 77.027 cv
cp
f
23.211 15.57 mo
48.031 15.57 li
48.031 32.66 li
23.211 32.66 li
cp
0 0 0 0 cmyk
ef
29.586 28.434 mo
29.582 28.523 29.574 28.594 29.563 28.652 cv
29.547 28.715 29.527 28.766 29.508 28.797 cv
29.484 28.836 29.461 28.859 29.43 28.875 cv
29.398 28.891 29.367 28.898 29.34 28.898 cv
24.703 28.898 li
24.668 28.898 24.641 28.891 24.613 28.875 cv
24.586 28.859 24.559 28.836 24.535 28.797 cv
24.508 28.766 24.488 28.715 24.477 28.652 cv
24.461 28.594 24.453 28.523 24.457 28.434 cv
24.453 28.355 24.461 28.281 24.477 28.219 cv
24.488 28.16 24.504 28.113 24.527 28.074 cv
24.543 28.039 24.57 28.008 24.602 27.984 cv
24.633 27.965 24.664 27.957 24.703 27.953 cv
26.555 27.953 li
26.555 21.207 li
24.84 22.227 li
24.75 22.277 24.68 22.305 24.633 22.312 cv
24.578 22.32 24.535 22.312 24.504 22.281 cv
24.469 22.254 24.449 22.203 24.438 22.133 cv
24.426 22.066 24.418 21.98 24.422 21.871 cv
24.418 21.797 24.422 21.73 24.434 21.672 cv
24.438 21.621 24.449 21.574 24.465 21.535 cv
24.477 21.5 24.496 21.469 24.52 21.441 cv
24.543 21.414 24.574 21.387 24.621 21.359 cv
26.664 20.047 li
26.68 20.035 26.699 20.023 26.73 20.016 cv
26.754 20.008 26.789 20 26.836 19.988 cv
26.875 19.98 26.926 19.973 26.98 19.969 cv
27.035 19.969 27.102 19.969 27.188 19.965 cv
27.293 19.969 27.387 19.973 27.461 19.98 cv
27.531 19.988 27.586 20.004 27.633 20.02 cv
27.672 20.039 27.699 20.059 27.715 20.082 cv
27.723 20.109 27.73 20.133 27.734 20.156 cv
27.734 27.953 li
29.34 27.953 li
29.375 27.957 29.41 27.965 29.441 27.984 cv
29.473 28.008 29.496 28.039 29.52 28.074 cv
29.535 28.113 29.551 28.16 29.566 28.219 cv
29.574 28.281 29.582 28.355 29.586 28.434 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
36.613 26.363 mo
36.609 26.773 36.539 27.141 36.398 27.465 cv
36.254 27.793 36.051 28.074 35.789 28.305 cv
35.523 28.539 35.195 28.715 34.809 28.84 cv
34.418 28.965 33.98 29.027 33.496 29.027 cv
33.191 29.027 32.914 29 32.66 28.953 cv
32.398 28.906 32.168 28.855 31.973 28.785 cv
31.77 28.723 31.605 28.652 31.473 28.582 cv
31.34 28.512 31.254 28.461 31.223 28.426 cv
31.184 28.398 31.16 28.367 31.145 28.332 cv
31.125 28.301 31.105 28.262 31.094 28.215 cv
31.078 28.172 31.07 28.117 31.063 28.047 cv
31.055 27.984 31.051 27.902 31.055 27.801 cv
31.051 27.641 31.066 27.527 31.102 27.461 cv
31.133 27.398 31.18 27.363 31.242 27.363 cv
31.285 27.363 31.367 27.402 31.492 27.473 cv
31.613 27.551 31.773 27.629 31.969 27.711 cv
32.16 27.797 32.387 27.875 32.652 27.945 cv
32.91 28.02 33.203 28.055 33.523 28.055 cv
33.832 28.055 34.102 28.016 34.34 27.937 cv
34.57 27.859 34.77 27.75 34.93 27.609 cv
35.086 27.469 35.203 27.301 35.285 27.105 cv
35.363 26.91 35.402 26.699 35.406 26.473 cv
35.402 26.223 35.352 25.996 35.254 25.793 cv
35.148 25.594 35 25.422 34.809 25.273 cv
34.609 25.129 34.371 25.016 34.086 24.937 cv
33.801 24.859 33.477 24.82 33.113 24.82 cv
32.242 24.82 li
32.199 24.82 32.164 24.812 32.129 24.797 cv
32.094 24.781 32.063 24.754 32.039 24.715 cv
32.012 24.68 31.992 24.633 31.977 24.574 cv
31.961 24.516 31.953 24.437 31.953 24.34 cv
31.953 24.254 31.957 24.184 31.973 24.125 cv
31.98 24.07 32 24.023 32.031 23.988 cv
32.055 23.953 32.086 23.93 32.117 23.91 cv
32.148 23.898 32.184 23.891 32.227 23.887 cv
33 23.887 li
33.301 23.891 33.57 23.852 33.813 23.77 cv
34.047 23.695 34.25 23.582 34.422 23.434 cv
34.586 23.289 34.715 23.113 34.805 22.91 cv
34.895 22.707 34.941 22.48 34.941 22.227 cv
34.941 22.047 34.91 21.871 34.852 21.703 cv
34.789 21.539 34.699 21.395 34.582 21.27 cv
34.461 21.145 34.309 21.047 34.129 20.977 cv
33.941 20.906 33.73 20.871 33.488 20.871 cv
33.223 20.871 32.977 20.914 32.758 20.992 cv
32.531 21.074 32.336 21.16 32.164 21.25 cv
31.988 21.344 31.844 21.43 31.73 21.508 cv
31.617 21.59 31.535 21.629 31.492 21.625 cv
31.457 21.629 31.43 21.621 31.406 21.609 cv
31.379 21.598 31.359 21.574 31.344 21.539 cv
31.328 21.508 31.316 21.461 31.309 21.395 cv
31.301 21.336 31.297 21.254 31.301 21.152 cv
31.297 21.086 31.297 21.027 31.305 20.973 cv
31.305 20.922 31.316 20.875 31.332 20.832 cv
31.348 20.797 31.363 20.762 31.383 20.727 cv
31.398 20.699 31.43 20.66 31.473 20.613 cv
31.516 20.57 31.602 20.508 31.738 20.426 cv
31.867 20.344 32.031 20.266 32.227 20.184 cv
32.418 20.105 32.641 20.035 32.898 19.98 cv
33.148 19.926 33.422 19.898 33.719 19.898 cv
34.125 19.898 34.488 19.953 34.801 20.055 cv
35.113 20.164 35.371 20.312 35.582 20.5 cv
35.785 20.695 35.941 20.926 36.047 21.191 cv
36.148 21.461 36.199 21.754 36.203 22.078 cv
36.199 22.359 36.164 22.621 36.094 22.855 cv
36.02 23.098 35.91 23.309 35.77 23.492 cv
35.625 23.68 35.453 23.836 35.25 23.965 cv
35.043 24.098 34.805 24.191 34.535 24.238 cv
34.535 24.25 li
34.84 24.285 35.121 24.359 35.375 24.48 cv
35.629 24.602 35.848 24.754 36.031 24.937 cv
36.211 25.121 36.352 25.336 36.457 25.578 cv
36.559 25.824 36.609 26.086 36.613 26.363 cv
cp
f
39.902 28.152 mo
39.902 28.48 39.848 28.695 39.742 28.801 cv
39.633 28.906 39.438 28.957 39.156 28.961 cv
38.879 28.957 38.688 28.906 38.586 28.805 cv
38.477 28.699 38.426 28.488 38.43 28.172 cv
38.426 27.848 38.48 27.633 38.59 27.523 cv
38.695 27.418 38.891 27.363 39.176 27.363 cv
39.449 27.363 39.637 27.418 39.746 27.523 cv
39.848 27.629 39.902 27.84 39.902 28.152 cv
cp
f
47.27 26.047 mo
47.27 26.523 47.188 26.945 47.027 27.316 cv
46.867 27.687 46.641 28 46.352 28.254 cv
46.055 28.508 45.707 28.703 45.305 28.832 cv
44.898 28.965 44.449 29.027 43.957 29.027 cv
43.68 29.027 43.418 29.008 43.176 28.969 cv
42.926 28.93 42.707 28.883 42.52 28.828 cv
42.324 28.773 42.168 28.719 42.043 28.66 cv
41.918 28.609 41.84 28.566 41.809 28.531 cv
41.773 28.5 41.75 28.469 41.738 28.441 cv
41.723 28.414 41.707 28.383 41.699 28.34 cv
41.684 28.305 41.676 28.254 41.676 28.191 cv
41.668 28.133 41.668 28.062 41.668 27.98 cv
41.668 27.906 41.672 27.836 41.68 27.773 cv
41.688 27.711 41.699 27.66 41.719 27.621 cv
41.734 27.582 41.754 27.555 41.781 27.535 cv
41.805 27.52 41.836 27.512 41.867 27.508 cv
41.914 27.512 41.984 27.539 42.078 27.594 cv
42.172 27.652 42.301 27.715 42.465 27.781 cv
42.629 27.848 42.828 27.91 43.07 27.969 cv
43.305 28.027 43.59 28.055 43.926 28.055 cv
44.227 28.055 44.508 28.02 44.766 27.945 cv
45.02 27.875 45.242 27.762 45.43 27.605 cv
45.613 27.453 45.758 27.258 45.863 27.02 cv
45.969 26.785 46.02 26.496 46.023 26.156 cv
46.02 25.875 45.977 25.625 45.887 25.406 cv
45.797 25.187 45.66 25.008 45.477 24.863 cv
45.289 24.723 45.055 24.617 44.773 24.543 cv
44.488 24.473 44.148 24.434 43.762 24.434 cv
43.477 24.434 43.238 24.449 43.039 24.477 cv
42.836 24.508 42.648 24.523 42.477 24.52 cv
42.348 24.523 42.254 24.492 42.203 24.43 cv
42.145 24.371 42.117 24.258 42.121 24.086 cv
42.121 20.473 li
42.117 20.324 42.152 20.215 42.227 20.137 cv
42.293 20.066 42.395 20.027 42.531 20.027 cv
46.461 20.027 li
46.496 20.027 46.531 20.039 46.566 20.059 cv
46.598 20.082 46.625 20.113 46.652 20.152 cv
46.672 20.195 46.688 20.246 46.703 20.309 cv
46.711 20.375 46.719 20.453 46.723 20.535 cv
46.719 20.703 46.695 20.828 46.656 20.918 cv
46.609 21.012 46.551 21.059 46.473 21.055 cv
43.301 21.055 li
43.301 23.543 li
43.453 23.523 43.609 23.512 43.773 23.504 cv
43.93 23.5 44.117 23.496 44.332 23.496 cv
44.816 23.496 45.242 23.559 45.609 23.68 cv
45.973 23.801 46.277 23.973 46.527 24.191 cv
46.77 24.418 46.957 24.684 47.082 24.996 cv
47.207 25.312 47.27 25.664 47.27 26.047 cv
cp
f
63.836 519.086 mo
63.832 519.176 63.824 519.246 63.813 519.305 cv
63.797 519.367 63.777 519.418 63.758 519.449 cv
63.734 519.488 63.711 519.512 63.68 519.527 cv
63.648 519.543 63.617 519.551 63.59 519.551 cv
58.953 519.551 li
58.918 519.551 58.891 519.543 58.863 519.527 cv
58.836 519.512 58.809 519.488 58.785 519.449 cv
58.758 519.418 58.738 519.367 58.727 519.305 cv
58.711 519.246 58.703 519.176 58.707 519.086 cv
58.703 519.008 58.711 518.934 58.727 518.871 cv
58.738 518.812 58.754 518.766 58.777 518.727 cv
58.793 518.691 58.82 518.66 58.852 518.637 cv
58.883 518.617 58.914 518.609 58.953 518.605 cv
60.805 518.605 li
60.805 511.859 li
59.09 512.879 li
59 512.93 58.93 512.957 58.883 512.965 cv
58.828 512.973 58.785 512.965 58.754 512.934 cv
58.719 512.906 58.699 512.855 58.688 512.785 cv
58.676 512.719 58.668 512.633 58.672 512.523 cv
58.668 512.449 58.672 512.383 58.684 512.324 cv
58.688 512.273 58.699 512.227 58.715 512.187 cv
58.727 512.152 58.746 512.121 58.77 512.094 cv
58.793 512.066 58.824 512.039 58.871 512.012 cv
60.914 510.699 li
60.93 510.687 60.949 510.676 60.98 510.668 cv
61.004 510.66 61.039 510.652 61.086 510.641 cv
61.125 510.633 61.176 510.625 61.23 510.621 cv
61.285 510.621 61.352 510.621 61.438 510.617 cv
61.543 510.621 61.637 510.625 61.711 510.633 cv
61.781 510.641 61.836 510.656 61.883 510.672 cv
61.922 510.691 61.949 510.711 61.965 510.734 cv
61.973 510.762 61.98 510.785 61.984 510.809 cv
61.984 518.605 li
63.59 518.605 li
63.625 518.609 63.66 518.617 63.691 518.637 cv
63.723 518.66 63.746 518.691 63.77 518.727 cv
63.785 518.766 63.801 518.812 63.816 518.871 cv
63.824 518.934 63.832 519.008 63.836 519.086 cv
cp
f
132.715 519.043 mo
132.711 519.129 132.707 519.203 132.695 519.266 cv
132.684 519.332 132.668 519.387 132.648 519.426 cv
132.625 519.473 132.598 519.504 132.566 519.52 cv
132.531 519.543 132.492 519.551 132.453 519.551 cv
127.551 519.551 li
127.488 519.551 127.43 519.543 127.383 519.527 cv
127.332 519.512 127.293 519.488 127.258 519.449 cv
127.223 519.418 127.195 519.363 127.184 519.293 cv
127.164 519.223 127.156 519.137 127.16 519.035 cv
127.156 518.945 127.16 518.867 127.168 518.797 cv
127.172 518.73 127.188 518.672 127.215 518.617 cv
127.238 518.566 127.27 518.512 127.305 518.457 cv
127.34 518.406 127.383 518.352 127.441 518.289 cv
129.215 516.465 li
129.625 516.047 129.953 515.672 130.203 515.336 cv
130.449 515.008 130.641 514.703 130.773 514.426 cv
130.906 514.152 130.992 513.902 131.039 513.676 cv
131.078 513.453 131.102 513.242 131.102 513.047 cv
131.102 512.852 131.066 512.668 131 512.488 cv
130.934 512.316 130.84 512.16 130.715 512.023 cv
130.59 511.895 130.434 511.789 130.246 511.707 cv
130.059 511.633 129.84 511.594 129.594 511.59 cv
129.305 511.594 129.047 511.633 128.82 511.707 cv
128.59 511.789 128.391 511.875 128.219 511.961 cv
128.047 512.055 127.902 512.137 127.785 512.215 cv
127.668 512.293 127.582 512.332 127.531 512.332 cv
127.496 512.332 127.465 512.324 127.441 512.305 cv
127.41 512.289 127.391 512.258 127.375 512.215 cv
127.359 512.176 127.344 512.121 127.336 512.051 cv
127.324 511.984 127.32 511.902 127.324 511.805 cv
127.32 511.738 127.324 511.68 127.332 511.629 cv
127.336 511.578 127.344 511.535 127.355 511.496 cv
127.363 511.461 127.379 511.426 127.398 511.395 cv
127.418 511.363 127.453 511.324 127.512 511.273 cv
127.563 511.227 127.656 511.16 127.793 511.078 cv
127.926 510.996 128.098 510.918 128.301 510.836 cv
128.504 510.758 128.727 510.687 128.973 510.633 cv
129.215 510.578 129.473 510.551 129.746 510.551 cv
130.172 510.551 130.547 510.613 130.871 510.734 cv
131.191 510.855 131.457 511.02 131.672 511.23 cv
131.883 511.441 132.043 511.687 132.148 511.961 cv
132.254 512.242 132.309 512.539 132.309 512.852 cv
132.309 513.141 132.281 513.422 132.23 513.699 cv
132.18 513.984 132.074 514.289 131.914 514.613 cv
131.75 514.941 131.516 515.305 131.211 515.703 cv
130.902 516.105 130.496 516.566 129.992 517.082 cv
128.586 518.551 li
132.445 518.551 li
132.477 518.555 132.512 518.566 132.551 518.582 cv
132.582 518.605 132.613 518.637 132.641 518.676 cv
132.664 518.719 132.684 518.77 132.695 518.828 cv
132.707 518.895 132.711 518.965 132.715 519.043 cv
cp
f
202.02 517.027 mo
202.016 517.18 201.992 517.301 201.949 517.387 cv
201.902 517.477 201.84 517.52 201.758 517.516 cv
200.758 517.516 li
200.758 519.379 li
200.758 519.418 200.746 519.449 200.73 519.473 cv
200.707 519.5 200.676 519.52 200.633 519.539 cv
200.582 519.555 200.52 519.566 200.449 519.578 cv
200.371 519.586 200.277 519.59 200.16 519.594 cv
200.043 519.59 199.945 519.586 199.875 519.578 cv
199.797 519.566 199.738 519.555 199.695 519.539 cv
199.648 519.52 199.617 519.5 199.602 519.473 cv
199.582 519.449 199.574 519.418 199.578 519.379 cv
199.578 517.516 li
195.949 517.516 li
195.891 517.52 195.848 517.512 195.813 517.496 cv
195.777 517.484 195.742 517.457 195.715 517.418 cv
195.684 517.383 195.664 517.332 195.652 517.262 cv
195.641 517.195 195.637 517.105 195.637 516.992 cv
195.637 516.91 195.637 516.832 195.645 516.762 cv
195.645 516.691 195.656 516.629 195.672 516.574 cv
195.684 516.52 195.699 516.465 195.727 516.41 cv
195.746 516.355 195.773 516.301 195.809 516.238 cv
198.969 510.852 li
198.988 510.816 199.023 510.785 199.07 510.758 cv
199.113 510.73 199.168 510.707 199.242 510.687 cv
199.309 510.672 199.395 510.66 199.5 510.648 cv
199.602 510.645 199.723 510.641 199.863 510.637 cv
200.012 510.641 200.148 510.645 200.266 510.656 cv
200.379 510.668 200.469 510.684 200.543 510.699 cv
200.609 510.719 200.664 510.742 200.703 510.773 cv
200.738 510.805 200.758 510.84 200.758 510.879 cv
200.758 516.543 li
201.758 516.543 li
201.832 516.547 201.895 516.586 201.945 516.664 cv
201.992 516.746 202.016 516.867 202.02 517.027 cv
cp
199.578 511.676 mo
199.566 511.676 li
196.715 516.543 li
199.578 516.543 li
cp
f
270.781 516.68 mo
270.781 517.07 270.719 517.449 270.602 517.809 cv
270.477 518.176 270.293 518.492 270.051 518.766 cv
269.801 519.043 269.488 519.266 269.113 519.43 cv
268.73 519.598 268.285 519.68 267.77 519.68 cv
267.398 519.68 267.07 519.637 266.789 519.543 cv
266.504 519.457 266.258 519.324 266.047 519.152 cv
265.836 518.984 265.66 518.777 265.523 518.531 cv
265.383 518.285 265.27 518.004 265.188 517.687 cv
265.102 517.375 265.043 517.031 265.008 516.652 cv
264.969 516.281 264.949 515.879 264.953 515.445 cv
264.949 515.066 264.969 514.684 265.012 514.293 cv
265.051 513.91 265.125 513.535 265.23 513.168 cv
265.336 512.809 265.48 512.469 265.66 512.152 cv
265.84 511.836 266.066 511.559 266.34 511.324 cv
266.613 511.09 266.938 510.902 267.316 510.762 cv
267.695 510.625 268.137 510.559 268.641 510.555 cv
268.809 510.559 268.98 510.566 269.152 510.586 cv
269.324 510.609 269.484 510.641 269.633 510.672 cv
269.781 510.711 269.902 510.746 270.004 510.785 cv
270.102 510.824 270.168 510.859 270.203 510.883 cv
270.23 510.91 270.254 510.937 270.273 510.965 cv
270.289 510.996 270.305 511.027 270.313 511.062 cv
270.32 511.098 270.324 511.137 270.332 511.18 cv
270.332 511.223 270.336 511.277 270.34 511.34 cv
270.336 511.426 270.336 511.496 270.336 511.551 cv
270.332 511.613 270.32 511.66 270.309 511.695 cv
270.289 511.734 270.27 511.762 270.246 511.777 cv
270.219 511.797 270.188 511.805 270.148 511.805 cv
270.098 511.805 270.027 511.789 269.941 511.758 cv
269.852 511.727 269.746 511.691 269.625 511.648 cv
269.5 511.613 269.352 511.578 269.176 511.543 cv
269 511.516 268.797 511.5 268.566 511.496 cv
268.137 511.5 267.77 511.586 267.465 511.758 cv
267.16 511.93 266.91 512.164 266.715 512.457 cv
266.52 512.75 266.375 513.09 266.285 513.473 cv
266.188 513.863 266.133 514.266 266.125 514.684 cv
266.242 514.617 266.379 514.551 266.527 514.48 cv
266.676 514.414 266.836 514.352 267.012 514.293 cv
267.188 514.242 267.375 514.195 267.57 514.16 cv
267.766 514.129 267.977 514.113 268.203 514.109 cv
268.68 514.113 269.082 514.18 269.414 514.305 cv
269.742 514.437 270.008 514.617 270.215 514.848 cv
270.414 515.078 270.559 515.348 270.648 515.66 cv
270.734 515.973 270.781 516.312 270.781 516.68 cv
cp
269.586 516.789 mo
269.586 516.527 269.559 516.285 269.508 516.066 cv
269.453 515.852 269.363 515.668 269.242 515.512 cv
269.117 515.363 268.953 515.246 268.75 515.164 cv
268.539 515.082 268.285 515.039 267.988 515.039 cv
267.816 515.039 267.648 515.055 267.48 515.086 cv
267.309 515.117 267.145 515.16 266.988 515.207 cv
266.828 515.262 266.68 515.324 266.539 515.395 cv
266.395 515.469 266.262 515.543 266.145 515.621 cv
266.141 516.215 266.18 516.711 266.258 517.105 cv
266.332 517.504 266.441 517.82 266.586 518.059 cv
266.73 518.301 266.91 518.473 267.125 518.574 cv
267.34 518.68 267.59 518.73 267.879 518.727 cv
268.168 518.73 268.422 518.676 268.637 518.562 cv
268.852 518.457 269.027 518.309 269.172 518.121 cv
269.313 517.937 269.418 517.73 269.484 517.5 cv
269.551 517.27 269.586 517.035 269.586 516.789 cv
cp
f
339.66 517.273 mo
339.66 517.66 339.59 518.004 339.453 518.301 cv
339.316 518.605 339.121 518.855 338.863 519.059 cv
338.605 519.266 338.285 519.422 337.906 519.523 cv
337.523 519.629 337.09 519.68 336.605 519.68 cv
336.145 519.68 335.734 519.633 335.375 519.539 cv
335.012 519.445 334.707 519.305 334.457 519.113 cv
334.207 518.93 334.016 518.699 333.883 518.422 cv
333.75 518.148 333.684 517.836 333.684 517.48 cv
333.684 517.207 333.727 516.949 333.82 516.715 cv
333.906 516.48 334.039 516.266 334.215 516.07 cv
334.383 515.875 334.594 515.691 334.848 515.516 cv
335.098 515.348 335.383 515.184 335.699 515.027 cv
335.426 514.887 335.184 514.738 334.973 514.578 cv
334.762 514.422 334.582 514.25 334.438 514.062 cv
334.289 513.879 334.18 513.684 334.105 513.473 cv
334.027 513.266 333.988 513.035 333.992 512.785 cv
333.988 512.477 334.043 512.184 334.16 511.91 cv
334.27 511.641 334.441 511.406 334.668 511.203 cv
334.895 511.004 335.18 510.844 335.531 510.727 cv
335.875 510.609 336.285 510.551 336.754 510.551 cv
337.199 510.551 337.586 510.605 337.914 510.711 cv
338.242 510.82 338.512 510.965 338.723 511.148 cv
338.934 511.336 339.09 511.555 339.195 511.805 cv
339.293 512.055 339.344 512.324 339.348 512.613 cv
339.344 512.848 339.305 513.074 339.234 513.285 cv
339.156 513.504 339.047 513.707 338.898 513.895 cv
338.75 514.09 338.57 514.27 338.359 514.434 cv
338.148 514.605 337.906 514.762 337.633 514.902 cv
337.953 515.066 338.238 515.23 338.496 515.398 cv
338.746 515.566 338.961 515.746 339.137 515.941 cv
339.305 516.137 339.434 516.344 339.527 516.559 cv
339.613 516.777 339.66 517.016 339.66 517.273 cv
cp
338.18 512.723 mo
338.176 512.535 338.145 512.359 338.078 512.203 cv
338.012 512.047 337.914 511.914 337.789 511.805 cv
337.66 511.695 337.5 511.613 337.313 511.555 cv
337.117 511.5 336.902 511.473 336.664 511.469 cv
336.168 511.473 335.793 511.582 335.543 511.805 cv
335.285 512.031 335.16 512.34 335.164 512.723 cv
335.16 512.902 335.191 513.066 335.254 513.219 cv
335.316 513.375 335.41 513.52 335.543 513.656 cv
335.668 513.793 335.832 513.926 336.035 514.055 cv
336.23 514.187 336.469 514.324 336.746 514.465 cv
337.207 514.23 337.563 513.969 337.809 513.676 cv
338.055 513.391 338.176 513.074 338.18 512.723 cv
cp
338.469 517.398 mo
338.465 517.191 338.426 517 338.352 516.828 cv
338.27 516.66 338.152 516.5 337.996 516.348 cv
337.84 516.199 337.641 516.055 337.406 515.914 cv
337.168 515.777 336.898 515.633 336.59 515.48 cv
336.301 515.625 336.047 515.766 335.832 515.906 cv
335.613 516.047 335.434 516.195 335.297 516.344 cv
335.156 516.5 335.051 516.656 334.98 516.82 cv
334.906 516.988 334.871 517.172 334.875 517.371 cv
334.871 517.816 335.023 518.16 335.332 518.398 cv
335.633 518.645 336.086 518.766 336.691 518.762 cv
337.273 518.766 337.719 518.645 338.02 518.395 cv
338.316 518.152 338.465 517.82 338.469 517.398 cv
cp
f
404.824 519.086 mo
404.82 519.176 404.813 519.246 404.801 519.305 cv
404.785 519.367 404.766 519.418 404.746 519.449 cv
404.723 519.488 404.699 519.512 404.668 519.527 cv
404.637 519.543 404.605 519.551 404.578 519.551 cv
399.941 519.551 li
399.906 519.551 399.879 519.543 399.852 519.527 cv
399.824 519.512 399.797 519.488 399.773 519.449 cv
399.746 519.418 399.727 519.367 399.715 519.305 cv
399.699 519.246 399.691 519.176 399.695 519.086 cv
399.691 519.008 399.699 518.934 399.715 518.871 cv
399.727 518.812 399.742 518.766 399.766 518.727 cv
399.781 518.691 399.809 518.66 399.84 518.637 cv
399.871 518.617 399.902 518.609 399.941 518.605 cv
401.793 518.605 li
401.793 511.859 li
400.078 512.879 li
399.988 512.93 399.918 512.957 399.871 512.965 cv
399.816 512.973 399.773 512.965 399.742 512.934 cv
399.707 512.906 399.688 512.855 399.676 512.785 cv
399.664 512.719 399.656 512.633 399.66 512.523 cv
399.656 512.449 399.66 512.383 399.672 512.324 cv
399.676 512.273 399.688 512.227 399.703 512.187 cv
399.715 512.152 399.734 512.121 399.758 512.094 cv
399.781 512.066 399.813 512.039 399.859 512.012 cv
401.902 510.699 li
401.918 510.687 401.938 510.676 401.969 510.668 cv
401.992 510.66 402.027 510.652 402.074 510.641 cv
402.113 510.633 402.164 510.625 402.219 510.621 cv
402.273 510.621 402.34 510.621 402.426 510.617 cv
402.531 510.621 402.625 510.625 402.699 510.633 cv
402.77 510.641 402.824 510.656 402.871 510.672 cv
402.91 510.691 402.938 510.711 402.953 510.734 cv
402.961 510.762 402.969 510.785 402.973 510.809 cv
402.973 518.605 li
404.578 518.605 li
404.613 518.609 404.648 518.617 404.68 518.637 cv
404.711 518.66 404.734 518.691 404.758 518.727 cv
404.773 518.766 404.789 518.812 404.805 518.871 cv
404.813 518.934 404.82 519.008 404.824 519.086 cv
cp
f
412.18 515.094 mo
412.176 515.777 412.125 516.398 412.02 516.961 cv
411.91 517.523 411.73 518.008 411.484 518.41 cv
411.23 518.816 410.902 519.129 410.504 519.348 cv
410.098 519.57 409.605 519.68 409.02 519.68 cv
408.461 519.68 407.988 519.582 407.609 519.383 cv
407.227 519.187 406.922 518.895 406.688 518.508 cv
406.453 518.121 406.285 517.648 406.191 517.082 cv
406.09 516.52 406.043 515.871 406.043 515.137 cv
406.043 514.465 406.098 513.844 406.207 513.277 cv
406.316 512.715 406.492 512.23 406.742 511.824 cv
406.984 511.422 407.309 511.109 407.715 510.883 cv
408.113 510.664 408.609 510.551 409.199 510.551 cv
409.758 510.551 410.23 510.652 410.613 510.848 cv
410.996 511.051 411.301 511.344 411.535 511.727 cv
411.766 512.117 411.934 512.59 412.031 513.152 cv
412.129 513.715 412.176 514.363 412.18 515.094 cv
cp
410.973 515.176 mo
410.969 514.734 410.953 514.336 410.926 513.984 cv
410.891 513.633 410.844 513.324 410.785 513.055 cv
410.719 512.785 410.641 512.555 410.543 512.359 cv
410.445 512.168 410.328 512.008 410.191 511.879 cv
410.051 511.754 409.891 511.66 409.719 511.602 cv
409.539 511.547 409.344 511.52 409.129 511.516 cv
408.738 511.52 408.422 511.609 408.184 511.793 cv
407.938 511.977 407.746 512.23 407.609 512.547 cv
407.469 512.867 407.375 513.238 407.324 513.668 cv
407.273 514.098 407.25 514.562 407.25 515.055 cv
407.25 515.719 407.281 516.281 407.352 516.742 cv
407.418 517.211 407.527 517.59 407.68 517.879 cv
407.824 518.176 408.016 518.387 408.246 518.516 cv
408.477 518.652 408.758 518.719 409.09 518.715 cv
409.344 518.719 409.566 518.68 409.762 518.594 cv
409.953 518.516 410.121 518.395 410.262 518.238 cv
410.402 518.086 410.516 517.902 410.609 517.687 cv
410.695 517.473 410.77 517.234 410.828 516.973 cv
410.879 516.715 410.918 516.434 410.941 516.129 cv
410.961 515.824 410.969 515.508 410.973 515.176 cv
cp
f
473.734 519.086 mo
473.73 519.176 473.723 519.246 473.711 519.305 cv
473.695 519.367 473.676 519.418 473.656 519.449 cv
473.633 519.488 473.609 519.512 473.578 519.527 cv
473.547 519.543 473.516 519.551 473.488 519.551 cv
468.852 519.551 li
468.816 519.551 468.789 519.543 468.762 519.527 cv
468.734 519.512 468.707 519.488 468.684 519.449 cv
468.656 519.418 468.637 519.367 468.625 519.305 cv
468.609 519.246 468.602 519.176 468.605 519.086 cv
468.602 519.008 468.609 518.934 468.625 518.871 cv
468.637 518.812 468.652 518.766 468.676 518.727 cv
468.691 518.691 468.719 518.66 468.75 518.637 cv
468.781 518.617 468.813 518.609 468.852 518.605 cv
470.703 518.605 li
470.703 511.859 li
468.988 512.879 li
468.898 512.93 468.828 512.957 468.781 512.965 cv
468.727 512.973 468.684 512.965 468.652 512.934 cv
468.617 512.906 468.598 512.855 468.586 512.785 cv
468.574 512.719 468.566 512.633 468.57 512.523 cv
468.566 512.449 468.57 512.383 468.582 512.324 cv
468.586 512.273 468.598 512.227 468.613 512.187 cv
468.625 512.152 468.645 512.121 468.668 512.094 cv
468.691 512.066 468.723 512.039 468.77 512.012 cv
470.813 510.699 li
470.828 510.687 470.848 510.676 470.879 510.668 cv
470.902 510.66 470.938 510.652 470.984 510.641 cv
471.023 510.633 471.074 510.625 471.129 510.621 cv
471.184 510.621 471.25 510.621 471.336 510.617 cv
471.441 510.621 471.535 510.625 471.609 510.633 cv
471.68 510.641 471.734 510.656 471.781 510.672 cv
471.82 510.691 471.848 510.711 471.863 510.734 cv
471.871 510.762 471.879 510.785 471.883 510.809 cv
471.883 518.605 li
473.488 518.605 li
473.523 518.609 473.559 518.617 473.59 518.637 cv
473.621 518.66 473.645 518.691 473.668 518.727 cv
473.684 518.766 473.699 518.812 473.715 518.871 cv
473.723 518.934 473.73 519.008 473.734 519.086 cv
cp
f
480.797 519.043 mo
480.793 519.129 480.789 519.203 480.777 519.266 cv
480.766 519.332 480.75 519.387 480.73 519.426 cv
480.707 519.473 480.68 519.504 480.648 519.52 cv
480.613 519.543 480.574 519.551 480.535 519.551 cv
475.633 519.551 li
475.57 519.551 475.512 519.543 475.465 519.527 cv
475.414 519.512 475.375 519.488 475.34 519.449 cv
475.305 519.418 475.277 519.363 475.266 519.293 cv
475.246 519.223 475.238 519.137 475.242 519.035 cv
475.238 518.945 475.242 518.867 475.25 518.797 cv
475.254 518.73 475.27 518.672 475.297 518.617 cv
475.32 518.566 475.352 518.512 475.387 518.457 cv
475.422 518.406 475.465 518.352 475.523 518.289 cv
477.297 516.465 li
477.707 516.047 478.035 515.672 478.285 515.336 cv
478.531 515.008 478.723 514.703 478.855 514.426 cv
478.988 514.152 479.074 513.902 479.121 513.676 cv
479.16 513.453 479.184 513.242 479.184 513.047 cv
479.184 512.852 479.148 512.668 479.082 512.488 cv
479.016 512.316 478.922 512.16 478.797 512.023 cv
478.672 511.895 478.516 511.789 478.328 511.707 cv
478.141 511.633 477.922 511.594 477.676 511.59 cv
477.387 511.594 477.129 511.633 476.902 511.707 cv
476.672 511.789 476.473 511.875 476.301 511.961 cv
476.129 512.055 475.984 512.137 475.867 512.215 cv
475.75 512.293 475.664 512.332 475.613 512.332 cv
475.578 512.332 475.547 512.324 475.523 512.305 cv
475.492 512.289 475.473 512.258 475.457 512.215 cv
475.441 512.176 475.426 512.121 475.418 512.051 cv
475.406 511.984 475.402 511.902 475.406 511.805 cv
475.402 511.738 475.406 511.68 475.414 511.629 cv
475.418 511.578 475.426 511.535 475.438 511.496 cv
475.445 511.461 475.461 511.426 475.48 511.395 cv
475.5 511.363 475.535 511.324 475.594 511.273 cv
475.645 511.227 475.738 511.16 475.875 511.078 cv
476.008 510.996 476.18 510.918 476.383 510.836 cv
476.586 510.758 476.809 510.687 477.055 510.633 cv
477.297 510.578 477.555 510.551 477.828 510.551 cv
478.254 510.551 478.629 510.613 478.953 510.734 cv
479.273 510.855 479.539 511.02 479.754 511.23 cv
479.965 511.441 480.125 511.687 480.23 511.961 cv
480.336 512.242 480.391 512.539 480.391 512.852 cv
480.391 513.141 480.363 513.422 480.313 513.699 cv
480.262 513.984 480.156 514.289 479.996 514.613 cv
479.832 514.941 479.598 515.305 479.293 515.703 cv
478.984 516.105 478.578 516.566 478.074 517.082 cv
476.668 518.551 li
480.527 518.551 li
480.559 518.555 480.594 518.566 480.633 518.582 cv
480.664 518.605 480.695 518.637 480.723 518.676 cv
480.746 518.719 480.766 518.77 480.777 518.828 cv
480.789 518.895 480.793 518.965 480.797 519.043 cv
cp
f
542.637 519.086 mo
542.633 519.176 542.625 519.246 542.613 519.305 cv
542.598 519.367 542.578 519.418 542.559 519.449 cv
542.535 519.488 542.512 519.512 542.48 519.527 cv
542.449 519.543 542.418 519.551 542.391 519.551 cv
537.754 519.551 li
537.719 519.551 537.691 519.543 537.664 519.527 cv
537.637 519.512 537.609 519.488 537.586 519.449 cv
537.559 519.418 537.539 519.367 537.527 519.305 cv
537.512 519.246 537.504 519.176 537.508 519.086 cv
537.504 519.008 537.512 518.934 537.527 518.871 cv
537.539 518.812 537.555 518.766 537.578 518.727 cv
537.594 518.691 537.621 518.66 537.652 518.637 cv
537.684 518.617 537.715 518.609 537.754 518.605 cv
539.605 518.605 li
539.605 511.859 li
537.891 512.879 li
537.801 512.93 537.73 512.957 537.684 512.965 cv
537.629 512.973 537.586 512.965 537.555 512.934 cv
537.52 512.906 537.5 512.855 537.488 512.785 cv
537.477 512.719 537.469 512.633 537.473 512.523 cv
537.469 512.449 537.473 512.383 537.484 512.324 cv
537.488 512.273 537.5 512.227 537.516 512.187 cv
537.527 512.152 537.547 512.121 537.57 512.094 cv
537.594 512.066 537.625 512.039 537.672 512.012 cv
539.715 510.699 li
539.73 510.687 539.75 510.676 539.781 510.668 cv
539.805 510.66 539.84 510.652 539.887 510.641 cv
539.926 510.633 539.977 510.625 540.031 510.621 cv
540.086 510.621 540.152 510.621 540.238 510.617 cv
540.344 510.621 540.438 510.625 540.512 510.633 cv
540.582 510.641 540.637 510.656 540.684 510.672 cv
540.723 510.691 540.75 510.711 540.766 510.734 cv
540.773 510.762 540.781 510.785 540.785 510.809 cv
540.785 518.605 li
542.391 518.605 li
542.426 518.609 542.461 518.617 542.492 518.637 cv
542.523 518.66 542.547 518.691 542.57 518.727 cv
542.586 518.766 542.602 518.812 542.617 518.871 cv
542.625 518.934 542.633 519.008 542.637 519.086 cv
cp
f
550.07 517.027 mo
550.066 517.18 550.043 517.301 550 517.387 cv
549.953 517.477 549.891 517.52 549.809 517.516 cv
548.809 517.516 li
548.809 519.379 li
548.809 519.418 548.797 519.449 548.781 519.473 cv
548.758 519.5 548.727 519.52 548.684 519.539 cv
548.633 519.555 548.57 519.566 548.5 519.578 cv
548.422 519.586 548.328 519.59 548.211 519.594 cv
548.094 519.59 547.996 519.586 547.926 519.578 cv
547.848 519.566 547.789 519.555 547.746 519.539 cv
547.699 519.52 547.668 519.5 547.652 519.473 cv
547.633 519.449 547.625 519.418 547.629 519.379 cv
547.629 517.516 li
544 517.516 li
543.941 517.52 543.898 517.512 543.863 517.496 cv
543.828 517.484 543.793 517.457 543.766 517.418 cv
543.734 517.383 543.715 517.332 543.703 517.262 cv
543.691 517.195 543.688 517.105 543.688 516.992 cv
543.688 516.91 543.688 516.832 543.695 516.762 cv
543.695 516.691 543.707 516.629 543.723 516.574 cv
543.734 516.52 543.75 516.465 543.777 516.41 cv
543.797 516.355 543.824 516.301 543.859 516.238 cv
547.02 510.852 li
547.039 510.816 547.074 510.785 547.121 510.758 cv
547.164 510.73 547.219 510.707 547.293 510.687 cv
547.359 510.672 547.445 510.66 547.551 510.648 cv
547.652 510.645 547.773 510.641 547.914 510.637 cv
548.063 510.641 548.199 510.645 548.316 510.656 cv
548.43 510.668 548.52 510.684 548.594 510.699 cv
548.66 510.719 548.715 510.742 548.754 510.773 cv
548.789 510.805 548.809 510.84 548.809 510.879 cv
548.809 516.543 li
549.809 516.543 li
549.883 516.547 549.945 516.586 549.996 516.664 cv
550.043 516.746 550.066 516.867 550.07 517.027 cv
cp
547.629 511.676 mo
547.617 511.676 li
544.766 516.543 li
547.629 516.543 li
cp
f
611.535 519.086 mo
611.531 519.176 611.523 519.246 611.512 519.305 cv
611.496 519.367 611.477 519.418 611.457 519.449 cv
611.434 519.488 611.41 519.512 611.379 519.527 cv
611.348 519.543 611.316 519.551 611.289 519.551 cv
606.652 519.551 li
606.617 519.551 606.59 519.543 606.563 519.527 cv
606.535 519.512 606.508 519.488 606.484 519.449 cv
606.457 519.418 606.438 519.367 606.426 519.305 cv
606.41 519.246 606.402 519.176 606.406 519.086 cv
606.402 519.008 606.41 518.934 606.426 518.871 cv
606.438 518.812 606.453 518.766 606.477 518.727 cv
606.492 518.691 606.52 518.66 606.551 518.637 cv
606.582 518.617 606.613 518.609 606.652 518.605 cv
608.504 518.605 li
608.504 511.859 li
606.789 512.879 li
606.699 512.93 606.629 512.957 606.582 512.965 cv
606.527 512.973 606.484 512.965 606.453 512.934 cv
606.418 512.906 606.398 512.855 606.387 512.785 cv
606.375 512.719 606.367 512.633 606.371 512.523 cv
606.367 512.449 606.371 512.383 606.383 512.324 cv
606.387 512.273 606.398 512.227 606.414 512.187 cv
606.426 512.152 606.445 512.121 606.469 512.094 cv
606.492 512.066 606.523 512.039 606.57 512.012 cv
608.613 510.699 li
608.629 510.687 608.648 510.676 608.68 510.668 cv
608.703 510.66 608.738 510.652 608.785 510.641 cv
608.824 510.633 608.875 510.625 608.93 510.621 cv
608.984 510.621 609.051 510.621 609.137 510.617 cv
609.242 510.621 609.336 510.625 609.41 510.633 cv
609.48 510.641 609.535 510.656 609.582 510.672 cv
609.621 510.691 609.648 510.711 609.664 510.734 cv
609.672 510.762 609.68 510.785 609.684 510.809 cv
609.684 518.605 li
611.289 518.605 li
611.324 518.609 611.359 518.617 611.391 518.637 cv
611.422 518.66 611.445 518.691 611.469 518.727 cv
611.484 518.766 611.5 518.812 611.516 518.871 cv
611.523 518.934 611.531 519.008 611.535 519.086 cv
cp
f
618.824 516.68 mo
618.824 517.07 618.762 517.449 618.645 517.809 cv
618.52 518.176 618.336 518.492 618.094 518.766 cv
617.844 519.043 617.531 519.266 617.156 519.43 cv
616.773 519.598 616.328 519.68 615.813 519.68 cv
615.441 519.68 615.113 519.637 614.832 519.543 cv
614.547 519.457 614.301 519.324 614.09 519.152 cv
613.879 518.984 613.703 518.777 613.566 518.531 cv
613.426 518.285 613.313 518.004 613.23 517.687 cv
613.145 517.375 613.086 517.031 613.051 516.652 cv
613.012 516.281 612.992 515.879 612.996 515.445 cv
612.992 515.066 613.012 514.684 613.055 514.293 cv
613.094 513.91 613.168 513.535 613.273 513.168 cv
613.379 512.809 613.523 512.469 613.703 512.152 cv
613.883 511.836 614.109 511.559 614.383 511.324 cv
614.656 511.09 614.98 510.902 615.359 510.762 cv
615.738 510.625 616.18 510.559 616.684 510.555 cv
616.852 510.559 617.023 510.566 617.195 510.586 cv
617.367 510.609 617.527 510.641 617.676 510.672 cv
617.824 510.711 617.945 510.746 618.047 510.785 cv
618.145 510.824 618.211 510.859 618.246 510.883 cv
618.273 510.91 618.297 510.937 618.316 510.965 cv
618.332 510.996 618.348 511.027 618.355 511.062 cv
618.363 511.098 618.367 511.137 618.375 511.18 cv
618.375 511.223 618.379 511.277 618.383 511.34 cv
618.379 511.426 618.379 511.496 618.379 511.551 cv
618.375 511.613 618.363 511.66 618.352 511.695 cv
618.332 511.734 618.313 511.762 618.289 511.777 cv
618.262 511.797 618.23 511.805 618.191 511.805 cv
618.141 511.805 618.07 511.789 617.984 511.758 cv
617.895 511.727 617.789 511.691 617.668 511.648 cv
617.543 511.613 617.395 511.578 617.219 511.543 cv
617.043 511.516 616.84 511.5 616.609 511.496 cv
616.18 511.5 615.813 511.586 615.508 511.758 cv
615.203 511.93 614.953 512.164 614.758 512.457 cv
614.563 512.75 614.418 513.09 614.328 513.473 cv
614.23 513.863 614.176 514.266 614.168 514.684 cv
614.285 514.617 614.422 514.551 614.57 514.48 cv
614.719 514.414 614.879 514.352 615.055 514.293 cv
615.23 514.242 615.418 514.195 615.613 514.16 cv
615.809 514.129 616.02 514.113 616.246 514.109 cv
616.723 514.113 617.125 514.18 617.457 514.305 cv
617.785 514.437 618.051 514.617 618.258 514.848 cv
618.457 515.078 618.602 515.348 618.691 515.66 cv
618.777 515.973 618.824 516.312 618.824 516.68 cv
cp
617.629 516.789 mo
617.629 516.527 617.602 516.285 617.551 516.066 cv
617.496 515.852 617.406 515.668 617.285 515.512 cv
617.16 515.363 616.996 515.246 616.793 515.164 cv
616.582 515.082 616.328 515.039 616.031 515.039 cv
615.859 515.039 615.691 515.055 615.523 515.086 cv
615.352 515.117 615.188 515.16 615.031 515.207 cv
614.871 515.262 614.723 515.324 614.582 515.395 cv
614.438 515.469 614.305 515.543 614.188 515.621 cv
614.184 516.215 614.223 516.711 614.301 517.105 cv
614.375 517.504 614.484 517.82 614.629 518.059 cv
614.773 518.301 614.953 518.473 615.168 518.574 cv
615.383 518.68 615.633 518.73 615.922 518.727 cv
616.211 518.73 616.465 518.676 616.68 518.562 cv
616.895 518.457 617.07 518.309 617.215 518.121 cv
617.355 517.937 617.461 517.73 617.527 517.5 cv
617.594 517.27 617.629 517.035 617.629 516.789 cv
cp
f
16.957 315.383 mo
17 315.387 17.035 315.395 17.066 315.406 cv
17.098 315.426 17.125 315.461 17.145 315.508 cv
17.164 315.562 17.176 315.633 17.191 315.727 cv
17.199 315.82 17.207 315.945 17.207 316.102 cv
17.207 316.238 17.199 316.352 17.191 316.434 cv
17.176 316.52 17.164 316.586 17.141 316.637 cv
17.121 316.691 17.086 316.73 17.043 316.758 cv
17.004 316.789 16.953 316.816 16.887 316.832 cv
14.512 317.762 li
14.242 317.875 13.996 317.988 13.766 318.102 cv
13.543 318.219 13.348 318.355 13.184 318.516 cv
13.023 318.68 12.895 318.871 12.801 319.086 cv
12.711 319.309 12.668 319.57 12.664 319.871 cv
12.664 320.77 li
16.957 320.77 li
17 320.773 17.035 320.785 17.066 320.805 cv
17.098 320.832 17.125 320.867 17.141 320.914 cv
17.16 320.965 17.172 321.031 17.188 321.117 cv
17.199 321.203 17.207 321.312 17.207 321.437 cv
17.207 321.57 17.199 321.676 17.188 321.762 cv
17.172 321.848 17.16 321.918 17.141 321.969 cv
17.125 322.023 17.098 322.059 17.066 322.078 cv
17.035 322.102 17 322.113 16.957 322.109 cv
7.621 322.109 li
7.418 322.113 7.277 322.059 7.195 321.949 cv
7.117 321.844 7.078 321.73 7.074 321.609 cv
7.074 319.469 li
7.078 319.219 7.082 319.004 7.094 318.832 cv
7.109 318.664 7.125 318.512 7.137 318.375 cv
7.207 317.988 7.313 317.645 7.457 317.344 cv
7.605 317.047 7.793 316.797 8.012 316.594 cv
8.238 316.391 8.492 316.238 8.781 316.137 cv
9.07 316.035 9.391 315.984 9.734 315.984 cv
10.074 315.984 10.375 316.031 10.641 316.121 cv
10.91 316.215 11.148 316.348 11.352 316.516 cv
11.563 316.687 11.738 316.891 11.887 317.129 cv
12.035 317.371 12.164 317.641 12.266 317.934 cv
12.344 317.77 12.434 317.617 12.543 317.48 cv
12.656 317.348 12.793 317.223 12.945 317.102 cv
13.105 316.988 13.285 316.875 13.484 316.77 cv
13.688 316.668 13.914 316.566 14.168 316.457 cv
16.387 315.555 li
16.574 315.484 16.707 315.437 16.781 315.414 cv
16.859 315.398 16.918 315.387 16.957 315.383 cv
cp
9.875 317.402 mo
9.484 317.402 9.148 317.492 8.875 317.668 cv
8.602 317.848 8.406 318.145 8.285 318.555 cv
8.25 318.687 8.223 318.832 8.207 318.996 cv
8.191 319.16 8.184 319.375 8.184 319.637 cv
8.184 320.77 li
11.582 320.77 li
11.582 319.461 li
11.582 319.109 11.539 318.805 11.453 318.543 cv
11.367 318.289 11.25 318.074 11.094 317.902 cv
10.945 317.734 10.762 317.609 10.551 317.523 cv
10.344 317.445 10.121 317.402 9.875 317.402 cv
cp
f
16.965 307.586 mo
17.012 307.59 17.047 307.598 17.07 307.613 cv
17.102 307.633 17.125 307.668 17.145 307.711 cv
17.164 307.758 17.176 307.816 17.191 307.891 cv
17.199 307.969 17.207 308.062 17.207 308.168 cv
17.207 308.293 17.199 308.391 17.191 308.461 cv
17.176 308.539 17.164 308.598 17.145 308.641 cv
17.125 308.687 17.102 308.719 17.07 308.73 cv
17.047 308.75 17.012 308.758 16.965 308.754 cv
16.039 308.754 li
16.484 309.156 16.805 309.551 17.004 309.937 cv
17.207 310.332 17.305 310.727 17.309 311.121 cv
17.305 311.594 17.23 311.988 17.074 312.305 cv
16.922 312.625 16.711 312.883 16.441 313.078 cv
16.176 313.281 15.863 313.422 15.504 313.504 cv
15.148 313.594 14.715 313.637 14.207 313.633 cv
9.953 313.633 li
9.914 313.637 9.879 313.629 9.848 313.605 cv
9.82 313.59 9.797 313.555 9.77 313.5 cv
9.75 313.453 9.734 313.383 9.723 313.297 cv
9.719 313.215 9.715 313.113 9.711 312.984 cv
9.715 312.863 9.719 312.758 9.723 312.672 cv
9.734 312.59 9.75 312.523 9.77 312.477 cv
9.797 312.43 9.82 312.395 9.848 312.371 cv
9.879 312.352 9.914 312.344 9.953 312.34 cv
14.035 312.34 li
14.449 312.344 14.777 312.312 15.023 312.25 cv
15.27 312.191 15.48 312.102 15.652 311.977 cv
15.832 311.859 15.965 311.703 16.059 311.512 cv
16.156 311.328 16.207 311.109 16.203 310.859 cv
16.207 310.539 16.09 310.219 15.859 309.895 cv
15.633 309.578 15.297 309.238 14.852 308.879 cv
9.953 308.879 li
9.914 308.879 9.879 308.871 9.848 308.852 cv
9.82 308.836 9.797 308.801 9.77 308.746 cv
9.75 308.695 9.734 308.629 9.723 308.547 cv
9.719 308.469 9.715 308.363 9.711 308.23 cv
9.715 308.109 9.719 308.004 9.723 307.918 cv
9.734 307.836 9.75 307.773 9.77 307.727 cv
9.797 307.684 9.82 307.648 9.848 307.621 cv
9.879 307.602 9.914 307.59 9.953 307.586 cv
cp
f
16.965 299.176 mo
17.012 299.176 17.047 299.187 17.07 299.207 cv
17.102 299.23 17.125 299.266 17.145 299.309 cv
17.164 299.359 17.176 299.422 17.191 299.504 cv
17.199 299.586 17.207 299.691 17.207 299.812 cv
17.207 299.945 17.199 300.051 17.191 300.133 cv
17.176 300.219 17.164 300.285 17.145 300.328 cv
17.125 300.379 17.102 300.41 17.07 300.43 cv
17.047 300.453 17.012 300.465 16.965 300.461 cv
12.859 300.461 li
12.461 300.465 12.141 300.496 11.895 300.555 cv
11.652 300.621 11.441 300.711 11.262 300.828 cv
11.086 300.945 10.949 301.102 10.855 301.289 cv
10.762 301.484 10.715 301.703 10.715 301.949 cv
10.715 302.273 10.832 302.598 11.059 302.918 cv
11.293 303.242 11.625 303.578 12.063 303.93 cv
16.965 303.93 li
17.012 303.934 17.047 303.945 17.07 303.961 cv
17.102 303.984 17.125 304.016 17.145 304.062 cv
17.164 304.109 17.176 304.176 17.191 304.254 cv
17.199 304.34 17.207 304.445 17.207 304.574 cv
17.207 304.703 17.199 304.809 17.191 304.887 cv
17.176 304.973 17.164 305.039 17.145 305.086 cv
17.125 305.141 17.102 305.172 17.07 305.187 cv
17.047 305.207 17.012 305.219 16.965 305.215 cv
9.953 305.215 li
9.914 305.219 9.879 305.211 9.848 305.191 cv
9.82 305.18 9.797 305.148 9.77 305.098 cv
9.75 305.055 9.734 304.992 9.723 304.918 cv
9.719 304.848 9.715 304.754 9.711 304.629 cv
9.715 304.52 9.719 304.422 9.723 304.344 cv
9.734 304.27 9.75 304.211 9.77 304.168 cv
9.797 304.129 9.82 304.102 9.848 304.082 cv
9.879 304.066 9.914 304.059 9.953 304.055 cv
10.879 304.055 li
10.438 303.664 10.117 303.27 9.91 302.875 cv
9.707 302.484 9.602 302.086 9.602 301.684 cv
9.602 301.215 9.684 300.824 9.84 300.504 cv
10.004 300.187 10.215 299.926 10.477 299.727 cv
10.742 299.531 11.051 299.391 11.406 299.305 cv
11.762 299.219 12.191 299.176 12.688 299.176 cv
cp
f
16.449 293.297 mo
16.605 293.297 16.723 293.309 16.809 293.328 cv
16.898 293.352 16.965 293.383 17.004 293.422 cv
17.047 293.465 17.086 293.527 17.121 293.609 cv
17.156 293.695 17.184 293.789 17.211 293.895 cv
17.23 294.004 17.25 294.117 17.27 294.234 cv
17.281 294.352 17.289 294.473 17.293 294.59 cv
17.289 294.957 17.242 295.27 17.148 295.527 cv
17.055 295.789 16.91 296 16.711 296.164 cv
16.52 296.332 16.273 296.453 15.973 296.527 cv
15.676 296.605 15.324 296.645 14.914 296.641 cv
10.816 296.641 li
10.816 297.621 li
10.82 297.699 10.777 297.762 10.691 297.809 cv
10.609 297.855 10.477 297.879 10.285 297.879 cv
10.191 297.879 10.109 297.875 10.039 297.859 cv
9.977 297.852 9.918 297.832 9.871 297.809 cv
9.828 297.789 9.797 297.762 9.777 297.727 cv
9.762 297.695 9.754 297.66 9.75 297.613 cv
9.75 296.641 li
8.082 296.641 li
8.051 296.645 8.016 296.633 7.98 296.613 cv
7.953 296.598 7.926 296.566 7.898 296.512 cv
7.879 296.465 7.863 296.398 7.848 296.312 cv
7.84 296.234 7.832 296.129 7.832 296 cv
7.832 295.871 7.84 295.766 7.848 295.684 cv
7.863 295.602 7.879 295.535 7.898 295.488 cv
7.926 295.441 7.953 295.41 7.98 295.387 cv
8.016 295.371 8.051 295.359 8.082 295.355 cv
9.75 295.355 li
9.75 293.555 li
9.754 293.516 9.762 293.48 9.777 293.445 cv
9.797 293.418 9.828 293.391 9.871 293.363 cv
9.918 293.344 9.977 293.328 10.039 293.312 cv
10.109 293.305 10.191 293.297 10.285 293.297 cv
10.477 293.297 10.609 293.32 10.691 293.367 cv
10.777 293.414 10.82 293.477 10.816 293.555 cv
10.816 295.355 li
14.73 295.355 li
15.215 295.359 15.578 295.289 15.824 295.141 cv
16.074 295 16.199 294.742 16.195 294.371 cv
16.199 294.258 16.188 294.152 16.16 294.055 cv
16.141 293.965 16.117 293.883 16.086 293.805 cv
16.063 293.734 16.035 293.672 16.012 293.617 cv
15.988 293.57 15.977 293.523 15.977 293.477 cv
15.977 293.453 15.984 293.426 15.996 293.402 cv
16.012 293.379 16.035 293.363 16.07 293.348 cv
16.109 293.34 16.16 293.328 16.219 293.312 cv
16.285 293.305 16.363 293.297 16.449 293.297 cv
cp
f
16.965 290.281 mo
17.012 290.285 17.047 290.297 17.07 290.312 cv
17.102 290.336 17.125 290.367 17.145 290.414 cv
17.164 290.461 17.176 290.527 17.191 290.605 cv
17.199 290.691 17.207 290.797 17.207 290.926 cv
17.207 291.055 17.199 291.16 17.191 291.238 cv
17.176 291.324 17.164 291.391 17.145 291.437 cv
17.125 291.492 17.102 291.523 17.07 291.539 cv
17.047 291.559 17.012 291.57 16.965 291.566 cv
9.953 291.566 li
9.918 291.57 9.887 291.559 9.852 291.539 cv
9.824 291.523 9.797 291.492 9.773 291.437 cv
9.754 291.391 9.738 291.324 9.727 291.238 cv
9.719 291.16 9.715 291.055 9.711 290.926 cv
9.715 290.797 9.719 290.691 9.727 290.605 cv
9.738 290.527 9.754 290.461 9.773 290.414 cv
9.797 290.367 9.824 290.336 9.852 290.312 cv
9.887 290.297 9.918 290.285 9.953 290.281 cv
cp
7.582 290.133 mo
7.887 290.133 8.094 290.191 8.199 290.305 cv
8.313 290.418 8.367 290.629 8.363 290.934 cv
8.367 291.238 8.313 291.445 8.203 291.555 cv
8.098 291.672 7.895 291.727 7.598 291.723 cv
7.297 291.727 7.094 291.668 6.984 291.551 cv
6.879 291.437 6.824 291.227 6.82 290.918 cv
6.824 290.617 6.879 290.414 6.98 290.301 cv
7.09 290.191 7.289 290.133 7.582 290.133 cv
cp
f
16.965 277.457 mo
17.012 277.461 17.047 277.469 17.07 277.488 cv
17.102 277.512 17.125 277.547 17.145 277.59 cv
17.164 277.641 17.176 277.707 17.191 277.785 cv
17.199 277.871 17.207 277.973 17.207 278.098 cv
17.207 278.23 17.199 278.34 17.191 278.418 cv
17.176 278.504 17.164 278.57 17.145 278.617 cv
17.125 278.672 17.102 278.707 17.07 278.723 cv
17.047 278.746 17.012 278.754 16.965 278.754 cv
12.703 278.754 li
12.41 278.754 12.141 278.781 11.895 278.832 cv
11.652 278.887 11.441 278.969 11.262 279.082 cv
11.086 279.195 10.949 279.34 10.855 279.516 cv
10.762 279.695 10.715 279.906 10.715 280.141 cv
10.715 280.437 10.832 280.734 11.059 281.031 cv
11.293 281.336 11.625 281.664 12.063 282.02 cv
16.965 282.02 li
17.012 282.023 17.047 282.035 17.07 282.051 cv
17.102 282.074 17.125 282.105 17.145 282.152 cv
17.164 282.203 17.176 282.27 17.191 282.352 cv
17.199 282.437 17.207 282.543 17.207 282.664 cv
17.207 282.785 17.199 282.887 17.191 282.973 cv
17.176 283.059 17.164 283.129 17.145 283.176 cv
17.125 283.23 17.102 283.262 17.07 283.277 cv
17.047 283.297 17.012 283.309 16.965 283.305 cv
12.703 283.305 li
12.41 283.309 12.141 283.336 11.895 283.391 cv
11.652 283.449 11.441 283.535 11.262 283.648 cv
11.086 283.762 10.949 283.906 10.855 284.078 cv
10.762 284.258 10.715 284.465 10.715 284.699 cv
10.715 285 10.832 285.297 11.059 285.598 cv
11.293 285.898 11.625 286.227 12.063 286.578 cv
16.965 286.578 li
17.012 286.582 17.047 286.594 17.07 286.609 cv
17.102 286.633 17.125 286.664 17.145 286.711 cv
17.164 286.758 17.176 286.824 17.191 286.902 cv
17.199 286.988 17.207 287.094 17.207 287.223 cv
17.207 287.352 17.199 287.457 17.191 287.535 cv
17.176 287.621 17.164 287.687 17.145 287.734 cv
17.125 287.789 17.102 287.82 17.07 287.836 cv
17.047 287.855 17.012 287.867 16.965 287.863 cv
9.953 287.863 li
9.914 287.867 9.879 287.859 9.848 287.84 cv
9.82 287.828 9.797 287.797 9.77 287.746 cv
9.75 287.703 9.734 287.641 9.723 287.566 cv
9.719 287.496 9.715 287.402 9.711 287.277 cv
9.715 287.168 9.719 287.07 9.723 286.992 cv
9.734 286.918 9.75 286.859 9.77 286.816 cv
9.797 286.777 9.82 286.75 9.848 286.73 cv
9.879 286.715 9.914 286.707 9.953 286.703 cv
10.879 286.703 li
10.438 286.312 10.117 285.93 9.91 285.555 cv
9.707 285.187 9.602 284.809 9.602 284.426 cv
9.602 284.137 9.637 283.879 9.703 283.645 cv
9.773 283.418 9.867 283.211 9.988 283.031 cv
10.109 282.855 10.254 282.707 10.422 282.578 cv
10.594 282.457 10.785 282.352 10.988 282.266 cv
10.738 282.035 10.523 281.812 10.344 281.602 cv
10.172 281.391 10.027 281.187 9.914 280.992 cv
9.809 280.797 9.73 280.609 9.676 280.426 cv
9.629 280.242 9.602 280.055 9.602 279.867 cv
9.602 279.414 9.684 279.035 9.84 278.73 cv
10.004 278.426 10.215 278.18 10.477 277.984 cv
10.742 277.797 11.051 277.66 11.406 277.578 cv
11.762 277.5 12.137 277.461 12.531 277.457 cv
cp
f
13.156 269.129 mo
13.359 269.133 13.5 269.184 13.586 269.281 cv
13.672 269.387 13.715 269.504 13.715 269.629 cv
13.715 274.246 li
14.105 274.25 14.457 274.211 14.77 274.129 cv
15.082 274.055 15.352 273.922 15.57 273.738 cv
15.797 273.559 15.969 273.324 16.086 273.027 cv
16.211 272.738 16.27 272.379 16.266 271.953 cv
16.27 271.621 16.242 271.324 16.184 271.062 cv
16.133 270.801 16.07 270.574 16 270.383 cv
15.934 270.195 15.875 270.039 15.816 269.914 cv
15.766 269.793 15.738 269.699 15.734 269.637 cv
15.738 269.602 15.746 269.57 15.762 269.539 cv
15.781 269.512 15.809 269.488 15.844 269.469 cv
15.883 269.457 15.934 269.445 15.996 269.434 cv
16.063 269.43 16.141 269.426 16.234 269.422 cv
16.305 269.426 16.363 269.43 16.41 269.43 cv
16.457 269.437 16.5 269.441 16.539 269.449 cv
16.578 269.457 16.613 269.473 16.645 269.488 cv
16.676 269.512 16.707 269.535 16.734 269.559 cv
16.766 269.59 16.813 269.672 16.875 269.812 cv
16.941 269.953 17.004 270.137 17.066 270.359 cv
17.129 270.586 17.184 270.844 17.234 271.137 cv
17.281 271.43 17.305 271.742 17.309 272.074 cv
17.305 272.652 17.227 273.16 17.066 273.59 cv
16.906 274.027 16.668 274.391 16.352 274.684 cv
16.035 274.984 15.641 275.207 15.16 275.355 cv
14.684 275.504 14.125 275.578 13.488 275.578 cv
12.891 275.578 12.352 275.504 11.867 275.348 cv
11.391 275.195 10.98 274.969 10.645 274.672 cv
10.309 274.379 10.051 274.023 9.871 273.609 cv
9.691 273.195 9.602 272.73 9.602 272.215 cv
9.602 271.664 9.691 271.195 9.867 270.809 cv
10.047 270.422 10.285 270.105 10.582 269.852 cv
10.883 269.605 11.234 269.422 11.633 269.305 cv
12.039 269.191 12.469 269.133 12.922 269.129 cv
cp
12.773 270.422 mo
12.098 270.406 11.566 270.559 11.184 270.875 cv
10.801 271.191 10.609 271.66 10.605 272.277 cv
10.609 272.602 10.668 272.883 10.785 273.121 cv
10.906 273.363 11.066 273.562 11.262 273.723 cv
11.461 273.887 11.691 274.012 11.953 274.098 cv
12.215 274.187 12.488 274.238 12.773 274.246 cv
cp
f
6.422 260.953 mo
7.469 261.449 8.539 261.816 9.637 262.059 cv
10.738 262.301 11.844 262.422 12.953 262.422 cv
14.07 262.422 15.18 262.301 16.273 262.051 cv
17.371 261.809 18.441 261.445 19.496 260.969 cv
19.555 260.945 19.609 260.934 19.656 260.926 cv
19.699 260.926 19.734 260.941 19.766 260.977 cv
19.793 261.016 19.813 261.07 19.828 261.145 cv
19.836 261.223 19.844 261.328 19.848 261.453 cv
19.844 261.551 19.84 261.629 19.84 261.695 cv
19.832 261.766 19.824 261.824 19.809 261.871 cv
19.793 261.922 19.773 261.965 19.754 261.992 cv
19.73 262.027 19.707 262.051 19.684 262.062 cv
19.152 262.344 18.617 262.59 18.074 262.801 cv
17.531 263.02 16.98 263.199 16.422 263.34 cv
15.859 263.488 15.293 263.598 14.719 263.668 cv
14.145 263.746 13.563 263.781 12.977 263.777 cv
12.391 263.781 11.813 263.742 11.238 263.656 cv
10.668 263.578 10.102 263.461 9.535 263.312 cv
8.973 263.164 8.418 262.984 7.871 262.773 cv
7.328 262.562 6.785 262.324 6.25 262.055 cv
6.23 262.051 6.215 262.035 6.195 262.012 cv
6.184 261.988 6.168 261.957 6.148 261.914 cv
6.137 261.875 6.125 261.816 6.113 261.742 cv
6.109 261.672 6.105 261.578 6.102 261.461 cv
6.105 261.344 6.113 261.25 6.125 261.172 cv
6.145 261.102 6.164 261.043 6.188 261 cv
6.215 260.961 6.25 260.937 6.289 260.93 cv
6.336 260.926 6.379 260.934 6.422 260.953 cv
cp
f
16.957 247.672 mo
17 247.672 17.035 247.684 17.066 247.703 cv
17.098 247.727 17.125 247.766 17.141 247.816 cv
17.16 247.871 17.172 247.937 17.188 248.02 cv
17.199 248.105 17.207 248.215 17.207 248.344 cv
17.207 248.473 17.199 248.578 17.188 248.664 cv
17.172 248.754 17.16 248.824 17.141 248.875 cv
17.125 248.926 17.098 248.961 17.066 248.98 cv
17.035 249.004 17 249.016 16.957 249.012 cv
8.176 249.012 li
8.176 249.027 li
16.996 252.582 li
17.035 252.598 17.066 252.621 17.09 252.648 cv
17.117 252.68 17.141 252.723 17.156 252.773 cv
17.176 252.832 17.188 252.895 17.195 252.969 cv
17.203 253.043 17.207 253.133 17.207 253.234 cv
17.207 253.348 17.199 253.441 17.191 253.516 cv
17.176 253.598 17.164 253.664 17.148 253.711 cv
17.133 253.766 17.113 253.805 17.082 253.832 cv
17.059 253.863 17.027 253.883 16.996 253.891 cv
8.176 257.289 li
8.176 257.297 li
16.957 257.297 li
17 257.301 17.035 257.309 17.066 257.328 cv
17.098 257.352 17.125 257.391 17.141 257.441 cv
17.16 257.496 17.172 257.566 17.188 257.648 cv
17.199 257.738 17.207 257.848 17.207 257.977 cv
17.207 258.109 17.199 258.215 17.188 258.301 cv
17.172 258.387 17.16 258.457 17.141 258.504 cv
17.125 258.559 17.098 258.594 17.066 258.609 cv
17.035 258.633 17 258.641 16.957 258.637 cv
7.684 258.637 li
7.469 258.641 7.313 258.582 7.215 258.465 cv
7.125 258.348 7.078 258.219 7.074 258.074 cv
7.074 257.25 li
7.078 257.086 7.094 256.937 7.121 256.809 cv
7.156 256.684 7.203 256.574 7.27 256.477 cv
7.34 256.383 7.426 256.301 7.527 256.238 cv
7.633 256.176 7.758 256.121 7.895 256.074 cv
15.195 253.187 li
15.195 253.148 li
7.918 250.148 li
7.766 250.094 7.633 250.031 7.52 249.961 cv
7.414 249.895 7.324 249.816 7.258 249.734 cv
7.195 249.652 7.148 249.562 7.117 249.461 cv
7.09 249.363 7.078 249.246 7.074 249.113 cv
7.074 248.25 li
7.078 248.172 7.09 248.094 7.109 248.023 cv
7.137 247.953 7.172 247.895 7.219 247.844 cv
7.27 247.793 7.332 247.75 7.406 247.719 cv
7.484 247.687 7.578 247.672 7.684 247.672 cv
cp
f
16.965 243.855 mo
17.012 243.859 17.047 243.871 17.07 243.887 cv
17.102 243.91 17.125 243.941 17.145 243.988 cv
17.164 244.035 17.176 244.102 17.191 244.18 cv
17.199 244.266 17.207 244.371 17.207 244.5 cv
17.207 244.629 17.199 244.734 17.191 244.812 cv
17.176 244.898 17.164 244.965 17.145 245.012 cv
17.125 245.066 17.102 245.098 17.07 245.113 cv
17.047 245.133 17.012 245.145 16.965 245.141 cv
9.953 245.141 li
9.918 245.145 9.887 245.133 9.852 245.113 cv
9.824 245.098 9.797 245.066 9.773 245.012 cv
9.754 244.965 9.738 244.898 9.727 244.812 cv
9.719 244.734 9.715 244.629 9.711 244.5 cv
9.715 244.371 9.719 244.266 9.727 244.18 cv
9.738 244.102 9.754 244.035 9.773 243.988 cv
9.797 243.941 9.824 243.91 9.852 243.887 cv
9.887 243.871 9.918 243.859 9.953 243.855 cv
cp
7.582 243.707 mo
7.887 243.707 8.094 243.766 8.199 243.879 cv
8.313 243.992 8.367 244.203 8.363 244.508 cv
8.367 244.812 8.313 245.02 8.203 245.129 cv
8.098 245.246 7.895 245.301 7.598 245.297 cv
7.297 245.301 7.094 245.242 6.984 245.125 cv
6.879 245.012 6.824 244.801 6.82 244.492 cv
6.824 244.191 6.879 243.988 6.98 243.875 cv
7.09 243.766 7.289 243.707 7.582 243.707 cv
cp
f
16.965 235.43 mo
17.012 235.43 17.047 235.441 17.07 235.461 cv
17.102 235.484 17.125 235.52 17.145 235.562 cv
17.164 235.613 17.176 235.676 17.191 235.758 cv
17.199 235.84 17.207 235.945 17.207 236.066 cv
17.207 236.199 17.199 236.305 17.191 236.387 cv
17.176 236.473 17.164 236.539 17.145 236.582 cv
17.125 236.633 17.102 236.664 17.07 236.684 cv
17.047 236.707 17.012 236.719 16.965 236.715 cv
12.859 236.715 li
12.461 236.719 12.141 236.75 11.895 236.809 cv
11.652 236.875 11.441 236.965 11.262 237.082 cv
11.086 237.199 10.949 237.355 10.855 237.543 cv
10.762 237.738 10.715 237.957 10.715 238.203 cv
10.715 238.527 10.832 238.852 11.059 239.172 cv
11.293 239.496 11.625 239.832 12.063 240.184 cv
16.965 240.184 li
17.012 240.187 17.047 240.199 17.07 240.215 cv
17.102 240.238 17.125 240.27 17.145 240.316 cv
17.164 240.363 17.176 240.43 17.191 240.508 cv
17.199 240.594 17.207 240.699 17.207 240.828 cv
17.207 240.957 17.199 241.062 17.191 241.141 cv
17.176 241.227 17.164 241.293 17.145 241.34 cv
17.125 241.395 17.102 241.426 17.07 241.441 cv
17.047 241.461 17.012 241.473 16.965 241.469 cv
9.953 241.469 li
9.914 241.473 9.879 241.465 9.848 241.445 cv
9.82 241.434 9.797 241.402 9.77 241.352 cv
9.75 241.309 9.734 241.246 9.723 241.172 cv
9.719 241.102 9.715 241.008 9.711 240.883 cv
9.715 240.773 9.719 240.676 9.723 240.598 cv
9.734 240.523 9.75 240.465 9.77 240.422 cv
9.797 240.383 9.82 240.355 9.848 240.336 cv
9.879 240.32 9.914 240.312 9.953 240.309 cv
10.879 240.309 li
10.438 239.918 10.117 239.523 9.91 239.129 cv
9.707 238.738 9.602 238.34 9.602 237.937 cv
9.602 237.469 9.684 237.078 9.84 236.758 cv
10.004 236.441 10.215 236.18 10.477 235.98 cv
10.742 235.785 11.051 235.645 11.406 235.559 cv
11.762 235.473 12.191 235.43 12.688 235.43 cv
cp
f
16.965 227.035 mo
17.012 227.039 17.047 227.047 17.07 227.062 cv
17.102 227.082 17.125 227.117 17.145 227.16 cv
17.164 227.207 17.176 227.266 17.191 227.34 cv
17.199 227.418 17.207 227.512 17.207 227.617 cv
17.207 227.742 17.199 227.84 17.191 227.91 cv
17.176 227.988 17.164 228.047 17.145 228.09 cv
17.125 228.137 17.102 228.168 17.07 228.18 cv
17.047 228.199 17.012 228.207 16.965 228.203 cv
16.039 228.203 li
16.484 228.605 16.805 229 17.004 229.387 cv
17.207 229.781 17.305 230.176 17.309 230.57 cv
17.305 231.043 17.23 231.437 17.074 231.754 cv
16.922 232.074 16.711 232.332 16.441 232.527 cv
16.176 232.73 15.863 232.871 15.504 232.953 cv
15.148 233.043 14.715 233.086 14.207 233.082 cv
9.953 233.082 li
9.914 233.086 9.879 233.078 9.848 233.055 cv
9.82 233.039 9.797 233.004 9.77 232.949 cv
9.75 232.902 9.734 232.832 9.723 232.746 cv
9.719 232.664 9.715 232.562 9.711 232.434 cv
9.715 232.312 9.719 232.207 9.723 232.121 cv
9.734 232.039 9.75 231.973 9.77 231.926 cv
9.797 231.879 9.82 231.844 9.848 231.82 cv
9.879 231.801 9.914 231.793 9.953 231.789 cv
14.035 231.789 li
14.449 231.793 14.777 231.762 15.023 231.699 cv
15.27 231.641 15.48 231.551 15.652 231.426 cv
15.832 231.309 15.965 231.152 16.059 230.961 cv
16.156 230.777 16.207 230.559 16.203 230.309 cv
16.207 229.988 16.09 229.668 15.859 229.344 cv
15.633 229.027 15.297 228.687 14.852 228.328 cv
9.953 228.328 li
9.914 228.328 9.879 228.32 9.848 228.301 cv
9.82 228.285 9.797 228.25 9.77 228.195 cv
9.75 228.145 9.734 228.078 9.723 227.996 cv
9.719 227.918 9.715 227.812 9.711 227.68 cv
9.715 227.559 9.719 227.453 9.723 227.367 cv
9.734 227.285 9.75 227.223 9.77 227.176 cv
9.797 227.133 9.82 227.098 9.848 227.07 cv
9.879 227.051 9.914 227.039 9.953 227.035 cv
cp
f
16.449 221.016 mo
16.605 221.016 16.723 221.027 16.809 221.047 cv
16.898 221.07 16.965 221.102 17.004 221.141 cv
17.047 221.184 17.086 221.246 17.121 221.328 cv
17.156 221.414 17.184 221.508 17.211 221.613 cv
17.23 221.723 17.25 221.836 17.27 221.953 cv
17.281 222.07 17.289 222.191 17.293 222.309 cv
17.289 222.676 17.242 222.988 17.148 223.246 cv
17.055 223.508 16.91 223.719 16.711 223.883 cv
16.52 224.051 16.273 224.172 15.973 224.246 cv
15.676 224.324 15.324 224.363 14.914 224.359 cv
10.816 224.359 li
10.816 225.34 li
10.82 225.418 10.777 225.48 10.691 225.527 cv
10.609 225.574 10.477 225.598 10.285 225.598 cv
10.191 225.598 10.109 225.594 10.039 225.578 cv
9.977 225.57 9.918 225.551 9.871 225.527 cv
9.828 225.508 9.797 225.48 9.777 225.445 cv
9.762 225.414 9.754 225.379 9.75 225.332 cv
9.75 224.359 li
8.082 224.359 li
8.051 224.363 8.016 224.352 7.98 224.332 cv
7.953 224.316 7.926 224.285 7.898 224.23 cv
7.879 224.184 7.863 224.117 7.848 224.031 cv
7.84 223.953 7.832 223.848 7.832 223.719 cv
7.832 223.59 7.84 223.484 7.848 223.402 cv
7.863 223.32 7.879 223.254 7.898 223.207 cv
7.926 223.16 7.953 223.129 7.98 223.105 cv
8.016 223.09 8.051 223.078 8.082 223.074 cv
9.75 223.074 li
9.75 221.273 li
9.754 221.234 9.762 221.199 9.777 221.164 cv
9.797 221.137 9.828 221.109 9.871 221.082 cv
9.918 221.062 9.977 221.047 10.039 221.031 cv
10.109 221.023 10.191 221.016 10.285 221.016 cv
10.477 221.016 10.609 221.039 10.691 221.086 cv
10.777 221.133 10.82 221.195 10.816 221.273 cv
10.816 223.074 li
14.73 223.074 li
15.215 223.078 15.578 223.008 15.824 222.859 cv
16.074 222.719 16.199 222.461 16.195 222.09 cv
16.199 221.977 16.188 221.871 16.16 221.773 cv
16.141 221.684 16.117 221.602 16.086 221.523 cv
16.063 221.453 16.035 221.391 16.012 221.336 cv
15.988 221.289 15.977 221.242 15.977 221.195 cv
15.977 221.172 15.984 221.145 15.996 221.121 cv
16.012 221.098 16.035 221.082 16.07 221.066 cv
16.109 221.059 16.16 221.047 16.219 221.031 cv
16.285 221.023 16.363 221.016 16.449 221.016 cv
cp
f
13.156 213.332 mo
13.359 213.336 13.5 213.387 13.586 213.484 cv
13.672 213.59 13.715 213.707 13.715 213.832 cv
13.715 218.449 li
14.105 218.453 14.457 218.414 14.77 218.332 cv
15.082 218.258 15.352 218.125 15.57 217.941 cv
15.797 217.762 15.969 217.527 16.086 217.23 cv
16.211 216.941 16.27 216.582 16.266 216.156 cv
16.27 215.824 16.242 215.527 16.184 215.266 cv
16.133 215.004 16.07 214.777 16 214.586 cv
15.934 214.398 15.875 214.242 15.816 214.117 cv
15.766 213.996 15.738 213.902 15.734 213.84 cv
15.738 213.805 15.746 213.773 15.762 213.742 cv
15.781 213.715 15.809 213.691 15.844 213.672 cv
15.883 213.66 15.934 213.648 15.996 213.637 cv
16.063 213.633 16.141 213.629 16.234 213.625 cv
16.305 213.629 16.363 213.633 16.41 213.633 cv
16.457 213.641 16.5 213.645 16.539 213.652 cv
16.578 213.66 16.613 213.676 16.645 213.691 cv
16.676 213.715 16.707 213.738 16.734 213.762 cv
16.766 213.793 16.813 213.875 16.875 214.016 cv
16.941 214.156 17.004 214.34 17.066 214.562 cv
17.129 214.789 17.184 215.047 17.234 215.34 cv
17.281 215.633 17.305 215.945 17.309 216.277 cv
17.305 216.855 17.227 217.363 17.066 217.793 cv
16.906 218.23 16.668 218.594 16.352 218.887 cv
16.035 219.187 15.641 219.41 15.16 219.559 cv
14.684 219.707 14.125 219.781 13.488 219.781 cv
12.891 219.781 12.352 219.707 11.867 219.551 cv
11.391 219.398 10.98 219.172 10.645 218.875 cv
10.309 218.582 10.051 218.227 9.871 217.812 cv
9.691 217.398 9.602 216.934 9.602 216.418 cv
9.602 215.867 9.691 215.398 9.867 215.012 cv
10.047 214.625 10.285 214.309 10.582 214.055 cv
10.883 213.809 11.234 213.625 11.633 213.508 cv
12.039 213.395 12.469 213.336 12.922 213.332 cv
cp
12.773 214.625 mo
12.098 214.609 11.566 214.762 11.184 215.078 cv
10.801 215.395 10.609 215.863 10.605 216.48 cv
10.609 216.805 10.668 217.086 10.785 217.324 cv
10.906 217.566 11.066 217.766 11.262 217.926 cv
11.461 218.09 11.691 218.215 11.953 218.301 cv
12.215 218.391 12.488 218.441 12.773 218.449 cv
cp
f
15.055 207.047 mo
15.418 207.051 15.738 207.117 16.016 207.246 cv
16.297 207.379 16.531 207.566 16.723 207.809 cv
16.918 208.055 17.063 208.348 17.16 208.684 cv
17.258 209.023 17.305 209.395 17.309 209.797 cv
17.305 210.051 17.285 210.289 17.25 210.512 cv
17.207 210.738 17.16 210.937 17.102 211.117 cv
17.043 211.297 16.98 211.449 16.914 211.574 cv
16.852 211.699 16.793 211.793 16.738 211.848 cv
16.688 211.906 16.617 211.945 16.52 211.969 cv
16.43 211.996 16.301 212.008 16.141 212.008 cv
16.043 212.008 15.961 212.004 15.891 211.992 cv
15.824 211.984 15.77 211.973 15.727 211.953 cv
15.688 211.941 15.656 211.918 15.637 211.891 cv
15.621 211.863 15.613 211.832 15.609 211.793 cv
15.613 211.738 15.648 211.652 15.715 211.539 cv
15.789 211.43 15.867 211.293 15.945 211.125 cv
16.031 210.965 16.105 210.773 16.176 210.547 cv
16.246 210.328 16.281 210.07 16.281 209.773 cv
16.281 209.559 16.258 209.359 16.211 209.18 cv
16.164 209.004 16.098 208.852 16.004 208.723 cv
15.918 208.594 15.801 208.492 15.656 208.422 cv
15.52 208.352 15.352 208.316 15.156 208.316 cv
14.961 208.316 14.797 208.367 14.66 208.469 cv
14.527 208.57 14.406 208.707 14.301 208.871 cv
14.199 209.039 14.109 209.223 14.023 209.43 cv
13.945 209.641 13.859 209.855 13.77 210.074 cv
13.684 210.293 13.582 210.508 13.469 210.719 cv
13.359 210.93 13.227 211.121 13.063 211.285 cv
12.906 211.457 12.711 211.59 12.484 211.687 cv
12.262 211.793 11.996 211.844 11.684 211.84 cv
11.41 211.844 11.145 211.789 10.891 211.68 cv
10.641 211.574 10.422 211.414 10.23 211.199 cv
10.043 210.988 9.891 210.723 9.773 210.402 cv
9.66 210.082 9.602 209.711 9.602 209.281 cv
9.602 209.098 9.617 208.91 9.648 208.723 cv
9.68 208.539 9.719 208.371 9.766 208.215 cv
9.813 208.066 9.863 207.937 9.918 207.828 cv
9.973 207.727 10.023 207.645 10.063 207.586 cv
10.109 207.535 10.145 207.5 10.172 207.477 cv
10.203 207.461 10.238 207.445 10.273 207.437 cv
10.316 207.43 10.363 207.422 10.418 207.414 cv
10.477 207.406 10.547 207.402 10.629 207.402 cv
10.719 207.402 10.797 207.406 10.859 207.414 cv
10.93 207.422 10.98 207.437 11.02 207.453 cv
11.063 207.477 11.094 207.496 11.109 207.52 cv
11.129 207.547 11.137 207.578 11.137 207.605 cv
11.137 207.656 11.109 207.723 11.051 207.809 cv
10.996 207.898 10.934 208.012 10.867 208.152 cv
10.805 208.293 10.746 208.461 10.684 208.648 cv
10.629 208.84 10.598 209.055 10.598 209.297 cv
10.598 209.52 10.625 209.711 10.672 209.875 cv
10.727 210.043 10.797 210.18 10.883 210.285 cv
10.977 210.391 11.082 210.473 11.207 210.523 cv
11.332 210.582 11.469 210.609 11.613 210.605 cv
11.816 210.609 11.984 210.559 12.121 210.453 cv
12.262 210.352 12.383 210.215 12.484 210.047 cv
12.59 209.883 12.684 209.691 12.766 209.477 cv
12.852 209.266 12.938 209.051 13.023 208.828 cv
13.113 208.609 13.215 208.391 13.32 208.172 cv
13.43 207.957 13.559 207.766 13.715 207.598 cv
13.871 207.434 14.059 207.301 14.277 207.199 cv
14.496 207.102 14.758 207.051 15.055 207.047 cv
cp
f
12.977 202.602 mo
13.563 202.602 14.145 202.641 14.719 202.711 cv
15.293 202.789 15.859 202.898 16.422 203.039 cv
16.98 203.187 17.531 203.363 18.074 203.574 cv
18.617 203.785 19.152 204.031 19.684 204.309 cv
19.707 204.328 19.73 204.352 19.754 204.379 cv
19.773 204.414 19.793 204.453 19.809 204.5 cv
19.824 204.551 19.832 204.609 19.84 204.676 cv
19.84 204.746 19.844 204.828 19.848 204.918 cv
19.844 205.055 19.836 205.16 19.828 205.234 cv
19.813 205.312 19.793 205.367 19.766 205.398 cv
19.734 205.434 19.699 205.449 19.656 205.445 cv
19.609 205.445 19.555 205.43 19.496 205.402 cv
18.445 204.926 17.375 204.566 16.277 204.32 cv
15.18 204.078 14.07 203.957 12.953 203.953 cv
11.844 203.957 10.738 204.078 9.637 204.32 cv
8.539 204.566 7.469 204.934 6.422 205.418 cv
6.379 205.441 6.336 205.449 6.289 205.441 cv
6.25 205.441 6.215 205.418 6.188 205.371 cv
6.164 205.332 6.145 205.273 6.125 205.199 cv
6.113 205.129 6.105 205.031 6.102 204.91 cv
6.105 204.801 6.109 204.711 6.113 204.637 cv
6.125 204.566 6.137 204.508 6.148 204.461 cv
6.168 204.418 6.184 204.387 6.195 204.363 cv
6.215 204.348 6.23 204.332 6.25 204.316 cv
7.316 203.785 8.414 203.363 9.535 203.059 cv
10.664 202.754 11.809 202.602 12.977 202.602 cv
cp
f
251.961 539.684 mo
251.957 539.789 251.941 539.879 251.906 539.949 cv
251.871 540.027 251.824 540.086 251.77 540.129 cv
251.711 540.18 251.648 540.215 251.582 540.23 cv
251.508 540.254 251.438 540.262 251.375 540.262 cv
250.93 540.262 li
250.789 540.262 250.668 540.25 250.563 540.219 cv
250.457 540.195 250.359 540.141 250.266 540.062 cv
250.172 539.988 250.078 539.887 249.984 539.754 cv
249.891 539.625 249.789 539.461 249.684 539.258 cv
246.609 533.52 li
246.445 533.227 246.281 532.918 246.121 532.59 cv
245.953 532.27 245.801 531.953 245.664 531.645 cv
245.648 531.645 li
245.656 532.02 245.664 532.402 245.672 532.789 cv
245.676 533.18 245.676 533.566 245.68 533.949 cv
245.68 540.035 li
245.676 540.074 245.664 540.109 245.645 540.141 cv
245.621 540.176 245.586 540.203 245.535 540.219 cv
245.48 540.238 245.41 540.25 245.328 540.266 cv
245.242 540.277 245.137 540.285 245.008 540.285 cv
244.871 540.285 244.762 540.277 244.68 540.266 cv
244.594 540.25 244.527 540.238 244.48 540.219 cv
244.43 540.203 244.395 540.176 244.371 540.141 cv
244.348 540.109 244.336 540.074 244.34 540.035 cv
244.34 530.73 li
244.336 530.523 244.395 530.375 244.516 530.285 cv
244.633 530.199 244.762 530.156 244.902 530.152 cv
245.563 530.152 li
245.715 530.156 245.848 530.168 245.953 530.191 cv
246.055 530.219 246.148 530.262 246.234 530.32 cv
246.316 530.383 246.395 530.465 246.477 530.57 cv
246.551 530.68 246.633 530.816 246.719 530.973 cv
249.086 535.398 li
249.23 535.672 249.371 535.937 249.508 536.191 cv
249.641 536.449 249.77 536.703 249.898 536.949 cv
250.02 537.203 250.145 537.449 250.27 537.687 cv
250.391 537.93 250.512 538.172 250.637 538.414 cv
250.645 538.414 li
250.633 538.008 250.625 537.578 250.625 537.133 cv
250.617 536.687 250.617 536.262 250.621 535.852 cv
250.621 530.379 li
250.617 530.344 250.629 530.309 250.652 530.277 cv
250.676 530.246 250.711 530.219 250.766 530.195 cv
250.813 530.172 250.883 530.156 250.969 530.145 cv
251.055 530.137 251.164 530.133 251.305 530.129 cv
251.422 530.133 251.527 530.137 251.617 530.145 cv
251.703 530.156 251.77 530.172 251.82 530.195 cv
251.867 530.219 251.902 530.246 251.926 530.277 cv
251.945 530.309 251.957 530.344 251.961 530.379 cv
cp
f
260.508 540.043 mo
260.504 540.09 260.496 540.125 260.48 540.148 cv
260.461 540.18 260.426 540.203 260.383 540.223 cv
260.336 540.242 260.277 540.254 260.203 540.27 cv
260.125 540.277 260.031 540.285 259.926 540.285 cv
259.801 540.285 259.703 540.277 259.633 540.27 cv
259.555 540.254 259.496 540.242 259.453 540.223 cv
259.406 540.203 259.375 540.18 259.363 540.148 cv
259.344 540.125 259.336 540.09 259.34 540.043 cv
259.34 539.117 li
258.938 539.562 258.543 539.883 258.156 540.082 cv
257.762 540.285 257.367 540.383 256.973 540.387 cv
256.5 540.383 256.105 540.309 255.789 540.152 cv
255.469 540 255.211 539.789 255.016 539.52 cv
254.813 539.254 254.672 538.941 254.59 538.582 cv
254.5 538.227 254.457 537.793 254.461 537.285 cv
254.461 533.031 li
254.457 532.992 254.465 532.957 254.488 532.926 cv
254.504 532.898 254.539 532.875 254.594 532.848 cv
254.641 532.828 254.711 532.812 254.797 532.801 cv
254.879 532.797 254.98 532.793 255.109 532.789 cv
255.23 532.793 255.336 532.797 255.422 532.801 cv
255.504 532.812 255.57 532.828 255.617 532.848 cv
255.664 532.875 255.699 532.898 255.723 532.926 cv
255.742 532.957 255.75 532.992 255.754 533.031 cv
255.754 537.113 li
255.75 537.527 255.781 537.855 255.844 538.102 cv
255.902 538.348 255.992 538.559 256.117 538.73 cv
256.234 538.91 256.391 539.043 256.582 539.137 cv
256.766 539.234 256.984 539.285 257.234 539.281 cv
257.555 539.285 257.875 539.168 258.199 538.937 cv
258.516 538.711 258.855 538.375 259.215 537.93 cv
259.215 533.031 li
259.215 532.992 259.223 532.957 259.242 532.926 cv
259.258 532.898 259.293 532.875 259.348 532.848 cv
259.398 532.828 259.465 532.812 259.547 532.801 cv
259.625 532.797 259.73 532.793 259.863 532.789 cv
259.984 532.793 260.09 532.797 260.176 532.801 cv
260.258 532.812 260.32 532.828 260.367 532.848 cv
260.41 532.875 260.445 532.898 260.473 532.926 cv
260.492 532.957 260.504 532.992 260.508 533.031 cv
cp
f
273.285 540.043 mo
273.281 540.09 273.273 540.125 273.254 540.148 cv
273.23 540.18 273.195 540.203 273.152 540.223 cv
273.102 540.242 273.035 540.254 272.957 540.27 cv
272.871 540.277 272.77 540.285 272.645 540.285 cv
272.512 540.285 272.402 540.277 272.324 540.27 cv
272.238 540.254 272.172 540.242 272.125 540.223 cv
272.07 540.203 272.035 540.18 272.02 540.148 cv
271.996 540.125 271.988 540.09 271.988 540.043 cv
271.988 535.781 li
271.988 535.488 271.961 535.219 271.91 534.973 cv
271.855 534.73 271.773 534.52 271.66 534.34 cv
271.547 534.164 271.402 534.027 271.227 533.934 cv
271.047 533.84 270.836 533.793 270.602 533.793 cv
270.305 533.793 270.008 533.91 269.711 534.137 cv
269.406 534.371 269.078 534.703 268.723 535.141 cv
268.723 540.043 li
268.719 540.09 268.707 540.125 268.691 540.148 cv
268.668 540.18 268.637 540.203 268.59 540.223 cv
268.539 540.242 268.473 540.254 268.391 540.27 cv
268.305 540.277 268.199 540.285 268.078 540.285 cv
267.957 540.285 267.855 540.277 267.77 540.27 cv
267.684 540.254 267.613 540.242 267.566 540.223 cv
267.512 540.203 267.48 540.18 267.465 540.148 cv
267.445 540.125 267.434 540.09 267.438 540.043 cv
267.438 535.781 li
267.434 535.488 267.406 535.219 267.352 534.973 cv
267.293 534.73 267.207 534.52 267.094 534.34 cv
266.98 534.164 266.836 534.027 266.664 533.934 cv
266.484 533.84 266.277 533.793 266.043 533.793 cv
265.742 533.793 265.445 533.91 265.145 534.137 cv
264.844 534.371 264.516 534.703 264.164 535.141 cv
264.164 540.043 li
264.16 540.09 264.148 540.125 264.133 540.148 cv
264.109 540.18 264.078 540.203 264.031 540.223 cv
263.984 540.242 263.918 540.254 263.84 540.27 cv
263.754 540.277 263.648 540.285 263.52 540.285 cv
263.391 540.285 263.285 540.277 263.207 540.27 cv
263.121 540.254 263.055 540.242 263.008 540.223 cv
262.953 540.203 262.922 540.18 262.906 540.148 cv
262.887 540.125 262.875 540.09 262.879 540.043 cv
262.879 533.031 li
262.875 532.992 262.883 532.957 262.902 532.926 cv
262.914 532.898 262.945 532.875 262.996 532.848 cv
263.039 532.828 263.102 532.812 263.176 532.801 cv
263.246 532.797 263.34 532.793 263.465 532.789 cv
263.574 532.793 263.672 532.797 263.75 532.801 cv
263.824 532.812 263.883 532.828 263.926 532.848 cv
263.965 532.875 263.992 532.898 264.012 532.926 cv
264.027 532.957 264.035 532.992 264.039 533.031 cv
264.039 533.957 li
264.43 533.516 264.813 533.195 265.188 532.988 cv
265.555 532.785 265.934 532.68 266.316 532.68 cv
266.605 532.68 266.863 532.715 267.098 532.781 cv
267.324 532.852 267.531 532.945 267.711 533.066 cv
267.887 533.187 268.035 533.332 268.164 533.5 cv
268.285 533.672 268.391 533.863 268.477 534.066 cv
268.707 533.816 268.93 533.602 269.141 533.422 cv
269.352 533.25 269.555 533.105 269.75 532.992 cv
269.945 532.887 270.133 532.809 270.316 532.754 cv
270.5 532.707 270.688 532.68 270.875 532.68 cv
271.328 532.68 271.707 532.762 272.012 532.918 cv
272.316 533.082 272.563 533.293 272.758 533.555 cv
272.945 533.82 273.082 534.129 273.164 534.484 cv
273.242 534.84 273.281 535.215 273.285 535.609 cv
cp
f
282.086 536.441 mo
282.082 537.051 282.016 537.602 281.887 538.086 cv
281.75 538.574 281.555 538.988 281.301 539.328 cv
281.043 539.672 280.727 539.934 280.355 540.113 cv
279.98 540.297 279.555 540.383 279.07 540.387 cv
278.844 540.383 278.637 540.363 278.449 540.32 cv
278.262 540.273 278.074 540.203 277.895 540.105 cv
277.707 540.008 277.527 539.883 277.348 539.73 cv
277.164 539.582 276.973 539.402 276.773 539.187 cv
276.773 540.043 li
276.773 540.09 276.762 540.125 276.742 540.152 cv
276.719 540.187 276.684 540.211 276.641 540.227 cv
276.59 540.242 276.531 540.254 276.465 540.27 cv
276.391 540.277 276.301 540.285 276.195 540.285 cv
276.086 540.285 276 540.277 275.93 540.27 cv
275.855 540.254 275.793 540.242 275.75 540.227 cv
275.699 540.211 275.668 540.187 275.656 540.152 cv
275.637 540.125 275.629 540.09 275.633 540.043 cv
275.633 529.633 li
275.629 529.594 275.641 529.559 275.66 529.523 cv
275.676 529.496 275.707 529.469 275.762 529.445 cv
275.809 529.426 275.875 529.41 275.961 529.398 cv
276.039 529.391 276.145 529.387 276.273 529.383 cv
276.402 529.387 276.508 529.391 276.594 529.398 cv
276.672 529.41 276.738 529.426 276.785 529.445 cv
276.832 529.469 276.863 529.496 276.887 529.523 cv
276.902 529.559 276.914 529.594 276.918 529.633 cv
276.918 533.832 li
277.125 533.621 277.328 533.441 277.523 533.297 cv
277.719 533.152 277.906 533.035 278.094 532.941 cv
278.277 532.855 278.465 532.789 278.656 532.742 cv
278.84 532.703 279.039 532.68 279.25 532.68 cv
279.754 532.68 280.188 532.781 280.555 532.984 cv
280.914 533.187 281.207 533.461 281.434 533.797 cv
281.656 534.141 281.824 534.539 281.93 534.996 cv
282.031 535.453 282.082 535.934 282.086 536.441 cv
cp
280.754 536.59 mo
280.75 536.234 280.723 535.887 280.672 535.547 cv
280.613 535.211 280.52 534.914 280.383 534.652 cv
280.246 534.395 280.066 534.184 279.844 534.023 cv
279.617 533.867 279.336 533.789 279.004 533.785 cv
278.836 533.789 278.672 533.812 278.512 533.855 cv
278.348 533.906 278.184 533.984 278.016 534.09 cv
277.848 534.203 277.672 534.344 277.496 534.512 cv
277.313 534.687 277.121 534.902 276.918 535.156 cv
276.918 537.953 li
277.273 538.387 277.613 538.719 277.938 538.941 cv
278.262 539.172 278.598 539.285 278.949 539.281 cv
279.27 539.285 279.547 539.207 279.781 539.047 cv
280.008 538.895 280.195 538.687 280.34 538.426 cv
280.484 538.172 280.59 537.883 280.656 537.562 cv
280.719 537.246 280.75 536.922 280.754 536.59 cv
cp
f
289.996 536.234 mo
289.992 536.437 289.941 536.578 289.844 536.664 cv
289.738 536.75 289.621 536.793 289.496 536.793 cv
284.879 536.793 li
284.875 537.184 284.914 537.535 284.996 537.848 cv
285.07 538.16 285.203 538.43 285.387 538.648 cv
285.566 538.875 285.801 539.047 286.098 539.164 cv
286.387 539.289 286.746 539.348 287.172 539.344 cv
287.504 539.348 287.801 539.32 288.063 539.262 cv
288.324 539.211 288.551 539.148 288.742 539.078 cv
288.93 539.012 289.086 538.953 289.211 538.895 cv
289.332 538.844 289.426 538.816 289.488 538.812 cv
289.523 538.816 289.555 538.824 289.586 538.84 cv
289.613 538.859 289.637 538.887 289.656 538.922 cv
289.668 538.961 289.68 539.012 289.691 539.074 cv
289.695 539.141 289.699 539.219 289.703 539.312 cv
289.699 539.383 289.695 539.441 289.695 539.488 cv
289.688 539.535 289.684 539.578 289.676 539.617 cv
289.668 539.656 289.652 539.691 289.637 539.723 cv
289.613 539.754 289.59 539.785 289.566 539.812 cv
289.535 539.844 289.453 539.891 289.313 539.953 cv
289.172 540.02 288.988 540.082 288.766 540.145 cv
288.539 540.207 288.281 540.262 287.988 540.312 cv
287.695 540.359 287.383 540.383 287.051 540.387 cv
286.473 540.383 285.965 540.305 285.535 540.145 cv
285.098 539.984 284.734 539.746 284.441 539.43 cv
284.141 539.113 283.918 538.719 283.77 538.238 cv
283.621 537.762 283.547 537.203 283.547 536.566 cv
283.547 535.969 283.621 535.43 283.777 534.945 cv
283.93 534.469 284.156 534.059 284.453 533.723 cv
284.746 533.387 285.102 533.129 285.516 532.949 cv
285.93 532.77 286.395 532.68 286.91 532.68 cv
287.461 532.68 287.93 532.77 288.316 532.945 cv
288.703 533.125 289.02 533.363 289.273 533.66 cv
289.52 533.961 289.703 534.312 289.82 534.711 cv
289.934 535.117 289.992 535.547 289.996 536 cv
cp
288.703 535.852 mo
288.719 535.176 288.566 534.645 288.25 534.262 cv
287.934 533.879 287.465 533.687 286.848 533.684 cv
286.523 533.687 286.242 533.746 286.004 533.863 cv
285.762 533.984 285.563 534.145 285.402 534.34 cv
285.238 534.539 285.113 534.77 285.027 535.031 cv
284.938 535.293 284.887 535.566 284.879 535.852 cv
cp
f
296.063 533.488 mo
296.059 533.605 296.059 533.703 296.055 533.777 cv
296.047 533.859 296.035 533.922 296.023 533.961 cv
296.004 534.008 295.984 534.039 295.965 534.062 cv
295.938 534.086 295.906 534.098 295.867 534.098 cv
295.824 534.098 295.773 534.086 295.715 534.062 cv
295.652 534.039 295.582 534.016 295.512 533.992 cv
295.434 533.969 295.352 533.949 295.258 533.926 cv
295.164 533.91 295.063 533.898 294.953 533.895 cv
294.82 533.898 294.691 533.926 294.57 533.973 cv
294.445 534.027 294.316 534.113 294.18 534.23 cv
294.039 534.355 293.895 534.512 293.746 534.707 cv
293.594 534.902 293.426 535.145 293.246 535.43 cv
293.246 540.043 li
293.242 540.09 293.23 540.125 293.215 540.148 cv
293.191 540.18 293.16 540.203 293.113 540.223 cv
293.066 540.242 293 540.254 292.922 540.27 cv
292.836 540.277 292.73 540.285 292.602 540.285 cv
292.473 540.285 292.367 540.277 292.289 540.27 cv
292.203 540.254 292.137 540.242 292.09 540.223 cv
292.035 540.203 292.004 540.18 291.988 540.148 cv
291.969 540.125 291.957 540.09 291.961 540.043 cv
291.961 533.031 li
291.957 532.992 291.965 532.957 291.984 532.926 cv
291.996 532.898 292.027 532.875 292.078 532.848 cv
292.121 532.828 292.184 532.812 292.258 532.801 cv
292.328 532.797 292.422 532.793 292.547 532.789 cv
292.656 532.793 292.754 532.797 292.832 532.801 cv
292.906 532.812 292.965 532.828 293.008 532.848 cv
293.047 532.875 293.074 532.898 293.094 532.926 cv
293.109 532.957 293.117 532.992 293.121 533.031 cv
293.121 534.051 li
293.309 533.77 293.492 533.543 293.664 533.367 cv
293.832 533.191 293.992 533.051 294.145 532.949 cv
294.293 532.848 294.441 532.777 294.59 532.738 cv
294.738 532.699 294.887 532.68 295.039 532.68 cv
295.105 532.68 295.184 532.684 295.27 532.691 cv
295.355 532.699 295.445 532.715 295.539 532.734 cv
295.633 532.758 295.715 532.781 295.793 532.805 cv
295.863 532.832 295.918 532.859 295.953 532.883 cv
295.98 532.914 296 532.937 296.016 532.957 cv
296.023 532.984 296.035 533.016 296.043 533.047 cv
296.051 533.086 296.055 533.137 296.059 533.207 cv
296.059 533.277 296.059 533.371 296.063 533.488 cv
cp
f
307.82 536.457 mo
307.816 537.035 307.742 537.562 307.594 538.039 cv
307.441 538.523 307.215 538.937 306.918 539.281 cv
306.617 539.633 306.242 539.902 305.797 540.094 cv
305.344 540.289 304.824 540.383 304.234 540.387 cv
303.656 540.383 303.152 540.301 302.727 540.129 cv
302.297 539.961 301.941 539.711 301.656 539.383 cv
301.367 539.055 301.152 538.66 301.016 538.191 cv
300.875 537.727 300.809 537.195 300.809 536.598 cv
300.809 536.031 300.879 535.504 301.027 535.023 cv
301.172 534.543 301.398 534.129 301.699 533.777 cv
301.996 533.43 302.367 533.16 302.816 532.969 cv
303.262 532.777 303.785 532.68 304.383 532.68 cv
304.961 532.68 305.461 532.766 305.891 532.937 cv
306.316 533.109 306.676 533.359 306.961 533.687 cv
307.246 534.016 307.461 534.414 307.605 534.879 cv
307.746 535.348 307.816 535.875 307.82 536.457 cv
cp
306.488 536.543 mo
306.484 536.168 306.449 535.809 306.383 535.469 cv
306.309 535.133 306.191 534.84 306.031 534.582 cv
305.867 534.332 305.648 534.129 305.371 533.977 cv
305.09 533.832 304.742 533.758 304.332 533.754 cv
303.945 533.758 303.617 533.824 303.344 533.957 cv
303.066 534.094 302.84 534.285 302.664 534.531 cv
302.484 534.777 302.352 535.07 302.27 535.406 cv
302.18 535.746 302.137 536.113 302.141 536.512 cv
302.137 536.898 302.172 537.262 302.246 537.598 cv
302.313 537.937 302.43 538.23 302.598 538.48 cv
302.762 538.734 302.984 538.937 303.262 539.082 cv
303.539 539.234 303.887 539.309 304.301 539.305 cv
304.676 539.309 305.004 539.238 305.285 539.102 cv
305.563 538.969 305.789 538.781 305.969 538.531 cv
306.145 538.289 306.273 537.996 306.359 537.66 cv
306.441 537.324 306.484 536.953 306.488 536.543 cv
cp
f
313.551 530.145 mo
313.547 530.246 313.543 530.324 313.535 530.383 cv
313.523 530.445 313.512 530.496 313.5 530.527 cv
313.484 530.566 313.469 530.59 313.449 530.602 cv
313.426 530.617 313.398 530.625 313.371 530.621 cv
313.332 530.625 313.285 530.613 313.234 530.586 cv
313.176 530.566 313.109 530.539 313.035 530.508 cv
312.953 530.48 312.863 530.453 312.758 530.43 cv
312.648 530.406 312.523 530.395 312.391 530.395 cv
312.195 530.395 312.031 530.426 311.898 530.488 cv
311.758 530.551 311.648 530.648 311.57 530.781 cv
311.484 530.914 311.426 531.086 311.391 531.297 cv
311.352 531.508 311.332 531.766 311.336 532.062 cv
311.336 532.828 li
312.902 532.828 li
312.941 532.832 312.977 532.84 313.008 532.855 cv
313.035 532.875 313.063 532.906 313.086 532.949 cv
313.109 532.996 313.125 533.055 313.141 533.117 cv
313.148 533.187 313.156 533.27 313.16 533.363 cv
313.156 533.555 313.133 533.687 313.09 533.77 cv
313.039 533.855 312.977 533.898 312.902 533.895 cv
311.336 533.895 li
311.336 540.043 li
311.332 540.09 311.324 540.125 311.305 540.148 cv
311.281 540.18 311.246 540.203 311.199 540.223 cv
311.148 540.242 311.082 540.254 311 540.27 cv
310.914 540.277 310.809 540.285 310.691 540.285 cv
310.563 540.285 310.461 540.277 310.379 540.27 cv
310.293 540.254 310.227 540.242 310.18 540.223 cv
310.129 540.203 310.094 540.18 310.074 540.148 cv
310.051 540.125 310.039 540.09 310.043 540.043 cv
310.043 533.895 li
309.055 533.895 li
308.969 533.898 308.906 533.855 308.867 533.77 cv
308.824 533.687 308.801 533.555 308.805 533.363 cv
308.801 533.27 308.809 533.187 308.82 533.117 cv
308.828 533.055 308.844 532.996 308.867 532.949 cv
308.887 532.906 308.91 532.875 308.945 532.855 cv
308.973 532.84 309.012 532.832 309.055 532.828 cv
310.043 532.828 li
310.043 532.102 li
310.039 531.617 310.086 531.199 310.18 530.844 cv
310.27 530.496 310.406 530.207 310.594 529.984 cv
310.777 529.762 311.012 529.598 311.301 529.488 cv
311.582 529.383 311.918 529.328 312.305 529.328 cv
312.48 529.328 312.656 529.348 312.832 529.379 cv
313 529.418 313.133 529.453 313.23 529.488 cv
313.32 529.531 313.383 529.566 313.418 529.594 cv
313.445 529.629 313.473 529.668 313.496 529.715 cv
313.516 529.766 313.527 529.828 313.539 529.895 cv
313.543 529.969 313.547 530.051 313.551 530.145 cv
cp
f
323.75 537.41 mo
323.746 537.883 323.66 538.305 323.488 538.672 cv
323.313 539.047 323.07 539.359 322.762 539.613 cv
322.453 539.871 322.09 540.062 321.672 540.191 cv
321.25 540.32 320.801 540.383 320.32 540.387 cv
319.98 540.383 319.664 540.355 319.379 540.301 cv
319.09 540.242 318.836 540.176 318.609 540.09 cv
318.383 540.012 318.191 539.926 318.039 539.832 cv
317.883 539.746 317.777 539.668 317.719 539.605 cv
317.66 539.543 317.617 539.465 317.59 539.371 cv
317.559 539.277 317.543 539.148 317.547 538.984 cv
317.543 538.871 317.547 538.777 317.563 538.699 cv
317.57 538.625 317.586 538.562 317.609 538.516 cv
317.625 538.469 317.652 538.437 317.688 538.418 cv
317.715 538.402 317.75 538.395 317.793 538.391 cv
317.863 538.395 317.965 538.437 318.102 538.523 cv
318.23 538.613 318.402 538.711 318.613 538.812 cv
318.82 538.922 319.07 539.02 319.363 539.105 cv
319.656 539.199 319.996 539.242 320.383 539.242 cv
320.672 539.242 320.938 539.203 321.18 539.125 cv
321.418 539.047 321.625 538.937 321.805 538.793 cv
321.977 538.652 322.113 538.477 322.207 538.266 cv
322.301 538.059 322.348 537.824 322.348 537.559 cv
322.348 537.277 322.281 537.031 322.152 536.824 cv
322.02 536.625 321.848 536.449 321.637 536.293 cv
321.422 536.145 321.18 536.004 320.906 535.871 cv
320.633 535.746 320.352 535.613 320.07 535.48 cv
319.781 535.348 319.504 535.203 319.234 535.039 cv
318.965 534.883 318.723 534.691 318.512 534.473 cv
318.293 534.254 318.121 534 317.992 533.703 cv
317.855 533.414 317.789 533.062 317.793 532.648 cv
317.789 532.23 317.867 531.855 318.023 531.523 cv
318.176 531.195 318.387 530.918 318.664 530.691 cv
318.934 530.473 319.258 530.301 319.637 530.184 cv
320.012 530.066 320.422 530.008 320.859 530.008 cv
321.078 530.008 321.301 530.027 321.531 530.066 cv
321.754 530.105 321.965 530.156 322.168 530.219 cv
322.363 530.285 322.543 530.359 322.703 530.437 cv
322.855 530.52 322.957 530.586 323.012 530.633 cv
323.059 530.687 323.094 530.727 323.109 530.75 cv
323.125 530.781 323.137 530.816 323.148 530.859 cv
323.156 530.906 323.164 530.961 323.172 531.02 cv
323.176 531.086 323.18 531.164 323.18 531.262 cv
323.18 531.355 323.176 531.441 323.168 531.512 cv
323.16 531.59 323.148 531.648 323.133 531.695 cv
323.117 531.742 323.094 531.777 323.066 531.801 cv
323.035 531.824 323.004 531.836 322.969 531.836 cv
322.91 531.836 322.82 531.801 322.699 531.73 cv
322.574 531.66 322.422 531.578 322.25 531.484 cv
322.07 531.395 321.863 531.312 321.625 531.234 cv
321.379 531.16 321.109 531.121 320.813 531.121 cv
320.531 531.121 320.285 531.16 320.078 531.234 cv
319.867 531.312 319.695 531.414 319.563 531.535 cv
319.426 531.66 319.324 531.805 319.258 531.977 cv
319.191 532.148 319.16 532.332 319.16 532.523 cv
319.16 532.809 319.223 533.051 319.352 533.25 cv
319.48 533.453 319.652 533.633 319.871 533.785 cv
320.082 533.945 320.328 534.086 320.605 534.215 cv
320.879 534.348 321.16 534.48 321.449 534.609 cv
321.734 534.742 322.016 534.887 322.289 535.043 cv
322.563 535.203 322.809 535.391 323.027 535.605 cv
323.242 535.824 323.414 536.078 323.551 536.371 cv
323.68 536.664 323.746 537.012 323.75 537.41 cv
cp
f
331.516 540.043 mo
331.512 540.09 331.504 540.125 331.488 540.148 cv
331.469 540.18 331.434 540.203 331.391 540.223 cv
331.344 540.242 331.285 540.254 331.211 540.27 cv
331.133 540.277 331.039 540.285 330.934 540.285 cv
330.809 540.285 330.711 540.277 330.641 540.27 cv
330.563 540.254 330.504 540.242 330.461 540.223 cv
330.414 540.203 330.383 540.18 330.371 540.148 cv
330.352 540.125 330.344 540.09 330.348 540.043 cv
330.348 539.117 li
329.945 539.562 329.551 539.883 329.164 540.082 cv
328.77 540.285 328.375 540.383 327.98 540.387 cv
327.508 540.383 327.113 540.309 326.797 540.152 cv
326.477 540 326.219 539.789 326.023 539.52 cv
325.82 539.254 325.68 538.941 325.598 538.582 cv
325.508 538.227 325.465 537.793 325.469 537.285 cv
325.469 533.031 li
325.465 532.992 325.473 532.957 325.496 532.926 cv
325.512 532.898 325.547 532.875 325.602 532.848 cv
325.648 532.828 325.719 532.812 325.805 532.801 cv
325.887 532.797 325.988 532.793 326.117 532.789 cv
326.238 532.793 326.344 532.797 326.43 532.801 cv
326.512 532.812 326.578 532.828 326.625 532.848 cv
326.672 532.875 326.707 532.898 326.73 532.926 cv
326.75 532.957 326.758 532.992 326.762 533.031 cv
326.762 537.113 li
326.758 537.527 326.789 537.855 326.852 538.102 cv
326.91 538.348 327 538.559 327.125 538.73 cv
327.242 538.91 327.398 539.043 327.59 539.137 cv
327.773 539.234 327.992 539.285 328.242 539.281 cv
328.563 539.285 328.883 539.168 329.207 538.937 cv
329.523 538.711 329.863 538.375 330.223 537.93 cv
330.223 533.031 li
330.223 532.992 330.23 532.957 330.25 532.926 cv
330.266 532.898 330.301 532.875 330.355 532.848 cv
330.406 532.828 330.473 532.812 330.555 532.801 cv
330.633 532.797 330.738 532.793 330.871 532.789 cv
330.992 532.793 331.098 532.797 331.184 532.801 cv
331.266 532.812 331.328 532.828 331.375 532.848 cv
331.418 532.875 331.453 532.898 331.48 532.926 cv
331.5 532.957 331.512 532.992 331.516 533.031 cv
cp
f
340.371 536.441 mo
340.367 537.051 340.301 537.602 340.172 538.086 cv
340.035 538.574 339.84 538.988 339.586 539.328 cv
339.328 539.672 339.012 539.934 338.641 540.113 cv
338.266 540.297 337.84 540.383 337.355 540.387 cv
337.129 540.383 336.922 540.363 336.734 540.32 cv
336.547 540.273 336.359 540.203 336.18 540.105 cv
335.992 540.008 335.813 539.883 335.633 539.73 cv
335.449 539.582 335.258 539.402 335.059 539.187 cv
335.059 540.043 li
335.059 540.09 335.047 540.125 335.027 540.152 cv
335.004 540.187 334.969 540.211 334.926 540.227 cv
334.875 540.242 334.816 540.254 334.75 540.27 cv
334.676 540.277 334.586 540.285 334.48 540.285 cv
334.371 540.285 334.285 540.277 334.215 540.27 cv
334.141 540.254 334.078 540.242 334.035 540.227 cv
333.984 540.211 333.953 540.187 333.941 540.152 cv
333.922 540.125 333.914 540.09 333.918 540.043 cv
333.918 529.633 li
333.914 529.594 333.926 529.559 333.945 529.523 cv
333.961 529.496 333.992 529.469 334.047 529.445 cv
334.094 529.426 334.16 529.41 334.246 529.398 cv
334.324 529.391 334.43 529.387 334.559 529.383 cv
334.688 529.387 334.793 529.391 334.879 529.398 cv
334.957 529.41 335.023 529.426 335.07 529.445 cv
335.117 529.469 335.148 529.496 335.172 529.523 cv
335.188 529.559 335.199 529.594 335.203 529.633 cv
335.203 533.832 li
335.41 533.621 335.613 533.441 335.809 533.297 cv
336.004 533.152 336.191 533.035 336.379 532.941 cv
336.563 532.855 336.75 532.789 336.941 532.742 cv
337.125 532.703 337.324 532.68 337.535 532.68 cv
338.039 532.68 338.473 532.781 338.84 532.984 cv
339.199 533.187 339.492 533.461 339.719 533.797 cv
339.941 534.141 340.109 534.539 340.215 534.996 cv
340.316 535.453 340.367 535.934 340.371 536.441 cv
cp
339.039 536.59 mo
339.035 536.234 339.008 535.887 338.957 535.547 cv
338.898 535.211 338.805 534.914 338.668 534.652 cv
338.531 534.395 338.352 534.184 338.129 534.023 cv
337.902 533.867 337.621 533.789 337.289 533.785 cv
337.121 533.789 336.957 533.812 336.797 533.855 cv
336.633 533.906 336.469 533.984 336.301 534.09 cv
336.133 534.203 335.957 534.344 335.781 534.512 cv
335.598 534.687 335.406 534.902 335.203 535.156 cv
335.203 537.953 li
335.559 538.387 335.898 538.719 336.223 538.941 cv
336.547 539.172 336.883 539.285 337.234 539.281 cv
337.555 539.285 337.832 539.207 338.066 539.047 cv
338.293 538.895 338.48 538.687 338.625 538.426 cv
338.77 538.172 338.875 537.883 338.941 537.562 cv
339.004 537.246 339.035 536.922 339.039 536.59 cv
cp
f
345.527 536.305 mo
345.527 536.508 345.504 536.645 345.457 536.723 cv
345.41 536.801 345.34 536.84 345.254 536.84 cv
341.996 536.84 li
341.902 536.84 341.836 536.801 341.789 536.719 cv
341.742 536.641 341.719 536.504 341.719 536.305 cv
341.719 536.109 341.742 535.969 341.789 535.891 cv
341.836 535.812 341.902 535.773 341.996 535.773 cv
345.254 535.773 li
345.293 535.773 345.332 535.781 345.367 535.797 cv
345.398 535.812 345.426 535.844 345.453 535.887 cv
345.473 535.934 345.492 535.988 345.508 536.055 cv
345.52 536.125 345.527 536.211 345.527 536.305 cv
cp
f
348.781 540.035 mo
348.777 540.078 348.77 540.113 348.75 540.145 cv
348.727 540.176 348.688 540.203 348.641 540.219 cv
348.586 540.238 348.52 540.25 348.434 540.266 cv
348.348 540.277 348.238 540.285 348.113 540.285 cv
347.984 540.285 347.879 540.277 347.793 540.266 cv
347.703 540.25 347.633 540.238 347.582 540.219 cv
347.527 540.203 347.492 540.176 347.473 540.145 cv
347.449 540.113 347.438 540.078 347.441 540.035 cv
347.441 530.355 li
347.438 530.316 347.449 530.281 347.477 530.246 cv
347.496 530.219 347.535 530.191 347.594 530.172 cv
347.645 530.156 347.715 530.141 347.805 530.125 cv
347.887 530.113 347.988 530.109 348.113 530.105 cv
348.238 530.109 348.348 530.113 348.434 530.125 cv
348.52 530.141 348.586 530.156 348.641 530.172 cv
348.688 530.191 348.727 530.219 348.75 530.246 cv
348.77 530.281 348.777 530.316 348.781 530.355 cv
cp
f
361.766 540.043 mo
361.762 540.09 361.754 540.125 361.734 540.148 cv
361.711 540.18 361.676 540.203 361.633 540.223 cv
361.582 540.242 361.516 540.254 361.438 540.27 cv
361.352 540.277 361.25 540.285 361.125 540.285 cv
360.992 540.285 360.883 540.277 360.805 540.27 cv
360.719 540.254 360.652 540.242 360.605 540.223 cv
360.551 540.203 360.516 540.18 360.5 540.148 cv
360.477 540.125 360.469 540.09 360.469 540.043 cv
360.469 535.781 li
360.469 535.488 360.441 535.219 360.391 534.973 cv
360.336 534.73 360.254 534.52 360.141 534.34 cv
360.027 534.164 359.883 534.027 359.707 533.934 cv
359.527 533.84 359.316 533.793 359.082 533.793 cv
358.785 533.793 358.488 533.91 358.191 534.137 cv
357.887 534.371 357.559 534.703 357.203 535.141 cv
357.203 540.043 li
357.199 540.09 357.188 540.125 357.172 540.148 cv
357.148 540.18 357.117 540.203 357.07 540.223 cv
357.02 540.242 356.953 540.254 356.871 540.27 cv
356.785 540.277 356.68 540.285 356.559 540.285 cv
356.438 540.285 356.336 540.277 356.25 540.27 cv
356.164 540.254 356.094 540.242 356.047 540.223 cv
355.992 540.203 355.961 540.18 355.945 540.148 cv
355.926 540.125 355.914 540.09 355.918 540.043 cv
355.918 535.781 li
355.914 535.488 355.887 535.219 355.832 534.973 cv
355.773 534.73 355.688 534.52 355.574 534.34 cv
355.461 534.164 355.316 534.027 355.145 533.934 cv
354.965 533.84 354.758 533.793 354.523 533.793 cv
354.223 533.793 353.926 533.91 353.625 534.137 cv
353.324 534.371 352.996 534.703 352.645 535.141 cv
352.645 540.043 li
352.641 540.09 352.629 540.125 352.613 540.148 cv
352.59 540.18 352.559 540.203 352.512 540.223 cv
352.465 540.242 352.398 540.254 352.32 540.27 cv
352.234 540.277 352.129 540.285 352 540.285 cv
351.871 540.285 351.766 540.277 351.688 540.27 cv
351.602 540.254 351.535 540.242 351.488 540.223 cv
351.434 540.203 351.402 540.18 351.387 540.148 cv
351.367 540.125 351.355 540.09 351.359 540.043 cv
351.359 533.031 li
351.355 532.992 351.363 532.957 351.383 532.926 cv
351.395 532.898 351.426 532.875 351.477 532.848 cv
351.52 532.828 351.582 532.812 351.656 532.801 cv
351.727 532.797 351.82 532.793 351.945 532.789 cv
352.055 532.793 352.152 532.797 352.23 532.801 cv
352.305 532.812 352.363 532.828 352.406 532.848 cv
352.445 532.875 352.473 532.898 352.492 532.926 cv
352.508 532.957 352.516 532.992 352.52 533.031 cv
352.52 533.957 li
352.91 533.516 353.293 533.195 353.668 532.988 cv
354.035 532.785 354.414 532.68 354.797 532.68 cv
355.086 532.68 355.344 532.715 355.578 532.781 cv
355.805 532.852 356.012 532.945 356.191 533.066 cv
356.367 533.187 356.516 533.332 356.645 533.5 cv
356.766 533.672 356.871 533.863 356.957 534.066 cv
357.188 533.816 357.41 533.602 357.621 533.422 cv
357.832 533.25 358.035 533.105 358.23 532.992 cv
358.426 532.887 358.613 532.809 358.797 532.754 cv
358.98 532.707 359.168 532.68 359.355 532.68 cv
359.809 532.68 360.188 532.762 360.492 532.918 cv
360.797 533.082 361.043 533.293 361.238 533.555 cv
361.426 533.82 361.563 534.129 361.645 534.484 cv
361.723 534.84 361.762 535.215 361.766 535.609 cv
cp
f
369.398 540.051 mo
369.395 540.113 369.375 540.16 369.336 540.191 cv
369.293 540.223 369.234 540.246 369.164 540.262 cv
369.086 540.277 368.98 540.285 368.844 540.285 cv
368.707 540.285 368.598 540.277 368.52 540.262 cv
368.434 540.246 368.375 540.223 368.344 540.191 cv
368.305 540.16 368.289 540.113 368.293 540.051 cv
368.293 539.352 li
367.984 539.68 367.641 539.934 367.266 540.113 cv
366.887 540.297 366.488 540.383 366.07 540.387 cv
365.695 540.383 365.363 540.336 365.066 540.242 cv
364.77 540.145 364.516 540.008 364.305 539.824 cv
364.094 539.645 363.93 539.422 363.813 539.156 cv
363.695 538.895 363.637 538.594 363.641 538.25 cv
363.637 537.859 363.715 537.516 363.879 537.223 cv
364.035 536.934 364.27 536.691 364.574 536.5 cv
364.875 536.309 365.242 536.164 365.68 536.066 cv
366.113 535.973 366.605 535.926 367.152 535.922 cv
368.121 535.922 li
368.121 535.375 li
368.117 535.105 368.09 534.867 368.035 534.66 cv
367.977 534.453 367.883 534.281 367.758 534.141 cv
367.625 534.004 367.461 533.898 367.262 533.828 cv
367.055 533.758 366.805 533.723 366.516 533.723 cv
366.195 533.723 365.91 533.762 365.66 533.836 cv
365.402 533.914 365.184 533.996 364.996 534.086 cv
364.809 534.18 364.648 534.266 364.523 534.336 cv
364.391 534.414 364.297 534.449 364.238 534.449 cv
364.195 534.449 364.16 534.441 364.129 534.418 cv
364.098 534.402 364.07 534.371 364.047 534.324 cv
364.023 534.285 364.004 534.23 363.996 534.164 cv
363.98 534.102 363.977 534.031 363.98 533.949 cv
363.977 533.824 363.984 533.719 364.008 533.641 cv
364.023 533.566 364.07 533.496 364.141 533.426 cv
364.211 533.359 364.332 533.281 364.504 533.191 cv
364.676 533.102 364.871 533.02 365.094 532.941 cv
365.316 532.871 365.563 532.809 365.828 532.754 cv
366.094 532.707 366.359 532.68 366.633 532.68 cv
367.133 532.68 367.563 532.738 367.914 532.852 cv
368.266 532.969 368.551 533.137 368.773 533.355 cv
368.988 533.578 369.148 533.852 369.25 534.176 cv
369.348 534.508 369.395 534.891 369.398 535.32 cv
cp
368.121 536.848 mo
367.02 536.848 li
366.664 536.852 366.359 536.883 366.102 536.937 cv
365.84 537 365.625 537.086 365.453 537.203 cv
365.281 537.32 365.156 537.461 365.078 537.625 cv
364.996 537.789 364.953 537.977 364.957 538.187 cv
364.953 538.555 365.07 538.848 365.301 539.059 cv
365.531 539.277 365.855 539.383 366.273 539.383 cv
366.609 539.383 366.922 539.297 367.211 539.125 cv
367.5 538.953 367.801 538.691 368.121 538.336 cv
cp
f
377.617 533.348 mo
377.613 533.531 377.59 533.664 377.543 533.742 cv
377.492 533.824 377.43 533.863 377.355 533.863 cv
376.348 533.863 li
376.527 534.051 376.656 534.258 376.73 534.484 cv
376.801 534.711 376.836 534.945 376.84 535.187 cv
376.836 535.594 376.77 535.953 376.645 536.266 cv
376.512 536.578 376.328 536.844 376.086 537.055 cv
375.844 537.273 375.555 537.437 375.227 537.551 cv
374.891 537.668 374.523 537.727 374.121 537.723 cv
373.832 537.727 373.559 537.687 373.305 537.609 cv
373.043 537.535 372.848 537.441 372.711 537.324 cv
372.617 537.422 372.539 537.527 372.48 537.645 cv
372.418 537.766 372.387 537.902 372.391 538.055 cv
372.387 538.238 372.473 538.391 372.645 538.508 cv
372.813 538.633 373.035 538.695 373.316 538.703 cv
375.148 538.781 li
375.496 538.793 375.813 538.84 376.105 538.926 cv
376.395 539.012 376.648 539.137 376.863 539.293 cv
377.074 539.453 377.242 539.645 377.363 539.875 cv
377.48 540.109 377.539 540.379 377.543 540.684 cv
377.539 541.004 377.473 541.309 377.34 541.602 cv
377.203 541.891 376.996 542.145 376.719 542.367 cv
376.438 542.586 376.082 542.762 375.652 542.891 cv
375.223 543.016 374.715 543.078 374.129 543.082 cv
373.559 543.078 373.074 543.031 372.68 542.937 cv
372.281 542.84 371.957 542.707 371.703 542.543 cv
371.449 542.375 371.266 542.18 371.152 541.949 cv
371.035 541.715 370.977 541.461 370.98 541.195 cv
370.977 541.023 370.996 540.859 371.043 540.699 cv
371.082 540.535 371.145 540.383 371.23 540.238 cv
371.313 540.094 371.422 539.957 371.551 539.82 cv
371.676 539.691 371.82 539.559 371.992 539.43 cv
371.734 539.301 371.547 539.137 371.426 538.937 cv
371.305 538.742 371.246 538.531 371.246 538.297 cv
371.246 537.984 371.309 537.699 371.438 537.449 cv
371.566 537.199 371.727 536.977 371.922 536.777 cv
371.758 536.586 371.633 536.371 371.539 536.129 cv
371.445 535.891 371.398 535.598 371.398 535.25 cv
371.398 534.855 371.465 534.496 371.602 534.176 cv
371.734 533.859 371.922 533.594 372.164 533.375 cv
372.402 533.16 372.688 532.992 373.023 532.871 cv
373.355 532.758 373.723 532.699 374.121 532.695 cv
374.332 532.699 374.531 532.711 374.715 532.73 cv
374.898 532.758 375.07 532.789 375.234 532.828 cv
377.355 532.828 li
377.441 532.832 377.508 532.875 377.551 532.957 cv
377.594 533.047 377.613 533.176 377.617 533.348 cv
cp
375.609 535.195 mo
375.605 534.723 375.473 534.352 375.215 534.078 cv
374.949 533.812 374.578 533.676 374.098 533.676 cv
373.844 533.676 373.625 533.719 373.445 533.801 cv
373.258 533.887 373.105 534 372.984 534.145 cv
372.863 534.293 372.773 534.461 372.715 534.648 cv
372.652 534.836 372.621 535.035 372.625 535.242 cv
372.621 535.707 372.754 536.07 373.016 536.336 cv
373.277 536.602 373.645 536.734 374.121 536.73 cv
374.371 536.734 374.59 536.695 374.781 536.609 cv
374.965 536.531 375.121 536.418 375.246 536.277 cv
375.367 536.137 375.457 535.973 375.52 535.781 cv
375.574 535.598 375.605 535.402 375.609 535.195 cv
cp
376.254 540.754 mo
376.25 540.449 376.125 540.219 375.883 540.055 cv
375.633 539.895 375.301 539.805 374.883 539.793 cv
373.066 539.73 li
372.898 539.863 372.762 539.988 372.66 540.102 cv
372.551 540.219 372.469 540.328 372.406 540.437 cv
372.344 540.543 372.301 540.648 372.277 540.754 cv
372.254 540.855 372.242 540.961 372.242 541.07 cv
372.242 541.406 372.41 541.66 372.754 541.84 cv
373.094 542.012 373.574 542.102 374.191 542.102 cv
374.578 542.102 374.902 542.062 375.168 541.988 cv
375.426 541.91 375.637 541.809 375.801 541.687 cv
375.957 541.559 376.074 541.418 376.148 541.258 cv
376.215 541.098 376.25 540.93 376.254 540.754 cv
cp
f
385.18 536.234 mo
385.176 536.437 385.125 536.578 385.027 536.664 cv
384.922 536.75 384.805 536.793 384.68 536.793 cv
380.063 536.793 li
380.059 537.184 380.098 537.535 380.18 537.848 cv
380.254 538.16 380.387 538.43 380.57 538.648 cv
380.75 538.875 380.984 539.047 381.281 539.164 cv
381.57 539.289 381.93 539.348 382.355 539.344 cv
382.688 539.348 382.984 539.32 383.246 539.262 cv
383.508 539.211 383.734 539.148 383.926 539.078 cv
384.113 539.012 384.27 538.953 384.395 538.895 cv
384.516 538.844 384.609 538.816 384.672 538.812 cv
384.707 538.816 384.738 538.824 384.77 538.84 cv
384.797 538.859 384.82 538.887 384.84 538.922 cv
384.852 538.961 384.863 539.012 384.875 539.074 cv
384.879 539.141 384.883 539.219 384.887 539.312 cv
384.883 539.383 384.879 539.441 384.879 539.488 cv
384.871 539.535 384.867 539.578 384.859 539.617 cv
384.852 539.656 384.836 539.691 384.82 539.723 cv
384.797 539.754 384.773 539.785 384.75 539.812 cv
384.719 539.844 384.637 539.891 384.496 539.953 cv
384.355 540.02 384.172 540.082 383.949 540.145 cv
383.723 540.207 383.465 540.262 383.172 540.312 cv
382.879 540.359 382.566 540.383 382.234 540.387 cv
381.656 540.383 381.148 540.305 380.719 540.145 cv
380.281 539.984 379.918 539.746 379.625 539.43 cv
379.324 539.113 379.102 538.719 378.953 538.238 cv
378.805 537.762 378.73 537.203 378.73 536.566 cv
378.73 535.969 378.805 535.43 378.961 534.945 cv
379.113 534.469 379.34 534.059 379.637 533.723 cv
379.93 533.387 380.285 533.129 380.699 532.949 cv
381.113 532.77 381.578 532.68 382.094 532.68 cv
382.645 532.68 383.113 532.77 383.5 532.945 cv
383.887 533.125 384.203 533.363 384.457 533.66 cv
384.703 533.961 384.887 534.312 385.004 534.711 cv
385.117 535.117 385.176 535.547 385.18 536 cv
cp
383.887 535.852 mo
383.902 535.176 383.75 534.645 383.434 534.262 cv
383.117 533.879 382.648 533.687 382.031 533.684 cv
381.707 533.687 381.426 533.746 381.188 533.863 cv
380.945 533.984 380.746 534.145 380.586 534.34 cv
380.422 534.539 380.297 534.77 380.211 535.031 cv
380.121 535.293 380.07 535.566 380.063 535.852 cv
cp
f
391.547 538.133 mo
391.543 538.496 391.477 538.816 391.348 539.094 cv
391.215 539.375 391.027 539.609 390.785 539.801 cv
390.539 539.996 390.246 540.141 389.91 540.238 cv
389.57 540.336 389.199 540.383 388.797 540.387 cv
388.543 540.383 388.305 540.363 388.082 540.328 cv
387.855 540.285 387.656 540.238 387.477 540.18 cv
387.297 540.121 387.145 540.059 387.02 539.992 cv
386.895 539.93 386.801 539.871 386.746 539.816 cv
386.688 539.766 386.648 539.695 386.625 539.598 cv
386.598 539.508 386.586 539.379 386.586 539.219 cv
386.586 539.121 386.59 539.039 386.602 538.969 cv
386.609 538.902 386.621 538.848 386.641 538.805 cv
386.652 538.766 386.676 538.734 386.703 538.715 cv
386.73 538.699 386.762 538.691 386.801 538.687 cv
386.855 538.691 386.941 538.727 387.055 538.793 cv
387.164 538.867 387.301 538.945 387.469 539.023 cv
387.629 539.109 387.82 539.184 388.047 539.254 cv
388.266 539.324 388.523 539.359 388.82 539.359 cv
389.035 539.359 389.234 539.336 389.414 539.289 cv
389.59 539.242 389.742 539.176 389.871 539.082 cv
390 538.996 390.102 538.879 390.172 538.734 cv
390.242 538.598 390.277 538.43 390.277 538.234 cv
390.277 538.039 390.227 537.875 390.125 537.738 cv
390.023 537.605 389.887 537.484 389.723 537.379 cv
389.555 537.277 389.371 537.187 389.164 537.102 cv
388.953 537.023 388.738 536.937 388.52 536.848 cv
388.301 536.762 388.086 536.66 387.875 536.547 cv
387.664 536.437 387.473 536.305 387.309 536.141 cv
387.137 535.984 387.004 535.789 386.906 535.562 cv
386.801 535.34 386.75 535.074 386.754 534.762 cv
386.75 534.488 386.805 534.223 386.914 533.969 cv
387.02 533.719 387.18 533.5 387.395 533.309 cv
387.605 533.121 387.871 532.969 388.191 532.852 cv
388.512 532.738 388.883 532.68 389.313 532.68 cv
389.496 532.68 389.684 532.695 389.871 532.727 cv
390.055 532.758 390.223 532.797 390.379 532.844 cv
390.527 532.891 390.656 532.941 390.766 532.996 cv
390.867 533.051 390.949 533.102 391.008 533.141 cv
391.059 533.187 391.094 533.223 391.117 533.25 cv
391.133 533.281 391.148 533.316 391.156 533.352 cv
391.164 533.395 391.172 533.441 391.18 533.496 cv
391.188 533.555 391.191 533.625 391.191 533.707 cv
391.191 533.797 391.188 533.875 391.18 533.937 cv
391.172 534.008 391.156 534.059 391.141 534.098 cv
391.117 534.141 391.098 534.172 391.074 534.187 cv
391.047 534.207 391.016 534.215 390.988 534.215 cv
390.938 534.215 390.871 534.187 390.785 534.129 cv
390.695 534.074 390.582 534.012 390.441 533.945 cv
390.301 533.883 390.133 533.824 389.945 533.762 cv
389.754 533.707 389.539 533.676 389.297 533.676 cv
389.074 533.676 388.883 533.703 388.719 533.75 cv
388.551 533.805 388.414 533.875 388.309 533.961 cv
388.203 534.055 388.121 534.16 388.07 534.285 cv
388.012 534.41 387.984 534.547 387.988 534.691 cv
387.984 534.895 388.035 535.062 388.141 535.199 cv
388.242 535.34 388.379 535.461 388.547 535.562 cv
388.711 535.668 388.902 535.762 389.117 535.844 cv
389.328 535.93 389.543 536.016 389.766 536.102 cv
389.984 536.191 390.203 536.293 390.422 536.398 cv
390.637 536.508 390.828 536.637 390.996 536.793 cv
391.16 536.949 391.293 537.137 391.395 537.355 cv
391.492 537.574 391.543 537.836 391.547 538.133 cv
cp
f
173.898 12.41 mo
173.895 13.25 173.793 14 173.586 14.656 cv
173.379 15.32 173.07 15.879 172.66 16.336 cv
172.25 16.797 171.742 17.148 171.137 17.387 cv
170.531 17.629 169.832 17.746 169.039 17.75 cv
168.25 17.746 167.563 17.645 166.98 17.441 cv
166.395 17.238 165.906 16.926 165.52 16.504 cv
165.129 16.082 164.84 15.547 164.645 14.898 cv
164.449 14.25 164.352 13.48 164.355 12.59 cv
164.352 11.777 164.453 11.047 164.664 10.391 cv
164.867 9.742 165.176 9.18701 165.59 8.72699 cv
165.996 8.27301 166.504 7.922 167.113 7.67603 cv
167.715 7.43402 168.418 7.31201 169.223 7.30902 cv
169.984 7.31201 170.66 7.414 171.246 7.61298 cv
171.828 7.81598 172.316 8.125 172.711 8.547 cv
173.102 8.96899 173.398 9.5 173.598 10.141 cv
173.797 10.781 173.895 11.539 173.898 12.41 cv
cp
171.75 12.52 mo
171.746 11.992 171.703 11.512 171.625 11.078 cv
171.539 10.645 171.398 10.273 171.199 9.961 cv
170.996 9.65198 170.73 9.414 170.398 9.24597 cv
170.066 9.078 169.652 8.992 169.156 8.992 cv
168.648 8.992 168.227 9.09003 167.891 9.27698 cv
167.555 9.46899 167.281 9.71899 167.074 10.035 cv
166.863 10.355 166.715 10.727 166.633 11.148 cv
166.543 11.57 166.5 12.02 166.504 12.488 cv
166.5 13.043 166.543 13.539 166.629 13.977 cv
166.711 14.418 166.852 14.793 167.051 15.102 cv
167.246 15.414 167.512 15.648 167.844 15.812 cv
168.176 15.977 168.594 16.059 169.102 16.059 cv
169.602 16.059 170.02 15.965 170.359 15.777 cv
170.695 15.59 170.969 15.336 171.18 15.016 cv
171.383 14.695 171.531 14.32 171.621 13.891 cv
171.703 13.461 171.746 13.004 171.75 12.52 cv
cp
f
181.898 10.348 mo
181.895 10.375 181.895 10.406 181.895 10.441 cv
181.891 10.48 181.887 10.52 181.879 10.562 cv
181.871 10.605 181.859 10.656 181.848 10.711 cv
181.832 10.77 181.816 10.836 181.797 10.906 cv
179.711 17.195 li
179.684 17.285 179.648 17.359 179.605 17.41 cv
179.559 17.469 179.484 17.512 179.387 17.539 cv
179.281 17.57 179.145 17.586 178.973 17.602 cv
178.797 17.609 178.57 17.617 178.293 17.617 cv
178.016 17.617 177.789 17.609 177.617 17.598 cv
177.441 17.582 177.305 17.562 177.207 17.531 cv
177.105 17.504 177.035 17.461 176.992 17.402 cv
176.945 17.352 176.91 17.281 176.887 17.195 cv
174.801 10.906 li
174.77 10.805 174.742 10.711 174.727 10.629 cv
174.703 10.547 174.695 10.488 174.695 10.449 cv
174.691 10.418 174.688 10.383 174.691 10.348 cv
174.688 10.297 174.703 10.25 174.734 10.211 cv
174.762 10.172 174.813 10.141 174.887 10.113 cv
174.957 10.09 175.055 10.07 175.184 10.059 cv
175.309 10.051 175.469 10.047 175.664 10.043 cv
175.875 10.047 176.047 10.055 176.18 10.062 cv
176.305 10.078 176.41 10.094 176.488 10.117 cv
176.563 10.141 176.613 10.176 176.648 10.219 cv
176.676 10.266 176.703 10.32 176.727 10.379 cv
178.309 15.48 li
178.355 15.676 li
178.402 15.48 li
179.961 10.379 li
179.973 10.32 179.996 10.266 180.031 10.219 cv
180.063 10.176 180.117 10.141 180.191 10.117 cv
180.262 10.094 180.359 10.078 180.484 10.062 cv
180.605 10.055 180.766 10.047 180.965 10.043 cv
181.156 10.047 181.313 10.051 181.434 10.059 cv
181.555 10.07 181.648 10.09 181.719 10.113 cv
181.785 10.141 181.832 10.172 181.859 10.211 cv
181.883 10.25 181.895 10.297 181.898 10.348 cv
cp
f
189.375 13.629 mo
189.371 13.867 189.32 14.043 189.215 14.156 cv
189.105 14.273 188.957 14.332 188.777 14.328 cv
184.543 14.328 li
184.539 14.629 184.574 14.898 184.648 15.137 cv
184.715 15.379 184.828 15.582 184.984 15.75 cv
185.137 15.922 185.332 16.051 185.574 16.137 cv
185.813 16.227 186.102 16.27 186.445 16.27 cv
186.785 16.27 187.086 16.246 187.348 16.195 cv
187.605 16.148 187.832 16.094 188.023 16.031 cv
188.211 15.973 188.367 15.918 188.496 15.867 cv
188.617 15.82 188.719 15.797 188.801 15.793 cv
188.844 15.797 188.883 15.805 188.918 15.82 cv
188.945 15.84 188.973 15.871 188.992 15.918 cv
189.012 15.965 189.023 16.031 189.035 16.117 cv
189.039 16.203 189.043 16.312 189.047 16.441 cv
189.043 16.559 189.043 16.656 189.039 16.734 cv
189.031 16.816 189.023 16.883 189.016 16.937 cv
189.004 16.996 188.988 17.047 188.969 17.082 cv
188.949 17.125 188.922 17.16 188.891 17.195 cv
188.855 17.234 188.762 17.285 188.613 17.344 cv
188.457 17.41 188.266 17.473 188.035 17.527 cv
187.797 17.59 187.527 17.637 187.23 17.684 cv
186.926 17.723 186.605 17.746 186.266 17.75 cv
185.645 17.746 185.102 17.672 184.641 17.516 cv
184.172 17.363 183.785 17.125 183.477 16.809 cv
183.16 16.492 182.926 16.094 182.777 15.609 cv
182.621 15.129 182.547 14.562 182.551 13.906 cv
182.547 13.293 182.625 12.734 182.789 12.238 cv
182.945 11.742 183.18 11.324 183.492 10.977 cv
183.797 10.633 184.172 10.367 184.609 10.184 cv
185.047 10.004 185.539 9.914 186.094 9.90997 cv
186.672 9.914 187.172 10 187.586 10.168 cv
188 10.344 188.336 10.582 188.602 10.883 cv
188.863 11.187 189.059 11.547 189.188 11.961 cv
189.309 12.379 189.371 12.828 189.375 13.316 cv
cp
187.473 13.066 mo
187.484 12.516 187.375 12.082 187.141 11.77 cv
186.906 11.457 186.539 11.301 186.047 11.297 cv
185.797 11.301 185.582 11.348 185.398 11.437 cv
185.211 11.535 185.059 11.66 184.938 11.816 cv
184.813 11.977 184.719 12.164 184.656 12.379 cv
184.59 12.594 184.551 12.824 184.543 13.066 cv
cp
f
195.449 11 mo
195.449 11.191 195.441 11.344 195.434 11.461 cv
195.418 11.582 195.402 11.676 195.387 11.742 cv
195.363 11.812 195.336 11.859 195.305 11.883 cv
195.266 11.91 195.223 11.922 195.176 11.922 cv
195.129 11.922 195.082 11.914 195.035 11.895 cv
194.98 11.879 194.922 11.859 194.859 11.836 cv
194.789 11.816 194.719 11.797 194.645 11.777 cv
194.563 11.762 194.477 11.754 194.387 11.75 cv
194.273 11.754 194.164 11.773 194.059 11.816 cv
193.949 11.863 193.836 11.934 193.723 12.023 cv
193.602 12.117 193.48 12.242 193.355 12.395 cv
193.227 12.555 193.09 12.746 192.945 12.973 cv
192.945 17.305 li
192.941 17.359 192.926 17.402 192.898 17.441 cv
192.863 17.48 192.809 17.516 192.738 17.539 cv
192.66 17.566 192.563 17.582 192.438 17.598 cv
192.313 17.609 192.152 17.617 191.965 17.617 cv
191.77 17.617 191.613 17.609 191.488 17.598 cv
191.363 17.582 191.262 17.566 191.188 17.539 cv
191.109 17.516 191.055 17.48 191.027 17.441 cv
190.992 17.402 190.977 17.359 190.98 17.305 cv
190.98 10.355 li
190.977 10.309 190.992 10.262 191.02 10.219 cv
191.043 10.184 191.09 10.152 191.16 10.121 cv
191.227 10.098 191.313 10.078 191.422 10.062 cv
191.527 10.055 191.66 10.047 191.824 10.043 cv
191.988 10.047 192.125 10.055 192.234 10.062 cv
192.34 10.078 192.426 10.098 192.488 10.121 cv
192.547 10.152 192.59 10.184 192.617 10.219 cv
192.641 10.262 192.652 10.309 192.656 10.355 cv
192.656 11.219 li
192.836 10.961 193.008 10.75 193.172 10.578 cv
193.328 10.414 193.484 10.277 193.633 10.176 cv
193.777 10.078 193.922 10.012 194.066 9.96899 cv
194.211 9.93402 194.355 9.914 194.504 9.90997 cv
194.57 9.914 194.645 9.91803 194.723 9.922 cv
194.801 9.93402 194.879 9.94501 194.965 9.961 cv
195.043 9.97998 195.117 10 195.184 10.023 cv
195.242 10.047 195.289 10.074 195.32 10.098 cv
195.348 10.129 195.367 10.156 195.383 10.184 cv
195.395 10.219 195.406 10.262 195.418 10.312 cv
195.426 10.371 195.434 10.453 195.441 10.559 cv
195.445 10.668 195.449 10.816 195.449 11 cv
cp
f
202.207 17.328 mo
202.203 17.406 202.176 17.461 202.129 17.5 cv
202.074 17.543 201.992 17.57 201.883 17.59 cv
201.766 17.605 201.602 17.617 201.387 17.617 cv
201.148 17.617 200.977 17.605 200.875 17.59 cv
200.766 17.57 200.691 17.543 200.652 17.5 cv
200.605 17.461 200.586 17.406 200.586 17.328 cv
200.586 16.777 li
200.297 17.086 199.969 17.324 199.605 17.492 cv
199.238 17.664 198.832 17.746 198.387 17.75 cv
198.016 17.746 197.676 17.699 197.367 17.605 cv
197.059 17.512 196.793 17.371 196.566 17.176 cv
196.34 16.988 196.164 16.754 196.039 16.473 cv
195.914 16.195 195.852 15.867 195.855 15.488 cv
195.852 15.09 195.93 14.738 196.09 14.434 cv
196.246 14.137 196.484 13.891 196.801 13.695 cv
197.113 13.504 197.504 13.359 197.973 13.262 cv
198.441 13.172 198.984 13.125 199.602 13.121 cv
200.281 13.121 li
200.281 12.699 li
200.281 12.484 200.258 12.293 200.215 12.129 cv
200.168 11.969 200.094 11.832 199.996 11.719 cv
199.891 11.613 199.758 11.531 199.59 11.477 cv
199.418 11.426 199.207 11.402 198.965 11.398 cv
198.633 11.402 198.34 11.437 198.086 11.508 cv
197.824 11.582 197.598 11.664 197.402 11.75 cv
197.203 11.844 197.039 11.922 196.91 11.992 cv
196.773 12.066 196.664 12.105 196.586 12.102 cv
196.523 12.105 196.473 12.086 196.434 12.047 cv
196.387 12.012 196.352 11.961 196.324 11.891 cv
196.293 11.828 196.27 11.742 196.258 11.641 cv
196.238 11.543 196.23 11.434 196.234 11.312 cv
196.23 11.152 196.246 11.027 196.273 10.93 cv
196.297 10.84 196.344 10.754 196.422 10.676 cv
196.492 10.602 196.621 10.52 196.805 10.43 cv
196.984 10.34 197.195 10.254 197.441 10.176 cv
197.684 10.098 197.953 10.035 198.242 9.98401 cv
198.531 9.93701 198.828 9.914 199.137 9.90997 cv
199.68 9.914 200.145 9.96503 200.531 10.07 cv
200.918 10.18 201.238 10.344 201.488 10.562 cv
201.738 10.781 201.918 11.066 202.035 11.414 cv
202.145 11.766 202.203 12.18 202.207 12.652 cv
cp
200.281 14.352 mo
199.531 14.352 li
199.215 14.355 198.945 14.379 198.723 14.422 cv
198.496 14.473 198.313 14.543 198.176 14.633 cv
198.031 14.73 197.93 14.844 197.867 14.973 cv
197.801 15.109 197.766 15.258 197.77 15.426 cv
197.766 15.719 197.859 15.949 198.047 16.113 cv
198.23 16.281 198.488 16.363 198.816 16.363 cv
199.09 16.363 199.34 16.293 199.574 16.152 cv
199.801 16.012 200.039 15.809 200.281 15.535 cv
cp
f
206.129 17.305 mo
206.125 17.359 206.109 17.402 206.082 17.441 cv
206.047 17.48 205.992 17.516 205.922 17.539 cv
205.844 17.566 205.746 17.582 205.621 17.598 cv
205.496 17.609 205.336 17.617 205.148 17.617 cv
204.953 17.617 204.797 17.609 204.672 17.598 cv
204.547 17.582 204.445 17.566 204.371 17.539 cv
204.293 17.516 204.238 17.48 204.211 17.441 cv
204.176 17.402 204.16 17.359 204.164 17.305 cv
204.164 7.05902 li
204.16 7.008 204.176 6.961 204.211 6.91803 cv
204.238 6.87903 204.293 6.84399 204.371 6.81201 cv
204.445 6.78497 204.547 6.76599 204.672 6.74597 cv
204.797 6.73401 204.953 6.72699 205.148 6.72302 cv
205.336 6.72699 205.496 6.73401 205.621 6.74597 cv
205.746 6.76599 205.844 6.78497 205.922 6.81201 cv
205.992 6.84399 206.047 6.87903 206.082 6.91803 cv
206.109 6.961 206.125 7.008 206.129 7.05902 cv
cp
f
210.102 17.305 mo
210.098 17.359 210.082 17.402 210.055 17.441 cv
210.02 17.48 209.965 17.516 209.895 17.539 cv
209.816 17.566 209.719 17.582 209.594 17.598 cv
209.469 17.609 209.309 17.617 209.121 17.617 cv
208.926 17.617 208.77 17.609 208.645 17.598 cv
208.52 17.582 208.418 17.566 208.344 17.539 cv
208.266 17.516 208.211 17.48 208.184 17.441 cv
208.148 17.402 208.133 17.359 208.137 17.305 cv
208.137 7.05902 li
208.133 7.008 208.148 6.961 208.184 6.91803 cv
208.211 6.87903 208.266 6.84399 208.344 6.81201 cv
208.418 6.78497 208.52 6.76599 208.645 6.74597 cv
208.77 6.73401 208.926 6.72699 209.121 6.72302 cv
209.309 6.72699 209.469 6.73401 209.594 6.74597 cv
209.719 6.76599 209.816 6.78497 209.895 6.81201 cv
209.965 6.84399 210.02 6.87903 210.055 6.91803 cv
210.082 6.961 210.098 7.008 210.102 7.05902 cv
cp
f
223.27 17.305 mo
223.27 17.367 223.258 17.414 223.238 17.449 cv
223.219 17.492 223.172 17.523 223.094 17.547 cv
223.016 17.57 222.898 17.586 222.75 17.602 cv
222.594 17.609 222.391 17.617 222.133 17.617 cv
221.914 17.617 221.738 17.609 221.609 17.602 cv
221.48 17.586 221.379 17.57 221.305 17.543 cv
221.227 17.516 221.172 17.48 221.145 17.434 cv
221.109 17.395 221.086 17.34 221.066 17.273 cv
220.16 15.023 li
220.051 14.77 219.945 14.543 219.844 14.344 cv
219.734 14.148 219.621 13.984 219.496 13.852 cv
219.367 13.723 219.219 13.621 219.055 13.551 cv
218.887 13.484 218.695 13.453 218.48 13.449 cv
217.84 13.449 li
217.84 17.289 li
217.836 17.344 217.82 17.391 217.789 17.43 cv
217.754 17.473 217.699 17.508 217.621 17.531 cv
217.543 17.559 217.438 17.578 217.309 17.594 cv
217.176 17.609 217.012 17.617 216.813 17.617 cv
216.613 17.617 216.445 17.609 216.316 17.594 cv
216.18 17.578 216.074 17.559 216 17.531 cv
215.918 17.508 215.863 17.473 215.836 17.43 cv
215.801 17.391 215.785 17.344 215.789 17.289 cv
215.789 8.133 li
215.785 7.90601 215.844 7.742 215.965 7.63702 cv
216.078 7.539 216.223 7.48798 216.398 7.48401 cv
219.008 7.48401 li
219.27 7.48798 219.488 7.492 219.664 7.5 cv
219.832 7.51202 219.988 7.52301 220.133 7.539 cv
220.535 7.59802 220.898 7.69897 221.223 7.836 cv
221.547 7.97998 221.824 8.164 222.051 8.38702 cv
222.277 8.617 222.449 8.883 222.57 9.19098 cv
222.688 9.5 222.746 9.85498 222.75 10.254 cv
222.746 10.594 222.703 10.902 222.621 11.176 cv
222.531 11.457 222.406 11.703 222.242 11.922 cv
222.074 12.141 221.867 12.332 221.625 12.488 cv
221.379 12.652 221.102 12.781 220.793 12.879 cv
220.941 12.953 221.086 13.043 221.219 13.145 cv
221.352 13.254 221.473 13.379 221.59 13.523 cv
221.703 13.672 221.816 13.84 221.922 14.027 cv
222.023 14.219 222.125 14.434 222.227 14.672 cv
223.078 16.66 li
223.152 16.859 223.203 17 223.23 17.09 cv
223.254 17.184 223.27 17.258 223.27 17.305 cv
cp
220.629 10.465 mo
220.625 10.133 220.551 9.85199 220.402 9.62097 cv
220.25 9.39502 220.004 9.23401 219.664 9.13702 cv
219.559 9.11298 219.441 9.09003 219.309 9.07397 cv
219.176 9.05902 218.992 9.05103 218.758 9.05103 cv
217.84 9.05103 li
217.84 11.914 li
218.883 11.914 li
219.172 11.918 219.43 11.883 219.648 11.809 cv
219.867 11.742 220.047 11.641 220.191 11.512 cv
220.336 11.387 220.445 11.234 220.52 11.055 cv
220.59 10.879 220.625 10.684 220.629 10.465 cv
cp
f
231.25 17.305 mo
231.246 17.359 231.234 17.402 231.211 17.441 cv
231.184 17.48 231.137 17.516 231.074 17.539 cv
231.008 17.566 230.922 17.582 230.816 17.598 cv
230.711 17.609 230.578 17.617 230.418 17.617 cv
230.242 17.617 230.102 17.609 230 17.598 cv
229.891 17.582 229.809 17.566 229.746 17.539 cv
229.684 17.516 229.637 17.48 229.613 17.441 cv
229.582 17.402 229.57 17.359 229.574 17.305 cv
229.574 16.504 li
229.188 16.918 228.797 17.23 228.402 17.437 cv
228 17.645 227.59 17.746 227.168 17.75 cv
226.688 17.746 226.285 17.672 225.961 17.516 cv
225.637 17.363 225.375 17.148 225.176 16.879 cv
224.973 16.609 224.828 16.297 224.746 15.937 cv
224.656 15.582 224.613 15.141 224.617 14.609 cv
224.617 10.355 li
224.613 10.309 224.629 10.262 224.66 10.219 cv
224.688 10.184 224.738 10.152 224.816 10.121 cv
224.891 10.098 224.992 10.078 225.121 10.062 cv
225.246 10.055 225.402 10.047 225.594 10.043 cv
225.781 10.047 225.941 10.055 226.066 10.062 cv
226.191 10.078 226.289 10.098 226.367 10.121 cv
226.438 10.152 226.492 10.184 226.527 10.219 cv
226.555 10.262 226.57 10.309 226.574 10.355 cv
226.574 14.281 li
226.57 14.648 226.594 14.926 226.645 15.117 cv
226.688 15.309 226.758 15.473 226.859 15.609 cv
226.953 15.75 227.078 15.855 227.227 15.93 cv
227.375 16.008 227.547 16.047 227.742 16.043 cv
227.992 16.047 228.242 15.957 228.496 15.77 cv
228.746 15.59 229.016 15.324 229.301 14.977 cv
229.301 10.355 li
229.301 10.309 229.313 10.262 229.344 10.219 cv
229.367 10.184 229.422 10.152 229.5 10.121 cv
229.574 10.098 229.672 10.078 229.801 10.062 cv
229.922 10.055 230.082 10.047 230.277 10.043 cv
230.469 10.047 230.625 10.055 230.75 10.062 cv
230.871 10.078 230.973 10.098 231.047 10.121 cv
231.117 10.152 231.168 10.184 231.203 10.219 cv
231.23 10.262 231.246 10.309 231.25 10.355 cv
cp
f
239.867 17.305 mo
239.863 17.359 239.848 17.402 239.82 17.441 cv
239.785 17.48 239.734 17.516 239.664 17.539 cv
239.59 17.566 239.488 17.582 239.363 17.598 cv
239.234 17.609 239.078 17.617 238.895 17.617 cv
238.699 17.617 238.539 17.609 238.414 17.598 cv
238.285 17.582 238.184 17.566 238.113 17.539 cv
238.035 17.516 237.984 17.48 237.957 17.441 cv
237.922 17.402 237.906 17.359 237.91 17.305 cv
237.91 13.34 li
237.906 13.004 237.883 12.738 237.836 12.543 cv
237.785 12.352 237.711 12.187 237.621 12.051 cv
237.527 11.914 237.41 11.809 237.262 11.73 cv
237.113 11.656 236.938 11.617 236.742 11.617 cv
236.488 11.617 236.238 11.711 235.984 11.891 cv
235.73 12.074 235.465 12.336 235.191 12.684 cv
235.191 17.305 li
235.188 17.359 235.172 17.402 235.145 17.441 cv
235.109 17.48 235.055 17.516 234.984 17.539 cv
234.906 17.566 234.809 17.582 234.684 17.598 cv
234.559 17.609 234.398 17.617 234.211 17.617 cv
234.016 17.617 233.859 17.609 233.734 17.598 cv
233.609 17.582 233.508 17.566 233.434 17.539 cv
233.355 17.516 233.301 17.48 233.273 17.441 cv
233.238 17.402 233.223 17.359 233.227 17.305 cv
233.227 10.355 li
233.223 10.309 233.238 10.262 233.266 10.219 cv
233.289 10.184 233.336 10.152 233.406 10.121 cv
233.473 10.098 233.559 10.078 233.668 10.062 cv
233.773 10.055 233.906 10.047 234.07 10.043 cv
234.234 10.047 234.371 10.055 234.48 10.062 cv
234.586 10.078 234.672 10.098 234.734 10.121 cv
234.793 10.152 234.836 10.184 234.863 10.219 cv
234.887 10.262 234.898 10.309 234.902 10.355 cv
234.902 11.156 li
235.285 10.746 235.676 10.434 236.074 10.223 cv
236.469 10.016 236.887 9.914 237.32 9.90997 cv
237.789 9.914 238.188 9.992 238.516 10.145 cv
238.84 10.305 239.102 10.516 239.301 10.781 cv
239.5 11.051 239.645 11.363 239.734 11.719 cv
239.82 12.078 239.863 12.508 239.867 13.012 cv
cp
f
245.738 16.621 mo
245.738 16.848 245.723 17.023 245.695 17.145 cv
245.664 17.27 245.625 17.355 245.582 17.402 cv
245.531 17.453 245.465 17.496 245.375 17.535 cv
245.281 17.574 245.172 17.605 245.055 17.637 cv
244.93 17.66 244.797 17.684 244.656 17.703 cv
244.512 17.715 244.371 17.723 244.227 17.727 cv
243.836 17.723 243.496 17.672 243.211 17.578 cv
242.926 17.477 242.691 17.328 242.504 17.121 cv
242.316 16.918 242.176 16.66 242.09 16.348 cv
241.996 16.039 241.953 15.668 241.957 15.238 cv
241.957 11.68 li
241.125 11.68 li
241.023 11.684 240.949 11.621 240.898 11.496 cv
240.844 11.375 240.816 11.172 240.82 10.883 cv
240.816 10.734 240.824 10.605 240.84 10.504 cv
240.852 10.402 240.871 10.32 240.898 10.258 cv
240.922 10.199 240.953 10.156 240.996 10.129 cv
241.031 10.105 241.078 10.094 241.133 10.09 cv
241.957 10.09 li
241.957 8.539 li
241.953 8.492 241.969 8.44501 242 8.39801 cv
242.027 8.35901 242.078 8.32397 242.156 8.29303 cv
242.23 8.27002 242.332 8.24597 242.461 8.22998 cv
242.586 8.21899 242.742 8.21503 242.934 8.211 cv
243.121 8.21503 243.281 8.21899 243.41 8.22998 cv
243.535 8.24597 243.637 8.27002 243.711 8.29303 cv
243.781 8.32397 243.832 8.35901 243.867 8.39801 cv
243.895 8.44501 243.91 8.492 243.914 8.539 cv
243.914 10.09 li
245.426 10.09 li
245.477 10.094 245.523 10.105 245.563 10.129 cv
245.602 10.156 245.633 10.199 245.66 10.258 cv
245.684 10.32 245.703 10.402 245.719 10.504 cv
245.73 10.605 245.738 10.734 245.738 10.883 cv
245.738 11.172 245.711 11.375 245.66 11.496 cv
245.605 11.621 245.531 11.684 245.434 11.68 cv
243.914 11.68 li
243.914 14.945 li
243.91 15.324 243.969 15.609 244.094 15.797 cv
244.211 15.988 244.426 16.082 244.73 16.082 cv
244.832 16.082 244.926 16.074 245.012 16.055 cv
245.094 16.039 245.168 16.02 245.234 15.992 cv
245.297 15.973 245.352 15.949 245.398 15.93 cv
245.441 15.914 245.48 15.906 245.52 15.902 cv
245.547 15.906 245.578 15.914 245.609 15.93 cv
245.637 15.949 245.656 15.988 245.676 16.039 cv
245.688 16.098 245.703 16.172 245.719 16.262 cv
245.73 16.359 245.738 16.477 245.738 16.621 cv
cp
f
249.125 17.305 mo
249.121 17.359 249.105 17.402 249.078 17.441 cv
249.043 17.48 248.988 17.516 248.918 17.539 cv
248.84 17.566 248.742 17.582 248.617 17.598 cv
248.492 17.609 248.332 17.617 248.145 17.617 cv
247.949 17.617 247.793 17.609 247.668 17.598 cv
247.543 17.582 247.441 17.566 247.367 17.539 cv
247.289 17.516 247.234 17.48 247.207 17.441 cv
247.172 17.402 247.156 17.359 247.16 17.305 cv
247.16 10.371 li
247.156 10.32 247.172 10.273 247.207 10.234 cv
247.234 10.195 247.289 10.164 247.367 10.133 cv
247.441 10.109 247.543 10.086 247.668 10.066 cv
247.793 10.055 247.949 10.047 248.145 10.043 cv
248.332 10.047 248.492 10.055 248.617 10.066 cv
248.742 10.086 248.84 10.109 248.918 10.133 cv
248.988 10.164 249.043 10.195 249.078 10.234 cv
249.105 10.273 249.121 10.32 249.125 10.371 cv
cp
249.273 8 mo
249.273 8.39801 249.191 8.672 249.031 8.82001 cv
248.867 8.97302 248.57 9.047 248.137 9.04303 cv
247.691 9.047 247.391 8.97302 247.242 8.828 cv
247.086 8.68402 247.012 8.422 247.012 8.039 cv
247.012 7.64502 247.09 7.37097 247.25 7.21899 cv
247.406 7.06598 247.707 6.98798 248.152 6.98798 cv
248.586 6.98798 248.883 7.06201 249.039 7.211 cv
249.195 7.35901 249.273 7.625 249.273 8 cv
cp
f
262.145 17.305 mo
262.141 17.359 262.125 17.402 262.098 17.441 cv
262.063 17.48 262.012 17.516 261.941 17.539 cv
261.867 17.566 261.766 17.582 261.645 17.598 cv
261.52 17.609 261.363 17.617 261.172 17.617 cv
260.973 17.617 260.813 17.609 260.688 17.598 cv
260.563 17.582 260.461 17.566 260.387 17.539 cv
260.309 17.516 260.258 17.48 260.23 17.441 cv
260.203 17.402 260.188 17.359 260.191 17.305 cv
260.191 13.184 li
260.188 12.953 260.168 12.738 260.125 12.543 cv
260.078 12.352 260.008 12.187 259.922 12.051 cv
259.828 11.914 259.715 11.809 259.578 11.73 cv
259.438 11.656 259.273 11.617 259.082 11.617 cv
258.848 11.617 258.609 11.711 258.371 11.891 cv
258.133 12.074 257.875 12.336 257.594 12.684 cv
257.594 17.305 li
257.594 17.359 257.578 17.402 257.547 17.441 cv
257.516 17.48 257.461 17.516 257.387 17.539 cv
257.309 17.566 257.207 17.582 257.086 17.598 cv
256.961 17.609 256.809 17.617 256.621 17.617 cv
256.426 17.617 256.266 17.609 256.145 17.598 cv
256.016 17.582 255.914 17.566 255.844 17.539 cv
255.766 17.516 255.715 17.48 255.684 17.441 cv
255.652 17.402 255.637 17.359 255.637 17.305 cv
255.637 13.184 li
255.637 12.953 255.613 12.738 255.57 12.543 cv
255.527 12.352 255.461 12.187 255.375 12.051 cv
255.281 11.914 255.168 11.809 255.031 11.73 cv
254.887 11.656 254.723 11.617 254.539 11.617 cv
254.297 11.617 254.059 11.711 253.82 11.891 cv
253.582 12.074 253.324 12.336 253.051 12.684 cv
253.051 17.305 li
253.047 17.359 253.031 17.402 253.004 17.441 cv
252.969 17.48 252.914 17.516 252.844 17.539 cv
252.766 17.566 252.668 17.582 252.543 17.598 cv
252.418 17.609 252.258 17.617 252.07 17.617 cv
251.875 17.617 251.719 17.609 251.594 17.598 cv
251.469 17.582 251.367 17.566 251.293 17.539 cv
251.215 17.516 251.16 17.48 251.133 17.441 cv
251.098 17.402 251.082 17.359 251.086 17.305 cv
251.086 10.355 li
251.082 10.309 251.098 10.262 251.125 10.219 cv
251.148 10.184 251.195 10.152 251.266 10.121 cv
251.332 10.098 251.418 10.078 251.527 10.062 cv
251.633 10.055 251.766 10.047 251.93 10.043 cv
252.094 10.047 252.23 10.055 252.34 10.062 cv
252.445 10.078 252.531 10.098 252.594 10.121 cv
252.652 10.152 252.695 10.184 252.723 10.219 cv
252.746 10.262 252.758 10.309 252.762 10.355 cv
252.762 11.156 li
253.145 10.746 253.527 10.434 253.91 10.223 cv
254.289 10.016 254.691 9.914 255.109 9.90997 cv
255.395 9.914 255.648 9.94098 255.879 10 cv
256.105 10.062 256.313 10.148 256.492 10.258 cv
256.672 10.371 256.824 10.508 256.953 10.66 cv
257.082 10.816 257.191 10.988 257.281 11.18 cv
257.488 10.957 257.691 10.766 257.895 10.605 cv
258.09 10.445 258.289 10.312 258.484 10.211 cv
258.68 10.109 258.875 10.035 259.07 9.98401 cv
259.266 9.93701 259.465 9.914 259.668 9.90997 cv
260.129 9.914 260.516 9.992 260.836 10.145 cv
261.148 10.305 261.406 10.516 261.602 10.781 cv
261.797 11.051 261.934 11.363 262.02 11.719 cv
262.098 12.078 262.141 12.457 262.145 12.855 cv
cp
f
270.484 13.629 mo
270.48 13.867 270.43 14.043 270.324 14.156 cv
270.215 14.273 270.066 14.332 269.887 14.328 cv
265.652 14.328 li
265.648 14.629 265.684 14.898 265.758 15.137 cv
265.824 15.379 265.938 15.582 266.094 15.75 cv
266.246 15.922 266.441 16.051 266.684 16.137 cv
266.922 16.227 267.211 16.27 267.555 16.27 cv
267.895 16.27 268.195 16.246 268.457 16.195 cv
268.715 16.148 268.941 16.094 269.133 16.031 cv
269.32 15.973 269.477 15.918 269.605 15.867 cv
269.727 15.82 269.828 15.797 269.91 15.793 cv
269.953 15.797 269.992 15.805 270.027 15.82 cv
270.055 15.84 270.082 15.871 270.102 15.918 cv
270.121 15.965 270.133 16.031 270.145 16.117 cv
270.148 16.203 270.152 16.312 270.156 16.441 cv
270.152 16.559 270.152 16.656 270.148 16.734 cv
270.141 16.816 270.133 16.883 270.125 16.937 cv
270.113 16.996 270.098 17.047 270.078 17.082 cv
270.059 17.125 270.031 17.16 270 17.195 cv
269.965 17.234 269.871 17.285 269.723 17.344 cv
269.566 17.41 269.375 17.473 269.145 17.527 cv
268.906 17.59 268.637 17.637 268.34 17.684 cv
268.035 17.723 267.715 17.746 267.375 17.75 cv
266.754 17.746 266.211 17.672 265.75 17.516 cv
265.281 17.363 264.895 17.125 264.586 16.809 cv
264.27 16.492 264.035 16.094 263.887 15.609 cv
263.73 15.129 263.656 14.562 263.66 13.906 cv
263.656 13.293 263.734 12.734 263.898 12.238 cv
264.055 11.742 264.289 11.324 264.602 10.977 cv
264.906 10.633 265.281 10.367 265.719 10.184 cv
266.156 10.004 266.648 9.914 267.203 9.90997 cv
267.781 9.914 268.281 10 268.695 10.168 cv
269.109 10.344 269.445 10.582 269.711 10.883 cv
269.973 11.187 270.168 11.547 270.297 11.961 cv
270.418 12.379 270.48 12.828 270.484 13.316 cv
cp
268.582 13.066 mo
268.594 12.516 268.484 12.082 268.25 11.77 cv
268.016 11.457 267.648 11.301 267.156 11.297 cv
266.906 11.301 266.691 11.348 266.508 11.437 cv
266.32 11.535 266.168 11.66 266.047 11.816 cv
265.922 11.977 265.828 12.164 265.766 12.379 cv
265.699 12.594 265.66 12.824 265.652 13.066 cv
cp
f
276.984 15.34 mo
276.98 15.738 276.906 16.086 276.762 16.387 cv
276.613 16.687 276.406 16.941 276.137 17.141 cv
275.863 17.348 275.543 17.496 275.176 17.598 cv
274.809 17.695 274.406 17.746 273.977 17.75 cv
273.711 17.746 273.465 17.727 273.23 17.691 cv
272.996 17.648 272.785 17.602 272.598 17.543 cv
272.41 17.484 272.254 17.422 272.129 17.359 cv
272.004 17.297 271.91 17.238 271.855 17.184 cv
271.797 17.129 271.754 17.047 271.727 16.93 cv
271.691 16.816 271.676 16.641 271.68 16.41 cv
271.676 16.262 271.684 16.141 271.695 16.047 cv
271.703 15.957 271.719 15.887 271.742 15.828 cv
271.762 15.777 271.785 15.738 271.82 15.719 cv
271.848 15.703 271.887 15.695 271.934 15.691 cv
271.988 15.695 272.074 15.727 272.188 15.789 cv
272.297 15.855 272.434 15.93 272.605 16.004 cv
272.77 16.086 272.965 16.156 273.184 16.223 cv
273.402 16.293 273.652 16.328 273.938 16.324 cv
274.113 16.328 274.27 16.309 274.41 16.27 cv
274.543 16.234 274.664 16.184 274.77 16.113 cv
274.867 16.047 274.941 15.961 274.996 15.855 cv
275.043 15.754 275.07 15.633 275.074 15.496 cv
275.07 15.34 275.023 15.207 274.93 15.098 cv
274.836 14.988 274.707 14.891 274.551 14.805 cv
274.387 14.723 274.207 14.645 274.012 14.57 cv
273.809 14.5 273.605 14.422 273.395 14.328 cv
273.184 14.242 272.977 14.141 272.781 14.023 cv
272.578 13.914 272.398 13.773 272.242 13.605 cv
272.078 13.441 271.953 13.242 271.859 13.004 cv
271.766 12.773 271.719 12.492 271.719 12.16 cv
271.719 11.832 271.781 11.527 271.91 11.246 cv
272.039 10.973 272.227 10.734 272.473 10.535 cv
272.715 10.34 273.012 10.187 273.363 10.074 cv
273.711 9.96899 274.105 9.914 274.547 9.90997 cv
274.762 9.914 274.973 9.92999 275.18 9.95697 cv
275.383 9.992 275.57 10.031 275.738 10.074 cv
275.902 10.125 276.043 10.176 276.16 10.227 cv
276.273 10.285 276.355 10.332 276.406 10.367 cv
276.453 10.41 276.488 10.449 276.512 10.484 cv
276.531 10.527 276.543 10.574 276.555 10.625 cv
276.563 10.68 276.574 10.746 276.582 10.824 cv
276.59 10.91 276.594 11.008 276.594 11.125 cv
276.594 11.266 276.59 11.383 276.582 11.469 cv
276.574 11.562 276.559 11.633 276.543 11.68 cv
276.523 11.734 276.5 11.77 276.473 11.785 cv
276.438 11.809 276.402 11.816 276.363 11.812 cv
276.313 11.816 276.238 11.789 276.145 11.73 cv
276.043 11.68 275.922 11.621 275.773 11.555 cv
275.625 11.496 275.453 11.437 275.258 11.379 cv
275.063 11.328 274.84 11.301 274.594 11.297 cv
274.414 11.301 274.262 11.32 274.133 11.352 cv
274 11.391 273.891 11.441 273.813 11.508 cv
273.727 11.578 273.664 11.656 273.625 11.746 cv
273.578 11.84 273.559 11.937 273.563 12.039 cv
273.559 12.199 273.609 12.336 273.711 12.441 cv
273.809 12.555 273.938 12.648 274.102 12.73 cv
274.262 12.816 274.445 12.895 274.652 12.965 cv
274.855 13.039 275.063 13.121 275.273 13.203 cv
275.48 13.293 275.688 13.391 275.898 13.504 cv
276.102 13.617 276.285 13.758 276.445 13.922 cv
276.605 14.09 276.734 14.289 276.836 14.52 cv
276.93 14.754 276.98 15.027 276.984 15.34 cv
cp
f
292.93 10.34 mo
292.926 10.398 292.918 10.469 292.906 10.551 cv
292.887 10.633 292.859 10.754 292.82 10.906 cv
290.965 17.195 li
290.938 17.285 290.902 17.359 290.863 17.41 cv
290.82 17.469 290.758 17.512 290.672 17.539 cv
290.586 17.57 290.461 17.586 290.305 17.602 cv
290.141 17.609 289.938 17.617 289.688 17.617 cv
289.43 17.617 289.219 17.609 289.063 17.598 cv
288.898 17.582 288.773 17.562 288.684 17.531 cv
288.59 17.504 288.523 17.461 288.484 17.402 cv
288.441 17.352 288.41 17.281 288.391 17.195 cv
287.223 12.973 li
287.207 12.902 li
287.191 12.973 li
286.117 17.195 li
286.094 17.285 286.063 17.359 286.027 17.41 cv
285.984 17.469 285.918 17.512 285.828 17.539 cv
285.73 17.57 285.605 17.586 285.445 17.602 cv
285.285 17.609 285.078 17.617 284.824 17.617 cv
284.563 17.617 284.352 17.609 284.195 17.598 cv
284.035 17.582 283.91 17.562 283.82 17.531 cv
283.727 17.504 283.66 17.461 283.621 17.402 cv
283.578 17.352 283.547 17.281 283.531 17.195 cv
281.691 10.906 li
281.641 10.758 281.613 10.641 281.602 10.555 cv
281.586 10.473 281.578 10.398 281.582 10.34 cv
281.578 10.289 281.594 10.246 281.625 10.203 cv
281.652 10.168 281.703 10.137 281.781 10.109 cv
281.855 10.09 281.957 10.07 282.082 10.059 cv
282.207 10.051 282.367 10.047 282.563 10.043 cv
282.77 10.047 282.938 10.051 283.07 10.059 cv
283.199 10.07 283.301 10.09 283.375 10.113 cv
283.445 10.141 283.496 10.176 283.527 10.219 cv
283.555 10.266 283.578 10.32 283.594 10.379 cv
284.973 15.48 li
284.988 15.574 li
285.004 15.48 li
286.297 10.379 li
286.309 10.32 286.336 10.266 286.371 10.219 cv
286.402 10.176 286.453 10.141 286.523 10.113 cv
286.59 10.09 286.684 10.07 286.805 10.059 cv
286.926 10.051 287.082 10.047 287.277 10.043 cv
287.469 10.047 287.625 10.055 287.746 10.062 cv
287.863 10.078 287.957 10.094 288.031 10.117 cv
288.098 10.141 288.148 10.172 288.18 10.211 cv
288.207 10.25 288.23 10.297 288.246 10.348 cv
289.633 15.488 li
289.656 15.574 li
289.672 15.48 li
290.996 10.379 li
291.004 10.32 291.027 10.266 291.059 10.219 cv
291.09 10.176 291.141 10.141 291.215 10.113 cv
291.285 10.09 291.383 10.07 291.508 10.059 cv
291.629 10.051 291.789 10.047 291.984 10.043 cv
292.176 10.047 292.332 10.051 292.457 10.059 cv
292.578 10.07 292.676 10.09 292.746 10.109 cv
292.816 10.137 292.863 10.168 292.891 10.203 cv
292.914 10.246 292.926 10.289 292.93 10.34 cv
cp
f
296.145 17.305 mo
296.141 17.359 296.125 17.402 296.098 17.441 cv
296.063 17.48 296.008 17.516 295.938 17.539 cv
295.859 17.566 295.762 17.582 295.637 17.598 cv
295.512 17.609 295.352 17.617 295.164 17.617 cv
294.969 17.617 294.813 17.609 294.688 17.598 cv
294.563 17.582 294.461 17.566 294.387 17.539 cv
294.309 17.516 294.254 17.48 294.227 17.441 cv
294.191 17.402 294.176 17.359 294.18 17.305 cv
294.18 10.371 li
294.176 10.32 294.191 10.273 294.227 10.234 cv
294.254 10.195 294.309 10.164 294.387 10.133 cv
294.461 10.109 294.563 10.086 294.688 10.066 cv
294.813 10.055 294.969 10.047 295.164 10.043 cv
295.352 10.047 295.512 10.055 295.637 10.066 cv
295.762 10.086 295.859 10.109 295.938 10.133 cv
296.008 10.164 296.063 10.195 296.098 10.234 cv
296.125 10.273 296.141 10.32 296.145 10.371 cv
cp
296.293 8 mo
296.293 8.39801 296.211 8.672 296.051 8.82001 cv
295.887 8.97302 295.59 9.047 295.156 9.04303 cv
294.711 9.047 294.41 8.97302 294.262 8.828 cv
294.105 8.68402 294.031 8.422 294.031 8.039 cv
294.031 7.64502 294.109 7.37097 294.27 7.21899 cv
294.426 7.06598 294.727 6.98798 295.172 6.98798 cv
295.605 6.98798 295.902 7.06201 296.059 7.211 cv
296.215 7.35901 296.293 7.625 296.293 8 cv
cp
f
302.223 16.621 mo
302.223 16.848 302.207 17.023 302.18 17.145 cv
302.148 17.27 302.109 17.355 302.066 17.402 cv
302.016 17.453 301.949 17.496 301.859 17.535 cv
301.766 17.574 301.656 17.605 301.539 17.637 cv
301.414 17.66 301.281 17.684 301.141 17.703 cv
300.996 17.715 300.855 17.723 300.711 17.727 cv
300.32 17.723 299.98 17.672 299.695 17.578 cv
299.41 17.477 299.176 17.328 298.988 17.121 cv
298.801 16.918 298.66 16.66 298.574 16.348 cv
298.48 16.039 298.438 15.668 298.441 15.238 cv
298.441 11.68 li
297.609 11.68 li
297.508 11.684 297.434 11.621 297.383 11.496 cv
297.328 11.375 297.301 11.172 297.305 10.883 cv
297.301 10.734 297.309 10.605 297.324 10.504 cv
297.336 10.402 297.355 10.32 297.383 10.258 cv
297.406 10.199 297.438 10.156 297.48 10.129 cv
297.516 10.105 297.563 10.094 297.617 10.09 cv
298.441 10.09 li
298.441 8.539 li
298.438 8.492 298.453 8.44501 298.484 8.39801 cv
298.512 8.35901 298.563 8.32397 298.641 8.29303 cv
298.715 8.27002 298.816 8.24597 298.945 8.22998 cv
299.07 8.21899 299.227 8.21503 299.418 8.211 cv
299.605 8.21503 299.766 8.21899 299.895 8.22998 cv
300.02 8.24597 300.121 8.27002 300.195 8.29303 cv
300.266 8.32397 300.316 8.35901 300.352 8.39801 cv
300.379 8.44501 300.395 8.492 300.398 8.539 cv
300.398 10.09 li
301.91 10.09 li
301.961 10.094 302.008 10.105 302.047 10.129 cv
302.086 10.156 302.117 10.199 302.145 10.258 cv
302.168 10.32 302.188 10.402 302.203 10.504 cv
302.215 10.605 302.223 10.734 302.223 10.883 cv
302.223 11.172 302.195 11.375 302.145 11.496 cv
302.09 11.621 302.016 11.684 301.918 11.68 cv
300.398 11.68 li
300.398 14.945 li
300.395 15.324 300.453 15.609 300.578 15.797 cv
300.695 15.988 300.91 16.082 301.215 16.082 cv
301.316 16.082 301.41 16.074 301.496 16.055 cv
301.578 16.039 301.652 16.02 301.719 15.992 cv
301.781 15.973 301.836 15.949 301.883 15.93 cv
301.926 15.914 301.965 15.906 302.004 15.902 cv
302.031 15.906 302.063 15.914 302.094 15.93 cv
302.121 15.949 302.141 15.988 302.16 16.039 cv
302.172 16.098 302.188 16.172 302.203 16.262 cv
302.215 16.359 302.223 16.477 302.223 16.621 cv
cp
f
310.281 17.305 mo
310.277 17.359 310.262 17.402 310.234 17.441 cv
310.199 17.48 310.148 17.516 310.078 17.539 cv
310.004 17.566 309.902 17.582 309.777 17.598 cv
309.648 17.609 309.492 17.617 309.309 17.617 cv
309.113 17.617 308.953 17.609 308.828 17.598 cv
308.699 17.582 308.598 17.566 308.527 17.539 cv
308.449 17.516 308.398 17.48 308.371 17.441 cv
308.336 17.402 308.32 17.359 308.324 17.305 cv
308.324 13.34 li
308.32 13.004 308.297 12.738 308.25 12.543 cv
308.199 12.352 308.125 12.187 308.035 12.051 cv
307.941 11.914 307.824 11.809 307.676 11.73 cv
307.527 11.656 307.352 11.617 307.156 11.617 cv
306.902 11.617 306.652 11.711 306.398 11.891 cv
306.145 12.074 305.879 12.336 305.605 12.684 cv
305.605 17.305 li
305.602 17.359 305.586 17.402 305.559 17.441 cv
305.523 17.48 305.469 17.516 305.398 17.539 cv
305.32 17.566 305.223 17.582 305.098 17.598 cv
304.973 17.609 304.813 17.617 304.625 17.617 cv
304.43 17.617 304.273 17.609 304.148 17.598 cv
304.023 17.582 303.922 17.566 303.848 17.539 cv
303.77 17.516 303.715 17.48 303.688 17.441 cv
303.652 17.402 303.637 17.359 303.641 17.305 cv
303.641 7.05902 li
303.637 7.008 303.652 6.961 303.688 6.91803 cv
303.715 6.87903 303.77 6.84399 303.848 6.81201 cv
303.922 6.78497 304.023 6.76599 304.148 6.74597 cv
304.273 6.73401 304.43 6.72699 304.625 6.72302 cv
304.813 6.72699 304.973 6.73401 305.098 6.74597 cv
305.223 6.76599 305.32 6.78497 305.398 6.81201 cv
305.469 6.84399 305.523 6.87903 305.559 6.91803 cv
305.586 6.961 305.602 7.008 305.605 7.05902 cv
305.605 10.898 li
305.941 10.57 306.285 10.324 306.637 10.156 cv
306.984 9.99597 307.352 9.914 307.734 9.90997 cv
308.203 9.914 308.602 9.992 308.93 10.145 cv
309.254 10.305 309.516 10.516 309.715 10.785 cv
309.914 11.055 310.059 11.371 310.148 11.73 cv
310.234 12.094 310.277 12.531 310.281 13.043 cv
cp
f
321.645 8.328 mo
321.641 8.48798 321.637 8.617 321.625 8.72302 cv
321.609 8.83197 321.586 8.91803 321.563 8.97699 cv
321.531 9.039 321.5 9.086 321.465 9.11298 cv
321.426 9.14801 321.383 9.164 321.34 9.15997 cv
318.043 9.15997 li
318.043 11.875 li
321.137 11.875 li
321.18 11.875 321.223 11.891 321.262 11.914 cv
321.297 11.945 321.328 11.988 321.359 12.047 cv
321.387 12.109 321.406 12.191 321.422 12.293 cv
321.43 12.398 321.438 12.527 321.441 12.684 cv
321.438 12.84 321.43 12.973 321.422 13.074 cv
321.406 13.184 321.387 13.27 321.359 13.332 cv
321.328 13.402 321.297 13.449 321.262 13.477 cv
321.223 13.508 321.18 13.523 321.137 13.52 cv
318.043 13.52 li
318.043 17.273 li
318.039 17.332 318.023 17.383 317.996 17.422 cv
317.961 17.469 317.906 17.504 317.828 17.527 cv
317.746 17.559 317.641 17.578 317.512 17.594 cv
317.379 17.609 317.211 17.617 317.016 17.617 cv
316.813 17.617 316.648 17.609 316.52 17.594 cv
316.383 17.578 316.277 17.559 316.203 17.527 cv
316.121 17.504 316.066 17.469 316.035 17.422 cv
316 17.383 315.98 17.332 315.984 17.273 cv
315.984 8.133 li
315.98 7.90601 316.039 7.742 316.16 7.63702 cv
316.273 7.539 316.418 7.48798 316.594 7.48401 cv
321.34 7.48401 li
321.383 7.48798 321.426 7.5 321.465 7.52698 cv
321.5 7.55902 321.531 7.60498 321.563 7.66803 cv
321.586 7.73401 321.609 7.82397 321.625 7.92999 cv
321.637 8.04303 321.641 8.17603 321.645 8.328 cv
cp
f
329.984 13.758 mo
329.98 14.355 329.902 14.898 329.75 15.383 cv
329.59 15.875 329.355 16.293 329.039 16.645 cv
328.723 16.996 328.324 17.27 327.848 17.461 cv
327.367 17.652 326.809 17.746 326.172 17.75 cv
325.551 17.746 325.012 17.664 324.559 17.492 cv
324.098 17.324 323.719 17.074 323.422 16.746 cv
323.117 16.422 322.895 16.02 322.75 15.539 cv
322.605 15.062 322.535 14.516 322.535 13.898 cv
322.535 13.309 322.613 12.77 322.77 12.277 cv
322.926 11.789 323.164 11.367 323.484 11.016 cv
323.801 10.668 324.195 10.395 324.672 10.199 cv
325.145 10.008 325.703 9.914 326.344 9.90997 cv
326.969 9.914 327.508 9.99597 327.965 10.164 cv
328.422 10.336 328.801 10.586 329.098 10.91 cv
329.395 11.238 329.617 11.641 329.766 12.117 cv
329.91 12.598 329.98 13.145 329.984 13.758 cv
cp
327.965 13.836 mo
327.961 13.5 327.934 13.184 327.883 12.891 cv
327.824 12.605 327.73 12.355 327.605 12.141 cv
327.473 11.93 327.301 11.762 327.09 11.641 cv
326.871 11.523 326.602 11.465 326.273 11.461 cv
325.984 11.465 325.73 11.52 325.512 11.621 cv
325.293 11.73 325.113 11.887 324.973 12.09 cv
324.832 12.297 324.727 12.543 324.656 12.828 cv
324.586 13.121 324.551 13.449 324.551 13.812 cv
324.551 14.16 324.578 14.477 324.637 14.762 cv
324.691 15.055 324.785 15.305 324.914 15.516 cv
325.039 15.73 325.211 15.895 325.434 16.008 cv
325.648 16.129 325.918 16.187 326.242 16.184 cv
326.535 16.187 326.793 16.133 327.016 16.023 cv
327.23 15.918 327.41 15.766 327.551 15.559 cv
327.691 15.359 327.793 15.113 327.863 14.824 cv
327.926 14.539 327.961 14.211 327.965 13.836 cv
cp
f
338.168 17.305 mo
338.164 17.359 338.152 17.402 338.129 17.441 cv
338.102 17.48 338.055 17.516 337.992 17.539 cv
337.926 17.566 337.84 17.582 337.734 17.598 cv
337.629 17.609 337.496 17.617 337.336 17.617 cv
337.16 17.617 337.02 17.609 336.918 17.598 cv
336.809 17.582 336.727 17.566 336.664 17.539 cv
336.602 17.516 336.555 17.48 336.531 17.441 cv
336.5 17.402 336.488 17.359 336.492 17.305 cv
336.492 16.504 li
336.105 16.918 335.715 17.23 335.32 17.437 cv
334.918 17.645 334.508 17.746 334.086 17.75 cv
333.605 17.746 333.203 17.672 332.879 17.516 cv
332.555 17.363 332.293 17.148 332.094 16.879 cv
331.891 16.609 331.746 16.297 331.664 15.937 cv
331.574 15.582 331.531 15.141 331.535 14.609 cv
331.535 10.355 li
331.531 10.309 331.547 10.262 331.578 10.219 cv
331.605 10.184 331.656 10.152 331.734 10.121 cv
331.809 10.098 331.91 10.078 332.039 10.062 cv
332.164 10.055 332.32 10.047 332.512 10.043 cv
332.699 10.047 332.859 10.055 332.984 10.062 cv
333.109 10.078 333.207 10.098 333.285 10.121 cv
333.355 10.152 333.41 10.184 333.445 10.219 cv
333.473 10.262 333.488 10.309 333.492 10.355 cv
333.492 14.281 li
333.488 14.648 333.512 14.926 333.563 15.117 cv
333.605 15.309 333.676 15.473 333.777 15.609 cv
333.871 15.75 333.996 15.855 334.145 15.93 cv
334.293 16.008 334.465 16.047 334.66 16.043 cv
334.91 16.047 335.16 15.957 335.414 15.77 cv
335.664 15.59 335.934 15.324 336.219 14.977 cv
336.219 10.355 li
336.219 10.309 336.23 10.262 336.262 10.219 cv
336.285 10.184 336.34 10.152 336.418 10.121 cv
336.492 10.098 336.59 10.078 336.719 10.062 cv
336.84 10.055 337 10.047 337.195 10.043 cv
337.387 10.047 337.543 10.055 337.668 10.062 cv
337.789 10.078 337.891 10.098 337.965 10.121 cv
338.035 10.152 338.086 10.184 338.121 10.219 cv
338.148 10.262 338.164 10.309 338.168 10.355 cv
cp
f
344.563 11 mo
344.563 11.191 344.555 11.344 344.547 11.461 cv
344.531 11.582 344.516 11.676 344.5 11.742 cv
344.477 11.812 344.449 11.859 344.418 11.883 cv
344.379 11.91 344.336 11.922 344.289 11.922 cv
344.242 11.922 344.195 11.914 344.148 11.895 cv
344.094 11.879 344.035 11.859 343.973 11.836 cv
343.902 11.816 343.832 11.797 343.758 11.777 cv
343.676 11.762 343.59 11.754 343.5 11.75 cv
343.387 11.754 343.277 11.773 343.172 11.816 cv
343.063 11.863 342.949 11.934 342.836 12.023 cv
342.715 12.117 342.594 12.242 342.469 12.395 cv
342.34 12.555 342.203 12.746 342.059 12.973 cv
342.059 17.305 li
342.055 17.359 342.039 17.402 342.012 17.441 cv
341.977 17.48 341.922 17.516 341.852 17.539 cv
341.773 17.566 341.676 17.582 341.551 17.598 cv
341.426 17.609 341.266 17.617 341.078 17.617 cv
340.883 17.617 340.727 17.609 340.602 17.598 cv
340.477 17.582 340.375 17.566 340.301 17.539 cv
340.223 17.516 340.168 17.48 340.141 17.441 cv
340.105 17.402 340.09 17.359 340.094 17.305 cv
340.094 10.355 li
340.09 10.309 340.105 10.262 340.133 10.219 cv
340.156 10.184 340.203 10.152 340.273 10.121 cv
340.34 10.098 340.426 10.078 340.535 10.062 cv
340.641 10.055 340.773 10.047 340.938 10.043 cv
341.102 10.047 341.238 10.055 341.348 10.062 cv
341.453 10.078 341.539 10.098 341.602 10.121 cv
341.66 10.152 341.703 10.184 341.73 10.219 cv
341.754 10.262 341.766 10.309 341.77 10.355 cv
341.77 11.219 li
341.949 10.961 342.121 10.75 342.285 10.578 cv
342.441 10.414 342.598 10.277 342.746 10.176 cv
342.891 10.078 343.035 10.012 343.18 9.96899 cv
343.324 9.93402 343.469 9.914 343.617 9.90997 cv
343.684 9.914 343.758 9.91803 343.836 9.922 cv
343.914 9.93402 343.992 9.94501 344.078 9.961 cv
344.156 9.97998 344.23 10 344.297 10.023 cv
344.355 10.047 344.402 10.074 344.434 10.098 cv
344.461 10.129 344.48 10.156 344.496 10.184 cv
344.508 10.219 344.52 10.262 344.531 10.312 cv
344.539 10.371 344.547 10.453 344.555 10.559 cv
344.559 10.668 344.563 10.816 344.563 11 cv
cp
f
356.258 8.328 mo
356.254 8.48401 356.246 8.61298 356.238 8.71503 cv
356.223 8.82397 356.203 8.90997 356.18 8.97302 cv
356.148 9.039 356.117 9.086 356.082 9.11298 cv
356.039 9.14801 355.996 9.164 355.953 9.15997 cv
353.43 9.15997 li
353.43 17.289 li
353.43 17.344 353.41 17.391 353.379 17.43 cv
353.34 17.473 353.285 17.508 353.211 17.531 cv
353.129 17.559 353.023 17.578 352.895 17.594 cv
352.758 17.609 352.594 17.617 352.398 17.617 cv
352.203 17.617 352.039 17.609 351.906 17.594 cv
351.773 17.578 351.668 17.559 351.59 17.531 cv
351.512 17.508 351.453 17.473 351.422 17.43 cv
351.383 17.391 351.367 17.344 351.371 17.289 cv
351.371 9.15997 li
348.848 9.15997 li
348.793 9.164 348.746 9.14801 348.715 9.11298 cv
348.676 9.086 348.645 9.039 348.621 8.97302 cv
348.59 8.90997 348.57 8.82397 348.563 8.71503 cv
348.547 8.61298 348.543 8.48401 348.543 8.328 cv
348.543 8.17603 348.547 8.04303 348.563 7.92999 cv
348.57 7.82397 348.59 7.73401 348.621 7.66803 cv
348.645 7.60498 348.676 7.55902 348.715 7.52698 cv
348.746 7.5 348.793 7.48798 348.848 7.48401 cv
355.953 7.48401 li
355.996 7.48798 356.039 7.5 356.082 7.52698 cv
356.117 7.55902 356.148 7.60498 356.18 7.66803 cv
356.203 7.73401 356.223 7.82397 356.238 7.92999 cv
356.246 8.04303 356.254 8.17603 356.258 8.328 cv
cp
f
363.973 17.305 mo
363.969 17.359 363.953 17.402 363.926 17.441 cv
363.891 17.48 363.84 17.516 363.77 17.539 cv
363.695 17.566 363.594 17.582 363.469 17.598 cv
363.34 17.609 363.184 17.617 363 17.617 cv
362.805 17.617 362.645 17.609 362.52 17.598 cv
362.391 17.582 362.289 17.566 362.219 17.539 cv
362.141 17.516 362.09 17.48 362.063 17.441 cv
362.027 17.402 362.012 17.359 362.016 17.305 cv
362.016 13.34 li
362.012 13.004 361.988 12.738 361.941 12.543 cv
361.891 12.352 361.816 12.187 361.727 12.051 cv
361.633 11.914 361.516 11.809 361.367 11.73 cv
361.219 11.656 361.043 11.617 360.848 11.617 cv
360.594 11.617 360.344 11.711 360.09 11.891 cv
359.836 12.074 359.57 12.336 359.297 12.684 cv
359.297 17.305 li
359.293 17.359 359.277 17.402 359.25 17.441 cv
359.215 17.48 359.16 17.516 359.09 17.539 cv
359.012 17.566 358.914 17.582 358.789 17.598 cv
358.664 17.609 358.504 17.617 358.316 17.617 cv
358.121 17.617 357.965 17.609 357.84 17.598 cv
357.715 17.582 357.613 17.566 357.539 17.539 cv
357.461 17.516 357.406 17.48 357.379 17.441 cv
357.344 17.402 357.328 17.359 357.332 17.305 cv
357.332 7.05902 li
357.328 7.008 357.344 6.961 357.379 6.91803 cv
357.406 6.87903 357.461 6.84399 357.539 6.81201 cv
357.613 6.78497 357.715 6.76599 357.84 6.74597 cv
357.965 6.73401 358.121 6.72699 358.316 6.72302 cv
358.504 6.72699 358.664 6.73401 358.789 6.74597 cv
358.914 6.76599 359.012 6.78497 359.09 6.81201 cv
359.16 6.84399 359.215 6.87903 359.25 6.91803 cv
359.277 6.961 359.293 7.008 359.297 7.05902 cv
359.297 10.898 li
359.633 10.57 359.977 10.324 360.328 10.156 cv
360.676 9.99597 361.043 9.914 361.426 9.90997 cv
361.895 9.914 362.293 9.992 362.621 10.145 cv
362.945 10.305 363.207 10.516 363.406 10.785 cv
363.605 11.055 363.75 11.371 363.84 11.73 cv
363.926 12.094 363.969 12.531 363.973 13.043 cv
cp
f
370.371 11 mo
370.371 11.191 370.363 11.344 370.355 11.461 cv
370.34 11.582 370.324 11.676 370.309 11.742 cv
370.285 11.812 370.258 11.859 370.227 11.883 cv
370.188 11.91 370.145 11.922 370.098 11.922 cv
370.051 11.922 370.004 11.914 369.957 11.895 cv
369.902 11.879 369.844 11.859 369.781 11.836 cv
369.711 11.816 369.641 11.797 369.566 11.777 cv
369.484 11.762 369.398 11.754 369.309 11.75 cv
369.195 11.754 369.086 11.773 368.98 11.816 cv
368.871 11.863 368.758 11.934 368.645 12.023 cv
368.523 12.117 368.402 12.242 368.277 12.395 cv
368.148 12.555 368.012 12.746 367.867 12.973 cv
367.867 17.305 li
367.863 17.359 367.848 17.402 367.82 17.441 cv
367.785 17.48 367.73 17.516 367.66 17.539 cv
367.582 17.566 367.484 17.582 367.359 17.598 cv
367.234 17.609 367.074 17.617 366.887 17.617 cv
366.691 17.617 366.535 17.609 366.41 17.598 cv
366.285 17.582 366.184 17.566 366.109 17.539 cv
366.031 17.516 365.977 17.48 365.949 17.441 cv
365.914 17.402 365.898 17.359 365.902 17.305 cv
365.902 10.355 li
365.898 10.309 365.914 10.262 365.941 10.219 cv
365.965 10.184 366.012 10.152 366.082 10.121 cv
366.148 10.098 366.234 10.078 366.344 10.062 cv
366.449 10.055 366.582 10.047 366.746 10.043 cv
366.91 10.047 367.047 10.055 367.156 10.062 cv
367.262 10.078 367.348 10.098 367.41 10.121 cv
367.469 10.152 367.512 10.184 367.539 10.219 cv
367.563 10.262 367.574 10.309 367.578 10.355 cv
367.578 11.219 li
367.758 10.961 367.93 10.75 368.094 10.578 cv
368.25 10.414 368.406 10.277 368.555 10.176 cv
368.699 10.078 368.844 10.012 368.988 9.96899 cv
369.133 9.93402 369.277 9.914 369.426 9.90997 cv
369.492 9.914 369.566 9.91803 369.645 9.922 cv
369.723 9.93402 369.801 9.94501 369.887 9.961 cv
369.965 9.97998 370.039 10 370.105 10.023 cv
370.164 10.047 370.211 10.074 370.242 10.098 cv
370.27 10.129 370.289 10.156 370.305 10.184 cv
370.316 10.219 370.328 10.262 370.34 10.312 cv
370.348 10.371 370.355 10.453 370.363 10.559 cv
370.367 10.668 370.371 10.816 370.371 11 cv
cp
f
377.813 13.629 mo
377.809 13.867 377.758 14.043 377.652 14.156 cv
377.543 14.273 377.395 14.332 377.215 14.328 cv
372.98 14.328 li
372.977 14.629 373.012 14.898 373.086 15.137 cv
373.152 15.379 373.266 15.582 373.422 15.75 cv
373.574 15.922 373.77 16.051 374.012 16.137 cv
374.25 16.227 374.539 16.27 374.883 16.27 cv
375.223 16.27 375.523 16.246 375.785 16.195 cv
376.043 16.148 376.27 16.094 376.461 16.031 cv
376.648 15.973 376.805 15.918 376.934 15.867 cv
377.055 15.82 377.156 15.797 377.238 15.793 cv
377.281 15.797 377.32 15.805 377.355 15.82 cv
377.383 15.84 377.41 15.871 377.43 15.918 cv
377.449 15.965 377.461 16.031 377.473 16.117 cv
377.477 16.203 377.48 16.312 377.484 16.441 cv
377.48 16.559 377.48 16.656 377.477 16.734 cv
377.469 16.816 377.461 16.883 377.453 16.937 cv
377.441 16.996 377.426 17.047 377.406 17.082 cv
377.387 17.125 377.359 17.16 377.328 17.195 cv
377.293 17.234 377.199 17.285 377.051 17.344 cv
376.895 17.41 376.703 17.473 376.473 17.527 cv
376.234 17.59 375.965 17.637 375.668 17.684 cv
375.363 17.723 375.043 17.746 374.703 17.75 cv
374.082 17.746 373.539 17.672 373.078 17.516 cv
372.609 17.363 372.223 17.125 371.914 16.809 cv
371.598 16.492 371.363 16.094 371.215 15.609 cv
371.059 15.129 370.984 14.562 370.988 13.906 cv
370.984 13.293 371.063 12.734 371.227 12.238 cv
371.383 11.742 371.617 11.324 371.93 10.977 cv
372.234 10.633 372.609 10.367 373.047 10.184 cv
373.484 10.004 373.977 9.914 374.531 9.90997 cv
375.109 9.914 375.609 10 376.023 10.168 cv
376.438 10.344 376.773 10.582 377.039 10.883 cv
377.301 11.187 377.496 11.547 377.625 11.961 cv
377.746 12.379 377.809 12.828 377.813 13.316 cv
cp
375.91 13.066 mo
375.922 12.516 375.813 12.082 375.578 11.77 cv
375.344 11.457 374.977 11.301 374.484 11.297 cv
374.234 11.301 374.02 11.348 373.836 11.437 cv
373.648 11.535 373.496 11.66 373.375 11.816 cv
373.25 11.977 373.156 12.164 373.094 12.379 cv
373.027 12.594 372.988 12.824 372.98 13.066 cv
cp
f
385.348 17.328 mo
385.344 17.406 385.316 17.461 385.27 17.5 cv
385.215 17.543 385.133 17.57 385.023 17.59 cv
384.906 17.605 384.742 17.617 384.527 17.617 cv
384.289 17.617 384.117 17.605 384.016 17.59 cv
383.906 17.57 383.832 17.543 383.793 17.5 cv
383.746 17.461 383.727 17.406 383.727 17.328 cv
383.727 16.777 li
383.438 17.086 383.109 17.324 382.746 17.492 cv
382.379 17.664 381.973 17.746 381.527 17.75 cv
381.156 17.746 380.816 17.699 380.508 17.605 cv
380.199 17.512 379.934 17.371 379.707 17.176 cv
379.48 16.988 379.305 16.754 379.18 16.473 cv
379.055 16.195 378.992 15.867 378.996 15.488 cv
378.992 15.09 379.07 14.738 379.23 14.434 cv
379.387 14.137 379.625 13.891 379.941 13.695 cv
380.254 13.504 380.645 13.359 381.113 13.262 cv
381.582 13.172 382.125 13.125 382.742 13.121 cv
383.422 13.121 li
383.422 12.699 li
383.422 12.484 383.398 12.293 383.355 12.129 cv
383.309 11.969 383.234 11.832 383.137 11.719 cv
383.031 11.613 382.898 11.531 382.73 11.477 cv
382.559 11.426 382.348 11.402 382.105 11.398 cv
381.773 11.402 381.48 11.437 381.227 11.508 cv
380.965 11.582 380.738 11.664 380.543 11.75 cv
380.344 11.844 380.18 11.922 380.051 11.992 cv
379.914 12.066 379.805 12.105 379.727 12.102 cv
379.664 12.105 379.613 12.086 379.574 12.047 cv
379.527 12.012 379.492 11.961 379.465 11.891 cv
379.434 11.828 379.41 11.742 379.398 11.641 cv
379.379 11.543 379.371 11.434 379.375 11.312 cv
379.371 11.152 379.387 11.027 379.414 10.93 cv
379.438 10.84 379.484 10.754 379.563 10.676 cv
379.633 10.602 379.762 10.52 379.945 10.43 cv
380.125 10.34 380.336 10.254 380.582 10.176 cv
380.824 10.098 381.094 10.035 381.383 9.98401 cv
381.672 9.93701 381.969 9.914 382.277 9.90997 cv
382.82 9.914 383.285 9.96503 383.672 10.07 cv
384.059 10.18 384.379 10.344 384.629 10.562 cv
384.879 10.781 385.059 11.066 385.176 11.414 cv
385.285 11.766 385.344 12.18 385.348 12.652 cv
cp
383.422 14.352 mo
382.672 14.352 li
382.355 14.355 382.086 14.379 381.863 14.422 cv
381.637 14.473 381.453 14.543 381.316 14.633 cv
381.172 14.73 381.07 14.844 381.008 14.973 cv
380.941 15.109 380.906 15.258 380.91 15.426 cv
380.906 15.719 381 15.949 381.188 16.113 cv
381.371 16.281 381.629 16.363 381.957 16.363 cv
382.23 16.363 382.48 16.293 382.715 16.152 cv
382.941 16.012 383.18 15.809 383.422 15.535 cv
cp
f
393.93 17.305 mo
393.926 17.367 393.914 17.414 393.891 17.449 cv
393.863 17.492 393.816 17.523 393.758 17.547 cv
393.691 17.57 393.609 17.586 393.504 17.602 cv
393.398 17.609 393.266 17.617 393.113 17.617 cv
392.941 17.617 392.809 17.609 392.707 17.602 cv
392.602 17.586 392.516 17.57 392.453 17.547 cv
392.387 17.523 392.34 17.492 392.313 17.449 cv
392.281 17.414 392.266 17.367 392.27 17.305 cv
392.27 16.535 li
391.91 16.922 391.535 17.219 391.145 17.43 cv
390.746 17.641 390.313 17.746 389.84 17.75 cv
389.305 17.746 388.855 17.645 388.492 17.441 cv
388.125 17.238 387.828 16.965 387.598 16.613 cv
387.363 16.27 387.195 15.863 387.094 15.395 cv
386.992 14.934 386.941 14.441 386.941 13.922 cv
386.941 13.309 387.004 12.754 387.137 12.258 cv
387.266 11.766 387.461 11.344 387.719 10.996 cv
387.973 10.648 388.289 10.383 388.668 10.191 cv
389.047 10.008 389.484 9.914 389.98 9.90997 cv
390.367 9.914 390.719 9.992 391.039 10.148 cv
391.352 10.309 391.668 10.539 391.98 10.844 cv
391.98 7.08197 li
391.98 7.03101 391.992 6.98401 392.023 6.94098 cv
392.047 6.90198 392.102 6.867 392.18 6.836 cv
392.254 6.80902 392.352 6.789 392.48 6.77002 cv
392.602 6.758 392.762 6.75 392.957 6.74597 cv
393.148 6.75 393.305 6.758 393.43 6.77002 cv
393.551 6.789 393.652 6.80902 393.727 6.836 cv
393.797 6.867 393.848 6.90198 393.883 6.94098 cv
393.91 6.98401 393.926 7.03101 393.93 7.08197 cv
cp
391.98 12.66 mo
391.699 12.309 391.43 12.039 391.176 11.852 cv
390.914 11.664 390.645 11.57 390.367 11.57 cv
390.113 11.57 389.895 11.637 389.711 11.762 cv
389.523 11.895 389.375 12.062 389.266 12.273 cv
389.152 12.484 389.07 12.723 389.016 12.984 cv
388.961 13.25 388.934 13.52 388.934 13.789 cv
388.934 14.086 388.957 14.367 389.004 14.641 cv
389.051 14.918 389.125 15.164 389.234 15.379 cv
389.336 15.594 389.48 15.766 389.66 15.895 cv
389.836 16.027 390.059 16.094 390.328 16.09 cv
390.461 16.094 390.59 16.074 390.723 16.031 cv
390.848 15.996 390.98 15.934 391.113 15.84 cv
391.246 15.754 391.383 15.637 391.523 15.492 cv
391.664 15.352 391.816 15.176 391.98 14.969 cv
cp
f
400.754 15.34 mo
400.75 15.738 400.676 16.086 400.531 16.387 cv
400.383 16.687 400.176 16.941 399.906 17.141 cv
399.633 17.348 399.313 17.496 398.945 17.598 cv
398.578 17.695 398.176 17.746 397.746 17.75 cv
397.48 17.746 397.234 17.727 397 17.691 cv
396.766 17.648 396.555 17.602 396.367 17.543 cv
396.18 17.484 396.023 17.422 395.898 17.359 cv
395.773 17.297 395.68 17.238 395.625 17.184 cv
395.566 17.129 395.523 17.047 395.496 16.93 cv
395.461 16.816 395.445 16.641 395.449 16.41 cv
395.445 16.262 395.453 16.141 395.465 16.047 cv
395.473 15.957 395.488 15.887 395.512 15.828 cv
395.531 15.777 395.555 15.738 395.59 15.719 cv
395.617 15.703 395.656 15.695 395.703 15.691 cv
395.758 15.695 395.844 15.727 395.957 15.789 cv
396.066 15.855 396.203 15.93 396.375 16.004 cv
396.539 16.086 396.734 16.156 396.953 16.223 cv
397.172 16.293 397.422 16.328 397.707 16.324 cv
397.883 16.328 398.039 16.309 398.18 16.27 cv
398.313 16.234 398.434 16.184 398.539 16.113 cv
398.637 16.047 398.711 15.961 398.766 15.855 cv
398.813 15.754 398.84 15.633 398.844 15.496 cv
398.84 15.34 398.793 15.207 398.699 15.098 cv
398.605 14.988 398.477 14.891 398.32 14.805 cv
398.156 14.723 397.977 14.645 397.781 14.57 cv
397.578 14.5 397.375 14.422 397.164 14.328 cv
396.953 14.242 396.746 14.141 396.551 14.023 cv
396.348 13.914 396.168 13.773 396.012 13.605 cv
395.848 13.441 395.723 13.242 395.629 13.004 cv
395.535 12.773 395.488 12.492 395.488 12.16 cv
395.488 11.832 395.551 11.527 395.68 11.246 cv
395.809 10.973 395.996 10.734 396.242 10.535 cv
396.484 10.34 396.781 10.187 397.133 10.074 cv
397.48 9.96899 397.875 9.914 398.316 9.90997 cv
398.531 9.914 398.742 9.92999 398.949 9.95697 cv
399.152 9.992 399.34 10.031 399.508 10.074 cv
399.672 10.125 399.813 10.176 399.93 10.227 cv
400.043 10.285 400.125 10.332 400.176 10.367 cv
400.223 10.41 400.258 10.449 400.281 10.484 cv
400.301 10.527 400.313 10.574 400.324 10.625 cv
400.332 10.68 400.344 10.746 400.352 10.824 cv
400.359 10.91 400.363 11.008 400.363 11.125 cv
400.363 11.266 400.359 11.383 400.352 11.469 cv
400.344 11.562 400.328 11.633 400.313 11.68 cv
400.293 11.734 400.27 11.77 400.242 11.785 cv
400.207 11.809 400.172 11.816 400.133 11.812 cv
400.082 11.816 400.008 11.789 399.914 11.73 cv
399.813 11.68 399.691 11.621 399.543 11.555 cv
399.395 11.496 399.223 11.437 399.027 11.379 cv
398.832 11.328 398.609 11.301 398.363 11.297 cv
398.184 11.301 398.031 11.32 397.902 11.352 cv
397.77 11.391 397.66 11.441 397.582 11.508 cv
397.496 11.578 397.434 11.656 397.395 11.746 cv
397.348 11.84 397.328 11.937 397.332 12.039 cv
397.328 12.199 397.379 12.336 397.48 12.441 cv
397.578 12.555 397.707 12.648 397.871 12.73 cv
398.031 12.816 398.215 12.895 398.422 12.965 cv
398.625 13.039 398.832 13.121 399.043 13.203 cv
399.25 13.293 399.457 13.391 399.668 13.504 cv
399.871 13.617 400.055 13.758 400.215 13.922 cv
400.375 14.09 400.504 14.289 400.605 14.52 cv
400.699 14.754 400.75 15.027 400.754 15.34 cv
cp
f
409.496 13.652 mo
409.492 13.953 409.465 14.164 409.41 14.281 cv
409.352 14.406 409.262 14.465 409.137 14.461 cv
405.895 14.461 li
405.766 14.465 405.672 14.402 405.617 14.277 cv
405.555 14.156 405.527 13.949 405.531 13.652 cv
405.527 13.363 405.555 13.156 405.617 13.035 cv
405.672 12.918 405.766 12.859 405.895 12.855 cv
409.137 12.855 li
409.199 12.859 409.25 12.871 409.297 12.895 cv
409.336 12.922 409.375 12.969 409.41 13.027 cv
409.438 13.094 409.461 13.176 409.477 13.277 cv
409.488 13.383 409.492 13.508 409.496 13.652 cv
cp
f
422.168 17.305 mo
422.168 17.367 422.156 17.414 422.137 17.449 cv
422.117 17.492 422.07 17.523 421.992 17.547 cv
421.914 17.57 421.797 17.586 421.648 17.602 cv
421.492 17.609 421.289 17.617 421.031 17.617 cv
420.813 17.617 420.637 17.609 420.508 17.602 cv
420.379 17.586 420.277 17.57 420.203 17.543 cv
420.125 17.516 420.07 17.48 420.043 17.434 cv
420.008 17.395 419.984 17.34 419.965 17.273 cv
419.059 15.023 li
418.949 14.77 418.844 14.543 418.742 14.344 cv
418.633 14.148 418.52 13.984 418.395 13.852 cv
418.266 13.723 418.117 13.621 417.953 13.551 cv
417.785 13.484 417.594 13.453 417.379 13.449 cv
416.738 13.449 li
416.738 17.289 li
416.734 17.344 416.719 17.391 416.688 17.43 cv
416.652 17.473 416.598 17.508 416.52 17.531 cv
416.441 17.559 416.336 17.578 416.207 17.594 cv
416.074 17.609 415.91 17.617 415.711 17.617 cv
415.512 17.617 415.344 17.609 415.215 17.594 cv
415.078 17.578 414.973 17.559 414.898 17.531 cv
414.816 17.508 414.762 17.473 414.734 17.43 cv
414.699 17.391 414.684 17.344 414.688 17.289 cv
414.688 8.133 li
414.684 7.90601 414.742 7.742 414.863 7.63702 cv
414.977 7.539 415.121 7.48798 415.297 7.48401 cv
417.906 7.48401 li
418.168 7.48798 418.387 7.492 418.563 7.5 cv
418.73 7.51202 418.887 7.52301 419.031 7.539 cv
419.434 7.59802 419.797 7.69897 420.121 7.836 cv
420.445 7.97998 420.723 8.164 420.949 8.38702 cv
421.176 8.617 421.348 8.883 421.469 9.19098 cv
421.586 9.5 421.645 9.85498 421.648 10.254 cv
421.645 10.594 421.602 10.902 421.52 11.176 cv
421.43 11.457 421.305 11.703 421.141 11.922 cv
420.973 12.141 420.766 12.332 420.523 12.488 cv
420.277 12.652 420 12.781 419.691 12.879 cv
419.84 12.953 419.984 13.043 420.117 13.145 cv
420.25 13.254 420.371 13.379 420.488 13.523 cv
420.602 13.672 420.715 13.84 420.82 14.027 cv
420.922 14.219 421.023 14.434 421.125 14.672 cv
421.977 16.66 li
422.051 16.859 422.102 17 422.129 17.09 cv
422.152 17.184 422.168 17.258 422.168 17.305 cv
cp
419.527 10.465 mo
419.523 10.133 419.449 9.85199 419.301 9.62097 cv
419.148 9.39502 418.902 9.23401 418.563 9.13702 cv
418.457 9.11298 418.34 9.09003 418.207 9.07397 cv
418.074 9.05902 417.891 9.05103 417.656 9.05103 cv
416.738 9.05103 li
416.738 11.914 li
417.781 11.914 li
418.07 11.918 418.328 11.883 418.547 11.809 cv
418.766 11.742 418.945 11.641 419.09 11.512 cv
419.234 11.387 419.344 11.234 419.418 11.055 cv
419.488 10.879 419.523 10.684 419.527 10.465 cv
cp
f
429.754 13.629 mo
429.75 13.867 429.699 14.043 429.594 14.156 cv
429.484 14.273 429.336 14.332 429.156 14.328 cv
424.922 14.328 li
424.918 14.629 424.953 14.898 425.027 15.137 cv
425.094 15.379 425.207 15.582 425.363 15.75 cv
425.516 15.922 425.711 16.051 425.953 16.137 cv
426.191 16.227 426.48 16.27 426.824 16.27 cv
427.164 16.27 427.465 16.246 427.727 16.195 cv
427.984 16.148 428.211 16.094 428.402 16.031 cv
428.59 15.973 428.746 15.918 428.875 15.867 cv
428.996 15.82 429.098 15.797 429.18 15.793 cv
429.223 15.797 429.262 15.805 429.297 15.82 cv
429.324 15.84 429.352 15.871 429.371 15.918 cv
429.391 15.965 429.402 16.031 429.414 16.117 cv
429.418 16.203 429.422 16.312 429.426 16.441 cv
429.422 16.559 429.422 16.656 429.418 16.734 cv
429.41 16.816 429.402 16.883 429.395 16.937 cv
429.383 16.996 429.367 17.047 429.348 17.082 cv
429.328 17.125 429.301 17.16 429.27 17.195 cv
429.234 17.234 429.141 17.285 428.992 17.344 cv
428.836 17.41 428.645 17.473 428.414 17.527 cv
428.176 17.59 427.906 17.637 427.609 17.684 cv
427.305 17.723 426.984 17.746 426.645 17.75 cv
426.023 17.746 425.48 17.672 425.02 17.516 cv
424.551 17.363 424.164 17.125 423.855 16.809 cv
423.539 16.492 423.305 16.094 423.156 15.609 cv
423 15.129 422.926 14.562 422.93 13.906 cv
422.926 13.293 423.004 12.734 423.168 12.238 cv
423.324 11.742 423.559 11.324 423.871 10.977 cv
424.176 10.633 424.551 10.367 424.988 10.184 cv
425.426 10.004 425.918 9.914 426.473 9.90997 cv
427.051 9.914 427.551 10 427.965 10.168 cv
428.379 10.344 428.715 10.582 428.98 10.883 cv
429.242 11.187 429.438 11.547 429.566 11.961 cv
429.688 12.379 429.75 12.828 429.754 13.316 cv
cp
427.852 13.066 mo
427.863 12.516 427.754 12.082 427.52 11.77 cv
427.285 11.457 426.918 11.301 426.426 11.297 cv
426.176 11.301 425.961 11.348 425.777 11.437 cv
425.59 11.535 425.438 11.66 425.316 11.816 cv
425.191 11.977 425.098 12.164 425.035 12.379 cv
424.969 12.594 424.93 12.824 424.922 13.066 cv
cp
f
442.418 17.305 mo
442.414 17.359 442.398 17.402 442.371 17.441 cv
442.336 17.48 442.285 17.516 442.215 17.539 cv
442.141 17.566 442.039 17.582 441.918 17.598 cv
441.793 17.609 441.637 17.617 441.445 17.617 cv
441.246 17.617 441.086 17.609 440.961 17.598 cv
440.836 17.582 440.734 17.566 440.66 17.539 cv
440.582 17.516 440.531 17.48 440.504 17.441 cv
440.477 17.402 440.461 17.359 440.465 17.305 cv
440.465 13.184 li
440.461 12.953 440.441 12.738 440.398 12.543 cv
440.352 12.352 440.281 12.187 440.195 12.051 cv
440.102 11.914 439.988 11.809 439.852 11.73 cv
439.711 11.656 439.547 11.617 439.355 11.617 cv
439.121 11.617 438.883 11.711 438.645 11.891 cv
438.406 12.074 438.148 12.336 437.867 12.684 cv
437.867 17.305 li
437.867 17.359 437.852 17.402 437.82 17.441 cv
437.789 17.48 437.734 17.516 437.66 17.539 cv
437.582 17.566 437.48 17.582 437.359 17.598 cv
437.234 17.609 437.082 17.617 436.895 17.617 cv
436.699 17.617 436.539 17.609 436.418 17.598 cv
436.289 17.582 436.188 17.566 436.117 17.539 cv
436.039 17.516 435.988 17.48 435.957 17.441 cv
435.926 17.402 435.91 17.359 435.91 17.305 cv
435.91 13.184 li
435.91 12.953 435.887 12.738 435.844 12.543 cv
435.801 12.352 435.734 12.187 435.648 12.051 cv
435.555 11.914 435.441 11.809 435.305 11.73 cv
435.16 11.656 434.996 11.617 434.813 11.617 cv
434.57 11.617 434.332 11.711 434.094 11.891 cv
433.855 12.074 433.598 12.336 433.324 12.684 cv
433.324 17.305 li
433.32 17.359 433.305 17.402 433.277 17.441 cv
433.242 17.48 433.188 17.516 433.117 17.539 cv
433.039 17.566 432.941 17.582 432.816 17.598 cv
432.691 17.609 432.531 17.617 432.344 17.617 cv
432.148 17.617 431.992 17.609 431.867 17.598 cv
431.742 17.582 431.641 17.566 431.566 17.539 cv
431.488 17.516 431.434 17.48 431.406 17.441 cv
431.371 17.402 431.355 17.359 431.359 17.305 cv
431.359 10.355 li
431.355 10.309 431.371 10.262 431.398 10.219 cv
431.422 10.184 431.469 10.152 431.539 10.121 cv
431.605 10.098 431.691 10.078 431.801 10.062 cv
431.906 10.055 432.039 10.047 432.203 10.043 cv
432.367 10.047 432.504 10.055 432.613 10.062 cv
432.719 10.078 432.805 10.098 432.867 10.121 cv
432.926 10.152 432.969 10.184 432.996 10.219 cv
433.02 10.262 433.031 10.309 433.035 10.355 cv
433.035 11.156 li
433.418 10.746 433.801 10.434 434.184 10.223 cv
434.563 10.016 434.965 9.914 435.383 9.90997 cv
435.668 9.914 435.922 9.94098 436.152 10 cv
436.379 10.062 436.586 10.148 436.766 10.258 cv
436.945 10.371 437.098 10.508 437.227 10.66 cv
437.355 10.816 437.465 10.988 437.555 11.18 cv
437.762 10.957 437.965 10.766 438.168 10.605 cv
438.363 10.445 438.563 10.312 438.758 10.211 cv
438.953 10.109 439.148 10.035 439.344 9.98401 cv
439.539 9.93701 439.738 9.914 439.941 9.90997 cv
440.402 9.914 440.789 9.992 441.109 10.145 cv
441.422 10.305 441.68 10.516 441.875 10.781 cv
442.07 11.051 442.207 11.363 442.293 11.719 cv
442.371 12.078 442.414 12.457 442.418 12.855 cv
cp
f
451.367 13.758 mo
451.363 14.355 451.285 14.898 451.133 15.383 cv
450.973 15.875 450.738 16.293 450.422 16.645 cv
450.105 16.996 449.707 17.27 449.23 17.461 cv
448.75 17.652 448.191 17.746 447.555 17.75 cv
446.934 17.746 446.395 17.664 445.941 17.492 cv
445.48 17.324 445.102 17.074 444.805 16.746 cv
444.5 16.422 444.277 16.02 444.133 15.539 cv
443.988 15.062 443.918 14.516 443.918 13.898 cv
443.918 13.309 443.996 12.77 444.152 12.277 cv
444.309 11.789 444.547 11.367 444.867 11.016 cv
445.184 10.668 445.578 10.395 446.055 10.199 cv
446.527 10.008 447.086 9.914 447.727 9.90997 cv
448.352 9.914 448.891 9.99597 449.348 10.164 cv
449.805 10.336 450.184 10.586 450.48 10.91 cv
450.777 11.238 451 11.641 451.148 12.117 cv
451.293 12.598 451.363 13.145 451.367 13.758 cv
cp
449.348 13.836 mo
449.344 13.5 449.316 13.184 449.266 12.891 cv
449.207 12.605 449.113 12.355 448.988 12.141 cv
448.855 11.93 448.684 11.762 448.473 11.641 cv
448.254 11.523 447.984 11.465 447.656 11.461 cv
447.367 11.465 447.113 11.52 446.895 11.621 cv
446.676 11.73 446.496 11.887 446.355 12.09 cv
446.215 12.297 446.109 12.543 446.039 12.828 cv
445.969 13.121 445.934 13.449 445.934 13.812 cv
445.934 14.16 445.961 14.477 446.02 14.762 cv
446.074 15.055 446.168 15.305 446.297 15.516 cv
446.422 15.73 446.594 15.895 446.816 16.008 cv
447.031 16.129 447.301 16.187 447.625 16.184 cv
447.918 16.187 448.176 16.133 448.398 16.023 cv
448.613 15.918 448.793 15.766 448.934 15.559 cv
449.074 15.359 449.176 15.113 449.246 14.824 cv
449.309 14.539 449.344 14.211 449.348 13.836 cv
cp
f
457.07 16.621 mo
457.07 16.848 457.055 17.023 457.027 17.145 cv
456.996 17.27 456.957 17.355 456.914 17.402 cv
456.863 17.453 456.797 17.496 456.707 17.535 cv
456.613 17.574 456.504 17.605 456.387 17.637 cv
456.262 17.66 456.129 17.684 455.988 17.703 cv
455.844 17.715 455.703 17.723 455.559 17.727 cv
455.168 17.723 454.828 17.672 454.543 17.578 cv
454.258 17.477 454.023 17.328 453.836 17.121 cv
453.648 16.918 453.508 16.66 453.422 16.348 cv
453.328 16.039 453.285 15.668 453.289 15.238 cv
453.289 11.68 li
452.457 11.68 li
452.355 11.684 452.281 11.621 452.23 11.496 cv
452.176 11.375 452.148 11.172 452.152 10.883 cv
452.148 10.734 452.156 10.605 452.172 10.504 cv
452.184 10.402 452.203 10.32 452.23 10.258 cv
452.254 10.199 452.285 10.156 452.328 10.129 cv
452.363 10.105 452.41 10.094 452.465 10.09 cv
453.289 10.09 li
453.289 8.539 li
453.285 8.492 453.301 8.44501 453.332 8.39801 cv
453.359 8.35901 453.41 8.32397 453.488 8.29303 cv
453.563 8.27002 453.664 8.24597 453.793 8.22998 cv
453.918 8.21899 454.074 8.21503 454.266 8.211 cv
454.453 8.21503 454.613 8.21899 454.742 8.22998 cv
454.867 8.24597 454.969 8.27002 455.043 8.29303 cv
455.113 8.32397 455.164 8.35901 455.199 8.39801 cv
455.227 8.44501 455.242 8.492 455.246 8.539 cv
455.246 10.09 li
456.758 10.09 li
456.809 10.094 456.855 10.105 456.895 10.129 cv
456.934 10.156 456.965 10.199 456.992 10.258 cv
457.016 10.32 457.035 10.402 457.051 10.504 cv
457.063 10.605 457.07 10.734 457.07 10.883 cv
457.07 11.172 457.043 11.375 456.992 11.496 cv
456.938 11.621 456.863 11.684 456.766 11.68 cv
455.246 11.68 li
455.246 14.945 li
455.242 15.324 455.301 15.609 455.426 15.797 cv
455.543 15.988 455.758 16.082 456.063 16.082 cv
456.164 16.082 456.258 16.074 456.344 16.055 cv
456.426 16.039 456.5 16.02 456.566 15.992 cv
456.629 15.973 456.684 15.949 456.73 15.93 cv
456.773 15.914 456.813 15.906 456.852 15.902 cv
456.879 15.906 456.91 15.914 456.941 15.93 cv
456.969 15.949 456.988 15.988 457.008 16.039 cv
457.02 16.098 457.035 16.172 457.051 16.262 cv
457.063 16.359 457.07 16.477 457.07 16.621 cv
cp
f
464.66 13.629 mo
464.656 13.867 464.605 14.043 464.5 14.156 cv
464.391 14.273 464.242 14.332 464.063 14.328 cv
459.828 14.328 li
459.824 14.629 459.859 14.898 459.934 15.137 cv
460 15.379 460.113 15.582 460.27 15.75 cv
460.422 15.922 460.617 16.051 460.859 16.137 cv
461.098 16.227 461.387 16.27 461.73 16.27 cv
462.07 16.27 462.371 16.246 462.633 16.195 cv
462.891 16.148 463.117 16.094 463.309 16.031 cv
463.496 15.973 463.652 15.918 463.781 15.867 cv
463.902 15.82 464.004 15.797 464.086 15.793 cv
464.129 15.797 464.168 15.805 464.203 15.82 cv
464.23 15.84 464.258 15.871 464.277 15.918 cv
464.297 15.965 464.309 16.031 464.32 16.117 cv
464.324 16.203 464.328 16.312 464.332 16.441 cv
464.328 16.559 464.328 16.656 464.324 16.734 cv
464.316 16.816 464.309 16.883 464.301 16.937 cv
464.289 16.996 464.273 17.047 464.254 17.082 cv
464.234 17.125 464.207 17.16 464.176 17.195 cv
464.141 17.234 464.047 17.285 463.898 17.344 cv
463.742 17.41 463.551 17.473 463.32 17.527 cv
463.082 17.59 462.813 17.637 462.516 17.684 cv
462.211 17.723 461.891 17.746 461.551 17.75 cv
460.93 17.746 460.387 17.672 459.926 17.516 cv
459.457 17.363 459.07 17.125 458.762 16.809 cv
458.445 16.492 458.211 16.094 458.063 15.609 cv
457.906 15.129 457.832 14.562 457.836 13.906 cv
457.832 13.293 457.91 12.734 458.074 12.238 cv
458.23 11.742 458.465 11.324 458.777 10.977 cv
459.082 10.633 459.457 10.367 459.895 10.184 cv
460.332 10.004 460.824 9.914 461.379 9.90997 cv
461.957 9.914 462.457 10 462.871 10.168 cv
463.285 10.344 463.621 10.582 463.887 10.883 cv
464.148 11.187 464.344 11.547 464.473 11.961 cv
464.594 12.379 464.656 12.828 464.66 13.316 cv
cp
462.758 13.066 mo
462.77 12.516 462.66 12.082 462.426 11.77 cv
462.191 11.457 461.824 11.301 461.332 11.297 cv
461.082 11.301 460.867 11.348 460.684 11.437 cv
460.496 11.535 460.344 11.66 460.223 11.816 cv
460.098 11.977 460.004 12.164 459.941 12.379 cv
459.875 12.594 459.836 12.824 459.828 13.066 cv
cp
f
481.965 17.289 mo
481.961 17.344 481.949 17.391 481.922 17.43 cv
481.891 17.473 481.836 17.508 481.766 17.531 cv
481.688 17.559 481.59 17.578 481.465 17.594 cv
481.34 17.609 481.18 17.617 480.988 17.617 cv
480.801 17.617 480.645 17.609 480.523 17.594 cv
480.395 17.578 480.297 17.559 480.227 17.531 cv
480.152 17.508 480.102 17.473 480.07 17.43 cv
480.039 17.391 480.023 17.344 480.023 17.289 cv
480.023 9.08197 li
480.008 9.08197 li
477.086 17.281 li
477.063 17.352 477.027 17.406 476.984 17.449 cv
476.934 17.496 476.871 17.531 476.793 17.555 cv
476.711 17.582 476.609 17.598 476.484 17.605 cv
476.359 17.613 476.207 17.617 476.035 17.617 cv
475.855 17.617 475.707 17.609 475.582 17.598 cv
475.457 17.582 475.352 17.562 475.273 17.535 cv
475.188 17.508 475.125 17.473 475.082 17.43 cv
475.031 17.391 475 17.344 474.988 17.281 cv
472.168 9.08197 li
472.152 9.08197 li
472.152 17.289 li
472.148 17.344 472.133 17.391 472.109 17.43 cv
472.078 17.473 472.027 17.508 471.949 17.531 cv
471.871 17.559 471.77 17.578 471.648 17.594 cv
471.523 17.609 471.367 17.617 471.18 17.617 cv
470.988 17.617 470.832 17.609 470.711 17.594 cv
470.582 17.578 470.48 17.559 470.41 17.531 cv
470.332 17.508 470.281 17.473 470.254 17.43 cv
470.223 17.391 470.207 17.344 470.211 17.289 cv
470.211 8.30499 li
470.207 8.04303 470.277 7.84003 470.422 7.69501 cv
470.559 7.55902 470.746 7.48798 470.984 7.48401 cv
472.324 7.48401 li
472.563 7.48798 472.766 7.508 472.938 7.54303 cv
473.105 7.586 473.254 7.64801 473.383 7.73798 cv
473.504 7.83197 473.609 7.953 473.695 8.09802 cv
473.777 8.25 473.848 8.43402 473.914 8.64801 cv
476.098 14.656 li
476.129 14.656 li
478.387 8.664 li
478.453 8.44501 478.527 8.26202 478.609 8.10901 cv
478.688 7.961 478.781 7.84003 478.891 7.742 cv
478.996 7.65198 479.121 7.586 479.266 7.54303 cv
479.41 7.508 479.578 7.48798 479.773 7.48401 cv
481.152 7.48401 li
481.289 7.48798 481.41 7.50403 481.516 7.539 cv
481.613 7.578 481.695 7.633 481.766 7.69897 cv
481.828 7.77301 481.879 7.85901 481.914 7.95697 cv
481.945 8.06201 481.961 8.17999 481.965 8.30499 cv
cp
f
491.074 13.758 mo
491.07 14.355 490.992 14.898 490.84 15.383 cv
490.68 15.875 490.445 16.293 490.129 16.645 cv
489.813 16.996 489.414 17.27 488.938 17.461 cv
488.457 17.652 487.898 17.746 487.262 17.75 cv
486.641 17.746 486.102 17.664 485.648 17.492 cv
485.188 17.324 484.809 17.074 484.512 16.746 cv
484.207 16.422 483.984 16.02 483.84 15.539 cv
483.695 15.062 483.625 14.516 483.625 13.898 cv
483.625 13.309 483.703 12.77 483.859 12.277 cv
484.016 11.789 484.254 11.367 484.574 11.016 cv
484.891 10.668 485.285 10.395 485.762 10.199 cv
486.234 10.008 486.793 9.914 487.434 9.90997 cv
488.059 9.914 488.598 9.99597 489.055 10.164 cv
489.512 10.336 489.891 10.586 490.188 10.91 cv
490.484 11.238 490.707 11.641 490.855 12.117 cv
491 12.598 491.07 13.145 491.074 13.758 cv
cp
489.055 13.836 mo
489.051 13.5 489.023 13.184 488.973 12.891 cv
488.914 12.605 488.82 12.355 488.695 12.141 cv
488.563 11.93 488.391 11.762 488.18 11.641 cv
487.961 11.523 487.691 11.465 487.363 11.461 cv
487.074 11.465 486.82 11.52 486.602 11.621 cv
486.383 11.73 486.203 11.887 486.063 12.09 cv
485.922 12.297 485.816 12.543 485.746 12.828 cv
485.676 13.121 485.641 13.449 485.641 13.812 cv
485.641 14.16 485.668 14.477 485.727 14.762 cv
485.781 15.055 485.875 15.305 486.004 15.516 cv
486.129 15.73 486.301 15.895 486.523 16.008 cv
486.738 16.129 487.008 16.187 487.332 16.184 cv
487.625 16.187 487.883 16.133 488.105 16.023 cv
488.32 15.918 488.5 15.766 488.641 15.559 cv
488.781 15.359 488.883 15.113 488.953 14.824 cv
489.016 14.539 489.051 14.211 489.055 13.836 cv
cp
f
499.223 17.305 mo
499.219 17.367 499.207 17.414 499.184 17.449 cv
499.156 17.492 499.109 17.523 499.051 17.547 cv
498.984 17.57 498.902 17.586 498.797 17.602 cv
498.691 17.609 498.559 17.617 498.406 17.617 cv
498.234 17.617 498.102 17.609 498 17.602 cv
497.895 17.586 497.809 17.57 497.746 17.547 cv
497.68 17.523 497.633 17.492 497.605 17.449 cv
497.574 17.414 497.559 17.367 497.563 17.305 cv
497.563 16.535 li
497.203 16.922 496.828 17.219 496.438 17.43 cv
496.039 17.641 495.605 17.746 495.133 17.75 cv
494.598 17.746 494.148 17.645 493.785 17.441 cv
493.418 17.238 493.121 16.965 492.891 16.613 cv
492.656 16.27 492.488 15.863 492.387 15.395 cv
492.285 14.934 492.234 14.441 492.234 13.922 cv
492.234 13.309 492.297 12.754 492.43 12.258 cv
492.559 11.766 492.754 11.344 493.012 10.996 cv
493.266 10.648 493.582 10.383 493.961 10.191 cv
494.34 10.008 494.777 9.914 495.273 9.90997 cv
495.66 9.914 496.012 9.992 496.332 10.148 cv
496.645 10.309 496.961 10.539 497.273 10.844 cv
497.273 7.08197 li
497.273 7.03101 497.285 6.98401 497.316 6.94098 cv
497.34 6.90198 497.395 6.867 497.473 6.836 cv
497.547 6.80902 497.645 6.789 497.773 6.77002 cv
497.895 6.758 498.055 6.75 498.25 6.74597 cv
498.441 6.75 498.598 6.758 498.723 6.77002 cv
498.844 6.789 498.945 6.80902 499.02 6.836 cv
499.09 6.867 499.141 6.90198 499.176 6.94098 cv
499.203 6.98401 499.219 7.03101 499.223 7.08197 cv
cp
497.273 12.66 mo
496.992 12.309 496.723 12.039 496.469 11.852 cv
496.207 11.664 495.938 11.57 495.66 11.57 cv
495.406 11.57 495.188 11.637 495.004 11.762 cv
494.816 11.895 494.668 12.062 494.559 12.273 cv
494.445 12.484 494.363 12.723 494.309 12.984 cv
494.254 13.25 494.227 13.52 494.227 13.789 cv
494.227 14.086 494.25 14.367 494.297 14.641 cv
494.344 14.918 494.418 15.164 494.527 15.379 cv
494.629 15.594 494.773 15.766 494.953 15.895 cv
495.129 16.027 495.352 16.094 495.621 16.09 cv
495.754 16.094 495.883 16.074 496.016 16.031 cv
496.141 15.996 496.273 15.934 496.406 15.84 cv
496.539 15.754 496.676 15.637 496.816 15.492 cv
496.957 15.352 497.109 15.176 497.273 14.969 cv
cp
f
507.625 13.629 mo
507.621 13.867 507.57 14.043 507.465 14.156 cv
507.355 14.273 507.207 14.332 507.027 14.328 cv
502.793 14.328 li
502.789 14.629 502.824 14.898 502.898 15.137 cv
502.965 15.379 503.078 15.582 503.234 15.75 cv
503.387 15.922 503.582 16.051 503.824 16.137 cv
504.063 16.227 504.352 16.27 504.695 16.27 cv
505.035 16.27 505.336 16.246 505.598 16.195 cv
505.855 16.148 506.082 16.094 506.273 16.031 cv
506.461 15.973 506.617 15.918 506.746 15.867 cv
506.867 15.82 506.969 15.797 507.051 15.793 cv
507.094 15.797 507.133 15.805 507.168 15.82 cv
507.195 15.84 507.223 15.871 507.242 15.918 cv
507.262 15.965 507.273 16.031 507.285 16.117 cv
507.289 16.203 507.293 16.312 507.297 16.441 cv
507.293 16.559 507.293 16.656 507.289 16.734 cv
507.281 16.816 507.273 16.883 507.266 16.937 cv
507.254 16.996 507.238 17.047 507.219 17.082 cv
507.199 17.125 507.172 17.16 507.141 17.195 cv
507.105 17.234 507.012 17.285 506.863 17.344 cv
506.707 17.41 506.516 17.473 506.285 17.527 cv
506.047 17.59 505.777 17.637 505.48 17.684 cv
505.176 17.723 504.855 17.746 504.516 17.75 cv
503.895 17.746 503.352 17.672 502.891 17.516 cv
502.422 17.363 502.035 17.125 501.727 16.809 cv
501.41 16.492 501.176 16.094 501.027 15.609 cv
500.871 15.129 500.797 14.562 500.801 13.906 cv
500.797 13.293 500.875 12.734 501.039 12.238 cv
501.195 11.742 501.43 11.324 501.742 10.977 cv
502.047 10.633 502.422 10.367 502.859 10.184 cv
503.297 10.004 503.789 9.914 504.344 9.90997 cv
504.922 9.914 505.422 10 505.836 10.168 cv
506.25 10.344 506.586 10.582 506.852 10.883 cv
507.113 11.187 507.309 11.547 507.438 11.961 cv
507.559 12.379 507.621 12.828 507.625 13.316 cv
cp
505.723 13.066 mo
505.734 12.516 505.625 12.082 505.391 11.77 cv
505.156 11.457 504.789 11.301 504.297 11.297 cv
504.047 11.301 503.832 11.348 503.648 11.437 cv
503.461 11.535 503.309 11.66 503.188 11.816 cv
503.063 11.977 502.969 12.164 502.906 12.379 cv
502.84 12.594 502.801 12.824 502.793 13.066 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
