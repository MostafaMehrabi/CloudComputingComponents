%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-EightThreads.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:47:22 PM
%%BoundingBox: 0 0 689 559
%%HiResBoundingBox: 0 0 688.9201 558.6000
%%CropBox: 0 0 688.9201 558.6000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -558.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 558.6 li
688.92 558.6 li
688.92 0 li
cp
clp
gsave
0 558.6 mo
689 558.6 li
689 -.400024 li
0 -.400024 li
cp
clp
0 0 mo
688.922 0 li
688.922 558.602 li
0 558.602 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
37.68 502.199 mo
672.121 502.199 li
37.68 469.68 mo
672.121 469.68 li
37.68 437.039 mo
672.121 437.039 li
37.68 404.398 mo
672.121 404.398 li
37.68 371.879 mo
672.121 371.879 li
37.68 339.238 mo
672.121 339.238 li
37.68 306.602 mo
672.121 306.602 li
37.68 274.078 mo
672.121 274.078 li
37.68 241.441 mo
672.121 241.441 li
37.68 208.922 mo
672.121 208.922 li
37.68 176.281 mo
672.121 176.281 li
37.68 143.641 mo
672.121 143.641 li
37.68 111.121 mo
672.121 111.121 li
37.68 78.48 mo
672.121 78.48 li
37.68 45.84 mo
672.121 45.84 li
.140414 .108034 .108034 0 cmyk
@
37.68 486 mo
672.121 486 li
37.68 453.359 mo
672.121 453.359 li
37.68 420.719 mo
672.121 420.719 li
37.68 388.199 mo
672.121 388.199 li
37.68 355.559 mo
672.121 355.559 li
37.68 322.922 mo
672.121 322.922 li
37.68 290.398 mo
672.121 290.398 li
37.68 257.762 mo
672.121 257.762 li
37.68 225.121 mo
672.121 225.121 li
37.68 192.602 mo
672.121 192.602 li
37.68 159.961 mo
672.121 159.961 li
37.68 127.32 mo
672.121 127.32 li
37.68 94.801 mo
672.121 94.801 li
37.68 62.16 mo
672.121 62.16 li
37.68 29.52 mo
672.121 29.52 li
.328344 .284215 .278569 .000915541 cmyk
@
77.398 29.52 mo
77.398 518.52 li
156.719 29.52 mo
156.719 518.52 li
235.922 29.52 mo
235.922 518.52 li
315.238 29.52 mo
315.238 518.52 li
394.559 29.52 mo
394.559 518.52 li
473.879 29.52 mo
473.879 518.52 li
553.199 29.52 mo
553.199 518.52 li
632.398 29.52 mo
632.398 518.52 li
.178592 .148898 .143923 0 cmyk
@
37.68 29.52 mo
37.68 518.52 li
117 29.52 mo
117 518.52 li
196.32 29.52 mo
196.32 518.52 li
275.641 29.52 mo
275.641 518.52 li
354.961 29.52 mo
354.961 518.52 li
434.16 29.52 mo
434.16 518.52 li
513.48 29.52 mo
513.48 518.52 li
592.801 29.52 mo
592.801 518.52 li
672.121 29.52 mo
672.121 518.52 li
.328344 .284215 .278569 .000915541 cmyk
@
20.52 510.602 mo
26.641 510.602 li
26.641 525.239 li
20.52 525.239 li
cp
0 0 0 0 cmyk
ef
20.52 477.961 mo
26.641 477.961 li
26.641 492.602 li
20.52 492.602 li
cp
ef
20.52 445.32 mo
26.641 445.32 li
26.641 459.961 li
20.52 459.961 li
cp
ef
20.52 412.801 mo
26.641 412.801 li
26.641 427.442 li
20.52 427.442 li
cp
ef
20.52 380.16 mo
26.641 380.16 li
26.641 394.801 li
20.52 394.801 li
cp
ef
20.52 347.52 mo
26.641 347.52 li
26.641 362.161 li
20.52 362.161 li
cp
ef
20.52 315 mo
26.641 315 li
26.641 329.641 li
20.52 329.641 li
cp
ef
20.52 282.359 mo
26.641 282.359 li
26.641 297 li
20.52 297 li
cp
ef
20.52 249.719 mo
26.641 249.719 li
26.641 264.481 li
20.52 264.481 li
cp
ef
14.398 217.199 mo
26.64 217.199 li
26.64 231.84 li
14.398 231.84 li
cp
ef
14.398 184.559 mo
26.64 184.559 li
26.64 199.2 li
14.398 199.2 li
cp
ef
14.398 151.922 mo
26.64 151.922 li
26.64 166.68 li
14.398 166.68 li
cp
ef
14.398 119.398 mo
26.64 119.398 li
26.64 134.039 li
14.398 134.039 li
cp
ef
14.398 86.762 mo
26.64 86.762 li
26.64 101.399 li
14.398 101.399 li
cp
ef
14.398 54.121 mo
26.64 54.121 li
26.64 68.879 li
14.398 68.879 li
cp
ef
14.398 21.602 mo
26.64 21.602 li
26.64 36.239 li
14.398 36.239 li
cp
ef
.96 lw
37.68 518.52 mo
672.121 518.52 li
.367803 .29575 .300999 .00198367 cmyk
@
37.68 518.52 mo
37.68 522.359 li
117 518.52 mo
117 522.359 li
196.32 518.52 mo
196.32 522.359 li
275.641 518.52 mo
275.641 522.359 li
354.961 518.52 mo
354.961 522.359 li
434.16 518.52 mo
434.16 522.359 li
513.48 518.52 mo
513.48 522.359 li
592.801 518.52 mo
592.801 522.359 li
672.121 518.52 mo
672.121 522.359 li
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
1 lc
37.68 518.52 mo
117 487.32 li
196.32 427.32 li
275.641 409.801 li
354.961 318.961 li
434.16 291.359 li
513.48 261.359 li
592.801 228.84 li
672.121 193.441 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
42.672 523.578 mo
32.59 513.5 li
32.59 523.578 mo
42.672 513.5 li
.62768 .285466 0 0 cmyk
@
121.988 492.262 mo
111.91 482.18 li
111.91 492.262 mo
121.988 482.18 li
@
201.309 432.262 mo
191.23 422.18 li
191.23 432.262 mo
201.309 422.18 li
@
280.512 414.738 mo
270.43 404.66 li
270.43 414.738 mo
280.512 404.66 li
@
359.828 324.02 mo
349.75 313.941 li
349.75 324.02 mo
359.828 313.941 li
@
439.148 296.301 mo
429.07 286.219 li
429.07 296.301 mo
439.148 286.219 li
@
518.469 266.301 mo
508.391 256.219 li
508.391 266.301 mo
518.469 256.219 li
@
597.789 233.781 mo
587.711 223.699 li
587.711 233.781 mo
597.789 223.699 li
@
676.988 198.5 mo
666.91 188.422 li
666.91 198.5 mo
676.988 188.422 li
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
37.68 518.52 mo
117 486 li
196.32 420.719 li
275.641 356.281 li
354.961 301.801 li
434.16 226.32 li
513.48 166.922 li
592.801 99.961 li
672.121 36.84 li
@
grestore
32.59 513.5 mo
42.551 513.5 li
42.551 523.461 li
32.59 523.461 li
cp
@
111.91 480.98 mo
121.871 480.98 li
121.871 490.941 li
111.91 490.941 li
cp
@
191.23 415.578 mo
201.191 415.578 li
201.191 425.539 li
191.23 425.539 li
cp
@
270.43 351.262 mo
280.391 351.262 li
280.391 361.219 li
270.43 361.219 li
cp
@
349.75 296.66 mo
359.711 296.66 li
359.711 306.621 li
349.75 306.621 li
cp
@
429.07 221.301 mo
439.031 221.301 li
439.031 231.262 li
429.07 231.262 li
cp
@
508.391 161.781 mo
518.352 161.781 li
518.352 171.738 li
508.391 171.738 li
cp
@
587.711 94.82 mo
597.672 94.82 li
597.672 104.781 li
587.711 104.781 li
cp
@
666.91 31.8199 mo
676.871 31.8199 li
676.871 41.7809 li
666.91 41.7809 li
cp
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
37.68 518.52 mo
117 487.078 li
196.32 425.641 li
275.641 381.719 li
354.961 295.32 li
434.16 315.602 li
513.48 177.48 li
592.801 224.762 li
672.121 76.559 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
42.672 523.578 mo
32.59 513.5 li
32.59 523.578 mo
42.672 513.5 li
.0319219 .621851 .911223 .000427253 cmyk
@
121.988 492.02 mo
111.91 481.941 li
111.91 492.02 mo
121.988 481.941 li
@
201.309 430.578 mo
191.23 420.5 li
191.23 430.578 mo
201.309 420.5 li
@
280.512 386.66 mo
270.43 376.578 li
270.43 386.66 mo
280.512 376.578 li
@
359.828 300.262 mo
349.75 290.18 li
349.75 300.262 mo
359.828 290.18 li
@
439.148 320.539 mo
429.07 310.461 li
429.07 320.539 mo
439.148 310.461 li
@
518.469 182.539 mo
508.391 172.461 li
508.391 182.539 mo
518.469 172.461 li
@
597.789 229.82 mo
587.711 219.738 li
587.711 229.82 mo
597.789 219.738 li
@
676.988 81.5 mo
666.91 71.422 li
666.91 81.5 mo
676.988 71.422 li
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
37.68 518.52 mo
117 485.879 li
196.32 421.199 li
275.641 355.922 li
354.961 292.078 li
434.16 226.078 li
513.48 162.238 li
592.801 97.32 li
672.121 34.441 li
@
grestore
32.59 513.5 mo
42.551 513.5 li
42.551 523.461 li
32.59 523.461 li
cp
@
111.91 480.859 mo
121.871 480.859 li
121.871 490.82 li
111.91 490.82 li
cp
@
191.23 416.059 mo
201.191 416.059 li
201.191 426.02 li
191.23 426.02 li
cp
@
270.43 350.898 mo
280.391 350.898 li
280.391 360.859 li
270.43 360.859 li
cp
@
349.75 286.941 mo
359.711 286.941 li
359.711 296.898 li
349.75 296.898 li
cp
@
429.07 220.941 mo
439.031 220.941 li
439.031 230.898 li
429.07 230.898 li
cp
@
508.391 157.102 mo
518.352 157.102 li
518.352 167.059 li
508.391 167.059 li
cp
@
587.711 92.18 mo
597.672 92.18 li
597.672 102.141 li
587.711 102.141 li
cp
@
666.91 29.422 mo
676.871 29.422 li
676.871 39.379 li
666.91 39.379 li
cp
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
37.68 518.52 mo
117 486.961 li
196.32 424.801 li
275.641 397.32 li
354.961 317.641 li
434.16 274.68 li
513.48 252 li
592.801 133.441 li
672.121 119.16 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
42.672 523.578 mo
32.59 513.5 li
32.59 523.578 mo
42.672 513.5 li
.619135 .109529 .981689 .00570687 cmyk
@
121.988 492.02 mo
111.91 481.941 li
111.91 492.02 mo
121.988 481.941 li
@
201.309 429.859 mo
191.23 419.781 li
191.23 429.859 mo
201.309 419.781 li
@
280.512 402.379 mo
270.43 392.301 li
270.43 402.379 mo
280.512 392.301 li
@
359.828 322.699 mo
349.75 312.621 li
349.75 322.699 mo
359.828 312.621 li
@
439.148 279.738 mo
429.07 269.66 li
429.07 279.738 mo
439.148 269.66 li
@
518.469 256.941 mo
508.391 246.859 li
508.391 256.941 mo
518.469 246.859 li
@
597.789 138.5 mo
587.711 128.422 li
587.711 138.5 mo
597.789 128.422 li
@
676.988 124.102 mo
666.91 114.02 li
666.91 124.102 mo
676.988 114.02 li
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
37.68 518.52 mo
117 486 li
196.32 421.801 li
275.641 356.641 li
354.961 292.922 li
434.16 226.801 li
513.48 162.359 li
592.801 98.281 li
672.121 37.32 li
@
grestore
32.59 513.5 mo
42.551 513.5 li
42.551 523.461 li
32.59 523.461 li
cp
@
111.91 480.98 mo
121.871 480.98 li
121.871 490.941 li
111.91 490.941 li
cp
@
191.23 416.781 mo
201.191 416.781 li
201.191 426.738 li
191.23 426.738 li
cp
@
270.43 351.5 mo
280.391 351.5 li
280.391 361.461 li
270.43 361.461 li
cp
@
349.75 287.898 mo
359.711 287.898 li
359.711 297.859 li
349.75 297.859 li
cp
@
429.07 221.66 mo
439.031 221.66 li
439.031 231.621 li
429.07 231.621 li
cp
@
508.391 157.219 mo
518.352 157.219 li
518.352 167.18 li
508.391 167.18 li
cp
@
587.711 93.141 mo
597.672 93.141 li
597.672 103.102 li
587.711 103.102 li
cp
@
666.91 32.301 mo
676.871 32.301 li
676.871 42.262 li
666.91 42.262 li
cp
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
37.68 518.52 mo
117 486.961 li
196.32 425.16 li
275.641 397.68 li
354.961 297.121 li
434.16 274.68 li
513.48 175.199 li
592.801 258.961 li
672.121 82.199 li
0 .990631 1 .000396735 cmyk
@
grestore
42.672 523.578 mo
32.59 513.5 li
32.59 523.578 mo
42.672 513.5 li
0 .990631 1 .000396735 cmyk
@
121.988 491.898 mo
111.91 481.82 li
111.91 491.898 mo
121.988 481.82 li
@
201.309 430.102 mo
191.23 420.02 li
191.23 430.102 mo
201.309 420.02 li
@
280.512 402.621 mo
270.43 392.539 li
270.43 402.621 mo
280.512 392.539 li
@
359.828 302.18 mo
349.75 292.102 li
349.75 302.18 mo
359.828 292.102 li
@
439.148 279.621 mo
429.07 269.539 li
429.07 279.621 mo
439.148 269.539 li
@
518.469 180.141 mo
508.391 170.059 li
508.391 180.141 mo
518.469 170.059 li
@
597.789 264.02 mo
587.711 253.941 li
587.711 264.02 mo
597.789 253.941 li
@
676.988 87.262 mo
666.91 77.18 li
666.91 87.262 mo
676.988 77.18 li
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
37.68 518.52 mo
117 486.121 li
196.32 421.559 li
275.641 356.879 li
354.961 292.32 li
434.16 229.32 li
513.48 163.68 li
592.801 100.078 li
672.121 35.16 li
@
grestore
32.59 513.5 mo
42.551 513.5 li
42.551 523.461 li
32.59 523.461 li
cp
@
111.91 481.102 mo
121.871 481.102 li
121.871 491.059 li
111.91 491.059 li
cp
@
191.23 416.422 mo
201.191 416.422 li
201.191 426.379 li
191.23 426.379 li
cp
@
270.43 351.859 mo
280.391 351.859 li
280.391 361.82 li
270.43 361.82 li
cp
@
349.75 287.301 mo
359.711 287.301 li
359.711 297.262 li
349.75 297.262 li
cp
@
429.07 224.18 mo
439.031 224.18 li
439.031 234.141 li
429.07 234.141 li
cp
@
508.391 158.539 mo
518.352 158.539 li
518.352 168.5 li
508.391 168.5 li
cp
@
587.711 95.059 mo
597.672 95.059 li
597.672 105.02 li
587.711 105.02 li
cp
@
666.91 30.141 mo
676.871 30.141 li
676.871 40.102 li
666.91 40.102 li
cp
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.68 518.52 mo
117 486.84 li
196.32 424.801 li
275.641 385.801 li
354.961 332.52 li
434.16 340.441 li
513.48 264.719 li
592.801 210.359 li
672.121 195.359 li
.62768 .285466 0 0 cmyk
@
grestore
42.672 523.578 mo
32.59 513.5 li
32.59 523.578 mo
42.672 513.5 li
.62768 .285466 0 0 cmyk
@
121.988 491.898 mo
111.91 481.82 li
111.91 491.898 mo
121.988 481.82 li
@
201.309 429.738 mo
191.23 419.66 li
191.23 429.738 mo
201.309 419.66 li
@
280.512 390.738 mo
270.43 380.66 li
270.43 390.738 mo
280.512 380.66 li
@
359.828 337.461 mo
349.75 327.379 li
349.75 337.461 mo
359.828 327.379 li
@
439.148 345.379 mo
429.07 335.301 li
429.07 345.379 mo
439.148 335.301 li
@
518.469 269.781 mo
508.391 259.699 li
508.391 269.781 mo
518.469 259.699 li
@
597.789 215.422 mo
587.711 205.34 li
587.711 215.422 mo
597.789 205.34 li
@
676.988 200.422 mo
666.91 190.34 li
666.91 200.422 mo
676.988 190.34 li
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.68 518.52 mo
117 485.16 li
196.32 431.039 li
275.641 378.84 li
354.961 320.281 li
434.16 260.52 li
513.48 203.16 li
592.801 144.48 li
672.121 86.762 li
@
grestore
32.59 513.5 mo
42.551 513.5 li
42.551 523.461 li
32.59 523.461 li
cp
@
111.91 480.141 mo
121.871 480.141 li
121.871 490.102 li
111.91 490.102 li
cp
@
191.23 426.02 mo
201.191 426.02 li
201.191 435.981 li
191.23 435.981 li
cp
@
270.43 373.699 mo
280.391 373.699 li
280.391 383.66 li
270.43 383.66 li
cp
@
349.75 315.262 mo
359.711 315.262 li
359.711 325.219 li
349.75 325.219 li
cp
@
429.07 255.5 mo
439.031 255.5 li
439.031 265.461 li
429.07 265.461 li
cp
@
508.391 198.141 mo
518.352 198.141 li
518.352 208.102 li
508.391 208.102 li
cp
@
587.711 139.461 mo
597.672 139.461 li
597.672 149.422 li
587.711 149.422 li
cp
@
666.91 81.621 mo
676.871 81.621 li
676.871 91.578 li
666.91 91.578 li
cp
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.68 518.52 mo
117 486.961 li
196.32 425.281 li
275.641 385.559 li
354.961 336.84 li
434.16 330.359 li
513.48 277.441 li
592.801 170.762 li
672.121 180.48 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
42.672 523.578 mo
32.59 513.5 li
32.59 523.578 mo
42.672 513.5 li
.0319219 .621851 .911223 .000427253 cmyk
@
121.988 492.02 mo
111.91 481.941 li
111.91 492.02 mo
121.988 481.941 li
@
201.309 430.34 mo
191.23 420.262 li
191.23 430.34 mo
201.309 420.262 li
@
280.512 390.5 mo
270.43 380.422 li
270.43 390.5 mo
280.512 380.422 li
@
359.828 341.898 mo
349.75 331.82 li
349.75 341.898 mo
359.828 331.82 li
@
439.148 335.422 mo
429.07 325.34 li
429.07 335.422 mo
439.148 325.34 li
@
518.469 282.5 mo
508.391 272.422 li
508.391 282.5 mo
518.469 272.422 li
@
597.789 175.699 mo
587.711 165.621 li
587.711 175.699 mo
597.789 165.621 li
@
676.988 185.422 mo
666.91 175.34 li
666.91 185.422 mo
676.988 175.34 li
@
gsave
37.68 29.52 mo
672.719 29.52 li
672.719 519.239 li
37.68 519.239 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
37.68 518.52 mo
117 486 li
196.32 421.441 li
275.641 356.281 li
354.961 292.441 li
434.16 225.961 li
513.48 165.238 li
592.801 97.801 li
672.121 37.32 li
@
grestore
32.59 513.5 mo
42.551 513.5 li
42.551 523.461 li
32.59 523.461 li
cp
@
111.91 480.859 mo
121.871 480.859 li
121.871 490.82 li
111.91 490.82 li
cp
@
191.23 416.301 mo
201.191 416.301 li
201.191 426.262 li
191.23 426.262 li
cp
@
270.43 351.262 mo
280.391 351.262 li
280.391 361.219 li
270.43 361.219 li
cp
@
349.75 287.422 mo
359.711 287.422 li
359.711 297.379 li
349.75 297.379 li
cp
@
429.07 220.941 mo
439.031 220.941 li
439.031 230.898 li
429.07 230.898 li
cp
@
508.391 160.219 mo
518.352 160.219 li
518.352 170.18 li
508.391 170.18 li
cp
@
587.711 92.781 mo
597.672 92.781 li
597.672 102.738 li
587.711 102.738 li
cp
@
666.91 32.18 mo
676.871 32.18 li
676.871 42.141 li
666.91 42.141 li
cp
@
20.473 510.578 mo
26.555 510.578 li
26.555 525.23 li
20.473 525.23 li
cp
0 0 0 0 cmyk
ef
25.926 521.672 mo
25.922 521.746 25.918 521.809 25.91 521.859 cv
25.898 521.914 25.883 521.957 25.863 521.984 cv
25.84 522.02 25.816 522.043 25.793 522.051 cv
25.77 522.066 25.742 522.07 25.715 522.07 cv
21.754 522.07 li
21.727 522.07 21.703 522.066 21.68 522.051 cv
21.656 522.043 21.633 522.02 21.613 521.984 cv
21.59 521.957 21.574 521.914 21.563 521.859 cv
21.547 521.809 21.539 521.746 21.543 521.672 cv
21.539 521.602 21.547 521.543 21.563 521.492 cv
21.574 521.441 21.586 521.398 21.605 521.363 cv
21.621 521.332 21.645 521.309 21.668 521.289 cv
21.691 521.273 21.719 521.262 21.754 521.262 cv
23.34 521.262 li
23.34 515.496 li
21.871 516.367 li
21.797 516.414 21.738 516.437 21.695 516.441 cv
21.648 516.453 21.613 516.445 21.586 516.414 cv
21.555 516.391 21.535 516.348 21.527 516.289 cv
21.52 516.23 21.516 516.156 21.516 516.062 cv
21.516 516 21.516 515.941 21.523 515.895 cv
21.527 515.848 21.539 515.809 21.551 515.777 cv
21.559 515.746 21.574 515.719 21.598 515.695 cv
21.621 515.672 21.648 515.648 21.684 515.625 cv
23.434 514.508 li
23.445 514.496 23.465 514.484 23.492 514.477 cv
23.512 514.469 23.543 514.461 23.578 514.453 cv
23.609 514.445 23.648 514.441 23.699 514.441 cv
23.742 514.441 23.801 514.441 23.879 514.437 cv
23.969 514.441 24.047 514.445 24.113 514.449 cv
24.172 514.461 24.223 514.473 24.258 514.48 cv
24.289 514.496 24.313 514.512 24.328 514.531 cv
24.34 514.555 24.344 514.578 24.348 514.602 cv
24.348 521.262 li
25.715 521.262 li
25.742 521.262 25.773 521.273 25.805 521.289 cv
25.832 521.309 25.852 521.332 25.871 521.363 cv
25.887 521.398 25.902 521.441 25.91 521.492 cv
25.918 521.543 25.922 521.602 25.926 521.672 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.473 477.98 mo
26.555 477.98 li
26.555 492.632 li
20.473 492.632 li
cp
0 0 0 0 cmyk
ef
25.91 489.047 mo
25.91 489.117 25.902 489.18 25.895 489.234 cv
25.879 489.289 25.867 489.336 25.852 489.371 cv
25.836 489.41 25.813 489.437 25.781 489.453 cv
25.75 489.473 25.719 489.48 25.688 489.48 cv
21.496 489.48 li
21.441 489.48 21.395 489.477 21.355 489.461 cv
21.313 489.453 21.277 489.43 21.25 489.395 cv
21.219 489.367 21.195 489.32 21.184 489.258 cv
21.168 489.199 21.164 489.129 21.164 489.043 cv
21.164 488.969 21.164 488.898 21.172 488.836 cv
21.176 488.777 21.191 488.727 21.211 488.68 cv
21.23 488.637 21.254 488.594 21.285 488.547 cv
21.313 488.508 21.352 488.457 21.406 488.402 cv
22.922 486.844 li
23.27 486.484 23.547 486.164 23.762 485.879 cv
23.973 485.594 24.137 485.332 24.254 485.098 cv
24.363 484.863 24.441 484.652 24.48 484.461 cv
24.516 484.27 24.531 484.09 24.535 483.918 cv
24.531 483.754 24.504 483.594 24.449 483.441 cv
24.391 483.293 24.309 483.16 24.203 483.047 cv
24.094 482.937 23.961 482.848 23.801 482.777 cv
23.637 482.711 23.449 482.68 23.246 482.676 cv
22.996 482.68 22.777 482.711 22.582 482.777 cv
22.387 482.848 22.215 482.922 22.066 482.996 cv
21.918 483.078 21.793 483.148 21.699 483.211 cv
21.598 483.277 21.527 483.312 21.48 483.309 cv
21.449 483.312 21.422 483.305 21.402 483.285 cv
21.379 483.273 21.359 483.246 21.348 483.211 cv
21.332 483.18 21.324 483.133 21.316 483.07 cv
21.309 483.012 21.305 482.941 21.305 482.859 cv
21.305 482.801 21.305 482.75 21.309 482.707 cv
21.313 482.668 21.32 482.633 21.332 482.598 cv
21.34 482.57 21.352 482.539 21.371 482.508 cv
21.383 482.48 21.414 482.449 21.465 482.406 cv
21.508 482.367 21.59 482.309 21.707 482.238 cv
21.82 482.168 21.965 482.102 22.141 482.031 cv
22.313 481.965 22.504 481.906 22.715 481.855 cv
22.922 481.812 23.141 481.789 23.371 481.785 cv
23.738 481.789 24.059 481.84 24.336 481.941 cv
24.609 482.047 24.84 482.187 25.02 482.367 cv
25.199 482.547 25.336 482.758 25.43 482.996 cv
25.52 483.234 25.563 483.488 25.566 483.754 cv
25.563 484.004 25.543 484.246 25.5 484.48 cv
25.453 484.723 25.359 484.98 25.227 485.258 cv
25.086 485.539 24.887 485.852 24.625 486.191 cv
24.363 486.535 24.016 486.926 23.582 487.371 cv
22.383 488.625 li
25.684 488.625 li
25.711 488.625 25.742 488.637 25.773 488.652 cv
25.801 488.672 25.824 488.695 25.848 488.73 cv
25.863 488.77 25.879 488.816 25.895 488.863 cv
25.902 488.918 25.91 488.977 25.91 489.047 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.473 445.379 mo
26.555 445.379 li
26.555 460.031 li
20.473 460.031 li
cp
0 0 0 0 cmyk
ef
25.852 454.691 mo
25.852 455.039 25.789 455.355 25.668 455.633 cv
25.547 455.914 25.375 456.152 25.148 456.352 cv
24.922 456.551 24.641 456.703 24.309 456.809 cv
23.977 456.914 23.602 456.965 23.184 456.969 cv
22.93 456.965 22.691 456.945 22.473 456.906 cv
22.25 456.867 22.055 456.82 21.887 456.766 cv
21.711 456.711 21.57 456.652 21.457 456.59 cv
21.34 456.527 21.266 456.484 21.242 456.457 cv
21.211 456.43 21.191 456.402 21.176 456.375 cv
21.16 456.348 21.145 456.312 21.133 456.273 cv
21.121 456.234 21.113 456.187 21.105 456.133 cv
21.098 456.078 21.094 456.008 21.098 455.922 cv
21.094 455.781 21.109 455.684 21.141 455.629 cv
21.168 455.574 21.207 455.547 21.262 455.547 cv
21.297 455.547 21.367 455.578 21.473 455.641 cv
21.578 455.703 21.715 455.773 21.883 455.844 cv
22.047 455.922 22.242 455.988 22.465 456.047 cv
22.688 456.113 22.934 456.145 23.211 456.141 cv
23.469 456.145 23.703 456.109 23.906 456.039 cv
24.105 455.973 24.273 455.879 24.41 455.758 cv
24.547 455.641 24.648 455.5 24.719 455.328 cv
24.785 455.164 24.82 454.98 24.82 454.785 cv
24.82 454.57 24.773 454.379 24.688 454.203 cv
24.598 454.035 24.473 453.887 24.309 453.758 cv
24.141 453.637 23.934 453.539 23.691 453.473 cv
23.441 453.41 23.164 453.379 22.859 453.375 cv
22.117 453.375 li
22.082 453.379 22.051 453.371 22.02 453.355 cv
21.988 453.34 21.961 453.316 21.941 453.285 cv
21.918 453.254 21.898 453.215 21.887 453.164 cv
21.871 453.113 21.867 453.047 21.867 452.961 cv
21.867 452.891 21.871 452.828 21.883 452.777 cv
21.895 452.73 21.91 452.691 21.934 452.66 cv
21.949 452.633 21.977 452.613 22.008 452.598 cv
22.035 452.59 22.066 452.582 22.102 452.578 cv
22.762 452.578 li
23.02 452.582 23.25 452.547 23.457 452.477 cv
23.66 452.41 23.836 452.316 23.977 452.187 cv
24.117 452.066 24.227 451.918 24.305 451.742 cv
24.383 451.57 24.422 451.375 24.422 451.156 cv
24.422 451.004 24.395 450.855 24.344 450.711 cv
24.293 450.57 24.219 450.445 24.117 450.34 cv
24.016 450.234 23.883 450.152 23.727 450.09 cv
23.563 450.035 23.383 450.004 23.18 450 cv
22.953 450.004 22.742 450.039 22.555 450.102 cv
22.359 450.172 22.191 450.242 22.047 450.32 cv
21.895 450.398 21.773 450.473 21.68 450.539 cv
21.582 450.609 21.512 450.645 21.473 450.641 cv
21.445 450.645 21.422 450.641 21.402 450.629 cv
21.379 450.621 21.359 450.602 21.348 450.57 cv
21.332 450.543 21.324 450.5 21.316 450.445 cv
21.309 450.395 21.305 450.324 21.309 450.238 cv
21.305 450.18 21.309 450.129 21.316 450.082 cv
21.32 450.039 21.328 450 21.34 449.965 cv
21.348 449.934 21.359 449.902 21.379 449.875 cv
21.391 449.852 21.418 449.82 21.457 449.781 cv
21.496 449.742 21.57 449.687 21.684 449.617 cv
21.797 449.547 21.938 449.48 22.105 449.41 cv
22.27 449.344 22.461 449.285 22.68 449.234 cv
22.895 449.191 23.129 449.168 23.379 449.164 cv
23.73 449.168 24.039 449.211 24.305 449.301 cv
24.57 449.395 24.789 449.523 24.969 449.684 cv
25.145 449.852 25.277 450.047 25.367 450.273 cv
25.453 450.5 25.5 450.754 25.5 451.031 cv
25.5 451.27 25.469 451.492 25.406 451.695 cv
25.344 451.902 25.25 452.082 25.129 452.238 cv
25.008 452.398 24.859 452.535 24.684 452.645 cv
24.508 452.762 24.305 452.836 24.074 452.875 cv
24.074 452.887 li
24.336 452.918 24.574 452.984 24.793 453.086 cv
25.008 453.187 25.195 453.316 25.355 453.473 cv
25.508 453.629 25.629 453.812 25.719 454.023 cv
25.805 454.234 25.852 454.457 25.852 454.691 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.473 412.781 mo
26.555 412.781 li
26.555 427.429 li
20.473 427.429 li
cp
0 0 0 0 cmyk
ef
26.23 422.113 mo
26.227 422.246 26.207 422.348 26.172 422.418 cv
26.129 422.492 26.074 422.531 26.012 422.527 cv
25.152 422.527 li
25.152 424.121 li
25.148 424.156 25.141 424.184 25.129 424.203 cv
25.109 424.227 25.082 424.242 25.043 424.258 cv
25.004 424.273 24.949 424.285 24.887 424.293 cv
24.82 424.301 24.738 424.305 24.641 424.305 cv
24.539 424.305 24.461 424.301 24.398 424.293 cv
24.336 424.285 24.285 424.273 24.246 424.258 cv
24.207 424.242 24.18 424.227 24.164 424.203 cv
24.148 424.184 24.141 424.156 24.145 424.121 cv
24.145 422.527 li
21.043 422.527 li
20.996 422.531 20.961 422.523 20.93 422.512 cv
20.898 422.504 20.867 422.484 20.844 422.449 cv
20.813 422.422 20.797 422.375 20.789 422.312 cv
20.781 422.254 20.777 422.18 20.777 422.082 cv
20.777 422.012 20.777 421.945 20.781 421.887 cv
20.785 421.828 20.793 421.773 20.805 421.727 cv
20.816 421.68 20.832 421.633 20.852 421.586 cv
20.871 421.539 20.895 421.492 20.922 421.441 cv
23.625 416.832 li
23.645 416.805 23.672 416.777 23.711 416.75 cv
23.746 416.73 23.797 416.711 23.859 416.691 cv
23.918 416.68 23.988 416.668 24.078 416.66 cv
24.164 416.656 24.27 416.652 24.391 416.652 cv
24.52 416.652 24.633 416.66 24.73 416.668 cv
24.828 416.684 24.906 416.695 24.969 416.707 cv
25.023 416.727 25.07 416.746 25.105 416.77 cv
25.133 416.793 25.148 416.824 25.152 416.855 cv
25.152 421.699 li
26.012 421.699 li
26.074 421.703 26.129 421.738 26.168 421.801 cv
26.207 421.871 26.227 421.973 26.23 422.113 cv
cp
24.145 417.535 mo
24.137 417.535 li
21.699 421.699 li
24.145 421.699 li
cp
.629114 .553033 .543389 .289647 cmyk
f
20.473 380.191 mo
26.555 380.191 li
26.555 394.839 li
20.473 394.839 li
cp
0 0 0 0 cmyk
ef
25.875 389.223 mo
25.875 389.629 25.805 389.992 25.668 390.309 cv
25.531 390.625 25.34 390.891 25.09 391.109 cv
24.84 391.328 24.539 391.492 24.195 391.602 cv
23.844 391.711 23.461 391.766 23.043 391.77 cv
22.805 391.766 22.582 391.75 22.375 391.719 cv
22.16 391.687 21.973 391.648 21.813 391.602 cv
21.645 391.555 21.512 391.508 21.41 391.457 cv
21.305 391.414 21.234 391.375 21.207 391.344 cv
21.176 391.316 21.156 391.293 21.145 391.266 cv
21.133 391.246 21.121 391.219 21.113 391.184 cv
21.098 391.152 21.094 391.109 21.094 391.059 cv
21.09 391.008 21.086 390.945 21.09 390.875 cv
21.086 390.812 21.09 390.754 21.098 390.699 cv
21.102 390.645 21.113 390.602 21.129 390.57 cv
21.145 390.539 21.16 390.516 21.184 390.496 cv
21.199 390.484 21.227 390.477 21.258 390.473 cv
21.297 390.477 21.355 390.5 21.438 390.547 cv
21.52 390.594 21.629 390.648 21.77 390.703 cv
21.906 390.762 22.078 390.812 22.285 390.863 cv
22.488 390.918 22.734 390.945 23.016 390.941 cv
23.277 390.945 23.516 390.914 23.738 390.848 cv
23.953 390.789 24.141 390.691 24.301 390.555 cv
24.457 390.426 24.582 390.258 24.672 390.055 cv
24.762 389.852 24.809 389.605 24.809 389.316 cv
24.809 389.074 24.77 388.863 24.695 388.676 cv
24.617 388.492 24.5 388.336 24.344 388.211 cv
24.184 388.09 23.984 388 23.742 387.937 cv
23.5 387.883 23.211 387.852 22.875 387.848 cv
22.637 387.852 22.43 387.863 22.262 387.883 cv
22.086 387.91 21.926 387.922 21.777 387.918 cv
21.664 387.922 21.586 387.895 21.543 387.84 cv
21.492 387.789 21.469 387.691 21.473 387.547 cv
21.473 384.457 li
21.469 384.332 21.5 384.234 21.563 384.172 cv
21.625 384.109 21.711 384.078 21.824 384.078 cv
25.184 384.078 li
25.215 384.078 25.242 384.09 25.273 384.105 cv
25.297 384.125 25.324 384.148 25.348 384.184 cv
25.367 384.223 25.379 384.27 25.391 384.32 cv
25.398 384.379 25.406 384.441 25.406 384.512 cv
25.406 384.652 25.387 384.762 25.348 384.84 cv
25.309 384.918 25.254 384.957 25.191 384.957 cv
22.48 384.957 li
22.48 387.082 li
22.609 387.066 22.746 387.055 22.887 387.051 cv
23.023 387.047 23.18 387.043 23.363 387.043 cv
23.777 387.043 24.145 387.098 24.457 387.199 cv
24.77 387.309 25.027 387.453 25.238 387.641 cv
25.445 387.828 25.605 388.059 25.715 388.328 cv
25.82 388.598 25.875 388.895 25.875 389.223 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.473 347.59 mo
26.555 347.59 li
26.555 362.238 li
20.473 362.238 li
cp
0 0 0 0 cmyk
ef
26.105 356.605 mo
26.102 356.937 26.051 357.258 25.953 357.57 cv
25.848 357.883 25.691 358.156 25.484 358.391 cv
25.27 358.625 25.004 358.816 24.68 358.957 cv
24.352 359.098 23.969 359.164 23.531 359.168 cv
23.215 359.164 22.934 359.129 22.695 359.051 cv
22.449 358.977 22.238 358.863 22.063 358.719 cv
21.879 358.578 21.73 358.402 21.613 358.187 cv
21.492 357.98 21.395 357.738 21.324 357.465 cv
21.246 357.195 21.195 356.902 21.168 356.578 cv
21.133 356.262 21.117 355.918 21.121 355.551 cv
21.117 355.227 21.137 354.898 21.176 354.566 cv
21.211 354.234 21.273 353.914 21.363 353.605 cv
21.449 353.297 21.57 353.008 21.727 352.734 cv
21.883 352.465 22.074 352.227 22.309 352.023 cv
22.539 351.824 22.82 351.664 23.145 351.547 cv
23.465 351.43 23.84 351.371 24.277 351.371 cv
24.418 351.371 24.566 351.383 24.715 351.398 cv
24.863 351.422 25 351.445 25.125 351.469 cv
25.25 351.5 25.355 351.531 25.441 351.566 cv
25.527 351.602 25.582 351.629 25.609 351.652 cv
25.637 351.676 25.656 351.699 25.672 351.723 cv
25.68 351.746 25.691 351.773 25.703 351.805 cv
25.707 351.836 25.715 351.871 25.723 351.902 cv
25.727 351.941 25.727 351.984 25.73 352.039 cv
25.727 352.109 25.727 352.172 25.727 352.223 cv
25.723 352.273 25.715 352.312 25.703 352.344 cv
25.688 352.375 25.668 352.398 25.648 352.414 cv
25.625 352.43 25.598 352.437 25.566 352.437 cv
25.52 352.437 25.461 352.426 25.387 352.398 cv
25.313 352.371 25.223 352.34 25.117 352.305 cv
25.012 352.273 24.883 352.242 24.734 352.215 cv
24.582 352.191 24.41 352.18 24.211 352.176 cv
23.848 352.18 23.535 352.254 23.273 352.398 cv
23.008 352.551 22.793 352.75 22.629 352.996 cv
22.465 353.25 22.34 353.539 22.262 353.867 cv
22.18 354.195 22.137 354.539 22.125 354.898 cv
22.227 354.84 22.34 354.781 22.469 354.723 cv
22.594 354.668 22.73 354.617 22.883 354.566 cv
23.031 354.523 23.191 354.484 23.359 354.453 cv
23.527 354.422 23.707 354.406 23.902 354.406 cv
24.309 354.406 24.656 354.465 24.938 354.574 cv
25.219 354.687 25.445 354.84 25.617 355.035 cv
25.789 355.234 25.914 355.469 25.992 355.734 cv
26.066 356.008 26.102 356.297 26.105 356.605 cv
cp
25.082 356.699 mo
25.078 356.473 25.055 356.266 25.016 356.078 cv
24.969 355.895 24.895 355.738 24.789 355.609 cv
24.684 355.48 24.543 355.379 24.367 355.309 cv
24.191 355.238 23.977 355.203 23.719 355.203 cv
23.574 355.203 23.43 355.219 23.285 355.242 cv
23.137 355.27 22.996 355.305 22.863 355.348 cv
22.73 355.395 22.602 355.445 22.477 355.508 cv
22.352 355.57 22.238 355.637 22.145 355.699 cv
22.141 356.207 22.172 356.629 22.238 356.969 cv
22.301 357.309 22.395 357.582 22.52 357.785 cv
22.641 357.992 22.797 358.137 22.98 358.223 cv
23.16 358.312 23.375 358.355 23.625 358.355 cv
23.875 358.355 24.09 358.309 24.273 358.215 cv
24.457 358.121 24.609 357.996 24.73 357.836 cv
24.852 357.68 24.941 357.504 24.996 357.305 cv
25.051 357.109 25.078 356.906 25.082 356.699 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.473 314.988 mo
26.555 314.988 li
26.555 329.64 li
20.473 329.64 li
cp
0 0 0 0 cmyk
ef
26.02 319.301 mo
26.016 319.371 26.012 319.437 26.012 319.492 cv
26.004 319.551 25.996 319.605 25.988 319.656 cv
25.973 319.711 25.961 319.762 25.945 319.809 cv
25.93 319.859 25.91 319.91 25.887 319.965 cv
23.156 326.254 li
23.137 326.305 23.109 326.344 23.082 326.371 cv
23.051 326.402 23.016 326.426 22.969 326.441 cv
22.922 326.457 22.863 326.465 22.797 326.473 cv
22.723 326.48 22.637 326.484 22.543 326.484 cv
22.402 326.484 22.301 326.477 22.23 326.465 cv
22.156 326.453 22.102 326.437 22.07 326.41 cv
22.035 326.387 22.02 326.355 22.023 326.316 cv
22.027 326.281 22.043 326.238 22.066 326.184 cv
24.938 319.754 li
21.301 319.754 li
21.223 319.758 21.168 319.719 21.129 319.637 cv
21.09 319.562 21.07 319.453 21.074 319.309 cv
21.07 319.234 21.074 319.168 21.09 319.113 cv
21.098 319.059 21.113 319.016 21.133 318.977 cv
21.152 318.941 21.176 318.914 21.203 318.895 cv
21.23 318.879 21.262 318.867 21.301 318.867 cv
25.715 318.867 li
25.77 318.867 25.816 318.875 25.859 318.887 cv
25.898 318.898 25.93 318.922 25.953 318.957 cv
25.973 318.992 25.992 319.035 26.004 319.09 cv
26.012 319.145 26.016 319.215 26.02 319.301 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.473 282.391 mo
26.555 282.391 li
26.555 297.039 li
20.473 297.039 li
cp
0 0 0 0 cmyk
ef
26.086 291.914 mo
26.086 292.242 26.027 292.535 25.91 292.789 cv
25.793 293.047 25.621 293.262 25.402 293.437 cv
25.18 293.617 24.91 293.75 24.586 293.836 cv
24.258 293.922 23.887 293.965 23.473 293.969 cv
23.082 293.965 22.73 293.926 22.422 293.848 cv
22.113 293.77 21.852 293.648 21.637 293.484 cv
21.422 293.324 21.258 293.129 21.145 292.891 cv
21.031 292.66 20.977 292.391 20.977 292.09 cv
20.977 291.855 21.016 291.637 21.094 291.434 cv
21.172 291.234 21.281 291.051 21.43 290.883 cv
21.574 290.719 21.758 290.562 21.973 290.414 cv
22.184 290.266 22.426 290.125 22.699 289.992 cv
22.465 289.875 22.258 289.75 22.078 289.609 cv
21.898 289.477 21.746 289.328 21.621 289.168 cv
21.496 289.012 21.398 288.844 21.336 288.66 cv
21.266 288.484 21.234 288.289 21.238 288.078 cv
21.234 287.816 21.281 287.566 21.383 287.332 cv
21.477 287.098 21.621 286.895 21.816 286.723 cv
22.004 286.551 22.25 286.418 22.555 286.316 cv
22.852 286.219 23.203 286.168 23.602 286.164 cv
23.984 286.168 24.313 286.215 24.594 286.305 cv
24.867 286.398 25.098 286.523 25.285 286.68 cv
25.465 286.84 25.602 287.023 25.688 287.238 cv
25.773 287.457 25.816 287.687 25.816 287.93 cv
25.816 288.129 25.781 288.32 25.719 288.504 cv
25.648 288.691 25.555 288.867 25.434 289.027 cv
25.305 289.195 25.152 289.348 24.973 289.488 cv
24.793 289.629 24.586 289.762 24.352 289.887 cv
24.629 290.027 24.875 290.168 25.094 290.309 cv
25.309 290.453 25.488 290.609 25.637 290.773 cv
25.777 290.941 25.891 291.117 25.969 291.301 cv
26.047 291.488 26.086 291.691 26.086 291.914 cv
cp
24.82 288.023 mo
24.82 287.859 24.789 287.711 24.734 287.578 cv
24.676 287.445 24.594 287.332 24.488 287.238 cv
24.375 287.145 24.238 287.074 24.078 287.027 cv
23.914 286.98 23.73 286.957 23.527 286.953 cv
23.102 286.957 22.781 287.051 22.566 287.238 cv
22.348 287.43 22.242 287.691 22.242 288.023 cv
22.242 288.176 22.266 288.32 22.32 288.449 cv
22.371 288.582 22.453 288.703 22.566 288.82 cv
22.676 288.937 22.816 289.055 22.988 289.164 cv
23.156 289.277 23.359 289.391 23.598 289.512 cv
23.988 289.309 24.293 289.086 24.504 288.84 cv
24.715 288.594 24.82 288.32 24.82 288.023 cv
cp
25.066 292.02 mo
25.066 291.84 25.031 291.68 24.965 291.531 cv
24.898 291.391 24.797 291.254 24.664 291.121 cv
24.527 290.996 24.359 290.871 24.16 290.75 cv
23.957 290.633 23.727 290.508 23.461 290.379 cv
23.211 290.504 22.992 290.625 22.813 290.742 cv
22.625 290.863 22.473 290.988 22.355 291.117 cv
22.23 291.25 22.141 291.387 22.086 291.527 cv
22.023 291.668 21.996 291.824 21.996 291.996 cv
21.996 292.375 22.125 292.668 22.387 292.875 cv
22.645 293.086 23.031 293.191 23.551 293.187 cv
24.047 293.191 24.426 293.086 24.684 292.875 cv
24.938 292.664 25.066 292.379 25.066 292.02 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.473 249.789 mo
26.555 249.789 li
26.555 264.441 li
20.473 264.441 li
cp
0 0 0 0 cmyk
ef
25.969 257.148 mo
25.969 257.477 25.949 257.809 25.91 258.145 cv
25.871 258.48 25.805 258.805 25.711 259.117 cv
25.617 259.43 25.488 259.723 25.332 259.988 cv
25.172 260.262 24.973 260.496 24.734 260.699 cv
24.492 260.902 24.207 261.062 23.879 261.176 cv
23.547 261.289 23.164 261.344 22.73 261.348 cv
22.559 261.344 22.395 261.332 22.238 261.316 cv
22.078 261.293 21.938 261.27 21.813 261.238 cv
21.684 261.207 21.578 261.176 21.492 261.141 cv
21.406 261.105 21.344 261.07 21.305 261.035 cv
21.266 261 21.234 260.953 21.219 260.891 cv
21.195 260.836 21.188 260.754 21.191 260.645 cv
21.188 260.566 21.191 260.496 21.199 260.441 cv
21.207 260.391 21.215 260.352 21.227 260.324 cv
21.238 260.301 21.254 260.285 21.277 260.27 cv
21.293 260.262 21.32 260.254 21.355 260.254 cv
21.398 260.254 21.461 260.27 21.539 260.297 cv
21.617 260.328 21.715 260.359 21.832 260.395 cv
21.949 260.434 22.09 260.469 22.254 260.492 cv
22.414 260.523 22.594 260.535 22.793 260.535 cv
23.172 260.535 23.496 260.465 23.77 260.316 cv
24.039 260.176 24.262 259.977 24.434 259.727 cv
24.605 259.48 24.734 259.195 24.82 258.871 cv
24.906 258.551 24.953 258.211 24.961 257.848 cv
24.754 257.969 24.504 258.074 24.219 258.168 cv
23.926 258.262 23.594 258.309 23.223 258.309 cv
22.797 258.309 22.441 258.254 22.156 258.137 cv
21.867 258.027 21.637 257.867 21.465 257.664 cv
21.289 257.465 21.164 257.23 21.09 256.953 cv
21.012 256.684 20.977 256.383 20.977 256.059 cv
20.977 255.723 21.023 255.406 21.121 255.102 cv
21.219 254.801 21.371 254.531 21.578 254.301 cv
21.785 254.074 22.051 253.891 22.371 253.75 cv
22.691 253.613 23.074 253.547 23.52 253.543 cv
23.836 253.547 24.113 253.586 24.359 253.664 cv
24.602 253.746 24.816 253.863 24.996 254.012 cv
25.176 254.168 25.328 254.348 25.453 254.559 cv
25.578 254.77 25.676 255.012 25.754 255.281 cv
25.828 255.551 25.883 255.844 25.918 256.156 cv
25.949 256.477 25.969 256.805 25.969 257.148 cv
cp
24.941 257.035 mo
24.938 256.539 24.906 256.117 24.844 255.773 cv
24.777 255.434 24.68 255.156 24.551 254.945 cv
24.418 254.734 24.258 254.582 24.074 254.488 cv
23.883 254.395 23.668 254.348 23.426 254.348 cv
23.168 254.348 22.949 254.395 22.773 254.484 cv
22.59 254.578 22.441 254.703 22.332 254.855 cv
22.215 255.012 22.133 255.184 22.078 255.379 cv
22.023 255.574 21.996 255.777 21.996 255.98 cv
21.996 256.215 22.02 256.426 22.07 256.617 cv
22.117 256.809 22.195 256.969 22.309 257.102 cv
22.414 257.234 22.559 257.34 22.734 257.41 cv
22.906 257.488 23.121 257.523 23.387 257.52 cv
23.676 257.523 23.961 257.48 24.234 257.387 cv
24.508 257.301 24.742 257.184 24.941 257.035 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
14.395 217.191 mo
26.555 217.191 li
26.555 231.839 li
14.395 231.839 li
cp
0 0 0 0 cmyk
ef
19.84 228.25 mo
19.836 228.324 19.828 228.387 19.82 228.437 cv
19.805 228.488 19.789 228.531 19.773 228.559 cv
19.75 228.594 19.73 228.617 19.707 228.629 cv
19.684 228.645 19.656 228.648 19.629 228.648 cv
15.66 228.648 li
15.629 228.648 15.605 228.645 15.586 228.629 cv
15.559 228.617 15.535 228.594 15.516 228.559 cv
15.492 228.531 15.477 228.488 15.465 228.437 cv
15.453 228.387 15.445 228.324 15.449 228.25 cv
15.445 228.18 15.453 228.121 15.465 228.07 cv
15.477 228.02 15.492 227.977 15.512 227.941 cv
15.527 227.91 15.547 227.887 15.574 227.867 cv
15.598 227.852 15.625 227.84 15.66 227.84 cv
17.246 227.84 li
17.246 222.062 li
15.777 222.937 li
15.699 222.98 15.641 223.004 15.598 223.008 cv
15.551 223.02 15.516 223.012 15.488 222.98 cv
15.461 222.957 15.441 222.914 15.434 222.855 cv
15.422 222.797 15.418 222.723 15.422 222.629 cv
15.418 222.566 15.422 222.508 15.43 222.461 cv
15.434 222.414 15.441 222.375 15.453 222.344 cv
15.465 222.312 15.48 222.285 15.504 222.262 cv
15.523 222.238 15.551 222.215 15.59 222.191 cv
17.34 221.07 li
17.355 221.062 17.375 221.051 17.398 221.039 cv
17.422 221.035 17.449 221.027 17.484 221.016 cv
17.52 221.012 17.563 221.008 17.609 221.004 cv
17.656 221.004 17.715 221.004 17.785 221 cv
17.879 221.004 17.957 221.008 18.02 221.012 cv
18.082 221.023 18.129 221.031 18.164 221.043 cv
18.199 221.059 18.223 221.078 18.234 221.098 cv
18.246 221.121 18.254 221.145 18.254 221.164 cv
18.254 227.84 li
19.629 227.84 li
19.656 227.84 19.684 227.852 19.715 227.867 cv
19.738 227.887 19.762 227.91 19.785 227.941 cv
19.801 227.977 19.816 228.02 19.824 228.07 cv
19.832 228.121 19.836 228.18 19.84 228.25 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.195 224.832 mo
26.191 225.418 26.145 225.949 26.059 226.43 cv
25.965 226.914 25.813 227.328 25.602 227.672 cv
25.383 228.02 25.105 228.289 24.762 228.477 cv
24.418 228.668 23.992 228.758 23.492 228.762 cv
23.008 228.758 22.605 228.676 22.281 228.508 cv
21.953 228.336 21.691 228.086 21.492 227.754 cv
21.293 227.426 21.148 227.02 21.066 226.535 cv
20.98 226.055 20.941 225.5 20.941 224.867 cv
20.941 224.293 20.988 223.762 21.082 223.273 cv
21.176 222.793 21.328 222.375 21.539 222.027 cv
21.75 221.684 22.027 221.418 22.375 221.227 cv
22.715 221.039 23.137 220.945 23.645 220.941 cv
24.121 220.945 24.523 221.027 24.852 221.195 cv
25.176 221.367 25.441 221.617 25.645 221.945 cv
25.844 222.277 25.984 222.687 26.07 223.168 cv
26.148 223.656 26.191 224.211 26.195 224.832 cv
cp
25.164 224.902 mo
25.16 224.527 25.145 224.187 25.121 223.883 cv
25.09 223.586 25.051 223.316 25 223.082 cv
24.945 222.852 24.879 222.656 24.797 222.488 cv
24.711 222.324 24.609 222.187 24.492 222.078 cv
24.375 221.973 24.238 221.891 24.09 221.84 cv
23.938 221.793 23.77 221.77 23.586 221.766 cv
23.25 221.77 22.98 221.848 22.773 222.004 cv
22.563 222.16 22.398 222.375 22.281 222.648 cv
22.16 222.922 22.078 223.246 22.039 223.613 cv
21.992 223.984 21.973 224.379 21.977 224.797 cv
21.973 225.367 22 225.848 22.063 226.246 cv
22.117 226.645 22.211 226.969 22.344 227.215 cv
22.469 227.469 22.633 227.652 22.828 227.762 cv
23.023 227.879 23.262 227.934 23.551 227.934 cv
23.766 227.934 23.957 227.898 24.125 227.828 cv
24.289 227.758 24.434 227.66 24.555 227.527 cv
24.672 227.398 24.77 227.238 24.852 227.055 cv
24.926 226.871 24.988 226.668 25.039 226.441 cv
25.082 226.219 25.117 225.977 25.137 225.715 cv
25.152 225.457 25.16 225.187 25.164 224.902 cv
cp
f
14.395 184.59 mo
26.555 184.59 li
26.555 199.238 li
14.395 199.238 li
cp
0 0 0 0 cmyk
ef
19.828 195.633 mo
19.824 195.707 19.82 195.77 19.813 195.82 cv
19.801 195.875 19.785 195.918 19.766 195.945 cv
19.742 195.98 19.719 196.004 19.695 196.012 cv
19.672 196.027 19.645 196.031 19.617 196.031 cv
15.656 196.031 li
15.629 196.031 15.605 196.027 15.582 196.012 cv
15.559 196.004 15.535 195.98 15.516 195.945 cv
15.492 195.918 15.477 195.875 15.465 195.82 cv
15.449 195.77 15.441 195.707 15.445 195.633 cv
15.441 195.562 15.449 195.504 15.465 195.453 cv
15.477 195.402 15.488 195.359 15.508 195.324 cv
15.523 195.293 15.547 195.27 15.57 195.25 cv
15.594 195.234 15.621 195.223 15.656 195.223 cv
17.242 195.223 li
17.242 189.457 li
15.773 190.328 li
15.699 190.375 15.641 190.398 15.598 190.402 cv
15.551 190.414 15.516 190.406 15.488 190.375 cv
15.457 190.352 15.438 190.309 15.43 190.25 cv
15.422 190.191 15.418 190.117 15.418 190.023 cv
15.418 189.961 15.418 189.902 15.426 189.855 cv
15.43 189.809 15.441 189.77 15.453 189.738 cv
15.461 189.707 15.477 189.68 15.5 189.656 cv
15.523 189.633 15.551 189.609 15.586 189.586 cv
17.336 188.469 li
17.348 188.457 17.367 188.445 17.395 188.437 cv
17.414 188.43 17.445 188.422 17.48 188.414 cv
17.512 188.406 17.551 188.402 17.602 188.402 cv
17.645 188.402 17.703 188.402 17.781 188.398 cv
17.871 188.402 17.949 188.406 18.016 188.41 cv
18.074 188.422 18.125 188.434 18.16 188.441 cv
18.191 188.457 18.215 188.473 18.23 188.492 cv
18.242 188.516 18.246 188.539 18.25 188.562 cv
18.25 195.223 li
19.617 195.223 li
19.645 195.223 19.676 195.234 19.707 195.25 cv
19.734 195.27 19.754 195.293 19.773 195.324 cv
19.789 195.359 19.805 195.402 19.813 195.453 cv
19.82 195.504 19.824 195.562 19.828 195.633 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.949 195.633 mo
25.945 195.707 25.941 195.77 25.934 195.82 cv
25.922 195.875 25.906 195.918 25.887 195.945 cv
25.863 195.98 25.84 196.004 25.816 196.012 cv
25.793 196.027 25.766 196.031 25.738 196.031 cv
21.777 196.031 li
21.75 196.031 21.727 196.027 21.703 196.012 cv
21.68 196.004 21.656 195.98 21.637 195.945 cv
21.613 195.918 21.598 195.875 21.586 195.82 cv
21.57 195.77 21.563 195.707 21.566 195.633 cv
21.563 195.562 21.57 195.504 21.586 195.453 cv
21.598 195.402 21.609 195.359 21.629 195.324 cv
21.645 195.293 21.668 195.27 21.691 195.25 cv
21.715 195.234 21.742 195.223 21.777 195.223 cv
23.363 195.223 li
23.363 189.457 li
21.895 190.328 li
21.82 190.375 21.762 190.398 21.719 190.402 cv
21.672 190.414 21.637 190.406 21.609 190.375 cv
21.578 190.352 21.559 190.309 21.551 190.25 cv
21.543 190.191 21.539 190.117 21.539 190.023 cv
21.539 189.961 21.539 189.902 21.547 189.855 cv
21.551 189.809 21.563 189.77 21.574 189.738 cv
21.582 189.707 21.598 189.68 21.621 189.656 cv
21.645 189.633 21.672 189.609 21.707 189.586 cv
23.457 188.469 li
23.469 188.457 23.488 188.445 23.516 188.437 cv
23.535 188.43 23.566 188.422 23.602 188.414 cv
23.633 188.406 23.672 188.402 23.723 188.402 cv
23.766 188.402 23.824 188.402 23.902 188.398 cv
23.992 188.402 24.07 188.406 24.137 188.41 cv
24.195 188.422 24.246 188.434 24.281 188.441 cv
24.313 188.457 24.336 188.473 24.352 188.492 cv
24.363 188.516 24.367 188.539 24.371 188.562 cv
24.371 195.223 li
25.738 195.223 li
25.766 195.223 25.797 195.234 25.828 195.25 cv
25.855 195.27 25.875 195.293 25.895 195.324 cv
25.91 195.359 25.926 195.402 25.934 195.453 cv
25.941 195.504 25.945 195.562 25.949 195.633 cv
cp
f
14.395 152 mo
26.555 152 li
26.555 166.648 li
14.395 166.648 li
cp
0 0 0 0 cmyk
ef
19.828 163.023 mo
19.824 163.098 19.82 163.16 19.813 163.211 cv
19.801 163.266 19.785 163.309 19.766 163.336 cv
19.742 163.371 19.719 163.395 19.695 163.402 cv
19.672 163.418 19.645 163.422 19.617 163.422 cv
15.656 163.422 li
15.629 163.422 15.605 163.418 15.582 163.402 cv
15.559 163.395 15.535 163.371 15.516 163.336 cv
15.492 163.309 15.477 163.266 15.465 163.211 cv
15.449 163.16 15.441 163.098 15.445 163.023 cv
15.441 162.953 15.449 162.895 15.465 162.844 cv
15.477 162.793 15.488 162.75 15.508 162.715 cv
15.523 162.684 15.547 162.66 15.57 162.641 cv
15.594 162.625 15.621 162.613 15.656 162.613 cv
17.242 162.613 li
17.242 156.848 li
15.773 157.719 li
15.699 157.766 15.641 157.789 15.598 157.793 cv
15.551 157.805 15.516 157.797 15.488 157.766 cv
15.457 157.742 15.438 157.699 15.43 157.641 cv
15.422 157.582 15.418 157.508 15.418 157.414 cv
15.418 157.352 15.418 157.293 15.426 157.246 cv
15.43 157.199 15.441 157.16 15.453 157.129 cv
15.461 157.098 15.477 157.07 15.5 157.047 cv
15.523 157.023 15.551 157 15.586 156.977 cv
17.336 155.859 li
17.348 155.848 17.367 155.836 17.395 155.828 cv
17.414 155.82 17.445 155.812 17.48 155.805 cv
17.512 155.797 17.551 155.793 17.602 155.793 cv
17.645 155.793 17.703 155.793 17.781 155.789 cv
17.871 155.793 17.949 155.797 18.016 155.801 cv
18.074 155.812 18.125 155.824 18.16 155.832 cv
18.191 155.848 18.215 155.863 18.23 155.883 cv
18.242 155.906 18.246 155.93 18.25 155.953 cv
18.25 162.613 li
19.617 162.613 li
19.645 162.613 19.676 162.625 19.707 162.641 cv
19.734 162.66 19.754 162.684 19.773 162.715 cv
19.789 162.75 19.805 162.793 19.813 162.844 cv
19.82 162.895 19.824 162.953 19.828 163.023 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.934 162.988 mo
25.934 163.059 25.926 163.121 25.918 163.176 cv
25.902 163.23 25.891 163.277 25.875 163.312 cv
25.859 163.352 25.836 163.379 25.805 163.395 cv
25.773 163.414 25.742 163.422 25.711 163.422 cv
21.52 163.422 li
21.465 163.422 21.418 163.418 21.379 163.402 cv
21.336 163.395 21.301 163.371 21.273 163.336 cv
21.242 163.309 21.219 163.262 21.207 163.199 cv
21.191 163.141 21.188 163.07 21.188 162.984 cv
21.188 162.91 21.188 162.84 21.195 162.777 cv
21.199 162.719 21.215 162.668 21.234 162.621 cv
21.254 162.578 21.277 162.535 21.309 162.488 cv
21.336 162.449 21.375 162.398 21.43 162.344 cv
22.945 160.785 li
23.293 160.426 23.57 160.105 23.785 159.82 cv
23.996 159.535 24.16 159.273 24.277 159.039 cv
24.387 158.805 24.465 158.594 24.504 158.402 cv
24.539 158.211 24.555 158.031 24.559 157.859 cv
24.555 157.695 24.527 157.535 24.473 157.383 cv
24.414 157.234 24.332 157.102 24.227 156.988 cv
24.117 156.879 23.984 156.789 23.824 156.719 cv
23.66 156.652 23.473 156.621 23.27 156.617 cv
23.02 156.621 22.801 156.652 22.605 156.719 cv
22.41 156.789 22.238 156.863 22.09 156.937 cv
21.941 157.02 21.816 157.09 21.723 157.152 cv
21.621 157.219 21.551 157.254 21.504 157.25 cv
21.473 157.254 21.445 157.246 21.426 157.227 cv
21.402 157.215 21.383 157.187 21.371 157.152 cv
21.355 157.121 21.348 157.074 21.34 157.012 cv
21.332 156.953 21.328 156.883 21.328 156.801 cv
21.328 156.742 21.328 156.691 21.332 156.648 cv
21.336 156.609 21.344 156.574 21.355 156.539 cv
21.363 156.512 21.375 156.48 21.395 156.449 cv
21.406 156.422 21.438 156.391 21.488 156.348 cv
21.531 156.309 21.613 156.25 21.73 156.18 cv
21.844 156.109 21.988 156.043 22.164 155.973 cv
22.336 155.906 22.527 155.848 22.738 155.797 cv
22.945 155.754 23.164 155.73 23.395 155.727 cv
23.762 155.73 24.082 155.781 24.359 155.883 cv
24.633 155.988 24.863 156.129 25.043 156.309 cv
25.223 156.488 25.359 156.699 25.453 156.937 cv
25.543 157.176 25.586 157.43 25.59 157.695 cv
25.586 157.945 25.566 158.187 25.523 158.422 cv
25.477 158.664 25.383 158.922 25.25 159.199 cv
25.109 159.48 24.91 159.793 24.648 160.133 cv
24.387 160.477 24.039 160.867 23.605 161.312 cv
22.406 162.566 li
25.707 162.566 li
25.734 162.566 25.766 162.578 25.797 162.594 cv
25.824 162.613 25.848 162.637 25.871 162.672 cv
25.887 162.711 25.902 162.758 25.918 162.805 cv
25.926 162.859 25.934 162.918 25.934 162.988 cv
cp
f
14.395 119.398 mo
26.555 119.398 li
26.555 134.05 li
14.395 134.05 li
cp
0 0 0 0 cmyk
ef
19.828 130.422 mo
19.824 130.496 19.82 130.559 19.813 130.609 cv
19.801 130.664 19.785 130.707 19.766 130.734 cv
19.742 130.77 19.719 130.793 19.695 130.801 cv
19.672 130.816 19.645 130.82 19.617 130.82 cv
15.656 130.82 li
15.629 130.82 15.605 130.816 15.582 130.801 cv
15.559 130.793 15.535 130.77 15.516 130.734 cv
15.492 130.707 15.477 130.664 15.465 130.609 cv
15.449 130.559 15.441 130.496 15.445 130.422 cv
15.441 130.352 15.449 130.293 15.465 130.242 cv
15.477 130.191 15.488 130.148 15.508 130.113 cv
15.523 130.082 15.547 130.059 15.57 130.039 cv
15.594 130.023 15.621 130.012 15.656 130.012 cv
17.242 130.012 li
17.242 124.246 li
15.773 125.117 li
15.699 125.164 15.641 125.187 15.598 125.191 cv
15.551 125.203 15.516 125.195 15.488 125.164 cv
15.457 125.141 15.438 125.098 15.43 125.039 cv
15.422 124.98 15.418 124.906 15.418 124.812 cv
15.418 124.75 15.418 124.691 15.426 124.645 cv
15.43 124.598 15.441 124.559 15.453 124.527 cv
15.461 124.496 15.477 124.469 15.5 124.445 cv
15.523 124.422 15.551 124.398 15.586 124.375 cv
17.336 123.258 li
17.348 123.246 17.367 123.234 17.395 123.227 cv
17.414 123.219 17.445 123.211 17.48 123.203 cv
17.512 123.195 17.551 123.191 17.602 123.191 cv
17.645 123.191 17.703 123.191 17.781 123.187 cv
17.871 123.191 17.949 123.195 18.016 123.199 cv
18.074 123.211 18.125 123.223 18.16 123.23 cv
18.191 123.246 18.215 123.262 18.23 123.281 cv
18.242 123.305 18.246 123.328 18.25 123.352 cv
18.25 130.012 li
19.617 130.012 li
19.645 130.012 19.676 130.023 19.707 130.039 cv
19.734 130.059 19.754 130.082 19.773 130.113 cv
19.789 130.148 19.805 130.191 19.813 130.242 cv
19.82 130.293 19.824 130.352 19.828 130.422 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.875 128.652 mo
25.875 129 25.813 129.316 25.691 129.594 cv
25.57 129.875 25.398 130.113 25.172 130.312 cv
24.945 130.512 24.664 130.664 24.332 130.77 cv
24 130.875 23.625 130.926 23.207 130.93 cv
22.953 130.926 22.715 130.906 22.496 130.867 cv
22.273 130.828 22.078 130.781 21.91 130.727 cv
21.734 130.672 21.594 130.613 21.48 130.551 cv
21.363 130.488 21.289 130.445 21.266 130.418 cv
21.234 130.391 21.215 130.363 21.199 130.336 cv
21.184 130.309 21.168 130.273 21.156 130.234 cv
21.145 130.195 21.137 130.148 21.129 130.094 cv
21.121 130.039 21.117 129.969 21.121 129.883 cv
21.117 129.742 21.133 129.645 21.164 129.59 cv
21.191 129.535 21.23 129.508 21.285 129.508 cv
21.32 129.508 21.391 129.539 21.496 129.602 cv
21.602 129.664 21.738 129.734 21.906 129.805 cv
22.07 129.883 22.266 129.949 22.488 130.008 cv
22.711 130.074 22.957 130.105 23.234 130.102 cv
23.492 130.105 23.727 130.07 23.93 130 cv
24.129 129.934 24.297 129.84 24.434 129.719 cv
24.57 129.602 24.672 129.461 24.742 129.289 cv
24.809 129.125 24.844 128.941 24.844 128.746 cv
24.844 128.531 24.797 128.34 24.711 128.164 cv
24.621 127.996 24.496 127.848 24.332 127.719 cv
24.164 127.598 23.957 127.5 23.715 127.434 cv
23.465 127.371 23.188 127.34 22.883 127.336 cv
22.141 127.336 li
22.105 127.34 22.074 127.332 22.043 127.316 cv
22.012 127.301 21.984 127.277 21.965 127.246 cv
21.941 127.215 21.922 127.176 21.91 127.125 cv
21.895 127.074 21.891 127.008 21.891 126.922 cv
21.891 126.852 21.895 126.789 21.906 126.738 cv
21.918 126.691 21.934 126.652 21.957 126.621 cv
21.973 126.594 22 126.574 22.031 126.559 cv
22.059 126.551 22.09 126.543 22.125 126.539 cv
22.785 126.539 li
23.043 126.543 23.273 126.508 23.48 126.437 cv
23.684 126.371 23.859 126.277 24 126.148 cv
24.141 126.027 24.25 125.879 24.328 125.703 cv
24.406 125.531 24.445 125.336 24.445 125.117 cv
24.445 124.965 24.418 124.816 24.367 124.672 cv
24.316 124.531 24.242 124.406 24.141 124.301 cv
24.039 124.195 23.906 124.113 23.75 124.051 cv
23.586 123.996 23.406 123.965 23.203 123.961 cv
22.977 123.965 22.766 124 22.578 124.062 cv
22.383 124.133 22.215 124.203 22.07 124.281 cv
21.918 124.359 21.797 124.434 21.703 124.5 cv
21.605 124.57 21.535 124.605 21.496 124.602 cv
21.469 124.605 21.445 124.602 21.426 124.59 cv
21.402 124.582 21.383 124.562 21.371 124.531 cv
21.355 124.504 21.348 124.461 21.34 124.406 cv
21.332 124.355 21.328 124.285 21.332 124.199 cv
21.328 124.141 21.332 124.09 21.34 124.043 cv
21.344 124 21.352 123.961 21.363 123.926 cv
21.371 123.895 21.383 123.863 21.402 123.836 cv
21.414 123.812 21.441 123.781 21.48 123.742 cv
21.52 123.703 21.594 123.648 21.707 123.578 cv
21.82 123.508 21.961 123.441 22.129 123.371 cv
22.293 123.305 22.484 123.246 22.703 123.195 cv
22.918 123.152 23.152 123.129 23.402 123.125 cv
23.754 123.129 24.063 123.172 24.328 123.262 cv
24.594 123.355 24.813 123.484 24.992 123.645 cv
25.168 123.812 25.301 124.008 25.391 124.234 cv
25.477 124.461 25.523 124.715 25.523 124.992 cv
25.523 125.23 25.492 125.453 25.43 125.656 cv
25.367 125.863 25.273 126.043 25.152 126.199 cv
25.031 126.359 24.883 126.496 24.707 126.605 cv
24.531 126.723 24.328 126.797 24.098 126.836 cv
24.098 126.848 li
24.359 126.879 24.598 126.945 24.816 127.047 cv
25.031 127.148 25.219 127.277 25.379 127.434 cv
25.531 127.59 25.652 127.773 25.742 127.984 cv
25.828 128.195 25.875 128.418 25.875 128.652 cv
cp
f
14.395 86.801 mo
26.555 86.801 li
26.555 101.449 li
14.395 101.449 li
cp
0 0 0 0 cmyk
ef
19.828 97.812 mo
19.824 97.887 19.82 97.949 19.813 98 cv
19.801 98.055 19.785 98.098 19.766 98.125 cv
19.742 98.16 19.719 98.184 19.695 98.191 cv
19.672 98.207 19.645 98.211 19.617 98.211 cv
15.656 98.211 li
15.629 98.211 15.605 98.207 15.582 98.191 cv
15.559 98.184 15.535 98.16 15.516 98.125 cv
15.492 98.098 15.477 98.055 15.465 98 cv
15.449 97.949 15.441 97.887 15.445 97.812 cv
15.441 97.742 15.449 97.684 15.465 97.633 cv
15.477 97.582 15.488 97.539 15.508 97.504 cv
15.523 97.473 15.547 97.449 15.57 97.43 cv
15.594 97.414 15.621 97.402 15.656 97.402 cv
17.242 97.402 li
17.242 91.637 li
15.773 92.508 li
15.699 92.555 15.641 92.578 15.598 92.582 cv
15.551 92.594 15.516 92.586 15.488 92.555 cv
15.457 92.531 15.438 92.488 15.43 92.43 cv
15.422 92.371 15.418 92.297 15.418 92.203 cv
15.418 92.141 15.418 92.082 15.426 92.035 cv
15.43 91.988 15.441 91.949 15.453 91.918 cv
15.461 91.887 15.477 91.859 15.5 91.836 cv
15.523 91.812 15.551 91.789 15.586 91.766 cv
17.336 90.648 li
17.348 90.637 17.367 90.625 17.395 90.617 cv
17.414 90.609 17.445 90.602 17.48 90.594 cv
17.512 90.586 17.551 90.582 17.602 90.582 cv
17.645 90.582 17.703 90.582 17.781 90.578 cv
17.871 90.582 17.949 90.586 18.016 90.59 cv
18.074 90.602 18.125 90.613 18.16 90.621 cv
18.191 90.637 18.215 90.652 18.23 90.672 cv
18.242 90.695 18.246 90.719 18.25 90.742 cv
18.25 97.402 li
19.617 97.402 li
19.645 97.402 19.676 97.414 19.707 97.43 cv
19.734 97.449 19.754 97.473 19.773 97.504 cv
19.789 97.539 19.805 97.582 19.813 97.633 cv
19.82 97.684 19.824 97.742 19.828 97.812 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.254 96.055 mo
26.25 96.187 26.23 96.289 26.195 96.359 cv
26.152 96.434 26.098 96.473 26.035 96.469 cv
25.176 96.469 li
25.176 98.062 li
25.172 98.098 25.164 98.125 25.152 98.145 cv
25.133 98.168 25.105 98.184 25.066 98.199 cv
25.027 98.215 24.973 98.227 24.91 98.234 cv
24.844 98.242 24.762 98.246 24.664 98.246 cv
24.563 98.246 24.484 98.242 24.422 98.234 cv
24.359 98.227 24.309 98.215 24.27 98.199 cv
24.23 98.184 24.203 98.168 24.188 98.145 cv
24.172 98.125 24.164 98.098 24.168 98.062 cv
24.168 96.469 li
21.066 96.469 li
21.02 96.473 20.984 96.465 20.953 96.453 cv
20.922 96.445 20.891 96.426 20.867 96.391 cv
20.836 96.363 20.82 96.316 20.813 96.254 cv
20.805 96.195 20.801 96.121 20.801 96.023 cv
20.801 95.953 20.801 95.887 20.805 95.828 cv
20.809 95.77 20.816 95.715 20.828 95.668 cv
20.84 95.621 20.855 95.574 20.875 95.527 cv
20.895 95.48 20.918 95.434 20.945 95.383 cv
23.648 90.773 li
23.668 90.746 23.695 90.719 23.734 90.691 cv
23.77 90.672 23.82 90.652 23.883 90.633 cv
23.941 90.621 24.012 90.609 24.102 90.602 cv
24.188 90.598 24.293 90.594 24.414 90.594 cv
24.543 90.594 24.656 90.602 24.754 90.609 cv
24.852 90.625 24.93 90.637 24.992 90.648 cv
25.047 90.668 25.094 90.687 25.129 90.711 cv
25.156 90.734 25.172 90.766 25.176 90.797 cv
25.176 95.641 li
26.035 95.641 li
26.098 95.645 26.152 95.68 26.191 95.742 cv
26.23 95.812 26.25 95.914 26.254 96.055 cv
cp
24.168 91.477 mo
24.16 91.477 li
21.723 95.641 li
24.168 95.641 li
cp
f
14.395 54.199 mo
26.555 54.199 li
26.555 68.851 li
14.395 68.851 li
cp
0 0 0 0 cmyk
ef
19.828 65.223 mo
19.824 65.297 19.82 65.359 19.813 65.41 cv
19.801 65.465 19.785 65.508 19.766 65.535 cv
19.742 65.57 19.719 65.594 19.695 65.602 cv
19.672 65.617 19.645 65.621 19.617 65.621 cv
15.656 65.621 li
15.629 65.621 15.605 65.617 15.582 65.602 cv
15.559 65.594 15.535 65.57 15.516 65.535 cv
15.492 65.508 15.477 65.465 15.465 65.41 cv
15.449 65.359 15.441 65.297 15.445 65.223 cv
15.441 65.152 15.449 65.094 15.465 65.043 cv
15.477 64.992 15.488 64.949 15.508 64.914 cv
15.523 64.883 15.547 64.859 15.57 64.84 cv
15.594 64.824 15.621 64.812 15.656 64.812 cv
17.242 64.812 li
17.242 59.047 li
15.773 59.918 li
15.699 59.965 15.641 59.988 15.598 59.992 cv
15.551 60.004 15.516 59.996 15.488 59.965 cv
15.457 59.941 15.438 59.898 15.43 59.84 cv
15.422 59.781 15.418 59.707 15.418 59.613 cv
15.418 59.551 15.418 59.492 15.426 59.445 cv
15.43 59.398 15.441 59.359 15.453 59.328 cv
15.461 59.297 15.477 59.27 15.5 59.246 cv
15.523 59.223 15.551 59.199 15.586 59.176 cv
17.336 58.059 li
17.348 58.047 17.367 58.035 17.395 58.027 cv
17.414 58.02 17.445 58.012 17.48 58.004 cv
17.512 57.996 17.551 57.992 17.602 57.992 cv
17.645 57.992 17.703 57.992 17.781 57.988 cv
17.871 57.992 17.949 57.996 18.016 58 cv
18.074 58.012 18.125 58.023 18.16 58.031 cv
18.191 58.047 18.215 58.062 18.23 58.082 cv
18.242 58.105 18.246 58.129 18.25 58.152 cv
18.25 64.812 li
19.617 64.812 li
19.645 64.812 19.676 64.824 19.707 64.84 cv
19.734 64.859 19.754 64.883 19.773 64.914 cv
19.789 64.949 19.805 64.992 19.813 65.043 cv
19.82 65.094 19.824 65.152 19.828 65.223 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
25.898 63.184 mo
25.898 63.59 25.828 63.953 25.691 64.27 cv
25.555 64.586 25.363 64.852 25.113 65.07 cv
24.863 65.289 24.563 65.453 24.219 65.562 cv
23.867 65.672 23.484 65.727 23.066 65.73 cv
22.828 65.727 22.605 65.711 22.398 65.68 cv
22.184 65.648 21.996 65.609 21.836 65.562 cv
21.668 65.516 21.535 65.469 21.434 65.418 cv
21.328 65.375 21.258 65.336 21.23 65.305 cv
21.199 65.277 21.18 65.254 21.168 65.227 cv
21.156 65.207 21.145 65.18 21.137 65.145 cv
21.121 65.113 21.117 65.07 21.117 65.02 cv
21.113 64.969 21.109 64.906 21.113 64.836 cv
21.109 64.773 21.113 64.715 21.121 64.66 cv
21.125 64.605 21.137 64.562 21.152 64.531 cv
21.168 64.5 21.184 64.477 21.207 64.457 cv
21.223 64.445 21.25 64.437 21.281 64.434 cv
21.32 64.437 21.379 64.461 21.461 64.508 cv
21.543 64.555 21.652 64.609 21.793 64.664 cv
21.93 64.723 22.102 64.773 22.309 64.824 cv
22.512 64.879 22.758 64.906 23.039 64.902 cv
23.301 64.906 23.539 64.875 23.762 64.809 cv
23.977 64.75 24.164 64.652 24.324 64.516 cv
24.48 64.387 24.605 64.219 24.695 64.016 cv
24.785 63.812 24.832 63.566 24.832 63.277 cv
24.832 63.035 24.793 62.824 24.719 62.637 cv
24.641 62.453 24.523 62.297 24.367 62.172 cv
24.207 62.051 24.008 61.961 23.766 61.898 cv
23.523 61.844 23.234 61.812 22.898 61.809 cv
22.66 61.812 22.453 61.824 22.285 61.844 cv
22.109 61.871 21.949 61.883 21.801 61.879 cv
21.688 61.883 21.609 61.855 21.566 61.801 cv
21.516 61.75 21.492 61.652 21.496 61.508 cv
21.496 58.418 li
21.492 58.293 21.523 58.195 21.586 58.133 cv
21.648 58.07 21.734 58.039 21.848 58.039 cv
25.207 58.039 li
25.238 58.039 25.266 58.051 25.297 58.066 cv
25.32 58.086 25.348 58.109 25.371 58.145 cv
25.391 58.184 25.402 58.23 25.414 58.281 cv
25.422 58.34 25.43 58.402 25.43 58.473 cv
25.43 58.613 25.41 58.723 25.371 58.801 cv
25.332 58.879 25.277 58.918 25.215 58.918 cv
22.504 58.918 li
22.504 61.043 li
22.633 61.027 22.77 61.016 22.91 61.012 cv
23.047 61.008 23.203 61.004 23.387 61.004 cv
23.801 61.004 24.168 61.059 24.48 61.16 cv
24.793 61.27 25.051 61.414 25.262 61.602 cv
25.469 61.789 25.629 62.02 25.738 62.289 cv
25.844 62.559 25.898 62.855 25.898 63.184 cv
cp
f
14.395 21.602 mo
26.555 21.602 li
26.555 36.25 li
14.395 36.25 li
cp
0 0 0 0 cmyk
ef
19.828 32.602 mo
19.824 32.676 19.82 32.738 19.813 32.789 cv
19.801 32.844 19.785 32.887 19.766 32.914 cv
19.742 32.949 19.719 32.973 19.695 32.98 cv
19.672 32.996 19.645 33 19.617 33 cv
15.656 33 li
15.629 33 15.605 32.996 15.582 32.98 cv
15.559 32.973 15.535 32.949 15.516 32.914 cv
15.492 32.887 15.477 32.844 15.465 32.789 cv
15.449 32.738 15.441 32.676 15.445 32.602 cv
15.441 32.531 15.449 32.473 15.465 32.422 cv
15.477 32.371 15.488 32.328 15.508 32.293 cv
15.523 32.262 15.547 32.238 15.57 32.219 cv
15.594 32.203 15.621 32.191 15.656 32.191 cv
17.242 32.191 li
17.242 26.426 li
15.773 27.297 li
15.699 27.344 15.641 27.367 15.598 27.371 cv
15.551 27.383 15.516 27.375 15.488 27.344 cv
15.457 27.32 15.438 27.277 15.43 27.219 cv
15.422 27.16 15.418 27.086 15.418 26.992 cv
15.418 26.93 15.418 26.871 15.426 26.824 cv
15.43 26.777 15.441 26.738 15.453 26.707 cv
15.461 26.676 15.477 26.648 15.5 26.625 cv
15.523 26.602 15.551 26.578 15.586 26.555 cv
17.336 25.437 li
17.348 25.426 17.367 25.414 17.395 25.406 cv
17.414 25.398 17.445 25.391 17.48 25.383 cv
17.512 25.375 17.551 25.371 17.602 25.371 cv
17.645 25.371 17.703 25.371 17.781 25.367 cv
17.871 25.371 17.949 25.375 18.016 25.379 cv
18.074 25.391 18.125 25.402 18.16 25.41 cv
18.191 25.426 18.215 25.441 18.23 25.461 cv
18.242 25.484 18.246 25.508 18.25 25.531 cv
18.25 32.191 li
19.617 32.191 li
19.645 32.191 19.676 32.203 19.707 32.219 cv
19.734 32.238 19.754 32.262 19.773 32.293 cv
19.789 32.328 19.805 32.371 19.813 32.422 cv
19.82 32.473 19.824 32.531 19.828 32.602 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.129 30.547 mo
26.125 30.879 26.074 31.199 25.977 31.512 cv
25.871 31.824 25.715 32.098 25.508 32.332 cv
25.293 32.566 25.027 32.758 24.703 32.898 cv
24.375 33.039 23.992 33.105 23.555 33.109 cv
23.238 33.105 22.957 33.07 22.719 32.992 cv
22.473 32.918 22.262 32.805 22.086 32.66 cv
21.902 32.52 21.754 32.344 21.637 32.129 cv
21.516 31.922 21.418 31.68 21.348 31.406 cv
21.27 31.137 21.219 30.844 21.191 30.52 cv
21.156 30.203 21.141 29.859 21.145 29.492 cv
21.141 29.168 21.16 28.84 21.199 28.508 cv
21.234 28.176 21.297 27.855 21.387 27.547 cv
21.473 27.238 21.594 26.949 21.75 26.676 cv
21.906 26.406 22.098 26.168 22.332 25.965 cv
22.563 25.766 22.844 25.605 23.168 25.488 cv
23.488 25.371 23.863 25.312 24.301 25.312 cv
24.441 25.312 24.59 25.324 24.738 25.34 cv
24.887 25.363 25.023 25.387 25.148 25.41 cv
25.273 25.441 25.379 25.473 25.465 25.508 cv
25.551 25.543 25.605 25.57 25.633 25.594 cv
25.66 25.617 25.68 25.641 25.695 25.664 cv
25.703 25.687 25.715 25.715 25.727 25.746 cv
25.73 25.777 25.738 25.812 25.746 25.844 cv
25.75 25.883 25.75 25.926 25.754 25.98 cv
25.75 26.051 25.75 26.113 25.75 26.164 cv
25.746 26.215 25.738 26.254 25.727 26.285 cv
25.711 26.316 25.691 26.34 25.672 26.355 cv
25.648 26.371 25.621 26.379 25.59 26.379 cv
25.543 26.379 25.484 26.367 25.41 26.34 cv
25.336 26.312 25.246 26.281 25.141 26.246 cv
25.035 26.215 24.906 26.184 24.758 26.156 cv
24.605 26.133 24.434 26.121 24.234 26.117 cv
23.871 26.121 23.559 26.195 23.297 26.34 cv
23.031 26.492 22.816 26.691 22.652 26.937 cv
22.488 27.191 22.363 27.48 22.285 27.809 cv
22.203 28.137 22.16 28.48 22.148 28.84 cv
22.25 28.781 22.363 28.723 22.492 28.664 cv
22.617 28.609 22.754 28.559 22.906 28.508 cv
23.055 28.465 23.215 28.426 23.383 28.395 cv
23.551 28.363 23.73 28.348 23.926 28.348 cv
24.332 28.348 24.68 28.406 24.961 28.516 cv
25.242 28.629 25.469 28.781 25.641 28.977 cv
25.813 29.176 25.938 29.41 26.016 29.676 cv
26.09 29.949 26.125 30.238 26.129 30.547 cv
cp
25.105 30.641 mo
25.102 30.414 25.078 30.207 25.039 30.02 cv
24.992 29.836 24.918 29.68 24.813 29.551 cv
24.707 29.422 24.566 29.32 24.391 29.25 cv
24.215 29.18 24 29.145 23.742 29.145 cv
23.598 29.145 23.453 29.16 23.309 29.184 cv
23.16 29.211 23.02 29.246 22.887 29.289 cv
22.754 29.336 22.625 29.387 22.5 29.449 cv
22.375 29.512 22.262 29.578 22.168 29.641 cv
22.164 30.148 22.195 30.57 22.262 30.91 cv
22.324 31.25 22.418 31.523 22.543 31.727 cv
22.664 31.934 22.82 32.078 23.004 32.164 cv
23.184 32.254 23.398 32.297 23.648 32.297 cv
23.898 32.297 24.113 32.25 24.297 32.156 cv
24.48 32.062 24.633 31.937 24.754 31.777 cv
24.875 31.621 24.965 31.445 25.02 31.246 cv
25.074 31.051 25.102 30.848 25.105 30.641 cv
cp
f
40.102 537.297 mo
40.098 537.371 40.09 537.434 40.082 537.484 cv
40.066 537.535 40.051 537.578 40.035 537.605 cv
40.012 537.641 39.992 537.664 39.969 537.676 cv
39.945 537.691 39.918 537.695 39.891 537.695 cv
35.922 537.695 li
35.891 537.695 35.867 537.691 35.848 537.676 cv
35.82 537.664 35.797 537.641 35.777 537.605 cv
35.754 537.578 35.738 537.535 35.727 537.484 cv
35.715 537.434 35.707 537.371 35.711 537.297 cv
35.707 537.227 35.715 537.168 35.727 537.117 cv
35.738 537.066 35.754 537.023 35.773 536.988 cv
35.789 536.957 35.809 536.934 35.836 536.914 cv
35.859 536.898 35.887 536.887 35.922 536.887 cv
37.508 536.887 li
37.508 531.109 li
36.039 531.984 li
35.961 532.027 35.902 532.051 35.859 532.055 cv
35.813 532.066 35.777 532.059 35.75 532.027 cv
35.723 532.004 35.703 531.961 35.695 531.902 cv
35.684 531.844 35.68 531.77 35.684 531.676 cv
35.68 531.613 35.684 531.555 35.691 531.508 cv
35.695 531.461 35.703 531.422 35.715 531.391 cv
35.727 531.359 35.742 531.332 35.766 531.309 cv
35.785 531.285 35.813 531.262 35.852 531.238 cv
37.602 530.117 li
37.617 530.109 37.637 530.098 37.66 530.086 cv
37.684 530.082 37.711 530.074 37.746 530.062 cv
37.781 530.059 37.824 530.055 37.871 530.051 cv
37.918 530.051 37.977 530.051 38.047 530.047 cv
38.141 530.051 38.219 530.055 38.281 530.059 cv
38.344 530.07 38.391 530.078 38.426 530.09 cv
38.461 530.105 38.484 530.125 38.496 530.145 cv
38.508 530.168 38.516 530.191 38.516 530.211 cv
38.516 536.887 li
39.891 536.887 li
39.918 536.887 39.945 536.898 39.977 536.914 cv
40 536.934 40.023 536.957 40.047 536.988 cv
40.063 537.023 40.078 537.066 40.086 537.117 cv
40.094 537.168 40.098 537.227 40.102 537.297 cv
cp
f
119.406 537.262 mo
119.406 537.332 119.398 537.395 119.391 537.449 cv
119.375 537.504 119.363 537.551 119.348 537.586 cv
119.332 537.625 119.309 537.652 119.277 537.668 cv
119.246 537.687 119.215 537.695 119.184 537.695 cv
114.984 537.695 li
114.926 537.695 114.879 537.691 114.84 537.676 cv
114.797 537.664 114.762 537.641 114.734 537.605 cv
114.703 537.578 114.68 537.531 114.668 537.473 cv
114.652 537.414 114.648 537.344 114.648 537.254 cv
114.648 537.18 114.648 537.109 114.656 537.051 cv
114.66 536.992 114.676 536.941 114.695 536.895 cv
114.715 536.852 114.738 536.809 114.773 536.762 cv
114.801 536.719 114.84 536.668 114.891 536.613 cv
116.41 535.055 li
116.758 534.695 117.039 534.371 117.254 534.086 cv
117.461 533.801 117.625 533.543 117.742 533.305 cv
117.859 533.074 117.934 532.859 117.973 532.664 cv
118.004 532.473 118.023 532.293 118.027 532.125 cv
118.023 531.957 117.996 531.797 117.941 531.645 cv
117.883 531.496 117.801 531.363 117.695 531.25 cv
117.586 531.137 117.449 531.047 117.293 530.98 cv
117.129 530.914 116.945 530.883 116.734 530.879 cv
116.488 530.883 116.266 530.914 116.07 530.98 cv
115.871 531.047 115.699 531.121 115.555 531.195 cv
115.406 531.277 115.285 531.348 115.188 531.414 cv
115.086 531.48 115.012 531.516 114.965 531.512 cv
114.938 531.516 114.91 531.508 114.891 531.488 cv
114.863 531.477 114.848 531.449 114.836 531.414 cv
114.82 531.379 114.809 531.332 114.801 531.273 cv
114.793 531.215 114.789 531.145 114.789 531.062 cv
114.789 531.004 114.789 530.953 114.793 530.91 cv
114.797 530.867 114.805 530.832 114.816 530.797 cv
114.824 530.77 114.836 530.738 114.855 530.711 cv
114.867 530.684 114.898 530.648 114.949 530.605 cv
114.992 530.566 115.074 530.512 115.191 530.437 cv
115.305 530.371 115.449 530.301 115.625 530.23 cv
115.797 530.164 115.988 530.109 116.199 530.059 cv
116.406 530.016 116.629 529.992 116.863 529.988 cv
117.23 529.992 117.551 530.043 117.828 530.145 cv
118.102 530.25 118.332 530.391 118.516 530.566 cv
118.695 530.75 118.828 530.961 118.922 531.195 cv
119.008 531.437 119.055 531.691 119.059 531.961 cv
119.055 532.207 119.031 532.449 118.992 532.687 cv
118.945 532.93 118.855 533.191 118.719 533.469 cv
118.578 533.75 118.379 534.059 118.117 534.402 cv
117.855 534.746 117.508 535.141 117.074 535.582 cv
115.871 536.84 li
119.176 536.84 li
119.203 536.84 119.234 536.852 119.266 536.867 cv
119.297 536.887 119.32 536.91 119.344 536.945 cv
119.359 536.98 119.375 537.027 119.391 537.078 cv
119.398 537.133 119.406 537.191 119.406 537.262 cv
cp
f
199.016 535.535 mo
199.012 535.664 198.992 535.766 198.957 535.84 cv
198.914 535.918 198.859 535.957 198.793 535.953 cv
197.938 535.953 li
197.938 537.547 li
197.934 537.582 197.926 537.609 197.914 537.629 cv
197.895 537.652 197.867 537.668 197.828 537.684 cv
197.789 537.699 197.734 537.711 197.672 537.719 cv
197.602 537.727 197.52 537.73 197.422 537.73 cv
197.324 537.73 197.242 537.727 197.18 537.719 cv
197.113 537.711 197.063 537.699 197.027 537.684 cv
196.984 537.668 196.957 537.652 196.945 537.629 cv
196.93 537.609 196.926 537.582 196.926 537.547 cv
196.926 535.953 li
193.82 535.953 li
193.773 535.957 193.734 535.949 193.703 535.937 cv
193.672 535.926 193.641 535.906 193.617 535.871 cv
193.59 535.844 193.574 535.797 193.566 535.734 cv
193.555 535.676 193.551 535.598 193.551 535.504 cv
193.551 535.434 193.551 535.371 193.555 535.309 cv
193.559 535.254 193.566 535.199 193.578 535.145 cv
193.59 535.098 193.605 535.051 193.625 535.004 cv
193.645 534.965 193.668 534.914 193.695 534.859 cv
196.406 530.246 li
196.422 530.219 196.449 530.191 196.488 530.164 cv
196.523 530.145 196.574 530.125 196.637 530.105 cv
196.695 530.094 196.77 530.082 196.859 530.074 cv
196.945 530.07 197.051 530.066 197.172 530.062 cv
197.301 530.066 197.414 530.07 197.512 530.078 cv
197.609 530.09 197.688 530.105 197.75 530.117 cv
197.809 530.137 197.855 530.156 197.887 530.18 cv
197.918 530.207 197.934 530.238 197.938 530.27 cv
197.938 535.117 li
198.793 535.117 li
198.859 535.117 198.914 535.152 198.953 535.223 cv
198.992 535.293 199.012 535.398 199.016 535.535 cv
cp
196.926 530.949 mo
196.914 530.949 li
194.473 535.117 li
196.926 535.117 li
cp
f
278.188 535.234 mo
278.184 535.57 278.133 535.895 278.035 536.203 cv
277.93 536.516 277.773 536.789 277.566 537.023 cv
277.352 537.262 277.082 537.453 276.762 537.594 cv
276.434 537.738 276.051 537.805 275.613 537.809 cv
275.293 537.805 275.012 537.77 274.77 537.691 cv
274.523 537.613 274.313 537.5 274.137 537.355 cv
273.953 537.211 273.805 537.035 273.688 536.82 cv
273.566 536.613 273.469 536.371 273.398 536.098 cv
273.324 535.828 273.273 535.531 273.246 535.211 cv
273.211 534.891 273.195 534.547 273.199 534.18 cv
273.195 533.855 273.215 533.527 273.25 533.191 cv
273.285 532.859 273.348 532.539 273.438 532.23 cv
273.527 531.922 273.648 531.633 273.805 531.359 cv
273.957 531.09 274.152 530.852 274.387 530.648 cv
274.621 530.449 274.898 530.289 275.223 530.168 cv
275.547 530.055 275.926 529.996 276.355 529.992 cv
276.5 529.996 276.645 530.004 276.797 530.02 cv
276.941 530.039 277.078 530.062 277.207 530.09 cv
277.328 530.121 277.434 530.156 277.523 530.187 cv
277.609 530.227 277.668 530.254 277.695 530.273 cv
277.723 530.297 277.742 530.32 277.758 530.344 cv
277.766 530.371 277.777 530.398 277.789 530.426 cv
277.793 530.457 277.797 530.488 277.805 530.523 cv
277.805 530.562 277.809 530.609 277.813 530.66 cv
277.809 530.734 277.809 530.797 277.809 530.844 cv
277.809 530.898 277.801 530.937 277.785 530.969 cv
277.77 531 277.75 531.023 277.734 531.039 cv
277.711 531.055 277.684 531.062 277.648 531.062 cv
277.605 531.062 277.547 531.051 277.473 531.023 cv
277.395 530.996 277.305 530.965 277.199 530.93 cv
277.094 530.898 276.965 530.867 276.816 530.84 cv
276.664 530.812 276.488 530.801 276.293 530.797 cv
275.926 530.801 275.613 530.875 275.352 531.02 cv
275.09 531.172 274.875 531.371 274.711 531.621 cv
274.539 531.875 274.418 532.164 274.34 532.492 cv
274.258 532.824 274.211 533.172 274.203 533.527 cv
274.301 533.473 274.414 533.414 274.547 533.352 cv
274.672 533.297 274.813 533.242 274.961 533.191 cv
275.109 533.148 275.27 533.109 275.441 533.078 cv
275.609 533.051 275.789 533.039 275.98 533.035 cv
276.391 533.039 276.734 533.094 277.02 533.203 cv
277.297 533.316 277.527 533.469 277.703 533.664 cv
277.875 533.863 277.996 534.098 278.074 534.363 cv
278.145 534.633 278.184 534.922 278.188 535.234 cv
cp
277.168 535.328 mo
277.164 535.102 277.141 534.898 277.098 534.711 cv
277.051 534.527 276.977 534.367 276.871 534.238 cv
276.766 534.109 276.625 534.012 276.449 533.937 cv
276.273 533.871 276.055 533.836 275.801 533.832 cv
275.652 533.836 275.508 533.848 275.363 533.871 cv
275.219 533.898 275.078 533.934 274.945 533.977 cv
274.805 534.023 274.676 534.078 274.555 534.137 cv
274.43 534.199 274.316 534.262 274.219 534.332 cv
274.215 534.84 274.25 535.266 274.316 535.602 cv
274.379 535.945 274.473 536.215 274.598 536.418 cv
274.723 536.625 274.875 536.773 275.059 536.859 cv
275.242 536.949 275.457 536.992 275.707 536.992 cv
275.953 536.992 276.172 536.945 276.355 536.852 cv
276.539 536.758 276.691 536.633 276.813 536.473 cv
276.934 536.316 277.023 536.137 277.082 535.937 cv
277.137 535.742 277.164 535.539 277.168 535.328 cv
cp
f
357.492 535.746 mo
357.492 536.078 357.434 536.371 357.316 536.625 cv
357.199 536.883 357.027 537.098 356.809 537.273 cv
356.582 537.449 356.309 537.582 355.988 537.672 cv
355.66 537.762 355.289 537.805 354.875 537.809 cv
354.477 537.805 354.125 537.766 353.82 537.684 cv
353.508 537.602 353.246 537.48 353.035 537.32 cv
352.816 537.16 352.652 536.965 352.539 536.727 cv
352.426 536.496 352.371 536.227 352.371 535.922 cv
352.371 535.684 352.41 535.465 352.488 535.266 cv
352.566 535.066 352.676 534.883 352.824 534.715 cv
352.969 534.547 353.152 534.391 353.367 534.242 cv
353.582 534.098 353.824 533.957 354.098 533.82 cv
353.859 533.703 353.652 533.574 353.477 533.437 cv
353.293 533.305 353.141 533.156 353.016 532.996 cv
352.891 532.84 352.793 532.672 352.73 532.488 cv
352.664 532.312 352.633 532.117 352.637 531.902 cv
352.633 531.637 352.684 531.387 352.781 531.152 cv
352.875 530.922 353.02 530.719 353.215 530.543 cv
353.406 530.375 353.652 530.238 353.953 530.137 cv
354.25 530.039 354.598 529.992 355.004 529.988 cv
355.383 529.992 355.715 530.035 355.996 530.125 cv
356.273 530.219 356.504 530.344 356.691 530.5 cv
356.871 530.66 357.008 530.848 357.094 531.062 cv
357.18 531.277 357.223 531.508 357.223 531.754 cv
357.223 531.957 357.188 532.152 357.125 532.332 cv
357.055 532.52 356.961 532.691 356.84 532.852 cv
356.711 533.02 356.559 533.172 356.379 533.312 cv
356.195 533.457 355.984 533.594 355.754 533.715 cv
356.027 533.855 356.277 533.996 356.496 534.141 cv
356.715 534.285 356.895 534.441 357.043 534.605 cv
357.184 534.777 357.297 534.953 357.375 535.133 cv
357.453 535.32 357.492 535.523 357.492 535.746 cv
cp
356.223 531.848 mo
356.219 531.684 356.191 531.535 356.137 531.402 cv
356.078 531.27 355.996 531.156 355.887 531.062 cv
355.777 530.969 355.641 530.898 355.48 530.848 cv
355.316 530.801 355.133 530.777 354.926 530.773 cv
354.504 530.777 354.184 530.871 353.965 531.062 cv
353.746 531.254 353.637 531.516 353.641 531.848 cv
353.637 532.004 353.664 532.148 353.719 532.273 cv
353.77 532.406 353.852 532.531 353.965 532.648 cv
354.074 532.77 354.215 532.883 354.387 532.992 cv
354.559 533.105 354.762 533.223 354.996 533.34 cv
355.391 533.141 355.691 532.914 355.906 532.664 cv
356.113 532.418 356.219 532.145 356.223 531.848 cv
cp
356.469 535.852 mo
356.465 535.676 356.434 535.512 356.367 535.363 cv
356.301 535.215 356.199 535.078 356.066 534.949 cv
355.93 534.824 355.762 534.703 355.563 534.582 cv
355.359 534.465 355.125 534.34 354.863 534.207 cv
354.613 534.332 354.398 534.453 354.211 534.574 cv
354.023 534.695 353.871 534.82 353.754 534.949 cv
353.633 535.078 353.543 535.215 353.484 535.355 cv
353.422 535.504 353.391 535.66 353.395 535.828 cv
353.391 536.211 353.52 536.504 353.785 536.711 cv
354.043 536.918 354.434 537.023 354.949 537.02 cv
355.449 537.023 355.824 536.918 356.082 536.707 cv
356.336 536.5 356.465 536.215 356.469 535.852 cv
cp
f
433.602 537.297 mo
433.598 537.371 433.59 537.434 433.582 537.484 cv
433.566 537.535 433.551 537.578 433.535 537.605 cv
433.512 537.641 433.492 537.664 433.469 537.676 cv
433.445 537.691 433.418 537.695 433.391 537.695 cv
429.422 537.695 li
429.391 537.695 429.367 537.691 429.348 537.676 cv
429.32 537.664 429.297 537.641 429.277 537.605 cv
429.254 537.578 429.238 537.535 429.227 537.484 cv
429.215 537.434 429.207 537.371 429.211 537.297 cv
429.207 537.227 429.215 537.168 429.227 537.117 cv
429.238 537.066 429.254 537.023 429.273 536.988 cv
429.289 536.957 429.309 536.934 429.336 536.914 cv
429.359 536.898 429.387 536.887 429.422 536.887 cv
431.008 536.887 li
431.008 531.109 li
429.539 531.984 li
429.461 532.027 429.402 532.051 429.359 532.055 cv
429.313 532.066 429.277 532.059 429.25 532.027 cv
429.223 532.004 429.203 531.961 429.195 531.902 cv
429.184 531.844 429.18 531.77 429.184 531.676 cv
429.18 531.613 429.184 531.555 429.191 531.508 cv
429.195 531.461 429.203 531.422 429.215 531.391 cv
429.227 531.359 429.242 531.332 429.266 531.309 cv
429.285 531.285 429.313 531.262 429.352 531.238 cv
431.102 530.117 li
431.117 530.109 431.137 530.098 431.16 530.086 cv
431.184 530.082 431.211 530.074 431.246 530.062 cv
431.281 530.059 431.324 530.055 431.371 530.051 cv
431.418 530.051 431.477 530.051 431.547 530.047 cv
431.641 530.051 431.719 530.055 431.781 530.059 cv
431.844 530.07 431.891 530.078 431.926 530.09 cv
431.961 530.105 431.984 530.125 431.996 530.145 cv
432.008 530.168 432.016 530.191 432.016 530.211 cv
432.016 536.887 li
433.391 536.887 li
433.418 536.887 433.445 536.898 433.477 536.914 cv
433.5 536.934 433.523 536.957 433.547 536.988 cv
433.563 537.023 433.578 537.066 433.586 537.117 cv
433.594 537.168 433.598 537.227 433.602 537.297 cv
cp
f
439.957 533.879 mo
439.953 534.465 439.906 534.996 439.82 535.477 cv
439.727 535.961 439.574 536.375 439.363 536.719 cv
439.145 537.066 438.867 537.336 438.523 537.523 cv
438.18 537.715 437.754 537.805 437.254 537.809 cv
436.77 537.805 436.367 537.723 436.043 537.555 cv
435.715 537.383 435.453 537.133 435.254 536.801 cv
435.055 536.473 434.91 536.066 434.828 535.582 cv
434.742 535.102 434.703 534.547 434.703 533.914 cv
434.703 533.34 434.75 532.809 434.844 532.32 cv
434.938 531.84 435.09 531.422 435.301 531.074 cv
435.512 530.73 435.789 530.465 436.137 530.273 cv
436.477 530.086 436.898 529.992 437.406 529.988 cv
437.883 529.992 438.285 530.074 438.613 530.242 cv
438.938 530.414 439.203 530.664 439.406 530.992 cv
439.605 531.324 439.746 531.734 439.832 532.215 cv
439.91 532.703 439.953 533.258 439.957 533.879 cv
cp
438.926 533.949 mo
438.922 533.574 438.906 533.234 438.883 532.93 cv
438.852 532.633 438.813 532.363 438.762 532.129 cv
438.707 531.898 438.641 531.703 438.559 531.535 cv
438.473 531.371 438.371 531.234 438.254 531.125 cv
438.137 531.02 438 530.937 437.852 530.887 cv
437.699 530.84 437.531 530.816 437.348 530.812 cv
437.012 530.816 436.742 530.895 436.535 531.051 cv
436.324 531.207 436.16 531.422 436.043 531.695 cv
435.922 531.969 435.84 532.293 435.801 532.66 cv
435.754 533.031 435.734 533.426 435.738 533.844 cv
435.734 534.414 435.762 534.895 435.824 535.293 cv
435.879 535.691 435.973 536.016 436.105 536.262 cv
436.23 536.516 436.395 536.699 436.59 536.809 cv
436.785 536.926 437.023 536.98 437.313 536.98 cv
437.527 536.98 437.719 536.945 437.887 536.875 cv
438.051 536.805 438.195 536.707 438.316 536.574 cv
438.434 536.445 438.531 536.285 438.613 536.102 cv
438.688 535.918 438.75 535.715 438.801 535.488 cv
438.844 535.266 438.879 535.023 438.898 534.762 cv
438.914 534.504 438.922 534.234 438.926 533.949 cv
cp
f
512.902 537.297 mo
512.898 537.371 512.891 537.434 512.883 537.484 cv
512.867 537.535 512.852 537.578 512.836 537.605 cv
512.813 537.641 512.793 537.664 512.77 537.676 cv
512.746 537.691 512.719 537.695 512.691 537.695 cv
508.723 537.695 li
508.691 537.695 508.668 537.691 508.648 537.676 cv
508.621 537.664 508.598 537.641 508.578 537.605 cv
508.555 537.578 508.539 537.535 508.527 537.484 cv
508.516 537.434 508.508 537.371 508.512 537.297 cv
508.508 537.227 508.516 537.168 508.527 537.117 cv
508.539 537.066 508.555 537.023 508.574 536.988 cv
508.59 536.957 508.609 536.934 508.637 536.914 cv
508.66 536.898 508.688 536.887 508.723 536.887 cv
510.309 536.887 li
510.309 531.109 li
508.84 531.984 li
508.762 532.027 508.703 532.051 508.66 532.055 cv
508.613 532.066 508.578 532.059 508.551 532.027 cv
508.523 532.004 508.504 531.961 508.496 531.902 cv
508.484 531.844 508.48 531.77 508.484 531.676 cv
508.48 531.613 508.484 531.555 508.492 531.508 cv
508.496 531.461 508.504 531.422 508.516 531.391 cv
508.527 531.359 508.543 531.332 508.566 531.309 cv
508.586 531.285 508.613 531.262 508.652 531.238 cv
510.402 530.117 li
510.418 530.109 510.438 530.098 510.461 530.086 cv
510.484 530.082 510.512 530.074 510.547 530.062 cv
510.582 530.059 510.625 530.055 510.672 530.051 cv
510.719 530.051 510.777 530.051 510.848 530.047 cv
510.941 530.051 511.02 530.055 511.082 530.059 cv
511.145 530.07 511.191 530.078 511.227 530.09 cv
511.262 530.105 511.285 530.125 511.297 530.145 cv
511.309 530.168 511.316 530.191 511.316 530.211 cv
511.316 536.887 li
512.691 536.887 li
512.719 536.887 512.746 536.898 512.777 536.914 cv
512.801 536.934 512.824 536.957 512.848 536.988 cv
512.863 537.023 512.879 537.066 512.887 537.117 cv
512.895 537.168 512.898 537.227 512.902 537.297 cv
cp
f
519.004 537.262 mo
519.004 537.332 518.996 537.395 518.988 537.449 cv
518.973 537.504 518.961 537.551 518.945 537.586 cv
518.93 537.625 518.906 537.652 518.875 537.668 cv
518.844 537.687 518.813 537.695 518.781 537.695 cv
514.582 537.695 li
514.523 537.695 514.477 537.691 514.438 537.676 cv
514.395 537.664 514.359 537.641 514.332 537.605 cv
514.301 537.578 514.277 537.531 514.266 537.473 cv
514.25 537.414 514.246 537.344 514.246 537.254 cv
514.246 537.18 514.246 537.109 514.254 537.051 cv
514.258 536.992 514.273 536.941 514.293 536.895 cv
514.313 536.852 514.336 536.809 514.371 536.762 cv
514.398 536.719 514.438 536.668 514.488 536.613 cv
516.008 535.055 li
516.355 534.695 516.637 534.371 516.852 534.086 cv
517.059 533.801 517.223 533.543 517.34 533.305 cv
517.457 533.074 517.531 532.859 517.57 532.664 cv
517.602 532.473 517.621 532.293 517.625 532.125 cv
517.621 531.957 517.594 531.797 517.539 531.645 cv
517.48 531.496 517.398 531.363 517.293 531.25 cv
517.184 531.137 517.047 531.047 516.891 530.98 cv
516.727 530.914 516.543 530.883 516.332 530.879 cv
516.086 530.883 515.863 530.914 515.668 530.98 cv
515.469 531.047 515.297 531.121 515.152 531.195 cv
515.004 531.277 514.883 531.348 514.785 531.414 cv
514.684 531.48 514.609 531.516 514.563 531.512 cv
514.535 531.516 514.508 531.508 514.488 531.488 cv
514.461 531.477 514.445 531.449 514.434 531.414 cv
514.418 531.379 514.406 531.332 514.398 531.273 cv
514.391 531.215 514.387 531.145 514.387 531.062 cv
514.387 531.004 514.387 530.953 514.391 530.91 cv
514.395 530.867 514.402 530.832 514.414 530.797 cv
514.422 530.77 514.434 530.738 514.453 530.711 cv
514.465 530.684 514.496 530.648 514.547 530.605 cv
514.59 530.566 514.672 530.512 514.789 530.437 cv
514.902 530.371 515.047 530.301 515.223 530.23 cv
515.395 530.164 515.586 530.109 515.797 530.059 cv
516.004 530.016 516.227 529.992 516.461 529.988 cv
516.828 529.992 517.148 530.043 517.426 530.145 cv
517.699 530.25 517.93 530.391 518.113 530.566 cv
518.293 530.75 518.426 530.961 518.52 531.195 cv
518.605 531.437 518.652 531.691 518.656 531.961 cv
518.652 532.207 518.629 532.449 518.59 532.687 cv
518.543 532.93 518.453 533.191 518.316 533.469 cv
518.176 533.75 517.977 534.059 517.715 534.402 cv
517.453 534.746 517.105 535.141 516.672 535.582 cv
515.469 536.84 li
518.773 536.84 li
518.801 536.84 518.832 536.852 518.863 536.867 cv
518.895 536.887 518.918 536.91 518.941 536.945 cv
518.957 536.98 518.973 537.027 518.988 537.078 cv
518.996 537.133 519.004 537.191 519.004 537.262 cv
cp
f
592.191 537.297 mo
592.188 537.371 592.18 537.434 592.172 537.484 cv
592.156 537.535 592.141 537.578 592.125 537.605 cv
592.102 537.641 592.082 537.664 592.059 537.676 cv
592.035 537.691 592.008 537.695 591.98 537.695 cv
588.012 537.695 li
587.98 537.695 587.957 537.691 587.938 537.676 cv
587.91 537.664 587.887 537.641 587.867 537.605 cv
587.844 537.578 587.828 537.535 587.816 537.484 cv
587.805 537.434 587.797 537.371 587.801 537.297 cv
587.797 537.227 587.805 537.168 587.816 537.117 cv
587.828 537.066 587.844 537.023 587.863 536.988 cv
587.879 536.957 587.898 536.934 587.926 536.914 cv
587.949 536.898 587.977 536.887 588.012 536.887 cv
589.598 536.887 li
589.598 531.109 li
588.129 531.984 li
588.051 532.027 587.992 532.051 587.949 532.055 cv
587.902 532.066 587.867 532.059 587.84 532.027 cv
587.813 532.004 587.793 531.961 587.785 531.902 cv
587.773 531.844 587.77 531.77 587.773 531.676 cv
587.77 531.613 587.773 531.555 587.781 531.508 cv
587.785 531.461 587.793 531.422 587.805 531.391 cv
587.816 531.359 587.832 531.332 587.855 531.309 cv
587.875 531.285 587.902 531.262 587.941 531.238 cv
589.691 530.117 li
589.707 530.109 589.727 530.098 589.75 530.086 cv
589.773 530.082 589.801 530.074 589.836 530.062 cv
589.871 530.059 589.914 530.055 589.961 530.051 cv
590.008 530.051 590.066 530.051 590.137 530.047 cv
590.23 530.051 590.309 530.055 590.371 530.059 cv
590.434 530.07 590.48 530.078 590.516 530.09 cv
590.551 530.105 590.574 530.125 590.586 530.145 cv
590.598 530.168 590.605 530.191 590.605 530.211 cv
590.605 536.887 li
591.98 536.887 li
592.008 536.887 592.035 536.898 592.066 536.914 cv
592.09 536.934 592.113 536.957 592.137 536.988 cv
592.152 537.023 592.168 537.066 592.176 537.117 cv
592.184 537.168 592.188 537.227 592.191 537.297 cv
cp
f
598.617 535.535 mo
598.613 535.664 598.594 535.766 598.559 535.84 cv
598.516 535.918 598.461 535.957 598.395 535.953 cv
597.539 535.953 li
597.539 537.547 li
597.535 537.582 597.527 537.609 597.516 537.629 cv
597.496 537.652 597.469 537.668 597.43 537.684 cv
597.391 537.699 597.336 537.711 597.273 537.719 cv
597.203 537.727 597.121 537.73 597.023 537.73 cv
596.926 537.73 596.844 537.727 596.781 537.719 cv
596.715 537.711 596.664 537.699 596.629 537.684 cv
596.586 537.668 596.559 537.652 596.547 537.629 cv
596.531 537.609 596.527 537.582 596.527 537.547 cv
596.527 535.953 li
593.422 535.953 li
593.375 535.957 593.336 535.949 593.305 535.937 cv
593.273 535.926 593.242 535.906 593.219 535.871 cv
593.191 535.844 593.176 535.797 593.168 535.734 cv
593.156 535.676 593.152 535.598 593.152 535.504 cv
593.152 535.434 593.152 535.371 593.156 535.309 cv
593.16 535.254 593.168 535.199 593.18 535.145 cv
593.191 535.098 593.207 535.051 593.227 535.004 cv
593.246 534.965 593.27 534.914 593.297 534.859 cv
596.008 530.246 li
596.023 530.219 596.051 530.191 596.09 530.164 cv
596.125 530.145 596.176 530.125 596.238 530.105 cv
596.297 530.094 596.371 530.082 596.461 530.074 cv
596.547 530.07 596.652 530.066 596.773 530.062 cv
596.902 530.066 597.016 530.07 597.113 530.078 cv
597.211 530.09 597.289 530.105 597.352 530.117 cv
597.41 530.137 597.457 530.156 597.488 530.18 cv
597.52 530.207 597.535 530.238 597.539 530.27 cv
597.539 535.117 li
598.395 535.117 li
598.461 535.117 598.516 535.152 598.555 535.223 cv
598.594 535.293 598.613 535.398 598.617 535.535 cv
cp
596.527 530.949 mo
596.516 530.949 li
594.074 535.117 li
596.527 535.117 li
cp
f
671.512 537.297 mo
671.508 537.371 671.5 537.434 671.492 537.484 cv
671.477 537.535 671.461 537.578 671.445 537.605 cv
671.422 537.641 671.402 537.664 671.379 537.676 cv
671.355 537.691 671.328 537.695 671.301 537.695 cv
667.332 537.695 li
667.301 537.695 667.277 537.691 667.258 537.676 cv
667.23 537.664 667.207 537.641 667.188 537.605 cv
667.164 537.578 667.148 537.535 667.137 537.484 cv
667.125 537.434 667.117 537.371 667.121 537.297 cv
667.117 537.227 667.125 537.168 667.137 537.117 cv
667.148 537.066 667.164 537.023 667.184 536.988 cv
667.199 536.957 667.219 536.934 667.246 536.914 cv
667.27 536.898 667.297 536.887 667.332 536.887 cv
668.918 536.887 li
668.918 531.109 li
667.449 531.984 li
667.371 532.027 667.313 532.051 667.27 532.055 cv
667.223 532.066 667.188 532.059 667.16 532.027 cv
667.133 532.004 667.113 531.961 667.105 531.902 cv
667.094 531.844 667.09 531.77 667.094 531.676 cv
667.09 531.613 667.094 531.555 667.102 531.508 cv
667.105 531.461 667.113 531.422 667.125 531.391 cv
667.137 531.359 667.152 531.332 667.176 531.309 cv
667.195 531.285 667.223 531.262 667.262 531.238 cv
669.012 530.117 li
669.027 530.109 669.047 530.098 669.07 530.086 cv
669.094 530.082 669.121 530.074 669.156 530.062 cv
669.191 530.059 669.234 530.055 669.281 530.051 cv
669.328 530.051 669.387 530.051 669.457 530.047 cv
669.551 530.051 669.629 530.055 669.691 530.059 cv
669.754 530.07 669.801 530.078 669.836 530.09 cv
669.871 530.105 669.895 530.125 669.906 530.145 cv
669.918 530.168 669.926 530.191 669.926 530.211 cv
669.926 536.887 li
671.301 536.887 li
671.328 536.887 671.355 536.898 671.387 536.914 cv
671.41 536.934 671.434 536.957 671.457 536.988 cv
671.473 537.023 671.488 537.066 671.496 537.117 cv
671.504 537.168 671.508 537.227 671.512 537.297 cv
cp
f
677.809 535.234 mo
677.805 535.57 677.754 535.895 677.656 536.203 cv
677.551 536.516 677.395 536.789 677.188 537.023 cv
676.973 537.262 676.703 537.453 676.383 537.594 cv
676.055 537.738 675.672 537.805 675.234 537.809 cv
674.914 537.805 674.633 537.77 674.391 537.691 cv
674.145 537.613 673.934 537.5 673.758 537.355 cv
673.574 537.211 673.426 537.035 673.309 536.82 cv
673.188 536.613 673.09 536.371 673.02 536.098 cv
672.945 535.828 672.895 535.531 672.867 535.211 cv
672.832 534.891 672.816 534.547 672.82 534.18 cv
672.816 533.855 672.836 533.527 672.871 533.191 cv
672.906 532.859 672.969 532.539 673.059 532.23 cv
673.148 531.922 673.27 531.633 673.426 531.359 cv
673.578 531.09 673.773 530.852 674.008 530.648 cv
674.242 530.449 674.52 530.289 674.844 530.168 cv
675.168 530.055 675.547 529.996 675.977 529.992 cv
676.121 529.996 676.266 530.004 676.418 530.02 cv
676.563 530.039 676.699 530.062 676.828 530.09 cv
676.949 530.121 677.055 530.156 677.145 530.187 cv
677.23 530.227 677.289 530.254 677.316 530.273 cv
677.344 530.297 677.363 530.32 677.379 530.344 cv
677.387 530.371 677.398 530.398 677.41 530.426 cv
677.414 530.457 677.418 530.488 677.426 530.523 cv
677.426 530.562 677.43 530.609 677.434 530.66 cv
677.43 530.734 677.43 530.797 677.43 530.844 cv
677.43 530.898 677.422 530.937 677.406 530.969 cv
677.391 531 677.371 531.023 677.355 531.039 cv
677.332 531.055 677.305 531.062 677.27 531.062 cv
677.227 531.062 677.168 531.051 677.094 531.023 cv
677.016 530.996 676.926 530.965 676.82 530.93 cv
676.715 530.898 676.586 530.867 676.438 530.84 cv
676.285 530.812 676.109 530.801 675.914 530.797 cv
675.547 530.801 675.234 530.875 674.973 531.02 cv
674.711 531.172 674.496 531.371 674.332 531.621 cv
674.16 531.875 674.039 532.164 673.961 532.492 cv
673.879 532.824 673.832 533.172 673.824 533.527 cv
673.922 533.473 674.035 533.414 674.168 533.352 cv
674.293 533.297 674.434 533.242 674.582 533.191 cv
674.73 533.148 674.891 533.109 675.063 533.078 cv
675.23 533.051 675.41 533.039 675.602 533.035 cv
676.012 533.039 676.355 533.094 676.641 533.203 cv
676.918 533.316 677.148 533.469 677.324 533.664 cv
677.496 533.863 677.617 534.098 677.695 534.363 cv
677.766 534.633 677.805 534.922 677.809 535.234 cv
cp
676.789 535.328 mo
676.785 535.102 676.762 534.898 676.719 534.711 cv
676.672 534.527 676.598 534.367 676.492 534.238 cv
676.387 534.109 676.246 534.012 676.07 533.937 cv
675.895 533.871 675.676 533.836 675.422 533.832 cv
675.273 533.836 675.129 533.848 674.984 533.871 cv
674.84 533.898 674.699 533.934 674.566 533.977 cv
674.426 534.023 674.297 534.078 674.176 534.137 cv
674.051 534.199 673.938 534.262 673.84 534.332 cv
673.836 534.84 673.871 535.266 673.938 535.602 cv
674 535.945 674.094 536.215 674.219 536.418 cv
674.344 536.625 674.496 536.773 674.68 536.859 cv
674.863 536.949 675.078 536.992 675.328 536.992 cv
675.574 536.992 675.793 536.945 675.977 536.852 cv
676.16 536.758 676.313 536.633 676.434 536.473 cv
676.555 536.316 676.645 536.137 676.703 535.937 cv
676.758 535.742 676.785 535.539 676.789 535.328 cv
cp
f
294.223 551.996 mo
294.219 552.102 294.203 552.191 294.168 552.262 cv
294.133 552.34 294.086 552.398 294.031 552.441 cv
293.973 552.492 293.91 552.527 293.844 552.543 cv
293.77 552.566 293.699 552.574 293.637 552.574 cv
293.191 552.574 li
293.051 552.574 292.93 552.562 292.824 552.531 cv
292.719 552.508 292.621 552.453 292.527 552.375 cv
292.434 552.301 292.34 552.199 292.246 552.066 cv
292.152 551.937 292.051 551.773 291.945 551.57 cv
288.871 545.832 li
288.707 545.539 288.543 545.23 288.383 544.902 cv
288.215 544.582 288.063 544.266 287.926 543.957 cv
287.91 543.957 li
287.918 544.332 287.926 544.715 287.934 545.102 cv
287.938 545.492 287.938 545.879 287.941 546.262 cv
287.941 552.348 li
287.938 552.387 287.926 552.422 287.906 552.453 cv
287.883 552.488 287.848 552.516 287.797 552.531 cv
287.742 552.551 287.672 552.562 287.59 552.578 cv
287.504 552.59 287.398 552.598 287.27 552.598 cv
287.133 552.598 287.023 552.59 286.941 552.578 cv
286.855 552.562 286.789 552.551 286.742 552.531 cv
286.691 552.516 286.656 552.488 286.633 552.453 cv
286.609 552.422 286.598 552.387 286.602 552.348 cv
286.602 543.043 li
286.598 542.836 286.656 542.687 286.777 542.598 cv
286.895 542.512 287.023 542.469 287.164 542.465 cv
287.824 542.465 li
287.977 542.469 288.109 542.48 288.215 542.504 cv
288.316 542.531 288.41 542.574 288.496 542.633 cv
288.578 542.695 288.656 542.777 288.738 542.883 cv
288.813 542.992 288.895 543.129 288.98 543.285 cv
291.348 547.711 li
291.492 547.984 291.633 548.25 291.77 548.504 cv
291.902 548.762 292.031 549.016 292.16 549.262 cv
292.281 549.516 292.406 549.762 292.531 550 cv
292.652 550.242 292.773 550.484 292.898 550.727 cv
292.906 550.727 li
292.895 550.32 292.887 549.891 292.887 549.445 cv
292.879 549 292.879 548.574 292.883 548.164 cv
292.883 542.691 li
292.879 542.656 292.891 542.621 292.914 542.59 cv
292.938 542.559 292.973 542.531 293.027 542.508 cv
293.074 542.484 293.145 542.469 293.23 542.457 cv
293.316 542.449 293.426 542.445 293.566 542.441 cv
293.684 542.445 293.789 542.449 293.879 542.457 cv
293.965 542.469 294.031 542.484 294.082 542.508 cv
294.129 542.531 294.164 542.559 294.188 542.59 cv
294.207 542.621 294.219 542.656 294.223 542.691 cv
cp
f
302.77 552.355 mo
302.766 552.402 302.758 552.437 302.742 552.461 cv
302.723 552.492 302.688 552.516 302.645 552.535 cv
302.598 552.555 302.539 552.566 302.465 552.582 cv
302.387 552.59 302.293 552.598 302.188 552.598 cv
302.063 552.598 301.965 552.59 301.895 552.582 cv
301.816 552.566 301.758 552.555 301.715 552.535 cv
301.668 552.516 301.637 552.492 301.625 552.461 cv
301.605 552.437 301.598 552.402 301.602 552.355 cv
301.602 551.43 li
301.199 551.875 300.805 552.195 300.418 552.395 cv
300.023 552.598 299.629 552.695 299.234 552.699 cv
298.762 552.695 298.367 552.621 298.051 552.465 cv
297.73 552.312 297.473 552.102 297.277 551.832 cv
297.074 551.566 296.934 551.254 296.852 550.895 cv
296.762 550.539 296.719 550.105 296.723 549.598 cv
296.723 545.344 li
296.719 545.305 296.727 545.27 296.75 545.238 cv
296.766 545.211 296.801 545.187 296.855 545.16 cv
296.902 545.141 296.973 545.125 297.059 545.113 cv
297.141 545.109 297.242 545.105 297.371 545.102 cv
297.492 545.105 297.598 545.109 297.684 545.113 cv
297.766 545.125 297.832 545.141 297.879 545.16 cv
297.926 545.187 297.961 545.211 297.984 545.238 cv
298.004 545.27 298.012 545.305 298.016 545.344 cv
298.016 549.426 li
298.012 549.84 298.043 550.168 298.105 550.414 cv
298.164 550.66 298.254 550.871 298.379 551.043 cv
298.496 551.223 298.652 551.355 298.844 551.449 cv
299.027 551.547 299.246 551.598 299.496 551.594 cv
299.816 551.598 300.137 551.48 300.461 551.25 cv
300.777 551.023 301.117 550.687 301.477 550.242 cv
301.477 545.344 li
301.477 545.305 301.484 545.27 301.504 545.238 cv
301.52 545.211 301.555 545.187 301.609 545.16 cv
301.66 545.141 301.727 545.125 301.809 545.113 cv
301.887 545.109 301.992 545.105 302.125 545.102 cv
302.246 545.105 302.352 545.109 302.438 545.113 cv
302.52 545.125 302.582 545.141 302.629 545.16 cv
302.672 545.187 302.707 545.211 302.734 545.238 cv
302.754 545.27 302.766 545.305 302.77 545.344 cv
cp
f
315.547 552.355 mo
315.543 552.402 315.535 552.437 315.516 552.461 cv
315.492 552.492 315.457 552.516 315.414 552.535 cv
315.363 552.555 315.297 552.566 315.219 552.582 cv
315.133 552.59 315.031 552.598 314.906 552.598 cv
314.773 552.598 314.664 552.59 314.586 552.582 cv
314.5 552.566 314.434 552.555 314.387 552.535 cv
314.332 552.516 314.297 552.492 314.281 552.461 cv
314.258 552.437 314.25 552.402 314.25 552.355 cv
314.25 548.094 li
314.25 547.801 314.223 547.531 314.172 547.285 cv
314.117 547.043 314.035 546.832 313.922 546.652 cv
313.809 546.477 313.664 546.34 313.488 546.246 cv
313.309 546.152 313.098 546.105 312.863 546.105 cv
312.566 546.105 312.27 546.223 311.973 546.449 cv
311.668 546.684 311.34 547.016 310.984 547.453 cv
310.984 552.355 li
310.98 552.402 310.969 552.437 310.953 552.461 cv
310.93 552.492 310.898 552.516 310.852 552.535 cv
310.801 552.555 310.734 552.566 310.652 552.582 cv
310.566 552.59 310.461 552.598 310.34 552.598 cv
310.219 552.598 310.117 552.59 310.031 552.582 cv
309.945 552.566 309.875 552.555 309.828 552.535 cv
309.773 552.516 309.742 552.492 309.727 552.461 cv
309.707 552.437 309.695 552.402 309.699 552.355 cv
309.699 548.094 li
309.695 547.801 309.668 547.531 309.613 547.285 cv
309.555 547.043 309.469 546.832 309.355 546.652 cv
309.242 546.477 309.098 546.34 308.926 546.246 cv
308.746 546.152 308.539 546.105 308.305 546.105 cv
308.004 546.105 307.707 546.223 307.406 546.449 cv
307.105 546.684 306.777 547.016 306.426 547.453 cv
306.426 552.355 li
306.422 552.402 306.41 552.437 306.395 552.461 cv
306.371 552.492 306.34 552.516 306.293 552.535 cv
306.246 552.555 306.18 552.566 306.102 552.582 cv
306.016 552.59 305.91 552.598 305.781 552.598 cv
305.652 552.598 305.547 552.59 305.469 552.582 cv
305.383 552.566 305.316 552.555 305.27 552.535 cv
305.215 552.516 305.184 552.492 305.168 552.461 cv
305.148 552.437 305.137 552.402 305.141 552.355 cv
305.141 545.344 li
305.137 545.305 305.145 545.27 305.164 545.238 cv
305.176 545.211 305.207 545.187 305.258 545.16 cv
305.301 545.141 305.363 545.125 305.438 545.113 cv
305.508 545.109 305.602 545.105 305.727 545.102 cv
305.836 545.105 305.934 545.109 306.012 545.113 cv
306.086 545.125 306.145 545.141 306.188 545.16 cv
306.227 545.187 306.254 545.211 306.273 545.238 cv
306.289 545.27 306.297 545.305 306.301 545.344 cv
306.301 546.27 li
306.691 545.828 307.074 545.508 307.449 545.301 cv
307.816 545.098 308.195 544.992 308.578 544.992 cv
308.867 544.992 309.125 545.027 309.359 545.094 cv
309.586 545.164 309.793 545.258 309.973 545.379 cv
310.148 545.5 310.297 545.645 310.426 545.812 cv
310.547 545.984 310.652 546.176 310.738 546.379 cv
310.969 546.129 311.191 545.914 311.402 545.734 cv
311.613 545.562 311.816 545.418 312.012 545.305 cv
312.207 545.199 312.395 545.121 312.578 545.066 cv
312.762 545.02 312.949 544.992 313.137 544.992 cv
313.59 544.992 313.969 545.074 314.273 545.23 cv
314.578 545.395 314.824 545.605 315.02 545.867 cv
315.207 546.133 315.344 546.441 315.426 546.797 cv
315.504 547.152 315.543 547.527 315.547 547.922 cv
cp
f
324.348 548.754 mo
324.344 549.363 324.277 549.914 324.148 550.398 cv
324.012 550.887 323.816 551.301 323.563 551.641 cv
323.305 551.984 322.988 552.246 322.617 552.426 cv
322.242 552.609 321.816 552.695 321.332 552.699 cv
321.105 552.695 320.898 552.676 320.711 552.633 cv
320.523 552.586 320.336 552.516 320.156 552.418 cv
319.969 552.32 319.789 552.195 319.609 552.043 cv
319.426 551.895 319.234 551.715 319.035 551.5 cv
319.035 552.355 li
319.035 552.402 319.023 552.437 319.004 552.465 cv
318.98 552.5 318.945 552.523 318.902 552.539 cv
318.852 552.555 318.793 552.566 318.727 552.582 cv
318.652 552.59 318.563 552.598 318.457 552.598 cv
318.348 552.598 318.262 552.59 318.191 552.582 cv
318.117 552.566 318.055 552.555 318.012 552.539 cv
317.961 552.523 317.93 552.5 317.918 552.465 cv
317.898 552.437 317.891 552.402 317.895 552.355 cv
317.895 541.945 li
317.891 541.906 317.902 541.871 317.922 541.836 cv
317.938 541.809 317.969 541.781 318.023 541.758 cv
318.07 541.738 318.137 541.723 318.223 541.711 cv
318.301 541.703 318.406 541.699 318.535 541.695 cv
318.664 541.699 318.77 541.703 318.855 541.711 cv
318.934 541.723 319 541.738 319.047 541.758 cv
319.094 541.781 319.125 541.809 319.148 541.836 cv
319.164 541.871 319.176 541.906 319.18 541.945 cv
319.18 546.145 li
319.387 545.934 319.59 545.754 319.785 545.609 cv
319.98 545.465 320.168 545.348 320.355 545.254 cv
320.539 545.168 320.727 545.102 320.918 545.055 cv
321.102 545.016 321.301 544.992 321.512 544.992 cv
322.016 544.992 322.449 545.094 322.816 545.297 cv
323.176 545.5 323.469 545.773 323.695 546.109 cv
323.918 546.453 324.086 546.852 324.191 547.309 cv
324.293 547.766 324.344 548.246 324.348 548.754 cv
cp
323.016 548.902 mo
323.012 548.547 322.984 548.199 322.934 547.859 cv
322.875 547.523 322.781 547.227 322.645 546.965 cv
322.508 546.707 322.328 546.496 322.105 546.336 cv
321.879 546.18 321.598 546.102 321.266 546.098 cv
321.098 546.102 320.934 546.125 320.773 546.168 cv
320.609 546.219 320.445 546.297 320.277 546.402 cv
320.109 546.516 319.934 546.656 319.758 546.824 cv
319.574 547 319.383 547.215 319.18 547.469 cv
319.18 550.266 li
319.535 550.699 319.875 551.031 320.199 551.254 cv
320.523 551.484 320.859 551.598 321.211 551.594 cv
321.531 551.598 321.809 551.52 322.043 551.359 cv
322.27 551.207 322.457 551 322.602 550.738 cv
322.746 550.484 322.852 550.195 322.918 549.875 cv
322.98 549.559 323.012 549.234 323.016 548.902 cv
cp
f
332.258 548.547 mo
332.254 548.75 332.203 548.891 332.105 548.977 cv
332 549.062 331.883 549.105 331.758 549.105 cv
327.141 549.105 li
327.137 549.496 327.176 549.848 327.258 550.16 cv
327.332 550.473 327.465 550.742 327.648 550.961 cv
327.828 551.187 328.063 551.359 328.359 551.477 cv
328.648 551.602 329.008 551.66 329.434 551.656 cv
329.766 551.66 330.063 551.633 330.324 551.574 cv
330.586 551.523 330.813 551.461 331.004 551.391 cv
331.191 551.324 331.348 551.266 331.473 551.207 cv
331.594 551.156 331.688 551.129 331.75 551.125 cv
331.785 551.129 331.816 551.137 331.848 551.152 cv
331.875 551.172 331.898 551.199 331.918 551.234 cv
331.93 551.273 331.941 551.324 331.953 551.387 cv
331.957 551.453 331.961 551.531 331.965 551.625 cv
331.961 551.695 331.957 551.754 331.957 551.801 cv
331.949 551.848 331.945 551.891 331.938 551.93 cv
331.93 551.969 331.914 552.004 331.898 552.035 cv
331.875 552.066 331.852 552.098 331.828 552.125 cv
331.797 552.156 331.715 552.203 331.574 552.266 cv
331.434 552.332 331.25 552.395 331.027 552.457 cv
330.801 552.52 330.543 552.574 330.25 552.625 cv
329.957 552.672 329.645 552.695 329.313 552.699 cv
328.734 552.695 328.227 552.617 327.797 552.457 cv
327.359 552.297 326.996 552.059 326.703 551.742 cv
326.402 551.426 326.18 551.031 326.031 550.551 cv
325.883 550.074 325.809 549.516 325.809 548.879 cv
325.809 548.281 325.883 547.742 326.039 547.258 cv
326.191 546.781 326.418 546.371 326.715 546.035 cv
327.008 545.699 327.363 545.441 327.777 545.262 cv
328.191 545.082 328.656 544.992 329.172 544.992 cv
329.723 544.992 330.191 545.082 330.578 545.258 cv
330.965 545.437 331.281 545.676 331.535 545.973 cv
331.781 546.273 331.965 546.625 332.082 547.023 cv
332.195 547.43 332.254 547.859 332.258 548.312 cv
cp
330.965 548.164 mo
330.98 547.488 330.828 546.957 330.512 546.574 cv
330.195 546.191 329.727 546 329.109 545.996 cv
328.785 546 328.504 546.059 328.266 546.176 cv
328.023 546.297 327.824 546.457 327.664 546.652 cv
327.5 546.852 327.375 547.082 327.289 547.344 cv
327.199 547.605 327.148 547.879 327.141 548.164 cv
cp
f
338.32 545.801 mo
338.316 545.918 338.316 546.016 338.313 546.09 cv
338.305 546.172 338.293 546.234 338.281 546.273 cv
338.262 546.32 338.242 546.352 338.223 546.375 cv
338.195 546.398 338.164 546.41 338.125 546.41 cv
338.082 546.41 338.031 546.398 337.973 546.375 cv
337.91 546.352 337.84 546.328 337.77 546.305 cv
337.691 546.281 337.609 546.262 337.516 546.238 cv
337.422 546.223 337.32 546.211 337.211 546.207 cv
337.078 546.211 336.949 546.238 336.828 546.285 cv
336.703 546.34 336.574 546.426 336.438 546.543 cv
336.297 546.668 336.152 546.824 336.004 547.02 cv
335.852 547.215 335.684 547.457 335.504 547.742 cv
335.504 552.355 li
335.5 552.402 335.488 552.437 335.473 552.461 cv
335.449 552.492 335.418 552.516 335.371 552.535 cv
335.324 552.555 335.258 552.566 335.18 552.582 cv
335.094 552.59 334.988 552.598 334.859 552.598 cv
334.73 552.598 334.625 552.59 334.547 552.582 cv
334.461 552.566 334.395 552.555 334.348 552.535 cv
334.293 552.516 334.262 552.492 334.246 552.461 cv
334.227 552.437 334.215 552.402 334.219 552.355 cv
334.219 545.344 li
334.215 545.305 334.223 545.27 334.242 545.238 cv
334.254 545.211 334.285 545.187 334.336 545.16 cv
334.379 545.141 334.441 545.125 334.516 545.113 cv
334.586 545.109 334.68 545.105 334.805 545.102 cv
334.914 545.105 335.012 545.109 335.09 545.113 cv
335.164 545.125 335.223 545.141 335.266 545.16 cv
335.305 545.187 335.332 545.211 335.352 545.238 cv
335.367 545.27 335.375 545.305 335.379 545.344 cv
335.379 546.363 li
335.566 546.082 335.75 545.855 335.922 545.68 cv
336.09 545.504 336.25 545.363 336.402 545.262 cv
336.551 545.16 336.699 545.09 336.848 545.051 cv
336.996 545.012 337.145 544.992 337.297 544.992 cv
337.363 544.992 337.441 544.996 337.527 545.004 cv
337.613 545.012 337.703 545.027 337.797 545.047 cv
337.891 545.07 337.973 545.094 338.051 545.117 cv
338.121 545.145 338.176 545.172 338.211 545.195 cv
338.238 545.227 338.258 545.25 338.273 545.27 cv
338.281 545.297 338.293 545.328 338.301 545.359 cv
338.309 545.398 338.313 545.449 338.316 545.52 cv
338.316 545.59 338.316 545.684 338.32 545.801 cv
cp
f
350.078 548.77 mo
350.074 549.348 350 549.875 349.852 550.352 cv
349.699 550.836 349.473 551.25 349.176 551.594 cv
348.875 551.945 348.5 552.215 348.055 552.406 cv
347.602 552.602 347.082 552.695 346.492 552.699 cv
345.914 552.695 345.41 552.613 344.984 552.441 cv
344.555 552.273 344.199 552.023 343.914 551.695 cv
343.625 551.367 343.41 550.973 343.273 550.504 cv
343.133 550.039 343.066 549.508 343.066 548.91 cv
343.066 548.344 343.137 547.816 343.285 547.336 cv
343.43 546.855 343.656 546.441 343.957 546.09 cv
344.254 545.742 344.625 545.473 345.074 545.281 cv
345.52 545.09 346.043 544.992 346.641 544.992 cv
347.219 544.992 347.719 545.078 348.148 545.25 cv
348.574 545.422 348.934 545.672 349.219 546 cv
349.504 546.328 349.719 546.727 349.863 547.191 cv
350.004 547.66 350.074 548.187 350.078 548.77 cv
cp
348.746 548.855 mo
348.742 548.48 348.707 548.121 348.641 547.781 cv
348.566 547.445 348.449 547.152 348.289 546.895 cv
348.125 546.645 347.906 546.441 347.629 546.289 cv
347.348 546.145 347 546.07 346.59 546.066 cv
346.203 546.07 345.875 546.137 345.602 546.27 cv
345.324 546.406 345.098 546.598 344.922 546.844 cv
344.742 547.09 344.609 547.383 344.527 547.719 cv
344.438 548.059 344.395 548.426 344.398 548.824 cv
344.395 549.211 344.43 549.574 344.504 549.91 cv
344.57 550.25 344.688 550.543 344.855 550.793 cv
345.02 551.047 345.242 551.25 345.52 551.395 cv
345.797 551.547 346.145 551.621 346.559 551.617 cv
346.934 551.621 347.262 551.551 347.543 551.414 cv
347.82 551.281 348.047 551.094 348.227 550.844 cv
348.402 550.602 348.531 550.309 348.617 549.973 cv
348.699 549.637 348.742 549.266 348.746 548.855 cv
cp
f
355.813 542.457 mo
355.809 542.559 355.805 542.637 355.797 542.695 cv
355.785 542.758 355.773 542.809 355.762 542.84 cv
355.746 542.879 355.73 542.902 355.711 542.914 cv
355.688 542.93 355.66 542.937 355.633 542.934 cv
355.594 542.937 355.547 542.926 355.496 542.898 cv
355.438 542.879 355.371 542.852 355.297 542.82 cv
355.215 542.793 355.125 542.766 355.02 542.742 cv
354.91 542.719 354.785 542.707 354.652 542.707 cv
354.457 542.707 354.293 542.738 354.16 542.801 cv
354.02 542.863 353.91 542.961 353.832 543.094 cv
353.746 543.227 353.688 543.398 353.652 543.609 cv
353.613 543.82 353.594 544.078 353.598 544.375 cv
353.598 545.141 li
355.164 545.141 li
355.203 545.145 355.238 545.152 355.27 545.168 cv
355.297 545.187 355.324 545.219 355.348 545.262 cv
355.371 545.309 355.387 545.367 355.402 545.43 cv
355.41 545.5 355.418 545.582 355.422 545.676 cv
355.418 545.867 355.395 546 355.352 546.082 cv
355.301 546.168 355.238 546.211 355.164 546.207 cv
353.598 546.207 li
353.598 552.355 li
353.594 552.402 353.586 552.437 353.566 552.461 cv
353.543 552.492 353.508 552.516 353.461 552.535 cv
353.41 552.555 353.344 552.566 353.262 552.582 cv
353.176 552.59 353.07 552.598 352.953 552.598 cv
352.824 552.598 352.723 552.59 352.641 552.582 cv
352.555 552.566 352.488 552.555 352.441 552.535 cv
352.391 552.516 352.355 552.492 352.336 552.461 cv
352.313 552.437 352.301 552.402 352.305 552.355 cv
352.305 546.207 li
351.316 546.207 li
351.23 546.211 351.168 546.168 351.129 546.082 cv
351.086 546 351.063 545.867 351.066 545.676 cv
351.063 545.582 351.07 545.5 351.082 545.43 cv
351.09 545.367 351.105 545.309 351.129 545.262 cv
351.148 545.219 351.172 545.187 351.207 545.168 cv
351.234 545.152 351.273 545.145 351.316 545.141 cv
352.305 545.141 li
352.305 544.414 li
352.301 543.93 352.348 543.512 352.441 543.156 cv
352.531 542.809 352.668 542.52 352.855 542.297 cv
353.039 542.074 353.273 541.91 353.563 541.801 cv
353.844 541.695 354.18 541.641 354.566 541.641 cv
354.742 541.641 354.918 541.66 355.094 541.691 cv
355.262 541.73 355.395 541.766 355.492 541.801 cv
355.582 541.844 355.645 541.879 355.68 541.906 cv
355.707 541.941 355.734 541.98 355.758 542.027 cv
355.777 542.078 355.789 542.141 355.801 542.207 cv
355.805 542.281 355.809 542.363 355.813 542.457 cv
cp
f
366.008 549.723 mo
366.004 550.195 365.918 550.617 365.746 550.984 cv
365.57 551.359 365.328 551.672 365.02 551.926 cv
364.711 552.184 364.348 552.375 363.93 552.504 cv
363.508 552.633 363.059 552.695 362.578 552.699 cv
362.238 552.695 361.922 552.668 361.637 552.613 cv
361.348 552.555 361.094 552.488 360.867 552.402 cv
360.641 552.324 360.449 552.238 360.297 552.145 cv
360.141 552.059 360.035 551.98 359.977 551.918 cv
359.918 551.855 359.875 551.777 359.848 551.684 cv
359.816 551.59 359.801 551.461 359.805 551.297 cv
359.801 551.184 359.805 551.09 359.82 551.012 cv
359.828 550.937 359.844 550.875 359.867 550.828 cv
359.883 550.781 359.91 550.75 359.945 550.73 cv
359.973 550.715 360.008 550.707 360.051 550.703 cv
360.121 550.707 360.223 550.75 360.359 550.836 cv
360.488 550.926 360.66 551.023 360.871 551.125 cv
361.078 551.234 361.328 551.332 361.621 551.418 cv
361.914 551.512 362.254 551.555 362.641 551.555 cv
362.93 551.555 363.195 551.516 363.438 551.437 cv
363.676 551.359 363.883 551.25 364.063 551.105 cv
364.234 550.965 364.371 550.789 364.465 550.578 cv
364.559 550.371 364.605 550.137 364.605 549.871 cv
364.605 549.59 364.539 549.344 364.41 549.137 cv
364.277 548.937 364.105 548.762 363.895 548.605 cv
363.68 548.457 363.438 548.316 363.164 548.184 cv
362.891 548.059 362.609 547.926 362.328 547.793 cv
362.039 547.66 361.762 547.516 361.492 547.352 cv
361.223 547.195 360.98 547.004 360.77 546.785 cv
360.551 546.566 360.379 546.312 360.25 546.016 cv
360.113 545.727 360.047 545.375 360.051 544.961 cv
360.047 544.543 360.125 544.168 360.281 543.836 cv
360.434 543.508 360.645 543.23 360.922 543.004 cv
361.191 542.785 361.516 542.613 361.895 542.496 cv
362.27 542.379 362.68 542.32 363.117 542.32 cv
363.336 542.32 363.559 542.34 363.789 542.379 cv
364.012 542.418 364.223 542.469 364.426 542.531 cv
364.621 542.598 364.801 542.672 364.961 542.75 cv
365.113 542.832 365.215 542.898 365.27 542.945 cv
365.316 543 365.352 543.039 365.367 543.062 cv
365.383 543.094 365.395 543.129 365.406 543.172 cv
365.414 543.219 365.422 543.273 365.43 543.332 cv
365.434 543.398 365.438 543.477 365.438 543.574 cv
365.438 543.668 365.434 543.754 365.426 543.824 cv
365.418 543.902 365.406 543.961 365.391 544.008 cv
365.375 544.055 365.352 544.09 365.324 544.113 cv
365.293 544.137 365.262 544.148 365.227 544.148 cv
365.168 544.148 365.078 544.113 364.957 544.043 cv
364.832 543.973 364.68 543.891 364.508 543.797 cv
364.328 543.707 364.121 543.625 363.883 543.547 cv
363.637 543.473 363.367 543.434 363.07 543.434 cv
362.789 543.434 362.543 543.473 362.336 543.547 cv
362.125 543.625 361.953 543.727 361.82 543.848 cv
361.684 543.973 361.582 544.117 361.516 544.289 cv
361.449 544.461 361.418 544.645 361.418 544.836 cv
361.418 545.121 361.48 545.363 361.609 545.562 cv
361.738 545.766 361.91 545.945 362.129 546.098 cv
362.34 546.258 362.586 546.398 362.863 546.527 cv
363.137 546.66 363.418 546.793 363.707 546.922 cv
363.992 547.055 364.273 547.199 364.547 547.355 cv
364.82 547.516 365.066 547.703 365.285 547.918 cv
365.5 548.137 365.672 548.391 365.809 548.684 cv
365.938 548.977 366.004 549.324 366.008 549.723 cv
cp
f
373.777 552.355 mo
373.773 552.402 373.766 552.437 373.75 552.461 cv
373.73 552.492 373.695 552.516 373.652 552.535 cv
373.605 552.555 373.547 552.566 373.473 552.582 cv
373.395 552.59 373.301 552.598 373.195 552.598 cv
373.07 552.598 372.973 552.59 372.902 552.582 cv
372.824 552.566 372.766 552.555 372.723 552.535 cv
372.676 552.516 372.645 552.492 372.633 552.461 cv
372.613 552.437 372.605 552.402 372.609 552.355 cv
372.609 551.43 li
372.207 551.875 371.813 552.195 371.426 552.395 cv
371.031 552.598 370.637 552.695 370.242 552.699 cv
369.77 552.695 369.375 552.621 369.059 552.465 cv
368.738 552.312 368.48 552.102 368.285 551.832 cv
368.082 551.566 367.941 551.254 367.859 550.895 cv
367.77 550.539 367.727 550.105 367.73 549.598 cv
367.73 545.344 li
367.727 545.305 367.734 545.27 367.758 545.238 cv
367.773 545.211 367.809 545.187 367.863 545.16 cv
367.91 545.141 367.98 545.125 368.066 545.113 cv
368.148 545.109 368.25 545.105 368.379 545.102 cv
368.5 545.105 368.605 545.109 368.691 545.113 cv
368.773 545.125 368.84 545.141 368.887 545.16 cv
368.934 545.187 368.969 545.211 368.992 545.238 cv
369.012 545.27 369.02 545.305 369.023 545.344 cv
369.023 549.426 li
369.02 549.84 369.051 550.168 369.113 550.414 cv
369.172 550.66 369.262 550.871 369.387 551.043 cv
369.504 551.223 369.66 551.355 369.852 551.449 cv
370.035 551.547 370.254 551.598 370.504 551.594 cv
370.824 551.598 371.145 551.48 371.469 551.25 cv
371.785 551.023 372.125 550.687 372.484 550.242 cv
372.484 545.344 li
372.484 545.305 372.492 545.27 372.512 545.238 cv
372.527 545.211 372.563 545.187 372.617 545.16 cv
372.668 545.141 372.734 545.125 372.816 545.113 cv
372.895 545.109 373 545.105 373.133 545.102 cv
373.254 545.105 373.359 545.109 373.445 545.113 cv
373.527 545.125 373.59 545.141 373.637 545.16 cv
373.68 545.187 373.715 545.211 373.742 545.238 cv
373.762 545.27 373.773 545.305 373.777 545.344 cv
cp
f
382.633 548.754 mo
382.629 549.363 382.563 549.914 382.434 550.398 cv
382.297 550.887 382.102 551.301 381.848 551.641 cv
381.59 551.984 381.273 552.246 380.902 552.426 cv
380.527 552.609 380.102 552.695 379.617 552.699 cv
379.391 552.695 379.184 552.676 378.996 552.633 cv
378.809 552.586 378.621 552.516 378.441 552.418 cv
378.254 552.32 378.074 552.195 377.895 552.043 cv
377.711 551.895 377.52 551.715 377.32 551.5 cv
377.32 552.355 li
377.32 552.402 377.309 552.437 377.289 552.465 cv
377.266 552.5 377.23 552.523 377.188 552.539 cv
377.137 552.555 377.078 552.566 377.012 552.582 cv
376.938 552.59 376.848 552.598 376.742 552.598 cv
376.633 552.598 376.547 552.59 376.477 552.582 cv
376.402 552.566 376.34 552.555 376.297 552.539 cv
376.246 552.523 376.215 552.5 376.203 552.465 cv
376.184 552.437 376.176 552.402 376.18 552.355 cv
376.18 541.945 li
376.176 541.906 376.188 541.871 376.207 541.836 cv
376.223 541.809 376.254 541.781 376.309 541.758 cv
376.355 541.738 376.422 541.723 376.508 541.711 cv
376.586 541.703 376.691 541.699 376.82 541.695 cv
376.949 541.699 377.055 541.703 377.141 541.711 cv
377.219 541.723 377.285 541.738 377.332 541.758 cv
377.379 541.781 377.41 541.809 377.434 541.836 cv
377.449 541.871 377.461 541.906 377.465 541.945 cv
377.465 546.145 li
377.672 545.934 377.875 545.754 378.07 545.609 cv
378.266 545.465 378.453 545.348 378.641 545.254 cv
378.824 545.168 379.012 545.102 379.203 545.055 cv
379.387 545.016 379.586 544.992 379.797 544.992 cv
380.301 544.992 380.734 545.094 381.102 545.297 cv
381.461 545.5 381.754 545.773 381.98 546.109 cv
382.203 546.453 382.371 546.852 382.477 547.309 cv
382.578 547.766 382.629 548.246 382.633 548.754 cv
cp
381.301 548.902 mo
381.297 548.547 381.27 548.199 381.219 547.859 cv
381.16 547.523 381.066 547.227 380.93 546.965 cv
380.793 546.707 380.613 546.496 380.391 546.336 cv
380.164 546.18 379.883 546.102 379.551 546.098 cv
379.383 546.102 379.219 546.125 379.059 546.168 cv
378.895 546.219 378.73 546.297 378.563 546.402 cv
378.395 546.516 378.219 546.656 378.043 546.824 cv
377.859 547 377.668 547.215 377.465 547.469 cv
377.465 550.266 li
377.82 550.699 378.16 551.031 378.484 551.254 cv
378.809 551.484 379.145 551.598 379.496 551.594 cv
379.816 551.598 380.094 551.52 380.328 551.359 cv
380.555 551.207 380.742 551 380.887 550.738 cv
381.031 550.484 381.137 550.195 381.203 549.875 cv
381.266 549.559 381.297 549.234 381.301 548.902 cv
cp
f
387.77 548.617 mo
387.77 548.82 387.746 548.957 387.699 549.035 cv
387.652 549.113 387.582 549.152 387.496 549.152 cv
384.238 549.152 li
384.145 549.152 384.078 549.113 384.031 549.031 cv
383.984 548.953 383.961 548.816 383.961 548.617 cv
383.961 548.422 383.984 548.281 384.031 548.203 cv
384.078 548.125 384.145 548.086 384.238 548.086 cv
387.496 548.086 li
387.535 548.086 387.574 548.094 387.609 548.109 cv
387.641 548.125 387.668 548.156 387.695 548.199 cv
387.715 548.246 387.734 548.301 387.75 548.367 cv
387.762 548.437 387.77 548.523 387.77 548.617 cv
cp
f
391.02 552.348 mo
391.016 552.391 391.008 552.426 390.988 552.457 cv
390.965 552.488 390.926 552.516 390.879 552.531 cv
390.824 552.551 390.758 552.562 390.672 552.578 cv
390.586 552.59 390.477 552.598 390.352 552.598 cv
390.223 552.598 390.117 552.59 390.031 552.578 cv
389.941 552.562 389.871 552.551 389.82 552.531 cv
389.766 552.516 389.73 552.488 389.711 552.457 cv
389.688 552.426 389.676 552.391 389.68 552.348 cv
389.68 542.668 li
389.676 542.629 389.688 542.594 389.715 542.559 cv
389.734 542.531 389.773 542.504 389.832 542.484 cv
389.883 542.469 389.953 542.453 390.043 542.437 cv
390.125 542.426 390.227 542.422 390.352 542.418 cv
390.477 542.422 390.586 542.426 390.672 542.437 cv
390.758 542.453 390.824 542.469 390.879 542.484 cv
390.926 542.504 390.965 542.531 390.988 542.559 cv
391.008 542.594 391.016 542.629 391.02 542.668 cv
cp
f
404.008 552.355 mo
404.004 552.402 403.996 552.437 403.977 552.461 cv
403.953 552.492 403.918 552.516 403.875 552.535 cv
403.824 552.555 403.758 552.566 403.68 552.582 cv
403.594 552.59 403.492 552.598 403.367 552.598 cv
403.234 552.598 403.125 552.59 403.047 552.582 cv
402.961 552.566 402.895 552.555 402.848 552.535 cv
402.793 552.516 402.758 552.492 402.742 552.461 cv
402.719 552.437 402.711 552.402 402.711 552.355 cv
402.711 548.094 li
402.711 547.801 402.684 547.531 402.633 547.285 cv
402.578 547.043 402.496 546.832 402.383 546.652 cv
402.27 546.477 402.125 546.34 401.949 546.246 cv
401.77 546.152 401.559 546.105 401.324 546.105 cv
401.027 546.105 400.73 546.223 400.434 546.449 cv
400.129 546.684 399.801 547.016 399.445 547.453 cv
399.445 552.355 li
399.441 552.402 399.43 552.437 399.414 552.461 cv
399.391 552.492 399.359 552.516 399.313 552.535 cv
399.262 552.555 399.195 552.566 399.113 552.582 cv
399.027 552.59 398.922 552.598 398.801 552.598 cv
398.68 552.598 398.578 552.59 398.492 552.582 cv
398.406 552.566 398.336 552.555 398.289 552.535 cv
398.234 552.516 398.203 552.492 398.188 552.461 cv
398.168 552.437 398.156 552.402 398.16 552.355 cv
398.16 548.094 li
398.156 547.801 398.129 547.531 398.074 547.285 cv
398.016 547.043 397.93 546.832 397.816 546.652 cv
397.703 546.477 397.559 546.34 397.387 546.246 cv
397.207 546.152 397 546.105 396.766 546.105 cv
396.465 546.105 396.168 546.223 395.867 546.449 cv
395.566 546.684 395.238 547.016 394.887 547.453 cv
394.887 552.355 li
394.883 552.402 394.871 552.437 394.855 552.461 cv
394.832 552.492 394.801 552.516 394.754 552.535 cv
394.707 552.555 394.641 552.566 394.563 552.582 cv
394.477 552.59 394.371 552.598 394.242 552.598 cv
394.113 552.598 394.008 552.59 393.93 552.582 cv
393.844 552.566 393.777 552.555 393.73 552.535 cv
393.676 552.516 393.645 552.492 393.629 552.461 cv
393.609 552.437 393.598 552.402 393.602 552.355 cv
393.602 545.344 li
393.598 545.305 393.605 545.27 393.625 545.238 cv
393.637 545.211 393.668 545.187 393.719 545.16 cv
393.762 545.141 393.824 545.125 393.898 545.113 cv
393.969 545.109 394.063 545.105 394.188 545.102 cv
394.297 545.105 394.395 545.109 394.473 545.113 cv
394.547 545.125 394.605 545.141 394.648 545.16 cv
394.688 545.187 394.715 545.211 394.734 545.238 cv
394.75 545.27 394.758 545.305 394.762 545.344 cv
394.762 546.27 li
395.152 545.828 395.535 545.508 395.91 545.301 cv
396.277 545.098 396.656 544.992 397.039 544.992 cv
397.328 544.992 397.586 545.027 397.82 545.094 cv
398.047 545.164 398.254 545.258 398.434 545.379 cv
398.609 545.5 398.758 545.645 398.887 545.812 cv
399.008 545.984 399.113 546.176 399.199 546.379 cv
399.43 546.129 399.652 545.914 399.863 545.734 cv
400.074 545.562 400.277 545.418 400.473 545.305 cv
400.668 545.199 400.855 545.121 401.039 545.066 cv
401.223 545.02 401.41 544.992 401.598 544.992 cv
402.051 544.992 402.43 545.074 402.734 545.23 cv
403.039 545.395 403.285 545.605 403.48 545.867 cv
403.668 546.133 403.805 546.441 403.887 546.797 cv
403.965 547.152 404.004 547.527 404.008 547.922 cv
cp
f
411.637 552.363 mo
411.633 552.426 411.613 552.473 411.574 552.504 cv
411.531 552.535 411.473 552.559 411.402 552.574 cv
411.324 552.59 411.219 552.598 411.082 552.598 cv
410.945 552.598 410.836 552.59 410.758 552.574 cv
410.672 552.559 410.613 552.535 410.582 552.504 cv
410.543 552.473 410.527 552.426 410.531 552.363 cv
410.531 551.664 li
410.223 551.992 409.879 552.246 409.504 552.426 cv
409.125 552.609 408.727 552.695 408.309 552.699 cv
407.934 552.695 407.602 552.648 407.305 552.555 cv
407.008 552.457 406.754 552.32 406.543 552.137 cv
406.332 551.957 406.168 551.734 406.051 551.469 cv
405.934 551.207 405.875 550.906 405.879 550.562 cv
405.875 550.172 405.953 549.828 406.117 549.535 cv
406.273 549.246 406.508 549.004 406.813 548.812 cv
407.113 548.621 407.48 548.477 407.918 548.379 cv
408.352 548.285 408.844 548.238 409.391 548.234 cv
410.359 548.234 li
410.359 547.687 li
410.355 547.418 410.328 547.18 410.273 546.973 cv
410.215 546.766 410.121 546.594 409.996 546.453 cv
409.863 546.316 409.699 546.211 409.5 546.141 cv
409.293 546.07 409.043 546.035 408.754 546.035 cv
408.434 546.035 408.148 546.074 407.898 546.148 cv
407.641 546.227 407.422 546.309 407.234 546.398 cv
407.047 546.492 406.887 546.578 406.762 546.648 cv
406.629 546.727 406.535 546.762 406.477 546.762 cv
406.434 546.762 406.398 546.754 406.367 546.73 cv
406.336 546.715 406.309 546.684 406.285 546.637 cv
406.262 546.598 406.242 546.543 406.234 546.477 cv
406.219 546.414 406.215 546.344 406.219 546.262 cv
406.215 546.137 406.223 546.031 406.246 545.953 cv
406.262 545.879 406.309 545.809 406.379 545.738 cv
406.449 545.672 406.57 545.594 406.742 545.504 cv
406.914 545.414 407.109 545.332 407.332 545.254 cv
407.555 545.184 407.801 545.121 408.066 545.066 cv
408.332 545.02 408.598 544.992 408.871 544.992 cv
409.371 544.992 409.801 545.051 410.152 545.164 cv
410.504 545.281 410.789 545.449 411.012 545.668 cv
411.227 545.891 411.387 546.164 411.488 546.488 cv
411.586 546.82 411.633 547.203 411.637 547.633 cv
cp
410.359 549.16 mo
409.258 549.16 li
408.902 549.164 408.598 549.195 408.34 549.25 cv
408.078 549.312 407.863 549.398 407.691 549.516 cv
407.52 549.633 407.395 549.773 407.316 549.937 cv
407.234 550.102 407.191 550.289 407.195 550.5 cv
407.191 550.867 407.309 551.16 407.539 551.371 cv
407.77 551.59 408.094 551.695 408.512 551.695 cv
408.848 551.695 409.16 551.609 409.449 551.437 cv
409.738 551.266 410.039 551.004 410.359 550.648 cv
cp
f
419.859 545.66 mo
419.855 545.844 419.832 545.977 419.785 546.055 cv
419.734 546.137 419.672 546.176 419.598 546.176 cv
418.59 546.176 li
418.77 546.363 418.898 546.57 418.973 546.797 cv
419.043 547.023 419.078 547.258 419.082 547.5 cv
419.078 547.906 419.012 548.266 418.887 548.578 cv
418.754 548.891 418.57 549.156 418.328 549.367 cv
418.086 549.586 417.797 549.75 417.469 549.863 cv
417.133 549.98 416.766 550.039 416.363 550.035 cv
416.074 550.039 415.801 550 415.547 549.922 cv
415.285 549.848 415.09 549.754 414.953 549.637 cv
414.859 549.734 414.781 549.84 414.723 549.957 cv
414.66 550.078 414.629 550.215 414.633 550.367 cv
414.629 550.551 414.715 550.703 414.887 550.82 cv
415.055 550.945 415.277 551.008 415.559 551.016 cv
417.391 551.094 li
417.738 551.105 418.055 551.152 418.348 551.238 cv
418.637 551.324 418.891 551.449 419.105 551.605 cv
419.316 551.766 419.484 551.957 419.605 552.187 cv
419.723 552.422 419.781 552.691 419.785 552.996 cv
419.781 553.316 419.715 553.621 419.582 553.914 cv
419.445 554.203 419.238 554.457 418.961 554.68 cv
418.68 554.898 418.324 555.074 417.895 555.203 cv
417.465 555.328 416.957 555.391 416.371 555.395 cv
415.801 555.391 415.316 555.344 414.922 555.25 cv
414.523 555.152 414.199 555.02 413.945 554.855 cv
413.691 554.687 413.508 554.492 413.395 554.262 cv
413.277 554.027 413.219 553.773 413.223 553.508 cv
413.219 553.336 413.238 553.172 413.285 553.012 cv
413.324 552.848 413.387 552.695 413.473 552.551 cv
413.555 552.406 413.664 552.27 413.793 552.133 cv
413.918 552.004 414.063 551.871 414.234 551.742 cv
413.977 551.613 413.789 551.449 413.668 551.25 cv
413.547 551.055 413.488 550.844 413.488 550.609 cv
413.488 550.297 413.551 550.012 413.68 549.762 cv
413.809 549.512 413.969 549.289 414.164 549.09 cv
414 548.898 413.875 548.684 413.781 548.441 cv
413.688 548.203 413.641 547.91 413.641 547.562 cv
413.641 547.168 413.707 546.809 413.844 546.488 cv
413.977 546.172 414.164 545.906 414.406 545.687 cv
414.645 545.473 414.93 545.305 415.266 545.184 cv
415.598 545.07 415.965 545.012 416.363 545.008 cv
416.574 545.012 416.773 545.023 416.957 545.043 cv
417.141 545.07 417.313 545.102 417.477 545.141 cv
419.598 545.141 li
419.684 545.145 419.75 545.187 419.793 545.27 cv
419.836 545.359 419.855 545.488 419.859 545.66 cv
cp
417.852 547.508 mo
417.848 547.035 417.715 546.664 417.457 546.391 cv
417.191 546.125 416.82 545.988 416.34 545.988 cv
416.086 545.988 415.867 546.031 415.688 546.113 cv
415.5 546.199 415.348 546.312 415.227 546.457 cv
415.105 546.605 415.016 546.773 414.957 546.961 cv
414.895 547.148 414.863 547.348 414.867 547.555 cv
414.863 548.02 414.996 548.383 415.258 548.648 cv
415.52 548.914 415.887 549.047 416.363 549.043 cv
416.613 549.047 416.832 549.008 417.023 548.922 cv
417.207 548.844 417.363 548.73 417.488 548.59 cv
417.609 548.449 417.699 548.285 417.762 548.094 cv
417.816 547.91 417.848 547.715 417.852 547.508 cv
cp
418.496 553.066 mo
418.492 552.762 418.367 552.531 418.125 552.367 cv
417.875 552.207 417.543 552.117 417.125 552.105 cv
415.309 552.043 li
415.141 552.176 415.004 552.301 414.902 552.414 cv
414.793 552.531 414.711 552.641 414.648 552.75 cv
414.586 552.855 414.543 552.961 414.52 553.066 cv
414.496 553.168 414.484 553.273 414.484 553.383 cv
414.484 553.719 414.652 553.973 414.996 554.152 cv
415.336 554.324 415.816 554.414 416.434 554.414 cv
416.82 554.414 417.145 554.375 417.41 554.301 cv
417.668 554.223 417.879 554.121 418.043 554 cv
418.199 553.871 418.316 553.73 418.391 553.57 cv
418.457 553.41 418.492 553.242 418.496 553.066 cv
cp
f
427.418 548.547 mo
427.414 548.75 427.363 548.891 427.266 548.977 cv
427.16 549.062 427.043 549.105 426.918 549.105 cv
422.301 549.105 li
422.297 549.496 422.336 549.848 422.418 550.16 cv
422.492 550.473 422.625 550.742 422.809 550.961 cv
422.988 551.187 423.223 551.359 423.52 551.477 cv
423.809 551.602 424.168 551.66 424.594 551.656 cv
424.926 551.66 425.223 551.633 425.484 551.574 cv
425.746 551.523 425.973 551.461 426.164 551.391 cv
426.352 551.324 426.508 551.266 426.633 551.207 cv
426.754 551.156 426.848 551.129 426.91 551.125 cv
426.945 551.129 426.977 551.137 427.008 551.152 cv
427.035 551.172 427.059 551.199 427.078 551.234 cv
427.09 551.273 427.102 551.324 427.113 551.387 cv
427.117 551.453 427.121 551.531 427.125 551.625 cv
427.121 551.695 427.117 551.754 427.117 551.801 cv
427.109 551.848 427.105 551.891 427.098 551.93 cv
427.09 551.969 427.074 552.004 427.059 552.035 cv
427.035 552.066 427.012 552.098 426.988 552.125 cv
426.957 552.156 426.875 552.203 426.734 552.266 cv
426.594 552.332 426.41 552.395 426.188 552.457 cv
425.961 552.52 425.703 552.574 425.41 552.625 cv
425.117 552.672 424.805 552.695 424.473 552.699 cv
423.895 552.695 423.387 552.617 422.957 552.457 cv
422.52 552.297 422.156 552.059 421.863 551.742 cv
421.563 551.426 421.34 551.031 421.191 550.551 cv
421.043 550.074 420.969 549.516 420.969 548.879 cv
420.969 548.281 421.043 547.742 421.199 547.258 cv
421.352 546.781 421.578 546.371 421.875 546.035 cv
422.168 545.699 422.523 545.441 422.938 545.262 cv
423.352 545.082 423.816 544.992 424.332 544.992 cv
424.883 544.992 425.352 545.082 425.738 545.258 cv
426.125 545.437 426.441 545.676 426.695 545.973 cv
426.941 546.273 427.125 546.625 427.242 547.023 cv
427.355 547.43 427.414 547.859 427.418 548.312 cv
cp
426.125 548.164 mo
426.141 547.488 425.988 546.957 425.672 546.574 cv
425.355 546.191 424.887 546 424.27 545.996 cv
423.945 546 423.664 546.059 423.426 546.176 cv
423.184 546.297 422.984 546.457 422.824 546.652 cv
422.66 546.852 422.535 547.082 422.449 547.344 cv
422.359 547.605 422.309 547.879 422.301 548.164 cv
cp
f
433.785 550.445 mo
433.781 550.809 433.715 551.129 433.586 551.406 cv
433.453 551.687 433.266 551.922 433.023 552.113 cv
432.777 552.309 432.484 552.453 432.148 552.551 cv
431.809 552.648 431.438 552.695 431.035 552.699 cv
430.781 552.695 430.543 552.676 430.32 552.641 cv
430.094 552.598 429.895 552.551 429.715 552.492 cv
429.535 552.434 429.383 552.371 429.258 552.305 cv
429.133 552.242 429.039 552.184 428.984 552.129 cv
428.926 552.078 428.887 552.008 428.863 551.91 cv
428.836 551.82 428.824 551.691 428.824 551.531 cv
428.824 551.434 428.828 551.352 428.84 551.281 cv
428.848 551.215 428.859 551.16 428.879 551.117 cv
428.891 551.078 428.914 551.047 428.941 551.027 cv
428.969 551.012 429 551.004 429.039 551 cv
429.094 551.004 429.18 551.039 429.293 551.105 cv
429.402 551.18 429.539 551.258 429.707 551.336 cv
429.867 551.422 430.059 551.496 430.285 551.566 cv
430.504 551.637 430.762 551.672 431.059 551.672 cv
431.273 551.672 431.473 551.648 431.652 551.602 cv
431.828 551.555 431.98 551.488 432.109 551.395 cv
432.238 551.309 432.34 551.191 432.41 551.047 cv
432.48 550.91 432.516 550.742 432.516 550.547 cv
432.516 550.352 432.465 550.187 432.363 550.051 cv
432.262 549.918 432.125 549.797 431.961 549.691 cv
431.793 549.59 431.609 549.5 431.402 549.414 cv
431.191 549.336 430.977 549.25 430.758 549.16 cv
430.539 549.074 430.324 548.973 430.113 548.859 cv
429.902 548.75 429.711 548.617 429.547 548.453 cv
429.375 548.297 429.242 548.102 429.145 547.875 cv
429.039 547.652 428.988 547.387 428.992 547.074 cv
428.988 546.801 429.043 546.535 429.152 546.281 cv
429.258 546.031 429.418 545.812 429.633 545.621 cv
429.844 545.434 430.109 545.281 430.43 545.164 cv
430.75 545.051 431.121 544.992 431.551 544.992 cv
431.734 544.992 431.922 545.008 432.109 545.039 cv
432.293 545.07 432.461 545.109 432.617 545.156 cv
432.766 545.203 432.895 545.254 433.004 545.309 cv
433.105 545.363 433.188 545.414 433.246 545.453 cv
433.297 545.5 433.332 545.535 433.355 545.562 cv
433.371 545.594 433.387 545.629 433.395 545.664 cv
433.402 545.707 433.41 545.754 433.418 545.809 cv
433.426 545.867 433.43 545.937 433.43 546.02 cv
433.43 546.109 433.426 546.187 433.418 546.25 cv
433.41 546.32 433.395 546.371 433.379 546.41 cv
433.355 546.453 433.336 546.484 433.313 546.5 cv
433.285 546.52 433.254 546.527 433.227 546.527 cv
433.176 546.527 433.109 546.5 433.023 546.441 cv
432.934 546.387 432.82 546.324 432.68 546.258 cv
432.539 546.195 432.371 546.137 432.184 546.074 cv
431.992 546.02 431.777 545.988 431.535 545.988 cv
431.313 545.988 431.121 546.016 430.957 546.062 cv
430.789 546.117 430.652 546.187 430.547 546.273 cv
430.441 546.367 430.359 546.473 430.309 546.598 cv
430.25 546.723 430.223 546.859 430.227 547.004 cv
430.223 547.207 430.273 547.375 430.379 547.512 cv
430.48 547.652 430.617 547.773 430.785 547.875 cv
430.949 547.98 431.141 548.074 431.355 548.156 cv
431.566 548.242 431.781 548.328 432.004 548.414 cv
432.223 548.504 432.441 548.605 432.66 548.711 cv
432.875 548.82 433.066 548.949 433.234 549.105 cv
433.398 549.262 433.531 549.449 433.633 549.668 cv
433.73 549.887 433.781 550.148 433.785 550.445 cv
cp
f
246.453 14.355 mo
246.449 14.887 246.352 15.352 246.156 15.75 cv
245.957 16.152 245.691 16.488 245.355 16.754 cv
245.016 17.023 244.617 17.223 244.168 17.355 cv
243.715 17.488 243.234 17.555 242.723 17.559 cv
242.371 17.555 242.047 17.527 241.75 17.473 cv
241.449 17.414 241.188 17.348 240.961 17.266 cv
240.73 17.187 240.539 17.102 240.387 17.012 cv
240.234 16.926 240.125 16.848 240.059 16.777 cv
239.988 16.711 239.938 16.613 239.914 16.488 cv
239.883 16.363 239.871 16.18 239.871 15.937 cv
239.871 15.777 239.875 15.645 239.887 15.531 cv
239.895 15.426 239.91 15.336 239.938 15.266 cv
239.957 15.199 239.988 15.152 240.031 15.121 cv
240.066 15.098 240.113 15.082 240.164 15.078 cv
240.234 15.082 240.336 15.125 240.473 15.207 cv
240.602 15.297 240.773 15.391 240.984 15.492 cv
241.191 15.598 241.438 15.695 241.727 15.777 cv
242.012 15.867 242.348 15.91 242.73 15.906 cv
242.98 15.91 243.203 15.879 243.398 15.816 cv
243.594 15.758 243.762 15.672 243.902 15.562 cv
244.039 15.453 244.145 15.32 244.219 15.16 cv
244.289 15 244.324 14.82 244.328 14.621 cv
244.324 14.395 244.262 14.199 244.141 14.031 cv
244.012 13.871 243.848 13.727 243.652 13.598 cv
243.449 13.473 243.223 13.352 242.969 13.238 cv
242.715 13.129 242.453 13.012 242.184 12.883 cv
241.91 12.762 241.648 12.617 241.395 12.457 cv
241.141 12.301 240.914 12.113 240.715 11.891 cv
240.512 11.672 240.348 11.41 240.227 11.105 cv
240.102 10.805 240.039 10.445 240.043 10.023 cv
240.039 9.54303 240.129 9.117 240.309 8.75 cv
240.484 8.38702 240.727 8.08197 241.035 7.836 cv
241.336 7.59802 241.695 7.41803 242.109 7.297 cv
242.523 7.17999 242.961 7.12097 243.422 7.117 cv
243.66 7.12097 243.898 7.13702 244.141 7.172 cv
244.379 7.211 244.602 7.26202 244.809 7.32001 cv
245.016 7.383 245.199 7.453 245.363 7.52698 cv
245.52 7.60901 245.629 7.672 245.684 7.72302 cv
245.734 7.77698 245.77 7.82397 245.789 7.85498 cv
245.805 7.89502 245.82 7.94098 245.836 8 cv
245.848 8.06201 245.855 8.13702 245.863 8.22699 cv
245.867 8.32001 245.871 8.43402 245.871 8.56598 cv
245.871 8.71899 245.867 8.84802 245.859 8.94897 cv
245.852 9.05499 245.836 9.14099 245.82 9.203 cv
245.797 9.27301 245.773 9.32001 245.742 9.35199 cv
245.707 9.383 245.66 9.39801 245.605 9.39801 cv
245.547 9.39801 245.457 9.36298 245.332 9.289 cv
245.207 9.21899 245.051 9.14099 244.871 9.05103 cv
244.688 8.96899 244.48 8.89099 244.242 8.82001 cv
244 8.75403 243.734 8.71899 243.453 8.71503 cv
243.227 8.71899 243.035 8.74597 242.871 8.797 cv
242.703 8.85199 242.563 8.92603 242.453 9.02002 cv
242.34 9.117 242.258 9.23401 242.203 9.367 cv
242.148 9.508 242.121 9.64801 242.121 9.797 cv
242.121 10.023 242.18 10.219 242.305 10.379 cv
242.422 10.543 242.586 10.687 242.797 10.812 cv
243 10.941 243.234 11.062 243.492 11.172 cv
243.75 11.289 244.016 11.406 244.289 11.527 cv
244.559 11.656 244.82 11.797 245.082 11.953 cv
245.34 12.109 245.574 12.301 245.777 12.52 cv
245.98 12.746 246.141 13.004 246.266 13.301 cv
246.387 13.598 246.449 13.949 246.453 14.355 cv
cp
f
253.172 16.008 mo
253.168 16.145 253.164 16.258 253.16 16.348 cv
253.148 16.441 253.141 16.52 253.129 16.578 cv
253.113 16.641 253.098 16.691 253.082 16.727 cv
253.063 16.77 253.02 16.816 252.961 16.875 cv
252.895 16.937 252.789 17.012 252.641 17.094 cv
252.488 17.184 252.316 17.262 252.125 17.324 cv
251.934 17.395 251.727 17.445 251.5 17.488 cv
251.273 17.527 251.039 17.547 250.805 17.551 cv
250.266 17.547 249.793 17.469 249.379 17.301 cv
248.965 17.137 248.617 16.891 248.34 16.566 cv
248.055 16.242 247.844 15.848 247.703 15.379 cv
247.563 14.914 247.492 14.375 247.492 13.77 cv
247.492 13.074 247.578 12.477 247.75 11.969 cv
247.922 11.465 248.164 11.043 248.48 10.711 cv
248.789 10.379 249.156 10.133 249.586 9.96899 cv
250.008 9.80902 250.477 9.72699 250.988 9.72699 cv
251.195 9.72699 251.398 9.74597 251.602 9.78101 cv
251.797 9.82001 251.984 9.87097 252.16 9.92999 cv
252.332 9.99597 252.488 10.066 252.629 10.141 cv
252.766 10.223 252.863 10.289 252.922 10.344 cv
252.977 10.402 253.016 10.449 253.043 10.484 cv
253.063 10.527 253.082 10.578 253.098 10.637 cv
253.109 10.703 253.121 10.781 253.129 10.867 cv
253.137 10.961 253.141 11.07 253.141 11.199 cv
253.141 11.504 253.113 11.715 253.063 11.836 cv
253.008 11.957 252.941 12.02 252.859 12.016 cv
252.77 12.02 252.676 11.984 252.578 11.91 cv
252.477 11.84 252.359 11.758 252.227 11.668 cv
252.094 11.582 251.934 11.5 251.746 11.426 cv
251.559 11.355 251.332 11.32 251.074 11.316 cv
250.563 11.32 250.176 11.516 249.906 11.906 cv
249.633 12.297 249.496 12.871 249.5 13.629 cv
249.496 14.004 249.531 14.336 249.602 14.621 cv
249.668 14.906 249.766 15.145 249.902 15.336 cv
250.031 15.531 250.199 15.676 250.402 15.77 cv
250.602 15.867 250.832 15.914 251.098 15.914 cv
251.363 15.914 251.598 15.875 251.797 15.793 cv
251.988 15.715 252.156 15.625 252.305 15.523 cv
252.445 15.426 252.57 15.336 252.672 15.254 cv
252.77 15.176 252.852 15.137 252.922 15.133 cv
252.965 15.137 253.004 15.148 253.039 15.172 cv
253.066 15.199 253.09 15.246 253.113 15.316 cv
253.129 15.387 253.145 15.477 253.156 15.586 cv
253.164 15.695 253.168 15.836 253.172 16.008 cv
cp
f
260.441 17.137 mo
260.438 17.215 260.41 17.27 260.363 17.309 cv
260.309 17.352 260.227 17.379 260.117 17.398 cv
260 17.414 259.836 17.426 259.621 17.426 cv
259.383 17.426 259.211 17.414 259.109 17.398 cv
259 17.379 258.926 17.352 258.887 17.309 cv
258.84 17.27 258.82 17.215 258.82 17.137 cv
258.82 16.586 li
258.531 16.895 258.203 17.133 257.84 17.301 cv
257.473 17.473 257.066 17.555 256.621 17.559 cv
256.25 17.555 255.91 17.508 255.602 17.414 cv
255.293 17.32 255.027 17.18 254.801 16.984 cv
254.574 16.797 254.398 16.562 254.273 16.281 cv
254.148 16.004 254.086 15.676 254.09 15.297 cv
254.086 14.898 254.164 14.547 254.324 14.242 cv
254.48 13.945 254.719 13.699 255.035 13.504 cv
255.348 13.312 255.738 13.168 256.207 13.07 cv
256.676 12.98 257.219 12.934 257.836 12.93 cv
258.516 12.93 li
258.516 12.508 li
258.516 12.293 258.492 12.102 258.449 11.937 cv
258.402 11.777 258.328 11.641 258.23 11.527 cv
258.125 11.422 257.992 11.34 257.824 11.285 cv
257.652 11.234 257.441 11.211 257.199 11.207 cv
256.867 11.211 256.574 11.246 256.32 11.316 cv
256.059 11.391 255.832 11.473 255.637 11.559 cv
255.438 11.652 255.273 11.73 255.145 11.801 cv
255.008 11.875 254.898 11.914 254.82 11.91 cv
254.758 11.914 254.707 11.895 254.668 11.855 cv
254.621 11.82 254.586 11.77 254.559 11.699 cv
254.527 11.637 254.504 11.551 254.492 11.449 cv
254.473 11.352 254.465 11.242 254.469 11.121 cv
254.465 10.961 254.48 10.836 254.508 10.738 cv
254.531 10.648 254.578 10.562 254.656 10.484 cv
254.727 10.41 254.855 10.328 255.039 10.238 cv
255.219 10.148 255.43 10.062 255.676 9.98401 cv
255.918 9.90601 256.188 9.84399 256.477 9.79303 cv
256.766 9.74597 257.063 9.72302 257.371 9.71899 cv
257.914 9.72302 258.379 9.77301 258.766 9.87903 cv
259.152 9.98798 259.473 10.152 259.723 10.371 cv
259.973 10.59 260.152 10.875 260.27 11.223 cv
260.379 11.574 260.438 11.988 260.441 12.461 cv
cp
258.516 14.16 mo
257.766 14.16 li
257.449 14.164 257.18 14.187 256.957 14.23 cv
256.73 14.281 256.547 14.352 256.41 14.441 cv
256.266 14.539 256.164 14.652 256.102 14.781 cv
256.035 14.918 256 15.066 256.004 15.234 cv
256 15.527 256.094 15.758 256.281 15.922 cv
256.465 16.09 256.723 16.172 257.051 16.172 cv
257.324 16.172 257.574 16.102 257.809 15.961 cv
258.035 15.82 258.273 15.617 258.516 15.344 cv
cp
f
264.367 17.113 mo
264.363 17.168 264.348 17.211 264.32 17.25 cv
264.285 17.289 264.23 17.324 264.16 17.348 cv
264.082 17.375 263.984 17.391 263.859 17.406 cv
263.734 17.418 263.574 17.426 263.387 17.426 cv
263.191 17.426 263.035 17.418 262.91 17.406 cv
262.785 17.391 262.684 17.375 262.609 17.348 cv
262.531 17.324 262.477 17.289 262.449 17.25 cv
262.414 17.211 262.398 17.168 262.402 17.113 cv
262.402 6.867 li
262.398 6.81598 262.414 6.77002 262.449 6.72699 cv
262.477 6.68701 262.531 6.65198 262.609 6.62097 cv
262.684 6.59399 262.785 6.57397 262.91 6.55499 cv
263.035 6.54303 263.191 6.53497 263.387 6.53101 cv
263.574 6.53497 263.734 6.54303 263.859 6.55499 cv
263.984 6.57397 264.082 6.59399 264.16 6.62097 cv
264.23 6.65198 264.285 6.68701 264.32 6.72699 cv
264.348 6.77002 264.363 6.81598 264.367 6.867 cv
cp
f
268.34 17.113 mo
268.336 17.168 268.32 17.211 268.293 17.25 cv
268.258 17.289 268.203 17.324 268.133 17.348 cv
268.055 17.375 267.957 17.391 267.832 17.406 cv
267.707 17.418 267.547 17.426 267.359 17.426 cv
267.164 17.426 267.008 17.418 266.883 17.406 cv
266.758 17.391 266.656 17.375 266.582 17.348 cv
266.504 17.324 266.449 17.289 266.422 17.25 cv
266.387 17.211 266.371 17.168 266.375 17.113 cv
266.375 10.18 li
266.371 10.129 266.387 10.082 266.422 10.043 cv
266.449 10.004 266.504 9.97302 266.582 9.94098 cv
266.656 9.91803 266.758 9.89502 266.883 9.875 cv
267.008 9.86298 267.164 9.85498 267.359 9.85199 cv
267.547 9.85498 267.707 9.86298 267.832 9.875 cv
267.957 9.89502 268.055 9.91803 268.133 9.94098 cv
268.203 9.97302 268.258 10.004 268.293 10.043 cv
268.32 10.082 268.336 10.129 268.34 10.18 cv
cp
268.488 7.80902 mo
268.488 8.20697 268.406 8.47998 268.246 8.62903 cv
268.082 8.78101 267.785 8.85498 267.352 8.85199 cv
266.906 8.85498 266.605 8.78101 266.457 8.63702 cv
266.301 8.492 266.227 8.22998 266.227 7.84802 cv
266.227 7.453 266.305 7.17999 266.465 7.02698 cv
266.621 6.875 266.922 6.797 267.367 6.797 cv
267.801 6.797 268.098 6.87097 268.254 7.02002 cv
268.41 7.16803 268.488 7.43402 268.488 7.80902 cv
cp
f
276.941 17.113 mo
276.938 17.168 276.922 17.211 276.895 17.25 cv
276.859 17.289 276.809 17.324 276.738 17.348 cv
276.664 17.375 276.563 17.391 276.438 17.406 cv
276.309 17.418 276.152 17.426 275.969 17.426 cv
275.773 17.426 275.613 17.418 275.488 17.406 cv
275.359 17.391 275.258 17.375 275.188 17.348 cv
275.109 17.324 275.059 17.289 275.031 17.25 cv
274.996 17.211 274.98 17.168 274.984 17.113 cv
274.984 13.148 li
274.98 12.812 274.957 12.547 274.91 12.352 cv
274.859 12.16 274.785 11.996 274.695 11.859 cv
274.602 11.723 274.484 11.617 274.336 11.539 cv
274.188 11.465 274.012 11.426 273.816 11.426 cv
273.563 11.426 273.313 11.52 273.059 11.699 cv
272.805 11.883 272.539 12.145 272.266 12.492 cv
272.266 17.113 li
272.262 17.168 272.246 17.211 272.219 17.25 cv
272.184 17.289 272.129 17.324 272.059 17.348 cv
271.98 17.375 271.883 17.391 271.758 17.406 cv
271.633 17.418 271.473 17.426 271.285 17.426 cv
271.09 17.426 270.934 17.418 270.809 17.406 cv
270.684 17.391 270.582 17.375 270.508 17.348 cv
270.43 17.324 270.375 17.289 270.348 17.25 cv
270.313 17.211 270.297 17.168 270.301 17.113 cv
270.301 10.164 li
270.297 10.117 270.313 10.07 270.34 10.027 cv
270.363 9.992 270.41 9.961 270.48 9.92999 cv
270.547 9.90601 270.633 9.88702 270.742 9.87097 cv
270.848 9.86298 270.98 9.85498 271.145 9.85199 cv
271.309 9.85498 271.445 9.86298 271.555 9.87097 cv
271.66 9.88702 271.746 9.90601 271.809 9.92999 cv
271.867 9.961 271.91 9.992 271.938 10.027 cv
271.961 10.07 271.973 10.117 271.977 10.164 cv
271.977 10.965 li
272.359 10.555 272.75 10.242 273.148 10.031 cv
273.543 9.82397 273.961 9.72302 274.395 9.71899 cv
274.863 9.72302 275.262 9.80103 275.59 9.953 cv
275.914 10.113 276.176 10.324 276.375 10.59 cv
276.574 10.859 276.719 11.172 276.809 11.527 cv
276.895 11.887 276.938 12.316 276.941 12.82 cv
cp
f
285.137 10.645 mo
285.133 10.898 285.105 11.082 285.051 11.199 cv
284.992 11.32 284.922 11.379 284.844 11.379 cv
284.023 11.379 li
284.137 11.504 284.219 11.648 284.27 11.805 cv
284.316 11.965 284.34 12.129 284.344 12.297 cv
284.34 12.707 284.273 13.066 284.141 13.379 cv
284.004 13.695 283.809 13.961 283.559 14.172 cv
283.305 14.391 283.004 14.555 282.648 14.664 cv
282.289 14.781 281.891 14.836 281.461 14.832 cv
281.234 14.836 281.023 14.809 280.82 14.75 cv
280.617 14.699 280.461 14.637 280.352 14.559 cv
280.289 14.629 280.23 14.707 280.184 14.801 cv
280.133 14.895 280.109 15 280.113 15.109 cv
280.109 15.266 280.176 15.387 280.309 15.48 cv
280.438 15.578 280.625 15.633 280.867 15.641 cv
282.559 15.703 li
282.953 15.719 283.305 15.777 283.613 15.871 cv
283.922 15.973 284.184 16.105 284.395 16.277 cv
284.605 16.453 284.766 16.664 284.875 16.906 cv
284.984 17.152 285.039 17.426 285.043 17.738 cv
285.039 18.074 284.965 18.398 284.816 18.707 cv
284.668 19.008 284.441 19.27 284.141 19.496 cv
283.836 19.715 283.457 19.895 283.004 20.027 cv
282.547 20.156 282.016 20.219 281.414 20.223 cv
280.816 20.219 280.313 20.172 279.895 20.082 cv
279.477 19.984 279.133 19.855 278.867 19.691 cv
278.598 19.523 278.402 19.324 278.285 19.098 cv
278.16 18.863 278.102 18.609 278.102 18.336 cv
278.102 18.164 278.121 18.004 278.168 17.848 cv
278.207 17.691 278.273 17.539 278.363 17.398 cv
278.445 17.254 278.551 17.121 278.676 16.988 cv
278.801 16.859 278.941 16.734 279.105 16.613 cv
278.879 16.5 278.707 16.34 278.586 16.129 cv
278.465 15.926 278.406 15.699 278.406 15.453 cv
278.406 15.152 278.473 14.875 278.613 14.617 cv
278.75 14.367 278.934 14.137 279.16 13.934 cv
278.977 13.754 278.832 13.539 278.723 13.281 cv
278.613 13.031 278.559 12.711 278.563 12.328 cv
278.559 11.926 278.629 11.566 278.773 11.242 cv
278.914 10.926 279.113 10.656 279.371 10.434 cv
279.625 10.215 279.93 10.043 280.281 9.92603 cv
280.633 9.80902 281.023 9.75 281.453 9.75 cv
281.672 9.75 281.879 9.76599 282.078 9.789 cv
282.277 9.82001 282.465 9.85498 282.637 9.89801 cv
284.844 9.89801 li
284.926 9.90198 284.996 9.961 285.055 10.07 cv
285.105 10.187 285.133 10.379 285.137 10.645 cv
cp
282.621 12.289 mo
282.617 11.918 282.516 11.629 282.309 11.418 cv
282.098 11.215 281.805 11.109 281.43 11.105 cv
281.234 11.109 281.063 11.141 280.922 11.203 cv
280.773 11.27 280.652 11.359 280.559 11.469 cv
280.457 11.582 280.387 11.711 280.344 11.859 cv
280.293 12.008 280.27 12.164 280.273 12.32 cv
280.27 12.68 280.375 12.957 280.586 13.16 cv
280.793 13.367 281.082 13.473 281.453 13.469 cv
281.648 13.473 281.816 13.441 281.965 13.375 cv
282.105 13.316 282.227 13.23 282.328 13.117 cv
282.422 13.012 282.496 12.883 282.547 12.738 cv
282.594 12.598 282.617 12.449 282.621 12.289 cv
cp
283.082 17.84 mo
283.082 17.602 282.988 17.426 282.801 17.301 cv
282.613 17.18 282.355 17.109 282.027 17.098 cv
280.633 17.059 li
280.496 17.16 280.387 17.254 280.309 17.344 cv
280.227 17.434 280.164 17.52 280.117 17.605 cv
280.066 17.687 280.031 17.77 280.02 17.848 cv
280 17.926 279.992 18.004 279.996 18.09 cv
279.992 18.344 280.125 18.543 280.387 18.68 cv
280.648 18.812 281.02 18.879 281.5 18.883 cv
281.793 18.879 282.039 18.848 282.246 18.793 cv
282.445 18.73 282.609 18.652 282.738 18.555 cv
282.859 18.453 282.949 18.344 283.004 18.223 cv
283.055 18.102 283.082 17.973 283.082 17.84 cv
cp
f
297.074 13.566 mo
297.07 14.164 296.992 14.707 296.84 15.191 cv
296.68 15.684 296.445 16.102 296.129 16.453 cv
295.813 16.805 295.414 17.078 294.938 17.27 cv
294.457 17.461 293.898 17.555 293.262 17.559 cv
292.641 17.555 292.102 17.473 291.648 17.301 cv
291.188 17.133 290.809 16.883 290.512 16.555 cv
290.207 16.23 289.984 15.828 289.84 15.348 cv
289.695 14.871 289.625 14.324 289.625 13.707 cv
289.625 13.117 289.703 12.578 289.859 12.086 cv
290.016 11.598 290.254 11.176 290.574 10.824 cv
290.891 10.477 291.285 10.203 291.762 10.008 cv
292.234 9.81598 292.793 9.72302 293.434 9.71899 cv
294.059 9.72302 294.598 9.80499 295.055 9.97302 cv
295.512 10.145 295.891 10.395 296.188 10.719 cv
296.484 11.047 296.707 11.449 296.855 11.926 cv
297 12.406 297.07 12.953 297.074 13.566 cv
cp
295.055 13.645 mo
295.051 13.309 295.023 12.992 294.973 12.699 cv
294.914 12.414 294.82 12.164 294.695 11.949 cv
294.563 11.738 294.391 11.57 294.18 11.449 cv
293.961 11.332 293.691 11.273 293.363 11.27 cv
293.074 11.273 292.82 11.328 292.602 11.43 cv
292.383 11.539 292.203 11.695 292.063 11.898 cv
291.922 12.105 291.816 12.352 291.746 12.637 cv
291.676 12.93 291.641 13.258 291.641 13.621 cv
291.641 13.969 291.668 14.285 291.727 14.57 cv
291.781 14.863 291.875 15.113 292.004 15.324 cv
292.129 15.539 292.301 15.703 292.523 15.816 cv
292.738 15.937 293.008 15.996 293.332 15.992 cv
293.625 15.996 293.883 15.941 294.105 15.832 cv
294.32 15.727 294.5 15.574 294.641 15.367 cv
294.781 15.168 294.883 14.922 294.953 14.633 cv
295.016 14.348 295.051 14.02 295.055 13.645 cv
cp
f
302.824 7.51202 mo
302.82 7.664 302.816 7.78497 302.809 7.875 cv
302.797 7.96899 302.781 8.039 302.762 8.086 cv
302.738 8.13702 302.715 8.172 302.691 8.18701 cv
302.664 8.20697 302.637 8.21503 302.605 8.21503 cv
302.566 8.21503 302.523 8.20697 302.484 8.18701 cv
302.438 8.172 302.383 8.15198 302.32 8.12903 cv
302.25 8.10901 302.176 8.09003 302.09 8.07001 cv
302 8.05499 301.895 8.047 301.777 8.04303 cv
301.633 8.047 301.512 8.06598 301.414 8.10901 cv
301.313 8.15601 301.23 8.22699 301.164 8.32001 cv
301.094 8.41803 301.043 8.54303 301.016 8.69501 cv
300.98 8.84802 300.965 9.03497 300.969 9.258 cv
300.969 9.89801 li
302.238 9.89801 li
302.281 9.90198 302.324 9.914 302.367 9.93701 cv
302.402 9.96503 302.438 10.008 302.465 10.066 cv
302.488 10.129 302.508 10.211 302.523 10.312 cv
302.535 10.414 302.539 10.543 302.543 10.691 cv
302.539 10.98 302.516 11.184 302.465 11.305 cv
302.41 11.43 302.332 11.492 302.238 11.488 cv
300.969 11.488 li
300.969 17.113 li
300.965 17.168 300.949 17.211 300.922 17.25 cv
300.887 17.289 300.836 17.324 300.766 17.348 cv
300.691 17.375 300.59 17.391 300.461 17.406 cv
300.328 17.418 300.168 17.426 299.984 17.426 cv
299.797 17.426 299.641 17.418 299.516 17.406 cv
299.387 17.391 299.285 17.375 299.211 17.348 cv
299.133 17.324 299.082 17.289 299.055 17.25 cv
299.023 17.211 299.008 17.168 299.012 17.113 cv
299.012 11.488 li
298.141 11.488 li
298.039 11.492 297.965 11.43 297.918 11.305 cv
297.867 11.184 297.84 10.98 297.844 10.691 cv
297.84 10.543 297.848 10.414 297.863 10.312 cv
297.875 10.211 297.895 10.129 297.918 10.066 cv
297.941 10.008 297.973 9.96503 298.012 9.93701 cv
298.051 9.914 298.094 9.90198 298.148 9.89801 cv
299.012 9.89801 li
299.012 9.31201 li
299.008 8.84399 299.055 8.42999 299.152 8.07001 cv
299.242 7.71503 299.391 7.41803 299.594 7.18402 cv
299.793 6.94897 300.047 6.77301 300.355 6.64801 cv
300.664 6.53101 301.027 6.46899 301.453 6.46899 cv
301.648 6.46899 301.84 6.48798 302.027 6.52002 cv
302.207 6.55902 302.352 6.59399 302.457 6.62903 cv
302.559 6.672 302.629 6.70697 302.668 6.73798 cv
302.703 6.77301 302.734 6.82397 302.758 6.88702 cv
302.781 6.953 302.797 7.03497 302.809 7.13702 cv
302.816 7.23798 302.82 7.36298 302.824 7.51202 cv
cp
f
313.059 8.13702 mo
313.055 8.297 313.051 8.42603 313.039 8.53101 cv
313.023 8.64099 313 8.72699 312.977 8.78497 cv
312.945 8.84802 312.914 8.89502 312.879 8.922 cv
312.84 8.95697 312.797 8.97302 312.754 8.96899 cv
309.457 8.96899 li
309.457 11.684 li
312.551 11.684 li
312.594 11.684 312.637 11.699 312.676 11.723 cv
312.711 11.754 312.742 11.797 312.773 11.855 cv
312.801 11.918 312.82 12 312.836 12.102 cv
312.844 12.207 312.852 12.336 312.855 12.492 cv
312.852 12.648 312.844 12.781 312.836 12.883 cv
312.82 12.992 312.801 13.078 312.773 13.141 cv
312.742 13.211 312.711 13.258 312.676 13.285 cv
312.637 13.316 312.594 13.332 312.551 13.328 cv
309.457 13.328 li
309.457 17.082 li
309.453 17.141 309.438 17.191 309.41 17.23 cv
309.375 17.277 309.32 17.312 309.242 17.336 cv
309.16 17.367 309.055 17.387 308.926 17.402 cv
308.793 17.418 308.625 17.426 308.43 17.426 cv
308.227 17.426 308.063 17.418 307.934 17.402 cv
307.797 17.387 307.691 17.367 307.617 17.336 cv
307.535 17.312 307.48 17.277 307.449 17.23 cv
307.414 17.191 307.395 17.141 307.398 17.082 cv
307.398 7.94098 li
307.395 7.71503 307.453 7.55103 307.574 7.44501 cv
307.688 7.34802 307.832 7.297 308.008 7.29303 cv
312.754 7.29303 li
312.797 7.297 312.84 7.30902 312.879 7.336 cv
312.914 7.367 312.945 7.414 312.977 7.47699 cv
313 7.54303 313.023 7.633 313.039 7.73798 cv
313.051 7.85199 313.055 7.98401 313.059 8.13702 cv
cp
f
316.57 17.113 mo
316.566 17.168 316.551 17.211 316.523 17.25 cv
316.488 17.289 316.434 17.324 316.363 17.348 cv
316.285 17.375 316.188 17.391 316.063 17.406 cv
315.938 17.418 315.777 17.426 315.59 17.426 cv
315.395 17.426 315.238 17.418 315.113 17.406 cv
314.988 17.391 314.887 17.375 314.813 17.348 cv
314.734 17.324 314.68 17.289 314.652 17.25 cv
314.617 17.211 314.602 17.168 314.605 17.113 cv
314.605 10.18 li
314.602 10.129 314.617 10.082 314.652 10.043 cv
314.68 10.004 314.734 9.97302 314.813 9.94098 cv
314.887 9.91803 314.988 9.89502 315.113 9.875 cv
315.238 9.86298 315.395 9.85498 315.59 9.85199 cv
315.777 9.85498 315.938 9.86298 316.063 9.875 cv
316.188 9.89502 316.285 9.91803 316.363 9.94098 cv
316.434 9.97302 316.488 10.004 316.523 10.043 cv
316.551 10.082 316.566 10.129 316.57 10.18 cv
cp
316.719 7.80902 mo
316.719 8.20697 316.637 8.47998 316.477 8.62903 cv
316.313 8.78101 316.016 8.85498 315.582 8.85199 cv
315.137 8.85498 314.836 8.78101 314.688 8.63702 cv
314.531 8.492 314.457 8.22998 314.457 7.84802 cv
314.457 7.453 314.535 7.17999 314.695 7.02698 cv
314.852 6.875 315.152 6.797 315.598 6.797 cv
316.031 6.797 316.328 6.87097 316.484 7.02002 cv
316.641 7.16803 316.719 7.43402 316.719 7.80902 cv
cp
f
320.496 17.113 mo
320.492 17.168 320.477 17.211 320.449 17.25 cv
320.414 17.289 320.359 17.324 320.289 17.348 cv
320.211 17.375 320.113 17.391 319.988 17.406 cv
319.863 17.418 319.703 17.426 319.516 17.426 cv
319.32 17.426 319.164 17.418 319.039 17.406 cv
318.914 17.391 318.813 17.375 318.738 17.348 cv
318.66 17.324 318.605 17.289 318.578 17.25 cv
318.543 17.211 318.527 17.168 318.531 17.113 cv
318.531 6.867 li
318.527 6.81598 318.543 6.77002 318.578 6.72699 cv
318.605 6.68701 318.66 6.65198 318.738 6.62097 cv
318.813 6.59399 318.914 6.57397 319.039 6.55499 cv
319.164 6.54303 319.32 6.53497 319.516 6.53101 cv
319.703 6.53497 319.863 6.54303 319.988 6.55499 cv
320.113 6.57397 320.211 6.59399 320.289 6.62097 cv
320.359 6.65198 320.414 6.68701 320.449 6.72699 cv
320.477 6.77002 320.492 6.81598 320.496 6.867 cv
cp
f
326.641 16.43 mo
326.641 16.656 326.625 16.832 326.598 16.953 cv
326.566 17.078 326.527 17.164 326.484 17.211 cv
326.434 17.262 326.367 17.305 326.277 17.344 cv
326.184 17.383 326.074 17.414 325.957 17.445 cv
325.832 17.469 325.699 17.492 325.559 17.512 cv
325.414 17.523 325.273 17.531 325.129 17.535 cv
324.738 17.531 324.398 17.48 324.113 17.387 cv
323.828 17.285 323.594 17.137 323.406 16.93 cv
323.219 16.727 323.078 16.469 322.992 16.156 cv
322.898 15.848 322.855 15.477 322.859 15.047 cv
322.859 11.488 li
322.027 11.488 li
321.926 11.492 321.852 11.43 321.801 11.305 cv
321.746 11.184 321.719 10.98 321.723 10.691 cv
321.719 10.543 321.727 10.414 321.742 10.312 cv
321.754 10.211 321.773 10.129 321.801 10.066 cv
321.824 10.008 321.855 9.96503 321.898 9.93701 cv
321.934 9.914 321.98 9.90198 322.035 9.89801 cv
322.859 9.89801 li
322.859 8.34802 li
322.855 8.30103 322.871 8.25403 322.902 8.20697 cv
322.93 8.16803 322.98 8.133 323.059 8.10199 cv
323.133 8.078 323.234 8.05499 323.363 8.039 cv
323.488 8.02698 323.645 8.02301 323.836 8.02002 cv
324.023 8.02301 324.184 8.02698 324.313 8.039 cv
324.438 8.05499 324.539 8.078 324.613 8.10199 cv
324.684 8.133 324.734 8.16803 324.77 8.20697 cv
324.797 8.25403 324.813 8.30103 324.816 8.34802 cv
324.816 9.89801 li
326.328 9.89801 li
326.379 9.90198 326.426 9.914 326.465 9.93701 cv
326.504 9.96503 326.535 10.008 326.563 10.066 cv
326.586 10.129 326.605 10.211 326.621 10.312 cv
326.633 10.414 326.641 10.543 326.641 10.691 cv
326.641 10.98 326.613 11.184 326.563 11.305 cv
326.508 11.43 326.434 11.492 326.336 11.488 cv
324.816 11.488 li
324.816 14.754 li
324.813 15.133 324.871 15.418 324.996 15.605 cv
325.113 15.797 325.328 15.891 325.633 15.891 cv
325.734 15.891 325.828 15.883 325.914 15.863 cv
325.996 15.848 326.07 15.828 326.137 15.801 cv
326.199 15.781 326.254 15.758 326.301 15.738 cv
326.344 15.723 326.383 15.715 326.422 15.711 cv
326.449 15.715 326.48 15.723 326.512 15.738 cv
326.539 15.758 326.559 15.797 326.578 15.848 cv
326.59 15.906 326.605 15.98 326.621 16.07 cv
326.633 16.168 326.641 16.285 326.641 16.43 cv
cp
f
334.227 13.437 mo
334.223 13.676 334.172 13.852 334.066 13.965 cv
333.957 14.082 333.809 14.141 333.629 14.137 cv
329.395 14.137 li
329.391 14.437 329.426 14.707 329.5 14.945 cv
329.566 15.187 329.68 15.391 329.836 15.559 cv
329.988 15.73 330.184 15.859 330.426 15.945 cv
330.664 16.035 330.953 16.078 331.297 16.078 cv
331.637 16.078 331.938 16.055 332.199 16.004 cv
332.457 15.957 332.684 15.902 332.875 15.84 cv
333.063 15.781 333.219 15.727 333.348 15.676 cv
333.469 15.629 333.57 15.605 333.652 15.602 cv
333.695 15.605 333.734 15.613 333.77 15.629 cv
333.797 15.648 333.824 15.68 333.844 15.727 cv
333.863 15.773 333.875 15.84 333.887 15.926 cv
333.891 16.012 333.895 16.121 333.898 16.25 cv
333.895 16.367 333.895 16.465 333.891 16.543 cv
333.883 16.625 333.875 16.691 333.867 16.746 cv
333.855 16.805 333.84 16.855 333.82 16.891 cv
333.801 16.934 333.773 16.969 333.742 17.004 cv
333.707 17.043 333.613 17.094 333.465 17.152 cv
333.309 17.219 333.117 17.281 332.887 17.336 cv
332.648 17.398 332.379 17.445 332.082 17.492 cv
331.777 17.531 331.457 17.555 331.117 17.559 cv
330.496 17.555 329.953 17.48 329.492 17.324 cv
329.023 17.172 328.637 16.934 328.328 16.617 cv
328.012 16.301 327.777 15.902 327.629 15.418 cv
327.473 14.937 327.398 14.371 327.402 13.715 cv
327.398 13.102 327.477 12.543 327.641 12.047 cv
327.797 11.551 328.031 11.133 328.344 10.785 cv
328.648 10.441 329.023 10.176 329.461 9.992 cv
329.898 9.81201 330.391 9.72302 330.945 9.71899 cv
331.523 9.72302 332.023 9.80902 332.438 9.97699 cv
332.852 10.152 333.188 10.391 333.453 10.691 cv
333.715 10.996 333.91 11.355 334.039 11.77 cv
334.16 12.187 334.223 12.637 334.227 13.125 cv
cp
332.324 12.875 mo
332.336 12.324 332.227 11.891 331.992 11.578 cv
331.758 11.266 331.391 11.109 330.898 11.105 cv
330.648 11.109 330.434 11.156 330.25 11.246 cv
330.063 11.344 329.91 11.469 329.789 11.625 cv
329.664 11.785 329.57 11.973 329.508 12.187 cv
329.441 12.402 329.402 12.633 329.395 12.875 cv
cp
f
340.301 10.809 mo
340.301 11 340.293 11.152 340.285 11.27 cv
340.27 11.391 340.254 11.484 340.238 11.551 cv
340.215 11.621 340.188 11.668 340.156 11.691 cv
340.117 11.719 340.074 11.73 340.027 11.73 cv
339.98 11.73 339.934 11.723 339.887 11.703 cv
339.832 11.687 339.773 11.668 339.711 11.645 cv
339.641 11.625 339.57 11.605 339.496 11.586 cv
339.414 11.57 339.328 11.562 339.238 11.559 cv
339.125 11.562 339.016 11.582 338.91 11.625 cv
338.801 11.672 338.688 11.742 338.574 11.832 cv
338.453 11.926 338.332 12.051 338.207 12.203 cv
338.078 12.363 337.941 12.555 337.797 12.781 cv
337.797 17.113 li
337.793 17.168 337.777 17.211 337.75 17.25 cv
337.715 17.289 337.66 17.324 337.59 17.348 cv
337.512 17.375 337.414 17.391 337.289 17.406 cv
337.164 17.418 337.004 17.426 336.816 17.426 cv
336.621 17.426 336.465 17.418 336.34 17.406 cv
336.215 17.391 336.113 17.375 336.039 17.348 cv
335.961 17.324 335.906 17.289 335.879 17.25 cv
335.844 17.211 335.828 17.168 335.832 17.113 cv
335.832 10.164 li
335.828 10.117 335.844 10.07 335.871 10.027 cv
335.895 9.992 335.941 9.961 336.012 9.92999 cv
336.078 9.90601 336.164 9.88702 336.273 9.87097 cv
336.379 9.86298 336.512 9.85498 336.676 9.85199 cv
336.84 9.85498 336.977 9.86298 337.086 9.87097 cv
337.191 9.88702 337.277 9.90601 337.34 9.92999 cv
337.398 9.961 337.441 9.992 337.469 10.027 cv
337.492 10.07 337.504 10.117 337.508 10.164 cv
337.508 11.027 li
337.688 10.77 337.859 10.559 338.023 10.387 cv
338.18 10.223 338.336 10.086 338.484 9.98401 cv
338.629 9.88702 338.773 9.82001 338.918 9.77698 cv
339.063 9.742 339.207 9.72302 339.355 9.71899 cv
339.422 9.72302 339.496 9.72699 339.574 9.72998 cv
339.652 9.742 339.73 9.75403 339.816 9.77002 cv
339.895 9.789 339.969 9.80902 340.035 9.83197 cv
340.094 9.85498 340.141 9.883 340.172 9.90601 cv
340.199 9.93701 340.219 9.96503 340.234 9.992 cv
340.246 10.027 340.258 10.07 340.27 10.121 cv
340.277 10.18 340.285 10.262 340.293 10.367 cv
340.297 10.477 340.301 10.625 340.301 10.809 cv
cp
f
343.465 17.113 mo
343.461 17.168 343.445 17.211 343.418 17.25 cv
343.383 17.289 343.328 17.324 343.258 17.348 cv
343.18 17.375 343.082 17.391 342.957 17.406 cv
342.832 17.418 342.672 17.426 342.484 17.426 cv
342.289 17.426 342.133 17.418 342.008 17.406 cv
341.883 17.391 341.781 17.375 341.707 17.348 cv
341.629 17.324 341.574 17.289 341.547 17.25 cv
341.512 17.211 341.496 17.168 341.5 17.113 cv
341.5 10.18 li
341.496 10.129 341.512 10.082 341.547 10.043 cv
341.574 10.004 341.629 9.97302 341.707 9.94098 cv
341.781 9.91803 341.883 9.89502 342.008 9.875 cv
342.133 9.86298 342.289 9.85498 342.484 9.85199 cv
342.672 9.85498 342.832 9.86298 342.957 9.875 cv
343.082 9.89502 343.18 9.91803 343.258 9.94098 cv
343.328 9.97302 343.383 10.004 343.418 10.043 cv
343.445 10.082 343.461 10.129 343.465 10.18 cv
cp
343.613 7.80902 mo
343.613 8.20697 343.531 8.47998 343.371 8.62903 cv
343.207 8.78101 342.91 8.85498 342.477 8.85199 cv
342.031 8.85498 341.73 8.78101 341.582 8.63702 cv
341.426 8.492 341.352 8.22998 341.352 7.84802 cv
341.352 7.453 341.43 7.17999 341.59 7.02698 cv
341.746 6.875 342.047 6.797 342.492 6.797 cv
342.926 6.797 343.223 6.87097 343.379 7.02002 cv
343.535 7.16803 343.613 7.43402 343.613 7.80902 cv
cp
f
352.066 17.113 mo
352.063 17.168 352.047 17.211 352.02 17.25 cv
351.984 17.289 351.934 17.324 351.863 17.348 cv
351.789 17.375 351.688 17.391 351.563 17.406 cv
351.434 17.418 351.277 17.426 351.094 17.426 cv
350.898 17.426 350.738 17.418 350.613 17.406 cv
350.484 17.391 350.383 17.375 350.313 17.348 cv
350.234 17.324 350.184 17.289 350.156 17.25 cv
350.121 17.211 350.105 17.168 350.109 17.113 cv
350.109 13.148 li
350.105 12.812 350.082 12.547 350.035 12.352 cv
349.984 12.16 349.91 11.996 349.82 11.859 cv
349.727 11.723 349.609 11.617 349.461 11.539 cv
349.313 11.465 349.137 11.426 348.941 11.426 cv
348.688 11.426 348.438 11.52 348.184 11.699 cv
347.93 11.883 347.664 12.145 347.391 12.492 cv
347.391 17.113 li
347.387 17.168 347.371 17.211 347.344 17.25 cv
347.309 17.289 347.254 17.324 347.184 17.348 cv
347.105 17.375 347.008 17.391 346.883 17.406 cv
346.758 17.418 346.598 17.426 346.41 17.426 cv
346.215 17.426 346.059 17.418 345.934 17.406 cv
345.809 17.391 345.707 17.375 345.633 17.348 cv
345.555 17.324 345.5 17.289 345.473 17.25 cv
345.438 17.211 345.422 17.168 345.426 17.113 cv
345.426 10.164 li
345.422 10.117 345.438 10.07 345.465 10.027 cv
345.488 9.992 345.535 9.961 345.605 9.92999 cv
345.672 9.90601 345.758 9.88702 345.867 9.87097 cv
345.973 9.86298 346.105 9.85498 346.27 9.85199 cv
346.434 9.85498 346.57 9.86298 346.68 9.87097 cv
346.785 9.88702 346.871 9.90601 346.934 9.92999 cv
346.992 9.961 347.035 9.992 347.063 10.027 cv
347.086 10.07 347.098 10.117 347.102 10.164 cv
347.102 10.965 li
347.484 10.555 347.875 10.242 348.273 10.031 cv
348.668 9.82397 349.086 9.72302 349.52 9.71899 cv
349.988 9.72302 350.387 9.80103 350.715 9.953 cv
351.039 10.113 351.301 10.324 351.5 10.59 cv
351.699 10.859 351.844 11.172 351.934 11.527 cv
352.02 11.887 352.063 12.316 352.066 12.82 cv
cp
f
360.262 10.645 mo
360.258 10.898 360.23 11.082 360.176 11.199 cv
360.117 11.32 360.047 11.379 359.969 11.379 cv
359.148 11.379 li
359.262 11.504 359.344 11.648 359.395 11.805 cv
359.441 11.965 359.465 12.129 359.469 12.297 cv
359.465 12.707 359.398 13.066 359.266 13.379 cv
359.129 13.695 358.934 13.961 358.684 14.172 cv
358.43 14.391 358.129 14.555 357.773 14.664 cv
357.414 14.781 357.016 14.836 356.586 14.832 cv
356.359 14.836 356.148 14.809 355.945 14.75 cv
355.742 14.699 355.586 14.637 355.477 14.559 cv
355.414 14.629 355.355 14.707 355.309 14.801 cv
355.258 14.895 355.234 15 355.238 15.109 cv
355.234 15.266 355.301 15.387 355.434 15.48 cv
355.563 15.578 355.75 15.633 355.992 15.641 cv
357.684 15.703 li
358.078 15.719 358.43 15.777 358.738 15.871 cv
359.047 15.973 359.309 16.105 359.52 16.277 cv
359.73 16.453 359.891 16.664 360 16.906 cv
360.109 17.152 360.164 17.426 360.168 17.738 cv
360.164 18.074 360.09 18.398 359.941 18.707 cv
359.793 19.008 359.566 19.27 359.266 19.496 cv
358.961 19.715 358.582 19.895 358.129 20.027 cv
357.672 20.156 357.141 20.219 356.539 20.223 cv
355.941 20.219 355.438 20.172 355.02 20.082 cv
354.602 19.984 354.258 19.855 353.992 19.691 cv
353.723 19.523 353.527 19.324 353.41 19.098 cv
353.285 18.863 353.227 18.609 353.227 18.336 cv
353.227 18.164 353.246 18.004 353.293 17.848 cv
353.332 17.691 353.398 17.539 353.488 17.398 cv
353.57 17.254 353.676 17.121 353.801 16.988 cv
353.926 16.859 354.066 16.734 354.23 16.613 cv
354.004 16.5 353.832 16.34 353.711 16.129 cv
353.59 15.926 353.531 15.699 353.531 15.453 cv
353.531 15.152 353.598 14.875 353.738 14.617 cv
353.875 14.367 354.059 14.137 354.285 13.934 cv
354.102 13.754 353.957 13.539 353.848 13.281 cv
353.738 13.031 353.684 12.711 353.688 12.328 cv
353.684 11.926 353.754 11.566 353.898 11.242 cv
354.039 10.926 354.238 10.656 354.496 10.434 cv
354.75 10.215 355.055 10.043 355.406 9.92603 cv
355.758 9.80902 356.148 9.75 356.578 9.75 cv
356.797 9.75 357.004 9.76599 357.203 9.789 cv
357.402 9.82001 357.59 9.85498 357.762 9.89801 cv
359.969 9.89801 li
360.051 9.90198 360.121 9.961 360.18 10.07 cv
360.23 10.187 360.258 10.379 360.262 10.645 cv
cp
357.746 12.289 mo
357.742 11.918 357.641 11.629 357.434 11.418 cv
357.223 11.215 356.93 11.109 356.555 11.105 cv
356.359 11.109 356.188 11.141 356.047 11.203 cv
355.898 11.27 355.777 11.359 355.684 11.469 cv
355.582 11.582 355.512 11.711 355.469 11.859 cv
355.418 12.008 355.395 12.164 355.398 12.32 cv
355.395 12.68 355.5 12.957 355.711 13.16 cv
355.918 13.367 356.207 13.473 356.578 13.469 cv
356.773 13.473 356.941 13.441 357.09 13.375 cv
357.23 13.316 357.352 13.23 357.453 13.117 cv
357.547 13.012 357.621 12.883 357.672 12.738 cv
357.719 12.598 357.742 12.449 357.746 12.289 cv
cp
358.207 17.84 mo
358.207 17.602 358.113 17.426 357.926 17.301 cv
357.738 17.18 357.48 17.109 357.152 17.098 cv
355.758 17.059 li
355.621 17.16 355.512 17.254 355.434 17.344 cv
355.352 17.434 355.289 17.52 355.242 17.605 cv
355.191 17.687 355.156 17.77 355.145 17.848 cv
355.125 17.926 355.117 18.004 355.121 18.09 cv
355.117 18.344 355.25 18.543 355.512 18.68 cv
355.773 18.812 356.145 18.879 356.625 18.883 cv
356.918 18.879 357.164 18.848 357.371 18.793 cv
357.57 18.73 357.734 18.652 357.863 18.555 cv
357.984 18.453 358.074 18.344 358.129 18.223 cv
358.18 18.102 358.207 17.973 358.207 17.84 cv
cp
f
372.172 8.13702 mo
372.168 8.29303 372.16 8.422 372.152 8.52301 cv
372.137 8.633 372.117 8.71899 372.094 8.78101 cv
372.063 8.84802 372.031 8.89502 371.996 8.922 cv
371.953 8.95697 371.91 8.97302 371.867 8.96899 cv
369.344 8.96899 li
369.344 17.098 li
369.344 17.152 369.324 17.199 369.293 17.238 cv
369.254 17.281 369.199 17.316 369.125 17.34 cv
369.043 17.367 368.938 17.387 368.809 17.402 cv
368.672 17.418 368.508 17.426 368.313 17.426 cv
368.117 17.426 367.953 17.418 367.82 17.402 cv
367.688 17.387 367.582 17.367 367.504 17.34 cv
367.426 17.316 367.367 17.281 367.336 17.238 cv
367.297 17.199 367.281 17.152 367.285 17.098 cv
367.285 8.96899 li
364.762 8.96899 li
364.707 8.97302 364.66 8.95697 364.629 8.922 cv
364.59 8.89502 364.559 8.84802 364.535 8.78101 cv
364.504 8.71899 364.484 8.633 364.477 8.52301 cv
364.461 8.422 364.457 8.29303 364.457 8.13702 cv
364.457 7.98401 364.461 7.85199 364.477 7.73798 cv
364.484 7.633 364.504 7.54303 364.535 7.47699 cv
364.559 7.414 364.59 7.367 364.629 7.336 cv
364.66 7.30902 364.707 7.297 364.762 7.29303 cv
371.867 7.29303 li
371.91 7.297 371.953 7.30902 371.996 7.336 cv
372.031 7.367 372.063 7.414 372.094 7.47699 cv
372.117 7.54303 372.137 7.633 372.152 7.73798 cv
372.16 7.85199 372.168 7.98401 372.172 8.13702 cv
cp
f
375.207 17.113 mo
375.203 17.168 375.188 17.211 375.16 17.25 cv
375.125 17.289 375.07 17.324 375 17.348 cv
374.922 17.375 374.824 17.391 374.699 17.406 cv
374.574 17.418 374.414 17.426 374.227 17.426 cv
374.031 17.426 373.875 17.418 373.75 17.406 cv
373.625 17.391 373.523 17.375 373.449 17.348 cv
373.371 17.324 373.316 17.289 373.289 17.25 cv
373.254 17.211 373.238 17.168 373.242 17.113 cv
373.242 10.18 li
373.238 10.129 373.254 10.082 373.289 10.043 cv
373.316 10.004 373.371 9.97302 373.449 9.94098 cv
373.523 9.91803 373.625 9.89502 373.75 9.875 cv
373.875 9.86298 374.031 9.85498 374.227 9.85199 cv
374.414 9.85498 374.574 9.86298 374.699 9.875 cv
374.824 9.89502 374.922 9.91803 375 9.94098 cv
375.07 9.97302 375.125 10.004 375.16 10.043 cv
375.188 10.082 375.203 10.129 375.207 10.18 cv
cp
375.355 7.80902 mo
375.355 8.20697 375.273 8.47998 375.113 8.62903 cv
374.949 8.78101 374.652 8.85498 374.219 8.85199 cv
373.773 8.85498 373.473 8.78101 373.324 8.63702 cv
373.168 8.492 373.094 8.22998 373.094 7.84802 cv
373.094 7.453 373.172 7.17999 373.332 7.02698 cv
373.488 6.875 373.789 6.797 374.234 6.797 cv
374.668 6.797 374.965 6.87097 375.121 7.02002 cv
375.277 7.16803 375.355 7.43402 375.355 7.80902 cv
cp
f
388.262 17.113 mo
388.258 17.168 388.242 17.211 388.215 17.25 cv
388.18 17.289 388.129 17.324 388.059 17.348 cv
387.984 17.375 387.883 17.391 387.762 17.406 cv
387.637 17.418 387.48 17.426 387.289 17.426 cv
387.09 17.426 386.93 17.418 386.805 17.406 cv
386.68 17.391 386.578 17.375 386.504 17.348 cv
386.426 17.324 386.375 17.289 386.348 17.25 cv
386.32 17.211 386.305 17.168 386.309 17.113 cv
386.309 12.992 li
386.305 12.762 386.285 12.547 386.242 12.352 cv
386.195 12.16 386.125 11.996 386.039 11.859 cv
385.945 11.723 385.832 11.617 385.695 11.539 cv
385.555 11.465 385.391 11.426 385.199 11.426 cv
384.965 11.426 384.727 11.52 384.488 11.699 cv
384.25 11.883 383.992 12.145 383.711 12.492 cv
383.711 17.113 li
383.711 17.168 383.695 17.211 383.664 17.25 cv
383.633 17.289 383.578 17.324 383.504 17.348 cv
383.426 17.375 383.324 17.391 383.203 17.406 cv
383.078 17.418 382.926 17.426 382.738 17.426 cv
382.543 17.426 382.383 17.418 382.262 17.406 cv
382.133 17.391 382.031 17.375 381.961 17.348 cv
381.883 17.324 381.832 17.289 381.801 17.25 cv
381.77 17.211 381.754 17.168 381.754 17.113 cv
381.754 12.992 li
381.754 12.762 381.73 12.547 381.688 12.352 cv
381.645 12.16 381.578 11.996 381.492 11.859 cv
381.398 11.723 381.285 11.617 381.148 11.539 cv
381.004 11.465 380.84 11.426 380.656 11.426 cv
380.414 11.426 380.176 11.52 379.938 11.699 cv
379.699 11.883 379.441 12.145 379.168 12.492 cv
379.168 17.113 li
379.164 17.168 379.148 17.211 379.121 17.25 cv
379.086 17.289 379.031 17.324 378.961 17.348 cv
378.883 17.375 378.785 17.391 378.66 17.406 cv
378.535 17.418 378.375 17.426 378.188 17.426 cv
377.992 17.426 377.836 17.418 377.711 17.406 cv
377.586 17.391 377.484 17.375 377.41 17.348 cv
377.332 17.324 377.277 17.289 377.25 17.25 cv
377.215 17.211 377.199 17.168 377.203 17.113 cv
377.203 10.164 li
377.199 10.117 377.215 10.07 377.242 10.027 cv
377.266 9.992 377.313 9.961 377.383 9.92999 cv
377.449 9.90601 377.535 9.88702 377.645 9.87097 cv
377.75 9.86298 377.883 9.85498 378.047 9.85199 cv
378.211 9.85498 378.348 9.86298 378.457 9.87097 cv
378.563 9.88702 378.648 9.90601 378.711 9.92999 cv
378.77 9.961 378.813 9.992 378.84 10.027 cv
378.863 10.07 378.875 10.117 378.879 10.164 cv
378.879 10.965 li
379.262 10.555 379.645 10.242 380.027 10.031 cv
380.406 9.82397 380.809 9.72302 381.227 9.71899 cv
381.512 9.72302 381.766 9.75 381.996 9.80902 cv
382.223 9.87097 382.43 9.95697 382.609 10.066 cv
382.789 10.18 382.941 10.316 383.07 10.469 cv
383.199 10.625 383.309 10.797 383.398 10.988 cv
383.605 10.766 383.809 10.574 384.012 10.414 cv
384.207 10.254 384.406 10.121 384.602 10.02 cv
384.797 9.91803 384.992 9.84399 385.188 9.79303 cv
385.383 9.74597 385.582 9.72302 385.785 9.71899 cv
386.246 9.72302 386.633 9.80103 386.953 9.953 cv
387.266 10.113 387.523 10.324 387.719 10.59 cv
387.914 10.859 388.051 11.172 388.137 11.527 cv
388.215 11.887 388.258 12.266 388.262 12.664 cv
cp
f
396.598 13.437 mo
396.594 13.676 396.543 13.852 396.438 13.965 cv
396.328 14.082 396.18 14.141 396 14.137 cv
391.766 14.137 li
391.762 14.437 391.797 14.707 391.871 14.945 cv
391.938 15.187 392.051 15.391 392.207 15.559 cv
392.359 15.73 392.555 15.859 392.797 15.945 cv
393.035 16.035 393.324 16.078 393.668 16.078 cv
394.008 16.078 394.309 16.055 394.57 16.004 cv
394.828 15.957 395.055 15.902 395.246 15.84 cv
395.434 15.781 395.59 15.727 395.719 15.676 cv
395.84 15.629 395.941 15.605 396.023 15.602 cv
396.066 15.605 396.105 15.613 396.141 15.629 cv
396.168 15.648 396.195 15.68 396.215 15.727 cv
396.234 15.773 396.246 15.84 396.258 15.926 cv
396.262 16.012 396.266 16.121 396.27 16.25 cv
396.266 16.367 396.266 16.465 396.262 16.543 cv
396.254 16.625 396.246 16.691 396.238 16.746 cv
396.227 16.805 396.211 16.855 396.191 16.891 cv
396.172 16.934 396.145 16.969 396.113 17.004 cv
396.078 17.043 395.984 17.094 395.836 17.152 cv
395.68 17.219 395.488 17.281 395.258 17.336 cv
395.02 17.398 394.75 17.445 394.453 17.492 cv
394.148 17.531 393.828 17.555 393.488 17.559 cv
392.867 17.555 392.324 17.48 391.863 17.324 cv
391.395 17.172 391.008 16.934 390.699 16.617 cv
390.383 16.301 390.148 15.902 390 15.418 cv
389.844 14.937 389.77 14.371 389.773 13.715 cv
389.77 13.102 389.848 12.543 390.012 12.047 cv
390.168 11.551 390.402 11.133 390.715 10.785 cv
391.02 10.441 391.395 10.176 391.832 9.992 cv
392.27 9.81201 392.762 9.72302 393.316 9.71899 cv
393.895 9.72302 394.395 9.80902 394.809 9.97699 cv
395.223 10.152 395.559 10.391 395.824 10.691 cv
396.086 10.996 396.281 11.355 396.41 11.77 cv
396.531 12.187 396.594 12.637 396.598 13.125 cv
cp
394.695 12.875 mo
394.707 12.324 394.598 11.891 394.363 11.578 cv
394.129 11.266 393.762 11.109 393.27 11.105 cv
393.02 11.109 392.805 11.156 392.621 11.246 cv
392.434 11.344 392.281 11.469 392.16 11.625 cv
392.035 11.785 391.941 11.973 391.879 12.187 cv
391.813 12.402 391.773 12.633 391.766 12.875 cv
cp
f
403.098 15.148 mo
403.094 15.547 403.02 15.895 402.875 16.195 cv
402.727 16.496 402.52 16.75 402.25 16.949 cv
401.977 17.156 401.656 17.305 401.289 17.406 cv
400.922 17.504 400.52 17.555 400.09 17.559 cv
399.824 17.555 399.578 17.535 399.344 17.5 cv
399.109 17.457 398.898 17.41 398.711 17.352 cv
398.523 17.293 398.367 17.23 398.242 17.168 cv
398.117 17.105 398.023 17.047 397.969 16.992 cv
397.91 16.937 397.867 16.855 397.84 16.738 cv
397.805 16.625 397.789 16.449 397.793 16.219 cv
397.789 16.07 397.797 15.949 397.809 15.855 cv
397.816 15.766 397.832 15.695 397.855 15.637 cv
397.875 15.586 397.898 15.547 397.934 15.527 cv
397.961 15.512 398 15.504 398.047 15.5 cv
398.102 15.504 398.188 15.535 398.301 15.598 cv
398.41 15.664 398.547 15.738 398.719 15.812 cv
398.883 15.895 399.078 15.965 399.297 16.031 cv
399.516 16.102 399.766 16.137 400.051 16.133 cv
400.227 16.137 400.383 16.117 400.523 16.078 cv
400.656 16.043 400.777 15.992 400.883 15.922 cv
400.98 15.855 401.055 15.77 401.109 15.664 cv
401.156 15.562 401.184 15.441 401.188 15.305 cv
401.184 15.148 401.137 15.016 401.043 14.906 cv
400.949 14.797 400.82 14.699 400.664 14.613 cv
400.5 14.531 400.32 14.453 400.125 14.379 cv
399.922 14.309 399.719 14.23 399.508 14.137 cv
399.297 14.051 399.09 13.949 398.895 13.832 cv
398.691 13.723 398.512 13.582 398.355 13.414 cv
398.191 13.25 398.066 13.051 397.973 12.812 cv
397.879 12.582 397.832 12.301 397.832 11.969 cv
397.832 11.641 397.895 11.336 398.023 11.055 cv
398.152 10.781 398.34 10.543 398.586 10.344 cv
398.828 10.148 399.125 9.99597 399.477 9.883 cv
399.824 9.77698 400.219 9.72302 400.66 9.71899 cv
400.875 9.72302 401.086 9.73798 401.293 9.76599 cv
401.496 9.80103 401.684 9.84003 401.852 9.883 cv
402.016 9.93402 402.156 9.98401 402.273 10.035 cv
402.387 10.094 402.469 10.141 402.52 10.176 cv
402.566 10.219 402.602 10.258 402.625 10.293 cv
402.645 10.336 402.656 10.383 402.668 10.434 cv
402.676 10.488 402.688 10.555 402.695 10.633 cv
402.703 10.719 402.707 10.816 402.707 10.934 cv
402.707 11.074 402.703 11.191 402.695 11.277 cv
402.688 11.371 402.672 11.441 402.656 11.488 cv
402.637 11.543 402.613 11.578 402.586 11.594 cv
402.551 11.617 402.516 11.625 402.477 11.621 cv
402.426 11.625 402.352 11.598 402.258 11.539 cv
402.156 11.488 402.035 11.43 401.887 11.363 cv
401.738 11.305 401.566 11.246 401.371 11.187 cv
401.176 11.137 400.953 11.109 400.707 11.105 cv
400.527 11.109 400.375 11.129 400.246 11.16 cv
400.113 11.199 400.004 11.25 399.926 11.316 cv
399.84 11.387 399.777 11.465 399.738 11.555 cv
399.691 11.648 399.672 11.746 399.676 11.848 cv
399.672 12.008 399.723 12.145 399.824 12.25 cv
399.922 12.363 400.051 12.457 400.215 12.539 cv
400.375 12.625 400.559 12.703 400.766 12.773 cv
400.969 12.848 401.176 12.93 401.387 13.012 cv
401.594 13.102 401.801 13.199 402.012 13.312 cv
402.215 13.426 402.398 13.566 402.559 13.73 cv
402.719 13.898 402.848 14.098 402.949 14.328 cv
403.043 14.562 403.094 14.836 403.098 15.148 cv
cp
f
415.426 13.461 mo
415.422 13.762 415.395 13.973 415.34 14.09 cv
415.281 14.215 415.191 14.273 415.066 14.27 cv
411.824 14.27 li
411.695 14.273 411.602 14.211 411.547 14.086 cv
411.484 13.965 411.457 13.758 411.461 13.461 cv
411.457 13.172 411.484 12.965 411.547 12.844 cv
411.602 12.727 411.695 12.668 411.824 12.664 cv
415.066 12.664 li
415.129 12.668 415.18 12.68 415.227 12.703 cv
415.266 12.73 415.305 12.777 415.34 12.836 cv
415.367 12.902 415.391 12.984 415.406 13.086 cv
415.418 13.191 415.422 13.316 415.426 13.461 cv
cp
f
430.727 14.676 mo
430.727 15.137 430.645 15.543 430.488 15.898 cv
430.324 16.262 430.09 16.566 429.785 16.809 cv
429.473 17.059 429.09 17.242 428.637 17.367 cv
428.176 17.492 427.648 17.555 427.055 17.559 cv
426.48 17.555 425.98 17.496 425.551 17.387 cv
425.117 17.27 424.758 17.105 424.469 16.887 cv
424.176 16.668 423.957 16.395 423.813 16.066 cv
423.668 15.742 423.594 15.371 423.598 14.949 cv
423.594 14.664 423.637 14.395 423.727 14.141 cv
423.809 13.891 423.938 13.656 424.105 13.441 cv
424.273 13.227 424.484 13.023 424.738 12.832 cv
424.988 12.645 425.277 12.465 425.605 12.289 cv
425.34 12.145 425.102 11.988 424.891 11.82 cv
424.676 11.652 424.492 11.469 424.344 11.266 cv
424.191 11.07 424.078 10.852 424 10.609 cv
423.922 10.375 423.883 10.113 423.887 9.828 cv
423.883 9.42603 423.953 9.05902 424.098 8.72699 cv
424.238 8.39801 424.453 8.11298 424.738 7.867 cv
425.02 7.62903 425.371 7.44098 425.801 7.31201 cv
426.223 7.18402 426.719 7.12097 427.281 7.117 cv
427.836 7.12097 428.313 7.17999 428.711 7.297 cv
429.109 7.41803 429.434 7.586 429.691 7.80103 cv
429.941 8.02301 430.129 8.28497 430.254 8.586 cv
430.371 8.89099 430.434 9.22699 430.438 9.59399 cv
430.434 9.84003 430.395 10.078 430.316 10.309 cv
430.234 10.539 430.121 10.758 429.977 10.965 cv
429.832 11.176 429.652 11.371 429.441 11.555 cv
429.227 11.742 428.984 11.91 428.715 12.055 cv
429.031 12.223 429.316 12.398 429.566 12.586 cv
429.816 12.773 430.023 12.977 430.195 13.191 cv
430.363 13.406 430.496 13.637 430.59 13.879 cv
430.68 14.129 430.727 14.395 430.727 14.676 cv
cp
428.469 9.78101 mo
428.465 9.60199 428.438 9.43701 428.391 9.289 cv
428.336 9.14502 428.254 9.02301 428.145 8.922 cv
428.027 8.82397 427.891 8.74597 427.73 8.69098 cv
427.563 8.64099 427.367 8.61298 427.148 8.61298 cv
426.711 8.61298 426.387 8.71503 426.176 8.914 cv
425.957 9.11298 425.852 9.39099 425.855 9.742 cv
425.852 9.914 425.879 10.066 425.938 10.203 cv
425.988 10.344 426.074 10.477 426.191 10.598 cv
426.305 10.727 426.453 10.848 426.637 10.965 cv
426.816 11.086 427.031 11.215 427.281 11.348 cv
427.66 11.129 427.953 10.891 428.16 10.633 cv
428.363 10.383 428.465 10.098 428.469 9.78101 cv
cp
428.699 14.816 mo
428.699 14.629 428.664 14.453 428.602 14.289 cv
428.535 14.133 428.438 13.98 428.301 13.84 cv
428.16 13.699 427.984 13.566 427.781 13.437 cv
427.57 13.309 427.328 13.176 427.055 13.039 cv
426.813 13.172 426.605 13.301 426.426 13.43 cv
426.242 13.559 426.09 13.695 425.973 13.836 cv
425.852 13.98 425.762 14.133 425.703 14.289 cv
425.641 14.453 425.609 14.621 425.613 14.801 cv
425.609 15.207 425.742 15.516 426.008 15.727 cv
426.27 15.941 426.66 16.051 427.18 16.047 cv
427.688 16.051 428.066 15.941 428.32 15.719 cv
428.57 15.504 428.699 15.203 428.699 14.816 cv
cp
f
442.578 8.13702 mo
442.574 8.29303 442.566 8.422 442.559 8.52301 cv
442.543 8.633 442.523 8.71899 442.5 8.78101 cv
442.469 8.84802 442.438 8.89502 442.402 8.922 cv
442.359 8.95697 442.316 8.97302 442.273 8.96899 cv
439.75 8.96899 li
439.75 17.098 li
439.75 17.152 439.73 17.199 439.699 17.238 cv
439.66 17.281 439.605 17.316 439.531 17.34 cv
439.449 17.367 439.344 17.387 439.215 17.402 cv
439.078 17.418 438.914 17.426 438.719 17.426 cv
438.523 17.426 438.359 17.418 438.227 17.402 cv
438.094 17.387 437.988 17.367 437.91 17.34 cv
437.832 17.316 437.773 17.281 437.742 17.238 cv
437.703 17.199 437.688 17.152 437.691 17.098 cv
437.691 8.96899 li
435.168 8.96899 li
435.113 8.97302 435.066 8.95697 435.035 8.922 cv
434.996 8.89502 434.965 8.84802 434.941 8.78101 cv
434.91 8.71899 434.891 8.633 434.883 8.52301 cv
434.867 8.422 434.863 8.29303 434.863 8.13702 cv
434.863 7.98401 434.867 7.85199 434.883 7.73798 cv
434.891 7.633 434.91 7.54303 434.941 7.47699 cv
434.965 7.414 434.996 7.367 435.035 7.336 cv
435.066 7.30902 435.113 7.297 435.168 7.29303 cv
442.273 7.29303 li
442.316 7.297 442.359 7.30902 442.402 7.336 cv
442.438 7.367 442.469 7.414 442.5 7.47699 cv
442.523 7.54303 442.543 7.633 442.559 7.73798 cv
442.566 7.85199 442.574 7.98401 442.578 8.13702 cv
cp
f
450.293 17.113 mo
450.289 17.168 450.273 17.211 450.246 17.25 cv
450.211 17.289 450.16 17.324 450.09 17.348 cv
450.016 17.375 449.914 17.391 449.789 17.406 cv
449.66 17.418 449.504 17.426 449.32 17.426 cv
449.125 17.426 448.965 17.418 448.84 17.406 cv
448.711 17.391 448.609 17.375 448.539 17.348 cv
448.461 17.324 448.41 17.289 448.383 17.25 cv
448.348 17.211 448.332 17.168 448.336 17.113 cv
448.336 13.148 li
448.332 12.812 448.309 12.547 448.262 12.352 cv
448.211 12.16 448.137 11.996 448.047 11.859 cv
447.953 11.723 447.836 11.617 447.688 11.539 cv
447.539 11.465 447.363 11.426 447.168 11.426 cv
446.914 11.426 446.664 11.52 446.41 11.699 cv
446.156 11.883 445.891 12.145 445.617 12.492 cv
445.617 17.113 li
445.613 17.168 445.598 17.211 445.57 17.25 cv
445.535 17.289 445.48 17.324 445.41 17.348 cv
445.332 17.375 445.234 17.391 445.109 17.406 cv
444.984 17.418 444.824 17.426 444.637 17.426 cv
444.441 17.426 444.285 17.418 444.16 17.406 cv
444.035 17.391 443.934 17.375 443.859 17.348 cv
443.781 17.324 443.727 17.289 443.699 17.25 cv
443.664 17.211 443.648 17.168 443.652 17.113 cv
443.652 6.867 li
443.648 6.81598 443.664 6.77002 443.699 6.72699 cv
443.727 6.68701 443.781 6.65198 443.859 6.62097 cv
443.934 6.59399 444.035 6.57397 444.16 6.55499 cv
444.285 6.54303 444.441 6.53497 444.637 6.53101 cv
444.824 6.53497 444.984 6.54303 445.109 6.55499 cv
445.234 6.57397 445.332 6.59399 445.41 6.62097 cv
445.48 6.65198 445.535 6.68701 445.57 6.72699 cv
445.598 6.77002 445.613 6.81598 445.617 6.867 cv
445.617 10.707 li
445.953 10.379 446.297 10.133 446.648 9.96503 cv
446.996 9.80499 447.363 9.72302 447.746 9.71899 cv
448.215 9.72302 448.613 9.80103 448.941 9.953 cv
449.266 10.113 449.527 10.324 449.727 10.594 cv
449.926 10.863 450.07 11.18 450.16 11.539 cv
450.246 11.902 450.289 12.34 450.293 12.852 cv
cp
f
456.691 10.809 mo
456.691 11 456.684 11.152 456.676 11.27 cv
456.66 11.391 456.645 11.484 456.629 11.551 cv
456.605 11.621 456.578 11.668 456.547 11.691 cv
456.508 11.719 456.465 11.73 456.418 11.73 cv
456.371 11.73 456.324 11.723 456.277 11.703 cv
456.223 11.687 456.164 11.668 456.102 11.645 cv
456.031 11.625 455.961 11.605 455.887 11.586 cv
455.805 11.57 455.719 11.562 455.629 11.559 cv
455.516 11.562 455.406 11.582 455.301 11.625 cv
455.191 11.672 455.078 11.742 454.965 11.832 cv
454.844 11.926 454.723 12.051 454.598 12.203 cv
454.469 12.363 454.332 12.555 454.188 12.781 cv
454.188 17.113 li
454.184 17.168 454.168 17.211 454.141 17.25 cv
454.105 17.289 454.051 17.324 453.98 17.348 cv
453.902 17.375 453.805 17.391 453.68 17.406 cv
453.555 17.418 453.395 17.426 453.207 17.426 cv
453.012 17.426 452.855 17.418 452.73 17.406 cv
452.605 17.391 452.504 17.375 452.43 17.348 cv
452.352 17.324 452.297 17.289 452.27 17.25 cv
452.234 17.211 452.219 17.168 452.223 17.113 cv
452.223 10.164 li
452.219 10.117 452.234 10.07 452.262 10.027 cv
452.285 9.992 452.332 9.961 452.402 9.92999 cv
452.469 9.90601 452.555 9.88702 452.664 9.87097 cv
452.77 9.86298 452.902 9.85498 453.066 9.85199 cv
453.23 9.85498 453.367 9.86298 453.477 9.87097 cv
453.582 9.88702 453.668 9.90601 453.73 9.92999 cv
453.789 9.961 453.832 9.992 453.859 10.027 cv
453.883 10.07 453.895 10.117 453.898 10.164 cv
453.898 11.027 li
454.078 10.77 454.25 10.559 454.414 10.387 cv
454.57 10.223 454.727 10.086 454.875 9.98401 cv
455.02 9.88702 455.164 9.82001 455.309 9.77698 cv
455.453 9.742 455.598 9.72302 455.746 9.71899 cv
455.813 9.72302 455.887 9.72699 455.965 9.72998 cv
456.043 9.742 456.121 9.75403 456.207 9.77002 cv
456.285 9.789 456.359 9.80902 456.426 9.83197 cv
456.484 9.85498 456.531 9.883 456.563 9.90601 cv
456.59 9.93701 456.609 9.96503 456.625 9.992 cv
456.637 10.027 456.648 10.07 456.66 10.121 cv
456.668 10.18 456.676 10.262 456.684 10.367 cv
456.688 10.477 456.691 10.625 456.691 10.809 cv
cp
f
464.133 13.437 mo
464.129 13.676 464.078 13.852 463.973 13.965 cv
463.863 14.082 463.715 14.141 463.535 14.137 cv
459.301 14.137 li
459.297 14.437 459.332 14.707 459.406 14.945 cv
459.473 15.187 459.586 15.391 459.742 15.559 cv
459.895 15.73 460.09 15.859 460.332 15.945 cv
460.57 16.035 460.859 16.078 461.203 16.078 cv
461.543 16.078 461.844 16.055 462.105 16.004 cv
462.363 15.957 462.59 15.902 462.781 15.84 cv
462.969 15.781 463.125 15.727 463.254 15.676 cv
463.375 15.629 463.477 15.605 463.559 15.602 cv
463.602 15.605 463.641 15.613 463.676 15.629 cv
463.703 15.648 463.73 15.68 463.75 15.727 cv
463.77 15.773 463.781 15.84 463.793 15.926 cv
463.797 16.012 463.801 16.121 463.805 16.25 cv
463.801 16.367 463.801 16.465 463.797 16.543 cv
463.789 16.625 463.781 16.691 463.773 16.746 cv
463.762 16.805 463.746 16.855 463.727 16.891 cv
463.707 16.934 463.68 16.969 463.648 17.004 cv
463.613 17.043 463.52 17.094 463.371 17.152 cv
463.215 17.219 463.023 17.281 462.793 17.336 cv
462.555 17.398 462.285 17.445 461.988 17.492 cv
461.684 17.531 461.363 17.555 461.023 17.559 cv
460.402 17.555 459.859 17.48 459.398 17.324 cv
458.93 17.172 458.543 16.934 458.234 16.617 cv
457.918 16.301 457.684 15.902 457.535 15.418 cv
457.379 14.937 457.305 14.371 457.309 13.715 cv
457.305 13.102 457.383 12.543 457.547 12.047 cv
457.703 11.551 457.938 11.133 458.25 10.785 cv
458.555 10.441 458.93 10.176 459.367 9.992 cv
459.805 9.81201 460.297 9.72302 460.852 9.71899 cv
461.43 9.72302 461.93 9.80902 462.344 9.97699 cv
462.758 10.152 463.094 10.391 463.359 10.691 cv
463.621 10.996 463.816 11.355 463.945 11.77 cv
464.066 12.187 464.129 12.637 464.133 13.125 cv
cp
462.23 12.875 mo
462.242 12.324 462.133 11.891 461.898 11.578 cv
461.664 11.266 461.297 11.109 460.805 11.105 cv
460.555 11.109 460.34 11.156 460.156 11.246 cv
459.969 11.344 459.816 11.469 459.695 11.625 cv
459.57 11.785 459.477 11.973 459.414 12.187 cv
459.348 12.402 459.309 12.633 459.301 12.875 cv
cp
f
471.664 17.137 mo
471.66 17.215 471.633 17.27 471.586 17.309 cv
471.531 17.352 471.449 17.379 471.34 17.398 cv
471.223 17.414 471.059 17.426 470.844 17.426 cv
470.605 17.426 470.434 17.414 470.332 17.398 cv
470.223 17.379 470.148 17.352 470.109 17.309 cv
470.063 17.27 470.043 17.215 470.043 17.137 cv
470.043 16.586 li
469.754 16.895 469.426 17.133 469.063 17.301 cv
468.695 17.473 468.289 17.555 467.844 17.559 cv
467.473 17.555 467.133 17.508 466.824 17.414 cv
466.516 17.32 466.25 17.18 466.023 16.984 cv
465.797 16.797 465.621 16.562 465.496 16.281 cv
465.371 16.004 465.309 15.676 465.313 15.297 cv
465.309 14.898 465.387 14.547 465.547 14.242 cv
465.703 13.945 465.941 13.699 466.258 13.504 cv
466.57 13.312 466.961 13.168 467.43 13.07 cv
467.898 12.98 468.441 12.934 469.059 12.93 cv
469.738 12.93 li
469.738 12.508 li
469.738 12.293 469.715 12.102 469.672 11.937 cv
469.625 11.777 469.551 11.641 469.453 11.527 cv
469.348 11.422 469.215 11.34 469.047 11.285 cv
468.875 11.234 468.664 11.211 468.422 11.207 cv
468.09 11.211 467.797 11.246 467.543 11.316 cv
467.281 11.391 467.055 11.473 466.859 11.559 cv
466.66 11.652 466.496 11.73 466.367 11.801 cv
466.23 11.875 466.121 11.914 466.043 11.91 cv
465.98 11.914 465.93 11.895 465.891 11.855 cv
465.844 11.82 465.809 11.77 465.781 11.699 cv
465.75 11.637 465.727 11.551 465.715 11.449 cv
465.695 11.352 465.688 11.242 465.691 11.121 cv
465.688 10.961 465.703 10.836 465.73 10.738 cv
465.754 10.648 465.801 10.562 465.879 10.484 cv
465.949 10.41 466.078 10.328 466.262 10.238 cv
466.441 10.148 466.652 10.062 466.898 9.98401 cv
467.141 9.90601 467.41 9.84399 467.699 9.79303 cv
467.988 9.74597 468.285 9.72302 468.594 9.71899 cv
469.137 9.72302 469.602 9.77301 469.988 9.87903 cv
470.375 9.98798 470.695 10.152 470.945 10.371 cv
471.195 10.59 471.375 10.875 471.492 11.223 cv
471.602 11.574 471.66 11.988 471.664 12.461 cv
cp
469.738 14.16 mo
468.988 14.16 li
468.672 14.164 468.402 14.187 468.18 14.23 cv
467.953 14.281 467.77 14.352 467.633 14.441 cv
467.488 14.539 467.387 14.652 467.324 14.781 cv
467.258 14.918 467.223 15.066 467.227 15.234 cv
467.223 15.527 467.316 15.758 467.504 15.922 cv
467.688 16.09 467.945 16.172 468.273 16.172 cv
468.547 16.172 468.797 16.102 469.031 15.961 cv
469.258 15.82 469.496 15.617 469.738 15.344 cv
cp
f
480.25 17.113 mo
480.246 17.176 480.234 17.223 480.211 17.258 cv
480.184 17.301 480.137 17.332 480.078 17.355 cv
480.012 17.379 479.93 17.395 479.824 17.41 cv
479.719 17.418 479.586 17.426 479.434 17.426 cv
479.262 17.426 479.129 17.418 479.027 17.41 cv
478.922 17.395 478.836 17.379 478.773 17.355 cv
478.707 17.332 478.66 17.301 478.633 17.258 cv
478.602 17.223 478.586 17.176 478.59 17.113 cv
478.59 16.344 li
478.23 16.73 477.855 17.027 477.465 17.238 cv
477.066 17.449 476.633 17.555 476.16 17.559 cv
475.625 17.555 475.176 17.453 474.813 17.25 cv
474.445 17.047 474.148 16.773 473.918 16.422 cv
473.684 16.078 473.516 15.672 473.414 15.203 cv
473.313 14.742 473.262 14.25 473.262 13.73 cv
473.262 13.117 473.324 12.562 473.457 12.066 cv
473.586 11.574 473.781 11.152 474.039 10.805 cv
474.293 10.457 474.609 10.191 474.988 10 cv
475.367 9.81598 475.805 9.72302 476.301 9.71899 cv
476.688 9.72302 477.039 9.80103 477.359 9.95697 cv
477.672 10.117 477.988 10.348 478.301 10.652 cv
478.301 6.89099 li
478.301 6.84003 478.313 6.79303 478.344 6.75 cv
478.367 6.711 478.422 6.67603 478.5 6.64502 cv
478.574 6.617 478.672 6.59802 478.801 6.578 cv
478.922 6.56598 479.082 6.55902 479.277 6.55499 cv
479.469 6.55902 479.625 6.56598 479.75 6.578 cv
479.871 6.59802 479.973 6.617 480.047 6.64502 cv
480.117 6.67603 480.168 6.711 480.203 6.75 cv
480.23 6.79303 480.246 6.84003 480.25 6.89099 cv
cp
478.301 12.469 mo
478.02 12.117 477.75 11.848 477.496 11.66 cv
477.234 11.473 476.965 11.379 476.688 11.379 cv
476.434 11.379 476.215 11.445 476.031 11.57 cv
475.844 11.703 475.695 11.871 475.586 12.082 cv
475.473 12.293 475.391 12.531 475.336 12.793 cv
475.281 13.059 475.254 13.328 475.254 13.598 cv
475.254 13.895 475.277 14.176 475.324 14.449 cv
475.371 14.727 475.445 14.973 475.555 15.187 cv
475.656 15.402 475.801 15.574 475.98 15.703 cv
476.156 15.836 476.379 15.902 476.648 15.898 cv
476.781 15.902 476.91 15.883 477.043 15.84 cv
477.168 15.805 477.301 15.742 477.434 15.648 cv
477.566 15.562 477.703 15.445 477.844 15.301 cv
477.984 15.16 478.137 14.984 478.301 14.777 cv
cp
f
487.074 15.148 mo
487.07 15.547 486.996 15.895 486.852 16.195 cv
486.703 16.496 486.496 16.75 486.227 16.949 cv
485.953 17.156 485.633 17.305 485.266 17.406 cv
484.898 17.504 484.496 17.555 484.066 17.559 cv
483.801 17.555 483.555 17.535 483.32 17.5 cv
483.086 17.457 482.875 17.41 482.688 17.352 cv
482.5 17.293 482.344 17.23 482.219 17.168 cv
482.094 17.105 482 17.047 481.945 16.992 cv
481.887 16.937 481.844 16.855 481.816 16.738 cv
481.781 16.625 481.766 16.449 481.77 16.219 cv
481.766 16.07 481.773 15.949 481.785 15.855 cv
481.793 15.766 481.809 15.695 481.832 15.637 cv
481.852 15.586 481.875 15.547 481.91 15.527 cv
481.938 15.512 481.977 15.504 482.023 15.5 cv
482.078 15.504 482.164 15.535 482.277 15.598 cv
482.387 15.664 482.523 15.738 482.695 15.812 cv
482.859 15.895 483.055 15.965 483.273 16.031 cv
483.492 16.102 483.742 16.137 484.027 16.133 cv
484.203 16.137 484.359 16.117 484.5 16.078 cv
484.633 16.043 484.754 15.992 484.859 15.922 cv
484.957 15.855 485.031 15.77 485.086 15.664 cv
485.133 15.562 485.16 15.441 485.164 15.305 cv
485.16 15.148 485.113 15.016 485.02 14.906 cv
484.926 14.797 484.797 14.699 484.641 14.613 cv
484.477 14.531 484.297 14.453 484.102 14.379 cv
483.898 14.309 483.695 14.23 483.484 14.137 cv
483.273 14.051 483.066 13.949 482.871 13.832 cv
482.668 13.723 482.488 13.582 482.332 13.414 cv
482.168 13.25 482.043 13.051 481.949 12.812 cv
481.855 12.582 481.809 12.301 481.809 11.969 cv
481.809 11.641 481.871 11.336 482 11.055 cv
482.129 10.781 482.316 10.543 482.563 10.344 cv
482.805 10.148 483.102 9.99597 483.453 9.883 cv
483.801 9.77698 484.195 9.72302 484.637 9.71899 cv
484.852 9.72302 485.063 9.73798 485.27 9.76599 cv
485.473 9.80103 485.66 9.84003 485.828 9.883 cv
485.992 9.93402 486.133 9.98401 486.25 10.035 cv
486.363 10.094 486.445 10.141 486.496 10.176 cv
486.543 10.219 486.578 10.258 486.602 10.293 cv
486.621 10.336 486.633 10.383 486.645 10.434 cv
486.652 10.488 486.664 10.555 486.672 10.633 cv
486.68 10.719 486.684 10.816 486.684 10.934 cv
486.684 11.074 486.68 11.191 486.672 11.277 cv
486.664 11.371 486.648 11.441 486.633 11.488 cv
486.613 11.543 486.59 11.578 486.563 11.594 cv
486.527 11.617 486.492 11.625 486.453 11.621 cv
486.402 11.625 486.328 11.598 486.234 11.539 cv
486.133 11.488 486.012 11.43 485.863 11.363 cv
485.715 11.305 485.543 11.246 485.348 11.187 cv
485.152 11.137 484.93 11.109 484.684 11.105 cv
484.504 11.109 484.352 11.129 484.223 11.16 cv
484.09 11.199 483.98 11.25 483.902 11.316 cv
483.816 11.387 483.754 11.465 483.715 11.555 cv
483.668 11.648 483.648 11.746 483.652 11.848 cv
483.648 12.008 483.699 12.145 483.801 12.25 cv
483.898 12.363 484.027 12.457 484.191 12.539 cv
484.352 12.625 484.535 12.703 484.742 12.773 cv
484.945 12.848 485.152 12.93 485.363 13.012 cv
485.57 13.102 485.777 13.199 485.988 13.312 cv
486.191 13.426 486.375 13.566 486.535 13.73 cv
486.695 13.898 486.824 14.098 486.926 14.328 cv
487.02 14.562 487.07 14.836 487.074 15.148 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
