%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-EightThreads.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 3:37:14 p.m.
%%BoundingBox: 0 0 655 536
%%HiResBoundingBox: 0 0 654.3600 535.2001
%%CropBox: 0 0 654.3600 535.2001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -535.2 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 535.2 li
654.36 535.2 li
654.36 0 li
cp
clp
gsave
0 535.2 mo
655 535.2 li
655 -.799988 li
0 -.799988 li
cp
clp
0 0 mo
654.359 0 li
654.359 535.199 li
0 535.199 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
35.039 454.078 mo
638.398 454.078 li
35.039 423.48 mo
638.398 423.48 li
35.039 393 mo
638.398 393 li
35.039 362.398 mo
638.398 362.398 li
35.039 331.922 mo
638.398 331.922 li
35.039 301.32 mo
638.398 301.32 li
35.039 270.84 mo
638.398 270.84 li
35.039 240.238 mo
638.398 240.238 li
35.039 209.762 mo
638.398 209.762 li
35.039 179.16 mo
638.398 179.16 li
35.039 148.68 mo
638.398 148.68 li
35.039 118.199 mo
638.398 118.199 li
35.039 87.602 mo
638.398 87.602 li
35.039 57.121 mo
638.398 57.121 li
35.039 26.52 mo
638.398 26.52 li
.328344 .284215 .278569 .000915541 cmyk
@
72.719 26.52 mo
72.719 484.559 li
148.199 26.52 mo
148.199 484.559 li
223.559 26.52 mo
223.559 484.559 li
299.039 26.52 mo
299.039 484.559 li
374.398 26.52 mo
374.398 484.559 li
449.879 26.52 mo
449.879 484.559 li
525.238 26.52 mo
525.238 484.559 li
600.719 26.52 mo
600.719 484.559 li
.178592 .148898 .143923 0 cmyk
@
35.039 26.52 mo
35.039 484.559 li
110.52 26.52 mo
110.52 484.559 li
185.879 26.52 mo
185.879 484.559 li
261.359 26.52 mo
261.359 484.559 li
336.719 26.52 mo
336.719 484.559 li
412.078 26.52 mo
412.078 484.559 li
487.559 26.52 mo
487.559 484.559 li
562.922 26.52 mo
562.922 484.559 li
638.398 26.52 mo
638.398 484.559 li
.328344 .284215 .278569 .000915541 cmyk
@
15 475.32 mo
22.078 475.32 li
22.078 492.359 li
15 492.359 li
cp
0 0 0 0 cmyk
ef
15 444.719 mo
22.078 444.719 li
22.078 461.879 li
15 461.879 li
cp
ef
15 414.238 mo
22.078 414.238 li
22.078 431.281 li
15 431.281 li
cp
ef
15 383.641 mo
22.078 383.641 li
22.078 400.801 li
15 400.801 li
cp
ef
15 353.16 mo
22.078 353.16 li
22.078 370.199 li
15 370.199 li
cp
ef
15 322.559 mo
22.078 322.559 li
22.078 339.719 li
15 339.719 li
cp
ef
15 292.078 mo
22.078 292.078 li
22.078 309.121 li
15 309.121 li
cp
ef
15 261.48 mo
22.078 261.48 li
22.078 278.64 li
15 278.64 li
cp
ef
15 231 mo
22.078 231 li
22.078 248.039 li
15 248.039 li
cp
ef
7.922 200.398 mo
22.078 200.398 li
22.078 217.558 li
7.922 217.558 li
cp
ef
7.922 169.922 mo
22.078 169.922 li
22.078 186.961 li
7.922 186.961 li
cp
ef
7.922 139.32 mo
22.078 139.32 li
22.078 156.48 li
7.922 156.48 li
cp
ef
7.922 108.84 mo
22.078 108.84 li
22.078 125.879 li
7.922 125.879 li
cp
ef
7.922 78.238 mo
22.078 78.238 li
22.078 95.398 li
7.922 95.398 li
cp
ef
7.922 47.762 mo
22.078 47.762 li
22.078 64.801 li
7.922 64.801 li
cp
ef
7.922 17.16 mo
22.078 17.16 li
22.078 34.32 li
7.922 34.32 li
cp
ef
.96 lw
35.039 484.559 mo
638.398 484.559 li
.367803 .29575 .300999 .00198367 cmyk
@
35.039 484.559 mo
35.039 489 li
110.52 484.559 mo
110.52 489 li
185.879 484.559 mo
185.879 489 li
261.359 484.559 mo
261.359 489 li
336.719 484.559 mo
336.719 489 li
412.078 484.559 mo
412.078 489 li
487.559 484.559 mo
487.559 489 li
562.922 484.559 mo
562.922 489 li
638.398 484.559 mo
638.398 489 li
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
1 lc
35.039 484.559 mo
110.52 455.281 li
185.879 399.121 li
261.359 382.68 li
336.719 297.719 li
412.078 271.801 li
487.559 243.719 li
562.922 213.121 li
638.398 180.121 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
40.129 489.605 mo
30.051 479.523 li
30.051 489.605 mo
40.129 479.523 li
.62768 .285466 0 0 cmyk
@
115.488 460.324 mo
105.41 450.238 li
105.41 460.324 mo
115.488 450.238 li
@
190.969 404.039 mo
180.891 393.961 li
180.891 404.039 mo
190.969 393.961 li
@
266.328 387.719 mo
256.25 377.641 li
256.25 387.719 mo
266.328 377.641 li
@
341.691 302.641 mo
331.609 292.559 li
331.609 302.641 mo
341.691 292.559 li
@
417.172 276.719 mo
407.09 266.641 li
407.09 276.719 mo
417.172 266.641 li
@
492.531 248.641 mo
482.449 238.559 li
482.449 248.641 mo
492.531 238.559 li
@
568.012 218.16 mo
557.93 208.078 li
557.93 218.16 mo
568.012 208.078 li
@
643.371 185.039 mo
633.289 174.961 li
633.289 185.039 mo
643.371 174.961 li
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
35.039 484.559 mo
110.52 454.199 li
185.879 393 li
261.359 332.641 li
336.719 281.52 li
412.078 210.84 li
487.559 155.16 li
562.922 92.398 li
638.398 33.359 li
@
grestore
30.051 479.523 mo
40.012 479.523 li
40.012 489.484 li
30.051 489.484 li
cp
@
105.41 449.043 mo
115.371 449.043 li
115.371 459.004 li
105.41 459.004 li
cp
@
180.891 387.84 mo
190.852 387.84 li
190.852 397.801 li
180.891 397.801 li
cp
@
256.25 327.48 mo
266.211 327.48 li
266.211 337.441 li
256.25 337.441 li
cp
@
331.609 276.359 mo
341.57 276.359 li
341.57 286.32 li
331.609 286.32 li
cp
@
407.09 205.801 mo
417.051 205.801 li
417.051 215.762 li
407.09 215.762 li
cp
@
482.449 150 mo
492.41 150 li
492.41 159.961 li
482.449 159.961 li
cp
@
557.93 87.359 mo
567.891 87.359 li
567.891 97.32 li
557.93 97.32 li
cp
@
633.289 28.32 mo
643.25 28.32 li
643.25 38.281 li
633.289 38.281 li
cp
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
35.039 484.559 mo
110.52 455.16 li
185.879 397.559 li
261.359 356.398 li
336.719 275.52 li
412.078 294.48 li
487.559 165.121 li
562.922 209.398 li
638.398 70.559 li
.466651 0 .889799 0 cmyk
@
grestore
40.129 489.605 mo
30.051 479.523 li
30.051 489.605 mo
40.129 479.523 li
.466651 0 .889799 0 cmyk
@
115.488 460.086 mo
105.41 450 li
105.41 460.086 mo
115.488 450 li
@
190.969 402.48 mo
180.891 392.398 li
180.891 402.48 mo
190.969 392.398 li
@
266.328 361.32 mo
256.25 351.238 li
256.25 361.32 mo
266.328 351.238 li
@
341.691 280.441 mo
331.609 270.359 li
331.609 280.441 mo
341.691 270.359 li
@
417.172 299.398 mo
407.09 289.32 li
407.09 299.398 mo
417.172 289.32 li
@
492.531 170.16 mo
482.449 160.078 li
482.449 170.16 mo
492.531 160.078 li
@
568.012 214.441 mo
557.93 204.359 li
557.93 214.441 mo
568.012 204.359 li
@
643.371 75.48 mo
633.289 65.398 li
633.289 75.48 mo
643.371 65.398 li
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
35.039 484.559 mo
110.52 454.078 li
185.879 393.359 li
261.359 332.281 li
336.719 272.398 li
412.078 210.602 li
487.559 150.84 li
562.922 90 li
638.398 31.078 li
@
grestore
30.051 479.523 mo
40.012 479.523 li
40.012 489.484 li
30.051 489.484 li
cp
@
105.41 448.926 mo
115.371 448.926 li
115.371 458.883 li
105.41 458.883 li
cp
@
180.891 388.32 mo
190.852 388.32 li
190.852 398.281 li
180.891 398.281 li
cp
@
256.25 327.238 mo
266.211 327.238 li
266.211 337.199 li
256.25 337.199 li
cp
@
331.609 267.359 mo
341.57 267.359 li
341.57 277.32 li
331.609 277.32 li
cp
@
407.09 205.441 mo
417.051 205.441 li
417.051 215.398 li
407.09 215.398 li
cp
@
482.449 145.68 mo
492.41 145.68 li
492.41 155.641 li
482.449 155.641 li
cp
@
557.93 84.84 mo
567.891 84.84 li
567.891 94.801 li
557.93 94.801 li
cp
@
633.289 26.039 mo
643.25 26.039 li
643.25 36 li
633.289 36 li
cp
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
35.039 484.559 mo
110.52 455.039 li
185.879 396.84 li
261.359 371.039 li
336.719 296.398 li
412.078 256.199 li
487.559 234.84 li
562.922 123.84 li
638.398 110.398 li
0 .990631 1 .000396735 cmyk
@
grestore
40.129 489.605 mo
30.051 479.523 li
30.051 489.605 mo
40.129 479.523 li
0 .990631 1 .000396735 cmyk
@
115.488 459.965 mo
105.41 449.879 li
105.41 459.965 mo
115.488 449.879 li
@
190.969 401.762 mo
180.891 391.68 li
180.891 401.762 mo
190.969 391.68 li
@
266.328 376.078 mo
256.25 366 li
256.25 376.078 mo
266.328 366 li
@
341.691 301.441 mo
331.609 291.359 li
331.609 301.441 mo
341.691 291.359 li
@
417.172 261.121 mo
407.09 251.039 li
407.09 261.121 mo
417.172 251.039 li
@
492.531 239.879 mo
482.449 229.801 li
482.449 239.879 mo
492.531 229.801 li
@
568.012 128.879 mo
557.93 118.801 li
557.93 128.879 mo
568.012 118.801 li
@
643.371 115.32 mo
633.289 105.238 li
633.289 115.32 mo
643.371 105.238 li
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
35.039 484.559 mo
110.52 454.078 li
185.879 393.961 li
261.359 332.879 li
336.719 273.238 li
412.078 211.199 li
487.559 150.84 li
562.922 90.84 li
638.398 33.84 li
@
grestore
30.051 479.523 mo
40.012 479.523 li
40.012 489.484 li
30.051 489.484 li
cp
@
105.41 449.043 mo
115.371 449.043 li
115.371 459.004 li
105.41 459.004 li
cp
@
180.891 388.922 mo
190.852 388.922 li
190.852 398.879 li
180.891 398.879 li
cp
@
256.25 327.84 mo
266.211 327.84 li
266.211 337.801 li
256.25 337.801 li
cp
@
331.609 268.078 mo
341.57 268.078 li
341.57 278.039 li
331.609 278.039 li
cp
@
407.09 206.16 mo
417.051 206.16 li
417.051 216.121 li
407.09 216.121 li
cp
@
482.449 145.801 mo
492.41 145.801 li
492.41 155.762 li
482.449 155.762 li
cp
@
557.93 85.801 mo
567.891 85.801 li
567.891 95.762 li
557.93 95.762 li
cp
@
633.289 28.68 mo
643.25 28.68 li
643.25 38.641 li
633.289 38.641 li
cp
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.039 484.559 mo
110.52 455.039 li
185.879 397.078 li
261.359 371.281 li
336.719 277.199 li
412.078 256.199 li
487.559 162.961 li
562.922 241.441 li
638.398 75.84 li
.62768 .285466 0 0 cmyk
@
grestore
40.129 489.605 mo
30.051 479.523 li
30.051 489.605 mo
40.129 479.523 li
.62768 .285466 0 0 cmyk
@
115.488 459.965 mo
105.41 449.879 li
105.41 459.965 mo
115.488 449.879 li
@
190.969 402.121 mo
180.891 392.039 li
180.891 402.121 mo
190.969 392.039 li
@
266.328 376.32 mo
256.25 366.238 li
256.25 376.32 mo
266.328 366.238 li
@
341.691 282.238 mo
331.609 272.16 li
331.609 282.238 mo
341.691 272.16 li
@
417.172 261.121 mo
407.09 251.039 li
407.09 261.121 mo
417.172 251.039 li
@
492.531 167.879 mo
482.449 157.801 li
482.449 167.879 mo
492.531 157.801 li
@
568.012 246.48 mo
557.93 236.398 li
557.93 246.48 mo
568.012 236.398 li
@
643.371 80.762 mo
633.289 70.68 li
633.289 80.762 mo
643.371 70.68 li
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.039 484.559 mo
110.52 454.199 li
185.879 393.719 li
261.359 333.238 li
336.719 272.641 li
412.078 213.602 li
487.559 152.16 li
562.922 92.641 li
638.398 31.801 li
@
grestore
30.051 479.523 mo
40.012 479.523 li
40.012 489.484 li
30.051 489.484 li
cp
@
105.41 449.164 mo
115.371 449.164 li
115.371 459.125 li
105.41 459.125 li
cp
@
180.891 388.68 mo
190.852 388.68 li
190.852 398.641 li
180.891 398.641 li
cp
@
256.25 328.078 mo
266.211 328.078 li
266.211 338.039 li
256.25 338.039 li
cp
@
331.609 267.602 mo
341.57 267.602 li
341.57 277.559 li
331.609 277.559 li
cp
@
407.09 208.559 mo
417.051 208.559 li
417.051 218.52 li
407.09 218.52 li
cp
@
482.449 147 mo
492.41 147 li
492.41 156.961 li
482.449 156.961 li
cp
@
557.93 87.48 mo
567.891 87.48 li
567.891 97.441 li
557.93 97.441 li
cp
@
633.289 26.641 mo
643.25 26.641 li
643.25 36.602 li
633.289 36.602 li
cp
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.039 484.559 mo
110.52 454.922 li
185.879 396.719 li
261.359 360.238 li
336.719 310.32 li
412.078 317.762 li
487.559 246.84 li
562.922 195.961 li
638.398 181.801 li
.466651 0 .889799 0 cmyk
@
grestore
40.129 489.605 mo
30.051 479.523 li
30.051 489.605 mo
40.129 479.523 li
.466651 0 .889799 0 cmyk
@
115.488 459.844 mo
105.41 449.762 li
105.41 459.844 mo
115.488 449.762 li
@
190.969 401.762 mo
180.891 391.68 li
180.891 401.762 mo
190.969 391.68 li
@
266.328 365.16 mo
256.25 355.078 li
256.25 365.16 mo
266.328 355.078 li
@
341.691 315.238 mo
331.609 305.16 li
331.609 315.238 mo
341.691 305.16 li
@
417.172 322.68 mo
407.09 312.602 li
407.09 322.68 mo
417.172 312.602 li
@
492.531 251.879 mo
482.449 241.801 li
482.449 251.879 mo
492.531 241.801 li
@
568.012 200.879 mo
557.93 190.801 li
557.93 200.879 mo
568.012 190.801 li
@
643.371 186.84 mo
633.289 176.762 li
633.289 186.84 mo
643.371 176.762 li
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.039 484.559 mo
110.52 453.359 li
185.879 402.602 li
261.359 353.762 li
336.719 298.922 li
412.078 242.879 li
487.559 189.238 li
562.922 134.16 li
638.398 80.039 li
@
grestore
30.051 479.523 mo
40.012 479.523 li
40.012 489.484 li
30.051 489.484 li
cp
@
105.41 448.203 mo
115.371 448.203 li
115.371 458.164 li
105.41 458.164 li
cp
@
180.891 397.559 mo
190.852 397.559 li
190.852 407.52 li
180.891 407.52 li
cp
@
256.25 348.602 mo
266.211 348.602 li
266.211 358.559 li
256.25 358.559 li
cp
@
331.609 293.762 mo
341.57 293.762 li
341.57 303.719 li
331.609 303.719 li
cp
@
407.09 237.84 mo
417.051 237.84 li
417.051 247.801 li
407.09 247.801 li
cp
@
482.449 184.078 mo
492.41 184.078 li
492.41 194.039 li
482.449 194.039 li
cp
@
557.93 129.121 mo
567.891 129.121 li
567.891 139.078 li
557.93 139.078 li
cp
@
633.289 75 mo
643.25 75 li
643.25 84.961 li
633.289 84.961 li
cp
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.039 484.559 mo
110.52 455.039 li
185.879 397.199 li
261.359 360 li
336.719 314.398 li
412.078 308.281 li
487.559 258.719 li
562.922 158.762 li
638.398 167.879 li
0 .990631 1 .000396735 cmyk
@
grestore
40.129 489.605 mo
30.051 479.523 li
30.051 489.605 mo
40.129 479.523 li
0 .990631 1 .000396735 cmyk
@
115.488 460.086 mo
105.41 450 li
105.41 460.086 mo
115.488 450 li
@
190.969 402.238 mo
180.891 392.16 li
180.891 402.238 mo
190.969 392.16 li
@
266.328 365.039 mo
256.25 354.961 li
256.25 365.039 mo
266.328 354.961 li
@
341.691 319.32 mo
331.609 309.238 li
331.609 319.32 mo
341.691 309.238 li
@
417.172 313.32 mo
407.09 303.238 li
407.09 313.32 mo
417.172 303.238 li
@
492.531 263.762 mo
482.449 253.68 li
482.449 263.762 mo
492.531 253.68 li
@
568.012 163.801 mo
557.93 153.719 li
557.93 163.801 mo
568.012 153.719 li
@
643.371 172.922 mo
633.289 162.84 li
633.289 172.922 mo
643.371 162.84 li
@
gsave
35.039 26.52 mo
639.121 26.52 li
639.121 485.282 li
35.039 485.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.039 484.559 mo
110.52 454.078 li
185.879 393.602 li
261.359 332.641 li
336.719 272.879 li
412.078 210.48 li
487.559 153.719 li
562.922 90.48 li
638.398 33.719 li
@
grestore
30.051 479.523 mo
40.012 479.523 li
40.012 489.484 li
30.051 489.484 li
cp
@
105.41 449.043 mo
115.371 449.043 li
115.371 459.004 li
105.41 459.004 li
cp
@
180.891 388.559 mo
190.852 388.559 li
190.852 398.52 li
180.891 398.52 li
cp
@
256.25 327.48 mo
266.211 327.48 li
266.211 337.441 li
256.25 337.441 li
cp
@
331.609 267.719 mo
341.57 267.719 li
341.57 277.68 li
331.609 277.68 li
cp
@
407.09 205.441 mo
417.051 205.441 li
417.051 215.398 li
407.09 215.398 li
cp
@
482.449 148.559 mo
492.41 148.559 li
492.41 158.52 li
482.449 158.52 li
cp
@
557.93 85.32 mo
567.891 85.32 li
567.891 95.281 li
557.93 95.281 li
cp
@
633.289 28.68 mo
643.25 28.68 li
643.25 38.641 li
633.289 38.641 li
cp
@
15.012 475.293 mo
22.106 475.293 li
22.106 492.383 li
15.012 492.383 li
cp
0 0 0 0 cmyk
ef
21.375 488.246 mo
21.371 488.336 21.363 488.406 21.352 488.465 cv
21.336 488.527 21.316 488.578 21.297 488.609 cv
21.273 488.648 21.25 488.672 21.219 488.687 cv
21.188 488.703 21.156 488.711 21.129 488.711 cv
16.492 488.711 li
16.457 488.711 16.43 488.703 16.402 488.687 cv
16.375 488.672 16.348 488.648 16.324 488.609 cv
16.297 488.578 16.277 488.527 16.266 488.465 cv
16.25 488.406 16.242 488.336 16.246 488.246 cv
16.242 488.168 16.25 488.094 16.266 488.031 cv
16.277 487.973 16.293 487.926 16.316 487.887 cv
16.332 487.852 16.359 487.82 16.391 487.797 cv
16.422 487.777 16.453 487.77 16.492 487.766 cv
18.344 487.766 li
18.344 481.02 li
16.629 482.039 li
16.539 482.09 16.469 482.117 16.422 482.125 cv
16.367 482.133 16.324 482.125 16.293 482.094 cv
16.258 482.066 16.238 482.016 16.227 481.945 cv
16.215 481.879 16.207 481.793 16.211 481.684 cv
16.207 481.609 16.211 481.543 16.223 481.484 cv
16.227 481.434 16.238 481.387 16.254 481.348 cv
16.266 481.312 16.285 481.281 16.309 481.254 cv
16.332 481.227 16.363 481.199 16.41 481.172 cv
18.453 479.859 li
18.469 479.848 18.488 479.836 18.52 479.828 cv
18.543 479.82 18.578 479.812 18.625 479.801 cv
18.664 479.793 18.715 479.785 18.77 479.781 cv
18.824 479.781 18.891 479.781 18.977 479.777 cv
19.082 479.781 19.176 479.785 19.25 479.793 cv
19.32 479.801 19.375 479.816 19.422 479.832 cv
19.461 479.852 19.488 479.871 19.504 479.895 cv
19.512 479.922 19.52 479.945 19.523 479.969 cv
19.523 487.766 li
21.129 487.766 li
21.164 487.77 21.199 487.777 21.23 487.797 cv
21.262 487.82 21.285 487.852 21.309 487.887 cv
21.324 487.926 21.34 487.973 21.355 488.031 cv
21.363 488.094 21.371 488.168 21.375 488.246 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.012 444.754 mo
22.106 444.754 li
22.106 461.844 li
15.012 461.844 li
cp
0 0 0 0 cmyk
ef
21.355 457.652 mo
21.352 457.738 21.348 457.812 21.336 457.875 cv
21.324 457.941 21.309 457.996 21.289 458.035 cv
21.266 458.082 21.238 458.113 21.207 458.129 cv
21.172 458.152 21.133 458.16 21.094 458.16 cv
16.191 458.16 li
16.129 458.16 16.07 458.152 16.023 458.137 cv
15.973 458.121 15.934 458.098 15.898 458.059 cv
15.863 458.027 15.836 457.973 15.824 457.902 cv
15.805 457.832 15.797 457.746 15.801 457.645 cv
15.797 457.555 15.801 457.477 15.809 457.406 cv
15.813 457.34 15.828 457.281 15.855 457.227 cv
15.879 457.176 15.91 457.121 15.945 457.066 cv
15.98 457.016 16.023 456.961 16.082 456.898 cv
17.855 455.074 li
18.266 454.656 18.594 454.281 18.844 453.945 cv
19.09 453.617 19.281 453.312 19.414 453.035 cv
19.547 452.762 19.633 452.512 19.68 452.285 cv
19.719 452.062 19.742 451.852 19.742 451.656 cv
19.742 451.461 19.707 451.277 19.641 451.098 cv
19.574 450.926 19.48 450.77 19.355 450.633 cv
19.23 450.504 19.074 450.398 18.887 450.316 cv
18.699 450.242 18.48 450.203 18.234 450.199 cv
17.945 450.203 17.688 450.242 17.461 450.316 cv
17.23 450.398 17.031 450.484 16.859 450.57 cv
16.688 450.664 16.543 450.746 16.426 450.824 cv
16.309 450.902 16.223 450.941 16.172 450.941 cv
16.137 450.941 16.105 450.934 16.082 450.914 cv
16.051 450.898 16.031 450.867 16.016 450.824 cv
16 450.785 15.984 450.73 15.977 450.66 cv
15.965 450.594 15.961 450.512 15.965 450.414 cv
15.961 450.348 15.965 450.289 15.973 450.238 cv
15.977 450.187 15.984 450.145 15.996 450.105 cv
16.004 450.07 16.02 450.035 16.039 450.004 cv
16.059 449.973 16.094 449.934 16.152 449.883 cv
16.203 449.836 16.297 449.77 16.434 449.687 cv
16.566 449.605 16.738 449.527 16.941 449.445 cv
17.145 449.367 17.367 449.297 17.613 449.242 cv
17.855 449.187 18.113 449.16 18.387 449.16 cv
18.813 449.16 19.188 449.223 19.512 449.344 cv
19.832 449.465 20.098 449.629 20.313 449.84 cv
20.523 450.051 20.684 450.297 20.789 450.57 cv
20.895 450.852 20.949 451.148 20.949 451.461 cv
20.949 451.75 20.922 452.031 20.871 452.309 cv
20.82 452.594 20.715 452.898 20.555 453.223 cv
20.391 453.551 20.156 453.914 19.852 454.312 cv
19.543 454.715 19.137 455.176 18.633 455.691 cv
17.227 457.16 li
21.086 457.16 li
21.117 457.164 21.152 457.176 21.191 457.191 cv
21.223 457.215 21.254 457.246 21.281 457.285 cv
21.305 457.328 21.324 457.379 21.336 457.437 cv
21.348 457.504 21.352 457.574 21.355 457.652 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.012 414.211 mo
22.106 414.211 li
22.106 431.301 li
15.012 431.301 li
cp
0 0 0 0 cmyk
ef
21.285 425.074 mo
21.281 425.484 21.211 425.852 21.07 426.176 cv
20.926 426.504 20.723 426.785 20.461 427.016 cv
20.195 427.25 19.867 427.426 19.48 427.551 cv
19.09 427.676 18.652 427.738 18.168 427.738 cv
17.863 427.738 17.586 427.711 17.332 427.664 cv
17.07 427.617 16.84 427.566 16.645 427.496 cv
16.441 427.434 16.277 427.363 16.145 427.293 cv
16.012 427.223 15.926 427.172 15.895 427.137 cv
15.855 427.109 15.832 427.078 15.816 427.043 cv
15.797 427.012 15.777 426.973 15.766 426.926 cv
15.75 426.883 15.742 426.828 15.734 426.758 cv
15.727 426.695 15.723 426.613 15.727 426.512 cv
15.723 426.352 15.738 426.238 15.773 426.172 cv
15.805 426.109 15.852 426.074 15.914 426.074 cv
15.957 426.074 16.039 426.113 16.164 426.184 cv
16.285 426.262 16.445 426.34 16.641 426.422 cv
16.832 426.508 17.059 426.586 17.324 426.656 cv
17.582 426.73 17.875 426.766 18.195 426.766 cv
18.504 426.766 18.773 426.727 19.012 426.648 cv
19.242 426.57 19.441 426.461 19.602 426.32 cv
19.758 426.18 19.875 426.012 19.957 425.816 cv
20.035 425.621 20.074 425.41 20.078 425.184 cv
20.074 424.934 20.023 424.707 19.926 424.504 cv
19.82 424.305 19.672 424.133 19.48 423.984 cv
19.281 423.84 19.043 423.727 18.758 423.648 cv
18.473 423.57 18.148 423.531 17.785 423.531 cv
16.914 423.531 li
16.871 423.531 16.836 423.523 16.801 423.508 cv
16.766 423.492 16.734 423.465 16.711 423.426 cv
16.684 423.391 16.664 423.344 16.648 423.285 cv
16.633 423.227 16.625 423.148 16.625 423.051 cv
16.625 422.965 16.629 422.895 16.645 422.836 cv
16.652 422.781 16.672 422.734 16.703 422.699 cv
16.727 422.664 16.758 422.641 16.789 422.621 cv
16.82 422.609 16.855 422.602 16.898 422.598 cv
17.672 422.598 li
17.973 422.602 18.242 422.562 18.484 422.48 cv
18.719 422.406 18.922 422.293 19.094 422.145 cv
19.258 422 19.387 421.824 19.477 421.621 cv
19.566 421.418 19.613 421.191 19.613 420.937 cv
19.613 420.758 19.582 420.582 19.523 420.414 cv
19.461 420.25 19.371 420.105 19.254 419.98 cv
19.133 419.855 18.98 419.758 18.801 419.687 cv
18.613 419.617 18.402 419.582 18.16 419.582 cv
17.895 419.582 17.648 419.625 17.43 419.703 cv
17.203 419.785 17.008 419.871 16.836 419.961 cv
16.66 420.055 16.516 420.141 16.402 420.219 cv
16.289 420.301 16.207 420.34 16.164 420.336 cv
16.129 420.34 16.102 420.332 16.078 420.32 cv
16.051 420.309 16.031 420.285 16.016 420.25 cv
16 420.219 15.988 420.172 15.98 420.105 cv
15.973 420.047 15.969 419.965 15.973 419.863 cv
15.969 419.797 15.969 419.738 15.977 419.684 cv
15.977 419.633 15.988 419.586 16.004 419.543 cv
16.02 419.508 16.035 419.473 16.055 419.437 cv
16.07 419.41 16.102 419.371 16.145 419.324 cv
16.188 419.281 16.273 419.219 16.41 419.137 cv
16.539 419.055 16.703 418.977 16.898 418.895 cv
17.09 418.816 17.313 418.746 17.57 418.691 cv
17.82 418.637 18.094 418.609 18.391 418.609 cv
18.797 418.609 19.16 418.664 19.473 418.766 cv
19.785 418.875 20.043 419.023 20.254 419.211 cv
20.457 419.406 20.613 419.637 20.719 419.902 cv
20.82 420.172 20.871 420.465 20.875 420.789 cv
20.871 421.07 20.836 421.332 20.766 421.566 cv
20.691 421.809 20.582 422.02 20.441 422.203 cv
20.297 422.391 20.125 422.547 19.922 422.676 cv
19.715 422.809 19.477 422.902 19.207 422.949 cv
19.207 422.961 li
19.512 422.996 19.793 423.07 20.047 423.191 cv
20.301 423.312 20.52 423.465 20.703 423.648 cv
20.883 423.832 21.023 424.047 21.129 424.289 cv
21.23 424.535 21.281 424.797 21.285 425.074 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.012 383.68 mo
22.106 383.68 li
22.106 400.77 li
15.012 400.77 li
cp
0 0 0 0 cmyk
ef
21.73 394.555 mo
21.727 394.707 21.703 394.828 21.66 394.914 cv
21.613 395.004 21.551 395.047 21.469 395.043 cv
20.469 395.043 li
20.469 396.906 li
20.469 396.945 20.457 396.977 20.441 397 cv
20.418 397.027 20.387 397.047 20.344 397.066 cv
20.293 397.082 20.23 397.094 20.16 397.105 cv
20.082 397.113 19.988 397.117 19.871 397.121 cv
19.754 397.117 19.656 397.113 19.586 397.105 cv
19.508 397.094 19.449 397.082 19.406 397.066 cv
19.359 397.047 19.328 397.027 19.313 397 cv
19.293 396.977 19.285 396.945 19.289 396.906 cv
19.289 395.043 li
15.66 395.043 li
15.602 395.047 15.559 395.039 15.523 395.023 cv
15.488 395.012 15.453 394.984 15.426 394.945 cv
15.395 394.91 15.375 394.859 15.363 394.789 cv
15.352 394.723 15.348 394.633 15.348 394.52 cv
15.348 394.437 15.348 394.359 15.355 394.289 cv
15.355 394.219 15.367 394.156 15.383 394.102 cv
15.395 394.047 15.41 393.992 15.438 393.937 cv
15.457 393.883 15.484 393.828 15.52 393.766 cv
18.68 388.379 li
18.699 388.344 18.734 388.312 18.781 388.285 cv
18.824 388.258 18.879 388.234 18.953 388.215 cv
19.02 388.199 19.105 388.187 19.211 388.176 cv
19.313 388.172 19.434 388.168 19.574 388.164 cv
19.723 388.168 19.859 388.172 19.977 388.184 cv
20.09 388.195 20.18 388.211 20.254 388.227 cv
20.32 388.246 20.375 388.27 20.414 388.301 cv
20.449 388.332 20.469 388.367 20.469 388.406 cv
20.469 394.07 li
21.469 394.07 li
21.543 394.074 21.605 394.113 21.656 394.191 cv
21.703 394.273 21.727 394.395 21.73 394.555 cv
cp
19.289 389.203 mo
19.277 389.203 li
16.426 394.07 li
19.289 394.07 li
cp
.629114 .553033 .543389 .289647 cmyk
f
15.012 353.141 mo
22.106 353.141 li
22.106 370.231 li
15.012 370.231 li
cp
0 0 0 0 cmyk
ef
21.313 363.68 mo
21.313 364.156 21.23 364.578 21.07 364.949 cv
20.91 365.32 20.684 365.633 20.395 365.887 cv
20.098 366.141 19.75 366.336 19.348 366.465 cv
18.941 366.598 18.492 366.66 18 366.66 cv
17.723 366.66 17.461 366.641 17.219 366.602 cv
16.969 366.562 16.75 366.516 16.563 366.461 cv
16.367 366.406 16.211 366.352 16.086 366.293 cv
15.961 366.242 15.883 366.199 15.852 366.164 cv
15.816 366.133 15.793 366.102 15.781 366.074 cv
15.766 366.047 15.75 366.016 15.742 365.973 cv
15.727 365.937 15.719 365.887 15.719 365.824 cv
15.711 365.766 15.711 365.695 15.711 365.613 cv
15.711 365.539 15.715 365.469 15.723 365.406 cv
15.73 365.344 15.742 365.293 15.762 365.254 cv
15.777 365.215 15.797 365.187 15.824 365.168 cv
15.848 365.152 15.879 365.145 15.91 365.141 cv
15.957 365.145 16.027 365.172 16.121 365.227 cv
16.215 365.285 16.344 365.348 16.508 365.414 cv
16.672 365.48 16.871 365.543 17.113 365.602 cv
17.348 365.66 17.633 365.687 17.969 365.687 cv
18.27 365.687 18.551 365.652 18.809 365.578 cv
19.063 365.508 19.285 365.395 19.473 365.238 cv
19.656 365.086 19.801 364.891 19.906 364.652 cv
20.012 364.418 20.063 364.129 20.066 363.789 cv
20.063 363.508 20.02 363.258 19.93 363.039 cv
19.84 362.82 19.703 362.641 19.52 362.496 cv
19.332 362.355 19.098 362.25 18.816 362.176 cv
18.531 362.105 18.191 362.066 17.805 362.066 cv
17.52 362.066 17.281 362.082 17.082 362.109 cv
16.879 362.141 16.691 362.156 16.52 362.152 cv
16.391 362.156 16.297 362.125 16.246 362.062 cv
16.188 362.004 16.16 361.891 16.164 361.719 cv
16.164 358.105 li
16.16 357.957 16.195 357.848 16.27 357.77 cv
16.336 357.699 16.438 357.66 16.574 357.66 cv
20.504 357.66 li
20.539 357.66 20.574 357.672 20.609 357.691 cv
20.641 357.715 20.668 357.746 20.695 357.785 cv
20.715 357.828 20.73 357.879 20.746 357.941 cv
20.754 358.008 20.762 358.086 20.766 358.168 cv
20.762 358.336 20.738 358.461 20.699 358.551 cv
20.652 358.645 20.594 358.691 20.516 358.687 cv
17.344 358.687 li
17.344 361.176 li
17.496 361.156 17.652 361.145 17.816 361.137 cv
17.973 361.133 18.16 361.129 18.375 361.129 cv
18.859 361.129 19.285 361.191 19.652 361.312 cv
20.016 361.434 20.32 361.605 20.57 361.824 cv
20.813 362.051 21 362.316 21.125 362.629 cv
21.25 362.945 21.313 363.297 21.313 363.68 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.012 322.602 mo
22.106 322.602 li
22.106 339.692 li
15.012 339.692 li
cp
0 0 0 0 cmyk
ef
21.582 333.109 mo
21.582 333.5 21.52 333.879 21.402 334.238 cv
21.277 334.605 21.094 334.922 20.852 335.195 cv
20.602 335.473 20.289 335.695 19.914 335.859 cv
19.531 336.027 19.086 336.109 18.57 336.109 cv
18.199 336.109 17.871 336.066 17.59 335.973 cv
17.305 335.887 17.059 335.754 16.848 335.582 cv
16.637 335.414 16.461 335.207 16.324 334.961 cv
16.184 334.715 16.07 334.434 15.988 334.117 cv
15.902 333.805 15.844 333.461 15.809 333.082 cv
15.77 332.711 15.75 332.309 15.754 331.875 cv
15.75 331.496 15.77 331.113 15.813 330.723 cv
15.852 330.34 15.926 329.965 16.031 329.598 cv
16.137 329.238 16.281 328.898 16.461 328.582 cv
16.641 328.266 16.867 327.988 17.141 327.754 cv
17.414 327.52 17.738 327.332 18.117 327.191 cv
18.496 327.055 18.938 326.988 19.441 326.984 cv
19.609 326.988 19.781 326.996 19.953 327.016 cv
20.125 327.039 20.285 327.07 20.434 327.102 cv
20.582 327.141 20.703 327.176 20.805 327.215 cv
20.902 327.254 20.969 327.289 21.004 327.312 cv
21.031 327.34 21.055 327.367 21.074 327.395 cv
21.09 327.426 21.105 327.457 21.113 327.492 cv
21.121 327.527 21.125 327.566 21.133 327.609 cv
21.133 327.652 21.137 327.707 21.141 327.77 cv
21.137 327.855 21.137 327.926 21.137 327.98 cv
21.133 328.043 21.121 328.09 21.109 328.125 cv
21.09 328.164 21.07 328.191 21.047 328.207 cv
21.02 328.227 20.988 328.234 20.949 328.234 cv
20.898 328.234 20.828 328.219 20.742 328.187 cv
20.652 328.156 20.547 328.121 20.426 328.078 cv
20.301 328.043 20.152 328.008 19.977 327.973 cv
19.801 327.945 19.598 327.93 19.367 327.926 cv
18.938 327.93 18.57 328.016 18.266 328.187 cv
17.961 328.359 17.711 328.594 17.516 328.887 cv
17.32 329.18 17.176 329.52 17.086 329.902 cv
16.988 330.293 16.934 330.695 16.926 331.113 cv
17.043 331.047 17.18 330.98 17.328 330.91 cv
17.477 330.844 17.637 330.781 17.813 330.723 cv
17.988 330.672 18.176 330.625 18.371 330.59 cv
18.566 330.559 18.777 330.543 19.004 330.539 cv
19.48 330.543 19.883 330.609 20.215 330.734 cv
20.543 330.867 20.809 331.047 21.016 331.277 cv
21.215 331.508 21.359 331.777 21.449 332.09 cv
21.535 332.402 21.582 332.742 21.582 333.109 cv
cp
20.387 333.219 mo
20.387 332.957 20.359 332.715 20.309 332.496 cv
20.254 332.281 20.164 332.098 20.043 331.941 cv
19.918 331.793 19.754 331.676 19.551 331.594 cv
19.34 331.512 19.086 331.469 18.789 331.469 cv
18.617 331.469 18.449 331.484 18.281 331.516 cv
18.109 331.547 17.945 331.59 17.789 331.637 cv
17.629 331.691 17.48 331.754 17.34 331.824 cv
17.195 331.898 17.063 331.973 16.945 332.051 cv
16.941 332.645 16.98 333.141 17.059 333.535 cv
17.133 333.934 17.242 334.25 17.387 334.488 cv
17.531 334.73 17.711 334.902 17.926 335.004 cv
18.141 335.109 18.391 335.16 18.68 335.156 cv
18.969 335.16 19.223 335.105 19.438 334.992 cv
19.652 334.887 19.828 334.738 19.973 334.551 cv
20.113 334.367 20.219 334.16 20.285 333.93 cv
20.352 333.699 20.387 333.465 20.387 333.219 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.012 292.059 mo
22.106 292.059 li
22.106 309.149 li
15.012 309.149 li
cp
0 0 0 0 cmyk
ef
21.484 297.086 mo
21.48 297.172 21.477 297.246 21.473 297.309 cv
21.465 297.379 21.457 297.441 21.445 297.5 cv
21.434 297.566 21.418 297.625 21.398 297.68 cv
21.375 297.738 21.352 297.801 21.328 297.859 cv
18.133 305.223 li
18.105 305.281 18.078 305.324 18.047 305.355 cv
18.012 305.391 17.969 305.418 17.914 305.437 cv
17.859 305.457 17.789 305.469 17.711 305.48 cv
17.625 305.484 17.527 305.488 17.41 305.492 cv
17.254 305.488 17.133 305.48 17.047 305.469 cv
16.961 305.453 16.898 305.437 16.859 305.406 cv
16.82 305.379 16.801 305.34 16.809 305.297 cv
16.809 305.254 16.824 305.203 16.855 305.141 cv
20.215 297.613 li
15.957 297.613 li
15.871 297.617 15.805 297.57 15.762 297.477 cv
15.719 297.387 15.699 297.258 15.699 297.094 cv
15.699 297.008 15.703 296.934 15.715 296.867 cv
15.727 296.805 15.742 296.75 15.766 296.707 cv
15.785 296.664 15.813 296.633 15.848 296.609 cv
15.879 296.59 15.918 296.578 15.957 296.578 cv
21.129 296.578 li
21.188 296.578 21.242 296.586 21.293 296.602 cv
21.34 296.617 21.375 296.645 21.402 296.684 cv
21.426 296.723 21.445 296.777 21.461 296.84 cv
21.473 296.906 21.48 296.988 21.484 297.086 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.012 261.52 mo
22.106 261.52 li
22.106 278.61 li
15.012 278.61 li
cp
0 0 0 0 cmyk
ef
21.559 272.621 mo
21.559 273.008 21.488 273.352 21.352 273.648 cv
21.215 273.953 21.02 274.203 20.762 274.406 cv
20.504 274.613 20.184 274.77 19.805 274.871 cv
19.422 274.977 18.988 275.027 18.504 275.027 cv
18.043 275.027 17.633 274.98 17.273 274.887 cv
16.91 274.793 16.605 274.652 16.355 274.461 cv
16.105 274.277 15.914 274.047 15.781 273.77 cv
15.648 273.496 15.582 273.184 15.582 272.828 cv
15.582 272.555 15.625 272.297 15.719 272.062 cv
15.805 271.828 15.938 271.613 16.113 271.418 cv
16.281 271.223 16.492 271.039 16.746 270.863 cv
16.996 270.695 17.281 270.531 17.598 270.375 cv
17.324 270.234 17.082 270.086 16.871 269.926 cv
16.66 269.77 16.48 269.598 16.336 269.41 cv
16.188 269.227 16.078 269.031 16.004 268.82 cv
15.926 268.613 15.887 268.383 15.891 268.133 cv
15.887 267.824 15.941 267.531 16.059 267.258 cv
16.168 266.988 16.34 266.754 16.566 266.551 cv
16.793 266.352 17.078 266.191 17.43 266.074 cv
17.773 265.957 18.184 265.898 18.652 265.898 cv
19.098 265.898 19.484 265.953 19.813 266.059 cv
20.141 266.168 20.41 266.312 20.621 266.496 cv
20.832 266.684 20.988 266.902 21.094 267.152 cv
21.191 267.402 21.242 267.672 21.246 267.961 cv
21.242 268.195 21.203 268.422 21.133 268.633 cv
21.055 268.852 20.945 269.055 20.797 269.242 cv
20.648 269.437 20.469 269.617 20.258 269.781 cv
20.047 269.953 19.805 270.109 19.531 270.25 cv
19.852 270.414 20.137 270.578 20.395 270.746 cv
20.645 270.914 20.859 271.094 21.035 271.289 cv
21.203 271.484 21.332 271.691 21.426 271.906 cv
21.512 272.125 21.559 272.363 21.559 272.621 cv
cp
20.078 268.07 mo
20.074 267.883 20.043 267.707 19.977 267.551 cv
19.91 267.395 19.813 267.262 19.688 267.152 cv
19.559 267.043 19.398 266.961 19.211 266.902 cv
19.016 266.848 18.801 266.82 18.563 266.816 cv
18.066 266.82 17.691 266.93 17.441 267.152 cv
17.184 267.379 17.059 267.687 17.063 268.07 cv
17.059 268.25 17.09 268.414 17.152 268.566 cv
17.215 268.723 17.309 268.867 17.441 269.004 cv
17.566 269.141 17.73 269.273 17.934 269.402 cv
18.129 269.535 18.367 269.672 18.645 269.812 cv
19.105 269.578 19.461 269.316 19.707 269.023 cv
19.953 268.738 20.074 268.422 20.078 268.07 cv
cp
20.367 272.746 mo
20.363 272.539 20.324 272.348 20.25 272.176 cv
20.168 272.008 20.051 271.848 19.895 271.695 cv
19.738 271.547 19.539 271.402 19.305 271.262 cv
19.066 271.125 18.797 270.98 18.488 270.828 cv
18.199 270.973 17.945 271.113 17.73 271.254 cv
17.512 271.395 17.332 271.543 17.195 271.691 cv
17.055 271.848 16.949 272.004 16.879 272.168 cv
16.805 272.336 16.77 272.52 16.773 272.719 cv
16.77 273.164 16.922 273.508 17.23 273.746 cv
17.531 273.992 17.984 274.113 18.59 274.109 cv
19.172 274.113 19.617 273.992 19.918 273.742 cv
20.215 273.5 20.363 273.168 20.367 272.746 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.012 230.98 mo
22.106 230.98 li
22.106 248.07 li
15.012 248.07 li
cp
0 0 0 0 cmyk
ef
21.422 239.555 mo
21.418 239.941 21.395 240.328 21.352 240.719 cv
21.305 241.113 21.227 241.492 21.121 241.855 cv
21.008 242.219 20.863 242.559 20.68 242.875 cv
20.492 243.195 20.258 243.477 19.98 243.711 cv
19.695 243.953 19.359 244.137 18.977 244.27 cv
18.586 244.402 18.141 244.469 17.633 244.469 cv
17.434 244.469 17.242 244.453 17.059 244.43 cv
16.871 244.402 16.703 244.375 16.559 244.34 cv
16.406 244.305 16.281 244.266 16.184 244.223 cv
16.082 244.184 16.008 244.145 15.965 244.102 cv
15.918 244.062 15.887 244.008 15.867 243.934 cv
15.844 243.863 15.832 243.766 15.836 243.648 cv
15.832 243.547 15.836 243.469 15.844 243.41 cv
15.848 243.352 15.859 243.305 15.875 243.273 cv
15.891 243.242 15.91 243.223 15.934 243.207 cv
15.957 243.199 15.988 243.191 16.027 243.187 cv
16.074 243.191 16.145 243.207 16.238 243.238 cv
16.328 243.273 16.441 243.312 16.586 243.352 cv
16.723 243.395 16.887 243.434 17.074 243.465 cv
17.258 243.504 17.469 243.52 17.707 243.516 cv
18.148 243.52 18.527 243.434 18.848 243.262 cv
19.16 243.09 19.422 242.863 19.625 242.574 cv
19.828 242.289 19.977 241.953 20.078 241.57 cv
20.176 241.191 20.23 240.793 20.242 240.371 cv
19.996 240.516 19.707 240.641 19.371 240.746 cv
19.031 240.859 18.645 240.914 18.207 240.91 cv
17.715 240.914 17.301 240.848 16.965 240.711 cv
16.629 240.578 16.355 240.395 16.152 240.16 cv
15.945 239.93 15.801 239.652 15.715 239.328 cv
15.625 239.012 15.582 238.66 15.582 238.281 cv
15.582 237.891 15.637 237.52 15.754 237.16 cv
15.863 236.809 16.043 236.496 16.289 236.227 cv
16.527 235.957 16.836 235.742 17.215 235.582 cv
17.586 235.422 18.035 235.34 18.559 235.34 cv
18.926 235.34 19.25 235.387 19.539 235.48 cv
19.82 235.574 20.07 235.711 20.285 235.887 cv
20.492 236.062 20.672 236.273 20.82 236.523 cv
20.965 236.773 21.082 237.055 21.172 237.367 cv
21.258 237.684 21.32 238.027 21.363 238.395 cv
21.398 238.766 21.418 239.152 21.422 239.555 cv
cp
20.223 239.426 mo
20.223 238.844 20.184 238.352 20.105 237.949 cv
20.027 237.551 19.91 237.227 19.762 236.977 cv
19.609 236.73 19.426 236.551 19.207 236.441 cv
18.984 236.332 18.73 236.277 18.449 236.277 cv
18.145 236.277 17.891 236.332 17.684 236.441 cv
17.473 236.551 17.301 236.695 17.168 236.871 cv
17.031 237.055 16.93 237.258 16.867 237.484 cv
16.801 237.715 16.77 237.953 16.773 238.191 cv
16.77 238.465 16.801 238.711 16.859 238.93 cv
16.914 239.156 17.004 239.344 17.137 239.5 cv
17.262 239.656 17.43 239.777 17.637 239.863 cv
17.84 239.949 18.094 239.992 18.398 239.988 cv
18.738 239.992 19.07 239.941 19.395 239.836 cv
19.711 239.734 19.988 239.598 20.223 239.426 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.922 200.441 mo
22.11 200.441 li
22.11 217.531 li
7.922 217.531 li
cp
0 0 0 0 cmyk
ef
14.297 213.355 mo
14.293 213.445 14.285 213.516 14.273 213.574 cv
14.258 213.637 14.238 213.687 14.219 213.719 cv
14.195 213.758 14.172 213.781 14.141 213.797 cv
14.109 213.812 14.078 213.82 14.051 213.82 cv
9.414 213.82 li
9.379 213.82 9.352 213.812 9.324 213.797 cv
9.297 213.781 9.27 213.758 9.246 213.719 cv
9.219 213.687 9.199 213.637 9.188 213.574 cv
9.172 213.516 9.164 213.445 9.168 213.355 cv
9.164 213.277 9.172 213.203 9.188 213.141 cv
9.199 213.082 9.215 213.035 9.238 212.996 cv
9.254 212.961 9.281 212.93 9.313 212.906 cv
9.344 212.887 9.375 212.879 9.414 212.875 cv
11.266 212.875 li
11.266 206.129 li
9.551 207.148 li
9.461 207.199 9.391 207.227 9.344 207.234 cv
9.289 207.242 9.246 207.234 9.215 207.203 cv
9.18 207.176 9.16 207.125 9.148 207.055 cv
9.137 206.988 9.129 206.902 9.133 206.793 cv
9.129 206.719 9.133 206.652 9.145 206.594 cv
9.148 206.543 9.16 206.496 9.176 206.457 cv
9.188 206.422 9.207 206.391 9.23 206.363 cv
9.254 206.336 9.285 206.309 9.332 206.281 cv
11.375 204.969 li
11.391 204.957 11.41 204.945 11.441 204.937 cv
11.465 204.93 11.5 204.922 11.547 204.91 cv
11.586 204.902 11.637 204.895 11.691 204.891 cv
11.746 204.891 11.813 204.891 11.898 204.887 cv
12.004 204.891 12.098 204.895 12.172 204.902 cv
12.242 204.91 12.297 204.926 12.344 204.941 cv
12.383 204.961 12.41 204.98 12.426 205.004 cv
12.434 205.031 12.441 205.055 12.445 205.078 cv
12.445 212.875 li
14.051 212.875 li
14.086 212.879 14.121 212.887 14.152 212.906 cv
14.184 212.93 14.207 212.961 14.23 212.996 cv
14.246 213.035 14.262 213.082 14.277 213.141 cv
14.285 213.203 14.293 213.277 14.297 213.355 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.648 209.363 mo
21.645 210.047 21.594 210.668 21.488 211.23 cv
21.379 211.793 21.199 212.277 20.953 212.68 cv
20.699 213.086 20.371 213.398 19.973 213.617 cv
19.566 213.84 19.074 213.949 18.488 213.949 cv
17.93 213.949 17.457 213.852 17.078 213.652 cv
16.695 213.457 16.391 213.164 16.156 212.777 cv
15.922 212.391 15.754 211.918 15.66 211.352 cv
15.559 210.789 15.512 210.141 15.512 209.406 cv
15.512 208.734 15.566 208.113 15.676 207.547 cv
15.785 206.984 15.961 206.5 16.211 206.094 cv
16.453 205.691 16.777 205.379 17.184 205.152 cv
17.582 204.934 18.078 204.82 18.668 204.82 cv
19.227 204.82 19.699 204.922 20.082 205.117 cv
20.465 205.32 20.77 205.613 21.004 205.996 cv
21.234 206.387 21.402 206.859 21.5 207.422 cv
21.598 207.984 21.645 208.633 21.648 209.363 cv
cp
20.441 209.445 mo
20.438 209.004 20.422 208.605 20.395 208.254 cv
20.359 207.902 20.313 207.594 20.254 207.324 cv
20.188 207.055 20.109 206.824 20.012 206.629 cv
19.914 206.437 19.797 206.277 19.66 206.148 cv
19.52 206.023 19.359 205.93 19.188 205.871 cv
19.008 205.816 18.813 205.789 18.598 205.785 cv
18.207 205.789 17.891 205.879 17.652 206.062 cv
17.406 206.246 17.215 206.5 17.078 206.816 cv
16.938 207.137 16.844 207.508 16.793 207.937 cv
16.742 208.367 16.719 208.832 16.719 209.324 cv
16.719 209.988 16.75 210.551 16.82 211.012 cv
16.887 211.48 16.996 211.859 17.148 212.148 cv
17.293 212.445 17.484 212.656 17.715 212.785 cv
17.945 212.922 18.227 212.988 18.559 212.984 cv
18.813 212.988 19.035 212.949 19.23 212.863 cv
19.422 212.785 19.59 212.664 19.73 212.508 cv
19.871 212.355 19.984 212.172 20.078 211.957 cv
20.164 211.742 20.238 211.504 20.297 211.242 cv
20.348 210.984 20.387 210.703 20.41 210.398 cv
20.43 210.094 20.438 209.777 20.441 209.445 cv
cp
f
7.922 169.898 mo
22.11 169.898 li
22.11 186.988 li
7.922 186.988 li
cp
0 0 0 0 cmyk
ef
14.297 182.797 mo
14.293 182.887 14.285 182.957 14.273 183.016 cv
14.258 183.078 14.238 183.129 14.219 183.16 cv
14.195 183.199 14.172 183.223 14.141 183.238 cv
14.109 183.254 14.078 183.262 14.051 183.262 cv
9.414 183.262 li
9.379 183.262 9.352 183.254 9.324 183.238 cv
9.297 183.223 9.27 183.199 9.246 183.16 cv
9.219 183.129 9.199 183.078 9.188 183.016 cv
9.172 182.957 9.164 182.887 9.168 182.797 cv
9.164 182.719 9.172 182.645 9.188 182.582 cv
9.199 182.523 9.215 182.477 9.238 182.437 cv
9.254 182.402 9.281 182.371 9.313 182.348 cv
9.344 182.328 9.375 182.32 9.414 182.316 cv
11.266 182.316 li
11.266 175.57 li
9.551 176.59 li
9.461 176.641 9.391 176.668 9.344 176.676 cv
9.289 176.684 9.246 176.676 9.215 176.645 cv
9.18 176.617 9.16 176.566 9.148 176.496 cv
9.137 176.43 9.129 176.344 9.133 176.234 cv
9.129 176.16 9.133 176.094 9.145 176.035 cv
9.148 175.984 9.16 175.937 9.176 175.898 cv
9.188 175.863 9.207 175.832 9.23 175.805 cv
9.254 175.777 9.285 175.75 9.332 175.723 cv
11.375 174.41 li
11.391 174.398 11.41 174.387 11.441 174.379 cv
11.465 174.371 11.5 174.363 11.547 174.352 cv
11.586 174.344 11.637 174.336 11.691 174.332 cv
11.746 174.332 11.813 174.332 11.898 174.328 cv
12.004 174.332 12.098 174.336 12.172 174.344 cv
12.242 174.352 12.297 174.367 12.344 174.383 cv
12.383 174.402 12.41 174.422 12.426 174.445 cv
12.434 174.473 12.441 174.496 12.445 174.52 cv
12.445 182.316 li
14.051 182.316 li
14.086 182.32 14.121 182.328 14.152 182.348 cv
14.184 182.371 14.207 182.402 14.23 182.437 cv
14.246 182.477 14.262 182.523 14.277 182.582 cv
14.285 182.645 14.293 182.719 14.297 182.797 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.375 182.797 mo
21.371 182.887 21.363 182.957 21.352 183.016 cv
21.336 183.078 21.316 183.129 21.297 183.16 cv
21.273 183.199 21.25 183.223 21.219 183.238 cv
21.188 183.254 21.156 183.262 21.129 183.262 cv
16.492 183.262 li
16.457 183.262 16.43 183.254 16.402 183.238 cv
16.375 183.223 16.348 183.199 16.324 183.16 cv
16.297 183.129 16.277 183.078 16.266 183.016 cv
16.25 182.957 16.242 182.887 16.246 182.797 cv
16.242 182.719 16.25 182.645 16.266 182.582 cv
16.277 182.523 16.293 182.477 16.316 182.437 cv
16.332 182.402 16.359 182.371 16.391 182.348 cv
16.422 182.328 16.453 182.32 16.492 182.316 cv
18.344 182.316 li
18.344 175.57 li
16.629 176.59 li
16.539 176.641 16.469 176.668 16.422 176.676 cv
16.367 176.684 16.324 176.676 16.293 176.645 cv
16.258 176.617 16.238 176.566 16.227 176.496 cv
16.215 176.43 16.207 176.344 16.211 176.234 cv
16.207 176.16 16.211 176.094 16.223 176.035 cv
16.227 175.984 16.238 175.937 16.254 175.898 cv
16.266 175.863 16.285 175.832 16.309 175.805 cv
16.332 175.777 16.363 175.75 16.41 175.723 cv
18.453 174.41 li
18.469 174.398 18.488 174.387 18.52 174.379 cv
18.543 174.371 18.578 174.363 18.625 174.352 cv
18.664 174.344 18.715 174.336 18.77 174.332 cv
18.824 174.332 18.891 174.332 18.977 174.328 cv
19.082 174.332 19.176 174.336 19.25 174.344 cv
19.32 174.352 19.375 174.367 19.422 174.383 cv
19.461 174.402 19.488 174.422 19.504 174.445 cv
19.512 174.473 19.52 174.496 19.523 174.52 cv
19.523 182.316 li
21.129 182.316 li
21.164 182.32 21.199 182.328 21.23 182.348 cv
21.262 182.371 21.285 182.402 21.309 182.437 cv
21.324 182.477 21.34 182.523 21.355 182.582 cv
21.363 182.645 21.371 182.719 21.375 182.797 cv
cp
f
7.922 139.371 mo
22.11 139.371 li
22.11 156.461 li
7.922 156.461 li
cp
0 0 0 0 cmyk
ef
14.297 152.246 mo
14.293 152.336 14.285 152.406 14.273 152.465 cv
14.258 152.527 14.238 152.578 14.219 152.609 cv
14.195 152.648 14.172 152.672 14.141 152.687 cv
14.109 152.703 14.078 152.711 14.051 152.711 cv
9.414 152.711 li
9.379 152.711 9.352 152.703 9.324 152.687 cv
9.297 152.672 9.27 152.648 9.246 152.609 cv
9.219 152.578 9.199 152.527 9.188 152.465 cv
9.172 152.406 9.164 152.336 9.168 152.246 cv
9.164 152.168 9.172 152.094 9.188 152.031 cv
9.199 151.973 9.215 151.926 9.238 151.887 cv
9.254 151.852 9.281 151.82 9.313 151.797 cv
9.344 151.777 9.375 151.77 9.414 151.766 cv
11.266 151.766 li
11.266 145.02 li
9.551 146.039 li
9.461 146.09 9.391 146.117 9.344 146.125 cv
9.289 146.133 9.246 146.125 9.215 146.094 cv
9.18 146.066 9.16 146.016 9.148 145.945 cv
9.137 145.879 9.129 145.793 9.133 145.684 cv
9.129 145.609 9.133 145.543 9.145 145.484 cv
9.148 145.434 9.16 145.387 9.176 145.348 cv
9.188 145.312 9.207 145.281 9.23 145.254 cv
9.254 145.227 9.285 145.199 9.332 145.172 cv
11.375 143.859 li
11.391 143.848 11.41 143.836 11.441 143.828 cv
11.465 143.82 11.5 143.812 11.547 143.801 cv
11.586 143.793 11.637 143.785 11.691 143.781 cv
11.746 143.781 11.813 143.781 11.898 143.777 cv
12.004 143.781 12.098 143.785 12.172 143.793 cv
12.242 143.801 12.297 143.816 12.344 143.832 cv
12.383 143.852 12.41 143.871 12.426 143.895 cv
12.434 143.922 12.441 143.945 12.445 143.969 cv
12.445 151.766 li
14.051 151.766 li
14.086 151.77 14.121 151.777 14.152 151.797 cv
14.184 151.82 14.207 151.852 14.23 151.887 cv
14.246 151.926 14.262 151.973 14.277 152.031 cv
14.285 152.094 14.293 152.168 14.297 152.246 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.355 152.203 mo
21.352 152.289 21.348 152.363 21.336 152.426 cv
21.324 152.492 21.309 152.547 21.289 152.586 cv
21.266 152.633 21.238 152.664 21.207 152.68 cv
21.172 152.703 21.133 152.711 21.094 152.711 cv
16.191 152.711 li
16.129 152.711 16.07 152.703 16.023 152.687 cv
15.973 152.672 15.934 152.648 15.898 152.609 cv
15.863 152.578 15.836 152.523 15.824 152.453 cv
15.805 152.383 15.797 152.297 15.801 152.195 cv
15.797 152.105 15.801 152.027 15.809 151.957 cv
15.813 151.891 15.828 151.832 15.855 151.777 cv
15.879 151.727 15.91 151.672 15.945 151.617 cv
15.98 151.566 16.023 151.512 16.082 151.449 cv
17.855 149.625 li
18.266 149.207 18.594 148.832 18.844 148.496 cv
19.09 148.168 19.281 147.863 19.414 147.586 cv
19.547 147.312 19.633 147.062 19.68 146.836 cv
19.719 146.613 19.742 146.402 19.742 146.207 cv
19.742 146.012 19.707 145.828 19.641 145.648 cv
19.574 145.477 19.48 145.32 19.355 145.184 cv
19.23 145.055 19.074 144.949 18.887 144.867 cv
18.699 144.793 18.48 144.754 18.234 144.75 cv
17.945 144.754 17.688 144.793 17.461 144.867 cv
17.23 144.949 17.031 145.035 16.859 145.121 cv
16.688 145.215 16.543 145.297 16.426 145.375 cv
16.309 145.453 16.223 145.492 16.172 145.492 cv
16.137 145.492 16.105 145.484 16.082 145.465 cv
16.051 145.449 16.031 145.418 16.016 145.375 cv
16 145.336 15.984 145.281 15.977 145.211 cv
15.965 145.145 15.961 145.062 15.965 144.965 cv
15.961 144.898 15.965 144.84 15.973 144.789 cv
15.977 144.738 15.984 144.695 15.996 144.656 cv
16.004 144.621 16.02 144.586 16.039 144.555 cv
16.059 144.523 16.094 144.484 16.152 144.434 cv
16.203 144.387 16.297 144.32 16.434 144.238 cv
16.566 144.156 16.738 144.078 16.941 143.996 cv
17.145 143.918 17.367 143.848 17.613 143.793 cv
17.855 143.738 18.113 143.711 18.387 143.711 cv
18.813 143.711 19.188 143.773 19.512 143.895 cv
19.832 144.016 20.098 144.18 20.313 144.391 cv
20.523 144.602 20.684 144.848 20.789 145.121 cv
20.895 145.402 20.949 145.699 20.949 146.012 cv
20.949 146.301 20.922 146.582 20.871 146.859 cv
20.82 147.145 20.715 147.449 20.555 147.773 cv
20.391 148.102 20.156 148.465 19.852 148.863 cv
19.543 149.266 19.137 149.727 18.633 150.242 cv
17.227 151.711 li
21.086 151.711 li
21.117 151.715 21.152 151.727 21.191 151.742 cv
21.223 151.766 21.254 151.797 21.281 151.836 cv
21.305 151.879 21.324 151.93 21.336 151.988 cv
21.348 152.055 21.352 152.125 21.355 152.203 cv
cp
f
7.922 108.828 mo
22.11 108.828 li
22.11 125.922 li
7.922 125.922 li
cp
0 0 0 0 cmyk
ef
14.297 121.715 mo
14.293 121.805 14.285 121.875 14.273 121.934 cv
14.258 121.996 14.238 122.047 14.219 122.078 cv
14.195 122.117 14.172 122.141 14.141 122.156 cv
14.109 122.172 14.078 122.18 14.051 122.18 cv
9.414 122.18 li
9.379 122.18 9.352 122.172 9.324 122.156 cv
9.297 122.141 9.27 122.117 9.246 122.078 cv
9.219 122.047 9.199 121.996 9.188 121.934 cv
9.172 121.875 9.164 121.805 9.168 121.715 cv
9.164 121.637 9.172 121.562 9.188 121.5 cv
9.199 121.441 9.215 121.395 9.238 121.355 cv
9.254 121.32 9.281 121.289 9.313 121.266 cv
9.344 121.246 9.375 121.238 9.414 121.234 cv
11.266 121.234 li
11.266 114.488 li
9.551 115.508 li
9.461 115.559 9.391 115.586 9.344 115.594 cv
9.289 115.602 9.246 115.594 9.215 115.562 cv
9.18 115.535 9.16 115.484 9.148 115.414 cv
9.137 115.348 9.129 115.262 9.133 115.152 cv
9.129 115.078 9.133 115.012 9.145 114.953 cv
9.148 114.902 9.16 114.855 9.176 114.816 cv
9.188 114.781 9.207 114.75 9.23 114.723 cv
9.254 114.695 9.285 114.668 9.332 114.641 cv
11.375 113.328 li
11.391 113.316 11.41 113.305 11.441 113.297 cv
11.465 113.289 11.5 113.281 11.547 113.27 cv
11.586 113.262 11.637 113.254 11.691 113.25 cv
11.746 113.25 11.813 113.25 11.898 113.246 cv
12.004 113.25 12.098 113.254 12.172 113.262 cv
12.242 113.27 12.297 113.285 12.344 113.301 cv
12.383 113.32 12.41 113.34 12.426 113.363 cv
12.434 113.391 12.441 113.414 12.445 113.437 cv
12.445 121.234 li
14.051 121.234 li
14.086 121.238 14.121 121.246 14.152 121.266 cv
14.184 121.289 14.207 121.32 14.23 121.355 cv
14.246 121.395 14.262 121.441 14.277 121.5 cv
14.285 121.562 14.293 121.637 14.297 121.715 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.285 119.645 mo
21.281 120.055 21.211 120.422 21.07 120.746 cv
20.926 121.074 20.723 121.355 20.461 121.586 cv
20.195 121.82 19.867 121.996 19.48 122.121 cv
19.09 122.246 18.652 122.309 18.168 122.309 cv
17.863 122.309 17.586 122.281 17.332 122.234 cv
17.07 122.187 16.84 122.137 16.645 122.066 cv
16.441 122.004 16.277 121.934 16.145 121.863 cv
16.012 121.793 15.926 121.742 15.895 121.707 cv
15.855 121.68 15.832 121.648 15.816 121.613 cv
15.797 121.582 15.777 121.543 15.766 121.496 cv
15.75 121.453 15.742 121.398 15.734 121.328 cv
15.727 121.266 15.723 121.184 15.727 121.082 cv
15.723 120.922 15.738 120.809 15.773 120.742 cv
15.805 120.68 15.852 120.645 15.914 120.645 cv
15.957 120.645 16.039 120.684 16.164 120.754 cv
16.285 120.832 16.445 120.91 16.641 120.992 cv
16.832 121.078 17.059 121.156 17.324 121.227 cv
17.582 121.301 17.875 121.336 18.195 121.336 cv
18.504 121.336 18.773 121.297 19.012 121.219 cv
19.242 121.141 19.441 121.031 19.602 120.891 cv
19.758 120.75 19.875 120.582 19.957 120.387 cv
20.035 120.191 20.074 119.98 20.078 119.754 cv
20.074 119.504 20.023 119.277 19.926 119.074 cv
19.82 118.875 19.672 118.703 19.48 118.555 cv
19.281 118.41 19.043 118.297 18.758 118.219 cv
18.473 118.141 18.148 118.102 17.785 118.102 cv
16.914 118.102 li
16.871 118.102 16.836 118.094 16.801 118.078 cv
16.766 118.062 16.734 118.035 16.711 117.996 cv
16.684 117.961 16.664 117.914 16.648 117.855 cv
16.633 117.797 16.625 117.719 16.625 117.621 cv
16.625 117.535 16.629 117.465 16.645 117.406 cv
16.652 117.352 16.672 117.305 16.703 117.27 cv
16.727 117.234 16.758 117.211 16.789 117.191 cv
16.82 117.18 16.855 117.172 16.898 117.168 cv
17.672 117.168 li
17.973 117.172 18.242 117.133 18.484 117.051 cv
18.719 116.977 18.922 116.863 19.094 116.715 cv
19.258 116.57 19.387 116.395 19.477 116.191 cv
19.566 115.988 19.613 115.762 19.613 115.508 cv
19.613 115.328 19.582 115.152 19.523 114.984 cv
19.461 114.82 19.371 114.676 19.254 114.551 cv
19.133 114.426 18.98 114.328 18.801 114.258 cv
18.613 114.187 18.402 114.152 18.16 114.152 cv
17.895 114.152 17.648 114.195 17.43 114.273 cv
17.203 114.355 17.008 114.441 16.836 114.531 cv
16.66 114.625 16.516 114.711 16.402 114.789 cv
16.289 114.871 16.207 114.91 16.164 114.906 cv
16.129 114.91 16.102 114.902 16.078 114.891 cv
16.051 114.879 16.031 114.855 16.016 114.82 cv
16 114.789 15.988 114.742 15.98 114.676 cv
15.973 114.617 15.969 114.535 15.973 114.434 cv
15.969 114.367 15.969 114.309 15.977 114.254 cv
15.977 114.203 15.988 114.156 16.004 114.113 cv
16.02 114.078 16.035 114.043 16.055 114.008 cv
16.07 113.98 16.102 113.941 16.145 113.895 cv
16.188 113.852 16.273 113.789 16.41 113.707 cv
16.539 113.625 16.703 113.547 16.898 113.465 cv
17.09 113.387 17.313 113.316 17.57 113.262 cv
17.82 113.207 18.094 113.18 18.391 113.18 cv
18.797 113.18 19.16 113.234 19.473 113.336 cv
19.785 113.445 20.043 113.594 20.254 113.781 cv
20.457 113.977 20.613 114.207 20.719 114.473 cv
20.82 114.742 20.871 115.035 20.875 115.359 cv
20.871 115.641 20.836 115.902 20.766 116.137 cv
20.691 116.379 20.582 116.59 20.441 116.773 cv
20.297 116.961 20.125 117.117 19.922 117.246 cv
19.715 117.379 19.477 117.473 19.207 117.52 cv
19.207 117.531 li
19.512 117.566 19.793 117.641 20.047 117.762 cv
20.301 117.883 20.52 118.035 20.703 118.219 cv
20.883 118.402 21.023 118.617 21.129 118.859 cv
21.23 119.105 21.281 119.367 21.285 119.645 cv
cp
f
7.922 78.289 mo
22.11 78.289 li
22.11 95.379 li
7.922 95.379 li
cp
0 0 0 0 cmyk
ef
14.297 91.164 mo
14.293 91.254 14.285 91.324 14.273 91.383 cv
14.258 91.445 14.238 91.496 14.219 91.527 cv
14.195 91.566 14.172 91.59 14.141 91.605 cv
14.109 91.621 14.078 91.629 14.051 91.629 cv
9.414 91.629 li
9.379 91.629 9.352 91.621 9.324 91.605 cv
9.297 91.59 9.27 91.566 9.246 91.527 cv
9.219 91.496 9.199 91.445 9.188 91.383 cv
9.172 91.324 9.164 91.254 9.168 91.164 cv
9.164 91.086 9.172 91.012 9.188 90.949 cv
9.199 90.891 9.215 90.844 9.238 90.805 cv
9.254 90.77 9.281 90.738 9.313 90.715 cv
9.344 90.695 9.375 90.687 9.414 90.684 cv
11.266 90.684 li
11.266 83.937 li
9.551 84.957 li
9.461 85.008 9.391 85.035 9.344 85.043 cv
9.289 85.051 9.246 85.043 9.215 85.012 cv
9.18 84.984 9.16 84.934 9.148 84.863 cv
9.137 84.797 9.129 84.711 9.133 84.602 cv
9.129 84.527 9.133 84.461 9.145 84.402 cv
9.148 84.352 9.16 84.305 9.176 84.266 cv
9.188 84.23 9.207 84.199 9.23 84.172 cv
9.254 84.145 9.285 84.117 9.332 84.09 cv
11.375 82.777 li
11.391 82.766 11.41 82.754 11.441 82.746 cv
11.465 82.738 11.5 82.73 11.547 82.719 cv
11.586 82.711 11.637 82.703 11.691 82.699 cv
11.746 82.699 11.813 82.699 11.898 82.695 cv
12.004 82.699 12.098 82.703 12.172 82.711 cv
12.242 82.719 12.297 82.734 12.344 82.75 cv
12.383 82.77 12.41 82.789 12.426 82.812 cv
12.434 82.84 12.441 82.863 12.445 82.887 cv
12.445 90.684 li
14.051 90.684 li
14.086 90.687 14.121 90.695 14.152 90.715 cv
14.184 90.738 14.207 90.77 14.23 90.805 cv
14.246 90.844 14.262 90.891 14.277 90.949 cv
14.285 91.012 14.293 91.086 14.297 91.164 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.73 89.105 mo
21.727 89.258 21.703 89.379 21.66 89.465 cv
21.613 89.555 21.551 89.598 21.469 89.594 cv
20.469 89.594 li
20.469 91.457 li
20.469 91.496 20.457 91.527 20.441 91.551 cv
20.418 91.578 20.387 91.598 20.344 91.617 cv
20.293 91.633 20.23 91.645 20.16 91.656 cv
20.082 91.664 19.988 91.668 19.871 91.672 cv
19.754 91.668 19.656 91.664 19.586 91.656 cv
19.508 91.645 19.449 91.633 19.406 91.617 cv
19.359 91.598 19.328 91.578 19.313 91.551 cv
19.293 91.527 19.285 91.496 19.289 91.457 cv
19.289 89.594 li
15.66 89.594 li
15.602 89.598 15.559 89.59 15.523 89.574 cv
15.488 89.562 15.453 89.535 15.426 89.496 cv
15.395 89.461 15.375 89.41 15.363 89.34 cv
15.352 89.273 15.348 89.184 15.348 89.07 cv
15.348 88.988 15.348 88.91 15.355 88.84 cv
15.355 88.77 15.367 88.707 15.383 88.652 cv
15.395 88.598 15.41 88.543 15.438 88.488 cv
15.457 88.434 15.484 88.379 15.52 88.316 cv
18.68 82.93 li
18.699 82.895 18.734 82.863 18.781 82.836 cv
18.824 82.809 18.879 82.785 18.953 82.766 cv
19.02 82.75 19.105 82.738 19.211 82.727 cv
19.313 82.723 19.434 82.719 19.574 82.715 cv
19.723 82.719 19.859 82.723 19.977 82.734 cv
20.09 82.746 20.18 82.762 20.254 82.777 cv
20.32 82.797 20.375 82.82 20.414 82.852 cv
20.449 82.883 20.469 82.918 20.469 82.957 cv
20.469 88.621 li
21.469 88.621 li
21.543 88.625 21.605 88.664 21.656 88.742 cv
21.703 88.824 21.727 88.945 21.73 89.105 cv
cp
19.289 83.754 mo
19.277 83.754 li
16.426 88.621 li
19.289 88.621 li
cp
f
7.922 47.75 mo
22.11 47.75 li
22.11 64.84 li
7.922 64.84 li
cp
0 0 0 0 cmyk
ef
14.297 60.613 mo
14.293 60.703 14.285 60.773 14.273 60.832 cv
14.258 60.895 14.238 60.945 14.219 60.977 cv
14.195 61.016 14.172 61.039 14.141 61.055 cv
14.109 61.07 14.078 61.078 14.051 61.078 cv
9.414 61.078 li
9.379 61.078 9.352 61.07 9.324 61.055 cv
9.297 61.039 9.27 61.016 9.246 60.977 cv
9.219 60.945 9.199 60.895 9.188 60.832 cv
9.172 60.773 9.164 60.703 9.168 60.613 cv
9.164 60.535 9.172 60.461 9.188 60.398 cv
9.199 60.34 9.215 60.293 9.238 60.254 cv
9.254 60.219 9.281 60.187 9.313 60.164 cv
9.344 60.145 9.375 60.137 9.414 60.133 cv
11.266 60.133 li
11.266 53.387 li
9.551 54.406 li
9.461 54.457 9.391 54.484 9.344 54.492 cv
9.289 54.5 9.246 54.492 9.215 54.461 cv
9.18 54.434 9.16 54.383 9.148 54.312 cv
9.137 54.246 9.129 54.16 9.133 54.051 cv
9.129 53.977 9.133 53.91 9.145 53.852 cv
9.148 53.801 9.16 53.754 9.176 53.715 cv
9.188 53.68 9.207 53.648 9.23 53.621 cv
9.254 53.594 9.285 53.566 9.332 53.539 cv
11.375 52.227 li
11.391 52.215 11.41 52.203 11.441 52.195 cv
11.465 52.187 11.5 52.18 11.547 52.168 cv
11.586 52.16 11.637 52.152 11.691 52.148 cv
11.746 52.148 11.813 52.148 11.898 52.145 cv
12.004 52.148 12.098 52.152 12.172 52.16 cv
12.242 52.168 12.297 52.184 12.344 52.199 cv
12.383 52.219 12.41 52.238 12.426 52.262 cv
12.434 52.289 12.441 52.312 12.445 52.336 cv
12.445 60.133 li
14.051 60.133 li
14.086 60.137 14.121 60.145 14.152 60.164 cv
14.184 60.187 14.207 60.219 14.23 60.254 cv
14.246 60.293 14.262 60.34 14.277 60.398 cv
14.285 60.461 14.293 60.535 14.297 60.613 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.313 58.227 mo
21.313 58.703 21.23 59.125 21.07 59.496 cv
20.91 59.867 20.684 60.18 20.395 60.434 cv
20.098 60.687 19.75 60.883 19.348 61.012 cv
18.941 61.145 18.492 61.207 18 61.207 cv
17.723 61.207 17.461 61.187 17.219 61.148 cv
16.969 61.109 16.75 61.062 16.563 61.008 cv
16.367 60.953 16.211 60.898 16.086 60.84 cv
15.961 60.789 15.883 60.746 15.852 60.711 cv
15.816 60.68 15.793 60.648 15.781 60.621 cv
15.766 60.594 15.75 60.562 15.742 60.52 cv
15.727 60.484 15.719 60.434 15.719 60.371 cv
15.711 60.312 15.711 60.242 15.711 60.16 cv
15.711 60.086 15.715 60.016 15.723 59.953 cv
15.73 59.891 15.742 59.84 15.762 59.801 cv
15.777 59.762 15.797 59.734 15.824 59.715 cv
15.848 59.699 15.879 59.691 15.91 59.687 cv
15.957 59.691 16.027 59.719 16.121 59.773 cv
16.215 59.832 16.344 59.895 16.508 59.961 cv
16.672 60.027 16.871 60.09 17.113 60.148 cv
17.348 60.207 17.633 60.234 17.969 60.234 cv
18.27 60.234 18.551 60.199 18.809 60.125 cv
19.063 60.055 19.285 59.941 19.473 59.785 cv
19.656 59.633 19.801 59.437 19.906 59.199 cv
20.012 58.965 20.063 58.676 20.066 58.336 cv
20.063 58.055 20.02 57.805 19.93 57.586 cv
19.84 57.367 19.703 57.187 19.52 57.043 cv
19.332 56.902 19.098 56.797 18.816 56.723 cv
18.531 56.652 18.191 56.613 17.805 56.613 cv
17.52 56.613 17.281 56.629 17.082 56.656 cv
16.879 56.687 16.691 56.703 16.52 56.699 cv
16.391 56.703 16.297 56.672 16.246 56.609 cv
16.188 56.551 16.16 56.437 16.164 56.266 cv
16.164 52.652 li
16.16 52.504 16.195 52.395 16.27 52.316 cv
16.336 52.246 16.438 52.207 16.574 52.207 cv
20.504 52.207 li
20.539 52.207 20.574 52.219 20.609 52.238 cv
20.641 52.262 20.668 52.293 20.695 52.332 cv
20.715 52.375 20.73 52.426 20.746 52.488 cv
20.754 52.555 20.762 52.633 20.766 52.715 cv
20.762 52.883 20.738 53.008 20.699 53.098 cv
20.652 53.191 20.594 53.238 20.516 53.234 cv
17.344 53.234 li
17.344 55.723 li
17.496 55.703 17.652 55.691 17.816 55.684 cv
17.973 55.68 18.16 55.676 18.375 55.676 cv
18.859 55.676 19.285 55.738 19.652 55.859 cv
20.016 55.98 20.32 56.152 20.57 56.371 cv
20.813 56.598 21 56.863 21.125 57.176 cv
21.25 57.492 21.313 57.844 21.313 58.227 cv
cp
f
7.922 17.211 mo
22.11 17.211 li
22.11 34.301 li
7.922 34.301 li
cp
0 0 0 0 cmyk
ef
14.297 30.086 mo
14.293 30.176 14.285 30.246 14.273 30.305 cv
14.258 30.367 14.238 30.418 14.219 30.449 cv
14.195 30.488 14.172 30.512 14.141 30.527 cv
14.109 30.543 14.078 30.551 14.051 30.551 cv
9.414 30.551 li
9.379 30.551 9.352 30.543 9.324 30.527 cv
9.297 30.512 9.27 30.488 9.246 30.449 cv
9.219 30.418 9.199 30.367 9.188 30.305 cv
9.172 30.246 9.164 30.176 9.168 30.086 cv
9.164 30.008 9.172 29.934 9.188 29.871 cv
9.199 29.812 9.215 29.766 9.238 29.727 cv
9.254 29.691 9.281 29.66 9.313 29.637 cv
9.344 29.617 9.375 29.609 9.414 29.605 cv
11.266 29.605 li
11.266 22.859 li
9.551 23.879 li
9.461 23.93 9.391 23.957 9.344 23.965 cv
9.289 23.973 9.246 23.965 9.215 23.934 cv
9.18 23.906 9.16 23.855 9.148 23.785 cv
9.137 23.719 9.129 23.633 9.133 23.523 cv
9.129 23.449 9.133 23.383 9.145 23.324 cv
9.148 23.273 9.16 23.227 9.176 23.187 cv
9.188 23.152 9.207 23.121 9.23 23.094 cv
9.254 23.066 9.285 23.039 9.332 23.012 cv
11.375 21.699 li
11.391 21.687 11.41 21.676 11.441 21.668 cv
11.465 21.66 11.5 21.652 11.547 21.641 cv
11.586 21.633 11.637 21.625 11.691 21.621 cv
11.746 21.621 11.813 21.621 11.898 21.617 cv
12.004 21.621 12.098 21.625 12.172 21.633 cv
12.242 21.641 12.297 21.656 12.344 21.672 cv
12.383 21.691 12.41 21.711 12.426 21.734 cv
12.434 21.762 12.441 21.785 12.445 21.809 cv
12.445 29.605 li
14.051 29.605 li
14.086 29.609 14.121 29.617 14.152 29.637 cv
14.184 29.66 14.207 29.691 14.23 29.727 cv
14.246 29.766 14.262 29.812 14.277 29.871 cv
14.285 29.934 14.293 30.008 14.297 30.086 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.582 27.68 mo
21.582 28.07 21.52 28.449 21.402 28.809 cv
21.277 29.176 21.094 29.492 20.852 29.766 cv
20.602 30.043 20.289 30.266 19.914 30.43 cv
19.531 30.598 19.086 30.68 18.57 30.68 cv
18.199 30.68 17.871 30.637 17.59 30.543 cv
17.305 30.457 17.059 30.324 16.848 30.152 cv
16.637 29.984 16.461 29.777 16.324 29.531 cv
16.184 29.285 16.07 29.004 15.988 28.687 cv
15.902 28.375 15.844 28.031 15.809 27.652 cv
15.77 27.281 15.75 26.879 15.754 26.445 cv
15.75 26.066 15.77 25.684 15.813 25.293 cv
15.852 24.91 15.926 24.535 16.031 24.168 cv
16.137 23.809 16.281 23.469 16.461 23.152 cv
16.641 22.836 16.867 22.559 17.141 22.324 cv
17.414 22.09 17.738 21.902 18.117 21.762 cv
18.496 21.625 18.938 21.559 19.441 21.555 cv
19.609 21.559 19.781 21.566 19.953 21.586 cv
20.125 21.609 20.285 21.641 20.434 21.672 cv
20.582 21.711 20.703 21.746 20.805 21.785 cv
20.902 21.824 20.969 21.859 21.004 21.883 cv
21.031 21.91 21.055 21.937 21.074 21.965 cv
21.09 21.996 21.105 22.027 21.113 22.062 cv
21.121 22.098 21.125 22.137 21.133 22.18 cv
21.133 22.223 21.137 22.277 21.141 22.34 cv
21.137 22.426 21.137 22.496 21.137 22.551 cv
21.133 22.613 21.121 22.66 21.109 22.695 cv
21.09 22.734 21.07 22.762 21.047 22.777 cv
21.02 22.797 20.988 22.805 20.949 22.805 cv
20.898 22.805 20.828 22.789 20.742 22.758 cv
20.652 22.727 20.547 22.691 20.426 22.648 cv
20.301 22.613 20.152 22.578 19.977 22.543 cv
19.801 22.516 19.598 22.5 19.367 22.496 cv
18.938 22.5 18.57 22.586 18.266 22.758 cv
17.961 22.93 17.711 23.164 17.516 23.457 cv
17.32 23.75 17.176 24.09 17.086 24.473 cv
16.988 24.863 16.934 25.266 16.926 25.684 cv
17.043 25.617 17.18 25.551 17.328 25.48 cv
17.477 25.414 17.637 25.352 17.813 25.293 cv
17.988 25.242 18.176 25.195 18.371 25.16 cv
18.566 25.129 18.777 25.113 19.004 25.109 cv
19.48 25.113 19.883 25.18 20.215 25.305 cv
20.543 25.437 20.809 25.617 21.016 25.848 cv
21.215 26.078 21.359 26.348 21.449 26.66 cv
21.535 26.973 21.582 27.312 21.582 27.68 cv
cp
20.387 27.789 mo
20.387 27.527 20.359 27.285 20.309 27.066 cv
20.254 26.852 20.164 26.668 20.043 26.512 cv
19.918 26.363 19.754 26.246 19.551 26.164 cv
19.34 26.082 19.086 26.039 18.789 26.039 cv
18.617 26.039 18.449 26.055 18.281 26.086 cv
18.109 26.117 17.945 26.16 17.789 26.207 cv
17.629 26.262 17.48 26.324 17.34 26.395 cv
17.195 26.469 17.063 26.543 16.945 26.621 cv
16.941 27.215 16.98 27.711 17.059 28.105 cv
17.133 28.504 17.242 28.82 17.387 29.059 cv
17.531 29.301 17.711 29.473 17.926 29.574 cv
18.141 29.68 18.391 29.73 18.68 29.727 cv
18.969 29.73 19.223 29.676 19.438 29.562 cv
19.652 29.457 19.828 29.309 19.973 29.121 cv
20.113 28.937 20.219 28.73 20.285 28.5 cv
20.352 28.27 20.387 28.035 20.387 27.789 cv
cp
f
37.914 506.437 mo
37.91 506.527 37.902 506.598 37.891 506.656 cv
37.875 506.719 37.855 506.77 37.836 506.801 cv
37.813 506.84 37.789 506.863 37.758 506.879 cv
37.727 506.895 37.695 506.902 37.668 506.902 cv
33.031 506.902 li
32.996 506.902 32.969 506.895 32.941 506.879 cv
32.914 506.863 32.887 506.84 32.863 506.801 cv
32.836 506.77 32.816 506.719 32.805 506.656 cv
32.789 506.598 32.781 506.527 32.785 506.437 cv
32.781 506.359 32.789 506.285 32.805 506.223 cv
32.816 506.164 32.832 506.117 32.855 506.078 cv
32.871 506.043 32.898 506.012 32.93 505.988 cv
32.961 505.969 32.992 505.961 33.031 505.957 cv
34.883 505.957 li
34.883 499.211 li
33.168 500.23 li
33.078 500.281 33.008 500.309 32.961 500.316 cv
32.906 500.324 32.863 500.316 32.832 500.285 cv
32.797 500.258 32.777 500.207 32.766 500.137 cv
32.754 500.07 32.746 499.984 32.75 499.875 cv
32.746 499.801 32.75 499.734 32.762 499.676 cv
32.766 499.625 32.777 499.578 32.793 499.539 cv
32.805 499.504 32.824 499.473 32.848 499.445 cv
32.871 499.418 32.902 499.391 32.949 499.363 cv
34.992 498.051 li
35.008 498.039 35.027 498.027 35.059 498.02 cv
35.082 498.012 35.117 498.004 35.164 497.992 cv
35.203 497.984 35.254 497.977 35.309 497.973 cv
35.363 497.973 35.43 497.973 35.516 497.969 cv
35.621 497.973 35.715 497.977 35.789 497.984 cv
35.859 497.992 35.914 498.008 35.961 498.023 cv
36 498.043 36.027 498.062 36.043 498.086 cv
36.051 498.113 36.059 498.137 36.063 498.16 cv
36.063 505.957 li
37.668 505.957 li
37.703 505.961 37.738 505.969 37.77 505.988 cv
37.801 506.012 37.824 506.043 37.848 506.078 cv
37.863 506.117 37.879 506.164 37.895 506.223 cv
37.902 506.285 37.91 506.359 37.914 506.437 cv
cp
f
113.324 506.395 mo
113.32 506.48 113.316 506.555 113.305 506.617 cv
113.293 506.684 113.277 506.738 113.258 506.777 cv
113.234 506.824 113.207 506.855 113.176 506.871 cv
113.141 506.895 113.102 506.902 113.063 506.902 cv
108.16 506.902 li
108.098 506.902 108.039 506.895 107.992 506.879 cv
107.941 506.863 107.902 506.84 107.867 506.801 cv
107.832 506.77 107.805 506.715 107.793 506.645 cv
107.773 506.574 107.766 506.488 107.77 506.387 cv
107.766 506.297 107.77 506.219 107.777 506.148 cv
107.781 506.082 107.797 506.023 107.824 505.969 cv
107.848 505.918 107.879 505.863 107.914 505.809 cv
107.949 505.758 107.992 505.703 108.051 505.641 cv
109.824 503.816 li
110.234 503.398 110.563 503.023 110.813 502.687 cv
111.059 502.359 111.25 502.055 111.383 501.777 cv
111.516 501.504 111.602 501.254 111.648 501.027 cv
111.688 500.805 111.711 500.594 111.711 500.398 cv
111.711 500.203 111.676 500.02 111.609 499.84 cv
111.543 499.668 111.449 499.512 111.324 499.375 cv
111.199 499.246 111.043 499.141 110.855 499.059 cv
110.668 498.984 110.449 498.945 110.203 498.941 cv
109.914 498.945 109.656 498.984 109.43 499.059 cv
109.199 499.141 109 499.227 108.828 499.312 cv
108.656 499.406 108.512 499.488 108.395 499.566 cv
108.277 499.645 108.191 499.684 108.141 499.684 cv
108.105 499.684 108.074 499.676 108.051 499.656 cv
108.02 499.641 108 499.609 107.984 499.566 cv
107.969 499.527 107.953 499.473 107.945 499.402 cv
107.934 499.336 107.93 499.254 107.934 499.156 cv
107.93 499.09 107.934 499.031 107.941 498.98 cv
107.945 498.93 107.953 498.887 107.965 498.848 cv
107.973 498.812 107.988 498.777 108.008 498.746 cv
108.027 498.715 108.063 498.676 108.121 498.625 cv
108.172 498.578 108.266 498.512 108.402 498.43 cv
108.535 498.348 108.707 498.27 108.91 498.187 cv
109.113 498.109 109.336 498.039 109.582 497.984 cv
109.824 497.93 110.082 497.902 110.355 497.902 cv
110.781 497.902 111.156 497.965 111.48 498.086 cv
111.801 498.207 112.066 498.371 112.281 498.582 cv
112.492 498.793 112.652 499.039 112.758 499.312 cv
112.863 499.594 112.918 499.891 112.918 500.203 cv
112.918 500.492 112.891 500.773 112.84 501.051 cv
112.789 501.336 112.684 501.641 112.523 501.965 cv
112.359 502.293 112.125 502.656 111.82 503.055 cv
111.512 503.457 111.105 503.918 110.602 504.434 cv
109.195 505.902 li
113.055 505.902 li
113.086 505.906 113.121 505.918 113.16 505.934 cv
113.191 505.957 113.223 505.988 113.25 506.027 cv
113.273 506.07 113.293 506.121 113.305 506.18 cv
113.316 506.246 113.32 506.316 113.324 506.395 cv
cp
f
189.133 504.379 mo
189.129 504.531 189.105 504.652 189.063 504.738 cv
189.016 504.828 188.953 504.871 188.871 504.867 cv
187.871 504.867 li
187.871 506.73 li
187.871 506.77 187.859 506.801 187.844 506.824 cv
187.82 506.852 187.789 506.871 187.746 506.891 cv
187.695 506.906 187.633 506.918 187.563 506.93 cv
187.484 506.937 187.391 506.941 187.273 506.945 cv
187.156 506.941 187.059 506.937 186.988 506.93 cv
186.91 506.918 186.852 506.906 186.809 506.891 cv
186.762 506.871 186.73 506.852 186.715 506.824 cv
186.695 506.801 186.688 506.77 186.691 506.73 cv
186.691 504.867 li
183.063 504.867 li
183.004 504.871 182.961 504.863 182.926 504.848 cv
182.891 504.836 182.855 504.809 182.828 504.77 cv
182.797 504.734 182.777 504.684 182.766 504.613 cv
182.754 504.547 182.75 504.457 182.75 504.344 cv
182.75 504.262 182.75 504.184 182.758 504.113 cv
182.758 504.043 182.77 503.98 182.785 503.926 cv
182.797 503.871 182.813 503.816 182.84 503.762 cv
182.859 503.707 182.887 503.652 182.922 503.59 cv
186.082 498.203 li
186.102 498.168 186.137 498.137 186.184 498.109 cv
186.227 498.082 186.281 498.059 186.355 498.039 cv
186.422 498.023 186.508 498.012 186.613 498 cv
186.715 497.996 186.836 497.992 186.977 497.988 cv
187.125 497.992 187.262 497.996 187.379 498.008 cv
187.492 498.02 187.582 498.035 187.656 498.051 cv
187.723 498.07 187.777 498.094 187.816 498.125 cv
187.852 498.156 187.871 498.191 187.871 498.23 cv
187.871 503.895 li
188.871 503.895 li
188.945 503.898 189.008 503.937 189.059 504.016 cv
189.105 504.098 189.129 504.219 189.133 504.379 cv
cp
186.691 499.027 mo
186.68 499.027 li
183.828 503.895 li
186.691 503.895 li
cp
f
264.422 504.031 mo
264.422 504.422 264.359 504.801 264.242 505.16 cv
264.117 505.527 263.934 505.844 263.691 506.117 cv
263.441 506.395 263.129 506.617 262.754 506.781 cv
262.371 506.949 261.926 507.031 261.41 507.031 cv
261.039 507.031 260.711 506.988 260.43 506.895 cv
260.145 506.809 259.898 506.676 259.688 506.504 cv
259.477 506.336 259.301 506.129 259.164 505.883 cv
259.023 505.637 258.91 505.355 258.828 505.039 cv
258.742 504.727 258.684 504.383 258.648 504.004 cv
258.609 503.633 258.59 503.23 258.594 502.797 cv
258.59 502.418 258.609 502.035 258.652 501.645 cv
258.691 501.262 258.766 500.887 258.871 500.52 cv
258.977 500.16 259.121 499.82 259.301 499.504 cv
259.48 499.187 259.707 498.91 259.98 498.676 cv
260.254 498.441 260.578 498.254 260.957 498.113 cv
261.336 497.977 261.777 497.91 262.281 497.906 cv
262.449 497.91 262.621 497.918 262.793 497.937 cv
262.965 497.961 263.125 497.992 263.273 498.023 cv
263.422 498.062 263.543 498.098 263.645 498.137 cv
263.742 498.176 263.809 498.211 263.844 498.234 cv
263.871 498.262 263.895 498.289 263.914 498.316 cv
263.93 498.348 263.945 498.379 263.953 498.414 cv
263.961 498.449 263.965 498.488 263.973 498.531 cv
263.973 498.574 263.977 498.629 263.98 498.691 cv
263.977 498.777 263.977 498.848 263.977 498.902 cv
263.973 498.965 263.961 499.012 263.949 499.047 cv
263.93 499.086 263.91 499.113 263.887 499.129 cv
263.859 499.148 263.828 499.156 263.789 499.156 cv
263.738 499.156 263.668 499.141 263.582 499.109 cv
263.492 499.078 263.387 499.043 263.266 499 cv
263.141 498.965 262.992 498.93 262.816 498.895 cv
262.641 498.867 262.438 498.852 262.207 498.848 cv
261.777 498.852 261.41 498.937 261.105 499.109 cv
260.801 499.281 260.551 499.516 260.355 499.809 cv
260.16 500.102 260.016 500.441 259.926 500.824 cv
259.828 501.215 259.773 501.617 259.766 502.035 cv
259.883 501.969 260.02 501.902 260.168 501.832 cv
260.316 501.766 260.477 501.703 260.652 501.645 cv
260.828 501.594 261.016 501.547 261.211 501.512 cv
261.406 501.48 261.617 501.465 261.844 501.461 cv
262.32 501.465 262.723 501.531 263.055 501.656 cv
263.383 501.789 263.648 501.969 263.855 502.199 cv
264.055 502.43 264.199 502.699 264.289 503.012 cv
264.375 503.324 264.422 503.664 264.422 504.031 cv
cp
263.227 504.141 mo
263.227 503.879 263.199 503.637 263.148 503.418 cv
263.094 503.203 263.004 503.02 262.883 502.863 cv
262.758 502.715 262.594 502.598 262.391 502.516 cv
262.18 502.434 261.926 502.391 261.629 502.391 cv
261.457 502.391 261.289 502.406 261.121 502.437 cv
260.949 502.469 260.785 502.512 260.629 502.559 cv
260.469 502.613 260.32 502.676 260.18 502.746 cv
260.035 502.82 259.902 502.895 259.785 502.973 cv
259.781 503.566 259.82 504.062 259.898 504.457 cv
259.973 504.855 260.082 505.172 260.227 505.41 cv
260.371 505.652 260.551 505.824 260.766 505.926 cv
260.98 506.031 261.23 506.082 261.52 506.078 cv
261.809 506.082 262.063 506.027 262.277 505.914 cv
262.492 505.809 262.668 505.66 262.813 505.473 cv
262.953 505.289 263.059 505.082 263.125 504.852 cv
263.191 504.621 263.227 504.387 263.227 504.141 cv
cp
f
339.828 504.625 mo
339.828 505.012 339.758 505.355 339.621 505.652 cv
339.484 505.957 339.289 506.207 339.031 506.41 cv
338.773 506.617 338.453 506.773 338.074 506.875 cv
337.691 506.98 337.258 507.031 336.773 507.031 cv
336.313 507.031 335.902 506.984 335.543 506.891 cv
335.18 506.797 334.875 506.656 334.625 506.465 cv
334.375 506.281 334.184 506.051 334.051 505.773 cv
333.918 505.5 333.852 505.187 333.852 504.832 cv
333.852 504.559 333.895 504.301 333.988 504.066 cv
334.074 503.832 334.207 503.617 334.383 503.422 cv
334.551 503.227 334.762 503.043 335.016 502.867 cv
335.266 502.699 335.551 502.535 335.867 502.379 cv
335.594 502.238 335.352 502.09 335.141 501.93 cv
334.93 501.773 334.75 501.602 334.605 501.414 cv
334.457 501.23 334.348 501.035 334.273 500.824 cv
334.195 500.617 334.156 500.387 334.16 500.137 cv
334.156 499.828 334.211 499.535 334.328 499.262 cv
334.438 498.992 334.609 498.758 334.836 498.555 cv
335.063 498.355 335.348 498.195 335.699 498.078 cv
336.043 497.961 336.453 497.902 336.922 497.902 cv
337.367 497.902 337.754 497.957 338.082 498.062 cv
338.41 498.172 338.68 498.316 338.891 498.5 cv
339.102 498.687 339.258 498.906 339.363 499.156 cv
339.461 499.406 339.512 499.676 339.516 499.965 cv
339.512 500.199 339.473 500.426 339.402 500.637 cv
339.324 500.855 339.215 501.059 339.066 501.246 cv
338.918 501.441 338.738 501.621 338.527 501.785 cv
338.316 501.957 338.074 502.113 337.801 502.254 cv
338.121 502.418 338.406 502.582 338.664 502.75 cv
338.914 502.918 339.129 503.098 339.305 503.293 cv
339.473 503.488 339.602 503.695 339.695 503.91 cv
339.781 504.129 339.828 504.367 339.828 504.625 cv
cp
338.348 500.074 mo
338.344 499.887 338.313 499.711 338.246 499.555 cv
338.18 499.398 338.082 499.266 337.957 499.156 cv
337.828 499.047 337.668 498.965 337.48 498.906 cv
337.285 498.852 337.07 498.824 336.832 498.82 cv
336.336 498.824 335.961 498.934 335.711 499.156 cv
335.453 499.383 335.328 499.691 335.332 500.074 cv
335.328 500.254 335.359 500.418 335.422 500.57 cv
335.484 500.727 335.578 500.871 335.711 501.008 cv
335.836 501.145 336 501.277 336.203 501.406 cv
336.398 501.539 336.637 501.676 336.914 501.816 cv
337.375 501.582 337.73 501.32 337.977 501.027 cv
338.223 500.742 338.344 500.426 338.348 500.074 cv
cp
338.637 504.75 mo
338.633 504.543 338.594 504.352 338.52 504.18 cv
338.438 504.012 338.32 503.852 338.164 503.699 cv
338.008 503.551 337.809 503.406 337.574 503.266 cv
337.336 503.129 337.066 502.984 336.758 502.832 cv
336.469 502.977 336.215 503.117 336 503.258 cv
335.781 503.398 335.602 503.547 335.465 503.695 cv
335.324 503.852 335.219 504.008 335.148 504.172 cv
335.074 504.34 335.039 504.523 335.043 504.723 cv
335.039 505.168 335.191 505.512 335.5 505.75 cv
335.801 505.996 336.254 506.117 336.859 506.113 cv
337.441 506.117 337.887 505.996 338.188 505.746 cv
338.484 505.504 338.633 505.172 338.637 504.75 cv
cp
f
411.527 506.437 mo
411.523 506.527 411.516 506.598 411.504 506.656 cv
411.488 506.719 411.469 506.77 411.449 506.801 cv
411.426 506.84 411.402 506.863 411.371 506.879 cv
411.34 506.895 411.309 506.902 411.281 506.902 cv
406.645 506.902 li
406.609 506.902 406.582 506.895 406.555 506.879 cv
406.527 506.863 406.5 506.84 406.477 506.801 cv
406.449 506.77 406.43 506.719 406.418 506.656 cv
406.402 506.598 406.395 506.527 406.398 506.437 cv
406.395 506.359 406.402 506.285 406.418 506.223 cv
406.43 506.164 406.445 506.117 406.469 506.078 cv
406.484 506.043 406.512 506.012 406.543 505.988 cv
406.574 505.969 406.605 505.961 406.645 505.957 cv
408.496 505.957 li
408.496 499.211 li
406.781 500.23 li
406.691 500.281 406.621 500.309 406.574 500.316 cv
406.52 500.324 406.477 500.316 406.445 500.285 cv
406.41 500.258 406.391 500.207 406.379 500.137 cv
406.367 500.07 406.359 499.984 406.363 499.875 cv
406.359 499.801 406.363 499.734 406.375 499.676 cv
406.379 499.625 406.391 499.578 406.406 499.539 cv
406.418 499.504 406.438 499.473 406.461 499.445 cv
406.484 499.418 406.516 499.391 406.563 499.363 cv
408.605 498.051 li
408.621 498.039 408.641 498.027 408.672 498.02 cv
408.695 498.012 408.73 498.004 408.777 497.992 cv
408.816 497.984 408.867 497.977 408.922 497.973 cv
408.977 497.973 409.043 497.973 409.129 497.969 cv
409.234 497.973 409.328 497.977 409.402 497.984 cv
409.473 497.992 409.527 498.008 409.574 498.023 cv
409.613 498.043 409.641 498.062 409.656 498.086 cv
409.664 498.113 409.672 498.137 409.676 498.16 cv
409.676 505.957 li
411.281 505.957 li
411.316 505.961 411.352 505.969 411.383 505.988 cv
411.414 506.012 411.438 506.043 411.461 506.078 cv
411.477 506.117 411.492 506.164 411.508 506.223 cv
411.516 506.285 411.523 506.359 411.527 506.437 cv
cp
f
418.879 502.445 mo
418.875 503.129 418.824 503.75 418.719 504.312 cv
418.609 504.875 418.43 505.359 418.184 505.762 cv
417.93 506.168 417.602 506.48 417.203 506.699 cv
416.797 506.922 416.305 507.031 415.719 507.031 cv
415.16 507.031 414.688 506.934 414.309 506.734 cv
413.926 506.539 413.621 506.246 413.387 505.859 cv
413.152 505.473 412.984 505 412.891 504.434 cv
412.789 503.871 412.742 503.223 412.742 502.488 cv
412.742 501.816 412.797 501.195 412.906 500.629 cv
413.016 500.066 413.191 499.582 413.441 499.176 cv
413.684 498.773 414.008 498.461 414.414 498.234 cv
414.813 498.016 415.309 497.902 415.898 497.902 cv
416.457 497.902 416.93 498.004 417.313 498.199 cv
417.695 498.402 418 498.695 418.234 499.078 cv
418.465 499.469 418.633 499.941 418.73 500.504 cv
418.828 501.066 418.875 501.715 418.879 502.445 cv
cp
417.672 502.527 mo
417.668 502.086 417.652 501.687 417.625 501.336 cv
417.59 500.984 417.543 500.676 417.484 500.406 cv
417.418 500.137 417.34 499.906 417.242 499.711 cv
417.145 499.52 417.027 499.359 416.891 499.23 cv
416.75 499.105 416.59 499.012 416.418 498.953 cv
416.238 498.898 416.043 498.871 415.828 498.867 cv
415.438 498.871 415.121 498.961 414.883 499.145 cv
414.637 499.328 414.445 499.582 414.309 499.898 cv
414.168 500.219 414.074 500.59 414.023 501.02 cv
413.973 501.449 413.949 501.914 413.949 502.406 cv
413.949 503.07 413.98 503.633 414.051 504.094 cv
414.117 504.562 414.227 504.941 414.379 505.23 cv
414.523 505.527 414.715 505.738 414.945 505.867 cv
415.176 506.004 415.457 506.07 415.789 506.066 cv
416.043 506.07 416.266 506.031 416.461 505.945 cv
416.652 505.867 416.82 505.746 416.961 505.59 cv
417.102 505.437 417.215 505.254 417.309 505.039 cv
417.395 504.824 417.469 504.586 417.527 504.324 cv
417.578 504.066 417.617 503.785 417.641 503.48 cv
417.66 503.176 417.668 502.859 417.672 502.527 cv
cp
f
486.934 506.437 mo
486.93 506.527 486.922 506.598 486.91 506.656 cv
486.895 506.719 486.875 506.77 486.855 506.801 cv
486.832 506.84 486.809 506.863 486.777 506.879 cv
486.746 506.895 486.715 506.902 486.688 506.902 cv
482.051 506.902 li
482.016 506.902 481.988 506.895 481.961 506.879 cv
481.934 506.863 481.906 506.84 481.883 506.801 cv
481.855 506.77 481.836 506.719 481.824 506.656 cv
481.809 506.598 481.801 506.527 481.805 506.437 cv
481.801 506.359 481.809 506.285 481.824 506.223 cv
481.836 506.164 481.852 506.117 481.875 506.078 cv
481.891 506.043 481.918 506.012 481.949 505.988 cv
481.98 505.969 482.012 505.961 482.051 505.957 cv
483.902 505.957 li
483.902 499.211 li
482.188 500.23 li
482.098 500.281 482.027 500.309 481.98 500.316 cv
481.926 500.324 481.883 500.316 481.852 500.285 cv
481.816 500.258 481.797 500.207 481.785 500.137 cv
481.773 500.07 481.766 499.984 481.77 499.875 cv
481.766 499.801 481.77 499.734 481.781 499.676 cv
481.785 499.625 481.797 499.578 481.813 499.539 cv
481.824 499.504 481.844 499.473 481.867 499.445 cv
481.891 499.418 481.922 499.391 481.969 499.363 cv
484.012 498.051 li
484.027 498.039 484.047 498.027 484.078 498.02 cv
484.102 498.012 484.137 498.004 484.184 497.992 cv
484.223 497.984 484.273 497.977 484.328 497.973 cv
484.383 497.973 484.449 497.973 484.535 497.969 cv
484.641 497.973 484.734 497.977 484.809 497.984 cv
484.879 497.992 484.934 498.008 484.98 498.023 cv
485.02 498.043 485.047 498.062 485.063 498.086 cv
485.07 498.113 485.078 498.137 485.082 498.16 cv
485.082 505.957 li
486.688 505.957 li
486.723 505.961 486.758 505.969 486.789 505.988 cv
486.82 506.012 486.844 506.043 486.867 506.078 cv
486.883 506.117 486.898 506.164 486.914 506.223 cv
486.922 506.285 486.93 506.359 486.934 506.437 cv
cp
f
493.996 506.395 mo
493.992 506.48 493.988 506.555 493.977 506.617 cv
493.965 506.684 493.949 506.738 493.93 506.777 cv
493.906 506.824 493.879 506.855 493.848 506.871 cv
493.813 506.895 493.773 506.902 493.734 506.902 cv
488.832 506.902 li
488.77 506.902 488.711 506.895 488.664 506.879 cv
488.613 506.863 488.574 506.84 488.539 506.801 cv
488.504 506.77 488.477 506.715 488.465 506.645 cv
488.445 506.574 488.438 506.488 488.441 506.387 cv
488.438 506.297 488.441 506.219 488.449 506.148 cv
488.453 506.082 488.469 506.023 488.496 505.969 cv
488.52 505.918 488.551 505.863 488.586 505.809 cv
488.621 505.758 488.664 505.703 488.723 505.641 cv
490.496 503.816 li
490.906 503.398 491.234 503.023 491.484 502.687 cv
491.73 502.359 491.922 502.055 492.055 501.777 cv
492.188 501.504 492.273 501.254 492.32 501.027 cv
492.359 500.805 492.383 500.594 492.383 500.398 cv
492.383 500.203 492.348 500.02 492.281 499.84 cv
492.215 499.668 492.121 499.512 491.996 499.375 cv
491.871 499.246 491.715 499.141 491.527 499.059 cv
491.34 498.984 491.121 498.945 490.875 498.941 cv
490.586 498.945 490.328 498.984 490.102 499.059 cv
489.871 499.141 489.672 499.227 489.5 499.312 cv
489.328 499.406 489.184 499.488 489.066 499.566 cv
488.949 499.645 488.863 499.684 488.813 499.684 cv
488.777 499.684 488.746 499.676 488.723 499.656 cv
488.691 499.641 488.672 499.609 488.656 499.566 cv
488.641 499.527 488.625 499.473 488.617 499.402 cv
488.605 499.336 488.602 499.254 488.605 499.156 cv
488.602 499.09 488.605 499.031 488.613 498.98 cv
488.617 498.93 488.625 498.887 488.637 498.848 cv
488.645 498.812 488.66 498.777 488.68 498.746 cv
488.699 498.715 488.734 498.676 488.793 498.625 cv
488.844 498.578 488.938 498.512 489.074 498.43 cv
489.207 498.348 489.379 498.27 489.582 498.187 cv
489.785 498.109 490.008 498.039 490.254 497.984 cv
490.496 497.93 490.754 497.902 491.027 497.902 cv
491.453 497.902 491.828 497.965 492.152 498.086 cv
492.473 498.207 492.738 498.371 492.953 498.582 cv
493.164 498.793 493.324 499.039 493.43 499.312 cv
493.535 499.594 493.59 499.891 493.59 500.203 cv
493.59 500.492 493.563 500.773 493.512 501.051 cv
493.461 501.336 493.355 501.641 493.195 501.965 cv
493.031 502.293 492.797 502.656 492.492 503.055 cv
492.184 503.457 491.777 503.918 491.273 504.434 cv
489.867 505.902 li
493.727 505.902 li
493.758 505.906 493.793 505.918 493.832 505.934 cv
493.863 505.957 493.895 505.988 493.922 506.027 cv
493.945 506.07 493.965 506.121 493.977 506.18 cv
493.988 506.246 493.992 506.316 493.996 506.395 cv
cp
f
562.367 506.437 mo
562.363 506.527 562.355 506.598 562.344 506.656 cv
562.328 506.719 562.309 506.77 562.289 506.801 cv
562.266 506.84 562.242 506.863 562.211 506.879 cv
562.18 506.895 562.148 506.902 562.121 506.902 cv
557.484 506.902 li
557.449 506.902 557.422 506.895 557.395 506.879 cv
557.367 506.863 557.34 506.84 557.316 506.801 cv
557.289 506.77 557.27 506.719 557.258 506.656 cv
557.242 506.598 557.234 506.527 557.238 506.437 cv
557.234 506.359 557.242 506.285 557.258 506.223 cv
557.27 506.164 557.285 506.117 557.309 506.078 cv
557.324 506.043 557.352 506.012 557.383 505.988 cv
557.414 505.969 557.445 505.961 557.484 505.957 cv
559.336 505.957 li
559.336 499.211 li
557.621 500.23 li
557.531 500.281 557.461 500.309 557.414 500.316 cv
557.359 500.324 557.316 500.316 557.285 500.285 cv
557.25 500.258 557.23 500.207 557.219 500.137 cv
557.207 500.07 557.199 499.984 557.203 499.875 cv
557.199 499.801 557.203 499.734 557.215 499.676 cv
557.219 499.625 557.23 499.578 557.246 499.539 cv
557.258 499.504 557.277 499.473 557.301 499.445 cv
557.324 499.418 557.355 499.391 557.402 499.363 cv
559.445 498.051 li
559.461 498.039 559.48 498.027 559.512 498.02 cv
559.535 498.012 559.57 498.004 559.617 497.992 cv
559.656 497.984 559.707 497.977 559.762 497.973 cv
559.816 497.973 559.883 497.973 559.969 497.969 cv
560.074 497.973 560.168 497.977 560.242 497.984 cv
560.313 497.992 560.367 498.008 560.414 498.023 cv
560.453 498.043 560.48 498.062 560.496 498.086 cv
560.504 498.113 560.512 498.137 560.516 498.16 cv
560.516 505.957 li
562.121 505.957 li
562.156 505.961 562.191 505.969 562.223 505.988 cv
562.254 506.012 562.277 506.043 562.301 506.078 cv
562.316 506.117 562.332 506.164 562.348 506.223 cv
562.355 506.285 562.363 506.359 562.367 506.437 cv
cp
f
569.801 504.379 mo
569.797 504.531 569.773 504.652 569.73 504.738 cv
569.684 504.828 569.621 504.871 569.539 504.867 cv
568.539 504.867 li
568.539 506.73 li
568.539 506.77 568.527 506.801 568.512 506.824 cv
568.488 506.852 568.457 506.871 568.414 506.891 cv
568.363 506.906 568.301 506.918 568.23 506.93 cv
568.152 506.937 568.059 506.941 567.941 506.945 cv
567.824 506.941 567.727 506.937 567.656 506.93 cv
567.578 506.918 567.52 506.906 567.477 506.891 cv
567.43 506.871 567.398 506.852 567.383 506.824 cv
567.363 506.801 567.355 506.77 567.359 506.73 cv
567.359 504.867 li
563.73 504.867 li
563.672 504.871 563.629 504.863 563.594 504.848 cv
563.559 504.836 563.523 504.809 563.496 504.77 cv
563.465 504.734 563.445 504.684 563.434 504.613 cv
563.422 504.547 563.418 504.457 563.418 504.344 cv
563.418 504.262 563.418 504.184 563.426 504.113 cv
563.426 504.043 563.438 503.98 563.453 503.926 cv
563.465 503.871 563.48 503.816 563.508 503.762 cv
563.527 503.707 563.555 503.652 563.59 503.59 cv
566.75 498.203 li
566.77 498.168 566.805 498.137 566.852 498.109 cv
566.895 498.082 566.949 498.059 567.023 498.039 cv
567.09 498.023 567.176 498.012 567.281 498 cv
567.383 497.996 567.504 497.992 567.645 497.988 cv
567.793 497.992 567.93 497.996 568.047 498.008 cv
568.16 498.02 568.25 498.035 568.324 498.051 cv
568.391 498.07 568.445 498.094 568.484 498.125 cv
568.52 498.156 568.539 498.191 568.539 498.23 cv
568.539 503.895 li
569.539 503.895 li
569.613 503.898 569.676 503.937 569.727 504.016 cv
569.773 504.098 569.797 504.219 569.801 504.379 cv
cp
567.359 499.027 mo
567.348 499.027 li
564.496 503.895 li
567.359 503.895 li
cp
f
637.797 506.437 mo
637.793 506.527 637.785 506.598 637.773 506.656 cv
637.758 506.719 637.738 506.77 637.719 506.801 cv
637.695 506.84 637.672 506.863 637.641 506.879 cv
637.609 506.895 637.578 506.902 637.551 506.902 cv
632.914 506.902 li
632.879 506.902 632.852 506.895 632.824 506.879 cv
632.797 506.863 632.77 506.84 632.746 506.801 cv
632.719 506.77 632.699 506.719 632.688 506.656 cv
632.672 506.598 632.664 506.527 632.668 506.437 cv
632.664 506.359 632.672 506.285 632.688 506.223 cv
632.699 506.164 632.715 506.117 632.738 506.078 cv
632.754 506.043 632.781 506.012 632.813 505.988 cv
632.844 505.969 632.875 505.961 632.914 505.957 cv
634.766 505.957 li
634.766 499.211 li
633.051 500.23 li
632.961 500.281 632.891 500.309 632.844 500.316 cv
632.789 500.324 632.746 500.316 632.715 500.285 cv
632.68 500.258 632.66 500.207 632.648 500.137 cv
632.637 500.07 632.629 499.984 632.633 499.875 cv
632.629 499.801 632.633 499.734 632.645 499.676 cv
632.648 499.625 632.66 499.578 632.676 499.539 cv
632.688 499.504 632.707 499.473 632.73 499.445 cv
632.754 499.418 632.785 499.391 632.832 499.363 cv
634.875 498.051 li
634.891 498.039 634.91 498.027 634.941 498.02 cv
634.965 498.012 635 498.004 635.047 497.992 cv
635.086 497.984 635.137 497.977 635.191 497.973 cv
635.246 497.973 635.313 497.973 635.398 497.969 cv
635.504 497.973 635.598 497.977 635.672 497.984 cv
635.742 497.992 635.797 498.008 635.844 498.023 cv
635.883 498.043 635.91 498.062 635.926 498.086 cv
635.934 498.113 635.941 498.137 635.945 498.16 cv
635.945 505.957 li
637.551 505.957 li
637.586 505.961 637.621 505.969 637.652 505.988 cv
637.684 506.012 637.707 506.043 637.73 506.078 cv
637.746 506.117 637.762 506.164 637.777 506.223 cv
637.785 506.285 637.793 506.359 637.797 506.437 cv
cp
f
645.082 504.031 mo
645.082 504.422 645.02 504.801 644.902 505.16 cv
644.777 505.527 644.594 505.844 644.352 506.117 cv
644.102 506.395 643.789 506.617 643.414 506.781 cv
643.031 506.949 642.586 507.031 642.07 507.031 cv
641.699 507.031 641.371 506.988 641.09 506.895 cv
640.805 506.809 640.559 506.676 640.348 506.504 cv
640.137 506.336 639.961 506.129 639.824 505.883 cv
639.684 505.637 639.57 505.355 639.488 505.039 cv
639.402 504.727 639.344 504.383 639.309 504.004 cv
639.27 503.633 639.25 503.23 639.254 502.797 cv
639.25 502.418 639.27 502.035 639.313 501.645 cv
639.352 501.262 639.426 500.887 639.531 500.52 cv
639.637 500.16 639.781 499.82 639.961 499.504 cv
640.141 499.187 640.367 498.91 640.641 498.676 cv
640.914 498.441 641.238 498.254 641.617 498.113 cv
641.996 497.977 642.438 497.91 642.941 497.906 cv
643.109 497.91 643.281 497.918 643.453 497.937 cv
643.625 497.961 643.785 497.992 643.934 498.023 cv
644.082 498.062 644.203 498.098 644.305 498.137 cv
644.402 498.176 644.469 498.211 644.504 498.234 cv
644.531 498.262 644.555 498.289 644.574 498.316 cv
644.59 498.348 644.605 498.379 644.613 498.414 cv
644.621 498.449 644.625 498.488 644.633 498.531 cv
644.633 498.574 644.637 498.629 644.641 498.691 cv
644.637 498.777 644.637 498.848 644.637 498.902 cv
644.633 498.965 644.621 499.012 644.609 499.047 cv
644.59 499.086 644.57 499.113 644.547 499.129 cv
644.52 499.148 644.488 499.156 644.449 499.156 cv
644.398 499.156 644.328 499.141 644.242 499.109 cv
644.152 499.078 644.047 499.043 643.926 499 cv
643.801 498.965 643.652 498.93 643.477 498.895 cv
643.301 498.867 643.098 498.852 642.867 498.848 cv
642.438 498.852 642.07 498.937 641.766 499.109 cv
641.461 499.281 641.211 499.516 641.016 499.809 cv
640.82 500.102 640.676 500.441 640.586 500.824 cv
640.488 501.215 640.434 501.617 640.426 502.035 cv
640.543 501.969 640.68 501.902 640.828 501.832 cv
640.977 501.766 641.137 501.703 641.313 501.645 cv
641.488 501.594 641.676 501.547 641.871 501.512 cv
642.066 501.48 642.277 501.465 642.504 501.461 cv
642.98 501.465 643.383 501.531 643.715 501.656 cv
644.043 501.789 644.309 501.969 644.516 502.199 cv
644.715 502.43 644.859 502.699 644.949 503.012 cv
645.035 503.324 645.082 503.664 645.082 504.031 cv
cp
643.887 504.141 mo
643.887 503.879 643.859 503.637 643.809 503.418 cv
643.754 503.203 643.664 503.02 643.543 502.863 cv
643.418 502.715 643.254 502.598 643.051 502.516 cv
642.84 502.434 642.586 502.391 642.289 502.391 cv
642.117 502.391 641.949 502.406 641.781 502.437 cv
641.609 502.469 641.445 502.512 641.289 502.559 cv
641.129 502.613 640.98 502.676 640.84 502.746 cv
640.695 502.82 640.563 502.895 640.445 502.973 cv
640.441 503.566 640.48 504.062 640.559 504.457 cv
640.633 504.855 640.742 505.172 640.887 505.41 cv
641.031 505.652 641.211 505.824 641.426 505.926 cv
641.641 506.031 641.891 506.082 642.18 506.078 cv
642.469 506.082 642.723 506.027 642.938 505.914 cv
643.152 505.809 643.328 505.66 643.473 505.473 cv
643.613 505.289 643.719 505.082 643.785 504.852 cv
643.852 504.621 643.887 504.387 643.887 504.141 cv
cp
f
277.02 528.91 mo
277.016 529.016 277 529.105 276.965 529.176 cv
276.93 529.254 276.883 529.312 276.828 529.355 cv
276.77 529.406 276.707 529.441 276.641 529.457 cv
276.566 529.48 276.496 529.488 276.434 529.488 cv
275.988 529.488 li
275.848 529.488 275.727 529.477 275.621 529.445 cv
275.516 529.422 275.418 529.367 275.324 529.289 cv
275.23 529.215 275.137 529.113 275.043 528.98 cv
274.949 528.852 274.848 528.687 274.742 528.484 cv
271.668 522.746 li
271.504 522.453 271.34 522.145 271.18 521.816 cv
271.012 521.496 270.859 521.18 270.723 520.871 cv
270.707 520.871 li
270.715 521.246 270.723 521.629 270.73 522.016 cv
270.734 522.406 270.734 522.793 270.738 523.176 cv
270.738 529.262 li
270.734 529.301 270.723 529.336 270.703 529.367 cv
270.68 529.402 270.645 529.43 270.594 529.445 cv
270.539 529.465 270.469 529.477 270.387 529.492 cv
270.301 529.504 270.195 529.512 270.066 529.512 cv
269.93 529.512 269.82 529.504 269.738 529.492 cv
269.652 529.477 269.586 529.465 269.539 529.445 cv
269.488 529.43 269.453 529.402 269.43 529.367 cv
269.406 529.336 269.395 529.301 269.398 529.262 cv
269.398 519.957 li
269.395 519.75 269.453 519.602 269.574 519.512 cv
269.691 519.426 269.82 519.383 269.961 519.379 cv
270.621 519.379 li
270.773 519.383 270.906 519.395 271.012 519.418 cv
271.113 519.445 271.207 519.488 271.293 519.547 cv
271.375 519.609 271.453 519.691 271.535 519.797 cv
271.609 519.906 271.691 520.043 271.777 520.199 cv
274.145 524.625 li
274.289 524.898 274.43 525.164 274.566 525.418 cv
274.699 525.676 274.828 525.93 274.957 526.176 cv
275.078 526.43 275.203 526.676 275.328 526.914 cv
275.449 527.156 275.57 527.398 275.695 527.641 cv
275.703 527.641 li
275.691 527.234 275.684 526.805 275.684 526.359 cv
275.676 525.914 275.676 525.488 275.68 525.078 cv
275.68 519.605 li
275.676 519.57 275.688 519.535 275.711 519.504 cv
275.734 519.473 275.77 519.445 275.824 519.422 cv
275.871 519.398 275.941 519.383 276.027 519.371 cv
276.113 519.363 276.223 519.359 276.363 519.355 cv
276.48 519.359 276.586 519.363 276.676 519.371 cv
276.762 519.383 276.828 519.398 276.879 519.422 cv
276.926 519.445 276.961 519.473 276.984 519.504 cv
277.004 519.535 277.016 519.57 277.02 519.605 cv
cp
f
285.57 529.27 mo
285.566 529.316 285.559 529.352 285.543 529.375 cv
285.523 529.406 285.488 529.43 285.445 529.449 cv
285.398 529.469 285.34 529.48 285.266 529.496 cv
285.188 529.504 285.094 529.512 284.988 529.512 cv
284.863 529.512 284.766 529.504 284.695 529.496 cv
284.617 529.48 284.559 529.469 284.516 529.449 cv
284.469 529.43 284.438 529.406 284.426 529.375 cv
284.406 529.352 284.398 529.316 284.402 529.27 cv
284.402 528.344 li
284 528.789 283.605 529.109 283.219 529.309 cv
282.824 529.512 282.43 529.609 282.035 529.613 cv
281.563 529.609 281.168 529.535 280.852 529.379 cv
280.531 529.227 280.273 529.016 280.078 528.746 cv
279.875 528.48 279.734 528.168 279.652 527.809 cv
279.563 527.453 279.52 527.02 279.523 526.512 cv
279.523 522.258 li
279.52 522.219 279.527 522.184 279.551 522.152 cv
279.566 522.125 279.602 522.102 279.656 522.074 cv
279.703 522.055 279.773 522.039 279.859 522.027 cv
279.941 522.023 280.043 522.02 280.172 522.016 cv
280.293 522.02 280.398 522.023 280.484 522.027 cv
280.566 522.039 280.633 522.055 280.68 522.074 cv
280.727 522.102 280.762 522.125 280.785 522.152 cv
280.805 522.184 280.813 522.219 280.816 522.258 cv
280.816 526.34 li
280.813 526.754 280.844 527.082 280.906 527.328 cv
280.965 527.574 281.055 527.785 281.18 527.957 cv
281.297 528.137 281.453 528.27 281.645 528.363 cv
281.828 528.461 282.047 528.512 282.297 528.508 cv
282.617 528.512 282.938 528.395 283.262 528.164 cv
283.578 527.937 283.918 527.602 284.277 527.156 cv
284.277 522.258 li
284.277 522.219 284.285 522.184 284.305 522.152 cv
284.32 522.125 284.355 522.102 284.41 522.074 cv
284.461 522.055 284.527 522.039 284.609 522.027 cv
284.688 522.023 284.793 522.02 284.926 522.016 cv
285.047 522.02 285.152 522.023 285.238 522.027 cv
285.32 522.039 285.383 522.055 285.43 522.074 cv
285.473 522.102 285.508 522.125 285.535 522.152 cv
285.555 522.184 285.566 522.219 285.57 522.258 cv
cp
f
298.348 529.27 mo
298.344 529.316 298.336 529.352 298.316 529.375 cv
298.293 529.406 298.258 529.43 298.215 529.449 cv
298.164 529.469 298.098 529.48 298.02 529.496 cv
297.934 529.504 297.832 529.512 297.707 529.512 cv
297.574 529.512 297.465 529.504 297.387 529.496 cv
297.301 529.48 297.234 529.469 297.188 529.449 cv
297.133 529.43 297.098 529.406 297.082 529.375 cv
297.059 529.352 297.051 529.316 297.051 529.27 cv
297.051 525.008 li
297.051 524.715 297.023 524.445 296.973 524.199 cv
296.918 523.957 296.836 523.746 296.723 523.566 cv
296.609 523.391 296.465 523.254 296.289 523.16 cv
296.109 523.066 295.898 523.02 295.664 523.02 cv
295.367 523.02 295.07 523.137 294.773 523.363 cv
294.469 523.598 294.141 523.93 293.785 524.367 cv
293.785 529.27 li
293.781 529.316 293.77 529.352 293.754 529.375 cv
293.73 529.406 293.699 529.43 293.652 529.449 cv
293.602 529.469 293.535 529.48 293.453 529.496 cv
293.367 529.504 293.262 529.512 293.141 529.512 cv
293.02 529.512 292.918 529.504 292.832 529.496 cv
292.746 529.48 292.676 529.469 292.629 529.449 cv
292.574 529.43 292.543 529.406 292.527 529.375 cv
292.508 529.352 292.496 529.316 292.5 529.27 cv
292.5 525.008 li
292.496 524.715 292.469 524.445 292.414 524.199 cv
292.355 523.957 292.27 523.746 292.156 523.566 cv
292.043 523.391 291.898 523.254 291.727 523.16 cv
291.547 523.066 291.34 523.02 291.105 523.02 cv
290.805 523.02 290.508 523.137 290.207 523.363 cv
289.906 523.598 289.578 523.93 289.227 524.367 cv
289.227 529.27 li
289.223 529.316 289.211 529.352 289.195 529.375 cv
289.172 529.406 289.141 529.43 289.094 529.449 cv
289.047 529.469 288.98 529.48 288.902 529.496 cv
288.816 529.504 288.711 529.512 288.582 529.512 cv
288.453 529.512 288.348 529.504 288.27 529.496 cv
288.184 529.48 288.117 529.469 288.07 529.449 cv
288.016 529.43 287.984 529.406 287.969 529.375 cv
287.949 529.352 287.938 529.316 287.941 529.27 cv
287.941 522.258 li
287.938 522.219 287.945 522.184 287.965 522.152 cv
287.977 522.125 288.008 522.102 288.059 522.074 cv
288.102 522.055 288.164 522.039 288.238 522.027 cv
288.309 522.023 288.402 522.02 288.527 522.016 cv
288.637 522.02 288.734 522.023 288.813 522.027 cv
288.887 522.039 288.945 522.055 288.988 522.074 cv
289.027 522.102 289.055 522.125 289.074 522.152 cv
289.09 522.184 289.098 522.219 289.102 522.258 cv
289.102 523.184 li
289.492 522.742 289.875 522.422 290.25 522.215 cv
290.617 522.012 290.996 521.906 291.379 521.906 cv
291.668 521.906 291.926 521.941 292.16 522.008 cv
292.387 522.078 292.594 522.172 292.773 522.293 cv
292.949 522.414 293.098 522.559 293.227 522.727 cv
293.348 522.898 293.453 523.09 293.539 523.293 cv
293.77 523.043 293.992 522.828 294.203 522.648 cv
294.414 522.477 294.617 522.332 294.813 522.219 cv
295.008 522.113 295.195 522.035 295.379 521.98 cv
295.563 521.934 295.75 521.906 295.938 521.906 cv
296.391 521.906 296.77 521.988 297.074 522.145 cv
297.379 522.309 297.625 522.52 297.82 522.781 cv
298.008 523.047 298.145 523.355 298.227 523.711 cv
298.305 524.066 298.344 524.441 298.348 524.836 cv
cp
f
307.145 525.668 mo
307.141 526.277 307.074 526.828 306.945 527.312 cv
306.809 527.801 306.613 528.215 306.359 528.555 cv
306.102 528.898 305.785 529.16 305.414 529.34 cv
305.039 529.523 304.613 529.609 304.129 529.613 cv
303.902 529.609 303.695 529.59 303.508 529.547 cv
303.32 529.5 303.133 529.43 302.953 529.332 cv
302.766 529.234 302.586 529.109 302.406 528.957 cv
302.223 528.809 302.031 528.629 301.832 528.414 cv
301.832 529.27 li
301.832 529.316 301.82 529.352 301.801 529.379 cv
301.777 529.414 301.742 529.437 301.699 529.453 cv
301.648 529.469 301.59 529.48 301.523 529.496 cv
301.449 529.504 301.359 529.512 301.254 529.512 cv
301.145 529.512 301.059 529.504 300.988 529.496 cv
300.914 529.48 300.852 529.469 300.809 529.453 cv
300.758 529.437 300.727 529.414 300.715 529.379 cv
300.695 529.352 300.688 529.316 300.691 529.27 cv
300.691 518.859 li
300.688 518.82 300.699 518.785 300.719 518.75 cv
300.734 518.723 300.766 518.695 300.82 518.672 cv
300.867 518.652 300.934 518.637 301.02 518.625 cv
301.098 518.617 301.203 518.613 301.332 518.609 cv
301.461 518.613 301.566 518.617 301.652 518.625 cv
301.73 518.637 301.797 518.652 301.844 518.672 cv
301.891 518.695 301.922 518.723 301.945 518.75 cv
301.961 518.785 301.973 518.82 301.977 518.859 cv
301.977 523.059 li
302.184 522.848 302.387 522.668 302.582 522.523 cv
302.777 522.379 302.965 522.262 303.152 522.168 cv
303.336 522.082 303.523 522.016 303.715 521.969 cv
303.898 521.93 304.098 521.906 304.309 521.906 cv
304.813 521.906 305.246 522.008 305.613 522.211 cv
305.973 522.414 306.266 522.687 306.492 523.023 cv
306.715 523.367 306.883 523.766 306.988 524.223 cv
307.09 524.68 307.141 525.16 307.145 525.668 cv
cp
305.813 525.816 mo
305.809 525.461 305.781 525.113 305.73 524.773 cv
305.672 524.437 305.578 524.141 305.441 523.879 cv
305.305 523.621 305.125 523.41 304.902 523.25 cv
304.676 523.094 304.395 523.016 304.063 523.012 cv
303.895 523.016 303.73 523.039 303.57 523.082 cv
303.406 523.133 303.242 523.211 303.074 523.316 cv
302.906 523.43 302.73 523.57 302.555 523.738 cv
302.371 523.914 302.18 524.129 301.977 524.383 cv
301.977 527.18 li
302.332 527.613 302.672 527.945 302.996 528.168 cv
303.32 528.398 303.656 528.512 304.008 528.508 cv
304.328 528.512 304.605 528.434 304.84 528.273 cv
305.066 528.121 305.254 527.914 305.398 527.652 cv
305.543 527.398 305.648 527.109 305.715 526.789 cv
305.777 526.473 305.809 526.148 305.813 525.816 cv
cp
f
315.055 525.461 mo
315.051 525.664 315 525.805 314.902 525.891 cv
314.797 525.977 314.68 526.02 314.555 526.02 cv
309.938 526.02 li
309.934 526.41 309.973 526.762 310.055 527.074 cv
310.129 527.387 310.262 527.656 310.445 527.875 cv
310.625 528.102 310.859 528.273 311.156 528.391 cv
311.445 528.516 311.805 528.574 312.23 528.57 cv
312.563 528.574 312.859 528.547 313.121 528.488 cv
313.383 528.437 313.609 528.375 313.801 528.305 cv
313.988 528.238 314.145 528.18 314.27 528.121 cv
314.391 528.07 314.484 528.043 314.547 528.039 cv
314.582 528.043 314.613 528.051 314.645 528.066 cv
314.672 528.086 314.695 528.113 314.715 528.148 cv
314.727 528.187 314.738 528.238 314.75 528.301 cv
314.754 528.367 314.758 528.445 314.762 528.539 cv
314.758 528.609 314.754 528.668 314.754 528.715 cv
314.746 528.762 314.742 528.805 314.734 528.844 cv
314.727 528.883 314.711 528.918 314.695 528.949 cv
314.672 528.98 314.648 529.012 314.625 529.039 cv
314.594 529.07 314.512 529.117 314.371 529.18 cv
314.23 529.246 314.047 529.309 313.824 529.371 cv
313.598 529.434 313.34 529.488 313.047 529.539 cv
312.754 529.586 312.441 529.609 312.109 529.613 cv
311.531 529.609 311.023 529.531 310.594 529.371 cv
310.156 529.211 309.793 528.973 309.5 528.656 cv
309.199 528.34 308.977 527.945 308.828 527.465 cv
308.68 526.988 308.605 526.43 308.605 525.793 cv
308.605 525.195 308.68 524.656 308.836 524.172 cv
308.988 523.695 309.215 523.285 309.512 522.949 cv
309.805 522.613 310.16 522.355 310.574 522.176 cv
310.988 521.996 311.453 521.906 311.969 521.906 cv
312.52 521.906 312.988 521.996 313.375 522.172 cv
313.762 522.352 314.078 522.59 314.332 522.887 cv
314.578 523.187 314.762 523.539 314.879 523.937 cv
314.992 524.344 315.051 524.773 315.055 525.227 cv
cp
313.762 525.078 mo
313.777 524.402 313.625 523.871 313.309 523.488 cv
312.992 523.105 312.523 522.914 311.906 522.91 cv
311.582 522.914 311.301 522.973 311.063 523.09 cv
310.82 523.211 310.621 523.371 310.461 523.566 cv
310.297 523.766 310.172 523.996 310.086 524.258 cv
309.996 524.52 309.945 524.793 309.938 525.078 cv
cp
f
321.121 522.715 mo
321.117 522.832 321.117 522.93 321.113 523.004 cv
321.105 523.086 321.094 523.148 321.082 523.187 cv
321.063 523.234 321.043 523.266 321.023 523.289 cv
320.996 523.312 320.965 523.324 320.926 523.324 cv
320.883 523.324 320.832 523.312 320.773 523.289 cv
320.711 523.266 320.641 523.242 320.57 523.219 cv
320.492 523.195 320.41 523.176 320.316 523.152 cv
320.223 523.137 320.121 523.125 320.012 523.121 cv
319.879 523.125 319.75 523.152 319.629 523.199 cv
319.504 523.254 319.375 523.34 319.238 523.457 cv
319.098 523.582 318.953 523.738 318.805 523.934 cv
318.652 524.129 318.484 524.371 318.305 524.656 cv
318.305 529.27 li
318.301 529.316 318.289 529.352 318.273 529.375 cv
318.25 529.406 318.219 529.43 318.172 529.449 cv
318.125 529.469 318.059 529.48 317.98 529.496 cv
317.895 529.504 317.789 529.512 317.66 529.512 cv
317.531 529.512 317.426 529.504 317.348 529.496 cv
317.262 529.48 317.195 529.469 317.148 529.449 cv
317.094 529.43 317.063 529.406 317.047 529.375 cv
317.027 529.352 317.016 529.316 317.02 529.27 cv
317.02 522.258 li
317.016 522.219 317.023 522.184 317.043 522.152 cv
317.055 522.125 317.086 522.102 317.137 522.074 cv
317.18 522.055 317.242 522.039 317.316 522.027 cv
317.387 522.023 317.48 522.02 317.605 522.016 cv
317.715 522.02 317.813 522.023 317.891 522.027 cv
317.965 522.039 318.023 522.055 318.066 522.074 cv
318.105 522.102 318.133 522.125 318.152 522.152 cv
318.168 522.184 318.176 522.219 318.18 522.258 cv
318.18 523.277 li
318.367 522.996 318.551 522.77 318.723 522.594 cv
318.891 522.418 319.051 522.277 319.203 522.176 cv
319.352 522.074 319.5 522.004 319.648 521.965 cv
319.797 521.926 319.945 521.906 320.098 521.906 cv
320.164 521.906 320.242 521.91 320.328 521.918 cv
320.414 521.926 320.504 521.941 320.598 521.961 cv
320.691 521.984 320.773 522.008 320.852 522.031 cv
320.922 522.059 320.977 522.086 321.012 522.109 cv
321.039 522.141 321.059 522.164 321.074 522.184 cv
321.082 522.211 321.094 522.242 321.102 522.273 cv
321.109 522.312 321.113 522.363 321.117 522.434 cv
321.117 522.504 321.117 522.598 321.121 522.715 cv
cp
f
332.879 525.684 mo
332.875 526.262 332.801 526.789 332.652 527.266 cv
332.5 527.75 332.273 528.164 331.977 528.508 cv
331.676 528.859 331.301 529.129 330.855 529.32 cv
330.402 529.516 329.883 529.609 329.293 529.613 cv
328.715 529.609 328.211 529.527 327.785 529.355 cv
327.355 529.187 327 528.937 326.715 528.609 cv
326.426 528.281 326.211 527.887 326.074 527.418 cv
325.934 526.953 325.867 526.422 325.867 525.824 cv
325.867 525.258 325.938 524.73 326.086 524.25 cv
326.23 523.77 326.457 523.355 326.758 523.004 cv
327.055 522.656 327.426 522.387 327.875 522.195 cv
328.32 522.004 328.844 521.906 329.441 521.906 cv
330.02 521.906 330.52 521.992 330.949 522.164 cv
331.375 522.336 331.734 522.586 332.02 522.914 cv
332.305 523.242 332.52 523.641 332.664 524.105 cv
332.805 524.574 332.875 525.102 332.879 525.684 cv
cp
331.547 525.77 mo
331.543 525.395 331.508 525.035 331.441 524.695 cv
331.367 524.359 331.25 524.066 331.09 523.809 cv
330.926 523.559 330.707 523.355 330.43 523.203 cv
330.148 523.059 329.801 522.984 329.391 522.98 cv
329.004 522.984 328.676 523.051 328.402 523.184 cv
328.125 523.32 327.898 523.512 327.723 523.758 cv
327.543 524.004 327.41 524.297 327.328 524.633 cv
327.238 524.973 327.195 525.34 327.199 525.738 cv
327.195 526.125 327.23 526.488 327.305 526.824 cv
327.371 527.164 327.488 527.457 327.656 527.707 cv
327.82 527.961 328.043 528.164 328.32 528.309 cv
328.598 528.461 328.945 528.535 329.359 528.531 cv
329.734 528.535 330.063 528.465 330.344 528.328 cv
330.621 528.195 330.848 528.008 331.027 527.758 cv
331.203 527.516 331.332 527.223 331.418 526.887 cv
331.5 526.551 331.543 526.18 331.547 525.77 cv
cp
f
338.609 519.371 mo
338.605 519.473 338.602 519.551 338.594 519.609 cv
338.582 519.672 338.57 519.723 338.559 519.754 cv
338.543 519.793 338.527 519.816 338.508 519.828 cv
338.484 519.844 338.457 519.852 338.43 519.848 cv
338.391 519.852 338.344 519.84 338.293 519.812 cv
338.234 519.793 338.168 519.766 338.094 519.734 cv
338.012 519.707 337.922 519.68 337.816 519.656 cv
337.707 519.633 337.582 519.621 337.449 519.621 cv
337.254 519.621 337.09 519.652 336.957 519.715 cv
336.816 519.777 336.707 519.875 336.629 520.008 cv
336.543 520.141 336.484 520.312 336.449 520.523 cv
336.41 520.734 336.391 520.992 336.395 521.289 cv
336.395 522.055 li
337.961 522.055 li
338 522.059 338.035 522.066 338.066 522.082 cv
338.094 522.102 338.121 522.133 338.145 522.176 cv
338.168 522.223 338.184 522.281 338.199 522.344 cv
338.207 522.414 338.215 522.496 338.219 522.59 cv
338.215 522.781 338.191 522.914 338.148 522.996 cv
338.098 523.082 338.035 523.125 337.961 523.121 cv
336.395 523.121 li
336.395 529.27 li
336.391 529.316 336.383 529.352 336.363 529.375 cv
336.34 529.406 336.305 529.43 336.258 529.449 cv
336.207 529.469 336.141 529.48 336.059 529.496 cv
335.973 529.504 335.867 529.512 335.75 529.512 cv
335.621 529.512 335.52 529.504 335.438 529.496 cv
335.352 529.48 335.285 529.469 335.238 529.449 cv
335.188 529.43 335.152 529.406 335.133 529.375 cv
335.109 529.352 335.098 529.316 335.102 529.27 cv
335.102 523.121 li
334.113 523.121 li
334.027 523.125 333.965 523.082 333.926 522.996 cv
333.883 522.914 333.859 522.781 333.863 522.59 cv
333.859 522.496 333.867 522.414 333.879 522.344 cv
333.887 522.281 333.902 522.223 333.926 522.176 cv
333.945 522.133 333.969 522.102 334.004 522.082 cv
334.031 522.066 334.07 522.059 334.113 522.055 cv
335.102 522.055 li
335.102 521.328 li
335.098 520.844 335.145 520.426 335.238 520.07 cv
335.328 519.723 335.465 519.434 335.652 519.211 cv
335.836 518.988 336.07 518.824 336.359 518.715 cv
336.641 518.609 336.977 518.555 337.363 518.555 cv
337.539 518.555 337.715 518.574 337.891 518.605 cv
338.059 518.645 338.191 518.68 338.289 518.715 cv
338.379 518.758 338.441 518.793 338.477 518.82 cv
338.504 518.855 338.531 518.895 338.555 518.941 cv
338.574 518.992 338.586 519.055 338.598 519.121 cv
338.602 519.195 338.605 519.277 338.609 519.371 cv
cp
f
348.809 526.637 mo
348.805 527.109 348.719 527.531 348.547 527.898 cv
348.371 528.273 348.129 528.586 347.82 528.84 cv
347.512 529.098 347.148 529.289 346.73 529.418 cv
346.309 529.547 345.859 529.609 345.379 529.613 cv
345.039 529.609 344.723 529.582 344.438 529.527 cv
344.148 529.469 343.895 529.402 343.668 529.316 cv
343.441 529.238 343.25 529.152 343.098 529.059 cv
342.941 528.973 342.836 528.895 342.777 528.832 cv
342.719 528.77 342.676 528.691 342.648 528.598 cv
342.617 528.504 342.602 528.375 342.605 528.211 cv
342.602 528.098 342.605 528.004 342.621 527.926 cv
342.629 527.852 342.645 527.789 342.668 527.742 cv
342.684 527.695 342.711 527.664 342.746 527.645 cv
342.773 527.629 342.809 527.621 342.852 527.617 cv
342.922 527.621 343.023 527.664 343.16 527.75 cv
343.289 527.84 343.461 527.937 343.672 528.039 cv
343.879 528.148 344.129 528.246 344.422 528.332 cv
344.715 528.426 345.055 528.469 345.441 528.469 cv
345.73 528.469 345.996 528.43 346.238 528.352 cv
346.477 528.273 346.684 528.164 346.863 528.02 cv
347.035 527.879 347.172 527.703 347.266 527.492 cv
347.359 527.285 347.406 527.051 347.406 526.785 cv
347.406 526.504 347.34 526.258 347.211 526.051 cv
347.078 525.852 346.906 525.676 346.695 525.52 cv
346.48 525.371 346.238 525.23 345.965 525.098 cv
345.691 524.973 345.41 524.84 345.129 524.707 cv
344.84 524.574 344.563 524.43 344.293 524.266 cv
344.023 524.109 343.781 523.918 343.57 523.699 cv
343.352 523.48 343.18 523.227 343.051 522.93 cv
342.914 522.641 342.848 522.289 342.852 521.875 cv
342.848 521.457 342.926 521.082 343.082 520.75 cv
343.234 520.422 343.445 520.145 343.723 519.918 cv
343.992 519.699 344.316 519.527 344.695 519.41 cv
345.07 519.293 345.48 519.234 345.918 519.234 cv
346.137 519.234 346.359 519.254 346.59 519.293 cv
346.813 519.332 347.023 519.383 347.227 519.445 cv
347.422 519.512 347.602 519.586 347.762 519.664 cv
347.914 519.746 348.016 519.812 348.07 519.859 cv
348.117 519.914 348.152 519.953 348.168 519.977 cv
348.184 520.008 348.195 520.043 348.207 520.086 cv
348.215 520.133 348.223 520.187 348.23 520.246 cv
348.234 520.312 348.238 520.391 348.238 520.488 cv
348.238 520.582 348.234 520.668 348.227 520.738 cv
348.219 520.816 348.207 520.875 348.191 520.922 cv
348.176 520.969 348.152 521.004 348.125 521.027 cv
348.094 521.051 348.063 521.062 348.027 521.062 cv
347.969 521.062 347.879 521.027 347.758 520.957 cv
347.633 520.887 347.48 520.805 347.309 520.711 cv
347.129 520.621 346.922 520.539 346.684 520.461 cv
346.438 520.387 346.168 520.348 345.871 520.348 cv
345.59 520.348 345.344 520.387 345.137 520.461 cv
344.926 520.539 344.754 520.641 344.621 520.762 cv
344.484 520.887 344.383 521.031 344.316 521.203 cv
344.25 521.375 344.219 521.559 344.219 521.75 cv
344.219 522.035 344.281 522.277 344.41 522.477 cv
344.539 522.68 344.711 522.859 344.93 523.012 cv
345.141 523.172 345.387 523.312 345.664 523.441 cv
345.938 523.574 346.219 523.707 346.508 523.836 cv
346.793 523.969 347.074 524.113 347.348 524.27 cv
347.621 524.43 347.867 524.617 348.086 524.832 cv
348.301 525.051 348.473 525.305 348.609 525.598 cv
348.738 525.891 348.805 526.238 348.809 526.637 cv
cp
f
356.574 529.27 mo
356.57 529.316 356.563 529.352 356.547 529.375 cv
356.527 529.406 356.492 529.43 356.449 529.449 cv
356.402 529.469 356.344 529.48 356.27 529.496 cv
356.191 529.504 356.098 529.512 355.992 529.512 cv
355.867 529.512 355.77 529.504 355.699 529.496 cv
355.621 529.48 355.563 529.469 355.52 529.449 cv
355.473 529.43 355.441 529.406 355.43 529.375 cv
355.41 529.352 355.402 529.316 355.406 529.27 cv
355.406 528.344 li
355.004 528.789 354.609 529.109 354.223 529.309 cv
353.828 529.512 353.434 529.609 353.039 529.613 cv
352.566 529.609 352.172 529.535 351.855 529.379 cv
351.535 529.227 351.277 529.016 351.082 528.746 cv
350.879 528.48 350.738 528.168 350.656 527.809 cv
350.566 527.453 350.523 527.02 350.527 526.512 cv
350.527 522.258 li
350.523 522.219 350.531 522.184 350.555 522.152 cv
350.57 522.125 350.605 522.102 350.66 522.074 cv
350.707 522.055 350.777 522.039 350.863 522.027 cv
350.945 522.023 351.047 522.02 351.176 522.016 cv
351.297 522.02 351.402 522.023 351.488 522.027 cv
351.57 522.039 351.637 522.055 351.684 522.074 cv
351.73 522.102 351.766 522.125 351.789 522.152 cv
351.809 522.184 351.816 522.219 351.82 522.258 cv
351.82 526.34 li
351.816 526.754 351.848 527.082 351.91 527.328 cv
351.969 527.574 352.059 527.785 352.184 527.957 cv
352.301 528.137 352.457 528.27 352.648 528.363 cv
352.832 528.461 353.051 528.512 353.301 528.508 cv
353.621 528.512 353.941 528.395 354.266 528.164 cv
354.582 527.937 354.922 527.602 355.281 527.156 cv
355.281 522.258 li
355.281 522.219 355.289 522.184 355.309 522.152 cv
355.324 522.125 355.359 522.102 355.414 522.074 cv
355.465 522.055 355.531 522.039 355.613 522.027 cv
355.691 522.023 355.797 522.02 355.93 522.016 cv
356.051 522.02 356.156 522.023 356.242 522.027 cv
356.324 522.039 356.387 522.055 356.434 522.074 cv
356.477 522.102 356.512 522.125 356.539 522.152 cv
356.559 522.184 356.57 522.219 356.574 522.258 cv
cp
f
365.434 525.668 mo
365.43 526.277 365.363 526.828 365.234 527.312 cv
365.098 527.801 364.902 528.215 364.648 528.555 cv
364.391 528.898 364.074 529.16 363.703 529.34 cv
363.328 529.523 362.902 529.609 362.418 529.613 cv
362.191 529.609 361.984 529.59 361.797 529.547 cv
361.609 529.5 361.422 529.43 361.242 529.332 cv
361.055 529.234 360.875 529.109 360.695 528.957 cv
360.512 528.809 360.32 528.629 360.121 528.414 cv
360.121 529.27 li
360.121 529.316 360.109 529.352 360.09 529.379 cv
360.066 529.414 360.031 529.437 359.988 529.453 cv
359.938 529.469 359.879 529.48 359.813 529.496 cv
359.738 529.504 359.648 529.512 359.543 529.512 cv
359.434 529.512 359.348 529.504 359.277 529.496 cv
359.203 529.48 359.141 529.469 359.098 529.453 cv
359.047 529.437 359.016 529.414 359.004 529.379 cv
358.984 529.352 358.977 529.316 358.98 529.27 cv
358.98 518.859 li
358.977 518.82 358.988 518.785 359.008 518.75 cv
359.023 518.723 359.055 518.695 359.109 518.672 cv
359.156 518.652 359.223 518.637 359.309 518.625 cv
359.387 518.617 359.492 518.613 359.621 518.609 cv
359.75 518.613 359.855 518.617 359.941 518.625 cv
360.02 518.637 360.086 518.652 360.133 518.672 cv
360.18 518.695 360.211 518.723 360.234 518.75 cv
360.25 518.785 360.262 518.82 360.266 518.859 cv
360.266 523.059 li
360.473 522.848 360.676 522.668 360.871 522.523 cv
361.066 522.379 361.254 522.262 361.441 522.168 cv
361.625 522.082 361.813 522.016 362.004 521.969 cv
362.188 521.93 362.387 521.906 362.598 521.906 cv
363.102 521.906 363.535 522.008 363.902 522.211 cv
364.262 522.414 364.555 522.687 364.781 523.023 cv
365.004 523.367 365.172 523.766 365.277 524.223 cv
365.379 524.68 365.43 525.16 365.434 525.668 cv
cp
364.102 525.816 mo
364.098 525.461 364.07 525.113 364.02 524.773 cv
363.961 524.437 363.867 524.141 363.73 523.879 cv
363.594 523.621 363.414 523.41 363.191 523.25 cv
362.965 523.094 362.684 523.016 362.352 523.012 cv
362.184 523.016 362.02 523.039 361.859 523.082 cv
361.695 523.133 361.531 523.211 361.363 523.316 cv
361.195 523.43 361.02 523.57 360.844 523.738 cv
360.66 523.914 360.469 524.129 360.266 524.383 cv
360.266 527.18 li
360.621 527.613 360.961 527.945 361.285 528.168 cv
361.609 528.398 361.945 528.512 362.297 528.508 cv
362.617 528.512 362.895 528.434 363.129 528.273 cv
363.355 528.121 363.543 527.914 363.688 527.652 cv
363.832 527.398 363.938 527.109 364.004 526.789 cv
364.066 526.473 364.098 526.148 364.102 525.816 cv
cp
f
370.586 525.531 mo
370.586 525.734 370.563 525.871 370.516 525.949 cv
370.469 526.027 370.398 526.066 370.313 526.066 cv
367.055 526.066 li
366.961 526.066 366.895 526.027 366.848 525.945 cv
366.801 525.867 366.777 525.73 366.777 525.531 cv
366.777 525.336 366.801 525.195 366.848 525.117 cv
366.895 525.039 366.961 525 367.055 525 cv
370.313 525 li
370.352 525 370.391 525.008 370.426 525.023 cv
370.457 525.039 370.484 525.07 370.512 525.113 cv
370.531 525.16 370.551 525.215 370.566 525.281 cv
370.578 525.352 370.586 525.437 370.586 525.531 cv
cp
f
373.84 529.262 mo
373.836 529.305 373.828 529.34 373.809 529.371 cv
373.785 529.402 373.746 529.43 373.699 529.445 cv
373.645 529.465 373.578 529.477 373.492 529.492 cv
373.406 529.504 373.297 529.512 373.172 529.512 cv
373.043 529.512 372.938 529.504 372.852 529.492 cv
372.762 529.477 372.691 529.465 372.641 529.445 cv
372.586 529.43 372.551 529.402 372.531 529.371 cv
372.508 529.34 372.496 529.305 372.5 529.262 cv
372.5 519.582 li
372.496 519.543 372.508 519.508 372.535 519.473 cv
372.555 519.445 372.594 519.418 372.652 519.398 cv
372.703 519.383 372.773 519.367 372.863 519.352 cv
372.945 519.34 373.047 519.336 373.172 519.332 cv
373.297 519.336 373.406 519.34 373.492 519.352 cv
373.578 519.367 373.645 519.383 373.699 519.398 cv
373.746 519.418 373.785 519.445 373.809 519.473 cv
373.828 519.508 373.836 519.543 373.84 519.582 cv
cp
f
386.828 529.27 mo
386.824 529.316 386.816 529.352 386.797 529.375 cv
386.773 529.406 386.738 529.43 386.695 529.449 cv
386.645 529.469 386.578 529.48 386.5 529.496 cv
386.414 529.504 386.313 529.512 386.188 529.512 cv
386.055 529.512 385.945 529.504 385.867 529.496 cv
385.781 529.48 385.715 529.469 385.668 529.449 cv
385.613 529.43 385.578 529.406 385.563 529.375 cv
385.539 529.352 385.531 529.316 385.531 529.27 cv
385.531 525.008 li
385.531 524.715 385.504 524.445 385.453 524.199 cv
385.398 523.957 385.316 523.746 385.203 523.566 cv
385.09 523.391 384.945 523.254 384.77 523.16 cv
384.59 523.066 384.379 523.02 384.145 523.02 cv
383.848 523.02 383.551 523.137 383.254 523.363 cv
382.949 523.598 382.621 523.93 382.266 524.367 cv
382.266 529.27 li
382.262 529.316 382.25 529.352 382.234 529.375 cv
382.211 529.406 382.18 529.43 382.133 529.449 cv
382.082 529.469 382.016 529.48 381.934 529.496 cv
381.848 529.504 381.742 529.512 381.621 529.512 cv
381.5 529.512 381.398 529.504 381.313 529.496 cv
381.227 529.48 381.156 529.469 381.109 529.449 cv
381.055 529.43 381.023 529.406 381.008 529.375 cv
380.988 529.352 380.977 529.316 380.98 529.27 cv
380.98 525.008 li
380.977 524.715 380.949 524.445 380.895 524.199 cv
380.836 523.957 380.75 523.746 380.637 523.566 cv
380.523 523.391 380.379 523.254 380.207 523.16 cv
380.027 523.066 379.82 523.02 379.586 523.02 cv
379.285 523.02 378.988 523.137 378.688 523.363 cv
378.387 523.598 378.059 523.93 377.707 524.367 cv
377.707 529.27 li
377.703 529.316 377.691 529.352 377.676 529.375 cv
377.652 529.406 377.621 529.43 377.574 529.449 cv
377.527 529.469 377.461 529.48 377.383 529.496 cv
377.297 529.504 377.191 529.512 377.063 529.512 cv
376.934 529.512 376.828 529.504 376.75 529.496 cv
376.664 529.48 376.598 529.469 376.551 529.449 cv
376.496 529.43 376.465 529.406 376.449 529.375 cv
376.43 529.352 376.418 529.316 376.422 529.27 cv
376.422 522.258 li
376.418 522.219 376.426 522.184 376.445 522.152 cv
376.457 522.125 376.488 522.102 376.539 522.074 cv
376.582 522.055 376.645 522.039 376.719 522.027 cv
376.789 522.023 376.883 522.02 377.008 522.016 cv
377.117 522.02 377.215 522.023 377.293 522.027 cv
377.367 522.039 377.426 522.055 377.469 522.074 cv
377.508 522.102 377.535 522.125 377.555 522.152 cv
377.57 522.184 377.578 522.219 377.582 522.258 cv
377.582 523.184 li
377.973 522.742 378.355 522.422 378.73 522.215 cv
379.098 522.012 379.477 521.906 379.859 521.906 cv
380.148 521.906 380.406 521.941 380.641 522.008 cv
380.867 522.078 381.074 522.172 381.254 522.293 cv
381.43 522.414 381.578 522.559 381.707 522.727 cv
381.828 522.898 381.934 523.09 382.02 523.293 cv
382.25 523.043 382.473 522.828 382.684 522.648 cv
382.895 522.477 383.098 522.332 383.293 522.219 cv
383.488 522.113 383.676 522.035 383.859 521.98 cv
384.043 521.934 384.23 521.906 384.418 521.906 cv
384.871 521.906 385.25 521.988 385.555 522.145 cv
385.859 522.309 386.105 522.52 386.301 522.781 cv
386.488 523.047 386.625 523.355 386.707 523.711 cv
386.785 524.066 386.824 524.441 386.828 524.836 cv
cp
f
394.457 529.277 mo
394.453 529.34 394.434 529.387 394.395 529.418 cv
394.352 529.449 394.293 529.473 394.223 529.488 cv
394.145 529.504 394.039 529.512 393.902 529.512 cv
393.766 529.512 393.656 529.504 393.578 529.488 cv
393.492 529.473 393.434 529.449 393.402 529.418 cv
393.363 529.387 393.348 529.34 393.352 529.277 cv
393.352 528.578 li
393.043 528.906 392.699 529.16 392.324 529.34 cv
391.945 529.523 391.547 529.609 391.129 529.613 cv
390.754 529.609 390.422 529.562 390.125 529.469 cv
389.828 529.371 389.574 529.234 389.363 529.051 cv
389.152 528.871 388.988 528.648 388.871 528.383 cv
388.754 528.121 388.695 527.82 388.699 527.477 cv
388.695 527.086 388.773 526.742 388.938 526.449 cv
389.094 526.16 389.328 525.918 389.633 525.727 cv
389.934 525.535 390.301 525.391 390.738 525.293 cv
391.172 525.199 391.664 525.152 392.211 525.148 cv
393.18 525.148 li
393.18 524.602 li
393.176 524.332 393.148 524.094 393.094 523.887 cv
393.035 523.68 392.941 523.508 392.816 523.367 cv
392.684 523.23 392.52 523.125 392.32 523.055 cv
392.113 522.984 391.863 522.949 391.574 522.949 cv
391.254 522.949 390.969 522.988 390.719 523.062 cv
390.461 523.141 390.242 523.223 390.055 523.312 cv
389.867 523.406 389.707 523.492 389.582 523.562 cv
389.449 523.641 389.355 523.676 389.297 523.676 cv
389.254 523.676 389.219 523.668 389.188 523.645 cv
389.156 523.629 389.129 523.598 389.105 523.551 cv
389.082 523.512 389.063 523.457 389.055 523.391 cv
389.039 523.328 389.035 523.258 389.039 523.176 cv
389.035 523.051 389.043 522.945 389.066 522.867 cv
389.082 522.793 389.129 522.723 389.199 522.652 cv
389.27 522.586 389.391 522.508 389.563 522.418 cv
389.734 522.328 389.93 522.246 390.152 522.168 cv
390.375 522.098 390.621 522.035 390.887 521.98 cv
391.152 521.934 391.418 521.906 391.691 521.906 cv
392.191 521.906 392.621 521.965 392.973 522.078 cv
393.324 522.195 393.609 522.363 393.832 522.582 cv
394.047 522.805 394.207 523.078 394.309 523.402 cv
394.406 523.734 394.453 524.117 394.457 524.547 cv
cp
393.18 526.074 mo
392.078 526.074 li
391.723 526.078 391.418 526.109 391.16 526.164 cv
390.898 526.227 390.684 526.312 390.512 526.43 cv
390.34 526.547 390.215 526.687 390.137 526.852 cv
390.055 527.016 390.012 527.203 390.016 527.414 cv
390.012 527.781 390.129 528.074 390.359 528.285 cv
390.59 528.504 390.914 528.609 391.332 528.609 cv
391.668 528.609 391.98 528.523 392.27 528.352 cv
392.559 528.18 392.859 527.918 393.18 527.562 cv
cp
f
402.676 522.574 mo
402.672 522.758 402.648 522.891 402.602 522.969 cv
402.551 523.051 402.488 523.09 402.414 523.09 cv
401.406 523.09 li
401.586 523.277 401.715 523.484 401.789 523.711 cv
401.859 523.937 401.895 524.172 401.898 524.414 cv
401.895 524.82 401.828 525.18 401.703 525.492 cv
401.57 525.805 401.387 526.07 401.145 526.281 cv
400.902 526.5 400.613 526.664 400.285 526.777 cv
399.949 526.895 399.582 526.953 399.18 526.949 cv
398.891 526.953 398.617 526.914 398.363 526.836 cv
398.102 526.762 397.906 526.668 397.77 526.551 cv
397.676 526.648 397.598 526.754 397.539 526.871 cv
397.477 526.992 397.445 527.129 397.449 527.281 cv
397.445 527.465 397.531 527.617 397.703 527.734 cv
397.871 527.859 398.094 527.922 398.375 527.93 cv
400.207 528.008 li
400.555 528.02 400.871 528.066 401.164 528.152 cv
401.453 528.238 401.707 528.363 401.922 528.52 cv
402.133 528.68 402.301 528.871 402.422 529.102 cv
402.539 529.336 402.598 529.605 402.602 529.91 cv
402.598 530.23 402.531 530.535 402.398 530.828 cv
402.262 531.117 402.055 531.371 401.777 531.594 cv
401.496 531.812 401.141 531.988 400.711 532.117 cv
400.281 532.242 399.773 532.305 399.188 532.309 cv
398.617 532.305 398.133 532.258 397.738 532.164 cv
397.34 532.066 397.016 531.934 396.762 531.77 cv
396.508 531.602 396.324 531.406 396.211 531.176 cv
396.094 530.941 396.035 530.687 396.039 530.422 cv
396.035 530.25 396.055 530.086 396.102 529.926 cv
396.141 529.762 396.203 529.609 396.289 529.465 cv
396.371 529.32 396.48 529.184 396.609 529.047 cv
396.734 528.918 396.879 528.785 397.051 528.656 cv
396.793 528.527 396.605 528.363 396.484 528.164 cv
396.363 527.969 396.305 527.758 396.305 527.523 cv
396.305 527.211 396.367 526.926 396.496 526.676 cv
396.625 526.426 396.785 526.203 396.98 526.004 cv
396.816 525.812 396.691 525.598 396.598 525.355 cv
396.504 525.117 396.457 524.824 396.457 524.477 cv
396.457 524.082 396.523 523.723 396.66 523.402 cv
396.793 523.086 396.98 522.82 397.223 522.602 cv
397.461 522.387 397.746 522.219 398.082 522.098 cv
398.414 521.984 398.781 521.926 399.18 521.922 cv
399.391 521.926 399.59 521.937 399.773 521.957 cv
399.957 521.984 400.129 522.016 400.293 522.055 cv
402.414 522.055 li
402.5 522.059 402.566 522.102 402.609 522.184 cv
402.652 522.273 402.672 522.402 402.676 522.574 cv
cp
400.668 524.422 mo
400.664 523.949 400.531 523.578 400.273 523.305 cv
400.008 523.039 399.637 522.902 399.156 522.902 cv
398.902 522.902 398.684 522.945 398.504 523.027 cv
398.316 523.113 398.164 523.227 398.043 523.371 cv
397.922 523.52 397.832 523.687 397.773 523.875 cv
397.711 524.062 397.68 524.262 397.684 524.469 cv
397.68 524.934 397.813 525.297 398.074 525.562 cv
398.336 525.828 398.703 525.961 399.18 525.957 cv
399.43 525.961 399.648 525.922 399.84 525.836 cv
400.023 525.758 400.18 525.645 400.305 525.504 cv
400.426 525.363 400.516 525.199 400.578 525.008 cv
400.633 524.824 400.664 524.629 400.668 524.422 cv
cp
401.313 529.98 mo
401.309 529.676 401.184 529.445 400.941 529.281 cv
400.691 529.121 400.359 529.031 399.941 529.02 cv
398.125 528.957 li
397.957 529.09 397.82 529.215 397.719 529.328 cv
397.609 529.445 397.527 529.555 397.465 529.664 cv
397.402 529.77 397.359 529.875 397.336 529.98 cv
397.313 530.082 397.301 530.187 397.301 530.297 cv
397.301 530.633 397.469 530.887 397.813 531.066 cv
398.152 531.238 398.633 531.328 399.25 531.328 cv
399.637 531.328 399.961 531.289 400.227 531.215 cv
400.484 531.137 400.695 531.035 400.859 530.914 cv
401.016 530.785 401.133 530.645 401.207 530.484 cv
401.273 530.324 401.309 530.156 401.313 529.98 cv
cp
f
410.238 525.461 mo
410.234 525.664 410.184 525.805 410.086 525.891 cv
409.98 525.977 409.863 526.02 409.738 526.02 cv
405.121 526.02 li
405.117 526.41 405.156 526.762 405.238 527.074 cv
405.313 527.387 405.445 527.656 405.629 527.875 cv
405.809 528.102 406.043 528.273 406.34 528.391 cv
406.629 528.516 406.988 528.574 407.414 528.57 cv
407.746 528.574 408.043 528.547 408.305 528.488 cv
408.566 528.437 408.793 528.375 408.984 528.305 cv
409.172 528.238 409.328 528.18 409.453 528.121 cv
409.574 528.07 409.668 528.043 409.73 528.039 cv
409.766 528.043 409.797 528.051 409.828 528.066 cv
409.855 528.086 409.879 528.113 409.898 528.148 cv
409.91 528.187 409.922 528.238 409.934 528.301 cv
409.938 528.367 409.941 528.445 409.945 528.539 cv
409.941 528.609 409.938 528.668 409.938 528.715 cv
409.93 528.762 409.926 528.805 409.918 528.844 cv
409.91 528.883 409.895 528.918 409.879 528.949 cv
409.855 528.98 409.832 529.012 409.809 529.039 cv
409.777 529.07 409.695 529.117 409.555 529.18 cv
409.414 529.246 409.23 529.309 409.008 529.371 cv
408.781 529.434 408.523 529.488 408.23 529.539 cv
407.938 529.586 407.625 529.609 407.293 529.613 cv
406.715 529.609 406.207 529.531 405.777 529.371 cv
405.34 529.211 404.977 528.973 404.684 528.656 cv
404.383 528.34 404.16 527.945 404.012 527.465 cv
403.863 526.988 403.789 526.43 403.789 525.793 cv
403.789 525.195 403.863 524.656 404.02 524.172 cv
404.172 523.695 404.398 523.285 404.695 522.949 cv
404.988 522.613 405.344 522.355 405.758 522.176 cv
406.172 521.996 406.637 521.906 407.152 521.906 cv
407.703 521.906 408.172 521.996 408.559 522.172 cv
408.945 522.352 409.262 522.59 409.516 522.887 cv
409.762 523.187 409.945 523.539 410.063 523.937 cv
410.176 524.344 410.234 524.773 410.238 525.227 cv
cp
408.945 525.078 mo
408.961 524.402 408.809 523.871 408.492 523.488 cv
408.176 523.105 407.707 522.914 407.09 522.91 cv
406.766 522.914 406.484 522.973 406.246 523.09 cv
406.004 523.211 405.805 523.371 405.645 523.566 cv
405.48 523.766 405.355 523.996 405.27 524.258 cv
405.18 524.52 405.129 524.793 405.121 525.078 cv
cp
f
416.605 527.359 mo
416.602 527.723 416.535 528.043 416.406 528.32 cv
416.273 528.602 416.086 528.836 415.844 529.027 cv
415.598 529.223 415.305 529.367 414.969 529.465 cv
414.629 529.562 414.258 529.609 413.855 529.613 cv
413.602 529.609 413.363 529.59 413.141 529.555 cv
412.914 529.512 412.715 529.465 412.535 529.406 cv
412.355 529.348 412.203 529.285 412.078 529.219 cv
411.953 529.156 411.859 529.098 411.805 529.043 cv
411.746 528.992 411.707 528.922 411.684 528.824 cv
411.656 528.734 411.645 528.605 411.645 528.445 cv
411.645 528.348 411.648 528.266 411.66 528.195 cv
411.668 528.129 411.68 528.074 411.699 528.031 cv
411.711 527.992 411.734 527.961 411.762 527.941 cv
411.789 527.926 411.82 527.918 411.859 527.914 cv
411.914 527.918 412 527.953 412.113 528.02 cv
412.223 528.094 412.359 528.172 412.527 528.25 cv
412.688 528.336 412.879 528.41 413.105 528.48 cv
413.324 528.551 413.582 528.586 413.879 528.586 cv
414.094 528.586 414.293 528.562 414.473 528.516 cv
414.648 528.469 414.801 528.402 414.93 528.309 cv
415.059 528.223 415.16 528.105 415.23 527.961 cv
415.301 527.824 415.336 527.656 415.336 527.461 cv
415.336 527.266 415.285 527.102 415.184 526.965 cv
415.082 526.832 414.945 526.711 414.781 526.605 cv
414.613 526.504 414.43 526.414 414.223 526.328 cv
414.012 526.25 413.797 526.164 413.578 526.074 cv
413.359 525.988 413.145 525.887 412.934 525.773 cv
412.723 525.664 412.531 525.531 412.367 525.367 cv
412.195 525.211 412.063 525.016 411.965 524.789 cv
411.859 524.566 411.809 524.301 411.813 523.988 cv
411.809 523.715 411.863 523.449 411.973 523.195 cv
412.078 522.945 412.238 522.727 412.453 522.535 cv
412.664 522.348 412.93 522.195 413.25 522.078 cv
413.57 521.965 413.941 521.906 414.371 521.906 cv
414.555 521.906 414.742 521.922 414.93 521.953 cv
415.113 521.984 415.281 522.023 415.438 522.07 cv
415.586 522.117 415.715 522.168 415.824 522.223 cv
415.926 522.277 416.008 522.328 416.066 522.367 cv
416.117 522.414 416.152 522.449 416.176 522.477 cv
416.191 522.508 416.207 522.543 416.215 522.578 cv
416.223 522.621 416.23 522.668 416.238 522.723 cv
416.246 522.781 416.25 522.852 416.25 522.934 cv
416.25 523.023 416.246 523.102 416.238 523.164 cv
416.23 523.234 416.215 523.285 416.199 523.324 cv
416.176 523.367 416.156 523.398 416.133 523.414 cv
416.105 523.434 416.074 523.441 416.047 523.441 cv
415.996 523.441 415.93 523.414 415.844 523.355 cv
415.754 523.301 415.641 523.238 415.5 523.172 cv
415.359 523.109 415.191 523.051 415.004 522.988 cv
414.813 522.934 414.598 522.902 414.355 522.902 cv
414.133 522.902 413.941 522.93 413.777 522.977 cv
413.609 523.031 413.473 523.102 413.367 523.187 cv
413.262 523.281 413.18 523.387 413.129 523.512 cv
413.07 523.637 413.043 523.773 413.047 523.918 cv
413.043 524.121 413.094 524.289 413.199 524.426 cv
413.301 524.566 413.438 524.687 413.605 524.789 cv
413.77 524.895 413.961 524.988 414.176 525.07 cv
414.387 525.156 414.602 525.242 414.824 525.328 cv
415.043 525.418 415.262 525.52 415.48 525.625 cv
415.695 525.734 415.887 525.863 416.055 526.02 cv
416.219 526.176 416.352 526.363 416.453 526.582 cv
416.551 526.801 416.602 527.062 416.605 527.359 cv
cp
f
166.363 13.727 mo
166.359 14.258 166.262 14.723 166.066 15.121 cv
165.867 15.523 165.602 15.859 165.266 16.125 cv
164.926 16.395 164.527 16.594 164.078 16.727 cv
163.625 16.859 163.145 16.926 162.633 16.93 cv
162.281 16.926 161.957 16.898 161.66 16.844 cv
161.359 16.785 161.098 16.719 160.871 16.637 cv
160.641 16.559 160.449 16.473 160.297 16.383 cv
160.145 16.297 160.035 16.219 159.969 16.148 cv
159.898 16.082 159.848 15.984 159.824 15.859 cv
159.793 15.734 159.781 15.551 159.781 15.309 cv
159.781 15.148 159.785 15.016 159.797 14.902 cv
159.805 14.797 159.82 14.707 159.848 14.637 cv
159.867 14.57 159.898 14.523 159.941 14.492 cv
159.977 14.469 160.023 14.453 160.074 14.449 cv
160.145 14.453 160.246 14.496 160.383 14.578 cv
160.512 14.668 160.684 14.762 160.895 14.863 cv
161.102 14.969 161.348 15.066 161.637 15.148 cv
161.922 15.238 162.258 15.281 162.641 15.277 cv
162.891 15.281 163.113 15.25 163.309 15.187 cv
163.504 15.129 163.672 15.043 163.813 14.934 cv
163.949 14.824 164.055 14.691 164.129 14.531 cv
164.199 14.371 164.234 14.191 164.238 13.992 cv
164.234 13.766 164.172 13.57 164.051 13.402 cv
163.922 13.242 163.758 13.098 163.563 12.969 cv
163.359 12.844 163.133 12.723 162.879 12.609 cv
162.625 12.5 162.363 12.383 162.094 12.254 cv
161.82 12.133 161.559 11.988 161.305 11.828 cv
161.051 11.672 160.824 11.484 160.625 11.262 cv
160.422 11.043 160.258 10.781 160.137 10.477 cv
160.012 10.176 159.949 9.81598 159.953 9.39502 cv
159.949 8.914 160.039 8.48798 160.219 8.12097 cv
160.395 7.758 160.637 7.453 160.945 7.20697 cv
161.246 6.96899 161.605 6.789 162.02 6.66803 cv
162.434 6.55103 162.871 6.492 163.332 6.48798 cv
163.57 6.492 163.809 6.508 164.051 6.54303 cv
164.289 6.58197 164.512 6.633 164.719 6.69098 cv
164.926 6.75403 165.109 6.82397 165.273 6.89801 cv
165.43 6.97998 165.539 7.04303 165.594 7.09399 cv
165.645 7.14801 165.68 7.19501 165.699 7.22699 cv
165.715 7.26599 165.73 7.31201 165.746 7.37097 cv
165.758 7.43402 165.766 7.508 165.773 7.59802 cv
165.777 7.69098 165.781 7.80499 165.781 7.93701 cv
165.781 8.09003 165.777 8.21899 165.77 8.32001 cv
165.762 8.42603 165.746 8.51202 165.73 8.57397 cv
165.707 8.64502 165.684 8.69098 165.652 8.72302 cv
165.617 8.75403 165.57 8.77002 165.516 8.77002 cv
165.457 8.77002 165.367 8.73401 165.242 8.65997 cv
165.117 8.59003 164.961 8.51202 164.781 8.422 cv
164.598 8.34003 164.391 8.26202 164.152 8.19098 cv
163.91 8.125 163.645 8.09003 163.363 8.086 cv
163.137 8.09003 162.945 8.117 162.781 8.16803 cv
162.613 8.22302 162.473 8.297 162.363 8.39099 cv
162.25 8.48798 162.168 8.60498 162.113 8.73798 cv
162.059 8.87903 162.031 9.02002 162.031 9.16803 cv
162.031 9.39502 162.09 9.59003 162.215 9.75 cv
162.332 9.914 162.496 10.059 162.707 10.184 cv
162.91 10.312 163.145 10.434 163.402 10.543 cv
163.66 10.66 163.926 10.777 164.199 10.898 cv
164.469 11.027 164.73 11.168 164.992 11.324 cv
165.25 11.48 165.484 11.672 165.688 11.891 cv
165.891 12.117 166.051 12.375 166.176 12.672 cv
166.297 12.969 166.359 13.32 166.363 13.727 cv
cp
f
173.082 15.379 mo
173.078 15.516 173.074 15.629 173.07 15.719 cv
173.059 15.812 173.051 15.891 173.039 15.949 cv
173.023 16.012 173.008 16.062 172.992 16.098 cv
172.973 16.141 172.93 16.187 172.871 16.246 cv
172.805 16.309 172.699 16.383 172.551 16.465 cv
172.398 16.555 172.227 16.633 172.035 16.695 cv
171.844 16.766 171.637 16.816 171.41 16.859 cv
171.184 16.898 170.949 16.918 170.715 16.922 cv
170.176 16.918 169.703 16.84 169.289 16.672 cv
168.875 16.508 168.527 16.262 168.25 15.937 cv
167.965 15.613 167.754 15.219 167.613 14.75 cv
167.473 14.285 167.402 13.746 167.402 13.141 cv
167.402 12.445 167.488 11.848 167.66 11.34 cv
167.832 10.836 168.074 10.414 168.391 10.082 cv
168.699 9.75 169.066 9.50403 169.496 9.34003 cv
169.918 9.17999 170.387 9.09802 170.898 9.09802 cv
171.105 9.09802 171.309 9.117 171.512 9.15198 cv
171.707 9.19098 171.895 9.242 172.07 9.30103 cv
172.242 9.367 172.398 9.43701 172.539 9.51202 cv
172.676 9.59399 172.773 9.65997 172.832 9.71503 cv
172.887 9.77301 172.926 9.82001 172.953 9.85498 cv
172.973 9.89801 172.992 9.94897 173.008 10.008 cv
173.02 10.074 173.031 10.152 173.039 10.238 cv
173.047 10.332 173.051 10.441 173.051 10.57 cv
173.051 10.875 173.023 11.086 172.973 11.207 cv
172.918 11.328 172.852 11.391 172.77 11.387 cv
172.68 11.391 172.586 11.355 172.488 11.281 cv
172.387 11.211 172.27 11.129 172.137 11.039 cv
172.004 10.953 171.844 10.871 171.656 10.797 cv
171.469 10.727 171.242 10.691 170.984 10.687 cv
170.473 10.691 170.086 10.887 169.816 11.277 cv
169.543 11.668 169.406 12.242 169.41 13 cv
169.406 13.375 169.441 13.707 169.512 13.992 cv
169.578 14.277 169.676 14.516 169.813 14.707 cv
169.941 14.902 170.109 15.047 170.313 15.141 cv
170.512 15.238 170.742 15.285 171.008 15.285 cv
171.273 15.285 171.508 15.246 171.707 15.164 cv
171.898 15.086 172.066 14.996 172.215 14.895 cv
172.355 14.797 172.48 14.707 172.582 14.625 cv
172.68 14.547 172.762 14.508 172.832 14.504 cv
172.875 14.508 172.914 14.52 172.949 14.543 cv
172.977 14.57 173 14.617 173.023 14.687 cv
173.039 14.758 173.055 14.848 173.066 14.957 cv
173.074 15.066 173.078 15.207 173.082 15.379 cv
cp
f
180.352 16.508 mo
180.348 16.586 180.32 16.641 180.273 16.68 cv
180.219 16.723 180.137 16.75 180.027 16.77 cv
179.91 16.785 179.746 16.797 179.531 16.797 cv
179.293 16.797 179.121 16.785 179.02 16.77 cv
178.91 16.75 178.836 16.723 178.797 16.68 cv
178.75 16.641 178.73 16.586 178.73 16.508 cv
178.73 15.957 li
178.441 16.266 178.113 16.504 177.75 16.672 cv
177.383 16.844 176.977 16.926 176.531 16.93 cv
176.16 16.926 175.82 16.879 175.512 16.785 cv
175.203 16.691 174.938 16.551 174.711 16.355 cv
174.484 16.168 174.309 15.934 174.184 15.652 cv
174.059 15.375 173.996 15.047 174 14.668 cv
173.996 14.27 174.074 13.918 174.234 13.613 cv
174.391 13.316 174.629 13.07 174.945 12.875 cv
175.258 12.684 175.648 12.539 176.117 12.441 cv
176.586 12.352 177.129 12.305 177.746 12.301 cv
178.426 12.301 li
178.426 11.879 li
178.426 11.664 178.402 11.473 178.359 11.309 cv
178.313 11.148 178.238 11.012 178.141 10.898 cv
178.035 10.793 177.902 10.711 177.734 10.656 cv
177.563 10.605 177.352 10.582 177.109 10.578 cv
176.777 10.582 176.484 10.617 176.23 10.687 cv
175.969 10.762 175.742 10.844 175.547 10.93 cv
175.348 11.023 175.184 11.102 175.055 11.172 cv
174.918 11.246 174.809 11.285 174.73 11.281 cv
174.668 11.285 174.617 11.266 174.578 11.227 cv
174.531 11.191 174.496 11.141 174.469 11.07 cv
174.438 11.008 174.414 10.922 174.402 10.82 cv
174.383 10.723 174.375 10.613 174.379 10.492 cv
174.375 10.332 174.391 10.207 174.418 10.109 cv
174.441 10.02 174.488 9.93402 174.566 9.85498 cv
174.637 9.78101 174.766 9.69897 174.949 9.60901 cv
175.129 9.52002 175.34 9.43402 175.586 9.35498 cv
175.828 9.27698 176.098 9.21503 176.387 9.164 cv
176.676 9.117 176.973 9.09399 177.281 9.09003 cv
177.824 9.09399 178.289 9.14502 178.676 9.25 cv
179.063 9.35901 179.383 9.52301 179.633 9.742 cv
179.883 9.961 180.063 10.246 180.18 10.594 cv
180.289 10.945 180.348 11.359 180.352 11.832 cv
cp
178.426 13.531 mo
177.676 13.531 li
177.359 13.535 177.09 13.559 176.867 13.602 cv
176.641 13.652 176.457 13.723 176.32 13.812 cv
176.176 13.91 176.074 14.023 176.012 14.152 cv
175.945 14.289 175.91 14.437 175.914 14.605 cv
175.91 14.898 176.004 15.129 176.191 15.293 cv
176.375 15.461 176.633 15.543 176.961 15.543 cv
177.234 15.543 177.484 15.473 177.719 15.332 cv
177.945 15.191 178.184 14.988 178.426 14.715 cv
cp
f
184.277 16.484 mo
184.273 16.539 184.258 16.582 184.23 16.621 cv
184.195 16.66 184.141 16.695 184.07 16.719 cv
183.992 16.746 183.895 16.762 183.77 16.777 cv
183.645 16.789 183.484 16.797 183.297 16.797 cv
183.102 16.797 182.945 16.789 182.82 16.777 cv
182.695 16.762 182.594 16.746 182.52 16.719 cv
182.441 16.695 182.387 16.66 182.359 16.621 cv
182.324 16.582 182.309 16.539 182.313 16.484 cv
182.313 6.23798 li
182.309 6.18701 182.324 6.14099 182.359 6.09802 cv
182.387 6.05902 182.441 6.02301 182.52 5.992 cv
182.594 5.96503 182.695 5.94501 182.82 5.92603 cv
182.945 5.914 183.102 5.90601 183.297 5.90198 cv
183.484 5.90601 183.645 5.914 183.77 5.92603 cv
183.895 5.94501 183.992 5.96503 184.07 5.992 cv
184.141 6.02301 184.195 6.05902 184.23 6.09802 cv
184.258 6.14099 184.273 6.18701 184.277 6.23798 cv
cp
f
188.25 16.484 mo
188.246 16.539 188.23 16.582 188.203 16.621 cv
188.168 16.66 188.113 16.695 188.043 16.719 cv
187.965 16.746 187.867 16.762 187.742 16.777 cv
187.617 16.789 187.457 16.797 187.27 16.797 cv
187.074 16.797 186.918 16.789 186.793 16.777 cv
186.668 16.762 186.566 16.746 186.492 16.719 cv
186.414 16.695 186.359 16.66 186.332 16.621 cv
186.297 16.582 186.281 16.539 186.285 16.484 cv
186.285 9.55103 li
186.281 9.5 186.297 9.453 186.332 9.414 cv
186.359 9.375 186.414 9.34399 186.492 9.31201 cv
186.566 9.289 186.668 9.26599 186.793 9.24597 cv
186.918 9.23401 187.074 9.22699 187.27 9.22302 cv
187.457 9.22699 187.617 9.23401 187.742 9.24597 cv
187.867 9.26599 187.965 9.289 188.043 9.31201 cv
188.113 9.34399 188.168 9.375 188.203 9.414 cv
188.23 9.453 188.246 9.5 188.25 9.55103 cv
cp
188.398 7.17999 mo
188.398 7.578 188.316 7.85199 188.156 8 cv
187.992 8.15198 187.695 8.22699 187.262 8.22302 cv
186.816 8.22699 186.516 8.15198 186.367 8.008 cv
186.211 7.86298 186.137 7.60199 186.137 7.21899 cv
186.137 6.82397 186.215 6.55103 186.375 6.39801 cv
186.531 6.24597 186.832 6.16803 187.277 6.16803 cv
187.711 6.16803 188.008 6.242 188.164 6.39099 cv
188.32 6.539 188.398 6.80499 188.398 7.17999 cv
cp
f
196.852 16.484 mo
196.848 16.539 196.832 16.582 196.805 16.621 cv
196.77 16.66 196.719 16.695 196.648 16.719 cv
196.574 16.746 196.473 16.762 196.348 16.777 cv
196.219 16.789 196.063 16.797 195.879 16.797 cv
195.684 16.797 195.523 16.789 195.398 16.777 cv
195.27 16.762 195.168 16.746 195.098 16.719 cv
195.02 16.695 194.969 16.66 194.941 16.621 cv
194.906 16.582 194.891 16.539 194.895 16.484 cv
194.895 12.52 li
194.891 12.184 194.867 11.918 194.82 11.723 cv
194.77 11.531 194.695 11.367 194.605 11.23 cv
194.512 11.094 194.395 10.988 194.246 10.91 cv
194.098 10.836 193.922 10.797 193.727 10.797 cv
193.473 10.797 193.223 10.891 192.969 11.07 cv
192.715 11.254 192.449 11.516 192.176 11.863 cv
192.176 16.484 li
192.172 16.539 192.156 16.582 192.129 16.621 cv
192.094 16.66 192.039 16.695 191.969 16.719 cv
191.891 16.746 191.793 16.762 191.668 16.777 cv
191.543 16.789 191.383 16.797 191.195 16.797 cv
191 16.797 190.844 16.789 190.719 16.777 cv
190.594 16.762 190.492 16.746 190.418 16.719 cv
190.34 16.695 190.285 16.66 190.258 16.621 cv
190.223 16.582 190.207 16.539 190.211 16.484 cv
190.211 9.53497 li
190.207 9.48798 190.223 9.44098 190.25 9.39801 cv
190.273 9.36298 190.32 9.33197 190.391 9.30103 cv
190.457 9.27698 190.543 9.258 190.652 9.242 cv
190.758 9.23401 190.891 9.22699 191.055 9.22302 cv
191.219 9.22699 191.355 9.23401 191.465 9.242 cv
191.57 9.258 191.656 9.27698 191.719 9.30103 cv
191.777 9.33197 191.82 9.36298 191.848 9.39801 cv
191.871 9.44098 191.883 9.48798 191.887 9.53497 cv
191.887 10.336 li
192.27 9.92603 192.66 9.61298 193.059 9.40198 cv
193.453 9.19501 193.871 9.09399 194.305 9.09003 cv
194.773 9.09399 195.172 9.172 195.5 9.32397 cv
195.824 9.48401 196.086 9.69501 196.285 9.961 cv
196.484 10.23 196.629 10.543 196.719 10.898 cv
196.805 11.258 196.848 11.687 196.852 12.191 cv
cp
f
205.047 10.016 mo
205.043 10.27 205.016 10.453 204.961 10.57 cv
204.902 10.691 204.832 10.75 204.754 10.75 cv
203.934 10.75 li
204.047 10.875 204.129 11.02 204.18 11.176 cv
204.227 11.336 204.25 11.5 204.254 11.668 cv
204.25 12.078 204.184 12.437 204.051 12.75 cv
203.914 13.066 203.719 13.332 203.469 13.543 cv
203.215 13.762 202.914 13.926 202.559 14.035 cv
202.199 14.152 201.801 14.207 201.371 14.203 cv
201.145 14.207 200.934 14.18 200.73 14.121 cv
200.527 14.07 200.371 14.008 200.262 13.93 cv
200.199 14 200.141 14.078 200.094 14.172 cv
200.043 14.266 200.02 14.371 200.023 14.48 cv
200.02 14.637 200.086 14.758 200.219 14.852 cv
200.348 14.949 200.535 15.004 200.777 15.012 cv
202.469 15.074 li
202.863 15.09 203.215 15.148 203.523 15.242 cv
203.832 15.344 204.094 15.477 204.305 15.648 cv
204.516 15.824 204.676 16.035 204.785 16.277 cv
204.895 16.523 204.949 16.797 204.953 17.109 cv
204.949 17.445 204.875 17.77 204.727 18.078 cv
204.578 18.379 204.352 18.641 204.051 18.867 cv
203.746 19.086 203.367 19.266 202.914 19.398 cv
202.457 19.527 201.926 19.59 201.324 19.594 cv
200.727 19.59 200.223 19.543 199.805 19.453 cv
199.387 19.355 199.043 19.227 198.777 19.062 cv
198.508 18.895 198.313 18.695 198.195 18.469 cv
198.07 18.234 198.012 17.98 198.012 17.707 cv
198.012 17.535 198.031 17.375 198.078 17.219 cv
198.117 17.062 198.184 16.91 198.273 16.77 cv
198.355 16.625 198.461 16.492 198.586 16.359 cv
198.711 16.23 198.852 16.105 199.016 15.984 cv
198.789 15.871 198.617 15.711 198.496 15.5 cv
198.375 15.297 198.316 15.07 198.316 14.824 cv
198.316 14.523 198.383 14.246 198.523 13.988 cv
198.66 13.738 198.844 13.508 199.07 13.305 cv
198.887 13.125 198.742 12.91 198.633 12.652 cv
198.523 12.402 198.469 12.082 198.473 11.699 cv
198.469 11.297 198.539 10.937 198.684 10.613 cv
198.824 10.297 199.023 10.027 199.281 9.80499 cv
199.535 9.586 199.84 9.414 200.191 9.297 cv
200.543 9.17999 200.934 9.12097 201.363 9.12097 cv
201.582 9.12097 201.789 9.13702 201.988 9.15997 cv
202.188 9.19098 202.375 9.22699 202.547 9.27002 cv
204.754 9.27002 li
204.836 9.27301 204.906 9.33197 204.965 9.44098 cv
205.016 9.55902 205.043 9.75 205.047 10.016 cv
cp
202.531 11.66 mo
202.527 11.289 202.426 11 202.219 10.789 cv
202.008 10.586 201.715 10.48 201.34 10.477 cv
201.145 10.48 200.973 10.512 200.832 10.574 cv
200.684 10.641 200.563 10.73 200.469 10.84 cv
200.367 10.953 200.297 11.082 200.254 11.23 cv
200.203 11.379 200.18 11.535 200.184 11.691 cv
200.18 12.051 200.285 12.328 200.496 12.531 cv
200.703 12.738 200.992 12.844 201.363 12.84 cv
201.559 12.844 201.727 12.812 201.875 12.746 cv
202.016 12.687 202.137 12.602 202.238 12.488 cv
202.332 12.383 202.406 12.254 202.457 12.109 cv
202.504 11.969 202.527 11.82 202.531 11.66 cv
cp
202.992 17.211 mo
202.992 16.973 202.898 16.797 202.711 16.672 cv
202.523 16.551 202.266 16.48 201.938 16.469 cv
200.543 16.43 li
200.406 16.531 200.297 16.625 200.219 16.715 cv
200.137 16.805 200.074 16.891 200.027 16.977 cv
199.977 17.059 199.941 17.141 199.93 17.219 cv
199.91 17.297 199.902 17.375 199.906 17.461 cv
199.902 17.715 200.035 17.914 200.297 18.051 cv
200.559 18.184 200.93 18.25 201.41 18.254 cv
201.703 18.25 201.949 18.219 202.156 18.164 cv
202.355 18.102 202.52 18.023 202.648 17.926 cv
202.77 17.824 202.859 17.715 202.914 17.594 cv
202.965 17.473 202.992 17.344 202.992 17.211 cv
cp
f
211.242 14.52 mo
211.238 14.918 211.164 15.266 211.02 15.566 cv
210.871 15.867 210.664 16.121 210.395 16.32 cv
210.121 16.527 209.801 16.676 209.434 16.777 cv
209.066 16.875 208.664 16.926 208.234 16.93 cv
207.969 16.926 207.723 16.906 207.488 16.871 cv
207.254 16.828 207.043 16.781 206.855 16.723 cv
206.668 16.664 206.512 16.602 206.387 16.539 cv
206.262 16.477 206.168 16.418 206.113 16.363 cv
206.055 16.309 206.012 16.227 205.984 16.109 cv
205.949 15.996 205.934 15.82 205.938 15.59 cv
205.934 15.441 205.941 15.32 205.953 15.227 cv
205.961 15.137 205.977 15.066 206 15.008 cv
206.02 14.957 206.043 14.918 206.078 14.898 cv
206.105 14.883 206.145 14.875 206.191 14.871 cv
206.246 14.875 206.332 14.906 206.445 14.969 cv
206.555 15.035 206.691 15.109 206.863 15.184 cv
207.027 15.266 207.223 15.336 207.441 15.402 cv
207.66 15.473 207.91 15.508 208.195 15.504 cv
208.371 15.508 208.527 15.488 208.668 15.449 cv
208.801 15.414 208.922 15.363 209.027 15.293 cv
209.125 15.227 209.199 15.141 209.254 15.035 cv
209.301 14.934 209.328 14.812 209.332 14.676 cv
209.328 14.52 209.281 14.387 209.188 14.277 cv
209.094 14.168 208.965 14.07 208.809 13.984 cv
208.645 13.902 208.465 13.824 208.27 13.75 cv
208.066 13.68 207.863 13.602 207.652 13.508 cv
207.441 13.422 207.234 13.32 207.039 13.203 cv
206.836 13.094 206.656 12.953 206.5 12.785 cv
206.336 12.621 206.211 12.422 206.117 12.184 cv
206.023 11.953 205.977 11.672 205.977 11.34 cv
205.977 11.012 206.039 10.707 206.168 10.426 cv
206.297 10.152 206.484 9.914 206.73 9.71503 cv
206.973 9.52002 207.27 9.367 207.621 9.25403 cv
207.969 9.14801 208.363 9.09399 208.805 9.09003 cv
209.02 9.09399 209.23 9.10901 209.438 9.13702 cv
209.641 9.172 209.828 9.211 209.996 9.25403 cv
210.16 9.30499 210.301 9.35498 210.418 9.40601 cv
210.531 9.46503 210.613 9.51202 210.664 9.547 cv
210.711 9.59003 210.746 9.62903 210.77 9.664 cv
210.789 9.70697 210.801 9.75403 210.813 9.80499 cv
210.82 9.85901 210.832 9.92603 210.84 10.004 cv
210.848 10.09 210.852 10.187 210.852 10.305 cv
210.852 10.445 210.848 10.562 210.84 10.648 cv
210.832 10.742 210.816 10.812 210.801 10.859 cv
210.781 10.914 210.758 10.949 210.73 10.965 cv
210.695 10.988 210.66 10.996 210.621 10.992 cv
210.57 10.996 210.496 10.969 210.402 10.91 cv
210.301 10.859 210.18 10.801 210.031 10.734 cv
209.883 10.676 209.711 10.617 209.516 10.559 cv
209.32 10.508 209.098 10.48 208.852 10.477 cv
208.672 10.48 208.52 10.5 208.391 10.531 cv
208.258 10.57 208.148 10.621 208.07 10.687 cv
207.984 10.758 207.922 10.836 207.883 10.926 cv
207.836 11.02 207.816 11.117 207.82 11.219 cv
207.816 11.379 207.867 11.516 207.969 11.621 cv
208.066 11.734 208.195 11.828 208.359 11.91 cv
208.52 11.996 208.703 12.074 208.91 12.145 cv
209.113 12.219 209.32 12.301 209.531 12.383 cv
209.738 12.473 209.945 12.57 210.156 12.684 cv
210.359 12.797 210.543 12.937 210.703 13.102 cv
210.863 13.27 210.992 13.469 211.094 13.699 cv
211.188 13.934 211.238 14.207 211.242 14.52 cv
cp
f
223.352 12.937 mo
223.348 13.535 223.27 14.078 223.117 14.562 cv
222.957 15.055 222.723 15.473 222.406 15.824 cv
222.09 16.176 221.691 16.449 221.215 16.641 cv
220.734 16.832 220.176 16.926 219.539 16.93 cv
218.918 16.926 218.379 16.844 217.926 16.672 cv
217.465 16.504 217.086 16.254 216.789 15.926 cv
216.484 15.602 216.262 15.199 216.117 14.719 cv
215.973 14.242 215.902 13.695 215.902 13.078 cv
215.902 12.488 215.98 11.949 216.137 11.457 cv
216.293 10.969 216.531 10.547 216.852 10.195 cv
217.168 9.84802 217.563 9.57397 218.039 9.37903 cv
218.512 9.18701 219.07 9.09399 219.711 9.09003 cv
220.336 9.09399 220.875 9.17603 221.332 9.34399 cv
221.789 9.51599 222.168 9.76599 222.465 10.09 cv
222.762 10.418 222.984 10.82 223.133 11.297 cv
223.277 11.777 223.348 12.324 223.352 12.937 cv
cp
221.332 13.016 mo
221.328 12.68 221.301 12.363 221.25 12.07 cv
221.191 11.785 221.098 11.535 220.973 11.32 cv
220.84 11.109 220.668 10.941 220.457 10.82 cv
220.238 10.703 219.969 10.645 219.641 10.641 cv
219.352 10.645 219.098 10.699 218.879 10.801 cv
218.66 10.91 218.48 11.066 218.34 11.27 cv
218.199 11.477 218.094 11.723 218.023 12.008 cv
217.953 12.301 217.918 12.629 217.918 12.992 cv
217.918 13.34 217.945 13.656 218.004 13.941 cv
218.059 14.234 218.152 14.484 218.281 14.695 cv
218.406 14.91 218.578 15.074 218.801 15.187 cv
219.016 15.309 219.285 15.367 219.609 15.363 cv
219.902 15.367 220.16 15.312 220.383 15.203 cv
220.598 15.098 220.777 14.945 220.918 14.738 cv
221.059 14.539 221.16 14.293 221.23 14.004 cv
221.293 13.719 221.328 13.391 221.332 13.016 cv
cp
f
229.105 6.883 mo
229.102 7.03497 229.098 7.15601 229.09 7.24597 cv
229.078 7.34003 229.063 7.40997 229.043 7.45697 cv
229.02 7.508 228.996 7.54303 228.973 7.55902 cv
228.945 7.578 228.918 7.586 228.887 7.586 cv
228.848 7.586 228.805 7.578 228.766 7.55902 cv
228.719 7.54303 228.664 7.52301 228.602 7.5 cv
228.531 7.47998 228.457 7.461 228.371 7.44098 cv
228.281 7.42603 228.176 7.41803 228.059 7.414 cv
227.914 7.41803 227.793 7.43701 227.695 7.47998 cv
227.594 7.52698 227.512 7.59802 227.445 7.69098 cv
227.375 7.789 227.324 7.914 227.297 8.06598 cv
227.262 8.21899 227.246 8.40601 227.25 8.62903 cv
227.25 9.27002 li
228.52 9.27002 li
228.563 9.27301 228.605 9.28497 228.648 9.30902 cv
228.684 9.336 228.719 9.37903 228.746 9.43701 cv
228.77 9.5 228.789 9.58197 228.805 9.68402 cv
228.816 9.78497 228.82 9.914 228.824 10.062 cv
228.82 10.352 228.797 10.555 228.746 10.676 cv
228.691 10.801 228.613 10.863 228.52 10.859 cv
227.25 10.859 li
227.25 16.484 li
227.246 16.539 227.23 16.582 227.203 16.621 cv
227.168 16.66 227.117 16.695 227.047 16.719 cv
226.973 16.746 226.871 16.762 226.742 16.777 cv
226.609 16.789 226.449 16.797 226.266 16.797 cv
226.078 16.797 225.922 16.789 225.797 16.777 cv
225.668 16.762 225.566 16.746 225.492 16.719 cv
225.414 16.695 225.363 16.66 225.336 16.621 cv
225.305 16.582 225.289 16.539 225.293 16.484 cv
225.293 10.859 li
224.422 10.859 li
224.32 10.863 224.246 10.801 224.199 10.676 cv
224.148 10.555 224.121 10.352 224.125 10.062 cv
224.121 9.914 224.129 9.78497 224.145 9.68402 cv
224.156 9.58197 224.176 9.5 224.199 9.43701 cv
224.223 9.37903 224.254 9.336 224.293 9.30902 cv
224.332 9.28497 224.375 9.27301 224.43 9.27002 cv
225.293 9.27002 li
225.293 8.68402 li
225.289 8.21503 225.336 7.80103 225.434 7.44098 cv
225.523 7.086 225.672 6.789 225.875 6.55499 cv
226.074 6.32001 226.328 6.14502 226.637 6.02002 cv
226.945 5.90198 227.309 5.84003 227.734 5.84003 cv
227.93 5.84003 228.121 5.85901 228.309 5.89099 cv
228.488 5.92999 228.633 5.96503 228.738 6 cv
228.84 6.04303 228.91 6.078 228.949 6.10901 cv
228.984 6.14502 229.016 6.19501 229.039 6.258 cv
229.063 6.32397 229.078 6.40601 229.09 6.508 cv
229.098 6.60901 229.102 6.73401 229.105 6.883 cv
cp
f
237.676 15.801 mo
237.676 16.027 237.66 16.203 237.633 16.324 cv
237.602 16.449 237.563 16.535 237.52 16.582 cv
237.469 16.633 237.402 16.676 237.313 16.715 cv
237.219 16.754 237.109 16.785 236.992 16.816 cv
236.867 16.84 236.734 16.863 236.594 16.883 cv
236.449 16.895 236.309 16.902 236.164 16.906 cv
235.773 16.902 235.434 16.852 235.148 16.758 cv
234.863 16.656 234.629 16.508 234.441 16.301 cv
234.254 16.098 234.113 15.84 234.027 15.527 cv
233.934 15.219 233.891 14.848 233.895 14.418 cv
233.895 10.859 li
233.063 10.859 li
232.961 10.863 232.887 10.801 232.836 10.676 cv
232.781 10.555 232.754 10.352 232.758 10.062 cv
232.754 9.914 232.762 9.78497 232.777 9.68402 cv
232.789 9.58197 232.809 9.5 232.836 9.43701 cv
232.859 9.37903 232.891 9.336 232.934 9.30902 cv
232.969 9.28497 233.016 9.27301 233.07 9.27002 cv
233.895 9.27002 li
233.895 7.71899 li
233.891 7.672 233.906 7.625 233.938 7.578 cv
233.965 7.539 234.016 7.50403 234.094 7.47302 cv
234.168 7.44897 234.27 7.42603 234.398 7.40997 cv
234.523 7.39801 234.68 7.39502 234.871 7.39099 cv
235.059 7.39502 235.219 7.39801 235.348 7.40997 cv
235.473 7.42603 235.574 7.44897 235.648 7.47302 cv
235.719 7.50403 235.77 7.539 235.805 7.578 cv
235.832 7.625 235.848 7.672 235.852 7.71899 cv
235.852 9.27002 li
237.363 9.27002 li
237.414 9.27301 237.461 9.28497 237.5 9.30902 cv
237.539 9.336 237.57 9.37903 237.598 9.43701 cv
237.621 9.5 237.641 9.58197 237.656 9.68402 cv
237.668 9.78497 237.676 9.914 237.676 10.062 cv
237.676 10.352 237.648 10.555 237.598 10.676 cv
237.543 10.801 237.469 10.863 237.371 10.859 cv
235.852 10.859 li
235.852 14.125 li
235.848 14.504 235.906 14.789 236.031 14.977 cv
236.148 15.168 236.363 15.262 236.668 15.262 cv
236.77 15.262 236.863 15.254 236.949 15.234 cv
237.031 15.219 237.105 15.199 237.172 15.172 cv
237.234 15.152 237.289 15.129 237.336 15.109 cv
237.379 15.094 237.418 15.086 237.457 15.082 cv
237.484 15.086 237.516 15.094 237.547 15.109 cv
237.574 15.129 237.594 15.168 237.613 15.219 cv
237.625 15.277 237.641 15.352 237.656 15.441 cv
237.668 15.539 237.676 15.656 237.676 15.801 cv
cp
f
245.738 16.484 mo
245.734 16.539 245.719 16.582 245.691 16.621 cv
245.656 16.66 245.605 16.695 245.535 16.719 cv
245.461 16.746 245.359 16.762 245.234 16.777 cv
245.105 16.789 244.949 16.797 244.766 16.797 cv
244.57 16.797 244.41 16.789 244.285 16.777 cv
244.156 16.762 244.055 16.746 243.984 16.719 cv
243.906 16.695 243.855 16.66 243.828 16.621 cv
243.793 16.582 243.777 16.539 243.781 16.484 cv
243.781 12.52 li
243.777 12.184 243.754 11.918 243.707 11.723 cv
243.656 11.531 243.582 11.367 243.492 11.23 cv
243.398 11.094 243.281 10.988 243.133 10.91 cv
242.984 10.836 242.809 10.797 242.613 10.797 cv
242.359 10.797 242.109 10.891 241.855 11.07 cv
241.602 11.254 241.336 11.516 241.063 11.863 cv
241.063 16.484 li
241.059 16.539 241.043 16.582 241.016 16.621 cv
240.98 16.66 240.926 16.695 240.855 16.719 cv
240.777 16.746 240.68 16.762 240.555 16.777 cv
240.43 16.789 240.27 16.797 240.082 16.797 cv
239.887 16.797 239.73 16.789 239.605 16.777 cv
239.48 16.762 239.379 16.746 239.305 16.719 cv
239.227 16.695 239.172 16.66 239.145 16.621 cv
239.109 16.582 239.094 16.539 239.098 16.484 cv
239.098 6.23798 li
239.094 6.18701 239.109 6.14099 239.145 6.09802 cv
239.172 6.05902 239.227 6.02301 239.305 5.992 cv
239.379 5.96503 239.48 5.94501 239.605 5.92603 cv
239.73 5.914 239.887 5.90601 240.082 5.90198 cv
240.27 5.90601 240.43 5.914 240.555 5.92603 cv
240.68 5.94501 240.777 5.96503 240.855 5.992 cv
240.926 6.02301 240.98 6.05902 241.016 6.09802 cv
241.043 6.14099 241.059 6.18701 241.063 6.23798 cv
241.063 10.078 li
241.398 9.75 241.742 9.50403 242.094 9.336 cv
242.441 9.17603 242.809 9.09399 243.191 9.09003 cv
243.66 9.09399 244.059 9.172 244.387 9.32397 cv
244.711 9.48401 244.973 9.69501 245.172 9.96503 cv
245.371 10.234 245.516 10.551 245.605 10.91 cv
245.691 11.273 245.734 11.711 245.738 12.223 cv
cp
f
254.027 12.809 mo
254.023 13.047 253.973 13.223 253.867 13.336 cv
253.758 13.453 253.609 13.512 253.43 13.508 cv
249.195 13.508 li
249.191 13.809 249.227 14.078 249.301 14.316 cv
249.367 14.559 249.48 14.762 249.637 14.93 cv
249.789 15.102 249.984 15.23 250.227 15.316 cv
250.465 15.406 250.754 15.449 251.098 15.449 cv
251.438 15.449 251.738 15.426 252 15.375 cv
252.258 15.328 252.484 15.273 252.676 15.211 cv
252.863 15.152 253.02 15.098 253.148 15.047 cv
253.27 15 253.371 14.977 253.453 14.973 cv
253.496 14.977 253.535 14.984 253.57 15 cv
253.598 15.02 253.625 15.051 253.645 15.098 cv
253.664 15.145 253.676 15.211 253.688 15.297 cv
253.691 15.383 253.695 15.492 253.699 15.621 cv
253.695 15.738 253.695 15.836 253.691 15.914 cv
253.684 15.996 253.676 16.062 253.668 16.117 cv
253.656 16.176 253.641 16.227 253.621 16.262 cv
253.602 16.305 253.574 16.34 253.543 16.375 cv
253.508 16.414 253.414 16.465 253.266 16.523 cv
253.109 16.59 252.918 16.652 252.688 16.707 cv
252.449 16.77 252.18 16.816 251.883 16.863 cv
251.578 16.902 251.258 16.926 250.918 16.93 cv
250.297 16.926 249.754 16.852 249.293 16.695 cv
248.824 16.543 248.438 16.305 248.129 15.988 cv
247.813 15.672 247.578 15.273 247.43 14.789 cv
247.273 14.309 247.199 13.742 247.203 13.086 cv
247.199 12.473 247.277 11.914 247.441 11.418 cv
247.598 10.922 247.832 10.504 248.145 10.156 cv
248.449 9.81201 248.824 9.547 249.262 9.36298 cv
249.699 9.18402 250.191 9.09399 250.746 9.09003 cv
251.324 9.09399 251.824 9.17999 252.238 9.34802 cv
252.652 9.52301 252.988 9.76202 253.254 10.062 cv
253.516 10.367 253.711 10.727 253.84 11.141 cv
253.961 11.559 254.023 12.008 254.027 12.496 cv
cp
252.125 12.246 mo
252.137 11.695 252.027 11.262 251.793 10.949 cv
251.559 10.637 251.191 10.48 250.699 10.477 cv
250.449 10.48 250.234 10.527 250.051 10.617 cv
249.863 10.715 249.711 10.84 249.59 10.996 cv
249.465 11.156 249.371 11.344 249.309 11.559 cv
249.242 11.773 249.203 12.004 249.195 12.246 cv
cp
f
265.129 7.508 mo
265.125 7.66803 265.121 7.797 265.109 7.90198 cv
265.094 8.01202 265.07 8.09802 265.047 8.15601 cv
265.016 8.21899 264.984 8.26599 264.949 8.29303 cv
264.91 8.328 264.867 8.34399 264.824 8.34003 cv
261.527 8.34003 li
261.527 11.055 li
264.621 11.055 li
264.664 11.055 264.707 11.07 264.746 11.094 cv
264.781 11.125 264.813 11.168 264.844 11.227 cv
264.871 11.289 264.891 11.371 264.906 11.473 cv
264.914 11.578 264.922 11.707 264.926 11.863 cv
264.922 12.02 264.914 12.152 264.906 12.254 cv
264.891 12.363 264.871 12.449 264.844 12.512 cv
264.813 12.582 264.781 12.629 264.746 12.656 cv
264.707 12.687 264.664 12.703 264.621 12.699 cv
261.527 12.699 li
261.527 16.453 li
261.523 16.512 261.508 16.562 261.48 16.602 cv
261.445 16.648 261.391 16.684 261.313 16.707 cv
261.23 16.738 261.125 16.758 260.996 16.773 cv
260.863 16.789 260.695 16.797 260.5 16.797 cv
260.297 16.797 260.133 16.789 260.004 16.773 cv
259.867 16.758 259.762 16.738 259.688 16.707 cv
259.605 16.684 259.551 16.648 259.52 16.602 cv
259.484 16.562 259.465 16.512 259.469 16.453 cv
259.469 7.31201 li
259.465 7.086 259.523 6.922 259.645 6.81598 cv
259.758 6.71899 259.902 6.66803 260.078 6.664 cv
264.824 6.664 li
264.867 6.66803 264.91 6.67999 264.949 6.70697 cv
264.984 6.73798 265.016 6.78497 265.047 6.84802 cv
265.07 6.914 265.094 7.00403 265.109 7.10901 cv
265.121 7.22302 265.125 7.35498 265.129 7.508 cv
cp
f
268.641 16.484 mo
268.637 16.539 268.621 16.582 268.594 16.621 cv
268.559 16.66 268.504 16.695 268.434 16.719 cv
268.355 16.746 268.258 16.762 268.133 16.777 cv
268.008 16.789 267.848 16.797 267.66 16.797 cv
267.465 16.797 267.309 16.789 267.184 16.777 cv
267.059 16.762 266.957 16.746 266.883 16.719 cv
266.805 16.695 266.75 16.66 266.723 16.621 cv
266.688 16.582 266.672 16.539 266.676 16.484 cv
266.676 9.55103 li
266.672 9.5 266.688 9.453 266.723 9.414 cv
266.75 9.375 266.805 9.34399 266.883 9.31201 cv
266.957 9.289 267.059 9.26599 267.184 9.24597 cv
267.309 9.23401 267.465 9.22699 267.66 9.22302 cv
267.848 9.22699 268.008 9.23401 268.133 9.24597 cv
268.258 9.26599 268.355 9.289 268.434 9.31201 cv
268.504 9.34399 268.559 9.375 268.594 9.414 cv
268.621 9.453 268.637 9.5 268.641 9.55103 cv
cp
268.789 7.17999 mo
268.789 7.578 268.707 7.85199 268.547 8 cv
268.383 8.15198 268.086 8.22699 267.652 8.22302 cv
267.207 8.22699 266.906 8.15198 266.758 8.008 cv
266.602 7.86298 266.527 7.60199 266.527 7.21899 cv
266.527 6.82397 266.605 6.55103 266.766 6.39801 cv
266.922 6.24597 267.223 6.16803 267.668 6.16803 cv
268.102 6.16803 268.398 6.242 268.555 6.39099 cv
268.711 6.539 268.789 6.80499 268.789 7.17999 cv
cp
f
272.566 16.484 mo
272.563 16.539 272.547 16.582 272.52 16.621 cv
272.484 16.66 272.43 16.695 272.359 16.719 cv
272.281 16.746 272.184 16.762 272.059 16.777 cv
271.934 16.789 271.773 16.797 271.586 16.797 cv
271.391 16.797 271.234 16.789 271.109 16.777 cv
270.984 16.762 270.883 16.746 270.809 16.719 cv
270.73 16.695 270.676 16.66 270.648 16.621 cv
270.613 16.582 270.598 16.539 270.602 16.484 cv
270.602 6.23798 li
270.598 6.18701 270.613 6.14099 270.648 6.09802 cv
270.676 6.05902 270.73 6.02301 270.809 5.992 cv
270.883 5.96503 270.984 5.94501 271.109 5.92603 cv
271.234 5.914 271.391 5.90601 271.586 5.90198 cv
271.773 5.90601 271.934 5.914 272.059 5.92603 cv
272.184 5.94501 272.281 5.96503 272.359 5.992 cv
272.43 6.02301 272.484 6.05902 272.52 6.09802 cv
272.547 6.14099 272.563 6.18701 272.566 6.23798 cv
cp
f
278.691 15.801 mo
278.691 16.027 278.676 16.203 278.648 16.324 cv
278.617 16.449 278.578 16.535 278.535 16.582 cv
278.484 16.633 278.418 16.676 278.328 16.715 cv
278.234 16.754 278.125 16.785 278.008 16.816 cv
277.883 16.84 277.75 16.863 277.609 16.883 cv
277.465 16.895 277.324 16.902 277.18 16.906 cv
276.789 16.902 276.449 16.852 276.164 16.758 cv
275.879 16.656 275.645 16.508 275.457 16.301 cv
275.27 16.098 275.129 15.84 275.043 15.527 cv
274.949 15.219 274.906 14.848 274.91 14.418 cv
274.91 10.859 li
274.078 10.859 li
273.977 10.863 273.902 10.801 273.852 10.676 cv
273.797 10.555 273.77 10.352 273.773 10.062 cv
273.77 9.914 273.777 9.78497 273.793 9.68402 cv
273.805 9.58197 273.824 9.5 273.852 9.43701 cv
273.875 9.37903 273.906 9.336 273.949 9.30902 cv
273.984 9.28497 274.031 9.27301 274.086 9.27002 cv
274.91 9.27002 li
274.91 7.71899 li
274.906 7.672 274.922 7.625 274.953 7.578 cv
274.98 7.539 275.031 7.50403 275.109 7.47302 cv
275.184 7.44897 275.285 7.42603 275.414 7.40997 cv
275.539 7.39801 275.695 7.39502 275.887 7.39099 cv
276.074 7.39502 276.234 7.39801 276.363 7.40997 cv
276.488 7.42603 276.59 7.44897 276.664 7.47302 cv
276.734 7.50403 276.785 7.539 276.82 7.578 cv
276.848 7.625 276.863 7.672 276.867 7.71899 cv
276.867 9.27002 li
278.379 9.27002 li
278.43 9.27301 278.477 9.28497 278.516 9.30902 cv
278.555 9.336 278.586 9.37903 278.613 9.43701 cv
278.637 9.5 278.656 9.58197 278.672 9.68402 cv
278.684 9.78497 278.691 9.914 278.691 10.062 cv
278.691 10.352 278.664 10.555 278.613 10.676 cv
278.559 10.801 278.484 10.863 278.387 10.859 cv
276.867 10.859 li
276.867 14.125 li
276.863 14.504 276.922 14.789 277.047 14.977 cv
277.164 15.168 277.379 15.262 277.684 15.262 cv
277.785 15.262 277.879 15.254 277.965 15.234 cv
278.047 15.219 278.121 15.199 278.188 15.172 cv
278.25 15.152 278.305 15.129 278.352 15.109 cv
278.395 15.094 278.434 15.086 278.473 15.082 cv
278.5 15.086 278.531 15.094 278.563 15.109 cv
278.59 15.129 278.609 15.168 278.629 15.219 cv
278.641 15.277 278.656 15.352 278.672 15.441 cv
278.684 15.539 278.691 15.656 278.691 15.801 cv
cp
f
286.281 12.809 mo
286.277 13.047 286.227 13.223 286.121 13.336 cv
286.012 13.453 285.863 13.512 285.684 13.508 cv
281.449 13.508 li
281.445 13.809 281.48 14.078 281.555 14.316 cv
281.621 14.559 281.734 14.762 281.891 14.93 cv
282.043 15.102 282.238 15.23 282.48 15.316 cv
282.719 15.406 283.008 15.449 283.352 15.449 cv
283.691 15.449 283.992 15.426 284.254 15.375 cv
284.512 15.328 284.738 15.273 284.93 15.211 cv
285.117 15.152 285.273 15.098 285.402 15.047 cv
285.523 15 285.625 14.977 285.707 14.973 cv
285.75 14.977 285.789 14.984 285.824 15 cv
285.852 15.02 285.879 15.051 285.898 15.098 cv
285.918 15.145 285.93 15.211 285.941 15.297 cv
285.945 15.383 285.949 15.492 285.953 15.621 cv
285.949 15.738 285.949 15.836 285.945 15.914 cv
285.938 15.996 285.93 16.062 285.922 16.117 cv
285.91 16.176 285.895 16.227 285.875 16.262 cv
285.855 16.305 285.828 16.34 285.797 16.375 cv
285.762 16.414 285.668 16.465 285.52 16.523 cv
285.363 16.59 285.172 16.652 284.941 16.707 cv
284.703 16.77 284.434 16.816 284.137 16.863 cv
283.832 16.902 283.512 16.926 283.172 16.93 cv
282.551 16.926 282.008 16.852 281.547 16.695 cv
281.078 16.543 280.691 16.305 280.383 15.988 cv
280.066 15.672 279.832 15.273 279.684 14.789 cv
279.527 14.309 279.453 13.742 279.457 13.086 cv
279.453 12.473 279.531 11.914 279.695 11.418 cv
279.852 10.922 280.086 10.504 280.398 10.156 cv
280.703 9.81201 281.078 9.547 281.516 9.36298 cv
281.953 9.18402 282.445 9.09399 283 9.09003 cv
283.578 9.09399 284.078 9.17999 284.492 9.34802 cv
284.906 9.52301 285.242 9.76202 285.508 10.062 cv
285.77 10.367 285.965 10.727 286.094 11.141 cv
286.215 11.559 286.277 12.008 286.281 12.496 cv
cp
284.379 12.246 mo
284.391 11.695 284.281 11.262 284.047 10.949 cv
283.813 10.637 283.445 10.48 282.953 10.477 cv
282.703 10.48 282.488 10.527 282.305 10.617 cv
282.117 10.715 281.965 10.84 281.844 10.996 cv
281.719 11.156 281.625 11.344 281.563 11.559 cv
281.496 11.773 281.457 12.004 281.449 12.246 cv
cp
f
292.355 10.18 mo
292.355 10.371 292.348 10.523 292.34 10.641 cv
292.324 10.762 292.309 10.855 292.293 10.922 cv
292.27 10.992 292.242 11.039 292.211 11.062 cv
292.172 11.09 292.129 11.102 292.082 11.102 cv
292.035 11.102 291.988 11.094 291.941 11.074 cv
291.887 11.059 291.828 11.039 291.766 11.016 cv
291.695 10.996 291.625 10.977 291.551 10.957 cv
291.469 10.941 291.383 10.934 291.293 10.93 cv
291.18 10.934 291.07 10.953 290.965 10.996 cv
290.855 11.043 290.742 11.113 290.629 11.203 cv
290.508 11.297 290.387 11.422 290.262 11.574 cv
290.133 11.734 289.996 11.926 289.852 12.152 cv
289.852 16.484 li
289.848 16.539 289.832 16.582 289.805 16.621 cv
289.77 16.66 289.715 16.695 289.645 16.719 cv
289.566 16.746 289.469 16.762 289.344 16.777 cv
289.219 16.789 289.059 16.797 288.871 16.797 cv
288.676 16.797 288.52 16.789 288.395 16.777 cv
288.27 16.762 288.168 16.746 288.094 16.719 cv
288.016 16.695 287.961 16.66 287.934 16.621 cv
287.898 16.582 287.883 16.539 287.887 16.484 cv
287.887 9.53497 li
287.883 9.48798 287.898 9.44098 287.926 9.39801 cv
287.949 9.36298 287.996 9.33197 288.066 9.30103 cv
288.133 9.27698 288.219 9.258 288.328 9.242 cv
288.434 9.23401 288.566 9.22699 288.73 9.22302 cv
288.895 9.22699 289.031 9.23401 289.141 9.242 cv
289.246 9.258 289.332 9.27698 289.395 9.30103 cv
289.453 9.33197 289.496 9.36298 289.523 9.39801 cv
289.547 9.44098 289.559 9.48798 289.563 9.53497 cv
289.563 10.398 li
289.742 10.141 289.914 9.92999 290.078 9.758 cv
290.234 9.59399 290.391 9.45697 290.539 9.35498 cv
290.684 9.258 290.828 9.19098 290.973 9.14801 cv
291.117 9.11298 291.262 9.09399 291.41 9.09003 cv
291.477 9.09399 291.551 9.09802 291.629 9.10199 cv
291.707 9.11298 291.785 9.125 291.871 9.14099 cv
291.949 9.15997 292.023 9.17999 292.09 9.203 cv
292.148 9.22699 292.195 9.25403 292.227 9.27698 cv
292.254 9.30902 292.273 9.336 292.289 9.36298 cv
292.301 9.39801 292.313 9.44098 292.324 9.492 cv
292.332 9.55103 292.34 9.633 292.348 9.73798 cv
292.352 9.84802 292.355 9.99597 292.355 10.18 cv
cp
f
295.516 16.484 mo
295.512 16.539 295.496 16.582 295.469 16.621 cv
295.434 16.66 295.379 16.695 295.309 16.719 cv
295.23 16.746 295.133 16.762 295.008 16.777 cv
294.883 16.789 294.723 16.797 294.535 16.797 cv
294.34 16.797 294.184 16.789 294.059 16.777 cv
293.934 16.762 293.832 16.746 293.758 16.719 cv
293.68 16.695 293.625 16.66 293.598 16.621 cv
293.563 16.582 293.547 16.539 293.551 16.484 cv
293.551 9.55103 li
293.547 9.5 293.563 9.453 293.598 9.414 cv
293.625 9.375 293.68 9.34399 293.758 9.31201 cv
293.832 9.289 293.934 9.26599 294.059 9.24597 cv
294.184 9.23401 294.34 9.22699 294.535 9.22302 cv
294.723 9.22699 294.883 9.23401 295.008 9.24597 cv
295.133 9.26599 295.23 9.289 295.309 9.31201 cv
295.379 9.34399 295.434 9.375 295.469 9.414 cv
295.496 9.453 295.512 9.5 295.516 9.55103 cv
cp
295.664 7.17999 mo
295.664 7.578 295.582 7.85199 295.422 8 cv
295.258 8.15198 294.961 8.22699 294.527 8.22302 cv
294.082 8.22699 293.781 8.15198 293.633 8.008 cv
293.477 7.86298 293.402 7.60199 293.402 7.21899 cv
293.402 6.82397 293.48 6.55103 293.641 6.39801 cv
293.797 6.24597 294.098 6.16803 294.543 6.16803 cv
294.977 6.16803 295.273 6.242 295.43 6.39099 cv
295.586 6.539 295.664 6.80499 295.664 7.17999 cv
cp
f
304.121 16.484 mo
304.117 16.539 304.102 16.582 304.074 16.621 cv
304.039 16.66 303.988 16.695 303.918 16.719 cv
303.844 16.746 303.742 16.762 303.617 16.777 cv
303.488 16.789 303.332 16.797 303.148 16.797 cv
302.953 16.797 302.793 16.789 302.668 16.777 cv
302.539 16.762 302.438 16.746 302.367 16.719 cv
302.289 16.695 302.238 16.66 302.211 16.621 cv
302.176 16.582 302.16 16.539 302.164 16.484 cv
302.164 12.52 li
302.16 12.184 302.137 11.918 302.09 11.723 cv
302.039 11.531 301.965 11.367 301.875 11.23 cv
301.781 11.094 301.664 10.988 301.516 10.91 cv
301.367 10.836 301.191 10.797 300.996 10.797 cv
300.742 10.797 300.492 10.891 300.238 11.07 cv
299.984 11.254 299.719 11.516 299.445 11.863 cv
299.445 16.484 li
299.441 16.539 299.426 16.582 299.398 16.621 cv
299.363 16.66 299.309 16.695 299.238 16.719 cv
299.16 16.746 299.063 16.762 298.938 16.777 cv
298.813 16.789 298.652 16.797 298.465 16.797 cv
298.27 16.797 298.113 16.789 297.988 16.777 cv
297.863 16.762 297.762 16.746 297.688 16.719 cv
297.609 16.695 297.555 16.66 297.527 16.621 cv
297.492 16.582 297.477 16.539 297.48 16.484 cv
297.48 9.53497 li
297.477 9.48798 297.492 9.44098 297.52 9.39801 cv
297.543 9.36298 297.59 9.33197 297.66 9.30103 cv
297.727 9.27698 297.813 9.258 297.922 9.242 cv
298.027 9.23401 298.16 9.22699 298.324 9.22302 cv
298.488 9.22699 298.625 9.23401 298.734 9.242 cv
298.84 9.258 298.926 9.27698 298.988 9.30103 cv
299.047 9.33197 299.09 9.36298 299.117 9.39801 cv
299.141 9.44098 299.152 9.48798 299.156 9.53497 cv
299.156 10.336 li
299.539 9.92603 299.93 9.61298 300.328 9.40198 cv
300.723 9.19501 301.141 9.09399 301.574 9.09003 cv
302.043 9.09399 302.441 9.172 302.77 9.32397 cv
303.094 9.48401 303.355 9.69501 303.555 9.961 cv
303.754 10.23 303.898 10.543 303.988 10.898 cv
304.074 11.258 304.117 11.687 304.121 12.191 cv
cp
f
312.316 10.016 mo
312.313 10.27 312.285 10.453 312.23 10.57 cv
312.172 10.691 312.102 10.75 312.023 10.75 cv
311.203 10.75 li
311.316 10.875 311.398 11.02 311.449 11.176 cv
311.496 11.336 311.52 11.5 311.523 11.668 cv
311.52 12.078 311.453 12.437 311.32 12.75 cv
311.184 13.066 310.988 13.332 310.738 13.543 cv
310.484 13.762 310.184 13.926 309.828 14.035 cv
309.469 14.152 309.07 14.207 308.641 14.203 cv
308.414 14.207 308.203 14.18 308 14.121 cv
307.797 14.07 307.641 14.008 307.531 13.93 cv
307.469 14 307.41 14.078 307.363 14.172 cv
307.313 14.266 307.289 14.371 307.293 14.48 cv
307.289 14.637 307.355 14.758 307.488 14.852 cv
307.617 14.949 307.805 15.004 308.047 15.012 cv
309.738 15.074 li
310.133 15.09 310.484 15.148 310.793 15.242 cv
311.102 15.344 311.363 15.477 311.574 15.648 cv
311.785 15.824 311.945 16.035 312.055 16.277 cv
312.164 16.523 312.219 16.797 312.223 17.109 cv
312.219 17.445 312.145 17.77 311.996 18.078 cv
311.848 18.379 311.621 18.641 311.32 18.867 cv
311.016 19.086 310.637 19.266 310.184 19.398 cv
309.727 19.527 309.195 19.59 308.594 19.594 cv
307.996 19.59 307.492 19.543 307.074 19.453 cv
306.656 19.355 306.313 19.227 306.047 19.062 cv
305.777 18.895 305.582 18.695 305.465 18.469 cv
305.34 18.234 305.281 17.98 305.281 17.707 cv
305.281 17.535 305.301 17.375 305.348 17.219 cv
305.387 17.062 305.453 16.91 305.543 16.77 cv
305.625 16.625 305.73 16.492 305.855 16.359 cv
305.98 16.23 306.121 16.105 306.285 15.984 cv
306.059 15.871 305.887 15.711 305.766 15.5 cv
305.645 15.297 305.586 15.07 305.586 14.824 cv
305.586 14.523 305.652 14.246 305.793 13.988 cv
305.93 13.738 306.113 13.508 306.34 13.305 cv
306.156 13.125 306.012 12.91 305.902 12.652 cv
305.793 12.402 305.738 12.082 305.742 11.699 cv
305.738 11.297 305.809 10.937 305.953 10.613 cv
306.094 10.297 306.293 10.027 306.551 9.80499 cv
306.805 9.586 307.109 9.414 307.461 9.297 cv
307.813 9.17999 308.203 9.12097 308.633 9.12097 cv
308.852 9.12097 309.059 9.13702 309.258 9.15997 cv
309.457 9.19098 309.645 9.22699 309.816 9.27002 cv
312.023 9.27002 li
312.105 9.27301 312.176 9.33197 312.234 9.44098 cv
312.285 9.55902 312.313 9.75 312.316 10.016 cv
cp
309.801 11.66 mo
309.797 11.289 309.695 11 309.488 10.789 cv
309.277 10.586 308.984 10.48 308.609 10.477 cv
308.414 10.48 308.242 10.512 308.102 10.574 cv
307.953 10.641 307.832 10.73 307.738 10.84 cv
307.637 10.953 307.566 11.082 307.523 11.23 cv
307.473 11.379 307.449 11.535 307.453 11.691 cv
307.449 12.051 307.555 12.328 307.766 12.531 cv
307.973 12.738 308.262 12.844 308.633 12.84 cv
308.828 12.844 308.996 12.812 309.145 12.746 cv
309.285 12.687 309.406 12.602 309.508 12.488 cv
309.602 12.383 309.676 12.254 309.727 12.109 cv
309.773 11.969 309.797 11.82 309.801 11.66 cv
cp
310.262 17.211 mo
310.262 16.973 310.168 16.797 309.98 16.672 cv
309.793 16.551 309.535 16.48 309.207 16.469 cv
307.813 16.43 li
307.676 16.531 307.566 16.625 307.488 16.715 cv
307.406 16.805 307.344 16.891 307.297 16.977 cv
307.246 17.059 307.211 17.141 307.199 17.219 cv
307.18 17.297 307.172 17.375 307.176 17.461 cv
307.172 17.715 307.305 17.914 307.566 18.051 cv
307.828 18.184 308.199 18.25 308.68 18.254 cv
308.973 18.25 309.219 18.219 309.426 18.164 cv
309.625 18.102 309.789 18.023 309.918 17.926 cv
310.039 17.824 310.129 17.715 310.184 17.594 cv
310.234 17.473 310.262 17.344 310.262 17.211 cv
cp
f
324.227 7.508 mo
324.223 7.664 324.215 7.79303 324.207 7.89502 cv
324.191 8.00403 324.172 8.09003 324.148 8.15198 cv
324.117 8.21899 324.086 8.26599 324.051 8.29303 cv
324.008 8.328 323.965 8.34399 323.922 8.34003 cv
321.398 8.34003 li
321.398 16.469 li
321.398 16.523 321.379 16.57 321.348 16.609 cv
321.309 16.652 321.254 16.687 321.18 16.711 cv
321.098 16.738 320.992 16.758 320.863 16.773 cv
320.727 16.789 320.563 16.797 320.367 16.797 cv
320.172 16.797 320.008 16.789 319.875 16.773 cv
319.742 16.758 319.637 16.738 319.559 16.711 cv
319.48 16.687 319.422 16.652 319.391 16.609 cv
319.352 16.57 319.336 16.523 319.34 16.469 cv
319.34 8.34003 li
316.816 8.34003 li
316.762 8.34399 316.715 8.328 316.684 8.29303 cv
316.645 8.26599 316.613 8.21899 316.59 8.15198 cv
316.559 8.09003 316.539 8.00403 316.531 7.89502 cv
316.516 7.79303 316.512 7.664 316.512 7.508 cv
316.512 7.35498 316.516 7.22302 316.531 7.10901 cv
316.539 7.00403 316.559 6.914 316.59 6.84802 cv
316.613 6.78497 316.645 6.73798 316.684 6.70697 cv
316.715 6.67999 316.762 6.66803 316.816 6.664 cv
323.922 6.664 li
323.965 6.66803 324.008 6.67999 324.051 6.70697 cv
324.086 6.73798 324.117 6.78497 324.148 6.84802 cv
324.172 6.914 324.191 7.00403 324.207 7.10901 cv
324.215 7.22302 324.223 7.35498 324.227 7.508 cv
cp
f
327.262 16.484 mo
327.258 16.539 327.242 16.582 327.215 16.621 cv
327.18 16.66 327.125 16.695 327.055 16.719 cv
326.977 16.746 326.879 16.762 326.754 16.777 cv
326.629 16.789 326.469 16.797 326.281 16.797 cv
326.086 16.797 325.93 16.789 325.805 16.777 cv
325.68 16.762 325.578 16.746 325.504 16.719 cv
325.426 16.695 325.371 16.66 325.344 16.621 cv
325.309 16.582 325.293 16.539 325.297 16.484 cv
325.297 9.55103 li
325.293 9.5 325.309 9.453 325.344 9.414 cv
325.371 9.375 325.426 9.34399 325.504 9.31201 cv
325.578 9.289 325.68 9.26599 325.805 9.24597 cv
325.93 9.23401 326.086 9.22699 326.281 9.22302 cv
326.469 9.22699 326.629 9.23401 326.754 9.24597 cv
326.879 9.26599 326.977 9.289 327.055 9.31201 cv
327.125 9.34399 327.18 9.375 327.215 9.414 cv
327.242 9.453 327.258 9.5 327.262 9.55103 cv
cp
327.41 7.17999 mo
327.41 7.578 327.328 7.85199 327.168 8 cv
327.004 8.15198 326.707 8.22699 326.273 8.22302 cv
325.828 8.22699 325.527 8.15198 325.379 8.008 cv
325.223 7.86298 325.148 7.60199 325.148 7.21899 cv
325.148 6.82397 325.227 6.55103 325.387 6.39801 cv
325.543 6.24597 325.844 6.16803 326.289 6.16803 cv
326.723 6.16803 327.02 6.242 327.176 6.39099 cv
327.332 6.539 327.41 6.80499 327.41 7.17999 cv
cp
f
340.313 16.484 mo
340.309 16.539 340.293 16.582 340.266 16.621 cv
340.23 16.66 340.18 16.695 340.109 16.719 cv
340.035 16.746 339.934 16.762 339.813 16.777 cv
339.688 16.789 339.531 16.797 339.34 16.797 cv
339.141 16.797 338.98 16.789 338.855 16.777 cv
338.73 16.762 338.629 16.746 338.555 16.719 cv
338.477 16.695 338.426 16.66 338.398 16.621 cv
338.371 16.582 338.355 16.539 338.359 16.484 cv
338.359 12.363 li
338.355 12.133 338.336 11.918 338.293 11.723 cv
338.246 11.531 338.176 11.367 338.09 11.23 cv
337.996 11.094 337.883 10.988 337.746 10.91 cv
337.605 10.836 337.441 10.797 337.25 10.797 cv
337.016 10.797 336.777 10.891 336.539 11.07 cv
336.301 11.254 336.043 11.516 335.762 11.863 cv
335.762 16.484 li
335.762 16.539 335.746 16.582 335.715 16.621 cv
335.684 16.66 335.629 16.695 335.555 16.719 cv
335.477 16.746 335.375 16.762 335.254 16.777 cv
335.129 16.789 334.977 16.797 334.789 16.797 cv
334.594 16.797 334.434 16.789 334.313 16.777 cv
334.184 16.762 334.082 16.746 334.012 16.719 cv
333.934 16.695 333.883 16.66 333.852 16.621 cv
333.82 16.582 333.805 16.539 333.805 16.484 cv
333.805 12.363 li
333.805 12.133 333.781 11.918 333.738 11.723 cv
333.695 11.531 333.629 11.367 333.543 11.23 cv
333.449 11.094 333.336 10.988 333.199 10.91 cv
333.055 10.836 332.891 10.797 332.707 10.797 cv
332.465 10.797 332.227 10.891 331.988 11.07 cv
331.75 11.254 331.492 11.516 331.219 11.863 cv
331.219 16.484 li
331.215 16.539 331.199 16.582 331.172 16.621 cv
331.137 16.66 331.082 16.695 331.012 16.719 cv
330.934 16.746 330.836 16.762 330.711 16.777 cv
330.586 16.789 330.426 16.797 330.238 16.797 cv
330.043 16.797 329.887 16.789 329.762 16.777 cv
329.637 16.762 329.535 16.746 329.461 16.719 cv
329.383 16.695 329.328 16.66 329.301 16.621 cv
329.266 16.582 329.25 16.539 329.254 16.484 cv
329.254 9.53497 li
329.25 9.48798 329.266 9.44098 329.293 9.39801 cv
329.316 9.36298 329.363 9.33197 329.434 9.30103 cv
329.5 9.27698 329.586 9.258 329.695 9.242 cv
329.801 9.23401 329.934 9.22699 330.098 9.22302 cv
330.262 9.22699 330.398 9.23401 330.508 9.242 cv
330.613 9.258 330.699 9.27698 330.762 9.30103 cv
330.82 9.33197 330.863 9.36298 330.891 9.39801 cv
330.914 9.44098 330.926 9.48798 330.93 9.53497 cv
330.93 10.336 li
331.313 9.92603 331.695 9.61298 332.078 9.40198 cv
332.457 9.19501 332.859 9.09399 333.277 9.09003 cv
333.563 9.09399 333.816 9.12097 334.047 9.17999 cv
334.273 9.242 334.48 9.328 334.66 9.43701 cv
334.84 9.55103 334.992 9.68701 335.121 9.84003 cv
335.25 9.99597 335.359 10.168 335.449 10.359 cv
335.656 10.137 335.859 9.94501 336.063 9.78497 cv
336.258 9.625 336.457 9.492 336.652 9.39099 cv
336.848 9.289 337.043 9.21503 337.238 9.164 cv
337.434 9.117 337.633 9.09399 337.836 9.09003 cv
338.297 9.09399 338.684 9.172 339.004 9.32397 cv
339.316 9.48401 339.574 9.69501 339.77 9.961 cv
339.965 10.23 340.102 10.543 340.188 10.898 cv
340.266 11.258 340.309 11.637 340.313 12.035 cv
cp
f
348.652 12.809 mo
348.648 13.047 348.598 13.223 348.492 13.336 cv
348.383 13.453 348.234 13.512 348.055 13.508 cv
343.82 13.508 li
343.816 13.809 343.852 14.078 343.926 14.316 cv
343.992 14.559 344.105 14.762 344.262 14.93 cv
344.414 15.102 344.609 15.23 344.852 15.316 cv
345.09 15.406 345.379 15.449 345.723 15.449 cv
346.063 15.449 346.363 15.426 346.625 15.375 cv
346.883 15.328 347.109 15.273 347.301 15.211 cv
347.488 15.152 347.645 15.098 347.773 15.047 cv
347.895 15 347.996 14.977 348.078 14.973 cv
348.121 14.977 348.16 14.984 348.195 15 cv
348.223 15.02 348.25 15.051 348.27 15.098 cv
348.289 15.145 348.301 15.211 348.313 15.297 cv
348.316 15.383 348.32 15.492 348.324 15.621 cv
348.32 15.738 348.32 15.836 348.316 15.914 cv
348.309 15.996 348.301 16.062 348.293 16.117 cv
348.281 16.176 348.266 16.227 348.246 16.262 cv
348.227 16.305 348.199 16.34 348.168 16.375 cv
348.133 16.414 348.039 16.465 347.891 16.523 cv
347.734 16.59 347.543 16.652 347.313 16.707 cv
347.074 16.77 346.805 16.816 346.508 16.863 cv
346.203 16.902 345.883 16.926 345.543 16.93 cv
344.922 16.926 344.379 16.852 343.918 16.695 cv
343.449 16.543 343.063 16.305 342.754 15.988 cv
342.438 15.672 342.203 15.273 342.055 14.789 cv
341.898 14.309 341.824 13.742 341.828 13.086 cv
341.824 12.473 341.902 11.914 342.066 11.418 cv
342.223 10.922 342.457 10.504 342.77 10.156 cv
343.074 9.81201 343.449 9.547 343.887 9.36298 cv
344.324 9.18402 344.816 9.09399 345.371 9.09003 cv
345.949 9.09399 346.449 9.17999 346.863 9.34802 cv
347.277 9.52301 347.613 9.76202 347.879 10.062 cv
348.141 10.367 348.336 10.727 348.465 11.141 cv
348.586 11.559 348.648 12.008 348.652 12.496 cv
cp
346.75 12.246 mo
346.762 11.695 346.652 11.262 346.418 10.949 cv
346.184 10.637 345.816 10.48 345.324 10.477 cv
345.074 10.48 344.859 10.527 344.676 10.617 cv
344.488 10.715 344.336 10.84 344.215 10.996 cv
344.09 11.156 343.996 11.344 343.934 11.559 cv
343.867 11.773 343.828 12.004 343.82 12.246 cv
cp
f
355.152 14.52 mo
355.148 14.918 355.074 15.266 354.93 15.566 cv
354.781 15.867 354.574 16.121 354.305 16.32 cv
354.031 16.527 353.711 16.676 353.344 16.777 cv
352.977 16.875 352.574 16.926 352.145 16.93 cv
351.879 16.926 351.633 16.906 351.398 16.871 cv
351.164 16.828 350.953 16.781 350.766 16.723 cv
350.578 16.664 350.422 16.602 350.297 16.539 cv
350.172 16.477 350.078 16.418 350.023 16.363 cv
349.965 16.309 349.922 16.227 349.895 16.109 cv
349.859 15.996 349.844 15.82 349.848 15.59 cv
349.844 15.441 349.852 15.32 349.863 15.227 cv
349.871 15.137 349.887 15.066 349.91 15.008 cv
349.93 14.957 349.953 14.918 349.988 14.898 cv
350.016 14.883 350.055 14.875 350.102 14.871 cv
350.156 14.875 350.242 14.906 350.355 14.969 cv
350.465 15.035 350.602 15.109 350.773 15.184 cv
350.938 15.266 351.133 15.336 351.352 15.402 cv
351.57 15.473 351.82 15.508 352.105 15.504 cv
352.281 15.508 352.438 15.488 352.578 15.449 cv
352.711 15.414 352.832 15.363 352.938 15.293 cv
353.035 15.227 353.109 15.141 353.164 15.035 cv
353.211 14.934 353.238 14.812 353.242 14.676 cv
353.238 14.52 353.191 14.387 353.098 14.277 cv
353.004 14.168 352.875 14.07 352.719 13.984 cv
352.555 13.902 352.375 13.824 352.18 13.75 cv
351.977 13.68 351.773 13.602 351.563 13.508 cv
351.352 13.422 351.145 13.32 350.949 13.203 cv
350.746 13.094 350.566 12.953 350.41 12.785 cv
350.246 12.621 350.121 12.422 350.027 12.184 cv
349.934 11.953 349.887 11.672 349.887 11.34 cv
349.887 11.012 349.949 10.707 350.078 10.426 cv
350.207 10.152 350.395 9.914 350.641 9.71503 cv
350.883 9.52002 351.18 9.367 351.531 9.25403 cv
351.879 9.14801 352.273 9.09399 352.715 9.09003 cv
352.93 9.09399 353.141 9.10901 353.348 9.13702 cv
353.551 9.172 353.738 9.211 353.906 9.25403 cv
354.07 9.30499 354.211 9.35498 354.328 9.40601 cv
354.441 9.46503 354.523 9.51202 354.574 9.547 cv
354.621 9.59003 354.656 9.62903 354.68 9.664 cv
354.699 9.70697 354.711 9.75403 354.723 9.80499 cv
354.73 9.85901 354.742 9.92603 354.75 10.004 cv
354.758 10.09 354.762 10.187 354.762 10.305 cv
354.762 10.445 354.758 10.562 354.75 10.648 cv
354.742 10.742 354.727 10.812 354.711 10.859 cv
354.691 10.914 354.668 10.949 354.641 10.965 cv
354.605 10.988 354.57 10.996 354.531 10.992 cv
354.48 10.996 354.406 10.969 354.313 10.91 cv
354.211 10.859 354.09 10.801 353.941 10.734 cv
353.793 10.676 353.621 10.617 353.426 10.559 cv
353.23 10.508 353.008 10.48 352.762 10.477 cv
352.582 10.48 352.43 10.5 352.301 10.531 cv
352.168 10.57 352.059 10.621 351.98 10.687 cv
351.895 10.758 351.832 10.836 351.793 10.926 cv
351.746 11.02 351.727 11.117 351.73 11.219 cv
351.727 11.379 351.777 11.516 351.879 11.621 cv
351.977 11.734 352.105 11.828 352.27 11.91 cv
352.43 11.996 352.613 12.074 352.82 12.145 cv
353.023 12.219 353.23 12.301 353.441 12.383 cv
353.648 12.473 353.855 12.57 354.066 12.684 cv
354.27 12.797 354.453 12.937 354.613 13.102 cv
354.773 13.27 354.902 13.469 355.004 13.699 cv
355.098 13.934 355.148 14.207 355.152 14.52 cv
cp
f
367.344 12.937 mo
367.34 13.535 367.262 14.078 367.109 14.562 cv
366.949 15.055 366.715 15.473 366.398 15.824 cv
366.082 16.176 365.684 16.449 365.207 16.641 cv
364.727 16.832 364.168 16.926 363.531 16.93 cv
362.91 16.926 362.371 16.844 361.918 16.672 cv
361.457 16.504 361.078 16.254 360.781 15.926 cv
360.477 15.602 360.254 15.199 360.109 14.719 cv
359.965 14.242 359.895 13.695 359.895 13.078 cv
359.895 12.488 359.973 11.949 360.129 11.457 cv
360.285 10.969 360.523 10.547 360.844 10.195 cv
361.16 9.84802 361.555 9.57397 362.031 9.37903 cv
362.504 9.18701 363.063 9.09399 363.703 9.09003 cv
364.328 9.09399 364.867 9.17603 365.324 9.34399 cv
365.781 9.51599 366.16 9.76599 366.457 10.09 cv
366.754 10.418 366.977 10.82 367.125 11.297 cv
367.27 11.777 367.34 12.324 367.344 12.937 cv
cp
365.324 13.016 mo
365.32 12.68 365.293 12.363 365.242 12.07 cv
365.184 11.785 365.09 11.535 364.965 11.32 cv
364.832 11.109 364.66 10.941 364.449 10.82 cv
364.23 10.703 363.961 10.645 363.633 10.641 cv
363.344 10.645 363.09 10.699 362.871 10.801 cv
362.652 10.91 362.473 11.066 362.332 11.27 cv
362.191 11.477 362.086 11.723 362.016 12.008 cv
361.945 12.301 361.91 12.629 361.91 12.992 cv
361.91 13.34 361.938 13.656 361.996 13.941 cv
362.051 14.234 362.145 14.484 362.273 14.695 cv
362.398 14.91 362.57 15.074 362.793 15.187 cv
363.008 15.309 363.277 15.367 363.602 15.363 cv
363.895 15.367 364.152 15.312 364.375 15.203 cv
364.59 15.098 364.77 14.945 364.91 14.738 cv
365.051 14.539 365.152 14.293 365.223 14.004 cv
365.285 13.719 365.32 13.391 365.324 13.016 cv
cp
f
373.125 6.883 mo
373.121 7.03497 373.117 7.15601 373.109 7.24597 cv
373.098 7.34003 373.082 7.40997 373.063 7.45697 cv
373.039 7.508 373.016 7.54303 372.992 7.55902 cv
372.965 7.578 372.938 7.586 372.906 7.586 cv
372.867 7.586 372.824 7.578 372.785 7.55902 cv
372.738 7.54303 372.684 7.52301 372.621 7.5 cv
372.551 7.47998 372.477 7.461 372.391 7.44098 cv
372.301 7.42603 372.195 7.41803 372.078 7.414 cv
371.934 7.41803 371.813 7.43701 371.715 7.47998 cv
371.613 7.52698 371.531 7.59802 371.465 7.69098 cv
371.395 7.789 371.344 7.914 371.316 8.06598 cv
371.281 8.21899 371.266 8.40601 371.27 8.62903 cv
371.27 9.27002 li
372.539 9.27002 li
372.582 9.27301 372.625 9.28497 372.668 9.30902 cv
372.703 9.336 372.738 9.37903 372.766 9.43701 cv
372.789 9.5 372.809 9.58197 372.824 9.68402 cv
372.836 9.78497 372.84 9.914 372.844 10.062 cv
372.84 10.352 372.816 10.555 372.766 10.676 cv
372.711 10.801 372.633 10.863 372.539 10.859 cv
371.27 10.859 li
371.27 16.484 li
371.266 16.539 371.25 16.582 371.223 16.621 cv
371.188 16.66 371.137 16.695 371.066 16.719 cv
370.992 16.746 370.891 16.762 370.762 16.777 cv
370.629 16.789 370.469 16.797 370.285 16.797 cv
370.098 16.797 369.941 16.789 369.816 16.777 cv
369.688 16.762 369.586 16.746 369.512 16.719 cv
369.434 16.695 369.383 16.66 369.355 16.621 cv
369.324 16.582 369.309 16.539 369.313 16.484 cv
369.313 10.859 li
368.441 10.859 li
368.34 10.863 368.266 10.801 368.219 10.676 cv
368.168 10.555 368.141 10.352 368.145 10.062 cv
368.141 9.914 368.148 9.78497 368.164 9.68402 cv
368.176 9.58197 368.195 9.5 368.219 9.43701 cv
368.242 9.37903 368.273 9.336 368.313 9.30902 cv
368.352 9.28497 368.395 9.27301 368.449 9.27002 cv
369.313 9.27002 li
369.313 8.68402 li
369.309 8.21503 369.355 7.80103 369.453 7.44098 cv
369.543 7.086 369.691 6.789 369.895 6.55499 cv
370.094 6.32001 370.348 6.14502 370.656 6.02002 cv
370.965 5.90198 371.328 5.84003 371.754 5.84003 cv
371.949 5.84003 372.141 5.85901 372.328 5.89099 cv
372.508 5.92999 372.652 5.96503 372.758 6 cv
372.859 6.04303 372.93 6.078 372.969 6.10901 cv
373.004 6.14502 373.035 6.19501 373.059 6.258 cv
373.082 6.32397 373.098 6.40601 373.109 6.508 cv
373.117 6.60901 373.121 6.73401 373.125 6.883 cv
cp
f
383.676 13.727 mo
383.672 14.258 383.574 14.723 383.379 15.121 cv
383.18 15.523 382.914 15.859 382.578 16.125 cv
382.238 16.395 381.84 16.594 381.391 16.727 cv
380.938 16.859 380.457 16.926 379.945 16.93 cv
379.594 16.926 379.27 16.898 378.973 16.844 cv
378.672 16.785 378.41 16.719 378.184 16.637 cv
377.953 16.559 377.762 16.473 377.609 16.383 cv
377.457 16.297 377.348 16.219 377.281 16.148 cv
377.211 16.082 377.16 15.984 377.137 15.859 cv
377.105 15.734 377.094 15.551 377.094 15.309 cv
377.094 15.148 377.098 15.016 377.109 14.902 cv
377.117 14.797 377.133 14.707 377.16 14.637 cv
377.18 14.57 377.211 14.523 377.254 14.492 cv
377.289 14.469 377.336 14.453 377.387 14.449 cv
377.457 14.453 377.559 14.496 377.695 14.578 cv
377.824 14.668 377.996 14.762 378.207 14.863 cv
378.414 14.969 378.66 15.066 378.949 15.148 cv
379.234 15.238 379.57 15.281 379.953 15.277 cv
380.203 15.281 380.426 15.25 380.621 15.187 cv
380.816 15.129 380.984 15.043 381.125 14.934 cv
381.262 14.824 381.367 14.691 381.441 14.531 cv
381.512 14.371 381.547 14.191 381.551 13.992 cv
381.547 13.766 381.484 13.57 381.363 13.402 cv
381.234 13.242 381.07 13.098 380.875 12.969 cv
380.672 12.844 380.445 12.723 380.191 12.609 cv
379.938 12.5 379.676 12.383 379.406 12.254 cv
379.133 12.133 378.871 11.988 378.617 11.828 cv
378.363 11.672 378.137 11.484 377.938 11.262 cv
377.734 11.043 377.57 10.781 377.449 10.477 cv
377.324 10.176 377.262 9.81598 377.266 9.39502 cv
377.262 8.914 377.352 8.48798 377.531 8.12097 cv
377.707 7.758 377.949 7.453 378.258 7.20697 cv
378.559 6.96899 378.918 6.789 379.332 6.66803 cv
379.746 6.55103 380.184 6.492 380.645 6.48798 cv
380.883 6.492 381.121 6.508 381.363 6.54303 cv
381.602 6.58197 381.824 6.633 382.031 6.69098 cv
382.238 6.75403 382.422 6.82397 382.586 6.89801 cv
382.742 6.97998 382.852 7.04303 382.906 7.09399 cv
382.957 7.14801 382.992 7.19501 383.012 7.22699 cv
383.027 7.26599 383.043 7.31201 383.059 7.37097 cv
383.07 7.43402 383.078 7.508 383.086 7.59802 cv
383.09 7.69098 383.094 7.80499 383.094 7.93701 cv
383.094 8.09003 383.09 8.21899 383.082 8.32001 cv
383.074 8.42603 383.059 8.51202 383.043 8.57397 cv
383.02 8.64502 382.996 8.69098 382.965 8.72302 cv
382.93 8.75403 382.883 8.77002 382.828 8.77002 cv
382.77 8.77002 382.68 8.73401 382.555 8.65997 cv
382.43 8.59003 382.273 8.51202 382.094 8.422 cv
381.91 8.34003 381.703 8.26202 381.465 8.19098 cv
381.223 8.125 380.957 8.09003 380.676 8.086 cv
380.449 8.09003 380.258 8.117 380.094 8.16803 cv
379.926 8.22302 379.785 8.297 379.676 8.39099 cv
379.563 8.48798 379.48 8.60498 379.426 8.73798 cv
379.371 8.87903 379.344 9.02002 379.344 9.16803 cv
379.344 9.39502 379.402 9.59003 379.527 9.75 cv
379.645 9.914 379.809 10.059 380.02 10.184 cv
380.223 10.312 380.457 10.434 380.715 10.543 cv
380.973 10.66 381.238 10.777 381.512 10.898 cv
381.781 11.027 382.043 11.168 382.305 11.324 cv
382.563 11.48 382.797 11.672 383 11.891 cv
383.203 12.117 383.363 12.375 383.488 12.672 cv
383.609 12.969 383.672 13.32 383.676 13.727 cv
cp
f
391.727 16.484 mo
391.723 16.539 391.711 16.582 391.688 16.621 cv
391.66 16.66 391.613 16.695 391.551 16.719 cv
391.484 16.746 391.398 16.762 391.293 16.777 cv
391.188 16.789 391.055 16.797 390.895 16.797 cv
390.719 16.797 390.578 16.789 390.477 16.777 cv
390.367 16.762 390.285 16.746 390.223 16.719 cv
390.16 16.695 390.113 16.66 390.09 16.621 cv
390.059 16.582 390.047 16.539 390.051 16.484 cv
390.051 15.684 li
389.664 16.098 389.273 16.41 388.879 16.617 cv
388.477 16.824 388.066 16.926 387.645 16.93 cv
387.164 16.926 386.762 16.852 386.438 16.695 cv
386.113 16.543 385.852 16.328 385.652 16.059 cv
385.449 15.789 385.305 15.477 385.223 15.117 cv
385.133 14.762 385.09 14.32 385.094 13.789 cv
385.094 9.53497 li
385.09 9.48798 385.105 9.44098 385.137 9.39801 cv
385.164 9.36298 385.215 9.33197 385.293 9.30103 cv
385.367 9.27698 385.469 9.258 385.598 9.242 cv
385.723 9.23401 385.879 9.22699 386.07 9.22302 cv
386.258 9.22699 386.418 9.23401 386.543 9.242 cv
386.668 9.258 386.766 9.27698 386.844 9.30103 cv
386.914 9.33197 386.969 9.36298 387.004 9.39801 cv
387.031 9.44098 387.047 9.48798 387.051 9.53497 cv
387.051 13.461 li
387.047 13.828 387.07 14.105 387.121 14.297 cv
387.164 14.488 387.234 14.652 387.336 14.789 cv
387.43 14.93 387.555 15.035 387.703 15.109 cv
387.852 15.187 388.023 15.227 388.219 15.223 cv
388.469 15.227 388.719 15.137 388.973 14.949 cv
389.223 14.77 389.492 14.504 389.777 14.156 cv
389.777 9.53497 li
389.777 9.48798 389.789 9.44098 389.82 9.39801 cv
389.844 9.36298 389.898 9.33197 389.977 9.30103 cv
390.051 9.27698 390.148 9.258 390.277 9.242 cv
390.398 9.23401 390.559 9.22699 390.754 9.22302 cv
390.945 9.22699 391.102 9.23401 391.227 9.242 cv
391.348 9.258 391.449 9.27698 391.523 9.30103 cv
391.594 9.33197 391.645 9.36298 391.68 9.39801 cv
391.707 9.44098 391.723 9.48798 391.727 9.53497 cv
cp
f
400.652 12.914 mo
400.652 13.535 400.582 14.094 400.449 14.586 cv
400.309 15.082 400.113 15.5 399.863 15.848 cv
399.605 16.195 399.293 16.465 398.926 16.648 cv
398.551 16.836 398.129 16.926 397.66 16.93 cv
397.422 16.926 397.203 16.902 397.004 16.863 cv
396.797 16.816 396.605 16.75 396.422 16.648 cv
396.238 16.555 396.055 16.43 395.879 16.273 cv
395.695 16.125 395.512 15.941 395.328 15.73 cv
395.328 16.484 li
395.324 16.547 395.313 16.594 395.285 16.629 cv
395.254 16.672 395.207 16.703 395.145 16.727 cv
395.078 16.75 394.988 16.766 394.883 16.781 cv
394.773 16.789 394.645 16.797 394.488 16.797 cv
394.324 16.797 394.188 16.789 394.086 16.781 cv
393.977 16.766 393.891 16.75 393.828 16.727 cv
393.758 16.703 393.715 16.672 393.691 16.629 cv
393.664 16.594 393.648 16.547 393.652 16.484 cv
393.652 6.23798 li
393.648 6.18701 393.664 6.14099 393.699 6.09802 cv
393.727 6.05902 393.781 6.02301 393.859 5.992 cv
393.934 5.96503 394.035 5.94501 394.16 5.92603 cv
394.285 5.914 394.441 5.90601 394.637 5.90198 cv
394.824 5.90601 394.984 5.914 395.109 5.92603 cv
395.234 5.94501 395.332 5.96503 395.41 5.992 cv
395.48 6.02301 395.535 6.05902 395.57 6.09802 cv
395.598 6.14099 395.613 6.18701 395.617 6.23798 cv
395.617 10.078 li
395.793 9.90198 395.969 9.75403 396.148 9.62903 cv
396.32 9.508 396.496 9.40198 396.676 9.32001 cv
396.848 9.242 397.031 9.18402 397.223 9.14502 cv
397.406 9.10901 397.605 9.09399 397.816 9.09003 cv
398.328 9.09399 398.762 9.19501 399.125 9.39801 cv
399.48 9.60498 399.773 9.883 400 10.23 cv
400.223 10.578 400.387 10.984 400.496 11.449 cv
400.598 11.914 400.652 12.402 400.652 12.914 cv
cp
398.617 13.055 mo
398.613 12.762 398.59 12.477 398.551 12.199 cv
398.504 11.926 398.43 11.684 398.32 11.469 cv
398.211 11.258 398.066 11.086 397.895 10.957 cv
397.719 10.832 397.5 10.77 397.238 10.766 cv
397.105 10.77 396.98 10.785 396.855 10.82 cv
396.73 10.859 396.602 10.922 396.469 11.008 cv
396.336 11.098 396.199 11.215 396.063 11.352 cv
395.918 11.492 395.77 11.664 395.617 11.871 cv
395.617 14.18 li
395.891 14.535 396.152 14.805 396.406 14.984 cv
396.656 15.172 396.922 15.262 397.199 15.262 cv
397.453 15.262 397.668 15.199 397.848 15.066 cv
398.02 14.941 398.168 14.773 398.285 14.562 cv
398.402 14.359 398.484 14.121 398.539 13.852 cv
398.586 13.59 398.613 13.324 398.617 13.055 cv
cp
f
405.777 12.832 mo
405.773 13.133 405.746 13.344 405.691 13.461 cv
405.633 13.586 405.543 13.645 405.418 13.641 cv
402.176 13.641 li
402.047 13.645 401.953 13.582 401.898 13.457 cv
401.836 13.336 401.809 13.129 401.813 12.832 cv
401.809 12.543 401.836 12.336 401.898 12.215 cv
401.953 12.098 402.047 12.039 402.176 12.035 cv
405.418 12.035 li
405.48 12.039 405.531 12.051 405.578 12.074 cv
405.617 12.102 405.656 12.148 405.691 12.207 cv
405.719 12.273 405.742 12.355 405.758 12.457 cv
405.77 12.562 405.773 12.687 405.777 12.832 cv
cp
f
409.426 16.469 mo
409.422 16.523 409.406 16.57 409.375 16.609 cv
409.34 16.652 409.281 16.687 409.207 16.711 cv
409.125 16.738 409.023 16.758 408.895 16.773 cv
408.762 16.789 408.594 16.797 408.398 16.797 cv
408.195 16.797 408.031 16.789 407.902 16.773 cv
407.766 16.758 407.66 16.738 407.586 16.711 cv
407.504 16.687 407.449 16.652 407.418 16.609 cv
407.383 16.57 407.363 16.523 407.367 16.469 cv
407.367 6.94501 li
407.363 6.89801 407.383 6.85199 407.418 6.80499 cv
407.449 6.76599 407.504 6.72998 407.59 6.703 cv
407.668 6.67999 407.773 6.65997 407.906 6.64099 cv
408.031 6.62903 408.195 6.62097 408.398 6.617 cv
408.594 6.62097 408.762 6.62903 408.895 6.64099 cv
409.023 6.65997 409.125 6.67999 409.207 6.703 cv
409.281 6.72998 409.34 6.76599 409.375 6.80499 cv
409.406 6.85199 409.422 6.89801 409.426 6.94501 cv
cp
f
422.508 16.484 mo
422.504 16.539 422.488 16.582 422.461 16.621 cv
422.426 16.66 422.375 16.695 422.305 16.719 cv
422.23 16.746 422.129 16.762 422.008 16.777 cv
421.883 16.789 421.727 16.797 421.535 16.797 cv
421.336 16.797 421.176 16.789 421.051 16.777 cv
420.926 16.762 420.824 16.746 420.75 16.719 cv
420.672 16.695 420.621 16.66 420.594 16.621 cv
420.566 16.582 420.551 16.539 420.555 16.484 cv
420.555 12.363 li
420.551 12.133 420.531 11.918 420.488 11.723 cv
420.441 11.531 420.371 11.367 420.285 11.23 cv
420.191 11.094 420.078 10.988 419.941 10.91 cv
419.801 10.836 419.637 10.797 419.445 10.797 cv
419.211 10.797 418.973 10.891 418.734 11.07 cv
418.496 11.254 418.238 11.516 417.957 11.863 cv
417.957 16.484 li
417.957 16.539 417.941 16.582 417.91 16.621 cv
417.879 16.66 417.824 16.695 417.75 16.719 cv
417.672 16.746 417.57 16.762 417.449 16.777 cv
417.324 16.789 417.172 16.797 416.984 16.797 cv
416.789 16.797 416.629 16.789 416.508 16.777 cv
416.379 16.762 416.277 16.746 416.207 16.719 cv
416.129 16.695 416.078 16.66 416.047 16.621 cv
416.016 16.582 416 16.539 416 16.484 cv
416 12.363 li
416 12.133 415.977 11.918 415.934 11.723 cv
415.891 11.531 415.824 11.367 415.738 11.23 cv
415.645 11.094 415.531 10.988 415.395 10.91 cv
415.25 10.836 415.086 10.797 414.902 10.797 cv
414.66 10.797 414.422 10.891 414.184 11.07 cv
413.945 11.254 413.688 11.516 413.414 11.863 cv
413.414 16.484 li
413.41 16.539 413.395 16.582 413.367 16.621 cv
413.332 16.66 413.277 16.695 413.207 16.719 cv
413.129 16.746 413.031 16.762 412.906 16.777 cv
412.781 16.789 412.621 16.797 412.434 16.797 cv
412.238 16.797 412.082 16.789 411.957 16.777 cv
411.832 16.762 411.73 16.746 411.656 16.719 cv
411.578 16.695 411.523 16.66 411.496 16.621 cv
411.461 16.582 411.445 16.539 411.449 16.484 cv
411.449 9.53497 li
411.445 9.48798 411.461 9.44098 411.488 9.39801 cv
411.512 9.36298 411.559 9.33197 411.629 9.30103 cv
411.695 9.27698 411.781 9.258 411.891 9.242 cv
411.996 9.23401 412.129 9.22699 412.293 9.22302 cv
412.457 9.22699 412.594 9.23401 412.703 9.242 cv
412.809 9.258 412.895 9.27698 412.957 9.30103 cv
413.016 9.33197 413.059 9.36298 413.086 9.39801 cv
413.109 9.44098 413.121 9.48798 413.125 9.53497 cv
413.125 10.336 li
413.508 9.92603 413.891 9.61298 414.273 9.40198 cv
414.652 9.19501 415.055 9.09399 415.473 9.09003 cv
415.758 9.09399 416.012 9.12097 416.242 9.17999 cv
416.469 9.242 416.676 9.328 416.855 9.43701 cv
417.035 9.55103 417.188 9.68701 417.316 9.84003 cv
417.445 9.99597 417.555 10.168 417.645 10.359 cv
417.852 10.137 418.055 9.94501 418.258 9.78497 cv
418.453 9.625 418.652 9.492 418.848 9.39099 cv
419.043 9.289 419.238 9.21503 419.434 9.164 cv
419.629 9.117 419.828 9.09399 420.031 9.09003 cv
420.492 9.09399 420.879 9.172 421.199 9.32397 cv
421.512 9.48401 421.77 9.69501 421.965 9.961 cv
422.16 10.23 422.297 10.543 422.383 10.898 cv
422.461 11.258 422.504 11.637 422.508 12.035 cv
cp
f
430.348 16.508 mo
430.344 16.586 430.316 16.641 430.27 16.68 cv
430.215 16.723 430.133 16.75 430.023 16.77 cv
429.906 16.785 429.742 16.797 429.527 16.797 cv
429.289 16.797 429.117 16.785 429.016 16.77 cv
428.906 16.75 428.832 16.723 428.793 16.68 cv
428.746 16.641 428.727 16.586 428.727 16.508 cv
428.727 15.957 li
428.438 16.266 428.109 16.504 427.746 16.672 cv
427.379 16.844 426.973 16.926 426.527 16.93 cv
426.156 16.926 425.816 16.879 425.508 16.785 cv
425.199 16.691 424.934 16.551 424.707 16.355 cv
424.48 16.168 424.305 15.934 424.18 15.652 cv
424.055 15.375 423.992 15.047 423.996 14.668 cv
423.992 14.27 424.07 13.918 424.23 13.613 cv
424.387 13.316 424.625 13.07 424.941 12.875 cv
425.254 12.684 425.645 12.539 426.113 12.441 cv
426.582 12.352 427.125 12.305 427.742 12.301 cv
428.422 12.301 li
428.422 11.879 li
428.422 11.664 428.398 11.473 428.355 11.309 cv
428.309 11.148 428.234 11.012 428.137 10.898 cv
428.031 10.793 427.898 10.711 427.73 10.656 cv
427.559 10.605 427.348 10.582 427.105 10.578 cv
426.773 10.582 426.48 10.617 426.227 10.687 cv
425.965 10.762 425.738 10.844 425.543 10.93 cv
425.344 11.023 425.18 11.102 425.051 11.172 cv
424.914 11.246 424.805 11.285 424.727 11.281 cv
424.664 11.285 424.613 11.266 424.574 11.227 cv
424.527 11.191 424.492 11.141 424.465 11.07 cv
424.434 11.008 424.41 10.922 424.398 10.82 cv
424.379 10.723 424.371 10.613 424.375 10.492 cv
424.371 10.332 424.387 10.207 424.414 10.109 cv
424.438 10.02 424.484 9.93402 424.563 9.85498 cv
424.633 9.78101 424.762 9.69897 424.945 9.60901 cv
425.125 9.52002 425.336 9.43402 425.582 9.35498 cv
425.824 9.27698 426.094 9.21503 426.383 9.164 cv
426.672 9.117 426.969 9.09399 427.277 9.09003 cv
427.82 9.09399 428.285 9.14502 428.672 9.25 cv
429.059 9.35901 429.379 9.52301 429.629 9.742 cv
429.879 9.961 430.059 10.246 430.176 10.594 cv
430.285 10.945 430.344 11.359 430.348 11.832 cv
cp
428.422 13.531 mo
427.672 13.531 li
427.355 13.535 427.086 13.559 426.863 13.602 cv
426.637 13.652 426.453 13.723 426.316 13.812 cv
426.172 13.91 426.07 14.023 426.008 14.152 cv
425.941 14.289 425.906 14.437 425.91 14.605 cv
425.906 14.898 426 15.129 426.188 15.293 cv
426.371 15.461 426.629 15.543 426.957 15.543 cv
427.23 15.543 427.48 15.473 427.715 15.332 cv
427.941 15.191 428.18 14.988 428.422 14.715 cv
cp
f
438.574 10.016 mo
438.57 10.27 438.543 10.453 438.488 10.57 cv
438.43 10.691 438.359 10.75 438.281 10.75 cv
437.461 10.75 li
437.574 10.875 437.656 11.02 437.707 11.176 cv
437.754 11.336 437.777 11.5 437.781 11.668 cv
437.777 12.078 437.711 12.437 437.578 12.75 cv
437.441 13.066 437.246 13.332 436.996 13.543 cv
436.742 13.762 436.441 13.926 436.086 14.035 cv
435.727 14.152 435.328 14.207 434.898 14.203 cv
434.672 14.207 434.461 14.18 434.258 14.121 cv
434.055 14.07 433.898 14.008 433.789 13.93 cv
433.727 14 433.668 14.078 433.621 14.172 cv
433.57 14.266 433.547 14.371 433.551 14.48 cv
433.547 14.637 433.613 14.758 433.746 14.852 cv
433.875 14.949 434.063 15.004 434.305 15.012 cv
435.996 15.074 li
436.391 15.09 436.742 15.148 437.051 15.242 cv
437.359 15.344 437.621 15.477 437.832 15.648 cv
438.043 15.824 438.203 16.035 438.313 16.277 cv
438.422 16.523 438.477 16.797 438.48 17.109 cv
438.477 17.445 438.402 17.77 438.254 18.078 cv
438.105 18.379 437.879 18.641 437.578 18.867 cv
437.273 19.086 436.895 19.266 436.441 19.398 cv
435.984 19.527 435.453 19.59 434.852 19.594 cv
434.254 19.59 433.75 19.543 433.332 19.453 cv
432.914 19.355 432.57 19.227 432.305 19.062 cv
432.035 18.895 431.84 18.695 431.723 18.469 cv
431.598 18.234 431.539 17.98 431.539 17.707 cv
431.539 17.535 431.559 17.375 431.605 17.219 cv
431.645 17.062 431.711 16.91 431.801 16.77 cv
431.883 16.625 431.988 16.492 432.113 16.359 cv
432.238 16.23 432.379 16.105 432.543 15.984 cv
432.316 15.871 432.145 15.711 432.023 15.5 cv
431.902 15.297 431.844 15.07 431.844 14.824 cv
431.844 14.523 431.91 14.246 432.051 13.988 cv
432.188 13.738 432.371 13.508 432.598 13.305 cv
432.414 13.125 432.27 12.91 432.16 12.652 cv
432.051 12.402 431.996 12.082 432 11.699 cv
431.996 11.297 432.066 10.937 432.211 10.613 cv
432.352 10.297 432.551 10.027 432.809 9.80499 cv
433.063 9.586 433.367 9.414 433.719 9.297 cv
434.07 9.17999 434.461 9.12097 434.891 9.12097 cv
435.109 9.12097 435.316 9.13702 435.516 9.15997 cv
435.715 9.19098 435.902 9.22699 436.074 9.27002 cv
438.281 9.27002 li
438.363 9.27301 438.434 9.33197 438.492 9.44098 cv
438.543 9.55902 438.57 9.75 438.574 10.016 cv
cp
436.059 11.66 mo
436.055 11.289 435.953 11 435.746 10.789 cv
435.535 10.586 435.242 10.48 434.867 10.477 cv
434.672 10.48 434.5 10.512 434.359 10.574 cv
434.211 10.641 434.09 10.73 433.996 10.84 cv
433.895 10.953 433.824 11.082 433.781 11.23 cv
433.73 11.379 433.707 11.535 433.711 11.691 cv
433.707 12.051 433.813 12.328 434.023 12.531 cv
434.23 12.738 434.52 12.844 434.891 12.84 cv
435.086 12.844 435.254 12.812 435.402 12.746 cv
435.543 12.687 435.664 12.602 435.766 12.488 cv
435.859 12.383 435.934 12.254 435.984 12.109 cv
436.031 11.969 436.055 11.82 436.059 11.66 cv
cp
436.52 17.211 mo
436.52 16.973 436.426 16.797 436.238 16.672 cv
436.051 16.551 435.793 16.48 435.465 16.469 cv
434.07 16.43 li
433.934 16.531 433.824 16.625 433.746 16.715 cv
433.664 16.805 433.602 16.891 433.555 16.977 cv
433.504 17.059 433.469 17.141 433.457 17.219 cv
433.438 17.297 433.43 17.375 433.434 17.461 cv
433.43 17.715 433.563 17.914 433.824 18.051 cv
434.086 18.184 434.457 18.25 434.938 18.254 cv
435.23 18.25 435.477 18.219 435.684 18.164 cv
435.883 18.102 436.047 18.023 436.176 17.926 cv
436.297 17.824 436.387 17.715 436.441 17.594 cv
436.492 17.473 436.52 17.344 436.52 17.211 cv
cp
f
446.184 12.809 mo
446.18 13.047 446.129 13.223 446.023 13.336 cv
445.914 13.453 445.766 13.512 445.586 13.508 cv
441.352 13.508 li
441.348 13.809 441.383 14.078 441.457 14.316 cv
441.523 14.559 441.637 14.762 441.793 14.93 cv
441.945 15.102 442.141 15.23 442.383 15.316 cv
442.621 15.406 442.91 15.449 443.254 15.449 cv
443.594 15.449 443.895 15.426 444.156 15.375 cv
444.414 15.328 444.641 15.273 444.832 15.211 cv
445.02 15.152 445.176 15.098 445.305 15.047 cv
445.426 15 445.527 14.977 445.609 14.973 cv
445.652 14.977 445.691 14.984 445.727 15 cv
445.754 15.02 445.781 15.051 445.801 15.098 cv
445.82 15.145 445.832 15.211 445.844 15.297 cv
445.848 15.383 445.852 15.492 445.855 15.621 cv
445.852 15.738 445.852 15.836 445.848 15.914 cv
445.84 15.996 445.832 16.062 445.824 16.117 cv
445.813 16.176 445.797 16.227 445.777 16.262 cv
445.758 16.305 445.73 16.34 445.699 16.375 cv
445.664 16.414 445.57 16.465 445.422 16.523 cv
445.266 16.59 445.074 16.652 444.844 16.707 cv
444.605 16.77 444.336 16.816 444.039 16.863 cv
443.734 16.902 443.414 16.926 443.074 16.93 cv
442.453 16.926 441.91 16.852 441.449 16.695 cv
440.98 16.543 440.594 16.305 440.285 15.988 cv
439.969 15.672 439.734 15.273 439.586 14.789 cv
439.43 14.309 439.355 13.742 439.359 13.086 cv
439.355 12.473 439.434 11.914 439.598 11.418 cv
439.754 10.922 439.988 10.504 440.301 10.156 cv
440.605 9.81201 440.98 9.547 441.418 9.36298 cv
441.855 9.18402 442.348 9.09399 442.902 9.09003 cv
443.48 9.09399 443.98 9.17999 444.395 9.34802 cv
444.809 9.52301 445.145 9.76202 445.41 10.062 cv
445.672 10.367 445.867 10.727 445.996 11.141 cv
446.117 11.559 446.18 12.008 446.184 12.496 cv
cp
444.281 12.246 mo
444.293 11.695 444.184 11.262 443.949 10.949 cv
443.715 10.637 443.348 10.48 442.855 10.477 cv
442.605 10.48 442.391 10.527 442.207 10.617 cv
442.02 10.715 441.867 10.84 441.746 10.996 cv
441.621 11.156 441.527 11.344 441.465 11.559 cv
441.398 11.773 441.359 12.004 441.352 12.246 cv
cp
f
452.684 14.52 mo
452.68 14.918 452.605 15.266 452.461 15.566 cv
452.313 15.867 452.105 16.121 451.836 16.32 cv
451.563 16.527 451.242 16.676 450.875 16.777 cv
450.508 16.875 450.105 16.926 449.676 16.93 cv
449.41 16.926 449.164 16.906 448.93 16.871 cv
448.695 16.828 448.484 16.781 448.297 16.723 cv
448.109 16.664 447.953 16.602 447.828 16.539 cv
447.703 16.477 447.609 16.418 447.555 16.363 cv
447.496 16.309 447.453 16.227 447.426 16.109 cv
447.391 15.996 447.375 15.82 447.379 15.59 cv
447.375 15.441 447.383 15.32 447.395 15.227 cv
447.402 15.137 447.418 15.066 447.441 15.008 cv
447.461 14.957 447.484 14.918 447.52 14.898 cv
447.547 14.883 447.586 14.875 447.633 14.871 cv
447.688 14.875 447.773 14.906 447.887 14.969 cv
447.996 15.035 448.133 15.109 448.305 15.184 cv
448.469 15.266 448.664 15.336 448.883 15.402 cv
449.102 15.473 449.352 15.508 449.637 15.504 cv
449.813 15.508 449.969 15.488 450.109 15.449 cv
450.242 15.414 450.363 15.363 450.469 15.293 cv
450.566 15.227 450.641 15.141 450.695 15.035 cv
450.742 14.934 450.77 14.812 450.773 14.676 cv
450.77 14.52 450.723 14.387 450.629 14.277 cv
450.535 14.168 450.406 14.07 450.25 13.984 cv
450.086 13.902 449.906 13.824 449.711 13.75 cv
449.508 13.68 449.305 13.602 449.094 13.508 cv
448.883 13.422 448.676 13.32 448.48 13.203 cv
448.277 13.094 448.098 12.953 447.941 12.785 cv
447.777 12.621 447.652 12.422 447.559 12.184 cv
447.465 11.953 447.418 11.672 447.418 11.34 cv
447.418 11.012 447.48 10.707 447.609 10.426 cv
447.738 10.152 447.926 9.914 448.172 9.71503 cv
448.414 9.52002 448.711 9.367 449.063 9.25403 cv
449.41 9.14801 449.805 9.09399 450.246 9.09003 cv
450.461 9.09399 450.672 9.10901 450.879 9.13702 cv
451.082 9.172 451.27 9.211 451.438 9.25403 cv
451.602 9.30499 451.742 9.35498 451.859 9.40601 cv
451.973 9.46503 452.055 9.51202 452.105 9.547 cv
452.152 9.59003 452.188 9.62903 452.211 9.664 cv
452.23 9.70697 452.242 9.75403 452.254 9.80499 cv
452.262 9.85901 452.273 9.92603 452.281 10.004 cv
452.289 10.09 452.293 10.187 452.293 10.305 cv
452.293 10.445 452.289 10.562 452.281 10.648 cv
452.273 10.742 452.258 10.812 452.242 10.859 cv
452.223 10.914 452.199 10.949 452.172 10.965 cv
452.137 10.988 452.102 10.996 452.063 10.992 cv
452.012 10.996 451.938 10.969 451.844 10.91 cv
451.742 10.859 451.621 10.801 451.473 10.734 cv
451.324 10.676 451.152 10.617 450.957 10.559 cv
450.762 10.508 450.539 10.48 450.293 10.477 cv
450.113 10.48 449.961 10.5 449.832 10.531 cv
449.699 10.57 449.59 10.621 449.512 10.687 cv
449.426 10.758 449.363 10.836 449.324 10.926 cv
449.277 11.02 449.258 11.117 449.262 11.219 cv
449.258 11.379 449.309 11.516 449.41 11.621 cv
449.508 11.734 449.637 11.828 449.801 11.91 cv
449.961 11.996 450.145 12.074 450.352 12.145 cv
450.555 12.219 450.762 12.301 450.973 12.383 cv
451.18 12.473 451.387 12.57 451.598 12.684 cv
451.801 12.797 451.984 12.937 452.145 13.102 cv
452.305 13.27 452.434 13.469 452.535 13.699 cv
452.629 13.934 452.68 14.207 452.684 14.52 cv
cp
f
461.457 12.832 mo
461.453 13.133 461.426 13.344 461.371 13.461 cv
461.313 13.586 461.223 13.645 461.098 13.641 cv
457.855 13.641 li
457.727 13.645 457.633 13.582 457.578 13.457 cv
457.516 13.336 457.488 13.129 457.492 12.832 cv
457.488 12.543 457.516 12.336 457.578 12.215 cv
457.633 12.098 457.727 12.039 457.855 12.035 cv
461.098 12.035 li
461.16 12.039 461.211 12.051 461.258 12.074 cv
461.297 12.102 461.336 12.148 461.371 12.207 cv
461.398 12.273 461.422 12.355 461.438 12.457 cv
461.449 12.562 461.453 12.687 461.457 12.832 cv
cp
f
473.184 14.047 mo
473.184 14.508 473.102 14.914 472.945 15.27 cv
472.781 15.633 472.547 15.937 472.242 16.18 cv
471.93 16.43 471.547 16.613 471.094 16.738 cv
470.633 16.863 470.105 16.926 469.512 16.93 cv
468.938 16.926 468.438 16.867 468.008 16.758 cv
467.574 16.641 467.215 16.477 466.926 16.258 cv
466.633 16.039 466.414 15.766 466.27 15.437 cv
466.125 15.113 466.051 14.742 466.055 14.32 cv
466.051 14.035 466.094 13.766 466.184 13.512 cv
466.266 13.262 466.395 13.027 466.563 12.812 cv
466.73 12.598 466.941 12.395 467.195 12.203 cv
467.445 12.016 467.734 11.836 468.063 11.66 cv
467.797 11.516 467.559 11.359 467.348 11.191 cv
467.133 11.023 466.949 10.84 466.801 10.637 cv
466.648 10.441 466.535 10.223 466.457 9.97998 cv
466.379 9.74597 466.34 9.48401 466.344 9.19897 cv
466.34 8.797 466.41 8.42999 466.555 8.09802 cv
466.695 7.77002 466.91 7.48401 467.195 7.23798 cv
467.477 7 467.828 6.81201 468.258 6.68402 cv
468.68 6.55499 469.176 6.492 469.738 6.48798 cv
470.293 6.492 470.77 6.55103 471.168 6.66803 cv
471.566 6.789 471.891 6.95697 472.148 7.172 cv
472.398 7.39502 472.586 7.65601 472.711 7.95697 cv
472.828 8.26202 472.891 8.59802 472.895 8.96503 cv
472.891 9.211 472.852 9.44897 472.773 9.67999 cv
472.691 9.90997 472.578 10.129 472.434 10.336 cv
472.289 10.547 472.109 10.742 471.898 10.926 cv
471.684 11.113 471.441 11.281 471.172 11.426 cv
471.488 11.594 471.773 11.77 472.023 11.957 cv
472.273 12.145 472.48 12.348 472.652 12.562 cv
472.82 12.777 472.953 13.008 473.047 13.25 cv
473.137 13.5 473.184 13.766 473.184 14.047 cv
cp
470.926 9.15198 mo
470.922 8.97302 470.895 8.80902 470.848 8.65997 cv
470.793 8.51599 470.711 8.39502 470.602 8.29303 cv
470.484 8.19501 470.348 8.117 470.188 8.06201 cv
470.02 8.01202 469.824 7.98401 469.605 7.98401 cv
469.168 7.98401 468.844 8.086 468.633 8.28497 cv
468.414 8.48401 468.309 8.76202 468.313 9.11298 cv
468.309 9.28497 468.336 9.43701 468.395 9.57397 cv
468.445 9.71503 468.531 9.84802 468.648 9.96899 cv
468.762 10.098 468.91 10.219 469.094 10.336 cv
469.273 10.457 469.488 10.586 469.738 10.719 cv
470.117 10.5 470.41 10.262 470.617 10.004 cv
470.82 9.75403 470.922 9.46899 470.926 9.15198 cv
cp
471.156 14.187 mo
471.156 14 471.121 13.824 471.059 13.66 cv
470.992 13.504 470.895 13.352 470.758 13.211 cv
470.617 13.07 470.441 12.937 470.238 12.809 cv
470.027 12.68 469.785 12.547 469.512 12.41 cv
469.27 12.543 469.063 12.672 468.883 12.801 cv
468.699 12.93 468.547 13.066 468.43 13.207 cv
468.309 13.352 468.219 13.504 468.16 13.66 cv
468.098 13.824 468.066 13.992 468.07 14.172 cv
468.066 14.578 468.199 14.887 468.465 15.098 cv
468.727 15.312 469.117 15.422 469.637 15.418 cv
470.145 15.422 470.523 15.312 470.777 15.09 cv
471.027 14.875 471.156 14.574 471.156 14.187 cv
cp
f
485.039 7.508 mo
485.035 7.664 485.027 7.79303 485.02 7.89502 cv
485.004 8.00403 484.984 8.09003 484.961 8.15198 cv
484.93 8.21899 484.898 8.26599 484.863 8.29303 cv
484.82 8.328 484.777 8.34399 484.734 8.34003 cv
482.211 8.34003 li
482.211 16.469 li
482.211 16.523 482.191 16.57 482.16 16.609 cv
482.121 16.652 482.066 16.687 481.992 16.711 cv
481.91 16.738 481.805 16.758 481.676 16.773 cv
481.539 16.789 481.375 16.797 481.18 16.797 cv
480.984 16.797 480.82 16.789 480.688 16.773 cv
480.555 16.758 480.449 16.738 480.371 16.711 cv
480.293 16.687 480.234 16.652 480.203 16.609 cv
480.164 16.57 480.148 16.523 480.152 16.469 cv
480.152 8.34003 li
477.629 8.34003 li
477.574 8.34399 477.527 8.328 477.496 8.29303 cv
477.457 8.26599 477.426 8.21899 477.402 8.15198 cv
477.371 8.09003 477.352 8.00403 477.344 7.89502 cv
477.328 7.79303 477.324 7.664 477.324 7.508 cv
477.324 7.35498 477.328 7.22302 477.344 7.10901 cv
477.352 7.00403 477.371 6.914 477.402 6.84802 cv
477.426 6.78497 477.457 6.73798 477.496 6.70697 cv
477.527 6.67999 477.574 6.66803 477.629 6.664 cv
484.734 6.664 li
484.777 6.66803 484.82 6.67999 484.863 6.70697 cv
484.898 6.73798 484.93 6.78497 484.961 6.84802 cv
484.984 6.914 485.004 7.00403 485.02 7.10901 cv
485.027 7.22302 485.035 7.35498 485.039 7.508 cv
cp
f
492.754 16.484 mo
492.75 16.539 492.734 16.582 492.707 16.621 cv
492.672 16.66 492.621 16.695 492.551 16.719 cv
492.477 16.746 492.375 16.762 492.25 16.777 cv
492.121 16.789 491.965 16.797 491.781 16.797 cv
491.586 16.797 491.426 16.789 491.301 16.777 cv
491.172 16.762 491.07 16.746 491 16.719 cv
490.922 16.695 490.871 16.66 490.844 16.621 cv
490.809 16.582 490.793 16.539 490.797 16.484 cv
490.797 12.52 li
490.793 12.184 490.77 11.918 490.723 11.723 cv
490.672 11.531 490.598 11.367 490.508 11.23 cv
490.414 11.094 490.297 10.988 490.148 10.91 cv
490 10.836 489.824 10.797 489.629 10.797 cv
489.375 10.797 489.125 10.891 488.871 11.07 cv
488.617 11.254 488.352 11.516 488.078 11.863 cv
488.078 16.484 li
488.074 16.539 488.059 16.582 488.031 16.621 cv
487.996 16.66 487.941 16.695 487.871 16.719 cv
487.793 16.746 487.695 16.762 487.57 16.777 cv
487.445 16.789 487.285 16.797 487.098 16.797 cv
486.902 16.797 486.746 16.789 486.621 16.777 cv
486.496 16.762 486.395 16.746 486.32 16.719 cv
486.242 16.695 486.188 16.66 486.16 16.621 cv
486.125 16.582 486.109 16.539 486.113 16.484 cv
486.113 6.23798 li
486.109 6.18701 486.125 6.14099 486.16 6.09802 cv
486.188 6.05902 486.242 6.02301 486.32 5.992 cv
486.395 5.96503 486.496 5.94501 486.621 5.92603 cv
486.746 5.914 486.902 5.90601 487.098 5.90198 cv
487.285 5.90601 487.445 5.914 487.57 5.92603 cv
487.695 5.94501 487.793 5.96503 487.871 5.992 cv
487.941 6.02301 487.996 6.05902 488.031 6.09802 cv
488.059 6.14099 488.074 6.18701 488.078 6.23798 cv
488.078 10.078 li
488.414 9.75 488.758 9.50403 489.109 9.336 cv
489.457 9.17603 489.824 9.09399 490.207 9.09003 cv
490.676 9.09399 491.074 9.172 491.402 9.32397 cv
491.727 9.48401 491.988 9.69501 492.188 9.96503 cv
492.387 10.234 492.531 10.551 492.621 10.91 cv
492.707 11.273 492.75 11.711 492.754 12.223 cv
cp
f
499.152 10.18 mo
499.152 10.371 499.145 10.523 499.137 10.641 cv
499.121 10.762 499.105 10.855 499.09 10.922 cv
499.066 10.992 499.039 11.039 499.008 11.062 cv
498.969 11.09 498.926 11.102 498.879 11.102 cv
498.832 11.102 498.785 11.094 498.738 11.074 cv
498.684 11.059 498.625 11.039 498.563 11.016 cv
498.492 10.996 498.422 10.977 498.348 10.957 cv
498.266 10.941 498.18 10.934 498.09 10.93 cv
497.977 10.934 497.867 10.953 497.762 10.996 cv
497.652 11.043 497.539 11.113 497.426 11.203 cv
497.305 11.297 497.184 11.422 497.059 11.574 cv
496.93 11.734 496.793 11.926 496.648 12.152 cv
496.648 16.484 li
496.645 16.539 496.629 16.582 496.602 16.621 cv
496.566 16.66 496.512 16.695 496.441 16.719 cv
496.363 16.746 496.266 16.762 496.141 16.777 cv
496.016 16.789 495.855 16.797 495.668 16.797 cv
495.473 16.797 495.316 16.789 495.191 16.777 cv
495.066 16.762 494.965 16.746 494.891 16.719 cv
494.813 16.695 494.758 16.66 494.73 16.621 cv
494.695 16.582 494.68 16.539 494.684 16.484 cv
494.684 9.53497 li
494.68 9.48798 494.695 9.44098 494.723 9.39801 cv
494.746 9.36298 494.793 9.33197 494.863 9.30103 cv
494.93 9.27698 495.016 9.258 495.125 9.242 cv
495.23 9.23401 495.363 9.22699 495.527 9.22302 cv
495.691 9.22699 495.828 9.23401 495.938 9.242 cv
496.043 9.258 496.129 9.27698 496.191 9.30103 cv
496.25 9.33197 496.293 9.36298 496.32 9.39801 cv
496.344 9.44098 496.355 9.48798 496.359 9.53497 cv
496.359 10.398 li
496.539 10.141 496.711 9.92999 496.875 9.758 cv
497.031 9.59399 497.188 9.45697 497.336 9.35498 cv
497.48 9.258 497.625 9.19098 497.77 9.14801 cv
497.914 9.11298 498.059 9.09399 498.207 9.09003 cv
498.273 9.09399 498.348 9.09802 498.426 9.10199 cv
498.504 9.11298 498.582 9.125 498.668 9.14099 cv
498.746 9.15997 498.82 9.17999 498.887 9.203 cv
498.945 9.22699 498.992 9.25403 499.023 9.27698 cv
499.051 9.30902 499.07 9.336 499.086 9.36298 cv
499.098 9.39801 499.109 9.44098 499.121 9.492 cv
499.129 9.55103 499.137 9.633 499.145 9.73798 cv
499.148 9.84802 499.152 9.99597 499.152 10.18 cv
cp
f
506.594 12.809 mo
506.59 13.047 506.539 13.223 506.434 13.336 cv
506.324 13.453 506.176 13.512 505.996 13.508 cv
501.762 13.508 li
501.758 13.809 501.793 14.078 501.867 14.316 cv
501.934 14.559 502.047 14.762 502.203 14.93 cv
502.355 15.102 502.551 15.23 502.793 15.316 cv
503.031 15.406 503.32 15.449 503.664 15.449 cv
504.004 15.449 504.305 15.426 504.566 15.375 cv
504.824 15.328 505.051 15.273 505.242 15.211 cv
505.43 15.152 505.586 15.098 505.715 15.047 cv
505.836 15 505.938 14.977 506.02 14.973 cv
506.063 14.977 506.102 14.984 506.137 15 cv
506.164 15.02 506.191 15.051 506.211 15.098 cv
506.23 15.145 506.242 15.211 506.254 15.297 cv
506.258 15.383 506.262 15.492 506.266 15.621 cv
506.262 15.738 506.262 15.836 506.258 15.914 cv
506.25 15.996 506.242 16.062 506.234 16.117 cv
506.223 16.176 506.207 16.227 506.188 16.262 cv
506.168 16.305 506.141 16.34 506.109 16.375 cv
506.074 16.414 505.98 16.465 505.832 16.523 cv
505.676 16.59 505.484 16.652 505.254 16.707 cv
505.016 16.77 504.746 16.816 504.449 16.863 cv
504.145 16.902 503.824 16.926 503.484 16.93 cv
502.863 16.926 502.32 16.852 501.859 16.695 cv
501.391 16.543 501.004 16.305 500.695 15.988 cv
500.379 15.672 500.145 15.273 499.996 14.789 cv
499.84 14.309 499.766 13.742 499.77 13.086 cv
499.766 12.473 499.844 11.914 500.008 11.418 cv
500.164 10.922 500.398 10.504 500.711 10.156 cv
501.016 9.81201 501.391 9.547 501.828 9.36298 cv
502.266 9.18402 502.758 9.09399 503.313 9.09003 cv
503.891 9.09399 504.391 9.17999 504.805 9.34802 cv
505.219 9.52301 505.555 9.76202 505.82 10.062 cv
506.082 10.367 506.277 10.727 506.406 11.141 cv
506.527 11.559 506.59 12.008 506.594 12.496 cv
cp
504.691 12.246 mo
504.703 11.695 504.594 11.262 504.359 10.949 cv
504.125 10.637 503.758 10.48 503.266 10.477 cv
503.016 10.48 502.801 10.527 502.617 10.617 cv
502.43 10.715 502.277 10.84 502.156 10.996 cv
502.031 11.156 501.938 11.344 501.875 11.559 cv
501.809 11.773 501.77 12.004 501.762 12.246 cv
cp
f
514.125 16.508 mo
514.121 16.586 514.094 16.641 514.047 16.68 cv
513.992 16.723 513.91 16.75 513.801 16.77 cv
513.684 16.785 513.52 16.797 513.305 16.797 cv
513.066 16.797 512.895 16.785 512.793 16.77 cv
512.684 16.75 512.609 16.723 512.57 16.68 cv
512.523 16.641 512.504 16.586 512.504 16.508 cv
512.504 15.957 li
512.215 16.266 511.887 16.504 511.523 16.672 cv
511.156 16.844 510.75 16.926 510.305 16.93 cv
509.934 16.926 509.594 16.879 509.285 16.785 cv
508.977 16.691 508.711 16.551 508.484 16.355 cv
508.258 16.168 508.082 15.934 507.957 15.652 cv
507.832 15.375 507.77 15.047 507.773 14.668 cv
507.77 14.27 507.848 13.918 508.008 13.613 cv
508.164 13.316 508.402 13.07 508.719 12.875 cv
509.031 12.684 509.422 12.539 509.891 12.441 cv
510.359 12.352 510.902 12.305 511.52 12.301 cv
512.199 12.301 li
512.199 11.879 li
512.199 11.664 512.176 11.473 512.133 11.309 cv
512.086 11.148 512.012 11.012 511.914 10.898 cv
511.809 10.793 511.676 10.711 511.508 10.656 cv
511.336 10.605 511.125 10.582 510.883 10.578 cv
510.551 10.582 510.258 10.617 510.004 10.687 cv
509.742 10.762 509.516 10.844 509.32 10.93 cv
509.121 11.023 508.957 11.102 508.828 11.172 cv
508.691 11.246 508.582 11.285 508.504 11.281 cv
508.441 11.285 508.391 11.266 508.352 11.227 cv
508.305 11.191 508.27 11.141 508.242 11.07 cv
508.211 11.008 508.188 10.922 508.176 10.82 cv
508.156 10.723 508.148 10.613 508.152 10.492 cv
508.148 10.332 508.164 10.207 508.191 10.109 cv
508.215 10.02 508.262 9.93402 508.34 9.85498 cv
508.41 9.78101 508.539 9.69897 508.723 9.60901 cv
508.902 9.52002 509.113 9.43402 509.359 9.35498 cv
509.602 9.27698 509.871 9.21503 510.16 9.164 cv
510.449 9.117 510.746 9.09399 511.055 9.09003 cv
511.598 9.09399 512.063 9.14502 512.449 9.25 cv
512.836 9.35901 513.156 9.52301 513.406 9.742 cv
513.656 9.961 513.836 10.246 513.953 10.594 cv
514.063 10.945 514.121 11.359 514.125 11.832 cv
cp
512.199 13.531 mo
511.449 13.531 li
511.133 13.535 510.863 13.559 510.641 13.602 cv
510.414 13.652 510.23 13.723 510.094 13.812 cv
509.949 13.91 509.848 14.023 509.785 14.152 cv
509.719 14.289 509.684 14.437 509.688 14.605 cv
509.684 14.898 509.777 15.129 509.965 15.293 cv
510.148 15.461 510.406 15.543 510.734 15.543 cv
511.008 15.543 511.258 15.473 511.492 15.332 cv
511.719 15.191 511.957 14.988 512.199 14.715 cv
cp
f
522.711 16.484 mo
522.707 16.547 522.695 16.594 522.672 16.629 cv
522.645 16.672 522.598 16.703 522.539 16.727 cv
522.473 16.75 522.391 16.766 522.285 16.781 cv
522.18 16.789 522.047 16.797 521.895 16.797 cv
521.723 16.797 521.59 16.789 521.488 16.781 cv
521.383 16.766 521.297 16.75 521.234 16.727 cv
521.168 16.703 521.121 16.672 521.094 16.629 cv
521.063 16.594 521.047 16.547 521.051 16.484 cv
521.051 15.715 li
520.691 16.102 520.316 16.398 519.926 16.609 cv
519.527 16.82 519.094 16.926 518.621 16.93 cv
518.086 16.926 517.637 16.824 517.273 16.621 cv
516.906 16.418 516.609 16.145 516.379 15.793 cv
516.145 15.449 515.977 15.043 515.875 14.574 cv
515.773 14.113 515.723 13.621 515.723 13.102 cv
515.723 12.488 515.785 11.934 515.918 11.437 cv
516.047 10.945 516.242 10.523 516.5 10.176 cv
516.754 9.828 517.07 9.56201 517.449 9.37097 cv
517.828 9.18701 518.266 9.09399 518.762 9.09003 cv
519.148 9.09399 519.5 9.172 519.82 9.328 cv
520.133 9.48798 520.449 9.71899 520.762 10.023 cv
520.762 6.26202 li
520.762 6.211 520.773 6.164 520.805 6.12097 cv
520.828 6.08197 520.883 6.047 520.961 6.01599 cv
521.035 5.98798 521.133 5.96899 521.262 5.94897 cv
521.383 5.93701 521.543 5.92999 521.738 5.92603 cv
521.93 5.92999 522.086 5.93701 522.211 5.94897 cv
522.332 5.96899 522.434 5.98798 522.508 6.01599 cv
522.578 6.047 522.629 6.08197 522.664 6.12097 cv
522.691 6.164 522.707 6.211 522.711 6.26202 cv
cp
520.762 11.84 mo
520.48 11.488 520.211 11.219 519.957 11.031 cv
519.695 10.844 519.426 10.75 519.148 10.75 cv
518.895 10.75 518.676 10.816 518.492 10.941 cv
518.305 11.074 518.156 11.242 518.047 11.453 cv
517.934 11.664 517.852 11.902 517.797 12.164 cv
517.742 12.43 517.715 12.699 517.715 12.969 cv
517.715 13.266 517.738 13.547 517.785 13.82 cv
517.832 14.098 517.906 14.344 518.016 14.559 cv
518.117 14.773 518.262 14.945 518.441 15.074 cv
518.617 15.207 518.84 15.273 519.109 15.27 cv
519.242 15.273 519.371 15.254 519.504 15.211 cv
519.629 15.176 519.762 15.113 519.895 15.02 cv
520.027 14.934 520.164 14.816 520.305 14.672 cv
520.445 14.531 520.598 14.355 520.762 14.148 cv
cp
f
529.535 14.52 mo
529.531 14.918 529.457 15.266 529.313 15.566 cv
529.164 15.867 528.957 16.121 528.688 16.32 cv
528.414 16.527 528.094 16.676 527.727 16.777 cv
527.359 16.875 526.957 16.926 526.527 16.93 cv
526.262 16.926 526.016 16.906 525.781 16.871 cv
525.547 16.828 525.336 16.781 525.148 16.723 cv
524.961 16.664 524.805 16.602 524.68 16.539 cv
524.555 16.477 524.461 16.418 524.406 16.363 cv
524.348 16.309 524.305 16.227 524.277 16.109 cv
524.242 15.996 524.227 15.82 524.23 15.59 cv
524.227 15.441 524.234 15.32 524.246 15.227 cv
524.254 15.137 524.27 15.066 524.293 15.008 cv
524.313 14.957 524.336 14.918 524.371 14.898 cv
524.398 14.883 524.438 14.875 524.484 14.871 cv
524.539 14.875 524.625 14.906 524.738 14.969 cv
524.848 15.035 524.984 15.109 525.156 15.184 cv
525.32 15.266 525.516 15.336 525.734 15.402 cv
525.953 15.473 526.203 15.508 526.488 15.504 cv
526.664 15.508 526.82 15.488 526.961 15.449 cv
527.094 15.414 527.215 15.363 527.32 15.293 cv
527.418 15.227 527.492 15.141 527.547 15.035 cv
527.594 14.934 527.621 14.812 527.625 14.676 cv
527.621 14.52 527.574 14.387 527.48 14.277 cv
527.387 14.168 527.258 14.07 527.102 13.984 cv
526.938 13.902 526.758 13.824 526.563 13.75 cv
526.359 13.68 526.156 13.602 525.945 13.508 cv
525.734 13.422 525.527 13.32 525.332 13.203 cv
525.129 13.094 524.949 12.953 524.793 12.785 cv
524.629 12.621 524.504 12.422 524.41 12.184 cv
524.316 11.953 524.27 11.672 524.27 11.34 cv
524.27 11.012 524.332 10.707 524.461 10.426 cv
524.59 10.152 524.777 9.914 525.023 9.71503 cv
525.266 9.52002 525.563 9.367 525.914 9.25403 cv
526.262 9.14801 526.656 9.09399 527.098 9.09003 cv
527.313 9.09399 527.523 9.10901 527.73 9.13702 cv
527.934 9.172 528.121 9.211 528.289 9.25403 cv
528.453 9.30499 528.594 9.35498 528.711 9.40601 cv
528.824 9.46503 528.906 9.51202 528.957 9.547 cv
529.004 9.59003 529.039 9.62903 529.063 9.664 cv
529.082 9.70697 529.094 9.75403 529.105 9.80499 cv
529.113 9.85901 529.125 9.92603 529.133 10.004 cv
529.141 10.09 529.145 10.187 529.145 10.305 cv
529.145 10.445 529.141 10.562 529.133 10.648 cv
529.125 10.742 529.109 10.812 529.094 10.859 cv
529.074 10.914 529.051 10.949 529.023 10.965 cv
528.988 10.988 528.953 10.996 528.914 10.992 cv
528.863 10.996 528.789 10.969 528.695 10.91 cv
528.594 10.859 528.473 10.801 528.324 10.734 cv
528.176 10.676 528.004 10.617 527.809 10.559 cv
527.613 10.508 527.391 10.48 527.145 10.477 cv
526.965 10.48 526.813 10.5 526.684 10.531 cv
526.551 10.57 526.441 10.621 526.363 10.687 cv
526.277 10.758 526.215 10.836 526.176 10.926 cv
526.129 11.02 526.109 11.117 526.113 11.219 cv
526.109 11.379 526.16 11.516 526.262 11.621 cv
526.359 11.734 526.488 11.828 526.652 11.91 cv
526.813 11.996 526.996 12.074 527.203 12.145 cv
527.406 12.219 527.613 12.301 527.824 12.383 cv
528.031 12.473 528.238 12.57 528.449 12.684 cv
528.652 12.797 528.836 12.937 528.996 13.102 cv
529.156 13.27 529.285 13.469 529.387 13.699 cv
529.48 13.934 529.531 14.207 529.535 14.52 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
