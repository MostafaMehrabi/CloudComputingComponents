%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AveragePreparationTimes-FourThreads.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:25:56 p.m.
%%BoundingBox: 0 0 673 553
%%HiResBoundingBox: 0 0 672.7201 552.3600
%%CropBox: 0 0 672.7201 552.3600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -552.36 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 552.36 li
672.72 552.36 li
672.72 0 li
cp
clp
gsave
0 552.36 mo
673 552.36 li
673 -.640015 li
0 -.640015 li
cp
clp
0 0 mo
672.719 0 li
672.719 552.359 li
0 552.359 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
57.359 482.879 mo
656.281 482.879 li
57.359 439.441 mo
656.281 439.441 li
57.359 395.879 mo
656.281 395.879 li
57.359 352.441 mo
656.281 352.441 li
57.359 308.879 mo
656.281 308.879 li
57.359 265.441 mo
656.281 265.441 li
57.359 221.879 mo
656.281 221.879 li
57.359 178.441 mo
656.281 178.441 li
57.359 134.879 mo
656.281 134.879 li
57.359 91.441 mo
656.281 91.441 li
57.359 47.879 mo
656.281 47.879 li
.135805 .104005 .108583 0 cmyk
@
57.359 461.16 mo
656.281 461.16 li
57.359 417.719 mo
656.281 417.719 li
57.359 374.16 mo
656.281 374.16 li
57.359 330.719 mo
656.281 330.719 li
57.359 287.16 mo
656.281 287.16 li
57.359 243.719 mo
656.281 243.719 li
57.359 200.16 mo
656.281 200.16 li
57.359 156.719 mo
656.281 156.719 li
57.359 113.16 mo
656.281 113.16 li
57.359 69.719 mo
656.281 69.719 li
57.359 26.16 mo
656.281 26.16 li
.326574 .281529 .277562 0 cmyk
@
94.801 26.16 mo
94.801 504.719 li
169.68 26.16 mo
169.68 504.719 li
244.559 26.16 mo
244.559 504.719 li
319.441 26.16 mo
319.441 504.719 li
394.199 26.16 mo
394.199 504.719 li
469.078 26.16 mo
469.078 504.719 li
543.961 26.16 mo
543.961 504.719 li
618.84 26.16 mo
618.84 504.719 li
.175235 .144778 .143648 0 cmyk
@
57.359 26.16 mo
57.359 504.719 li
132.238 26.16 mo
132.238 504.719 li
207.121 26.16 mo
207.121 504.719 li
282 26.16 mo
282 504.719 li
356.762 26.16 mo
356.762 504.719 li
431.641 26.16 mo
431.641 504.719 li
506.52 26.16 mo
506.52 504.719 li
581.398 26.16 mo
581.398 504.719 li
656.281 26.16 mo
656.281 504.719 li
.326574 .281529 .277562 0 cmyk
@
37.32 495.359 mo
44.398 495.359 li
44.398 512.398 li
37.32 512.398 li
cp
0 0 0 0 cmyk
ef
30.238 451.801 mo
44.398 451.801 li
44.398 468.961 li
30.238 468.961 li
cp
ef
30.238 408.359 mo
44.398 408.359 li
44.398 425.398 li
30.238 425.398 li
cp
ef
30.238 364.801 mo
44.398 364.801 li
44.398 381.961 li
30.238 381.961 li
cp
ef
30.238 321.359 mo
44.398 321.359 li
44.398 338.398 li
30.238 338.398 li
cp
ef
30.238 277.801 mo
44.398 277.801 li
44.398 294.961 li
30.238 294.961 li
cp
ef
30.238 234.359 mo
44.398 234.359 li
44.398 251.398 li
30.238 251.398 li
cp
ef
30.238 190.801 mo
44.398 190.801 li
44.398 207.961 li
30.238 207.961 li
cp
ef
30.238 147.359 mo
44.398 147.359 li
44.398 164.398 li
30.238 164.398 li
cp
ef
30.238 103.922 mo
44.398 103.922 li
44.398 120.961 li
30.238 120.961 li
cp
ef
23.16 60.359 mo
44.398 60.359 li
44.398 77.398 li
23.16 77.398 li
cp
ef
23.16 16.922 mo
44.398 16.922 li
44.398 33.961 li
23.16 33.961 li
cp
ef
.96 lw
57.359 504.719 mo
656.281 504.719 li
.369879 .299321 .304356 .000976577 cmyk
@
57.359 504.719 mo
57.359 509.16 li
132.238 504.719 mo
132.238 509.16 li
207.121 504.719 mo
207.121 509.16 li
282 504.719 mo
282 509.16 li
356.762 504.719 mo
356.762 509.16 li
431.641 504.719 mo
431.641 509.16 li
506.52 504.719 mo
506.52 509.16 li
581.398 504.719 mo
581.398 509.16 li
656.281 504.719 mo
656.281 509.16 li
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
1 lc
57.359 474.238 mo
132.238 489.238 li
207.121 496.68 li
282 498.238 li
356.762 499.559 li
431.641 500.641 li
506.52 501.48 li
581.398 501.961 li
656.281 502.441 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
62.449 479.141 mo
52.371 469.059 li
52.371 479.141 mo
62.449 469.059 li
.62829 .284672 0 0 cmyk
@
137.328 494.141 mo
127.25 484.059 li
127.25 494.141 mo
137.328 484.059 li
@
212.09 501.578 mo
202.012 491.5 li
202.012 501.578 mo
212.09 491.5 li
@
286.969 503.262 mo
276.891 493.18 li
276.891 503.262 mo
286.969 493.18 li
@
361.852 504.461 mo
351.77 494.379 li
351.77 504.461 mo
361.852 494.379 li
@
436.73 505.66 mo
426.648 495.578 li
426.648 505.66 mo
436.73 495.578 li
@
511.609 506.379 mo
501.531 496.301 li
501.531 506.379 mo
511.609 496.301 li
@
586.371 506.98 mo
576.289 496.898 li
576.289 506.98 mo
586.371 496.898 li
@
661.25 507.34 mo
651.172 497.262 li
651.172 507.34 mo
661.25 497.262 li
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
57.359 473.762 mo
132.238 489 li
207.121 496.68 li
282 498.359 li
356.762 499.559 li
431.641 500.762 li
506.52 501.48 li
581.398 501.961 li
656.281 502.32 li
@
grestore
52.371 468.578 mo
62.328 468.578 li
62.328 478.539 li
52.371 478.539 li
cp
@
127.25 483.941 mo
137.211 483.941 li
137.211 493.898 li
127.25 493.898 li
cp
@
202.012 491.5 mo
211.969 491.5 li
211.969 501.461 li
202.012 501.461 li
cp
@
276.891 493.18 mo
286.852 493.18 li
286.852 503.141 li
276.891 503.141 li
cp
@
351.77 494.379 mo
361.731 494.379 li
361.731 504.34 li
351.77 504.34 li
cp
@
426.648 495.578 mo
436.609 495.578 li
436.609 505.539 li
426.648 505.539 li
cp
@
501.531 496.422 mo
511.488 496.422 li
511.488 506.379 li
501.531 506.379 li
cp
@
576.289 496.898 mo
586.25 496.898 li
586.25 506.859 li
576.289 506.859 li
cp
@
651.172 497.262 mo
661.129 497.262 li
661.129 507.219 li
651.172 507.219 li
cp
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
57.359 425.281 mo
132.238 464.281 li
207.121 484.078 li
282 490.801 li
356.762 494.281 li
431.641 494.398 li
506.52 498.238 li
581.398 497.762 li
656.281 498.961 li
.467353 0 .87747 0 cmyk
@
grestore
62.449 430.301 mo
52.371 420.219 li
52.371 430.301 mo
62.449 420.219 li
.467353 0 .87747 0 cmyk
@
137.328 469.301 mo
127.25 459.219 li
127.25 469.301 mo
137.328 459.219 li
@
212.09 488.98 mo
202.012 478.898 li
202.012 488.98 mo
212.09 478.898 li
@
286.969 495.82 mo
276.891 485.738 li
276.891 495.82 mo
286.969 485.738 li
@
361.852 499.301 mo
351.77 489.219 li
351.77 499.301 mo
361.852 489.219 li
@
436.73 499.422 mo
426.648 489.34 li
426.648 499.422 mo
436.73 489.34 li
@
511.609 503.141 mo
501.531 493.059 li
501.531 503.141 mo
511.609 493.059 li
@
586.371 502.781 mo
576.289 492.699 li
576.289 502.781 mo
586.371 492.699 li
@
661.25 503.98 mo
651.172 493.898 li
651.172 503.98 mo
661.25 493.898 li
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
57.359 424.199 mo
132.238 463.922 li
207.121 484.078 li
282 490.801 li
356.762 494.281 li
431.641 493.559 li
506.52 498.238 li
581.398 498.238 li
656.281 498.961 li
@
grestore
52.371 419.141 mo
62.328 419.141 li
62.328 429.102 li
52.371 429.102 li
cp
@
127.25 458.738 mo
137.211 458.738 li
137.211 468.699 li
127.25 468.699 li
cp
@
202.012 478.898 mo
211.969 478.898 li
211.969 488.859 li
202.012 488.859 li
cp
@
276.891 485.738 mo
286.852 485.738 li
286.852 495.699 li
276.891 495.699 li
cp
@
351.77 489.219 mo
361.731 489.219 li
361.731 499.18 li
351.77 499.18 li
cp
@
426.648 488.379 mo
436.609 488.379 li
436.609 498.34 li
426.648 498.34 li
cp
@
501.531 493.059 mo
511.488 493.059 li
511.488 503.02 li
501.531 503.02 li
cp
@
576.289 493.18 mo
586.25 493.18 li
586.25 503.141 li
576.289 503.141 li
cp
@
651.172 493.898 mo
661.129 493.898 li
661.129 503.859 li
651.172 503.859 li
cp
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
57.359 240.48 mo
132.238 370.68 li
207.121 436.441 li
282 459.121 li
356.762 470.52 li
431.641 478.441 li
506.52 483.359 li
581.398 484.559 li
656.281 485.879 li
0 .993988 1 0 cmyk
@
grestore
62.449 245.379 mo
52.371 235.301 li
52.371 245.379 mo
62.449 235.301 li
0 .993988 1 0 cmyk
@
137.328 375.699 mo
127.25 365.621 li
127.25 375.699 mo
137.328 365.621 li
@
212.09 441.34 mo
202.012 431.262 li
202.012 441.34 mo
212.09 431.262 li
@
286.969 464.02 mo
276.891 453.941 li
276.891 464.02 mo
286.969 453.941 li
@
361.852 475.422 mo
351.77 465.34 li
351.77 475.422 mo
361.852 465.34 li
@
436.73 483.34 mo
426.648 473.262 li
426.648 483.34 mo
436.73 473.262 li
@
511.609 488.262 mo
501.531 478.18 li
501.531 488.262 mo
511.609 478.18 li
@
586.371 489.461 mo
576.289 479.379 li
576.289 489.461 mo
586.371 479.379 li
@
661.25 490.898 mo
651.172 480.82 li
651.172 490.898 mo
661.25 480.82 li
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
57.359 237.238 mo
132.238 369 li
207.121 436.559 li
282 459.238 li
356.762 470.52 li
431.641 478.441 li
506.52 483.359 li
581.398 481.078 li
656.281 485.879 li
@
grestore
52.371 232.18 mo
62.328 232.18 li
62.328 242.141 li
52.371 242.141 li
cp
@
127.25 363.941 mo
137.211 363.941 li
137.211 373.898 li
127.25 373.898 li
cp
@
202.012 431.5 mo
211.969 431.5 li
211.969 441.461 li
202.012 441.461 li
cp
@
276.891 454.18 mo
286.852 454.18 li
286.852 464.141 li
276.891 464.141 li
cp
@
351.77 465.34 mo
361.731 465.34 li
361.731 475.301 li
351.77 475.301 li
cp
@
426.648 473.262 mo
436.609 473.262 li
436.609 483.219 li
426.648 483.219 li
cp
@
501.531 478.18 mo
511.488 478.18 li
511.488 488.141 li
501.531 488.141 li
cp
@
576.289 475.898 mo
586.25 475.898 li
586.25 485.859 li
576.289 485.859 li
cp
@
651.172 480.82 mo
661.129 480.82 li
661.129 490.781 li
651.172 490.781 li
cp
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 333.48 mo
132.238 417.84 li
207.121 460.32 li
282 474.961 li
356.762 482.52 li
431.641 487.559 li
506.52 490.801 li
581.398 489.84 li
656.281 492.48 li
.62829 .284672 0 0 cmyk
@
grestore
62.449 338.379 mo
52.371 328.301 li
52.371 338.379 mo
62.449 328.301 li
.62829 .284672 0 0 cmyk
@
137.328 422.859 mo
127.25 412.781 li
127.25 422.859 mo
137.328 412.781 li
@
212.09 465.34 mo
202.012 455.262 li
202.012 465.34 mo
212.09 455.262 li
@
286.969 479.98 mo
276.891 469.898 li
276.891 479.98 mo
286.969 469.898 li
@
361.852 487.422 mo
351.77 477.34 li
351.77 487.422 mo
361.852 477.34 li
@
436.73 492.578 mo
426.648 482.5 li
426.648 492.578 mo
436.73 482.5 li
@
511.609 495.699 mo
501.531 485.621 li
501.531 495.699 mo
511.609 485.621 li
@
586.371 494.859 mo
576.289 484.781 li
576.289 494.859 mo
586.371 484.781 li
@
661.25 497.379 mo
651.172 487.301 li
651.172 497.379 mo
661.25 487.301 li
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 330.359 mo
132.238 416.762 li
207.121 460.559 li
282 475.078 li
356.762 482.52 li
431.641 487.559 li
506.52 490.801 li
581.398 489.84 li
656.281 492.48 li
@
grestore
52.371 325.18 mo
62.328 325.18 li
62.328 335.141 li
52.371 335.141 li
cp
@
127.25 411.578 mo
137.211 411.578 li
137.211 421.539 li
127.25 421.539 li
cp
@
202.012 455.379 mo
211.969 455.379 li
211.969 465.34 li
202.012 465.34 li
cp
@
276.891 470.02 mo
286.852 470.02 li
286.852 479.981 li
276.891 479.981 li
cp
@
351.77 477.461 mo
361.731 477.461 li
361.731 487.422 li
351.77 487.422 li
cp
@
426.648 482.379 mo
436.609 482.379 li
436.609 492.34 li
426.648 492.34 li
cp
@
501.531 485.738 mo
511.488 485.738 li
511.488 495.699 li
501.531 495.699 li
cp
@
576.289 484.781 mo
586.25 484.781 li
586.25 494.738 li
576.289 494.738 li
cp
@
651.172 487.301 mo
661.129 487.301 li
661.129 497.262 li
651.172 497.262 li
cp
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 38.762 mo
132.238 269.281 li
207.121 384.719 li
282 408.961 li
356.762 444.719 li
431.641 458.398 li
506.52 456.719 li
581.398 469.32 li
656.281 471.602 li
.467353 0 .87747 0 cmyk
@
grestore
62.449 43.781 mo
52.371 33.699 li
52.371 43.781 mo
62.449 33.699 li
.467353 0 .87747 0 cmyk
@
137.328 274.18 mo
127.25 264.102 li
127.25 274.18 mo
137.328 264.102 li
@
212.09 389.621 mo
202.012 379.539 li
202.012 389.621 mo
212.09 379.539 li
@
286.969 413.859 mo
276.891 403.781 li
276.891 413.859 mo
286.969 403.781 li
@
361.852 449.738 mo
351.77 439.66 li
351.77 449.738 mo
361.852 439.66 li
@
436.73 463.422 mo
426.648 453.34 li
426.648 463.422 mo
436.73 453.34 li
@
511.609 461.738 mo
501.531 451.66 li
501.531 461.738 mo
511.609 451.66 li
@
586.371 474.34 mo
576.289 464.262 li
576.289 474.34 mo
586.371 464.262 li
@
661.25 476.5 mo
651.172 466.422 li
651.172 476.5 mo
661.25 466.422 li
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 33.719 mo
132.238 265.68 li
207.121 384.602 li
282 408.961 li
356.762 444.602 li
431.641 458.52 li
506.52 467.16 li
581.398 461.641 li
656.281 471.602 li
@
grestore
52.371 28.539 mo
62.328 28.539 li
62.328 38.5 li
52.371 38.5 li
cp
@
127.25 260.5 mo
137.211 260.5 li
137.211 270.461 li
127.25 270.461 li
cp
@
202.012 379.539 mo
211.969 379.539 li
211.969 389.5 li
202.012 389.5 li
cp
@
276.891 403.898 mo
286.852 403.898 li
286.852 413.859 li
276.891 413.859 li
cp
@
351.77 439.539 mo
361.731 439.539 li
361.731 449.5 li
351.77 449.5 li
cp
@
426.648 453.34 mo
436.609 453.34 li
436.609 463.301 li
426.648 463.301 li
cp
@
501.531 462.102 mo
511.488 462.102 li
511.488 472.059 li
501.531 472.059 li
cp
@
576.289 456.578 mo
586.25 456.578 li
586.25 466.539 li
576.289 466.539 li
cp
@
651.172 466.539 mo
661.129 466.539 li
661.129 476.5 li
651.172 476.5 li
cp
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 145.199 mo
132.238 322.441 li
207.121 411.84 li
282 430.441 li
356.762 458.281 li
431.641 468.84 li
506.52 475.559 li
581.398 477.238 li
656.281 479.039 li
0 .993988 1 0 cmyk
@
grestore
62.449 150.102 mo
52.371 140.02 li
52.371 150.102 mo
62.449 140.02 li
0 .993988 1 0 cmyk
@
137.328 327.34 mo
127.25 317.262 li
127.25 327.34 mo
137.328 317.262 li
@
212.09 416.738 mo
202.012 406.66 li
202.012 416.738 mo
212.09 406.66 li
@
286.969 435.461 mo
276.891 425.379 li
276.891 435.461 mo
286.969 425.379 li
@
361.852 463.18 mo
351.77 453.102 li
351.77 463.18 mo
361.852 453.102 li
@
436.73 473.738 mo
426.648 463.66 li
426.648 473.738 mo
436.73 463.66 li
@
511.609 480.578 mo
501.531 470.5 li
501.531 480.578 mo
511.609 470.5 li
@
586.371 482.262 mo
576.289 472.18 li
576.289 482.262 mo
586.371 472.18 li
@
661.25 484.059 mo
651.172 473.98 li
651.172 484.059 mo
661.25 473.98 li
@
gsave
57.359 26.16 mo
656.879 26.16 li
656.879 505.32 li
57.359 505.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
57.359 138.602 mo
132.238 319.922 li
207.121 411.84 li
282 442.68 li
356.762 458.16 li
431.641 463.078 li
506.52 475.68 li
581.398 477.238 li
656.281 479.16 li
@
grestore
52.371 133.422 mo
62.328 133.422 li
62.328 143.379 li
52.371 143.379 li
cp
@
127.25 314.738 mo
137.211 314.738 li
137.211 324.699 li
127.25 324.699 li
cp
@
202.012 406.781 mo
211.969 406.781 li
211.969 416.738 li
202.012 416.738 li
cp
@
276.891 437.5 mo
286.852 437.5 li
286.852 447.461 li
276.891 447.461 li
cp
@
351.77 453.102 mo
361.731 453.102 li
361.731 463.059 li
351.77 463.059 li
cp
@
426.648 458.02 mo
436.609 458.02 li
436.609 467.981 li
426.648 467.981 li
cp
@
501.531 470.5 mo
511.488 470.5 li
511.488 480.461 li
501.531 480.461 li
cp
@
576.289 472.18 mo
586.25 472.18 li
586.25 482.141 li
576.289 482.141 li
cp
@
651.172 473.98 mo
661.129 473.98 li
661.129 483.941 li
651.172 483.941 li
cp
@
37.359 495.324 mo
44.453 495.324 li
44.453 512.414 li
37.359 512.414 li
cp
0 0 0 0 cmyk
ef
44 504.27 mo
43.996 504.953 43.945 505.574 43.84 506.137 cv
43.73 506.699 43.551 507.184 43.305 507.586 cv
43.051 507.992 42.723 508.305 42.324 508.523 cv
41.918 508.746 41.426 508.855 40.84 508.855 cv
40.281 508.855 39.809 508.758 39.43 508.559 cv
39.047 508.363 38.742 508.07 38.508 507.684 cv
38.273 507.297 38.105 506.824 38.012 506.258 cv
37.91 505.695 37.863 505.047 37.863 504.312 cv
37.863 503.641 37.918 503.02 38.027 502.453 cv
38.137 501.891 38.313 501.406 38.563 501 cv
38.805 500.598 39.129 500.285 39.535 500.059 cv
39.934 499.84 40.43 499.727 41.02 499.727 cv
41.578 499.727 42.051 499.828 42.434 500.023 cv
42.816 500.227 43.121 500.52 43.355 500.902 cv
43.586 501.293 43.754 501.766 43.852 502.328 cv
43.949 502.891 43.996 503.539 44 504.27 cv
cp
42.793 504.352 mo
42.789 503.91 42.773 503.512 42.746 503.16 cv
42.711 502.809 42.664 502.5 42.605 502.23 cv
42.539 501.961 42.461 501.73 42.363 501.535 cv
42.266 501.344 42.148 501.184 42.012 501.055 cv
41.871 500.93 41.711 500.836 41.539 500.777 cv
41.359 500.723 41.164 500.695 40.949 500.691 cv
40.559 500.695 40.242 500.785 40.004 500.969 cv
39.758 501.152 39.566 501.406 39.43 501.723 cv
39.289 502.043 39.195 502.414 39.145 502.844 cv
39.094 503.273 39.07 503.738 39.07 504.23 cv
39.07 504.895 39.102 505.457 39.172 505.918 cv
39.238 506.387 39.348 506.766 39.5 507.055 cv
39.645 507.352 39.836 507.562 40.066 507.691 cv
40.297 507.828 40.578 507.895 40.91 507.891 cv
41.164 507.895 41.387 507.855 41.582 507.77 cv
41.773 507.691 41.941 507.57 42.082 507.414 cv
42.223 507.262 42.336 507.078 42.43 506.863 cv
42.516 506.648 42.59 506.41 42.648 506.148 cv
42.699 505.891 42.738 505.609 42.762 505.305 cv
42.781 505 42.789 504.684 42.793 504.352 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
30.27 451.828 mo
44.461 451.828 li
44.461 468.922 li
30.27 468.922 li
cp
0 0 0 0 cmyk
ef
36.645 464.773 mo
36.641 464.863 36.633 464.934 36.621 464.992 cv
36.605 465.055 36.586 465.105 36.566 465.137 cv
36.543 465.176 36.52 465.199 36.488 465.215 cv
36.457 465.23 36.426 465.238 36.398 465.238 cv
31.762 465.238 li
31.727 465.238 31.699 465.23 31.672 465.215 cv
31.645 465.199 31.617 465.176 31.594 465.137 cv
31.566 465.105 31.547 465.055 31.535 464.992 cv
31.52 464.934 31.512 464.863 31.516 464.773 cv
31.512 464.695 31.52 464.621 31.535 464.559 cv
31.547 464.5 31.563 464.453 31.586 464.414 cv
31.602 464.379 31.629 464.348 31.66 464.324 cv
31.691 464.305 31.723 464.297 31.762 464.293 cv
33.613 464.293 li
33.613 457.547 li
31.898 458.566 li
31.809 458.617 31.738 458.645 31.691 458.652 cv
31.637 458.66 31.594 458.652 31.563 458.621 cv
31.527 458.594 31.508 458.543 31.496 458.473 cv
31.484 458.406 31.477 458.32 31.48 458.211 cv
31.477 458.137 31.48 458.07 31.492 458.012 cv
31.496 457.961 31.508 457.914 31.523 457.875 cv
31.535 457.84 31.555 457.809 31.578 457.781 cv
31.602 457.754 31.633 457.727 31.68 457.699 cv
33.723 456.387 li
33.738 456.375 33.758 456.363 33.789 456.355 cv
33.813 456.348 33.848 456.34 33.895 456.328 cv
33.934 456.32 33.984 456.312 34.039 456.309 cv
34.094 456.309 34.16 456.309 34.246 456.305 cv
34.352 456.309 34.445 456.312 34.52 456.32 cv
34.59 456.328 34.645 456.344 34.691 456.359 cv
34.73 456.379 34.758 456.398 34.773 456.422 cv
34.781 456.449 34.789 456.473 34.793 456.496 cv
34.793 464.293 li
36.398 464.293 li
36.434 464.297 36.469 464.305 36.5 464.324 cv
36.531 464.348 36.555 464.379 36.578 464.414 cv
36.594 464.453 36.609 464.5 36.625 464.559 cv
36.633 464.621 36.641 464.695 36.645 464.773 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44 460.781 mo
43.996 461.465 43.945 462.086 43.84 462.648 cv
43.73 463.211 43.551 463.695 43.305 464.098 cv
43.051 464.504 42.723 464.816 42.324 465.035 cv
41.918 465.258 41.426 465.367 40.84 465.367 cv
40.281 465.367 39.809 465.27 39.43 465.07 cv
39.047 464.875 38.742 464.582 38.508 464.195 cv
38.273 463.809 38.105 463.336 38.012 462.77 cv
37.91 462.207 37.863 461.559 37.863 460.824 cv
37.863 460.152 37.918 459.531 38.027 458.965 cv
38.137 458.402 38.313 457.918 38.563 457.512 cv
38.805 457.109 39.129 456.797 39.535 456.57 cv
39.934 456.352 40.43 456.238 41.02 456.238 cv
41.578 456.238 42.051 456.34 42.434 456.535 cv
42.816 456.738 43.121 457.031 43.355 457.414 cv
43.586 457.805 43.754 458.277 43.852 458.84 cv
43.949 459.402 43.996 460.051 44 460.781 cv
cp
42.793 460.863 mo
42.789 460.422 42.773 460.023 42.746 459.672 cv
42.711 459.32 42.664 459.012 42.605 458.742 cv
42.539 458.473 42.461 458.242 42.363 458.047 cv
42.266 457.855 42.148 457.695 42.012 457.566 cv
41.871 457.441 41.711 457.348 41.539 457.289 cv
41.359 457.234 41.164 457.207 40.949 457.203 cv
40.559 457.207 40.242 457.297 40.004 457.48 cv
39.758 457.664 39.566 457.918 39.43 458.234 cv
39.289 458.555 39.195 458.926 39.145 459.355 cv
39.094 459.785 39.07 460.25 39.07 460.742 cv
39.07 461.406 39.102 461.969 39.172 462.43 cv
39.238 462.898 39.348 463.277 39.5 463.566 cv
39.645 463.863 39.836 464.074 40.066 464.203 cv
40.297 464.34 40.578 464.406 40.91 464.402 cv
41.164 464.406 41.387 464.367 41.582 464.281 cv
41.773 464.203 41.941 464.082 42.082 463.926 cv
42.223 463.773 42.336 463.59 42.43 463.375 cv
42.516 463.16 42.59 462.922 42.648 462.66 cv
42.699 462.402 42.738 462.121 42.762 461.816 cv
42.781 461.512 42.789 461.195 42.793 460.863 cv
cp
f
30.27 408.328 mo
44.461 408.328 li
44.461 425.422 li
30.27 425.422 li
cp
0 0 0 0 cmyk
ef
36.625 421.223 mo
36.621 421.309 36.617 421.383 36.605 421.445 cv
36.594 421.512 36.578 421.566 36.559 421.605 cv
36.535 421.652 36.508 421.684 36.477 421.699 cv
36.441 421.723 36.402 421.73 36.363 421.73 cv
31.461 421.73 li
31.398 421.73 31.34 421.723 31.293 421.707 cv
31.242 421.691 31.203 421.668 31.168 421.629 cv
31.133 421.598 31.105 421.543 31.094 421.473 cv
31.074 421.402 31.066 421.316 31.07 421.215 cv
31.066 421.125 31.07 421.047 31.078 420.977 cv
31.082 420.91 31.098 420.852 31.125 420.797 cv
31.148 420.746 31.18 420.691 31.215 420.637 cv
31.25 420.586 31.293 420.531 31.352 420.469 cv
33.125 418.645 li
33.535 418.227 33.863 417.852 34.113 417.516 cv
34.359 417.187 34.551 416.883 34.684 416.605 cv
34.816 416.332 34.902 416.082 34.949 415.855 cv
34.988 415.633 35.012 415.422 35.012 415.227 cv
35.012 415.031 34.977 414.848 34.91 414.668 cv
34.844 414.496 34.75 414.34 34.625 414.203 cv
34.5 414.074 34.344 413.969 34.156 413.887 cv
33.969 413.812 33.75 413.773 33.504 413.77 cv
33.215 413.773 32.957 413.812 32.73 413.887 cv
32.5 413.969 32.301 414.055 32.129 414.141 cv
31.957 414.234 31.813 414.316 31.695 414.395 cv
31.578 414.473 31.492 414.512 31.441 414.512 cv
31.406 414.512 31.375 414.504 31.352 414.484 cv
31.32 414.469 31.301 414.437 31.285 414.395 cv
31.27 414.355 31.254 414.301 31.246 414.23 cv
31.234 414.164 31.23 414.082 31.234 413.984 cv
31.23 413.918 31.234 413.859 31.242 413.809 cv
31.246 413.758 31.254 413.715 31.266 413.676 cv
31.273 413.641 31.289 413.605 31.309 413.574 cv
31.328 413.543 31.363 413.504 31.422 413.453 cv
31.473 413.406 31.566 413.34 31.703 413.258 cv
31.836 413.176 32.008 413.098 32.211 413.016 cv
32.414 412.937 32.637 412.867 32.883 412.812 cv
33.125 412.758 33.383 412.73 33.656 412.73 cv
34.082 412.73 34.457 412.793 34.781 412.914 cv
35.102 413.035 35.367 413.199 35.582 413.41 cv
35.793 413.621 35.953 413.867 36.059 414.141 cv
36.164 414.422 36.219 414.719 36.219 415.031 cv
36.219 415.32 36.191 415.602 36.141 415.879 cv
36.09 416.164 35.984 416.469 35.824 416.793 cv
35.66 417.121 35.426 417.484 35.121 417.883 cv
34.813 418.285 34.406 418.746 33.902 419.262 cv
32.496 420.73 li
36.355 420.73 li
36.387 420.734 36.422 420.746 36.461 420.762 cv
36.492 420.785 36.523 420.816 36.551 420.855 cv
36.574 420.898 36.594 420.949 36.605 421.008 cv
36.617 421.074 36.621 421.145 36.625 421.223 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44 417.273 mo
43.996 417.957 43.945 418.578 43.84 419.141 cv
43.73 419.703 43.551 420.187 43.305 420.59 cv
43.051 420.996 42.723 421.309 42.324 421.527 cv
41.918 421.75 41.426 421.859 40.84 421.859 cv
40.281 421.859 39.809 421.762 39.43 421.562 cv
39.047 421.367 38.742 421.074 38.508 420.687 cv
38.273 420.301 38.105 419.828 38.012 419.262 cv
37.91 418.699 37.863 418.051 37.863 417.316 cv
37.863 416.645 37.918 416.023 38.027 415.457 cv
38.137 414.895 38.313 414.41 38.563 414.004 cv
38.805 413.602 39.129 413.289 39.535 413.062 cv
39.934 412.844 40.43 412.73 41.02 412.73 cv
41.578 412.73 42.051 412.832 42.434 413.027 cv
42.816 413.23 43.121 413.523 43.355 413.906 cv
43.586 414.297 43.754 414.77 43.852 415.332 cv
43.949 415.895 43.996 416.543 44 417.273 cv
cp
42.793 417.355 mo
42.789 416.914 42.773 416.516 42.746 416.164 cv
42.711 415.812 42.664 415.504 42.605 415.234 cv
42.539 414.965 42.461 414.734 42.363 414.539 cv
42.266 414.348 42.148 414.187 42.012 414.059 cv
41.871 413.934 41.711 413.84 41.539 413.781 cv
41.359 413.727 41.164 413.699 40.949 413.695 cv
40.559 413.699 40.242 413.789 40.004 413.973 cv
39.758 414.156 39.566 414.41 39.43 414.727 cv
39.289 415.047 39.195 415.418 39.145 415.848 cv
39.094 416.277 39.07 416.742 39.07 417.234 cv
39.07 417.898 39.102 418.461 39.172 418.922 cv
39.238 419.391 39.348 419.77 39.5 420.059 cv
39.645 420.355 39.836 420.566 40.066 420.695 cv
40.297 420.832 40.578 420.898 40.91 420.895 cv
41.164 420.898 41.387 420.859 41.582 420.773 cv
41.773 420.695 41.941 420.574 42.082 420.418 cv
42.223 420.266 42.336 420.082 42.43 419.867 cv
42.516 419.652 42.59 419.414 42.648 419.152 cv
42.699 418.895 42.738 418.613 42.762 418.309 cv
42.781 418.004 42.789 417.687 42.793 417.355 cv
cp
f
30.27 364.828 mo
44.461 364.828 li
44.461 381.922 li
30.27 381.922 li
cp
0 0 0 0 cmyk
ef
36.555 375.684 mo
36.551 376.094 36.48 376.461 36.34 376.785 cv
36.195 377.113 35.992 377.395 35.73 377.625 cv
35.465 377.859 35.137 378.035 34.75 378.16 cv
34.359 378.285 33.922 378.348 33.438 378.348 cv
33.133 378.348 32.855 378.32 32.602 378.273 cv
32.34 378.227 32.109 378.176 31.914 378.105 cv
31.711 378.043 31.547 377.973 31.414 377.902 cv
31.281 377.832 31.195 377.781 31.164 377.746 cv
31.125 377.719 31.102 377.687 31.086 377.652 cv
31.066 377.621 31.047 377.582 31.035 377.535 cv
31.02 377.492 31.012 377.437 31.004 377.367 cv
30.996 377.305 30.992 377.223 30.996 377.121 cv
30.992 376.961 31.008 376.848 31.043 376.781 cv
31.074 376.719 31.121 376.684 31.184 376.684 cv
31.227 376.684 31.309 376.723 31.434 376.793 cv
31.555 376.871 31.715 376.949 31.91 377.031 cv
32.102 377.117 32.328 377.195 32.594 377.266 cv
32.852 377.34 33.145 377.375 33.465 377.375 cv
33.773 377.375 34.043 377.336 34.281 377.258 cv
34.512 377.18 34.711 377.07 34.871 376.93 cv
35.027 376.789 35.145 376.621 35.227 376.426 cv
35.305 376.23 35.344 376.02 35.348 375.793 cv
35.344 375.543 35.293 375.316 35.195 375.113 cv
35.09 374.914 34.941 374.742 34.75 374.594 cv
34.551 374.449 34.313 374.336 34.027 374.258 cv
33.742 374.18 33.418 374.141 33.055 374.141 cv
32.184 374.141 li
32.141 374.141 32.105 374.133 32.07 374.117 cv
32.035 374.102 32.004 374.074 31.98 374.035 cv
31.953 374 31.934 373.953 31.918 373.895 cv
31.902 373.836 31.895 373.758 31.895 373.66 cv
31.895 373.574 31.898 373.504 31.914 373.445 cv
31.922 373.391 31.941 373.344 31.973 373.309 cv
31.996 373.273 32.027 373.25 32.059 373.23 cv
32.09 373.219 32.125 373.211 32.168 373.207 cv
32.941 373.207 li
33.242 373.211 33.512 373.172 33.754 373.09 cv
33.988 373.016 34.191 372.902 34.363 372.754 cv
34.527 372.609 34.656 372.434 34.746 372.23 cv
34.836 372.027 34.883 371.801 34.883 371.547 cv
34.883 371.367 34.852 371.191 34.793 371.023 cv
34.73 370.859 34.641 370.715 34.523 370.59 cv
34.402 370.465 34.25 370.367 34.07 370.297 cv
33.883 370.227 33.672 370.191 33.43 370.191 cv
33.164 370.191 32.918 370.234 32.699 370.312 cv
32.473 370.395 32.277 370.48 32.105 370.57 cv
31.93 370.664 31.785 370.75 31.672 370.828 cv
31.559 370.91 31.477 370.949 31.434 370.945 cv
31.398 370.949 31.371 370.941 31.348 370.93 cv
31.32 370.918 31.301 370.895 31.285 370.859 cv
31.27 370.828 31.258 370.781 31.25 370.715 cv
31.242 370.656 31.238 370.574 31.242 370.473 cv
31.238 370.406 31.238 370.348 31.246 370.293 cv
31.246 370.242 31.258 370.195 31.273 370.152 cv
31.289 370.117 31.305 370.082 31.324 370.047 cv
31.34 370.02 31.371 369.98 31.414 369.934 cv
31.457 369.891 31.543 369.828 31.68 369.746 cv
31.809 369.664 31.973 369.586 32.168 369.504 cv
32.359 369.426 32.582 369.355 32.84 369.301 cv
33.09 369.246 33.363 369.219 33.66 369.219 cv
34.066 369.219 34.43 369.273 34.742 369.375 cv
35.055 369.484 35.313 369.633 35.523 369.82 cv
35.727 370.016 35.883 370.246 35.988 370.512 cv
36.09 370.781 36.141 371.074 36.145 371.398 cv
36.141 371.68 36.105 371.941 36.035 372.176 cv
35.961 372.418 35.852 372.629 35.711 372.812 cv
35.566 373 35.395 373.156 35.191 373.285 cv
34.984 373.418 34.746 373.512 34.477 373.559 cv
34.477 373.57 li
34.781 373.605 35.063 373.68 35.316 373.801 cv
35.57 373.922 35.789 374.074 35.973 374.258 cv
36.152 374.441 36.293 374.656 36.398 374.898 cv
36.5 375.145 36.551 375.406 36.555 375.684 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44 373.762 mo
43.996 374.445 43.945 375.066 43.84 375.629 cv
43.73 376.191 43.551 376.676 43.305 377.078 cv
43.051 377.484 42.723 377.797 42.324 378.016 cv
41.918 378.238 41.426 378.348 40.84 378.348 cv
40.281 378.348 39.809 378.25 39.43 378.051 cv
39.047 377.855 38.742 377.562 38.508 377.176 cv
38.273 376.789 38.105 376.316 38.012 375.75 cv
37.91 375.187 37.863 374.539 37.863 373.805 cv
37.863 373.133 37.918 372.512 38.027 371.945 cv
38.137 371.383 38.313 370.898 38.563 370.492 cv
38.805 370.09 39.129 369.777 39.535 369.551 cv
39.934 369.332 40.43 369.219 41.02 369.219 cv
41.578 369.219 42.051 369.32 42.434 369.516 cv
42.816 369.719 43.121 370.012 43.355 370.395 cv
43.586 370.785 43.754 371.258 43.852 371.82 cv
43.949 372.383 43.996 373.031 44 373.762 cv
cp
42.793 373.844 mo
42.789 373.402 42.773 373.004 42.746 372.652 cv
42.711 372.301 42.664 371.992 42.605 371.723 cv
42.539 371.453 42.461 371.223 42.363 371.027 cv
42.266 370.836 42.148 370.676 42.012 370.547 cv
41.871 370.422 41.711 370.328 41.539 370.27 cv
41.359 370.215 41.164 370.187 40.949 370.184 cv
40.559 370.187 40.242 370.277 40.004 370.461 cv
39.758 370.645 39.566 370.898 39.43 371.215 cv
39.289 371.535 39.195 371.906 39.145 372.336 cv
39.094 372.766 39.07 373.23 39.07 373.723 cv
39.07 374.387 39.102 374.949 39.172 375.41 cv
39.238 375.879 39.348 376.258 39.5 376.547 cv
39.645 376.844 39.836 377.055 40.066 377.184 cv
40.297 377.32 40.578 377.387 40.91 377.383 cv
41.164 377.387 41.387 377.348 41.582 377.262 cv
41.773 377.184 41.941 377.062 42.082 376.906 cv
42.223 376.754 42.336 376.57 42.43 376.355 cv
42.516 376.141 42.59 375.902 42.648 375.641 cv
42.699 375.383 42.738 375.102 42.762 374.797 cv
42.781 374.492 42.789 374.176 42.793 373.844 cv
cp
f
30.27 321.328 mo
44.461 321.328 li
44.461 338.422 li
30.27 338.422 li
cp
0 0 0 0 cmyk
ef
37.012 332.203 mo
37.008 332.359 36.984 332.477 36.941 332.562 cv
36.895 332.648 36.832 332.691 36.75 332.691 cv
35.75 332.691 li
35.75 334.559 li
35.75 334.598 35.738 334.629 35.719 334.652 cv
35.699 334.68 35.668 334.699 35.621 334.719 cv
35.574 334.734 35.512 334.746 35.438 334.758 cv
35.359 334.766 35.262 334.77 35.148 334.773 cv
35.031 334.77 34.938 334.766 34.863 334.758 cv
34.785 334.746 34.727 334.734 34.684 334.719 cv
34.637 334.699 34.605 334.68 34.59 334.652 cv
34.574 334.629 34.566 334.598 34.566 334.559 cv
34.566 332.691 li
30.934 332.691 li
30.879 332.691 30.832 332.687 30.797 332.672 cv
30.758 332.66 30.723 332.633 30.695 332.594 cv
30.664 332.559 30.645 332.508 30.633 332.437 cv
30.621 332.371 30.617 332.281 30.617 332.168 cv
30.617 332.086 30.617 332.008 30.625 331.937 cv
30.625 331.871 30.637 331.809 30.652 331.746 cv
30.664 331.691 30.68 331.637 30.707 331.582 cv
30.727 331.535 30.754 331.477 30.789 331.414 cv
33.957 326.016 li
33.98 325.984 34.012 325.953 34.059 325.922 cv
34.098 325.898 34.156 325.875 34.23 325.852 cv
34.297 325.836 34.383 325.824 34.488 325.816 cv
34.586 325.812 34.707 325.809 34.852 325.805 cv
35.004 325.809 35.137 325.812 35.254 325.82 cv
35.363 325.832 35.457 325.848 35.531 325.863 cv
35.598 325.887 35.652 325.91 35.691 325.937 cv
35.73 325.969 35.75 326.004 35.75 326.043 cv
35.75 331.715 li
36.75 331.715 li
36.824 331.719 36.887 331.758 36.938 331.836 cv
36.984 331.918 37.008 332.043 37.012 332.203 cv
cp
34.566 326.84 mo
34.555 326.84 li
31.695 331.715 li
34.566 331.715 li
cp
.629236 .549432 .540154 .282963 cmyk
f
44.012 330.266 mo
44.008 330.949 43.953 331.574 43.848 332.137 cv
43.738 332.703 43.563 333.187 43.313 333.59 cv
43.063 333.996 42.734 334.309 42.336 334.527 cv
41.93 334.75 41.434 334.859 40.848 334.859 cv
40.285 334.859 39.816 334.762 39.434 334.562 cv
39.051 334.363 38.742 334.07 38.508 333.684 cv
38.273 333.297 38.105 332.82 38.012 332.254 cv
37.91 331.691 37.863 331.043 37.867 330.309 cv
37.863 329.633 37.918 329.012 38.031 328.445 cv
38.137 327.879 38.316 327.395 38.566 326.988 cv
38.813 326.586 39.137 326.27 39.539 326.047 cv
39.941 325.828 40.434 325.719 41.023 325.715 cv
41.582 325.719 42.055 325.82 42.441 326.016 cv
42.82 326.219 43.129 326.512 43.363 326.895 cv
43.594 327.285 43.762 327.758 43.863 328.32 cv
43.961 328.887 44.008 329.535 44.012 330.266 cv
cp
42.805 330.348 mo
42.801 329.906 42.785 329.512 42.754 329.156 cv
42.719 328.805 42.672 328.492 42.613 328.223 cv
42.547 327.953 42.465 327.719 42.371 327.523 cv
42.27 327.328 42.152 327.168 42.02 327.043 cv
41.879 326.918 41.723 326.828 41.547 326.77 cv
41.371 326.715 41.176 326.687 40.957 326.684 cv
40.566 326.687 40.25 326.777 40.008 326.957 cv
39.766 327.141 39.574 327.391 39.434 327.711 cv
39.293 328.031 39.195 328.41 39.148 328.84 cv
39.094 329.273 39.07 329.734 39.074 330.227 cv
39.07 330.895 39.105 331.461 39.176 331.922 cv
39.246 332.391 39.355 332.77 39.504 333.059 cv
39.652 333.355 39.84 333.566 40.074 333.695 cv
40.301 333.832 40.582 333.898 40.914 333.895 cv
41.168 333.898 41.395 333.855 41.59 333.77 cv
41.785 333.687 41.949 333.57 42.09 333.414 cv
42.227 333.262 42.344 333.078 42.438 332.863 cv
42.527 332.648 42.602 332.41 42.66 332.148 cv
42.711 331.891 42.75 331.609 42.773 331.301 cv
42.793 331 42.801 330.68 42.805 330.348 cv
cp
f
30.27 277.828 mo
44.461 277.828 li
44.461 294.922 li
30.27 294.922 li
cp
0 0 0 0 cmyk
ef
36.582 288.367 mo
36.582 288.844 36.5 289.266 36.34 289.637 cv
36.18 290.008 35.953 290.32 35.664 290.574 cv
35.367 290.828 35.02 291.023 34.617 291.152 cv
34.211 291.285 33.762 291.348 33.27 291.348 cv
32.992 291.348 32.73 291.328 32.488 291.289 cv
32.238 291.25 32.02 291.203 31.832 291.148 cv
31.637 291.094 31.48 291.039 31.355 290.98 cv
31.23 290.93 31.152 290.887 31.121 290.852 cv
31.086 290.82 31.063 290.789 31.051 290.762 cv
31.035 290.734 31.02 290.703 31.012 290.66 cv
30.996 290.625 30.988 290.574 30.988 290.512 cv
30.98 290.453 30.98 290.383 30.98 290.301 cv
30.98 290.227 30.984 290.156 30.992 290.094 cv
31 290.031 31.012 289.98 31.031 289.941 cv
31.047 289.902 31.066 289.875 31.094 289.855 cv
31.117 289.84 31.148 289.832 31.18 289.828 cv
31.227 289.832 31.297 289.859 31.391 289.914 cv
31.484 289.973 31.613 290.035 31.777 290.102 cv
31.941 290.168 32.141 290.23 32.383 290.289 cv
32.617 290.348 32.902 290.375 33.238 290.375 cv
33.539 290.375 33.82 290.34 34.078 290.266 cv
34.332 290.195 34.555 290.082 34.742 289.926 cv
34.926 289.773 35.07 289.578 35.176 289.34 cv
35.281 289.105 35.332 288.816 35.336 288.477 cv
35.332 288.195 35.289 287.945 35.199 287.727 cv
35.109 287.508 34.973 287.328 34.789 287.184 cv
34.602 287.043 34.367 286.937 34.086 286.863 cv
33.801 286.793 33.461 286.754 33.074 286.754 cv
32.789 286.754 32.551 286.77 32.352 286.797 cv
32.148 286.828 31.961 286.844 31.789 286.84 cv
31.66 286.844 31.566 286.812 31.516 286.75 cv
31.457 286.691 31.43 286.578 31.434 286.406 cv
31.434 282.793 li
31.43 282.645 31.465 282.535 31.539 282.457 cv
31.605 282.387 31.707 282.348 31.844 282.348 cv
35.773 282.348 li
35.809 282.348 35.844 282.359 35.879 282.379 cv
35.91 282.402 35.938 282.434 35.965 282.473 cv
35.984 282.516 36 282.566 36.016 282.629 cv
36.023 282.695 36.031 282.773 36.035 282.855 cv
36.031 283.023 36.008 283.148 35.969 283.238 cv
35.922 283.332 35.863 283.379 35.785 283.375 cv
32.613 283.375 li
32.613 285.863 li
32.766 285.844 32.922 285.832 33.086 285.824 cv
33.242 285.82 33.43 285.816 33.645 285.816 cv
34.129 285.816 34.555 285.879 34.922 286 cv
35.285 286.121 35.59 286.293 35.84 286.512 cv
36.082 286.738 36.27 287.004 36.395 287.316 cv
36.52 287.633 36.582 287.984 36.582 288.367 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44 286.762 mo
43.996 287.445 43.945 288.066 43.84 288.629 cv
43.73 289.191 43.551 289.676 43.305 290.078 cv
43.051 290.484 42.723 290.797 42.324 291.016 cv
41.918 291.238 41.426 291.348 40.84 291.348 cv
40.281 291.348 39.809 291.25 39.43 291.051 cv
39.047 290.855 38.742 290.562 38.508 290.176 cv
38.273 289.789 38.105 289.316 38.012 288.75 cv
37.91 288.187 37.863 287.539 37.863 286.805 cv
37.863 286.133 37.918 285.512 38.027 284.945 cv
38.137 284.383 38.313 283.898 38.563 283.492 cv
38.805 283.09 39.129 282.777 39.535 282.551 cv
39.934 282.332 40.43 282.219 41.02 282.219 cv
41.578 282.219 42.051 282.32 42.434 282.516 cv
42.816 282.719 43.121 283.012 43.355 283.395 cv
43.586 283.785 43.754 284.258 43.852 284.82 cv
43.949 285.383 43.996 286.031 44 286.762 cv
cp
42.793 286.844 mo
42.789 286.402 42.773 286.004 42.746 285.652 cv
42.711 285.301 42.664 284.992 42.605 284.723 cv
42.539 284.453 42.461 284.223 42.363 284.027 cv
42.266 283.836 42.148 283.676 42.012 283.547 cv
41.871 283.422 41.711 283.328 41.539 283.27 cv
41.359 283.215 41.164 283.187 40.949 283.184 cv
40.559 283.187 40.242 283.277 40.004 283.461 cv
39.758 283.645 39.566 283.898 39.43 284.215 cv
39.289 284.535 39.195 284.906 39.145 285.336 cv
39.094 285.766 39.07 286.23 39.07 286.723 cv
39.07 287.387 39.102 287.949 39.172 288.41 cv
39.238 288.879 39.348 289.258 39.5 289.547 cv
39.645 289.844 39.836 290.055 40.066 290.184 cv
40.297 290.32 40.578 290.387 40.91 290.383 cv
41.164 290.387 41.387 290.348 41.582 290.262 cv
41.773 290.184 41.941 290.062 42.082 289.906 cv
42.223 289.754 42.336 289.57 42.43 289.355 cv
42.516 289.141 42.59 288.902 42.648 288.641 cv
42.699 288.383 42.738 288.102 42.762 287.797 cv
42.781 287.492 42.789 287.176 42.793 286.844 cv
cp
f
30.27 234.34 mo
44.461 234.34 li
44.461 251.43 li
30.27 251.43 li
cp
0 0 0 0 cmyk
ef
36.852 244.828 mo
36.852 245.219 36.789 245.598 36.672 245.957 cv
36.547 246.324 36.363 246.641 36.121 246.914 cv
35.871 247.191 35.559 247.414 35.184 247.578 cv
34.801 247.746 34.355 247.828 33.84 247.828 cv
33.469 247.828 33.141 247.785 32.859 247.691 cv
32.574 247.605 32.328 247.473 32.117 247.301 cv
31.906 247.133 31.73 246.926 31.594 246.68 cv
31.453 246.434 31.34 246.152 31.258 245.836 cv
31.172 245.523 31.113 245.18 31.078 244.801 cv
31.039 244.43 31.02 244.027 31.023 243.594 cv
31.02 243.215 31.039 242.832 31.082 242.441 cv
31.121 242.059 31.195 241.684 31.301 241.316 cv
31.406 240.957 31.551 240.617 31.73 240.301 cv
31.91 239.984 32.137 239.707 32.41 239.473 cv
32.684 239.238 33.008 239.051 33.387 238.91 cv
33.766 238.773 34.207 238.707 34.711 238.703 cv
34.879 238.707 35.051 238.715 35.223 238.734 cv
35.395 238.758 35.555 238.789 35.703 238.82 cv
35.852 238.859 35.973 238.895 36.074 238.934 cv
36.172 238.973 36.238 239.008 36.273 239.031 cv
36.301 239.059 36.324 239.086 36.344 239.113 cv
36.359 239.145 36.375 239.176 36.383 239.211 cv
36.391 239.246 36.395 239.285 36.402 239.328 cv
36.402 239.371 36.406 239.426 36.41 239.488 cv
36.406 239.574 36.406 239.645 36.406 239.699 cv
36.402 239.762 36.391 239.809 36.379 239.844 cv
36.359 239.883 36.34 239.91 36.316 239.926 cv
36.289 239.945 36.258 239.953 36.219 239.953 cv
36.168 239.953 36.098 239.937 36.012 239.906 cv
35.922 239.875 35.816 239.84 35.695 239.797 cv
35.57 239.762 35.422 239.727 35.246 239.691 cv
35.07 239.664 34.867 239.648 34.637 239.645 cv
34.207 239.648 33.84 239.734 33.535 239.906 cv
33.23 240.078 32.98 240.312 32.785 240.605 cv
32.59 240.898 32.445 241.238 32.355 241.621 cv
32.258 242.012 32.203 242.414 32.195 242.832 cv
32.313 242.766 32.449 242.699 32.598 242.629 cv
32.746 242.562 32.906 242.5 33.082 242.441 cv
33.258 242.391 33.445 242.344 33.641 242.309 cv
33.836 242.277 34.047 242.262 34.273 242.258 cv
34.75 242.262 35.152 242.328 35.484 242.453 cv
35.813 242.586 36.078 242.766 36.285 242.996 cv
36.484 243.227 36.629 243.496 36.719 243.809 cv
36.805 244.121 36.852 244.461 36.852 244.828 cv
cp
35.656 244.937 mo
35.656 244.676 35.629 244.434 35.578 244.215 cv
35.523 244 35.434 243.816 35.313 243.66 cv
35.188 243.512 35.023 243.395 34.82 243.312 cv
34.609 243.23 34.355 243.187 34.059 243.187 cv
33.887 243.187 33.719 243.203 33.551 243.234 cv
33.379 243.266 33.215 243.309 33.059 243.355 cv
32.898 243.41 32.75 243.473 32.609 243.543 cv
32.465 243.617 32.332 243.691 32.215 243.77 cv
32.211 244.363 32.25 244.859 32.328 245.254 cv
32.402 245.652 32.512 245.969 32.656 246.207 cv
32.801 246.449 32.98 246.621 33.195 246.723 cv
33.41 246.828 33.66 246.879 33.949 246.875 cv
34.238 246.879 34.492 246.824 34.707 246.711 cv
34.922 246.605 35.098 246.457 35.242 246.27 cv
35.383 246.086 35.488 245.879 35.555 245.648 cv
35.621 245.418 35.656 245.184 35.656 244.937 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44 243.242 mo
43.996 243.926 43.945 244.547 43.84 245.109 cv
43.73 245.672 43.551 246.156 43.305 246.559 cv
43.051 246.965 42.723 247.277 42.324 247.496 cv
41.918 247.719 41.426 247.828 40.84 247.828 cv
40.281 247.828 39.809 247.73 39.43 247.531 cv
39.047 247.336 38.742 247.043 38.508 246.656 cv
38.273 246.27 38.105 245.797 38.012 245.23 cv
37.91 244.668 37.863 244.02 37.863 243.285 cv
37.863 242.613 37.918 241.992 38.027 241.426 cv
38.137 240.863 38.313 240.379 38.563 239.973 cv
38.805 239.57 39.129 239.258 39.535 239.031 cv
39.934 238.812 40.43 238.699 41.02 238.699 cv
41.578 238.699 42.051 238.801 42.434 238.996 cv
42.816 239.199 43.121 239.492 43.355 239.875 cv
43.586 240.266 43.754 240.738 43.852 241.301 cv
43.949 241.863 43.996 242.512 44 243.242 cv
cp
42.793 243.324 mo
42.789 242.883 42.773 242.484 42.746 242.133 cv
42.711 241.781 42.664 241.473 42.605 241.203 cv
42.539 240.934 42.461 240.703 42.363 240.508 cv
42.266 240.316 42.148 240.156 42.012 240.027 cv
41.871 239.902 41.711 239.809 41.539 239.75 cv
41.359 239.695 41.164 239.668 40.949 239.664 cv
40.559 239.668 40.242 239.758 40.004 239.941 cv
39.758 240.125 39.566 240.379 39.43 240.695 cv
39.289 241.016 39.195 241.387 39.145 241.816 cv
39.094 242.246 39.07 242.711 39.07 243.203 cv
39.07 243.867 39.102 244.43 39.172 244.891 cv
39.238 245.359 39.348 245.738 39.5 246.027 cv
39.645 246.324 39.836 246.535 40.066 246.664 cv
40.297 246.801 40.578 246.867 40.91 246.863 cv
41.164 246.867 41.387 246.828 41.582 246.742 cv
41.773 246.664 41.941 246.543 42.082 246.387 cv
42.223 246.234 42.336 246.051 42.43 245.836 cv
42.516 245.621 42.59 245.383 42.648 245.121 cv
42.699 244.863 42.738 244.582 42.762 244.277 cv
42.781 243.973 42.789 243.656 42.793 243.324 cv
cp
f
30.27 190.84 mo
44.461 190.84 li
44.461 207.93 li
30.27 207.93 li
cp
0 0 0 0 cmyk
ef
36.754 195.828 mo
36.75 195.914 36.746 195.988 36.742 196.051 cv
36.734 196.121 36.727 196.184 36.715 196.242 cv
36.703 196.309 36.688 196.367 36.668 196.422 cv
36.645 196.48 36.621 196.543 36.598 196.602 cv
33.402 203.965 li
33.375 204.023 33.348 204.066 33.316 204.098 cv
33.281 204.133 33.238 204.16 33.184 204.18 cv
33.129 204.199 33.059 204.211 32.98 204.223 cv
32.895 204.227 32.797 204.23 32.68 204.234 cv
32.523 204.23 32.402 204.223 32.316 204.211 cv
32.23 204.195 32.168 204.18 32.129 204.148 cv
32.09 204.121 32.07 204.082 32.078 204.039 cv
32.078 203.996 32.094 203.945 32.125 203.883 cv
35.484 196.355 li
31.227 196.355 li
31.141 196.359 31.074 196.312 31.031 196.219 cv
30.988 196.129 30.969 196 30.969 195.836 cv
30.969 195.75 30.973 195.676 30.984 195.609 cv
30.996 195.547 31.012 195.492 31.035 195.449 cv
31.055 195.406 31.082 195.375 31.117 195.352 cv
31.148 195.332 31.188 195.32 31.227 195.32 cv
36.398 195.32 li
36.457 195.32 36.512 195.328 36.563 195.344 cv
36.609 195.359 36.645 195.387 36.672 195.426 cv
36.695 195.465 36.715 195.52 36.73 195.582 cv
36.742 195.648 36.75 195.73 36.754 195.828 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44 199.734 mo
43.996 200.418 43.945 201.039 43.84 201.602 cv
43.73 202.164 43.551 202.648 43.305 203.051 cv
43.051 203.457 42.723 203.77 42.324 203.988 cv
41.918 204.211 41.426 204.32 40.84 204.32 cv
40.281 204.32 39.809 204.223 39.43 204.023 cv
39.047 203.828 38.742 203.535 38.508 203.148 cv
38.273 202.762 38.105 202.289 38.012 201.723 cv
37.91 201.16 37.863 200.512 37.863 199.777 cv
37.863 199.105 37.918 198.484 38.027 197.918 cv
38.137 197.355 38.313 196.871 38.563 196.465 cv
38.805 196.062 39.129 195.75 39.535 195.523 cv
39.934 195.305 40.43 195.191 41.02 195.191 cv
41.578 195.191 42.051 195.293 42.434 195.488 cv
42.816 195.691 43.121 195.984 43.355 196.367 cv
43.586 196.758 43.754 197.23 43.852 197.793 cv
43.949 198.355 43.996 199.004 44 199.734 cv
cp
42.793 199.816 mo
42.789 199.375 42.773 198.977 42.746 198.625 cv
42.711 198.273 42.664 197.965 42.605 197.695 cv
42.539 197.426 42.461 197.195 42.363 197 cv
42.266 196.809 42.148 196.648 42.012 196.52 cv
41.871 196.395 41.711 196.301 41.539 196.242 cv
41.359 196.187 41.164 196.16 40.949 196.156 cv
40.559 196.16 40.242 196.25 40.004 196.434 cv
39.758 196.617 39.566 196.871 39.43 197.187 cv
39.289 197.508 39.195 197.879 39.145 198.309 cv
39.094 198.738 39.07 199.203 39.07 199.695 cv
39.07 200.359 39.102 200.922 39.172 201.383 cv
39.238 201.852 39.348 202.23 39.5 202.52 cv
39.645 202.816 39.836 203.027 40.066 203.156 cv
40.297 203.293 40.578 203.359 40.91 203.355 cv
41.164 203.359 41.387 203.32 41.582 203.234 cv
41.773 203.156 41.941 203.035 42.082 202.879 cv
42.223 202.727 42.336 202.543 42.43 202.328 cv
42.516 202.113 42.59 201.875 42.648 201.613 cv
42.699 201.355 42.738 201.074 42.762 200.77 cv
42.781 200.465 42.789 200.148 42.793 199.816 cv
cp
f
30.27 147.34 mo
44.461 147.34 li
44.461 164.43 li
30.27 164.43 li
cp
0 0 0 0 cmyk
ef
36.84 158.418 mo
36.84 158.809 36.77 159.148 36.633 159.445 cv
36.496 159.746 36.297 160 36.039 160.207 cv
35.777 160.414 35.461 160.57 35.082 160.672 cv
34.699 160.777 34.262 160.828 33.777 160.828 cv
33.316 160.828 32.906 160.781 32.547 160.687 cv
32.184 160.594 31.879 160.453 31.629 160.262 cv
31.375 160.074 31.184 159.844 31.051 159.566 cv
30.918 159.293 30.852 158.977 30.852 158.625 cv
30.852 158.348 30.895 158.094 30.988 157.859 cv
31.074 157.629 31.207 157.414 31.383 157.211 cv
31.551 157.016 31.762 156.828 32.02 156.656 cv
32.27 156.484 32.555 156.324 32.871 156.168 cv
32.594 156.027 32.352 155.875 32.145 155.719 cv
31.93 155.562 31.75 155.391 31.605 155.203 cv
31.457 155.02 31.348 154.824 31.273 154.609 cv
31.195 154.402 31.156 154.172 31.16 153.922 cv
31.156 153.613 31.211 153.32 31.328 153.047 cv
31.438 152.773 31.609 152.539 31.836 152.336 cv
32.063 152.137 32.348 151.977 32.699 151.859 cv
33.047 151.746 33.457 151.687 33.93 151.684 cv
34.375 151.687 34.762 151.742 35.09 151.844 cv
35.414 151.953 35.688 152.098 35.902 152.285 cv
36.113 152.473 36.27 152.691 36.371 152.941 cv
36.473 153.191 36.523 153.461 36.523 153.75 cv
36.523 153.984 36.484 154.211 36.41 154.426 cv
36.332 154.641 36.223 154.844 36.078 155.035 cv
35.93 155.227 35.75 155.406 35.539 155.574 cv
35.324 155.742 35.078 155.898 34.809 156.043 cv
35.129 156.207 35.418 156.371 35.676 156.539 cv
35.926 156.711 36.141 156.895 36.316 157.086 cv
36.484 157.281 36.613 157.488 36.707 157.703 cv
36.793 157.922 36.84 158.16 36.84 158.418 cv
cp
35.355 153.859 mo
35.352 153.672 35.316 153.496 35.254 153.34 cv
35.184 153.184 35.09 153.051 34.965 152.941 cv
34.836 152.832 34.676 152.75 34.488 152.687 cv
34.297 152.633 34.082 152.602 33.84 152.602 cv
33.344 152.602 32.969 152.715 32.715 152.941 cv
32.461 153.168 32.332 153.477 32.336 153.859 cv
32.332 154.043 32.363 154.207 32.426 154.359 cv
32.484 154.512 32.582 154.656 32.715 154.793 cv
32.848 154.934 33.012 155.07 33.211 155.195 cv
33.41 155.328 33.648 155.465 33.922 155.605 cv
34.383 155.371 34.734 155.105 34.984 154.816 cv
35.227 154.527 35.352 154.211 35.355 153.859 cv
cp
35.645 158.543 mo
35.645 158.332 35.605 158.141 35.527 157.969 cv
35.449 157.797 35.328 157.637 35.172 157.488 cv
35.012 157.34 34.816 157.199 34.582 157.059 cv
34.344 156.922 34.07 156.773 33.766 156.621 cv
33.473 156.762 33.219 156.906 33.004 157.047 cv
32.785 157.191 32.609 157.336 32.469 157.484 cv
32.328 157.637 32.223 157.797 32.152 157.965 cv
32.082 158.133 32.047 158.316 32.047 158.516 cv
32.047 158.961 32.199 159.305 32.504 159.547 cv
32.809 159.793 33.262 159.914 33.867 159.91 cv
34.449 159.914 34.891 159.793 35.195 159.543 cv
35.492 159.301 35.645 158.965 35.645 158.543 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.012 156.234 mo
44.008 156.918 43.953 157.543 43.848 158.105 cv
43.738 158.672 43.563 159.156 43.313 159.559 cv
43.063 159.965 42.734 160.277 42.336 160.496 cv
41.93 160.719 41.434 160.828 40.848 160.828 cv
40.285 160.828 39.816 160.73 39.434 160.531 cv
39.051 160.332 38.742 160.039 38.508 159.652 cv
38.273 159.266 38.105 158.789 38.012 158.223 cv
37.91 157.66 37.863 157.012 37.867 156.277 cv
37.863 155.602 37.918 154.98 38.031 154.414 cv
38.137 153.848 38.316 153.363 38.566 152.957 cv
38.813 152.555 39.137 152.238 39.539 152.016 cv
39.941 151.797 40.434 151.687 41.023 151.684 cv
41.582 151.687 42.055 151.789 42.441 151.984 cv
42.82 152.187 43.129 152.48 43.363 152.863 cv
43.594 153.254 43.762 153.727 43.863 154.289 cv
43.961 154.855 44.008 155.504 44.012 156.234 cv
cp
42.805 156.316 mo
42.801 155.875 42.785 155.48 42.754 155.125 cv
42.719 154.773 42.672 154.461 42.613 154.191 cv
42.547 153.922 42.465 153.687 42.371 153.492 cv
42.27 153.297 42.152 153.137 42.02 153.012 cv
41.879 152.887 41.723 152.797 41.547 152.738 cv
41.371 152.684 41.176 152.656 40.957 152.652 cv
40.566 152.656 40.25 152.746 40.008 152.926 cv
39.766 153.109 39.574 153.359 39.434 153.68 cv
39.293 154 39.195 154.379 39.148 154.809 cv
39.094 155.242 39.07 155.703 39.074 156.195 cv
39.07 156.863 39.105 157.43 39.176 157.891 cv
39.246 158.359 39.355 158.738 39.504 159.027 cv
39.652 159.324 39.84 159.535 40.074 159.664 cv
40.301 159.801 40.582 159.867 40.914 159.863 cv
41.168 159.867 41.395 159.824 41.59 159.738 cv
41.785 159.656 41.949 159.539 42.09 159.383 cv
42.227 159.23 42.344 159.047 42.438 158.832 cv
42.527 158.617 42.602 158.379 42.66 158.117 cv
42.711 157.859 42.75 157.578 42.773 157.27 cv
42.793 156.969 42.801 156.648 42.805 156.316 cv
cp
f
30.27 103.84 mo
44.461 103.84 li
44.461 120.93 li
30.27 120.93 li
cp
0 0 0 0 cmyk
ef
36.691 112.406 mo
36.688 112.793 36.664 113.18 36.621 113.57 cv
36.574 113.965 36.496 114.344 36.391 114.707 cv
36.277 115.07 36.133 115.41 35.949 115.727 cv
35.762 116.047 35.527 116.328 35.25 116.562 cv
34.965 116.805 34.629 116.988 34.246 117.121 cv
33.855 117.254 33.41 117.32 32.902 117.32 cv
32.703 117.32 32.512 117.305 32.328 117.281 cv
32.141 117.254 31.973 117.227 31.828 117.191 cv
31.676 117.156 31.551 117.117 31.453 117.074 cv
31.352 117.035 31.277 116.996 31.234 116.953 cv
31.188 116.914 31.156 116.859 31.137 116.785 cv
31.113 116.715 31.102 116.617 31.105 116.5 cv
31.102 116.398 31.105 116.32 31.113 116.262 cv
31.117 116.203 31.129 116.156 31.145 116.125 cv
31.16 116.094 31.18 116.074 31.203 116.059 cv
31.227 116.051 31.258 116.043 31.297 116.039 cv
31.344 116.043 31.414 116.059 31.508 116.09 cv
31.598 116.125 31.711 116.164 31.855 116.203 cv
31.992 116.246 32.156 116.285 32.344 116.316 cv
32.527 116.355 32.738 116.371 32.977 116.367 cv
33.418 116.371 33.797 116.285 34.117 116.113 cv
34.43 115.941 34.691 115.715 34.895 115.426 cv
35.098 115.141 35.246 114.805 35.348 114.422 cv
35.445 114.043 35.5 113.645 35.512 113.223 cv
35.266 113.367 34.977 113.492 34.641 113.598 cv
34.301 113.711 33.914 113.766 33.477 113.762 cv
32.984 113.766 32.57 113.699 32.234 113.562 cv
31.898 113.43 31.625 113.246 31.422 113.012 cv
31.215 112.781 31.07 112.504 30.984 112.18 cv
30.895 111.863 30.852 111.512 30.852 111.133 cv
30.852 110.742 30.906 110.371 31.023 110.012 cv
31.133 109.66 31.313 109.348 31.559 109.078 cv
31.797 108.809 32.105 108.594 32.484 108.434 cv
32.855 108.273 33.305 108.191 33.828 108.191 cv
34.195 108.191 34.52 108.238 34.809 108.332 cv
35.09 108.426 35.34 108.562 35.555 108.738 cv
35.762 108.914 35.941 109.125 36.09 109.375 cv
36.234 109.625 36.352 109.906 36.441 110.219 cv
36.527 110.535 36.59 110.879 36.633 111.246 cv
36.668 111.617 36.688 112.004 36.691 112.406 cv
cp
35.492 112.277 mo
35.492 111.695 35.453 111.203 35.375 110.801 cv
35.297 110.402 35.18 110.078 35.031 109.828 cv
34.879 109.582 34.695 109.402 34.477 109.293 cv
34.254 109.184 34 109.129 33.719 109.129 cv
33.414 109.129 33.16 109.184 32.953 109.293 cv
32.742 109.402 32.57 109.547 32.438 109.723 cv
32.301 109.906 32.199 110.109 32.137 110.336 cv
32.07 110.566 32.039 110.805 32.043 111.043 cv
32.039 111.316 32.07 111.562 32.129 111.781 cv
32.184 112.008 32.273 112.195 32.406 112.352 cv
32.531 112.508 32.699 112.629 32.906 112.715 cv
33.109 112.801 33.363 112.844 33.668 112.84 cv
34.008 112.844 34.34 112.793 34.664 112.687 cv
34.98 112.586 35.258 112.449 35.492 112.277 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44 112.734 mo
43.996 113.418 43.945 114.039 43.84 114.602 cv
43.73 115.164 43.551 115.648 43.305 116.051 cv
43.051 116.457 42.723 116.77 42.324 116.988 cv
41.918 117.211 41.426 117.32 40.84 117.32 cv
40.281 117.32 39.809 117.223 39.43 117.023 cv
39.047 116.828 38.742 116.535 38.508 116.148 cv
38.273 115.762 38.105 115.289 38.012 114.723 cv
37.91 114.16 37.863 113.512 37.863 112.777 cv
37.863 112.105 37.918 111.484 38.027 110.918 cv
38.137 110.355 38.313 109.871 38.563 109.465 cv
38.805 109.062 39.129 108.75 39.535 108.523 cv
39.934 108.305 40.43 108.191 41.02 108.191 cv
41.578 108.191 42.051 108.293 42.434 108.488 cv
42.816 108.691 43.121 108.984 43.355 109.367 cv
43.586 109.758 43.754 110.23 43.852 110.793 cv
43.949 111.355 43.996 112.004 44 112.734 cv
cp
42.793 112.816 mo
42.789 112.375 42.773 111.977 42.746 111.625 cv
42.711 111.273 42.664 110.965 42.605 110.695 cv
42.539 110.426 42.461 110.195 42.363 110 cv
42.266 109.809 42.148 109.648 42.012 109.52 cv
41.871 109.395 41.711 109.301 41.539 109.242 cv
41.359 109.187 41.164 109.16 40.949 109.156 cv
40.559 109.16 40.242 109.25 40.004 109.434 cv
39.758 109.617 39.566 109.871 39.43 110.187 cv
39.289 110.508 39.195 110.879 39.145 111.309 cv
39.094 111.738 39.07 112.203 39.07 112.695 cv
39.07 113.359 39.102 113.922 39.172 114.383 cv
39.238 114.852 39.348 115.23 39.5 115.52 cv
39.645 115.816 39.836 116.027 40.066 116.156 cv
40.297 116.293 40.578 116.359 40.91 116.355 cv
41.164 116.359 41.387 116.32 41.582 116.234 cv
41.773 116.156 41.941 116.035 42.082 115.879 cv
42.223 115.727 42.336 115.543 42.43 115.328 cv
42.516 115.113 42.59 114.875 42.648 114.613 cv
42.699 114.355 42.738 114.074 42.762 113.77 cv
42.781 113.465 42.789 113.148 42.793 112.816 cv
cp
f
23.172 60.34 mo
44.453 60.34 li
44.453 77.43 li
23.172 77.43 li
cp
0 0 0 0 cmyk
ef
29.535 73.215 mo
29.531 73.305 29.523 73.375 29.512 73.434 cv
29.496 73.496 29.477 73.547 29.457 73.578 cv
29.434 73.617 29.41 73.641 29.379 73.656 cv
29.348 73.672 29.316 73.68 29.289 73.68 cv
24.652 73.68 li
24.617 73.68 24.59 73.672 24.563 73.656 cv
24.535 73.641 24.508 73.617 24.484 73.578 cv
24.457 73.547 24.438 73.496 24.426 73.434 cv
24.41 73.375 24.402 73.305 24.406 73.215 cv
24.402 73.137 24.41 73.062 24.426 73 cv
24.438 72.941 24.453 72.895 24.477 72.855 cv
24.492 72.82 24.52 72.789 24.551 72.766 cv
24.582 72.746 24.613 72.738 24.652 72.734 cv
26.504 72.734 li
26.504 65.988 li
24.789 67.008 li
24.699 67.059 24.629 67.086 24.582 67.094 cv
24.527 67.102 24.484 67.094 24.453 67.062 cv
24.418 67.035 24.398 66.984 24.387 66.914 cv
24.375 66.848 24.367 66.762 24.371 66.652 cv
24.367 66.578 24.371 66.512 24.383 66.453 cv
24.387 66.402 24.398 66.355 24.414 66.316 cv
24.426 66.281 24.445 66.25 24.469 66.223 cv
24.492 66.195 24.523 66.168 24.57 66.141 cv
26.613 64.828 li
26.629 64.816 26.648 64.805 26.68 64.797 cv
26.703 64.789 26.738 64.781 26.785 64.77 cv
26.824 64.762 26.875 64.754 26.93 64.75 cv
26.984 64.75 27.051 64.75 27.137 64.746 cv
27.242 64.75 27.336 64.754 27.41 64.762 cv
27.48 64.77 27.535 64.785 27.582 64.801 cv
27.621 64.82 27.648 64.84 27.664 64.863 cv
27.672 64.891 27.68 64.914 27.684 64.937 cv
27.684 72.734 li
29.289 72.734 li
29.324 72.738 29.359 72.746 29.391 72.766 cv
29.422 72.789 29.445 72.82 29.469 72.855 cv
29.484 72.895 29.5 72.941 29.516 73 cv
29.523 73.062 29.531 73.137 29.535 73.215 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
36.891 69.223 mo
36.887 69.906 36.836 70.527 36.73 71.09 cv
36.621 71.652 36.441 72.137 36.195 72.539 cv
35.941 72.945 35.613 73.258 35.215 73.477 cv
34.809 73.699 34.316 73.809 33.73 73.809 cv
33.172 73.809 32.699 73.711 32.32 73.512 cv
31.938 73.316 31.633 73.023 31.398 72.637 cv
31.164 72.25 30.996 71.777 30.902 71.211 cv
30.801 70.648 30.754 70 30.754 69.266 cv
30.754 68.594 30.809 67.973 30.918 67.406 cv
31.027 66.844 31.203 66.359 31.453 65.953 cv
31.695 65.551 32.02 65.238 32.426 65.012 cv
32.824 64.793 33.32 64.68 33.91 64.68 cv
34.469 64.68 34.941 64.781 35.324 64.977 cv
35.707 65.18 36.012 65.473 36.246 65.855 cv
36.477 66.246 36.645 66.719 36.742 67.281 cv
36.84 67.844 36.887 68.492 36.891 69.223 cv
cp
35.684 69.305 mo
35.68 68.863 35.664 68.465 35.637 68.113 cv
35.602 67.762 35.555 67.453 35.496 67.184 cv
35.43 66.914 35.352 66.684 35.254 66.488 cv
35.156 66.297 35.039 66.137 34.902 66.008 cv
34.762 65.883 34.602 65.789 34.43 65.73 cv
34.25 65.676 34.055 65.648 33.84 65.645 cv
33.449 65.648 33.133 65.738 32.895 65.922 cv
32.648 66.105 32.457 66.359 32.32 66.676 cv
32.18 66.996 32.086 67.367 32.035 67.797 cv
31.984 68.227 31.961 68.691 31.961 69.184 cv
31.961 69.848 31.992 70.41 32.063 70.871 cv
32.129 71.34 32.238 71.719 32.391 72.008 cv
32.535 72.305 32.727 72.516 32.957 72.645 cv
33.188 72.781 33.469 72.848 33.801 72.844 cv
34.055 72.848 34.277 72.809 34.473 72.723 cv
34.664 72.645 34.832 72.523 34.973 72.367 cv
35.113 72.215 35.227 72.031 35.32 71.816 cv
35.406 71.602 35.48 71.363 35.539 71.102 cv
35.59 70.844 35.629 70.562 35.652 70.258 cv
35.672 69.953 35.68 69.637 35.684 69.305 cv
cp
f
43.969 69.223 mo
43.965 69.906 43.914 70.527 43.809 71.09 cv
43.699 71.652 43.52 72.137 43.273 72.539 cv
43.02 72.945 42.691 73.258 42.293 73.477 cv
41.887 73.699 41.395 73.809 40.809 73.809 cv
40.25 73.809 39.777 73.711 39.398 73.512 cv
39.016 73.316 38.711 73.023 38.477 72.637 cv
38.242 72.25 38.074 71.777 37.98 71.211 cv
37.879 70.648 37.832 70 37.832 69.266 cv
37.832 68.594 37.887 67.973 37.996 67.406 cv
38.105 66.844 38.281 66.359 38.531 65.953 cv
38.773 65.551 39.098 65.238 39.504 65.012 cv
39.902 64.793 40.398 64.68 40.988 64.68 cv
41.547 64.68 42.02 64.781 42.402 64.977 cv
42.785 65.18 43.09 65.473 43.324 65.855 cv
43.555 66.246 43.723 66.719 43.82 67.281 cv
43.918 67.844 43.965 68.492 43.969 69.223 cv
cp
42.762 69.305 mo
42.758 68.863 42.742 68.465 42.715 68.113 cv
42.68 67.762 42.633 67.453 42.574 67.184 cv
42.508 66.914 42.43 66.684 42.332 66.488 cv
42.234 66.297 42.117 66.137 41.98 66.008 cv
41.84 65.883 41.68 65.789 41.508 65.73 cv
41.328 65.676 41.133 65.648 40.918 65.645 cv
40.527 65.648 40.211 65.738 39.973 65.922 cv
39.727 66.105 39.535 66.359 39.398 66.676 cv
39.258 66.996 39.164 67.367 39.113 67.797 cv
39.063 68.227 39.039 68.691 39.039 69.184 cv
39.039 69.848 39.07 70.41 39.141 70.871 cv
39.207 71.34 39.316 71.719 39.469 72.008 cv
39.613 72.305 39.805 72.516 40.035 72.645 cv
40.266 72.781 40.547 72.848 40.879 72.844 cv
41.133 72.848 41.355 72.809 41.551 72.723 cv
41.742 72.645 41.91 72.523 42.051 72.367 cv
42.191 72.215 42.305 72.031 42.398 71.816 cv
42.484 71.602 42.559 71.363 42.617 71.102 cv
42.668 70.844 42.707 70.562 42.73 70.258 cv
42.75 69.953 42.758 69.637 42.762 69.305 cv
cp
f
23.172 16.852 mo
44.453 16.852 li
44.453 33.942 li
23.172 33.942 li
cp
0 0 0 0 cmyk
ef
29.535 29.707 mo
29.531 29.797 29.523 29.867 29.512 29.926 cv
29.496 29.988 29.477 30.039 29.457 30.07 cv
29.434 30.109 29.41 30.133 29.379 30.148 cv
29.348 30.164 29.316 30.172 29.289 30.172 cv
24.652 30.172 li
24.617 30.172 24.59 30.164 24.563 30.148 cv
24.535 30.133 24.508 30.109 24.484 30.07 cv
24.457 30.039 24.438 29.988 24.426 29.926 cv
24.41 29.867 24.402 29.797 24.406 29.707 cv
24.402 29.629 24.41 29.555 24.426 29.492 cv
24.438 29.434 24.453 29.387 24.477 29.348 cv
24.492 29.312 24.52 29.281 24.551 29.258 cv
24.582 29.238 24.613 29.23 24.652 29.227 cv
26.504 29.227 li
26.504 22.48 li
24.789 23.5 li
24.699 23.551 24.629 23.578 24.582 23.586 cv
24.527 23.594 24.484 23.586 24.453 23.555 cv
24.418 23.527 24.398 23.477 24.387 23.406 cv
24.375 23.34 24.367 23.254 24.371 23.145 cv
24.367 23.07 24.371 23.004 24.383 22.945 cv
24.387 22.895 24.398 22.848 24.414 22.809 cv
24.426 22.773 24.445 22.742 24.469 22.715 cv
24.492 22.687 24.523 22.66 24.57 22.633 cv
26.613 21.32 li
26.629 21.309 26.648 21.297 26.68 21.289 cv
26.703 21.281 26.738 21.273 26.785 21.262 cv
26.824 21.254 26.875 21.246 26.93 21.242 cv
26.984 21.242 27.051 21.242 27.137 21.238 cv
27.242 21.242 27.336 21.246 27.41 21.254 cv
27.48 21.262 27.535 21.277 27.582 21.293 cv
27.621 21.312 27.648 21.332 27.664 21.355 cv
27.672 21.383 27.68 21.406 27.684 21.43 cv
27.684 29.227 li
29.289 29.227 li
29.324 29.23 29.359 29.238 29.391 29.258 cv
29.422 29.281 29.445 29.312 29.469 29.348 cv
29.484 29.387 29.5 29.434 29.516 29.492 cv
29.523 29.555 29.531 29.629 29.535 29.707 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
36.617 29.707 mo
36.613 29.797 36.605 29.867 36.594 29.926 cv
36.578 29.988 36.559 30.039 36.539 30.07 cv
36.516 30.109 36.492 30.133 36.461 30.148 cv
36.43 30.164 36.398 30.172 36.371 30.172 cv
31.734 30.172 li
31.699 30.172 31.672 30.164 31.645 30.148 cv
31.617 30.133 31.59 30.109 31.566 30.07 cv
31.539 30.039 31.52 29.988 31.508 29.926 cv
31.492 29.867 31.484 29.797 31.488 29.707 cv
31.484 29.629 31.492 29.555 31.508 29.492 cv
31.52 29.434 31.535 29.387 31.559 29.348 cv
31.574 29.312 31.602 29.281 31.633 29.258 cv
31.664 29.238 31.695 29.23 31.734 29.227 cv
33.586 29.227 li
33.586 22.48 li
31.871 23.5 li
31.781 23.551 31.711 23.578 31.664 23.586 cv
31.609 23.594 31.566 23.586 31.535 23.555 cv
31.5 23.527 31.48 23.477 31.469 23.406 cv
31.457 23.34 31.449 23.254 31.453 23.145 cv
31.449 23.07 31.453 23.004 31.465 22.945 cv
31.469 22.895 31.48 22.848 31.496 22.809 cv
31.508 22.773 31.527 22.742 31.551 22.715 cv
31.574 22.687 31.605 22.66 31.652 22.633 cv
33.695 21.32 li
33.711 21.309 33.73 21.297 33.762 21.289 cv
33.785 21.281 33.82 21.273 33.867 21.262 cv
33.906 21.254 33.957 21.246 34.012 21.242 cv
34.066 21.242 34.133 21.242 34.219 21.238 cv
34.324 21.242 34.418 21.246 34.492 21.254 cv
34.563 21.262 34.617 21.277 34.664 21.293 cv
34.703 21.312 34.73 21.332 34.746 21.355 cv
34.754 21.383 34.762 21.406 34.766 21.43 cv
34.766 29.227 li
36.371 29.227 li
36.406 29.23 36.441 29.238 36.473 29.258 cv
36.504 29.281 36.527 29.312 36.551 29.348 cv
36.566 29.387 36.582 29.434 36.598 29.492 cv
36.605 29.555 36.613 29.629 36.617 29.707 cv
cp
f
43.969 25.715 mo
43.965 26.398 43.914 27.02 43.809 27.582 cv
43.699 28.145 43.52 28.629 43.273 29.031 cv
43.02 29.437 42.691 29.75 42.293 29.969 cv
41.887 30.191 41.395 30.301 40.809 30.301 cv
40.25 30.301 39.777 30.203 39.398 30.004 cv
39.016 29.809 38.711 29.516 38.477 29.129 cv
38.242 28.742 38.074 28.27 37.98 27.703 cv
37.879 27.141 37.832 26.492 37.832 25.758 cv
37.832 25.086 37.887 24.465 37.996 23.898 cv
38.105 23.336 38.281 22.852 38.531 22.445 cv
38.773 22.043 39.098 21.73 39.504 21.504 cv
39.902 21.285 40.398 21.172 40.988 21.172 cv
41.547 21.172 42.02 21.273 42.402 21.469 cv
42.785 21.672 43.09 21.965 43.324 22.348 cv
43.555 22.738 43.723 23.211 43.82 23.773 cv
43.918 24.336 43.965 24.984 43.969 25.715 cv
cp
42.762 25.797 mo
42.758 25.355 42.742 24.957 42.715 24.605 cv
42.68 24.254 42.633 23.945 42.574 23.676 cv
42.508 23.406 42.43 23.176 42.332 22.98 cv
42.234 22.789 42.117 22.629 41.98 22.5 cv
41.84 22.375 41.68 22.281 41.508 22.223 cv
41.328 22.168 41.133 22.141 40.918 22.137 cv
40.527 22.141 40.211 22.23 39.973 22.414 cv
39.727 22.598 39.535 22.852 39.398 23.168 cv
39.258 23.488 39.164 23.859 39.113 24.289 cv
39.063 24.719 39.039 25.184 39.039 25.676 cv
39.039 26.34 39.07 26.902 39.141 27.363 cv
39.207 27.832 39.316 28.211 39.469 28.5 cv
39.613 28.797 39.805 29.008 40.035 29.137 cv
40.266 29.273 40.547 29.34 40.879 29.336 cv
41.133 29.34 41.355 29.301 41.551 29.215 cv
41.742 29.137 41.91 29.016 42.051 28.859 cv
42.191 28.707 42.305 28.523 42.398 28.309 cv
42.484 28.094 42.559 27.855 42.617 27.594 cv
42.668 27.336 42.707 27.055 42.73 26.75 cv
42.75 26.445 42.758 26.129 42.762 25.797 cv
cp
f
60.254 526.48 mo
60.25 526.57 60.242 526.641 60.23 526.699 cv
60.215 526.762 60.195 526.812 60.176 526.844 cv
60.152 526.883 60.129 526.906 60.098 526.922 cv
60.066 526.937 60.035 526.945 60.008 526.945 cv
55.371 526.945 li
55.336 526.945 55.309 526.937 55.281 526.922 cv
55.254 526.906 55.227 526.883 55.203 526.844 cv
55.176 526.812 55.156 526.762 55.145 526.699 cv
55.129 526.641 55.121 526.57 55.125 526.48 cv
55.121 526.402 55.129 526.328 55.145 526.266 cv
55.156 526.207 55.172 526.16 55.195 526.121 cv
55.211 526.086 55.238 526.055 55.27 526.031 cv
55.301 526.012 55.332 526.004 55.371 526 cv
57.223 526 li
57.223 519.254 li
55.508 520.273 li
55.418 520.324 55.348 520.352 55.301 520.359 cv
55.246 520.367 55.203 520.359 55.172 520.328 cv
55.137 520.301 55.117 520.25 55.105 520.18 cv
55.094 520.113 55.086 520.027 55.09 519.918 cv
55.086 519.844 55.09 519.777 55.102 519.719 cv
55.105 519.668 55.117 519.621 55.133 519.582 cv
55.145 519.547 55.164 519.516 55.188 519.488 cv
55.211 519.461 55.242 519.434 55.289 519.406 cv
57.332 518.094 li
57.348 518.082 57.367 518.07 57.398 518.062 cv
57.422 518.055 57.457 518.047 57.504 518.035 cv
57.543 518.027 57.594 518.02 57.648 518.016 cv
57.703 518.016 57.77 518.016 57.855 518.012 cv
57.961 518.016 58.055 518.02 58.129 518.027 cv
58.199 518.035 58.254 518.051 58.301 518.066 cv
58.34 518.086 58.367 518.105 58.383 518.129 cv
58.391 518.156 58.398 518.18 58.402 518.203 cv
58.402 526 li
60.008 526 li
60.043 526.004 60.078 526.012 60.109 526.031 cv
60.141 526.055 60.164 526.086 60.188 526.121 cv
60.203 526.16 60.219 526.207 60.234 526.266 cv
60.242 526.328 60.25 526.402 60.254 526.48 cv
cp
f
135.117 526.437 mo
135.113 526.523 135.109 526.598 135.098 526.66 cv
135.086 526.727 135.07 526.781 135.051 526.82 cv
135.027 526.867 135 526.898 134.969 526.914 cv
134.934 526.937 134.895 526.945 134.855 526.945 cv
129.953 526.945 li
129.891 526.945 129.832 526.937 129.785 526.922 cv
129.734 526.906 129.695 526.883 129.66 526.844 cv
129.625 526.812 129.598 526.758 129.586 526.687 cv
129.566 526.617 129.559 526.531 129.563 526.43 cv
129.559 526.34 129.563 526.262 129.57 526.191 cv
129.574 526.125 129.59 526.066 129.617 526.012 cv
129.641 525.961 129.672 525.906 129.707 525.852 cv
129.742 525.801 129.785 525.746 129.844 525.684 cv
131.617 523.859 li
132.027 523.441 132.355 523.066 132.605 522.73 cv
132.852 522.402 133.043 522.098 133.176 521.82 cv
133.309 521.547 133.395 521.297 133.441 521.07 cv
133.48 520.848 133.504 520.637 133.504 520.441 cv
133.504 520.246 133.469 520.062 133.402 519.883 cv
133.336 519.711 133.242 519.555 133.117 519.418 cv
132.992 519.289 132.836 519.184 132.648 519.102 cv
132.461 519.027 132.242 518.988 131.996 518.984 cv
131.707 518.988 131.449 519.027 131.223 519.102 cv
130.992 519.184 130.793 519.27 130.621 519.355 cv
130.449 519.449 130.305 519.531 130.188 519.609 cv
130.07 519.687 129.984 519.727 129.934 519.727 cv
129.898 519.727 129.867 519.719 129.844 519.699 cv
129.813 519.684 129.793 519.652 129.777 519.609 cv
129.762 519.57 129.746 519.516 129.738 519.445 cv
129.727 519.379 129.723 519.297 129.727 519.199 cv
129.723 519.133 129.727 519.074 129.734 519.023 cv
129.738 518.973 129.746 518.93 129.758 518.891 cv
129.766 518.855 129.781 518.82 129.801 518.789 cv
129.82 518.758 129.855 518.719 129.914 518.668 cv
129.965 518.621 130.059 518.555 130.195 518.473 cv
130.328 518.391 130.5 518.312 130.703 518.23 cv
130.906 518.152 131.129 518.082 131.375 518.027 cv
131.617 517.973 131.875 517.945 132.148 517.945 cv
132.574 517.945 132.949 518.008 133.273 518.129 cv
133.594 518.25 133.859 518.414 134.074 518.625 cv
134.285 518.836 134.445 519.082 134.551 519.355 cv
134.656 519.637 134.711 519.934 134.711 520.246 cv
134.711 520.535 134.684 520.816 134.633 521.094 cv
134.582 521.379 134.477 521.684 134.316 522.008 cv
134.152 522.336 133.918 522.699 133.613 523.098 cv
133.305 523.5 132.898 523.961 132.395 524.477 cv
130.988 525.945 li
134.848 525.945 li
134.879 525.949 134.914 525.961 134.953 525.977 cv
134.984 526 135.016 526.031 135.043 526.07 cv
135.066 526.113 135.086 526.164 135.098 526.223 cv
135.109 526.289 135.113 526.359 135.117 526.437 cv
cp
f
210.352 524.422 mo
210.348 524.574 210.324 524.695 210.281 524.781 cv
210.234 524.871 210.172 524.914 210.09 524.91 cv
209.09 524.91 li
209.09 526.773 li
209.09 526.812 209.078 526.844 209.063 526.867 cv
209.039 526.895 209.008 526.914 208.965 526.934 cv
208.914 526.949 208.852 526.961 208.781 526.973 cv
208.703 526.98 208.609 526.984 208.492 526.988 cv
208.375 526.984 208.277 526.98 208.207 526.973 cv
208.129 526.961 208.07 526.949 208.027 526.934 cv
207.98 526.914 207.949 526.895 207.934 526.867 cv
207.914 526.844 207.906 526.812 207.91 526.773 cv
207.91 524.91 li
204.281 524.91 li
204.223 524.914 204.18 524.906 204.145 524.891 cv
204.109 524.879 204.074 524.852 204.047 524.812 cv
204.016 524.777 203.996 524.727 203.984 524.656 cv
203.973 524.59 203.969 524.5 203.969 524.387 cv
203.969 524.305 203.969 524.227 203.977 524.156 cv
203.977 524.086 203.988 524.023 204.004 523.969 cv
204.016 523.914 204.031 523.859 204.059 523.805 cv
204.078 523.75 204.105 523.695 204.141 523.633 cv
207.301 518.246 li
207.32 518.211 207.355 518.18 207.402 518.152 cv
207.445 518.125 207.5 518.102 207.574 518.082 cv
207.641 518.066 207.727 518.055 207.832 518.043 cv
207.934 518.039 208.055 518.035 208.195 518.031 cv
208.344 518.035 208.48 518.039 208.598 518.051 cv
208.711 518.062 208.801 518.078 208.875 518.094 cv
208.941 518.113 208.996 518.137 209.035 518.168 cv
209.07 518.199 209.09 518.234 209.09 518.273 cv
209.09 523.937 li
210.09 523.937 li
210.164 523.941 210.227 523.98 210.277 524.059 cv
210.324 524.141 210.348 524.262 210.352 524.422 cv
cp
207.91 519.07 mo
207.898 519.07 li
205.047 523.937 li
207.91 523.937 li
cp
f
285.082 524.074 mo
285.082 524.465 285.02 524.844 284.902 525.203 cv
284.777 525.57 284.594 525.887 284.352 526.16 cv
284.102 526.437 283.789 526.66 283.414 526.824 cv
283.031 526.992 282.586 527.074 282.07 527.074 cv
281.699 527.074 281.371 527.031 281.09 526.937 cv
280.805 526.852 280.559 526.719 280.348 526.547 cv
280.137 526.379 279.961 526.172 279.824 525.926 cv
279.684 525.68 279.57 525.398 279.488 525.082 cv
279.402 524.77 279.344 524.426 279.309 524.047 cv
279.27 523.676 279.25 523.273 279.254 522.84 cv
279.25 522.461 279.27 522.078 279.313 521.687 cv
279.352 521.305 279.426 520.93 279.531 520.562 cv
279.637 520.203 279.781 519.863 279.961 519.547 cv
280.141 519.23 280.367 518.953 280.641 518.719 cv
280.914 518.484 281.238 518.297 281.617 518.156 cv
281.996 518.02 282.438 517.953 282.941 517.949 cv
283.109 517.953 283.281 517.961 283.453 517.98 cv
283.625 518.004 283.785 518.035 283.934 518.066 cv
284.082 518.105 284.203 518.141 284.305 518.18 cv
284.402 518.219 284.469 518.254 284.504 518.277 cv
284.531 518.305 284.555 518.332 284.574 518.359 cv
284.59 518.391 284.605 518.422 284.613 518.457 cv
284.621 518.492 284.625 518.531 284.633 518.574 cv
284.633 518.617 284.637 518.672 284.641 518.734 cv
284.637 518.82 284.637 518.891 284.637 518.945 cv
284.633 519.008 284.621 519.055 284.609 519.09 cv
284.59 519.129 284.57 519.156 284.547 519.172 cv
284.52 519.191 284.488 519.199 284.449 519.199 cv
284.398 519.199 284.328 519.184 284.242 519.152 cv
284.152 519.121 284.047 519.086 283.926 519.043 cv
283.801 519.008 283.652 518.973 283.477 518.937 cv
283.301 518.91 283.098 518.895 282.867 518.891 cv
282.438 518.895 282.07 518.98 281.766 519.152 cv
281.461 519.324 281.211 519.559 281.016 519.852 cv
280.82 520.145 280.676 520.484 280.586 520.867 cv
280.488 521.258 280.434 521.66 280.426 522.078 cv
280.543 522.012 280.68 521.945 280.828 521.875 cv
280.977 521.809 281.137 521.746 281.313 521.687 cv
281.488 521.637 281.676 521.59 281.871 521.555 cv
282.066 521.523 282.277 521.508 282.504 521.504 cv
282.98 521.508 283.383 521.574 283.715 521.699 cv
284.043 521.832 284.309 522.012 284.516 522.242 cv
284.715 522.473 284.859 522.742 284.949 523.055 cv
285.035 523.367 285.082 523.707 285.082 524.074 cv
cp
283.887 524.184 mo
283.887 523.922 283.859 523.68 283.809 523.461 cv
283.754 523.246 283.664 523.062 283.543 522.906 cv
283.418 522.758 283.254 522.641 283.051 522.559 cv
282.84 522.477 282.586 522.434 282.289 522.434 cv
282.117 522.434 281.949 522.449 281.781 522.48 cv
281.609 522.512 281.445 522.555 281.289 522.602 cv
281.129 522.656 280.98 522.719 280.84 522.789 cv
280.695 522.863 280.563 522.937 280.445 523.016 cv
280.441 523.609 280.48 524.105 280.559 524.5 cv
280.633 524.898 280.742 525.215 280.887 525.453 cv
281.031 525.695 281.211 525.867 281.426 525.969 cv
281.641 526.074 281.891 526.125 282.18 526.121 cv
282.469 526.125 282.723 526.07 282.938 525.957 cv
283.152 525.852 283.328 525.703 283.473 525.516 cv
283.613 525.332 283.719 525.125 283.785 524.895 cv
283.852 524.664 283.887 524.43 283.887 524.184 cv
cp
f
359.918 524.668 mo
359.918 525.055 359.848 525.398 359.711 525.695 cv
359.574 526 359.379 526.25 359.121 526.453 cv
358.863 526.66 358.543 526.816 358.164 526.918 cv
357.781 527.023 357.348 527.074 356.863 527.074 cv
356.402 527.074 355.992 527.027 355.633 526.934 cv
355.27 526.84 354.965 526.699 354.715 526.508 cv
354.465 526.324 354.273 526.094 354.141 525.816 cv
354.008 525.543 353.941 525.23 353.941 524.875 cv
353.941 524.602 353.984 524.344 354.078 524.109 cv
354.164 523.875 354.297 523.66 354.473 523.465 cv
354.641 523.27 354.852 523.086 355.105 522.91 cv
355.355 522.742 355.641 522.578 355.957 522.422 cv
355.684 522.281 355.441 522.133 355.23 521.973 cv
355.02 521.816 354.84 521.645 354.695 521.457 cv
354.547 521.273 354.438 521.078 354.363 520.867 cv
354.285 520.66 354.246 520.43 354.25 520.18 cv
354.246 519.871 354.301 519.578 354.418 519.305 cv
354.527 519.035 354.699 518.801 354.926 518.598 cv
355.152 518.398 355.438 518.238 355.789 518.121 cv
356.133 518.004 356.543 517.945 357.012 517.945 cv
357.457 517.945 357.844 518 358.172 518.105 cv
358.5 518.215 358.77 518.359 358.98 518.543 cv
359.191 518.73 359.348 518.949 359.453 519.199 cv
359.551 519.449 359.602 519.719 359.605 520.008 cv
359.602 520.242 359.563 520.469 359.492 520.68 cv
359.414 520.898 359.305 521.102 359.156 521.289 cv
359.008 521.484 358.828 521.664 358.617 521.828 cv
358.406 522 358.164 522.156 357.891 522.297 cv
358.211 522.461 358.496 522.625 358.754 522.793 cv
359.004 522.961 359.219 523.141 359.395 523.336 cv
359.563 523.531 359.691 523.738 359.785 523.953 cv
359.871 524.172 359.918 524.41 359.918 524.668 cv
cp
358.438 520.117 mo
358.434 519.93 358.402 519.754 358.336 519.598 cv
358.27 519.441 358.172 519.309 358.047 519.199 cv
357.918 519.09 357.758 519.008 357.57 518.949 cv
357.375 518.895 357.16 518.867 356.922 518.863 cv
356.426 518.867 356.051 518.977 355.801 519.199 cv
355.543 519.426 355.418 519.734 355.422 520.117 cv
355.418 520.297 355.449 520.461 355.512 520.613 cv
355.574 520.77 355.668 520.914 355.801 521.051 cv
355.926 521.187 356.09 521.32 356.293 521.449 cv
356.488 521.582 356.727 521.719 357.004 521.859 cv
357.465 521.625 357.82 521.363 358.066 521.07 cv
358.313 520.785 358.434 520.469 358.438 520.117 cv
cp
358.727 524.793 mo
358.723 524.586 358.684 524.395 358.609 524.223 cv
358.527 524.055 358.41 523.895 358.254 523.742 cv
358.098 523.594 357.898 523.449 357.664 523.309 cv
357.426 523.172 357.156 523.027 356.848 522.875 cv
356.559 523.02 356.305 523.16 356.09 523.301 cv
355.871 523.441 355.691 523.59 355.555 523.738 cv
355.414 523.895 355.309 524.051 355.238 524.215 cv
355.164 524.383 355.129 524.566 355.133 524.766 cv
355.129 525.211 355.281 525.555 355.59 525.793 cv
355.891 526.039 356.344 526.16 356.949 526.156 cv
357.531 526.16 357.977 526.039 358.277 525.789 cv
358.574 525.547 358.723 525.215 358.727 524.793 cv
cp
f
431.035 526.48 mo
431.031 526.57 431.023 526.641 431.012 526.699 cv
430.996 526.762 430.977 526.812 430.957 526.844 cv
430.934 526.883 430.91 526.906 430.879 526.922 cv
430.848 526.937 430.816 526.945 430.789 526.945 cv
426.152 526.945 li
426.117 526.945 426.09 526.937 426.063 526.922 cv
426.035 526.906 426.008 526.883 425.984 526.844 cv
425.957 526.812 425.938 526.762 425.926 526.699 cv
425.91 526.641 425.902 526.57 425.906 526.48 cv
425.902 526.402 425.91 526.328 425.926 526.266 cv
425.938 526.207 425.953 526.16 425.977 526.121 cv
425.992 526.086 426.02 526.055 426.051 526.031 cv
426.082 526.012 426.113 526.004 426.152 526 cv
428.004 526 li
428.004 519.254 li
426.289 520.273 li
426.199 520.324 426.129 520.352 426.082 520.359 cv
426.027 520.367 425.984 520.359 425.953 520.328 cv
425.918 520.301 425.898 520.25 425.887 520.18 cv
425.875 520.113 425.867 520.027 425.871 519.918 cv
425.867 519.844 425.871 519.777 425.883 519.719 cv
425.887 519.668 425.898 519.621 425.914 519.582 cv
425.926 519.547 425.945 519.516 425.969 519.488 cv
425.992 519.461 426.023 519.434 426.07 519.406 cv
428.113 518.094 li
428.129 518.082 428.148 518.07 428.18 518.062 cv
428.203 518.055 428.238 518.047 428.285 518.035 cv
428.324 518.027 428.375 518.02 428.43 518.016 cv
428.484 518.016 428.551 518.016 428.637 518.012 cv
428.742 518.016 428.836 518.02 428.91 518.027 cv
428.98 518.035 429.035 518.051 429.082 518.066 cv
429.121 518.086 429.148 518.105 429.164 518.129 cv
429.172 518.156 429.18 518.18 429.184 518.203 cv
429.184 526 li
430.789 526 li
430.824 526.004 430.859 526.012 430.891 526.031 cv
430.922 526.055 430.945 526.086 430.969 526.121 cv
430.984 526.16 431 526.207 431.016 526.266 cv
431.023 526.328 431.031 526.402 431.035 526.48 cv
cp
f
438.391 522.488 mo
438.387 523.172 438.336 523.793 438.23 524.355 cv
438.121 524.918 437.941 525.402 437.695 525.805 cv
437.441 526.211 437.113 526.523 436.715 526.742 cv
436.309 526.965 435.816 527.074 435.23 527.074 cv
434.672 527.074 434.199 526.977 433.82 526.777 cv
433.438 526.582 433.133 526.289 432.898 525.902 cv
432.664 525.516 432.496 525.043 432.402 524.477 cv
432.301 523.914 432.254 523.266 432.254 522.531 cv
432.254 521.859 432.309 521.238 432.418 520.672 cv
432.527 520.109 432.703 519.625 432.953 519.219 cv
433.195 518.816 433.52 518.504 433.926 518.277 cv
434.324 518.059 434.82 517.945 435.41 517.945 cv
435.969 517.945 436.441 518.047 436.824 518.242 cv
437.207 518.445 437.512 518.738 437.746 519.121 cv
437.977 519.512 438.145 519.984 438.242 520.547 cv
438.34 521.109 438.387 521.758 438.391 522.488 cv
cp
437.184 522.57 mo
437.18 522.129 437.164 521.73 437.137 521.379 cv
437.102 521.027 437.055 520.719 436.996 520.449 cv
436.93 520.18 436.852 519.949 436.754 519.754 cv
436.656 519.562 436.539 519.402 436.402 519.273 cv
436.262 519.148 436.102 519.055 435.93 518.996 cv
435.75 518.941 435.555 518.914 435.34 518.91 cv
434.949 518.914 434.633 519.004 434.395 519.187 cv
434.148 519.371 433.957 519.625 433.82 519.941 cv
433.68 520.262 433.586 520.633 433.535 521.062 cv
433.484 521.492 433.461 521.957 433.461 522.449 cv
433.461 523.113 433.492 523.676 433.563 524.137 cv
433.629 524.605 433.738 524.984 433.891 525.273 cv
434.035 525.57 434.227 525.781 434.457 525.91 cv
434.688 526.047 434.969 526.113 435.301 526.109 cv
435.555 526.113 435.777 526.074 435.973 525.988 cv
436.164 525.91 436.332 525.789 436.473 525.633 cv
436.613 525.48 436.727 525.297 436.82 525.082 cv
436.906 524.867 436.98 524.629 437.039 524.367 cv
437.09 524.109 437.129 523.828 437.152 523.523 cv
437.172 523.219 437.18 522.902 437.184 522.57 cv
cp
f
505.914 526.48 mo
505.91 526.57 505.902 526.641 505.891 526.699 cv
505.875 526.762 505.855 526.812 505.836 526.844 cv
505.813 526.883 505.789 526.906 505.758 526.922 cv
505.727 526.937 505.695 526.945 505.668 526.945 cv
501.031 526.945 li
500.996 526.945 500.969 526.937 500.941 526.922 cv
500.914 526.906 500.887 526.883 500.863 526.844 cv
500.836 526.812 500.816 526.762 500.805 526.699 cv
500.789 526.641 500.781 526.57 500.785 526.48 cv
500.781 526.402 500.789 526.328 500.805 526.266 cv
500.816 526.207 500.832 526.16 500.855 526.121 cv
500.871 526.086 500.898 526.055 500.93 526.031 cv
500.961 526.012 500.992 526.004 501.031 526 cv
502.883 526 li
502.883 519.254 li
501.168 520.273 li
501.078 520.324 501.008 520.352 500.961 520.359 cv
500.906 520.367 500.863 520.359 500.832 520.328 cv
500.797 520.301 500.777 520.25 500.766 520.18 cv
500.754 520.113 500.746 520.027 500.75 519.918 cv
500.746 519.844 500.75 519.777 500.762 519.719 cv
500.766 519.668 500.777 519.621 500.793 519.582 cv
500.805 519.547 500.824 519.516 500.848 519.488 cv
500.871 519.461 500.902 519.434 500.949 519.406 cv
502.992 518.094 li
503.008 518.082 503.027 518.07 503.059 518.062 cv
503.082 518.055 503.117 518.047 503.164 518.035 cv
503.203 518.027 503.254 518.02 503.309 518.016 cv
503.363 518.016 503.43 518.016 503.516 518.012 cv
503.621 518.016 503.715 518.02 503.789 518.027 cv
503.859 518.035 503.914 518.051 503.961 518.066 cv
504 518.086 504.027 518.105 504.043 518.129 cv
504.051 518.156 504.059 518.18 504.063 518.203 cv
504.063 526 li
505.668 526 li
505.703 526.004 505.738 526.012 505.77 526.031 cv
505.801 526.055 505.824 526.086 505.848 526.121 cv
505.863 526.16 505.879 526.207 505.895 526.266 cv
505.902 526.328 505.91 526.402 505.914 526.48 cv
cp
f
512.977 526.437 mo
512.973 526.523 512.969 526.598 512.957 526.66 cv
512.945 526.727 512.93 526.781 512.91 526.82 cv
512.887 526.867 512.859 526.898 512.828 526.914 cv
512.793 526.937 512.754 526.945 512.715 526.945 cv
507.813 526.945 li
507.75 526.945 507.691 526.937 507.645 526.922 cv
507.594 526.906 507.555 526.883 507.52 526.844 cv
507.484 526.812 507.457 526.758 507.445 526.687 cv
507.426 526.617 507.418 526.531 507.422 526.43 cv
507.418 526.34 507.422 526.262 507.43 526.191 cv
507.434 526.125 507.449 526.066 507.477 526.012 cv
507.5 525.961 507.531 525.906 507.566 525.852 cv
507.602 525.801 507.645 525.746 507.703 525.684 cv
509.477 523.859 li
509.887 523.441 510.215 523.066 510.465 522.73 cv
510.711 522.402 510.902 522.098 511.035 521.82 cv
511.168 521.547 511.254 521.297 511.301 521.07 cv
511.34 520.848 511.363 520.637 511.363 520.441 cv
511.363 520.246 511.328 520.062 511.262 519.883 cv
511.195 519.711 511.102 519.555 510.977 519.418 cv
510.852 519.289 510.695 519.184 510.508 519.102 cv
510.32 519.027 510.102 518.988 509.855 518.984 cv
509.566 518.988 509.309 519.027 509.082 519.102 cv
508.852 519.184 508.652 519.27 508.48 519.355 cv
508.309 519.449 508.164 519.531 508.047 519.609 cv
507.93 519.687 507.844 519.727 507.793 519.727 cv
507.758 519.727 507.727 519.719 507.703 519.699 cv
507.672 519.684 507.652 519.652 507.637 519.609 cv
507.621 519.57 507.605 519.516 507.598 519.445 cv
507.586 519.379 507.582 519.297 507.586 519.199 cv
507.582 519.133 507.586 519.074 507.594 519.023 cv
507.598 518.973 507.605 518.93 507.617 518.891 cv
507.625 518.855 507.641 518.82 507.66 518.789 cv
507.68 518.758 507.715 518.719 507.773 518.668 cv
507.824 518.621 507.918 518.555 508.055 518.473 cv
508.188 518.391 508.359 518.312 508.563 518.23 cv
508.766 518.152 508.988 518.082 509.234 518.027 cv
509.477 517.973 509.734 517.945 510.008 517.945 cv
510.434 517.945 510.809 518.008 511.133 518.129 cv
511.453 518.25 511.719 518.414 511.934 518.625 cv
512.145 518.836 512.305 519.082 512.41 519.355 cv
512.516 519.637 512.57 519.934 512.57 520.246 cv
512.57 520.535 512.543 520.816 512.492 521.094 cv
512.441 521.379 512.336 521.684 512.176 522.008 cv
512.012 522.336 511.777 522.699 511.473 523.098 cv
511.164 523.5 510.758 523.961 510.254 524.477 cv
508.848 525.945 li
512.707 525.945 li
512.738 525.949 512.773 525.961 512.813 525.977 cv
512.844 526 512.875 526.031 512.902 526.07 cv
512.926 526.113 512.945 526.164 512.957 526.223 cv
512.969 526.289 512.973 526.359 512.977 526.437 cv
cp
f
580.777 526.48 mo
580.773 526.57 580.766 526.641 580.754 526.699 cv
580.738 526.762 580.719 526.812 580.699 526.844 cv
580.676 526.883 580.652 526.906 580.621 526.922 cv
580.59 526.937 580.559 526.945 580.531 526.945 cv
575.895 526.945 li
575.859 526.945 575.832 526.937 575.805 526.922 cv
575.777 526.906 575.75 526.883 575.727 526.844 cv
575.699 526.812 575.68 526.762 575.668 526.699 cv
575.652 526.641 575.645 526.57 575.648 526.48 cv
575.645 526.402 575.652 526.328 575.668 526.266 cv
575.68 526.207 575.695 526.16 575.719 526.121 cv
575.734 526.086 575.762 526.055 575.793 526.031 cv
575.824 526.012 575.855 526.004 575.895 526 cv
577.746 526 li
577.746 519.254 li
576.031 520.273 li
575.941 520.324 575.871 520.352 575.824 520.359 cv
575.77 520.367 575.727 520.359 575.695 520.328 cv
575.66 520.301 575.641 520.25 575.629 520.18 cv
575.617 520.113 575.609 520.027 575.613 519.918 cv
575.609 519.844 575.613 519.777 575.625 519.719 cv
575.629 519.668 575.641 519.621 575.656 519.582 cv
575.668 519.547 575.688 519.516 575.711 519.488 cv
575.734 519.461 575.766 519.434 575.813 519.406 cv
577.855 518.094 li
577.871 518.082 577.891 518.07 577.922 518.062 cv
577.945 518.055 577.98 518.047 578.027 518.035 cv
578.066 518.027 578.117 518.02 578.172 518.016 cv
578.227 518.016 578.293 518.016 578.379 518.012 cv
578.484 518.016 578.578 518.02 578.652 518.027 cv
578.723 518.035 578.777 518.051 578.824 518.066 cv
578.863 518.086 578.891 518.105 578.906 518.129 cv
578.914 518.156 578.922 518.18 578.926 518.203 cv
578.926 526 li
580.531 526 li
580.566 526.004 580.602 526.012 580.633 526.031 cv
580.664 526.055 580.688 526.086 580.711 526.121 cv
580.727 526.16 580.742 526.207 580.758 526.266 cv
580.766 526.328 580.773 526.402 580.777 526.48 cv
cp
f
588.211 524.422 mo
588.207 524.574 588.184 524.695 588.141 524.781 cv
588.094 524.871 588.031 524.914 587.949 524.91 cv
586.949 524.91 li
586.949 526.773 li
586.949 526.812 586.938 526.844 586.922 526.867 cv
586.898 526.895 586.867 526.914 586.824 526.934 cv
586.773 526.949 586.711 526.961 586.641 526.973 cv
586.563 526.98 586.469 526.984 586.352 526.988 cv
586.234 526.984 586.137 526.98 586.066 526.973 cv
585.988 526.961 585.93 526.949 585.887 526.934 cv
585.84 526.914 585.809 526.895 585.793 526.867 cv
585.773 526.844 585.766 526.812 585.77 526.773 cv
585.77 524.91 li
582.141 524.91 li
582.082 524.914 582.039 524.906 582.004 524.891 cv
581.969 524.879 581.934 524.852 581.906 524.812 cv
581.875 524.777 581.855 524.727 581.844 524.656 cv
581.832 524.59 581.828 524.5 581.828 524.387 cv
581.828 524.305 581.828 524.227 581.836 524.156 cv
581.836 524.086 581.848 524.023 581.863 523.969 cv
581.875 523.914 581.891 523.859 581.918 523.805 cv
581.938 523.75 581.965 523.695 582 523.633 cv
585.16 518.246 li
585.18 518.211 585.215 518.18 585.262 518.152 cv
585.305 518.125 585.359 518.102 585.434 518.082 cv
585.5 518.066 585.586 518.055 585.691 518.043 cv
585.793 518.039 585.914 518.035 586.055 518.031 cv
586.203 518.035 586.34 518.039 586.457 518.051 cv
586.57 518.062 586.66 518.078 586.734 518.094 cv
586.801 518.113 586.855 518.137 586.895 518.168 cv
586.93 518.199 586.949 518.234 586.949 518.273 cv
586.949 523.937 li
587.949 523.937 li
588.023 523.941 588.086 523.98 588.137 524.059 cv
588.184 524.141 588.207 524.262 588.211 524.422 cv
cp
585.77 519.07 mo
585.758 519.07 li
582.906 523.937 li
585.77 523.937 li
cp
f
655.656 526.48 mo
655.652 526.57 655.645 526.641 655.633 526.699 cv
655.617 526.762 655.598 526.812 655.578 526.844 cv
655.555 526.883 655.531 526.906 655.5 526.922 cv
655.469 526.937 655.438 526.945 655.41 526.945 cv
650.773 526.945 li
650.738 526.945 650.711 526.937 650.684 526.922 cv
650.656 526.906 650.629 526.883 650.605 526.844 cv
650.578 526.812 650.559 526.762 650.547 526.699 cv
650.531 526.641 650.523 526.57 650.527 526.48 cv
650.523 526.402 650.531 526.328 650.547 526.266 cv
650.559 526.207 650.574 526.16 650.598 526.121 cv
650.613 526.086 650.641 526.055 650.672 526.031 cv
650.703 526.012 650.734 526.004 650.773 526 cv
652.625 526 li
652.625 519.254 li
650.91 520.273 li
650.82 520.324 650.75 520.352 650.703 520.359 cv
650.648 520.367 650.605 520.359 650.574 520.328 cv
650.539 520.301 650.52 520.25 650.508 520.18 cv
650.496 520.113 650.488 520.027 650.492 519.918 cv
650.488 519.844 650.492 519.777 650.504 519.719 cv
650.508 519.668 650.52 519.621 650.535 519.582 cv
650.547 519.547 650.566 519.516 650.59 519.488 cv
650.613 519.461 650.645 519.434 650.691 519.406 cv
652.734 518.094 li
652.75 518.082 652.77 518.07 652.801 518.062 cv
652.824 518.055 652.859 518.047 652.906 518.035 cv
652.945 518.027 652.996 518.02 653.051 518.016 cv
653.105 518.016 653.172 518.016 653.258 518.012 cv
653.363 518.016 653.457 518.02 653.531 518.027 cv
653.602 518.035 653.656 518.051 653.703 518.066 cv
653.742 518.086 653.77 518.105 653.785 518.129 cv
653.793 518.156 653.801 518.18 653.805 518.203 cv
653.805 526 li
655.41 526 li
655.445 526.004 655.48 526.012 655.512 526.031 cv
655.543 526.055 655.566 526.086 655.59 526.121 cv
655.605 526.16 655.621 526.207 655.637 526.266 cv
655.645 526.328 655.652 526.402 655.656 526.48 cv
cp
f
662.941 524.074 mo
662.941 524.465 662.879 524.844 662.762 525.203 cv
662.637 525.57 662.453 525.887 662.211 526.16 cv
661.961 526.437 661.648 526.66 661.273 526.824 cv
660.891 526.992 660.445 527.074 659.93 527.074 cv
659.559 527.074 659.23 527.031 658.949 526.937 cv
658.664 526.852 658.418 526.719 658.207 526.547 cv
657.996 526.379 657.82 526.172 657.684 525.926 cv
657.543 525.68 657.43 525.398 657.348 525.082 cv
657.262 524.77 657.203 524.426 657.168 524.047 cv
657.129 523.676 657.109 523.273 657.113 522.84 cv
657.109 522.461 657.129 522.078 657.172 521.687 cv
657.211 521.305 657.285 520.93 657.391 520.562 cv
657.496 520.203 657.641 519.863 657.82 519.547 cv
658 519.23 658.227 518.953 658.5 518.719 cv
658.773 518.484 659.098 518.297 659.477 518.156 cv
659.855 518.02 660.297 517.953 660.801 517.949 cv
660.969 517.953 661.141 517.961 661.313 517.98 cv
661.484 518.004 661.645 518.035 661.793 518.066 cv
661.941 518.105 662.063 518.141 662.164 518.18 cv
662.262 518.219 662.328 518.254 662.363 518.277 cv
662.391 518.305 662.414 518.332 662.434 518.359 cv
662.449 518.391 662.465 518.422 662.473 518.457 cv
662.48 518.492 662.484 518.531 662.492 518.574 cv
662.492 518.617 662.496 518.672 662.5 518.734 cv
662.496 518.82 662.496 518.891 662.496 518.945 cv
662.492 519.008 662.48 519.055 662.469 519.09 cv
662.449 519.129 662.43 519.156 662.406 519.172 cv
662.379 519.191 662.348 519.199 662.309 519.199 cv
662.258 519.199 662.188 519.184 662.102 519.152 cv
662.012 519.121 661.906 519.086 661.785 519.043 cv
661.66 519.008 661.512 518.973 661.336 518.937 cv
661.16 518.91 660.957 518.895 660.727 518.891 cv
660.297 518.895 659.93 518.98 659.625 519.152 cv
659.32 519.324 659.07 519.559 658.875 519.852 cv
658.68 520.145 658.535 520.484 658.445 520.867 cv
658.348 521.258 658.293 521.66 658.285 522.078 cv
658.402 522.012 658.539 521.945 658.688 521.875 cv
658.836 521.809 658.996 521.746 659.172 521.687 cv
659.348 521.637 659.535 521.59 659.73 521.555 cv
659.926 521.523 660.137 521.508 660.363 521.504 cv
660.84 521.508 661.242 521.574 661.574 521.699 cv
661.902 521.832 662.168 522.012 662.375 522.242 cv
662.574 522.473 662.719 522.742 662.809 523.055 cv
662.895 523.367 662.941 523.707 662.941 524.074 cv
cp
661.746 524.184 mo
661.746 523.922 661.719 523.68 661.668 523.461 cv
661.613 523.246 661.523 523.062 661.402 522.906 cv
661.277 522.758 661.113 522.641 660.91 522.559 cv
660.699 522.477 660.445 522.434 660.148 522.434 cv
659.977 522.434 659.809 522.449 659.641 522.48 cv
659.469 522.512 659.305 522.555 659.148 522.602 cv
658.988 522.656 658.84 522.719 658.699 522.789 cv
658.555 522.863 658.422 522.937 658.305 523.016 cv
658.301 523.609 658.34 524.105 658.418 524.5 cv
658.492 524.898 658.602 525.215 658.746 525.453 cv
658.891 525.695 659.07 525.867 659.285 525.969 cv
659.5 526.074 659.75 526.125 660.039 526.121 cv
660.328 526.125 660.582 526.07 660.797 525.957 cv
661.012 525.852 661.188 525.703 661.332 525.516 cv
661.473 525.332 661.578 525.125 661.645 524.895 cv
661.711 524.664 661.746 524.43 661.746 524.184 cv
cp
f
7.723 292.102 mo
7.824 292.105 7.91 292.109 7.98 292.117 cv
8.055 292.129 8.113 292.145 8.156 292.168 cv
8.203 292.191 8.234 292.223 8.254 292.254 cv
8.277 292.293 8.289 292.328 8.285 292.367 cv
8.285 295.203 li
17.027 295.203 li
17.07 295.203 17.105 295.215 17.137 295.234 cv
17.168 295.258 17.195 295.293 17.211 295.344 cv
17.23 295.398 17.242 295.469 17.258 295.551 cv
17.27 295.641 17.277 295.746 17.277 295.871 cv
17.277 295.996 17.27 296.105 17.258 296.191 cv
17.242 296.285 17.23 296.355 17.211 296.402 cv
17.195 296.457 17.168 296.492 17.137 296.512 cv
17.105 296.535 17.07 296.547 17.027 296.543 cv
8.285 296.543 li
8.285 299.379 li
8.289 299.426 8.277 299.461 8.254 299.492 cv
8.234 299.527 8.203 299.555 8.156 299.574 cv
8.113 299.598 8.055 299.617 7.98 299.625 cv
7.91 299.641 7.824 299.645 7.723 299.645 cv
7.625 299.645 7.539 299.641 7.461 299.625 cv
7.391 299.617 7.328 299.598 7.277 299.574 cv
7.234 299.555 7.199 299.527 7.176 299.492 cv
7.156 299.461 7.148 299.426 7.145 299.379 cv
7.145 292.367 li
7.148 292.328 7.156 292.293 7.176 292.254 cv
7.199 292.223 7.234 292.191 7.277 292.168 cv
7.328 292.145 7.391 292.129 7.461 292.117 cv
7.539 292.109 7.625 292.105 7.723 292.102 cv
cp
f
17.035 289.512 mo
17.082 289.516 17.117 289.527 17.141 289.543 cv
17.172 289.566 17.195 289.598 17.215 289.645 cv
17.234 289.691 17.246 289.758 17.262 289.836 cv
17.27 289.922 17.277 290.027 17.277 290.156 cv
17.277 290.285 17.27 290.391 17.262 290.469 cv
17.246 290.555 17.234 290.621 17.215 290.668 cv
17.195 290.723 17.172 290.754 17.141 290.77 cv
17.117 290.789 17.082 290.801 17.035 290.797 cv
10.023 290.797 li
9.988 290.801 9.957 290.789 9.922 290.77 cv
9.895 290.754 9.867 290.723 9.844 290.668 cv
9.824 290.621 9.809 290.555 9.797 290.469 cv
9.789 290.391 9.785 290.285 9.781 290.156 cv
9.785 290.027 9.789 289.922 9.797 289.836 cv
9.809 289.758 9.824 289.691 9.844 289.645 cv
9.867 289.598 9.895 289.566 9.922 289.543 cv
9.957 289.527 9.988 289.516 10.023 289.512 cv
cp
7.652 289.363 mo
7.957 289.363 8.164 289.422 8.27 289.535 cv
8.383 289.648 8.438 289.859 8.434 290.164 cv
8.438 290.469 8.383 290.676 8.273 290.785 cv
8.168 290.902 7.965 290.957 7.668 290.953 cv
7.367 290.957 7.164 290.898 7.055 290.781 cv
6.949 290.668 6.895 290.457 6.891 290.148 cv
6.895 289.848 6.949 289.645 7.051 289.531 cv
7.16 289.422 7.359 289.363 7.652 289.363 cv
cp
f
17.035 276.656 mo
17.082 276.66 17.117 276.668 17.141 276.687 cv
17.172 276.711 17.195 276.746 17.215 276.789 cv
17.234 276.84 17.246 276.906 17.262 276.984 cv
17.27 277.07 17.277 277.172 17.277 277.297 cv
17.277 277.43 17.27 277.539 17.262 277.617 cv
17.246 277.703 17.234 277.77 17.215 277.816 cv
17.195 277.871 17.172 277.906 17.141 277.922 cv
17.117 277.945 17.082 277.953 17.035 277.953 cv
12.773 277.953 li
12.48 277.953 12.211 277.98 11.965 278.031 cv
11.723 278.086 11.512 278.168 11.332 278.281 cv
11.156 278.395 11.02 278.539 10.926 278.715 cv
10.832 278.895 10.785 279.105 10.785 279.34 cv
10.785 279.637 10.902 279.934 11.129 280.23 cv
11.363 280.535 11.695 280.863 12.133 281.219 cv
17.035 281.219 li
17.082 281.223 17.117 281.234 17.141 281.25 cv
17.172 281.273 17.195 281.305 17.215 281.352 cv
17.234 281.402 17.246 281.469 17.262 281.551 cv
17.27 281.637 17.277 281.742 17.277 281.863 cv
17.277 281.984 17.27 282.086 17.262 282.172 cv
17.246 282.258 17.234 282.328 17.215 282.375 cv
17.195 282.43 17.172 282.461 17.141 282.477 cv
17.117 282.496 17.082 282.508 17.035 282.504 cv
12.773 282.504 li
12.48 282.508 12.211 282.535 11.965 282.59 cv
11.723 282.648 11.512 282.734 11.332 282.848 cv
11.156 282.961 11.02 283.105 10.926 283.277 cv
10.832 283.457 10.785 283.664 10.785 283.898 cv
10.785 284.199 10.902 284.496 11.129 284.797 cv
11.363 285.098 11.695 285.426 12.133 285.777 cv
17.035 285.777 li
17.082 285.781 17.117 285.793 17.141 285.809 cv
17.172 285.832 17.195 285.863 17.215 285.91 cv
17.234 285.957 17.246 286.023 17.262 286.102 cv
17.27 286.187 17.277 286.293 17.277 286.422 cv
17.277 286.551 17.27 286.656 17.262 286.734 cv
17.246 286.82 17.234 286.887 17.215 286.934 cv
17.195 286.988 17.172 287.02 17.141 287.035 cv
17.117 287.055 17.082 287.066 17.035 287.062 cv
10.023 287.062 li
9.984 287.066 9.949 287.059 9.918 287.039 cv
9.891 287.027 9.867 286.996 9.84 286.945 cv
9.82 286.902 9.805 286.84 9.793 286.766 cv
9.789 286.695 9.785 286.602 9.781 286.477 cv
9.785 286.367 9.789 286.27 9.793 286.191 cv
9.805 286.117 9.82 286.059 9.84 286.016 cv
9.867 285.977 9.891 285.949 9.918 285.93 cv
9.949 285.914 9.984 285.906 10.023 285.902 cv
10.949 285.902 li
10.508 285.512 10.188 285.129 9.98 284.754 cv
9.777 284.387 9.672 284.008 9.672 283.625 cv
9.672 283.336 9.707 283.078 9.773 282.844 cv
9.844 282.617 9.938 282.41 10.059 282.23 cv
10.18 282.055 10.324 281.906 10.492 281.777 cv
10.664 281.656 10.855 281.551 11.059 281.465 cv
10.809 281.234 10.594 281.012 10.414 280.801 cv
10.242 280.59 10.098 280.387 9.984 280.191 cv
9.879 279.996 9.801 279.809 9.746 279.625 cv
9.699 279.441 9.672 279.254 9.672 279.066 cv
9.672 278.613 9.754 278.234 9.91 277.93 cv
10.074 277.625 10.285 277.379 10.547 277.184 cv
10.813 276.996 11.121 276.859 11.477 276.777 cv
11.832 276.699 12.207 276.66 12.602 276.656 cv
cp
f
13.227 268.324 mo
13.43 268.328 13.57 268.379 13.656 268.477 cv
13.742 268.582 13.785 268.699 13.785 268.824 cv
13.785 273.441 li
14.176 273.445 14.527 273.406 14.84 273.324 cv
15.152 273.25 15.422 273.117 15.641 272.934 cv
15.867 272.754 16.039 272.52 16.156 272.223 cv
16.281 271.934 16.34 271.574 16.336 271.148 cv
16.34 270.816 16.313 270.52 16.254 270.258 cv
16.203 269.996 16.141 269.77 16.07 269.578 cv
16.004 269.391 15.945 269.234 15.887 269.109 cv
15.836 268.988 15.809 268.895 15.805 268.832 cv
15.809 268.797 15.816 268.766 15.832 268.734 cv
15.852 268.707 15.879 268.684 15.914 268.664 cv
15.953 268.652 16.004 268.641 16.066 268.629 cv
16.133 268.625 16.211 268.621 16.305 268.617 cv
16.375 268.621 16.434 268.625 16.48 268.625 cv
16.527 268.633 16.57 268.637 16.609 268.645 cv
16.648 268.652 16.684 268.668 16.715 268.684 cv
16.746 268.707 16.777 268.73 16.805 268.754 cv
16.836 268.785 16.883 268.867 16.945 269.008 cv
17.012 269.148 17.074 269.332 17.137 269.555 cv
17.199 269.781 17.254 270.039 17.305 270.332 cv
17.352 270.625 17.375 270.937 17.379 271.27 cv
17.375 271.848 17.297 272.355 17.137 272.785 cv
16.977 273.223 16.738 273.586 16.422 273.879 cv
16.105 274.18 15.711 274.402 15.23 274.551 cv
14.754 274.699 14.195 274.773 13.559 274.773 cv
12.961 274.773 12.422 274.699 11.938 274.543 cv
11.461 274.391 11.051 274.164 10.715 273.867 cv
10.379 273.574 10.121 273.219 9.941 272.805 cv
9.762 272.391 9.672 271.926 9.672 271.41 cv
9.672 270.859 9.762 270.391 9.938 270.004 cv
10.117 269.617 10.355 269.301 10.652 269.047 cv
10.953 268.801 11.305 268.617 11.703 268.5 cv
12.109 268.387 12.539 268.328 12.992 268.324 cv
cp
12.844 269.617 mo
12.168 269.602 11.637 269.754 11.254 270.07 cv
10.871 270.387 10.68 270.855 10.676 271.473 cv
10.68 271.797 10.738 272.078 10.855 272.316 cv
10.977 272.559 11.137 272.758 11.332 272.918 cv
11.531 273.082 11.762 273.207 12.023 273.293 cv
12.285 273.383 12.559 273.434 12.844 273.441 cv
cp
f
6.492 260.148 mo
7.539 260.645 8.609 261.012 9.707 261.254 cv
10.809 261.496 11.914 261.617 13.023 261.617 cv
14.141 261.617 15.25 261.496 16.344 261.246 cv
17.441 261.004 18.512 260.641 19.566 260.164 cv
19.625 260.141 19.68 260.129 19.727 260.121 cv
19.77 260.121 19.805 260.137 19.836 260.172 cv
19.863 260.211 19.883 260.266 19.898 260.34 cv
19.906 260.418 19.914 260.523 19.918 260.648 cv
19.914 260.746 19.91 260.824 19.91 260.891 cv
19.902 260.961 19.895 261.02 19.879 261.066 cv
19.863 261.117 19.844 261.16 19.824 261.187 cv
19.801 261.223 19.777 261.246 19.754 261.258 cv
19.223 261.539 18.688 261.785 18.145 261.996 cv
17.602 262.215 17.051 262.395 16.492 262.535 cv
15.93 262.684 15.363 262.793 14.789 262.863 cv
14.215 262.941 13.633 262.977 13.047 262.973 cv
12.461 262.977 11.883 262.937 11.309 262.852 cv
10.738 262.773 10.172 262.656 9.605 262.508 cv
9.043 262.359 8.488 262.18 7.941 261.969 cv
7.398 261.758 6.855 261.52 6.32 261.25 cv
6.301 261.246 6.285 261.23 6.266 261.207 cv
6.254 261.184 6.238 261.152 6.219 261.109 cv
6.207 261.07 6.195 261.012 6.184 260.937 cv
6.18 260.867 6.176 260.773 6.172 260.656 cv
6.176 260.539 6.184 260.445 6.195 260.367 cv
6.215 260.297 6.234 260.238 6.258 260.195 cv
6.285 260.156 6.32 260.133 6.359 260.125 cv
6.406 260.121 6.449 260.129 6.492 260.148 cv
cp
f
14.402 252.414 mo
14.875 252.418 15.297 252.504 15.664 252.676 cv
16.039 252.852 16.352 253.094 16.605 253.402 cv
16.863 253.711 17.055 254.074 17.184 254.492 cv
17.313 254.914 17.375 255.363 17.379 255.844 cv
17.375 256.184 17.348 256.5 17.293 256.785 cv
17.234 257.074 17.168 257.328 17.082 257.555 cv
17.004 257.781 16.918 257.973 16.824 258.125 cv
16.738 258.281 16.66 258.387 16.598 258.445 cv
16.535 258.504 16.457 258.547 16.363 258.574 cv
16.27 258.605 16.141 258.621 15.977 258.617 cv
15.863 258.621 15.77 258.617 15.691 258.602 cv
15.617 258.594 15.555 258.578 15.508 258.555 cv
15.461 258.539 15.43 258.512 15.41 258.477 cv
15.395 258.449 15.387 258.414 15.383 258.371 cv
15.387 258.301 15.43 258.199 15.516 258.062 cv
15.605 257.934 15.703 257.762 15.805 257.551 cv
15.914 257.344 16.012 257.094 16.098 256.801 cv
16.191 256.508 16.234 256.168 16.234 255.781 cv
16.234 255.492 16.195 255.227 16.117 254.984 cv
16.039 254.746 15.93 254.539 15.785 254.359 cv
15.645 254.187 15.469 254.051 15.258 253.957 cv
15.051 253.863 14.816 253.816 14.551 253.816 cv
14.27 253.816 14.023 253.883 13.816 254.012 cv
13.617 254.145 13.441 254.316 13.285 254.527 cv
13.137 254.742 12.996 254.984 12.863 255.258 cv
12.738 255.531 12.605 255.812 12.473 256.094 cv
12.34 256.383 12.195 256.66 12.031 256.93 cv
11.875 257.199 11.684 257.441 11.465 257.652 cv
11.246 257.871 10.992 258.043 10.695 258.172 cv
10.406 258.309 10.055 258.375 9.641 258.371 cv
9.223 258.375 8.848 258.297 8.516 258.141 cv
8.188 257.988 7.91 257.777 7.684 257.5 cv
7.465 257.23 7.293 256.906 7.176 256.527 cv
7.059 256.152 7 255.742 7 255.305 cv
7 255.086 7.02 254.863 7.059 254.633 cv
7.098 254.41 7.148 254.199 7.211 253.996 cv
7.277 253.801 7.352 253.621 7.43 253.461 cv
7.512 253.309 7.578 253.207 7.625 253.152 cv
7.68 253.105 7.719 253.07 7.742 253.055 cv
7.773 253.039 7.809 253.027 7.852 253.016 cv
7.898 253.008 7.953 253 8.012 252.992 cv
8.078 252.988 8.156 252.984 8.254 252.984 cv
8.348 252.984 8.434 252.988 8.504 252.996 cv
8.582 253.004 8.641 253.016 8.688 253.031 cv
8.734 253.047 8.77 253.07 8.793 253.098 cv
8.816 253.129 8.828 253.16 8.828 253.195 cv
8.828 253.254 8.793 253.344 8.723 253.465 cv
8.652 253.59 8.57 253.742 8.477 253.914 cv
8.387 254.094 8.305 254.301 8.227 254.539 cv
8.152 254.785 8.113 255.055 8.113 255.352 cv
8.113 255.633 8.152 255.879 8.227 256.086 cv
8.305 256.297 8.406 256.469 8.527 256.602 cv
8.652 256.738 8.797 256.84 8.969 256.906 cv
9.141 256.973 9.324 257.004 9.516 257.004 cv
9.801 257.004 10.043 256.941 10.242 256.812 cv
10.445 256.684 10.625 256.512 10.777 256.293 cv
10.938 256.082 11.078 255.836 11.207 255.559 cv
11.34 255.285 11.473 255.004 11.602 254.715 cv
11.734 254.43 11.879 254.148 12.035 253.875 cv
12.195 253.602 12.383 253.355 12.598 253.137 cv
12.816 252.922 13.07 252.75 13.363 252.613 cv
13.656 252.484 14.004 252.418 14.402 252.414 cv
cp
f
13.227 244.719 mo
13.43 244.723 13.57 244.773 13.656 244.871 cv
13.742 244.977 13.785 245.094 13.785 245.219 cv
13.785 249.836 li
14.176 249.84 14.527 249.801 14.84 249.719 cv
15.152 249.645 15.422 249.512 15.641 249.328 cv
15.867 249.148 16.039 248.914 16.156 248.617 cv
16.281 248.328 16.34 247.969 16.336 247.543 cv
16.34 247.211 16.313 246.914 16.254 246.652 cv
16.203 246.391 16.141 246.164 16.07 245.973 cv
16.004 245.785 15.945 245.629 15.887 245.504 cv
15.836 245.383 15.809 245.289 15.805 245.227 cv
15.809 245.191 15.816 245.16 15.832 245.129 cv
15.852 245.102 15.879 245.078 15.914 245.059 cv
15.953 245.047 16.004 245.035 16.066 245.023 cv
16.133 245.02 16.211 245.016 16.305 245.012 cv
16.375 245.016 16.434 245.02 16.48 245.02 cv
16.527 245.027 16.57 245.031 16.609 245.039 cv
16.648 245.047 16.684 245.062 16.715 245.078 cv
16.746 245.102 16.777 245.125 16.805 245.148 cv
16.836 245.18 16.883 245.262 16.945 245.402 cv
17.012 245.543 17.074 245.727 17.137 245.949 cv
17.199 246.176 17.254 246.434 17.305 246.727 cv
17.352 247.02 17.375 247.332 17.379 247.664 cv
17.375 248.242 17.297 248.75 17.137 249.18 cv
16.977 249.617 16.738 249.98 16.422 250.273 cv
16.105 250.574 15.711 250.797 15.23 250.945 cv
14.754 251.094 14.195 251.168 13.559 251.168 cv
12.961 251.168 12.422 251.094 11.938 250.937 cv
11.461 250.785 11.051 250.559 10.715 250.262 cv
10.379 249.969 10.121 249.613 9.941 249.199 cv
9.762 248.785 9.672 248.32 9.672 247.805 cv
9.672 247.254 9.762 246.785 9.938 246.398 cv
10.117 246.012 10.355 245.695 10.652 245.441 cv
10.953 245.195 11.305 245.012 11.703 244.895 cv
12.109 244.781 12.539 244.723 12.992 244.719 cv
cp
12.844 246.012 mo
12.168 245.996 11.637 246.148 11.254 246.465 cv
10.871 246.781 10.68 247.25 10.676 247.867 cv
10.68 248.191 10.738 248.473 10.855 248.711 cv
10.977 248.953 11.137 249.152 11.332 249.312 cv
11.531 249.477 11.762 249.602 12.023 249.687 cv
12.285 249.777 12.559 249.828 12.844 249.836 cv
cp
f
15.969 237.715 mo
16.063 237.715 16.137 237.719 16.199 237.723 cv
16.266 237.73 16.32 237.738 16.363 237.75 cv
16.41 237.766 16.449 237.781 16.48 237.797 cv
16.512 237.816 16.563 237.859 16.625 237.922 cv
16.695 237.988 16.773 238.098 16.867 238.254 cv
16.965 238.41 17.051 238.586 17.125 238.781 cv
17.199 238.977 17.258 239.187 17.309 239.414 cv
17.352 239.645 17.375 239.883 17.379 240.121 cv
17.375 240.629 17.297 241.074 17.129 241.465 cv
16.965 241.855 16.723 242.184 16.402 242.441 cv
16.086 242.707 15.691 242.906 15.227 243.043 cv
14.762 243.18 14.227 243.246 13.613 243.246 cv
12.926 243.246 12.332 243.164 11.836 242.996 cv
11.34 242.828 10.934 242.598 10.617 242.301 cv
10.301 242.012 10.066 241.664 9.91 241.266 cv
9.762 240.867 9.684 240.437 9.68 239.977 cv
9.684 239.754 9.703 239.539 9.742 239.324 cv
9.785 239.117 9.84 238.922 9.906 238.746 cv
9.977 238.57 10.055 238.414 10.141 238.273 cv
10.227 238.137 10.301 238.035 10.363 237.973 cv
10.426 237.91 10.477 237.867 10.512 237.844 cv
10.551 237.82 10.594 237.801 10.641 237.785 cv
10.691 237.77 10.746 237.762 10.809 237.754 cv
10.871 237.754 10.949 237.75 11.043 237.746 cv
11.246 237.75 11.391 237.773 11.469 237.816 cv
11.555 237.867 11.594 237.926 11.59 237.988 cv
11.594 238.07 11.551 238.16 11.461 238.258 cv
11.379 238.363 11.285 238.492 11.176 238.645 cv
11.074 238.801 10.977 238.988 10.891 239.207 cv
10.805 239.434 10.762 239.695 10.762 239.992 cv
10.762 240.613 11 241.086 11.477 241.414 cv
11.953 241.746 12.645 241.91 13.543 241.906 cv
14 241.91 14.395 241.867 14.734 241.777 cv
15.074 241.695 15.359 241.57 15.586 241.402 cv
15.816 241.238 15.988 241.035 16.098 240.789 cv
16.215 240.551 16.27 240.273 16.266 239.961 cv
16.27 239.668 16.223 239.406 16.125 239.18 cv
16.035 238.957 15.934 238.766 15.816 238.602 cv
15.707 238.441 15.605 238.305 15.512 238.187 cv
15.426 238.078 15.379 237.988 15.375 237.926 cv
15.379 237.891 15.391 237.859 15.406 237.832 cv
15.43 237.809 15.465 237.789 15.512 237.766 cv
15.566 237.75 15.629 237.734 15.699 237.727 cv
15.777 237.719 15.867 237.715 15.969 237.715 cv
cp
f
13.449 229.656 mo
14.027 229.66 14.555 229.734 15.031 229.883 cv
15.516 230.035 15.93 230.262 16.273 230.559 cv
16.625 230.859 16.895 231.234 17.086 231.68 cv
17.281 232.133 17.375 232.652 17.379 233.242 cv
17.375 233.82 17.293 234.324 17.121 234.75 cv
16.953 235.18 16.703 235.535 16.375 235.82 cv
16.047 236.109 15.652 236.324 15.184 236.461 cv
14.719 236.602 14.188 236.668 13.59 236.668 cv
13.023 236.668 12.496 236.598 12.016 236.449 cv
11.535 236.305 11.121 236.078 10.77 235.777 cv
10.422 235.48 10.152 235.109 9.961 234.66 cv
9.77 234.215 9.672 233.691 9.672 233.094 cv
9.672 232.516 9.758 232.016 9.93 231.586 cv
10.102 231.16 10.352 230.801 10.68 230.516 cv
11.008 230.23 11.406 230.016 11.871 229.871 cv
12.34 229.73 12.867 229.66 13.449 229.656 cv
cp
13.535 230.988 mo
13.16 230.992 12.801 231.027 12.461 231.094 cv
12.125 231.168 11.832 231.285 11.574 231.445 cv
11.324 231.609 11.121 231.828 10.969 232.105 cv
10.824 232.387 10.75 232.734 10.746 233.145 cv
10.75 233.531 10.816 233.859 10.949 234.133 cv
11.086 234.41 11.277 234.637 11.523 234.812 cv
11.77 234.992 12.063 235.125 12.398 235.207 cv
12.738 235.297 13.105 235.34 13.504 235.336 cv
13.891 235.34 14.254 235.305 14.59 235.23 cv
14.93 235.164 15.223 235.047 15.473 234.879 cv
15.727 234.715 15.93 234.492 16.074 234.215 cv
16.227 233.937 16.301 233.59 16.297 233.176 cv
16.301 232.801 16.23 232.473 16.094 232.191 cv
15.961 231.914 15.773 231.687 15.523 231.508 cv
15.281 231.332 14.988 231.203 14.652 231.117 cv
14.316 231.035 13.945 230.992 13.535 230.988 cv
cp
f
17.035 221.73 mo
17.082 221.73 17.117 221.742 17.141 221.762 cv
17.172 221.785 17.195 221.82 17.215 221.863 cv
17.234 221.914 17.246 221.977 17.262 222.059 cv
17.27 222.141 17.277 222.246 17.277 222.367 cv
17.277 222.5 17.27 222.605 17.262 222.687 cv
17.246 222.773 17.234 222.84 17.215 222.883 cv
17.195 222.934 17.172 222.965 17.141 222.984 cv
17.117 223.008 17.082 223.02 17.035 223.016 cv
12.93 223.016 li
12.531 223.02 12.211 223.051 11.965 223.109 cv
11.723 223.176 11.512 223.266 11.332 223.383 cv
11.156 223.5 11.02 223.656 10.926 223.844 cv
10.832 224.039 10.785 224.258 10.785 224.504 cv
10.785 224.828 10.902 225.152 11.129 225.473 cv
11.363 225.797 11.695 226.133 12.133 226.484 cv
17.035 226.484 li
17.082 226.488 17.117 226.5 17.141 226.516 cv
17.172 226.539 17.195 226.57 17.215 226.617 cv
17.234 226.664 17.246 226.73 17.262 226.809 cv
17.27 226.895 17.277 227 17.277 227.129 cv
17.277 227.258 17.27 227.363 17.262 227.441 cv
17.246 227.527 17.234 227.594 17.215 227.641 cv
17.195 227.695 17.172 227.727 17.141 227.742 cv
17.117 227.762 17.082 227.773 17.035 227.77 cv
10.023 227.77 li
9.984 227.773 9.949 227.766 9.918 227.746 cv
9.891 227.734 9.867 227.703 9.84 227.652 cv
9.82 227.609 9.805 227.547 9.793 227.473 cv
9.789 227.402 9.785 227.309 9.781 227.184 cv
9.785 227.074 9.789 226.977 9.793 226.898 cv
9.805 226.824 9.82 226.766 9.84 226.723 cv
9.867 226.684 9.891 226.656 9.918 226.637 cv
9.949 226.621 9.984 226.613 10.023 226.609 cv
10.949 226.609 li
10.508 226.219 10.188 225.824 9.98 225.43 cv
9.777 225.039 9.672 224.641 9.672 224.238 cv
9.672 223.77 9.754 223.379 9.91 223.059 cv
10.074 222.742 10.285 222.48 10.547 222.281 cv
10.813 222.086 11.121 221.945 11.477 221.859 cv
11.832 221.773 12.262 221.73 12.758 221.73 cv
cp
f
17.035 213.383 mo
17.082 213.387 17.117 213.395 17.145 213.41 cv
17.18 213.43 17.203 213.461 17.219 213.504 cv
17.234 213.547 17.246 213.605 17.262 213.676 cv
17.27 213.75 17.277 213.84 17.277 213.941 cv
17.277 214.055 17.27 214.145 17.262 214.215 cv
17.246 214.289 17.234 214.348 17.219 214.395 cv
17.203 214.441 17.18 214.477 17.145 214.496 cv
17.117 214.52 17.082 214.531 17.035 214.527 cv
16.109 214.527 li
16.512 214.902 16.82 215.285 17.043 215.68 cv
17.266 216.078 17.375 216.512 17.379 216.98 cv
17.375 217.5 17.277 217.941 17.078 218.301 cv
16.879 218.668 16.609 218.961 16.27 219.184 cv
15.93 219.414 15.531 219.578 15.07 219.68 cv
14.613 219.781 14.129 219.832 13.613 219.832 cv
13.016 219.832 12.473 219.77 11.984 219.641 cv
11.5 219.512 11.082 219.32 10.738 219.062 cv
10.395 218.812 10.133 218.496 9.949 218.117 cv
9.766 217.742 9.672 217.305 9.672 216.809 cv
9.672 216.402 9.762 216.027 9.941 215.684 cv
10.121 215.344 10.387 215.008 10.73 214.676 cv
6.656 214.676 li
6.621 214.676 6.586 214.668 6.551 214.648 cv
6.52 214.633 6.492 214.598 6.473 214.543 cv
6.457 214.492 6.441 214.426 6.426 214.344 cv
6.414 214.266 6.41 214.164 6.406 214.035 cv
6.41 213.91 6.414 213.801 6.426 213.715 cv
6.441 213.633 6.457 213.57 6.473 213.523 cv
6.492 213.48 6.52 213.445 6.551 213.418 cv
6.586 213.398 6.621 213.387 6.656 213.383 cv
cp
12.102 214.676 mo
11.676 215.023 11.348 215.359 11.117 215.684 cv
10.895 216.012 10.781 216.352 10.777 216.699 cv
10.781 217.031 10.859 217.309 11.012 217.535 cv
11.172 217.766 11.375 217.953 11.629 218.094 cv
11.883 218.238 12.172 218.34 12.492 218.402 cv
12.816 218.469 13.145 218.504 13.473 218.5 cv
13.832 218.504 14.176 218.477 14.512 218.418 cv
14.848 218.367 15.148 218.273 15.41 218.137 cv
15.676 218.004 15.887 217.824 16.043 217.598 cv
16.203 217.379 16.281 217.098 16.281 216.754 cv
16.281 216.59 16.258 216.426 16.211 216.262 cv
16.164 216.105 16.086 215.941 15.977 215.773 cv
15.867 215.609 15.727 215.437 15.551 215.254 cv
15.379 215.074 15.164 214.879 14.906 214.676 cv
cp
f
15.125 206.609 mo
15.488 206.613 15.809 206.68 16.086 206.809 cv
16.367 206.941 16.602 207.129 16.793 207.371 cv
16.988 207.617 17.133 207.91 17.23 208.246 cv
17.328 208.586 17.375 208.957 17.379 209.359 cv
17.375 209.613 17.355 209.852 17.32 210.074 cv
17.277 210.301 17.23 210.5 17.172 210.68 cv
17.113 210.859 17.051 211.012 16.984 211.137 cv
16.922 211.262 16.863 211.355 16.809 211.41 cv
16.758 211.469 16.688 211.508 16.59 211.531 cv
16.5 211.559 16.371 211.57 16.211 211.57 cv
16.113 211.57 16.031 211.566 15.961 211.555 cv
15.895 211.547 15.84 211.535 15.797 211.516 cv
15.758 211.504 15.727 211.48 15.707 211.453 cv
15.691 211.426 15.684 211.395 15.68 211.355 cv
15.684 211.301 15.719 211.215 15.785 211.102 cv
15.859 210.992 15.938 210.855 16.016 210.687 cv
16.102 210.527 16.176 210.336 16.246 210.109 cv
16.316 209.891 16.352 209.633 16.352 209.336 cv
16.352 209.121 16.328 208.922 16.281 208.742 cv
16.234 208.566 16.168 208.414 16.074 208.285 cv
15.988 208.156 15.871 208.055 15.727 207.984 cv
15.59 207.914 15.422 207.879 15.227 207.879 cv
15.031 207.879 14.867 207.93 14.73 208.031 cv
14.598 208.133 14.477 208.27 14.371 208.434 cv
14.27 208.602 14.18 208.785 14.094 208.992 cv
14.016 209.203 13.93 209.418 13.84 209.637 cv
13.754 209.855 13.652 210.07 13.539 210.281 cv
13.43 210.492 13.297 210.684 13.133 210.848 cv
12.977 211.02 12.781 211.152 12.555 211.25 cv
12.332 211.355 12.066 211.406 11.754 211.402 cv
11.48 211.406 11.215 211.352 10.961 211.242 cv
10.711 211.137 10.492 210.977 10.301 210.762 cv
10.113 210.551 9.961 210.285 9.844 209.965 cv
9.73 209.645 9.672 209.273 9.672 208.844 cv
9.672 208.66 9.688 208.473 9.719 208.285 cv
9.75 208.102 9.789 207.934 9.836 207.777 cv
9.883 207.629 9.934 207.5 9.988 207.391 cv
10.043 207.289 10.094 207.207 10.133 207.148 cv
10.18 207.098 10.215 207.062 10.242 207.039 cv
10.273 207.023 10.309 207.008 10.344 207 cv
10.387 206.992 10.434 206.984 10.488 206.977 cv
10.547 206.969 10.617 206.965 10.699 206.965 cv
10.789 206.965 10.867 206.969 10.93 206.977 cv
11 206.984 11.051 207 11.09 207.016 cv
11.133 207.039 11.164 207.059 11.18 207.082 cv
11.199 207.109 11.207 207.141 11.207 207.168 cv
11.207 207.219 11.18 207.285 11.121 207.371 cv
11.066 207.461 11.004 207.574 10.938 207.715 cv
10.875 207.855 10.816 208.023 10.754 208.211 cv
10.699 208.402 10.668 208.617 10.668 208.859 cv
10.668 209.082 10.695 209.273 10.742 209.437 cv
10.797 209.605 10.867 209.742 10.953 209.848 cv
11.047 209.953 11.152 210.035 11.277 210.086 cv
11.402 210.145 11.539 210.172 11.684 210.168 cv
11.887 210.172 12.055 210.121 12.191 210.016 cv
12.332 209.914 12.453 209.777 12.555 209.609 cv
12.66 209.445 12.754 209.254 12.836 209.039 cv
12.922 208.828 13.008 208.613 13.094 208.391 cv
13.184 208.172 13.285 207.953 13.391 207.734 cv
13.5 207.52 13.629 207.328 13.785 207.16 cv
13.941 206.996 14.129 206.863 14.348 206.762 cv
14.566 206.664 14.828 206.613 15.125 206.609 cv
cp
f
13.047 202.168 mo
13.633 202.168 14.215 202.207 14.789 202.277 cv
15.363 202.355 15.93 202.465 16.492 202.605 cv
17.051 202.754 17.602 202.93 18.145 203.141 cv
18.688 203.352 19.223 203.598 19.754 203.875 cv
19.777 203.895 19.801 203.918 19.824 203.945 cv
19.844 203.98 19.863 204.02 19.879 204.066 cv
19.895 204.117 19.902 204.176 19.91 204.242 cv
19.91 204.312 19.914 204.395 19.918 204.484 cv
19.914 204.621 19.906 204.727 19.898 204.801 cv
19.883 204.879 19.863 204.934 19.836 204.965 cv
19.805 205 19.77 205.016 19.727 205.012 cv
19.68 205.012 19.625 204.996 19.566 204.969 cv
18.516 204.492 17.445 204.133 16.348 203.887 cv
15.25 203.645 14.141 203.523 13.023 203.52 cv
11.914 203.523 10.809 203.645 9.707 203.887 cv
8.609 204.133 7.539 204.5 6.492 204.984 cv
6.449 205.008 6.406 205.016 6.359 205.008 cv
6.32 205.008 6.285 204.984 6.258 204.937 cv
6.234 204.898 6.215 204.84 6.195 204.766 cv
6.184 204.695 6.176 204.598 6.172 204.477 cv
6.176 204.367 6.18 204.277 6.184 204.203 cv
6.195 204.133 6.207 204.074 6.219 204.027 cv
6.238 203.984 6.254 203.953 6.266 203.93 cv
6.285 203.914 6.301 203.898 6.32 203.883 cv
7.387 203.352 8.484 202.93 9.605 202.625 cv
10.734 202.32 11.879 202.168 13.047 202.168 cv
cp
f
292.949 546.094 mo
292.945 546.199 292.93 546.289 292.895 546.359 cv
292.859 546.437 292.813 546.496 292.758 546.539 cv
292.699 546.59 292.637 546.625 292.57 546.641 cv
292.496 546.664 292.426 546.672 292.363 546.672 cv
291.918 546.672 li
291.777 546.672 291.656 546.66 291.551 546.629 cv
291.445 546.605 291.348 546.551 291.254 546.473 cv
291.16 546.398 291.066 546.297 290.973 546.164 cv
290.879 546.035 290.777 545.871 290.672 545.668 cv
287.598 539.93 li
287.434 539.637 287.27 539.328 287.109 539 cv
286.941 538.68 286.789 538.363 286.652 538.055 cv
286.637 538.055 li
286.645 538.43 286.652 538.812 286.66 539.199 cv
286.664 539.59 286.664 539.977 286.668 540.359 cv
286.668 546.445 li
286.664 546.484 286.652 546.52 286.633 546.551 cv
286.609 546.586 286.574 546.613 286.523 546.629 cv
286.469 546.648 286.398 546.66 286.316 546.676 cv
286.23 546.687 286.125 546.695 285.996 546.695 cv
285.859 546.695 285.75 546.687 285.668 546.676 cv
285.582 546.66 285.516 546.648 285.469 546.629 cv
285.418 546.613 285.383 546.586 285.359 546.551 cv
285.336 546.52 285.324 546.484 285.328 546.445 cv
285.328 537.141 li
285.324 536.934 285.383 536.785 285.504 536.695 cv
285.621 536.609 285.75 536.566 285.891 536.562 cv
286.551 536.562 li
286.703 536.566 286.836 536.578 286.941 536.602 cv
287.043 536.629 287.137 536.672 287.223 536.73 cv
287.305 536.793 287.383 536.875 287.465 536.98 cv
287.539 537.09 287.621 537.227 287.707 537.383 cv
290.074 541.809 li
290.219 542.082 290.359 542.348 290.496 542.602 cv
290.629 542.859 290.758 543.113 290.887 543.359 cv
291.008 543.613 291.133 543.859 291.258 544.098 cv
291.379 544.34 291.5 544.582 291.625 544.824 cv
291.633 544.824 li
291.621 544.418 291.613 543.988 291.613 543.543 cv
291.605 543.098 291.605 542.672 291.609 542.262 cv
291.609 536.789 li
291.605 536.754 291.617 536.719 291.641 536.687 cv
291.664 536.656 291.699 536.629 291.754 536.605 cv
291.801 536.582 291.871 536.566 291.957 536.555 cv
292.043 536.547 292.152 536.543 292.293 536.539 cv
292.41 536.543 292.516 536.547 292.605 536.555 cv
292.691 536.566 292.758 536.582 292.809 536.605 cv
292.855 536.629 292.891 536.656 292.914 536.687 cv
292.934 536.719 292.945 536.754 292.949 536.789 cv
cp
f
301.5 546.453 mo
301.496 546.5 301.488 546.535 301.473 546.559 cv
301.453 546.59 301.418 546.613 301.375 546.633 cv
301.328 546.652 301.27 546.664 301.195 546.68 cv
301.117 546.687 301.023 546.695 300.918 546.695 cv
300.793 546.695 300.695 546.687 300.625 546.68 cv
300.547 546.664 300.488 546.652 300.445 546.633 cv
300.398 546.613 300.367 546.59 300.355 546.559 cv
300.336 546.535 300.328 546.5 300.332 546.453 cv
300.332 545.527 li
299.93 545.973 299.535 546.293 299.148 546.492 cv
298.754 546.695 298.359 546.793 297.965 546.797 cv
297.492 546.793 297.098 546.719 296.781 546.562 cv
296.461 546.41 296.203 546.199 296.008 545.93 cv
295.805 545.664 295.664 545.352 295.582 544.992 cv
295.492 544.637 295.449 544.203 295.453 543.695 cv
295.453 539.441 li
295.449 539.402 295.457 539.367 295.48 539.336 cv
295.496 539.309 295.531 539.285 295.586 539.258 cv
295.633 539.238 295.703 539.223 295.789 539.211 cv
295.871 539.207 295.973 539.203 296.102 539.199 cv
296.223 539.203 296.328 539.207 296.414 539.211 cv
296.496 539.223 296.563 539.238 296.609 539.258 cv
296.656 539.285 296.691 539.309 296.715 539.336 cv
296.734 539.367 296.742 539.402 296.746 539.441 cv
296.746 543.523 li
296.742 543.937 296.773 544.266 296.836 544.512 cv
296.895 544.758 296.984 544.969 297.109 545.141 cv
297.227 545.32 297.383 545.453 297.574 545.547 cv
297.758 545.645 297.977 545.695 298.227 545.691 cv
298.547 545.695 298.867 545.578 299.191 545.348 cv
299.508 545.121 299.848 544.785 300.207 544.34 cv
300.207 539.441 li
300.207 539.402 300.215 539.367 300.234 539.336 cv
300.25 539.309 300.285 539.285 300.34 539.258 cv
300.391 539.238 300.457 539.223 300.539 539.211 cv
300.617 539.207 300.723 539.203 300.855 539.199 cv
300.977 539.203 301.082 539.207 301.168 539.211 cv
301.25 539.223 301.313 539.238 301.359 539.258 cv
301.402 539.285 301.438 539.309 301.465 539.336 cv
301.484 539.367 301.496 539.402 301.5 539.441 cv
cp
f
314.277 546.453 mo
314.273 546.5 314.266 546.535 314.246 546.559 cv
314.223 546.59 314.188 546.613 314.145 546.633 cv
314.094 546.652 314.027 546.664 313.949 546.68 cv
313.863 546.687 313.762 546.695 313.637 546.695 cv
313.504 546.695 313.395 546.687 313.316 546.68 cv
313.23 546.664 313.164 546.652 313.117 546.633 cv
313.063 546.613 313.027 546.59 313.012 546.559 cv
312.988 546.535 312.98 546.5 312.98 546.453 cv
312.98 542.191 li
312.98 541.898 312.953 541.629 312.902 541.383 cv
312.848 541.141 312.766 540.93 312.652 540.75 cv
312.539 540.574 312.395 540.437 312.219 540.344 cv
312.039 540.25 311.828 540.203 311.594 540.203 cv
311.297 540.203 311 540.32 310.703 540.547 cv
310.398 540.781 310.07 541.113 309.715 541.551 cv
309.715 546.453 li
309.711 546.5 309.699 546.535 309.684 546.559 cv
309.66 546.59 309.629 546.613 309.582 546.633 cv
309.531 546.652 309.465 546.664 309.383 546.68 cv
309.297 546.687 309.191 546.695 309.07 546.695 cv
308.949 546.695 308.848 546.687 308.762 546.68 cv
308.676 546.664 308.605 546.652 308.559 546.633 cv
308.504 546.613 308.473 546.59 308.457 546.559 cv
308.438 546.535 308.426 546.5 308.43 546.453 cv
308.43 542.191 li
308.426 541.898 308.398 541.629 308.344 541.383 cv
308.285 541.141 308.199 540.93 308.086 540.75 cv
307.973 540.574 307.828 540.437 307.656 540.344 cv
307.477 540.25 307.27 540.203 307.035 540.203 cv
306.734 540.203 306.438 540.32 306.137 540.547 cv
305.836 540.781 305.508 541.113 305.156 541.551 cv
305.156 546.453 li
305.152 546.5 305.141 546.535 305.125 546.559 cv
305.102 546.59 305.07 546.613 305.023 546.633 cv
304.977 546.652 304.91 546.664 304.832 546.68 cv
304.746 546.687 304.641 546.695 304.512 546.695 cv
304.383 546.695 304.277 546.687 304.199 546.68 cv
304.113 546.664 304.047 546.652 304 546.633 cv
303.945 546.613 303.914 546.59 303.898 546.559 cv
303.879 546.535 303.867 546.5 303.871 546.453 cv
303.871 539.441 li
303.867 539.402 303.875 539.367 303.895 539.336 cv
303.906 539.309 303.938 539.285 303.988 539.258 cv
304.031 539.238 304.094 539.223 304.168 539.211 cv
304.238 539.207 304.332 539.203 304.457 539.199 cv
304.566 539.203 304.664 539.207 304.742 539.211 cv
304.816 539.223 304.875 539.238 304.918 539.258 cv
304.957 539.285 304.984 539.309 305.004 539.336 cv
305.02 539.367 305.027 539.402 305.031 539.441 cv
305.031 540.367 li
305.422 539.926 305.805 539.605 306.18 539.398 cv
306.547 539.195 306.926 539.09 307.309 539.09 cv
307.598 539.09 307.855 539.125 308.09 539.191 cv
308.316 539.262 308.523 539.355 308.703 539.477 cv
308.879 539.598 309.027 539.742 309.156 539.91 cv
309.277 540.082 309.383 540.273 309.469 540.477 cv
309.699 540.227 309.922 540.012 310.133 539.832 cv
310.344 539.66 310.547 539.516 310.742 539.402 cv
310.938 539.297 311.125 539.219 311.309 539.164 cv
311.492 539.117 311.68 539.09 311.867 539.09 cv
312.32 539.09 312.699 539.172 313.004 539.328 cv
313.309 539.492 313.555 539.703 313.75 539.965 cv
313.938 540.23 314.074 540.539 314.156 540.895 cv
314.234 541.25 314.273 541.625 314.277 542.02 cv
cp
f
323.074 542.852 mo
323.07 543.461 323.004 544.012 322.875 544.496 cv
322.738 544.984 322.543 545.398 322.289 545.738 cv
322.031 546.082 321.715 546.344 321.344 546.523 cv
320.969 546.707 320.543 546.793 320.059 546.797 cv
319.832 546.793 319.625 546.773 319.438 546.73 cv
319.25 546.684 319.063 546.613 318.883 546.516 cv
318.695 546.418 318.516 546.293 318.336 546.141 cv
318.152 545.992 317.961 545.812 317.762 545.598 cv
317.762 546.453 li
317.762 546.5 317.75 546.535 317.73 546.562 cv
317.707 546.598 317.672 546.621 317.629 546.637 cv
317.578 546.652 317.52 546.664 317.453 546.68 cv
317.379 546.687 317.289 546.695 317.184 546.695 cv
317.074 546.695 316.988 546.687 316.918 546.68 cv
316.844 546.664 316.781 546.652 316.738 546.637 cv
316.688 546.621 316.656 546.598 316.645 546.562 cv
316.625 546.535 316.617 546.5 316.621 546.453 cv
316.621 536.043 li
316.617 536.004 316.629 535.969 316.648 535.934 cv
316.664 535.906 316.695 535.879 316.75 535.855 cv
316.797 535.836 316.863 535.82 316.949 535.809 cv
317.027 535.801 317.133 535.797 317.262 535.793 cv
317.391 535.797 317.496 535.801 317.582 535.809 cv
317.66 535.82 317.727 535.836 317.773 535.855 cv
317.82 535.879 317.852 535.906 317.875 535.934 cv
317.891 535.969 317.902 536.004 317.906 536.043 cv
317.906 540.242 li
318.113 540.031 318.316 539.852 318.512 539.707 cv
318.707 539.562 318.895 539.445 319.082 539.352 cv
319.266 539.266 319.453 539.199 319.645 539.152 cv
319.828 539.113 320.027 539.09 320.238 539.09 cv
320.742 539.09 321.176 539.191 321.543 539.395 cv
321.902 539.598 322.195 539.871 322.422 540.207 cv
322.645 540.551 322.813 540.949 322.918 541.406 cv
323.02 541.863 323.07 542.344 323.074 542.852 cv
cp
321.742 543 mo
321.738 542.645 321.711 542.297 321.66 541.957 cv
321.602 541.621 321.508 541.324 321.371 541.062 cv
321.234 540.805 321.055 540.594 320.832 540.434 cv
320.605 540.277 320.324 540.199 319.992 540.195 cv
319.824 540.199 319.66 540.223 319.5 540.266 cv
319.336 540.316 319.172 540.395 319.004 540.5 cv
318.836 540.613 318.66 540.754 318.484 540.922 cv
318.301 541.098 318.109 541.312 317.906 541.566 cv
317.906 544.363 li
318.262 544.797 318.602 545.129 318.926 545.352 cv
319.25 545.582 319.586 545.695 319.938 545.691 cv
320.258 545.695 320.535 545.617 320.77 545.457 cv
320.996 545.305 321.184 545.098 321.328 544.836 cv
321.473 544.582 321.578 544.293 321.645 543.973 cv
321.707 543.656 321.738 543.332 321.742 543 cv
cp
f
330.984 542.645 mo
330.98 542.848 330.93 542.988 330.832 543.074 cv
330.727 543.16 330.609 543.203 330.484 543.203 cv
325.867 543.203 li
325.863 543.594 325.902 543.945 325.984 544.258 cv
326.059 544.57 326.191 544.84 326.375 545.059 cv
326.555 545.285 326.789 545.457 327.086 545.574 cv
327.375 545.699 327.734 545.758 328.16 545.754 cv
328.492 545.758 328.789 545.73 329.051 545.672 cv
329.313 545.621 329.539 545.559 329.73 545.488 cv
329.918 545.422 330.074 545.363 330.199 545.305 cv
330.32 545.254 330.414 545.227 330.477 545.223 cv
330.512 545.227 330.543 545.234 330.574 545.25 cv
330.602 545.27 330.625 545.297 330.645 545.332 cv
330.656 545.371 330.668 545.422 330.68 545.484 cv
330.684 545.551 330.688 545.629 330.691 545.723 cv
330.688 545.793 330.684 545.852 330.684 545.898 cv
330.676 545.945 330.672 545.988 330.664 546.027 cv
330.656 546.066 330.641 546.102 330.625 546.133 cv
330.602 546.164 330.578 546.195 330.555 546.223 cv
330.523 546.254 330.441 546.301 330.301 546.363 cv
330.16 546.43 329.977 546.492 329.754 546.555 cv
329.527 546.617 329.27 546.672 328.977 546.723 cv
328.684 546.77 328.371 546.793 328.039 546.797 cv
327.461 546.793 326.953 546.715 326.523 546.555 cv
326.086 546.395 325.723 546.156 325.43 545.84 cv
325.129 545.523 324.906 545.129 324.758 544.648 cv
324.609 544.172 324.535 543.613 324.535 542.977 cv
324.535 542.379 324.609 541.84 324.766 541.355 cv
324.918 540.879 325.145 540.469 325.441 540.133 cv
325.734 539.797 326.09 539.539 326.504 539.359 cv
326.918 539.18 327.383 539.09 327.898 539.09 cv
328.449 539.09 328.918 539.18 329.305 539.355 cv
329.691 539.535 330.008 539.773 330.262 540.07 cv
330.508 540.371 330.691 540.723 330.809 541.121 cv
330.922 541.527 330.98 541.957 330.984 542.41 cv
cp
329.691 542.262 mo
329.707 541.586 329.555 541.055 329.238 540.672 cv
328.922 540.289 328.453 540.098 327.836 540.094 cv
327.512 540.098 327.23 540.156 326.992 540.273 cv
326.75 540.395 326.551 540.555 326.391 540.75 cv
326.227 540.949 326.102 541.18 326.016 541.441 cv
325.926 541.703 325.875 541.977 325.867 542.262 cv
cp
f
337.051 539.898 mo
337.047 540.016 337.047 540.113 337.043 540.187 cv
337.035 540.27 337.023 540.332 337.012 540.371 cv
336.992 540.418 336.973 540.449 336.953 540.473 cv
336.926 540.496 336.895 540.508 336.855 540.508 cv
336.813 540.508 336.762 540.496 336.703 540.473 cv
336.641 540.449 336.57 540.426 336.5 540.402 cv
336.422 540.379 336.34 540.359 336.246 540.336 cv
336.152 540.32 336.051 540.309 335.941 540.305 cv
335.809 540.309 335.68 540.336 335.559 540.383 cv
335.434 540.437 335.305 540.523 335.168 540.641 cv
335.027 540.766 334.883 540.922 334.734 541.117 cv
334.582 541.312 334.414 541.555 334.234 541.84 cv
334.234 546.453 li
334.23 546.5 334.219 546.535 334.203 546.559 cv
334.18 546.59 334.148 546.613 334.102 546.633 cv
334.055 546.652 333.988 546.664 333.91 546.68 cv
333.824 546.687 333.719 546.695 333.59 546.695 cv
333.461 546.695 333.355 546.687 333.277 546.68 cv
333.191 546.664 333.125 546.652 333.078 546.633 cv
333.023 546.613 332.992 546.59 332.977 546.559 cv
332.957 546.535 332.945 546.5 332.949 546.453 cv
332.949 539.441 li
332.945 539.402 332.953 539.367 332.973 539.336 cv
332.984 539.309 333.016 539.285 333.066 539.258 cv
333.109 539.238 333.172 539.223 333.246 539.211 cv
333.316 539.207 333.41 539.203 333.535 539.199 cv
333.645 539.203 333.742 539.207 333.82 539.211 cv
333.895 539.223 333.953 539.238 333.996 539.258 cv
334.035 539.285 334.063 539.309 334.082 539.336 cv
334.098 539.367 334.105 539.402 334.109 539.441 cv
334.109 540.461 li
334.297 540.18 334.48 539.953 334.652 539.777 cv
334.82 539.602 334.98 539.461 335.133 539.359 cv
335.281 539.258 335.43 539.187 335.578 539.148 cv
335.727 539.109 335.875 539.09 336.027 539.09 cv
336.094 539.09 336.172 539.094 336.258 539.102 cv
336.344 539.109 336.434 539.125 336.527 539.145 cv
336.621 539.168 336.703 539.191 336.781 539.215 cv
336.852 539.242 336.906 539.27 336.941 539.293 cv
336.969 539.324 336.988 539.348 337.004 539.367 cv
337.012 539.395 337.023 539.426 337.031 539.457 cv
337.039 539.496 337.043 539.547 337.047 539.617 cv
337.047 539.687 337.047 539.781 337.051 539.898 cv
cp
f
348.809 542.867 mo
348.805 543.445 348.73 543.973 348.582 544.449 cv
348.43 544.934 348.203 545.348 347.906 545.691 cv
347.605 546.043 347.23 546.312 346.785 546.504 cv
346.332 546.699 345.813 546.793 345.223 546.797 cv
344.645 546.793 344.141 546.711 343.715 546.539 cv
343.285 546.371 342.93 546.121 342.645 545.793 cv
342.355 545.465 342.141 545.07 342.004 544.602 cv
341.863 544.137 341.797 543.605 341.797 543.008 cv
341.797 542.441 341.867 541.914 342.016 541.434 cv
342.16 540.953 342.387 540.539 342.688 540.187 cv
342.984 539.84 343.355 539.57 343.805 539.379 cv
344.25 539.187 344.773 539.09 345.371 539.09 cv
345.949 539.09 346.449 539.176 346.879 539.348 cv
347.305 539.52 347.664 539.77 347.949 540.098 cv
348.234 540.426 348.449 540.824 348.594 541.289 cv
348.734 541.758 348.805 542.285 348.809 542.867 cv
cp
347.477 542.953 mo
347.473 542.578 347.438 542.219 347.371 541.879 cv
347.297 541.543 347.18 541.25 347.02 540.992 cv
346.855 540.742 346.637 540.539 346.359 540.387 cv
346.078 540.242 345.73 540.168 345.32 540.164 cv
344.934 540.168 344.605 540.234 344.332 540.367 cv
344.055 540.504 343.828 540.695 343.652 540.941 cv
343.473 541.187 343.34 541.48 343.258 541.816 cv
343.168 542.156 343.125 542.523 343.129 542.922 cv
343.125 543.309 343.16 543.672 343.234 544.008 cv
343.301 544.348 343.418 544.641 343.586 544.891 cv
343.75 545.145 343.973 545.348 344.25 545.492 cv
344.527 545.645 344.875 545.719 345.289 545.715 cv
345.664 545.719 345.992 545.648 346.273 545.512 cv
346.551 545.379 346.777 545.191 346.957 544.941 cv
347.133 544.699 347.262 544.406 347.348 544.07 cv
347.43 543.734 347.473 543.363 347.477 542.953 cv
cp
f
354.539 536.555 mo
354.535 536.656 354.531 536.734 354.523 536.793 cv
354.512 536.855 354.5 536.906 354.488 536.937 cv
354.473 536.977 354.457 537 354.438 537.012 cv
354.414 537.027 354.387 537.035 354.359 537.031 cv
354.32 537.035 354.273 537.023 354.223 536.996 cv
354.164 536.977 354.098 536.949 354.023 536.918 cv
353.941 536.891 353.852 536.863 353.746 536.84 cv
353.637 536.816 353.512 536.805 353.379 536.805 cv
353.184 536.805 353.02 536.836 352.887 536.898 cv
352.746 536.961 352.637 537.059 352.559 537.191 cv
352.473 537.324 352.414 537.496 352.379 537.707 cv
352.34 537.918 352.32 538.176 352.324 538.473 cv
352.324 539.238 li
353.891 539.238 li
353.93 539.242 353.965 539.25 353.996 539.266 cv
354.023 539.285 354.051 539.316 354.074 539.359 cv
354.098 539.406 354.113 539.465 354.129 539.527 cv
354.137 539.598 354.145 539.68 354.148 539.773 cv
354.145 539.965 354.121 540.098 354.078 540.18 cv
354.027 540.266 353.965 540.309 353.891 540.305 cv
352.324 540.305 li
352.324 546.453 li
352.32 546.5 352.313 546.535 352.293 546.559 cv
352.27 546.59 352.234 546.613 352.188 546.633 cv
352.137 546.652 352.07 546.664 351.988 546.68 cv
351.902 546.687 351.797 546.695 351.68 546.695 cv
351.551 546.695 351.449 546.687 351.367 546.68 cv
351.281 546.664 351.215 546.652 351.168 546.633 cv
351.117 546.613 351.082 546.59 351.063 546.559 cv
351.039 546.535 351.027 546.5 351.031 546.453 cv
351.031 540.305 li
350.043 540.305 li
349.957 540.309 349.895 540.266 349.855 540.18 cv
349.813 540.098 349.789 539.965 349.793 539.773 cv
349.789 539.68 349.797 539.598 349.809 539.527 cv
349.816 539.465 349.832 539.406 349.855 539.359 cv
349.875 539.316 349.898 539.285 349.934 539.266 cv
349.961 539.25 350 539.242 350.043 539.238 cv
351.031 539.238 li
351.031 538.512 li
351.027 538.027 351.074 537.609 351.168 537.254 cv
351.258 536.906 351.395 536.617 351.582 536.395 cv
351.766 536.172 352 536.008 352.289 535.898 cv
352.57 535.793 352.906 535.738 353.293 535.738 cv
353.469 535.738 353.645 535.758 353.82 535.789 cv
353.988 535.828 354.121 535.863 354.219 535.898 cv
354.309 535.941 354.371 535.977 354.406 536.004 cv
354.434 536.039 354.461 536.078 354.484 536.125 cv
354.504 536.176 354.516 536.238 354.527 536.305 cv
354.531 536.379 354.535 536.461 354.539 536.555 cv
cp
f
364.738 543.82 mo
364.734 544.293 364.648 544.715 364.477 545.082 cv
364.301 545.457 364.059 545.77 363.75 546.023 cv
363.441 546.281 363.078 546.473 362.66 546.602 cv
362.238 546.73 361.789 546.793 361.309 546.797 cv
360.969 546.793 360.652 546.766 360.367 546.711 cv
360.078 546.652 359.824 546.586 359.598 546.5 cv
359.371 546.422 359.18 546.336 359.027 546.242 cv
358.871 546.156 358.766 546.078 358.707 546.016 cv
358.648 545.953 358.605 545.875 358.578 545.781 cv
358.547 545.687 358.531 545.559 358.535 545.395 cv
358.531 545.281 358.535 545.187 358.551 545.109 cv
358.559 545.035 358.574 544.973 358.598 544.926 cv
358.613 544.879 358.641 544.848 358.676 544.828 cv
358.703 544.812 358.738 544.805 358.781 544.801 cv
358.852 544.805 358.953 544.848 359.09 544.934 cv
359.219 545.023 359.391 545.121 359.602 545.223 cv
359.809 545.332 360.059 545.43 360.352 545.516 cv
360.645 545.609 360.984 545.652 361.371 545.652 cv
361.66 545.652 361.926 545.613 362.168 545.535 cv
362.406 545.457 362.613 545.348 362.793 545.203 cv
362.965 545.062 363.102 544.887 363.195 544.676 cv
363.289 544.469 363.336 544.234 363.336 543.969 cv
363.336 543.687 363.27 543.441 363.141 543.234 cv
363.008 543.035 362.836 542.859 362.625 542.703 cv
362.41 542.555 362.168 542.414 361.895 542.281 cv
361.621 542.156 361.34 542.023 361.059 541.891 cv
360.77 541.758 360.492 541.613 360.223 541.449 cv
359.953 541.293 359.711 541.102 359.5 540.883 cv
359.281 540.664 359.109 540.41 358.98 540.113 cv
358.844 539.824 358.777 539.473 358.781 539.059 cv
358.777 538.641 358.855 538.266 359.012 537.934 cv
359.164 537.605 359.375 537.328 359.652 537.102 cv
359.922 536.883 360.246 536.711 360.625 536.594 cv
361 536.477 361.41 536.418 361.848 536.418 cv
362.066 536.418 362.289 536.437 362.52 536.477 cv
362.742 536.516 362.953 536.566 363.156 536.629 cv
363.352 536.695 363.531 536.77 363.691 536.848 cv
363.844 536.93 363.945 536.996 364 537.043 cv
364.047 537.098 364.082 537.137 364.098 537.16 cv
364.113 537.191 364.125 537.227 364.137 537.27 cv
364.145 537.316 364.152 537.371 364.16 537.43 cv
364.164 537.496 364.168 537.574 364.168 537.672 cv
364.168 537.766 364.164 537.852 364.156 537.922 cv
364.148 538 364.137 538.059 364.121 538.105 cv
364.105 538.152 364.082 538.187 364.055 538.211 cv
364.023 538.234 363.992 538.246 363.957 538.246 cv
363.898 538.246 363.809 538.211 363.688 538.141 cv
363.563 538.07 363.41 537.988 363.238 537.895 cv
363.059 537.805 362.852 537.723 362.613 537.645 cv
362.367 537.57 362.098 537.531 361.801 537.531 cv
361.52 537.531 361.273 537.57 361.066 537.645 cv
360.855 537.723 360.684 537.824 360.551 537.945 cv
360.414 538.07 360.313 538.215 360.246 538.387 cv
360.18 538.559 360.148 538.742 360.148 538.934 cv
360.148 539.219 360.211 539.461 360.34 539.66 cv
360.469 539.863 360.641 540.043 360.859 540.195 cv
361.07 540.355 361.316 540.496 361.594 540.625 cv
361.867 540.758 362.148 540.891 362.438 541.02 cv
362.723 541.152 363.004 541.297 363.277 541.453 cv
363.551 541.613 363.797 541.801 364.016 542.016 cv
364.23 542.234 364.402 542.488 364.539 542.781 cv
364.668 543.074 364.734 543.422 364.738 543.82 cv
cp
f
372.504 546.453 mo
372.5 546.5 372.492 546.535 372.477 546.559 cv
372.457 546.59 372.422 546.613 372.379 546.633 cv
372.332 546.652 372.273 546.664 372.199 546.68 cv
372.121 546.687 372.027 546.695 371.922 546.695 cv
371.797 546.695 371.699 546.687 371.629 546.68 cv
371.551 546.664 371.492 546.652 371.449 546.633 cv
371.402 546.613 371.371 546.59 371.359 546.559 cv
371.34 546.535 371.332 546.5 371.336 546.453 cv
371.336 545.527 li
370.934 545.973 370.539 546.293 370.152 546.492 cv
369.758 546.695 369.363 546.793 368.969 546.797 cv
368.496 546.793 368.102 546.719 367.785 546.562 cv
367.465 546.41 367.207 546.199 367.012 545.93 cv
366.809 545.664 366.668 545.352 366.586 544.992 cv
366.496 544.637 366.453 544.203 366.457 543.695 cv
366.457 539.441 li
366.453 539.402 366.461 539.367 366.484 539.336 cv
366.5 539.309 366.535 539.285 366.59 539.258 cv
366.637 539.238 366.707 539.223 366.793 539.211 cv
366.875 539.207 366.977 539.203 367.105 539.199 cv
367.227 539.203 367.332 539.207 367.418 539.211 cv
367.5 539.223 367.566 539.238 367.613 539.258 cv
367.66 539.285 367.695 539.309 367.719 539.336 cv
367.738 539.367 367.746 539.402 367.75 539.441 cv
367.75 543.523 li
367.746 543.937 367.777 544.266 367.84 544.512 cv
367.898 544.758 367.988 544.969 368.113 545.141 cv
368.23 545.32 368.387 545.453 368.578 545.547 cv
368.762 545.645 368.98 545.695 369.23 545.691 cv
369.551 545.695 369.871 545.578 370.195 545.348 cv
370.512 545.121 370.852 544.785 371.211 544.34 cv
371.211 539.441 li
371.211 539.402 371.219 539.367 371.238 539.336 cv
371.254 539.309 371.289 539.285 371.344 539.258 cv
371.395 539.238 371.461 539.223 371.543 539.211 cv
371.621 539.207 371.727 539.203 371.859 539.199 cv
371.98 539.203 372.086 539.207 372.172 539.211 cv
372.254 539.223 372.316 539.238 372.363 539.258 cv
372.406 539.285 372.441 539.309 372.469 539.336 cv
372.488 539.367 372.5 539.402 372.504 539.441 cv
cp
f
381.363 542.852 mo
381.359 543.461 381.293 544.012 381.164 544.496 cv
381.027 544.984 380.832 545.398 380.578 545.738 cv
380.32 546.082 380.004 546.344 379.633 546.523 cv
379.258 546.707 378.832 546.793 378.348 546.797 cv
378.121 546.793 377.914 546.773 377.727 546.73 cv
377.539 546.684 377.352 546.613 377.172 546.516 cv
376.984 546.418 376.805 546.293 376.625 546.141 cv
376.441 545.992 376.25 545.812 376.051 545.598 cv
376.051 546.453 li
376.051 546.5 376.039 546.535 376.02 546.562 cv
375.996 546.598 375.961 546.621 375.918 546.637 cv
375.867 546.652 375.809 546.664 375.742 546.68 cv
375.668 546.687 375.578 546.695 375.473 546.695 cv
375.363 546.695 375.277 546.687 375.207 546.68 cv
375.133 546.664 375.07 546.652 375.027 546.637 cv
374.977 546.621 374.945 546.598 374.934 546.562 cv
374.914 546.535 374.906 546.5 374.91 546.453 cv
374.91 536.043 li
374.906 536.004 374.918 535.969 374.938 535.934 cv
374.953 535.906 374.984 535.879 375.039 535.855 cv
375.086 535.836 375.152 535.82 375.238 535.809 cv
375.316 535.801 375.422 535.797 375.551 535.793 cv
375.68 535.797 375.785 535.801 375.871 535.809 cv
375.949 535.82 376.016 535.836 376.063 535.855 cv
376.109 535.879 376.141 535.906 376.164 535.934 cv
376.18 535.969 376.191 536.004 376.195 536.043 cv
376.195 540.242 li
376.402 540.031 376.605 539.852 376.801 539.707 cv
376.996 539.562 377.184 539.445 377.371 539.352 cv
377.555 539.266 377.742 539.199 377.934 539.152 cv
378.117 539.113 378.316 539.09 378.527 539.09 cv
379.031 539.09 379.465 539.191 379.832 539.395 cv
380.191 539.598 380.484 539.871 380.711 540.207 cv
380.934 540.551 381.102 540.949 381.207 541.406 cv
381.309 541.863 381.359 542.344 381.363 542.852 cv
cp
380.031 543 mo
380.027 542.645 380 542.297 379.949 541.957 cv
379.891 541.621 379.797 541.324 379.66 541.062 cv
379.523 540.805 379.344 540.594 379.121 540.434 cv
378.895 540.277 378.613 540.199 378.281 540.195 cv
378.113 540.199 377.949 540.223 377.789 540.266 cv
377.625 540.316 377.461 540.395 377.293 540.5 cv
377.125 540.613 376.949 540.754 376.773 540.922 cv
376.59 541.098 376.398 541.312 376.195 541.566 cv
376.195 544.363 li
376.551 544.797 376.891 545.129 377.215 545.352 cv
377.539 545.582 377.875 545.695 378.227 545.691 cv
378.547 545.695 378.824 545.617 379.059 545.457 cv
379.285 545.305 379.473 545.098 379.617 544.836 cv
379.762 544.582 379.867 544.293 379.934 543.973 cv
379.996 543.656 380.027 543.332 380.031 543 cv
cp
f
386.527 542.715 mo
386.527 542.918 386.504 543.055 386.457 543.133 cv
386.41 543.211 386.34 543.25 386.254 543.25 cv
382.996 543.25 li
382.902 543.25 382.836 543.211 382.789 543.129 cv
382.742 543.051 382.719 542.914 382.719 542.715 cv
382.719 542.52 382.742 542.379 382.789 542.301 cv
382.836 542.223 382.902 542.184 382.996 542.184 cv
386.254 542.184 li
386.293 542.184 386.332 542.191 386.367 542.207 cv
386.398 542.223 386.426 542.254 386.453 542.297 cv
386.473 542.344 386.492 542.398 386.508 542.465 cv
386.52 542.535 386.527 542.621 386.527 542.715 cv
cp
f
389.781 546.445 mo
389.777 546.488 389.77 546.523 389.75 546.555 cv
389.727 546.586 389.688 546.613 389.641 546.629 cv
389.586 546.648 389.52 546.66 389.434 546.676 cv
389.348 546.687 389.238 546.695 389.113 546.695 cv
388.984 546.695 388.879 546.687 388.793 546.676 cv
388.703 546.66 388.633 546.648 388.582 546.629 cv
388.527 546.613 388.492 546.586 388.473 546.555 cv
388.449 546.523 388.438 546.488 388.441 546.445 cv
388.441 536.766 li
388.438 536.727 388.449 536.691 388.477 536.656 cv
388.496 536.629 388.535 536.602 388.594 536.582 cv
388.645 536.566 388.715 536.551 388.805 536.535 cv
388.887 536.523 388.988 536.52 389.113 536.516 cv
389.238 536.52 389.348 536.523 389.434 536.535 cv
389.52 536.551 389.586 536.566 389.641 536.582 cv
389.688 536.602 389.727 536.629 389.75 536.656 cv
389.77 536.691 389.777 536.727 389.781 536.766 cv
cp
f
402.766 546.453 mo
402.762 546.5 402.754 546.535 402.734 546.559 cv
402.711 546.59 402.676 546.613 402.633 546.633 cv
402.582 546.652 402.516 546.664 402.438 546.68 cv
402.352 546.687 402.25 546.695 402.125 546.695 cv
401.992 546.695 401.883 546.687 401.805 546.68 cv
401.719 546.664 401.652 546.652 401.605 546.633 cv
401.551 546.613 401.516 546.59 401.5 546.559 cv
401.477 546.535 401.469 546.5 401.469 546.453 cv
401.469 542.191 li
401.469 541.898 401.441 541.629 401.391 541.383 cv
401.336 541.141 401.254 540.93 401.141 540.75 cv
401.027 540.574 400.883 540.437 400.707 540.344 cv
400.527 540.25 400.316 540.203 400.082 540.203 cv
399.785 540.203 399.488 540.32 399.191 540.547 cv
398.887 540.781 398.559 541.113 398.203 541.551 cv
398.203 546.453 li
398.199 546.5 398.188 546.535 398.172 546.559 cv
398.148 546.59 398.117 546.613 398.07 546.633 cv
398.02 546.652 397.953 546.664 397.871 546.68 cv
397.785 546.687 397.68 546.695 397.559 546.695 cv
397.438 546.695 397.336 546.687 397.25 546.68 cv
397.164 546.664 397.094 546.652 397.047 546.633 cv
396.992 546.613 396.961 546.59 396.945 546.559 cv
396.926 546.535 396.914 546.5 396.918 546.453 cv
396.918 542.191 li
396.914 541.898 396.887 541.629 396.832 541.383 cv
396.773 541.141 396.688 540.93 396.574 540.75 cv
396.461 540.574 396.316 540.437 396.145 540.344 cv
395.965 540.25 395.758 540.203 395.523 540.203 cv
395.223 540.203 394.926 540.32 394.625 540.547 cv
394.324 540.781 393.996 541.113 393.645 541.551 cv
393.645 546.453 li
393.641 546.5 393.629 546.535 393.613 546.559 cv
393.59 546.59 393.559 546.613 393.512 546.633 cv
393.465 546.652 393.398 546.664 393.32 546.68 cv
393.234 546.687 393.129 546.695 393 546.695 cv
392.871 546.695 392.766 546.687 392.688 546.68 cv
392.602 546.664 392.535 546.652 392.488 546.633 cv
392.434 546.613 392.402 546.59 392.387 546.559 cv
392.367 546.535 392.355 546.5 392.359 546.453 cv
392.359 539.441 li
392.355 539.402 392.363 539.367 392.383 539.336 cv
392.395 539.309 392.426 539.285 392.477 539.258 cv
392.52 539.238 392.582 539.223 392.656 539.211 cv
392.727 539.207 392.82 539.203 392.945 539.199 cv
393.055 539.203 393.152 539.207 393.23 539.211 cv
393.305 539.223 393.363 539.238 393.406 539.258 cv
393.445 539.285 393.473 539.309 393.492 539.336 cv
393.508 539.367 393.516 539.402 393.52 539.441 cv
393.52 540.367 li
393.91 539.926 394.293 539.605 394.668 539.398 cv
395.035 539.195 395.414 539.09 395.797 539.09 cv
396.086 539.09 396.344 539.125 396.578 539.191 cv
396.805 539.262 397.012 539.355 397.191 539.477 cv
397.367 539.598 397.516 539.742 397.645 539.91 cv
397.766 540.082 397.871 540.273 397.957 540.477 cv
398.188 540.227 398.41 540.012 398.621 539.832 cv
398.832 539.66 399.035 539.516 399.23 539.402 cv
399.426 539.297 399.613 539.219 399.797 539.164 cv
399.98 539.117 400.168 539.09 400.355 539.09 cv
400.809 539.09 401.188 539.172 401.492 539.328 cv
401.797 539.492 402.043 539.703 402.238 539.965 cv
402.426 540.23 402.563 540.539 402.645 540.895 cv
402.723 541.25 402.762 541.625 402.766 542.02 cv
cp
f
410.398 546.461 mo
410.395 546.523 410.375 546.57 410.336 546.602 cv
410.293 546.633 410.234 546.656 410.164 546.672 cv
410.086 546.687 409.98 546.695 409.844 546.695 cv
409.707 546.695 409.598 546.687 409.52 546.672 cv
409.434 546.656 409.375 546.633 409.344 546.602 cv
409.305 546.57 409.289 546.523 409.293 546.461 cv
409.293 545.762 li
408.984 546.09 408.641 546.344 408.266 546.523 cv
407.887 546.707 407.488 546.793 407.07 546.797 cv
406.695 546.793 406.363 546.746 406.066 546.652 cv
405.77 546.555 405.516 546.418 405.305 546.234 cv
405.094 546.055 404.93 545.832 404.813 545.566 cv
404.695 545.305 404.637 545.004 404.641 544.66 cv
404.637 544.27 404.715 543.926 404.879 543.633 cv
405.035 543.344 405.27 543.102 405.574 542.91 cv
405.875 542.719 406.242 542.574 406.68 542.477 cv
407.113 542.383 407.605 542.336 408.152 542.332 cv
409.121 542.332 li
409.121 541.785 li
409.117 541.516 409.09 541.277 409.035 541.07 cv
408.977 540.863 408.883 540.691 408.758 540.551 cv
408.625 540.414 408.461 540.309 408.262 540.238 cv
408.055 540.168 407.805 540.133 407.516 540.133 cv
407.195 540.133 406.91 540.172 406.66 540.246 cv
406.402 540.324 406.184 540.406 405.996 540.496 cv
405.809 540.59 405.648 540.676 405.523 540.746 cv
405.391 540.824 405.297 540.859 405.238 540.859 cv
405.195 540.859 405.16 540.852 405.129 540.828 cv
405.098 540.812 405.07 540.781 405.047 540.734 cv
405.023 540.695 405.004 540.641 404.996 540.574 cv
404.98 540.512 404.977 540.441 404.98 540.359 cv
404.977 540.234 404.984 540.129 405.008 540.051 cv
405.023 539.977 405.07 539.906 405.141 539.836 cv
405.211 539.77 405.332 539.691 405.504 539.602 cv
405.676 539.512 405.871 539.43 406.094 539.352 cv
406.316 539.281 406.563 539.219 406.828 539.164 cv
407.094 539.117 407.359 539.09 407.633 539.09 cv
408.133 539.09 408.563 539.148 408.914 539.262 cv
409.266 539.379 409.551 539.547 409.773 539.766 cv
409.988 539.988 410.148 540.262 410.25 540.586 cv
410.348 540.918 410.395 541.301 410.398 541.73 cv
cp
409.121 543.258 mo
408.02 543.258 li
407.664 543.262 407.359 543.293 407.102 543.348 cv
406.84 543.41 406.625 543.496 406.453 543.613 cv
406.281 543.73 406.156 543.871 406.078 544.035 cv
405.996 544.199 405.953 544.387 405.957 544.598 cv
405.953 544.965 406.07 545.258 406.301 545.469 cv
406.531 545.687 406.855 545.793 407.273 545.793 cv
407.609 545.793 407.922 545.707 408.211 545.535 cv
408.5 545.363 408.801 545.102 409.121 544.746 cv
cp
f
418.617 539.758 mo
418.613 539.941 418.59 540.074 418.543 540.152 cv
418.492 540.234 418.43 540.273 418.355 540.273 cv
417.348 540.273 li
417.527 540.461 417.656 540.668 417.73 540.895 cv
417.801 541.121 417.836 541.355 417.84 541.598 cv
417.836 542.004 417.77 542.363 417.645 542.676 cv
417.512 542.988 417.328 543.254 417.086 543.465 cv
416.844 543.684 416.555 543.848 416.227 543.961 cv
415.891 544.078 415.523 544.137 415.121 544.133 cv
414.832 544.137 414.559 544.098 414.305 544.02 cv
414.043 543.945 413.848 543.852 413.711 543.734 cv
413.617 543.832 413.539 543.937 413.48 544.055 cv
413.418 544.176 413.387 544.312 413.391 544.465 cv
413.387 544.648 413.473 544.801 413.645 544.918 cv
413.813 545.043 414.035 545.105 414.316 545.113 cv
416.148 545.191 li
416.496 545.203 416.813 545.25 417.105 545.336 cv
417.395 545.422 417.648 545.547 417.863 545.703 cv
418.074 545.863 418.242 546.055 418.363 546.285 cv
418.48 546.52 418.539 546.789 418.543 547.094 cv
418.539 547.414 418.473 547.719 418.34 548.012 cv
418.203 548.301 417.996 548.555 417.719 548.777 cv
417.438 548.996 417.082 549.172 416.652 549.301 cv
416.223 549.426 415.715 549.488 415.129 549.492 cv
414.559 549.488 414.074 549.441 413.68 549.348 cv
413.281 549.25 412.957 549.117 412.703 548.953 cv
412.449 548.785 412.266 548.59 412.152 548.359 cv
412.035 548.125 411.977 547.871 411.98 547.605 cv
411.977 547.434 411.996 547.27 412.043 547.109 cv
412.082 546.945 412.145 546.793 412.23 546.648 cv
412.313 546.504 412.422 546.367 412.551 546.23 cv
412.676 546.102 412.82 545.969 412.992 545.84 cv
412.734 545.711 412.547 545.547 412.426 545.348 cv
412.305 545.152 412.246 544.941 412.246 544.707 cv
412.246 544.395 412.309 544.109 412.438 543.859 cv
412.566 543.609 412.727 543.387 412.922 543.187 cv
412.758 542.996 412.633 542.781 412.539 542.539 cv
412.445 542.301 412.398 542.008 412.398 541.66 cv
412.398 541.266 412.465 540.906 412.602 540.586 cv
412.734 540.27 412.922 540.004 413.164 539.785 cv
413.402 539.57 413.688 539.402 414.023 539.281 cv
414.355 539.168 414.723 539.109 415.121 539.105 cv
415.332 539.109 415.531 539.121 415.715 539.141 cv
415.898 539.168 416.07 539.199 416.234 539.238 cv
418.355 539.238 li
418.441 539.242 418.508 539.285 418.551 539.367 cv
418.594 539.457 418.613 539.586 418.617 539.758 cv
cp
416.609 541.605 mo
416.605 541.133 416.473 540.762 416.215 540.488 cv
415.949 540.223 415.578 540.086 415.098 540.086 cv
414.844 540.086 414.625 540.129 414.445 540.211 cv
414.258 540.297 414.105 540.41 413.984 540.555 cv
413.863 540.703 413.773 540.871 413.715 541.059 cv
413.652 541.246 413.621 541.445 413.625 541.652 cv
413.621 542.117 413.754 542.48 414.016 542.746 cv
414.277 543.012 414.645 543.145 415.121 543.141 cv
415.371 543.145 415.59 543.105 415.781 543.02 cv
415.965 542.941 416.121 542.828 416.246 542.687 cv
416.367 542.547 416.457 542.383 416.52 542.191 cv
416.574 542.008 416.605 541.812 416.609 541.605 cv
cp
417.254 547.164 mo
417.25 546.859 417.125 546.629 416.883 546.465 cv
416.633 546.305 416.301 546.215 415.883 546.203 cv
414.066 546.141 li
413.898 546.273 413.762 546.398 413.66 546.512 cv
413.551 546.629 413.469 546.738 413.406 546.848 cv
413.344 546.953 413.301 547.059 413.277 547.164 cv
413.254 547.266 413.242 547.371 413.242 547.48 cv
413.242 547.816 413.41 548.07 413.754 548.25 cv
414.094 548.422 414.574 548.512 415.191 548.512 cv
415.578 548.512 415.902 548.473 416.168 548.398 cv
416.426 548.32 416.637 548.219 416.801 548.098 cv
416.957 547.969 417.074 547.828 417.148 547.668 cv
417.215 547.508 417.25 547.34 417.254 547.164 cv
cp
f
426.18 542.645 mo
426.176 542.848 426.125 542.988 426.027 543.074 cv
425.922 543.16 425.805 543.203 425.68 543.203 cv
421.063 543.203 li
421.059 543.594 421.098 543.945 421.18 544.258 cv
421.254 544.57 421.387 544.84 421.57 545.059 cv
421.75 545.285 421.984 545.457 422.281 545.574 cv
422.57 545.699 422.93 545.758 423.355 545.754 cv
423.688 545.758 423.984 545.73 424.246 545.672 cv
424.508 545.621 424.734 545.559 424.926 545.488 cv
425.113 545.422 425.27 545.363 425.395 545.305 cv
425.516 545.254 425.609 545.227 425.672 545.223 cv
425.707 545.227 425.738 545.234 425.77 545.25 cv
425.797 545.27 425.82 545.297 425.84 545.332 cv
425.852 545.371 425.863 545.422 425.875 545.484 cv
425.879 545.551 425.883 545.629 425.887 545.723 cv
425.883 545.793 425.879 545.852 425.879 545.898 cv
425.871 545.945 425.867 545.988 425.859 546.027 cv
425.852 546.066 425.836 546.102 425.82 546.133 cv
425.797 546.164 425.773 546.195 425.75 546.223 cv
425.719 546.254 425.637 546.301 425.496 546.363 cv
425.355 546.43 425.172 546.492 424.949 546.555 cv
424.723 546.617 424.465 546.672 424.172 546.723 cv
423.879 546.77 423.566 546.793 423.234 546.797 cv
422.656 546.793 422.148 546.715 421.719 546.555 cv
421.281 546.395 420.918 546.156 420.625 545.84 cv
420.324 545.523 420.102 545.129 419.953 544.648 cv
419.805 544.172 419.73 543.613 419.73 542.977 cv
419.73 542.379 419.805 541.84 419.961 541.355 cv
420.113 540.879 420.34 540.469 420.637 540.133 cv
420.93 539.797 421.285 539.539 421.699 539.359 cv
422.113 539.18 422.578 539.09 423.094 539.09 cv
423.645 539.09 424.113 539.18 424.5 539.355 cv
424.887 539.535 425.203 539.773 425.457 540.07 cv
425.703 540.371 425.887 540.723 426.004 541.121 cv
426.117 541.527 426.176 541.957 426.18 542.41 cv
cp
424.887 542.262 mo
424.902 541.586 424.75 541.055 424.434 540.672 cv
424.117 540.289 423.648 540.098 423.031 540.094 cv
422.707 540.098 422.426 540.156 422.188 540.273 cv
421.945 540.395 421.746 540.555 421.586 540.75 cv
421.422 540.949 421.297 541.18 421.211 541.441 cv
421.121 541.703 421.07 541.977 421.063 542.262 cv
cp
f
432.547 544.543 mo
432.543 544.906 432.477 545.227 432.348 545.504 cv
432.215 545.785 432.027 546.02 431.785 546.211 cv
431.539 546.406 431.246 546.551 430.91 546.648 cv
430.57 546.746 430.199 546.793 429.797 546.797 cv
429.543 546.793 429.305 546.773 429.082 546.738 cv
428.855 546.695 428.656 546.648 428.477 546.59 cv
428.297 546.531 428.145 546.469 428.02 546.402 cv
427.895 546.34 427.801 546.281 427.746 546.227 cv
427.688 546.176 427.648 546.105 427.625 546.008 cv
427.598 545.918 427.586 545.789 427.586 545.629 cv
427.586 545.531 427.59 545.449 427.602 545.379 cv
427.609 545.312 427.621 545.258 427.641 545.215 cv
427.652 545.176 427.676 545.145 427.703 545.125 cv
427.73 545.109 427.762 545.102 427.801 545.098 cv
427.855 545.102 427.941 545.137 428.055 545.203 cv
428.164 545.277 428.301 545.355 428.469 545.434 cv
428.629 545.52 428.82 545.594 429.047 545.664 cv
429.266 545.734 429.523 545.77 429.82 545.77 cv
430.035 545.77 430.234 545.746 430.414 545.699 cv
430.59 545.652 430.742 545.586 430.871 545.492 cv
431 545.406 431.102 545.289 431.172 545.145 cv
431.242 545.008 431.277 544.84 431.277 544.645 cv
431.277 544.449 431.227 544.285 431.125 544.148 cv
431.023 544.016 430.887 543.895 430.723 543.789 cv
430.555 543.687 430.371 543.598 430.164 543.512 cv
429.953 543.434 429.738 543.348 429.52 543.258 cv
429.301 543.172 429.086 543.07 428.875 542.957 cv
428.664 542.848 428.473 542.715 428.309 542.551 cv
428.137 542.395 428.004 542.199 427.906 541.973 cv
427.801 541.75 427.75 541.484 427.754 541.172 cv
427.75 540.898 427.805 540.633 427.914 540.379 cv
428.02 540.129 428.18 539.91 428.395 539.719 cv
428.605 539.531 428.871 539.379 429.191 539.262 cv
429.512 539.148 429.883 539.09 430.313 539.09 cv
430.496 539.09 430.684 539.105 430.871 539.137 cv
431.055 539.168 431.223 539.207 431.379 539.254 cv
431.527 539.301 431.656 539.352 431.766 539.406 cv
431.867 539.461 431.949 539.512 432.008 539.551 cv
432.059 539.598 432.094 539.633 432.117 539.66 cv
432.133 539.691 432.148 539.727 432.156 539.762 cv
432.164 539.805 432.172 539.852 432.18 539.906 cv
432.188 539.965 432.191 540.035 432.191 540.117 cv
432.191 540.207 432.188 540.285 432.18 540.348 cv
432.172 540.418 432.156 540.469 432.141 540.508 cv
432.117 540.551 432.098 540.582 432.074 540.598 cv
432.047 540.617 432.016 540.625 431.988 540.625 cv
431.938 540.625 431.871 540.598 431.785 540.539 cv
431.695 540.484 431.582 540.422 431.441 540.355 cv
431.301 540.293 431.133 540.234 430.945 540.172 cv
430.754 540.117 430.539 540.086 430.297 540.086 cv
430.074 540.086 429.883 540.113 429.719 540.16 cv
429.551 540.215 429.414 540.285 429.309 540.371 cv
429.203 540.465 429.121 540.57 429.07 540.695 cv
429.012 540.82 428.984 540.957 428.988 541.102 cv
428.984 541.305 429.035 541.473 429.141 541.609 cv
429.242 541.75 429.379 541.871 429.547 541.973 cv
429.711 542.078 429.902 542.172 430.117 542.254 cv
430.328 542.34 430.543 542.426 430.766 542.512 cv
430.984 542.602 431.203 542.703 431.422 542.809 cv
431.637 542.918 431.828 543.047 431.996 543.203 cv
432.16 543.359 432.293 543.547 432.395 543.766 cv
432.492 543.984 432.543 544.246 432.547 544.543 cv
cp
f
183.77 15.965 mo
183.828 16.156 183.867 16.305 183.887 16.41 cv
183.898 16.523 183.879 16.605 183.824 16.656 cv
183.766 16.711 183.664 16.742 183.52 16.758 cv
183.371 16.77 183.172 16.777 182.922 16.777 cv
182.652 16.777 182.445 16.773 182.301 16.766 cv
182.148 16.758 182.035 16.742 181.961 16.719 cv
181.879 16.695 181.824 16.664 181.797 16.621 cv
181.762 16.582 181.734 16.527 181.719 16.457 cv
181.043 14.43 li
177.254 14.43 li
176.617 16.402 li
176.594 16.477 176.566 16.539 176.535 16.586 cv
176.5 16.637 176.445 16.676 176.371 16.703 cv
176.293 16.73 176.188 16.746 176.051 16.762 cv
175.91 16.77 175.727 16.777 175.508 16.777 cv
175.266 16.777 175.082 16.77 174.949 16.754 cv
174.813 16.738 174.719 16.703 174.668 16.641 cv
174.613 16.586 174.594 16.5 174.613 16.387 cv
174.625 16.281 174.664 16.137 174.73 15.949 cv
177.84 7.00403 li
177.867 6.91803 177.906 6.84802 177.949 6.789 cv
177.988 6.73798 178.055 6.69501 178.148 6.664 cv
178.238 6.63702 178.363 6.62097 178.523 6.60901 cv
178.684 6.60498 178.895 6.60199 179.164 6.59802 cv
179.469 6.60199 179.715 6.60498 179.895 6.60901 cv
180.074 6.62097 180.215 6.63702 180.32 6.664 cv
180.418 6.69501 180.492 6.73798 180.539 6.79303 cv
180.582 6.85199 180.617 6.92999 180.652 7.02698 cv
cp
179.141 8.57001 mo
179.133 8.57001 li
177.707 12.855 li
180.566 12.855 li
cp
f
191.141 9.508 mo
191.137 9.53497 191.137 9.56598 191.137 9.60199 cv
191.133 9.64099 191.129 9.67999 191.121 9.72302 cv
191.113 9.76599 191.102 9.81598 191.09 9.87097 cv
191.074 9.92999 191.059 9.99597 191.039 10.066 cv
188.953 16.355 li
188.926 16.445 188.891 16.52 188.848 16.57 cv
188.801 16.629 188.727 16.672 188.629 16.699 cv
188.523 16.73 188.387 16.746 188.215 16.762 cv
188.039 16.77 187.813 16.777 187.535 16.777 cv
187.258 16.777 187.031 16.77 186.859 16.758 cv
186.684 16.742 186.547 16.723 186.449 16.691 cv
186.348 16.664 186.277 16.621 186.234 16.562 cv
186.188 16.512 186.152 16.441 186.129 16.355 cv
184.043 10.066 li
184.012 9.96503 183.984 9.87097 183.969 9.789 cv
183.945 9.70697 183.938 9.64801 183.938 9.60901 cv
183.934 9.578 183.93 9.54303 183.934 9.508 cv
183.93 9.45697 183.945 9.40997 183.977 9.37097 cv
184.004 9.33197 184.055 9.30103 184.129 9.27301 cv
184.199 9.25 184.297 9.22998 184.426 9.21899 cv
184.551 9.211 184.711 9.20697 184.906 9.203 cv
185.117 9.20697 185.289 9.21503 185.422 9.22302 cv
185.547 9.23798 185.652 9.25403 185.73 9.27698 cv
185.805 9.30103 185.855 9.336 185.891 9.37903 cv
185.918 9.42603 185.945 9.47998 185.969 9.539 cv
187.551 14.641 li
187.598 14.836 li
187.645 14.641 li
189.203 9.539 li
189.215 9.47998 189.238 9.42603 189.273 9.37903 cv
189.305 9.336 189.359 9.30103 189.434 9.27698 cv
189.504 9.25403 189.602 9.23798 189.727 9.22302 cv
189.848 9.21503 190.008 9.20697 190.207 9.203 cv
190.398 9.20697 190.555 9.211 190.676 9.21899 cv
190.797 9.22998 190.891 9.25 190.961 9.27301 cv
191.027 9.30103 191.074 9.33197 191.102 9.37097 cv
191.125 9.40997 191.137 9.45697 191.141 9.508 cv
cp
f
198.602 12.789 mo
198.598 13.027 198.547 13.203 198.441 13.316 cv
198.332 13.434 198.184 13.492 198.004 13.488 cv
193.77 13.488 li
193.766 13.789 193.801 14.059 193.875 14.297 cv
193.941 14.539 194.055 14.742 194.211 14.91 cv
194.363 15.082 194.559 15.211 194.801 15.297 cv
195.039 15.387 195.328 15.43 195.672 15.43 cv
196.012 15.43 196.313 15.406 196.574 15.355 cv
196.832 15.309 197.059 15.254 197.25 15.191 cv
197.438 15.133 197.594 15.078 197.723 15.027 cv
197.844 14.98 197.945 14.957 198.027 14.953 cv
198.07 14.957 198.109 14.965 198.145 14.98 cv
198.172 15 198.199 15.031 198.219 15.078 cv
198.238 15.125 198.25 15.191 198.262 15.277 cv
198.266 15.363 198.27 15.473 198.273 15.602 cv
198.27 15.719 198.27 15.816 198.266 15.895 cv
198.258 15.977 198.25 16.043 198.242 16.098 cv
198.23 16.156 198.215 16.207 198.195 16.242 cv
198.176 16.285 198.148 16.32 198.117 16.355 cv
198.082 16.395 197.988 16.445 197.84 16.504 cv
197.684 16.57 197.492 16.633 197.262 16.687 cv
197.023 16.75 196.754 16.797 196.457 16.844 cv
196.152 16.883 195.832 16.906 195.492 16.91 cv
194.871 16.906 194.328 16.832 193.867 16.676 cv
193.398 16.523 193.012 16.285 192.703 15.969 cv
192.387 15.652 192.152 15.254 192.004 14.77 cv
191.848 14.289 191.773 13.723 191.777 13.066 cv
191.773 12.453 191.852 11.895 192.016 11.398 cv
192.172 10.902 192.406 10.484 192.719 10.137 cv
193.023 9.79303 193.398 9.52698 193.836 9.34399 cv
194.273 9.164 194.766 9.07397 195.32 9.07001 cv
195.898 9.07397 196.398 9.15997 196.813 9.328 cv
197.227 9.50403 197.563 9.742 197.828 10.043 cv
198.09 10.348 198.285 10.707 198.414 11.121 cv
198.535 11.539 198.598 11.988 198.602 12.477 cv
cp
196.699 12.227 mo
196.711 11.676 196.602 11.242 196.367 10.93 cv
196.133 10.617 195.766 10.461 195.273 10.457 cv
195.023 10.461 194.809 10.508 194.625 10.598 cv
194.438 10.695 194.285 10.82 194.164 10.977 cv
194.039 11.137 193.945 11.324 193.883 11.539 cv
193.816 11.754 193.777 11.984 193.77 12.227 cv
cp
f
204.676 10.16 mo
204.676 10.352 204.668 10.504 204.66 10.621 cv
204.645 10.742 204.629 10.836 204.613 10.902 cv
204.59 10.973 204.563 11.02 204.531 11.043 cv
204.492 11.07 204.449 11.082 204.402 11.082 cv
204.355 11.082 204.309 11.074 204.262 11.055 cv
204.207 11.039 204.148 11.02 204.086 10.996 cv
204.016 10.977 203.945 10.957 203.871 10.937 cv
203.789 10.922 203.703 10.914 203.613 10.91 cv
203.5 10.914 203.391 10.934 203.285 10.977 cv
203.176 11.023 203.063 11.094 202.949 11.184 cv
202.828 11.277 202.707 11.402 202.582 11.555 cv
202.453 11.715 202.316 11.906 202.172 12.133 cv
202.172 16.465 li
202.168 16.52 202.152 16.562 202.125 16.602 cv
202.09 16.641 202.035 16.676 201.965 16.699 cv
201.887 16.727 201.789 16.742 201.664 16.758 cv
201.539 16.77 201.379 16.777 201.191 16.777 cv
200.996 16.777 200.84 16.77 200.715 16.758 cv
200.59 16.742 200.488 16.727 200.414 16.699 cv
200.336 16.676 200.281 16.641 200.254 16.602 cv
200.219 16.562 200.203 16.52 200.207 16.465 cv
200.207 9.51599 li
200.203 9.46899 200.219 9.422 200.246 9.37903 cv
200.27 9.34399 200.316 9.31201 200.387 9.28101 cv
200.453 9.258 200.539 9.23798 200.648 9.22302 cv
200.754 9.21503 200.887 9.20697 201.051 9.203 cv
201.215 9.20697 201.352 9.21503 201.461 9.22302 cv
201.566 9.23798 201.652 9.258 201.715 9.28101 cv
201.773 9.31201 201.816 9.34399 201.844 9.37903 cv
201.867 9.422 201.879 9.46899 201.883 9.51599 cv
201.883 10.379 li
202.063 10.121 202.234 9.90997 202.398 9.73798 cv
202.555 9.57397 202.711 9.43701 202.859 9.336 cv
203.004 9.23798 203.148 9.172 203.293 9.12903 cv
203.438 9.09399 203.582 9.07397 203.73 9.07001 cv
203.797 9.07397 203.871 9.078 203.949 9.08197 cv
204.027 9.09399 204.105 9.10498 204.191 9.12097 cv
204.27 9.14099 204.344 9.15997 204.41 9.18402 cv
204.469 9.20697 204.516 9.23401 204.547 9.258 cv
204.574 9.289 204.594 9.31598 204.609 9.34399 cv
204.621 9.37903 204.633 9.422 204.645 9.47302 cv
204.652 9.53101 204.66 9.61298 204.668 9.71899 cv
204.672 9.828 204.676 9.97699 204.676 10.16 cv
cp
f
211.434 16.488 mo
211.43 16.566 211.402 16.621 211.355 16.66 cv
211.301 16.703 211.219 16.73 211.109 16.75 cv
210.992 16.766 210.828 16.777 210.613 16.777 cv
210.375 16.777 210.203 16.766 210.102 16.75 cv
209.992 16.73 209.918 16.703 209.879 16.66 cv
209.832 16.621 209.813 16.566 209.813 16.488 cv
209.813 15.937 li
209.523 16.246 209.195 16.484 208.832 16.652 cv
208.465 16.824 208.059 16.906 207.613 16.91 cv
207.242 16.906 206.902 16.859 206.594 16.766 cv
206.285 16.672 206.02 16.531 205.793 16.336 cv
205.566 16.148 205.391 15.914 205.266 15.633 cv
205.141 15.355 205.078 15.027 205.082 14.648 cv
205.078 14.25 205.156 13.898 205.316 13.594 cv
205.473 13.297 205.711 13.051 206.027 12.855 cv
206.34 12.664 206.73 12.52 207.199 12.422 cv
207.668 12.332 208.211 12.285 208.828 12.281 cv
209.508 12.281 li
209.508 11.859 li
209.508 11.645 209.484 11.453 209.441 11.289 cv
209.395 11.129 209.32 10.992 209.223 10.879 cv
209.117 10.773 208.984 10.691 208.816 10.637 cv
208.645 10.586 208.434 10.562 208.191 10.559 cv
207.859 10.562 207.566 10.598 207.313 10.668 cv
207.051 10.742 206.824 10.824 206.629 10.91 cv
206.43 11.004 206.266 11.082 206.137 11.152 cv
206 11.227 205.891 11.266 205.813 11.262 cv
205.75 11.266 205.699 11.246 205.66 11.207 cv
205.613 11.172 205.578 11.121 205.551 11.051 cv
205.52 10.988 205.496 10.902 205.484 10.801 cv
205.465 10.703 205.457 10.594 205.461 10.473 cv
205.457 10.312 205.473 10.187 205.5 10.09 cv
205.523 10 205.57 9.914 205.648 9.836 cv
205.719 9.76202 205.848 9.67999 206.031 9.59003 cv
206.211 9.5 206.422 9.414 206.668 9.336 cv
206.91 9.258 207.18 9.19501 207.469 9.14502 cv
207.758 9.09802 208.055 9.07397 208.363 9.07001 cv
208.906 9.07397 209.371 9.125 209.758 9.22998 cv
210.145 9.34003 210.465 9.50403 210.715 9.72302 cv
210.965 9.94098 211.145 10.227 211.262 10.574 cv
211.371 10.926 211.43 11.34 211.434 11.812 cv
cp
209.508 13.512 mo
208.758 13.512 li
208.441 13.516 208.172 13.539 207.949 13.582 cv
207.723 13.633 207.539 13.703 207.402 13.793 cv
207.258 13.891 207.156 14.004 207.094 14.133 cv
207.027 14.27 206.992 14.418 206.996 14.586 cv
206.992 14.879 207.086 15.109 207.273 15.273 cv
207.457 15.441 207.715 15.523 208.043 15.523 cv
208.316 15.523 208.566 15.453 208.801 15.312 cv
209.027 15.172 209.266 14.969 209.508 14.695 cv
cp
f
219.656 9.99597 mo
219.652 10.25 219.625 10.434 219.57 10.551 cv
219.512 10.672 219.441 10.73 219.363 10.73 cv
218.543 10.73 li
218.656 10.855 218.738 11 218.789 11.156 cv
218.836 11.316 218.859 11.48 218.863 11.648 cv
218.859 12.059 218.793 12.418 218.66 12.73 cv
218.523 13.047 218.328 13.312 218.078 13.523 cv
217.824 13.742 217.523 13.906 217.168 14.016 cv
216.809 14.133 216.41 14.187 215.98 14.184 cv
215.754 14.187 215.543 14.16 215.34 14.102 cv
215.137 14.051 214.98 13.988 214.871 13.91 cv
214.809 13.98 214.75 14.059 214.703 14.152 cv
214.652 14.246 214.629 14.352 214.633 14.461 cv
214.629 14.617 214.695 14.738 214.828 14.832 cv
214.957 14.93 215.145 14.984 215.387 14.992 cv
217.078 15.055 li
217.473 15.07 217.824 15.129 218.133 15.223 cv
218.441 15.324 218.703 15.457 218.914 15.629 cv
219.125 15.805 219.285 16.016 219.395 16.258 cv
219.504 16.504 219.559 16.777 219.563 17.09 cv
219.559 17.426 219.484 17.75 219.336 18.059 cv
219.188 18.359 218.961 18.621 218.66 18.848 cv
218.355 19.066 217.977 19.246 217.523 19.379 cv
217.066 19.508 216.535 19.57 215.934 19.574 cv
215.336 19.57 214.832 19.523 214.414 19.434 cv
213.996 19.336 213.652 19.207 213.387 19.043 cv
213.117 18.875 212.922 18.676 212.805 18.449 cv
212.68 18.215 212.621 17.961 212.621 17.687 cv
212.621 17.516 212.641 17.355 212.688 17.199 cv
212.727 17.043 212.793 16.891 212.883 16.75 cv
212.965 16.605 213.07 16.473 213.195 16.34 cv
213.32 16.211 213.461 16.086 213.625 15.965 cv
213.398 15.852 213.227 15.691 213.105 15.48 cv
212.984 15.277 212.926 15.051 212.926 14.805 cv
212.926 14.504 212.992 14.227 213.133 13.969 cv
213.27 13.719 213.453 13.488 213.68 13.285 cv
213.496 13.105 213.352 12.891 213.242 12.633 cv
213.133 12.383 213.078 12.062 213.082 11.68 cv
213.078 11.277 213.148 10.918 213.293 10.594 cv
213.434 10.277 213.633 10.008 213.891 9.78497 cv
214.145 9.56598 214.449 9.39502 214.801 9.27698 cv
215.152 9.15997 215.543 9.10199 215.973 9.10199 cv
216.191 9.10199 216.398 9.117 216.598 9.14099 cv
216.797 9.172 216.984 9.20697 217.156 9.25 cv
219.363 9.25 li
219.445 9.25403 219.516 9.31201 219.574 9.422 cv
219.625 9.539 219.652 9.72998 219.656 9.99597 cv
cp
217.141 11.641 mo
217.137 11.27 217.035 10.98 216.828 10.77 cv
216.617 10.566 216.324 10.461 215.949 10.457 cv
215.754 10.461 215.582 10.492 215.441 10.555 cv
215.293 10.621 215.172 10.711 215.078 10.82 cv
214.977 10.934 214.906 11.062 214.863 11.211 cv
214.813 11.359 214.789 11.516 214.793 11.672 cv
214.789 12.031 214.895 12.309 215.105 12.512 cv
215.313 12.719 215.602 12.824 215.973 12.82 cv
216.168 12.824 216.336 12.793 216.484 12.727 cv
216.625 12.668 216.746 12.582 216.848 12.469 cv
216.941 12.363 217.016 12.234 217.066 12.09 cv
217.113 11.949 217.137 11.801 217.141 11.641 cv
cp
217.602 17.191 mo
217.602 16.953 217.508 16.777 217.32 16.652 cv
217.133 16.531 216.875 16.461 216.547 16.449 cv
215.152 16.41 li
215.016 16.512 214.906 16.605 214.828 16.695 cv
214.746 16.785 214.684 16.871 214.637 16.957 cv
214.586 17.039 214.551 17.121 214.539 17.199 cv
214.52 17.277 214.512 17.355 214.516 17.441 cv
214.512 17.695 214.645 17.895 214.906 18.031 cv
215.168 18.164 215.539 18.23 216.02 18.234 cv
216.313 18.23 216.559 18.199 216.766 18.145 cv
216.965 18.082 217.129 18.004 217.258 17.906 cv
217.379 17.805 217.469 17.695 217.523 17.574 cv
217.574 17.453 217.602 17.324 217.602 17.191 cv
cp
f
227.281 12.789 mo
227.277 13.027 227.227 13.203 227.121 13.316 cv
227.012 13.434 226.863 13.492 226.684 13.488 cv
222.449 13.488 li
222.445 13.789 222.48 14.059 222.555 14.297 cv
222.621 14.539 222.734 14.742 222.891 14.91 cv
223.043 15.082 223.238 15.211 223.48 15.297 cv
223.719 15.387 224.008 15.43 224.352 15.43 cv
224.691 15.43 224.992 15.406 225.254 15.355 cv
225.512 15.309 225.738 15.254 225.93 15.191 cv
226.117 15.133 226.273 15.078 226.402 15.027 cv
226.523 14.98 226.625 14.957 226.707 14.953 cv
226.75 14.957 226.789 14.965 226.824 14.98 cv
226.852 15 226.879 15.031 226.898 15.078 cv
226.918 15.125 226.93 15.191 226.941 15.277 cv
226.945 15.363 226.949 15.473 226.953 15.602 cv
226.949 15.719 226.949 15.816 226.945 15.895 cv
226.938 15.977 226.93 16.043 226.922 16.098 cv
226.91 16.156 226.895 16.207 226.875 16.242 cv
226.855 16.285 226.828 16.32 226.797 16.355 cv
226.762 16.395 226.668 16.445 226.52 16.504 cv
226.363 16.57 226.172 16.633 225.941 16.687 cv
225.703 16.75 225.434 16.797 225.137 16.844 cv
224.832 16.883 224.512 16.906 224.172 16.91 cv
223.551 16.906 223.008 16.832 222.547 16.676 cv
222.078 16.523 221.691 16.285 221.383 15.969 cv
221.066 15.652 220.832 15.254 220.684 14.77 cv
220.527 14.289 220.453 13.723 220.457 13.066 cv
220.453 12.453 220.531 11.895 220.695 11.398 cv
220.852 10.902 221.086 10.484 221.398 10.137 cv
221.703 9.79303 222.078 9.52698 222.516 9.34399 cv
222.953 9.164 223.445 9.07397 224 9.07001 cv
224.578 9.07397 225.078 9.15997 225.492 9.328 cv
225.906 9.50403 226.242 9.742 226.508 10.043 cv
226.77 10.348 226.965 10.707 227.094 11.121 cv
227.215 11.539 227.277 11.988 227.281 12.477 cv
cp
225.379 12.227 mo
225.391 11.676 225.281 11.242 225.047 10.93 cv
224.813 10.617 224.445 10.461 223.953 10.457 cv
223.703 10.461 223.488 10.508 223.305 10.598 cv
223.117 10.695 222.965 10.82 222.844 10.977 cv
222.719 11.137 222.625 11.324 222.563 11.539 cv
222.496 11.754 222.457 11.984 222.449 12.227 cv
cp
f
243.125 9.711 mo
243.125 10.277 243.035 10.781 242.859 11.215 cv
242.68 11.652 242.422 12.02 242.086 12.316 cv
241.746 12.621 241.332 12.848 240.844 13 cv
240.352 13.156 239.773 13.234 239.109 13.23 cv
238.27 13.23 li
238.27 16.449 li
238.266 16.504 238.25 16.551 238.219 16.59 cv
238.184 16.633 238.129 16.668 238.051 16.691 cv
237.973 16.719 237.867 16.738 237.738 16.754 cv
237.605 16.77 237.441 16.777 237.242 16.777 cv
237.043 16.777 236.875 16.77 236.746 16.754 cv
236.609 16.738 236.504 16.719 236.43 16.691 cv
236.348 16.668 236.293 16.633 236.266 16.59 cv
236.23 16.551 236.215 16.504 236.219 16.449 cv
236.219 7.37903 li
236.215 7.13702 236.281 6.953 236.41 6.828 cv
236.535 6.70697 236.703 6.64801 236.914 6.64502 cv
239.289 6.64502 li
239.523 6.64801 239.754 6.65601 239.973 6.672 cv
240.188 6.69098 240.445 6.72998 240.746 6.789 cv
241.047 6.85199 241.352 6.961 241.664 7.12097 cv
241.973 7.28497 242.234 7.492 242.453 7.73401 cv
242.668 7.98401 242.836 8.27301 242.953 8.60199 cv
243.066 8.93402 243.125 9.30103 243.125 9.711 cv
cp
240.98 9.85498 mo
240.98 9.508 240.918 9.21503 240.793 8.98401 cv
240.668 8.758 240.512 8.59003 240.332 8.47699 cv
240.148 8.37097 239.961 8.30103 239.762 8.27002 cv
239.559 8.242 239.352 8.22998 239.141 8.22699 cv
238.27 8.22699 li
238.27 11.648 li
239.188 11.648 li
239.516 11.652 239.789 11.605 240.012 11.516 cv
240.23 11.43 240.41 11.309 240.551 11.148 cv
240.688 10.992 240.793 10.801 240.871 10.578 cv
240.941 10.359 240.98 10.121 240.98 9.85498 cv
cp
f
249.063 10.16 mo
249.063 10.352 249.055 10.504 249.047 10.621 cv
249.031 10.742 249.016 10.836 249 10.902 cv
248.977 10.973 248.949 11.02 248.918 11.043 cv
248.879 11.07 248.836 11.082 248.789 11.082 cv
248.742 11.082 248.695 11.074 248.648 11.055 cv
248.594 11.039 248.535 11.02 248.473 10.996 cv
248.402 10.977 248.332 10.957 248.258 10.937 cv
248.176 10.922 248.09 10.914 248 10.91 cv
247.887 10.914 247.777 10.934 247.672 10.977 cv
247.563 11.023 247.449 11.094 247.336 11.184 cv
247.215 11.277 247.094 11.402 246.969 11.555 cv
246.84 11.715 246.703 11.906 246.559 12.133 cv
246.559 16.465 li
246.555 16.52 246.539 16.562 246.512 16.602 cv
246.477 16.641 246.422 16.676 246.352 16.699 cv
246.273 16.727 246.176 16.742 246.051 16.758 cv
245.926 16.77 245.766 16.777 245.578 16.777 cv
245.383 16.777 245.227 16.77 245.102 16.758 cv
244.977 16.742 244.875 16.727 244.801 16.699 cv
244.723 16.676 244.668 16.641 244.641 16.602 cv
244.605 16.562 244.59 16.52 244.594 16.465 cv
244.594 9.51599 li
244.59 9.46899 244.605 9.422 244.633 9.37903 cv
244.656 9.34399 244.703 9.31201 244.773 9.28101 cv
244.84 9.258 244.926 9.23798 245.035 9.22302 cv
245.141 9.21503 245.273 9.20697 245.438 9.203 cv
245.602 9.20697 245.738 9.21503 245.848 9.22302 cv
245.953 9.23798 246.039 9.258 246.102 9.28101 cv
246.16 9.31201 246.203 9.34399 246.23 9.37903 cv
246.254 9.422 246.266 9.46899 246.27 9.51599 cv
246.27 10.379 li
246.449 10.121 246.621 9.90997 246.785 9.73798 cv
246.941 9.57397 247.098 9.43701 247.246 9.336 cv
247.391 9.23798 247.535 9.172 247.68 9.12903 cv
247.824 9.09399 247.969 9.07397 248.117 9.07001 cv
248.184 9.07397 248.258 9.078 248.336 9.08197 cv
248.414 9.09399 248.492 9.10498 248.578 9.12097 cv
248.656 9.14099 248.73 9.15997 248.797 9.18402 cv
248.855 9.20697 248.902 9.23401 248.934 9.258 cv
248.961 9.289 248.98 9.31598 248.996 9.34399 cv
249.008 9.37903 249.02 9.422 249.031 9.47302 cv
249.039 9.53101 249.047 9.61298 249.055 9.71899 cv
249.059 9.828 249.063 9.97699 249.063 10.16 cv
cp
f
256.57 12.789 mo
256.566 13.027 256.516 13.203 256.41 13.316 cv
256.301 13.434 256.152 13.492 255.973 13.488 cv
251.738 13.488 li
251.734 13.789 251.77 14.059 251.844 14.297 cv
251.91 14.539 252.023 14.742 252.18 14.91 cv
252.332 15.082 252.527 15.211 252.77 15.297 cv
253.008 15.387 253.297 15.43 253.641 15.43 cv
253.98 15.43 254.281 15.406 254.543 15.355 cv
254.801 15.309 255.027 15.254 255.219 15.191 cv
255.406 15.133 255.563 15.078 255.691 15.027 cv
255.813 14.98 255.914 14.957 255.996 14.953 cv
256.039 14.957 256.078 14.965 256.113 14.98 cv
256.141 15 256.168 15.031 256.188 15.078 cv
256.207 15.125 256.219 15.191 256.23 15.277 cv
256.234 15.363 256.238 15.473 256.242 15.602 cv
256.238 15.719 256.238 15.816 256.234 15.895 cv
256.227 15.977 256.219 16.043 256.211 16.098 cv
256.199 16.156 256.184 16.207 256.164 16.242 cv
256.145 16.285 256.117 16.32 256.086 16.355 cv
256.051 16.395 255.957 16.445 255.809 16.504 cv
255.652 16.57 255.461 16.633 255.23 16.687 cv
254.992 16.75 254.723 16.797 254.426 16.844 cv
254.121 16.883 253.801 16.906 253.461 16.91 cv
252.84 16.906 252.297 16.832 251.836 16.676 cv
251.367 16.523 250.98 16.285 250.672 15.969 cv
250.355 15.652 250.121 15.254 249.973 14.77 cv
249.816 14.289 249.742 13.723 249.746 13.066 cv
249.742 12.453 249.82 11.895 249.984 11.398 cv
250.141 10.902 250.375 10.484 250.688 10.137 cv
250.992 9.79303 251.367 9.52698 251.805 9.34399 cv
252.242 9.164 252.734 9.07397 253.289 9.07001 cv
253.867 9.07397 254.367 9.15997 254.781 9.328 cv
255.195 9.50403 255.531 9.742 255.797 10.043 cv
256.059 10.348 256.254 10.707 256.383 11.121 cv
256.504 11.539 256.566 11.988 256.57 12.477 cv
cp
254.668 12.227 mo
254.68 11.676 254.57 11.242 254.336 10.93 cv
254.102 10.617 253.734 10.461 253.242 10.457 cv
252.992 10.461 252.777 10.508 252.594 10.598 cv
252.406 10.695 252.254 10.82 252.133 10.977 cv
252.008 11.137 251.914 11.324 251.852 11.539 cv
251.785 11.754 251.746 11.984 251.738 12.227 cv
cp
f
265.176 12.887 mo
265.176 13.508 265.109 14.066 264.977 14.562 cv
264.844 15.059 264.648 15.48 264.395 15.828 cv
264.141 16.176 263.824 16.445 263.445 16.629 cv
263.063 16.816 262.629 16.906 262.145 16.91 cv
261.938 16.906 261.75 16.887 261.586 16.852 cv
261.414 16.809 261.25 16.75 261.094 16.672 cv
260.934 16.594 260.777 16.496 260.625 16.371 cv
260.465 16.254 260.305 16.113 260.141 15.949 cv
260.141 19.223 li
260.137 19.27 260.121 19.316 260.094 19.363 cv
260.059 19.402 260.004 19.437 259.934 19.469 cv
259.855 19.492 259.758 19.516 259.633 19.535 cv
259.508 19.547 259.348 19.555 259.16 19.559 cv
258.965 19.555 258.809 19.547 258.684 19.535 cv
258.559 19.516 258.457 19.492 258.383 19.469 cv
258.305 19.437 258.25 19.402 258.223 19.363 cv
258.188 19.316 258.172 19.27 258.176 19.223 cv
258.176 9.51599 li
258.172 9.46899 258.188 9.422 258.215 9.37903 cv
258.238 9.34399 258.281 9.31201 258.352 9.28101 cv
258.414 9.258 258.5 9.23798 258.609 9.22302 cv
258.711 9.21503 258.848 9.20697 259.012 9.203 cv
259.168 9.20697 259.297 9.21503 259.402 9.22302 cv
259.508 9.23798 259.594 9.258 259.66 9.28101 cv
259.723 9.31201 259.77 9.34399 259.797 9.37903 cv
259.82 9.422 259.832 9.46899 259.836 9.51599 cv
259.836 10.332 li
260.035 10.125 260.234 9.94501 260.434 9.78497 cv
260.625 9.62903 260.824 9.49597 261.027 9.38702 cv
261.23 9.28497 261.438 9.203 261.656 9.14801 cv
261.867 9.09802 262.098 9.07397 262.348 9.07001 cv
262.852 9.07397 263.285 9.172 263.648 9.37097 cv
264.004 9.57397 264.297 9.85199 264.523 10.195 cv
264.746 10.547 264.91 10.949 265.02 11.41 cv
265.121 11.871 265.176 12.363 265.176 12.887 cv
cp
263.133 13.027 mo
263.129 12.734 263.109 12.453 263.066 12.176 cv
263.02 11.906 262.941 11.664 262.84 11.449 cv
262.73 11.238 262.59 11.066 262.418 10.937 cv
262.242 10.812 262.027 10.75 261.77 10.746 cv
261.637 10.75 261.508 10.77 261.383 10.805 cv
261.254 10.848 261.125 10.91 260.992 10.996 cv
260.859 11.086 260.723 11.199 260.586 11.34 cv
260.441 11.48 260.293 11.656 260.141 11.859 cv
260.141 14.152 li
260.414 14.5 260.676 14.77 260.926 14.957 cv
261.172 15.148 261.434 15.242 261.707 15.242 cv
261.961 15.242 262.176 15.18 262.359 15.047 cv
262.535 14.922 262.684 14.75 262.797 14.539 cv
262.91 14.328 262.992 14.09 263.051 13.824 cv
263.102 13.559 263.129 13.293 263.133 13.027 cv
cp
f
272.672 16.488 mo
272.668 16.566 272.641 16.621 272.594 16.66 cv
272.539 16.703 272.457 16.73 272.348 16.75 cv
272.23 16.766 272.066 16.777 271.852 16.777 cv
271.613 16.777 271.441 16.766 271.34 16.75 cv
271.23 16.73 271.156 16.703 271.117 16.66 cv
271.07 16.621 271.051 16.566 271.051 16.488 cv
271.051 15.937 li
270.762 16.246 270.434 16.484 270.07 16.652 cv
269.703 16.824 269.297 16.906 268.852 16.91 cv
268.48 16.906 268.141 16.859 267.832 16.766 cv
267.523 16.672 267.258 16.531 267.031 16.336 cv
266.805 16.148 266.629 15.914 266.504 15.633 cv
266.379 15.355 266.316 15.027 266.32 14.648 cv
266.316 14.25 266.395 13.898 266.555 13.594 cv
266.711 13.297 266.949 13.051 267.266 12.855 cv
267.578 12.664 267.969 12.52 268.438 12.422 cv
268.906 12.332 269.449 12.285 270.066 12.281 cv
270.746 12.281 li
270.746 11.859 li
270.746 11.645 270.723 11.453 270.68 11.289 cv
270.633 11.129 270.559 10.992 270.461 10.879 cv
270.355 10.773 270.223 10.691 270.055 10.637 cv
269.883 10.586 269.672 10.562 269.43 10.559 cv
269.098 10.562 268.805 10.598 268.551 10.668 cv
268.289 10.742 268.063 10.824 267.867 10.91 cv
267.668 11.004 267.504 11.082 267.375 11.152 cv
267.238 11.227 267.129 11.266 267.051 11.262 cv
266.988 11.266 266.938 11.246 266.898 11.207 cv
266.852 11.172 266.816 11.121 266.789 11.051 cv
266.758 10.988 266.734 10.902 266.723 10.801 cv
266.703 10.703 266.695 10.594 266.699 10.473 cv
266.695 10.312 266.711 10.187 266.738 10.09 cv
266.762 10 266.809 9.914 266.887 9.836 cv
266.957 9.76202 267.086 9.67999 267.27 9.59003 cv
267.449 9.5 267.66 9.414 267.906 9.336 cv
268.148 9.258 268.418 9.19501 268.707 9.14502 cv
268.996 9.09802 269.293 9.07397 269.602 9.07001 cv
270.145 9.07397 270.609 9.125 270.996 9.22998 cv
271.383 9.34003 271.703 9.50403 271.953 9.72302 cv
272.203 9.94098 272.383 10.227 272.5 10.574 cv
272.609 10.926 272.668 11.34 272.672 11.812 cv
cp
270.746 13.512 mo
269.996 13.512 li
269.68 13.516 269.41 13.539 269.188 13.582 cv
268.961 13.633 268.777 13.703 268.641 13.793 cv
268.496 13.891 268.395 14.004 268.332 14.133 cv
268.266 14.27 268.23 14.418 268.234 14.586 cv
268.23 14.879 268.324 15.109 268.512 15.273 cv
268.695 15.441 268.953 15.523 269.281 15.523 cv
269.555 15.523 269.805 15.453 270.039 15.312 cv
270.266 15.172 270.504 14.969 270.746 14.695 cv
cp
f
279.098 10.16 mo
279.098 10.352 279.09 10.504 279.082 10.621 cv
279.066 10.742 279.051 10.836 279.035 10.902 cv
279.012 10.973 278.984 11.02 278.953 11.043 cv
278.914 11.07 278.871 11.082 278.824 11.082 cv
278.777 11.082 278.73 11.074 278.684 11.055 cv
278.629 11.039 278.57 11.02 278.508 10.996 cv
278.438 10.977 278.367 10.957 278.293 10.937 cv
278.211 10.922 278.125 10.914 278.035 10.91 cv
277.922 10.914 277.813 10.934 277.707 10.977 cv
277.598 11.023 277.484 11.094 277.371 11.184 cv
277.25 11.277 277.129 11.402 277.004 11.555 cv
276.875 11.715 276.738 11.906 276.594 12.133 cv
276.594 16.465 li
276.59 16.52 276.574 16.562 276.547 16.602 cv
276.512 16.641 276.457 16.676 276.387 16.699 cv
276.309 16.727 276.211 16.742 276.086 16.758 cv
275.961 16.77 275.801 16.777 275.613 16.777 cv
275.418 16.777 275.262 16.77 275.137 16.758 cv
275.012 16.742 274.91 16.727 274.836 16.699 cv
274.758 16.676 274.703 16.641 274.676 16.602 cv
274.641 16.562 274.625 16.52 274.629 16.465 cv
274.629 9.51599 li
274.625 9.46899 274.641 9.422 274.668 9.37903 cv
274.691 9.34399 274.738 9.31201 274.809 9.28101 cv
274.875 9.258 274.961 9.23798 275.07 9.22302 cv
275.176 9.21503 275.309 9.20697 275.473 9.203 cv
275.637 9.20697 275.773 9.21503 275.883 9.22302 cv
275.988 9.23798 276.074 9.258 276.137 9.28101 cv
276.195 9.31201 276.238 9.34399 276.266 9.37903 cv
276.289 9.422 276.301 9.46899 276.305 9.51599 cv
276.305 10.379 li
276.484 10.121 276.656 9.90997 276.82 9.73798 cv
276.977 9.57397 277.133 9.43701 277.281 9.336 cv
277.426 9.23798 277.57 9.172 277.715 9.12903 cv
277.859 9.09399 278.004 9.07397 278.152 9.07001 cv
278.219 9.07397 278.293 9.078 278.371 9.08197 cv
278.449 9.09399 278.527 9.10498 278.613 9.12097 cv
278.691 9.14099 278.766 9.15997 278.832 9.18402 cv
278.891 9.20697 278.938 9.23401 278.969 9.258 cv
278.996 9.289 279.016 9.31598 279.031 9.34399 cv
279.043 9.37903 279.055 9.422 279.066 9.47302 cv
279.074 9.53101 279.082 9.61298 279.09 9.71899 cv
279.094 9.828 279.098 9.97699 279.098 10.16 cv
cp
f
285.84 16.488 mo
285.836 16.566 285.809 16.621 285.762 16.66 cv
285.707 16.703 285.625 16.73 285.516 16.75 cv
285.398 16.766 285.234 16.777 285.02 16.777 cv
284.781 16.777 284.609 16.766 284.508 16.75 cv
284.398 16.73 284.324 16.703 284.285 16.66 cv
284.238 16.621 284.219 16.566 284.219 16.488 cv
284.219 15.937 li
283.93 16.246 283.602 16.484 283.238 16.652 cv
282.871 16.824 282.465 16.906 282.02 16.91 cv
281.648 16.906 281.309 16.859 281 16.766 cv
280.691 16.672 280.426 16.531 280.199 16.336 cv
279.973 16.148 279.797 15.914 279.672 15.633 cv
279.547 15.355 279.484 15.027 279.488 14.648 cv
279.484 14.25 279.563 13.898 279.723 13.594 cv
279.879 13.297 280.117 13.051 280.434 12.855 cv
280.746 12.664 281.137 12.52 281.605 12.422 cv
282.074 12.332 282.617 12.285 283.234 12.281 cv
283.914 12.281 li
283.914 11.859 li
283.914 11.645 283.891 11.453 283.848 11.289 cv
283.801 11.129 283.727 10.992 283.629 10.879 cv
283.523 10.773 283.391 10.691 283.223 10.637 cv
283.051 10.586 282.84 10.562 282.598 10.559 cv
282.266 10.562 281.973 10.598 281.719 10.668 cv
281.457 10.742 281.23 10.824 281.035 10.91 cv
280.836 11.004 280.672 11.082 280.543 11.152 cv
280.406 11.227 280.297 11.266 280.219 11.262 cv
280.156 11.266 280.105 11.246 280.066 11.207 cv
280.02 11.172 279.984 11.121 279.957 11.051 cv
279.926 10.988 279.902 10.902 279.891 10.801 cv
279.871 10.703 279.863 10.594 279.867 10.473 cv
279.863 10.312 279.879 10.187 279.906 10.09 cv
279.93 10 279.977 9.914 280.055 9.836 cv
280.125 9.76202 280.254 9.67999 280.438 9.59003 cv
280.617 9.5 280.828 9.414 281.074 9.336 cv
281.316 9.258 281.586 9.19501 281.875 9.14502 cv
282.164 9.09802 282.461 9.07397 282.77 9.07001 cv
283.313 9.07397 283.777 9.125 284.164 9.22998 cv
284.551 9.34003 284.871 9.50403 285.121 9.72302 cv
285.371 9.94098 285.551 10.227 285.668 10.574 cv
285.777 10.926 285.836 11.34 285.84 11.812 cv
cp
283.914 13.512 mo
283.164 13.512 li
282.848 13.516 282.578 13.539 282.355 13.582 cv
282.129 13.633 281.945 13.703 281.809 13.793 cv
281.664 13.891 281.563 14.004 281.5 14.133 cv
281.434 14.27 281.398 14.418 281.402 14.586 cv
281.398 14.879 281.492 15.109 281.68 15.273 cv
281.863 15.441 282.121 15.523 282.449 15.523 cv
282.723 15.523 282.973 15.453 283.207 15.312 cv
283.434 15.172 283.672 14.969 283.914 14.695 cv
cp
f
291.836 15.781 mo
291.836 16.008 291.82 16.184 291.793 16.305 cv
291.762 16.43 291.723 16.516 291.68 16.562 cv
291.629 16.613 291.563 16.656 291.473 16.695 cv
291.379 16.734 291.27 16.766 291.152 16.797 cv
291.027 16.82 290.895 16.844 290.754 16.863 cv
290.609 16.875 290.469 16.883 290.324 16.887 cv
289.934 16.883 289.594 16.832 289.309 16.738 cv
289.023 16.637 288.789 16.488 288.602 16.281 cv
288.414 16.078 288.273 15.82 288.188 15.508 cv
288.094 15.199 288.051 14.828 288.055 14.398 cv
288.055 10.84 li
287.223 10.84 li
287.121 10.844 287.047 10.781 286.996 10.656 cv
286.941 10.535 286.914 10.332 286.918 10.043 cv
286.914 9.89502 286.922 9.76599 286.938 9.664 cv
286.949 9.56201 286.969 9.47998 286.996 9.41803 cv
287.02 9.35901 287.051 9.31598 287.094 9.289 cv
287.129 9.26599 287.176 9.25403 287.23 9.25 cv
288.055 9.25 li
288.055 7.69897 li
288.051 7.65198 288.066 7.60498 288.098 7.55902 cv
288.125 7.52002 288.176 7.48401 288.254 7.453 cv
288.328 7.42999 288.43 7.40601 288.559 7.39099 cv
288.684 7.37903 288.84 7.375 289.031 7.37097 cv
289.219 7.375 289.379 7.37903 289.508 7.39099 cv
289.633 7.40601 289.734 7.42999 289.809 7.453 cv
289.879 7.48401 289.93 7.52002 289.965 7.55902 cv
289.992 7.60498 290.008 7.65198 290.012 7.69897 cv
290.012 9.25 li
291.523 9.25 li
291.574 9.25403 291.621 9.26599 291.66 9.289 cv
291.699 9.31598 291.73 9.35901 291.758 9.41803 cv
291.781 9.47998 291.801 9.56201 291.816 9.664 cv
291.828 9.76599 291.836 9.89502 291.836 10.043 cv
291.836 10.332 291.809 10.535 291.758 10.656 cv
291.703 10.781 291.629 10.844 291.531 10.84 cv
290.012 10.84 li
290.012 14.105 li
290.008 14.484 290.066 14.77 290.191 14.957 cv
290.309 15.148 290.523 15.242 290.828 15.242 cv
290.93 15.242 291.023 15.234 291.109 15.215 cv
291.191 15.199 291.266 15.18 291.332 15.152 cv
291.395 15.133 291.449 15.109 291.496 15.09 cv
291.539 15.074 291.578 15.066 291.617 15.062 cv
291.645 15.066 291.676 15.074 291.707 15.09 cv
291.734 15.109 291.754 15.148 291.773 15.199 cv
291.785 15.258 291.801 15.332 291.816 15.422 cv
291.828 15.52 291.836 15.637 291.836 15.781 cv
cp
f
295.219 16.465 mo
295.215 16.52 295.199 16.562 295.172 16.602 cv
295.137 16.641 295.082 16.676 295.012 16.699 cv
294.934 16.727 294.836 16.742 294.711 16.758 cv
294.586 16.77 294.426 16.777 294.238 16.777 cv
294.043 16.777 293.887 16.77 293.762 16.758 cv
293.637 16.742 293.535 16.727 293.461 16.699 cv
293.383 16.676 293.328 16.641 293.301 16.602 cv
293.266 16.562 293.25 16.52 293.254 16.465 cv
293.254 9.53101 li
293.25 9.47998 293.266 9.43402 293.301 9.39502 cv
293.328 9.35498 293.383 9.32397 293.461 9.29303 cv
293.535 9.27002 293.637 9.24597 293.762 9.22699 cv
293.887 9.21503 294.043 9.20697 294.238 9.203 cv
294.426 9.20697 294.586 9.21503 294.711 9.22699 cv
294.836 9.24597 294.934 9.27002 295.012 9.29303 cv
295.082 9.32397 295.137 9.35498 295.172 9.39502 cv
295.199 9.43402 295.215 9.47998 295.219 9.53101 cv
cp
295.367 7.15997 mo
295.367 7.55902 295.285 7.83197 295.125 7.97998 cv
294.961 8.133 294.664 8.20697 294.23 8.203 cv
293.785 8.20697 293.484 8.133 293.336 7.98798 cv
293.18 7.84399 293.105 7.58197 293.105 7.19897 cv
293.105 6.80499 293.184 6.53101 293.344 6.37903 cv
293.5 6.22699 293.801 6.14801 294.246 6.14801 cv
294.68 6.14801 294.977 6.22302 295.133 6.37097 cv
295.289 6.52002 295.367 6.78497 295.367 7.15997 cv
cp
f
304.211 12.918 mo
304.207 13.516 304.129 14.059 303.977 14.543 cv
303.816 15.035 303.582 15.453 303.266 15.805 cv
302.949 16.156 302.551 16.43 302.074 16.621 cv
301.594 16.812 301.035 16.906 300.398 16.91 cv
299.777 16.906 299.238 16.824 298.785 16.652 cv
298.324 16.484 297.945 16.234 297.648 15.906 cv
297.344 15.582 297.121 15.18 296.977 14.699 cv
296.832 14.223 296.762 13.676 296.762 13.059 cv
296.762 12.469 296.84 11.93 296.996 11.437 cv
297.152 10.949 297.391 10.527 297.711 10.176 cv
298.027 9.828 298.422 9.55499 298.898 9.35901 cv
299.371 9.16803 299.93 9.07397 300.57 9.07001 cv
301.195 9.07397 301.734 9.15601 302.191 9.32397 cv
302.648 9.49597 303.027 9.74597 303.324 10.07 cv
303.621 10.398 303.844 10.801 303.992 11.277 cv
304.137 11.758 304.207 12.305 304.211 12.918 cv
cp
302.191 12.996 mo
302.188 12.66 302.16 12.344 302.109 12.051 cv
302.051 11.766 301.957 11.516 301.832 11.301 cv
301.699 11.09 301.527 10.922 301.316 10.801 cv
301.098 10.684 300.828 10.625 300.5 10.621 cv
300.211 10.625 299.957 10.68 299.738 10.781 cv
299.52 10.891 299.34 11.047 299.199 11.25 cv
299.059 11.457 298.953 11.703 298.883 11.988 cv
298.813 12.281 298.777 12.609 298.777 12.973 cv
298.777 13.32 298.805 13.637 298.863 13.922 cv
298.918 14.215 299.012 14.465 299.141 14.676 cv
299.266 14.891 299.438 15.055 299.66 15.168 cv
299.875 15.289 300.145 15.348 300.469 15.344 cv
300.762 15.348 301.02 15.293 301.242 15.184 cv
301.457 15.078 301.637 14.926 301.777 14.719 cv
301.918 14.52 302.02 14.273 302.09 13.984 cv
302.152 13.699 302.188 13.371 302.191 12.996 cv
cp
f
312.457 16.465 mo
312.453 16.52 312.438 16.562 312.41 16.602 cv
312.375 16.641 312.324 16.676 312.254 16.699 cv
312.18 16.727 312.078 16.742 311.953 16.758 cv
311.824 16.77 311.668 16.777 311.484 16.777 cv
311.289 16.777 311.129 16.77 311.004 16.758 cv
310.875 16.742 310.773 16.727 310.703 16.699 cv
310.625 16.676 310.574 16.641 310.547 16.602 cv
310.512 16.562 310.496 16.52 310.5 16.465 cv
310.5 12.5 li
310.496 12.164 310.473 11.898 310.426 11.703 cv
310.375 11.512 310.301 11.348 310.211 11.211 cv
310.117 11.074 310 10.969 309.852 10.891 cv
309.703 10.816 309.527 10.777 309.332 10.777 cv
309.078 10.777 308.828 10.871 308.574 11.051 cv
308.32 11.234 308.055 11.496 307.781 11.844 cv
307.781 16.465 li
307.777 16.52 307.762 16.562 307.734 16.602 cv
307.699 16.641 307.645 16.676 307.574 16.699 cv
307.496 16.727 307.398 16.742 307.273 16.758 cv
307.148 16.77 306.988 16.777 306.801 16.777 cv
306.605 16.777 306.449 16.77 306.324 16.758 cv
306.199 16.742 306.098 16.727 306.023 16.699 cv
305.945 16.676 305.891 16.641 305.863 16.602 cv
305.828 16.562 305.813 16.52 305.816 16.465 cv
305.816 9.51599 li
305.813 9.46899 305.828 9.422 305.855 9.37903 cv
305.879 9.34399 305.926 9.31201 305.996 9.28101 cv
306.063 9.258 306.148 9.23798 306.258 9.22302 cv
306.363 9.21503 306.496 9.20697 306.66 9.203 cv
306.824 9.20697 306.961 9.21503 307.07 9.22302 cv
307.176 9.23798 307.262 9.258 307.324 9.28101 cv
307.383 9.31201 307.426 9.34399 307.453 9.37903 cv
307.477 9.422 307.488 9.46899 307.492 9.51599 cv
307.492 10.316 li
307.875 9.90601 308.266 9.59399 308.664 9.383 cv
309.059 9.17603 309.477 9.07397 309.91 9.07001 cv
310.379 9.07397 310.777 9.15198 311.105 9.30499 cv
311.43 9.46503 311.691 9.67603 311.891 9.94098 cv
312.09 10.211 312.234 10.523 312.324 10.879 cv
312.41 11.238 312.453 11.668 312.457 12.172 cv
cp
f
324.867 7.48798 mo
324.863 7.64502 324.855 7.77301 324.848 7.875 cv
324.832 7.98401 324.813 8.07001 324.789 8.133 cv
324.758 8.19897 324.727 8.24597 324.691 8.27301 cv
324.648 8.30902 324.605 8.32397 324.563 8.32001 cv
322.039 8.32001 li
322.039 16.449 li
322.039 16.504 322.02 16.551 321.988 16.59 cv
321.949 16.633 321.895 16.668 321.82 16.691 cv
321.738 16.719 321.633 16.738 321.504 16.754 cv
321.367 16.77 321.203 16.777 321.008 16.777 cv
320.813 16.777 320.648 16.77 320.516 16.754 cv
320.383 16.738 320.277 16.719 320.199 16.691 cv
320.121 16.668 320.063 16.633 320.031 16.59 cv
319.992 16.551 319.977 16.504 319.98 16.449 cv
319.98 8.32001 li
317.457 8.32001 li
317.402 8.32397 317.355 8.30902 317.324 8.27301 cv
317.285 8.24597 317.254 8.19897 317.23 8.133 cv
317.199 8.07001 317.18 7.98401 317.172 7.875 cv
317.156 7.77301 317.152 7.64502 317.152 7.48798 cv
317.152 7.336 317.156 7.203 317.172 7.09003 cv
317.18 6.98401 317.199 6.89502 317.23 6.828 cv
317.254 6.76599 317.285 6.71899 317.324 6.68701 cv
317.355 6.65997 317.402 6.64801 317.457 6.64502 cv
324.563 6.64502 li
324.605 6.64801 324.648 6.65997 324.691 6.68701 cv
324.727 6.71899 324.758 6.76599 324.789 6.828 cv
324.813 6.89502 324.832 6.98401 324.848 7.09003 cv
324.855 7.203 324.863 7.336 324.867 7.48798 cv
cp
f
327.906 16.465 mo
327.902 16.52 327.887 16.562 327.859 16.602 cv
327.824 16.641 327.77 16.676 327.699 16.699 cv
327.621 16.727 327.523 16.742 327.398 16.758 cv
327.273 16.77 327.113 16.777 326.926 16.777 cv
326.73 16.777 326.574 16.77 326.449 16.758 cv
326.324 16.742 326.223 16.727 326.148 16.699 cv
326.07 16.676 326.016 16.641 325.988 16.602 cv
325.953 16.562 325.938 16.52 325.941 16.465 cv
325.941 9.53101 li
325.938 9.47998 325.953 9.43402 325.988 9.39502 cv
326.016 9.35498 326.07 9.32397 326.148 9.29303 cv
326.223 9.27002 326.324 9.24597 326.449 9.22699 cv
326.574 9.21503 326.73 9.20697 326.926 9.203 cv
327.113 9.20697 327.273 9.21503 327.398 9.22699 cv
327.523 9.24597 327.621 9.27002 327.699 9.29303 cv
327.77 9.32397 327.824 9.35498 327.859 9.39502 cv
327.887 9.43402 327.902 9.47998 327.906 9.53101 cv
cp
328.055 7.15997 mo
328.055 7.55902 327.973 7.83197 327.813 7.97998 cv
327.648 8.133 327.352 8.20697 326.918 8.203 cv
326.473 8.20697 326.172 8.133 326.023 7.98798 cv
325.867 7.84399 325.793 7.58197 325.793 7.19897 cv
325.793 6.80499 325.871 6.53101 326.031 6.37903 cv
326.188 6.22699 326.488 6.14801 326.934 6.14801 cv
327.367 6.14801 327.664 6.22302 327.82 6.37097 cv
327.977 6.52002 328.055 6.78497 328.055 7.15997 cv
cp
f
340.957 16.465 mo
340.953 16.52 340.938 16.562 340.91 16.602 cv
340.875 16.641 340.824 16.676 340.754 16.699 cv
340.68 16.727 340.578 16.742 340.457 16.758 cv
340.332 16.77 340.176 16.777 339.984 16.777 cv
339.785 16.777 339.625 16.77 339.5 16.758 cv
339.375 16.742 339.273 16.727 339.199 16.699 cv
339.121 16.676 339.07 16.641 339.043 16.602 cv
339.016 16.562 339 16.52 339.004 16.465 cv
339.004 12.344 li
339 12.113 338.98 11.898 338.938 11.703 cv
338.891 11.512 338.82 11.348 338.734 11.211 cv
338.641 11.074 338.527 10.969 338.391 10.891 cv
338.25 10.816 338.086 10.777 337.895 10.777 cv
337.66 10.777 337.422 10.871 337.184 11.051 cv
336.945 11.234 336.688 11.496 336.406 11.844 cv
336.406 16.465 li
336.406 16.52 336.391 16.562 336.359 16.602 cv
336.328 16.641 336.273 16.676 336.199 16.699 cv
336.121 16.727 336.02 16.742 335.898 16.758 cv
335.773 16.77 335.621 16.777 335.434 16.777 cv
335.238 16.777 335.078 16.77 334.957 16.758 cv
334.828 16.742 334.727 16.727 334.656 16.699 cv
334.578 16.676 334.527 16.641 334.496 16.602 cv
334.465 16.562 334.449 16.52 334.449 16.465 cv
334.449 12.344 li
334.449 12.113 334.426 11.898 334.383 11.703 cv
334.34 11.512 334.273 11.348 334.188 11.211 cv
334.094 11.074 333.98 10.969 333.844 10.891 cv
333.699 10.816 333.535 10.777 333.352 10.777 cv
333.109 10.777 332.871 10.871 332.633 11.051 cv
332.395 11.234 332.137 11.496 331.863 11.844 cv
331.863 16.465 li
331.859 16.52 331.844 16.562 331.816 16.602 cv
331.781 16.641 331.727 16.676 331.656 16.699 cv
331.578 16.727 331.48 16.742 331.355 16.758 cv
331.23 16.77 331.07 16.777 330.883 16.777 cv
330.688 16.777 330.531 16.77 330.406 16.758 cv
330.281 16.742 330.18 16.727 330.105 16.699 cv
330.027 16.676 329.973 16.641 329.945 16.602 cv
329.91 16.562 329.895 16.52 329.898 16.465 cv
329.898 9.51599 li
329.895 9.46899 329.91 9.422 329.938 9.37903 cv
329.961 9.34399 330.008 9.31201 330.078 9.28101 cv
330.145 9.258 330.23 9.23798 330.34 9.22302 cv
330.445 9.21503 330.578 9.20697 330.742 9.203 cv
330.906 9.20697 331.043 9.21503 331.152 9.22302 cv
331.258 9.23798 331.344 9.258 331.406 9.28101 cv
331.465 9.31201 331.508 9.34399 331.535 9.37903 cv
331.559 9.422 331.57 9.46899 331.574 9.51599 cv
331.574 10.316 li
331.957 9.90601 332.34 9.59399 332.723 9.383 cv
333.102 9.17603 333.504 9.07397 333.922 9.07001 cv
334.207 9.07397 334.461 9.10199 334.691 9.15997 cv
334.918 9.22302 335.125 9.30902 335.305 9.41803 cv
335.484 9.53101 335.637 9.66803 335.766 9.82001 cv
335.895 9.97699 336.004 10.148 336.094 10.34 cv
336.301 10.117 336.504 9.92603 336.707 9.76599 cv
336.902 9.60498 337.102 9.47302 337.297 9.37097 cv
337.492 9.27002 337.688 9.19501 337.883 9.14502 cv
338.078 9.09802 338.277 9.07397 338.48 9.07001 cv
338.941 9.07397 339.328 9.15198 339.648 9.30499 cv
339.961 9.46503 340.219 9.67603 340.414 9.94098 cv
340.609 10.211 340.746 10.523 340.832 10.879 cv
340.91 11.238 340.953 11.617 340.957 12.016 cv
cp
f
349.297 12.789 mo
349.293 13.027 349.242 13.203 349.137 13.316 cv
349.027 13.434 348.879 13.492 348.699 13.488 cv
344.465 13.488 li
344.461 13.789 344.496 14.059 344.57 14.297 cv
344.637 14.539 344.75 14.742 344.906 14.91 cv
345.059 15.082 345.254 15.211 345.496 15.297 cv
345.734 15.387 346.023 15.43 346.367 15.43 cv
346.707 15.43 347.008 15.406 347.27 15.355 cv
347.527 15.309 347.754 15.254 347.945 15.191 cv
348.133 15.133 348.289 15.078 348.418 15.027 cv
348.539 14.98 348.641 14.957 348.723 14.953 cv
348.766 14.957 348.805 14.965 348.84 14.98 cv
348.867 15 348.895 15.031 348.914 15.078 cv
348.934 15.125 348.945 15.191 348.957 15.277 cv
348.961 15.363 348.965 15.473 348.969 15.602 cv
348.965 15.719 348.965 15.816 348.961 15.895 cv
348.953 15.977 348.945 16.043 348.938 16.098 cv
348.926 16.156 348.91 16.207 348.891 16.242 cv
348.871 16.285 348.844 16.32 348.813 16.355 cv
348.777 16.395 348.684 16.445 348.535 16.504 cv
348.379 16.57 348.188 16.633 347.957 16.687 cv
347.719 16.75 347.449 16.797 347.152 16.844 cv
346.848 16.883 346.527 16.906 346.188 16.91 cv
345.566 16.906 345.023 16.832 344.563 16.676 cv
344.094 16.523 343.707 16.285 343.398 15.969 cv
343.082 15.652 342.848 15.254 342.699 14.77 cv
342.543 14.289 342.469 13.723 342.473 13.066 cv
342.469 12.453 342.547 11.895 342.711 11.398 cv
342.867 10.902 343.102 10.484 343.414 10.137 cv
343.719 9.79303 344.094 9.52698 344.531 9.34399 cv
344.969 9.164 345.461 9.07397 346.016 9.07001 cv
346.594 9.07397 347.094 9.15997 347.508 9.328 cv
347.922 9.50403 348.258 9.742 348.523 10.043 cv
348.785 10.348 348.98 10.707 349.109 11.121 cv
349.23 11.539 349.293 11.988 349.297 12.477 cv
cp
347.395 12.227 mo
347.406 11.676 347.297 11.242 347.063 10.93 cv
346.828 10.617 346.461 10.461 345.969 10.457 cv
345.719 10.461 345.504 10.508 345.32 10.598 cv
345.133 10.695 344.98 10.82 344.859 10.977 cv
344.734 11.137 344.641 11.324 344.578 11.539 cv
344.512 11.754 344.473 11.984 344.465 12.227 cv
cp
f
355.797 14.5 mo
355.793 14.898 355.719 15.246 355.574 15.547 cv
355.426 15.848 355.219 16.102 354.949 16.301 cv
354.676 16.508 354.355 16.656 353.988 16.758 cv
353.621 16.855 353.219 16.906 352.789 16.91 cv
352.523 16.906 352.277 16.887 352.043 16.852 cv
351.809 16.809 351.598 16.762 351.41 16.703 cv
351.223 16.645 351.066 16.582 350.941 16.52 cv
350.816 16.457 350.723 16.398 350.668 16.344 cv
350.609 16.289 350.566 16.207 350.539 16.09 cv
350.504 15.977 350.488 15.801 350.492 15.57 cv
350.488 15.422 350.496 15.301 350.508 15.207 cv
350.516 15.117 350.531 15.047 350.555 14.988 cv
350.574 14.937 350.598 14.898 350.633 14.879 cv
350.66 14.863 350.699 14.855 350.746 14.852 cv
350.801 14.855 350.887 14.887 351 14.949 cv
351.109 15.016 351.246 15.09 351.418 15.164 cv
351.582 15.246 351.777 15.316 351.996 15.383 cv
352.215 15.453 352.465 15.488 352.75 15.484 cv
352.926 15.488 353.082 15.469 353.223 15.43 cv
353.355 15.395 353.477 15.344 353.582 15.273 cv
353.68 15.207 353.754 15.121 353.809 15.016 cv
353.855 14.914 353.883 14.793 353.887 14.656 cv
353.883 14.5 353.836 14.367 353.742 14.258 cv
353.648 14.148 353.52 14.051 353.363 13.965 cv
353.199 13.883 353.02 13.805 352.824 13.73 cv
352.621 13.66 352.418 13.582 352.207 13.488 cv
351.996 13.402 351.789 13.301 351.594 13.184 cv
351.391 13.074 351.211 12.934 351.055 12.766 cv
350.891 12.602 350.766 12.402 350.672 12.164 cv
350.578 11.934 350.531 11.652 350.531 11.32 cv
350.531 10.992 350.594 10.687 350.723 10.406 cv
350.852 10.133 351.039 9.89502 351.285 9.69501 cv
351.527 9.5 351.824 9.34802 352.176 9.23401 cv
352.523 9.12903 352.918 9.07397 353.359 9.07001 cv
353.574 9.07397 353.785 9.09003 353.992 9.117 cv
354.195 9.15198 354.383 9.19098 354.551 9.23401 cv
354.715 9.28497 354.855 9.336 354.973 9.38702 cv
355.086 9.44501 355.168 9.492 355.219 9.52698 cv
355.266 9.57001 355.301 9.60901 355.324 9.64502 cv
355.344 9.68701 355.355 9.73401 355.367 9.78497 cv
355.375 9.84003 355.387 9.90601 355.395 9.98401 cv
355.402 10.07 355.406 10.168 355.406 10.285 cv
355.406 10.426 355.402 10.543 355.395 10.629 cv
355.387 10.723 355.371 10.793 355.355 10.84 cv
355.336 10.895 355.313 10.93 355.285 10.945 cv
355.25 10.969 355.215 10.977 355.176 10.973 cv
355.125 10.977 355.051 10.949 354.957 10.891 cv
354.855 10.84 354.734 10.781 354.586 10.715 cv
354.438 10.656 354.266 10.598 354.07 10.539 cv
353.875 10.488 353.652 10.461 353.406 10.457 cv
353.227 10.461 353.074 10.48 352.945 10.512 cv
352.813 10.551 352.703 10.602 352.625 10.668 cv
352.539 10.738 352.477 10.816 352.438 10.906 cv
352.391 11 352.371 11.098 352.375 11.199 cv
352.371 11.359 352.422 11.496 352.523 11.602 cv
352.621 11.715 352.75 11.809 352.914 11.891 cv
353.074 11.977 353.258 12.055 353.465 12.125 cv
353.668 12.199 353.875 12.281 354.086 12.363 cv
354.293 12.453 354.5 12.551 354.711 12.664 cv
354.914 12.777 355.098 12.918 355.258 13.082 cv
355.418 13.25 355.547 13.449 355.648 13.68 cv
355.742 13.914 355.793 14.187 355.797 14.5 cv
cp
f
367.91 12.918 mo
367.906 13.516 367.828 14.059 367.676 14.543 cv
367.516 15.035 367.281 15.453 366.965 15.805 cv
366.648 16.156 366.25 16.43 365.773 16.621 cv
365.293 16.812 364.734 16.906 364.098 16.91 cv
363.477 16.906 362.938 16.824 362.484 16.652 cv
362.023 16.484 361.645 16.234 361.348 15.906 cv
361.043 15.582 360.82 15.18 360.676 14.699 cv
360.531 14.223 360.461 13.676 360.461 13.059 cv
360.461 12.469 360.539 11.93 360.695 11.437 cv
360.852 10.949 361.09 10.527 361.41 10.176 cv
361.727 9.828 362.121 9.55499 362.598 9.35901 cv
363.07 9.16803 363.629 9.07397 364.27 9.07001 cv
364.895 9.07397 365.434 9.15601 365.891 9.32397 cv
366.348 9.49597 366.727 9.74597 367.023 10.07 cv
367.32 10.398 367.543 10.801 367.691 11.277 cv
367.836 11.758 367.906 12.305 367.91 12.918 cv
cp
365.891 12.996 mo
365.887 12.66 365.859 12.344 365.809 12.051 cv
365.75 11.766 365.656 11.516 365.531 11.301 cv
365.398 11.09 365.227 10.922 365.016 10.801 cv
364.797 10.684 364.527 10.625 364.199 10.621 cv
363.91 10.625 363.656 10.68 363.438 10.781 cv
363.219 10.891 363.039 11.047 362.898 11.25 cv
362.758 11.457 362.652 11.703 362.582 11.988 cv
362.512 12.281 362.477 12.609 362.477 12.973 cv
362.477 13.32 362.504 13.637 362.563 13.922 cv
362.617 14.215 362.711 14.465 362.84 14.676 cv
362.965 14.891 363.137 15.055 363.359 15.168 cv
363.574 15.289 363.844 15.348 364.168 15.344 cv
364.461 15.348 364.719 15.293 364.941 15.184 cv
365.156 15.078 365.336 14.926 365.477 14.719 cv
365.617 14.52 365.719 14.273 365.789 13.984 cv
365.852 13.699 365.887 13.371 365.891 12.996 cv
cp
f
373.66 6.86298 mo
373.656 7.01599 373.652 7.13702 373.645 7.22699 cv
373.633 7.32001 373.617 7.39099 373.598 7.43701 cv
373.574 7.48798 373.551 7.52301 373.527 7.539 cv
373.5 7.55902 373.473 7.56598 373.441 7.56598 cv
373.402 7.56598 373.359 7.55902 373.32 7.539 cv
373.273 7.52301 373.219 7.50403 373.156 7.47998 cv
373.086 7.461 373.012 7.44098 372.926 7.422 cv
372.836 7.40601 372.73 7.39801 372.613 7.39502 cv
372.469 7.39801 372.348 7.41803 372.25 7.461 cv
372.148 7.508 372.066 7.578 372 7.672 cv
371.93 7.77002 371.879 7.89502 371.852 8.047 cv
371.816 8.19897 371.801 8.38702 371.805 8.60901 cv
371.805 9.25 li
373.074 9.25 li
373.117 9.25403 373.16 9.26599 373.203 9.289 cv
373.238 9.31598 373.273 9.35901 373.301 9.41803 cv
373.324 9.47998 373.344 9.56201 373.359 9.664 cv
373.371 9.76599 373.375 9.89502 373.379 10.043 cv
373.375 10.332 373.352 10.535 373.301 10.656 cv
373.246 10.781 373.168 10.844 373.074 10.84 cv
371.805 10.84 li
371.805 16.465 li
371.801 16.52 371.785 16.562 371.758 16.602 cv
371.723 16.641 371.672 16.676 371.602 16.699 cv
371.527 16.727 371.426 16.742 371.297 16.758 cv
371.164 16.77 371.004 16.777 370.82 16.777 cv
370.633 16.777 370.477 16.77 370.352 16.758 cv
370.223 16.742 370.121 16.727 370.047 16.699 cv
369.969 16.676 369.918 16.641 369.891 16.602 cv
369.859 16.562 369.844 16.52 369.848 16.465 cv
369.848 10.84 li
368.977 10.84 li
368.875 10.844 368.801 10.781 368.754 10.656 cv
368.703 10.535 368.676 10.332 368.68 10.043 cv
368.676 9.89502 368.684 9.76599 368.699 9.664 cv
368.711 9.56201 368.73 9.47998 368.754 9.41803 cv
368.777 9.35901 368.809 9.31598 368.848 9.289 cv
368.887 9.26599 368.93 9.25403 368.984 9.25 cv
369.848 9.25 li
369.848 8.664 li
369.844 8.19501 369.891 7.78101 369.988 7.422 cv
370.078 7.06598 370.227 6.77002 370.43 6.53497 cv
370.629 6.30103 370.883 6.125 371.191 6 cv
371.5 5.883 371.863 5.82001 372.289 5.82001 cv
372.484 5.82001 372.676 5.84003 372.863 5.87097 cv
373.043 5.90997 373.188 5.94501 373.293 5.97998 cv
373.395 6.02301 373.465 6.05902 373.504 6.09003 cv
373.539 6.125 373.57 6.17603 373.594 6.23798 cv
373.617 6.30499 373.633 6.38702 373.645 6.48798 cv
373.652 6.59003 373.656 6.71503 373.66 6.86298 cv
cp
f
384.207 13.707 mo
384.203 14.238 384.105 14.703 383.91 15.102 cv
383.711 15.504 383.445 15.84 383.109 16.105 cv
382.77 16.375 382.371 16.574 381.922 16.707 cv
381.469 16.84 380.988 16.906 380.477 16.91 cv
380.125 16.906 379.801 16.879 379.504 16.824 cv
379.203 16.766 378.941 16.699 378.715 16.617 cv
378.484 16.539 378.293 16.453 378.141 16.363 cv
377.988 16.277 377.879 16.199 377.813 16.129 cv
377.742 16.062 377.691 15.965 377.668 15.84 cv
377.637 15.715 377.625 15.531 377.625 15.289 cv
377.625 15.129 377.629 14.996 377.641 14.883 cv
377.648 14.777 377.664 14.687 377.691 14.617 cv
377.711 14.551 377.742 14.504 377.785 14.473 cv
377.82 14.449 377.867 14.434 377.918 14.43 cv
377.988 14.434 378.09 14.477 378.227 14.559 cv
378.355 14.648 378.527 14.742 378.738 14.844 cv
378.945 14.949 379.191 15.047 379.48 15.129 cv
379.766 15.219 380.102 15.262 380.484 15.258 cv
380.734 15.262 380.957 15.23 381.152 15.168 cv
381.348 15.109 381.516 15.023 381.656 14.914 cv
381.793 14.805 381.898 14.672 381.973 14.512 cv
382.043 14.352 382.078 14.172 382.082 13.973 cv
382.078 13.746 382.016 13.551 381.895 13.383 cv
381.766 13.223 381.602 13.078 381.406 12.949 cv
381.203 12.824 380.977 12.703 380.723 12.59 cv
380.469 12.48 380.207 12.363 379.938 12.234 cv
379.664 12.113 379.402 11.969 379.148 11.809 cv
378.895 11.652 378.668 11.465 378.469 11.242 cv
378.266 11.023 378.102 10.762 377.98 10.457 cv
377.855 10.156 377.793 9.797 377.797 9.375 cv
377.793 8.89502 377.883 8.46899 378.063 8.10199 cv
378.238 7.73798 378.48 7.43402 378.789 7.18701 cv
379.09 6.94897 379.449 6.77002 379.863 6.64801 cv
380.277 6.53101 380.715 6.47302 381.176 6.46899 cv
381.414 6.47302 381.652 6.48798 381.895 6.52301 cv
382.133 6.56201 382.355 6.61298 382.563 6.672 cv
382.77 6.73401 382.953 6.80499 383.117 6.87903 cv
383.273 6.961 383.383 7.02301 383.438 7.07397 cv
383.488 7.12903 383.523 7.17603 383.543 7.20697 cv
383.559 7.24597 383.574 7.29303 383.59 7.35199 cv
383.602 7.414 383.609 7.48798 383.617 7.578 cv
383.621 7.672 383.625 7.78497 383.625 7.91803 cv
383.625 8.07001 383.621 8.19897 383.613 8.30103 cv
383.605 8.40601 383.59 8.492 383.574 8.55499 cv
383.551 8.625 383.527 8.672 383.496 8.703 cv
383.461 8.73401 383.414 8.75 383.359 8.75 cv
383.301 8.75 383.211 8.71503 383.086 8.64099 cv
382.961 8.57001 382.805 8.492 382.625 8.40198 cv
382.441 8.32001 382.234 8.242 381.996 8.172 cv
381.754 8.10498 381.488 8.07001 381.207 8.06598 cv
380.98 8.07001 380.789 8.09802 380.625 8.14801 cv
380.457 8.203 380.316 8.27698 380.207 8.37097 cv
380.094 8.46899 380.012 8.586 379.957 8.71899 cv
379.902 8.85901 379.875 9 379.875 9.14801 cv
379.875 9.375 379.934 9.57001 380.059 9.72998 cv
380.176 9.89502 380.34 10.039 380.551 10.164 cv
380.754 10.293 380.988 10.414 381.246 10.523 cv
381.504 10.641 381.77 10.758 382.043 10.879 cv
382.313 11.008 382.574 11.148 382.836 11.305 cv
383.094 11.461 383.328 11.652 383.531 11.871 cv
383.734 12.098 383.895 12.355 384.02 12.652 cv
384.141 12.949 384.203 13.301 384.207 13.707 cv
cp
f
392.258 16.465 mo
392.254 16.52 392.242 16.562 392.219 16.602 cv
392.191 16.641 392.145 16.676 392.082 16.699 cv
392.016 16.727 391.93 16.742 391.824 16.758 cv
391.719 16.77 391.586 16.777 391.426 16.777 cv
391.25 16.777 391.109 16.77 391.008 16.758 cv
390.898 16.742 390.816 16.727 390.754 16.699 cv
390.691 16.676 390.645 16.641 390.621 16.602 cv
390.59 16.562 390.578 16.52 390.582 16.465 cv
390.582 15.664 li
390.195 16.078 389.805 16.391 389.41 16.598 cv
389.008 16.805 388.598 16.906 388.176 16.91 cv
387.695 16.906 387.293 16.832 386.969 16.676 cv
386.645 16.523 386.383 16.309 386.184 16.039 cv
385.98 15.77 385.836 15.457 385.754 15.098 cv
385.664 14.742 385.621 14.301 385.625 13.77 cv
385.625 9.51599 li
385.621 9.46899 385.637 9.422 385.668 9.37903 cv
385.695 9.34399 385.746 9.31201 385.824 9.28101 cv
385.898 9.258 386 9.23798 386.129 9.22302 cv
386.254 9.21503 386.41 9.20697 386.602 9.203 cv
386.789 9.20697 386.949 9.21503 387.074 9.22302 cv
387.199 9.23798 387.297 9.258 387.375 9.28101 cv
387.445 9.31201 387.5 9.34399 387.535 9.37903 cv
387.563 9.422 387.578 9.46899 387.582 9.51599 cv
387.582 13.441 li
387.578 13.809 387.602 14.086 387.652 14.277 cv
387.695 14.469 387.766 14.633 387.867 14.77 cv
387.961 14.91 388.086 15.016 388.234 15.09 cv
388.383 15.168 388.555 15.207 388.75 15.203 cv
389 15.207 389.25 15.117 389.504 14.93 cv
389.754 14.75 390.023 14.484 390.309 14.137 cv
390.309 9.51599 li
390.309 9.46899 390.32 9.422 390.352 9.37903 cv
390.375 9.34399 390.43 9.31201 390.508 9.28101 cv
390.582 9.258 390.68 9.23798 390.809 9.22302 cv
390.93 9.21503 391.09 9.20697 391.285 9.203 cv
391.477 9.20697 391.633 9.21503 391.758 9.22302 cv
391.879 9.23798 391.98 9.258 392.055 9.28101 cv
392.125 9.31201 392.176 9.34399 392.211 9.37903 cv
392.238 9.422 392.254 9.46899 392.258 9.51599 cv
cp
f
401.234 12.895 mo
401.234 13.516 401.164 14.074 401.031 14.566 cv
400.891 15.062 400.695 15.48 400.445 15.828 cv
400.188 16.176 399.875 16.445 399.508 16.629 cv
399.133 16.816 398.711 16.906 398.242 16.91 cv
398.004 16.906 397.785 16.883 397.586 16.844 cv
397.379 16.797 397.188 16.73 397.004 16.629 cv
396.82 16.535 396.637 16.41 396.461 16.254 cv
396.277 16.105 396.094 15.922 395.91 15.711 cv
395.91 16.465 li
395.906 16.527 395.895 16.574 395.867 16.609 cv
395.836 16.652 395.789 16.684 395.727 16.707 cv
395.66 16.73 395.57 16.746 395.465 16.762 cv
395.355 16.77 395.227 16.777 395.07 16.777 cv
394.906 16.777 394.77 16.77 394.668 16.762 cv
394.559 16.746 394.473 16.73 394.41 16.707 cv
394.34 16.684 394.297 16.652 394.273 16.609 cv
394.246 16.574 394.23 16.527 394.234 16.465 cv
394.234 6.21899 li
394.23 6.16803 394.246 6.12097 394.281 6.078 cv
394.309 6.039 394.363 6.00403 394.441 5.97302 cv
394.516 5.94501 394.617 5.92603 394.742 5.90601 cv
394.867 5.89502 395.023 5.88702 395.219 5.883 cv
395.406 5.88702 395.566 5.89502 395.691 5.90601 cv
395.816 5.92603 395.914 5.94501 395.992 5.97302 cv
396.063 6.00403 396.117 6.039 396.152 6.078 cv
396.18 6.12097 396.195 6.16803 396.199 6.21899 cv
396.199 10.059 li
396.375 9.883 396.551 9.73401 396.73 9.60901 cv
396.902 9.48798 397.078 9.383 397.258 9.30103 cv
397.43 9.22302 397.613 9.164 397.805 9.125 cv
397.988 9.09003 398.188 9.07397 398.398 9.07001 cv
398.91 9.07397 399.344 9.17603 399.707 9.37903 cv
400.063 9.586 400.355 9.86298 400.582 10.211 cv
400.805 10.559 400.969 10.965 401.078 11.43 cv
401.18 11.895 401.234 12.383 401.234 12.895 cv
cp
399.199 13.035 mo
399.195 12.742 399.172 12.457 399.133 12.18 cv
399.086 11.906 399.012 11.664 398.902 11.449 cv
398.793 11.238 398.648 11.066 398.477 10.937 cv
398.301 10.812 398.082 10.75 397.82 10.746 cv
397.688 10.75 397.563 10.766 397.438 10.801 cv
397.313 10.84 397.184 10.902 397.051 10.988 cv
396.918 11.078 396.781 11.195 396.645 11.332 cv
396.5 11.473 396.352 11.645 396.199 11.852 cv
396.199 14.16 li
396.473 14.516 396.734 14.785 396.988 14.965 cv
397.238 15.152 397.504 15.242 397.781 15.242 cv
398.035 15.242 398.25 15.18 398.43 15.047 cv
398.602 14.922 398.75 14.754 398.867 14.543 cv
398.984 14.34 399.066 14.102 399.121 13.832 cv
399.168 13.57 399.195 13.305 399.199 13.035 cv
cp
f
406.254 12.812 mo
406.25 13.113 406.223 13.324 406.168 13.441 cv
406.109 13.566 406.02 13.625 405.895 13.621 cv
402.652 13.621 li
402.523 13.625 402.43 13.562 402.375 13.437 cv
402.313 13.316 402.285 13.109 402.289 12.812 cv
402.285 12.523 402.313 12.316 402.375 12.195 cv
402.43 12.078 402.523 12.02 402.652 12.016 cv
405.895 12.016 li
405.957 12.02 406.008 12.031 406.055 12.055 cv
406.094 12.082 406.133 12.129 406.168 12.187 cv
406.195 12.254 406.219 12.336 406.234 12.437 cv
406.246 12.543 406.25 12.668 406.254 12.812 cv
cp
f
409.906 16.449 mo
409.902 16.504 409.887 16.551 409.855 16.59 cv
409.82 16.633 409.762 16.668 409.688 16.691 cv
409.605 16.719 409.504 16.738 409.375 16.754 cv
409.242 16.77 409.074 16.777 408.879 16.777 cv
408.676 16.777 408.512 16.77 408.383 16.754 cv
408.246 16.738 408.141 16.719 408.066 16.691 cv
407.984 16.668 407.93 16.633 407.898 16.59 cv
407.863 16.551 407.844 16.504 407.848 16.449 cv
407.848 6.92603 li
407.844 6.87903 407.863 6.83197 407.898 6.78497 cv
407.93 6.74597 407.984 6.711 408.07 6.68402 cv
408.148 6.65997 408.254 6.64099 408.387 6.62097 cv
408.512 6.60901 408.676 6.60199 408.879 6.59802 cv
409.074 6.60199 409.242 6.60901 409.375 6.62097 cv
409.504 6.64099 409.605 6.65997 409.688 6.68402 cv
409.762 6.711 409.82 6.74597 409.855 6.78497 cv
409.887 6.83197 409.902 6.87903 409.906 6.92603 cv
cp
f
422.988 16.465 mo
422.984 16.52 422.969 16.562 422.941 16.602 cv
422.906 16.641 422.855 16.676 422.785 16.699 cv
422.711 16.727 422.609 16.742 422.488 16.758 cv
422.363 16.77 422.207 16.777 422.016 16.777 cv
421.816 16.777 421.656 16.77 421.531 16.758 cv
421.406 16.742 421.305 16.727 421.23 16.699 cv
421.152 16.676 421.102 16.641 421.074 16.602 cv
421.047 16.562 421.031 16.52 421.035 16.465 cv
421.035 12.344 li
421.031 12.113 421.012 11.898 420.969 11.703 cv
420.922 11.512 420.852 11.348 420.766 11.211 cv
420.672 11.074 420.559 10.969 420.422 10.891 cv
420.281 10.816 420.117 10.777 419.926 10.777 cv
419.691 10.777 419.453 10.871 419.215 11.051 cv
418.977 11.234 418.719 11.496 418.438 11.844 cv
418.438 16.465 li
418.438 16.52 418.422 16.562 418.391 16.602 cv
418.359 16.641 418.305 16.676 418.23 16.699 cv
418.152 16.727 418.051 16.742 417.93 16.758 cv
417.805 16.77 417.652 16.777 417.465 16.777 cv
417.27 16.777 417.109 16.77 416.988 16.758 cv
416.859 16.742 416.758 16.727 416.688 16.699 cv
416.609 16.676 416.559 16.641 416.527 16.602 cv
416.496 16.562 416.48 16.52 416.48 16.465 cv
416.48 12.344 li
416.48 12.113 416.457 11.898 416.414 11.703 cv
416.371 11.512 416.305 11.348 416.219 11.211 cv
416.125 11.074 416.012 10.969 415.875 10.891 cv
415.73 10.816 415.566 10.777 415.383 10.777 cv
415.141 10.777 414.902 10.871 414.664 11.051 cv
414.426 11.234 414.168 11.496 413.895 11.844 cv
413.895 16.465 li
413.891 16.52 413.875 16.562 413.848 16.602 cv
413.813 16.641 413.758 16.676 413.688 16.699 cv
413.609 16.727 413.512 16.742 413.387 16.758 cv
413.262 16.77 413.102 16.777 412.914 16.777 cv
412.719 16.777 412.563 16.77 412.438 16.758 cv
412.313 16.742 412.211 16.727 412.137 16.699 cv
412.059 16.676 412.004 16.641 411.977 16.602 cv
411.941 16.562 411.926 16.52 411.93 16.465 cv
411.93 9.51599 li
411.926 9.46899 411.941 9.422 411.969 9.37903 cv
411.992 9.34399 412.039 9.31201 412.109 9.28101 cv
412.176 9.258 412.262 9.23798 412.371 9.22302 cv
412.477 9.21503 412.609 9.20697 412.773 9.203 cv
412.938 9.20697 413.074 9.21503 413.184 9.22302 cv
413.289 9.23798 413.375 9.258 413.438 9.28101 cv
413.496 9.31201 413.539 9.34399 413.566 9.37903 cv
413.59 9.422 413.602 9.46899 413.605 9.51599 cv
413.605 10.316 li
413.988 9.90601 414.371 9.59399 414.754 9.383 cv
415.133 9.17603 415.535 9.07397 415.953 9.07001 cv
416.238 9.07397 416.492 9.10199 416.723 9.15997 cv
416.949 9.22302 417.156 9.30902 417.336 9.41803 cv
417.516 9.53101 417.668 9.66803 417.797 9.82001 cv
417.926 9.97699 418.035 10.148 418.125 10.34 cv
418.332 10.117 418.535 9.92603 418.738 9.76599 cv
418.934 9.60498 419.133 9.47302 419.328 9.37097 cv
419.523 9.27002 419.719 9.19501 419.914 9.14502 cv
420.109 9.09802 420.309 9.07397 420.512 9.07001 cv
420.973 9.07397 421.359 9.15198 421.68 9.30499 cv
421.992 9.46503 422.25 9.67603 422.445 9.94098 cv
422.641 10.211 422.777 10.523 422.863 10.879 cv
422.941 11.238 422.984 11.617 422.988 12.016 cv
cp
f
430.828 16.488 mo
430.824 16.566 430.797 16.621 430.75 16.66 cv
430.695 16.703 430.613 16.73 430.504 16.75 cv
430.387 16.766 430.223 16.777 430.008 16.777 cv
429.77 16.777 429.598 16.766 429.496 16.75 cv
429.387 16.73 429.313 16.703 429.273 16.66 cv
429.227 16.621 429.207 16.566 429.207 16.488 cv
429.207 15.937 li
428.918 16.246 428.59 16.484 428.227 16.652 cv
427.859 16.824 427.453 16.906 427.008 16.91 cv
426.637 16.906 426.297 16.859 425.988 16.766 cv
425.68 16.672 425.414 16.531 425.188 16.336 cv
424.961 16.148 424.785 15.914 424.66 15.633 cv
424.535 15.355 424.473 15.027 424.477 14.648 cv
424.473 14.25 424.551 13.898 424.711 13.594 cv
424.867 13.297 425.105 13.051 425.422 12.855 cv
425.734 12.664 426.125 12.52 426.594 12.422 cv
427.063 12.332 427.605 12.285 428.223 12.281 cv
428.902 12.281 li
428.902 11.859 li
428.902 11.645 428.879 11.453 428.836 11.289 cv
428.789 11.129 428.715 10.992 428.617 10.879 cv
428.512 10.773 428.379 10.691 428.211 10.637 cv
428.039 10.586 427.828 10.562 427.586 10.559 cv
427.254 10.562 426.961 10.598 426.707 10.668 cv
426.445 10.742 426.219 10.824 426.023 10.91 cv
425.824 11.004 425.66 11.082 425.531 11.152 cv
425.395 11.227 425.285 11.266 425.207 11.262 cv
425.145 11.266 425.094 11.246 425.055 11.207 cv
425.008 11.172 424.973 11.121 424.945 11.051 cv
424.914 10.988 424.891 10.902 424.879 10.801 cv
424.859 10.703 424.852 10.594 424.855 10.473 cv
424.852 10.312 424.867 10.187 424.895 10.09 cv
424.918 10 424.965 9.914 425.043 9.836 cv
425.113 9.76202 425.242 9.67999 425.426 9.59003 cv
425.605 9.5 425.816 9.414 426.063 9.336 cv
426.305 9.258 426.574 9.19501 426.863 9.14502 cv
427.152 9.09802 427.449 9.07397 427.758 9.07001 cv
428.301 9.07397 428.766 9.125 429.152 9.22998 cv
429.539 9.34003 429.859 9.50403 430.109 9.72302 cv
430.359 9.94098 430.539 10.227 430.656 10.574 cv
430.766 10.926 430.824 11.34 430.828 11.812 cv
cp
428.902 13.512 mo
428.152 13.512 li
427.836 13.516 427.566 13.539 427.344 13.582 cv
427.117 13.633 426.934 13.703 426.797 13.793 cv
426.652 13.891 426.551 14.004 426.488 14.133 cv
426.422 14.27 426.387 14.418 426.391 14.586 cv
426.387 14.879 426.48 15.109 426.668 15.273 cv
426.852 15.441 427.109 15.523 427.438 15.523 cv
427.711 15.523 427.961 15.453 428.195 15.312 cv
428.422 15.172 428.66 14.969 428.902 14.695 cv
cp
f
439.055 9.99597 mo
439.051 10.25 439.023 10.434 438.969 10.551 cv
438.91 10.672 438.84 10.73 438.762 10.73 cv
437.941 10.73 li
438.055 10.855 438.137 11 438.188 11.156 cv
438.234 11.316 438.258 11.48 438.262 11.648 cv
438.258 12.059 438.191 12.418 438.059 12.73 cv
437.922 13.047 437.727 13.312 437.477 13.523 cv
437.223 13.742 436.922 13.906 436.566 14.016 cv
436.207 14.133 435.809 14.187 435.379 14.184 cv
435.152 14.187 434.941 14.16 434.738 14.102 cv
434.535 14.051 434.379 13.988 434.27 13.91 cv
434.207 13.98 434.148 14.059 434.102 14.152 cv
434.051 14.246 434.027 14.352 434.031 14.461 cv
434.027 14.617 434.094 14.738 434.227 14.832 cv
434.355 14.93 434.543 14.984 434.785 14.992 cv
436.477 15.055 li
436.871 15.07 437.223 15.129 437.531 15.223 cv
437.84 15.324 438.102 15.457 438.313 15.629 cv
438.523 15.805 438.684 16.016 438.793 16.258 cv
438.902 16.504 438.957 16.777 438.961 17.09 cv
438.957 17.426 438.883 17.75 438.734 18.059 cv
438.586 18.359 438.359 18.621 438.059 18.848 cv
437.754 19.066 437.375 19.246 436.922 19.379 cv
436.465 19.508 435.934 19.57 435.332 19.574 cv
434.734 19.57 434.23 19.523 433.813 19.434 cv
433.395 19.336 433.051 19.207 432.785 19.043 cv
432.516 18.875 432.32 18.676 432.203 18.449 cv
432.078 18.215 432.02 17.961 432.02 17.687 cv
432.02 17.516 432.039 17.355 432.086 17.199 cv
432.125 17.043 432.191 16.891 432.281 16.75 cv
432.363 16.605 432.469 16.473 432.594 16.34 cv
432.719 16.211 432.859 16.086 433.023 15.965 cv
432.797 15.852 432.625 15.691 432.504 15.48 cv
432.383 15.277 432.324 15.051 432.324 14.805 cv
432.324 14.504 432.391 14.227 432.531 13.969 cv
432.668 13.719 432.852 13.488 433.078 13.285 cv
432.895 13.105 432.75 12.891 432.641 12.633 cv
432.531 12.383 432.477 12.062 432.48 11.68 cv
432.477 11.277 432.547 10.918 432.691 10.594 cv
432.832 10.277 433.031 10.008 433.289 9.78497 cv
433.543 9.56598 433.848 9.39502 434.199 9.27698 cv
434.551 9.15997 434.941 9.10199 435.371 9.10199 cv
435.59 9.10199 435.797 9.117 435.996 9.14099 cv
436.195 9.172 436.383 9.20697 436.555 9.25 cv
438.762 9.25 li
438.844 9.25403 438.914 9.31201 438.973 9.422 cv
439.023 9.539 439.051 9.72998 439.055 9.99597 cv
cp
436.539 11.641 mo
436.535 11.27 436.434 10.98 436.227 10.77 cv
436.016 10.566 435.723 10.461 435.348 10.457 cv
435.152 10.461 434.98 10.492 434.84 10.555 cv
434.691 10.621 434.57 10.711 434.477 10.82 cv
434.375 10.934 434.305 11.062 434.262 11.211 cv
434.211 11.359 434.188 11.516 434.191 11.672 cv
434.188 12.031 434.293 12.309 434.504 12.512 cv
434.711 12.719 435 12.824 435.371 12.82 cv
435.566 12.824 435.734 12.793 435.883 12.727 cv
436.023 12.668 436.145 12.582 436.246 12.469 cv
436.34 12.363 436.414 12.234 436.465 12.09 cv
436.512 11.949 436.535 11.801 436.539 11.641 cv
cp
437 17.191 mo
437 16.953 436.906 16.777 436.719 16.652 cv
436.531 16.531 436.273 16.461 435.945 16.449 cv
434.551 16.41 li
434.414 16.512 434.305 16.605 434.227 16.695 cv
434.145 16.785 434.082 16.871 434.035 16.957 cv
433.984 17.039 433.949 17.121 433.938 17.199 cv
433.918 17.277 433.91 17.355 433.914 17.441 cv
433.91 17.695 434.043 17.895 434.305 18.031 cv
434.566 18.164 434.938 18.23 435.418 18.234 cv
435.711 18.23 435.957 18.199 436.164 18.145 cv
436.363 18.082 436.527 18.004 436.656 17.906 cv
436.777 17.805 436.867 17.695 436.922 17.574 cv
436.973 17.453 437 17.324 437 17.191 cv
cp
f
446.664 12.789 mo
446.66 13.027 446.609 13.203 446.504 13.316 cv
446.395 13.434 446.246 13.492 446.066 13.488 cv
441.832 13.488 li
441.828 13.789 441.863 14.059 441.938 14.297 cv
442.004 14.539 442.117 14.742 442.273 14.91 cv
442.426 15.082 442.621 15.211 442.863 15.297 cv
443.102 15.387 443.391 15.43 443.734 15.43 cv
444.074 15.43 444.375 15.406 444.637 15.355 cv
444.895 15.309 445.121 15.254 445.313 15.191 cv
445.5 15.133 445.656 15.078 445.785 15.027 cv
445.906 14.98 446.008 14.957 446.09 14.953 cv
446.133 14.957 446.172 14.965 446.207 14.98 cv
446.234 15 446.262 15.031 446.281 15.078 cv
446.301 15.125 446.313 15.191 446.324 15.277 cv
446.328 15.363 446.332 15.473 446.336 15.602 cv
446.332 15.719 446.332 15.816 446.328 15.895 cv
446.32 15.977 446.313 16.043 446.305 16.098 cv
446.293 16.156 446.277 16.207 446.258 16.242 cv
446.238 16.285 446.211 16.32 446.18 16.355 cv
446.145 16.395 446.051 16.445 445.902 16.504 cv
445.746 16.57 445.555 16.633 445.324 16.687 cv
445.086 16.75 444.816 16.797 444.52 16.844 cv
444.215 16.883 443.895 16.906 443.555 16.91 cv
442.934 16.906 442.391 16.832 441.93 16.676 cv
441.461 16.523 441.074 16.285 440.766 15.969 cv
440.449 15.652 440.215 15.254 440.066 14.77 cv
439.91 14.289 439.836 13.723 439.84 13.066 cv
439.836 12.453 439.914 11.895 440.078 11.398 cv
440.234 10.902 440.469 10.484 440.781 10.137 cv
441.086 9.79303 441.461 9.52698 441.898 9.34399 cv
442.336 9.164 442.828 9.07397 443.383 9.07001 cv
443.961 9.07397 444.461 9.15997 444.875 9.328 cv
445.289 9.50403 445.625 9.742 445.891 10.043 cv
446.152 10.348 446.348 10.707 446.477 11.121 cv
446.598 11.539 446.66 11.988 446.664 12.477 cv
cp
444.762 12.227 mo
444.773 11.676 444.664 11.242 444.43 10.93 cv
444.195 10.617 443.828 10.461 443.336 10.457 cv
443.086 10.461 442.871 10.508 442.688 10.598 cv
442.5 10.695 442.348 10.82 442.227 10.977 cv
442.102 11.137 442.008 11.324 441.945 11.539 cv
441.879 11.754 441.84 11.984 441.832 12.227 cv
cp
f
453.164 14.5 mo
453.16 14.898 453.086 15.246 452.941 15.547 cv
452.793 15.848 452.586 16.102 452.316 16.301 cv
452.043 16.508 451.723 16.656 451.355 16.758 cv
450.988 16.855 450.586 16.906 450.156 16.91 cv
449.891 16.906 449.645 16.887 449.41 16.852 cv
449.176 16.809 448.965 16.762 448.777 16.703 cv
448.59 16.645 448.434 16.582 448.309 16.52 cv
448.184 16.457 448.09 16.398 448.035 16.344 cv
447.977 16.289 447.934 16.207 447.906 16.09 cv
447.871 15.977 447.855 15.801 447.859 15.57 cv
447.855 15.422 447.863 15.301 447.875 15.207 cv
447.883 15.117 447.898 15.047 447.922 14.988 cv
447.941 14.937 447.965 14.898 448 14.879 cv
448.027 14.863 448.066 14.855 448.113 14.852 cv
448.168 14.855 448.254 14.887 448.367 14.949 cv
448.477 15.016 448.613 15.09 448.785 15.164 cv
448.949 15.246 449.145 15.316 449.363 15.383 cv
449.582 15.453 449.832 15.488 450.117 15.484 cv
450.293 15.488 450.449 15.469 450.59 15.43 cv
450.723 15.395 450.844 15.344 450.949 15.273 cv
451.047 15.207 451.121 15.121 451.176 15.016 cv
451.223 14.914 451.25 14.793 451.254 14.656 cv
451.25 14.5 451.203 14.367 451.109 14.258 cv
451.016 14.148 450.887 14.051 450.73 13.965 cv
450.566 13.883 450.387 13.805 450.191 13.73 cv
449.988 13.66 449.785 13.582 449.574 13.488 cv
449.363 13.402 449.156 13.301 448.961 13.184 cv
448.758 13.074 448.578 12.934 448.422 12.766 cv
448.258 12.602 448.133 12.402 448.039 12.164 cv
447.945 11.934 447.898 11.652 447.898 11.32 cv
447.898 10.992 447.961 10.687 448.09 10.406 cv
448.219 10.133 448.406 9.89502 448.652 9.69501 cv
448.895 9.5 449.191 9.34802 449.543 9.23401 cv
449.891 9.12903 450.285 9.07397 450.727 9.07001 cv
450.941 9.07397 451.152 9.09003 451.359 9.117 cv
451.563 9.15198 451.75 9.19098 451.918 9.23401 cv
452.082 9.28497 452.223 9.336 452.34 9.38702 cv
452.453 9.44501 452.535 9.492 452.586 9.52698 cv
452.633 9.57001 452.668 9.60901 452.691 9.64502 cv
452.711 9.68701 452.723 9.73401 452.734 9.78497 cv
452.742 9.84003 452.754 9.90601 452.762 9.98401 cv
452.77 10.07 452.773 10.168 452.773 10.285 cv
452.773 10.426 452.77 10.543 452.762 10.629 cv
452.754 10.723 452.738 10.793 452.723 10.84 cv
452.703 10.895 452.68 10.93 452.652 10.945 cv
452.617 10.969 452.582 10.977 452.543 10.973 cv
452.492 10.977 452.418 10.949 452.324 10.891 cv
452.223 10.84 452.102 10.781 451.953 10.715 cv
451.805 10.656 451.633 10.598 451.438 10.539 cv
451.242 10.488 451.02 10.461 450.773 10.457 cv
450.594 10.461 450.441 10.48 450.313 10.512 cv
450.18 10.551 450.07 10.602 449.992 10.668 cv
449.906 10.738 449.844 10.816 449.805 10.906 cv
449.758 11 449.738 11.098 449.742 11.199 cv
449.738 11.359 449.789 11.496 449.891 11.602 cv
449.988 11.715 450.117 11.809 450.281 11.891 cv
450.441 11.977 450.625 12.055 450.832 12.125 cv
451.035 12.199 451.242 12.281 451.453 12.363 cv
451.66 12.453 451.867 12.551 452.078 12.664 cv
452.281 12.777 452.465 12.918 452.625 13.082 cv
452.785 13.25 452.914 13.449 453.016 13.68 cv
453.109 13.914 453.16 14.187 453.164 14.5 cv
cp
f
461.938 12.812 mo
461.934 13.113 461.906 13.324 461.852 13.441 cv
461.793 13.566 461.703 13.625 461.578 13.621 cv
458.336 13.621 li
458.207 13.625 458.113 13.562 458.059 13.437 cv
457.996 13.316 457.969 13.109 457.973 12.812 cv
457.969 12.523 457.996 12.316 458.059 12.195 cv
458.113 12.078 458.207 12.02 458.336 12.016 cv
461.578 12.016 li
461.641 12.02 461.691 12.031 461.738 12.055 cv
461.777 12.082 461.816 12.129 461.852 12.187 cv
461.879 12.254 461.902 12.336 461.918 12.437 cv
461.93 12.543 461.934 12.668 461.938 12.812 cv
cp
f
473.793 13.832 mo
473.789 14.102 473.762 14.305 473.711 14.437 cv
473.652 14.578 473.578 14.645 473.488 14.641 cv
472.594 14.641 li
472.594 16.465 li
472.594 16.52 472.578 16.562 472.547 16.602 cv
472.516 16.641 472.461 16.676 472.383 16.699 cv
472.305 16.727 472.203 16.742 472.078 16.758 cv
471.953 16.77 471.789 16.777 471.594 16.777 cv
471.406 16.777 471.25 16.77 471.125 16.758 cv
470.992 16.742 470.891 16.727 470.82 16.699 cv
470.742 16.676 470.691 16.641 470.664 16.602 cv
470.633 16.562 470.617 16.52 470.621 16.465 cv
470.621 14.641 li
466.766 14.641 li
466.688 14.645 466.625 14.637 466.57 14.613 cv
466.512 14.598 466.461 14.555 466.426 14.492 cv
466.383 14.43 466.355 14.336 466.34 14.211 cv
466.32 14.09 466.313 13.93 466.313 13.723 cv
466.313 13.559 466.316 13.414 466.324 13.289 cv
466.332 13.172 466.344 13.062 466.363 12.961 cv
466.379 12.867 466.406 12.773 466.441 12.68 cv
466.473 12.594 466.516 12.5 466.57 12.398 cv
469.703 6.87097 li
469.727 6.828 469.77 6.789 469.836 6.75 cv
469.895 6.71899 469.98 6.68701 470.094 6.664 cv
470.203 6.64099 470.348 6.625 470.52 6.61298 cv
470.691 6.60498 470.898 6.60199 471.145 6.59802 cv
471.406 6.60199 471.633 6.60498 471.82 6.617 cv
472.008 6.633 472.156 6.65601 472.27 6.67999 cv
472.379 6.711 472.461 6.74597 472.516 6.78497 cv
472.566 6.83197 472.594 6.87903 472.594 6.93402 cv
472.594 13.004 li
473.488 13.004 li
473.57 13.004 473.641 13.07 473.703 13.195 cv
473.758 13.328 473.789 13.539 473.793 13.832 cv
cp
470.621 8.367 mo
470.605 8.367 li
467.949 13.004 li
470.621 13.004 li
cp
f
485.586 7.48798 mo
485.582 7.64502 485.574 7.77301 485.566 7.875 cv
485.551 7.98401 485.531 8.07001 485.508 8.133 cv
485.477 8.19897 485.445 8.24597 485.41 8.27301 cv
485.367 8.30902 485.324 8.32397 485.281 8.32001 cv
482.758 8.32001 li
482.758 16.449 li
482.758 16.504 482.738 16.551 482.707 16.59 cv
482.668 16.633 482.613 16.668 482.539 16.691 cv
482.457 16.719 482.352 16.738 482.223 16.754 cv
482.086 16.77 481.922 16.777 481.727 16.777 cv
481.531 16.777 481.367 16.77 481.234 16.754 cv
481.102 16.738 480.996 16.719 480.918 16.691 cv
480.84 16.668 480.781 16.633 480.75 16.59 cv
480.711 16.551 480.695 16.504 480.699 16.449 cv
480.699 8.32001 li
478.176 8.32001 li
478.121 8.32397 478.074 8.30902 478.043 8.27301 cv
478.004 8.24597 477.973 8.19897 477.949 8.133 cv
477.918 8.07001 477.898 7.98401 477.891 7.875 cv
477.875 7.77301 477.871 7.64502 477.871 7.48798 cv
477.871 7.336 477.875 7.203 477.891 7.09003 cv
477.898 6.98401 477.918 6.89502 477.949 6.828 cv
477.973 6.76599 478.004 6.71899 478.043 6.68701 cv
478.074 6.65997 478.121 6.64801 478.176 6.64502 cv
485.281 6.64502 li
485.324 6.64801 485.367 6.65997 485.41 6.68701 cv
485.445 6.71899 485.477 6.76599 485.508 6.828 cv
485.531 6.89502 485.551 6.98401 485.566 7.09003 cv
485.574 7.203 485.582 7.336 485.586 7.48798 cv
cp
f
493.297 16.465 mo
493.293 16.52 493.277 16.562 493.25 16.602 cv
493.215 16.641 493.164 16.676 493.094 16.699 cv
493.02 16.727 492.918 16.742 492.793 16.758 cv
492.664 16.77 492.508 16.777 492.324 16.777 cv
492.129 16.777 491.969 16.77 491.844 16.758 cv
491.715 16.742 491.613 16.727 491.543 16.699 cv
491.465 16.676 491.414 16.641 491.387 16.602 cv
491.352 16.562 491.336 16.52 491.34 16.465 cv
491.34 12.5 li
491.336 12.164 491.313 11.898 491.266 11.703 cv
491.215 11.512 491.141 11.348 491.051 11.211 cv
490.957 11.074 490.84 10.969 490.691 10.891 cv
490.543 10.816 490.367 10.777 490.172 10.777 cv
489.918 10.777 489.668 10.871 489.414 11.051 cv
489.16 11.234 488.895 11.496 488.621 11.844 cv
488.621 16.465 li
488.617 16.52 488.602 16.562 488.574 16.602 cv
488.539 16.641 488.484 16.676 488.414 16.699 cv
488.336 16.727 488.238 16.742 488.113 16.758 cv
487.988 16.77 487.828 16.777 487.641 16.777 cv
487.445 16.777 487.289 16.77 487.164 16.758 cv
487.039 16.742 486.938 16.727 486.863 16.699 cv
486.785 16.676 486.73 16.641 486.703 16.602 cv
486.668 16.562 486.652 16.52 486.656 16.465 cv
486.656 6.21899 li
486.652 6.16803 486.668 6.12097 486.703 6.078 cv
486.73 6.039 486.785 6.00403 486.863 5.97302 cv
486.938 5.94501 487.039 5.92603 487.164 5.90601 cv
487.289 5.89502 487.445 5.88702 487.641 5.883 cv
487.828 5.88702 487.988 5.89502 488.113 5.90601 cv
488.238 5.92603 488.336 5.94501 488.414 5.97302 cv
488.484 6.00403 488.539 6.039 488.574 6.078 cv
488.602 6.12097 488.617 6.16803 488.621 6.21899 cv
488.621 10.059 li
488.957 9.72998 489.301 9.48401 489.652 9.31598 cv
490 9.15601 490.367 9.07397 490.75 9.07001 cv
491.219 9.07397 491.617 9.15198 491.945 9.30499 cv
492.27 9.46503 492.531 9.67603 492.73 9.94501 cv
492.93 10.215 493.074 10.531 493.164 10.891 cv
493.25 11.254 493.293 11.691 493.297 12.203 cv
cp
f
499.695 10.16 mo
499.695 10.352 499.688 10.504 499.68 10.621 cv
499.664 10.742 499.648 10.836 499.633 10.902 cv
499.609 10.973 499.582 11.02 499.551 11.043 cv
499.512 11.07 499.469 11.082 499.422 11.082 cv
499.375 11.082 499.328 11.074 499.281 11.055 cv
499.227 11.039 499.168 11.02 499.105 10.996 cv
499.035 10.977 498.965 10.957 498.891 10.937 cv
498.809 10.922 498.723 10.914 498.633 10.91 cv
498.52 10.914 498.41 10.934 498.305 10.977 cv
498.195 11.023 498.082 11.094 497.969 11.184 cv
497.848 11.277 497.727 11.402 497.602 11.555 cv
497.473 11.715 497.336 11.906 497.191 12.133 cv
497.191 16.465 li
497.188 16.52 497.172 16.562 497.145 16.602 cv
497.109 16.641 497.055 16.676 496.984 16.699 cv
496.906 16.727 496.809 16.742 496.684 16.758 cv
496.559 16.77 496.398 16.777 496.211 16.777 cv
496.016 16.777 495.859 16.77 495.734 16.758 cv
495.609 16.742 495.508 16.727 495.434 16.699 cv
495.355 16.676 495.301 16.641 495.273 16.602 cv
495.238 16.562 495.223 16.52 495.227 16.465 cv
495.227 9.51599 li
495.223 9.46899 495.238 9.422 495.266 9.37903 cv
495.289 9.34399 495.336 9.31201 495.406 9.28101 cv
495.473 9.258 495.559 9.23798 495.668 9.22302 cv
495.773 9.21503 495.906 9.20697 496.07 9.203 cv
496.234 9.20697 496.371 9.21503 496.48 9.22302 cv
496.586 9.23798 496.672 9.258 496.734 9.28101 cv
496.793 9.31201 496.836 9.34399 496.863 9.37903 cv
496.887 9.422 496.898 9.46899 496.902 9.51599 cv
496.902 10.379 li
497.082 10.121 497.254 9.90997 497.418 9.73798 cv
497.574 9.57397 497.73 9.43701 497.879 9.336 cv
498.023 9.23798 498.168 9.172 498.313 9.12903 cv
498.457 9.09399 498.602 9.07397 498.75 9.07001 cv
498.816 9.07397 498.891 9.078 498.969 9.08197 cv
499.047 9.09399 499.125 9.10498 499.211 9.12097 cv
499.289 9.14099 499.363 9.15997 499.43 9.18402 cv
499.488 9.20697 499.535 9.23401 499.566 9.258 cv
499.594 9.289 499.613 9.31598 499.629 9.34399 cv
499.641 9.37903 499.652 9.422 499.664 9.47302 cv
499.672 9.53101 499.68 9.61298 499.688 9.71899 cv
499.691 9.828 499.695 9.97699 499.695 10.16 cv
cp
f
507.141 12.789 mo
507.137 13.027 507.086 13.203 506.98 13.316 cv
506.871 13.434 506.723 13.492 506.543 13.488 cv
502.309 13.488 li
502.305 13.789 502.34 14.059 502.414 14.297 cv
502.48 14.539 502.594 14.742 502.75 14.91 cv
502.902 15.082 503.098 15.211 503.34 15.297 cv
503.578 15.387 503.867 15.43 504.211 15.43 cv
504.551 15.43 504.852 15.406 505.113 15.355 cv
505.371 15.309 505.598 15.254 505.789 15.191 cv
505.977 15.133 506.133 15.078 506.262 15.027 cv
506.383 14.98 506.484 14.957 506.566 14.953 cv
506.609 14.957 506.648 14.965 506.684 14.98 cv
506.711 15 506.738 15.031 506.758 15.078 cv
506.777 15.125 506.789 15.191 506.801 15.277 cv
506.805 15.363 506.809 15.473 506.813 15.602 cv
506.809 15.719 506.809 15.816 506.805 15.895 cv
506.797 15.977 506.789 16.043 506.781 16.098 cv
506.77 16.156 506.754 16.207 506.734 16.242 cv
506.715 16.285 506.688 16.32 506.656 16.355 cv
506.621 16.395 506.527 16.445 506.379 16.504 cv
506.223 16.57 506.031 16.633 505.801 16.687 cv
505.563 16.75 505.293 16.797 504.996 16.844 cv
504.691 16.883 504.371 16.906 504.031 16.91 cv
503.41 16.906 502.867 16.832 502.406 16.676 cv
501.938 16.523 501.551 16.285 501.242 15.969 cv
500.926 15.652 500.691 15.254 500.543 14.77 cv
500.387 14.289 500.313 13.723 500.316 13.066 cv
500.313 12.453 500.391 11.895 500.555 11.398 cv
500.711 10.902 500.945 10.484 501.258 10.137 cv
501.563 9.79303 501.938 9.52698 502.375 9.34399 cv
502.813 9.164 503.305 9.07397 503.859 9.07001 cv
504.438 9.07397 504.938 9.15997 505.352 9.328 cv
505.766 9.50403 506.102 9.742 506.367 10.043 cv
506.629 10.348 506.824 10.707 506.953 11.121 cv
507.074 11.539 507.137 11.988 507.141 12.477 cv
cp
505.238 12.227 mo
505.25 11.676 505.141 11.242 504.906 10.93 cv
504.672 10.617 504.305 10.461 503.813 10.457 cv
503.563 10.461 503.348 10.508 503.164 10.598 cv
502.977 10.695 502.824 10.82 502.703 10.977 cv
502.578 11.137 502.484 11.324 502.422 11.539 cv
502.355 11.754 502.316 11.984 502.309 12.227 cv
cp
f
514.672 16.488 mo
514.668 16.566 514.641 16.621 514.594 16.66 cv
514.539 16.703 514.457 16.73 514.348 16.75 cv
514.23 16.766 514.066 16.777 513.852 16.777 cv
513.613 16.777 513.441 16.766 513.34 16.75 cv
513.23 16.73 513.156 16.703 513.117 16.66 cv
513.07 16.621 513.051 16.566 513.051 16.488 cv
513.051 15.937 li
512.762 16.246 512.434 16.484 512.07 16.652 cv
511.703 16.824 511.297 16.906 510.852 16.91 cv
510.48 16.906 510.141 16.859 509.832 16.766 cv
509.523 16.672 509.258 16.531 509.031 16.336 cv
508.805 16.148 508.629 15.914 508.504 15.633 cv
508.379 15.355 508.316 15.027 508.32 14.648 cv
508.316 14.25 508.395 13.898 508.555 13.594 cv
508.711 13.297 508.949 13.051 509.266 12.855 cv
509.578 12.664 509.969 12.52 510.438 12.422 cv
510.906 12.332 511.449 12.285 512.066 12.281 cv
512.746 12.281 li
512.746 11.859 li
512.746 11.645 512.723 11.453 512.68 11.289 cv
512.633 11.129 512.559 10.992 512.461 10.879 cv
512.355 10.773 512.223 10.691 512.055 10.637 cv
511.883 10.586 511.672 10.562 511.43 10.559 cv
511.098 10.562 510.805 10.598 510.551 10.668 cv
510.289 10.742 510.063 10.824 509.867 10.91 cv
509.668 11.004 509.504 11.082 509.375 11.152 cv
509.238 11.227 509.129 11.266 509.051 11.262 cv
508.988 11.266 508.938 11.246 508.898 11.207 cv
508.852 11.172 508.816 11.121 508.789 11.051 cv
508.758 10.988 508.734 10.902 508.723 10.801 cv
508.703 10.703 508.695 10.594 508.699 10.473 cv
508.695 10.312 508.711 10.187 508.738 10.09 cv
508.762 10 508.809 9.914 508.887 9.836 cv
508.957 9.76202 509.086 9.67999 509.27 9.59003 cv
509.449 9.5 509.66 9.414 509.906 9.336 cv
510.148 9.258 510.418 9.19501 510.707 9.14502 cv
510.996 9.09802 511.293 9.07397 511.602 9.07001 cv
512.145 9.07397 512.609 9.125 512.996 9.22998 cv
513.383 9.34003 513.703 9.50403 513.953 9.72302 cv
514.203 9.94098 514.383 10.227 514.5 10.574 cv
514.609 10.926 514.668 11.34 514.672 11.812 cv
cp
512.746 13.512 mo
511.996 13.512 li
511.68 13.516 511.41 13.539 511.188 13.582 cv
510.961 13.633 510.777 13.703 510.641 13.793 cv
510.496 13.891 510.395 14.004 510.332 14.133 cv
510.266 14.27 510.23 14.418 510.234 14.586 cv
510.23 14.879 510.324 15.109 510.512 15.273 cv
510.695 15.441 510.953 15.523 511.281 15.523 cv
511.555 15.523 511.805 15.453 512.039 15.312 cv
512.266 15.172 512.504 14.969 512.746 14.695 cv
cp
f
523.254 16.465 mo
523.25 16.527 523.238 16.574 523.215 16.609 cv
523.188 16.652 523.141 16.684 523.082 16.707 cv
523.016 16.73 522.934 16.746 522.828 16.762 cv
522.723 16.77 522.59 16.777 522.438 16.777 cv
522.266 16.777 522.133 16.77 522.031 16.762 cv
521.926 16.746 521.84 16.73 521.777 16.707 cv
521.711 16.684 521.664 16.652 521.637 16.609 cv
521.605 16.574 521.59 16.527 521.594 16.465 cv
521.594 15.695 li
521.234 16.082 520.859 16.379 520.469 16.59 cv
520.07 16.801 519.637 16.906 519.164 16.91 cv
518.629 16.906 518.18 16.805 517.816 16.602 cv
517.449 16.398 517.152 16.125 516.922 15.773 cv
516.688 15.43 516.52 15.023 516.418 14.555 cv
516.316 14.094 516.266 13.602 516.266 13.082 cv
516.266 12.469 516.328 11.914 516.461 11.418 cv
516.59 10.926 516.785 10.504 517.043 10.156 cv
517.297 9.80902 517.613 9.54303 517.992 9.35199 cv
518.371 9.16803 518.809 9.07397 519.305 9.07001 cv
519.691 9.07397 520.043 9.15198 520.363 9.30902 cv
520.676 9.46899 520.992 9.69897 521.305 10.004 cv
521.305 6.242 li
521.305 6.19098 521.316 6.14502 521.348 6.10199 cv
521.371 6.06201 521.426 6.02698 521.504 5.99597 cv
521.578 5.96899 521.676 5.94897 521.805 5.92999 cv
521.926 5.91803 522.086 5.90997 522.281 5.90601 cv
522.473 5.90997 522.629 5.91803 522.754 5.92999 cv
522.875 5.94897 522.977 5.96899 523.051 5.99597 cv
523.121 6.02698 523.172 6.06201 523.207 6.10199 cv
523.234 6.14502 523.25 6.19098 523.254 6.242 cv
cp
521.305 11.82 mo
521.023 11.469 520.754 11.199 520.5 11.012 cv
520.238 10.824 519.969 10.73 519.691 10.73 cv
519.438 10.73 519.219 10.797 519.035 10.922 cv
518.848 11.055 518.699 11.223 518.59 11.434 cv
518.477 11.645 518.395 11.883 518.34 12.145 cv
518.285 12.41 518.258 12.68 518.258 12.949 cv
518.258 13.246 518.281 13.527 518.328 13.801 cv
518.375 14.078 518.449 14.324 518.559 14.539 cv
518.66 14.754 518.805 14.926 518.984 15.055 cv
519.16 15.187 519.383 15.254 519.652 15.25 cv
519.785 15.254 519.914 15.234 520.047 15.191 cv
520.172 15.156 520.305 15.094 520.438 15 cv
520.57 14.914 520.707 14.797 520.848 14.652 cv
520.988 14.512 521.141 14.336 521.305 14.129 cv
cp
f
530.078 14.5 mo
530.074 14.898 530 15.246 529.855 15.547 cv
529.707 15.848 529.5 16.102 529.23 16.301 cv
528.957 16.508 528.637 16.656 528.27 16.758 cv
527.902 16.855 527.5 16.906 527.07 16.91 cv
526.805 16.906 526.559 16.887 526.324 16.852 cv
526.09 16.809 525.879 16.762 525.691 16.703 cv
525.504 16.645 525.348 16.582 525.223 16.52 cv
525.098 16.457 525.004 16.398 524.949 16.344 cv
524.891 16.289 524.848 16.207 524.82 16.09 cv
524.785 15.977 524.77 15.801 524.773 15.57 cv
524.77 15.422 524.777 15.301 524.789 15.207 cv
524.797 15.117 524.813 15.047 524.836 14.988 cv
524.855 14.937 524.879 14.898 524.914 14.879 cv
524.941 14.863 524.98 14.855 525.027 14.852 cv
525.082 14.855 525.168 14.887 525.281 14.949 cv
525.391 15.016 525.527 15.09 525.699 15.164 cv
525.863 15.246 526.059 15.316 526.277 15.383 cv
526.496 15.453 526.746 15.488 527.031 15.484 cv
527.207 15.488 527.363 15.469 527.504 15.43 cv
527.637 15.395 527.758 15.344 527.863 15.273 cv
527.961 15.207 528.035 15.121 528.09 15.016 cv
528.137 14.914 528.164 14.793 528.168 14.656 cv
528.164 14.5 528.117 14.367 528.023 14.258 cv
527.93 14.148 527.801 14.051 527.645 13.965 cv
527.48 13.883 527.301 13.805 527.105 13.73 cv
526.902 13.66 526.699 13.582 526.488 13.488 cv
526.277 13.402 526.07 13.301 525.875 13.184 cv
525.672 13.074 525.492 12.934 525.336 12.766 cv
525.172 12.602 525.047 12.402 524.953 12.164 cv
524.859 11.934 524.813 11.652 524.813 11.32 cv
524.813 10.992 524.875 10.687 525.004 10.406 cv
525.133 10.133 525.32 9.89502 525.566 9.69501 cv
525.809 9.5 526.105 9.34802 526.457 9.23401 cv
526.805 9.12903 527.199 9.07397 527.641 9.07001 cv
527.855 9.07397 528.066 9.09003 528.273 9.117 cv
528.477 9.15198 528.664 9.19098 528.832 9.23401 cv
528.996 9.28497 529.137 9.336 529.254 9.38702 cv
529.367 9.44501 529.449 9.492 529.5 9.52698 cv
529.547 9.57001 529.582 9.60901 529.605 9.64502 cv
529.625 9.68701 529.637 9.73401 529.648 9.78497 cv
529.656 9.84003 529.668 9.90601 529.676 9.98401 cv
529.684 10.07 529.688 10.168 529.688 10.285 cv
529.688 10.426 529.684 10.543 529.676 10.629 cv
529.668 10.723 529.652 10.793 529.637 10.84 cv
529.617 10.895 529.594 10.93 529.566 10.945 cv
529.531 10.969 529.496 10.977 529.457 10.973 cv
529.406 10.977 529.332 10.949 529.238 10.891 cv
529.137 10.84 529.016 10.781 528.867 10.715 cv
528.719 10.656 528.547 10.598 528.352 10.539 cv
528.156 10.488 527.934 10.461 527.688 10.457 cv
527.508 10.461 527.355 10.48 527.227 10.512 cv
527.094 10.551 526.984 10.602 526.906 10.668 cv
526.82 10.738 526.758 10.816 526.719 10.906 cv
526.672 11 526.652 11.098 526.656 11.199 cv
526.652 11.359 526.703 11.496 526.805 11.602 cv
526.902 11.715 527.031 11.809 527.195 11.891 cv
527.355 11.977 527.539 12.055 527.746 12.125 cv
527.949 12.199 528.156 12.281 528.367 12.363 cv
528.574 12.453 528.781 12.551 528.992 12.664 cv
529.195 12.777 529.379 12.918 529.539 13.082 cv
529.699 13.25 529.828 13.449 529.93 13.68 cv
530.023 13.914 530.074 14.187 530.078 14.5 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
