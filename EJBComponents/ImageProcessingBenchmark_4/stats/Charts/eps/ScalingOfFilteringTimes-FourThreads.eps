%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-FourThreads.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:48:05 PM
%%BoundingBox: 0 0 676 544
%%HiResBoundingBox: 0 0 675.3600 543.7201
%%CropBox: 0 0 675.3600 543.7201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -543.72 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 543.72 li
675.36 543.72 li
675.36 0 li
cp
clp
gsave
0 543.72 mo
676 543.72 li
676 -.279968 li
0 -.279968 li
cp
clp
0 6.10352e-5 mo
675.359 6.10352e-5 li
675.359 543.719 li
0 543.719 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
32.762 487.801 mo
663.238 487.801 li
32.762 456.121 mo
663.238 456.121 li
32.762 424.441 mo
663.238 424.441 li
32.762 392.879 mo
663.238 392.879 li
32.762 361.199 mo
663.238 361.199 li
32.762 329.519 mo
663.238 329.519 li
32.762 297.84 mo
663.238 297.84 li
32.762 266.281 mo
663.238 266.281 li
32.762 234.602 mo
663.238 234.602 li
32.762 202.922 mo
663.238 202.922 li
32.762 171.238 mo
663.238 171.238 li
32.762 139.68 mo
663.238 139.68 li
32.762 108 mo
663.238 108 li
32.762 76.32 mo
663.238 76.32 li
32.762 44.641 mo
663.238 44.641 li
.140414 .108034 .108034 0 cmyk
@
32.762 471.961 mo
663.238 471.961 li
32.762 440.281 mo
663.238 440.281 li
32.762 408.719 mo
663.238 408.719 li
32.762 377.039 mo
663.238 377.039 li
32.762 345.359 mo
663.238 345.359 li
32.762 313.68 mo
663.238 313.68 li
32.762 282.121 mo
663.238 282.121 li
32.762 250.441 mo
663.238 250.441 li
32.762 218.762 mo
663.238 218.762 li
32.762 187.078 mo
663.238 187.078 li
32.762 155.398 mo
663.238 155.398 li
32.762 123.84 mo
663.238 123.84 li
32.762 92.16 mo
663.238 92.16 li
32.762 60.48 mo
663.238 60.48 li
32.762 28.801 mo
663.238 28.801 li
.328344 .284215 .278569 .000915541 cmyk
@
72.121 28.801 mo
72.121 503.641 li
150.961 28.801 mo
150.961 503.641 li
229.801 28.801 mo
229.801 503.641 li
308.641 28.801 mo
308.641 503.641 li
387.359 28.801 mo
387.359 503.641 li
466.199 28.801 mo
466.199 503.641 li
545.039 28.801 mo
545.039 503.641 li
623.762 28.801 mo
623.762 503.641 li
.178592 .148898 .143923 0 cmyk
@
32.762 28.801 mo
32.762 503.641 li
111.602 28.801 mo
111.602 503.641 li
190.32 28.801 mo
190.32 503.641 li
269.16 28.801 mo
269.16 503.641 li
348 28.801 mo
348 503.641 li
426.84 28.801 mo
426.84 503.641 li
505.559 28.801 mo
505.559 503.641 li
584.398 28.801 mo
584.398 503.641 li
663.238 28.801 mo
663.238 503.641 li
.328344 .284215 .278569 .000915541 cmyk
@
15.602 495.602 mo
21.602 495.602 li
21.602 510.239 li
15.602 510.239 li
cp
0 0 0 0 cmyk
ef
15.602 464.039 mo
21.602 464.039 li
21.602 478.68 li
15.602 478.68 li
cp
ef
15.602 432.359 mo
21.602 432.359 li
21.602 447 li
15.602 447 li
cp
ef
15.602 400.68 mo
21.602 400.68 li
21.602 415.321 li
15.602 415.321 li
cp
ef
15.602 369 mo
21.602 369 li
21.602 383.641 li
15.602 383.641 li
cp
ef
15.602 337.441 mo
21.602 337.441 li
21.602 352.078 li
15.602 352.078 li
cp
ef
15.602 305.762 mo
21.602 305.762 li
21.602 320.399 li
15.602 320.399 li
cp
ef
15.602 274.078 mo
21.602 274.078 li
21.602 288.719 li
15.602 288.719 li
cp
ef
15.602 242.398 mo
21.602 242.398 li
21.602 257.039 li
15.602 257.039 li
cp
ef
9.48 210.719 mo
21.601 210.719 li
21.601 225.481 li
9.48 225.481 li
cp
ef
9.48 179.16 mo
21.601 179.16 li
21.601 193.801 li
9.48 193.801 li
cp
ef
9.48 147.48 mo
21.601 147.48 li
21.601 162.121 li
9.48 162.121 li
cp
ef
9.48 115.801 mo
21.601 115.801 li
21.601 130.442 li
9.48 130.442 li
cp
ef
9.48 84.121 mo
21.601 84.121 li
21.601 98.762 li
9.48 98.762 li
cp
ef
9.48 52.559 mo
21.601 52.559 li
21.601 67.2 li
9.48 67.2 li
cp
ef
9.48 20.879 mo
21.601 20.879 li
21.601 35.52 li
9.48 35.52 li
cp
ef
.96 lw
32.762 503.641 mo
663.238 503.641 li
.367803 .29575 .300999 .00198367 cmyk
@
32.762 503.641 mo
32.762 507.48 li
111.602 503.641 mo
111.602 507.48 li
190.32 503.641 mo
190.32 507.48 li
269.16 503.641 mo
269.16 507.48 li
348 503.641 mo
348 507.48 li
426.84 503.641 mo
426.84 507.48 li
505.559 503.641 mo
505.559 507.48 li
584.398 503.641 mo
584.398 507.48 li
663.238 503.641 mo
663.238 507.48 li
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
1 lc
32.762 503.641 mo
111.602 473.281 li
190.32 414.961 li
269.16 398.039 li
348 309.84 li
426.84 282.961 li
505.559 253.922 li
584.398 222.238 li
663.238 188.039 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
37.801 508.578 mo
27.719 498.5 li
27.719 508.578 mo
37.801 498.5 li
.62768 .285466 0 0 cmyk
@
116.52 478.34 mo
106.441 468.262 li
106.441 478.34 mo
116.52 468.262 li
@
195.359 420.019 mo
185.281 409.941 li
185.281 420.019 mo
195.359 409.941 li
@
274.199 402.98 mo
264.121 392.898 li
264.121 402.98 mo
274.199 392.898 li
@
352.922 314.898 mo
342.84 304.82 li
342.84 314.898 mo
352.922 304.82 li
@
431.762 288.019 mo
421.68 277.941 li
421.68 288.019 mo
431.762 277.941 li
@
510.602 258.859 mo
500.52 248.781 li
500.52 258.859 mo
510.602 248.781 li
@
589.441 227.301 mo
579.359 217.219 li
579.359 227.301 mo
589.441 217.219 li
@
668.16 192.98 mo
658.078 182.898 li
658.078 192.98 mo
668.16 182.898 li
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
32.762 503.641 mo
111.602 471.961 li
190.32 409.441 li
269.16 346.68 li
348 286.922 li
426.84 223.32 li
505.559 159.359 li
584.398 93.961 li
@
grestore
27.719 498.5 mo
37.68 498.5 li
37.68 508.461 li
27.719 508.461 li
cp
@
106.441 466.82 mo
116.398 466.82 li
116.398 476.781 li
106.441 476.781 li
cp
@
185.281 404.422 mo
195.238 404.422 li
195.238 414.379 li
185.281 414.379 li
cp
@
264.121 341.66 mo
274.078 341.66 li
274.078 351.621 li
264.121 351.621 li
cp
@
342.84 281.781 mo
352.801 281.781 li
352.801 291.738 li
342.84 291.738 li
cp
@
421.68 218.301 mo
431.641 218.301 li
431.641 228.262 li
421.68 228.262 li
cp
@
500.52 154.219 mo
510.481 154.219 li
510.481 164.18 li
500.52 164.18 li
cp
@
579.359 88.941 mo
589.32 88.941 li
589.32 98.898 li
579.359 98.898 li
cp
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
32.762 503.641 mo
111.602 473.039 li
190.32 413.398 li
269.16 370.68 li
348 286.922 li
426.84 306.48 li
505.559 172.559 li
584.398 218.398 li
663.238 74.398 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
37.801 508.578 mo
27.719 498.5 li
27.719 508.578 mo
37.801 498.5 li
.0319219 .621851 .911223 .000427253 cmyk
@
116.52 478.102 mo
106.441 468.019 li
106.441 478.102 mo
116.52 468.019 li
@
195.359 418.34 mo
185.281 408.262 li
185.281 418.34 mo
195.359 408.262 li
@
274.199 375.738 mo
264.121 365.66 li
264.121 375.738 mo
274.199 365.66 li
@
352.922 291.859 mo
342.84 281.781 li
342.84 291.859 mo
352.922 281.781 li
@
431.762 311.539 mo
421.68 301.461 li
421.68 311.539 mo
431.762 301.461 li
@
510.602 177.5 mo
500.52 167.422 li
500.52 177.5 mo
510.602 167.422 li
@
589.441 223.461 mo
579.359 213.379 li
579.359 223.461 mo
589.441 213.379 li
@
668.16 79.461 mo
658.078 69.379 li
658.078 79.461 mo
668.16 69.379 li
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
32.762 503.641 mo
111.602 472.078 li
190.32 409.801 li
269.16 346.32 li
348 284.52 li
426.84 224.039 li
505.559 164.281 li
584.398 99.602 li
663.238 40.199 li
@
grestore
27.719 498.5 mo
37.68 498.5 li
37.68 508.461 li
27.719 508.461 li
cp
@
106.441 466.941 mo
116.398 466.941 li
116.398 476.898 li
106.441 476.898 li
cp
@
185.281 404.781 mo
195.238 404.781 li
195.238 414.738 li
185.281 414.738 li
cp
@
264.121 341.301 mo
274.078 341.301 li
274.078 351.262 li
264.121 351.262 li
cp
@
342.84 279.379 mo
352.801 279.379 li
352.801 289.34 li
342.84 289.34 li
cp
@
421.68 219.019 mo
431.641 219.019 li
431.641 228.98 li
421.68 228.98 li
cp
@
500.52 159.141 mo
510.481 159.141 li
510.481 169.102 li
500.52 169.102 li
cp
@
579.359 94.578 mo
589.32 94.578 li
589.32 104.539 li
579.359 104.539 li
cp
@
658.078 35.059 mo
668.039 35.059 li
668.039 45.02 li
658.078 45.02 li
cp
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
32.762 503.641 mo
111.602 472.922 li
190.32 412.68 li
269.16 385.922 li
348 308.52 li
426.84 266.879 li
505.559 244.801 li
584.398 129.719 li
663.238 115.801 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
37.801 508.578 mo
27.719 498.5 li
27.719 508.578 mo
37.801 498.5 li
.619135 .109529 .981689 .00570687 cmyk
@
116.52 477.98 mo
106.441 467.898 li
106.441 477.98 mo
116.52 467.898 li
@
195.359 417.621 mo
185.281 407.539 li
185.281 417.621 mo
195.359 407.539 li
@
274.199 390.98 mo
264.121 380.898 li
264.121 390.98 mo
274.199 380.898 li
@
352.922 313.578 mo
342.84 303.5 li
342.84 313.578 mo
352.922 303.5 li
@
431.762 271.82 mo
421.68 261.738 li
421.68 271.82 mo
431.762 261.738 li
@
510.602 249.738 mo
500.52 239.66 li
500.52 249.738 mo
510.602 239.66 li
@
589.441 134.781 mo
579.359 124.699 li
579.359 134.781 mo
589.441 124.699 li
@
668.16 120.738 mo
658.078 110.66 li
658.078 120.738 mo
668.16 110.66 li
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
32.762 503.641 mo
111.602 471.84 li
190.32 409.078 li
269.16 346.32 li
348 284.039 li
426.84 221.398 li
505.559 157.68 li
584.398 96.238 li
663.238 31.441 li
@
grestore
27.719 498.5 mo
37.68 498.5 li
37.68 508.461 li
27.719 508.461 li
cp
@
106.441 466.82 mo
116.398 466.82 li
116.398 476.781 li
106.441 476.781 li
cp
@
185.281 403.941 mo
195.238 403.941 li
195.238 413.898 li
185.281 413.898 li
cp
@
264.121 341.18 mo
274.078 341.18 li
274.078 351.141 li
264.121 351.141 li
cp
@
342.84 278.898 mo
352.801 278.898 li
352.801 288.859 li
342.84 288.859 li
cp
@
421.68 216.379 mo
431.641 216.379 li
431.641 226.34 li
421.68 226.34 li
cp
@
500.52 152.66 mo
510.481 152.66 li
510.481 162.621 li
500.52 162.621 li
cp
@
579.359 91.219 mo
589.32 91.219 li
589.32 101.18 li
579.359 101.18 li
cp
@
658.078 26.301 mo
668.039 26.301 li
668.039 36.262 li
658.078 36.262 li
cp
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
32.762 503.641 mo
111.602 472.922 li
190.32 412.922 li
269.16 386.281 li
348 288.719 li
426.84 266.879 li
505.559 170.281 li
584.398 251.641 li
663.238 79.922 li
0 .990631 1 .000396735 cmyk
@
grestore
37.801 508.578 mo
27.719 498.5 li
27.719 508.578 mo
37.801 498.5 li
0 .990631 1 .000396735 cmyk
@
116.52 477.98 mo
106.441 467.898 li
106.441 477.98 mo
116.52 467.898 li
@
195.359 417.98 mo
185.281 407.898 li
185.281 417.98 mo
195.359 407.898 li
@
274.199 391.219 mo
264.121 381.141 li
264.121 391.219 mo
274.199 381.141 li
@
352.922 293.66 mo
342.84 283.578 li
342.84 293.66 mo
352.922 283.578 li
@
431.762 271.82 mo
421.68 261.738 li
421.68 271.82 mo
431.762 261.738 li
@
510.602 175.219 mo
500.52 165.141 li
500.52 175.219 mo
510.602 165.141 li
@
589.441 256.578 mo
579.359 246.5 li
579.359 256.578 mo
589.441 246.5 li
@
668.16 84.98 mo
658.078 74.898 li
658.078 84.98 mo
668.16 74.898 li
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
32.762 503.641 mo
111.602 472.078 li
190.32 409.078 li
269.16 346.801 li
348 283.922 li
426.84 225.238 li
505.559 157.199 li
584.398 99.359 li
663.238 41.16 li
@
grestore
27.719 498.5 mo
37.68 498.5 li
37.68 508.461 li
27.719 508.461 li
cp
@
106.441 467.059 mo
116.398 467.059 li
116.398 477.02 li
106.441 477.02 li
cp
@
185.281 404.059 mo
195.238 404.059 li
195.238 414.02 li
185.281 414.02 li
cp
@
264.121 341.781 mo
274.078 341.781 li
274.078 351.738 li
264.121 351.738 li
cp
@
342.84 278.898 mo
352.801 278.898 li
352.801 288.859 li
342.84 288.859 li
cp
@
421.68 220.102 mo
431.641 220.102 li
431.641 230.059 li
421.68 230.059 li
cp
@
500.52 152.18 mo
510.481 152.18 li
510.481 162.141 li
500.52 162.141 li
cp
@
579.359 94.34 mo
589.32 94.34 li
589.32 104.301 li
579.359 104.301 li
cp
@
658.078 36.019 mo
668.039 36.019 li
668.039 45.98 li
658.078 45.98 li
cp
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
32.762 503.641 mo
111.602 472.801 li
190.32 412.559 li
269.16 374.641 li
348 322.922 li
426.84 330.719 li
505.559 257.16 li
584.398 204.48 li
663.238 189.84 li
.62768 .285466 0 0 cmyk
@
grestore
37.801 508.578 mo
27.719 498.5 li
27.719 508.578 mo
37.801 498.5 li
.62768 .285466 0 0 cmyk
@
116.52 477.859 mo
106.441 467.781 li
106.441 477.859 mo
116.52 467.781 li
@
195.359 417.621 mo
185.281 407.539 li
185.281 417.621 mo
195.359 407.539 li
@
274.199 379.699 mo
264.121 369.621 li
264.121 379.699 mo
274.199 369.621 li
@
352.922 327.98 mo
342.84 317.898 li
342.84 327.98 mo
352.922 317.898 li
@
431.762 335.66 mo
421.68 325.578 li
421.68 335.66 mo
431.762 325.578 li
@
510.602 262.219 mo
500.52 252.141 li
500.52 262.219 mo
510.602 252.141 li
@
589.441 209.422 mo
579.359 199.34 li
579.359 209.422 mo
589.441 199.34 li
@
668.16 194.781 mo
658.078 184.699 li
658.078 194.781 mo
668.16 184.699 li
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
32.762 503.641 mo
111.602 472.441 li
190.32 409.801 li
269.16 347.398 li
348 283.801 li
426.84 223.199 li
505.559 159 li
584.398 97.078 li
663.238 31.441 li
@
grestore
27.719 498.5 mo
37.68 498.5 li
37.68 508.461 li
27.719 508.461 li
cp
@
106.441 467.301 mo
116.398 467.301 li
116.398 477.262 li
106.441 477.262 li
cp
@
185.281 404.66 mo
195.238 404.66 li
195.238 414.621 li
185.281 414.621 li
cp
@
264.121 342.379 mo
274.078 342.379 li
274.078 352.34 li
264.121 352.34 li
cp
@
342.84 278.66 mo
352.801 278.66 li
352.801 288.621 li
342.84 288.621 li
cp
@
421.68 218.18 mo
431.641 218.18 li
431.641 228.141 li
421.68 228.141 li
cp
@
500.52 153.859 mo
510.481 153.859 li
510.481 163.82 li
500.52 163.82 li
cp
@
579.359 91.941 mo
589.32 91.941 li
589.32 101.898 li
579.359 101.898 li
cp
@
658.078 26.4221 mo
668.039 26.4221 li
668.039 36.3791 li
658.078 36.3791 li
cp
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
32.762 503.641 mo
111.602 473.039 li
190.32 413.039 li
269.16 374.52 li
348 327.238 li
426.84 320.879 li
505.559 269.52 li
584.398 165.961 li
663.238 175.32 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
37.801 508.578 mo
27.719 498.5 li
27.719 508.578 mo
37.801 498.5 li
.0319219 .621851 .911223 .000427253 cmyk
@
116.52 477.98 mo
106.441 467.898 li
106.441 477.98 mo
116.52 467.898 li
@
195.359 418.102 mo
185.281 408.019 li
185.281 418.102 mo
195.359 408.019 li
@
274.199 379.461 mo
264.121 369.379 li
264.121 379.461 mo
274.199 369.379 li
@
352.922 332.18 mo
342.84 322.102 li
342.84 332.18 mo
352.922 322.102 li
@
431.762 325.941 mo
421.68 315.859 li
421.68 325.941 mo
431.762 315.859 li
@
510.602 274.578 mo
500.52 264.5 li
500.52 274.578 mo
510.602 264.5 li
@
589.441 170.898 mo
579.359 160.82 li
579.359 170.898 mo
589.441 160.82 li
@
668.16 180.379 mo
658.078 170.301 li
658.078 180.379 mo
668.16 170.301 li
@
gsave
32.762 28.801 mo
663.961 28.801 li
663.961 504.36 li
32.762 504.36 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
32.762 503.641 mo
111.602 472.32 li
190.32 409.559 li
269.16 347.039 li
348 284.762 li
426.84 226.199 li
505.559 160.801 li
584.398 102.238 li
663.238 36.961 li
@
grestore
27.719 498.5 mo
37.68 498.5 li
37.68 508.461 li
27.719 508.461 li
cp
@
106.441 467.301 mo
116.398 467.301 li
116.398 477.262 li
106.441 477.262 li
cp
@
185.281 404.422 mo
195.238 404.422 li
195.238 414.379 li
185.281 414.379 li
cp
@
264.121 341.898 mo
274.078 341.898 li
274.078 351.859 li
264.121 351.859 li
cp
@
342.84 279.738 mo
352.801 279.738 li
352.801 289.699 li
342.84 289.699 li
cp
@
421.68 221.059 mo
431.641 221.059 li
431.641 231.02 li
421.68 231.02 li
cp
@
500.52 155.66 mo
510.481 155.66 li
510.481 165.621 li
500.52 165.621 li
cp
@
579.359 97.102 mo
589.32 97.102 li
589.32 107.059 li
579.359 107.059 li
cp
@
658.078 31.941 mo
668.039 31.941 li
668.039 41.898 li
658.078 41.898 li
cp
@
15.555 495.656 mo
21.633 495.656 li
21.633 510.308 li
15.555 510.308 li
cp
0 0 0 0 cmyk
ef
21.004 506.746 mo
21 506.82 20.996 506.883 20.988 506.934 cv
20.977 506.988 20.961 507.031 20.941 507.059 cv
20.918 507.094 20.895 507.117 20.871 507.125 cv
20.848 507.141 20.82 507.145 20.793 507.145 cv
16.832 507.145 li
16.805 507.145 16.781 507.141 16.758 507.125 cv
16.734 507.117 16.711 507.094 16.691 507.059 cv
16.668 507.031 16.652 506.988 16.641 506.934 cv
16.625 506.883 16.617 506.82 16.621 506.746 cv
16.617 506.676 16.625 506.617 16.641 506.566 cv
16.652 506.516 16.664 506.473 16.684 506.437 cv
16.699 506.406 16.723 506.383 16.746 506.363 cv
16.77 506.348 16.797 506.336 16.832 506.336 cv
18.418 506.336 li
18.418 500.57 li
16.949 501.441 li
16.875 501.488 16.816 501.512 16.773 501.516 cv
16.727 501.527 16.691 501.52 16.664 501.488 cv
16.633 501.465 16.613 501.422 16.605 501.363 cv
16.598 501.305 16.594 501.23 16.594 501.137 cv
16.594 501.074 16.594 501.016 16.602 500.969 cv
16.605 500.922 16.617 500.883 16.629 500.852 cv
16.637 500.82 16.652 500.793 16.676 500.77 cv
16.699 500.746 16.727 500.723 16.762 500.699 cv
18.512 499.582 li
18.523 499.57 18.543 499.559 18.57 499.551 cv
18.59 499.543 18.621 499.535 18.656 499.527 cv
18.688 499.52 18.727 499.516 18.777 499.516 cv
18.82 499.516 18.879 499.516 18.957 499.512 cv
19.047 499.516 19.125 499.52 19.191 499.523 cv
19.25 499.535 19.301 499.547 19.336 499.555 cv
19.367 499.57 19.391 499.586 19.406 499.605 cv
19.418 499.629 19.422 499.652 19.426 499.676 cv
19.426 506.336 li
20.793 506.336 li
20.82 506.336 20.852 506.348 20.883 506.363 cv
20.91 506.383 20.93 506.406 20.949 506.437 cv
20.965 506.473 20.98 506.516 20.988 506.566 cv
20.996 506.617 21 506.676 21.004 506.746 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.555 464.008 mo
21.633 464.008 li
21.633 478.656 li
15.555 478.656 li
cp
0 0 0 0 cmyk
ef
20.988 475.055 mo
20.988 475.125 20.98 475.187 20.973 475.242 cv
20.957 475.297 20.945 475.344 20.93 475.379 cv
20.914 475.418 20.891 475.445 20.859 475.461 cv
20.828 475.48 20.797 475.488 20.766 475.488 cv
16.574 475.488 li
16.52 475.488 16.473 475.484 16.434 475.469 cv
16.391 475.461 16.355 475.437 16.328 475.402 cv
16.297 475.375 16.273 475.328 16.262 475.266 cv
16.246 475.207 16.242 475.137 16.242 475.051 cv
16.242 474.977 16.242 474.906 16.25 474.844 cv
16.254 474.785 16.27 474.734 16.289 474.687 cv
16.309 474.645 16.332 474.602 16.363 474.555 cv
16.391 474.516 16.43 474.465 16.484 474.41 cv
18 472.852 li
18.348 472.492 18.625 472.172 18.84 471.887 cv
19.051 471.602 19.215 471.34 19.332 471.105 cv
19.441 470.871 19.52 470.66 19.559 470.469 cv
19.594 470.277 19.609 470.098 19.613 469.926 cv
19.609 469.762 19.582 469.602 19.527 469.449 cv
19.469 469.301 19.387 469.168 19.281 469.055 cv
19.172 468.945 19.039 468.855 18.879 468.785 cv
18.715 468.719 18.527 468.687 18.324 468.684 cv
18.074 468.687 17.855 468.719 17.66 468.785 cv
17.465 468.855 17.293 468.93 17.145 469.004 cv
16.996 469.086 16.871 469.156 16.777 469.219 cv
16.676 469.285 16.605 469.32 16.559 469.316 cv
16.527 469.32 16.5 469.312 16.48 469.293 cv
16.457 469.281 16.438 469.254 16.426 469.219 cv
16.41 469.187 16.402 469.141 16.395 469.078 cv
16.387 469.02 16.383 468.949 16.383 468.867 cv
16.383 468.809 16.383 468.758 16.387 468.715 cv
16.391 468.676 16.398 468.641 16.41 468.605 cv
16.418 468.578 16.43 468.547 16.449 468.516 cv
16.461 468.488 16.492 468.457 16.543 468.414 cv
16.586 468.375 16.668 468.316 16.785 468.246 cv
16.898 468.176 17.043 468.109 17.219 468.039 cv
17.391 467.973 17.582 467.914 17.793 467.863 cv
18 467.82 18.219 467.797 18.449 467.793 cv
18.816 467.797 19.137 467.848 19.414 467.949 cv
19.688 468.055 19.918 468.195 20.098 468.375 cv
20.277 468.555 20.414 468.766 20.508 469.004 cv
20.598 469.242 20.641 469.496 20.645 469.762 cv
20.641 470.012 20.621 470.254 20.578 470.488 cv
20.531 470.73 20.438 470.988 20.305 471.266 cv
20.164 471.547 19.965 471.859 19.703 472.199 cv
19.441 472.543 19.094 472.934 18.66 473.379 cv
17.461 474.633 li
20.762 474.633 li
20.789 474.633 20.82 474.645 20.852 474.66 cv
20.879 474.68 20.902 474.703 20.926 474.738 cv
20.941 474.777 20.957 474.824 20.973 474.871 cv
20.98 474.926 20.988 474.984 20.988 475.055 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.555 432.352 mo
21.633 432.352 li
21.633 447 li
15.555 447 li
cp
0 0 0 0 cmyk
ef
20.93 441.66 mo
20.93 442.008 20.867 442.324 20.746 442.602 cv
20.625 442.883 20.453 443.121 20.227 443.32 cv
20 443.52 19.719 443.672 19.387 443.777 cv
19.055 443.883 18.68 443.934 18.262 443.937 cv
18.008 443.934 17.77 443.914 17.551 443.875 cv
17.328 443.836 17.133 443.789 16.965 443.734 cv
16.789 443.68 16.648 443.621 16.535 443.559 cv
16.418 443.496 16.344 443.453 16.32 443.426 cv
16.289 443.398 16.27 443.371 16.254 443.344 cv
16.238 443.316 16.223 443.281 16.211 443.242 cv
16.199 443.203 16.191 443.156 16.184 443.102 cv
16.176 443.047 16.172 442.977 16.176 442.891 cv
16.172 442.75 16.188 442.652 16.219 442.598 cv
16.246 442.543 16.285 442.516 16.34 442.516 cv
16.375 442.516 16.445 442.547 16.551 442.609 cv
16.656 442.672 16.793 442.742 16.961 442.812 cv
17.125 442.891 17.32 442.957 17.543 443.016 cv
17.766 443.082 18.012 443.113 18.289 443.109 cv
18.547 443.113 18.781 443.078 18.984 443.008 cv
19.184 442.941 19.352 442.848 19.488 442.727 cv
19.625 442.609 19.727 442.469 19.797 442.297 cv
19.863 442.133 19.898 441.949 19.898 441.754 cv
19.898 441.539 19.852 441.348 19.766 441.172 cv
19.676 441.004 19.551 440.855 19.387 440.727 cv
19.219 440.605 19.012 440.508 18.77 440.441 cv
18.52 440.379 18.242 440.348 17.938 440.344 cv
17.195 440.344 li
17.16 440.348 17.129 440.34 17.098 440.324 cv
17.066 440.309 17.039 440.285 17.02 440.254 cv
16.996 440.223 16.977 440.184 16.965 440.133 cv
16.949 440.082 16.945 440.016 16.945 439.93 cv
16.945 439.859 16.949 439.797 16.961 439.746 cv
16.973 439.699 16.988 439.66 17.012 439.629 cv
17.027 439.602 17.055 439.582 17.086 439.566 cv
17.113 439.559 17.145 439.551 17.18 439.547 cv
17.84 439.547 li
18.098 439.551 18.328 439.516 18.535 439.445 cv
18.738 439.379 18.914 439.285 19.055 439.156 cv
19.195 439.035 19.305 438.887 19.383 438.711 cv
19.461 438.539 19.5 438.344 19.5 438.125 cv
19.5 437.973 19.473 437.824 19.422 437.68 cv
19.371 437.539 19.297 437.414 19.195 437.309 cv
19.094 437.203 18.961 437.121 18.805 437.059 cv
18.641 437.004 18.461 436.973 18.258 436.969 cv
18.031 436.973 17.82 437.008 17.633 437.07 cv
17.438 437.141 17.27 437.211 17.125 437.289 cv
16.973 437.367 16.852 437.441 16.758 437.508 cv
16.66 437.578 16.59 437.613 16.551 437.609 cv
16.523 437.613 16.5 437.609 16.48 437.598 cv
16.457 437.59 16.438 437.57 16.426 437.539 cv
16.41 437.512 16.402 437.469 16.395 437.414 cv
16.387 437.363 16.383 437.293 16.387 437.207 cv
16.383 437.148 16.387 437.098 16.395 437.051 cv
16.398 437.008 16.406 436.969 16.418 436.934 cv
16.426 436.902 16.438 436.871 16.457 436.844 cv
16.469 436.82 16.496 436.789 16.535 436.75 cv
16.574 436.711 16.648 436.656 16.762 436.586 cv
16.875 436.516 17.016 436.449 17.184 436.379 cv
17.348 436.312 17.539 436.254 17.758 436.203 cv
17.973 436.16 18.207 436.137 18.457 436.133 cv
18.809 436.137 19.117 436.18 19.383 436.27 cv
19.648 436.363 19.867 436.492 20.047 436.652 cv
20.223 436.82 20.355 437.016 20.445 437.242 cv
20.531 437.469 20.578 437.723 20.578 438 cv
20.578 438.238 20.547 438.461 20.484 438.664 cv
20.422 438.871 20.328 439.051 20.207 439.207 cv
20.086 439.367 19.938 439.504 19.762 439.613 cv
19.586 439.73 19.383 439.805 19.152 439.844 cv
19.152 439.855 li
19.414 439.887 19.652 439.953 19.871 440.055 cv
20.086 440.156 20.273 440.285 20.434 440.441 cv
20.586 440.598 20.707 440.781 20.797 440.992 cv
20.883 441.203 20.93 441.426 20.93 441.66 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.555 400.699 mo
21.633 400.699 li
21.633 415.351 li
15.555 415.351 li
cp
0 0 0 0 cmyk
ef
21.309 410.023 mo
21.305 410.156 21.285 410.258 21.25 410.328 cv
21.207 410.402 21.152 410.441 21.09 410.437 cv
20.23 410.437 li
20.23 412.031 li
20.227 412.066 20.219 412.094 20.207 412.113 cv
20.188 412.137 20.16 412.152 20.121 412.168 cv
20.082 412.184 20.027 412.195 19.965 412.203 cv
19.898 412.211 19.816 412.215 19.719 412.215 cv
19.617 412.215 19.539 412.211 19.477 412.203 cv
19.414 412.195 19.363 412.184 19.324 412.168 cv
19.285 412.152 19.258 412.137 19.242 412.113 cv
19.227 412.094 19.219 412.066 19.223 412.031 cv
19.223 410.437 li
16.121 410.437 li
16.074 410.441 16.039 410.434 16.008 410.422 cv
15.977 410.414 15.945 410.395 15.922 410.359 cv
15.891 410.332 15.875 410.285 15.867 410.223 cv
15.859 410.164 15.855 410.09 15.855 409.992 cv
15.855 409.922 15.855 409.855 15.859 409.797 cv
15.863 409.738 15.871 409.684 15.883 409.637 cv
15.895 409.59 15.91 409.543 15.93 409.496 cv
15.949 409.449 15.973 409.402 16 409.352 cv
18.703 404.742 li
18.723 404.715 18.75 404.687 18.789 404.66 cv
18.824 404.641 18.875 404.621 18.938 404.602 cv
18.996 404.59 19.066 404.578 19.156 404.57 cv
19.242 404.566 19.348 404.562 19.469 404.562 cv
19.598 404.562 19.711 404.57 19.809 404.578 cv
19.906 404.594 19.984 404.605 20.047 404.617 cv
20.102 404.637 20.148 404.656 20.184 404.68 cv
20.211 404.703 20.227 404.734 20.23 404.766 cv
20.23 409.609 li
21.09 409.609 li
21.152 409.613 21.207 409.648 21.246 409.711 cv
21.285 409.781 21.305 409.883 21.309 410.023 cv
cp
19.223 405.445 mo
19.215 405.445 li
16.777 409.609 li
19.223 409.609 li
cp
.629114 .553033 .543389 .289647 cmyk
f
15.555 369.051 mo
21.633 369.051 li
21.633 383.699 li
15.555 383.699 li
cp
0 0 0 0 cmyk
ef
20.953 378.082 mo
20.953 378.488 20.883 378.852 20.746 379.168 cv
20.609 379.484 20.418 379.75 20.168 379.969 cv
19.918 380.187 19.617 380.352 19.273 380.461 cv
18.922 380.57 18.539 380.625 18.121 380.629 cv
17.883 380.625 17.66 380.609 17.453 380.578 cv
17.238 380.547 17.051 380.508 16.891 380.461 cv
16.723 380.414 16.59 380.367 16.488 380.316 cv
16.383 380.273 16.313 380.234 16.285 380.203 cv
16.254 380.176 16.234 380.152 16.223 380.125 cv
16.211 380.105 16.199 380.078 16.191 380.043 cv
16.176 380.012 16.172 379.969 16.172 379.918 cv
16.168 379.867 16.164 379.805 16.168 379.734 cv
16.164 379.672 16.168 379.613 16.176 379.559 cv
16.18 379.504 16.191 379.461 16.207 379.43 cv
16.223 379.398 16.238 379.375 16.262 379.355 cv
16.277 379.344 16.305 379.336 16.336 379.332 cv
16.375 379.336 16.434 379.359 16.516 379.406 cv
16.598 379.453 16.707 379.508 16.848 379.562 cv
16.984 379.621 17.156 379.672 17.363 379.723 cv
17.566 379.777 17.813 379.805 18.094 379.801 cv
18.355 379.805 18.594 379.773 18.816 379.707 cv
19.031 379.648 19.219 379.551 19.379 379.414 cv
19.535 379.285 19.66 379.117 19.75 378.914 cv
19.84 378.711 19.887 378.465 19.887 378.176 cv
19.887 377.934 19.848 377.723 19.773 377.535 cv
19.695 377.352 19.578 377.195 19.422 377.07 cv
19.262 376.949 19.063 376.859 18.82 376.797 cv
18.578 376.742 18.289 376.711 17.953 376.707 cv
17.715 376.711 17.508 376.723 17.34 376.742 cv
17.164 376.77 17.004 376.781 16.855 376.777 cv
16.742 376.781 16.664 376.754 16.621 376.699 cv
16.57 376.648 16.547 376.551 16.551 376.406 cv
16.551 373.316 li
16.547 373.191 16.578 373.094 16.641 373.031 cv
16.703 372.969 16.789 372.937 16.902 372.937 cv
20.262 372.937 li
20.293 372.937 20.32 372.949 20.352 372.965 cv
20.375 372.984 20.402 373.008 20.426 373.043 cv
20.445 373.082 20.457 373.129 20.469 373.18 cv
20.477 373.238 20.484 373.301 20.484 373.371 cv
20.484 373.512 20.465 373.621 20.426 373.699 cv
20.387 373.777 20.332 373.816 20.27 373.816 cv
17.559 373.816 li
17.559 375.941 li
17.688 375.926 17.824 375.914 17.965 375.91 cv
18.102 375.906 18.258 375.902 18.441 375.902 cv
18.855 375.902 19.223 375.957 19.535 376.059 cv
19.848 376.168 20.105 376.312 20.316 376.5 cv
20.523 376.687 20.684 376.918 20.793 377.187 cv
20.898 377.457 20.953 377.754 20.953 378.082 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.555 337.398 mo
21.633 337.398 li
21.633 352.05 li
15.555 352.05 li
cp
0 0 0 0 cmyk
ef
21.184 346.406 mo
21.18 346.738 21.129 347.059 21.031 347.371 cv
20.926 347.684 20.77 347.957 20.563 348.191 cv
20.348 348.426 20.082 348.617 19.758 348.758 cv
19.43 348.898 19.047 348.965 18.609 348.969 cv
18.293 348.965 18.012 348.93 17.773 348.852 cv
17.527 348.777 17.316 348.664 17.141 348.52 cv
16.957 348.379 16.809 348.203 16.691 347.988 cv
16.57 347.781 16.473 347.539 16.402 347.266 cv
16.324 346.996 16.273 346.703 16.246 346.379 cv
16.211 346.062 16.195 345.719 16.199 345.352 cv
16.195 345.027 16.215 344.699 16.254 344.367 cv
16.289 344.035 16.352 343.715 16.441 343.406 cv
16.527 343.098 16.648 342.809 16.805 342.535 cv
16.961 342.266 17.152 342.027 17.387 341.824 cv
17.617 341.625 17.898 341.465 18.223 341.348 cv
18.543 341.23 18.918 341.172 19.355 341.172 cv
19.496 341.172 19.645 341.184 19.793 341.199 cv
19.941 341.223 20.078 341.246 20.203 341.27 cv
20.328 341.301 20.434 341.332 20.52 341.367 cv
20.605 341.402 20.66 341.43 20.688 341.453 cv
20.715 341.477 20.734 341.5 20.75 341.523 cv
20.758 341.547 20.77 341.574 20.781 341.605 cv
20.785 341.637 20.793 341.672 20.801 341.703 cv
20.805 341.742 20.805 341.785 20.809 341.84 cv
20.805 341.91 20.805 341.973 20.805 342.023 cv
20.801 342.074 20.793 342.113 20.781 342.145 cv
20.766 342.176 20.746 342.199 20.727 342.215 cv
20.703 342.23 20.676 342.238 20.645 342.238 cv
20.598 342.238 20.539 342.227 20.465 342.199 cv
20.391 342.172 20.301 342.141 20.195 342.105 cv
20.09 342.074 19.961 342.043 19.813 342.016 cv
19.66 341.992 19.488 341.98 19.289 341.977 cv
18.926 341.98 18.613 342.055 18.352 342.199 cv
18.086 342.352 17.871 342.551 17.707 342.797 cv
17.543 343.051 17.418 343.34 17.34 343.668 cv
17.258 343.996 17.215 344.34 17.203 344.699 cv
17.305 344.641 17.418 344.582 17.547 344.523 cv
17.672 344.469 17.809 344.418 17.961 344.367 cv
18.109 344.324 18.27 344.285 18.438 344.254 cv
18.605 344.223 18.785 344.207 18.98 344.207 cv
19.387 344.207 19.734 344.266 20.016 344.375 cv
20.297 344.488 20.523 344.641 20.695 344.836 cv
20.867 345.035 20.992 345.27 21.07 345.535 cv
21.145 345.809 21.18 346.098 21.184 346.406 cv
cp
20.16 346.5 mo
20.156 346.273 20.133 346.066 20.094 345.879 cv
20.047 345.695 19.973 345.539 19.867 345.41 cv
19.762 345.281 19.621 345.18 19.445 345.109 cv
19.27 345.039 19.055 345.004 18.797 345.004 cv
18.652 345.004 18.508 345.02 18.363 345.043 cv
18.215 345.07 18.074 345.105 17.941 345.148 cv
17.809 345.195 17.68 345.246 17.555 345.309 cv
17.43 345.371 17.316 345.437 17.223 345.5 cv
17.219 346.008 17.25 346.43 17.316 346.77 cv
17.379 347.109 17.473 347.383 17.598 347.586 cv
17.719 347.793 17.875 347.937 18.059 348.023 cv
18.238 348.113 18.453 348.156 18.703 348.156 cv
18.953 348.156 19.168 348.109 19.352 348.016 cv
19.535 347.922 19.688 347.797 19.809 347.637 cv
19.93 347.48 20.02 347.305 20.074 347.105 cv
20.129 346.91 20.156 346.707 20.16 346.5 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.555 305.75 mo
21.633 305.75 li
21.633 320.398 li
15.555 320.398 li
cp
0 0 0 0 cmyk
ef
21.098 310.062 mo
21.094 310.133 21.09 310.199 21.09 310.254 cv
21.082 310.312 21.074 310.367 21.066 310.418 cv
21.051 310.473 21.039 310.523 21.023 310.57 cv
21.008 310.621 20.988 310.672 20.965 310.727 cv
18.234 317.016 li
18.215 317.066 18.188 317.105 18.16 317.133 cv
18.129 317.164 18.094 317.187 18.047 317.203 cv
18 317.219 17.941 317.227 17.875 317.234 cv
17.801 317.242 17.715 317.246 17.621 317.246 cv
17.48 317.246 17.379 317.238 17.309 317.227 cv
17.234 317.215 17.18 317.199 17.148 317.172 cv
17.113 317.148 17.098 317.117 17.102 317.078 cv
17.105 317.043 17.121 317 17.145 316.945 cv
20.016 310.516 li
16.379 310.516 li
16.301 310.52 16.246 310.48 16.207 310.398 cv
16.168 310.324 16.148 310.215 16.152 310.07 cv
16.148 309.996 16.152 309.93 16.168 309.875 cv
16.176 309.82 16.191 309.777 16.211 309.738 cv
16.23 309.703 16.254 309.676 16.281 309.656 cv
16.309 309.641 16.34 309.629 16.379 309.629 cv
20.793 309.629 li
20.848 309.629 20.895 309.637 20.938 309.648 cv
20.977 309.66 21.008 309.684 21.031 309.719 cv
21.051 309.754 21.07 309.797 21.082 309.852 cv
21.09 309.906 21.094 309.977 21.098 310.062 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.555 274.102 mo
21.633 274.102 li
21.633 288.75 li
15.555 288.75 li
cp
0 0 0 0 cmyk
ef
21.164 283.605 mo
21.164 283.934 21.105 284.227 20.988 284.48 cv
20.871 284.738 20.699 284.953 20.48 285.129 cv
20.258 285.309 19.988 285.441 19.664 285.527 cv
19.336 285.613 18.965 285.656 18.551 285.66 cv
18.16 285.656 17.809 285.617 17.5 285.539 cv
17.191 285.461 16.93 285.34 16.715 285.176 cv
16.5 285.016 16.336 284.82 16.223 284.582 cv
16.109 284.352 16.055 284.082 16.055 283.781 cv
16.055 283.547 16.094 283.328 16.172 283.125 cv
16.25 282.926 16.359 282.742 16.508 282.574 cv
16.652 282.41 16.836 282.254 17.051 282.105 cv
17.262 281.957 17.504 281.816 17.777 281.684 cv
17.543 281.566 17.336 281.441 17.156 281.301 cv
16.977 281.168 16.824 281.02 16.699 280.859 cv
16.574 280.703 16.477 280.535 16.414 280.352 cv
16.344 280.176 16.313 279.98 16.316 279.77 cv
16.313 279.508 16.359 279.258 16.461 279.023 cv
16.555 278.789 16.699 278.586 16.895 278.414 cv
17.082 278.242 17.328 278.109 17.633 278.008 cv
17.93 277.91 18.281 277.859 18.68 277.855 cv
19.063 277.859 19.391 277.906 19.672 277.996 cv
19.945 278.09 20.176 278.215 20.363 278.371 cv
20.543 278.531 20.68 278.715 20.766 278.93 cv
20.852 279.148 20.895 279.379 20.895 279.621 cv
20.895 279.82 20.859 280.012 20.797 280.195 cv
20.727 280.383 20.633 280.559 20.512 280.719 cv
20.383 280.887 20.23 281.039 20.051 281.18 cv
19.871 281.32 19.664 281.453 19.43 281.578 cv
19.707 281.719 19.953 281.859 20.172 282 cv
20.387 282.145 20.566 282.301 20.715 282.465 cv
20.855 282.633 20.969 282.809 21.047 282.992 cv
21.125 283.18 21.164 283.383 21.164 283.605 cv
cp
19.898 279.715 mo
19.898 279.551 19.867 279.402 19.813 279.27 cv
19.754 279.137 19.672 279.023 19.566 278.93 cv
19.453 278.836 19.316 278.766 19.156 278.719 cv
18.992 278.672 18.809 278.648 18.605 278.645 cv
18.18 278.648 17.859 278.742 17.645 278.93 cv
17.426 279.121 17.32 279.383 17.32 279.715 cv
17.32 279.867 17.344 280.012 17.398 280.141 cv
17.449 280.273 17.531 280.395 17.645 280.512 cv
17.754 280.629 17.895 280.746 18.066 280.855 cv
18.234 280.969 18.438 281.082 18.676 281.203 cv
19.066 281 19.371 280.777 19.582 280.531 cv
19.793 280.285 19.898 280.012 19.898 279.715 cv
cp
20.145 283.711 mo
20.145 283.531 20.109 283.371 20.043 283.223 cv
19.977 283.082 19.875 282.945 19.742 282.812 cv
19.605 282.687 19.438 282.562 19.238 282.441 cv
19.035 282.324 18.805 282.199 18.539 282.07 cv
18.289 282.195 18.07 282.316 17.891 282.434 cv
17.703 282.555 17.551 282.68 17.434 282.809 cv
17.309 282.941 17.219 283.078 17.164 283.219 cv
17.102 283.359 17.074 283.516 17.074 283.687 cv
17.074 284.066 17.203 284.359 17.465 284.566 cv
17.723 284.777 18.109 284.883 18.629 284.879 cv
19.125 284.883 19.504 284.777 19.762 284.566 cv
20.016 284.355 20.145 284.07 20.145 283.711 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.555 242.449 mo
21.633 242.449 li
21.633 257.101 li
15.555 257.101 li
cp
0 0 0 0 cmyk
ef
21.047 249.809 mo
21.047 250.137 21.027 250.469 20.988 250.805 cv
20.949 251.141 20.883 251.465 20.789 251.777 cv
20.695 252.09 20.566 252.383 20.41 252.648 cv
20.25 252.922 20.051 253.156 19.813 253.359 cv
19.57 253.562 19.285 253.723 18.957 253.836 cv
18.625 253.949 18.242 254.004 17.809 254.008 cv
17.637 254.004 17.473 253.992 17.316 253.977 cv
17.156 253.953 17.016 253.93 16.891 253.898 cv
16.762 253.867 16.656 253.836 16.57 253.801 cv
16.484 253.766 16.422 253.73 16.383 253.695 cv
16.344 253.66 16.313 253.613 16.297 253.551 cv
16.273 253.496 16.266 253.414 16.27 253.305 cv
16.266 253.227 16.27 253.156 16.277 253.102 cv
16.285 253.051 16.293 253.012 16.305 252.984 cv
16.316 252.961 16.332 252.945 16.355 252.93 cv
16.371 252.922 16.398 252.914 16.434 252.914 cv
16.477 252.914 16.539 252.93 16.617 252.957 cv
16.695 252.988 16.793 253.02 16.91 253.055 cv
17.027 253.094 17.168 253.129 17.332 253.152 cv
17.492 253.184 17.672 253.195 17.871 253.195 cv
18.25 253.195 18.574 253.125 18.848 252.977 cv
19.117 252.836 19.34 252.637 19.512 252.387 cv
19.684 252.141 19.813 251.855 19.898 251.531 cv
19.984 251.211 20.031 250.871 20.039 250.508 cv
19.832 250.629 19.582 250.734 19.297 250.828 cv
19.004 250.922 18.672 250.969 18.301 250.969 cv
17.875 250.969 17.52 250.914 17.234 250.797 cv
16.945 250.687 16.715 250.527 16.543 250.324 cv
16.367 250.125 16.242 249.891 16.168 249.613 cv
16.09 249.344 16.055 249.043 16.055 248.719 cv
16.055 248.383 16.102 248.066 16.199 247.762 cv
16.297 247.461 16.449 247.191 16.656 246.961 cv
16.863 246.734 17.129 246.551 17.449 246.41 cv
17.77 246.273 18.152 246.207 18.598 246.203 cv
18.914 246.207 19.191 246.246 19.438 246.324 cv
19.68 246.406 19.895 246.523 20.074 246.672 cv
20.254 246.828 20.406 247.008 20.531 247.219 cv
20.656 247.43 20.754 247.672 20.832 247.941 cv
20.906 248.211 20.961 248.504 20.996 248.816 cv
21.027 249.137 21.047 249.465 21.047 249.809 cv
cp
20.02 249.695 mo
20.016 249.199 19.984 248.777 19.922 248.434 cv
19.855 248.094 19.758 247.816 19.629 247.605 cv
19.496 247.395 19.336 247.242 19.152 247.148 cv
18.961 247.055 18.746 247.008 18.504 247.008 cv
18.246 247.008 18.027 247.055 17.852 247.145 cv
17.668 247.238 17.52 247.363 17.41 247.516 cv
17.293 247.672 17.211 247.844 17.156 248.039 cv
17.102 248.234 17.074 248.437 17.074 248.641 cv
17.074 248.875 17.098 249.086 17.148 249.277 cv
17.195 249.469 17.273 249.629 17.387 249.762 cv
17.492 249.895 17.637 250 17.813 250.07 cv
17.984 250.148 18.199 250.184 18.465 250.18 cv
18.754 250.184 19.039 250.141 19.313 250.047 cv
19.586 249.961 19.82 249.844 20.02 249.695 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
9.473 210.789 mo
21.633 210.789 li
21.633 225.441 li
9.473 225.441 li
cp
0 0 0 0 cmyk
ef
14.91 221.84 mo
14.906 221.914 14.902 221.977 14.895 222.027 cv
14.883 222.082 14.867 222.125 14.848 222.152 cv
14.824 222.187 14.801 222.211 14.777 222.219 cv
14.754 222.234 14.727 222.238 14.699 222.238 cv
10.738 222.238 li
10.711 222.238 10.688 222.234 10.664 222.219 cv
10.641 222.211 10.617 222.187 10.598 222.152 cv
10.574 222.125 10.559 222.082 10.547 222.027 cv
10.531 221.977 10.523 221.914 10.527 221.84 cv
10.523 221.77 10.531 221.711 10.547 221.66 cv
10.559 221.609 10.57 221.566 10.59 221.531 cv
10.605 221.5 10.629 221.477 10.652 221.457 cv
10.676 221.441 10.703 221.43 10.738 221.43 cv
12.324 221.43 li
12.324 215.664 li
10.855 216.535 li
10.781 216.582 10.723 216.605 10.68 216.609 cv
10.633 216.621 10.598 216.613 10.57 216.582 cv
10.539 216.559 10.52 216.516 10.512 216.457 cv
10.504 216.398 10.5 216.324 10.5 216.23 cv
10.5 216.168 10.5 216.109 10.508 216.062 cv
10.512 216.016 10.523 215.977 10.535 215.945 cv
10.543 215.914 10.559 215.887 10.582 215.863 cv
10.605 215.84 10.633 215.816 10.668 215.793 cv
12.418 214.676 li
12.43 214.664 12.449 214.652 12.477 214.645 cv
12.496 214.637 12.527 214.629 12.563 214.621 cv
12.594 214.613 12.633 214.609 12.684 214.609 cv
12.727 214.609 12.785 214.609 12.863 214.605 cv
12.953 214.609 13.031 214.613 13.098 214.617 cv
13.156 214.629 13.207 214.641 13.242 214.648 cv
13.273 214.664 13.297 214.68 13.313 214.699 cv
13.324 214.723 13.328 214.746 13.332 214.77 cv
13.332 221.43 li
14.699 221.43 li
14.727 221.43 14.758 221.441 14.789 221.457 cv
14.816 221.477 14.836 221.5 14.855 221.531 cv
14.871 221.566 14.887 221.609 14.895 221.66 cv
14.902 221.711 14.906 221.77 14.91 221.84 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.266 218.43 mo
21.262 219.012 21.215 219.543 21.129 220.023 cv
21.035 220.508 20.883 220.922 20.672 221.266 cv
20.453 221.609 20.176 221.879 19.836 222.066 cv
19.488 222.254 19.066 222.344 18.566 222.348 cv
18.09 222.344 17.688 222.262 17.363 222.094 cv
17.035 221.926 16.773 221.676 16.574 221.344 cv
16.371 221.016 16.227 220.609 16.148 220.125 cv
16.063 219.645 16.023 219.09 16.023 218.465 cv
16.023 217.887 16.07 217.359 16.164 216.875 cv
16.258 216.398 16.41 215.984 16.621 215.633 cv
16.832 215.289 17.109 215.02 17.453 214.828 cv
17.797 214.641 18.219 214.547 18.719 214.543 cv
19.195 214.547 19.598 214.633 19.926 214.801 cv
20.254 214.973 20.516 215.223 20.715 215.551 cv
20.914 215.883 21.055 216.289 21.141 216.77 cv
21.219 217.254 21.262 217.805 21.266 218.43 cv
cp
20.234 218.5 mo
20.23 218.125 20.219 217.785 20.195 217.48 cv
20.168 217.18 20.125 216.914 20.074 216.684 cv
20.02 216.457 19.953 216.262 19.867 216.09 cv
19.781 215.926 19.68 215.789 19.566 215.68 cv
19.445 215.578 19.313 215.5 19.164 215.445 cv
19.016 215.398 18.848 215.371 18.66 215.371 cv
18.328 215.371 18.059 215.449 17.852 215.605 cv
17.641 215.762 17.477 215.977 17.359 216.25 cv
17.242 216.523 17.16 216.844 17.117 217.211 cv
17.074 217.578 17.055 217.973 17.055 218.395 cv
17.055 218.965 17.082 219.449 17.141 219.84 cv
17.199 220.238 17.293 220.559 17.418 220.809 cv
17.543 221.059 17.703 221.242 17.906 221.355 cv
18.102 221.469 18.344 221.523 18.625 221.523 cv
18.844 221.523 19.035 221.488 19.203 221.418 cv
19.367 221.348 19.508 221.25 19.629 221.117 cv
19.746 220.988 19.848 220.828 19.926 220.645 cv
20.004 220.465 20.066 220.262 20.113 220.035 cv
20.16 219.812 20.191 219.574 20.207 219.312 cv
20.223 219.055 20.23 218.781 20.234 218.5 cv
cp
f
9.473 179.141 mo
21.633 179.141 li
21.633 193.789 li
9.473 193.789 li
cp
0 0 0 0 cmyk
ef
14.91 190.18 mo
14.906 190.254 14.902 190.316 14.895 190.367 cv
14.883 190.422 14.867 190.465 14.848 190.492 cv
14.824 190.527 14.801 190.551 14.777 190.559 cv
14.754 190.574 14.727 190.578 14.699 190.578 cv
10.738 190.578 li
10.711 190.578 10.688 190.574 10.664 190.559 cv
10.641 190.551 10.617 190.527 10.598 190.492 cv
10.574 190.465 10.559 190.422 10.547 190.367 cv
10.531 190.316 10.523 190.254 10.527 190.18 cv
10.523 190.109 10.531 190.051 10.547 190 cv
10.559 189.949 10.57 189.906 10.59 189.871 cv
10.605 189.84 10.629 189.816 10.652 189.797 cv
10.676 189.781 10.703 189.77 10.738 189.77 cv
12.324 189.77 li
12.324 184.004 li
10.855 184.875 li
10.781 184.922 10.723 184.945 10.68 184.949 cv
10.633 184.961 10.598 184.953 10.57 184.922 cv
10.539 184.898 10.52 184.855 10.512 184.797 cv
10.504 184.738 10.5 184.664 10.5 184.57 cv
10.5 184.508 10.5 184.449 10.508 184.402 cv
10.512 184.355 10.523 184.316 10.535 184.285 cv
10.543 184.254 10.559 184.227 10.582 184.203 cv
10.605 184.18 10.633 184.156 10.668 184.133 cv
12.418 183.016 li
12.43 183.004 12.449 182.992 12.477 182.984 cv
12.496 182.977 12.527 182.969 12.563 182.961 cv
12.594 182.953 12.633 182.949 12.684 182.949 cv
12.727 182.949 12.785 182.949 12.863 182.945 cv
12.953 182.949 13.031 182.953 13.098 182.957 cv
13.156 182.969 13.207 182.98 13.242 182.988 cv
13.273 183.004 13.297 183.02 13.313 183.039 cv
13.324 183.062 13.328 183.086 13.332 183.109 cv
13.332 189.77 li
14.699 189.77 li
14.727 189.77 14.758 189.781 14.789 189.797 cv
14.816 189.816 14.836 189.84 14.855 189.871 cv
14.871 189.906 14.887 189.949 14.895 190 cv
14.902 190.051 14.906 190.109 14.91 190.18 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.031 190.18 mo
21.027 190.254 21.023 190.316 21.016 190.367 cv
21.004 190.422 20.988 190.465 20.969 190.492 cv
20.945 190.527 20.922 190.551 20.898 190.559 cv
20.875 190.574 20.848 190.578 20.82 190.578 cv
16.859 190.578 li
16.832 190.578 16.809 190.574 16.785 190.559 cv
16.762 190.551 16.738 190.527 16.719 190.492 cv
16.695 190.465 16.68 190.422 16.668 190.367 cv
16.652 190.316 16.645 190.254 16.648 190.18 cv
16.645 190.109 16.652 190.051 16.668 190 cv
16.68 189.949 16.691 189.906 16.711 189.871 cv
16.727 189.84 16.75 189.816 16.773 189.797 cv
16.797 189.781 16.824 189.77 16.859 189.77 cv
18.445 189.77 li
18.445 184.004 li
16.977 184.875 li
16.902 184.922 16.844 184.945 16.801 184.949 cv
16.754 184.961 16.719 184.953 16.691 184.922 cv
16.66 184.898 16.641 184.855 16.633 184.797 cv
16.625 184.738 16.621 184.664 16.621 184.57 cv
16.621 184.508 16.621 184.449 16.629 184.402 cv
16.633 184.355 16.645 184.316 16.656 184.285 cv
16.664 184.254 16.68 184.227 16.703 184.203 cv
16.727 184.18 16.754 184.156 16.789 184.133 cv
18.539 183.016 li
18.551 183.004 18.57 182.992 18.598 182.984 cv
18.617 182.977 18.648 182.969 18.684 182.961 cv
18.715 182.953 18.754 182.949 18.805 182.949 cv
18.848 182.949 18.906 182.949 18.984 182.945 cv
19.074 182.949 19.152 182.953 19.219 182.957 cv
19.277 182.969 19.328 182.98 19.363 182.988 cv
19.395 183.004 19.418 183.02 19.434 183.039 cv
19.445 183.062 19.449 183.086 19.453 183.109 cv
19.453 189.77 li
20.82 189.77 li
20.848 189.77 20.879 189.781 20.91 189.797 cv
20.938 189.816 20.957 189.84 20.977 189.871 cv
20.992 189.906 21.008 189.949 21.016 190 cv
21.023 190.051 21.027 190.109 21.031 190.18 cv
cp
f
9.473 147.488 mo
21.633 147.488 li
21.633 162.14 li
9.473 162.14 li
cp
0 0 0 0 cmyk
ef
14.91 158.531 mo
14.906 158.605 14.902 158.668 14.895 158.719 cv
14.883 158.773 14.867 158.816 14.848 158.844 cv
14.824 158.879 14.801 158.902 14.777 158.91 cv
14.754 158.926 14.727 158.93 14.699 158.93 cv
10.738 158.93 li
10.711 158.93 10.688 158.926 10.664 158.91 cv
10.641 158.902 10.617 158.879 10.598 158.844 cv
10.574 158.816 10.559 158.773 10.547 158.719 cv
10.531 158.668 10.523 158.605 10.527 158.531 cv
10.523 158.461 10.531 158.402 10.547 158.352 cv
10.559 158.301 10.57 158.258 10.59 158.223 cv
10.605 158.191 10.629 158.168 10.652 158.148 cv
10.676 158.133 10.703 158.121 10.738 158.121 cv
12.324 158.121 li
12.324 152.355 li
10.855 153.227 li
10.781 153.273 10.723 153.297 10.68 153.301 cv
10.633 153.312 10.598 153.305 10.57 153.273 cv
10.539 153.25 10.52 153.207 10.512 153.148 cv
10.504 153.09 10.5 153.016 10.5 152.922 cv
10.5 152.859 10.5 152.801 10.508 152.754 cv
10.512 152.707 10.523 152.668 10.535 152.637 cv
10.543 152.605 10.559 152.578 10.582 152.555 cv
10.605 152.531 10.633 152.508 10.668 152.484 cv
12.418 151.367 li
12.43 151.355 12.449 151.344 12.477 151.336 cv
12.496 151.328 12.527 151.32 12.563 151.312 cv
12.594 151.305 12.633 151.301 12.684 151.301 cv
12.727 151.301 12.785 151.301 12.863 151.297 cv
12.953 151.301 13.031 151.305 13.098 151.309 cv
13.156 151.32 13.207 151.332 13.242 151.34 cv
13.273 151.355 13.297 151.371 13.313 151.391 cv
13.324 151.414 13.328 151.437 13.332 151.461 cv
13.332 158.121 li
14.699 158.121 li
14.727 158.121 14.758 158.133 14.789 158.148 cv
14.816 158.168 14.836 158.191 14.855 158.223 cv
14.871 158.258 14.887 158.301 14.895 158.352 cv
14.902 158.402 14.906 158.461 14.91 158.531 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.016 158.496 mo
21.016 158.566 21.008 158.629 21 158.684 cv
20.984 158.738 20.973 158.785 20.957 158.82 cv
20.941 158.859 20.918 158.887 20.887 158.902 cv
20.855 158.922 20.824 158.93 20.793 158.93 cv
16.602 158.93 li
16.547 158.93 16.5 158.926 16.461 158.91 cv
16.418 158.902 16.383 158.879 16.355 158.844 cv
16.324 158.816 16.301 158.77 16.289 158.707 cv
16.273 158.648 16.27 158.578 16.27 158.492 cv
16.27 158.418 16.27 158.348 16.277 158.285 cv
16.281 158.227 16.297 158.176 16.316 158.129 cv
16.336 158.086 16.359 158.043 16.391 157.996 cv
16.418 157.957 16.457 157.906 16.512 157.852 cv
18.027 156.293 li
18.375 155.934 18.652 155.613 18.867 155.328 cv
19.078 155.043 19.242 154.781 19.359 154.547 cv
19.469 154.312 19.547 154.102 19.586 153.91 cv
19.621 153.719 19.637 153.539 19.641 153.367 cv
19.637 153.203 19.609 153.043 19.555 152.891 cv
19.496 152.742 19.414 152.609 19.309 152.496 cv
19.199 152.387 19.066 152.297 18.906 152.227 cv
18.742 152.16 18.555 152.129 18.352 152.125 cv
18.102 152.129 17.883 152.16 17.688 152.227 cv
17.492 152.297 17.32 152.371 17.172 152.445 cv
17.023 152.527 16.898 152.598 16.805 152.66 cv
16.703 152.727 16.633 152.762 16.586 152.758 cv
16.555 152.762 16.527 152.754 16.508 152.734 cv
16.484 152.723 16.465 152.695 16.453 152.66 cv
16.438 152.629 16.43 152.582 16.422 152.52 cv
16.414 152.461 16.41 152.391 16.41 152.309 cv
16.41 152.25 16.41 152.199 16.414 152.156 cv
16.418 152.117 16.426 152.082 16.438 152.047 cv
16.445 152.02 16.457 151.988 16.477 151.957 cv
16.488 151.93 16.52 151.898 16.57 151.855 cv
16.613 151.816 16.695 151.758 16.813 151.687 cv
16.926 151.617 17.07 151.551 17.246 151.48 cv
17.418 151.414 17.609 151.355 17.82 151.305 cv
18.027 151.262 18.246 151.238 18.477 151.234 cv
18.844 151.238 19.164 151.289 19.441 151.391 cv
19.715 151.496 19.945 151.637 20.125 151.816 cv
20.305 151.996 20.441 152.207 20.535 152.445 cv
20.625 152.684 20.668 152.937 20.672 153.203 cv
20.668 153.453 20.648 153.695 20.605 153.93 cv
20.559 154.172 20.465 154.43 20.332 154.707 cv
20.191 154.988 19.992 155.301 19.73 155.641 cv
19.469 155.984 19.121 156.375 18.688 156.82 cv
17.488 158.074 li
20.789 158.074 li
20.816 158.074 20.848 158.086 20.879 158.102 cv
20.906 158.121 20.93 158.145 20.953 158.18 cv
20.969 158.219 20.984 158.266 21 158.312 cv
21.008 158.367 21.016 158.426 21.016 158.496 cv
cp
f
9.473 115.84 mo
21.633 115.84 li
21.633 130.488 li
9.473 130.488 li
cp
0 0 0 0 cmyk
ef
14.91 126.871 mo
14.906 126.945 14.902 127.008 14.895 127.059 cv
14.883 127.113 14.867 127.156 14.848 127.184 cv
14.824 127.219 14.801 127.242 14.777 127.25 cv
14.754 127.266 14.727 127.27 14.699 127.27 cv
10.738 127.27 li
10.711 127.27 10.688 127.266 10.664 127.25 cv
10.641 127.242 10.617 127.219 10.598 127.184 cv
10.574 127.156 10.559 127.113 10.547 127.059 cv
10.531 127.008 10.523 126.945 10.527 126.871 cv
10.523 126.801 10.531 126.742 10.547 126.691 cv
10.559 126.641 10.57 126.598 10.59 126.562 cv
10.605 126.531 10.629 126.508 10.652 126.488 cv
10.676 126.473 10.703 126.461 10.738 126.461 cv
12.324 126.461 li
12.324 120.695 li
10.855 121.566 li
10.781 121.613 10.723 121.637 10.68 121.641 cv
10.633 121.652 10.598 121.645 10.57 121.613 cv
10.539 121.59 10.52 121.547 10.512 121.488 cv
10.504 121.43 10.5 121.355 10.5 121.262 cv
10.5 121.199 10.5 121.141 10.508 121.094 cv
10.512 121.047 10.523 121.008 10.535 120.977 cv
10.543 120.945 10.559 120.918 10.582 120.895 cv
10.605 120.871 10.633 120.848 10.668 120.824 cv
12.418 119.707 li
12.43 119.695 12.449 119.684 12.477 119.676 cv
12.496 119.668 12.527 119.66 12.563 119.652 cv
12.594 119.645 12.633 119.641 12.684 119.641 cv
12.727 119.641 12.785 119.641 12.863 119.637 cv
12.953 119.641 13.031 119.645 13.098 119.648 cv
13.156 119.66 13.207 119.672 13.242 119.68 cv
13.273 119.695 13.297 119.711 13.313 119.73 cv
13.324 119.754 13.328 119.777 13.332 119.801 cv
13.332 126.461 li
14.699 126.461 li
14.727 126.461 14.758 126.473 14.789 126.488 cv
14.816 126.508 14.836 126.531 14.855 126.562 cv
14.871 126.598 14.887 126.641 14.895 126.691 cv
14.902 126.742 14.906 126.801 14.91 126.871 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.957 125.102 mo
20.957 125.449 20.895 125.766 20.773 126.043 cv
20.652 126.324 20.48 126.562 20.254 126.762 cv
20.027 126.961 19.746 127.113 19.414 127.219 cv
19.082 127.324 18.707 127.375 18.289 127.379 cv
18.035 127.375 17.797 127.355 17.578 127.316 cv
17.355 127.277 17.16 127.23 16.992 127.176 cv
16.816 127.121 16.676 127.062 16.563 127 cv
16.445 126.937 16.371 126.895 16.348 126.867 cv
16.316 126.84 16.297 126.812 16.281 126.785 cv
16.266 126.758 16.25 126.723 16.238 126.684 cv
16.227 126.645 16.219 126.598 16.211 126.543 cv
16.203 126.488 16.199 126.418 16.203 126.332 cv
16.199 126.191 16.215 126.094 16.246 126.039 cv
16.273 125.984 16.313 125.957 16.367 125.957 cv
16.402 125.957 16.473 125.988 16.578 126.051 cv
16.684 126.113 16.82 126.184 16.988 126.254 cv
17.152 126.332 17.348 126.398 17.57 126.457 cv
17.793 126.523 18.039 126.555 18.316 126.551 cv
18.574 126.555 18.809 126.52 19.012 126.449 cv
19.211 126.383 19.379 126.289 19.516 126.168 cv
19.652 126.051 19.754 125.91 19.824 125.738 cv
19.891 125.574 19.926 125.391 19.926 125.195 cv
19.926 124.98 19.879 124.789 19.793 124.613 cv
19.703 124.445 19.578 124.297 19.414 124.168 cv
19.246 124.047 19.039 123.949 18.797 123.883 cv
18.547 123.82 18.27 123.789 17.965 123.785 cv
17.223 123.785 li
17.188 123.789 17.156 123.781 17.125 123.766 cv
17.094 123.75 17.066 123.727 17.047 123.695 cv
17.023 123.664 17.004 123.625 16.992 123.574 cv
16.977 123.523 16.973 123.457 16.973 123.371 cv
16.973 123.301 16.977 123.238 16.988 123.187 cv
17 123.141 17.016 123.102 17.039 123.07 cv
17.055 123.043 17.082 123.023 17.113 123.008 cv
17.141 123 17.172 122.992 17.207 122.988 cv
17.867 122.988 li
18.125 122.992 18.355 122.957 18.563 122.887 cv
18.766 122.82 18.941 122.727 19.082 122.598 cv
19.223 122.477 19.332 122.328 19.41 122.152 cv
19.488 121.98 19.527 121.785 19.527 121.566 cv
19.527 121.414 19.5 121.266 19.449 121.121 cv
19.398 120.98 19.324 120.855 19.223 120.75 cv
19.121 120.645 18.988 120.562 18.832 120.5 cv
18.668 120.445 18.488 120.414 18.285 120.41 cv
18.059 120.414 17.848 120.449 17.66 120.512 cv
17.465 120.582 17.297 120.652 17.152 120.73 cv
17 120.809 16.879 120.883 16.785 120.949 cv
16.688 121.02 16.617 121.055 16.578 121.051 cv
16.551 121.055 16.527 121.051 16.508 121.039 cv
16.484 121.031 16.465 121.012 16.453 120.98 cv
16.438 120.953 16.43 120.91 16.422 120.855 cv
16.414 120.805 16.41 120.734 16.414 120.648 cv
16.41 120.59 16.414 120.539 16.422 120.492 cv
16.426 120.449 16.434 120.41 16.445 120.375 cv
16.453 120.344 16.465 120.312 16.484 120.285 cv
16.496 120.262 16.523 120.23 16.563 120.191 cv
16.602 120.152 16.676 120.098 16.789 120.027 cv
16.902 119.957 17.043 119.891 17.211 119.82 cv
17.375 119.754 17.566 119.695 17.785 119.645 cv
18 119.602 18.234 119.578 18.484 119.574 cv
18.836 119.578 19.145 119.621 19.41 119.711 cv
19.676 119.805 19.895 119.934 20.074 120.094 cv
20.25 120.262 20.383 120.457 20.473 120.684 cv
20.559 120.91 20.605 121.164 20.605 121.441 cv
20.605 121.68 20.574 121.902 20.512 122.105 cv
20.449 122.312 20.355 122.492 20.234 122.648 cv
20.113 122.809 19.965 122.945 19.789 123.055 cv
19.613 123.172 19.41 123.246 19.18 123.285 cv
19.18 123.297 li
19.441 123.328 19.68 123.395 19.898 123.496 cv
20.113 123.598 20.301 123.727 20.461 123.883 cv
20.613 124.039 20.734 124.223 20.824 124.434 cv
20.91 124.645 20.957 124.867 20.957 125.102 cv
cp
f
9.473 84.191 mo
21.633 84.191 li
21.633 98.8391 li
9.473 98.8391 li
cp
0 0 0 0 cmyk
ef
14.91 95.223 mo
14.906 95.297 14.902 95.359 14.895 95.41 cv
14.883 95.465 14.867 95.508 14.848 95.535 cv
14.824 95.57 14.801 95.594 14.777 95.602 cv
14.754 95.617 14.727 95.621 14.699 95.621 cv
10.738 95.621 li
10.711 95.621 10.688 95.617 10.664 95.602 cv
10.641 95.594 10.617 95.57 10.598 95.535 cv
10.574 95.508 10.559 95.465 10.547 95.41 cv
10.531 95.359 10.523 95.297 10.527 95.223 cv
10.523 95.152 10.531 95.094 10.547 95.043 cv
10.559 94.992 10.57 94.949 10.59 94.914 cv
10.605 94.883 10.629 94.859 10.652 94.84 cv
10.676 94.824 10.703 94.812 10.738 94.812 cv
12.324 94.812 li
12.324 89.047 li
10.855 89.918 li
10.781 89.965 10.723 89.988 10.68 89.992 cv
10.633 90.004 10.598 89.996 10.57 89.965 cv
10.539 89.941 10.52 89.898 10.512 89.84 cv
10.504 89.781 10.5 89.707 10.5 89.613 cv
10.5 89.551 10.5 89.492 10.508 89.445 cv
10.512 89.398 10.523 89.359 10.535 89.328 cv
10.543 89.297 10.559 89.27 10.582 89.246 cv
10.605 89.223 10.633 89.199 10.668 89.176 cv
12.418 88.059 li
12.43 88.047 12.449 88.035 12.477 88.027 cv
12.496 88.02 12.527 88.012 12.563 88.004 cv
12.594 87.996 12.633 87.992 12.684 87.992 cv
12.727 87.992 12.785 87.992 12.863 87.988 cv
12.953 87.992 13.031 87.996 13.098 88 cv
13.156 88.012 13.207 88.023 13.242 88.031 cv
13.273 88.047 13.297 88.062 13.313 88.082 cv
13.324 88.105 13.328 88.129 13.332 88.152 cv
13.332 94.812 li
14.699 94.812 li
14.727 94.812 14.758 94.824 14.789 94.84 cv
14.816 94.859 14.836 94.883 14.855 94.914 cv
14.871 94.949 14.887 94.992 14.895 95.043 cv
14.902 95.094 14.906 95.152 14.91 95.223 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.336 93.465 mo
21.332 93.598 21.313 93.699 21.277 93.77 cv
21.234 93.844 21.18 93.883 21.117 93.879 cv
20.258 93.879 li
20.258 95.473 li
20.254 95.508 20.246 95.535 20.234 95.555 cv
20.215 95.578 20.188 95.594 20.148 95.609 cv
20.109 95.625 20.055 95.637 19.992 95.645 cv
19.926 95.652 19.844 95.656 19.746 95.656 cv
19.645 95.656 19.566 95.652 19.504 95.645 cv
19.441 95.637 19.391 95.625 19.352 95.609 cv
19.313 95.594 19.285 95.578 19.27 95.555 cv
19.254 95.535 19.246 95.508 19.25 95.473 cv
19.25 93.879 li
16.148 93.879 li
16.102 93.883 16.066 93.875 16.035 93.863 cv
16.004 93.855 15.973 93.836 15.949 93.801 cv
15.918 93.773 15.902 93.727 15.895 93.664 cv
15.887 93.605 15.883 93.531 15.883 93.434 cv
15.883 93.363 15.883 93.297 15.887 93.238 cv
15.891 93.18 15.898 93.125 15.91 93.078 cv
15.922 93.031 15.938 92.984 15.957 92.937 cv
15.977 92.891 16 92.844 16.027 92.793 cv
18.73 88.184 li
18.75 88.156 18.777 88.129 18.816 88.102 cv
18.852 88.082 18.902 88.062 18.965 88.043 cv
19.023 88.031 19.094 88.02 19.184 88.012 cv
19.27 88.008 19.375 88.004 19.496 88.004 cv
19.625 88.004 19.738 88.012 19.836 88.02 cv
19.934 88.035 20.012 88.047 20.074 88.059 cv
20.129 88.078 20.176 88.098 20.211 88.121 cv
20.238 88.145 20.254 88.176 20.258 88.207 cv
20.258 93.051 li
21.117 93.051 li
21.18 93.055 21.234 93.09 21.273 93.152 cv
21.313 93.223 21.332 93.324 21.336 93.465 cv
cp
19.25 88.887 mo
19.242 88.887 li
16.805 93.051 li
19.25 93.051 li
cp
f
9.473 52.539 mo
21.633 52.539 li
21.633 67.191 li
9.473 67.191 li
cp
0 0 0 0 cmyk
ef
14.91 63.562 mo
14.906 63.637 14.902 63.699 14.895 63.75 cv
14.883 63.805 14.867 63.848 14.848 63.875 cv
14.824 63.91 14.801 63.934 14.777 63.941 cv
14.754 63.957 14.727 63.961 14.699 63.961 cv
10.738 63.961 li
10.711 63.961 10.688 63.957 10.664 63.941 cv
10.641 63.934 10.617 63.91 10.598 63.875 cv
10.574 63.848 10.559 63.805 10.547 63.75 cv
10.531 63.699 10.523 63.637 10.527 63.562 cv
10.523 63.492 10.531 63.434 10.547 63.383 cv
10.559 63.332 10.57 63.289 10.59 63.254 cv
10.605 63.223 10.629 63.199 10.652 63.18 cv
10.676 63.164 10.703 63.152 10.738 63.152 cv
12.324 63.152 li
12.324 57.387 li
10.855 58.258 li
10.781 58.305 10.723 58.328 10.68 58.332 cv
10.633 58.344 10.598 58.336 10.57 58.305 cv
10.539 58.281 10.52 58.238 10.512 58.18 cv
10.504 58.121 10.5 58.047 10.5 57.953 cv
10.5 57.891 10.5 57.832 10.508 57.785 cv
10.512 57.738 10.523 57.699 10.535 57.668 cv
10.543 57.637 10.559 57.609 10.582 57.586 cv
10.605 57.562 10.633 57.539 10.668 57.516 cv
12.418 56.398 li
12.43 56.387 12.449 56.375 12.477 56.367 cv
12.496 56.359 12.527 56.352 12.563 56.344 cv
12.594 56.336 12.633 56.332 12.684 56.332 cv
12.727 56.332 12.785 56.332 12.863 56.328 cv
12.953 56.332 13.031 56.336 13.098 56.34 cv
13.156 56.352 13.207 56.363 13.242 56.371 cv
13.273 56.387 13.297 56.402 13.313 56.422 cv
13.324 56.445 13.328 56.469 13.332 56.492 cv
13.332 63.152 li
14.699 63.152 li
14.727 63.152 14.758 63.164 14.789 63.18 cv
14.816 63.199 14.836 63.223 14.855 63.254 cv
14.871 63.289 14.887 63.332 14.895 63.383 cv
14.902 63.434 14.906 63.492 14.91 63.562 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.98 61.523 mo
20.98 61.93 20.91 62.293 20.773 62.609 cv
20.637 62.926 20.445 63.191 20.195 63.41 cv
19.945 63.629 19.645 63.793 19.301 63.902 cv
18.949 64.012 18.566 64.066 18.148 64.07 cv
17.91 64.066 17.688 64.051 17.48 64.02 cv
17.266 63.988 17.078 63.949 16.918 63.902 cv
16.75 63.855 16.617 63.809 16.516 63.758 cv
16.41 63.715 16.34 63.676 16.313 63.645 cv
16.281 63.617 16.262 63.594 16.25 63.566 cv
16.238 63.547 16.227 63.52 16.219 63.484 cv
16.203 63.453 16.199 63.41 16.199 63.359 cv
16.195 63.309 16.191 63.246 16.195 63.176 cv
16.191 63.113 16.195 63.055 16.203 63 cv
16.207 62.945 16.219 62.902 16.234 62.871 cv
16.25 62.84 16.266 62.816 16.289 62.797 cv
16.305 62.785 16.332 62.777 16.363 62.773 cv
16.402 62.777 16.461 62.801 16.543 62.848 cv
16.625 62.895 16.734 62.949 16.875 63.004 cv
17.012 63.062 17.184 63.113 17.391 63.164 cv
17.594 63.219 17.84 63.246 18.121 63.242 cv
18.383 63.246 18.621 63.215 18.844 63.148 cv
19.059 63.09 19.246 62.992 19.406 62.855 cv
19.563 62.727 19.688 62.559 19.777 62.355 cv
19.867 62.152 19.914 61.906 19.914 61.617 cv
19.914 61.375 19.875 61.164 19.801 60.977 cv
19.723 60.793 19.605 60.637 19.449 60.512 cv
19.289 60.391 19.09 60.301 18.848 60.238 cv
18.605 60.184 18.316 60.152 17.98 60.148 cv
17.742 60.152 17.535 60.164 17.367 60.184 cv
17.191 60.211 17.031 60.223 16.883 60.219 cv
16.77 60.223 16.691 60.195 16.648 60.141 cv
16.598 60.09 16.574 59.992 16.578 59.848 cv
16.578 56.758 li
16.574 56.633 16.605 56.535 16.668 56.473 cv
16.73 56.41 16.816 56.379 16.93 56.379 cv
20.289 56.379 li
20.32 56.379 20.348 56.391 20.379 56.406 cv
20.402 56.426 20.43 56.449 20.453 56.484 cv
20.473 56.523 20.484 56.57 20.496 56.621 cv
20.504 56.68 20.512 56.742 20.512 56.812 cv
20.512 56.953 20.492 57.062 20.453 57.141 cv
20.414 57.219 20.359 57.258 20.297 57.258 cv
17.586 57.258 li
17.586 59.383 li
17.715 59.367 17.852 59.355 17.992 59.352 cv
18.129 59.348 18.285 59.344 18.469 59.344 cv
18.883 59.344 19.25 59.398 19.563 59.5 cv
19.875 59.609 20.133 59.754 20.344 59.941 cv
20.551 60.129 20.711 60.359 20.82 60.629 cv
20.926 60.898 20.98 61.195 20.98 61.523 cv
cp
f
9.473 20.879 mo
21.633 20.879 li
21.633 35.531 li
9.473 35.531 li
cp
0 0 0 0 cmyk
ef
14.91 31.902 mo
14.906 31.977 14.902 32.039 14.895 32.09 cv
14.883 32.145 14.867 32.187 14.848 32.215 cv
14.824 32.25 14.801 32.273 14.777 32.281 cv
14.754 32.297 14.727 32.301 14.699 32.301 cv
10.738 32.301 li
10.711 32.301 10.688 32.297 10.664 32.281 cv
10.641 32.273 10.617 32.25 10.598 32.215 cv
10.574 32.187 10.559 32.145 10.547 32.09 cv
10.531 32.039 10.523 31.977 10.527 31.902 cv
10.523 31.832 10.531 31.773 10.547 31.723 cv
10.559 31.672 10.57 31.629 10.59 31.594 cv
10.605 31.562 10.629 31.539 10.652 31.52 cv
10.676 31.504 10.703 31.492 10.738 31.492 cv
12.324 31.492 li
12.324 25.727 li
10.855 26.598 li
10.781 26.645 10.723 26.668 10.68 26.672 cv
10.633 26.684 10.598 26.676 10.57 26.645 cv
10.539 26.621 10.52 26.578 10.512 26.52 cv
10.504 26.461 10.5 26.387 10.5 26.293 cv
10.5 26.23 10.5 26.172 10.508 26.125 cv
10.512 26.078 10.523 26.039 10.535 26.008 cv
10.543 25.977 10.559 25.949 10.582 25.926 cv
10.605 25.902 10.633 25.879 10.668 25.855 cv
12.418 24.738 li
12.43 24.727 12.449 24.715 12.477 24.707 cv
12.496 24.699 12.527 24.691 12.563 24.684 cv
12.594 24.676 12.633 24.672 12.684 24.672 cv
12.727 24.672 12.785 24.672 12.863 24.668 cv
12.953 24.672 13.031 24.676 13.098 24.68 cv
13.156 24.691 13.207 24.703 13.242 24.711 cv
13.273 24.727 13.297 24.742 13.313 24.762 cv
13.324 24.785 13.328 24.809 13.332 24.832 cv
13.332 31.492 li
14.699 31.492 li
14.727 31.492 14.758 31.504 14.789 31.52 cv
14.816 31.539 14.836 31.562 14.855 31.594 cv
14.871 31.629 14.887 31.672 14.895 31.723 cv
14.902 31.773 14.906 31.832 14.91 31.902 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.211 29.848 mo
21.207 30.18 21.156 30.5 21.059 30.812 cv
20.953 31.125 20.797 31.398 20.59 31.633 cv
20.375 31.867 20.109 32.059 19.785 32.199 cv
19.457 32.34 19.074 32.406 18.637 32.41 cv
18.32 32.406 18.039 32.371 17.801 32.293 cv
17.555 32.219 17.344 32.105 17.168 31.961 cv
16.984 31.82 16.836 31.645 16.719 31.43 cv
16.598 31.223 16.5 30.98 16.43 30.707 cv
16.352 30.437 16.301 30.145 16.273 29.82 cv
16.238 29.504 16.223 29.16 16.227 28.793 cv
16.223 28.469 16.242 28.141 16.281 27.809 cv
16.316 27.477 16.379 27.156 16.469 26.848 cv
16.555 26.539 16.676 26.25 16.832 25.977 cv
16.988 25.707 17.18 25.469 17.414 25.266 cv
17.645 25.066 17.926 24.906 18.25 24.789 cv
18.57 24.672 18.945 24.613 19.383 24.613 cv
19.523 24.613 19.672 24.625 19.82 24.641 cv
19.969 24.664 20.105 24.687 20.23 24.711 cv
20.355 24.742 20.461 24.773 20.547 24.809 cv
20.633 24.844 20.688 24.871 20.715 24.895 cv
20.742 24.918 20.762 24.941 20.777 24.965 cv
20.785 24.988 20.797 25.016 20.809 25.047 cv
20.813 25.078 20.82 25.113 20.828 25.145 cv
20.832 25.184 20.832 25.227 20.836 25.281 cv
20.832 25.352 20.832 25.414 20.832 25.465 cv
20.828 25.516 20.82 25.555 20.809 25.586 cv
20.793 25.617 20.773 25.641 20.754 25.656 cv
20.73 25.672 20.703 25.68 20.672 25.68 cv
20.625 25.68 20.566 25.668 20.492 25.641 cv
20.418 25.613 20.328 25.582 20.223 25.547 cv
20.117 25.516 19.988 25.484 19.84 25.457 cv
19.688 25.434 19.516 25.422 19.316 25.418 cv
18.953 25.422 18.641 25.496 18.379 25.641 cv
18.113 25.793 17.898 25.992 17.734 26.238 cv
17.57 26.492 17.445 26.781 17.367 27.109 cv
17.285 27.437 17.242 27.781 17.23 28.141 cv
17.332 28.082 17.445 28.023 17.574 27.965 cv
17.699 27.91 17.836 27.859 17.988 27.809 cv
18.137 27.766 18.297 27.727 18.465 27.695 cv
18.633 27.664 18.813 27.648 19.008 27.648 cv
19.414 27.648 19.762 27.707 20.043 27.816 cv
20.324 27.93 20.551 28.082 20.723 28.277 cv
20.895 28.477 21.02 28.711 21.098 28.977 cv
21.172 29.25 21.207 29.539 21.211 29.848 cv
cp
20.188 29.941 mo
20.184 29.715 20.16 29.508 20.121 29.32 cv
20.074 29.137 20 28.98 19.895 28.852 cv
19.789 28.723 19.648 28.621 19.473 28.551 cv
19.297 28.48 19.082 28.445 18.824 28.445 cv
18.68 28.445 18.535 28.461 18.391 28.484 cv
18.242 28.512 18.102 28.547 17.969 28.59 cv
17.836 28.637 17.707 28.687 17.582 28.75 cv
17.457 28.812 17.344 28.879 17.25 28.941 cv
17.246 29.449 17.277 29.871 17.344 30.211 cv
17.406 30.551 17.5 30.824 17.625 31.027 cv
17.746 31.234 17.902 31.379 18.086 31.465 cv
18.266 31.555 18.48 31.598 18.73 31.598 cv
18.98 31.598 19.195 31.551 19.379 31.457 cv
19.563 31.363 19.715 31.238 19.836 31.078 cv
19.957 30.922 20.047 30.746 20.102 30.547 cv
20.156 30.352 20.184 30.148 20.188 29.941 cv
cp
f
35.168 522.371 mo
35.164 522.445 35.16 522.508 35.152 522.559 cv
35.141 522.613 35.125 522.656 35.105 522.684 cv
35.082 522.719 35.059 522.742 35.035 522.75 cv
35.012 522.766 34.984 522.77 34.957 522.77 cv
30.996 522.77 li
30.969 522.77 30.945 522.766 30.922 522.75 cv
30.898 522.742 30.875 522.719 30.855 522.684 cv
30.832 522.656 30.816 522.613 30.805 522.559 cv
30.789 522.508 30.781 522.445 30.785 522.371 cv
30.781 522.301 30.789 522.242 30.805 522.191 cv
30.816 522.141 30.828 522.098 30.848 522.062 cv
30.863 522.031 30.887 522.008 30.91 521.988 cv
30.934 521.973 30.961 521.961 30.996 521.961 cv
32.582 521.961 li
32.582 516.195 li
31.113 517.066 li
31.039 517.113 30.98 517.137 30.938 517.141 cv
30.891 517.152 30.855 517.145 30.828 517.113 cv
30.797 517.09 30.777 517.047 30.77 516.988 cv
30.762 516.93 30.758 516.855 30.758 516.762 cv
30.758 516.699 30.758 516.641 30.766 516.594 cv
30.77 516.547 30.781 516.508 30.793 516.477 cv
30.801 516.445 30.816 516.418 30.84 516.395 cv
30.863 516.371 30.891 516.348 30.926 516.324 cv
32.676 515.207 li
32.688 515.195 32.707 515.184 32.734 515.176 cv
32.754 515.168 32.785 515.16 32.82 515.152 cv
32.852 515.145 32.891 515.141 32.941 515.141 cv
32.984 515.141 33.043 515.141 33.121 515.137 cv
33.211 515.141 33.289 515.145 33.355 515.148 cv
33.414 515.16 33.465 515.172 33.5 515.18 cv
33.531 515.195 33.555 515.211 33.57 515.23 cv
33.582 515.254 33.586 515.277 33.59 515.301 cv
33.59 521.961 li
34.957 521.961 li
34.984 521.961 35.016 521.973 35.047 521.988 cv
35.074 522.008 35.094 522.031 35.113 522.062 cv
35.129 522.098 35.145 522.141 35.152 522.191 cv
35.16 522.242 35.164 522.301 35.168 522.371 cv
cp
f
113.965 522.336 mo
113.965 522.406 113.957 522.469 113.949 522.523 cv
113.934 522.578 113.922 522.625 113.906 522.66 cv
113.891 522.699 113.867 522.727 113.836 522.742 cv
113.805 522.762 113.773 522.77 113.742 522.77 cv
109.551 522.77 li
109.496 522.77 109.449 522.766 109.41 522.75 cv
109.367 522.742 109.332 522.719 109.305 522.684 cv
109.273 522.656 109.25 522.609 109.238 522.547 cv
109.223 522.488 109.219 522.418 109.219 522.332 cv
109.219 522.258 109.219 522.187 109.227 522.125 cv
109.23 522.066 109.246 522.016 109.266 521.969 cv
109.285 521.926 109.309 521.883 109.34 521.836 cv
109.367 521.797 109.406 521.746 109.461 521.691 cv
110.977 520.133 li
111.324 519.773 111.602 519.453 111.816 519.168 cv
112.027 518.883 112.191 518.621 112.309 518.387 cv
112.418 518.152 112.496 517.941 112.535 517.75 cv
112.57 517.559 112.586 517.379 112.59 517.207 cv
112.586 517.043 112.559 516.883 112.504 516.73 cv
112.445 516.582 112.363 516.449 112.258 516.336 cv
112.148 516.227 112.016 516.137 111.855 516.066 cv
111.691 516 111.504 515.969 111.301 515.965 cv
111.051 515.969 110.832 516 110.637 516.066 cv
110.441 516.137 110.27 516.211 110.121 516.285 cv
109.973 516.367 109.848 516.437 109.754 516.5 cv
109.652 516.566 109.582 516.602 109.535 516.598 cv
109.504 516.602 109.477 516.594 109.457 516.574 cv
109.434 516.562 109.414 516.535 109.402 516.5 cv
109.387 516.469 109.379 516.422 109.371 516.359 cv
109.363 516.301 109.359 516.23 109.359 516.148 cv
109.359 516.09 109.359 516.039 109.363 515.996 cv
109.367 515.957 109.375 515.922 109.387 515.887 cv
109.395 515.859 109.406 515.828 109.426 515.797 cv
109.438 515.77 109.469 515.738 109.52 515.695 cv
109.563 515.656 109.645 515.598 109.762 515.527 cv
109.875 515.457 110.02 515.391 110.195 515.32 cv
110.367 515.254 110.559 515.195 110.77 515.145 cv
110.977 515.102 111.195 515.078 111.426 515.074 cv
111.793 515.078 112.113 515.129 112.391 515.23 cv
112.664 515.336 112.895 515.477 113.074 515.656 cv
113.254 515.836 113.391 516.047 113.484 516.285 cv
113.574 516.523 113.617 516.777 113.621 517.043 cv
113.617 517.293 113.598 517.535 113.555 517.77 cv
113.508 518.012 113.414 518.27 113.281 518.547 cv
113.141 518.828 112.941 519.141 112.68 519.48 cv
112.418 519.824 112.07 520.215 111.637 520.66 cv
110.438 521.914 li
113.738 521.914 li
113.766 521.914 113.797 521.926 113.828 521.941 cv
113.855 521.961 113.879 521.984 113.902 522.02 cv
113.918 522.059 113.934 522.105 113.949 522.152 cv
113.957 522.207 113.965 522.266 113.965 522.336 cv
cp
f
193.105 520.613 mo
193.102 520.746 193.082 520.848 193.047 520.918 cv
193.004 520.992 192.949 521.031 192.887 521.027 cv
192.027 521.027 li
192.027 522.621 li
192.023 522.656 192.016 522.684 192.004 522.703 cv
191.984 522.727 191.957 522.742 191.918 522.758 cv
191.879 522.773 191.824 522.785 191.762 522.793 cv
191.695 522.801 191.613 522.805 191.516 522.805 cv
191.414 522.805 191.336 522.801 191.273 522.793 cv
191.211 522.785 191.16 522.773 191.121 522.758 cv
191.082 522.742 191.055 522.727 191.039 522.703 cv
191.023 522.684 191.016 522.656 191.02 522.621 cv
191.02 521.027 li
187.918 521.027 li
187.871 521.031 187.836 521.023 187.805 521.012 cv
187.773 521.004 187.742 520.984 187.719 520.949 cv
187.688 520.922 187.672 520.875 187.664 520.812 cv
187.656 520.754 187.652 520.68 187.652 520.582 cv
187.652 520.512 187.652 520.445 187.656 520.387 cv
187.66 520.328 187.668 520.273 187.68 520.227 cv
187.691 520.18 187.707 520.133 187.727 520.086 cv
187.746 520.039 187.77 519.992 187.797 519.941 cv
190.5 515.332 li
190.52 515.305 190.547 515.277 190.586 515.25 cv
190.621 515.23 190.672 515.211 190.734 515.191 cv
190.793 515.18 190.863 515.168 190.953 515.16 cv
191.039 515.156 191.145 515.152 191.266 515.152 cv
191.395 515.152 191.508 515.16 191.605 515.168 cv
191.703 515.184 191.781 515.195 191.844 515.207 cv
191.898 515.227 191.945 515.246 191.98 515.27 cv
192.008 515.293 192.023 515.324 192.027 515.355 cv
192.027 520.199 li
192.887 520.199 li
192.949 520.203 193.004 520.238 193.043 520.301 cv
193.082 520.371 193.102 520.473 193.105 520.613 cv
cp
191.02 516.035 mo
191.012 516.035 li
188.574 520.199 li
191.02 520.199 li
cp
f
271.789 520.316 mo
271.785 520.648 271.734 520.969 271.637 521.281 cv
271.531 521.594 271.375 521.867 271.168 522.102 cv
270.953 522.336 270.688 522.527 270.363 522.668 cv
270.035 522.809 269.652 522.875 269.215 522.879 cv
268.898 522.875 268.617 522.84 268.379 522.762 cv
268.133 522.687 267.922 522.574 267.746 522.43 cv
267.563 522.289 267.414 522.113 267.297 521.898 cv
267.176 521.691 267.078 521.449 267.008 521.176 cv
266.93 520.906 266.879 520.613 266.852 520.289 cv
266.816 519.973 266.801 519.629 266.805 519.262 cv
266.801 518.937 266.82 518.609 266.859 518.277 cv
266.895 517.945 266.957 517.625 267.047 517.316 cv
267.133 517.008 267.254 516.719 267.41 516.445 cv
267.566 516.176 267.758 515.937 267.992 515.734 cv
268.223 515.535 268.504 515.375 268.828 515.258 cv
269.148 515.141 269.523 515.082 269.961 515.082 cv
270.102 515.082 270.25 515.094 270.398 515.109 cv
270.547 515.133 270.684 515.156 270.809 515.18 cv
270.934 515.211 271.039 515.242 271.125 515.277 cv
271.211 515.312 271.266 515.34 271.293 515.363 cv
271.32 515.387 271.34 515.41 271.355 515.434 cv
271.363 515.457 271.375 515.484 271.387 515.516 cv
271.391 515.547 271.398 515.582 271.406 515.613 cv
271.41 515.652 271.41 515.695 271.414 515.75 cv
271.41 515.82 271.41 515.883 271.41 515.934 cv
271.406 515.984 271.398 516.023 271.387 516.055 cv
271.371 516.086 271.352 516.109 271.332 516.125 cv
271.309 516.141 271.281 516.148 271.25 516.148 cv
271.203 516.148 271.145 516.137 271.07 516.109 cv
270.996 516.082 270.906 516.051 270.801 516.016 cv
270.695 515.984 270.566 515.953 270.418 515.926 cv
270.266 515.902 270.094 515.891 269.895 515.887 cv
269.531 515.891 269.219 515.965 268.957 516.109 cv
268.691 516.262 268.477 516.461 268.313 516.707 cv
268.148 516.961 268.023 517.25 267.945 517.578 cv
267.863 517.906 267.82 518.25 267.809 518.609 cv
267.91 518.551 268.023 518.492 268.152 518.434 cv
268.277 518.379 268.414 518.328 268.566 518.277 cv
268.715 518.234 268.875 518.195 269.043 518.164 cv
269.211 518.133 269.391 518.117 269.586 518.117 cv
269.992 518.117 270.34 518.176 270.621 518.285 cv
270.902 518.398 271.129 518.551 271.301 518.746 cv
271.473 518.945 271.598 519.18 271.676 519.445 cv
271.75 519.719 271.785 520.008 271.789 520.316 cv
cp
270.766 520.41 mo
270.762 520.184 270.738 519.977 270.699 519.789 cv
270.652 519.605 270.578 519.449 270.473 519.32 cv
270.367 519.191 270.227 519.09 270.051 519.02 cv
269.875 518.949 269.66 518.914 269.402 518.914 cv
269.258 518.914 269.113 518.93 268.969 518.953 cv
268.82 518.98 268.68 519.016 268.547 519.059 cv
268.414 519.105 268.285 519.156 268.16 519.219 cv
268.035 519.281 267.922 519.348 267.828 519.41 cv
267.824 519.918 267.855 520.34 267.922 520.68 cv
267.984 521.02 268.078 521.293 268.203 521.496 cv
268.324 521.703 268.48 521.848 268.664 521.934 cv
268.844 522.023 269.059 522.066 269.309 522.066 cv
269.559 522.066 269.773 522.02 269.957 521.926 cv
270.141 521.832 270.293 521.707 270.414 521.547 cv
270.535 521.391 270.625 521.215 270.68 521.016 cv
270.734 520.82 270.762 520.617 270.766 520.41 cv
cp
f
350.59 520.824 mo
350.59 521.152 350.531 521.445 350.414 521.699 cv
350.297 521.957 350.125 522.172 349.906 522.348 cv
349.684 522.527 349.414 522.66 349.09 522.746 cv
348.762 522.832 348.391 522.875 347.977 522.879 cv
347.586 522.875 347.234 522.836 346.926 522.758 cv
346.617 522.68 346.355 522.559 346.141 522.395 cv
345.926 522.234 345.762 522.039 345.648 521.801 cv
345.535 521.57 345.48 521.301 345.48 521 cv
345.48 520.766 345.52 520.547 345.598 520.344 cv
345.676 520.145 345.785 519.961 345.934 519.793 cv
346.078 519.629 346.262 519.473 346.477 519.324 cv
346.688 519.176 346.93 519.035 347.203 518.902 cv
346.969 518.785 346.762 518.66 346.582 518.52 cv
346.402 518.387 346.25 518.238 346.125 518.078 cv
346 517.922 345.902 517.754 345.84 517.57 cv
345.77 517.395 345.738 517.199 345.742 516.988 cv
345.738 516.727 345.785 516.477 345.887 516.242 cv
345.98 516.008 346.125 515.805 346.32 515.633 cv
346.508 515.461 346.754 515.328 347.059 515.227 cv
347.355 515.129 347.707 515.078 348.105 515.074 cv
348.488 515.078 348.816 515.125 349.098 515.215 cv
349.371 515.309 349.602 515.434 349.789 515.59 cv
349.969 515.75 350.105 515.934 350.191 516.148 cv
350.277 516.367 350.32 516.598 350.32 516.84 cv
350.32 517.039 350.285 517.23 350.223 517.414 cv
350.152 517.602 350.059 517.777 349.938 517.937 cv
349.809 518.105 349.656 518.258 349.477 518.398 cv
349.297 518.539 349.09 518.672 348.855 518.797 cv
349.133 518.937 349.379 519.078 349.598 519.219 cv
349.813 519.363 349.992 519.52 350.141 519.684 cv
350.281 519.852 350.395 520.027 350.473 520.211 cv
350.551 520.398 350.59 520.602 350.59 520.824 cv
cp
349.324 516.934 mo
349.324 516.77 349.293 516.621 349.238 516.488 cv
349.18 516.355 349.098 516.242 348.992 516.148 cv
348.879 516.055 348.742 515.984 348.582 515.937 cv
348.418 515.891 348.234 515.867 348.031 515.863 cv
347.605 515.867 347.285 515.961 347.07 516.148 cv
346.852 516.34 346.746 516.602 346.746 516.934 cv
346.746 517.086 346.77 517.23 346.824 517.359 cv
346.875 517.492 346.957 517.613 347.07 517.73 cv
347.18 517.848 347.32 517.965 347.492 518.074 cv
347.66 518.187 347.863 518.301 348.102 518.422 cv
348.492 518.219 348.797 517.996 349.008 517.75 cv
349.219 517.504 349.324 517.23 349.324 516.934 cv
cp
349.57 520.93 mo
349.57 520.75 349.535 520.59 349.469 520.441 cv
349.402 520.301 349.301 520.164 349.168 520.031 cv
349.031 519.906 348.863 519.781 348.664 519.66 cv
348.461 519.543 348.23 519.418 347.965 519.289 cv
347.715 519.414 347.496 519.535 347.316 519.652 cv
347.129 519.773 346.977 519.898 346.859 520.027 cv
346.734 520.16 346.645 520.297 346.59 520.437 cv
346.527 520.578 346.5 520.734 346.5 520.906 cv
346.5 521.285 346.629 521.578 346.891 521.785 cv
347.148 521.996 347.535 522.102 348.055 522.098 cv
348.551 522.102 348.93 521.996 349.188 521.785 cv
349.441 521.574 349.57 521.289 349.57 520.93 cv
cp
f
426.219 522.371 mo
426.215 522.445 426.211 522.508 426.203 522.559 cv
426.191 522.613 426.176 522.656 426.156 522.684 cv
426.133 522.719 426.109 522.742 426.086 522.75 cv
426.063 522.766 426.035 522.77 426.008 522.77 cv
422.047 522.77 li
422.02 522.77 421.996 522.766 421.973 522.75 cv
421.949 522.742 421.926 522.719 421.906 522.684 cv
421.883 522.656 421.867 522.613 421.855 522.559 cv
421.84 522.508 421.832 522.445 421.836 522.371 cv
421.832 522.301 421.84 522.242 421.855 522.191 cv
421.867 522.141 421.879 522.098 421.898 522.062 cv
421.914 522.031 421.938 522.008 421.961 521.988 cv
421.984 521.973 422.012 521.961 422.047 521.961 cv
423.633 521.961 li
423.633 516.195 li
422.164 517.066 li
422.09 517.113 422.031 517.137 421.988 517.141 cv
421.941 517.152 421.906 517.145 421.879 517.113 cv
421.848 517.09 421.828 517.047 421.82 516.988 cv
421.813 516.93 421.809 516.855 421.809 516.762 cv
421.809 516.699 421.809 516.641 421.816 516.594 cv
421.82 516.547 421.832 516.508 421.844 516.477 cv
421.852 516.445 421.867 516.418 421.891 516.395 cv
421.914 516.371 421.941 516.348 421.977 516.324 cv
423.727 515.207 li
423.738 515.195 423.758 515.184 423.785 515.176 cv
423.805 515.168 423.836 515.16 423.871 515.152 cv
423.902 515.145 423.941 515.141 423.992 515.141 cv
424.035 515.141 424.094 515.141 424.172 515.137 cv
424.262 515.141 424.34 515.145 424.406 515.148 cv
424.465 515.16 424.516 515.172 424.551 515.18 cv
424.582 515.195 424.605 515.211 424.621 515.23 cv
424.633 515.254 424.637 515.277 424.641 515.301 cv
424.641 521.961 li
426.008 521.961 li
426.035 521.961 426.066 521.973 426.098 521.988 cv
426.125 522.008 426.145 522.031 426.164 522.062 cv
426.18 522.098 426.195 522.141 426.203 522.191 cv
426.211 522.242 426.215 522.301 426.219 522.371 cv
cp
f
432.574 518.961 mo
432.57 519.543 432.523 520.074 432.438 520.555 cv
432.344 521.039 432.191 521.453 431.98 521.797 cv
431.762 522.141 431.484 522.41 431.145 522.598 cv
430.797 522.785 430.375 522.875 429.875 522.879 cv
429.398 522.875 428.996 522.793 428.672 522.625 cv
428.344 522.457 428.082 522.207 427.883 521.875 cv
427.68 521.547 427.535 521.141 427.457 520.656 cv
427.371 520.176 427.332 519.621 427.332 518.996 cv
427.332 518.418 427.379 517.891 427.473 517.406 cv
427.566 516.93 427.719 516.516 427.93 516.164 cv
428.141 515.82 428.418 515.551 428.762 515.359 cv
429.105 515.172 429.527 515.078 430.027 515.074 cv
430.504 515.078 430.906 515.164 431.234 515.332 cv
431.563 515.504 431.824 515.754 432.023 516.082 cv
432.223 516.414 432.363 516.82 432.449 517.301 cv
432.527 517.785 432.57 518.336 432.574 518.961 cv
cp
431.543 519.031 mo
431.539 518.656 431.527 518.316 431.504 518.012 cv
431.477 517.711 431.434 517.445 431.383 517.215 cv
431.328 516.988 431.262 516.793 431.176 516.621 cv
431.09 516.457 430.988 516.32 430.875 516.211 cv
430.754 516.109 430.621 516.031 430.473 515.977 cv
430.324 515.93 430.156 515.902 429.969 515.902 cv
429.637 515.902 429.367 515.98 429.16 516.137 cv
428.949 516.293 428.785 516.508 428.668 516.781 cv
428.551 517.055 428.469 517.375 428.426 517.742 cv
428.383 518.109 428.363 518.504 428.363 518.926 cv
428.363 519.496 428.391 519.98 428.449 520.371 cv
428.508 520.77 428.602 521.09 428.727 521.34 cv
428.852 521.59 429.012 521.773 429.215 521.887 cv
429.41 522 429.652 522.055 429.934 522.055 cv
430.152 522.055 430.344 522.02 430.512 521.949 cv
430.676 521.879 430.816 521.781 430.938 521.648 cv
431.055 521.52 431.156 521.359 431.234 521.176 cv
431.313 520.996 431.375 520.793 431.422 520.566 cv
431.469 520.344 431.5 520.105 431.516 519.844 cv
431.531 519.586 431.539 519.312 431.543 519.031 cv
cp
f
505.039 522.371 mo
505.035 522.445 505.031 522.508 505.023 522.559 cv
505.012 522.613 504.996 522.656 504.977 522.684 cv
504.953 522.719 504.93 522.742 504.906 522.75 cv
504.883 522.766 504.855 522.77 504.828 522.77 cv
500.867 522.77 li
500.84 522.77 500.816 522.766 500.793 522.75 cv
500.77 522.742 500.746 522.719 500.727 522.684 cv
500.703 522.656 500.688 522.613 500.676 522.559 cv
500.66 522.508 500.652 522.445 500.656 522.371 cv
500.652 522.301 500.66 522.242 500.676 522.191 cv
500.688 522.141 500.699 522.098 500.719 522.062 cv
500.734 522.031 500.758 522.008 500.781 521.988 cv
500.805 521.973 500.832 521.961 500.867 521.961 cv
502.453 521.961 li
502.453 516.195 li
500.984 517.066 li
500.91 517.113 500.852 517.137 500.809 517.141 cv
500.762 517.152 500.727 517.145 500.699 517.113 cv
500.668 517.09 500.648 517.047 500.641 516.988 cv
500.633 516.93 500.629 516.855 500.629 516.762 cv
500.629 516.699 500.629 516.641 500.637 516.594 cv
500.641 516.547 500.652 516.508 500.664 516.477 cv
500.672 516.445 500.688 516.418 500.711 516.395 cv
500.734 516.371 500.762 516.348 500.797 516.324 cv
502.547 515.207 li
502.559 515.195 502.578 515.184 502.605 515.176 cv
502.625 515.168 502.656 515.16 502.691 515.152 cv
502.723 515.145 502.762 515.141 502.813 515.141 cv
502.855 515.141 502.914 515.141 502.992 515.137 cv
503.082 515.141 503.16 515.145 503.227 515.148 cv
503.285 515.16 503.336 515.172 503.371 515.18 cv
503.402 515.195 503.426 515.211 503.441 515.23 cv
503.453 515.254 503.457 515.277 503.461 515.301 cv
503.461 521.961 li
504.828 521.961 li
504.855 521.961 504.887 521.973 504.918 521.988 cv
504.945 522.008 504.965 522.031 504.984 522.062 cv
505 522.098 505.016 522.141 505.023 522.191 cv
505.031 522.242 505.035 522.301 505.039 522.371 cv
cp
f
511.145 522.336 mo
511.145 522.406 511.137 522.469 511.129 522.523 cv
511.113 522.578 511.102 522.625 511.086 522.66 cv
511.07 522.699 511.047 522.727 511.016 522.742 cv
510.984 522.762 510.953 522.77 510.922 522.77 cv
506.73 522.77 li
506.676 522.77 506.629 522.766 506.59 522.75 cv
506.547 522.742 506.512 522.719 506.484 522.684 cv
506.453 522.656 506.43 522.609 506.418 522.547 cv
506.402 522.488 506.398 522.418 506.398 522.332 cv
506.398 522.258 506.398 522.187 506.406 522.125 cv
506.41 522.066 506.426 522.016 506.445 521.969 cv
506.465 521.926 506.488 521.883 506.52 521.836 cv
506.547 521.797 506.586 521.746 506.641 521.691 cv
508.156 520.133 li
508.504 519.773 508.781 519.453 508.996 519.168 cv
509.207 518.883 509.371 518.621 509.488 518.387 cv
509.598 518.152 509.676 517.941 509.715 517.75 cv
509.75 517.559 509.766 517.379 509.77 517.207 cv
509.766 517.043 509.738 516.883 509.684 516.73 cv
509.625 516.582 509.543 516.449 509.438 516.336 cv
509.328 516.227 509.195 516.137 509.035 516.066 cv
508.871 516 508.684 515.969 508.48 515.965 cv
508.23 515.969 508.012 516 507.816 516.066 cv
507.621 516.137 507.449 516.211 507.301 516.285 cv
507.152 516.367 507.027 516.437 506.934 516.5 cv
506.832 516.566 506.762 516.602 506.715 516.598 cv
506.684 516.602 506.656 516.594 506.637 516.574 cv
506.613 516.562 506.594 516.535 506.582 516.5 cv
506.566 516.469 506.559 516.422 506.551 516.359 cv
506.543 516.301 506.539 516.23 506.539 516.148 cv
506.539 516.09 506.539 516.039 506.543 515.996 cv
506.547 515.957 506.555 515.922 506.566 515.887 cv
506.574 515.859 506.586 515.828 506.605 515.797 cv
506.617 515.77 506.648 515.738 506.699 515.695 cv
506.742 515.656 506.824 515.598 506.941 515.527 cv
507.055 515.457 507.199 515.391 507.375 515.32 cv
507.547 515.254 507.738 515.195 507.949 515.145 cv
508.156 515.102 508.375 515.078 508.605 515.074 cv
508.973 515.078 509.293 515.129 509.57 515.23 cv
509.844 515.336 510.074 515.477 510.254 515.656 cv
510.434 515.836 510.57 516.047 510.664 516.285 cv
510.754 516.523 510.797 516.777 510.801 517.043 cv
510.797 517.293 510.777 517.535 510.734 517.77 cv
510.688 518.012 510.594 518.27 510.461 518.547 cv
510.32 518.828 510.121 519.141 509.859 519.48 cv
509.598 519.824 509.25 520.215 508.816 520.66 cv
507.617 521.914 li
510.918 521.914 li
510.945 521.914 510.977 521.926 511.008 521.941 cv
511.035 521.961 511.059 521.984 511.082 522.02 cv
511.098 522.059 511.113 522.105 511.129 522.152 cv
511.137 522.207 511.145 522.266 511.145 522.336 cv
cp
f
583.852 522.371 mo
583.848 522.445 583.844 522.508 583.836 522.559 cv
583.824 522.613 583.809 522.656 583.789 522.684 cv
583.766 522.719 583.742 522.742 583.719 522.75 cv
583.695 522.766 583.668 522.77 583.641 522.77 cv
579.68 522.77 li
579.652 522.77 579.629 522.766 579.605 522.75 cv
579.582 522.742 579.559 522.719 579.539 522.684 cv
579.516 522.656 579.5 522.613 579.488 522.559 cv
579.473 522.508 579.465 522.445 579.469 522.371 cv
579.465 522.301 579.473 522.242 579.488 522.191 cv
579.5 522.141 579.512 522.098 579.531 522.062 cv
579.547 522.031 579.57 522.008 579.594 521.988 cv
579.617 521.973 579.645 521.961 579.68 521.961 cv
581.266 521.961 li
581.266 516.195 li
579.797 517.066 li
579.723 517.113 579.664 517.137 579.621 517.141 cv
579.574 517.152 579.539 517.145 579.512 517.113 cv
579.48 517.09 579.461 517.047 579.453 516.988 cv
579.445 516.93 579.441 516.855 579.441 516.762 cv
579.441 516.699 579.441 516.641 579.449 516.594 cv
579.453 516.547 579.465 516.508 579.477 516.477 cv
579.484 516.445 579.5 516.418 579.523 516.395 cv
579.547 516.371 579.574 516.348 579.609 516.324 cv
581.359 515.207 li
581.371 515.195 581.391 515.184 581.418 515.176 cv
581.438 515.168 581.469 515.16 581.504 515.152 cv
581.535 515.145 581.574 515.141 581.625 515.141 cv
581.668 515.141 581.727 515.141 581.805 515.137 cv
581.895 515.141 581.973 515.145 582.039 515.148 cv
582.098 515.16 582.148 515.172 582.184 515.18 cv
582.215 515.195 582.238 515.211 582.254 515.23 cv
582.266 515.254 582.27 515.277 582.273 515.301 cv
582.273 521.961 li
583.641 521.961 li
583.668 521.961 583.699 521.973 583.73 521.988 cv
583.758 522.008 583.777 522.031 583.797 522.062 cv
583.813 522.098 583.828 522.141 583.836 522.191 cv
583.844 522.242 583.848 522.301 583.852 522.371 cv
cp
f
590.273 520.613 mo
590.27 520.746 590.25 520.848 590.215 520.918 cv
590.172 520.992 590.117 521.031 590.055 521.027 cv
589.195 521.027 li
589.195 522.621 li
589.191 522.656 589.184 522.684 589.172 522.703 cv
589.152 522.727 589.125 522.742 589.086 522.758 cv
589.047 522.773 588.992 522.785 588.93 522.793 cv
588.863 522.801 588.781 522.805 588.684 522.805 cv
588.582 522.805 588.504 522.801 588.441 522.793 cv
588.379 522.785 588.328 522.773 588.289 522.758 cv
588.25 522.742 588.223 522.727 588.207 522.703 cv
588.191 522.684 588.184 522.656 588.188 522.621 cv
588.188 521.027 li
585.086 521.027 li
585.039 521.031 585.004 521.023 584.973 521.012 cv
584.941 521.004 584.91 520.984 584.887 520.949 cv
584.855 520.922 584.84 520.875 584.832 520.812 cv
584.824 520.754 584.82 520.68 584.82 520.582 cv
584.82 520.512 584.82 520.445 584.824 520.387 cv
584.828 520.328 584.836 520.273 584.848 520.227 cv
584.859 520.18 584.875 520.133 584.895 520.086 cv
584.914 520.039 584.938 519.992 584.965 519.941 cv
587.668 515.332 li
587.688 515.305 587.715 515.277 587.754 515.25 cv
587.789 515.23 587.84 515.211 587.902 515.191 cv
587.961 515.18 588.031 515.168 588.121 515.16 cv
588.207 515.156 588.313 515.152 588.434 515.152 cv
588.563 515.152 588.676 515.16 588.773 515.168 cv
588.871 515.184 588.949 515.195 589.012 515.207 cv
589.066 515.227 589.113 515.246 589.148 515.27 cv
589.176 515.293 589.191 515.324 589.195 515.355 cv
589.195 520.199 li
590.055 520.199 li
590.117 520.203 590.172 520.238 590.211 520.301 cv
590.25 520.371 590.27 520.473 590.273 520.613 cv
cp
588.188 516.035 mo
588.18 516.035 li
585.742 520.199 li
588.188 520.199 li
cp
f
662.668 522.371 mo
662.664 522.445 662.66 522.508 662.652 522.559 cv
662.641 522.613 662.625 522.656 662.605 522.684 cv
662.582 522.719 662.559 522.742 662.535 522.75 cv
662.512 522.766 662.484 522.77 662.457 522.77 cv
658.496 522.77 li
658.469 522.77 658.445 522.766 658.422 522.75 cv
658.398 522.742 658.375 522.719 658.355 522.684 cv
658.332 522.656 658.316 522.613 658.305 522.559 cv
658.289 522.508 658.281 522.445 658.285 522.371 cv
658.281 522.301 658.289 522.242 658.305 522.191 cv
658.316 522.141 658.328 522.098 658.348 522.062 cv
658.363 522.031 658.387 522.008 658.41 521.988 cv
658.434 521.973 658.461 521.961 658.496 521.961 cv
660.082 521.961 li
660.082 516.195 li
658.613 517.066 li
658.539 517.113 658.48 517.137 658.438 517.141 cv
658.391 517.152 658.355 517.145 658.328 517.113 cv
658.297 517.09 658.277 517.047 658.27 516.988 cv
658.262 516.93 658.258 516.855 658.258 516.762 cv
658.258 516.699 658.258 516.641 658.266 516.594 cv
658.27 516.547 658.281 516.508 658.293 516.477 cv
658.301 516.445 658.316 516.418 658.34 516.395 cv
658.363 516.371 658.391 516.348 658.426 516.324 cv
660.176 515.207 li
660.188 515.195 660.207 515.184 660.234 515.176 cv
660.254 515.168 660.285 515.16 660.32 515.152 cv
660.352 515.145 660.391 515.141 660.441 515.141 cv
660.484 515.141 660.543 515.141 660.621 515.137 cv
660.711 515.141 660.789 515.145 660.855 515.148 cv
660.914 515.16 660.965 515.172 661 515.18 cv
661.031 515.195 661.055 515.211 661.07 515.23 cv
661.082 515.254 661.086 515.277 661.09 515.301 cv
661.09 521.961 li
662.457 521.961 li
662.484 521.961 662.516 521.973 662.547 521.988 cv
662.574 522.008 662.594 522.031 662.613 522.062 cv
662.629 522.098 662.645 522.141 662.652 522.191 cv
662.66 522.242 662.664 522.301 662.668 522.371 cv
cp
f
668.969 520.316 mo
668.965 520.648 668.914 520.969 668.816 521.281 cv
668.711 521.594 668.555 521.867 668.348 522.102 cv
668.133 522.336 667.867 522.527 667.543 522.668 cv
667.215 522.809 666.832 522.875 666.395 522.879 cv
666.078 522.875 665.797 522.84 665.559 522.762 cv
665.313 522.687 665.102 522.574 664.926 522.43 cv
664.742 522.289 664.594 522.113 664.477 521.898 cv
664.355 521.691 664.258 521.449 664.188 521.176 cv
664.109 520.906 664.059 520.613 664.031 520.289 cv
663.996 519.973 663.98 519.629 663.984 519.262 cv
663.98 518.937 664 518.609 664.039 518.277 cv
664.074 517.945 664.137 517.625 664.227 517.316 cv
664.313 517.008 664.434 516.719 664.59 516.445 cv
664.746 516.176 664.938 515.937 665.172 515.734 cv
665.402 515.535 665.684 515.375 666.008 515.258 cv
666.328 515.141 666.703 515.082 667.141 515.082 cv
667.281 515.082 667.43 515.094 667.578 515.109 cv
667.727 515.133 667.863 515.156 667.988 515.18 cv
668.113 515.211 668.219 515.242 668.305 515.277 cv
668.391 515.312 668.445 515.34 668.473 515.363 cv
668.5 515.387 668.52 515.41 668.535 515.434 cv
668.543 515.457 668.555 515.484 668.566 515.516 cv
668.57 515.547 668.578 515.582 668.586 515.613 cv
668.59 515.652 668.59 515.695 668.594 515.75 cv
668.59 515.82 668.59 515.883 668.59 515.934 cv
668.586 515.984 668.578 516.023 668.566 516.055 cv
668.551 516.086 668.531 516.109 668.512 516.125 cv
668.488 516.141 668.461 516.148 668.43 516.148 cv
668.383 516.148 668.324 516.137 668.25 516.109 cv
668.176 516.082 668.086 516.051 667.98 516.016 cv
667.875 515.984 667.746 515.953 667.598 515.926 cv
667.445 515.902 667.273 515.891 667.074 515.887 cv
666.711 515.891 666.398 515.965 666.137 516.109 cv
665.871 516.262 665.656 516.461 665.492 516.707 cv
665.328 516.961 665.203 517.25 665.125 517.578 cv
665.043 517.906 665 518.25 664.988 518.609 cv
665.09 518.551 665.203 518.492 665.332 518.434 cv
665.457 518.379 665.594 518.328 665.746 518.277 cv
665.895 518.234 666.055 518.195 666.223 518.164 cv
666.391 518.133 666.57 518.117 666.766 518.117 cv
667.172 518.117 667.52 518.176 667.801 518.285 cv
668.082 518.398 668.309 518.551 668.48 518.746 cv
668.652 518.945 668.777 519.18 668.855 519.445 cv
668.93 519.719 668.965 520.008 668.969 520.316 cv
cp
667.945 520.41 mo
667.941 520.184 667.918 519.977 667.879 519.789 cv
667.832 519.605 667.758 519.449 667.652 519.32 cv
667.547 519.191 667.406 519.09 667.23 519.02 cv
667.055 518.949 666.84 518.914 666.582 518.914 cv
666.438 518.914 666.293 518.93 666.148 518.953 cv
666 518.98 665.859 519.016 665.727 519.059 cv
665.594 519.105 665.465 519.156 665.34 519.219 cv
665.215 519.281 665.102 519.348 665.008 519.41 cv
665.004 519.918 665.035 520.34 665.102 520.68 cv
665.164 521.02 665.258 521.293 665.383 521.496 cv
665.504 521.703 665.66 521.848 665.844 521.934 cv
666.023 522.023 666.238 522.066 666.488 522.066 cv
666.738 522.066 666.953 522.02 667.137 521.926 cv
667.32 521.832 667.473 521.707 667.594 521.547 cv
667.715 521.391 667.805 521.215 667.859 521.016 cv
667.914 520.82 667.941 520.617 667.945 520.41 cv
cp
f
293.961 537.477 mo
293.957 537.582 293.941 537.672 293.906 537.742 cv
293.871 537.82 293.824 537.879 293.77 537.922 cv
293.711 537.973 293.648 538.008 293.582 538.023 cv
293.508 538.047 293.438 538.055 293.375 538.055 cv
292.93 538.055 li
292.789 538.055 292.668 538.043 292.563 538.012 cv
292.457 537.988 292.359 537.934 292.266 537.855 cv
292.172 537.781 292.078 537.68 291.984 537.547 cv
291.891 537.418 291.789 537.254 291.684 537.051 cv
288.609 531.312 li
288.445 531.02 288.281 530.711 288.121 530.383 cv
287.953 530.062 287.801 529.746 287.664 529.437 cv
287.648 529.437 li
287.656 529.812 287.664 530.195 287.672 530.582 cv
287.676 530.973 287.676 531.359 287.68 531.742 cv
287.68 537.828 li
287.676 537.867 287.664 537.902 287.645 537.934 cv
287.621 537.969 287.586 537.996 287.535 538.012 cv
287.48 538.031 287.41 538.043 287.328 538.059 cv
287.242 538.07 287.137 538.078 287.008 538.078 cv
286.871 538.078 286.762 538.07 286.68 538.059 cv
286.594 538.043 286.527 538.031 286.48 538.012 cv
286.43 537.996 286.395 537.969 286.371 537.934 cv
286.348 537.902 286.336 537.867 286.34 537.828 cv
286.34 528.523 li
286.336 528.316 286.395 528.168 286.516 528.078 cv
286.633 527.992 286.762 527.949 286.902 527.945 cv
287.563 527.945 li
287.715 527.949 287.848 527.961 287.953 527.984 cv
288.055 528.012 288.148 528.055 288.234 528.113 cv
288.316 528.176 288.395 528.258 288.477 528.363 cv
288.551 528.473 288.633 528.609 288.719 528.766 cv
291.086 533.191 li
291.23 533.465 291.371 533.73 291.508 533.984 cv
291.641 534.242 291.77 534.496 291.898 534.742 cv
292.02 534.996 292.145 535.242 292.27 535.48 cv
292.391 535.723 292.512 535.965 292.637 536.207 cv
292.645 536.207 li
292.633 535.801 292.625 535.371 292.625 534.926 cv
292.617 534.48 292.617 534.055 292.621 533.645 cv
292.621 528.172 li
292.617 528.137 292.629 528.102 292.652 528.07 cv
292.676 528.039 292.711 528.012 292.766 527.988 cv
292.813 527.965 292.883 527.949 292.969 527.937 cv
293.055 527.93 293.164 527.926 293.305 527.922 cv
293.422 527.926 293.527 527.93 293.617 527.937 cv
293.703 527.949 293.77 527.965 293.82 527.988 cv
293.867 528.012 293.902 528.039 293.926 528.07 cv
293.945 528.102 293.957 528.137 293.961 528.172 cv
cp
f
302.508 537.836 mo
302.504 537.883 302.496 537.918 302.48 537.941 cv
302.461 537.973 302.426 537.996 302.383 538.016 cv
302.336 538.035 302.277 538.047 302.203 538.062 cv
302.125 538.07 302.031 538.078 301.926 538.078 cv
301.801 538.078 301.703 538.07 301.633 538.062 cv
301.555 538.047 301.496 538.035 301.453 538.016 cv
301.406 537.996 301.375 537.973 301.363 537.941 cv
301.344 537.918 301.336 537.883 301.34 537.836 cv
301.34 536.91 li
300.938 537.355 300.543 537.676 300.156 537.875 cv
299.762 538.078 299.367 538.176 298.973 538.18 cv
298.5 538.176 298.105 538.102 297.789 537.945 cv
297.469 537.793 297.211 537.582 297.016 537.312 cv
296.813 537.047 296.672 536.734 296.59 536.375 cv
296.5 536.02 296.457 535.586 296.461 535.078 cv
296.461 530.824 li
296.457 530.785 296.465 530.75 296.488 530.719 cv
296.504 530.691 296.539 530.668 296.594 530.641 cv
296.641 530.621 296.711 530.605 296.797 530.594 cv
296.879 530.59 296.98 530.586 297.109 530.582 cv
297.23 530.586 297.336 530.59 297.422 530.594 cv
297.504 530.605 297.57 530.621 297.617 530.641 cv
297.664 530.668 297.699 530.691 297.723 530.719 cv
297.742 530.75 297.75 530.785 297.754 530.824 cv
297.754 534.906 li
297.75 535.32 297.781 535.648 297.844 535.895 cv
297.902 536.141 297.992 536.352 298.117 536.523 cv
298.234 536.703 298.391 536.836 298.582 536.93 cv
298.766 537.027 298.984 537.078 299.234 537.074 cv
299.555 537.078 299.875 536.961 300.199 536.73 cv
300.516 536.504 300.855 536.168 301.215 535.723 cv
301.215 530.824 li
301.215 530.785 301.223 530.75 301.242 530.719 cv
301.258 530.691 301.293 530.668 301.348 530.641 cv
301.398 530.621 301.465 530.605 301.547 530.594 cv
301.625 530.59 301.73 530.586 301.863 530.582 cv
301.984 530.586 302.09 530.59 302.176 530.594 cv
302.258 530.605 302.32 530.621 302.367 530.641 cv
302.41 530.668 302.445 530.691 302.473 530.719 cv
302.492 530.75 302.504 530.785 302.508 530.824 cv
cp
f
315.285 537.836 mo
315.281 537.883 315.273 537.918 315.254 537.941 cv
315.23 537.973 315.195 537.996 315.152 538.016 cv
315.102 538.035 315.035 538.047 314.957 538.062 cv
314.871 538.07 314.77 538.078 314.645 538.078 cv
314.512 538.078 314.402 538.07 314.324 538.062 cv
314.238 538.047 314.172 538.035 314.125 538.016 cv
314.07 537.996 314.035 537.973 314.02 537.941 cv
313.996 537.918 313.988 537.883 313.988 537.836 cv
313.988 533.574 li
313.988 533.281 313.961 533.012 313.91 532.766 cv
313.855 532.523 313.773 532.312 313.66 532.133 cv
313.547 531.957 313.402 531.82 313.227 531.727 cv
313.047 531.633 312.836 531.586 312.602 531.586 cv
312.305 531.586 312.008 531.703 311.711 531.93 cv
311.406 532.164 311.078 532.496 310.723 532.934 cv
310.723 537.836 li
310.719 537.883 310.707 537.918 310.691 537.941 cv
310.668 537.973 310.637 537.996 310.59 538.016 cv
310.539 538.035 310.473 538.047 310.391 538.062 cv
310.305 538.07 310.199 538.078 310.078 538.078 cv
309.957 538.078 309.855 538.07 309.77 538.062 cv
309.684 538.047 309.613 538.035 309.566 538.016 cv
309.512 537.996 309.48 537.973 309.465 537.941 cv
309.445 537.918 309.434 537.883 309.438 537.836 cv
309.438 533.574 li
309.434 533.281 309.406 533.012 309.352 532.766 cv
309.293 532.523 309.207 532.312 309.094 532.133 cv
308.98 531.957 308.836 531.82 308.664 531.727 cv
308.484 531.633 308.277 531.586 308.043 531.586 cv
307.742 531.586 307.445 531.703 307.145 531.93 cv
306.844 532.164 306.516 532.496 306.164 532.934 cv
306.164 537.836 li
306.16 537.883 306.148 537.918 306.133 537.941 cv
306.109 537.973 306.078 537.996 306.031 538.016 cv
305.984 538.035 305.918 538.047 305.84 538.062 cv
305.754 538.07 305.648 538.078 305.52 538.078 cv
305.391 538.078 305.285 538.07 305.207 538.062 cv
305.121 538.047 305.055 538.035 305.008 538.016 cv
304.953 537.996 304.922 537.973 304.906 537.941 cv
304.887 537.918 304.875 537.883 304.879 537.836 cv
304.879 530.824 li
304.875 530.785 304.883 530.75 304.902 530.719 cv
304.914 530.691 304.945 530.668 304.996 530.641 cv
305.039 530.621 305.102 530.605 305.176 530.594 cv
305.246 530.59 305.34 530.586 305.465 530.582 cv
305.574 530.586 305.672 530.59 305.75 530.594 cv
305.824 530.605 305.883 530.621 305.926 530.641 cv
305.965 530.668 305.992 530.691 306.012 530.719 cv
306.027 530.75 306.035 530.785 306.039 530.824 cv
306.039 531.75 li
306.43 531.309 306.813 530.988 307.188 530.781 cv
307.555 530.578 307.934 530.473 308.316 530.473 cv
308.605 530.473 308.863 530.508 309.098 530.574 cv
309.324 530.645 309.531 530.738 309.711 530.859 cv
309.887 530.98 310.035 531.125 310.164 531.293 cv
310.285 531.465 310.391 531.656 310.477 531.859 cv
310.707 531.609 310.93 531.395 311.141 531.215 cv
311.352 531.043 311.555 530.898 311.75 530.785 cv
311.945 530.68 312.133 530.602 312.316 530.547 cv
312.5 530.5 312.688 530.473 312.875 530.473 cv
313.328 530.473 313.707 530.555 314.012 530.711 cv
314.316 530.875 314.563 531.086 314.758 531.348 cv
314.945 531.613 315.082 531.922 315.164 532.277 cv
315.242 532.633 315.281 533.008 315.285 533.402 cv
cp
f
324.086 534.234 mo
324.082 534.844 324.016 535.395 323.887 535.879 cv
323.75 536.367 323.555 536.781 323.301 537.121 cv
323.043 537.465 322.727 537.727 322.355 537.906 cv
321.98 538.09 321.555 538.176 321.07 538.18 cv
320.844 538.176 320.637 538.156 320.449 538.113 cv
320.262 538.066 320.074 537.996 319.895 537.898 cv
319.707 537.801 319.527 537.676 319.348 537.523 cv
319.164 537.375 318.973 537.195 318.773 536.98 cv
318.773 537.836 li
318.773 537.883 318.762 537.918 318.742 537.945 cv
318.719 537.98 318.684 538.004 318.641 538.02 cv
318.59 538.035 318.531 538.047 318.465 538.062 cv
318.391 538.07 318.301 538.078 318.195 538.078 cv
318.086 538.078 318 538.07 317.93 538.062 cv
317.855 538.047 317.793 538.035 317.75 538.02 cv
317.699 538.004 317.668 537.98 317.656 537.945 cv
317.637 537.918 317.629 537.883 317.633 537.836 cv
317.633 527.426 li
317.629 527.387 317.641 527.352 317.66 527.316 cv
317.676 527.289 317.707 527.262 317.762 527.238 cv
317.809 527.219 317.875 527.203 317.961 527.191 cv
318.039 527.184 318.145 527.18 318.273 527.176 cv
318.402 527.18 318.508 527.184 318.594 527.191 cv
318.672 527.203 318.738 527.219 318.785 527.238 cv
318.832 527.262 318.863 527.289 318.887 527.316 cv
318.902 527.352 318.914 527.387 318.918 527.426 cv
318.918 531.625 li
319.125 531.414 319.328 531.234 319.523 531.09 cv
319.719 530.945 319.906 530.828 320.094 530.734 cv
320.277 530.648 320.465 530.582 320.656 530.535 cv
320.84 530.496 321.039 530.473 321.25 530.473 cv
321.754 530.473 322.188 530.574 322.555 530.777 cv
322.914 530.98 323.207 531.254 323.434 531.59 cv
323.656 531.934 323.824 532.332 323.93 532.789 cv
324.031 533.246 324.082 533.727 324.086 534.234 cv
cp
322.754 534.383 mo
322.75 534.027 322.723 533.68 322.672 533.34 cv
322.613 533.004 322.52 532.707 322.383 532.445 cv
322.246 532.187 322.066 531.977 321.844 531.816 cv
321.617 531.66 321.336 531.582 321.004 531.578 cv
320.836 531.582 320.672 531.605 320.512 531.648 cv
320.348 531.699 320.184 531.777 320.016 531.883 cv
319.848 531.996 319.672 532.137 319.496 532.305 cv
319.313 532.48 319.121 532.695 318.918 532.949 cv
318.918 535.746 li
319.273 536.18 319.613 536.512 319.938 536.734 cv
320.262 536.965 320.598 537.078 320.949 537.074 cv
321.27 537.078 321.547 537 321.781 536.84 cv
322.008 536.687 322.195 536.48 322.34 536.219 cv
322.484 535.965 322.59 535.676 322.656 535.355 cv
322.719 535.039 322.75 534.715 322.754 534.383 cv
cp
f
331.996 534.027 mo
331.992 534.23 331.941 534.371 331.844 534.457 cv
331.738 534.543 331.621 534.586 331.496 534.586 cv
326.879 534.586 li
326.875 534.977 326.914 535.328 326.996 535.641 cv
327.07 535.953 327.203 536.223 327.387 536.441 cv
327.566 536.668 327.801 536.84 328.098 536.957 cv
328.387 537.082 328.746 537.141 329.172 537.137 cv
329.504 537.141 329.801 537.113 330.063 537.055 cv
330.324 537.004 330.551 536.941 330.742 536.871 cv
330.93 536.805 331.086 536.746 331.211 536.687 cv
331.332 536.637 331.426 536.609 331.488 536.605 cv
331.523 536.609 331.555 536.617 331.586 536.633 cv
331.613 536.652 331.637 536.68 331.656 536.715 cv
331.668 536.754 331.68 536.805 331.691 536.867 cv
331.695 536.934 331.699 537.012 331.703 537.105 cv
331.699 537.176 331.695 537.234 331.695 537.281 cv
331.688 537.328 331.684 537.371 331.676 537.41 cv
331.668 537.449 331.652 537.484 331.637 537.516 cv
331.613 537.547 331.59 537.578 331.566 537.605 cv
331.535 537.637 331.453 537.684 331.313 537.746 cv
331.172 537.812 330.988 537.875 330.766 537.937 cv
330.539 538 330.281 538.055 329.988 538.105 cv
329.695 538.152 329.383 538.176 329.051 538.18 cv
328.473 538.176 327.965 538.098 327.535 537.937 cv
327.098 537.777 326.734 537.539 326.441 537.223 cv
326.141 536.906 325.918 536.512 325.77 536.031 cv
325.621 535.555 325.547 534.996 325.547 534.359 cv
325.547 533.762 325.621 533.223 325.777 532.738 cv
325.93 532.262 326.156 531.852 326.453 531.516 cv
326.746 531.18 327.102 530.922 327.516 530.742 cv
327.93 530.562 328.395 530.473 328.91 530.473 cv
329.461 530.473 329.93 530.562 330.316 530.738 cv
330.703 530.918 331.02 531.156 331.273 531.453 cv
331.52 531.754 331.703 532.105 331.82 532.504 cv
331.934 532.91 331.992 533.34 331.996 533.793 cv
cp
330.703 533.645 mo
330.719 532.969 330.566 532.437 330.25 532.055 cv
329.934 531.672 329.465 531.48 328.848 531.477 cv
328.523 531.48 328.242 531.539 328.004 531.656 cv
327.762 531.777 327.563 531.937 327.402 532.133 cv
327.238 532.332 327.113 532.562 327.027 532.824 cv
326.938 533.086 326.887 533.359 326.879 533.645 cv
cp
f
338.063 531.281 mo
338.059 531.398 338.059 531.496 338.055 531.57 cv
338.047 531.652 338.035 531.715 338.023 531.754 cv
338.004 531.801 337.984 531.832 337.965 531.855 cv
337.938 531.879 337.906 531.891 337.867 531.891 cv
337.824 531.891 337.773 531.879 337.715 531.855 cv
337.652 531.832 337.582 531.809 337.512 531.785 cv
337.434 531.762 337.352 531.742 337.258 531.719 cv
337.164 531.703 337.063 531.691 336.953 531.687 cv
336.82 531.691 336.691 531.719 336.57 531.766 cv
336.445 531.82 336.316 531.906 336.18 532.023 cv
336.039 532.148 335.895 532.305 335.746 532.5 cv
335.594 532.695 335.426 532.937 335.246 533.223 cv
335.246 537.836 li
335.242 537.883 335.23 537.918 335.215 537.941 cv
335.191 537.973 335.16 537.996 335.113 538.016 cv
335.066 538.035 335 538.047 334.922 538.062 cv
334.836 538.07 334.73 538.078 334.602 538.078 cv
334.473 538.078 334.367 538.07 334.289 538.062 cv
334.203 538.047 334.137 538.035 334.09 538.016 cv
334.035 537.996 334.004 537.973 333.988 537.941 cv
333.969 537.918 333.957 537.883 333.961 537.836 cv
333.961 530.824 li
333.957 530.785 333.965 530.75 333.984 530.719 cv
333.996 530.691 334.027 530.668 334.078 530.641 cv
334.121 530.621 334.184 530.605 334.258 530.594 cv
334.328 530.59 334.422 530.586 334.547 530.582 cv
334.656 530.586 334.754 530.59 334.832 530.594 cv
334.906 530.605 334.965 530.621 335.008 530.641 cv
335.047 530.668 335.074 530.691 335.094 530.719 cv
335.109 530.75 335.117 530.785 335.121 530.824 cv
335.121 531.844 li
335.309 531.562 335.492 531.336 335.664 531.16 cv
335.832 530.984 335.992 530.844 336.145 530.742 cv
336.293 530.641 336.441 530.57 336.59 530.531 cv
336.738 530.492 336.887 530.473 337.039 530.473 cv
337.105 530.473 337.184 530.477 337.27 530.484 cv
337.355 530.492 337.445 530.508 337.539 530.527 cv
337.633 530.551 337.715 530.574 337.793 530.598 cv
337.863 530.625 337.918 530.652 337.953 530.676 cv
337.98 530.707 338 530.73 338.016 530.75 cv
338.023 530.777 338.035 530.809 338.043 530.84 cv
338.051 530.879 338.055 530.93 338.059 531 cv
338.059 531.07 338.059 531.164 338.063 531.281 cv
cp
f
349.82 534.25 mo
349.816 534.828 349.742 535.355 349.594 535.832 cv
349.441 536.316 349.215 536.73 348.918 537.074 cv
348.617 537.426 348.242 537.695 347.797 537.887 cv
347.344 538.082 346.824 538.176 346.234 538.18 cv
345.656 538.176 345.152 538.094 344.727 537.922 cv
344.297 537.754 343.941 537.504 343.656 537.176 cv
343.367 536.848 343.152 536.453 343.016 535.984 cv
342.875 535.52 342.809 534.988 342.809 534.391 cv
342.809 533.824 342.879 533.297 343.027 532.816 cv
343.172 532.336 343.398 531.922 343.699 531.57 cv
343.996 531.223 344.367 530.953 344.816 530.762 cv
345.262 530.57 345.785 530.473 346.383 530.473 cv
346.961 530.473 347.461 530.559 347.891 530.73 cv
348.316 530.902 348.676 531.152 348.961 531.48 cv
349.246 531.809 349.461 532.207 349.605 532.672 cv
349.746 533.141 349.816 533.668 349.82 534.25 cv
cp
348.488 534.336 mo
348.484 533.961 348.449 533.602 348.383 533.262 cv
348.309 532.926 348.191 532.633 348.031 532.375 cv
347.867 532.125 347.648 531.922 347.371 531.77 cv
347.09 531.625 346.742 531.551 346.332 531.547 cv
345.945 531.551 345.617 531.617 345.344 531.75 cv
345.066 531.887 344.84 532.078 344.664 532.324 cv
344.484 532.57 344.352 532.863 344.27 533.199 cv
344.18 533.539 344.137 533.906 344.141 534.305 cv
344.137 534.691 344.172 535.055 344.246 535.391 cv
344.313 535.73 344.43 536.023 344.598 536.273 cv
344.762 536.527 344.984 536.73 345.262 536.875 cv
345.539 537.027 345.887 537.102 346.301 537.098 cv
346.676 537.102 347.004 537.031 347.285 536.895 cv
347.563 536.762 347.789 536.574 347.969 536.324 cv
348.145 536.082 348.273 535.789 348.359 535.453 cv
348.441 535.117 348.484 534.746 348.488 534.336 cv
cp
f
355.551 527.937 mo
355.547 528.039 355.543 528.117 355.535 528.176 cv
355.523 528.238 355.512 528.289 355.5 528.32 cv
355.484 528.359 355.469 528.383 355.449 528.395 cv
355.426 528.41 355.398 528.418 355.371 528.414 cv
355.332 528.418 355.285 528.406 355.234 528.379 cv
355.176 528.359 355.109 528.332 355.035 528.301 cv
354.953 528.273 354.863 528.246 354.758 528.223 cv
354.648 528.199 354.523 528.187 354.391 528.187 cv
354.195 528.187 354.031 528.219 353.898 528.281 cv
353.758 528.344 353.648 528.441 353.57 528.574 cv
353.484 528.707 353.426 528.879 353.391 529.09 cv
353.352 529.301 353.332 529.559 353.336 529.855 cv
353.336 530.621 li
354.902 530.621 li
354.941 530.625 354.977 530.633 355.008 530.648 cv
355.035 530.668 355.063 530.699 355.086 530.742 cv
355.109 530.789 355.125 530.848 355.141 530.91 cv
355.148 530.98 355.156 531.062 355.16 531.156 cv
355.156 531.348 355.133 531.48 355.09 531.562 cv
355.039 531.648 354.977 531.691 354.902 531.687 cv
353.336 531.687 li
353.336 537.836 li
353.332 537.883 353.324 537.918 353.305 537.941 cv
353.281 537.973 353.246 537.996 353.199 538.016 cv
353.148 538.035 353.082 538.047 353 538.062 cv
352.914 538.07 352.809 538.078 352.691 538.078 cv
352.563 538.078 352.461 538.07 352.379 538.062 cv
352.293 538.047 352.227 538.035 352.18 538.016 cv
352.129 537.996 352.094 537.973 352.074 537.941 cv
352.051 537.918 352.039 537.883 352.043 537.836 cv
352.043 531.687 li
351.055 531.687 li
350.969 531.691 350.906 531.648 350.867 531.562 cv
350.824 531.48 350.801 531.348 350.805 531.156 cv
350.801 531.062 350.809 530.98 350.82 530.91 cv
350.828 530.848 350.844 530.789 350.867 530.742 cv
350.887 530.699 350.91 530.668 350.945 530.648 cv
350.973 530.633 351.012 530.625 351.055 530.621 cv
352.043 530.621 li
352.043 529.895 li
352.039 529.41 352.086 528.992 352.18 528.637 cv
352.27 528.289 352.406 528 352.594 527.777 cv
352.777 527.555 353.012 527.391 353.301 527.281 cv
353.582 527.176 353.918 527.121 354.305 527.121 cv
354.48 527.121 354.656 527.141 354.832 527.172 cv
355 527.211 355.133 527.246 355.23 527.281 cv
355.32 527.324 355.383 527.359 355.418 527.387 cv
355.445 527.422 355.473 527.461 355.496 527.508 cv
355.516 527.559 355.527 527.621 355.539 527.687 cv
355.543 527.762 355.547 527.844 355.551 527.937 cv
cp
f
365.75 535.203 mo
365.746 535.676 365.66 536.098 365.488 536.465 cv
365.313 536.84 365.07 537.152 364.762 537.406 cv
364.453 537.664 364.09 537.855 363.672 537.984 cv
363.25 538.113 362.801 538.176 362.32 538.18 cv
361.98 538.176 361.664 538.148 361.379 538.094 cv
361.09 538.035 360.836 537.969 360.609 537.883 cv
360.383 537.805 360.191 537.719 360.039 537.625 cv
359.883 537.539 359.777 537.461 359.719 537.398 cv
359.66 537.336 359.617 537.258 359.59 537.164 cv
359.559 537.07 359.543 536.941 359.547 536.777 cv
359.543 536.664 359.547 536.57 359.563 536.492 cv
359.57 536.418 359.586 536.355 359.609 536.309 cv
359.625 536.262 359.652 536.23 359.688 536.211 cv
359.715 536.195 359.75 536.187 359.793 536.184 cv
359.863 536.187 359.965 536.23 360.102 536.316 cv
360.23 536.406 360.402 536.504 360.613 536.605 cv
360.82 536.715 361.07 536.812 361.363 536.898 cv
361.656 536.992 361.996 537.035 362.383 537.035 cv
362.672 537.035 362.938 536.996 363.18 536.918 cv
363.418 536.84 363.625 536.73 363.805 536.586 cv
363.977 536.445 364.113 536.27 364.207 536.059 cv
364.301 535.852 364.348 535.617 364.348 535.352 cv
364.348 535.07 364.281 534.824 364.152 534.617 cv
364.02 534.418 363.848 534.242 363.637 534.086 cv
363.422 533.937 363.18 533.797 362.906 533.664 cv
362.633 533.539 362.352 533.406 362.07 533.273 cv
361.781 533.141 361.504 532.996 361.234 532.832 cv
360.965 532.676 360.723 532.484 360.512 532.266 cv
360.293 532.047 360.121 531.793 359.992 531.496 cv
359.855 531.207 359.789 530.855 359.793 530.441 cv
359.789 530.023 359.867 529.648 360.023 529.316 cv
360.176 528.988 360.387 528.711 360.664 528.484 cv
360.934 528.266 361.258 528.094 361.637 527.977 cv
362.012 527.859 362.422 527.801 362.859 527.801 cv
363.078 527.801 363.301 527.82 363.531 527.859 cv
363.754 527.898 363.965 527.949 364.168 528.012 cv
364.363 528.078 364.543 528.152 364.703 528.23 cv
364.855 528.312 364.957 528.379 365.012 528.426 cv
365.059 528.48 365.094 528.52 365.109 528.543 cv
365.125 528.574 365.137 528.609 365.148 528.652 cv
365.156 528.699 365.164 528.754 365.172 528.812 cv
365.176 528.879 365.18 528.957 365.18 529.055 cv
365.18 529.148 365.176 529.234 365.168 529.305 cv
365.16 529.383 365.148 529.441 365.133 529.488 cv
365.117 529.535 365.094 529.57 365.066 529.594 cv
365.035 529.617 365.004 529.629 364.969 529.629 cv
364.91 529.629 364.82 529.594 364.699 529.523 cv
364.574 529.453 364.422 529.371 364.25 529.277 cv
364.07 529.187 363.863 529.105 363.625 529.027 cv
363.379 528.953 363.109 528.914 362.813 528.914 cv
362.531 528.914 362.285 528.953 362.078 529.027 cv
361.867 529.105 361.695 529.207 361.563 529.328 cv
361.426 529.453 361.324 529.598 361.258 529.77 cv
361.191 529.941 361.16 530.125 361.16 530.316 cv
361.16 530.602 361.223 530.844 361.352 531.043 cv
361.48 531.246 361.652 531.426 361.871 531.578 cv
362.082 531.738 362.328 531.879 362.605 532.008 cv
362.879 532.141 363.16 532.273 363.449 532.402 cv
363.734 532.535 364.016 532.68 364.289 532.836 cv
364.563 532.996 364.809 533.184 365.027 533.398 cv
365.242 533.617 365.414 533.871 365.551 534.164 cv
365.68 534.457 365.746 534.805 365.75 535.203 cv
cp
f
373.516 537.836 mo
373.512 537.883 373.504 537.918 373.488 537.941 cv
373.469 537.973 373.434 537.996 373.391 538.016 cv
373.344 538.035 373.285 538.047 373.211 538.062 cv
373.133 538.07 373.039 538.078 372.934 538.078 cv
372.809 538.078 372.711 538.07 372.641 538.062 cv
372.563 538.047 372.504 538.035 372.461 538.016 cv
372.414 537.996 372.383 537.973 372.371 537.941 cv
372.352 537.918 372.344 537.883 372.348 537.836 cv
372.348 536.91 li
371.945 537.355 371.551 537.676 371.164 537.875 cv
370.77 538.078 370.375 538.176 369.98 538.18 cv
369.508 538.176 369.113 538.102 368.797 537.945 cv
368.477 537.793 368.219 537.582 368.023 537.312 cv
367.82 537.047 367.68 536.734 367.598 536.375 cv
367.508 536.02 367.465 535.586 367.469 535.078 cv
367.469 530.824 li
367.465 530.785 367.473 530.75 367.496 530.719 cv
367.512 530.691 367.547 530.668 367.602 530.641 cv
367.648 530.621 367.719 530.605 367.805 530.594 cv
367.887 530.59 367.988 530.586 368.117 530.582 cv
368.238 530.586 368.344 530.59 368.43 530.594 cv
368.512 530.605 368.578 530.621 368.625 530.641 cv
368.672 530.668 368.707 530.691 368.73 530.719 cv
368.75 530.75 368.758 530.785 368.762 530.824 cv
368.762 534.906 li
368.758 535.32 368.789 535.648 368.852 535.895 cv
368.91 536.141 369 536.352 369.125 536.523 cv
369.242 536.703 369.398 536.836 369.59 536.93 cv
369.773 537.027 369.992 537.078 370.242 537.074 cv
370.563 537.078 370.883 536.961 371.207 536.73 cv
371.523 536.504 371.863 536.168 372.223 535.723 cv
372.223 530.824 li
372.223 530.785 372.23 530.75 372.25 530.719 cv
372.266 530.691 372.301 530.668 372.355 530.641 cv
372.406 530.621 372.473 530.605 372.555 530.594 cv
372.633 530.59 372.738 530.586 372.871 530.582 cv
372.992 530.586 373.098 530.59 373.184 530.594 cv
373.266 530.605 373.328 530.621 373.375 530.641 cv
373.418 530.668 373.453 530.691 373.48 530.719 cv
373.5 530.75 373.512 530.785 373.516 530.824 cv
cp
f
382.371 534.234 mo
382.367 534.844 382.301 535.395 382.172 535.879 cv
382.035 536.367 381.84 536.781 381.586 537.121 cv
381.328 537.465 381.012 537.727 380.641 537.906 cv
380.266 538.09 379.84 538.176 379.355 538.18 cv
379.129 538.176 378.922 538.156 378.734 538.113 cv
378.547 538.066 378.359 537.996 378.18 537.898 cv
377.992 537.801 377.813 537.676 377.633 537.523 cv
377.449 537.375 377.258 537.195 377.059 536.98 cv
377.059 537.836 li
377.059 537.883 377.047 537.918 377.027 537.945 cv
377.004 537.98 376.969 538.004 376.926 538.02 cv
376.875 538.035 376.816 538.047 376.75 538.062 cv
376.676 538.07 376.586 538.078 376.48 538.078 cv
376.371 538.078 376.285 538.07 376.215 538.062 cv
376.141 538.047 376.078 538.035 376.035 538.02 cv
375.984 538.004 375.953 537.98 375.941 537.945 cv
375.922 537.918 375.914 537.883 375.918 537.836 cv
375.918 527.426 li
375.914 527.387 375.926 527.352 375.945 527.316 cv
375.961 527.289 375.992 527.262 376.047 527.238 cv
376.094 527.219 376.16 527.203 376.246 527.191 cv
376.324 527.184 376.43 527.18 376.559 527.176 cv
376.688 527.18 376.793 527.184 376.879 527.191 cv
376.957 527.203 377.023 527.219 377.07 527.238 cv
377.117 527.262 377.148 527.289 377.172 527.316 cv
377.188 527.352 377.199 527.387 377.203 527.426 cv
377.203 531.625 li
377.41 531.414 377.613 531.234 377.809 531.09 cv
378.004 530.945 378.191 530.828 378.379 530.734 cv
378.563 530.648 378.75 530.582 378.941 530.535 cv
379.125 530.496 379.324 530.473 379.535 530.473 cv
380.039 530.473 380.473 530.574 380.84 530.777 cv
381.199 530.98 381.492 531.254 381.719 531.59 cv
381.941 531.934 382.109 532.332 382.215 532.789 cv
382.316 533.246 382.367 533.727 382.371 534.234 cv
cp
381.039 534.383 mo
381.035 534.027 381.008 533.68 380.957 533.34 cv
380.898 533.004 380.805 532.707 380.668 532.445 cv
380.531 532.187 380.352 531.977 380.129 531.816 cv
379.902 531.66 379.621 531.582 379.289 531.578 cv
379.121 531.582 378.957 531.605 378.797 531.648 cv
378.633 531.699 378.469 531.777 378.301 531.883 cv
378.133 531.996 377.957 532.137 377.781 532.305 cv
377.598 532.48 377.406 532.695 377.203 532.949 cv
377.203 535.746 li
377.559 536.18 377.898 536.512 378.223 536.734 cv
378.547 536.965 378.883 537.078 379.234 537.074 cv
379.555 537.078 379.832 537 380.066 536.84 cv
380.293 536.687 380.48 536.48 380.625 536.219 cv
380.77 535.965 380.875 535.676 380.941 535.355 cv
381.004 535.039 381.035 534.715 381.039 534.383 cv
cp
f
387.527 534.098 mo
387.527 534.301 387.504 534.437 387.457 534.516 cv
387.41 534.594 387.34 534.633 387.254 534.633 cv
383.996 534.633 li
383.902 534.633 383.836 534.594 383.789 534.512 cv
383.742 534.434 383.719 534.297 383.719 534.098 cv
383.719 533.902 383.742 533.762 383.789 533.684 cv
383.836 533.605 383.902 533.566 383.996 533.566 cv
387.254 533.566 li
387.293 533.566 387.332 533.574 387.367 533.59 cv
387.398 533.605 387.426 533.637 387.453 533.68 cv
387.473 533.727 387.492 533.781 387.508 533.848 cv
387.52 533.918 387.527 534.004 387.527 534.098 cv
cp
f
390.781 537.828 mo
390.777 537.871 390.77 537.906 390.75 537.937 cv
390.727 537.969 390.688 537.996 390.641 538.012 cv
390.586 538.031 390.52 538.043 390.434 538.059 cv
390.348 538.07 390.238 538.078 390.113 538.078 cv
389.984 538.078 389.879 538.07 389.793 538.059 cv
389.703 538.043 389.633 538.031 389.582 538.012 cv
389.527 537.996 389.492 537.969 389.473 537.937 cv
389.449 537.906 389.438 537.871 389.441 537.828 cv
389.441 528.148 li
389.438 528.109 389.449 528.074 389.477 528.039 cv
389.496 528.012 389.535 527.984 389.594 527.965 cv
389.645 527.949 389.715 527.934 389.805 527.918 cv
389.887 527.906 389.988 527.902 390.113 527.898 cv
390.238 527.902 390.348 527.906 390.434 527.918 cv
390.52 527.934 390.586 527.949 390.641 527.965 cv
390.688 527.984 390.727 528.012 390.75 528.039 cv
390.77 528.074 390.777 528.109 390.781 528.148 cv
cp
f
403.766 537.836 mo
403.762 537.883 403.754 537.918 403.734 537.941 cv
403.711 537.973 403.676 537.996 403.633 538.016 cv
403.582 538.035 403.516 538.047 403.438 538.062 cv
403.352 538.07 403.25 538.078 403.125 538.078 cv
402.992 538.078 402.883 538.07 402.805 538.062 cv
402.719 538.047 402.652 538.035 402.605 538.016 cv
402.551 537.996 402.516 537.973 402.5 537.941 cv
402.477 537.918 402.469 537.883 402.469 537.836 cv
402.469 533.574 li
402.469 533.281 402.441 533.012 402.391 532.766 cv
402.336 532.523 402.254 532.312 402.141 532.133 cv
402.027 531.957 401.883 531.82 401.707 531.727 cv
401.527 531.633 401.316 531.586 401.082 531.586 cv
400.785 531.586 400.488 531.703 400.191 531.93 cv
399.887 532.164 399.559 532.496 399.203 532.934 cv
399.203 537.836 li
399.199 537.883 399.188 537.918 399.172 537.941 cv
399.148 537.973 399.117 537.996 399.07 538.016 cv
399.02 538.035 398.953 538.047 398.871 538.062 cv
398.785 538.07 398.68 538.078 398.559 538.078 cv
398.438 538.078 398.336 538.07 398.25 538.062 cv
398.164 538.047 398.094 538.035 398.047 538.016 cv
397.992 537.996 397.961 537.973 397.945 537.941 cv
397.926 537.918 397.914 537.883 397.918 537.836 cv
397.918 533.574 li
397.914 533.281 397.887 533.012 397.832 532.766 cv
397.773 532.523 397.688 532.312 397.574 532.133 cv
397.461 531.957 397.316 531.82 397.145 531.727 cv
396.965 531.633 396.758 531.586 396.523 531.586 cv
396.223 531.586 395.926 531.703 395.625 531.93 cv
395.324 532.164 394.996 532.496 394.645 532.934 cv
394.645 537.836 li
394.641 537.883 394.629 537.918 394.613 537.941 cv
394.59 537.973 394.559 537.996 394.512 538.016 cv
394.465 538.035 394.398 538.047 394.32 538.062 cv
394.234 538.07 394.129 538.078 394 538.078 cv
393.871 538.078 393.766 538.07 393.688 538.062 cv
393.602 538.047 393.535 538.035 393.488 538.016 cv
393.434 537.996 393.402 537.973 393.387 537.941 cv
393.367 537.918 393.355 537.883 393.359 537.836 cv
393.359 530.824 li
393.355 530.785 393.363 530.75 393.383 530.719 cv
393.395 530.691 393.426 530.668 393.477 530.641 cv
393.52 530.621 393.582 530.605 393.656 530.594 cv
393.727 530.59 393.82 530.586 393.945 530.582 cv
394.055 530.586 394.152 530.59 394.23 530.594 cv
394.305 530.605 394.363 530.621 394.406 530.641 cv
394.445 530.668 394.473 530.691 394.492 530.719 cv
394.508 530.75 394.516 530.785 394.52 530.824 cv
394.52 531.75 li
394.91 531.309 395.293 530.988 395.668 530.781 cv
396.035 530.578 396.414 530.473 396.797 530.473 cv
397.086 530.473 397.344 530.508 397.578 530.574 cv
397.805 530.645 398.012 530.738 398.191 530.859 cv
398.367 530.98 398.516 531.125 398.645 531.293 cv
398.766 531.465 398.871 531.656 398.957 531.859 cv
399.188 531.609 399.41 531.395 399.621 531.215 cv
399.832 531.043 400.035 530.898 400.23 530.785 cv
400.426 530.68 400.613 530.602 400.797 530.547 cv
400.98 530.5 401.168 530.473 401.355 530.473 cv
401.809 530.473 402.188 530.555 402.492 530.711 cv
402.797 530.875 403.043 531.086 403.238 531.348 cv
403.426 531.613 403.563 531.922 403.645 532.277 cv
403.723 532.633 403.762 533.008 403.766 533.402 cv
cp
f
411.398 537.844 mo
411.395 537.906 411.375 537.953 411.336 537.984 cv
411.293 538.016 411.234 538.039 411.164 538.055 cv
411.086 538.07 410.98 538.078 410.844 538.078 cv
410.707 538.078 410.598 538.07 410.52 538.055 cv
410.434 538.039 410.375 538.016 410.344 537.984 cv
410.305 537.953 410.289 537.906 410.293 537.844 cv
410.293 537.145 li
409.984 537.473 409.641 537.727 409.266 537.906 cv
408.887 538.09 408.488 538.176 408.07 538.18 cv
407.695 538.176 407.363 538.129 407.066 538.035 cv
406.77 537.937 406.516 537.801 406.305 537.617 cv
406.094 537.437 405.93 537.215 405.813 536.949 cv
405.695 536.687 405.637 536.387 405.641 536.043 cv
405.637 535.652 405.715 535.309 405.879 535.016 cv
406.035 534.727 406.27 534.484 406.574 534.293 cv
406.875 534.102 407.242 533.957 407.68 533.859 cv
408.113 533.766 408.605 533.719 409.152 533.715 cv
410.121 533.715 li
410.121 533.168 li
410.117 532.898 410.09 532.66 410.035 532.453 cv
409.977 532.246 409.883 532.074 409.758 531.934 cv
409.625 531.797 409.461 531.691 409.262 531.621 cv
409.055 531.551 408.805 531.516 408.516 531.516 cv
408.195 531.516 407.91 531.555 407.66 531.629 cv
407.402 531.707 407.184 531.789 406.996 531.879 cv
406.809 531.973 406.648 532.059 406.523 532.129 cv
406.391 532.207 406.297 532.242 406.238 532.242 cv
406.195 532.242 406.16 532.234 406.129 532.211 cv
406.098 532.195 406.07 532.164 406.047 532.117 cv
406.023 532.078 406.004 532.023 405.996 531.957 cv
405.98 531.895 405.977 531.824 405.98 531.742 cv
405.977 531.617 405.984 531.512 406.008 531.434 cv
406.023 531.359 406.07 531.289 406.141 531.219 cv
406.211 531.152 406.332 531.074 406.504 530.984 cv
406.676 530.895 406.871 530.812 407.094 530.734 cv
407.316 530.664 407.563 530.602 407.828 530.547 cv
408.094 530.5 408.359 530.473 408.633 530.473 cv
409.133 530.473 409.563 530.531 409.914 530.645 cv
410.266 530.762 410.551 530.93 410.773 531.148 cv
410.988 531.371 411.148 531.645 411.25 531.969 cv
411.348 532.301 411.395 532.684 411.398 533.113 cv
cp
410.121 534.641 mo
409.02 534.641 li
408.664 534.645 408.359 534.676 408.102 534.73 cv
407.84 534.793 407.625 534.879 407.453 534.996 cv
407.281 535.113 407.156 535.254 407.078 535.418 cv
406.996 535.582 406.953 535.77 406.957 535.98 cv
406.953 536.348 407.07 536.641 407.301 536.852 cv
407.531 537.07 407.855 537.176 408.273 537.176 cv
408.609 537.176 408.922 537.09 409.211 536.918 cv
409.5 536.746 409.801 536.484 410.121 536.129 cv
cp
f
419.617 531.141 mo
419.613 531.324 419.59 531.457 419.543 531.535 cv
419.492 531.617 419.43 531.656 419.355 531.656 cv
418.348 531.656 li
418.527 531.844 418.656 532.051 418.73 532.277 cv
418.801 532.504 418.836 532.738 418.84 532.98 cv
418.836 533.387 418.77 533.746 418.645 534.059 cv
418.512 534.371 418.328 534.637 418.086 534.848 cv
417.844 535.066 417.555 535.23 417.227 535.344 cv
416.891 535.461 416.523 535.52 416.121 535.516 cv
415.832 535.52 415.559 535.48 415.305 535.402 cv
415.043 535.328 414.848 535.234 414.711 535.117 cv
414.617 535.215 414.539 535.32 414.48 535.437 cv
414.418 535.559 414.387 535.695 414.391 535.848 cv
414.387 536.031 414.473 536.184 414.645 536.301 cv
414.813 536.426 415.035 536.488 415.316 536.496 cv
417.148 536.574 li
417.496 536.586 417.813 536.633 418.105 536.719 cv
418.395 536.805 418.648 536.93 418.863 537.086 cv
419.074 537.246 419.242 537.437 419.363 537.668 cv
419.48 537.902 419.539 538.172 419.543 538.477 cv
419.539 538.797 419.473 539.102 419.34 539.395 cv
419.203 539.684 418.996 539.937 418.719 540.16 cv
418.438 540.379 418.082 540.555 417.652 540.684 cv
417.223 540.809 416.715 540.871 416.129 540.875 cv
415.559 540.871 415.074 540.824 414.68 540.73 cv
414.281 540.633 413.957 540.5 413.703 540.336 cv
413.449 540.168 413.266 539.973 413.152 539.742 cv
413.035 539.508 412.977 539.254 412.98 538.988 cv
412.977 538.816 412.996 538.652 413.043 538.492 cv
413.082 538.328 413.145 538.176 413.23 538.031 cv
413.313 537.887 413.422 537.75 413.551 537.613 cv
413.676 537.484 413.82 537.352 413.992 537.223 cv
413.734 537.094 413.547 536.93 413.426 536.73 cv
413.305 536.535 413.246 536.324 413.246 536.09 cv
413.246 535.777 413.309 535.492 413.438 535.242 cv
413.566 534.992 413.727 534.77 413.922 534.57 cv
413.758 534.379 413.633 534.164 413.539 533.922 cv
413.445 533.684 413.398 533.391 413.398 533.043 cv
413.398 532.648 413.465 532.289 413.602 531.969 cv
413.734 531.652 413.922 531.387 414.164 531.168 cv
414.402 530.953 414.688 530.785 415.023 530.664 cv
415.355 530.551 415.723 530.492 416.121 530.488 cv
416.332 530.492 416.531 530.504 416.715 530.523 cv
416.898 530.551 417.07 530.582 417.234 530.621 cv
419.355 530.621 li
419.441 530.625 419.508 530.668 419.551 530.75 cv
419.594 530.84 419.613 530.969 419.617 531.141 cv
cp
417.609 532.988 mo
417.605 532.516 417.473 532.145 417.215 531.871 cv
416.949 531.605 416.578 531.469 416.098 531.469 cv
415.844 531.469 415.625 531.512 415.445 531.594 cv
415.258 531.68 415.105 531.793 414.984 531.937 cv
414.863 532.086 414.773 532.254 414.715 532.441 cv
414.652 532.629 414.621 532.828 414.625 533.035 cv
414.621 533.5 414.754 533.863 415.016 534.129 cv
415.277 534.395 415.645 534.527 416.121 534.523 cv
416.371 534.527 416.59 534.488 416.781 534.402 cv
416.965 534.324 417.121 534.211 417.246 534.07 cv
417.367 533.93 417.457 533.766 417.52 533.574 cv
417.574 533.391 417.605 533.195 417.609 532.988 cv
cp
418.254 538.547 mo
418.25 538.242 418.125 538.012 417.883 537.848 cv
417.633 537.687 417.301 537.598 416.883 537.586 cv
415.066 537.523 li
414.898 537.656 414.762 537.781 414.66 537.895 cv
414.551 538.012 414.469 538.121 414.406 538.23 cv
414.344 538.336 414.301 538.441 414.277 538.547 cv
414.254 538.648 414.242 538.754 414.242 538.863 cv
414.242 539.199 414.41 539.453 414.754 539.633 cv
415.094 539.805 415.574 539.895 416.191 539.895 cv
416.578 539.895 416.902 539.855 417.168 539.781 cv
417.426 539.703 417.637 539.602 417.801 539.48 cv
417.957 539.352 418.074 539.211 418.148 539.051 cv
418.215 538.891 418.25 538.723 418.254 538.547 cv
cp
f
427.18 534.027 mo
427.176 534.23 427.125 534.371 427.027 534.457 cv
426.922 534.543 426.805 534.586 426.68 534.586 cv
422.063 534.586 li
422.059 534.977 422.098 535.328 422.18 535.641 cv
422.254 535.953 422.387 536.223 422.57 536.441 cv
422.75 536.668 422.984 536.84 423.281 536.957 cv
423.57 537.082 423.93 537.141 424.355 537.137 cv
424.688 537.141 424.984 537.113 425.246 537.055 cv
425.508 537.004 425.734 536.941 425.926 536.871 cv
426.113 536.805 426.27 536.746 426.395 536.687 cv
426.516 536.637 426.609 536.609 426.672 536.605 cv
426.707 536.609 426.738 536.617 426.77 536.633 cv
426.797 536.652 426.82 536.68 426.84 536.715 cv
426.852 536.754 426.863 536.805 426.875 536.867 cv
426.879 536.934 426.883 537.012 426.887 537.105 cv
426.883 537.176 426.879 537.234 426.879 537.281 cv
426.871 537.328 426.867 537.371 426.859 537.41 cv
426.852 537.449 426.836 537.484 426.82 537.516 cv
426.797 537.547 426.773 537.578 426.75 537.605 cv
426.719 537.637 426.637 537.684 426.496 537.746 cv
426.355 537.812 426.172 537.875 425.949 537.937 cv
425.723 538 425.465 538.055 425.172 538.105 cv
424.879 538.152 424.566 538.176 424.234 538.18 cv
423.656 538.176 423.148 538.098 422.719 537.937 cv
422.281 537.777 421.918 537.539 421.625 537.223 cv
421.324 536.906 421.102 536.512 420.953 536.031 cv
420.805 535.555 420.73 534.996 420.73 534.359 cv
420.73 533.762 420.805 533.223 420.961 532.738 cv
421.113 532.262 421.34 531.852 421.637 531.516 cv
421.93 531.18 422.285 530.922 422.699 530.742 cv
423.113 530.562 423.578 530.473 424.094 530.473 cv
424.645 530.473 425.113 530.562 425.5 530.738 cv
425.887 530.918 426.203 531.156 426.457 531.453 cv
426.703 531.754 426.887 532.105 427.004 532.504 cv
427.117 532.91 427.176 533.34 427.18 533.793 cv
cp
425.887 533.645 mo
425.902 532.969 425.75 532.437 425.434 532.055 cv
425.117 531.672 424.648 531.48 424.031 531.477 cv
423.707 531.48 423.426 531.539 423.188 531.656 cv
422.945 531.777 422.746 531.937 422.586 532.133 cv
422.422 532.332 422.297 532.562 422.211 532.824 cv
422.121 533.086 422.07 533.359 422.063 533.645 cv
cp
f
433.547 535.926 mo
433.543 536.289 433.477 536.609 433.348 536.887 cv
433.215 537.168 433.027 537.402 432.785 537.594 cv
432.539 537.789 432.246 537.934 431.91 538.031 cv
431.57 538.129 431.199 538.176 430.797 538.18 cv
430.543 538.176 430.305 538.156 430.082 538.121 cv
429.855 538.078 429.656 538.031 429.477 537.973 cv
429.297 537.914 429.145 537.852 429.02 537.785 cv
428.895 537.723 428.801 537.664 428.746 537.609 cv
428.688 537.559 428.648 537.488 428.625 537.391 cv
428.598 537.301 428.586 537.172 428.586 537.012 cv
428.586 536.914 428.59 536.832 428.602 536.762 cv
428.609 536.695 428.621 536.641 428.641 536.598 cv
428.652 536.559 428.676 536.527 428.703 536.508 cv
428.73 536.492 428.762 536.484 428.801 536.48 cv
428.855 536.484 428.941 536.52 429.055 536.586 cv
429.164 536.66 429.301 536.738 429.469 536.816 cv
429.629 536.902 429.82 536.977 430.047 537.047 cv
430.266 537.117 430.523 537.152 430.82 537.152 cv
431.035 537.152 431.234 537.129 431.414 537.082 cv
431.59 537.035 431.742 536.969 431.871 536.875 cv
432 536.789 432.102 536.672 432.172 536.527 cv
432.242 536.391 432.277 536.223 432.277 536.027 cv
432.277 535.832 432.227 535.668 432.125 535.531 cv
432.023 535.398 431.887 535.277 431.723 535.172 cv
431.555 535.07 431.371 534.98 431.164 534.895 cv
430.953 534.816 430.738 534.73 430.52 534.641 cv
430.301 534.555 430.086 534.453 429.875 534.34 cv
429.664 534.23 429.473 534.098 429.309 533.934 cv
429.137 533.777 429.004 533.582 428.906 533.355 cv
428.801 533.133 428.75 532.867 428.754 532.555 cv
428.75 532.281 428.805 532.016 428.914 531.762 cv
429.02 531.512 429.18 531.293 429.395 531.102 cv
429.605 530.914 429.871 530.762 430.191 530.645 cv
430.512 530.531 430.883 530.473 431.313 530.473 cv
431.496 530.473 431.684 530.488 431.871 530.52 cv
432.055 530.551 432.223 530.59 432.379 530.637 cv
432.527 530.684 432.656 530.734 432.766 530.789 cv
432.867 530.844 432.949 530.895 433.008 530.934 cv
433.059 530.98 433.094 531.016 433.117 531.043 cv
433.133 531.074 433.148 531.109 433.156 531.145 cv
433.164 531.187 433.172 531.234 433.18 531.289 cv
433.188 531.348 433.191 531.418 433.191 531.5 cv
433.191 531.59 433.188 531.668 433.18 531.73 cv
433.172 531.801 433.156 531.852 433.141 531.891 cv
433.117 531.934 433.098 531.965 433.074 531.98 cv
433.047 532 433.016 532.008 432.988 532.008 cv
432.938 532.008 432.871 531.98 432.785 531.922 cv
432.695 531.867 432.582 531.805 432.441 531.738 cv
432.301 531.676 432.133 531.617 431.945 531.555 cv
431.754 531.5 431.539 531.469 431.297 531.469 cv
431.074 531.469 430.883 531.496 430.719 531.543 cv
430.551 531.598 430.414 531.668 430.309 531.754 cv
430.203 531.848 430.121 531.953 430.07 532.078 cv
430.012 532.203 429.984 532.34 429.988 532.484 cv
429.984 532.687 430.035 532.855 430.141 532.992 cv
430.242 533.133 430.379 533.254 430.547 533.355 cv
430.711 533.461 430.902 533.555 431.117 533.637 cv
431.328 533.723 431.543 533.809 431.766 533.895 cv
431.984 533.984 432.203 534.086 432.422 534.191 cv
432.637 534.301 432.828 534.43 432.996 534.586 cv
433.16 534.742 433.293 534.93 433.395 535.148 cv
433.492 535.367 433.543 535.629 433.547 535.926 cv
cp
f
221.754 14.305 mo
221.75 14.836 221.652 15.301 221.457 15.699 cv
221.258 16.102 220.992 16.437 220.656 16.703 cv
220.316 16.973 219.918 17.172 219.469 17.305 cv
219.016 17.437 218.535 17.504 218.023 17.508 cv
217.672 17.504 217.348 17.477 217.051 17.422 cv
216.75 17.363 216.488 17.297 216.262 17.215 cv
216.031 17.137 215.84 17.051 215.688 16.961 cv
215.535 16.875 215.426 16.797 215.359 16.727 cv
215.289 16.66 215.238 16.562 215.215 16.437 cv
215.184 16.312 215.172 16.129 215.172 15.887 cv
215.172 15.727 215.176 15.594 215.188 15.48 cv
215.195 15.375 215.211 15.285 215.238 15.215 cv
215.258 15.148 215.289 15.102 215.332 15.07 cv
215.367 15.047 215.414 15.031 215.465 15.027 cv
215.535 15.031 215.637 15.074 215.773 15.156 cv
215.902 15.246 216.074 15.34 216.285 15.441 cv
216.492 15.547 216.738 15.645 217.027 15.727 cv
217.313 15.816 217.648 15.859 218.031 15.855 cv
218.281 15.859 218.504 15.828 218.699 15.766 cv
218.895 15.707 219.063 15.621 219.203 15.512 cv
219.34 15.402 219.445 15.27 219.52 15.109 cv
219.59 14.949 219.625 14.77 219.629 14.57 cv
219.625 14.344 219.563 14.148 219.441 13.98 cv
219.313 13.82 219.148 13.676 218.953 13.547 cv
218.75 13.422 218.523 13.301 218.27 13.187 cv
218.016 13.078 217.754 12.961 217.484 12.832 cv
217.211 12.711 216.949 12.566 216.695 12.406 cv
216.441 12.25 216.215 12.062 216.016 11.84 cv
215.813 11.621 215.648 11.359 215.527 11.055 cv
215.402 10.754 215.34 10.395 215.344 9.97302 cv
215.34 9.492 215.43 9.06598 215.609 8.69897 cv
215.785 8.336 216.027 8.03101 216.336 7.78497 cv
216.637 7.547 216.996 7.367 217.41 7.24597 cv
217.824 7.12903 218.262 7.07001 218.723 7.06598 cv
218.961 7.07001 219.199 7.086 219.441 7.12097 cv
219.68 7.15997 219.902 7.211 220.109 7.27002 cv
220.316 7.33197 220.5 7.40198 220.664 7.47699 cv
220.82 7.55902 220.93 7.62097 220.984 7.672 cv
221.035 7.72699 221.07 7.77301 221.09 7.80499 cv
221.105 7.84399 221.121 7.89099 221.137 7.94897 cv
221.148 8.01202 221.156 8.086 221.164 8.17603 cv
221.168 8.27002 221.172 8.383 221.172 8.51599 cv
221.172 8.66803 221.168 8.797 221.16 8.89801 cv
221.152 9.00403 221.137 9.09003 221.121 9.15198 cv
221.098 9.22302 221.074 9.27002 221.043 9.30103 cv
221.008 9.33197 220.961 9.34802 220.906 9.34802 cv
220.848 9.34802 220.758 9.31201 220.633 9.23798 cv
220.508 9.16803 220.352 9.09003 220.172 9 cv
219.988 8.91803 219.781 8.84003 219.543 8.77002 cv
219.301 8.703 219.035 8.66803 218.754 8.664 cv
218.527 8.66803 218.336 8.69501 218.172 8.74597 cv
218.004 8.80103 217.863 8.875 217.754 8.96899 cv
217.641 9.06598 217.559 9.18402 217.504 9.31598 cv
217.449 9.45697 217.422 9.59802 217.422 9.74597 cv
217.422 9.97302 217.48 10.168 217.605 10.328 cv
217.723 10.492 217.887 10.637 218.098 10.762 cv
218.301 10.891 218.535 11.012 218.793 11.121 cv
219.051 11.238 219.316 11.355 219.59 11.477 cv
219.859 11.605 220.121 11.746 220.383 11.902 cv
220.641 12.059 220.875 12.25 221.078 12.469 cv
221.281 12.695 221.441 12.953 221.566 13.25 cv
221.688 13.547 221.75 13.898 221.754 14.305 cv
cp
f
228.473 15.957 mo
228.469 16.094 228.465 16.207 228.461 16.297 cv
228.449 16.391 228.441 16.469 228.43 16.527 cv
228.414 16.59 228.398 16.641 228.383 16.676 cv
228.363 16.719 228.32 16.766 228.262 16.824 cv
228.195 16.887 228.09 16.961 227.941 17.043 cv
227.789 17.133 227.617 17.211 227.426 17.273 cv
227.234 17.344 227.027 17.395 226.801 17.437 cv
226.574 17.477 226.34 17.496 226.105 17.5 cv
225.566 17.496 225.094 17.418 224.68 17.25 cv
224.266 17.086 223.918 16.84 223.641 16.516 cv
223.355 16.191 223.145 15.797 223.004 15.328 cv
222.863 14.863 222.793 14.324 222.793 13.719 cv
222.793 13.023 222.879 12.426 223.051 11.918 cv
223.223 11.414 223.465 10.992 223.781 10.66 cv
224.09 10.328 224.457 10.082 224.887 9.91803 cv
225.309 9.758 225.777 9.67603 226.289 9.67603 cv
226.496 9.67603 226.699 9.69501 226.902 9.72998 cv
227.098 9.77002 227.285 9.82001 227.461 9.87903 cv
227.633 9.94501 227.789 10.016 227.93 10.09 cv
228.066 10.172 228.164 10.238 228.223 10.293 cv
228.277 10.352 228.316 10.398 228.344 10.434 cv
228.363 10.477 228.383 10.527 228.398 10.586 cv
228.41 10.652 228.422 10.73 228.43 10.816 cv
228.438 10.91 228.441 11.02 228.441 11.148 cv
228.441 11.453 228.414 11.664 228.363 11.785 cv
228.309 11.906 228.242 11.969 228.16 11.965 cv
228.07 11.969 227.977 11.934 227.879 11.859 cv
227.777 11.789 227.66 11.707 227.527 11.617 cv
227.395 11.531 227.234 11.449 227.047 11.375 cv
226.859 11.305 226.633 11.27 226.375 11.266 cv
225.863 11.27 225.477 11.465 225.207 11.855 cv
224.934 12.246 224.797 12.82 224.801 13.578 cv
224.797 13.953 224.832 14.285 224.902 14.57 cv
224.969 14.855 225.066 15.094 225.203 15.285 cv
225.332 15.48 225.5 15.625 225.703 15.719 cv
225.902 15.816 226.133 15.863 226.398 15.863 cv
226.664 15.863 226.898 15.824 227.098 15.742 cv
227.289 15.664 227.457 15.574 227.605 15.473 cv
227.746 15.375 227.871 15.285 227.973 15.203 cv
228.07 15.125 228.152 15.086 228.223 15.082 cv
228.266 15.086 228.305 15.098 228.34 15.121 cv
228.367 15.148 228.391 15.195 228.414 15.266 cv
228.43 15.336 228.445 15.426 228.457 15.535 cv
228.465 15.645 228.469 15.785 228.473 15.957 cv
cp
f
235.742 17.086 mo
235.738 17.164 235.711 17.219 235.664 17.258 cv
235.609 17.301 235.527 17.328 235.418 17.348 cv
235.301 17.363 235.137 17.375 234.922 17.375 cv
234.684 17.375 234.512 17.363 234.41 17.348 cv
234.301 17.328 234.227 17.301 234.188 17.258 cv
234.141 17.219 234.121 17.164 234.121 17.086 cv
234.121 16.535 li
233.832 16.844 233.504 17.082 233.141 17.25 cv
232.773 17.422 232.367 17.504 231.922 17.508 cv
231.551 17.504 231.211 17.457 230.902 17.363 cv
230.594 17.27 230.328 17.129 230.102 16.934 cv
229.875 16.746 229.699 16.512 229.574 16.23 cv
229.449 15.953 229.387 15.625 229.391 15.246 cv
229.387 14.848 229.465 14.496 229.625 14.191 cv
229.781 13.895 230.02 13.648 230.336 13.453 cv
230.648 13.262 231.039 13.117 231.508 13.02 cv
231.977 12.93 232.52 12.883 233.137 12.879 cv
233.816 12.879 li
233.816 12.457 li
233.816 12.242 233.793 12.051 233.75 11.887 cv
233.703 11.727 233.629 11.59 233.531 11.477 cv
233.426 11.371 233.293 11.289 233.125 11.234 cv
232.953 11.184 232.742 11.16 232.5 11.156 cv
232.168 11.16 231.875 11.195 231.621 11.266 cv
231.359 11.34 231.133 11.422 230.938 11.508 cv
230.738 11.602 230.574 11.68 230.445 11.75 cv
230.309 11.824 230.199 11.863 230.121 11.859 cv
230.059 11.863 230.008 11.844 229.969 11.805 cv
229.922 11.77 229.887 11.719 229.859 11.648 cv
229.828 11.586 229.805 11.5 229.793 11.398 cv
229.773 11.301 229.766 11.191 229.77 11.07 cv
229.766 10.91 229.781 10.785 229.809 10.687 cv
229.832 10.598 229.879 10.512 229.957 10.434 cv
230.027 10.359 230.156 10.277 230.34 10.187 cv
230.52 10.098 230.73 10.012 230.977 9.93402 cv
231.219 9.85498 231.488 9.79303 231.777 9.742 cv
232.066 9.69501 232.363 9.672 232.672 9.66803 cv
233.215 9.672 233.68 9.72302 234.066 9.828 cv
234.453 9.93701 234.773 10.102 235.023 10.32 cv
235.273 10.539 235.453 10.824 235.57 11.172 cv
235.68 11.523 235.738 11.937 235.742 12.41 cv
cp
233.816 14.109 mo
233.066 14.109 li
232.75 14.113 232.48 14.137 232.258 14.18 cv
232.031 14.23 231.848 14.301 231.711 14.391 cv
231.566 14.488 231.465 14.602 231.402 14.73 cv
231.336 14.867 231.301 15.016 231.305 15.184 cv
231.301 15.477 231.395 15.707 231.582 15.871 cv
231.766 16.039 232.023 16.121 232.352 16.121 cv
232.625 16.121 232.875 16.051 233.109 15.91 cv
233.336 15.77 233.574 15.566 233.816 15.293 cv
cp
f
239.668 17.062 mo
239.664 17.117 239.648 17.16 239.621 17.199 cv
239.586 17.238 239.531 17.273 239.461 17.297 cv
239.383 17.324 239.285 17.34 239.16 17.355 cv
239.035 17.367 238.875 17.375 238.688 17.375 cv
238.492 17.375 238.336 17.367 238.211 17.355 cv
238.086 17.34 237.984 17.324 237.91 17.297 cv
237.832 17.273 237.777 17.238 237.75 17.199 cv
237.715 17.16 237.699 17.117 237.703 17.062 cv
237.703 6.81598 li
237.699 6.76599 237.715 6.71899 237.75 6.67603 cv
237.777 6.63702 237.832 6.60199 237.91 6.57001 cv
237.984 6.54303 238.086 6.52301 238.211 6.50403 cv
238.336 6.492 238.492 6.48401 238.688 6.47998 cv
238.875 6.48401 239.035 6.492 239.16 6.50403 cv
239.285 6.52301 239.383 6.54303 239.461 6.57001 cv
239.531 6.60199 239.586 6.63702 239.621 6.67603 cv
239.648 6.71899 239.664 6.76599 239.668 6.81598 cv
cp
f
243.641 17.062 mo
243.637 17.117 243.621 17.16 243.594 17.199 cv
243.559 17.238 243.504 17.273 243.434 17.297 cv
243.355 17.324 243.258 17.34 243.133 17.355 cv
243.008 17.367 242.848 17.375 242.66 17.375 cv
242.465 17.375 242.309 17.367 242.184 17.355 cv
242.059 17.34 241.957 17.324 241.883 17.297 cv
241.805 17.273 241.75 17.238 241.723 17.199 cv
241.688 17.16 241.672 17.117 241.676 17.062 cv
241.676 10.129 li
241.672 10.078 241.688 10.031 241.723 9.992 cv
241.75 9.953 241.805 9.922 241.883 9.89099 cv
241.957 9.867 242.059 9.84399 242.184 9.82397 cv
242.309 9.81201 242.465 9.80499 242.66 9.80103 cv
242.848 9.80499 243.008 9.81201 243.133 9.82397 cv
243.258 9.84399 243.355 9.867 243.434 9.89099 cv
243.504 9.922 243.559 9.953 243.594 9.992 cv
243.621 10.031 243.637 10.078 243.641 10.129 cv
cp
243.789 7.758 mo
243.789 8.15601 243.707 8.42999 243.547 8.578 cv
243.383 8.72998 243.086 8.80499 242.652 8.80103 cv
242.207 8.80499 241.906 8.72998 241.758 8.586 cv
241.602 8.44098 241.527 8.17999 241.527 7.797 cv
241.527 7.40198 241.605 7.12903 241.766 6.97699 cv
241.922 6.82397 242.223 6.74597 242.668 6.74597 cv
243.102 6.74597 243.398 6.82001 243.555 6.96899 cv
243.711 7.117 243.789 7.383 243.789 7.758 cv
cp
f
252.242 17.062 mo
252.238 17.117 252.223 17.16 252.195 17.199 cv
252.16 17.238 252.109 17.273 252.039 17.297 cv
251.965 17.324 251.863 17.34 251.738 17.355 cv
251.609 17.367 251.453 17.375 251.27 17.375 cv
251.074 17.375 250.914 17.367 250.789 17.355 cv
250.66 17.34 250.559 17.324 250.488 17.297 cv
250.41 17.273 250.359 17.238 250.332 17.199 cv
250.297 17.16 250.281 17.117 250.285 17.062 cv
250.285 13.098 li
250.281 12.762 250.258 12.496 250.211 12.301 cv
250.16 12.109 250.086 11.945 249.996 11.809 cv
249.902 11.672 249.785 11.566 249.637 11.488 cv
249.488 11.414 249.313 11.375 249.117 11.375 cv
248.863 11.375 248.613 11.469 248.359 11.648 cv
248.105 11.832 247.84 12.094 247.566 12.441 cv
247.566 17.062 li
247.563 17.117 247.547 17.16 247.52 17.199 cv
247.484 17.238 247.43 17.273 247.359 17.297 cv
247.281 17.324 247.184 17.34 247.059 17.355 cv
246.934 17.367 246.773 17.375 246.586 17.375 cv
246.391 17.375 246.234 17.367 246.109 17.355 cv
245.984 17.34 245.883 17.324 245.809 17.297 cv
245.73 17.273 245.676 17.238 245.648 17.199 cv
245.613 17.16 245.598 17.117 245.602 17.062 cv
245.602 10.113 li
245.598 10.066 245.613 10.02 245.641 9.97699 cv
245.664 9.94098 245.711 9.90997 245.781 9.87903 cv
245.848 9.85498 245.934 9.836 246.043 9.82001 cv
246.148 9.81201 246.281 9.80499 246.445 9.80103 cv
246.609 9.80499 246.746 9.81201 246.855 9.82001 cv
246.961 9.836 247.047 9.85498 247.109 9.87903 cv
247.168 9.90997 247.211 9.94098 247.238 9.97699 cv
247.262 10.02 247.273 10.066 247.277 10.113 cv
247.277 10.914 li
247.66 10.504 248.051 10.191 248.449 9.97998 cv
248.844 9.77301 249.262 9.672 249.695 9.66803 cv
250.164 9.672 250.563 9.75 250.891 9.90198 cv
251.215 10.062 251.477 10.273 251.676 10.539 cv
251.875 10.809 252.02 11.121 252.109 11.477 cv
252.195 11.836 252.238 12.266 252.242 12.77 cv
cp
f
260.438 10.594 mo
260.434 10.848 260.406 11.031 260.352 11.148 cv
260.293 11.27 260.223 11.328 260.145 11.328 cv
259.324 11.328 li
259.438 11.453 259.52 11.598 259.57 11.754 cv
259.617 11.914 259.641 12.078 259.645 12.246 cv
259.641 12.656 259.574 13.016 259.441 13.328 cv
259.305 13.645 259.109 13.91 258.859 14.121 cv
258.605 14.34 258.305 14.504 257.949 14.613 cv
257.59 14.73 257.191 14.785 256.762 14.781 cv
256.535 14.785 256.324 14.758 256.121 14.699 cv
255.918 14.648 255.762 14.586 255.652 14.508 cv
255.59 14.578 255.531 14.656 255.484 14.75 cv
255.434 14.844 255.41 14.949 255.414 15.059 cv
255.41 15.215 255.477 15.336 255.609 15.43 cv
255.738 15.527 255.926 15.582 256.168 15.59 cv
257.859 15.652 li
258.254 15.668 258.605 15.727 258.914 15.82 cv
259.223 15.922 259.484 16.055 259.695 16.227 cv
259.906 16.402 260.066 16.613 260.176 16.855 cv
260.285 17.102 260.34 17.375 260.344 17.687 cv
260.34 18.023 260.266 18.348 260.117 18.656 cv
259.969 18.957 259.742 19.219 259.441 19.445 cv
259.137 19.664 258.758 19.844 258.305 19.977 cv
257.848 20.105 257.316 20.168 256.715 20.172 cv
256.117 20.168 255.613 20.121 255.195 20.031 cv
254.777 19.934 254.434 19.805 254.168 19.641 cv
253.898 19.473 253.703 19.273 253.586 19.047 cv
253.461 18.812 253.402 18.559 253.402 18.285 cv
253.402 18.113 253.422 17.953 253.469 17.797 cv
253.508 17.641 253.574 17.488 253.664 17.348 cv
253.746 17.203 253.852 17.07 253.977 16.937 cv
254.102 16.809 254.242 16.684 254.406 16.562 cv
254.18 16.449 254.008 16.289 253.887 16.078 cv
253.766 15.875 253.707 15.648 253.707 15.402 cv
253.707 15.102 253.773 14.824 253.914 14.566 cv
254.051 14.316 254.234 14.086 254.461 13.883 cv
254.277 13.703 254.133 13.488 254.023 13.23 cv
253.914 12.98 253.859 12.66 253.863 12.277 cv
253.859 11.875 253.93 11.516 254.074 11.191 cv
254.215 10.875 254.414 10.605 254.672 10.383 cv
254.926 10.164 255.23 9.992 255.582 9.875 cv
255.934 9.758 256.324 9.69897 256.754 9.69897 cv
256.973 9.69897 257.18 9.71503 257.379 9.73798 cv
257.578 9.77002 257.766 9.80499 257.938 9.84802 cv
260.145 9.84802 li
260.227 9.85199 260.297 9.90997 260.355 10.02 cv
260.406 10.137 260.434 10.328 260.438 10.594 cv
cp
257.922 12.238 mo
257.918 11.867 257.816 11.578 257.609 11.367 cv
257.398 11.164 257.105 11.059 256.73 11.055 cv
256.535 11.059 256.363 11.09 256.223 11.152 cv
256.074 11.219 255.953 11.309 255.859 11.418 cv
255.758 11.531 255.688 11.66 255.645 11.809 cv
255.594 11.957 255.57 12.113 255.574 12.27 cv
255.57 12.629 255.676 12.906 255.887 13.109 cv
256.094 13.316 256.383 13.422 256.754 13.418 cv
256.949 13.422 257.117 13.391 257.266 13.324 cv
257.406 13.266 257.527 13.18 257.629 13.066 cv
257.723 12.961 257.797 12.832 257.848 12.687 cv
257.895 12.547 257.918 12.398 257.922 12.238 cv
cp
258.383 17.789 mo
258.383 17.551 258.289 17.375 258.102 17.25 cv
257.914 17.129 257.656 17.059 257.328 17.047 cv
255.934 17.008 li
255.797 17.109 255.688 17.203 255.609 17.293 cv
255.527 17.383 255.465 17.469 255.418 17.555 cv
255.367 17.637 255.332 17.719 255.32 17.797 cv
255.301 17.875 255.293 17.953 255.297 18.039 cv
255.293 18.293 255.426 18.492 255.688 18.629 cv
255.949 18.762 256.32 18.828 256.801 18.832 cv
257.094 18.828 257.34 18.797 257.547 18.742 cv
257.746 18.68 257.91 18.602 258.039 18.504 cv
258.16 18.402 258.25 18.293 258.305 18.172 cv
258.355 18.051 258.383 17.922 258.383 17.789 cv
cp
f
272.375 13.516 mo
272.371 14.113 272.293 14.656 272.141 15.141 cv
271.98 15.633 271.746 16.051 271.43 16.402 cv
271.113 16.754 270.715 17.027 270.238 17.219 cv
269.758 17.41 269.199 17.504 268.563 17.508 cv
267.941 17.504 267.402 17.422 266.949 17.25 cv
266.488 17.082 266.109 16.832 265.813 16.504 cv
265.508 16.18 265.285 15.777 265.141 15.297 cv
264.996 14.82 264.926 14.273 264.926 13.656 cv
264.926 13.066 265.004 12.527 265.16 12.035 cv
265.316 11.547 265.555 11.125 265.875 10.773 cv
266.191 10.426 266.586 10.152 267.063 9.95697 cv
267.535 9.76599 268.094 9.672 268.734 9.66803 cv
269.359 9.672 269.898 9.75403 270.355 9.922 cv
270.813 10.094 271.191 10.344 271.488 10.668 cv
271.785 10.996 272.008 11.398 272.156 11.875 cv
272.301 12.355 272.371 12.902 272.375 13.516 cv
cp
270.355 13.594 mo
270.352 13.258 270.324 12.941 270.273 12.648 cv
270.215 12.363 270.121 12.113 269.996 11.898 cv
269.863 11.687 269.691 11.52 269.48 11.398 cv
269.262 11.281 268.992 11.223 268.664 11.219 cv
268.375 11.223 268.121 11.277 267.902 11.379 cv
267.684 11.488 267.504 11.645 267.363 11.848 cv
267.223 12.055 267.117 12.301 267.047 12.586 cv
266.977 12.879 266.941 13.207 266.941 13.57 cv
266.941 13.918 266.969 14.234 267.027 14.52 cv
267.082 14.812 267.176 15.062 267.305 15.273 cv
267.43 15.488 267.602 15.652 267.824 15.766 cv
268.039 15.887 268.309 15.945 268.633 15.941 cv
268.926 15.945 269.184 15.891 269.406 15.781 cv
269.621 15.676 269.801 15.523 269.941 15.316 cv
270.082 15.117 270.184 14.871 270.254 14.582 cv
270.316 14.297 270.352 13.969 270.355 13.594 cv
cp
f
278.125 7.461 mo
278.121 7.61298 278.117 7.73401 278.109 7.82397 cv
278.098 7.91803 278.082 7.98798 278.063 8.03497 cv
278.039 8.086 278.016 8.12097 277.992 8.13702 cv
277.965 8.15601 277.938 8.164 277.906 8.164 cv
277.867 8.164 277.824 8.15601 277.785 8.13702 cv
277.738 8.12097 277.684 8.10199 277.621 8.078 cv
277.551 8.05902 277.477 8.039 277.391 8.02002 cv
277.301 8.00403 277.195 7.99597 277.078 7.992 cv
276.934 7.99597 276.813 8.01599 276.715 8.05902 cv
276.613 8.10498 276.531 8.17603 276.465 8.27002 cv
276.395 8.367 276.344 8.492 276.316 8.64502 cv
276.281 8.797 276.266 8.98401 276.27 9.20697 cv
276.27 9.84802 li
277.539 9.84802 li
277.582 9.85199 277.625 9.86298 277.668 9.88702 cv
277.703 9.914 277.738 9.95697 277.766 10.016 cv
277.789 10.078 277.809 10.16 277.824 10.262 cv
277.836 10.363 277.84 10.492 277.844 10.641 cv
277.84 10.93 277.816 11.133 277.766 11.254 cv
277.711 11.379 277.633 11.441 277.539 11.437 cv
276.27 11.437 li
276.27 17.062 li
276.266 17.117 276.25 17.16 276.223 17.199 cv
276.188 17.238 276.137 17.273 276.066 17.297 cv
275.992 17.324 275.891 17.34 275.762 17.355 cv
275.629 17.367 275.469 17.375 275.285 17.375 cv
275.098 17.375 274.941 17.367 274.816 17.355 cv
274.688 17.34 274.586 17.324 274.512 17.297 cv
274.434 17.273 274.383 17.238 274.355 17.199 cv
274.324 17.16 274.309 17.117 274.313 17.062 cv
274.313 11.437 li
273.441 11.437 li
273.34 11.441 273.266 11.379 273.219 11.254 cv
273.168 11.133 273.141 10.93 273.145 10.641 cv
273.141 10.492 273.148 10.363 273.164 10.262 cv
273.176 10.16 273.195 10.078 273.219 10.016 cv
273.242 9.95697 273.273 9.914 273.313 9.88702 cv
273.352 9.86298 273.395 9.85199 273.449 9.84802 cv
274.313 9.84802 li
274.313 9.26202 li
274.309 8.79303 274.355 8.37903 274.453 8.02002 cv
274.543 7.664 274.691 7.367 274.895 7.133 cv
275.094 6.89801 275.348 6.72302 275.656 6.59802 cv
275.965 6.47998 276.328 6.41803 276.754 6.41803 cv
276.949 6.41803 277.141 6.43701 277.328 6.46899 cv
277.508 6.508 277.652 6.54303 277.758 6.578 cv
277.859 6.62097 277.93 6.65601 277.969 6.68701 cv
278.004 6.72302 278.035 6.77301 278.059 6.836 cv
278.082 6.90198 278.098 6.98401 278.109 7.086 cv
278.117 7.18701 278.121 7.31201 278.125 7.461 cv
cp
f
288.359 8.086 mo
288.355 8.24597 288.352 8.375 288.34 8.47998 cv
288.324 8.59003 288.301 8.67603 288.277 8.73401 cv
288.246 8.797 288.215 8.84399 288.18 8.87097 cv
288.141 8.90601 288.098 8.922 288.055 8.91803 cv
284.758 8.91803 li
284.758 11.633 li
287.852 11.633 li
287.895 11.633 287.938 11.648 287.977 11.672 cv
288.012 11.703 288.043 11.746 288.074 11.805 cv
288.102 11.867 288.121 11.949 288.137 12.051 cv
288.145 12.156 288.152 12.285 288.156 12.441 cv
288.152 12.598 288.145 12.73 288.137 12.832 cv
288.121 12.941 288.102 13.027 288.074 13.09 cv
288.043 13.16 288.012 13.207 287.977 13.234 cv
287.938 13.266 287.895 13.281 287.852 13.277 cv
284.758 13.277 li
284.758 17.031 li
284.754 17.09 284.738 17.141 284.711 17.18 cv
284.676 17.227 284.621 17.262 284.543 17.285 cv
284.461 17.316 284.355 17.336 284.227 17.352 cv
284.094 17.367 283.926 17.375 283.73 17.375 cv
283.527 17.375 283.363 17.367 283.234 17.352 cv
283.098 17.336 282.992 17.316 282.918 17.285 cv
282.836 17.262 282.781 17.227 282.75 17.18 cv
282.715 17.141 282.695 17.09 282.699 17.031 cv
282.699 7.89099 li
282.695 7.664 282.754 7.5 282.875 7.39502 cv
282.988 7.297 283.133 7.24597 283.309 7.242 cv
288.055 7.242 li
288.098 7.24597 288.141 7.258 288.18 7.28497 cv
288.215 7.31598 288.246 7.36298 288.277 7.42603 cv
288.301 7.492 288.324 7.58197 288.34 7.68701 cv
288.352 7.80103 288.355 7.93402 288.359 8.086 cv
cp
f
291.871 17.062 mo
291.867 17.117 291.852 17.16 291.824 17.199 cv
291.789 17.238 291.734 17.273 291.664 17.297 cv
291.586 17.324 291.488 17.34 291.363 17.355 cv
291.238 17.367 291.078 17.375 290.891 17.375 cv
290.695 17.375 290.539 17.367 290.414 17.355 cv
290.289 17.34 290.188 17.324 290.113 17.297 cv
290.035 17.273 289.98 17.238 289.953 17.199 cv
289.918 17.16 289.902 17.117 289.906 17.062 cv
289.906 10.129 li
289.902 10.078 289.918 10.031 289.953 9.992 cv
289.98 9.953 290.035 9.922 290.113 9.89099 cv
290.188 9.867 290.289 9.84399 290.414 9.82397 cv
290.539 9.81201 290.695 9.80499 290.891 9.80103 cv
291.078 9.80499 291.238 9.81201 291.363 9.82397 cv
291.488 9.84399 291.586 9.867 291.664 9.89099 cv
291.734 9.922 291.789 9.953 291.824 9.992 cv
291.852 10.031 291.867 10.078 291.871 10.129 cv
cp
292.02 7.758 mo
292.02 8.15601 291.938 8.42999 291.777 8.578 cv
291.613 8.72998 291.316 8.80499 290.883 8.80103 cv
290.438 8.80499 290.137 8.72998 289.988 8.586 cv
289.832 8.44098 289.758 8.17999 289.758 7.797 cv
289.758 7.40198 289.836 7.12903 289.996 6.97699 cv
290.152 6.82397 290.453 6.74597 290.898 6.74597 cv
291.332 6.74597 291.629 6.82001 291.785 6.96899 cv
291.941 7.117 292.02 7.383 292.02 7.758 cv
cp
f
295.797 17.062 mo
295.793 17.117 295.777 17.16 295.75 17.199 cv
295.715 17.238 295.66 17.273 295.59 17.297 cv
295.512 17.324 295.414 17.34 295.289 17.355 cv
295.164 17.367 295.004 17.375 294.816 17.375 cv
294.621 17.375 294.465 17.367 294.34 17.355 cv
294.215 17.34 294.113 17.324 294.039 17.297 cv
293.961 17.273 293.906 17.238 293.879 17.199 cv
293.844 17.16 293.828 17.117 293.832 17.062 cv
293.832 6.81598 li
293.828 6.76599 293.844 6.71899 293.879 6.67603 cv
293.906 6.63702 293.961 6.60199 294.039 6.57001 cv
294.113 6.54303 294.215 6.52301 294.34 6.50403 cv
294.465 6.492 294.621 6.48401 294.816 6.47998 cv
295.004 6.48401 295.164 6.492 295.289 6.50403 cv
295.414 6.52301 295.512 6.54303 295.59 6.57001 cv
295.66 6.60199 295.715 6.63702 295.75 6.67603 cv
295.777 6.71899 295.793 6.76599 295.797 6.81598 cv
cp
f
301.941 16.379 mo
301.941 16.605 301.926 16.781 301.898 16.902 cv
301.867 17.027 301.828 17.113 301.785 17.16 cv
301.734 17.211 301.668 17.254 301.578 17.293 cv
301.484 17.332 301.375 17.363 301.258 17.395 cv
301.133 17.418 301 17.441 300.859 17.461 cv
300.715 17.473 300.574 17.48 300.43 17.484 cv
300.039 17.48 299.699 17.43 299.414 17.336 cv
299.129 17.234 298.895 17.086 298.707 16.879 cv
298.52 16.676 298.379 16.418 298.293 16.105 cv
298.199 15.797 298.156 15.426 298.16 14.996 cv
298.16 11.437 li
297.328 11.437 li
297.227 11.441 297.152 11.379 297.102 11.254 cv
297.047 11.133 297.02 10.93 297.023 10.641 cv
297.02 10.492 297.027 10.363 297.043 10.262 cv
297.055 10.16 297.074 10.078 297.102 10.016 cv
297.125 9.95697 297.156 9.914 297.199 9.88702 cv
297.234 9.86298 297.281 9.85199 297.336 9.84802 cv
298.16 9.84802 li
298.16 8.297 li
298.156 8.25 298.172 8.203 298.203 8.15601 cv
298.23 8.117 298.281 8.08197 298.359 8.05103 cv
298.434 8.02698 298.535 8.00403 298.664 7.98798 cv
298.789 7.97699 298.945 7.97302 299.137 7.96899 cv
299.324 7.97302 299.484 7.97699 299.613 7.98798 cv
299.738 8.00403 299.84 8.02698 299.914 8.05103 cv
299.984 8.08197 300.035 8.117 300.07 8.15601 cv
300.098 8.203 300.113 8.25 300.117 8.297 cv
300.117 9.84802 li
301.629 9.84802 li
301.68 9.85199 301.727 9.86298 301.766 9.88702 cv
301.805 9.914 301.836 9.95697 301.863 10.016 cv
301.887 10.078 301.906 10.16 301.922 10.262 cv
301.934 10.363 301.941 10.492 301.941 10.641 cv
301.941 10.93 301.914 11.133 301.863 11.254 cv
301.809 11.379 301.734 11.441 301.637 11.437 cv
300.117 11.437 li
300.117 14.703 li
300.113 15.082 300.172 15.367 300.297 15.555 cv
300.414 15.746 300.629 15.84 300.934 15.84 cv
301.035 15.84 301.129 15.832 301.215 15.812 cv
301.297 15.797 301.371 15.777 301.438 15.75 cv
301.5 15.73 301.555 15.707 301.602 15.687 cv
301.645 15.672 301.684 15.664 301.723 15.66 cv
301.75 15.664 301.781 15.672 301.813 15.687 cv
301.84 15.707 301.859 15.746 301.879 15.797 cv
301.891 15.855 301.906 15.93 301.922 16.02 cv
301.934 16.117 301.941 16.234 301.941 16.379 cv
cp
f
309.527 13.387 mo
309.523 13.625 309.473 13.801 309.367 13.914 cv
309.258 14.031 309.109 14.09 308.93 14.086 cv
304.695 14.086 li
304.691 14.387 304.727 14.656 304.801 14.895 cv
304.867 15.137 304.98 15.34 305.137 15.508 cv
305.289 15.68 305.484 15.809 305.727 15.895 cv
305.965 15.984 306.254 16.027 306.598 16.027 cv
306.938 16.027 307.238 16.004 307.5 15.953 cv
307.758 15.906 307.984 15.852 308.176 15.789 cv
308.363 15.73 308.52 15.676 308.648 15.625 cv
308.77 15.578 308.871 15.555 308.953 15.551 cv
308.996 15.555 309.035 15.562 309.07 15.578 cv
309.098 15.598 309.125 15.629 309.145 15.676 cv
309.164 15.723 309.176 15.789 309.188 15.875 cv
309.191 15.961 309.195 16.07 309.199 16.199 cv
309.195 16.316 309.195 16.414 309.191 16.492 cv
309.184 16.574 309.176 16.641 309.168 16.695 cv
309.156 16.754 309.141 16.805 309.121 16.84 cv
309.102 16.883 309.074 16.918 309.043 16.953 cv
309.008 16.992 308.914 17.043 308.766 17.102 cv
308.609 17.168 308.418 17.23 308.188 17.285 cv
307.949 17.348 307.68 17.395 307.383 17.441 cv
307.078 17.48 306.758 17.504 306.418 17.508 cv
305.797 17.504 305.254 17.43 304.793 17.273 cv
304.324 17.121 303.938 16.883 303.629 16.566 cv
303.313 16.25 303.078 15.852 302.93 15.367 cv
302.773 14.887 302.699 14.32 302.703 13.664 cv
302.699 13.051 302.777 12.492 302.941 11.996 cv
303.098 11.5 303.332 11.082 303.645 10.734 cv
303.949 10.391 304.324 10.125 304.762 9.94098 cv
305.199 9.76202 305.691 9.672 306.246 9.66803 cv
306.824 9.672 307.324 9.758 307.738 9.92603 cv
308.152 10.102 308.488 10.34 308.754 10.641 cv
309.016 10.945 309.211 11.305 309.34 11.719 cv
309.461 12.137 309.523 12.586 309.527 13.074 cv
cp
307.625 12.824 mo
307.637 12.273 307.527 11.84 307.293 11.527 cv
307.059 11.215 306.691 11.059 306.199 11.055 cv
305.949 11.059 305.734 11.105 305.551 11.195 cv
305.363 11.293 305.211 11.418 305.09 11.574 cv
304.965 11.734 304.871 11.922 304.809 12.137 cv
304.742 12.352 304.703 12.582 304.695 12.824 cv
cp
f
315.602 10.758 mo
315.602 10.949 315.594 11.102 315.586 11.219 cv
315.57 11.34 315.555 11.434 315.539 11.5 cv
315.516 11.57 315.488 11.617 315.457 11.641 cv
315.418 11.668 315.375 11.68 315.328 11.68 cv
315.281 11.68 315.234 11.672 315.188 11.652 cv
315.133 11.637 315.074 11.617 315.012 11.594 cv
314.941 11.574 314.871 11.555 314.797 11.535 cv
314.715 11.52 314.629 11.512 314.539 11.508 cv
314.426 11.512 314.316 11.531 314.211 11.574 cv
314.102 11.621 313.988 11.691 313.875 11.781 cv
313.754 11.875 313.633 12 313.508 12.152 cv
313.379 12.312 313.242 12.504 313.098 12.73 cv
313.098 17.062 li
313.094 17.117 313.078 17.16 313.051 17.199 cv
313.016 17.238 312.961 17.273 312.891 17.297 cv
312.813 17.324 312.715 17.34 312.59 17.355 cv
312.465 17.367 312.305 17.375 312.117 17.375 cv
311.922 17.375 311.766 17.367 311.641 17.355 cv
311.516 17.34 311.414 17.324 311.34 17.297 cv
311.262 17.273 311.207 17.238 311.18 17.199 cv
311.145 17.16 311.129 17.117 311.133 17.062 cv
311.133 10.113 li
311.129 10.066 311.145 10.02 311.172 9.97699 cv
311.195 9.94098 311.242 9.90997 311.313 9.87903 cv
311.379 9.85498 311.465 9.836 311.574 9.82001 cv
311.68 9.81201 311.813 9.80499 311.977 9.80103 cv
312.141 9.80499 312.277 9.81201 312.387 9.82001 cv
312.492 9.836 312.578 9.85498 312.641 9.87903 cv
312.699 9.90997 312.742 9.94098 312.77 9.97699 cv
312.793 10.02 312.805 10.066 312.809 10.113 cv
312.809 10.977 li
312.988 10.719 313.16 10.508 313.324 10.336 cv
313.48 10.172 313.637 10.035 313.785 9.93402 cv
313.93 9.836 314.074 9.77002 314.219 9.72699 cv
314.363 9.69098 314.508 9.672 314.656 9.66803 cv
314.723 9.672 314.797 9.67603 314.875 9.67999 cv
314.953 9.69098 315.031 9.703 315.117 9.71899 cv
315.195 9.73798 315.27 9.758 315.336 9.78101 cv
315.395 9.80499 315.441 9.83197 315.473 9.85498 cv
315.5 9.88702 315.52 9.914 315.535 9.94098 cv
315.547 9.97699 315.559 10.02 315.57 10.07 cv
315.578 10.129 315.586 10.211 315.594 10.316 cv
315.598 10.426 315.602 10.574 315.602 10.758 cv
cp
f
318.766 17.062 mo
318.762 17.117 318.746 17.16 318.719 17.199 cv
318.684 17.238 318.629 17.273 318.559 17.297 cv
318.48 17.324 318.383 17.34 318.258 17.355 cv
318.133 17.367 317.973 17.375 317.785 17.375 cv
317.59 17.375 317.434 17.367 317.309 17.355 cv
317.184 17.34 317.082 17.324 317.008 17.297 cv
316.93 17.273 316.875 17.238 316.848 17.199 cv
316.813 17.16 316.797 17.117 316.801 17.062 cv
316.801 10.129 li
316.797 10.078 316.813 10.031 316.848 9.992 cv
316.875 9.953 316.93 9.922 317.008 9.89099 cv
317.082 9.867 317.184 9.84399 317.309 9.82397 cv
317.434 9.81201 317.59 9.80499 317.785 9.80103 cv
317.973 9.80499 318.133 9.81201 318.258 9.82397 cv
318.383 9.84399 318.48 9.867 318.559 9.89099 cv
318.629 9.922 318.684 9.953 318.719 9.992 cv
318.746 10.031 318.762 10.078 318.766 10.129 cv
cp
318.914 7.758 mo
318.914 8.15601 318.832 8.42999 318.672 8.578 cv
318.508 8.72998 318.211 8.80499 317.777 8.80103 cv
317.332 8.80499 317.031 8.72998 316.883 8.586 cv
316.727 8.44098 316.652 8.17999 316.652 7.797 cv
316.652 7.40198 316.73 7.12903 316.891 6.97699 cv
317.047 6.82397 317.348 6.74597 317.793 6.74597 cv
318.227 6.74597 318.523 6.82001 318.68 6.96899 cv
318.836 7.117 318.914 7.383 318.914 7.758 cv
cp
f
327.367 17.062 mo
327.363 17.117 327.348 17.16 327.32 17.199 cv
327.285 17.238 327.234 17.273 327.164 17.297 cv
327.09 17.324 326.988 17.34 326.863 17.355 cv
326.734 17.367 326.578 17.375 326.395 17.375 cv
326.199 17.375 326.039 17.367 325.914 17.355 cv
325.785 17.34 325.684 17.324 325.613 17.297 cv
325.535 17.273 325.484 17.238 325.457 17.199 cv
325.422 17.16 325.406 17.117 325.41 17.062 cv
325.41 13.098 li
325.406 12.762 325.383 12.496 325.336 12.301 cv
325.285 12.109 325.211 11.945 325.121 11.809 cv
325.027 11.672 324.91 11.566 324.762 11.488 cv
324.613 11.414 324.438 11.375 324.242 11.375 cv
323.988 11.375 323.738 11.469 323.484 11.648 cv
323.23 11.832 322.965 12.094 322.691 12.441 cv
322.691 17.062 li
322.688 17.117 322.672 17.16 322.645 17.199 cv
322.609 17.238 322.555 17.273 322.484 17.297 cv
322.406 17.324 322.309 17.34 322.184 17.355 cv
322.059 17.367 321.898 17.375 321.711 17.375 cv
321.516 17.375 321.359 17.367 321.234 17.355 cv
321.109 17.34 321.008 17.324 320.934 17.297 cv
320.855 17.273 320.801 17.238 320.773 17.199 cv
320.738 17.16 320.723 17.117 320.727 17.062 cv
320.727 10.113 li
320.723 10.066 320.738 10.02 320.766 9.97699 cv
320.789 9.94098 320.836 9.90997 320.906 9.87903 cv
320.973 9.85498 321.059 9.836 321.168 9.82001 cv
321.273 9.81201 321.406 9.80499 321.57 9.80103 cv
321.734 9.80499 321.871 9.81201 321.98 9.82001 cv
322.086 9.836 322.172 9.85498 322.234 9.87903 cv
322.293 9.90997 322.336 9.94098 322.363 9.97699 cv
322.387 10.02 322.398 10.066 322.402 10.113 cv
322.402 10.914 li
322.785 10.504 323.176 10.191 323.574 9.97998 cv
323.969 9.77301 324.387 9.672 324.82 9.66803 cv
325.289 9.672 325.688 9.75 326.016 9.90198 cv
326.34 10.062 326.602 10.273 326.801 10.539 cv
327 10.809 327.145 11.121 327.234 11.477 cv
327.32 11.836 327.363 12.266 327.367 12.77 cv
cp
f
335.563 10.594 mo
335.559 10.848 335.531 11.031 335.477 11.148 cv
335.418 11.27 335.348 11.328 335.27 11.328 cv
334.449 11.328 li
334.563 11.453 334.645 11.598 334.695 11.754 cv
334.742 11.914 334.766 12.078 334.77 12.246 cv
334.766 12.656 334.699 13.016 334.566 13.328 cv
334.43 13.645 334.234 13.91 333.984 14.121 cv
333.73 14.34 333.43 14.504 333.074 14.613 cv
332.715 14.73 332.316 14.785 331.887 14.781 cv
331.66 14.785 331.449 14.758 331.246 14.699 cv
331.043 14.648 330.887 14.586 330.777 14.508 cv
330.715 14.578 330.656 14.656 330.609 14.75 cv
330.559 14.844 330.535 14.949 330.539 15.059 cv
330.535 15.215 330.602 15.336 330.734 15.43 cv
330.863 15.527 331.051 15.582 331.293 15.59 cv
332.984 15.652 li
333.379 15.668 333.73 15.727 334.039 15.82 cv
334.348 15.922 334.609 16.055 334.82 16.227 cv
335.031 16.402 335.191 16.613 335.301 16.855 cv
335.41 17.102 335.465 17.375 335.469 17.687 cv
335.465 18.023 335.391 18.348 335.242 18.656 cv
335.094 18.957 334.867 19.219 334.566 19.445 cv
334.262 19.664 333.883 19.844 333.43 19.977 cv
332.973 20.105 332.441 20.168 331.84 20.172 cv
331.242 20.168 330.738 20.121 330.32 20.031 cv
329.902 19.934 329.559 19.805 329.293 19.641 cv
329.023 19.473 328.828 19.273 328.711 19.047 cv
328.586 18.812 328.527 18.559 328.527 18.285 cv
328.527 18.113 328.547 17.953 328.594 17.797 cv
328.633 17.641 328.699 17.488 328.789 17.348 cv
328.871 17.203 328.977 17.07 329.102 16.937 cv
329.227 16.809 329.367 16.684 329.531 16.562 cv
329.305 16.449 329.133 16.289 329.012 16.078 cv
328.891 15.875 328.832 15.648 328.832 15.402 cv
328.832 15.102 328.898 14.824 329.039 14.566 cv
329.176 14.316 329.359 14.086 329.586 13.883 cv
329.402 13.703 329.258 13.488 329.148 13.23 cv
329.039 12.98 328.984 12.66 328.988 12.277 cv
328.984 11.875 329.055 11.516 329.199 11.191 cv
329.34 10.875 329.539 10.605 329.797 10.383 cv
330.051 10.164 330.355 9.992 330.707 9.875 cv
331.059 9.758 331.449 9.69897 331.879 9.69897 cv
332.098 9.69897 332.305 9.71503 332.504 9.73798 cv
332.703 9.77002 332.891 9.80499 333.063 9.84802 cv
335.27 9.84802 li
335.352 9.85199 335.422 9.90997 335.48 10.02 cv
335.531 10.137 335.559 10.328 335.563 10.594 cv
cp
333.047 12.238 mo
333.043 11.867 332.941 11.578 332.734 11.367 cv
332.523 11.164 332.23 11.059 331.855 11.055 cv
331.66 11.059 331.488 11.09 331.348 11.152 cv
331.199 11.219 331.078 11.309 330.984 11.418 cv
330.883 11.531 330.813 11.66 330.77 11.809 cv
330.719 11.957 330.695 12.113 330.699 12.27 cv
330.695 12.629 330.801 12.906 331.012 13.109 cv
331.219 13.316 331.508 13.422 331.879 13.418 cv
332.074 13.422 332.242 13.391 332.391 13.324 cv
332.531 13.266 332.652 13.18 332.754 13.066 cv
332.848 12.961 332.922 12.832 332.973 12.687 cv
333.02 12.547 333.043 12.398 333.047 12.238 cv
cp
333.508 17.789 mo
333.508 17.551 333.414 17.375 333.227 17.25 cv
333.039 17.129 332.781 17.059 332.453 17.047 cv
331.059 17.008 li
330.922 17.109 330.813 17.203 330.734 17.293 cv
330.652 17.383 330.59 17.469 330.543 17.555 cv
330.492 17.637 330.457 17.719 330.445 17.797 cv
330.426 17.875 330.418 17.953 330.422 18.039 cv
330.418 18.293 330.551 18.492 330.813 18.629 cv
331.074 18.762 331.445 18.828 331.926 18.832 cv
332.219 18.828 332.465 18.797 332.672 18.742 cv
332.871 18.68 333.035 18.602 333.164 18.504 cv
333.285 18.402 333.375 18.293 333.43 18.172 cv
333.48 18.051 333.508 17.922 333.508 17.789 cv
cp
f
347.473 8.086 mo
347.469 8.242 347.461 8.37097 347.453 8.47302 cv
347.438 8.58197 347.418 8.66803 347.395 8.72998 cv
347.363 8.797 347.332 8.84399 347.297 8.87097 cv
347.254 8.90601 347.211 8.922 347.168 8.91803 cv
344.645 8.91803 li
344.645 17.047 li
344.645 17.102 344.625 17.148 344.594 17.187 cv
344.555 17.23 344.5 17.266 344.426 17.289 cv
344.344 17.316 344.238 17.336 344.109 17.352 cv
343.973 17.367 343.809 17.375 343.613 17.375 cv
343.418 17.375 343.254 17.367 343.121 17.352 cv
342.988 17.336 342.883 17.316 342.805 17.289 cv
342.727 17.266 342.668 17.23 342.637 17.187 cv
342.598 17.148 342.582 17.102 342.586 17.047 cv
342.586 8.91803 li
340.063 8.91803 li
340.008 8.922 339.961 8.90601 339.93 8.87097 cv
339.891 8.84399 339.859 8.797 339.836 8.72998 cv
339.805 8.66803 339.785 8.58197 339.777 8.47302 cv
339.762 8.37097 339.758 8.242 339.758 8.086 cv
339.758 7.93402 339.762 7.80103 339.777 7.68701 cv
339.785 7.58197 339.805 7.492 339.836 7.42603 cv
339.859 7.36298 339.891 7.31598 339.93 7.28497 cv
339.961 7.258 340.008 7.24597 340.063 7.242 cv
347.168 7.242 li
347.211 7.24597 347.254 7.258 347.297 7.28497 cv
347.332 7.31598 347.363 7.36298 347.395 7.42603 cv
347.418 7.492 347.438 7.58197 347.453 7.68701 cv
347.461 7.80103 347.469 7.93402 347.473 8.086 cv
cp
f
350.508 17.062 mo
350.504 17.117 350.488 17.16 350.461 17.199 cv
350.426 17.238 350.371 17.273 350.301 17.297 cv
350.223 17.324 350.125 17.34 350 17.355 cv
349.875 17.367 349.715 17.375 349.527 17.375 cv
349.332 17.375 349.176 17.367 349.051 17.355 cv
348.926 17.34 348.824 17.324 348.75 17.297 cv
348.672 17.273 348.617 17.238 348.59 17.199 cv
348.555 17.16 348.539 17.117 348.543 17.062 cv
348.543 10.129 li
348.539 10.078 348.555 10.031 348.59 9.992 cv
348.617 9.953 348.672 9.922 348.75 9.89099 cv
348.824 9.867 348.926 9.84399 349.051 9.82397 cv
349.176 9.81201 349.332 9.80499 349.527 9.80103 cv
349.715 9.80499 349.875 9.81201 350 9.82397 cv
350.125 9.84399 350.223 9.867 350.301 9.89099 cv
350.371 9.922 350.426 9.953 350.461 9.992 cv
350.488 10.031 350.504 10.078 350.508 10.129 cv
cp
350.656 7.758 mo
350.656 8.15601 350.574 8.42999 350.414 8.578 cv
350.25 8.72998 349.953 8.80499 349.52 8.80103 cv
349.074 8.80499 348.773 8.72998 348.625 8.586 cv
348.469 8.44098 348.395 8.17999 348.395 7.797 cv
348.395 7.40198 348.473 7.12903 348.633 6.97699 cv
348.789 6.82397 349.09 6.74597 349.535 6.74597 cv
349.969 6.74597 350.266 6.82001 350.422 6.96899 cv
350.578 7.117 350.656 7.383 350.656 7.758 cv
cp
f
363.559 17.062 mo
363.555 17.117 363.539 17.16 363.512 17.199 cv
363.477 17.238 363.426 17.273 363.355 17.297 cv
363.281 17.324 363.18 17.34 363.059 17.355 cv
362.934 17.367 362.777 17.375 362.586 17.375 cv
362.387 17.375 362.227 17.367 362.102 17.355 cv
361.977 17.34 361.875 17.324 361.801 17.297 cv
361.723 17.273 361.672 17.238 361.645 17.199 cv
361.617 17.16 361.602 17.117 361.605 17.062 cv
361.605 12.941 li
361.602 12.711 361.582 12.496 361.539 12.301 cv
361.492 12.109 361.422 11.945 361.336 11.809 cv
361.242 11.672 361.129 11.566 360.992 11.488 cv
360.852 11.414 360.688 11.375 360.496 11.375 cv
360.262 11.375 360.023 11.469 359.785 11.648 cv
359.547 11.832 359.289 12.094 359.008 12.441 cv
359.008 17.062 li
359.008 17.117 358.992 17.16 358.961 17.199 cv
358.93 17.238 358.875 17.273 358.801 17.297 cv
358.723 17.324 358.621 17.34 358.5 17.355 cv
358.375 17.367 358.223 17.375 358.035 17.375 cv
357.84 17.375 357.68 17.367 357.559 17.355 cv
357.43 17.34 357.328 17.324 357.258 17.297 cv
357.18 17.273 357.129 17.238 357.098 17.199 cv
357.066 17.16 357.051 17.117 357.051 17.062 cv
357.051 12.941 li
357.051 12.711 357.027 12.496 356.984 12.301 cv
356.941 12.109 356.875 11.945 356.789 11.809 cv
356.695 11.672 356.582 11.566 356.445 11.488 cv
356.301 11.414 356.137 11.375 355.953 11.375 cv
355.711 11.375 355.473 11.469 355.234 11.648 cv
354.996 11.832 354.738 12.094 354.465 12.441 cv
354.465 17.062 li
354.461 17.117 354.445 17.16 354.418 17.199 cv
354.383 17.238 354.328 17.273 354.258 17.297 cv
354.18 17.324 354.082 17.34 353.957 17.355 cv
353.832 17.367 353.672 17.375 353.484 17.375 cv
353.289 17.375 353.133 17.367 353.008 17.355 cv
352.883 17.34 352.781 17.324 352.707 17.297 cv
352.629 17.273 352.574 17.238 352.547 17.199 cv
352.512 17.16 352.496 17.117 352.5 17.062 cv
352.5 10.113 li
352.496 10.066 352.512 10.02 352.539 9.97699 cv
352.563 9.94098 352.609 9.90997 352.68 9.87903 cv
352.746 9.85498 352.832 9.836 352.941 9.82001 cv
353.047 9.81201 353.18 9.80499 353.344 9.80103 cv
353.508 9.80499 353.645 9.81201 353.754 9.82001 cv
353.859 9.836 353.945 9.85498 354.008 9.87903 cv
354.066 9.90997 354.109 9.94098 354.137 9.97699 cv
354.16 10.02 354.172 10.066 354.176 10.113 cv
354.176 10.914 li
354.559 10.504 354.941 10.191 355.324 9.97998 cv
355.703 9.77301 356.105 9.672 356.523 9.66803 cv
356.809 9.672 357.063 9.69897 357.293 9.758 cv
357.52 9.82001 357.727 9.90601 357.906 10.016 cv
358.086 10.129 358.238 10.266 358.367 10.418 cv
358.496 10.574 358.605 10.746 358.695 10.937 cv
358.902 10.715 359.105 10.523 359.309 10.363 cv
359.504 10.203 359.703 10.07 359.898 9.96899 cv
360.094 9.867 360.289 9.79303 360.484 9.742 cv
360.68 9.69501 360.879 9.672 361.082 9.66803 cv
361.543 9.672 361.93 9.75 362.25 9.90198 cv
362.563 10.062 362.82 10.273 363.016 10.539 cv
363.211 10.809 363.348 11.121 363.434 11.477 cv
363.512 11.836 363.555 12.215 363.559 12.613 cv
cp
f
371.898 13.387 mo
371.895 13.625 371.844 13.801 371.738 13.914 cv
371.629 14.031 371.48 14.09 371.301 14.086 cv
367.066 14.086 li
367.063 14.387 367.098 14.656 367.172 14.895 cv
367.238 15.137 367.352 15.34 367.508 15.508 cv
367.66 15.68 367.855 15.809 368.098 15.895 cv
368.336 15.984 368.625 16.027 368.969 16.027 cv
369.309 16.027 369.609 16.004 369.871 15.953 cv
370.129 15.906 370.355 15.852 370.547 15.789 cv
370.734 15.73 370.891 15.676 371.02 15.625 cv
371.141 15.578 371.242 15.555 371.324 15.551 cv
371.367 15.555 371.406 15.562 371.441 15.578 cv
371.469 15.598 371.496 15.629 371.516 15.676 cv
371.535 15.723 371.547 15.789 371.559 15.875 cv
371.563 15.961 371.566 16.07 371.57 16.199 cv
371.566 16.316 371.566 16.414 371.563 16.492 cv
371.555 16.574 371.547 16.641 371.539 16.695 cv
371.527 16.754 371.512 16.805 371.492 16.84 cv
371.473 16.883 371.445 16.918 371.414 16.953 cv
371.379 16.992 371.285 17.043 371.137 17.102 cv
370.98 17.168 370.789 17.23 370.559 17.285 cv
370.32 17.348 370.051 17.395 369.754 17.441 cv
369.449 17.48 369.129 17.504 368.789 17.508 cv
368.168 17.504 367.625 17.43 367.164 17.273 cv
366.695 17.121 366.309 16.883 366 16.566 cv
365.684 16.25 365.449 15.852 365.301 15.367 cv
365.145 14.887 365.07 14.32 365.074 13.664 cv
365.07 13.051 365.148 12.492 365.313 11.996 cv
365.469 11.5 365.703 11.082 366.016 10.734 cv
366.32 10.391 366.695 10.125 367.133 9.94098 cv
367.57 9.76202 368.063 9.672 368.617 9.66803 cv
369.195 9.672 369.695 9.758 370.109 9.92603 cv
370.523 10.102 370.859 10.34 371.125 10.641 cv
371.387 10.945 371.582 11.305 371.711 11.719 cv
371.832 12.137 371.895 12.586 371.898 13.074 cv
cp
369.996 12.824 mo
370.008 12.273 369.898 11.84 369.664 11.527 cv
369.43 11.215 369.063 11.059 368.57 11.055 cv
368.32 11.059 368.105 11.105 367.922 11.195 cv
367.734 11.293 367.582 11.418 367.461 11.574 cv
367.336 11.734 367.242 11.922 367.18 12.137 cv
367.113 12.352 367.074 12.582 367.066 12.824 cv
cp
f
378.398 15.098 mo
378.395 15.496 378.32 15.844 378.176 16.145 cv
378.027 16.445 377.82 16.699 377.551 16.898 cv
377.277 17.105 376.957 17.254 376.59 17.355 cv
376.223 17.453 375.82 17.504 375.391 17.508 cv
375.125 17.504 374.879 17.484 374.645 17.449 cv
374.41 17.406 374.199 17.359 374.012 17.301 cv
373.824 17.242 373.668 17.18 373.543 17.117 cv
373.418 17.055 373.324 16.996 373.27 16.941 cv
373.211 16.887 373.168 16.805 373.141 16.687 cv
373.105 16.574 373.09 16.398 373.094 16.168 cv
373.09 16.02 373.098 15.898 373.109 15.805 cv
373.117 15.715 373.133 15.645 373.156 15.586 cv
373.176 15.535 373.199 15.496 373.234 15.477 cv
373.262 15.461 373.301 15.453 373.348 15.449 cv
373.402 15.453 373.488 15.484 373.602 15.547 cv
373.711 15.613 373.848 15.687 374.02 15.762 cv
374.184 15.844 374.379 15.914 374.598 15.98 cv
374.816 16.051 375.066 16.086 375.352 16.082 cv
375.527 16.086 375.684 16.066 375.824 16.027 cv
375.957 15.992 376.078 15.941 376.184 15.871 cv
376.281 15.805 376.355 15.719 376.41 15.613 cv
376.457 15.512 376.484 15.391 376.488 15.254 cv
376.484 15.098 376.438 14.965 376.344 14.855 cv
376.25 14.746 376.121 14.648 375.965 14.562 cv
375.801 14.48 375.621 14.402 375.426 14.328 cv
375.223 14.258 375.02 14.18 374.809 14.086 cv
374.598 14 374.391 13.898 374.195 13.781 cv
373.992 13.672 373.813 13.531 373.656 13.363 cv
373.492 13.199 373.367 13 373.273 12.762 cv
373.18 12.531 373.133 12.25 373.133 11.918 cv
373.133 11.59 373.195 11.285 373.324 11.004 cv
373.453 10.73 373.641 10.492 373.887 10.293 cv
374.129 10.098 374.426 9.94501 374.777 9.83197 cv
375.125 9.72699 375.52 9.672 375.961 9.66803 cv
376.176 9.672 376.387 9.68701 376.594 9.71503 cv
376.797 9.75 376.984 9.789 377.152 9.83197 cv
377.316 9.883 377.457 9.93402 377.574 9.98401 cv
377.688 10.043 377.77 10.09 377.82 10.125 cv
377.867 10.168 377.902 10.207 377.926 10.242 cv
377.945 10.285 377.957 10.332 377.969 10.383 cv
377.977 10.437 377.988 10.504 377.996 10.582 cv
378.004 10.668 378.008 10.766 378.008 10.883 cv
378.008 11.023 378.004 11.141 377.996 11.227 cv
377.988 11.32 377.973 11.391 377.957 11.437 cv
377.938 11.492 377.914 11.527 377.887 11.543 cv
377.852 11.566 377.816 11.574 377.777 11.57 cv
377.727 11.574 377.652 11.547 377.559 11.488 cv
377.457 11.437 377.336 11.379 377.188 11.312 cv
377.039 11.254 376.867 11.195 376.672 11.137 cv
376.477 11.086 376.254 11.059 376.008 11.055 cv
375.828 11.059 375.676 11.078 375.547 11.109 cv
375.414 11.148 375.305 11.199 375.227 11.266 cv
375.141 11.336 375.078 11.414 375.039 11.504 cv
374.992 11.598 374.973 11.695 374.977 11.797 cv
374.973 11.957 375.023 12.094 375.125 12.199 cv
375.223 12.312 375.352 12.406 375.516 12.488 cv
375.676 12.574 375.859 12.652 376.066 12.723 cv
376.27 12.797 376.477 12.879 376.688 12.961 cv
376.895 13.051 377.102 13.148 377.313 13.262 cv
377.516 13.375 377.699 13.516 377.859 13.68 cv
378.02 13.848 378.148 14.047 378.25 14.277 cv
378.344 14.512 378.395 14.785 378.398 15.098 cv
cp
f
390.727 13.41 mo
390.723 13.711 390.695 13.922 390.641 14.039 cv
390.582 14.164 390.492 14.223 390.367 14.219 cv
387.125 14.219 li
386.996 14.223 386.902 14.16 386.848 14.035 cv
386.785 13.914 386.758 13.707 386.762 13.41 cv
386.758 13.121 386.785 12.914 386.848 12.793 cv
386.902 12.676 386.996 12.617 387.125 12.613 cv
390.367 12.613 li
390.43 12.617 390.48 12.629 390.527 12.652 cv
390.566 12.68 390.605 12.727 390.641 12.785 cv
390.668 12.852 390.691 12.934 390.707 13.035 cv
390.719 13.141 390.723 13.266 390.727 13.41 cv
cp
f
406.184 14.43 mo
406.18 14.699 406.152 14.902 406.102 15.035 cv
406.043 15.176 405.969 15.242 405.879 15.238 cv
404.984 15.238 li
404.984 17.062 li
404.984 17.117 404.969 17.16 404.938 17.199 cv
404.906 17.238 404.852 17.273 404.773 17.297 cv
404.695 17.324 404.594 17.34 404.469 17.355 cv
404.344 17.367 404.18 17.375 403.984 17.375 cv
403.797 17.375 403.641 17.367 403.516 17.355 cv
403.383 17.34 403.281 17.324 403.211 17.297 cv
403.133 17.273 403.082 17.238 403.055 17.199 cv
403.023 17.16 403.008 17.117 403.012 17.062 cv
403.012 15.238 li
399.156 15.238 li
399.078 15.242 399.016 15.234 398.961 15.211 cv
398.902 15.195 398.852 15.152 398.816 15.09 cv
398.773 15.027 398.746 14.934 398.73 14.809 cv
398.711 14.687 398.703 14.527 398.703 14.32 cv
398.703 14.156 398.707 14.012 398.715 13.887 cv
398.723 13.77 398.734 13.66 398.754 13.559 cv
398.77 13.465 398.797 13.371 398.832 13.277 cv
398.863 13.191 398.906 13.098 398.961 12.996 cv
402.094 7.46899 li
402.117 7.42603 402.16 7.38702 402.227 7.34802 cv
402.285 7.31598 402.371 7.28497 402.484 7.26202 cv
402.594 7.23798 402.738 7.22302 402.91 7.211 cv
403.082 7.203 403.289 7.19897 403.535 7.19501 cv
403.797 7.19897 404.023 7.203 404.211 7.21503 cv
404.398 7.22998 404.547 7.25403 404.66 7.27698 cv
404.77 7.30902 404.852 7.34399 404.906 7.383 cv
404.957 7.42999 404.984 7.47699 404.984 7.53101 cv
404.984 13.602 li
405.879 13.602 li
405.961 13.602 406.031 13.668 406.094 13.793 cv
406.148 13.926 406.18 14.137 406.184 14.43 cv
cp
403.012 8.96503 mo
402.996 8.96503 li
400.34 13.602 li
403.012 13.602 li
cp
f
417.879 8.086 mo
417.875 8.242 417.867 8.37097 417.859 8.47302 cv
417.844 8.58197 417.824 8.66803 417.801 8.72998 cv
417.77 8.797 417.738 8.84399 417.703 8.87097 cv
417.66 8.90601 417.617 8.922 417.574 8.91803 cv
415.051 8.91803 li
415.051 17.047 li
415.051 17.102 415.031 17.148 415 17.187 cv
414.961 17.23 414.906 17.266 414.832 17.289 cv
414.75 17.316 414.645 17.336 414.516 17.352 cv
414.379 17.367 414.215 17.375 414.02 17.375 cv
413.824 17.375 413.66 17.367 413.527 17.352 cv
413.395 17.336 413.289 17.316 413.211 17.289 cv
413.133 17.266 413.074 17.23 413.043 17.187 cv
413.004 17.148 412.988 17.102 412.992 17.047 cv
412.992 8.91803 li
410.469 8.91803 li
410.414 8.922 410.367 8.90601 410.336 8.87097 cv
410.297 8.84399 410.266 8.797 410.242 8.72998 cv
410.211 8.66803 410.191 8.58197 410.184 8.47302 cv
410.168 8.37097 410.164 8.242 410.164 8.086 cv
410.164 7.93402 410.168 7.80103 410.184 7.68701 cv
410.191 7.58197 410.211 7.492 410.242 7.42603 cv
410.266 7.36298 410.297 7.31598 410.336 7.28497 cv
410.367 7.258 410.414 7.24597 410.469 7.242 cv
417.574 7.242 li
417.617 7.24597 417.66 7.258 417.703 7.28497 cv
417.738 7.31598 417.77 7.36298 417.801 7.42603 cv
417.824 7.492 417.844 7.58197 417.859 7.68701 cv
417.867 7.80103 417.875 7.93402 417.879 8.086 cv
cp
f
425.594 17.062 mo
425.59 17.117 425.574 17.16 425.547 17.199 cv
425.512 17.238 425.461 17.273 425.391 17.297 cv
425.316 17.324 425.215 17.34 425.09 17.355 cv
424.961 17.367 424.805 17.375 424.621 17.375 cv
424.426 17.375 424.266 17.367 424.141 17.355 cv
424.012 17.34 423.91 17.324 423.84 17.297 cv
423.762 17.273 423.711 17.238 423.684 17.199 cv
423.648 17.16 423.633 17.117 423.637 17.062 cv
423.637 13.098 li
423.633 12.762 423.609 12.496 423.563 12.301 cv
423.512 12.109 423.438 11.945 423.348 11.809 cv
423.254 11.672 423.137 11.566 422.988 11.488 cv
422.84 11.414 422.664 11.375 422.469 11.375 cv
422.215 11.375 421.965 11.469 421.711 11.648 cv
421.457 11.832 421.191 12.094 420.918 12.441 cv
420.918 17.062 li
420.914 17.117 420.898 17.16 420.871 17.199 cv
420.836 17.238 420.781 17.273 420.711 17.297 cv
420.633 17.324 420.535 17.34 420.41 17.355 cv
420.285 17.367 420.125 17.375 419.938 17.375 cv
419.742 17.375 419.586 17.367 419.461 17.355 cv
419.336 17.34 419.234 17.324 419.16 17.297 cv
419.082 17.273 419.027 17.238 419 17.199 cv
418.965 17.16 418.949 17.117 418.953 17.062 cv
418.953 6.81598 li
418.949 6.76599 418.965 6.71899 419 6.67603 cv
419.027 6.63702 419.082 6.60199 419.16 6.57001 cv
419.234 6.54303 419.336 6.52301 419.461 6.50403 cv
419.586 6.492 419.742 6.48401 419.938 6.47998 cv
420.125 6.48401 420.285 6.492 420.41 6.50403 cv
420.535 6.52301 420.633 6.54303 420.711 6.57001 cv
420.781 6.60199 420.836 6.63702 420.871 6.67603 cv
420.898 6.71899 420.914 6.76599 420.918 6.81598 cv
420.918 10.656 li
421.254 10.328 421.598 10.082 421.949 9.914 cv
422.297 9.75403 422.664 9.672 423.047 9.66803 cv
423.516 9.672 423.914 9.75 424.242 9.90198 cv
424.566 10.062 424.828 10.273 425.027 10.543 cv
425.227 10.812 425.371 11.129 425.461 11.488 cv
425.547 11.852 425.59 12.289 425.594 12.801 cv
cp
f
431.992 10.758 mo
431.992 10.949 431.984 11.102 431.977 11.219 cv
431.961 11.34 431.945 11.434 431.93 11.5 cv
431.906 11.57 431.879 11.617 431.848 11.641 cv
431.809 11.668 431.766 11.68 431.719 11.68 cv
431.672 11.68 431.625 11.672 431.578 11.652 cv
431.523 11.637 431.465 11.617 431.402 11.594 cv
431.332 11.574 431.262 11.555 431.188 11.535 cv
431.105 11.52 431.02 11.512 430.93 11.508 cv
430.816 11.512 430.707 11.531 430.602 11.574 cv
430.492 11.621 430.379 11.691 430.266 11.781 cv
430.145 11.875 430.023 12 429.898 12.152 cv
429.77 12.312 429.633 12.504 429.488 12.73 cv
429.488 17.062 li
429.484 17.117 429.469 17.16 429.441 17.199 cv
429.406 17.238 429.352 17.273 429.281 17.297 cv
429.203 17.324 429.105 17.34 428.98 17.355 cv
428.855 17.367 428.695 17.375 428.508 17.375 cv
428.313 17.375 428.156 17.367 428.031 17.355 cv
427.906 17.34 427.805 17.324 427.73 17.297 cv
427.652 17.273 427.598 17.238 427.57 17.199 cv
427.535 17.16 427.52 17.117 427.523 17.062 cv
427.523 10.113 li
427.52 10.066 427.535 10.02 427.563 9.97699 cv
427.586 9.94098 427.633 9.90997 427.703 9.87903 cv
427.77 9.85498 427.855 9.836 427.965 9.82001 cv
428.07 9.81201 428.203 9.80499 428.367 9.80103 cv
428.531 9.80499 428.668 9.81201 428.777 9.82001 cv
428.883 9.836 428.969 9.85498 429.031 9.87903 cv
429.09 9.90997 429.133 9.94098 429.16 9.97699 cv
429.184 10.02 429.195 10.066 429.199 10.113 cv
429.199 10.977 li
429.379 10.719 429.551 10.508 429.715 10.336 cv
429.871 10.172 430.027 10.035 430.176 9.93402 cv
430.32 9.836 430.465 9.77002 430.609 9.72699 cv
430.754 9.69098 430.898 9.672 431.047 9.66803 cv
431.113 9.672 431.188 9.67603 431.266 9.67999 cv
431.344 9.69098 431.422 9.703 431.508 9.71899 cv
431.586 9.73798 431.66 9.758 431.727 9.78101 cv
431.785 9.80499 431.832 9.83197 431.863 9.85498 cv
431.891 9.88702 431.91 9.914 431.926 9.94098 cv
431.938 9.97699 431.949 10.02 431.961 10.07 cv
431.969 10.129 431.977 10.211 431.984 10.316 cv
431.988 10.426 431.992 10.574 431.992 10.758 cv
cp
f
439.434 13.387 mo
439.43 13.625 439.379 13.801 439.273 13.914 cv
439.164 14.031 439.016 14.09 438.836 14.086 cv
434.602 14.086 li
434.598 14.387 434.633 14.656 434.707 14.895 cv
434.773 15.137 434.887 15.34 435.043 15.508 cv
435.195 15.68 435.391 15.809 435.633 15.895 cv
435.871 15.984 436.16 16.027 436.504 16.027 cv
436.844 16.027 437.145 16.004 437.406 15.953 cv
437.664 15.906 437.891 15.852 438.082 15.789 cv
438.27 15.73 438.426 15.676 438.555 15.625 cv
438.676 15.578 438.777 15.555 438.859 15.551 cv
438.902 15.555 438.941 15.562 438.977 15.578 cv
439.004 15.598 439.031 15.629 439.051 15.676 cv
439.07 15.723 439.082 15.789 439.094 15.875 cv
439.098 15.961 439.102 16.07 439.105 16.199 cv
439.102 16.316 439.102 16.414 439.098 16.492 cv
439.09 16.574 439.082 16.641 439.074 16.695 cv
439.063 16.754 439.047 16.805 439.027 16.84 cv
439.008 16.883 438.98 16.918 438.949 16.953 cv
438.914 16.992 438.82 17.043 438.672 17.102 cv
438.516 17.168 438.324 17.23 438.094 17.285 cv
437.855 17.348 437.586 17.395 437.289 17.441 cv
436.984 17.48 436.664 17.504 436.324 17.508 cv
435.703 17.504 435.16 17.43 434.699 17.273 cv
434.23 17.121 433.844 16.883 433.535 16.566 cv
433.219 16.25 432.984 15.852 432.836 15.367 cv
432.68 14.887 432.605 14.32 432.609 13.664 cv
432.605 13.051 432.684 12.492 432.848 11.996 cv
433.004 11.5 433.238 11.082 433.551 10.734 cv
433.855 10.391 434.23 10.125 434.668 9.94098 cv
435.105 9.76202 435.598 9.672 436.152 9.66803 cv
436.73 9.672 437.23 9.758 437.645 9.92603 cv
438.059 10.102 438.395 10.34 438.66 10.641 cv
438.922 10.945 439.117 11.305 439.246 11.719 cv
439.367 12.137 439.43 12.586 439.434 13.074 cv
cp
437.531 12.824 mo
437.543 12.273 437.434 11.84 437.199 11.527 cv
436.965 11.215 436.598 11.059 436.105 11.055 cv
435.855 11.059 435.641 11.105 435.457 11.195 cv
435.27 11.293 435.117 11.418 434.996 11.574 cv
434.871 11.734 434.777 11.922 434.715 12.137 cv
434.648 12.352 434.609 12.582 434.602 12.824 cv
cp
f
446.965 17.086 mo
446.961 17.164 446.934 17.219 446.887 17.258 cv
446.832 17.301 446.75 17.328 446.641 17.348 cv
446.523 17.363 446.359 17.375 446.145 17.375 cv
445.906 17.375 445.734 17.363 445.633 17.348 cv
445.523 17.328 445.449 17.301 445.41 17.258 cv
445.363 17.219 445.344 17.164 445.344 17.086 cv
445.344 16.535 li
445.055 16.844 444.727 17.082 444.363 17.25 cv
443.996 17.422 443.59 17.504 443.145 17.508 cv
442.773 17.504 442.434 17.457 442.125 17.363 cv
441.816 17.27 441.551 17.129 441.324 16.934 cv
441.098 16.746 440.922 16.512 440.797 16.23 cv
440.672 15.953 440.609 15.625 440.613 15.246 cv
440.609 14.848 440.688 14.496 440.848 14.191 cv
441.004 13.895 441.242 13.648 441.559 13.453 cv
441.871 13.262 442.262 13.117 442.73 13.02 cv
443.199 12.93 443.742 12.883 444.359 12.879 cv
445.039 12.879 li
445.039 12.457 li
445.039 12.242 445.016 12.051 444.973 11.887 cv
444.926 11.727 444.852 11.59 444.754 11.477 cv
444.648 11.371 444.516 11.289 444.348 11.234 cv
444.176 11.184 443.965 11.16 443.723 11.156 cv
443.391 11.16 443.098 11.195 442.844 11.266 cv
442.582 11.34 442.355 11.422 442.16 11.508 cv
441.961 11.602 441.797 11.68 441.668 11.75 cv
441.531 11.824 441.422 11.863 441.344 11.859 cv
441.281 11.863 441.23 11.844 441.191 11.805 cv
441.145 11.77 441.109 11.719 441.082 11.648 cv
441.051 11.586 441.027 11.5 441.016 11.398 cv
440.996 11.301 440.988 11.191 440.992 11.07 cv
440.988 10.91 441.004 10.785 441.031 10.687 cv
441.055 10.598 441.102 10.512 441.18 10.434 cv
441.25 10.359 441.379 10.277 441.563 10.187 cv
441.742 10.098 441.953 10.012 442.199 9.93402 cv
442.441 9.85498 442.711 9.79303 443 9.742 cv
443.289 9.69501 443.586 9.672 443.895 9.66803 cv
444.438 9.672 444.902 9.72302 445.289 9.828 cv
445.676 9.93701 445.996 10.102 446.246 10.32 cv
446.496 10.539 446.676 10.824 446.793 11.172 cv
446.902 11.523 446.961 11.937 446.965 12.41 cv
cp
445.039 14.109 mo
444.289 14.109 li
443.973 14.113 443.703 14.137 443.48 14.18 cv
443.254 14.23 443.07 14.301 442.934 14.391 cv
442.789 14.488 442.688 14.602 442.625 14.73 cv
442.559 14.867 442.523 15.016 442.527 15.184 cv
442.523 15.477 442.617 15.707 442.805 15.871 cv
442.988 16.039 443.246 16.121 443.574 16.121 cv
443.848 16.121 444.098 16.051 444.332 15.91 cv
444.559 15.77 444.797 15.566 445.039 15.293 cv
cp
f
455.551 17.062 mo
455.547 17.125 455.535 17.172 455.512 17.207 cv
455.484 17.25 455.438 17.281 455.379 17.305 cv
455.313 17.328 455.23 17.344 455.125 17.359 cv
455.02 17.367 454.887 17.375 454.734 17.375 cv
454.563 17.375 454.43 17.367 454.328 17.359 cv
454.223 17.344 454.137 17.328 454.074 17.305 cv
454.008 17.281 453.961 17.25 453.934 17.207 cv
453.902 17.172 453.887 17.125 453.891 17.062 cv
453.891 16.293 li
453.531 16.68 453.156 16.977 452.766 17.187 cv
452.367 17.398 451.934 17.504 451.461 17.508 cv
450.926 17.504 450.477 17.402 450.113 17.199 cv
449.746 16.996 449.449 16.723 449.219 16.371 cv
448.984 16.027 448.816 15.621 448.715 15.152 cv
448.613 14.691 448.563 14.199 448.563 13.68 cv
448.563 13.066 448.625 12.512 448.758 12.016 cv
448.887 11.523 449.082 11.102 449.34 10.754 cv
449.594 10.406 449.91 10.141 450.289 9.94897 cv
450.668 9.76599 451.105 9.672 451.602 9.66803 cv
451.988 9.672 452.34 9.75 452.66 9.90601 cv
452.973 10.066 453.289 10.297 453.602 10.602 cv
453.602 6.84003 li
453.602 6.789 453.613 6.742 453.645 6.69897 cv
453.668 6.65997 453.723 6.625 453.801 6.59399 cv
453.875 6.56598 453.973 6.547 454.102 6.52698 cv
454.223 6.51599 454.383 6.508 454.578 6.50403 cv
454.77 6.508 454.926 6.51599 455.051 6.52698 cv
455.172 6.547 455.273 6.56598 455.348 6.59399 cv
455.418 6.625 455.469 6.65997 455.504 6.69897 cv
455.531 6.742 455.547 6.789 455.551 6.84003 cv
cp
453.602 12.418 mo
453.32 12.066 453.051 11.797 452.797 11.609 cv
452.535 11.422 452.266 11.328 451.988 11.328 cv
451.734 11.328 451.516 11.395 451.332 11.52 cv
451.145 11.652 450.996 11.82 450.887 12.031 cv
450.773 12.242 450.691 12.48 450.637 12.742 cv
450.582 13.008 450.555 13.277 450.555 13.547 cv
450.555 13.844 450.578 14.125 450.625 14.398 cv
450.672 14.676 450.746 14.922 450.855 15.137 cv
450.957 15.352 451.102 15.523 451.281 15.652 cv
451.457 15.785 451.68 15.852 451.949 15.848 cv
452.082 15.852 452.211 15.832 452.344 15.789 cv
452.469 15.754 452.602 15.691 452.734 15.598 cv
452.867 15.512 453.004 15.395 453.145 15.25 cv
453.285 15.109 453.438 14.934 453.602 14.727 cv
cp
f
462.375 15.098 mo
462.371 15.496 462.297 15.844 462.152 16.145 cv
462.004 16.445 461.797 16.699 461.527 16.898 cv
461.254 17.105 460.934 17.254 460.566 17.355 cv
460.199 17.453 459.797 17.504 459.367 17.508 cv
459.102 17.504 458.855 17.484 458.621 17.449 cv
458.387 17.406 458.176 17.359 457.988 17.301 cv
457.801 17.242 457.645 17.18 457.52 17.117 cv
457.395 17.055 457.301 16.996 457.246 16.941 cv
457.188 16.887 457.145 16.805 457.117 16.687 cv
457.082 16.574 457.066 16.398 457.07 16.168 cv
457.066 16.02 457.074 15.898 457.086 15.805 cv
457.094 15.715 457.109 15.645 457.133 15.586 cv
457.152 15.535 457.176 15.496 457.211 15.477 cv
457.238 15.461 457.277 15.453 457.324 15.449 cv
457.379 15.453 457.465 15.484 457.578 15.547 cv
457.688 15.613 457.824 15.687 457.996 15.762 cv
458.16 15.844 458.355 15.914 458.574 15.98 cv
458.793 16.051 459.043 16.086 459.328 16.082 cv
459.504 16.086 459.66 16.066 459.801 16.027 cv
459.934 15.992 460.055 15.941 460.16 15.871 cv
460.258 15.805 460.332 15.719 460.387 15.613 cv
460.434 15.512 460.461 15.391 460.465 15.254 cv
460.461 15.098 460.414 14.965 460.32 14.855 cv
460.227 14.746 460.098 14.648 459.941 14.562 cv
459.777 14.48 459.598 14.402 459.402 14.328 cv
459.199 14.258 458.996 14.18 458.785 14.086 cv
458.574 14 458.367 13.898 458.172 13.781 cv
457.969 13.672 457.789 13.531 457.633 13.363 cv
457.469 13.199 457.344 13 457.25 12.762 cv
457.156 12.531 457.109 12.25 457.109 11.918 cv
457.109 11.59 457.172 11.285 457.301 11.004 cv
457.43 10.73 457.617 10.492 457.863 10.293 cv
458.105 10.098 458.402 9.94501 458.754 9.83197 cv
459.102 9.72699 459.496 9.672 459.938 9.66803 cv
460.152 9.672 460.363 9.68701 460.57 9.71503 cv
460.773 9.75 460.961 9.789 461.129 9.83197 cv
461.293 9.883 461.434 9.93402 461.551 9.98401 cv
461.664 10.043 461.746 10.09 461.797 10.125 cv
461.844 10.168 461.879 10.207 461.902 10.242 cv
461.922 10.285 461.934 10.332 461.945 10.383 cv
461.953 10.437 461.965 10.504 461.973 10.582 cv
461.98 10.668 461.984 10.766 461.984 10.883 cv
461.984 11.023 461.98 11.141 461.973 11.227 cv
461.965 11.32 461.949 11.391 461.934 11.437 cv
461.914 11.492 461.891 11.527 461.863 11.543 cv
461.828 11.566 461.793 11.574 461.754 11.57 cv
461.703 11.574 461.629 11.547 461.535 11.488 cv
461.434 11.437 461.313 11.379 461.164 11.312 cv
461.016 11.254 460.844 11.195 460.648 11.137 cv
460.453 11.086 460.23 11.059 459.984 11.055 cv
459.805 11.059 459.652 11.078 459.523 11.109 cv
459.391 11.148 459.281 11.199 459.203 11.266 cv
459.117 11.336 459.055 11.414 459.016 11.504 cv
458.969 11.598 458.949 11.695 458.953 11.797 cv
458.949 11.957 459 12.094 459.102 12.199 cv
459.199 12.312 459.328 12.406 459.492 12.488 cv
459.652 12.574 459.836 12.652 460.043 12.723 cv
460.246 12.797 460.453 12.879 460.664 12.961 cv
460.871 13.051 461.078 13.148 461.289 13.262 cv
461.492 13.375 461.676 13.516 461.836 13.68 cv
461.996 13.848 462.125 14.047 462.227 14.277 cv
462.32 14.512 462.371 14.785 462.375 15.098 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
