%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-FourThreads.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 3:36:24 p.m.
%%BoundingBox: 0 0 661 545
%%HiResBoundingBox: 0 0 660.8400 544.8000
%%CropBox: 0 0 660.8400 544.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -544.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 544.8 li
660.84 544.8 li
660.84 0 li
cp
clp
gsave
0 544.8 mo
661 544.8 li
661 -.200012 li
0 -.200012 li
cp
clp
0 0 mo
660.84 0 li
660.84 544.801 li
0 544.801 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
36.359 462.602 mo
644.641 462.602 li
36.359 431.52 mo
644.641 431.52 li
36.359 400.441 mo
644.641 400.441 li
36.359 369.48 mo
644.641 369.48 li
36.359 338.398 mo
644.641 338.398 li
36.359 307.32 mo
644.641 307.32 li
36.359 276.238 mo
644.641 276.238 li
36.359 245.281 mo
644.641 245.281 li
36.359 214.199 mo
644.641 214.199 li
36.359 183.121 mo
644.641 183.121 li
36.359 152.039 mo
644.641 152.039 li
36.359 121.078 mo
644.641 121.078 li
36.359 90 mo
644.641 90 li
36.359 58.922 mo
644.641 58.922 li
36.359 27.84 mo
644.641 27.84 li
.326574 .281529 .277562 0 cmyk
@
74.398 27.84 mo
74.398 493.559 li
150.359 27.84 mo
150.359 493.559 li
226.441 27.84 mo
226.441 493.559 li
302.52 27.84 mo
302.52 493.559 li
378.48 27.84 mo
378.48 493.559 li
454.559 27.84 mo
454.559 493.559 li
530.641 27.84 mo
530.641 493.559 li
606.602 27.84 mo
606.602 493.559 li
.175235 .144778 .143648 0 cmyk
@
36.359 27.84 mo
36.359 493.559 li
112.32 27.84 mo
112.32 493.559 li
188.398 27.84 mo
188.398 493.559 li
264.48 27.84 mo
264.48 493.559 li
340.559 27.84 mo
340.559 493.559 li
416.52 27.84 mo
416.52 493.559 li
492.602 27.84 mo
492.602 493.559 li
568.68 27.84 mo
568.68 493.559 li
644.641 27.84 mo
644.641 493.559 li
.326574 .281529 .277562 0 cmyk
@
16.199 484.32 mo
23.398 484.32 li
23.398 501.359 li
16.199 501.359 li
cp
0 0 0 0 cmyk
ef
16.199 453.238 mo
23.398 453.238 li
23.398 470.281 li
16.199 470.281 li
cp
ef
16.199 422.16 mo
23.398 422.16 li
23.398 439.32 li
16.199 439.32 li
cp
ef
16.199 391.199 mo
23.398 391.199 li
23.398 408.238 li
16.199 408.238 li
cp
ef
16.199 360.121 mo
23.398 360.121 li
23.398 377.16 li
16.199 377.16 li
cp
ef
16.199 329.039 mo
23.398 329.039 li
23.398 346.199 li
16.199 346.199 li
cp
ef
16.199 297.961 mo
23.398 297.961 li
23.398 315.121 li
16.199 315.121 li
cp
ef
16.199 267 mo
23.398 267 li
23.398 284.039 li
16.199 284.039 li
cp
ef
16.199 235.922 mo
23.398 235.922 li
23.398 252.961 li
16.199 252.961 li
cp
ef
9.121 204.84 mo
23.398 204.84 li
23.398 222 li
9.121 222 li
cp
ef
9.121 173.762 mo
23.398 173.762 li
23.398 190.922 li
9.121 190.922 li
cp
ef
9.121 142.801 mo
23.398 142.801 li
23.398 159.84 li
9.121 159.84 li
cp
ef
9.121 111.719 mo
23.398 111.719 li
23.398 128.762 li
9.121 128.762 li
cp
ef
9.121 80.641 mo
23.398 80.641 li
23.398 97.801 li
9.121 97.801 li
cp
ef
9.121 49.68 mo
23.398 49.68 li
23.398 66.719 li
9.121 66.719 li
cp
ef
9.121 18.602 mo
23.398 18.602 li
23.398 35.641 li
9.121 35.641 li
cp
ef
.96 lw
36.359 493.559 mo
644.641 493.559 li
.369879 .299321 .304356 .000976577 cmyk
@
36.359 493.559 mo
36.359 498 li
112.32 493.559 mo
112.32 498 li
188.398 493.559 mo
188.398 498 li
264.48 493.559 mo
264.48 498 li
340.559 493.559 mo
340.559 498 li
416.52 493.559 mo
416.52 498 li
492.602 493.559 mo
492.602 498 li
568.68 493.559 mo
568.68 498 li
644.641 493.559 mo
644.641 498 li
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
1 lc
36.359 493.559 mo
112.32 463.801 li
188.398 406.68 li
264.48 390 li
340.559 303.602 li
416.52 277.199 li
492.602 248.641 li
568.68 217.68 li
644.641 183.961 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
41.32 498.621 mo
31.238 488.539 li
31.238 498.621 mo
41.32 488.539 li
.62829 .284672 0 0 cmyk
@
117.398 468.859 mo
107.32 458.781 li
107.32 468.859 mo
117.398 458.781 li
@
193.48 411.738 mo
183.398 401.66 li
183.398 411.738 mo
193.48 401.66 li
@
269.441 395.059 mo
259.359 384.98 li
259.359 395.059 mo
269.441 384.98 li
@
345.52 308.539 mo
335.441 298.461 li
335.441 308.539 mo
345.52 298.461 li
@
421.602 282.262 mo
411.52 272.18 li
411.52 282.262 mo
421.602 272.18 li
@
497.559 253.699 mo
487.48 243.621 li
487.48 253.699 mo
497.559 243.621 li
@
573.641 222.621 mo
563.559 212.539 li
563.559 222.621 mo
573.641 212.539 li
@
649.719 189.02 mo
639.641 178.941 li
639.641 189.02 mo
649.719 178.941 li
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
36.359 493.559 mo
112.32 462.48 li
188.398 401.281 li
264.48 339.719 li
340.559 281.039 li
416.52 218.762 li
492.602 155.879 li
568.68 91.801 li
644.641 48.84 li
@
grestore
31.238 488.539 mo
41.199 488.539 li
41.199 498.5 li
31.238 498.5 li
cp
@
107.32 457.461 mo
117.281 457.461 li
117.281 467.422 li
107.32 467.422 li
cp
@
183.398 396.141 mo
193.359 396.141 li
193.359 406.102 li
183.398 406.102 li
cp
@
259.359 334.578 mo
269.32 334.578 li
269.32 344.539 li
259.359 344.539 li
cp
@
335.441 275.898 mo
345.398 275.898 li
345.398 285.859 li
335.441 285.859 li
cp
@
411.52 213.621 mo
421.481 213.621 li
421.481 223.578 li
411.52 223.578 li
cp
@
487.48 150.859 mo
497.441 150.859 li
497.441 160.82 li
487.48 160.82 li
cp
@
563.559 86.66 mo
573.52 86.66 li
573.52 96.621 li
563.559 96.621 li
cp
@
639.641 43.699 mo
649.602 43.699 li
649.602 53.66 li
639.641 53.66 li
cp
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
36.359 493.559 mo
112.32 463.68 li
188.398 405.121 li
264.48 363.238 li
340.559 281.039 li
416.52 300.238 li
492.602 168.84 li
568.68 213.84 li
644.641 72.602 li
.467353 0 .87747 0 cmyk
@
grestore
41.32 498.621 mo
31.238 488.539 li
31.238 498.621 mo
41.32 488.539 li
.467353 0 .87747 0 cmyk
@
117.398 468.621 mo
107.32 458.539 li
107.32 468.621 mo
117.398 458.539 li
@
193.48 410.059 mo
183.398 399.98 li
183.398 410.059 mo
193.48 399.98 li
@
269.441 368.301 mo
259.359 358.219 li
259.359 368.301 mo
269.441 358.219 li
@
345.52 285.98 mo
335.441 275.898 li
335.441 285.98 mo
345.52 275.898 li
@
421.602 305.301 mo
411.52 295.219 li
411.52 305.301 mo
421.602 295.219 li
@
497.559 173.781 mo
487.48 163.699 li
487.48 173.781 mo
497.559 163.699 li
@
573.641 218.898 mo
563.559 208.82 li
563.559 218.898 mo
573.641 208.82 li
@
649.719 77.66 mo
639.641 67.578 li
639.641 77.66 mo
649.719 67.578 li
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
36.359 493.559 mo
112.32 462.602 li
188.398 401.641 li
264.48 339.359 li
340.559 278.641 li
416.52 219.359 li
492.602 160.68 li
568.68 97.32 li
644.641 39 li
@
grestore
31.238 488.539 mo
41.199 488.539 li
41.199 498.5 li
31.238 498.5 li
cp
@
107.32 457.578 mo
117.281 457.578 li
117.281 467.539 li
107.32 467.539 li
cp
@
183.398 396.5 mo
193.359 396.5 li
193.359 406.461 li
183.398 406.461 li
cp
@
259.359 334.34 mo
269.32 334.34 li
269.32 344.301 li
259.359 344.301 li
cp
@
335.441 273.621 mo
345.398 273.621 li
345.398 283.578 li
335.441 283.578 li
cp
@
411.52 214.34 mo
421.481 214.34 li
421.481 224.301 li
411.52 224.301 li
cp
@
487.48 155.66 mo
497.441 155.66 li
497.441 165.621 li
487.48 165.621 li
cp
@
563.559 92.301 mo
573.52 92.301 li
573.52 102.262 li
563.559 102.262 li
cp
@
639.641 33.98 mo
649.602 33.98 li
649.602 43.941 li
639.641 43.941 li
cp
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
36.359 493.559 mo
112.32 463.559 li
188.398 404.398 li
264.48 378.121 li
340.559 302.281 li
416.52 261.359 li
492.602 239.762 li
568.68 126.84 li
644.641 113.16 li
0 .993988 1 0 cmyk
@
grestore
41.32 498.621 mo
31.238 488.539 li
31.238 498.621 mo
41.32 488.539 li
0 .993988 1 0 cmyk
@
117.398 468.5 mo
107.32 458.422 li
107.32 468.5 mo
117.398 458.422 li
@
193.48 409.34 mo
183.398 399.262 li
183.398 409.34 mo
193.48 399.262 li
@
269.441 383.18 mo
259.359 373.102 li
259.359 383.18 mo
269.441 373.102 li
@
345.52 307.219 mo
335.441 297.141 li
335.441 307.219 mo
345.52 297.141 li
@
421.602 266.422 mo
411.52 256.34 li
411.52 266.422 mo
421.602 256.34 li
@
497.559 244.699 mo
487.48 234.621 li
487.48 244.699 mo
497.559 234.621 li
@
573.641 131.898 mo
563.559 121.82 li
563.559 131.898 mo
573.641 121.82 li
@
649.719 118.219 mo
639.641 108.141 li
639.641 118.219 mo
649.719 108.141 li
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
36.359 493.559 mo
112.32 462.48 li
188.398 400.922 li
264.48 339.238 li
340.559 278.16 li
416.52 216.84 li
492.602 154.32 li
568.68 94.078 li
644.641 30.48 li
@
grestore
31.238 488.539 mo
41.199 488.539 li
41.199 498.5 li
31.238 498.5 li
cp
@
107.32 457.34 mo
117.281 457.34 li
117.281 467.301 li
107.32 467.301 li
cp
@
183.398 395.781 mo
193.359 395.781 li
193.359 405.738 li
183.398 405.738 li
cp
@
259.359 334.219 mo
269.32 334.219 li
269.32 344.18 li
259.359 344.18 li
cp
@
335.441 273.141 mo
345.398 273.141 li
345.398 283.102 li
335.441 283.102 li
cp
@
411.52 211.699 mo
421.481 211.699 li
421.481 221.66 li
411.52 221.66 li
cp
@
487.48 149.18 mo
497.441 149.18 li
497.441 159.141 li
487.48 159.141 li
cp
@
563.559 88.941 mo
573.52 88.941 li
573.52 98.898 li
563.559 98.898 li
cp
@
639.641 25.34 mo
649.602 25.34 li
649.602 35.301 li
639.641 35.301 li
cp
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.359 493.559 mo
112.32 463.559 li
188.398 404.641 li
264.48 378.48 li
340.559 282.719 li
416.52 261.359 li
492.602 166.559 li
568.68 246.48 li
644.641 78 li
.62829 .284672 0 0 cmyk
@
grestore
41.32 498.621 mo
31.238 488.539 li
31.238 498.621 mo
41.32 488.539 li
.62829 .284672 0 0 cmyk
@
117.398 468.5 mo
107.32 458.422 li
107.32 468.5 mo
117.398 458.422 li
@
193.48 409.699 mo
183.398 399.621 li
183.398 409.699 mo
193.48 399.621 li
@
269.441 383.422 mo
259.359 373.34 li
259.359 383.422 mo
269.441 373.34 li
@
345.52 287.781 mo
335.441 277.699 li
335.441 287.781 mo
345.52 277.699 li
@
421.602 266.301 mo
411.52 256.219 li
411.52 266.301 mo
421.602 256.219 li
@
497.559 171.621 mo
487.48 161.539 li
487.48 171.621 mo
497.559 161.539 li
@
573.641 251.422 mo
563.559 241.34 li
563.559 251.422 mo
573.641 241.34 li
@
649.719 83.059 mo
639.641 72.98 li
639.641 83.059 mo
649.719 72.98 li
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.359 493.559 mo
112.32 462.719 li
188.398 400.922 li
264.48 339.84 li
340.559 278.16 li
416.52 220.441 li
492.602 153.84 li
568.68 97.078 li
644.641 39.961 li
@
grestore
31.238 488.539 mo
41.199 488.539 li
41.199 498.5 li
31.238 498.5 li
cp
@
107.32 457.578 mo
117.281 457.578 li
117.281 467.539 li
107.32 467.539 li
cp
@
183.398 395.898 mo
193.359 395.898 li
193.359 405.859 li
183.398 405.859 li
cp
@
259.359 334.699 mo
269.32 334.699 li
269.32 344.66 li
259.359 344.66 li
cp
@
335.441 273.02 mo
345.398 273.02 li
345.398 282.981 li
335.441 282.981 li
cp
@
411.52 215.422 mo
421.481 215.422 li
421.481 225.379 li
411.52 225.379 li
cp
@
487.48 148.699 mo
497.441 148.699 li
497.441 158.66 li
487.48 158.66 li
cp
@
563.559 91.941 mo
573.52 91.941 li
573.52 101.898 li
563.559 101.898 li
cp
@
639.641 34.82 mo
649.602 34.82 li
649.602 44.781 li
639.641 44.781 li
cp
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.359 493.559 mo
112.32 463.441 li
188.398 404.281 li
264.48 367.199 li
340.559 316.441 li
416.52 324 li
492.602 251.879 li
568.68 200.16 li
644.641 185.762 li
.467353 0 .87747 0 cmyk
@
grestore
41.32 498.621 mo
31.238 488.539 li
31.238 498.621 mo
41.32 488.539 li
.467353 0 .87747 0 cmyk
@
117.398 468.379 mo
107.32 458.301 li
107.32 468.379 mo
117.398 458.301 li
@
193.48 409.34 mo
183.398 399.262 li
183.398 409.34 mo
193.48 399.262 li
@
269.441 372.141 mo
259.359 362.059 li
259.359 372.141 mo
269.441 362.059 li
@
345.52 321.379 mo
335.441 311.301 li
335.441 321.379 mo
345.52 311.301 li
@
421.602 328.941 mo
411.52 318.859 li
411.52 328.941 mo
421.602 318.859 li
@
497.559 256.941 mo
487.48 246.859 li
487.48 256.941 mo
497.559 246.859 li
@
573.641 205.102 mo
563.559 195.02 li
563.559 205.102 mo
573.641 195.02 li
@
649.719 190.82 mo
639.641 180.738 li
639.641 190.82 mo
649.719 180.738 li
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.359 493.559 mo
112.32 462.961 li
188.398 401.52 li
264.48 340.441 li
340.559 277.922 li
416.52 218.52 li
492.602 155.52 li
568.68 94.801 li
644.641 30.48 li
@
grestore
31.238 488.539 mo
41.199 488.539 li
41.199 498.5 li
31.238 498.5 li
cp
@
107.32 457.941 mo
117.281 457.941 li
117.281 467.898 li
107.32 467.898 li
cp
@
183.398 396.5 mo
193.359 396.5 li
193.359 406.461 li
183.398 406.461 li
cp
@
259.359 335.301 mo
269.32 335.301 li
269.32 345.262 li
259.359 345.262 li
cp
@
335.441 272.898 mo
345.398 272.898 li
345.398 282.859 li
335.441 282.859 li
cp
@
411.52 213.5 mo
421.481 213.5 li
421.481 223.461 li
411.52 223.461 li
cp
@
487.48 150.5 mo
497.441 150.5 li
497.441 160.461 li
487.48 160.461 li
cp
@
563.559 89.781 mo
573.52 89.781 li
573.52 99.738 li
563.559 99.738 li
cp
@
639.641 25.34 mo
649.602 25.34 li
649.602 35.301 li
639.641 35.301 li
cp
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.359 493.559 mo
112.32 463.559 li
188.398 404.762 li
264.48 366.961 li
340.559 320.52 li
416.52 314.398 li
492.602 264 li
568.68 162.359 li
644.641 171.602 li
0 .993988 1 0 cmyk
@
grestore
41.32 498.621 mo
31.238 488.539 li
31.238 498.621 mo
41.32 488.539 li
0 .993988 1 0 cmyk
@
117.398 468.621 mo
107.32 458.539 li
107.32 468.621 mo
117.398 458.539 li
@
193.48 409.82 mo
183.398 399.738 li
183.398 409.82 mo
193.48 399.738 li
@
269.441 371.898 mo
259.359 361.82 li
259.359 371.898 mo
269.441 361.82 li
@
345.52 325.578 mo
335.441 315.5 li
335.441 325.578 mo
345.52 315.5 li
@
421.602 319.461 mo
411.52 309.379 li
411.52 319.461 mo
421.602 309.379 li
@
497.559 269.059 mo
487.48 258.98 li
487.48 269.059 mo
497.559 258.98 li
@
573.641 167.301 mo
563.559 157.219 li
563.559 167.301 mo
573.641 157.219 li
@
649.719 176.66 mo
639.641 166.578 li
639.641 176.66 mo
649.719 166.578 li
@
gsave
36.359 27.84 mo
645.359 27.84 li
645.359 494.281 li
36.359 494.281 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
36.359 493.559 mo
112.32 462.961 li
188.398 401.398 li
264.48 339.961 li
340.559 279 li
416.52 221.398 li
492.602 157.32 li
568.68 99.84 li
644.641 35.879 li
@
grestore
31.238 488.539 mo
41.199 488.539 li
41.199 498.5 li
31.238 498.5 li
cp
@
107.32 457.82 mo
117.281 457.82 li
117.281 467.781 li
107.32 467.781 li
cp
@
183.398 396.262 mo
193.359 396.262 li
193.359 406.219 li
183.398 406.219 li
cp
@
259.359 334.82 mo
269.32 334.82 li
269.32 344.781 li
259.359 344.781 li
cp
@
335.441 273.859 mo
345.398 273.859 li
345.398 283.82 li
335.441 283.82 li
cp
@
411.52 216.379 mo
421.481 216.379 li
421.481 226.34 li
411.52 226.34 li
cp
@
487.48 152.18 mo
497.441 152.18 li
497.441 162.141 li
487.48 162.141 li
cp
@
563.559 94.82 mo
573.52 94.82 li
573.52 104.781 li
563.559 104.781 li
cp
@
639.641 30.859 mo
649.602 30.859 li
649.602 40.82 li
639.641 40.82 li
cp
@
16.289 484.316 mo
23.383 484.316 li
23.383 501.406 li
16.289 501.406 li
cp
0 0 0 0 cmyk
ef
22.652 497.27 mo
22.648 497.359 22.641 497.43 22.629 497.488 cv
22.613 497.551 22.594 497.602 22.574 497.633 cv
22.551 497.672 22.527 497.695 22.496 497.711 cv
22.465 497.727 22.434 497.734 22.406 497.734 cv
17.77 497.734 li
17.734 497.734 17.707 497.727 17.68 497.711 cv
17.652 497.695 17.625 497.672 17.602 497.633 cv
17.574 497.602 17.555 497.551 17.543 497.488 cv
17.527 497.43 17.52 497.359 17.523 497.27 cv
17.52 497.191 17.527 497.117 17.543 497.055 cv
17.555 496.996 17.57 496.949 17.594 496.91 cv
17.609 496.875 17.637 496.844 17.668 496.82 cv
17.699 496.801 17.73 496.793 17.77 496.789 cv
19.621 496.789 li
19.621 490.043 li
17.906 491.062 li
17.816 491.113 17.746 491.141 17.699 491.148 cv
17.645 491.156 17.602 491.148 17.57 491.117 cv
17.535 491.09 17.516 491.039 17.504 490.969 cv
17.492 490.902 17.484 490.816 17.488 490.707 cv
17.484 490.633 17.488 490.566 17.5 490.508 cv
17.504 490.457 17.516 490.41 17.531 490.371 cv
17.543 490.336 17.563 490.305 17.586 490.277 cv
17.609 490.25 17.641 490.223 17.688 490.195 cv
19.73 488.883 li
19.746 488.871 19.766 488.859 19.797 488.852 cv
19.82 488.844 19.855 488.836 19.902 488.824 cv
19.941 488.816 19.992 488.809 20.047 488.805 cv
20.102 488.805 20.168 488.805 20.254 488.801 cv
20.359 488.805 20.453 488.809 20.527 488.816 cv
20.598 488.824 20.652 488.84 20.699 488.855 cv
20.738 488.875 20.766 488.895 20.781 488.918 cv
20.789 488.945 20.797 488.969 20.801 488.992 cv
20.801 496.789 li
22.406 496.789 li
22.441 496.793 22.477 496.801 22.508 496.82 cv
22.539 496.844 22.563 496.875 22.586 496.91 cv
22.602 496.949 22.617 496.996 22.633 497.055 cv
22.641 497.117 22.648 497.191 22.652 497.27 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
16.289 453.27 mo
23.383 453.27 li
23.383 470.36 li
16.289 470.36 li
cp
0 0 0 0 cmyk
ef
22.633 466.172 mo
22.629 466.258 22.625 466.332 22.613 466.395 cv
22.602 466.461 22.586 466.516 22.566 466.555 cv
22.543 466.602 22.516 466.633 22.484 466.648 cv
22.449 466.672 22.41 466.68 22.371 466.68 cv
17.469 466.68 li
17.406 466.68 17.348 466.672 17.301 466.656 cv
17.25 466.641 17.211 466.617 17.176 466.578 cv
17.141 466.547 17.113 466.492 17.102 466.422 cv
17.082 466.352 17.074 466.266 17.078 466.164 cv
17.074 466.074 17.078 465.996 17.086 465.926 cv
17.09 465.859 17.105 465.801 17.133 465.746 cv
17.156 465.695 17.188 465.641 17.223 465.586 cv
17.258 465.535 17.301 465.48 17.359 465.418 cv
19.133 463.594 li
19.543 463.176 19.871 462.801 20.121 462.465 cv
20.367 462.137 20.559 461.832 20.691 461.555 cv
20.824 461.281 20.91 461.031 20.957 460.805 cv
20.996 460.582 21.02 460.371 21.02 460.176 cv
21.02 459.98 20.984 459.797 20.918 459.617 cv
20.852 459.445 20.758 459.289 20.633 459.152 cv
20.508 459.023 20.352 458.918 20.164 458.836 cv
19.977 458.762 19.758 458.723 19.512 458.719 cv
19.223 458.723 18.965 458.762 18.738 458.836 cv
18.508 458.918 18.309 459.004 18.137 459.09 cv
17.965 459.184 17.82 459.266 17.703 459.344 cv
17.586 459.422 17.5 459.461 17.449 459.461 cv
17.414 459.461 17.383 459.453 17.359 459.434 cv
17.328 459.418 17.309 459.387 17.293 459.344 cv
17.277 459.305 17.262 459.25 17.254 459.18 cv
17.242 459.113 17.238 459.031 17.242 458.934 cv
17.238 458.867 17.242 458.809 17.25 458.758 cv
17.254 458.707 17.262 458.664 17.273 458.625 cv
17.281 458.59 17.297 458.555 17.316 458.523 cv
17.336 458.492 17.371 458.453 17.43 458.402 cv
17.48 458.355 17.574 458.289 17.711 458.207 cv
17.844 458.125 18.016 458.047 18.219 457.965 cv
18.422 457.887 18.645 457.816 18.891 457.762 cv
19.133 457.707 19.391 457.68 19.664 457.68 cv
20.09 457.68 20.465 457.742 20.789 457.863 cv
21.109 457.984 21.375 458.148 21.59 458.359 cv
21.801 458.57 21.961 458.816 22.066 459.09 cv
22.172 459.371 22.227 459.668 22.227 459.98 cv
22.227 460.27 22.199 460.551 22.148 460.828 cv
22.098 461.113 21.992 461.418 21.832 461.742 cv
21.668 462.07 21.434 462.434 21.129 462.832 cv
20.82 463.234 20.414 463.695 19.91 464.211 cv
18.504 465.68 li
22.363 465.68 li
22.395 465.684 22.43 465.695 22.469 465.711 cv
22.5 465.734 22.531 465.766 22.559 465.805 cv
22.582 465.848 22.602 465.898 22.613 465.957 cv
22.625 466.023 22.629 466.094 22.633 466.172 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
16.289 422.219 mo
23.383 422.219 li
23.383 439.309 li
16.289 439.309 li
cp
0 0 0 0 cmyk
ef
22.563 433.086 mo
22.559 433.496 22.488 433.863 22.348 434.187 cv
22.203 434.516 22 434.797 21.738 435.027 cv
21.473 435.262 21.145 435.437 20.758 435.562 cv
20.367 435.687 19.93 435.75 19.445 435.75 cv
19.141 435.75 18.863 435.723 18.609 435.676 cv
18.348 435.629 18.117 435.578 17.922 435.508 cv
17.719 435.445 17.555 435.375 17.422 435.305 cv
17.289 435.234 17.203 435.184 17.172 435.148 cv
17.133 435.121 17.109 435.09 17.094 435.055 cv
17.074 435.023 17.055 434.984 17.043 434.937 cv
17.027 434.895 17.02 434.84 17.012 434.77 cv
17.004 434.707 17 434.625 17.004 434.523 cv
17 434.363 17.016 434.25 17.051 434.184 cv
17.082 434.121 17.129 434.086 17.191 434.086 cv
17.234 434.086 17.316 434.125 17.441 434.195 cv
17.563 434.273 17.723 434.352 17.918 434.434 cv
18.109 434.52 18.336 434.598 18.602 434.668 cv
18.859 434.742 19.152 434.777 19.473 434.777 cv
19.781 434.777 20.051 434.738 20.289 434.66 cv
20.52 434.582 20.719 434.473 20.879 434.332 cv
21.035 434.191 21.152 434.023 21.234 433.828 cv
21.313 433.633 21.352 433.422 21.355 433.195 cv
21.352 432.945 21.301 432.719 21.203 432.516 cv
21.098 432.316 20.949 432.145 20.758 431.996 cv
20.559 431.852 20.32 431.738 20.035 431.66 cv
19.75 431.582 19.426 431.543 19.063 431.543 cv
18.191 431.543 li
18.148 431.543 18.113 431.535 18.078 431.52 cv
18.043 431.504 18.012 431.477 17.988 431.437 cv
17.961 431.402 17.941 431.355 17.926 431.297 cv
17.91 431.238 17.902 431.16 17.902 431.062 cv
17.902 430.977 17.906 430.906 17.922 430.848 cv
17.93 430.793 17.949 430.746 17.98 430.711 cv
18.004 430.676 18.035 430.652 18.066 430.633 cv
18.098 430.621 18.133 430.613 18.176 430.609 cv
18.949 430.609 li
19.25 430.613 19.52 430.574 19.762 430.492 cv
19.996 430.418 20.199 430.305 20.371 430.156 cv
20.535 430.012 20.664 429.836 20.754 429.633 cv
20.844 429.43 20.891 429.203 20.891 428.949 cv
20.891 428.77 20.859 428.594 20.801 428.426 cv
20.738 428.262 20.648 428.117 20.531 427.992 cv
20.41 427.867 20.258 427.77 20.078 427.699 cv
19.891 427.629 19.68 427.594 19.438 427.594 cv
19.172 427.594 18.926 427.637 18.707 427.715 cv
18.48 427.797 18.285 427.883 18.113 427.973 cv
17.938 428.066 17.793 428.152 17.68 428.23 cv
17.566 428.312 17.484 428.352 17.441 428.348 cv
17.406 428.352 17.379 428.344 17.355 428.332 cv
17.328 428.32 17.309 428.297 17.293 428.262 cv
17.277 428.23 17.266 428.184 17.258 428.117 cv
17.25 428.059 17.246 427.977 17.25 427.875 cv
17.246 427.809 17.246 427.75 17.254 427.695 cv
17.254 427.645 17.266 427.598 17.281 427.555 cv
17.297 427.52 17.313 427.484 17.332 427.449 cv
17.348 427.422 17.379 427.383 17.422 427.336 cv
17.465 427.293 17.551 427.23 17.688 427.148 cv
17.816 427.066 17.98 426.988 18.176 426.906 cv
18.367 426.828 18.59 426.758 18.848 426.703 cv
19.098 426.648 19.371 426.621 19.668 426.621 cv
20.074 426.621 20.438 426.676 20.75 426.777 cv
21.063 426.887 21.32 427.035 21.531 427.223 cv
21.734 427.418 21.891 427.648 21.996 427.914 cv
22.098 428.184 22.148 428.477 22.152 428.801 cv
22.148 429.082 22.113 429.344 22.043 429.578 cv
21.969 429.82 21.859 430.031 21.719 430.215 cv
21.574 430.402 21.402 430.559 21.199 430.687 cv
20.992 430.82 20.754 430.914 20.484 430.961 cv
20.484 430.973 li
20.789 431.008 21.07 431.082 21.324 431.203 cv
21.578 431.324 21.797 431.477 21.98 431.66 cv
22.16 431.844 22.301 432.059 22.406 432.301 cv
22.508 432.547 22.559 432.809 22.563 433.086 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
16.289 391.172 mo
23.383 391.172 li
23.383 408.262 li
16.289 408.262 li
cp
0 0 0 0 cmyk
ef
23.008 402.047 mo
23.004 402.199 22.98 402.32 22.938 402.406 cv
22.891 402.496 22.828 402.539 22.746 402.535 cv
21.746 402.535 li
21.746 404.398 li
21.746 404.437 21.734 404.469 21.719 404.492 cv
21.695 404.52 21.664 404.539 21.621 404.559 cv
21.57 404.574 21.508 404.586 21.438 404.598 cv
21.359 404.605 21.266 404.609 21.148 404.613 cv
21.031 404.609 20.934 404.605 20.863 404.598 cv
20.785 404.586 20.727 404.574 20.684 404.559 cv
20.637 404.539 20.605 404.52 20.59 404.492 cv
20.57 404.469 20.563 404.437 20.566 404.398 cv
20.566 402.535 li
16.938 402.535 li
16.879 402.539 16.836 402.531 16.801 402.516 cv
16.766 402.504 16.73 402.477 16.703 402.437 cv
16.672 402.402 16.652 402.352 16.641 402.281 cv
16.629 402.215 16.625 402.125 16.625 402.012 cv
16.625 401.93 16.625 401.852 16.633 401.781 cv
16.633 401.711 16.645 401.648 16.66 401.594 cv
16.672 401.539 16.688 401.484 16.715 401.43 cv
16.734 401.375 16.762 401.32 16.797 401.258 cv
19.957 395.871 li
19.977 395.836 20.012 395.805 20.059 395.777 cv
20.102 395.75 20.156 395.727 20.23 395.707 cv
20.297 395.691 20.383 395.68 20.488 395.668 cv
20.59 395.664 20.711 395.66 20.852 395.656 cv
21 395.66 21.137 395.664 21.254 395.676 cv
21.367 395.687 21.457 395.703 21.531 395.719 cv
21.598 395.738 21.652 395.762 21.691 395.793 cv
21.727 395.824 21.746 395.859 21.746 395.898 cv
21.746 401.562 li
22.746 401.562 li
22.82 401.566 22.883 401.605 22.934 401.684 cv
22.98 401.766 23.004 401.887 23.008 402.047 cv
cp
20.566 396.695 mo
20.555 396.695 li
17.703 401.562 li
20.566 401.562 li
cp
.629236 .549432 .540154 .282963 cmyk
f
16.289 360.129 mo
23.383 360.129 li
23.383 377.219 li
16.289 377.219 li
cp
0 0 0 0 cmyk
ef
22.59 370.66 mo
22.59 371.137 22.508 371.559 22.348 371.93 cv
22.188 372.301 21.961 372.613 21.672 372.867 cv
21.375 373.121 21.027 373.316 20.625 373.445 cv
20.219 373.578 19.77 373.641 19.277 373.641 cv
19 373.641 18.738 373.621 18.496 373.582 cv
18.246 373.543 18.027 373.496 17.84 373.441 cv
17.645 373.387 17.488 373.332 17.363 373.273 cv
17.238 373.223 17.16 373.18 17.129 373.145 cv
17.094 373.113 17.07 373.082 17.059 373.055 cv
17.043 373.027 17.027 372.996 17.02 372.953 cv
17.004 372.918 16.996 372.867 16.996 372.805 cv
16.988 372.746 16.988 372.676 16.988 372.594 cv
16.988 372.52 16.992 372.449 17 372.387 cv
17.008 372.324 17.02 372.273 17.039 372.234 cv
17.055 372.195 17.074 372.168 17.102 372.148 cv
17.125 372.133 17.156 372.125 17.188 372.121 cv
17.234 372.125 17.305 372.152 17.398 372.207 cv
17.492 372.266 17.621 372.328 17.785 372.395 cv
17.949 372.461 18.148 372.523 18.391 372.582 cv
18.625 372.641 18.91 372.668 19.246 372.668 cv
19.547 372.668 19.828 372.633 20.086 372.559 cv
20.34 372.488 20.563 372.375 20.75 372.219 cv
20.934 372.066 21.078 371.871 21.184 371.633 cv
21.289 371.398 21.34 371.109 21.344 370.77 cv
21.34 370.488 21.297 370.238 21.207 370.02 cv
21.117 369.801 20.98 369.621 20.797 369.477 cv
20.609 369.336 20.375 369.23 20.094 369.156 cv
19.809 369.086 19.469 369.047 19.082 369.047 cv
18.797 369.047 18.559 369.062 18.359 369.09 cv
18.156 369.121 17.969 369.137 17.797 369.133 cv
17.668 369.137 17.574 369.105 17.523 369.043 cv
17.465 368.984 17.438 368.871 17.441 368.699 cv
17.441 365.086 li
17.438 364.937 17.473 364.828 17.547 364.75 cv
17.613 364.68 17.715 364.641 17.852 364.641 cv
21.781 364.641 li
21.816 364.641 21.852 364.652 21.887 364.672 cv
21.918 364.695 21.945 364.727 21.973 364.766 cv
21.992 364.809 22.008 364.859 22.023 364.922 cv
22.031 364.988 22.039 365.066 22.043 365.148 cv
22.039 365.316 22.016 365.441 21.977 365.531 cv
21.93 365.625 21.871 365.672 21.793 365.668 cv
18.621 365.668 li
18.621 368.156 li
18.773 368.137 18.93 368.125 19.094 368.117 cv
19.25 368.113 19.438 368.109 19.652 368.109 cv
20.137 368.109 20.563 368.172 20.93 368.293 cv
21.293 368.414 21.598 368.586 21.848 368.805 cv
22.09 369.031 22.277 369.297 22.402 369.609 cv
22.527 369.926 22.59 370.277 22.59 370.66 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
16.289 329.078 mo
23.383 329.078 li
23.383 346.172 li
16.289 346.172 li
cp
0 0 0 0 cmyk
ef
22.859 339.59 mo
22.859 339.98 22.797 340.359 22.68 340.719 cv
22.555 341.086 22.371 341.402 22.129 341.676 cv
21.879 341.953 21.566 342.176 21.191 342.34 cv
20.809 342.508 20.363 342.59 19.848 342.59 cv
19.477 342.59 19.148 342.547 18.867 342.453 cv
18.582 342.367 18.336 342.234 18.125 342.062 cv
17.914 341.895 17.738 341.687 17.602 341.441 cv
17.461 341.195 17.348 340.914 17.266 340.598 cv
17.18 340.285 17.121 339.941 17.086 339.562 cv
17.047 339.191 17.027 338.789 17.031 338.355 cv
17.027 337.977 17.047 337.594 17.09 337.203 cv
17.129 336.82 17.203 336.445 17.309 336.078 cv
17.414 335.719 17.559 335.379 17.738 335.062 cv
17.918 334.746 18.145 334.469 18.418 334.234 cv
18.691 334 19.016 333.812 19.395 333.672 cv
19.773 333.535 20.215 333.469 20.719 333.465 cv
20.887 333.469 21.059 333.477 21.23 333.496 cv
21.402 333.52 21.563 333.551 21.711 333.582 cv
21.859 333.621 21.98 333.656 22.082 333.695 cv
22.18 333.734 22.246 333.77 22.281 333.793 cv
22.309 333.82 22.332 333.848 22.352 333.875 cv
22.367 333.906 22.383 333.937 22.391 333.973 cv
22.398 334.008 22.402 334.047 22.41 334.09 cv
22.41 334.133 22.414 334.187 22.418 334.25 cv
22.414 334.336 22.414 334.406 22.414 334.461 cv
22.41 334.523 22.398 334.57 22.387 334.605 cv
22.367 334.645 22.348 334.672 22.324 334.687 cv
22.297 334.707 22.266 334.715 22.227 334.715 cv
22.176 334.715 22.105 334.699 22.02 334.668 cv
21.93 334.637 21.824 334.602 21.703 334.559 cv
21.578 334.523 21.43 334.488 21.254 334.453 cv
21.078 334.426 20.875 334.41 20.645 334.406 cv
20.215 334.41 19.848 334.496 19.543 334.668 cv
19.238 334.84 18.988 335.074 18.793 335.367 cv
18.598 335.66 18.453 336 18.363 336.383 cv
18.266 336.773 18.211 337.176 18.203 337.594 cv
18.32 337.527 18.457 337.461 18.605 337.391 cv
18.754 337.324 18.914 337.262 19.09 337.203 cv
19.266 337.152 19.453 337.105 19.648 337.07 cv
19.844 337.039 20.055 337.023 20.281 337.02 cv
20.758 337.023 21.16 337.09 21.492 337.215 cv
21.82 337.348 22.086 337.527 22.293 337.758 cv
22.492 337.988 22.637 338.258 22.727 338.57 cv
22.813 338.883 22.859 339.223 22.859 339.59 cv
cp
21.664 339.699 mo
21.664 339.437 21.637 339.195 21.586 338.977 cv
21.531 338.762 21.441 338.578 21.32 338.422 cv
21.195 338.273 21.031 338.156 20.828 338.074 cv
20.617 337.992 20.363 337.949 20.066 337.949 cv
19.895 337.949 19.727 337.965 19.559 337.996 cv
19.387 338.027 19.223 338.07 19.066 338.117 cv
18.906 338.172 18.758 338.234 18.617 338.305 cv
18.473 338.379 18.34 338.453 18.223 338.531 cv
18.219 339.125 18.258 339.621 18.336 340.016 cv
18.41 340.414 18.52 340.73 18.664 340.969 cv
18.809 341.211 18.988 341.383 19.203 341.484 cv
19.418 341.59 19.668 341.641 19.957 341.637 cv
20.246 341.641 20.5 341.586 20.715 341.473 cv
20.93 341.367 21.105 341.219 21.25 341.031 cv
21.391 340.848 21.496 340.641 21.563 340.41 cv
21.629 340.18 21.664 339.945 21.664 339.699 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
16.289 298.031 mo
23.383 298.031 li
23.383 315.121 li
16.289 315.121 li
cp
0 0 0 0 cmyk
ef
22.762 303.035 mo
22.758 303.121 22.754 303.195 22.75 303.258 cv
22.742 303.328 22.734 303.391 22.723 303.449 cv
22.711 303.516 22.695 303.574 22.676 303.629 cv
22.652 303.687 22.629 303.75 22.605 303.809 cv
19.41 311.172 li
19.383 311.23 19.355 311.273 19.324 311.305 cv
19.289 311.34 19.246 311.367 19.191 311.387 cv
19.137 311.406 19.066 311.418 18.988 311.43 cv
18.902 311.434 18.805 311.437 18.688 311.441 cv
18.531 311.437 18.41 311.43 18.324 311.418 cv
18.238 311.402 18.176 311.387 18.137 311.355 cv
18.098 311.328 18.078 311.289 18.086 311.246 cv
18.086 311.203 18.102 311.152 18.133 311.09 cv
21.492 303.562 li
17.234 303.562 li
17.148 303.566 17.082 303.52 17.039 303.426 cv
16.996 303.336 16.977 303.207 16.977 303.043 cv
16.977 302.957 16.98 302.883 16.992 302.816 cv
17.004 302.754 17.02 302.699 17.043 302.656 cv
17.063 302.613 17.09 302.582 17.125 302.559 cv
17.156 302.539 17.195 302.527 17.234 302.527 cv
22.406 302.527 li
22.465 302.527 22.52 302.535 22.57 302.551 cv
22.617 302.566 22.652 302.594 22.68 302.633 cv
22.703 302.672 22.723 302.727 22.738 302.789 cv
22.75 302.855 22.758 302.937 22.762 303.035 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
16.289 266.98 mo
23.383 266.98 li
23.383 284.07 li
16.289 284.07 li
cp
0 0 0 0 cmyk
ef
22.836 278.062 mo
22.836 278.449 22.766 278.793 22.629 279.09 cv
22.492 279.395 22.297 279.645 22.039 279.848 cv
21.781 280.055 21.461 280.211 21.082 280.312 cv
20.699 280.418 20.266 280.469 19.781 280.469 cv
19.32 280.469 18.91 280.422 18.551 280.328 cv
18.188 280.234 17.883 280.094 17.633 279.902 cv
17.383 279.719 17.191 279.488 17.059 279.211 cv
16.926 278.937 16.859 278.625 16.859 278.27 cv
16.859 277.996 16.902 277.738 16.996 277.504 cv
17.082 277.27 17.215 277.055 17.391 276.859 cv
17.559 276.664 17.77 276.48 18.023 276.305 cv
18.273 276.137 18.559 275.973 18.875 275.816 cv
18.602 275.676 18.359 275.527 18.148 275.367 cv
17.938 275.211 17.758 275.039 17.613 274.852 cv
17.465 274.668 17.355 274.473 17.281 274.262 cv
17.203 274.055 17.164 273.824 17.168 273.574 cv
17.164 273.266 17.219 272.973 17.336 272.699 cv
17.445 272.43 17.617 272.195 17.844 271.992 cv
18.07 271.793 18.355 271.633 18.707 271.516 cv
19.051 271.398 19.461 271.34 19.93 271.34 cv
20.375 271.34 20.762 271.395 21.09 271.5 cv
21.418 271.609 21.688 271.754 21.898 271.937 cv
22.109 272.125 22.266 272.344 22.371 272.594 cv
22.469 272.844 22.52 273.113 22.523 273.402 cv
22.52 273.637 22.48 273.863 22.41 274.074 cv
22.332 274.293 22.223 274.496 22.074 274.684 cv
21.926 274.879 21.746 275.059 21.535 275.223 cv
21.324 275.395 21.082 275.551 20.809 275.691 cv
21.129 275.855 21.414 276.02 21.672 276.187 cv
21.922 276.355 22.137 276.535 22.313 276.73 cv
22.48 276.926 22.609 277.133 22.703 277.348 cv
22.789 277.566 22.836 277.805 22.836 278.062 cv
cp
21.355 273.512 mo
21.352 273.324 21.32 273.148 21.254 272.992 cv
21.188 272.836 21.09 272.703 20.965 272.594 cv
20.836 272.484 20.676 272.402 20.488 272.344 cv
20.293 272.289 20.078 272.262 19.84 272.258 cv
19.344 272.262 18.969 272.371 18.719 272.594 cv
18.461 272.82 18.336 273.129 18.34 273.512 cv
18.336 273.691 18.367 273.855 18.43 274.008 cv
18.492 274.164 18.586 274.309 18.719 274.445 cv
18.844 274.582 19.008 274.715 19.211 274.844 cv
19.406 274.977 19.645 275.113 19.922 275.254 cv
20.383 275.02 20.738 274.758 20.984 274.465 cv
21.23 274.18 21.352 273.863 21.355 273.512 cv
cp
21.645 278.187 mo
21.641 277.98 21.602 277.789 21.527 277.617 cv
21.445 277.449 21.328 277.289 21.172 277.137 cv
21.016 276.988 20.816 276.844 20.582 276.703 cv
20.344 276.566 20.074 276.422 19.766 276.27 cv
19.477 276.414 19.223 276.555 19.008 276.695 cv
18.789 276.836 18.609 276.984 18.473 277.133 cv
18.332 277.289 18.227 277.445 18.156 277.609 cv
18.082 277.777 18.047 277.961 18.051 278.16 cv
18.047 278.605 18.199 278.949 18.508 279.187 cv
18.809 279.434 19.262 279.555 19.867 279.551 cv
20.449 279.555 20.895 279.434 21.195 279.184 cv
21.492 278.941 21.641 278.609 21.645 278.187 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
16.289 235.93 mo
23.383 235.93 li
23.383 253.02 li
16.289 253.02 li
cp
0 0 0 0 cmyk
ef
22.699 244.523 mo
22.695 244.91 22.672 245.297 22.629 245.687 cv
22.582 246.082 22.504 246.461 22.398 246.824 cv
22.285 247.187 22.141 247.527 21.957 247.844 cv
21.77 248.164 21.535 248.445 21.258 248.68 cv
20.973 248.922 20.637 249.105 20.254 249.238 cv
19.863 249.371 19.418 249.437 18.91 249.437 cv
18.711 249.437 18.52 249.422 18.336 249.398 cv
18.148 249.371 17.98 249.344 17.836 249.309 cv
17.684 249.273 17.559 249.234 17.461 249.191 cv
17.359 249.152 17.285 249.113 17.242 249.07 cv
17.195 249.031 17.164 248.977 17.145 248.902 cv
17.121 248.832 17.109 248.734 17.113 248.617 cv
17.109 248.516 17.113 248.437 17.121 248.379 cv
17.125 248.32 17.137 248.273 17.152 248.242 cv
17.168 248.211 17.188 248.191 17.211 248.176 cv
17.234 248.168 17.266 248.16 17.305 248.156 cv
17.352 248.16 17.422 248.176 17.516 248.207 cv
17.605 248.242 17.719 248.281 17.863 248.32 cv
18 248.363 18.164 248.402 18.352 248.434 cv
18.535 248.473 18.746 248.488 18.984 248.484 cv
19.426 248.488 19.805 248.402 20.125 248.23 cv
20.438 248.059 20.699 247.832 20.902 247.543 cv
21.105 247.258 21.254 246.922 21.355 246.539 cv
21.453 246.16 21.508 245.762 21.52 245.34 cv
21.273 245.484 20.984 245.609 20.648 245.715 cv
20.309 245.828 19.922 245.883 19.484 245.879 cv
18.992 245.883 18.578 245.816 18.242 245.68 cv
17.906 245.547 17.633 245.363 17.43 245.129 cv
17.223 244.898 17.078 244.621 16.992 244.297 cv
16.902 243.98 16.859 243.629 16.859 243.25 cv
16.859 242.859 16.914 242.488 17.031 242.129 cv
17.141 241.777 17.32 241.465 17.566 241.195 cv
17.805 240.926 18.113 240.711 18.492 240.551 cv
18.863 240.391 19.313 240.309 19.836 240.309 cv
20.203 240.309 20.527 240.355 20.816 240.449 cv
21.098 240.543 21.348 240.68 21.563 240.855 cv
21.77 241.031 21.949 241.242 22.098 241.492 cv
22.242 241.742 22.359 242.023 22.449 242.336 cv
22.535 242.652 22.598 242.996 22.641 243.363 cv
22.676 243.734 22.695 244.121 22.699 244.523 cv
cp
21.5 244.395 mo
21.5 243.812 21.461 243.32 21.383 242.918 cv
21.305 242.52 21.188 242.195 21.039 241.945 cv
20.887 241.699 20.703 241.52 20.484 241.41 cv
20.262 241.301 20.008 241.246 19.727 241.246 cv
19.422 241.246 19.168 241.301 18.961 241.41 cv
18.75 241.52 18.578 241.664 18.445 241.84 cv
18.309 242.023 18.207 242.227 18.145 242.453 cv
18.078 242.684 18.047 242.922 18.051 243.16 cv
18.047 243.434 18.078 243.68 18.137 243.898 cv
18.191 244.125 18.281 244.312 18.414 244.469 cv
18.539 244.625 18.707 244.746 18.914 244.832 cv
19.117 244.918 19.371 244.961 19.676 244.957 cv
20.016 244.961 20.348 244.91 20.672 244.805 cv
20.988 244.703 21.266 244.566 21.5 244.395 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
9.191 204.891 mo
23.382 204.891 li
23.382 221.981 li
9.191 221.981 li
cp
0 0 0 0 cmyk
ef
15.547 217.797 mo
15.543 217.887 15.535 217.957 15.523 218.016 cv
15.508 218.078 15.488 218.129 15.469 218.16 cv
15.445 218.199 15.422 218.223 15.391 218.238 cv
15.359 218.254 15.328 218.262 15.301 218.262 cv
10.664 218.262 li
10.629 218.262 10.602 218.254 10.574 218.238 cv
10.547 218.223 10.52 218.199 10.496 218.16 cv
10.469 218.129 10.449 218.078 10.438 218.016 cv
10.422 217.957 10.414 217.887 10.418 217.797 cv
10.414 217.719 10.422 217.645 10.438 217.582 cv
10.449 217.523 10.465 217.477 10.488 217.437 cv
10.504 217.402 10.531 217.371 10.563 217.348 cv
10.594 217.328 10.625 217.32 10.664 217.316 cv
12.516 217.316 li
12.516 210.57 li
10.801 211.59 li
10.711 211.641 10.641 211.668 10.594 211.676 cv
10.539 211.684 10.496 211.676 10.465 211.645 cv
10.43 211.617 10.41 211.566 10.398 211.496 cv
10.387 211.43 10.379 211.344 10.383 211.234 cv
10.379 211.16 10.383 211.094 10.395 211.035 cv
10.398 210.984 10.41 210.937 10.426 210.898 cv
10.438 210.863 10.457 210.832 10.48 210.805 cv
10.504 210.777 10.535 210.75 10.582 210.723 cv
12.625 209.41 li
12.641 209.398 12.66 209.387 12.691 209.379 cv
12.715 209.371 12.75 209.363 12.797 209.352 cv
12.836 209.344 12.887 209.336 12.941 209.332 cv
12.996 209.332 13.063 209.332 13.148 209.328 cv
13.254 209.332 13.348 209.336 13.422 209.344 cv
13.492 209.352 13.547 209.367 13.594 209.383 cv
13.633 209.402 13.66 209.422 13.676 209.445 cv
13.684 209.473 13.691 209.496 13.695 209.52 cv
13.695 217.316 li
15.301 217.316 li
15.336 217.32 15.371 217.328 15.402 217.348 cv
15.434 217.371 15.457 217.402 15.48 217.437 cv
15.496 217.477 15.512 217.523 15.527 217.582 cv
15.535 217.645 15.543 217.719 15.547 217.797 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.902 213.805 mo
22.898 214.488 22.848 215.109 22.742 215.672 cv
22.633 216.234 22.453 216.719 22.207 217.121 cv
21.953 217.527 21.625 217.84 21.227 218.059 cv
20.82 218.281 20.328 218.391 19.742 218.391 cv
19.184 218.391 18.711 218.293 18.332 218.094 cv
17.949 217.898 17.645 217.605 17.41 217.219 cv
17.176 216.832 17.008 216.359 16.914 215.793 cv
16.813 215.23 16.766 214.582 16.766 213.848 cv
16.766 213.176 16.82 212.555 16.93 211.988 cv
17.039 211.426 17.215 210.941 17.465 210.535 cv
17.707 210.133 18.031 209.82 18.438 209.594 cv
18.836 209.375 19.332 209.262 19.922 209.262 cv
20.48 209.262 20.953 209.363 21.336 209.559 cv
21.719 209.762 22.023 210.055 22.258 210.437 cv
22.488 210.828 22.656 211.301 22.754 211.863 cv
22.852 212.426 22.898 213.074 22.902 213.805 cv
cp
21.695 213.887 mo
21.691 213.445 21.676 213.047 21.648 212.695 cv
21.613 212.344 21.566 212.035 21.508 211.766 cv
21.441 211.496 21.363 211.266 21.266 211.07 cv
21.168 210.879 21.051 210.719 20.914 210.59 cv
20.773 210.465 20.613 210.371 20.441 210.312 cv
20.262 210.258 20.066 210.23 19.852 210.227 cv
19.461 210.23 19.145 210.32 18.906 210.504 cv
18.66 210.687 18.469 210.941 18.332 211.258 cv
18.191 211.578 18.098 211.949 18.047 212.379 cv
17.996 212.809 17.973 213.273 17.973 213.766 cv
17.973 214.43 18.004 214.992 18.074 215.453 cv
18.141 215.922 18.25 216.301 18.402 216.59 cv
18.547 216.887 18.738 217.098 18.969 217.227 cv
19.199 217.363 19.48 217.43 19.813 217.426 cv
20.066 217.43 20.289 217.391 20.484 217.305 cv
20.676 217.227 20.844 217.105 20.984 216.949 cv
21.125 216.797 21.238 216.613 21.332 216.398 cv
21.418 216.184 21.492 215.945 21.551 215.684 cv
21.602 215.426 21.641 215.145 21.664 214.84 cv
21.684 214.535 21.691 214.219 21.695 213.887 cv
cp
f
9.191 173.84 mo
23.382 173.84 li
23.382 190.93 li
9.191 190.93 li
cp
0 0 0 0 cmyk
ef
15.547 186.734 mo
15.543 186.824 15.535 186.895 15.523 186.953 cv
15.508 187.016 15.488 187.066 15.469 187.098 cv
15.445 187.137 15.422 187.16 15.391 187.176 cv
15.359 187.191 15.328 187.199 15.301 187.199 cv
10.664 187.199 li
10.629 187.199 10.602 187.191 10.574 187.176 cv
10.547 187.16 10.52 187.137 10.496 187.098 cv
10.469 187.066 10.449 187.016 10.438 186.953 cv
10.422 186.895 10.414 186.824 10.418 186.734 cv
10.414 186.656 10.422 186.582 10.438 186.52 cv
10.449 186.461 10.465 186.414 10.488 186.375 cv
10.504 186.34 10.531 186.309 10.563 186.285 cv
10.594 186.266 10.625 186.258 10.664 186.254 cv
12.516 186.254 li
12.516 179.508 li
10.801 180.527 li
10.711 180.578 10.641 180.605 10.594 180.613 cv
10.539 180.621 10.496 180.613 10.465 180.582 cv
10.43 180.555 10.41 180.504 10.398 180.434 cv
10.387 180.367 10.379 180.281 10.383 180.172 cv
10.379 180.098 10.383 180.031 10.395 179.973 cv
10.398 179.922 10.41 179.875 10.426 179.836 cv
10.438 179.801 10.457 179.77 10.48 179.742 cv
10.504 179.715 10.535 179.687 10.582 179.66 cv
12.625 178.348 li
12.641 178.336 12.66 178.324 12.691 178.316 cv
12.715 178.309 12.75 178.301 12.797 178.289 cv
12.836 178.281 12.887 178.273 12.941 178.27 cv
12.996 178.27 13.063 178.27 13.148 178.266 cv
13.254 178.27 13.348 178.273 13.422 178.281 cv
13.492 178.289 13.547 178.305 13.594 178.32 cv
13.633 178.34 13.66 178.359 13.676 178.383 cv
13.684 178.41 13.691 178.434 13.695 178.457 cv
13.695 186.254 li
15.301 186.254 li
15.336 186.258 15.371 186.266 15.402 186.285 cv
15.434 186.309 15.457 186.34 15.48 186.375 cv
15.496 186.414 15.512 186.461 15.527 186.52 cv
15.535 186.582 15.543 186.656 15.547 186.734 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.629 186.734 mo
22.625 186.824 22.617 186.895 22.605 186.953 cv
22.59 187.016 22.57 187.066 22.551 187.098 cv
22.527 187.137 22.504 187.16 22.473 187.176 cv
22.441 187.191 22.41 187.199 22.383 187.199 cv
17.746 187.199 li
17.711 187.199 17.684 187.191 17.656 187.176 cv
17.629 187.16 17.602 187.137 17.578 187.098 cv
17.551 187.066 17.531 187.016 17.52 186.953 cv
17.504 186.895 17.496 186.824 17.5 186.734 cv
17.496 186.656 17.504 186.582 17.52 186.52 cv
17.531 186.461 17.547 186.414 17.57 186.375 cv
17.586 186.34 17.613 186.309 17.645 186.285 cv
17.676 186.266 17.707 186.258 17.746 186.254 cv
19.598 186.254 li
19.598 179.508 li
17.883 180.527 li
17.793 180.578 17.723 180.605 17.676 180.613 cv
17.621 180.621 17.578 180.613 17.547 180.582 cv
17.512 180.555 17.492 180.504 17.48 180.434 cv
17.469 180.367 17.461 180.281 17.465 180.172 cv
17.461 180.098 17.465 180.031 17.477 179.973 cv
17.48 179.922 17.492 179.875 17.508 179.836 cv
17.52 179.801 17.539 179.77 17.563 179.742 cv
17.586 179.715 17.617 179.687 17.664 179.66 cv
19.707 178.348 li
19.723 178.336 19.742 178.324 19.773 178.316 cv
19.797 178.309 19.832 178.301 19.879 178.289 cv
19.918 178.281 19.969 178.273 20.023 178.27 cv
20.078 178.27 20.145 178.27 20.23 178.266 cv
20.336 178.27 20.43 178.273 20.504 178.281 cv
20.574 178.289 20.629 178.305 20.676 178.32 cv
20.715 178.34 20.742 178.359 20.758 178.383 cv
20.766 178.41 20.773 178.434 20.777 178.457 cv
20.777 186.254 li
22.383 186.254 li
22.418 186.258 22.453 186.266 22.484 186.285 cv
22.516 186.309 22.539 186.34 22.563 186.375 cv
22.578 186.414 22.594 186.461 22.609 186.52 cv
22.617 186.582 22.625 186.656 22.629 186.734 cv
cp
f
9.191 142.789 mo
23.382 142.789 li
23.382 159.879 li
9.191 159.879 li
cp
0 0 0 0 cmyk
ef
15.547 155.676 mo
15.543 155.766 15.535 155.836 15.523 155.895 cv
15.508 155.957 15.488 156.008 15.469 156.039 cv
15.445 156.078 15.422 156.102 15.391 156.117 cv
15.359 156.133 15.328 156.141 15.301 156.141 cv
10.664 156.141 li
10.629 156.141 10.602 156.133 10.574 156.117 cv
10.547 156.102 10.52 156.078 10.496 156.039 cv
10.469 156.008 10.449 155.957 10.438 155.895 cv
10.422 155.836 10.414 155.766 10.418 155.676 cv
10.414 155.598 10.422 155.523 10.438 155.461 cv
10.449 155.402 10.465 155.355 10.488 155.316 cv
10.504 155.281 10.531 155.25 10.563 155.227 cv
10.594 155.207 10.625 155.199 10.664 155.195 cv
12.516 155.195 li
12.516 148.449 li
10.801 149.469 li
10.711 149.52 10.641 149.547 10.594 149.555 cv
10.539 149.562 10.496 149.555 10.465 149.523 cv
10.43 149.496 10.41 149.445 10.398 149.375 cv
10.387 149.309 10.379 149.223 10.383 149.113 cv
10.379 149.039 10.383 148.973 10.395 148.914 cv
10.398 148.863 10.41 148.816 10.426 148.777 cv
10.438 148.742 10.457 148.711 10.48 148.684 cv
10.504 148.656 10.535 148.629 10.582 148.602 cv
12.625 147.289 li
12.641 147.277 12.66 147.266 12.691 147.258 cv
12.715 147.25 12.75 147.242 12.797 147.23 cv
12.836 147.223 12.887 147.215 12.941 147.211 cv
12.996 147.211 13.063 147.211 13.148 147.207 cv
13.254 147.211 13.348 147.215 13.422 147.223 cv
13.492 147.23 13.547 147.246 13.594 147.262 cv
13.633 147.281 13.66 147.301 13.676 147.324 cv
13.684 147.352 13.691 147.375 13.695 147.398 cv
13.695 155.195 li
15.301 155.195 li
15.336 155.199 15.371 155.207 15.402 155.227 cv
15.434 155.25 15.457 155.281 15.48 155.316 cv
15.496 155.355 15.512 155.402 15.527 155.461 cv
15.535 155.523 15.543 155.598 15.547 155.676 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.609 155.633 mo
22.605 155.719 22.602 155.793 22.59 155.855 cv
22.578 155.922 22.563 155.977 22.543 156.016 cv
22.52 156.062 22.492 156.094 22.461 156.109 cv
22.426 156.133 22.387 156.141 22.348 156.141 cv
17.445 156.141 li
17.383 156.141 17.324 156.133 17.277 156.117 cv
17.227 156.102 17.188 156.078 17.152 156.039 cv
17.117 156.008 17.09 155.953 17.078 155.883 cv
17.059 155.812 17.051 155.727 17.055 155.625 cv
17.051 155.535 17.055 155.457 17.063 155.387 cv
17.066 155.32 17.082 155.262 17.109 155.207 cv
17.133 155.156 17.164 155.102 17.199 155.047 cv
17.234 154.996 17.277 154.941 17.336 154.879 cv
19.109 153.055 li
19.52 152.637 19.848 152.262 20.098 151.926 cv
20.344 151.598 20.535 151.293 20.668 151.016 cv
20.801 150.742 20.887 150.492 20.934 150.266 cv
20.973 150.043 20.996 149.832 20.996 149.637 cv
20.996 149.441 20.961 149.258 20.895 149.078 cv
20.828 148.906 20.734 148.75 20.609 148.613 cv
20.484 148.484 20.328 148.379 20.141 148.297 cv
19.953 148.223 19.734 148.184 19.488 148.18 cv
19.199 148.184 18.941 148.223 18.715 148.297 cv
18.484 148.379 18.285 148.465 18.113 148.551 cv
17.941 148.645 17.797 148.727 17.68 148.805 cv
17.563 148.883 17.477 148.922 17.426 148.922 cv
17.391 148.922 17.359 148.914 17.336 148.895 cv
17.305 148.879 17.285 148.848 17.27 148.805 cv
17.254 148.766 17.238 148.711 17.23 148.641 cv
17.219 148.574 17.215 148.492 17.219 148.395 cv
17.215 148.328 17.219 148.27 17.227 148.219 cv
17.23 148.168 17.238 148.125 17.25 148.086 cv
17.258 148.051 17.273 148.016 17.293 147.984 cv
17.313 147.953 17.348 147.914 17.406 147.863 cv
17.457 147.816 17.551 147.75 17.688 147.668 cv
17.82 147.586 17.992 147.508 18.195 147.426 cv
18.398 147.348 18.621 147.277 18.867 147.223 cv
19.109 147.168 19.367 147.141 19.641 147.141 cv
20.066 147.141 20.441 147.203 20.766 147.324 cv
21.086 147.445 21.352 147.609 21.566 147.82 cv
21.777 148.031 21.938 148.277 22.043 148.551 cv
22.148 148.832 22.203 149.129 22.203 149.441 cv
22.203 149.73 22.176 150.012 22.125 150.289 cv
22.074 150.574 21.969 150.879 21.809 151.203 cv
21.645 151.531 21.41 151.895 21.105 152.293 cv
20.797 152.695 20.391 153.156 19.887 153.672 cv
18.48 155.141 li
22.34 155.141 li
22.371 155.145 22.406 155.156 22.445 155.172 cv
22.477 155.195 22.508 155.227 22.535 155.266 cv
22.559 155.309 22.578 155.359 22.59 155.418 cv
22.602 155.484 22.605 155.555 22.609 155.633 cv
cp
f
9.191 111.738 mo
23.382 111.738 li
23.382 128.828 li
9.191 128.828 li
cp
0 0 0 0 cmyk
ef
15.547 124.625 mo
15.543 124.715 15.535 124.785 15.523 124.844 cv
15.508 124.906 15.488 124.957 15.469 124.988 cv
15.445 125.027 15.422 125.051 15.391 125.066 cv
15.359 125.082 15.328 125.09 15.301 125.09 cv
10.664 125.09 li
10.629 125.09 10.602 125.082 10.574 125.066 cv
10.547 125.051 10.52 125.027 10.496 124.988 cv
10.469 124.957 10.449 124.906 10.438 124.844 cv
10.422 124.785 10.414 124.715 10.418 124.625 cv
10.414 124.547 10.422 124.473 10.438 124.41 cv
10.449 124.352 10.465 124.305 10.488 124.266 cv
10.504 124.23 10.531 124.199 10.563 124.176 cv
10.594 124.156 10.625 124.148 10.664 124.145 cv
12.516 124.145 li
12.516 117.398 li
10.801 118.418 li
10.711 118.469 10.641 118.496 10.594 118.504 cv
10.539 118.512 10.496 118.504 10.465 118.473 cv
10.43 118.445 10.41 118.395 10.398 118.324 cv
10.387 118.258 10.379 118.172 10.383 118.062 cv
10.379 117.988 10.383 117.922 10.395 117.863 cv
10.398 117.812 10.41 117.766 10.426 117.727 cv
10.438 117.691 10.457 117.66 10.48 117.633 cv
10.504 117.605 10.535 117.578 10.582 117.551 cv
12.625 116.238 li
12.641 116.227 12.66 116.215 12.691 116.207 cv
12.715 116.199 12.75 116.191 12.797 116.18 cv
12.836 116.172 12.887 116.164 12.941 116.16 cv
12.996 116.16 13.063 116.16 13.148 116.156 cv
13.254 116.16 13.348 116.164 13.422 116.172 cv
13.492 116.18 13.547 116.195 13.594 116.211 cv
13.633 116.23 13.66 116.25 13.676 116.273 cv
13.684 116.301 13.691 116.324 13.695 116.348 cv
13.695 124.145 li
15.301 124.145 li
15.336 124.148 15.371 124.156 15.402 124.176 cv
15.434 124.199 15.457 124.23 15.48 124.266 cv
15.496 124.305 15.512 124.352 15.527 124.41 cv
15.535 124.473 15.543 124.547 15.547 124.625 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.539 122.555 mo
22.535 122.965 22.465 123.332 22.324 123.656 cv
22.18 123.984 21.977 124.266 21.715 124.496 cv
21.449 124.73 21.121 124.906 20.734 125.031 cv
20.344 125.156 19.906 125.219 19.422 125.219 cv
19.117 125.219 18.84 125.191 18.586 125.145 cv
18.324 125.098 18.094 125.047 17.898 124.977 cv
17.695 124.914 17.531 124.844 17.398 124.773 cv
17.266 124.703 17.18 124.652 17.148 124.617 cv
17.109 124.59 17.086 124.559 17.07 124.523 cv
17.051 124.492 17.031 124.453 17.02 124.406 cv
17.004 124.363 16.996 124.309 16.988 124.238 cv
16.98 124.176 16.977 124.094 16.98 123.992 cv
16.977 123.832 16.992 123.719 17.027 123.652 cv
17.059 123.59 17.105 123.555 17.168 123.555 cv
17.211 123.555 17.293 123.594 17.418 123.664 cv
17.539 123.742 17.699 123.82 17.895 123.902 cv
18.086 123.988 18.313 124.066 18.578 124.137 cv
18.836 124.211 19.129 124.246 19.449 124.246 cv
19.758 124.246 20.027 124.207 20.266 124.129 cv
20.496 124.051 20.695 123.941 20.855 123.801 cv
21.012 123.66 21.129 123.492 21.211 123.297 cv
21.289 123.102 21.328 122.891 21.332 122.664 cv
21.328 122.414 21.277 122.187 21.18 121.984 cv
21.074 121.785 20.926 121.613 20.734 121.465 cv
20.535 121.32 20.297 121.207 20.012 121.129 cv
19.727 121.051 19.402 121.012 19.039 121.012 cv
18.168 121.012 li
18.125 121.012 18.09 121.004 18.055 120.988 cv
18.02 120.973 17.988 120.945 17.965 120.906 cv
17.938 120.871 17.918 120.824 17.902 120.766 cv
17.887 120.707 17.879 120.629 17.879 120.531 cv
17.879 120.445 17.883 120.375 17.898 120.316 cv
17.906 120.262 17.926 120.215 17.957 120.18 cv
17.98 120.145 18.012 120.121 18.043 120.102 cv
18.074 120.09 18.109 120.082 18.152 120.078 cv
18.926 120.078 li
19.227 120.082 19.496 120.043 19.738 119.961 cv
19.973 119.887 20.176 119.773 20.348 119.625 cv
20.512 119.48 20.641 119.305 20.73 119.102 cv
20.82 118.898 20.867 118.672 20.867 118.418 cv
20.867 118.238 20.836 118.062 20.777 117.895 cv
20.715 117.73 20.625 117.586 20.508 117.461 cv
20.387 117.336 20.234 117.238 20.055 117.168 cv
19.867 117.098 19.656 117.062 19.414 117.062 cv
19.148 117.062 18.902 117.105 18.684 117.184 cv
18.457 117.266 18.262 117.352 18.09 117.441 cv
17.914 117.535 17.77 117.621 17.656 117.699 cv
17.543 117.781 17.461 117.82 17.418 117.816 cv
17.383 117.82 17.355 117.812 17.332 117.801 cv
17.305 117.789 17.285 117.766 17.27 117.73 cv
17.254 117.699 17.242 117.652 17.234 117.586 cv
17.227 117.527 17.223 117.445 17.227 117.344 cv
17.223 117.277 17.223 117.219 17.23 117.164 cv
17.23 117.113 17.242 117.066 17.258 117.023 cv
17.273 116.988 17.289 116.953 17.309 116.918 cv
17.324 116.891 17.355 116.852 17.398 116.805 cv
17.441 116.762 17.527 116.699 17.664 116.617 cv
17.793 116.535 17.957 116.457 18.152 116.375 cv
18.344 116.297 18.566 116.227 18.824 116.172 cv
19.074 116.117 19.348 116.09 19.645 116.09 cv
20.051 116.09 20.414 116.145 20.727 116.246 cv
21.039 116.355 21.297 116.504 21.508 116.691 cv
21.711 116.887 21.867 117.117 21.973 117.383 cv
22.074 117.652 22.125 117.945 22.129 118.27 cv
22.125 118.551 22.09 118.812 22.02 119.047 cv
21.945 119.289 21.836 119.5 21.695 119.684 cv
21.551 119.871 21.379 120.027 21.176 120.156 cv
20.969 120.289 20.73 120.383 20.461 120.43 cv
20.461 120.441 li
20.766 120.477 21.047 120.551 21.301 120.672 cv
21.555 120.793 21.773 120.945 21.957 121.129 cv
22.137 121.312 22.277 121.527 22.383 121.77 cv
22.484 122.016 22.535 122.277 22.539 122.555 cv
cp
f
9.191 80.691 mo
23.382 80.691 li
23.382 97.781 li
9.191 97.781 li
cp
0 0 0 0 cmyk
ef
15.547 93.566 mo
15.543 93.656 15.535 93.727 15.523 93.785 cv
15.508 93.848 15.488 93.898 15.469 93.93 cv
15.445 93.969 15.422 93.992 15.391 94.008 cv
15.359 94.023 15.328 94.031 15.301 94.031 cv
10.664 94.031 li
10.629 94.031 10.602 94.023 10.574 94.008 cv
10.547 93.992 10.52 93.969 10.496 93.93 cv
10.469 93.898 10.449 93.848 10.438 93.785 cv
10.422 93.727 10.414 93.656 10.418 93.566 cv
10.414 93.488 10.422 93.414 10.438 93.352 cv
10.449 93.293 10.465 93.246 10.488 93.207 cv
10.504 93.172 10.531 93.141 10.563 93.117 cv
10.594 93.098 10.625 93.09 10.664 93.086 cv
12.516 93.086 li
12.516 86.34 li
10.801 87.359 li
10.711 87.41 10.641 87.437 10.594 87.445 cv
10.539 87.453 10.496 87.445 10.465 87.414 cv
10.43 87.387 10.41 87.336 10.398 87.266 cv
10.387 87.199 10.379 87.113 10.383 87.004 cv
10.379 86.93 10.383 86.863 10.395 86.805 cv
10.398 86.754 10.41 86.707 10.426 86.668 cv
10.438 86.633 10.457 86.602 10.48 86.574 cv
10.504 86.547 10.535 86.52 10.582 86.492 cv
12.625 85.18 li
12.641 85.168 12.66 85.156 12.691 85.148 cv
12.715 85.141 12.75 85.133 12.797 85.121 cv
12.836 85.113 12.887 85.105 12.941 85.102 cv
12.996 85.102 13.063 85.102 13.148 85.098 cv
13.254 85.102 13.348 85.105 13.422 85.113 cv
13.492 85.121 13.547 85.137 13.594 85.152 cv
13.633 85.172 13.66 85.191 13.676 85.215 cv
13.684 85.242 13.691 85.266 13.695 85.289 cv
13.695 93.086 li
15.301 93.086 li
15.336 93.09 15.371 93.098 15.402 93.117 cv
15.434 93.141 15.457 93.172 15.48 93.207 cv
15.496 93.246 15.512 93.293 15.527 93.352 cv
15.535 93.414 15.543 93.488 15.547 93.566 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.984 91.508 mo
22.98 91.66 22.957 91.781 22.914 91.867 cv
22.867 91.957 22.805 92 22.723 91.996 cv
21.723 91.996 li
21.723 93.859 li
21.723 93.898 21.711 93.93 21.695 93.953 cv
21.672 93.98 21.641 94 21.598 94.02 cv
21.547 94.035 21.484 94.047 21.414 94.059 cv
21.336 94.066 21.242 94.07 21.125 94.074 cv
21.008 94.07 20.91 94.066 20.84 94.059 cv
20.762 94.047 20.703 94.035 20.66 94.02 cv
20.613 94 20.582 93.98 20.566 93.953 cv
20.547 93.93 20.539 93.898 20.543 93.859 cv
20.543 91.996 li
16.914 91.996 li
16.855 92 16.813 91.992 16.777 91.977 cv
16.742 91.965 16.707 91.937 16.68 91.898 cv
16.648 91.863 16.629 91.812 16.617 91.742 cv
16.605 91.676 16.602 91.586 16.602 91.473 cv
16.602 91.391 16.602 91.312 16.609 91.242 cv
16.609 91.172 16.621 91.109 16.637 91.055 cv
16.648 91 16.664 90.945 16.691 90.891 cv
16.711 90.836 16.738 90.781 16.773 90.719 cv
19.934 85.332 li
19.953 85.297 19.988 85.266 20.035 85.238 cv
20.078 85.211 20.133 85.187 20.207 85.168 cv
20.273 85.152 20.359 85.141 20.465 85.129 cv
20.566 85.125 20.688 85.121 20.828 85.117 cv
20.977 85.121 21.113 85.125 21.23 85.137 cv
21.344 85.148 21.434 85.164 21.508 85.18 cv
21.574 85.199 21.629 85.223 21.668 85.254 cv
21.703 85.285 21.723 85.32 21.723 85.359 cv
21.723 91.023 li
22.723 91.023 li
22.797 91.027 22.859 91.066 22.91 91.145 cv
22.957 91.227 22.98 91.348 22.984 91.508 cv
cp
20.543 86.156 mo
20.531 86.156 li
17.68 91.023 li
20.543 91.023 li
cp
f
9.191 49.641 mo
23.382 49.641 li
23.382 66.731 li
9.191 66.731 li
cp
0 0 0 0 cmyk
ef
15.547 62.516 mo
15.543 62.605 15.535 62.676 15.523 62.734 cv
15.508 62.797 15.488 62.848 15.469 62.879 cv
15.445 62.918 15.422 62.941 15.391 62.957 cv
15.359 62.973 15.328 62.98 15.301 62.98 cv
10.664 62.98 li
10.629 62.98 10.602 62.973 10.574 62.957 cv
10.547 62.941 10.52 62.918 10.496 62.879 cv
10.469 62.848 10.449 62.797 10.438 62.734 cv
10.422 62.676 10.414 62.605 10.418 62.516 cv
10.414 62.437 10.422 62.363 10.438 62.301 cv
10.449 62.242 10.465 62.195 10.488 62.156 cv
10.504 62.121 10.531 62.09 10.563 62.066 cv
10.594 62.047 10.625 62.039 10.664 62.035 cv
12.516 62.035 li
12.516 55.289 li
10.801 56.309 li
10.711 56.359 10.641 56.387 10.594 56.395 cv
10.539 56.402 10.496 56.395 10.465 56.363 cv
10.43 56.336 10.41 56.285 10.398 56.215 cv
10.387 56.148 10.379 56.062 10.383 55.953 cv
10.379 55.879 10.383 55.812 10.395 55.754 cv
10.398 55.703 10.41 55.656 10.426 55.617 cv
10.438 55.582 10.457 55.551 10.48 55.523 cv
10.504 55.496 10.535 55.469 10.582 55.441 cv
12.625 54.129 li
12.641 54.117 12.66 54.105 12.691 54.098 cv
12.715 54.09 12.75 54.082 12.797 54.07 cv
12.836 54.062 12.887 54.055 12.941 54.051 cv
12.996 54.051 13.063 54.051 13.148 54.047 cv
13.254 54.051 13.348 54.055 13.422 54.062 cv
13.492 54.07 13.547 54.086 13.594 54.102 cv
13.633 54.121 13.66 54.141 13.676 54.164 cv
13.684 54.191 13.691 54.215 13.695 54.238 cv
13.695 62.035 li
15.301 62.035 li
15.336 62.039 15.371 62.047 15.402 62.066 cv
15.434 62.09 15.457 62.121 15.48 62.156 cv
15.496 62.195 15.512 62.242 15.527 62.301 cv
15.535 62.363 15.543 62.437 15.547 62.516 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.566 60.129 mo
22.566 60.605 22.484 61.027 22.324 61.398 cv
22.164 61.77 21.938 62.082 21.648 62.336 cv
21.352 62.59 21.004 62.785 20.602 62.914 cv
20.195 63.047 19.746 63.109 19.254 63.109 cv
18.977 63.109 18.715 63.09 18.473 63.051 cv
18.223 63.012 18.004 62.965 17.816 62.91 cv
17.621 62.855 17.465 62.801 17.34 62.742 cv
17.215 62.691 17.137 62.648 17.105 62.613 cv
17.07 62.582 17.047 62.551 17.035 62.523 cv
17.02 62.496 17.004 62.465 16.996 62.422 cv
16.98 62.387 16.973 62.336 16.973 62.273 cv
16.965 62.215 16.965 62.145 16.965 62.062 cv
16.965 61.988 16.969 61.918 16.977 61.855 cv
16.984 61.793 16.996 61.742 17.016 61.703 cv
17.031 61.664 17.051 61.637 17.078 61.617 cv
17.102 61.602 17.133 61.594 17.164 61.59 cv
17.211 61.594 17.281 61.621 17.375 61.676 cv
17.469 61.734 17.598 61.797 17.762 61.863 cv
17.926 61.93 18.125 61.992 18.367 62.051 cv
18.602 62.109 18.887 62.137 19.223 62.137 cv
19.523 62.137 19.805 62.102 20.063 62.027 cv
20.316 61.957 20.539 61.844 20.727 61.687 cv
20.91 61.535 21.055 61.34 21.16 61.102 cv
21.266 60.867 21.316 60.578 21.32 60.238 cv
21.316 59.957 21.273 59.707 21.184 59.488 cv
21.094 59.27 20.957 59.09 20.773 58.945 cv
20.586 58.805 20.352 58.699 20.07 58.625 cv
19.785 58.555 19.445 58.516 19.059 58.516 cv
18.773 58.516 18.535 58.531 18.336 58.559 cv
18.133 58.59 17.945 58.605 17.773 58.602 cv
17.645 58.605 17.551 58.574 17.5 58.512 cv
17.441 58.453 17.414 58.34 17.418 58.168 cv
17.418 54.555 li
17.414 54.406 17.449 54.297 17.523 54.219 cv
17.59 54.148 17.691 54.109 17.828 54.109 cv
21.758 54.109 li
21.793 54.109 21.828 54.121 21.863 54.141 cv
21.895 54.164 21.922 54.195 21.949 54.234 cv
21.969 54.277 21.984 54.328 22 54.391 cv
22.008 54.457 22.016 54.535 22.02 54.617 cv
22.016 54.785 21.992 54.91 21.953 55 cv
21.906 55.094 21.848 55.141 21.77 55.137 cv
18.598 55.137 li
18.598 57.625 li
18.75 57.605 18.906 57.594 19.07 57.586 cv
19.227 57.582 19.414 57.578 19.629 57.578 cv
20.113 57.578 20.539 57.641 20.906 57.762 cv
21.27 57.883 21.574 58.055 21.824 58.273 cv
22.066 58.5 22.254 58.766 22.379 59.078 cv
22.504 59.395 22.566 59.746 22.566 60.129 cv
cp
f
9.191 18.602 mo
23.382 18.602 li
23.382 35.692 li
9.191 35.692 li
cp
0 0 0 0 cmyk
ef
15.547 31.457 mo
15.543 31.547 15.535 31.617 15.523 31.676 cv
15.508 31.738 15.488 31.789 15.469 31.82 cv
15.445 31.859 15.422 31.883 15.391 31.898 cv
15.359 31.914 15.328 31.922 15.301 31.922 cv
10.664 31.922 li
10.629 31.922 10.602 31.914 10.574 31.898 cv
10.547 31.883 10.52 31.859 10.496 31.82 cv
10.469 31.789 10.449 31.738 10.438 31.676 cv
10.422 31.617 10.414 31.547 10.418 31.457 cv
10.414 31.379 10.422 31.305 10.438 31.242 cv
10.449 31.184 10.465 31.137 10.488 31.098 cv
10.504 31.062 10.531 31.031 10.563 31.008 cv
10.594 30.988 10.625 30.98 10.664 30.977 cv
12.516 30.977 li
12.516 24.23 li
10.801 25.25 li
10.711 25.301 10.641 25.328 10.594 25.336 cv
10.539 25.344 10.496 25.336 10.465 25.305 cv
10.43 25.277 10.41 25.227 10.398 25.156 cv
10.387 25.09 10.379 25.004 10.383 24.895 cv
10.379 24.82 10.383 24.754 10.395 24.695 cv
10.398 24.645 10.41 24.598 10.426 24.559 cv
10.438 24.523 10.457 24.492 10.48 24.465 cv
10.504 24.437 10.535 24.41 10.582 24.383 cv
12.625 23.07 li
12.641 23.059 12.66 23.047 12.691 23.039 cv
12.715 23.031 12.75 23.023 12.797 23.012 cv
12.836 23.004 12.887 22.996 12.941 22.992 cv
12.996 22.992 13.063 22.992 13.148 22.988 cv
13.254 22.992 13.348 22.996 13.422 23.004 cv
13.492 23.012 13.547 23.027 13.594 23.043 cv
13.633 23.062 13.66 23.082 13.676 23.105 cv
13.684 23.133 13.691 23.156 13.695 23.18 cv
13.695 30.977 li
15.301 30.977 li
15.336 30.98 15.371 30.988 15.402 31.008 cv
15.434 31.031 15.457 31.062 15.48 31.098 cv
15.496 31.137 15.512 31.184 15.527 31.242 cv
15.535 31.305 15.543 31.379 15.547 31.457 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.836 29.051 mo
22.836 29.441 22.773 29.82 22.656 30.18 cv
22.531 30.547 22.348 30.863 22.105 31.137 cv
21.855 31.414 21.543 31.637 21.168 31.801 cv
20.785 31.969 20.34 32.051 19.824 32.051 cv
19.453 32.051 19.125 32.008 18.844 31.914 cv
18.559 31.828 18.313 31.695 18.102 31.523 cv
17.891 31.355 17.715 31.148 17.578 30.902 cv
17.438 30.656 17.324 30.375 17.242 30.059 cv
17.156 29.746 17.098 29.402 17.063 29.023 cv
17.023 28.652 17.004 28.25 17.008 27.816 cv
17.004 27.437 17.023 27.055 17.066 26.664 cv
17.105 26.281 17.18 25.906 17.285 25.539 cv
17.391 25.18 17.535 24.84 17.715 24.523 cv
17.895 24.207 18.121 23.93 18.395 23.695 cv
18.668 23.461 18.992 23.273 19.371 23.133 cv
19.75 22.996 20.191 22.93 20.695 22.926 cv
20.863 22.93 21.035 22.937 21.207 22.957 cv
21.379 22.98 21.539 23.012 21.688 23.043 cv
21.836 23.082 21.957 23.117 22.059 23.156 cv
22.156 23.195 22.223 23.23 22.258 23.254 cv
22.285 23.281 22.309 23.309 22.328 23.336 cv
22.344 23.367 22.359 23.398 22.367 23.434 cv
22.375 23.469 22.379 23.508 22.387 23.551 cv
22.387 23.594 22.391 23.648 22.395 23.711 cv
22.391 23.797 22.391 23.867 22.391 23.922 cv
22.387 23.984 22.375 24.031 22.363 24.066 cv
22.344 24.105 22.324 24.133 22.301 24.148 cv
22.273 24.168 22.242 24.176 22.203 24.176 cv
22.152 24.176 22.082 24.16 21.996 24.129 cv
21.906 24.098 21.801 24.062 21.68 24.02 cv
21.555 23.984 21.406 23.949 21.23 23.914 cv
21.055 23.887 20.852 23.871 20.621 23.867 cv
20.191 23.871 19.824 23.957 19.52 24.129 cv
19.215 24.301 18.965 24.535 18.77 24.828 cv
18.574 25.121 18.43 25.461 18.34 25.844 cv
18.242 26.234 18.188 26.637 18.18 27.055 cv
18.297 26.988 18.434 26.922 18.582 26.852 cv
18.73 26.785 18.891 26.723 19.066 26.664 cv
19.242 26.613 19.43 26.566 19.625 26.531 cv
19.82 26.5 20.031 26.484 20.258 26.48 cv
20.734 26.484 21.137 26.551 21.469 26.676 cv
21.797 26.809 22.063 26.988 22.27 27.219 cv
22.469 27.449 22.613 27.719 22.703 28.031 cv
22.789 28.344 22.836 28.684 22.836 29.051 cv
cp
21.641 29.16 mo
21.641 28.898 21.613 28.656 21.563 28.437 cv
21.508 28.223 21.418 28.039 21.297 27.883 cv
21.172 27.734 21.008 27.617 20.805 27.535 cv
20.594 27.453 20.34 27.41 20.043 27.41 cv
19.871 27.41 19.703 27.426 19.535 27.457 cv
19.363 27.488 19.199 27.531 19.043 27.578 cv
18.883 27.633 18.734 27.695 18.594 27.766 cv
18.449 27.84 18.316 27.914 18.199 27.992 cv
18.195 28.586 18.234 29.082 18.313 29.477 cv
18.387 29.875 18.496 30.191 18.641 30.43 cv
18.785 30.672 18.965 30.844 19.18 30.945 cv
19.395 31.051 19.645 31.102 19.934 31.098 cv
20.223 31.102 20.477 31.047 20.691 30.934 cv
20.906 30.828 21.082 30.68 21.227 30.492 cv
21.367 30.309 21.473 30.102 21.539 29.871 cv
21.605 29.641 21.641 29.406 21.641 29.16 cv
cp
f
39.188 515.465 mo
39.184 515.555 39.176 515.625 39.164 515.684 cv
39.148 515.746 39.129 515.797 39.109 515.828 cv
39.086 515.867 39.063 515.891 39.031 515.906 cv
39 515.922 38.969 515.93 38.941 515.93 cv
34.305 515.93 li
34.27 515.93 34.242 515.922 34.215 515.906 cv
34.188 515.891 34.16 515.867 34.137 515.828 cv
34.109 515.797 34.09 515.746 34.078 515.684 cv
34.063 515.625 34.055 515.555 34.059 515.465 cv
34.055 515.387 34.063 515.312 34.078 515.25 cv
34.09 515.191 34.105 515.145 34.129 515.105 cv
34.145 515.07 34.172 515.039 34.203 515.016 cv
34.234 514.996 34.266 514.988 34.305 514.984 cv
36.156 514.984 li
36.156 508.238 li
34.441 509.258 li
34.352 509.309 34.281 509.336 34.234 509.344 cv
34.18 509.352 34.137 509.344 34.105 509.312 cv
34.07 509.285 34.051 509.234 34.039 509.164 cv
34.027 509.098 34.02 509.012 34.023 508.902 cv
34.02 508.828 34.023 508.762 34.035 508.703 cv
34.039 508.652 34.051 508.605 34.066 508.566 cv
34.078 508.531 34.098 508.5 34.121 508.473 cv
34.145 508.445 34.176 508.418 34.223 508.391 cv
36.266 507.078 li
36.281 507.066 36.301 507.055 36.332 507.047 cv
36.355 507.039 36.391 507.031 36.438 507.02 cv
36.477 507.012 36.527 507.004 36.582 507 cv
36.637 507 36.703 507 36.789 506.996 cv
36.895 507 36.988 507.004 37.063 507.012 cv
37.133 507.02 37.188 507.035 37.234 507.051 cv
37.273 507.07 37.301 507.09 37.316 507.113 cv
37.324 507.141 37.332 507.164 37.336 507.187 cv
37.336 514.984 li
38.941 514.984 li
38.977 514.988 39.012 514.996 39.043 515.016 cv
39.074 515.039 39.098 515.07 39.121 515.105 cv
39.137 515.145 39.152 515.191 39.168 515.25 cv
39.176 515.312 39.184 515.387 39.188 515.465 cv
cp
f
115.227 515.422 mo
115.223 515.508 115.219 515.582 115.207 515.645 cv
115.195 515.711 115.18 515.766 115.16 515.805 cv
115.137 515.852 115.109 515.883 115.078 515.898 cv
115.043 515.922 115.004 515.93 114.965 515.93 cv
110.063 515.93 li
110 515.93 109.941 515.922 109.895 515.906 cv
109.844 515.891 109.805 515.867 109.77 515.828 cv
109.734 515.797 109.707 515.742 109.695 515.672 cv
109.676 515.602 109.668 515.516 109.672 515.414 cv
109.668 515.324 109.672 515.246 109.68 515.176 cv
109.684 515.109 109.699 515.051 109.727 514.996 cv
109.75 514.945 109.781 514.891 109.816 514.836 cv
109.852 514.785 109.895 514.73 109.953 514.668 cv
111.727 512.844 li
112.137 512.426 112.465 512.051 112.715 511.715 cv
112.961 511.387 113.152 511.082 113.285 510.805 cv
113.418 510.531 113.504 510.281 113.551 510.055 cv
113.59 509.832 113.613 509.621 113.613 509.426 cv
113.613 509.23 113.578 509.047 113.512 508.867 cv
113.445 508.695 113.352 508.539 113.227 508.402 cv
113.102 508.273 112.945 508.168 112.758 508.086 cv
112.57 508.012 112.352 507.973 112.105 507.969 cv
111.816 507.973 111.559 508.012 111.332 508.086 cv
111.102 508.168 110.902 508.254 110.73 508.34 cv
110.559 508.434 110.414 508.516 110.297 508.594 cv
110.18 508.672 110.094 508.711 110.043 508.711 cv
110.008 508.711 109.977 508.703 109.953 508.684 cv
109.922 508.668 109.902 508.637 109.887 508.594 cv
109.871 508.555 109.855 508.5 109.848 508.43 cv
109.836 508.363 109.832 508.281 109.836 508.184 cv
109.832 508.117 109.836 508.059 109.844 508.008 cv
109.848 507.957 109.855 507.914 109.867 507.875 cv
109.875 507.84 109.891 507.805 109.91 507.773 cv
109.93 507.742 109.965 507.703 110.023 507.652 cv
110.074 507.605 110.168 507.539 110.305 507.457 cv
110.438 507.375 110.609 507.297 110.813 507.215 cv
111.016 507.137 111.238 507.066 111.484 507.012 cv
111.727 506.957 111.984 506.93 112.258 506.93 cv
112.684 506.93 113.059 506.992 113.383 507.113 cv
113.703 507.234 113.969 507.398 114.184 507.609 cv
114.395 507.82 114.555 508.066 114.66 508.34 cv
114.766 508.621 114.82 508.918 114.82 509.23 cv
114.82 509.52 114.793 509.801 114.742 510.078 cv
114.691 510.363 114.586 510.668 114.426 510.992 cv
114.262 511.32 114.027 511.684 113.723 512.082 cv
113.414 512.484 113.008 512.945 112.504 513.461 cv
111.098 514.93 li
114.957 514.93 li
114.988 514.934 115.023 514.945 115.063 514.961 cv
115.094 514.984 115.125 515.016 115.152 515.055 cv
115.176 515.098 115.195 515.148 115.207 515.207 cv
115.219 515.273 115.223 515.344 115.227 515.422 cv
cp
f
191.652 513.406 mo
191.648 513.559 191.625 513.68 191.582 513.766 cv
191.535 513.855 191.473 513.898 191.391 513.895 cv
190.391 513.895 li
190.391 515.758 li
190.391 515.797 190.379 515.828 190.363 515.852 cv
190.34 515.879 190.309 515.898 190.266 515.918 cv
190.215 515.934 190.152 515.945 190.082 515.957 cv
190.004 515.965 189.91 515.969 189.793 515.973 cv
189.676 515.969 189.578 515.965 189.508 515.957 cv
189.43 515.945 189.371 515.934 189.328 515.918 cv
189.281 515.898 189.25 515.879 189.234 515.852 cv
189.215 515.828 189.207 515.797 189.211 515.758 cv
189.211 513.895 li
185.582 513.895 li
185.523 513.898 185.48 513.891 185.445 513.875 cv
185.41 513.863 185.375 513.836 185.348 513.797 cv
185.316 513.762 185.297 513.711 185.285 513.641 cv
185.273 513.574 185.27 513.484 185.27 513.371 cv
185.27 513.289 185.27 513.211 185.277 513.141 cv
185.277 513.07 185.289 513.008 185.305 512.953 cv
185.316 512.898 185.332 512.844 185.359 512.789 cv
185.379 512.734 185.406 512.68 185.441 512.617 cv
188.602 507.23 li
188.621 507.195 188.656 507.164 188.703 507.137 cv
188.746 507.109 188.801 507.086 188.875 507.066 cv
188.941 507.051 189.027 507.039 189.133 507.027 cv
189.234 507.023 189.355 507.02 189.496 507.016 cv
189.645 507.02 189.781 507.023 189.898 507.035 cv
190.012 507.047 190.102 507.062 190.176 507.078 cv
190.242 507.098 190.297 507.121 190.336 507.152 cv
190.371 507.184 190.391 507.219 190.391 507.258 cv
190.391 512.922 li
191.391 512.922 li
191.465 512.926 191.527 512.965 191.578 513.043 cv
191.625 513.125 191.648 513.246 191.652 513.406 cv
cp
189.211 508.055 mo
189.199 508.055 li
186.348 512.922 li
189.211 512.922 li
cp
f
267.563 513.059 mo
267.563 513.449 267.5 513.828 267.383 514.187 cv
267.258 514.555 267.074 514.871 266.832 515.145 cv
266.582 515.422 266.27 515.645 265.895 515.809 cv
265.512 515.977 265.066 516.059 264.551 516.059 cv
264.18 516.059 263.852 516.016 263.57 515.922 cv
263.285 515.836 263.039 515.703 262.828 515.531 cv
262.617 515.363 262.441 515.156 262.305 514.91 cv
262.164 514.664 262.051 514.383 261.969 514.066 cv
261.883 513.754 261.824 513.41 261.789 513.031 cv
261.75 512.66 261.73 512.258 261.734 511.824 cv
261.73 511.445 261.75 511.062 261.793 510.672 cv
261.832 510.289 261.906 509.914 262.012 509.547 cv
262.117 509.187 262.262 508.848 262.441 508.531 cv
262.621 508.215 262.848 507.937 263.121 507.703 cv
263.395 507.469 263.719 507.281 264.098 507.141 cv
264.477 507.004 264.918 506.937 265.422 506.934 cv
265.59 506.937 265.762 506.945 265.934 506.965 cv
266.105 506.988 266.266 507.02 266.414 507.051 cv
266.563 507.09 266.684 507.125 266.785 507.164 cv
266.883 507.203 266.949 507.238 266.984 507.262 cv
267.012 507.289 267.035 507.316 267.055 507.344 cv
267.07 507.375 267.086 507.406 267.094 507.441 cv
267.102 507.477 267.105 507.516 267.113 507.559 cv
267.113 507.602 267.117 507.656 267.121 507.719 cv
267.117 507.805 267.117 507.875 267.117 507.93 cv
267.113 507.992 267.102 508.039 267.09 508.074 cv
267.07 508.113 267.051 508.141 267.027 508.156 cv
267 508.176 266.969 508.184 266.93 508.184 cv
266.879 508.184 266.809 508.168 266.723 508.137 cv
266.633 508.105 266.527 508.07 266.406 508.027 cv
266.281 507.992 266.133 507.957 265.957 507.922 cv
265.781 507.895 265.578 507.879 265.348 507.875 cv
264.918 507.879 264.551 507.965 264.246 508.137 cv
263.941 508.309 263.691 508.543 263.496 508.836 cv
263.301 509.129 263.156 509.469 263.066 509.852 cv
262.969 510.242 262.914 510.645 262.906 511.062 cv
263.023 510.996 263.16 510.93 263.309 510.859 cv
263.457 510.793 263.617 510.73 263.793 510.672 cv
263.969 510.621 264.156 510.574 264.352 510.539 cv
264.547 510.508 264.758 510.492 264.984 510.488 cv
265.461 510.492 265.863 510.559 266.195 510.684 cv
266.523 510.816 266.789 510.996 266.996 511.227 cv
267.195 511.457 267.34 511.727 267.43 512.039 cv
267.516 512.352 267.563 512.691 267.563 513.059 cv
cp
266.367 513.168 mo
266.367 512.906 266.34 512.664 266.289 512.445 cv
266.234 512.23 266.145 512.047 266.023 511.891 cv
265.898 511.742 265.734 511.625 265.531 511.543 cv
265.32 511.461 265.066 511.418 264.77 511.418 cv
264.598 511.418 264.43 511.434 264.262 511.465 cv
264.09 511.496 263.926 511.539 263.77 511.586 cv
263.609 511.641 263.461 511.703 263.32 511.773 cv
263.176 511.848 263.043 511.922 262.926 512 cv
262.922 512.594 262.961 513.09 263.039 513.484 cv
263.113 513.883 263.223 514.199 263.367 514.437 cv
263.512 514.68 263.691 514.852 263.906 514.953 cv
264.121 515.059 264.371 515.109 264.66 515.105 cv
264.949 515.109 265.203 515.055 265.418 514.941 cv
265.633 514.836 265.809 514.687 265.953 514.5 cv
266.094 514.316 266.199 514.109 266.266 513.879 cv
266.332 513.648 266.367 513.414 266.367 513.168 cv
cp
f
343.598 513.652 mo
343.598 514.039 343.527 514.383 343.391 514.68 cv
343.254 514.984 343.059 515.234 342.801 515.437 cv
342.543 515.645 342.223 515.801 341.844 515.902 cv
341.461 516.008 341.027 516.059 340.543 516.059 cv
340.082 516.059 339.672 516.012 339.313 515.918 cv
338.949 515.824 338.645 515.684 338.395 515.492 cv
338.145 515.309 337.953 515.078 337.82 514.801 cv
337.688 514.527 337.621 514.215 337.621 513.859 cv
337.621 513.586 337.664 513.328 337.758 513.094 cv
337.844 512.859 337.977 512.645 338.152 512.449 cv
338.32 512.254 338.531 512.07 338.785 511.895 cv
339.035 511.727 339.32 511.562 339.637 511.406 cv
339.363 511.266 339.121 511.117 338.91 510.957 cv
338.699 510.801 338.52 510.629 338.375 510.441 cv
338.227 510.258 338.117 510.062 338.043 509.852 cv
337.965 509.645 337.926 509.414 337.93 509.164 cv
337.926 508.855 337.98 508.562 338.098 508.289 cv
338.207 508.02 338.379 507.785 338.605 507.582 cv
338.832 507.383 339.117 507.223 339.469 507.105 cv
339.813 506.988 340.223 506.93 340.691 506.93 cv
341.137 506.93 341.523 506.984 341.852 507.09 cv
342.18 507.199 342.449 507.344 342.66 507.527 cv
342.871 507.715 343.027 507.934 343.133 508.184 cv
343.23 508.434 343.281 508.703 343.285 508.992 cv
343.281 509.227 343.242 509.453 343.172 509.664 cv
343.094 509.883 342.984 510.086 342.836 510.273 cv
342.688 510.469 342.508 510.648 342.297 510.812 cv
342.086 510.984 341.844 511.141 341.57 511.281 cv
341.891 511.445 342.176 511.609 342.434 511.777 cv
342.684 511.945 342.898 512.125 343.074 512.32 cv
343.242 512.516 343.371 512.723 343.465 512.937 cv
343.551 513.156 343.598 513.395 343.598 513.652 cv
cp
342.117 509.102 mo
342.113 508.914 342.082 508.738 342.016 508.582 cv
341.949 508.426 341.852 508.293 341.727 508.184 cv
341.598 508.074 341.438 507.992 341.25 507.934 cv
341.055 507.879 340.84 507.852 340.602 507.848 cv
340.105 507.852 339.73 507.961 339.48 508.184 cv
339.223 508.41 339.098 508.719 339.102 509.102 cv
339.098 509.281 339.129 509.445 339.191 509.598 cv
339.254 509.754 339.348 509.898 339.48 510.035 cv
339.605 510.172 339.77 510.305 339.973 510.434 cv
340.168 510.566 340.406 510.703 340.684 510.844 cv
341.145 510.609 341.5 510.348 341.746 510.055 cv
341.992 509.77 342.113 509.453 342.117 509.102 cv
cp
342.406 513.777 mo
342.402 513.57 342.363 513.379 342.289 513.207 cv
342.207 513.039 342.09 512.879 341.934 512.727 cv
341.777 512.578 341.578 512.434 341.344 512.293 cv
341.105 512.156 340.836 512.012 340.527 511.859 cv
340.238 512.004 339.984 512.145 339.77 512.285 cv
339.551 512.426 339.371 512.574 339.234 512.723 cv
339.094 512.879 338.988 513.035 338.918 513.199 cv
338.844 513.367 338.809 513.551 338.813 513.75 cv
338.809 514.195 338.961 514.539 339.27 514.777 cv
339.57 515.023 340.023 515.145 340.629 515.141 cv
341.211 515.145 341.656 515.023 341.957 514.773 cv
342.254 514.531 342.402 514.199 342.406 513.777 cv
cp
f
415.914 515.465 mo
415.91 515.555 415.902 515.625 415.891 515.684 cv
415.875 515.746 415.855 515.797 415.836 515.828 cv
415.813 515.867 415.789 515.891 415.758 515.906 cv
415.727 515.922 415.695 515.93 415.668 515.93 cv
411.031 515.93 li
410.996 515.93 410.969 515.922 410.941 515.906 cv
410.914 515.891 410.887 515.867 410.863 515.828 cv
410.836 515.797 410.816 515.746 410.805 515.684 cv
410.789 515.625 410.781 515.555 410.785 515.465 cv
410.781 515.387 410.789 515.312 410.805 515.25 cv
410.816 515.191 410.832 515.145 410.855 515.105 cv
410.871 515.07 410.898 515.039 410.93 515.016 cv
410.961 514.996 410.992 514.988 411.031 514.984 cv
412.883 514.984 li
412.883 508.238 li
411.168 509.258 li
411.078 509.309 411.008 509.336 410.961 509.344 cv
410.906 509.352 410.863 509.344 410.832 509.312 cv
410.797 509.285 410.777 509.234 410.766 509.164 cv
410.754 509.098 410.746 509.012 410.75 508.902 cv
410.746 508.828 410.75 508.762 410.762 508.703 cv
410.766 508.652 410.777 508.605 410.793 508.566 cv
410.805 508.531 410.824 508.5 410.848 508.473 cv
410.871 508.445 410.902 508.418 410.949 508.391 cv
412.992 507.078 li
413.008 507.066 413.027 507.055 413.059 507.047 cv
413.082 507.039 413.117 507.031 413.164 507.02 cv
413.203 507.012 413.254 507.004 413.309 507 cv
413.363 507 413.43 507 413.516 506.996 cv
413.621 507 413.715 507.004 413.789 507.012 cv
413.859 507.02 413.914 507.035 413.961 507.051 cv
414 507.07 414.027 507.09 414.043 507.113 cv
414.051 507.141 414.059 507.164 414.063 507.187 cv
414.063 514.984 li
415.668 514.984 li
415.703 514.988 415.738 514.996 415.77 515.016 cv
415.801 515.039 415.824 515.07 415.848 515.105 cv
415.863 515.145 415.879 515.191 415.895 515.25 cv
415.902 515.312 415.91 515.387 415.914 515.465 cv
cp
f
423.27 511.473 mo
423.266 512.156 423.215 512.777 423.109 513.34 cv
423 513.902 422.82 514.387 422.574 514.789 cv
422.32 515.195 421.992 515.508 421.594 515.727 cv
421.188 515.949 420.695 516.059 420.109 516.059 cv
419.551 516.059 419.078 515.961 418.699 515.762 cv
418.316 515.566 418.012 515.273 417.777 514.887 cv
417.543 514.5 417.375 514.027 417.281 513.461 cv
417.18 512.898 417.133 512.25 417.133 511.516 cv
417.133 510.844 417.188 510.223 417.297 509.656 cv
417.406 509.094 417.582 508.609 417.832 508.203 cv
418.074 507.801 418.398 507.488 418.805 507.262 cv
419.203 507.043 419.699 506.93 420.289 506.93 cv
420.848 506.93 421.32 507.031 421.703 507.227 cv
422.086 507.43 422.391 507.723 422.625 508.105 cv
422.855 508.496 423.023 508.969 423.121 509.531 cv
423.219 510.094 423.266 510.742 423.27 511.473 cv
cp
422.063 511.555 mo
422.059 511.113 422.043 510.715 422.016 510.363 cv
421.98 510.012 421.934 509.703 421.875 509.434 cv
421.809 509.164 421.73 508.934 421.633 508.738 cv
421.535 508.547 421.418 508.387 421.281 508.258 cv
421.141 508.133 420.98 508.039 420.809 507.98 cv
420.629 507.926 420.434 507.898 420.219 507.895 cv
419.828 507.898 419.512 507.988 419.273 508.172 cv
419.027 508.355 418.836 508.609 418.699 508.926 cv
418.559 509.246 418.465 509.617 418.414 510.047 cv
418.363 510.477 418.34 510.941 418.34 511.434 cv
418.34 512.098 418.371 512.66 418.441 513.121 cv
418.508 513.59 418.617 513.969 418.77 514.258 cv
418.914 514.555 419.105 514.766 419.336 514.895 cv
419.566 515.031 419.848 515.098 420.18 515.094 cv
420.434 515.098 420.656 515.059 420.852 514.973 cv
421.043 514.895 421.211 514.773 421.352 514.617 cv
421.492 514.465 421.605 514.281 421.699 514.066 cv
421.785 513.852 421.859 513.613 421.918 513.352 cv
421.969 513.094 422.008 512.812 422.031 512.508 cv
422.051 512.203 422.059 511.887 422.063 511.555 cv
cp
f
491.977 515.465 mo
491.973 515.555 491.965 515.625 491.953 515.684 cv
491.938 515.746 491.918 515.797 491.898 515.828 cv
491.875 515.867 491.852 515.891 491.82 515.906 cv
491.789 515.922 491.758 515.93 491.73 515.93 cv
487.094 515.93 li
487.059 515.93 487.031 515.922 487.004 515.906 cv
486.977 515.891 486.949 515.867 486.926 515.828 cv
486.898 515.797 486.879 515.746 486.867 515.684 cv
486.852 515.625 486.844 515.555 486.848 515.465 cv
486.844 515.387 486.852 515.312 486.867 515.25 cv
486.879 515.191 486.895 515.145 486.918 515.105 cv
486.934 515.07 486.961 515.039 486.992 515.016 cv
487.023 514.996 487.055 514.988 487.094 514.984 cv
488.945 514.984 li
488.945 508.238 li
487.23 509.258 li
487.141 509.309 487.07 509.336 487.023 509.344 cv
486.969 509.352 486.926 509.344 486.895 509.312 cv
486.859 509.285 486.84 509.234 486.828 509.164 cv
486.816 509.098 486.809 509.012 486.813 508.902 cv
486.809 508.828 486.813 508.762 486.824 508.703 cv
486.828 508.652 486.84 508.605 486.855 508.566 cv
486.867 508.531 486.887 508.5 486.91 508.473 cv
486.934 508.445 486.965 508.418 487.012 508.391 cv
489.055 507.078 li
489.07 507.066 489.09 507.055 489.121 507.047 cv
489.145 507.039 489.18 507.031 489.227 507.02 cv
489.266 507.012 489.316 507.004 489.371 507 cv
489.426 507 489.492 507 489.578 506.996 cv
489.684 507 489.777 507.004 489.852 507.012 cv
489.922 507.02 489.977 507.035 490.023 507.051 cv
490.063 507.07 490.09 507.09 490.105 507.113 cv
490.113 507.141 490.121 507.164 490.125 507.187 cv
490.125 514.984 li
491.73 514.984 li
491.766 514.988 491.801 514.996 491.832 515.016 cv
491.863 515.039 491.887 515.07 491.91 515.105 cv
491.926 515.145 491.941 515.191 491.957 515.25 cv
491.965 515.312 491.973 515.387 491.977 515.465 cv
cp
f
499.035 515.422 mo
499.031 515.508 499.027 515.582 499.016 515.645 cv
499.004 515.711 498.988 515.766 498.969 515.805 cv
498.945 515.852 498.918 515.883 498.887 515.898 cv
498.852 515.922 498.813 515.93 498.773 515.93 cv
493.871 515.93 li
493.809 515.93 493.75 515.922 493.703 515.906 cv
493.652 515.891 493.613 515.867 493.578 515.828 cv
493.543 515.797 493.516 515.742 493.504 515.672 cv
493.484 515.602 493.477 515.516 493.48 515.414 cv
493.477 515.324 493.48 515.246 493.488 515.176 cv
493.492 515.109 493.508 515.051 493.535 514.996 cv
493.559 514.945 493.59 514.891 493.625 514.836 cv
493.66 514.785 493.703 514.73 493.762 514.668 cv
495.535 512.844 li
495.945 512.426 496.273 512.051 496.523 511.715 cv
496.77 511.387 496.961 511.082 497.094 510.805 cv
497.227 510.531 497.313 510.281 497.359 510.055 cv
497.398 509.832 497.422 509.621 497.422 509.426 cv
497.422 509.23 497.387 509.047 497.32 508.867 cv
497.254 508.695 497.16 508.539 497.035 508.402 cv
496.91 508.273 496.754 508.168 496.566 508.086 cv
496.379 508.012 496.16 507.973 495.914 507.969 cv
495.625 507.973 495.367 508.012 495.141 508.086 cv
494.91 508.168 494.711 508.254 494.539 508.34 cv
494.367 508.434 494.223 508.516 494.105 508.594 cv
493.988 508.672 493.902 508.711 493.852 508.711 cv
493.816 508.711 493.785 508.703 493.762 508.684 cv
493.73 508.668 493.711 508.637 493.695 508.594 cv
493.68 508.555 493.664 508.5 493.656 508.43 cv
493.645 508.363 493.641 508.281 493.645 508.184 cv
493.641 508.117 493.645 508.059 493.652 508.008 cv
493.656 507.957 493.664 507.914 493.676 507.875 cv
493.684 507.84 493.699 507.805 493.719 507.773 cv
493.738 507.742 493.773 507.703 493.832 507.652 cv
493.883 507.605 493.977 507.539 494.113 507.457 cv
494.246 507.375 494.418 507.297 494.621 507.215 cv
494.824 507.137 495.047 507.066 495.293 507.012 cv
495.535 506.957 495.793 506.93 496.066 506.93 cv
496.492 506.93 496.867 506.992 497.191 507.113 cv
497.512 507.234 497.777 507.398 497.992 507.609 cv
498.203 507.82 498.363 508.066 498.469 508.34 cv
498.574 508.621 498.629 508.918 498.629 509.23 cv
498.629 509.52 498.602 509.801 498.551 510.078 cv
498.5 510.363 498.395 510.668 498.234 510.992 cv
498.07 511.32 497.836 511.684 497.531 512.082 cv
497.223 512.484 496.816 512.945 496.313 513.461 cv
494.906 514.93 li
498.766 514.93 li
498.797 514.934 498.832 514.945 498.871 514.961 cv
498.902 514.984 498.934 515.016 498.961 515.055 cv
498.984 515.098 499.004 515.148 499.016 515.207 cv
499.027 515.273 499.031 515.344 499.035 515.422 cv
cp
f
568.004 515.465 mo
568 515.555 567.992 515.625 567.98 515.684 cv
567.965 515.746 567.945 515.797 567.926 515.828 cv
567.902 515.867 567.879 515.891 567.848 515.906 cv
567.816 515.922 567.785 515.93 567.758 515.93 cv
563.121 515.93 li
563.086 515.93 563.059 515.922 563.031 515.906 cv
563.004 515.891 562.977 515.867 562.953 515.828 cv
562.926 515.797 562.906 515.746 562.895 515.684 cv
562.879 515.625 562.871 515.555 562.875 515.465 cv
562.871 515.387 562.879 515.312 562.895 515.25 cv
562.906 515.191 562.922 515.145 562.945 515.105 cv
562.961 515.07 562.988 515.039 563.02 515.016 cv
563.051 514.996 563.082 514.988 563.121 514.984 cv
564.973 514.984 li
564.973 508.238 li
563.258 509.258 li
563.168 509.309 563.098 509.336 563.051 509.344 cv
562.996 509.352 562.953 509.344 562.922 509.312 cv
562.887 509.285 562.867 509.234 562.855 509.164 cv
562.844 509.098 562.836 509.012 562.84 508.902 cv
562.836 508.828 562.84 508.762 562.852 508.703 cv
562.855 508.652 562.867 508.605 562.883 508.566 cv
562.895 508.531 562.914 508.5 562.938 508.473 cv
562.961 508.445 562.992 508.418 563.039 508.391 cv
565.082 507.078 li
565.098 507.066 565.117 507.055 565.148 507.047 cv
565.172 507.039 565.207 507.031 565.254 507.02 cv
565.293 507.012 565.344 507.004 565.398 507 cv
565.453 507 565.52 507 565.605 506.996 cv
565.711 507 565.805 507.004 565.879 507.012 cv
565.949 507.02 566.004 507.035 566.051 507.051 cv
566.09 507.07 566.117 507.09 566.133 507.113 cv
566.141 507.141 566.148 507.164 566.152 507.187 cv
566.152 514.984 li
567.758 514.984 li
567.793 514.988 567.828 514.996 567.859 515.016 cv
567.891 515.039 567.914 515.07 567.938 515.105 cv
567.953 515.145 567.969 515.191 567.984 515.25 cv
567.992 515.312 568 515.387 568.004 515.465 cv
cp
f
575.441 513.406 mo
575.438 513.559 575.414 513.68 575.371 513.766 cv
575.324 513.855 575.262 513.898 575.18 513.895 cv
574.18 513.895 li
574.18 515.758 li
574.18 515.797 574.168 515.828 574.152 515.852 cv
574.129 515.879 574.098 515.898 574.055 515.918 cv
574.004 515.934 573.941 515.945 573.871 515.957 cv
573.793 515.965 573.699 515.969 573.582 515.973 cv
573.465 515.969 573.367 515.965 573.297 515.957 cv
573.219 515.945 573.16 515.934 573.117 515.918 cv
573.07 515.898 573.039 515.879 573.023 515.852 cv
573.004 515.828 572.996 515.797 573 515.758 cv
573 513.895 li
569.371 513.895 li
569.313 513.898 569.27 513.891 569.234 513.875 cv
569.199 513.863 569.164 513.836 569.137 513.797 cv
569.105 513.762 569.086 513.711 569.074 513.641 cv
569.063 513.574 569.059 513.484 569.059 513.371 cv
569.059 513.289 569.059 513.211 569.066 513.141 cv
569.066 513.07 569.078 513.008 569.094 512.953 cv
569.105 512.898 569.121 512.844 569.148 512.789 cv
569.168 512.734 569.195 512.68 569.23 512.617 cv
572.391 507.23 li
572.41 507.195 572.445 507.164 572.492 507.137 cv
572.535 507.109 572.59 507.086 572.664 507.066 cv
572.73 507.051 572.816 507.039 572.922 507.027 cv
573.023 507.023 573.145 507.02 573.285 507.016 cv
573.434 507.02 573.57 507.023 573.688 507.035 cv
573.801 507.047 573.891 507.062 573.965 507.078 cv
574.031 507.098 574.086 507.121 574.125 507.152 cv
574.16 507.184 574.18 507.219 574.18 507.258 cv
574.18 512.922 li
575.18 512.922 li
575.254 512.926 575.316 512.965 575.367 513.043 cv
575.414 513.125 575.438 513.246 575.441 513.406 cv
cp
573 508.055 mo
572.988 508.055 li
570.137 512.922 li
573 512.922 li
cp
f
644.055 515.465 mo
644.051 515.555 644.043 515.625 644.031 515.684 cv
644.016 515.746 643.996 515.797 643.977 515.828 cv
643.953 515.867 643.93 515.891 643.898 515.906 cv
643.867 515.922 643.836 515.93 643.809 515.93 cv
639.172 515.93 li
639.137 515.93 639.109 515.922 639.082 515.906 cv
639.055 515.891 639.027 515.867 639.004 515.828 cv
638.977 515.797 638.957 515.746 638.945 515.684 cv
638.93 515.625 638.922 515.555 638.926 515.465 cv
638.922 515.387 638.93 515.312 638.945 515.25 cv
638.957 515.191 638.973 515.145 638.996 515.105 cv
639.012 515.07 639.039 515.039 639.07 515.016 cv
639.102 514.996 639.133 514.988 639.172 514.984 cv
641.023 514.984 li
641.023 508.238 li
639.309 509.258 li
639.219 509.309 639.148 509.336 639.102 509.344 cv
639.047 509.352 639.004 509.344 638.973 509.312 cv
638.938 509.285 638.918 509.234 638.906 509.164 cv
638.895 509.098 638.887 509.012 638.891 508.902 cv
638.887 508.828 638.891 508.762 638.902 508.703 cv
638.906 508.652 638.918 508.605 638.934 508.566 cv
638.945 508.531 638.965 508.5 638.988 508.473 cv
639.012 508.445 639.043 508.418 639.09 508.391 cv
641.133 507.078 li
641.148 507.066 641.168 507.055 641.199 507.047 cv
641.223 507.039 641.258 507.031 641.305 507.02 cv
641.344 507.012 641.395 507.004 641.449 507 cv
641.504 507 641.57 507 641.656 506.996 cv
641.762 507 641.855 507.004 641.93 507.012 cv
642 507.02 642.055 507.035 642.102 507.051 cv
642.141 507.07 642.168 507.09 642.184 507.113 cv
642.191 507.141 642.199 507.164 642.203 507.187 cv
642.203 514.984 li
643.809 514.984 li
643.844 514.988 643.879 514.996 643.91 515.016 cv
643.941 515.039 643.965 515.07 643.988 515.105 cv
644.004 515.145 644.02 515.191 644.035 515.25 cv
644.043 515.312 644.051 515.387 644.055 515.465 cv
cp
f
651.344 513.059 mo
651.344 513.449 651.281 513.828 651.164 514.187 cv
651.039 514.555 650.855 514.871 650.613 515.145 cv
650.363 515.422 650.051 515.645 649.676 515.809 cv
649.293 515.977 648.848 516.059 648.332 516.059 cv
647.961 516.059 647.633 516.016 647.352 515.922 cv
647.066 515.836 646.82 515.703 646.609 515.531 cv
646.398 515.363 646.223 515.156 646.086 514.91 cv
645.945 514.664 645.832 514.383 645.75 514.066 cv
645.664 513.754 645.605 513.41 645.57 513.031 cv
645.531 512.66 645.512 512.258 645.516 511.824 cv
645.512 511.445 645.531 511.062 645.574 510.672 cv
645.613 510.289 645.688 509.914 645.793 509.547 cv
645.898 509.187 646.043 508.848 646.223 508.531 cv
646.402 508.215 646.629 507.937 646.902 507.703 cv
647.176 507.469 647.5 507.281 647.879 507.141 cv
648.258 507.004 648.699 506.937 649.203 506.934 cv
649.371 506.937 649.543 506.945 649.715 506.965 cv
649.887 506.988 650.047 507.02 650.195 507.051 cv
650.344 507.09 650.465 507.125 650.566 507.164 cv
650.664 507.203 650.73 507.238 650.766 507.262 cv
650.793 507.289 650.816 507.316 650.836 507.344 cv
650.852 507.375 650.867 507.406 650.875 507.441 cv
650.883 507.477 650.887 507.516 650.895 507.559 cv
650.895 507.602 650.898 507.656 650.902 507.719 cv
650.898 507.805 650.898 507.875 650.898 507.93 cv
650.895 507.992 650.883 508.039 650.871 508.074 cv
650.852 508.113 650.832 508.141 650.809 508.156 cv
650.781 508.176 650.75 508.184 650.711 508.184 cv
650.66 508.184 650.59 508.168 650.504 508.137 cv
650.414 508.105 650.309 508.07 650.188 508.027 cv
650.063 507.992 649.914 507.957 649.738 507.922 cv
649.563 507.895 649.359 507.879 649.129 507.875 cv
648.699 507.879 648.332 507.965 648.027 508.137 cv
647.723 508.309 647.473 508.543 647.277 508.836 cv
647.082 509.129 646.938 509.469 646.848 509.852 cv
646.75 510.242 646.695 510.645 646.688 511.062 cv
646.805 510.996 646.941 510.93 647.09 510.859 cv
647.238 510.793 647.398 510.73 647.574 510.672 cv
647.75 510.621 647.938 510.574 648.133 510.539 cv
648.328 510.508 648.539 510.492 648.766 510.488 cv
649.242 510.492 649.645 510.559 649.977 510.684 cv
650.305 510.816 650.57 510.996 650.777 511.227 cv
650.977 511.457 651.121 511.727 651.211 512.039 cv
651.297 512.352 651.344 512.691 651.344 513.059 cv
cp
650.148 513.168 mo
650.148 512.906 650.121 512.664 650.07 512.445 cv
650.016 512.23 649.926 512.047 649.805 511.891 cv
649.68 511.742 649.516 511.625 649.313 511.543 cv
649.102 511.461 648.848 511.418 648.551 511.418 cv
648.379 511.418 648.211 511.434 648.043 511.465 cv
647.871 511.496 647.707 511.539 647.551 511.586 cv
647.391 511.641 647.242 511.703 647.102 511.773 cv
646.957 511.848 646.824 511.922 646.707 512 cv
646.703 512.594 646.742 513.09 646.82 513.484 cv
646.895 513.883 647.004 514.199 647.148 514.437 cv
647.293 514.68 647.473 514.852 647.688 514.953 cv
647.902 515.059 648.152 515.109 648.441 515.105 cv
648.73 515.109 648.984 515.055 649.199 514.941 cv
649.414 514.836 649.59 514.687 649.734 514.5 cv
649.875 514.316 649.98 514.109 650.047 513.879 cv
650.113 513.648 650.148 513.414 650.148 513.168 cv
cp
f
276.75 538.582 mo
276.746 538.687 276.73 538.777 276.695 538.848 cv
276.66 538.926 276.613 538.984 276.559 539.027 cv
276.5 539.078 276.438 539.113 276.371 539.129 cv
276.297 539.152 276.227 539.16 276.164 539.16 cv
275.719 539.16 li
275.578 539.16 275.457 539.148 275.352 539.117 cv
275.246 539.094 275.148 539.039 275.055 538.961 cv
274.961 538.887 274.867 538.785 274.773 538.652 cv
274.68 538.523 274.578 538.359 274.473 538.156 cv
271.398 532.418 li
271.234 532.125 271.07 531.816 270.91 531.488 cv
270.742 531.168 270.59 530.852 270.453 530.543 cv
270.438 530.543 li
270.445 530.918 270.453 531.301 270.461 531.687 cv
270.465 532.078 270.465 532.465 270.469 532.848 cv
270.469 538.934 li
270.465 538.973 270.453 539.008 270.434 539.039 cv
270.41 539.074 270.375 539.102 270.324 539.117 cv
270.27 539.137 270.199 539.148 270.117 539.164 cv
270.031 539.176 269.926 539.184 269.797 539.184 cv
269.66 539.184 269.551 539.176 269.469 539.164 cv
269.383 539.148 269.316 539.137 269.27 539.117 cv
269.219 539.102 269.184 539.074 269.16 539.039 cv
269.137 539.008 269.125 538.973 269.129 538.934 cv
269.129 529.629 li
269.125 529.422 269.184 529.273 269.305 529.184 cv
269.422 529.098 269.551 529.055 269.691 529.051 cv
270.352 529.051 li
270.504 529.055 270.637 529.066 270.742 529.09 cv
270.844 529.117 270.938 529.16 271.023 529.219 cv
271.105 529.281 271.184 529.363 271.266 529.469 cv
271.34 529.578 271.422 529.715 271.508 529.871 cv
273.875 534.297 li
274.02 534.57 274.16 534.836 274.297 535.09 cv
274.43 535.348 274.559 535.602 274.688 535.848 cv
274.809 536.102 274.934 536.348 275.059 536.586 cv
275.18 536.828 275.301 537.07 275.426 537.312 cv
275.434 537.312 li
275.422 536.906 275.414 536.477 275.414 536.031 cv
275.406 535.586 275.406 535.16 275.41 534.75 cv
275.41 529.277 li
275.406 529.242 275.418 529.207 275.441 529.176 cv
275.465 529.145 275.5 529.117 275.555 529.094 cv
275.602 529.07 275.672 529.055 275.758 529.043 cv
275.844 529.035 275.953 529.031 276.094 529.027 cv
276.211 529.031 276.316 529.035 276.406 529.043 cv
276.492 529.055 276.559 529.07 276.609 529.094 cv
276.656 529.117 276.691 529.145 276.715 529.176 cv
276.734 529.207 276.746 529.242 276.75 529.277 cv
cp
f
285.301 538.941 mo
285.297 538.988 285.289 539.023 285.273 539.047 cv
285.254 539.078 285.219 539.102 285.176 539.121 cv
285.129 539.141 285.07 539.152 284.996 539.168 cv
284.918 539.176 284.824 539.184 284.719 539.184 cv
284.594 539.184 284.496 539.176 284.426 539.168 cv
284.348 539.152 284.289 539.141 284.246 539.121 cv
284.199 539.102 284.168 539.078 284.156 539.047 cv
284.137 539.023 284.129 538.988 284.133 538.941 cv
284.133 538.016 li
283.73 538.461 283.336 538.781 282.949 538.98 cv
282.555 539.184 282.16 539.281 281.766 539.285 cv
281.293 539.281 280.898 539.207 280.582 539.051 cv
280.262 538.898 280.004 538.687 279.809 538.418 cv
279.605 538.152 279.465 537.84 279.383 537.48 cv
279.293 537.125 279.25 536.691 279.254 536.184 cv
279.254 531.93 li
279.25 531.891 279.258 531.855 279.281 531.824 cv
279.297 531.797 279.332 531.773 279.387 531.746 cv
279.434 531.727 279.504 531.711 279.59 531.699 cv
279.672 531.695 279.773 531.691 279.902 531.687 cv
280.023 531.691 280.129 531.695 280.215 531.699 cv
280.297 531.711 280.363 531.727 280.41 531.746 cv
280.457 531.773 280.492 531.797 280.516 531.824 cv
280.535 531.855 280.543 531.891 280.547 531.93 cv
280.547 536.012 li
280.543 536.426 280.574 536.754 280.637 537 cv
280.695 537.246 280.785 537.457 280.91 537.629 cv
281.027 537.809 281.184 537.941 281.375 538.035 cv
281.559 538.133 281.777 538.184 282.027 538.18 cv
282.348 538.184 282.668 538.066 282.992 537.836 cv
283.309 537.609 283.648 537.273 284.008 536.828 cv
284.008 531.93 li
284.008 531.891 284.016 531.855 284.035 531.824 cv
284.051 531.797 284.086 531.773 284.141 531.746 cv
284.191 531.727 284.258 531.711 284.34 531.699 cv
284.418 531.695 284.523 531.691 284.656 531.687 cv
284.777 531.691 284.883 531.695 284.969 531.699 cv
285.051 531.711 285.113 531.727 285.16 531.746 cv
285.203 531.773 285.238 531.797 285.266 531.824 cv
285.285 531.855 285.297 531.891 285.301 531.93 cv
cp
f
298.078 538.941 mo
298.074 538.988 298.066 539.023 298.047 539.047 cv
298.023 539.078 297.988 539.102 297.945 539.121 cv
297.895 539.141 297.828 539.152 297.75 539.168 cv
297.664 539.176 297.563 539.184 297.438 539.184 cv
297.305 539.184 297.195 539.176 297.117 539.168 cv
297.031 539.152 296.965 539.141 296.918 539.121 cv
296.863 539.102 296.828 539.078 296.813 539.047 cv
296.789 539.023 296.781 538.988 296.781 538.941 cv
296.781 534.68 li
296.781 534.387 296.754 534.117 296.703 533.871 cv
296.648 533.629 296.566 533.418 296.453 533.238 cv
296.34 533.062 296.195 532.926 296.02 532.832 cv
295.84 532.738 295.629 532.691 295.395 532.691 cv
295.098 532.691 294.801 532.809 294.504 533.035 cv
294.199 533.27 293.871 533.602 293.516 534.039 cv
293.516 538.941 li
293.512 538.988 293.5 539.023 293.484 539.047 cv
293.461 539.078 293.43 539.102 293.383 539.121 cv
293.332 539.141 293.266 539.152 293.184 539.168 cv
293.098 539.176 292.992 539.184 292.871 539.184 cv
292.75 539.184 292.648 539.176 292.563 539.168 cv
292.477 539.152 292.406 539.141 292.359 539.121 cv
292.305 539.102 292.273 539.078 292.258 539.047 cv
292.238 539.023 292.227 538.988 292.23 538.941 cv
292.23 534.68 li
292.227 534.387 292.199 534.117 292.145 533.871 cv
292.086 533.629 292 533.418 291.887 533.238 cv
291.773 533.062 291.629 532.926 291.457 532.832 cv
291.277 532.738 291.07 532.691 290.836 532.691 cv
290.535 532.691 290.238 532.809 289.938 533.035 cv
289.637 533.27 289.309 533.602 288.957 534.039 cv
288.957 538.941 li
288.953 538.988 288.941 539.023 288.926 539.047 cv
288.902 539.078 288.871 539.102 288.824 539.121 cv
288.777 539.141 288.711 539.152 288.633 539.168 cv
288.547 539.176 288.441 539.184 288.313 539.184 cv
288.184 539.184 288.078 539.176 288 539.168 cv
287.914 539.152 287.848 539.141 287.801 539.121 cv
287.746 539.102 287.715 539.078 287.699 539.047 cv
287.68 539.023 287.668 538.988 287.672 538.941 cv
287.672 531.93 li
287.668 531.891 287.676 531.855 287.695 531.824 cv
287.707 531.797 287.738 531.773 287.789 531.746 cv
287.832 531.727 287.895 531.711 287.969 531.699 cv
288.039 531.695 288.133 531.691 288.258 531.687 cv
288.367 531.691 288.465 531.695 288.543 531.699 cv
288.617 531.711 288.676 531.727 288.719 531.746 cv
288.758 531.773 288.785 531.797 288.805 531.824 cv
288.82 531.855 288.828 531.891 288.832 531.93 cv
288.832 532.855 li
289.223 532.414 289.605 532.094 289.98 531.887 cv
290.348 531.684 290.727 531.578 291.109 531.578 cv
291.398 531.578 291.656 531.613 291.891 531.68 cv
292.117 531.75 292.324 531.844 292.504 531.965 cv
292.68 532.086 292.828 532.23 292.957 532.398 cv
293.078 532.57 293.184 532.762 293.27 532.965 cv
293.5 532.715 293.723 532.5 293.934 532.32 cv
294.145 532.148 294.348 532.004 294.543 531.891 cv
294.738 531.785 294.926 531.707 295.109 531.652 cv
295.293 531.605 295.48 531.578 295.668 531.578 cv
296.121 531.578 296.5 531.66 296.805 531.816 cv
297.109 531.98 297.355 532.191 297.551 532.453 cv
297.738 532.719 297.875 533.027 297.957 533.383 cv
298.035 533.738 298.074 534.113 298.078 534.508 cv
cp
f
306.875 535.34 mo
306.871 535.949 306.805 536.5 306.676 536.984 cv
306.539 537.473 306.344 537.887 306.09 538.227 cv
305.832 538.57 305.516 538.832 305.145 539.012 cv
304.77 539.195 304.344 539.281 303.859 539.285 cv
303.633 539.281 303.426 539.262 303.238 539.219 cv
303.051 539.172 302.863 539.102 302.684 539.004 cv
302.496 538.906 302.316 538.781 302.137 538.629 cv
301.953 538.48 301.762 538.301 301.563 538.086 cv
301.563 538.941 li
301.563 538.988 301.551 539.023 301.531 539.051 cv
301.508 539.086 301.473 539.109 301.43 539.125 cv
301.379 539.141 301.32 539.152 301.254 539.168 cv
301.18 539.176 301.09 539.184 300.984 539.184 cv
300.875 539.184 300.789 539.176 300.719 539.168 cv
300.645 539.152 300.582 539.141 300.539 539.125 cv
300.488 539.109 300.457 539.086 300.445 539.051 cv
300.426 539.023 300.418 538.988 300.422 538.941 cv
300.422 528.531 li
300.418 528.492 300.43 528.457 300.449 528.422 cv
300.465 528.395 300.496 528.367 300.551 528.344 cv
300.598 528.324 300.664 528.309 300.75 528.297 cv
300.828 528.289 300.934 528.285 301.063 528.281 cv
301.191 528.285 301.297 528.289 301.383 528.297 cv
301.461 528.309 301.527 528.324 301.574 528.344 cv
301.621 528.367 301.652 528.395 301.676 528.422 cv
301.691 528.457 301.703 528.492 301.707 528.531 cv
301.707 532.73 li
301.914 532.52 302.117 532.34 302.313 532.195 cv
302.508 532.051 302.695 531.934 302.883 531.84 cv
303.066 531.754 303.254 531.687 303.445 531.641 cv
303.629 531.602 303.828 531.578 304.039 531.578 cv
304.543 531.578 304.977 531.68 305.344 531.883 cv
305.703 532.086 305.996 532.359 306.223 532.695 cv
306.445 533.039 306.613 533.437 306.719 533.895 cv
306.82 534.352 306.871 534.832 306.875 535.34 cv
cp
305.543 535.488 mo
305.539 535.133 305.512 534.785 305.461 534.445 cv
305.402 534.109 305.309 533.812 305.172 533.551 cv
305.035 533.293 304.855 533.082 304.633 532.922 cv
304.406 532.766 304.125 532.687 303.793 532.684 cv
303.625 532.687 303.461 532.711 303.301 532.754 cv
303.137 532.805 302.973 532.883 302.805 532.988 cv
302.637 533.102 302.461 533.242 302.285 533.41 cv
302.102 533.586 301.91 533.801 301.707 534.055 cv
301.707 536.852 li
302.063 537.285 302.402 537.617 302.727 537.84 cv
303.051 538.07 303.387 538.184 303.738 538.18 cv
304.059 538.184 304.336 538.105 304.57 537.945 cv
304.797 537.793 304.984 537.586 305.129 537.324 cv
305.273 537.07 305.379 536.781 305.445 536.461 cv
305.508 536.145 305.539 535.82 305.543 535.488 cv
cp
f
314.785 535.133 mo
314.781 535.336 314.73 535.477 314.633 535.562 cv
314.527 535.648 314.41 535.691 314.285 535.691 cv
309.668 535.691 li
309.664 536.082 309.703 536.434 309.785 536.746 cv
309.859 537.059 309.992 537.328 310.176 537.547 cv
310.355 537.773 310.59 537.945 310.887 538.062 cv
311.176 538.187 311.535 538.246 311.961 538.242 cv
312.293 538.246 312.59 538.219 312.852 538.16 cv
313.113 538.109 313.34 538.047 313.531 537.977 cv
313.719 537.91 313.875 537.852 314 537.793 cv
314.121 537.742 314.215 537.715 314.277 537.711 cv
314.313 537.715 314.344 537.723 314.375 537.738 cv
314.402 537.758 314.426 537.785 314.445 537.82 cv
314.457 537.859 314.469 537.91 314.48 537.973 cv
314.484 538.039 314.488 538.117 314.492 538.211 cv
314.488 538.281 314.484 538.34 314.484 538.387 cv
314.477 538.434 314.473 538.477 314.465 538.516 cv
314.457 538.555 314.441 538.59 314.426 538.621 cv
314.402 538.652 314.379 538.684 314.355 538.711 cv
314.324 538.742 314.242 538.789 314.102 538.852 cv
313.961 538.918 313.777 538.98 313.555 539.043 cv
313.328 539.105 313.07 539.16 312.777 539.211 cv
312.484 539.258 312.172 539.281 311.84 539.285 cv
311.262 539.281 310.754 539.203 310.324 539.043 cv
309.887 538.883 309.523 538.645 309.23 538.328 cv
308.93 538.012 308.707 537.617 308.559 537.137 cv
308.41 536.66 308.336 536.102 308.336 535.465 cv
308.336 534.867 308.41 534.328 308.566 533.844 cv
308.719 533.367 308.945 532.957 309.242 532.621 cv
309.535 532.285 309.891 532.027 310.305 531.848 cv
310.719 531.668 311.184 531.578 311.699 531.578 cv
312.25 531.578 312.719 531.668 313.105 531.844 cv
313.492 532.023 313.809 532.262 314.063 532.559 cv
314.309 532.859 314.492 533.211 314.609 533.609 cv
314.723 534.016 314.781 534.445 314.785 534.898 cv
cp
313.492 534.75 mo
313.508 534.074 313.355 533.543 313.039 533.16 cv
312.723 532.777 312.254 532.586 311.637 532.582 cv
311.313 532.586 311.031 532.645 310.793 532.762 cv
310.551 532.883 310.352 533.043 310.191 533.238 cv
310.027 533.437 309.902 533.668 309.816 533.93 cv
309.727 534.191 309.676 534.465 309.668 534.75 cv
cp
f
320.852 532.387 mo
320.848 532.504 320.848 532.602 320.844 532.676 cv
320.836 532.758 320.824 532.82 320.813 532.859 cv
320.793 532.906 320.773 532.937 320.754 532.961 cv
320.727 532.984 320.695 532.996 320.656 532.996 cv
320.613 532.996 320.563 532.984 320.504 532.961 cv
320.441 532.937 320.371 532.914 320.301 532.891 cv
320.223 532.867 320.141 532.848 320.047 532.824 cv
319.953 532.809 319.852 532.797 319.742 532.793 cv
319.609 532.797 319.48 532.824 319.359 532.871 cv
319.234 532.926 319.105 533.012 318.969 533.129 cv
318.828 533.254 318.684 533.41 318.535 533.605 cv
318.383 533.801 318.215 534.043 318.035 534.328 cv
318.035 538.941 li
318.031 538.988 318.02 539.023 318.004 539.047 cv
317.98 539.078 317.949 539.102 317.902 539.121 cv
317.855 539.141 317.789 539.152 317.711 539.168 cv
317.625 539.176 317.52 539.184 317.391 539.184 cv
317.262 539.184 317.156 539.176 317.078 539.168 cv
316.992 539.152 316.926 539.141 316.879 539.121 cv
316.824 539.102 316.793 539.078 316.777 539.047 cv
316.758 539.023 316.746 538.988 316.75 538.941 cv
316.75 531.93 li
316.746 531.891 316.754 531.855 316.773 531.824 cv
316.785 531.797 316.816 531.773 316.867 531.746 cv
316.91 531.727 316.973 531.711 317.047 531.699 cv
317.117 531.695 317.211 531.691 317.336 531.687 cv
317.445 531.691 317.543 531.695 317.621 531.699 cv
317.695 531.711 317.754 531.727 317.797 531.746 cv
317.836 531.773 317.863 531.797 317.883 531.824 cv
317.898 531.855 317.906 531.891 317.91 531.93 cv
317.91 532.949 li
318.098 532.668 318.281 532.441 318.453 532.266 cv
318.621 532.09 318.781 531.949 318.934 531.848 cv
319.082 531.746 319.23 531.676 319.379 531.637 cv
319.527 531.598 319.676 531.578 319.828 531.578 cv
319.895 531.578 319.973 531.582 320.059 531.59 cv
320.145 531.598 320.234 531.613 320.328 531.633 cv
320.422 531.656 320.504 531.68 320.582 531.703 cv
320.652 531.73 320.707 531.758 320.742 531.781 cv
320.77 531.812 320.789 531.836 320.805 531.855 cv
320.813 531.883 320.824 531.914 320.832 531.945 cv
320.84 531.984 320.844 532.035 320.848 532.105 cv
320.848 532.176 320.848 532.27 320.852 532.387 cv
cp
f
332.609 535.355 mo
332.605 535.934 332.531 536.461 332.383 536.937 cv
332.23 537.422 332.004 537.836 331.707 538.18 cv
331.406 538.531 331.031 538.801 330.586 538.992 cv
330.133 539.187 329.613 539.281 329.023 539.285 cv
328.445 539.281 327.941 539.199 327.516 539.027 cv
327.086 538.859 326.73 538.609 326.445 538.281 cv
326.156 537.953 325.941 537.559 325.805 537.09 cv
325.664 536.625 325.598 536.094 325.598 535.496 cv
325.598 534.93 325.668 534.402 325.816 533.922 cv
325.961 533.441 326.188 533.027 326.488 532.676 cv
326.785 532.328 327.156 532.059 327.605 531.867 cv
328.051 531.676 328.574 531.578 329.172 531.578 cv
329.75 531.578 330.25 531.664 330.68 531.836 cv
331.105 532.008 331.465 532.258 331.75 532.586 cv
332.035 532.914 332.25 533.312 332.395 533.777 cv
332.535 534.246 332.605 534.773 332.609 535.355 cv
cp
331.277 535.441 mo
331.273 535.066 331.238 534.707 331.172 534.367 cv
331.098 534.031 330.98 533.738 330.82 533.48 cv
330.656 533.23 330.438 533.027 330.16 532.875 cv
329.879 532.73 329.531 532.656 329.121 532.652 cv
328.734 532.656 328.406 532.723 328.133 532.855 cv
327.855 532.992 327.629 533.184 327.453 533.43 cv
327.273 533.676 327.141 533.969 327.059 534.305 cv
326.969 534.645 326.926 535.012 326.93 535.41 cv
326.926 535.797 326.961 536.16 327.035 536.496 cv
327.102 536.836 327.219 537.129 327.387 537.379 cv
327.551 537.633 327.773 537.836 328.051 537.98 cv
328.328 538.133 328.676 538.207 329.09 538.203 cv
329.465 538.207 329.793 538.137 330.074 538 cv
330.352 537.867 330.578 537.68 330.758 537.43 cv
330.934 537.187 331.063 536.895 331.148 536.559 cv
331.23 536.223 331.273 535.852 331.277 535.441 cv
cp
f
338.34 529.043 mo
338.336 529.145 338.332 529.223 338.324 529.281 cv
338.313 529.344 338.301 529.395 338.289 529.426 cv
338.273 529.465 338.258 529.488 338.238 529.5 cv
338.215 529.516 338.188 529.523 338.16 529.52 cv
338.121 529.523 338.074 529.512 338.023 529.484 cv
337.965 529.465 337.898 529.437 337.824 529.406 cv
337.742 529.379 337.652 529.352 337.547 529.328 cv
337.438 529.305 337.313 529.293 337.18 529.293 cv
336.984 529.293 336.82 529.324 336.688 529.387 cv
336.547 529.449 336.438 529.547 336.359 529.68 cv
336.273 529.812 336.215 529.984 336.18 530.195 cv
336.141 530.406 336.121 530.664 336.125 530.961 cv
336.125 531.727 li
337.691 531.727 li
337.73 531.73 337.766 531.738 337.797 531.754 cv
337.824 531.773 337.852 531.805 337.875 531.848 cv
337.898 531.895 337.914 531.953 337.93 532.016 cv
337.938 532.086 337.945 532.168 337.949 532.262 cv
337.945 532.453 337.922 532.586 337.879 532.668 cv
337.828 532.754 337.766 532.797 337.691 532.793 cv
336.125 532.793 li
336.125 538.941 li
336.121 538.988 336.113 539.023 336.094 539.047 cv
336.07 539.078 336.035 539.102 335.988 539.121 cv
335.938 539.141 335.871 539.152 335.789 539.168 cv
335.703 539.176 335.598 539.184 335.48 539.184 cv
335.352 539.184 335.25 539.176 335.168 539.168 cv
335.082 539.152 335.016 539.141 334.969 539.121 cv
334.918 539.102 334.883 539.078 334.863 539.047 cv
334.84 539.023 334.828 538.988 334.832 538.941 cv
334.832 532.793 li
333.844 532.793 li
333.758 532.797 333.695 532.754 333.656 532.668 cv
333.613 532.586 333.59 532.453 333.594 532.262 cv
333.59 532.168 333.598 532.086 333.609 532.016 cv
333.617 531.953 333.633 531.895 333.656 531.848 cv
333.676 531.805 333.699 531.773 333.734 531.754 cv
333.762 531.738 333.801 531.73 333.844 531.727 cv
334.832 531.727 li
334.832 531 li
334.828 530.516 334.875 530.098 334.969 529.742 cv
335.059 529.395 335.195 529.105 335.383 528.883 cv
335.566 528.66 335.801 528.496 336.09 528.387 cv
336.371 528.281 336.707 528.227 337.094 528.227 cv
337.27 528.227 337.445 528.246 337.621 528.277 cv
337.789 528.316 337.922 528.352 338.02 528.387 cv
338.109 528.43 338.172 528.465 338.207 528.492 cv
338.234 528.527 338.262 528.566 338.285 528.613 cv
338.305 528.664 338.316 528.727 338.328 528.793 cv
338.332 528.867 338.336 528.949 338.34 529.043 cv
cp
f
348.539 536.309 mo
348.535 536.781 348.449 537.203 348.277 537.57 cv
348.102 537.945 347.859 538.258 347.551 538.512 cv
347.242 538.77 346.879 538.961 346.461 539.09 cv
346.039 539.219 345.59 539.281 345.109 539.285 cv
344.77 539.281 344.453 539.254 344.168 539.199 cv
343.879 539.141 343.625 539.074 343.398 538.988 cv
343.172 538.91 342.98 538.824 342.828 538.73 cv
342.672 538.645 342.566 538.566 342.508 538.504 cv
342.449 538.441 342.406 538.363 342.379 538.27 cv
342.348 538.176 342.332 538.047 342.336 537.883 cv
342.332 537.77 342.336 537.676 342.352 537.598 cv
342.359 537.523 342.375 537.461 342.398 537.414 cv
342.414 537.367 342.441 537.336 342.477 537.316 cv
342.504 537.301 342.539 537.293 342.582 537.289 cv
342.652 537.293 342.754 537.336 342.891 537.422 cv
343.02 537.512 343.191 537.609 343.402 537.711 cv
343.609 537.82 343.859 537.918 344.152 538.004 cv
344.445 538.098 344.785 538.141 345.172 538.141 cv
345.461 538.141 345.727 538.102 345.969 538.023 cv
346.207 537.945 346.414 537.836 346.594 537.691 cv
346.766 537.551 346.902 537.375 346.996 537.164 cv
347.09 536.957 347.137 536.723 347.137 536.457 cv
347.137 536.176 347.07 535.93 346.941 535.723 cv
346.809 535.523 346.637 535.348 346.426 535.191 cv
346.211 535.043 345.969 534.902 345.695 534.77 cv
345.422 534.645 345.141 534.512 344.859 534.379 cv
344.57 534.246 344.293 534.102 344.023 533.937 cv
343.754 533.781 343.512 533.59 343.301 533.371 cv
343.082 533.152 342.91 532.898 342.781 532.602 cv
342.645 532.312 342.578 531.961 342.582 531.547 cv
342.578 531.129 342.656 530.754 342.813 530.422 cv
342.965 530.094 343.176 529.816 343.453 529.59 cv
343.723 529.371 344.047 529.199 344.426 529.082 cv
344.801 528.965 345.211 528.906 345.648 528.906 cv
345.867 528.906 346.09 528.926 346.32 528.965 cv
346.543 529.004 346.754 529.055 346.957 529.117 cv
347.152 529.184 347.332 529.258 347.492 529.336 cv
347.645 529.418 347.746 529.484 347.801 529.531 cv
347.848 529.586 347.883 529.625 347.898 529.648 cv
347.914 529.68 347.926 529.715 347.938 529.758 cv
347.945 529.805 347.953 529.859 347.961 529.918 cv
347.965 529.984 347.969 530.062 347.969 530.16 cv
347.969 530.254 347.965 530.34 347.957 530.41 cv
347.949 530.488 347.938 530.547 347.922 530.594 cv
347.906 530.641 347.883 530.676 347.855 530.699 cv
347.824 530.723 347.793 530.734 347.758 530.734 cv
347.699 530.734 347.609 530.699 347.488 530.629 cv
347.363 530.559 347.211 530.477 347.039 530.383 cv
346.859 530.293 346.652 530.211 346.414 530.133 cv
346.168 530.059 345.898 530.02 345.602 530.02 cv
345.32 530.02 345.074 530.059 344.867 530.133 cv
344.656 530.211 344.484 530.312 344.352 530.434 cv
344.215 530.559 344.113 530.703 344.047 530.875 cv
343.98 531.047 343.949 531.23 343.949 531.422 cv
343.949 531.707 344.012 531.949 344.141 532.148 cv
344.27 532.352 344.441 532.531 344.66 532.684 cv
344.871 532.844 345.117 532.984 345.395 533.113 cv
345.668 533.246 345.949 533.379 346.238 533.508 cv
346.523 533.641 346.805 533.785 347.078 533.941 cv
347.352 534.102 347.598 534.289 347.816 534.504 cv
348.031 534.723 348.203 534.977 348.34 535.27 cv
348.469 535.562 348.535 535.91 348.539 536.309 cv
cp
f
356.305 538.941 mo
356.301 538.988 356.293 539.023 356.277 539.047 cv
356.258 539.078 356.223 539.102 356.18 539.121 cv
356.133 539.141 356.074 539.152 356 539.168 cv
355.922 539.176 355.828 539.184 355.723 539.184 cv
355.598 539.184 355.5 539.176 355.43 539.168 cv
355.352 539.152 355.293 539.141 355.25 539.121 cv
355.203 539.102 355.172 539.078 355.16 539.047 cv
355.141 539.023 355.133 538.988 355.137 538.941 cv
355.137 538.016 li
354.734 538.461 354.34 538.781 353.953 538.98 cv
353.559 539.184 353.164 539.281 352.77 539.285 cv
352.297 539.281 351.902 539.207 351.586 539.051 cv
351.266 538.898 351.008 538.687 350.813 538.418 cv
350.609 538.152 350.469 537.84 350.387 537.48 cv
350.297 537.125 350.254 536.691 350.258 536.184 cv
350.258 531.93 li
350.254 531.891 350.262 531.855 350.285 531.824 cv
350.301 531.797 350.336 531.773 350.391 531.746 cv
350.438 531.727 350.508 531.711 350.594 531.699 cv
350.676 531.695 350.777 531.691 350.906 531.687 cv
351.027 531.691 351.133 531.695 351.219 531.699 cv
351.301 531.711 351.367 531.727 351.414 531.746 cv
351.461 531.773 351.496 531.797 351.52 531.824 cv
351.539 531.855 351.547 531.891 351.551 531.93 cv
351.551 536.012 li
351.547 536.426 351.578 536.754 351.641 537 cv
351.699 537.246 351.789 537.457 351.914 537.629 cv
352.031 537.809 352.188 537.941 352.379 538.035 cv
352.563 538.133 352.781 538.184 353.031 538.18 cv
353.352 538.184 353.672 538.066 353.996 537.836 cv
354.313 537.609 354.652 537.273 355.012 536.828 cv
355.012 531.93 li
355.012 531.891 355.02 531.855 355.039 531.824 cv
355.055 531.797 355.09 531.773 355.145 531.746 cv
355.195 531.727 355.262 531.711 355.344 531.699 cv
355.422 531.695 355.527 531.691 355.66 531.687 cv
355.781 531.691 355.887 531.695 355.973 531.699 cv
356.055 531.711 356.117 531.727 356.164 531.746 cv
356.207 531.773 356.242 531.797 356.27 531.824 cv
356.289 531.855 356.301 531.891 356.305 531.93 cv
cp
f
365.16 535.34 mo
365.156 535.949 365.09 536.5 364.961 536.984 cv
364.824 537.473 364.629 537.887 364.375 538.227 cv
364.117 538.57 363.801 538.832 363.43 539.012 cv
363.055 539.195 362.629 539.281 362.145 539.285 cv
361.918 539.281 361.711 539.262 361.523 539.219 cv
361.336 539.172 361.148 539.102 360.969 539.004 cv
360.781 538.906 360.602 538.781 360.422 538.629 cv
360.238 538.48 360.047 538.301 359.848 538.086 cv
359.848 538.941 li
359.848 538.988 359.836 539.023 359.816 539.051 cv
359.793 539.086 359.758 539.109 359.715 539.125 cv
359.664 539.141 359.605 539.152 359.539 539.168 cv
359.465 539.176 359.375 539.184 359.27 539.184 cv
359.16 539.184 359.074 539.176 359.004 539.168 cv
358.93 539.152 358.867 539.141 358.824 539.125 cv
358.773 539.109 358.742 539.086 358.73 539.051 cv
358.711 539.023 358.703 538.988 358.707 538.941 cv
358.707 528.531 li
358.703 528.492 358.715 528.457 358.734 528.422 cv
358.75 528.395 358.781 528.367 358.836 528.344 cv
358.883 528.324 358.949 528.309 359.035 528.297 cv
359.113 528.289 359.219 528.285 359.348 528.281 cv
359.477 528.285 359.582 528.289 359.668 528.297 cv
359.746 528.309 359.813 528.324 359.859 528.344 cv
359.906 528.367 359.938 528.395 359.961 528.422 cv
359.977 528.457 359.988 528.492 359.992 528.531 cv
359.992 532.73 li
360.199 532.52 360.402 532.34 360.598 532.195 cv
360.793 532.051 360.98 531.934 361.168 531.84 cv
361.352 531.754 361.539 531.687 361.73 531.641 cv
361.914 531.602 362.113 531.578 362.324 531.578 cv
362.828 531.578 363.262 531.68 363.629 531.883 cv
363.988 532.086 364.281 532.359 364.508 532.695 cv
364.73 533.039 364.898 533.437 365.004 533.895 cv
365.105 534.352 365.156 534.832 365.16 535.34 cv
cp
363.828 535.488 mo
363.824 535.133 363.797 534.785 363.746 534.445 cv
363.688 534.109 363.594 533.812 363.457 533.551 cv
363.32 533.293 363.141 533.082 362.918 532.922 cv
362.691 532.766 362.41 532.687 362.078 532.684 cv
361.91 532.687 361.746 532.711 361.586 532.754 cv
361.422 532.805 361.258 532.883 361.09 532.988 cv
360.922 533.102 360.746 533.242 360.57 533.41 cv
360.387 533.586 360.195 533.801 359.992 534.055 cv
359.992 536.852 li
360.348 537.285 360.688 537.617 361.012 537.84 cv
361.336 538.07 361.672 538.184 362.023 538.18 cv
362.344 538.184 362.621 538.105 362.855 537.945 cv
363.082 537.793 363.27 537.586 363.414 537.324 cv
363.559 537.07 363.664 536.781 363.73 536.461 cv
363.793 536.145 363.824 535.82 363.828 535.488 cv
cp
f
370.297 535.203 mo
370.297 535.406 370.273 535.543 370.227 535.621 cv
370.18 535.699 370.109 535.738 370.023 535.738 cv
366.766 535.738 li
366.672 535.738 366.605 535.699 366.559 535.617 cv
366.512 535.539 366.488 535.402 366.488 535.203 cv
366.488 535.008 366.512 534.867 366.559 534.789 cv
366.605 534.711 366.672 534.672 366.766 534.672 cv
370.023 534.672 li
370.063 534.672 370.102 534.68 370.137 534.695 cv
370.168 534.711 370.195 534.742 370.223 534.785 cv
370.242 534.832 370.262 534.887 370.277 534.953 cv
370.289 535.023 370.297 535.109 370.297 535.203 cv
cp
f
373.551 538.934 mo
373.547 538.977 373.539 539.012 373.52 539.043 cv
373.496 539.074 373.457 539.102 373.41 539.117 cv
373.355 539.137 373.289 539.148 373.203 539.164 cv
373.117 539.176 373.008 539.184 372.883 539.184 cv
372.754 539.184 372.648 539.176 372.563 539.164 cv
372.473 539.148 372.402 539.137 372.352 539.117 cv
372.297 539.102 372.262 539.074 372.242 539.043 cv
372.219 539.012 372.207 538.977 372.211 538.934 cv
372.211 529.254 li
372.207 529.215 372.219 529.18 372.246 529.145 cv
372.266 529.117 372.305 529.09 372.363 529.07 cv
372.414 529.055 372.484 529.039 372.574 529.023 cv
372.656 529.012 372.758 529.008 372.883 529.004 cv
373.008 529.008 373.117 529.012 373.203 529.023 cv
373.289 529.039 373.355 529.055 373.41 529.07 cv
373.457 529.09 373.496 529.117 373.52 529.145 cv
373.539 529.18 373.547 529.215 373.551 529.254 cv
cp
f
386.539 538.941 mo
386.535 538.988 386.527 539.023 386.508 539.047 cv
386.484 539.078 386.449 539.102 386.406 539.121 cv
386.355 539.141 386.289 539.152 386.211 539.168 cv
386.125 539.176 386.023 539.184 385.898 539.184 cv
385.766 539.184 385.656 539.176 385.578 539.168 cv
385.492 539.152 385.426 539.141 385.379 539.121 cv
385.324 539.102 385.289 539.078 385.273 539.047 cv
385.25 539.023 385.242 538.988 385.242 538.941 cv
385.242 534.68 li
385.242 534.387 385.215 534.117 385.164 533.871 cv
385.109 533.629 385.027 533.418 384.914 533.238 cv
384.801 533.062 384.656 532.926 384.48 532.832 cv
384.301 532.738 384.09 532.691 383.855 532.691 cv
383.559 532.691 383.262 532.809 382.965 533.035 cv
382.66 533.27 382.332 533.602 381.977 534.039 cv
381.977 538.941 li
381.973 538.988 381.961 539.023 381.945 539.047 cv
381.922 539.078 381.891 539.102 381.844 539.121 cv
381.793 539.141 381.727 539.152 381.645 539.168 cv
381.559 539.176 381.453 539.184 381.332 539.184 cv
381.211 539.184 381.109 539.176 381.023 539.168 cv
380.938 539.152 380.867 539.141 380.82 539.121 cv
380.766 539.102 380.734 539.078 380.719 539.047 cv
380.699 539.023 380.688 538.988 380.691 538.941 cv
380.691 534.68 li
380.688 534.387 380.66 534.117 380.605 533.871 cv
380.547 533.629 380.461 533.418 380.348 533.238 cv
380.234 533.062 380.09 532.926 379.918 532.832 cv
379.738 532.738 379.531 532.691 379.297 532.691 cv
378.996 532.691 378.699 532.809 378.398 533.035 cv
378.098 533.27 377.77 533.602 377.418 534.039 cv
377.418 538.941 li
377.414 538.988 377.402 539.023 377.387 539.047 cv
377.363 539.078 377.332 539.102 377.285 539.121 cv
377.238 539.141 377.172 539.152 377.094 539.168 cv
377.008 539.176 376.902 539.184 376.773 539.184 cv
376.645 539.184 376.539 539.176 376.461 539.168 cv
376.375 539.152 376.309 539.141 376.262 539.121 cv
376.207 539.102 376.176 539.078 376.16 539.047 cv
376.141 539.023 376.129 538.988 376.133 538.941 cv
376.133 531.93 li
376.129 531.891 376.137 531.855 376.156 531.824 cv
376.168 531.797 376.199 531.773 376.25 531.746 cv
376.293 531.727 376.355 531.711 376.43 531.699 cv
376.5 531.695 376.594 531.691 376.719 531.687 cv
376.828 531.691 376.926 531.695 377.004 531.699 cv
377.078 531.711 377.137 531.727 377.18 531.746 cv
377.219 531.773 377.246 531.797 377.266 531.824 cv
377.281 531.855 377.289 531.891 377.293 531.93 cv
377.293 532.855 li
377.684 532.414 378.066 532.094 378.441 531.887 cv
378.809 531.684 379.188 531.578 379.57 531.578 cv
379.859 531.578 380.117 531.613 380.352 531.68 cv
380.578 531.75 380.785 531.844 380.965 531.965 cv
381.141 532.086 381.289 532.23 381.418 532.398 cv
381.539 532.57 381.645 532.762 381.73 532.965 cv
381.961 532.715 382.184 532.5 382.395 532.32 cv
382.605 532.148 382.809 532.004 383.004 531.891 cv
383.199 531.785 383.387 531.707 383.57 531.652 cv
383.754 531.605 383.941 531.578 384.129 531.578 cv
384.582 531.578 384.961 531.66 385.266 531.816 cv
385.57 531.98 385.816 532.191 386.012 532.453 cv
386.199 532.719 386.336 533.027 386.418 533.383 cv
386.496 533.738 386.535 534.113 386.539 534.508 cv
cp
f
394.168 538.949 mo
394.164 539.012 394.145 539.059 394.105 539.09 cv
394.063 539.121 394.004 539.145 393.934 539.16 cv
393.855 539.176 393.75 539.184 393.613 539.184 cv
393.477 539.184 393.367 539.176 393.289 539.16 cv
393.203 539.145 393.145 539.121 393.113 539.09 cv
393.074 539.059 393.059 539.012 393.063 538.949 cv
393.063 538.25 li
392.754 538.578 392.41 538.832 392.035 539.012 cv
391.656 539.195 391.258 539.281 390.84 539.285 cv
390.465 539.281 390.133 539.234 389.836 539.141 cv
389.539 539.043 389.285 538.906 389.074 538.723 cv
388.863 538.543 388.699 538.32 388.582 538.055 cv
388.465 537.793 388.406 537.492 388.41 537.148 cv
388.406 536.758 388.484 536.414 388.648 536.121 cv
388.805 535.832 389.039 535.59 389.344 535.398 cv
389.645 535.207 390.012 535.062 390.449 534.965 cv
390.883 534.871 391.375 534.824 391.922 534.82 cv
392.891 534.82 li
392.891 534.273 li
392.887 534.004 392.859 533.766 392.805 533.559 cv
392.746 533.352 392.652 533.18 392.527 533.039 cv
392.395 532.902 392.23 532.797 392.031 532.727 cv
391.824 532.656 391.574 532.621 391.285 532.621 cv
390.965 532.621 390.68 532.66 390.43 532.734 cv
390.172 532.812 389.953 532.895 389.766 532.984 cv
389.578 533.078 389.418 533.164 389.293 533.234 cv
389.16 533.312 389.066 533.348 389.008 533.348 cv
388.965 533.348 388.93 533.34 388.898 533.316 cv
388.867 533.301 388.84 533.27 388.816 533.223 cv
388.793 533.184 388.773 533.129 388.766 533.062 cv
388.75 533 388.746 532.93 388.75 532.848 cv
388.746 532.723 388.754 532.617 388.777 532.539 cv
388.793 532.465 388.84 532.395 388.91 532.324 cv
388.98 532.258 389.102 532.18 389.273 532.09 cv
389.445 532 389.641 531.918 389.863 531.84 cv
390.086 531.77 390.332 531.707 390.598 531.652 cv
390.863 531.605 391.129 531.578 391.402 531.578 cv
391.902 531.578 392.332 531.637 392.684 531.75 cv
393.035 531.867 393.32 532.035 393.543 532.254 cv
393.758 532.477 393.918 532.75 394.02 533.074 cv
394.117 533.406 394.164 533.789 394.168 534.219 cv
cp
392.891 535.746 mo
391.789 535.746 li
391.434 535.75 391.129 535.781 390.871 535.836 cv
390.609 535.898 390.395 535.984 390.223 536.102 cv
390.051 536.219 389.926 536.359 389.848 536.523 cv
389.766 536.687 389.723 536.875 389.727 537.086 cv
389.723 537.453 389.84 537.746 390.07 537.957 cv
390.301 538.176 390.625 538.281 391.043 538.281 cv
391.379 538.281 391.691 538.195 391.98 538.023 cv
392.27 537.852 392.57 537.59 392.891 537.234 cv
cp
f
402.387 532.246 mo
402.383 532.43 402.359 532.562 402.313 532.641 cv
402.262 532.723 402.199 532.762 402.125 532.762 cv
401.117 532.762 li
401.297 532.949 401.426 533.156 401.5 533.383 cv
401.57 533.609 401.605 533.844 401.609 534.086 cv
401.605 534.492 401.539 534.852 401.414 535.164 cv
401.281 535.477 401.098 535.742 400.855 535.953 cv
400.613 536.172 400.324 536.336 399.996 536.449 cv
399.66 536.566 399.293 536.625 398.891 536.621 cv
398.602 536.625 398.328 536.586 398.074 536.508 cv
397.813 536.434 397.617 536.34 397.48 536.223 cv
397.387 536.32 397.309 536.426 397.25 536.543 cv
397.188 536.664 397.156 536.801 397.16 536.953 cv
397.156 537.137 397.242 537.289 397.414 537.406 cv
397.582 537.531 397.805 537.594 398.086 537.602 cv
399.918 537.68 li
400.266 537.691 400.582 537.738 400.875 537.824 cv
401.164 537.91 401.418 538.035 401.633 538.191 cv
401.844 538.352 402.012 538.543 402.133 538.773 cv
402.25 539.008 402.309 539.277 402.313 539.582 cv
402.309 539.902 402.242 540.207 402.109 540.5 cv
401.973 540.789 401.766 541.043 401.488 541.266 cv
401.207 541.484 400.852 541.66 400.422 541.789 cv
399.992 541.914 399.484 541.977 398.898 541.98 cv
398.328 541.977 397.844 541.93 397.449 541.836 cv
397.051 541.738 396.727 541.605 396.473 541.441 cv
396.219 541.273 396.035 541.078 395.922 540.848 cv
395.805 540.613 395.746 540.359 395.75 540.094 cv
395.746 539.922 395.766 539.758 395.813 539.598 cv
395.852 539.434 395.914 539.281 396 539.137 cv
396.082 538.992 396.191 538.855 396.32 538.719 cv
396.445 538.59 396.59 538.457 396.762 538.328 cv
396.504 538.199 396.316 538.035 396.195 537.836 cv
396.074 537.641 396.016 537.43 396.016 537.195 cv
396.016 536.883 396.078 536.598 396.207 536.348 cv
396.336 536.098 396.496 535.875 396.691 535.676 cv
396.527 535.484 396.402 535.27 396.309 535.027 cv
396.215 534.789 396.168 534.496 396.168 534.148 cv
396.168 533.754 396.234 533.395 396.371 533.074 cv
396.504 532.758 396.691 532.492 396.934 532.273 cv
397.172 532.059 397.457 531.891 397.793 531.77 cv
398.125 531.656 398.492 531.598 398.891 531.594 cv
399.102 531.598 399.301 531.609 399.484 531.629 cv
399.668 531.656 399.84 531.687 400.004 531.727 cv
402.125 531.727 li
402.211 531.73 402.277 531.773 402.32 531.855 cv
402.363 531.945 402.383 532.074 402.387 532.246 cv
cp
400.379 534.094 mo
400.375 533.621 400.242 533.25 399.984 532.977 cv
399.719 532.711 399.348 532.574 398.867 532.574 cv
398.613 532.574 398.395 532.617 398.215 532.699 cv
398.027 532.785 397.875 532.898 397.754 533.043 cv
397.633 533.191 397.543 533.359 397.484 533.547 cv
397.422 533.734 397.391 533.934 397.395 534.141 cv
397.391 534.605 397.523 534.969 397.785 535.234 cv
398.047 535.5 398.414 535.633 398.891 535.629 cv
399.141 535.633 399.359 535.594 399.551 535.508 cv
399.734 535.43 399.891 535.316 400.016 535.176 cv
400.137 535.035 400.227 534.871 400.289 534.68 cv
400.344 534.496 400.375 534.301 400.379 534.094 cv
cp
401.023 539.652 mo
401.02 539.348 400.895 539.117 400.652 538.953 cv
400.402 538.793 400.07 538.703 399.652 538.691 cv
397.836 538.629 li
397.668 538.762 397.531 538.887 397.43 539 cv
397.32 539.117 397.238 539.227 397.176 539.336 cv
397.113 539.441 397.07 539.547 397.047 539.652 cv
397.023 539.754 397.012 539.859 397.012 539.969 cv
397.012 540.305 397.18 540.559 397.523 540.738 cv
397.863 540.91 398.344 541 398.961 541 cv
399.348 541 399.672 540.961 399.938 540.887 cv
400.195 540.809 400.406 540.707 400.57 540.586 cv
400.727 540.457 400.844 540.316 400.918 540.156 cv
400.984 539.996 401.02 539.828 401.023 539.652 cv
cp
f
409.949 535.133 mo
409.945 535.336 409.895 535.477 409.797 535.562 cv
409.691 535.648 409.574 535.691 409.449 535.691 cv
404.832 535.691 li
404.828 536.082 404.867 536.434 404.949 536.746 cv
405.023 537.059 405.156 537.328 405.34 537.547 cv
405.52 537.773 405.754 537.945 406.051 538.062 cv
406.34 538.187 406.699 538.246 407.125 538.242 cv
407.457 538.246 407.754 538.219 408.016 538.16 cv
408.277 538.109 408.504 538.047 408.695 537.977 cv
408.883 537.91 409.039 537.852 409.164 537.793 cv
409.285 537.742 409.379 537.715 409.441 537.711 cv
409.477 537.715 409.508 537.723 409.539 537.738 cv
409.566 537.758 409.59 537.785 409.609 537.82 cv
409.621 537.859 409.633 537.91 409.645 537.973 cv
409.648 538.039 409.652 538.117 409.656 538.211 cv
409.652 538.281 409.648 538.34 409.648 538.387 cv
409.641 538.434 409.637 538.477 409.629 538.516 cv
409.621 538.555 409.605 538.59 409.59 538.621 cv
409.566 538.652 409.543 538.684 409.52 538.711 cv
409.488 538.742 409.406 538.789 409.266 538.852 cv
409.125 538.918 408.941 538.98 408.719 539.043 cv
408.492 539.105 408.234 539.16 407.941 539.211 cv
407.648 539.258 407.336 539.281 407.004 539.285 cv
406.426 539.281 405.918 539.203 405.488 539.043 cv
405.051 538.883 404.688 538.645 404.395 538.328 cv
404.094 538.012 403.871 537.617 403.723 537.137 cv
403.574 536.66 403.5 536.102 403.5 535.465 cv
403.5 534.867 403.574 534.328 403.73 533.844 cv
403.883 533.367 404.109 532.957 404.406 532.621 cv
404.699 532.285 405.055 532.027 405.469 531.848 cv
405.883 531.668 406.348 531.578 406.863 531.578 cv
407.414 531.578 407.883 531.668 408.27 531.844 cv
408.656 532.023 408.973 532.262 409.227 532.559 cv
409.473 532.859 409.656 533.211 409.773 533.609 cv
409.887 534.016 409.945 534.445 409.949 534.898 cv
cp
408.656 534.75 mo
408.672 534.074 408.52 533.543 408.203 533.16 cv
407.887 532.777 407.418 532.586 406.801 532.582 cv
406.477 532.586 406.195 532.645 405.957 532.762 cv
405.715 532.883 405.516 533.043 405.355 533.238 cv
405.191 533.437 405.066 533.668 404.98 533.93 cv
404.891 534.191 404.84 534.465 404.832 534.75 cv
cp
f
416.316 537.031 mo
416.313 537.395 416.246 537.715 416.117 537.992 cv
415.984 538.273 415.797 538.508 415.555 538.699 cv
415.309 538.895 415.016 539.039 414.68 539.137 cv
414.34 539.234 413.969 539.281 413.566 539.285 cv
413.313 539.281 413.074 539.262 412.852 539.227 cv
412.625 539.184 412.426 539.137 412.246 539.078 cv
412.066 539.02 411.914 538.957 411.789 538.891 cv
411.664 538.828 411.57 538.77 411.516 538.715 cv
411.457 538.664 411.418 538.594 411.395 538.496 cv
411.367 538.406 411.355 538.277 411.355 538.117 cv
411.355 538.02 411.359 537.937 411.371 537.867 cv
411.379 537.801 411.391 537.746 411.41 537.703 cv
411.422 537.664 411.445 537.633 411.473 537.613 cv
411.5 537.598 411.531 537.59 411.57 537.586 cv
411.625 537.59 411.711 537.625 411.824 537.691 cv
411.934 537.766 412.07 537.844 412.238 537.922 cv
412.398 538.008 412.59 538.082 412.816 538.152 cv
413.035 538.223 413.293 538.258 413.59 538.258 cv
413.805 538.258 414.004 538.234 414.184 538.187 cv
414.359 538.141 414.512 538.074 414.641 537.98 cv
414.77 537.895 414.871 537.777 414.941 537.633 cv
415.012 537.496 415.047 537.328 415.047 537.133 cv
415.047 536.937 414.996 536.773 414.895 536.637 cv
414.793 536.504 414.656 536.383 414.492 536.277 cv
414.324 536.176 414.141 536.086 413.934 536 cv
413.723 535.922 413.508 535.836 413.289 535.746 cv
413.07 535.66 412.855 535.559 412.645 535.445 cv
412.434 535.336 412.242 535.203 412.078 535.039 cv
411.906 534.883 411.773 534.687 411.676 534.461 cv
411.57 534.238 411.52 533.973 411.523 533.66 cv
411.52 533.387 411.574 533.121 411.684 532.867 cv
411.789 532.617 411.949 532.398 412.164 532.207 cv
412.375 532.02 412.641 531.867 412.961 531.75 cv
413.281 531.637 413.652 531.578 414.082 531.578 cv
414.266 531.578 414.453 531.594 414.641 531.625 cv
414.824 531.656 414.992 531.695 415.148 531.742 cv
415.297 531.789 415.426 531.84 415.535 531.895 cv
415.637 531.949 415.719 532 415.777 532.039 cv
415.828 532.086 415.863 532.121 415.887 532.148 cv
415.902 532.18 415.918 532.215 415.926 532.25 cv
415.934 532.293 415.941 532.34 415.949 532.395 cv
415.957 532.453 415.961 532.523 415.961 532.605 cv
415.961 532.695 415.957 532.773 415.949 532.836 cv
415.941 532.906 415.926 532.957 415.91 532.996 cv
415.887 533.039 415.867 533.07 415.844 533.086 cv
415.816 533.105 415.785 533.113 415.758 533.113 cv
415.707 533.113 415.641 533.086 415.555 533.027 cv
415.465 532.973 415.352 532.91 415.211 532.844 cv
415.07 532.781 414.902 532.723 414.715 532.66 cv
414.523 532.605 414.309 532.574 414.066 532.574 cv
413.844 532.574 413.652 532.602 413.488 532.648 cv
413.32 532.703 413.184 532.773 413.078 532.859 cv
412.973 532.953 412.891 533.059 412.84 533.184 cv
412.781 533.309 412.754 533.445 412.758 533.59 cv
412.754 533.793 412.805 533.961 412.91 534.098 cv
413.012 534.238 413.148 534.359 413.316 534.461 cv
413.48 534.566 413.672 534.66 413.887 534.742 cv
414.098 534.828 414.313 534.914 414.535 535 cv
414.754 535.09 414.973 535.191 415.191 535.297 cv
415.406 535.406 415.598 535.535 415.766 535.691 cv
415.93 535.848 416.063 536.035 416.164 536.254 cv
416.262 536.473 416.313 536.734 416.316 537.031 cv
cp
f
184.176 13.758 mo
184.172 14.289 184.074 14.754 183.879 15.152 cv
183.68 15.555 183.414 15.891 183.078 16.156 cv
182.738 16.426 182.34 16.625 181.891 16.758 cv
181.438 16.891 180.957 16.957 180.445 16.961 cv
180.094 16.957 179.77 16.93 179.473 16.875 cv
179.172 16.816 178.91 16.75 178.684 16.668 cv
178.453 16.59 178.262 16.504 178.109 16.414 cv
177.957 16.328 177.848 16.25 177.781 16.18 cv
177.711 16.113 177.66 16.016 177.637 15.891 cv
177.605 15.766 177.594 15.582 177.594 15.34 cv
177.594 15.18 177.598 15.047 177.609 14.934 cv
177.617 14.828 177.633 14.738 177.66 14.668 cv
177.68 14.602 177.711 14.555 177.754 14.523 cv
177.789 14.5 177.836 14.484 177.887 14.48 cv
177.957 14.484 178.059 14.527 178.195 14.609 cv
178.324 14.699 178.496 14.793 178.707 14.895 cv
178.914 15 179.16 15.098 179.449 15.18 cv
179.734 15.27 180.07 15.312 180.453 15.309 cv
180.703 15.312 180.926 15.281 181.121 15.219 cv
181.316 15.16 181.484 15.074 181.625 14.965 cv
181.762 14.855 181.867 14.723 181.941 14.562 cv
182.012 14.402 182.047 14.223 182.051 14.023 cv
182.047 13.797 181.984 13.602 181.863 13.434 cv
181.734 13.273 181.57 13.129 181.375 13 cv
181.172 12.875 180.945 12.754 180.691 12.641 cv
180.438 12.531 180.176 12.414 179.906 12.285 cv
179.633 12.164 179.371 12.02 179.117 11.859 cv
178.863 11.703 178.637 11.516 178.438 11.293 cv
178.234 11.074 178.07 10.812 177.949 10.508 cv
177.824 10.207 177.762 9.84802 177.766 9.42603 cv
177.762 8.94501 177.852 8.52002 178.031 8.15198 cv
178.207 7.789 178.449 7.48401 178.758 7.23798 cv
179.059 7 179.418 6.82001 179.832 6.69897 cv
180.246 6.58197 180.684 6.52301 181.145 6.52002 cv
181.383 6.52301 181.621 6.539 181.863 6.57397 cv
182.102 6.61298 182.324 6.664 182.531 6.72302 cv
182.738 6.78497 182.922 6.85498 183.086 6.92999 cv
183.242 7.01202 183.352 7.07397 183.406 7.125 cv
183.457 7.17999 183.492 7.22699 183.512 7.258 cv
183.527 7.297 183.543 7.34399 183.559 7.40198 cv
183.57 7.46503 183.578 7.539 183.586 7.62903 cv
183.59 7.72302 183.594 7.836 183.594 7.96899 cv
183.594 8.12097 183.59 8.25 183.582 8.35199 cv
183.574 8.45697 183.559 8.54303 183.543 8.60498 cv
183.52 8.67603 183.496 8.72302 183.465 8.75403 cv
183.43 8.78497 183.383 8.80103 183.328 8.80103 cv
183.27 8.80103 183.18 8.76599 183.055 8.69098 cv
182.93 8.62097 182.773 8.54303 182.594 8.453 cv
182.41 8.37097 182.203 8.29303 181.965 8.22302 cv
181.723 8.15601 181.457 8.12097 181.176 8.117 cv
180.949 8.12097 180.758 8.14801 180.594 8.19897 cv
180.426 8.25403 180.285 8.328 180.176 8.422 cv
180.063 8.52002 179.98 8.63702 179.926 8.77002 cv
179.871 8.90997 179.844 9.05103 179.844 9.19897 cv
179.844 9.42603 179.902 9.62097 180.027 9.78101 cv
180.145 9.94501 180.309 10.09 180.52 10.215 cv
180.723 10.344 180.957 10.465 181.215 10.574 cv
181.473 10.691 181.738 10.809 182.012 10.93 cv
182.281 11.059 182.543 11.199 182.805 11.355 cv
183.063 11.512 183.297 11.703 183.5 11.922 cv
183.703 12.148 183.863 12.406 183.988 12.703 cv
184.109 13 184.172 13.352 184.176 13.758 cv
cp
f
190.891 15.41 mo
190.887 15.547 190.883 15.66 190.879 15.75 cv
190.867 15.844 190.859 15.922 190.848 15.98 cv
190.832 16.043 190.816 16.094 190.801 16.129 cv
190.781 16.172 190.738 16.219 190.68 16.277 cv
190.613 16.34 190.508 16.414 190.359 16.496 cv
190.207 16.586 190.035 16.664 189.844 16.727 cv
189.652 16.797 189.445 16.848 189.219 16.891 cv
188.992 16.93 188.758 16.949 188.523 16.953 cv
187.984 16.949 187.512 16.871 187.098 16.703 cv
186.684 16.539 186.336 16.293 186.059 15.969 cv
185.773 15.645 185.563 15.25 185.422 14.781 cv
185.281 14.316 185.211 13.777 185.211 13.172 cv
185.211 12.477 185.297 11.879 185.469 11.371 cv
185.641 10.867 185.883 10.445 186.199 10.113 cv
186.508 9.78101 186.875 9.53497 187.305 9.37097 cv
187.727 9.211 188.195 9.12903 188.707 9.12903 cv
188.914 9.12903 189.117 9.14801 189.32 9.18402 cv
189.516 9.22302 189.703 9.27301 189.879 9.33197 cv
190.051 9.39801 190.207 9.46899 190.348 9.54303 cv
190.484 9.625 190.582 9.69098 190.641 9.74597 cv
190.695 9.80499 190.734 9.85199 190.762 9.88702 cv
190.781 9.92999 190.801 9.97998 190.816 10.039 cv
190.828 10.105 190.84 10.184 190.848 10.27 cv
190.855 10.363 190.859 10.473 190.859 10.602 cv
190.859 10.906 190.832 11.117 190.781 11.238 cv
190.727 11.359 190.66 11.422 190.578 11.418 cv
190.488 11.422 190.395 11.387 190.297 11.312 cv
190.195 11.242 190.078 11.16 189.945 11.07 cv
189.813 10.984 189.652 10.902 189.465 10.828 cv
189.277 10.758 189.051 10.723 188.793 10.719 cv
188.281 10.723 187.895 10.918 187.625 11.309 cv
187.352 11.699 187.215 12.273 187.219 13.031 cv
187.215 13.406 187.25 13.738 187.32 14.023 cv
187.387 14.309 187.484 14.547 187.621 14.738 cv
187.75 14.934 187.918 15.078 188.121 15.172 cv
188.32 15.27 188.551 15.316 188.816 15.316 cv
189.082 15.316 189.316 15.277 189.516 15.195 cv
189.707 15.117 189.875 15.027 190.023 14.926 cv
190.164 14.828 190.289 14.738 190.391 14.656 cv
190.488 14.578 190.57 14.539 190.641 14.535 cv
190.684 14.539 190.723 14.551 190.758 14.574 cv
190.785 14.602 190.809 14.648 190.832 14.719 cv
190.848 14.789 190.863 14.879 190.875 14.988 cv
190.883 15.098 190.887 15.238 190.891 15.41 cv
cp
f
198.164 16.539 mo
198.16 16.617 198.133 16.672 198.086 16.711 cv
198.031 16.754 197.949 16.781 197.84 16.801 cv
197.723 16.816 197.559 16.828 197.344 16.828 cv
197.105 16.828 196.934 16.816 196.832 16.801 cv
196.723 16.781 196.648 16.754 196.609 16.711 cv
196.563 16.672 196.543 16.617 196.543 16.539 cv
196.543 15.988 li
196.254 16.297 195.926 16.535 195.563 16.703 cv
195.195 16.875 194.789 16.957 194.344 16.961 cv
193.973 16.957 193.633 16.91 193.324 16.816 cv
193.016 16.723 192.75 16.582 192.523 16.387 cv
192.297 16.199 192.121 15.965 191.996 15.684 cv
191.871 15.406 191.809 15.078 191.813 14.699 cv
191.809 14.301 191.887 13.949 192.047 13.645 cv
192.203 13.348 192.441 13.102 192.758 12.906 cv
193.07 12.715 193.461 12.57 193.93 12.473 cv
194.398 12.383 194.941 12.336 195.559 12.332 cv
196.238 12.332 li
196.238 11.91 li
196.238 11.695 196.215 11.504 196.172 11.34 cv
196.125 11.18 196.051 11.043 195.953 10.93 cv
195.848 10.824 195.715 10.742 195.547 10.687 cv
195.375 10.637 195.164 10.613 194.922 10.609 cv
194.59 10.613 194.297 10.648 194.043 10.719 cv
193.781 10.793 193.555 10.875 193.359 10.961 cv
193.16 11.055 192.996 11.133 192.867 11.203 cv
192.73 11.277 192.621 11.316 192.543 11.312 cv
192.48 11.316 192.43 11.297 192.391 11.258 cv
192.344 11.223 192.309 11.172 192.281 11.102 cv
192.25 11.039 192.227 10.953 192.215 10.852 cv
192.195 10.754 192.188 10.645 192.191 10.523 cv
192.188 10.363 192.203 10.238 192.23 10.141 cv
192.254 10.051 192.301 9.96503 192.379 9.88702 cv
192.449 9.81201 192.578 9.72998 192.762 9.64099 cv
192.941 9.55103 193.152 9.46503 193.398 9.38702 cv
193.641 9.30902 193.91 9.24597 194.199 9.19501 cv
194.488 9.14801 194.785 9.125 195.094 9.12097 cv
195.637 9.125 196.102 9.17603 196.488 9.28101 cv
196.875 9.39099 197.195 9.55499 197.445 9.77301 cv
197.695 9.992 197.875 10.277 197.992 10.625 cv
198.102 10.977 198.16 11.391 198.164 11.863 cv
cp
196.238 13.562 mo
195.488 13.562 li
195.172 13.566 194.902 13.59 194.68 13.633 cv
194.453 13.684 194.27 13.754 194.133 13.844 cv
193.988 13.941 193.887 14.055 193.824 14.184 cv
193.758 14.32 193.723 14.469 193.727 14.637 cv
193.723 14.93 193.816 15.16 194.004 15.324 cv
194.188 15.492 194.445 15.574 194.773 15.574 cv
195.047 15.574 195.297 15.504 195.531 15.363 cv
195.758 15.223 195.996 15.02 196.238 14.746 cv
cp
f
202.086 16.516 mo
202.082 16.57 202.066 16.613 202.039 16.652 cv
202.004 16.691 201.949 16.727 201.879 16.75 cv
201.801 16.777 201.703 16.793 201.578 16.809 cv
201.453 16.82 201.293 16.828 201.105 16.828 cv
200.91 16.828 200.754 16.82 200.629 16.809 cv
200.504 16.793 200.402 16.777 200.328 16.75 cv
200.25 16.727 200.195 16.691 200.168 16.652 cv
200.133 16.613 200.117 16.57 200.121 16.516 cv
200.121 6.27002 li
200.117 6.21899 200.133 6.172 200.168 6.12903 cv
200.195 6.09003 200.25 6.05499 200.328 6.02301 cv
200.402 5.99597 200.504 5.97699 200.629 5.95697 cv
200.754 5.94501 200.91 5.93701 201.105 5.93402 cv
201.293 5.93701 201.453 5.94501 201.578 5.95697 cv
201.703 5.97699 201.801 5.99597 201.879 6.02301 cv
201.949 6.05499 202.004 6.09003 202.039 6.12903 cv
202.066 6.172 202.082 6.21899 202.086 6.27002 cv
cp
f
206.059 16.516 mo
206.055 16.57 206.039 16.613 206.012 16.652 cv
205.977 16.691 205.922 16.727 205.852 16.75 cv
205.773 16.777 205.676 16.793 205.551 16.809 cv
205.426 16.82 205.266 16.828 205.078 16.828 cv
204.883 16.828 204.727 16.82 204.602 16.809 cv
204.477 16.793 204.375 16.777 204.301 16.75 cv
204.223 16.727 204.168 16.691 204.141 16.652 cv
204.105 16.613 204.09 16.57 204.094 16.516 cv
204.094 9.58197 li
204.09 9.53101 204.105 9.48401 204.141 9.44501 cv
204.168 9.40601 204.223 9.375 204.301 9.34399 cv
204.375 9.32001 204.477 9.297 204.602 9.27698 cv
204.727 9.26599 204.883 9.258 205.078 9.25403 cv
205.266 9.258 205.426 9.26599 205.551 9.27698 cv
205.676 9.297 205.773 9.32001 205.852 9.34399 cv
205.922 9.375 205.977 9.40601 206.012 9.44501 cv
206.039 9.48401 206.055 9.53101 206.059 9.58197 cv
cp
206.207 7.211 mo
206.207 7.60901 206.125 7.883 205.965 8.03101 cv
205.801 8.18402 205.504 8.258 205.07 8.25403 cv
204.625 8.258 204.324 8.18402 204.176 8.039 cv
204.02 7.89502 203.945 7.633 203.945 7.25 cv
203.945 6.85498 204.023 6.58197 204.184 6.42999 cv
204.34 6.27698 204.641 6.19897 205.086 6.19897 cv
205.52 6.19897 205.816 6.27301 205.973 6.422 cv
206.129 6.57001 206.207 6.836 206.207 7.211 cv
cp
f
214.66 16.516 mo
214.656 16.57 214.641 16.613 214.613 16.652 cv
214.578 16.691 214.527 16.727 214.457 16.75 cv
214.383 16.777 214.281 16.793 214.156 16.809 cv
214.027 16.82 213.871 16.828 213.688 16.828 cv
213.492 16.828 213.332 16.82 213.207 16.809 cv
213.078 16.793 212.977 16.777 212.906 16.75 cv
212.828 16.727 212.777 16.691 212.75 16.652 cv
212.715 16.613 212.699 16.57 212.703 16.516 cv
212.703 12.551 li
212.699 12.215 212.676 11.949 212.629 11.754 cv
212.578 11.562 212.504 11.398 212.414 11.262 cv
212.32 11.125 212.203 11.02 212.055 10.941 cv
211.906 10.867 211.73 10.828 211.535 10.828 cv
211.281 10.828 211.031 10.922 210.777 11.102 cv
210.523 11.285 210.258 11.547 209.984 11.895 cv
209.984 16.516 li
209.98 16.57 209.965 16.613 209.938 16.652 cv
209.902 16.691 209.848 16.727 209.777 16.75 cv
209.699 16.777 209.602 16.793 209.477 16.809 cv
209.352 16.82 209.191 16.828 209.004 16.828 cv
208.809 16.828 208.652 16.82 208.527 16.809 cv
208.402 16.793 208.301 16.777 208.227 16.75 cv
208.148 16.727 208.094 16.691 208.066 16.652 cv
208.031 16.613 208.016 16.57 208.02 16.516 cv
208.02 9.56598 li
208.016 9.52002 208.031 9.47302 208.059 9.42999 cv
208.082 9.39502 208.129 9.36298 208.199 9.33197 cv
208.266 9.30902 208.352 9.289 208.461 9.27301 cv
208.566 9.26599 208.699 9.258 208.863 9.25403 cv
209.027 9.258 209.164 9.26599 209.273 9.27301 cv
209.379 9.289 209.465 9.30902 209.527 9.33197 cv
209.586 9.36298 209.629 9.39502 209.656 9.42999 cv
209.68 9.47302 209.691 9.52002 209.695 9.56598 cv
209.695 10.367 li
210.078 9.95697 210.469 9.64502 210.867 9.43402 cv
211.262 9.22699 211.68 9.125 212.113 9.12097 cv
212.582 9.125 212.98 9.203 213.309 9.35498 cv
213.633 9.51599 213.895 9.72699 214.094 9.992 cv
214.293 10.262 214.438 10.574 214.527 10.93 cv
214.613 11.289 214.656 11.719 214.66 12.223 cv
cp
f
222.859 10.047 mo
222.855 10.301 222.828 10.484 222.773 10.602 cv
222.715 10.723 222.645 10.781 222.566 10.781 cv
221.746 10.781 li
221.859 10.906 221.941 11.051 221.992 11.207 cv
222.039 11.367 222.063 11.531 222.066 11.699 cv
222.063 12.109 221.996 12.469 221.863 12.781 cv
221.727 13.098 221.531 13.363 221.281 13.574 cv
221.027 13.793 220.727 13.957 220.371 14.066 cv
220.012 14.184 219.613 14.238 219.184 14.234 cv
218.957 14.238 218.746 14.211 218.543 14.152 cv
218.34 14.102 218.184 14.039 218.074 13.961 cv
218.012 14.031 217.953 14.109 217.906 14.203 cv
217.855 14.297 217.832 14.402 217.836 14.512 cv
217.832 14.668 217.898 14.789 218.031 14.883 cv
218.16 14.98 218.348 15.035 218.59 15.043 cv
220.281 15.105 li
220.676 15.121 221.027 15.18 221.336 15.273 cv
221.645 15.375 221.906 15.508 222.117 15.68 cv
222.328 15.855 222.488 16.066 222.598 16.309 cv
222.707 16.555 222.762 16.828 222.766 17.141 cv
222.762 17.477 222.688 17.801 222.539 18.109 cv
222.391 18.41 222.164 18.672 221.863 18.898 cv
221.559 19.117 221.18 19.297 220.727 19.43 cv
220.27 19.559 219.738 19.621 219.137 19.625 cv
218.539 19.621 218.035 19.574 217.617 19.484 cv
217.199 19.387 216.855 19.258 216.59 19.094 cv
216.32 18.926 216.125 18.727 216.008 18.5 cv
215.883 18.266 215.824 18.012 215.824 17.738 cv
215.824 17.566 215.844 17.406 215.891 17.25 cv
215.93 17.094 215.996 16.941 216.086 16.801 cv
216.168 16.656 216.273 16.523 216.398 16.391 cv
216.523 16.262 216.664 16.137 216.828 16.016 cv
216.602 15.902 216.43 15.742 216.309 15.531 cv
216.188 15.328 216.129 15.102 216.129 14.855 cv
216.129 14.555 216.195 14.277 216.336 14.02 cv
216.473 13.77 216.656 13.539 216.883 13.336 cv
216.699 13.156 216.555 12.941 216.445 12.684 cv
216.336 12.434 216.281 12.113 216.285 11.73 cv
216.281 11.328 216.352 10.969 216.496 10.645 cv
216.637 10.328 216.836 10.059 217.094 9.836 cv
217.348 9.617 217.652 9.44501 218.004 9.328 cv
218.355 9.211 218.746 9.15198 219.176 9.15198 cv
219.395 9.15198 219.602 9.16803 219.801 9.19098 cv
220 9.22302 220.188 9.258 220.359 9.30103 cv
222.566 9.30103 li
222.648 9.30499 222.719 9.36298 222.777 9.47302 cv
222.828 9.59003 222.855 9.78101 222.859 10.047 cv
cp
220.344 11.691 mo
220.34 11.32 220.238 11.031 220.031 10.82 cv
219.82 10.617 219.527 10.512 219.152 10.508 cv
218.957 10.512 218.785 10.543 218.645 10.605 cv
218.496 10.672 218.375 10.762 218.281 10.871 cv
218.18 10.984 218.109 11.113 218.066 11.262 cv
218.016 11.41 217.992 11.566 217.996 11.723 cv
217.992 12.082 218.098 12.359 218.309 12.562 cv
218.516 12.77 218.805 12.875 219.176 12.871 cv
219.371 12.875 219.539 12.844 219.688 12.777 cv
219.828 12.719 219.949 12.633 220.051 12.52 cv
220.145 12.414 220.219 12.285 220.27 12.141 cv
220.316 12 220.34 11.852 220.344 11.691 cv
cp
220.805 17.242 mo
220.805 17.004 220.711 16.828 220.523 16.703 cv
220.336 16.582 220.078 16.512 219.75 16.5 cv
218.355 16.461 li
218.219 16.562 218.109 16.656 218.031 16.746 cv
217.949 16.836 217.887 16.922 217.84 17.008 cv
217.789 17.09 217.754 17.172 217.742 17.25 cv
217.723 17.328 217.715 17.406 217.719 17.492 cv
217.715 17.746 217.848 17.945 218.109 18.082 cv
218.371 18.215 218.742 18.281 219.223 18.285 cv
219.516 18.281 219.762 18.25 219.969 18.195 cv
220.168 18.133 220.332 18.055 220.461 17.957 cv
220.582 17.855 220.672 17.746 220.727 17.625 cv
220.777 17.504 220.805 17.375 220.805 17.242 cv
cp
f
229.051 14.551 mo
229.047 14.949 228.973 15.297 228.828 15.598 cv
228.68 15.898 228.473 16.152 228.203 16.352 cv
227.93 16.559 227.609 16.707 227.242 16.809 cv
226.875 16.906 226.473 16.957 226.043 16.961 cv
225.777 16.957 225.531 16.937 225.297 16.902 cv
225.063 16.859 224.852 16.812 224.664 16.754 cv
224.477 16.695 224.32 16.633 224.195 16.57 cv
224.07 16.508 223.977 16.449 223.922 16.395 cv
223.863 16.34 223.82 16.258 223.793 16.141 cv
223.758 16.027 223.742 15.852 223.746 15.621 cv
223.742 15.473 223.75 15.352 223.762 15.258 cv
223.77 15.168 223.785 15.098 223.809 15.039 cv
223.828 14.988 223.852 14.949 223.887 14.93 cv
223.914 14.914 223.953 14.906 224 14.902 cv
224.055 14.906 224.141 14.937 224.254 15 cv
224.363 15.066 224.5 15.141 224.672 15.215 cv
224.836 15.297 225.031 15.367 225.25 15.434 cv
225.469 15.504 225.719 15.539 226.004 15.535 cv
226.18 15.539 226.336 15.52 226.477 15.48 cv
226.609 15.445 226.73 15.395 226.836 15.324 cv
226.934 15.258 227.008 15.172 227.063 15.066 cv
227.109 14.965 227.137 14.844 227.141 14.707 cv
227.137 14.551 227.09 14.418 226.996 14.309 cv
226.902 14.199 226.773 14.102 226.617 14.016 cv
226.453 13.934 226.273 13.855 226.078 13.781 cv
225.875 13.711 225.672 13.633 225.461 13.539 cv
225.25 13.453 225.043 13.352 224.848 13.234 cv
224.645 13.125 224.465 12.984 224.309 12.816 cv
224.145 12.652 224.02 12.453 223.926 12.215 cv
223.832 11.984 223.785 11.703 223.785 11.371 cv
223.785 11.043 223.848 10.738 223.977 10.457 cv
224.105 10.184 224.293 9.94501 224.539 9.74597 cv
224.781 9.55103 225.078 9.39801 225.43 9.28497 cv
225.777 9.17999 226.172 9.125 226.613 9.12097 cv
226.828 9.125 227.039 9.14099 227.246 9.16803 cv
227.449 9.203 227.637 9.242 227.805 9.28497 cv
227.969 9.336 228.109 9.38702 228.227 9.43701 cv
228.34 9.49597 228.422 9.54303 228.473 9.578 cv
228.52 9.62097 228.555 9.65997 228.578 9.69501 cv
228.598 9.73798 228.609 9.78497 228.621 9.836 cv
228.629 9.89099 228.641 9.95697 228.648 10.035 cv
228.656 10.121 228.66 10.219 228.66 10.336 cv
228.66 10.477 228.656 10.594 228.648 10.68 cv
228.641 10.773 228.625 10.844 228.609 10.891 cv
228.59 10.945 228.566 10.98 228.539 10.996 cv
228.504 11.02 228.469 11.027 228.43 11.023 cv
228.379 11.027 228.305 11 228.211 10.941 cv
228.109 10.891 227.988 10.832 227.84 10.766 cv
227.691 10.707 227.52 10.648 227.324 10.59 cv
227.129 10.539 226.906 10.512 226.66 10.508 cv
226.48 10.512 226.328 10.531 226.199 10.562 cv
226.066 10.602 225.957 10.652 225.879 10.719 cv
225.793 10.789 225.73 10.867 225.691 10.957 cv
225.645 11.051 225.625 11.148 225.629 11.25 cv
225.625 11.41 225.676 11.547 225.777 11.652 cv
225.875 11.766 226.004 11.859 226.168 11.941 cv
226.328 12.027 226.512 12.105 226.719 12.176 cv
226.922 12.25 227.129 12.332 227.34 12.414 cv
227.547 12.504 227.754 12.602 227.965 12.715 cv
228.168 12.828 228.352 12.969 228.512 13.133 cv
228.672 13.301 228.801 13.5 228.902 13.73 cv
228.996 13.965 229.047 14.238 229.051 14.551 cv
cp
f
241.164 12.969 mo
241.16 13.566 241.082 14.109 240.93 14.594 cv
240.77 15.086 240.535 15.504 240.219 15.855 cv
239.902 16.207 239.504 16.48 239.027 16.672 cv
238.547 16.863 237.988 16.957 237.352 16.961 cv
236.73 16.957 236.191 16.875 235.738 16.703 cv
235.277 16.535 234.898 16.285 234.602 15.957 cv
234.297 15.633 234.074 15.23 233.93 14.75 cv
233.785 14.273 233.715 13.727 233.715 13.109 cv
233.715 12.52 233.793 11.98 233.949 11.488 cv
234.105 11 234.344 10.578 234.664 10.227 cv
234.98 9.87903 235.375 9.60498 235.852 9.40997 cv
236.324 9.21899 236.883 9.125 237.523 9.12097 cv
238.148 9.125 238.688 9.20697 239.145 9.375 cv
239.602 9.547 239.98 9.797 240.277 10.121 cv
240.574 10.449 240.797 10.852 240.945 11.328 cv
241.09 11.809 241.16 12.355 241.164 12.969 cv
cp
239.145 13.047 mo
239.141 12.711 239.113 12.395 239.063 12.102 cv
239.004 11.816 238.91 11.566 238.785 11.352 cv
238.652 11.141 238.48 10.973 238.27 10.852 cv
238.051 10.734 237.781 10.676 237.453 10.672 cv
237.164 10.676 236.91 10.73 236.691 10.832 cv
236.473 10.941 236.293 11.098 236.152 11.301 cv
236.012 11.508 235.906 11.754 235.836 12.039 cv
235.766 12.332 235.73 12.66 235.73 13.023 cv
235.73 13.371 235.758 13.687 235.816 13.973 cv
235.871 14.266 235.965 14.516 236.094 14.727 cv
236.219 14.941 236.391 15.105 236.613 15.219 cv
236.828 15.34 237.098 15.398 237.422 15.395 cv
237.715 15.398 237.973 15.344 238.195 15.234 cv
238.41 15.129 238.59 14.977 238.73 14.77 cv
238.871 14.57 238.973 14.324 239.043 14.035 cv
239.105 13.75 239.141 13.422 239.145 13.047 cv
cp
f
246.914 6.914 mo
246.91 7.06598 246.906 7.18701 246.898 7.27698 cv
246.887 7.37097 246.871 7.44098 246.852 7.48798 cv
246.828 7.539 246.805 7.57397 246.781 7.59003 cv
246.754 7.60901 246.727 7.617 246.695 7.617 cv
246.656 7.617 246.613 7.60901 246.574 7.59003 cv
246.527 7.57397 246.473 7.55499 246.41 7.53101 cv
246.34 7.51202 246.266 7.492 246.18 7.47302 cv
246.09 7.45697 245.984 7.44897 245.867 7.44501 cv
245.723 7.44897 245.602 7.46899 245.504 7.51202 cv
245.402 7.55902 245.32 7.62903 245.254 7.72302 cv
245.184 7.82001 245.133 7.94501 245.105 8.09802 cv
245.07 8.25 245.055 8.43701 245.059 8.65997 cv
245.059 9.30103 li
246.328 9.30103 li
246.371 9.30499 246.414 9.31598 246.457 9.34003 cv
246.492 9.367 246.527 9.40997 246.555 9.46899 cv
246.578 9.53101 246.598 9.61298 246.613 9.71503 cv
246.625 9.81598 246.629 9.94501 246.633 10.094 cv
246.629 10.383 246.605 10.586 246.555 10.707 cv
246.5 10.832 246.422 10.895 246.328 10.891 cv
245.059 10.891 li
245.059 16.516 li
245.055 16.57 245.039 16.613 245.012 16.652 cv
244.977 16.691 244.926 16.727 244.855 16.75 cv
244.781 16.777 244.68 16.793 244.551 16.809 cv
244.418 16.82 244.258 16.828 244.074 16.828 cv
243.887 16.828 243.73 16.82 243.605 16.809 cv
243.477 16.793 243.375 16.777 243.301 16.75 cv
243.223 16.727 243.172 16.691 243.145 16.652 cv
243.113 16.613 243.098 16.57 243.102 16.516 cv
243.102 10.891 li
242.23 10.891 li
242.129 10.895 242.055 10.832 242.008 10.707 cv
241.957 10.586 241.93 10.383 241.934 10.094 cv
241.93 9.94501 241.938 9.81598 241.953 9.71503 cv
241.965 9.61298 241.984 9.53101 242.008 9.46899 cv
242.031 9.40997 242.063 9.367 242.102 9.34003 cv
242.141 9.31598 242.184 9.30499 242.238 9.30103 cv
243.102 9.30103 li
243.102 8.71503 li
243.098 8.24597 243.145 7.83197 243.242 7.47302 cv
243.332 7.117 243.48 6.82001 243.684 6.586 cv
243.883 6.35199 244.137 6.17603 244.445 6.05103 cv
244.754 5.93402 245.117 5.87097 245.543 5.87097 cv
245.738 5.87097 245.93 5.89099 246.117 5.922 cv
246.297 5.961 246.441 5.99597 246.547 6.03101 cv
246.648 6.07397 246.719 6.10901 246.758 6.14099 cv
246.793 6.17603 246.824 6.22699 246.848 6.289 cv
246.871 6.35498 246.887 6.43701 246.898 6.539 cv
246.906 6.64099 246.91 6.76599 246.914 6.914 cv
cp
f
255.484 15.832 mo
255.484 16.059 255.469 16.234 255.441 16.355 cv
255.41 16.48 255.371 16.566 255.328 16.613 cv
255.277 16.664 255.211 16.707 255.121 16.746 cv
255.027 16.785 254.918 16.816 254.801 16.848 cv
254.676 16.871 254.543 16.895 254.402 16.914 cv
254.258 16.926 254.117 16.934 253.973 16.937 cv
253.582 16.934 253.242 16.883 252.957 16.789 cv
252.672 16.687 252.438 16.539 252.25 16.332 cv
252.063 16.129 251.922 15.871 251.836 15.559 cv
251.742 15.25 251.699 14.879 251.703 14.449 cv
251.703 10.891 li
250.871 10.891 li
250.77 10.895 250.695 10.832 250.645 10.707 cv
250.59 10.586 250.563 10.383 250.566 10.094 cv
250.563 9.94501 250.57 9.81598 250.586 9.71503 cv
250.598 9.61298 250.617 9.53101 250.645 9.46899 cv
250.668 9.40997 250.699 9.367 250.742 9.34003 cv
250.777 9.31598 250.824 9.30499 250.879 9.30103 cv
251.703 9.30103 li
251.703 7.75 li
251.699 7.703 251.715 7.65601 251.746 7.60901 cv
251.773 7.57001 251.824 7.53497 251.902 7.50403 cv
251.977 7.47998 252.078 7.45697 252.207 7.44098 cv
252.332 7.42999 252.488 7.42603 252.68 7.422 cv
252.867 7.42603 253.027 7.42999 253.156 7.44098 cv
253.281 7.45697 253.383 7.47998 253.457 7.50403 cv
253.527 7.53497 253.578 7.57001 253.613 7.60901 cv
253.641 7.65601 253.656 7.703 253.66 7.75 cv
253.66 9.30103 li
255.172 9.30103 li
255.223 9.30499 255.27 9.31598 255.309 9.34003 cv
255.348 9.367 255.379 9.40997 255.406 9.46899 cv
255.43 9.53101 255.449 9.61298 255.465 9.71503 cv
255.477 9.81598 255.484 9.94501 255.484 10.094 cv
255.484 10.383 255.457 10.586 255.406 10.707 cv
255.352 10.832 255.277 10.895 255.18 10.891 cv
253.66 10.891 li
253.66 14.156 li
253.656 14.535 253.715 14.82 253.84 15.008 cv
253.957 15.199 254.172 15.293 254.477 15.293 cv
254.578 15.293 254.672 15.285 254.758 15.266 cv
254.84 15.25 254.914 15.23 254.98 15.203 cv
255.043 15.184 255.098 15.16 255.145 15.141 cv
255.188 15.125 255.227 15.117 255.266 15.113 cv
255.293 15.117 255.324 15.125 255.355 15.141 cv
255.383 15.16 255.402 15.199 255.422 15.25 cv
255.434 15.309 255.449 15.383 255.465 15.473 cv
255.477 15.57 255.484 15.687 255.484 15.832 cv
cp
f
263.547 16.516 mo
263.543 16.57 263.527 16.613 263.5 16.652 cv
263.465 16.691 263.414 16.727 263.344 16.75 cv
263.27 16.777 263.168 16.793 263.043 16.809 cv
262.914 16.82 262.758 16.828 262.574 16.828 cv
262.379 16.828 262.219 16.82 262.094 16.809 cv
261.965 16.793 261.863 16.777 261.793 16.75 cv
261.715 16.727 261.664 16.691 261.637 16.652 cv
261.602 16.613 261.586 16.57 261.59 16.516 cv
261.59 12.551 li
261.586 12.215 261.563 11.949 261.516 11.754 cv
261.465 11.562 261.391 11.398 261.301 11.262 cv
261.207 11.125 261.09 11.02 260.941 10.941 cv
260.793 10.867 260.617 10.828 260.422 10.828 cv
260.168 10.828 259.918 10.922 259.664 11.102 cv
259.41 11.285 259.145 11.547 258.871 11.895 cv
258.871 16.516 li
258.867 16.57 258.852 16.613 258.824 16.652 cv
258.789 16.691 258.734 16.727 258.664 16.75 cv
258.586 16.777 258.488 16.793 258.363 16.809 cv
258.238 16.82 258.078 16.828 257.891 16.828 cv
257.695 16.828 257.539 16.82 257.414 16.809 cv
257.289 16.793 257.188 16.777 257.113 16.75 cv
257.035 16.727 256.98 16.691 256.953 16.652 cv
256.918 16.613 256.902 16.57 256.906 16.516 cv
256.906 6.27002 li
256.902 6.21899 256.918 6.172 256.953 6.12903 cv
256.98 6.09003 257.035 6.05499 257.113 6.02301 cv
257.188 5.99597 257.289 5.97699 257.414 5.95697 cv
257.539 5.94501 257.695 5.93701 257.891 5.93402 cv
258.078 5.93701 258.238 5.94501 258.363 5.95697 cv
258.488 5.97699 258.586 5.99597 258.664 6.02301 cv
258.734 6.05499 258.789 6.09003 258.824 6.12903 cv
258.852 6.172 258.867 6.21899 258.871 6.27002 cv
258.871 10.109 li
259.207 9.78101 259.551 9.53497 259.902 9.367 cv
260.25 9.20697 260.617 9.125 261 9.12097 cv
261.469 9.125 261.867 9.203 262.195 9.35498 cv
262.52 9.51599 262.781 9.72699 262.98 9.99597 cv
263.18 10.266 263.324 10.582 263.414 10.941 cv
263.5 11.305 263.543 11.742 263.547 12.254 cv
cp
f
271.836 12.84 mo
271.832 13.078 271.781 13.254 271.676 13.367 cv
271.566 13.484 271.418 13.543 271.238 13.539 cv
267.004 13.539 li
267 13.84 267.035 14.109 267.109 14.348 cv
267.176 14.59 267.289 14.793 267.445 14.961 cv
267.598 15.133 267.793 15.262 268.035 15.348 cv
268.273 15.437 268.563 15.48 268.906 15.48 cv
269.246 15.48 269.547 15.457 269.809 15.406 cv
270.066 15.359 270.293 15.305 270.484 15.242 cv
270.672 15.184 270.828 15.129 270.957 15.078 cv
271.078 15.031 271.18 15.008 271.262 15.004 cv
271.305 15.008 271.344 15.016 271.379 15.031 cv
271.406 15.051 271.434 15.082 271.453 15.129 cv
271.473 15.176 271.484 15.242 271.496 15.328 cv
271.5 15.414 271.504 15.523 271.508 15.652 cv
271.504 15.77 271.504 15.867 271.5 15.945 cv
271.492 16.027 271.484 16.094 271.477 16.148 cv
271.465 16.207 271.449 16.258 271.43 16.293 cv
271.41 16.336 271.383 16.371 271.352 16.406 cv
271.316 16.445 271.223 16.496 271.074 16.555 cv
270.918 16.621 270.727 16.684 270.496 16.738 cv
270.258 16.801 269.988 16.848 269.691 16.895 cv
269.387 16.934 269.066 16.957 268.727 16.961 cv
268.105 16.957 267.563 16.883 267.102 16.727 cv
266.633 16.574 266.246 16.336 265.938 16.02 cv
265.621 15.703 265.387 15.305 265.238 14.82 cv
265.082 14.34 265.008 13.773 265.012 13.117 cv
265.008 12.504 265.086 11.945 265.25 11.449 cv
265.406 10.953 265.641 10.535 265.953 10.187 cv
266.258 9.84399 266.633 9.578 267.07 9.39502 cv
267.508 9.21503 268 9.125 268.555 9.12097 cv
269.133 9.125 269.633 9.211 270.047 9.37903 cv
270.461 9.55499 270.797 9.79303 271.063 10.094 cv
271.324 10.398 271.52 10.758 271.648 11.172 cv
271.77 11.59 271.832 12.039 271.836 12.527 cv
cp
269.934 12.277 mo
269.945 11.727 269.836 11.293 269.602 10.98 cv
269.367 10.668 269 10.512 268.508 10.508 cv
268.258 10.512 268.043 10.559 267.859 10.648 cv
267.672 10.746 267.52 10.871 267.398 11.027 cv
267.273 11.187 267.18 11.375 267.117 11.59 cv
267.051 11.805 267.012 12.035 267.004 12.277 cv
cp
f
282.938 7.539 mo
282.934 7.69897 282.93 7.828 282.918 7.93402 cv
282.902 8.04303 282.879 8.12903 282.855 8.18701 cv
282.824 8.25 282.793 8.297 282.758 8.32397 cv
282.719 8.35901 282.676 8.375 282.633 8.37097 cv
279.336 8.37097 li
279.336 11.086 li
282.43 11.086 li
282.473 11.086 282.516 11.102 282.555 11.125 cv
282.59 11.156 282.621 11.199 282.652 11.258 cv
282.68 11.32 282.699 11.402 282.715 11.504 cv
282.723 11.609 282.73 11.738 282.734 11.895 cv
282.73 12.051 282.723 12.184 282.715 12.285 cv
282.699 12.395 282.68 12.48 282.652 12.543 cv
282.621 12.613 282.59 12.66 282.555 12.687 cv
282.516 12.719 282.473 12.734 282.43 12.73 cv
279.336 12.73 li
279.336 16.484 li
279.332 16.543 279.316 16.594 279.289 16.633 cv
279.254 16.68 279.199 16.715 279.121 16.738 cv
279.039 16.77 278.934 16.789 278.805 16.805 cv
278.672 16.82 278.504 16.828 278.309 16.828 cv
278.105 16.828 277.941 16.82 277.813 16.805 cv
277.676 16.789 277.57 16.77 277.496 16.738 cv
277.414 16.715 277.359 16.68 277.328 16.633 cv
277.293 16.594 277.273 16.543 277.277 16.484 cv
277.277 7.34399 li
277.273 7.117 277.332 6.953 277.453 6.84802 cv
277.566 6.75 277.711 6.69897 277.887 6.69501 cv
282.633 6.69501 li
282.676 6.69897 282.719 6.711 282.758 6.73798 cv
282.793 6.77002 282.824 6.81598 282.855 6.87903 cv
282.879 6.94501 282.902 7.03497 282.918 7.14099 cv
282.93 7.25403 282.934 7.38702 282.938 7.539 cv
cp
f
286.449 16.516 mo
286.445 16.57 286.43 16.613 286.402 16.652 cv
286.367 16.691 286.313 16.727 286.242 16.75 cv
286.164 16.777 286.066 16.793 285.941 16.809 cv
285.816 16.82 285.656 16.828 285.469 16.828 cv
285.273 16.828 285.117 16.82 284.992 16.809 cv
284.867 16.793 284.766 16.777 284.691 16.75 cv
284.613 16.727 284.559 16.691 284.531 16.652 cv
284.496 16.613 284.48 16.57 284.484 16.516 cv
284.484 9.58197 li
284.48 9.53101 284.496 9.48401 284.531 9.44501 cv
284.559 9.40601 284.613 9.375 284.691 9.34399 cv
284.766 9.32001 284.867 9.297 284.992 9.27698 cv
285.117 9.26599 285.273 9.258 285.469 9.25403 cv
285.656 9.258 285.816 9.26599 285.941 9.27698 cv
286.066 9.297 286.164 9.32001 286.242 9.34399 cv
286.313 9.375 286.367 9.40601 286.402 9.44501 cv
286.43 9.48401 286.445 9.53101 286.449 9.58197 cv
cp
286.598 7.211 mo
286.598 7.60901 286.516 7.883 286.355 8.03101 cv
286.191 8.18402 285.895 8.258 285.461 8.25403 cv
285.016 8.258 284.715 8.18402 284.566 8.039 cv
284.41 7.89502 284.336 7.633 284.336 7.25 cv
284.336 6.85498 284.414 6.58197 284.574 6.42999 cv
284.73 6.27698 285.031 6.19897 285.477 6.19897 cv
285.91 6.19897 286.207 6.27301 286.363 6.422 cv
286.52 6.57001 286.598 6.836 286.598 7.211 cv
cp
f
290.375 16.516 mo
290.371 16.57 290.355 16.613 290.328 16.652 cv
290.293 16.691 290.238 16.727 290.168 16.75 cv
290.09 16.777 289.992 16.793 289.867 16.809 cv
289.742 16.82 289.582 16.828 289.395 16.828 cv
289.199 16.828 289.043 16.82 288.918 16.809 cv
288.793 16.793 288.691 16.777 288.617 16.75 cv
288.539 16.727 288.484 16.691 288.457 16.652 cv
288.422 16.613 288.406 16.57 288.41 16.516 cv
288.41 6.27002 li
288.406 6.21899 288.422 6.172 288.457 6.12903 cv
288.484 6.09003 288.539 6.05499 288.617 6.02301 cv
288.691 5.99597 288.793 5.97699 288.918 5.95697 cv
289.043 5.94501 289.199 5.93701 289.395 5.93402 cv
289.582 5.93701 289.742 5.94501 289.867 5.95697 cv
289.992 5.97699 290.09 5.99597 290.168 6.02301 cv
290.238 6.05499 290.293 6.09003 290.328 6.12903 cv
290.355 6.172 290.371 6.21899 290.375 6.27002 cv
cp
f
296.504 15.832 mo
296.504 16.059 296.488 16.234 296.461 16.355 cv
296.43 16.48 296.391 16.566 296.348 16.613 cv
296.297 16.664 296.23 16.707 296.141 16.746 cv
296.047 16.785 295.938 16.816 295.82 16.848 cv
295.695 16.871 295.563 16.895 295.422 16.914 cv
295.277 16.926 295.137 16.934 294.992 16.937 cv
294.602 16.934 294.262 16.883 293.977 16.789 cv
293.691 16.687 293.457 16.539 293.27 16.332 cv
293.082 16.129 292.941 15.871 292.855 15.559 cv
292.762 15.25 292.719 14.879 292.723 14.449 cv
292.723 10.891 li
291.891 10.891 li
291.789 10.895 291.715 10.832 291.664 10.707 cv
291.609 10.586 291.582 10.383 291.586 10.094 cv
291.582 9.94501 291.59 9.81598 291.605 9.71503 cv
291.617 9.61298 291.637 9.53101 291.664 9.46899 cv
291.688 9.40997 291.719 9.367 291.762 9.34003 cv
291.797 9.31598 291.844 9.30499 291.898 9.30103 cv
292.723 9.30103 li
292.723 7.75 li
292.719 7.703 292.734 7.65601 292.766 7.60901 cv
292.793 7.57001 292.844 7.53497 292.922 7.50403 cv
292.996 7.47998 293.098 7.45697 293.227 7.44098 cv
293.352 7.42999 293.508 7.42603 293.699 7.422 cv
293.887 7.42603 294.047 7.42999 294.176 7.44098 cv
294.301 7.45697 294.402 7.47998 294.477 7.50403 cv
294.547 7.53497 294.598 7.57001 294.633 7.60901 cv
294.66 7.65601 294.676 7.703 294.68 7.75 cv
294.68 9.30103 li
296.191 9.30103 li
296.242 9.30499 296.289 9.31598 296.328 9.34003 cv
296.367 9.367 296.398 9.40997 296.426 9.46899 cv
296.449 9.53101 296.469 9.61298 296.484 9.71503 cv
296.496 9.81598 296.504 9.94501 296.504 10.094 cv
296.504 10.383 296.477 10.586 296.426 10.707 cv
296.371 10.832 296.297 10.895 296.199 10.891 cv
294.68 10.891 li
294.68 14.156 li
294.676 14.535 294.734 14.82 294.859 15.008 cv
294.977 15.199 295.191 15.293 295.496 15.293 cv
295.598 15.293 295.691 15.285 295.777 15.266 cv
295.859 15.25 295.934 15.23 296 15.203 cv
296.063 15.184 296.117 15.16 296.164 15.141 cv
296.207 15.125 296.246 15.117 296.285 15.113 cv
296.313 15.117 296.344 15.125 296.375 15.141 cv
296.402 15.16 296.422 15.199 296.441 15.25 cv
296.453 15.309 296.469 15.383 296.484 15.473 cv
296.496 15.57 296.504 15.687 296.504 15.832 cv
cp
f
304.09 12.84 mo
304.086 13.078 304.035 13.254 303.93 13.367 cv
303.82 13.484 303.672 13.543 303.492 13.539 cv
299.258 13.539 li
299.254 13.84 299.289 14.109 299.363 14.348 cv
299.43 14.59 299.543 14.793 299.699 14.961 cv
299.852 15.133 300.047 15.262 300.289 15.348 cv
300.527 15.437 300.816 15.48 301.16 15.48 cv
301.5 15.48 301.801 15.457 302.063 15.406 cv
302.32 15.359 302.547 15.305 302.738 15.242 cv
302.926 15.184 303.082 15.129 303.211 15.078 cv
303.332 15.031 303.434 15.008 303.516 15.004 cv
303.559 15.008 303.598 15.016 303.633 15.031 cv
303.66 15.051 303.688 15.082 303.707 15.129 cv
303.727 15.176 303.738 15.242 303.75 15.328 cv
303.754 15.414 303.758 15.523 303.762 15.652 cv
303.758 15.77 303.758 15.867 303.754 15.945 cv
303.746 16.027 303.738 16.094 303.73 16.148 cv
303.719 16.207 303.703 16.258 303.684 16.293 cv
303.664 16.336 303.637 16.371 303.605 16.406 cv
303.57 16.445 303.477 16.496 303.328 16.555 cv
303.172 16.621 302.98 16.684 302.75 16.738 cv
302.512 16.801 302.242 16.848 301.945 16.895 cv
301.641 16.934 301.32 16.957 300.98 16.961 cv
300.359 16.957 299.816 16.883 299.355 16.727 cv
298.887 16.574 298.5 16.336 298.191 16.02 cv
297.875 15.703 297.641 15.305 297.492 14.82 cv
297.336 14.34 297.262 13.773 297.266 13.117 cv
297.262 12.504 297.34 11.945 297.504 11.449 cv
297.66 10.953 297.895 10.535 298.207 10.187 cv
298.512 9.84399 298.887 9.578 299.324 9.39502 cv
299.762 9.21503 300.254 9.125 300.809 9.12097 cv
301.387 9.125 301.887 9.211 302.301 9.37903 cv
302.715 9.55499 303.051 9.79303 303.316 10.094 cv
303.578 10.398 303.773 10.758 303.902 11.172 cv
304.023 11.59 304.086 12.039 304.09 12.527 cv
cp
302.188 12.277 mo
302.199 11.727 302.09 11.293 301.855 10.98 cv
301.621 10.668 301.254 10.512 300.762 10.508 cv
300.512 10.512 300.297 10.559 300.113 10.648 cv
299.926 10.746 299.773 10.871 299.652 11.027 cv
299.527 11.187 299.434 11.375 299.371 11.59 cv
299.305 11.805 299.266 12.035 299.258 12.277 cv
cp
f
310.164 10.211 mo
310.164 10.402 310.156 10.555 310.148 10.672 cv
310.133 10.793 310.117 10.887 310.102 10.953 cv
310.078 11.023 310.051 11.07 310.02 11.094 cv
309.98 11.121 309.938 11.133 309.891 11.133 cv
309.844 11.133 309.797 11.125 309.75 11.105 cv
309.695 11.09 309.637 11.07 309.574 11.047 cv
309.504 11.027 309.434 11.008 309.359 10.988 cv
309.277 10.973 309.191 10.965 309.102 10.961 cv
308.988 10.965 308.879 10.984 308.773 11.027 cv
308.664 11.074 308.551 11.145 308.438 11.234 cv
308.316 11.328 308.195 11.453 308.07 11.605 cv
307.941 11.766 307.805 11.957 307.66 12.184 cv
307.66 16.516 li
307.656 16.57 307.641 16.613 307.613 16.652 cv
307.578 16.691 307.523 16.727 307.453 16.75 cv
307.375 16.777 307.277 16.793 307.152 16.809 cv
307.027 16.82 306.867 16.828 306.68 16.828 cv
306.484 16.828 306.328 16.82 306.203 16.809 cv
306.078 16.793 305.977 16.777 305.902 16.75 cv
305.824 16.727 305.77 16.691 305.742 16.652 cv
305.707 16.613 305.691 16.57 305.695 16.516 cv
305.695 9.56598 li
305.691 9.52002 305.707 9.47302 305.734 9.42999 cv
305.758 9.39502 305.805 9.36298 305.875 9.33197 cv
305.941 9.30902 306.027 9.289 306.137 9.27301 cv
306.242 9.26599 306.375 9.258 306.539 9.25403 cv
306.703 9.258 306.84 9.26599 306.949 9.27301 cv
307.055 9.289 307.141 9.30902 307.203 9.33197 cv
307.262 9.36298 307.305 9.39502 307.332 9.42999 cv
307.355 9.47302 307.367 9.52002 307.371 9.56598 cv
307.371 10.43 li
307.551 10.172 307.723 9.961 307.887 9.789 cv
308.043 9.625 308.199 9.48798 308.348 9.38702 cv
308.492 9.289 308.637 9.22302 308.781 9.17999 cv
308.926 9.14502 309.07 9.125 309.219 9.12097 cv
309.285 9.125 309.359 9.12903 309.438 9.133 cv
309.516 9.14502 309.594 9.15601 309.68 9.172 cv
309.758 9.19098 309.832 9.211 309.898 9.23401 cv
309.957 9.258 310.004 9.28497 310.035 9.30902 cv
310.063 9.34003 310.082 9.367 310.098 9.39502 cv
310.109 9.42999 310.121 9.47302 310.133 9.52301 cv
310.141 9.58197 310.148 9.664 310.156 9.77002 cv
310.16 9.87903 310.164 10.027 310.164 10.211 cv
cp
f
313.328 16.516 mo
313.324 16.57 313.309 16.613 313.281 16.652 cv
313.246 16.691 313.191 16.727 313.121 16.75 cv
313.043 16.777 312.945 16.793 312.82 16.809 cv
312.695 16.82 312.535 16.828 312.348 16.828 cv
312.152 16.828 311.996 16.82 311.871 16.809 cv
311.746 16.793 311.645 16.777 311.57 16.75 cv
311.492 16.727 311.438 16.691 311.41 16.652 cv
311.375 16.613 311.359 16.57 311.363 16.516 cv
311.363 9.58197 li
311.359 9.53101 311.375 9.48401 311.41 9.44501 cv
311.438 9.40601 311.492 9.375 311.57 9.34399 cv
311.645 9.32001 311.746 9.297 311.871 9.27698 cv
311.996 9.26599 312.152 9.258 312.348 9.25403 cv
312.535 9.258 312.695 9.26599 312.82 9.27698 cv
312.945 9.297 313.043 9.32001 313.121 9.34399 cv
313.191 9.375 313.246 9.40601 313.281 9.44501 cv
313.309 9.48401 313.324 9.53101 313.328 9.58197 cv
cp
313.477 7.211 mo
313.477 7.60901 313.395 7.883 313.234 8.03101 cv
313.07 8.18402 312.773 8.258 312.34 8.25403 cv
311.895 8.258 311.594 8.18402 311.445 8.039 cv
311.289 7.89502 311.215 7.633 311.215 7.25 cv
311.215 6.85498 311.293 6.58197 311.453 6.42999 cv
311.609 6.27698 311.91 6.19897 312.355 6.19897 cv
312.789 6.19897 313.086 6.27301 313.242 6.422 cv
313.398 6.57001 313.477 6.836 313.477 7.211 cv
cp
f
321.93 16.516 mo
321.926 16.57 321.91 16.613 321.883 16.652 cv
321.848 16.691 321.797 16.727 321.727 16.75 cv
321.652 16.777 321.551 16.793 321.426 16.809 cv
321.297 16.82 321.141 16.828 320.957 16.828 cv
320.762 16.828 320.602 16.82 320.477 16.809 cv
320.348 16.793 320.246 16.777 320.176 16.75 cv
320.098 16.727 320.047 16.691 320.02 16.652 cv
319.984 16.613 319.969 16.57 319.973 16.516 cv
319.973 12.551 li
319.969 12.215 319.945 11.949 319.898 11.754 cv
319.848 11.562 319.773 11.398 319.684 11.262 cv
319.59 11.125 319.473 11.02 319.324 10.941 cv
319.176 10.867 319 10.828 318.805 10.828 cv
318.551 10.828 318.301 10.922 318.047 11.102 cv
317.793 11.285 317.527 11.547 317.254 11.895 cv
317.254 16.516 li
317.25 16.57 317.234 16.613 317.207 16.652 cv
317.172 16.691 317.117 16.727 317.047 16.75 cv
316.969 16.777 316.871 16.793 316.746 16.809 cv
316.621 16.82 316.461 16.828 316.273 16.828 cv
316.078 16.828 315.922 16.82 315.797 16.809 cv
315.672 16.793 315.57 16.777 315.496 16.75 cv
315.418 16.727 315.363 16.691 315.336 16.652 cv
315.301 16.613 315.285 16.57 315.289 16.516 cv
315.289 9.56598 li
315.285 9.52002 315.301 9.47302 315.328 9.42999 cv
315.352 9.39502 315.398 9.36298 315.469 9.33197 cv
315.535 9.30902 315.621 9.289 315.73 9.27301 cv
315.836 9.26599 315.969 9.258 316.133 9.25403 cv
316.297 9.258 316.434 9.26599 316.543 9.27301 cv
316.648 9.289 316.734 9.30902 316.797 9.33197 cv
316.855 9.36298 316.898 9.39502 316.926 9.42999 cv
316.949 9.47302 316.961 9.52002 316.965 9.56598 cv
316.965 10.367 li
317.348 9.95697 317.738 9.64502 318.137 9.43402 cv
318.531 9.22699 318.949 9.125 319.383 9.12097 cv
319.852 9.125 320.25 9.203 320.578 9.35498 cv
320.902 9.51599 321.164 9.72699 321.363 9.992 cv
321.563 10.262 321.707 10.574 321.797 10.93 cv
321.883 11.289 321.926 11.719 321.93 12.223 cv
cp
f
330.125 10.047 mo
330.121 10.301 330.094 10.484 330.039 10.602 cv
329.98 10.723 329.91 10.781 329.832 10.781 cv
329.012 10.781 li
329.125 10.906 329.207 11.051 329.258 11.207 cv
329.305 11.367 329.328 11.531 329.332 11.699 cv
329.328 12.109 329.262 12.469 329.129 12.781 cv
328.992 13.098 328.797 13.363 328.547 13.574 cv
328.293 13.793 327.992 13.957 327.637 14.066 cv
327.277 14.184 326.879 14.238 326.449 14.234 cv
326.223 14.238 326.012 14.211 325.809 14.152 cv
325.605 14.102 325.449 14.039 325.34 13.961 cv
325.277 14.031 325.219 14.109 325.172 14.203 cv
325.121 14.297 325.098 14.402 325.102 14.512 cv
325.098 14.668 325.164 14.789 325.297 14.883 cv
325.426 14.98 325.613 15.035 325.855 15.043 cv
327.547 15.105 li
327.941 15.121 328.293 15.18 328.602 15.273 cv
328.91 15.375 329.172 15.508 329.383 15.68 cv
329.594 15.855 329.754 16.066 329.863 16.309 cv
329.973 16.555 330.027 16.828 330.031 17.141 cv
330.027 17.477 329.953 17.801 329.805 18.109 cv
329.656 18.41 329.43 18.672 329.129 18.898 cv
328.824 19.117 328.445 19.297 327.992 19.43 cv
327.535 19.559 327.004 19.621 326.402 19.625 cv
325.805 19.621 325.301 19.574 324.883 19.484 cv
324.465 19.387 324.121 19.258 323.855 19.094 cv
323.586 18.926 323.391 18.727 323.273 18.5 cv
323.148 18.266 323.09 18.012 323.09 17.738 cv
323.09 17.566 323.109 17.406 323.156 17.25 cv
323.195 17.094 323.262 16.941 323.352 16.801 cv
323.434 16.656 323.539 16.523 323.664 16.391 cv
323.789 16.262 323.93 16.137 324.094 16.016 cv
323.867 15.902 323.695 15.742 323.574 15.531 cv
323.453 15.328 323.395 15.102 323.395 14.855 cv
323.395 14.555 323.461 14.277 323.602 14.02 cv
323.738 13.77 323.922 13.539 324.148 13.336 cv
323.965 13.156 323.82 12.941 323.711 12.684 cv
323.602 12.434 323.547 12.113 323.551 11.73 cv
323.547 11.328 323.617 10.969 323.762 10.645 cv
323.902 10.328 324.102 10.059 324.359 9.836 cv
324.613 9.617 324.918 9.44501 325.27 9.328 cv
325.621 9.211 326.012 9.15198 326.441 9.15198 cv
326.66 9.15198 326.867 9.16803 327.066 9.19098 cv
327.266 9.22302 327.453 9.258 327.625 9.30103 cv
329.832 9.30103 li
329.914 9.30499 329.984 9.36298 330.043 9.47302 cv
330.094 9.59003 330.121 9.78101 330.125 10.047 cv
cp
327.609 11.691 mo
327.605 11.32 327.504 11.031 327.297 10.82 cv
327.086 10.617 326.793 10.512 326.418 10.508 cv
326.223 10.512 326.051 10.543 325.91 10.605 cv
325.762 10.672 325.641 10.762 325.547 10.871 cv
325.445 10.984 325.375 11.113 325.332 11.262 cv
325.281 11.41 325.258 11.566 325.262 11.723 cv
325.258 12.082 325.363 12.359 325.574 12.562 cv
325.781 12.77 326.07 12.875 326.441 12.871 cv
326.637 12.875 326.805 12.844 326.953 12.777 cv
327.094 12.719 327.215 12.633 327.316 12.52 cv
327.41 12.414 327.484 12.285 327.535 12.141 cv
327.582 12 327.605 11.852 327.609 11.691 cv
cp
328.07 17.242 mo
328.07 17.004 327.977 16.828 327.789 16.703 cv
327.602 16.582 327.344 16.512 327.016 16.5 cv
325.621 16.461 li
325.484 16.562 325.375 16.656 325.297 16.746 cv
325.215 16.836 325.152 16.922 325.105 17.008 cv
325.055 17.09 325.02 17.172 325.008 17.25 cv
324.988 17.328 324.98 17.406 324.984 17.492 cv
324.98 17.746 325.113 17.945 325.375 18.082 cv
325.637 18.215 326.008 18.281 326.488 18.285 cv
326.781 18.281 327.027 18.25 327.234 18.195 cv
327.434 18.133 327.598 18.055 327.727 17.957 cv
327.848 17.855 327.938 17.746 327.992 17.625 cv
328.043 17.504 328.07 17.375 328.07 17.242 cv
cp
f
342.035 7.539 mo
342.031 7.69501 342.023 7.82397 342.016 7.92603 cv
342 8.03497 341.98 8.12097 341.957 8.18402 cv
341.926 8.25 341.895 8.297 341.859 8.32397 cv
341.816 8.35901 341.773 8.375 341.73 8.37097 cv
339.207 8.37097 li
339.207 16.5 li
339.207 16.555 339.188 16.602 339.156 16.641 cv
339.117 16.684 339.063 16.719 338.988 16.742 cv
338.906 16.77 338.801 16.789 338.672 16.805 cv
338.535 16.82 338.371 16.828 338.176 16.828 cv
337.98 16.828 337.816 16.82 337.684 16.805 cv
337.551 16.789 337.445 16.77 337.367 16.742 cv
337.289 16.719 337.23 16.684 337.199 16.641 cv
337.16 16.602 337.145 16.555 337.148 16.5 cv
337.148 8.37097 li
334.625 8.37097 li
334.57 8.375 334.523 8.35901 334.492 8.32397 cv
334.453 8.297 334.422 8.25 334.398 8.18402 cv
334.367 8.12097 334.348 8.03497 334.34 7.92603 cv
334.324 7.82397 334.32 7.69501 334.32 7.539 cv
334.32 7.38702 334.324 7.25403 334.34 7.14099 cv
334.348 7.03497 334.367 6.94501 334.398 6.87903 cv
334.422 6.81598 334.453 6.77002 334.492 6.73798 cv
334.523 6.711 334.57 6.69897 334.625 6.69501 cv
341.73 6.69501 li
341.773 6.69897 341.816 6.711 341.859 6.73798 cv
341.895 6.77002 341.926 6.81598 341.957 6.87903 cv
341.98 6.94501 342 7.03497 342.016 7.14099 cv
342.023 7.25403 342.031 7.38702 342.035 7.539 cv
cp
f
345.07 16.516 mo
345.066 16.57 345.051 16.613 345.023 16.652 cv
344.988 16.691 344.934 16.727 344.863 16.75 cv
344.785 16.777 344.688 16.793 344.563 16.809 cv
344.438 16.82 344.277 16.828 344.09 16.828 cv
343.895 16.828 343.738 16.82 343.613 16.809 cv
343.488 16.793 343.387 16.777 343.313 16.75 cv
343.234 16.727 343.18 16.691 343.152 16.652 cv
343.117 16.613 343.102 16.57 343.105 16.516 cv
343.105 9.58197 li
343.102 9.53101 343.117 9.48401 343.152 9.44501 cv
343.18 9.40601 343.234 9.375 343.313 9.34399 cv
343.387 9.32001 343.488 9.297 343.613 9.27698 cv
343.738 9.26599 343.895 9.258 344.09 9.25403 cv
344.277 9.258 344.438 9.26599 344.563 9.27698 cv
344.688 9.297 344.785 9.32001 344.863 9.34399 cv
344.934 9.375 344.988 9.40601 345.023 9.44501 cv
345.051 9.48401 345.066 9.53101 345.07 9.58197 cv
cp
345.219 7.211 mo
345.219 7.60901 345.137 7.883 344.977 8.03101 cv
344.813 8.18402 344.516 8.258 344.082 8.25403 cv
343.637 8.258 343.336 8.18402 343.188 8.039 cv
343.031 7.89502 342.957 7.633 342.957 7.25 cv
342.957 6.85498 343.035 6.58197 343.195 6.42999 cv
343.352 6.27698 343.652 6.19897 344.098 6.19897 cv
344.531 6.19897 344.828 6.27301 344.984 6.422 cv
345.141 6.57001 345.219 6.836 345.219 7.211 cv
cp
f
358.125 16.516 mo
358.121 16.57 358.105 16.613 358.078 16.652 cv
358.043 16.691 357.992 16.727 357.922 16.75 cv
357.848 16.777 357.746 16.793 357.625 16.809 cv
357.5 16.82 357.344 16.828 357.152 16.828 cv
356.953 16.828 356.793 16.82 356.668 16.809 cv
356.543 16.793 356.441 16.777 356.367 16.75 cv
356.289 16.727 356.238 16.691 356.211 16.652 cv
356.184 16.613 356.168 16.57 356.172 16.516 cv
356.172 12.395 li
356.168 12.164 356.148 11.949 356.105 11.754 cv
356.059 11.562 355.988 11.398 355.902 11.262 cv
355.809 11.125 355.695 11.02 355.559 10.941 cv
355.418 10.867 355.254 10.828 355.063 10.828 cv
354.828 10.828 354.59 10.922 354.352 11.102 cv
354.113 11.285 353.855 11.547 353.574 11.895 cv
353.574 16.516 li
353.574 16.57 353.559 16.613 353.527 16.652 cv
353.496 16.691 353.441 16.727 353.367 16.75 cv
353.289 16.777 353.188 16.793 353.066 16.809 cv
352.941 16.82 352.789 16.828 352.602 16.828 cv
352.406 16.828 352.246 16.82 352.125 16.809 cv
351.996 16.793 351.895 16.777 351.824 16.75 cv
351.746 16.727 351.695 16.691 351.664 16.652 cv
351.633 16.613 351.617 16.57 351.617 16.516 cv
351.617 12.395 li
351.617 12.164 351.594 11.949 351.551 11.754 cv
351.508 11.562 351.441 11.398 351.355 11.262 cv
351.262 11.125 351.148 11.02 351.012 10.941 cv
350.867 10.867 350.703 10.828 350.52 10.828 cv
350.277 10.828 350.039 10.922 349.801 11.102 cv
349.563 11.285 349.305 11.547 349.031 11.895 cv
349.031 16.516 li
349.027 16.57 349.012 16.613 348.984 16.652 cv
348.949 16.691 348.895 16.727 348.824 16.75 cv
348.746 16.777 348.648 16.793 348.523 16.809 cv
348.398 16.82 348.238 16.828 348.051 16.828 cv
347.855 16.828 347.699 16.82 347.574 16.809 cv
347.449 16.793 347.348 16.777 347.273 16.75 cv
347.195 16.727 347.141 16.691 347.113 16.652 cv
347.078 16.613 347.063 16.57 347.066 16.516 cv
347.066 9.56598 li
347.063 9.52002 347.078 9.47302 347.105 9.42999 cv
347.129 9.39502 347.176 9.36298 347.246 9.33197 cv
347.313 9.30902 347.398 9.289 347.508 9.27301 cv
347.613 9.26599 347.746 9.258 347.91 9.25403 cv
348.074 9.258 348.211 9.26599 348.32 9.27301 cv
348.426 9.289 348.512 9.30902 348.574 9.33197 cv
348.633 9.36298 348.676 9.39502 348.703 9.42999 cv
348.727 9.47302 348.738 9.52002 348.742 9.56598 cv
348.742 10.367 li
349.125 9.95697 349.508 9.64502 349.891 9.43402 cv
350.27 9.22699 350.672 9.125 351.09 9.12097 cv
351.375 9.125 351.629 9.15198 351.859 9.211 cv
352.086 9.27301 352.293 9.35901 352.473 9.46899 cv
352.652 9.58197 352.805 9.71899 352.934 9.87097 cv
353.063 10.027 353.172 10.199 353.262 10.391 cv
353.469 10.168 353.672 9.97699 353.875 9.81598 cv
354.07 9.65601 354.27 9.52301 354.465 9.422 cv
354.66 9.32001 354.855 9.24597 355.051 9.19501 cv
355.246 9.14801 355.445 9.125 355.648 9.12097 cv
356.109 9.125 356.496 9.203 356.816 9.35498 cv
357.129 9.51599 357.387 9.72699 357.582 9.992 cv
357.777 10.262 357.914 10.574 358 10.93 cv
358.078 11.289 358.121 11.668 358.125 12.066 cv
cp
f
366.461 12.84 mo
366.457 13.078 366.406 13.254 366.301 13.367 cv
366.191 13.484 366.043 13.543 365.863 13.539 cv
361.629 13.539 li
361.625 13.84 361.66 14.109 361.734 14.348 cv
361.801 14.59 361.914 14.793 362.07 14.961 cv
362.223 15.133 362.418 15.262 362.66 15.348 cv
362.898 15.437 363.188 15.48 363.531 15.48 cv
363.871 15.48 364.172 15.457 364.434 15.406 cv
364.691 15.359 364.918 15.305 365.109 15.242 cv
365.297 15.184 365.453 15.129 365.582 15.078 cv
365.703 15.031 365.805 15.008 365.887 15.004 cv
365.93 15.008 365.969 15.016 366.004 15.031 cv
366.031 15.051 366.059 15.082 366.078 15.129 cv
366.098 15.176 366.109 15.242 366.121 15.328 cv
366.125 15.414 366.129 15.523 366.133 15.652 cv
366.129 15.77 366.129 15.867 366.125 15.945 cv
366.117 16.027 366.109 16.094 366.102 16.148 cv
366.09 16.207 366.074 16.258 366.055 16.293 cv
366.035 16.336 366.008 16.371 365.977 16.406 cv
365.941 16.445 365.848 16.496 365.699 16.555 cv
365.543 16.621 365.352 16.684 365.121 16.738 cv
364.883 16.801 364.613 16.848 364.316 16.895 cv
364.012 16.934 363.691 16.957 363.352 16.961 cv
362.73 16.957 362.188 16.883 361.727 16.727 cv
361.258 16.574 360.871 16.336 360.563 16.02 cv
360.246 15.703 360.012 15.305 359.863 14.82 cv
359.707 14.34 359.633 13.773 359.637 13.117 cv
359.633 12.504 359.711 11.945 359.875 11.449 cv
360.031 10.953 360.266 10.535 360.578 10.187 cv
360.883 9.84399 361.258 9.578 361.695 9.39502 cv
362.133 9.21503 362.625 9.125 363.18 9.12097 cv
363.758 9.125 364.258 9.211 364.672 9.37903 cv
365.086 9.55499 365.422 9.79303 365.688 10.094 cv
365.949 10.398 366.145 10.758 366.273 11.172 cv
366.395 11.59 366.457 12.039 366.461 12.527 cv
cp
364.559 12.277 mo
364.57 11.727 364.461 11.293 364.227 10.98 cv
363.992 10.668 363.625 10.512 363.133 10.508 cv
362.883 10.512 362.668 10.559 362.484 10.648 cv
362.297 10.746 362.145 10.871 362.023 11.027 cv
361.898 11.187 361.805 11.375 361.742 11.59 cv
361.676 11.805 361.637 12.035 361.629 12.277 cv
cp
f
372.961 14.551 mo
372.957 14.949 372.883 15.297 372.738 15.598 cv
372.59 15.898 372.383 16.152 372.113 16.352 cv
371.84 16.559 371.52 16.707 371.152 16.809 cv
370.785 16.906 370.383 16.957 369.953 16.961 cv
369.688 16.957 369.441 16.937 369.207 16.902 cv
368.973 16.859 368.762 16.812 368.574 16.754 cv
368.387 16.695 368.23 16.633 368.105 16.57 cv
367.98 16.508 367.887 16.449 367.832 16.395 cv
367.773 16.34 367.73 16.258 367.703 16.141 cv
367.668 16.027 367.652 15.852 367.656 15.621 cv
367.652 15.473 367.66 15.352 367.672 15.258 cv
367.68 15.168 367.695 15.098 367.719 15.039 cv
367.738 14.988 367.762 14.949 367.797 14.93 cv
367.824 14.914 367.863 14.906 367.91 14.902 cv
367.965 14.906 368.051 14.937 368.164 15 cv
368.273 15.066 368.41 15.141 368.582 15.215 cv
368.746 15.297 368.941 15.367 369.16 15.434 cv
369.379 15.504 369.629 15.539 369.914 15.535 cv
370.09 15.539 370.246 15.52 370.387 15.48 cv
370.52 15.445 370.641 15.395 370.746 15.324 cv
370.844 15.258 370.918 15.172 370.973 15.066 cv
371.02 14.965 371.047 14.844 371.051 14.707 cv
371.047 14.551 371 14.418 370.906 14.309 cv
370.813 14.199 370.684 14.102 370.527 14.016 cv
370.363 13.934 370.184 13.855 369.988 13.781 cv
369.785 13.711 369.582 13.633 369.371 13.539 cv
369.16 13.453 368.953 13.352 368.758 13.234 cv
368.555 13.125 368.375 12.984 368.219 12.816 cv
368.055 12.652 367.93 12.453 367.836 12.215 cv
367.742 11.984 367.695 11.703 367.695 11.371 cv
367.695 11.043 367.758 10.738 367.887 10.457 cv
368.016 10.184 368.203 9.94501 368.449 9.74597 cv
368.691 9.55103 368.988 9.39801 369.34 9.28497 cv
369.688 9.17999 370.082 9.125 370.523 9.12097 cv
370.738 9.125 370.949 9.14099 371.156 9.16803 cv
371.359 9.203 371.547 9.242 371.715 9.28497 cv
371.879 9.336 372.02 9.38702 372.137 9.43701 cv
372.25 9.49597 372.332 9.54303 372.383 9.578 cv
372.43 9.62097 372.465 9.65997 372.488 9.69501 cv
372.508 9.73798 372.52 9.78497 372.531 9.836 cv
372.539 9.89099 372.551 9.95697 372.559 10.035 cv
372.566 10.121 372.57 10.219 372.57 10.336 cv
372.57 10.477 372.566 10.594 372.559 10.68 cv
372.551 10.773 372.535 10.844 372.52 10.891 cv
372.5 10.945 372.477 10.98 372.449 10.996 cv
372.414 11.02 372.379 11.027 372.34 11.023 cv
372.289 11.027 372.215 11 372.121 10.941 cv
372.02 10.891 371.898 10.832 371.75 10.766 cv
371.602 10.707 371.43 10.648 371.234 10.59 cv
371.039 10.539 370.816 10.512 370.57 10.508 cv
370.391 10.512 370.238 10.531 370.109 10.562 cv
369.977 10.602 369.867 10.652 369.789 10.719 cv
369.703 10.789 369.641 10.867 369.602 10.957 cv
369.555 11.051 369.535 11.148 369.539 11.25 cv
369.535 11.41 369.586 11.547 369.688 11.652 cv
369.785 11.766 369.914 11.859 370.078 11.941 cv
370.238 12.027 370.422 12.105 370.629 12.176 cv
370.832 12.25 371.039 12.332 371.25 12.414 cv
371.457 12.504 371.664 12.602 371.875 12.715 cv
372.078 12.828 372.262 12.969 372.422 13.133 cv
372.582 13.301 372.711 13.5 372.813 13.73 cv
372.906 13.965 372.957 14.238 372.961 14.551 cv
cp
f
385.188 12.969 mo
385.184 13.566 385.105 14.109 384.953 14.594 cv
384.793 15.086 384.559 15.504 384.242 15.855 cv
383.926 16.207 383.527 16.48 383.051 16.672 cv
382.57 16.863 382.012 16.957 381.375 16.961 cv
380.754 16.957 380.215 16.875 379.762 16.703 cv
379.301 16.535 378.922 16.285 378.625 15.957 cv
378.32 15.633 378.098 15.23 377.953 14.75 cv
377.809 14.273 377.738 13.727 377.738 13.109 cv
377.738 12.52 377.816 11.98 377.973 11.488 cv
378.129 11 378.367 10.578 378.688 10.227 cv
379.004 9.87903 379.398 9.60498 379.875 9.40997 cv
380.348 9.21899 380.906 9.125 381.547 9.12097 cv
382.172 9.125 382.711 9.20697 383.168 9.375 cv
383.625 9.547 384.004 9.797 384.301 10.121 cv
384.598 10.449 384.82 10.852 384.969 11.328 cv
385.113 11.809 385.184 12.355 385.188 12.969 cv
cp
383.168 13.047 mo
383.164 12.711 383.137 12.395 383.086 12.102 cv
383.027 11.816 382.934 11.566 382.809 11.352 cv
382.676 11.141 382.504 10.973 382.293 10.852 cv
382.074 10.734 381.805 10.676 381.477 10.672 cv
381.188 10.676 380.934 10.73 380.715 10.832 cv
380.496 10.941 380.316 11.098 380.176 11.301 cv
380.035 11.508 379.93 11.754 379.859 12.039 cv
379.789 12.332 379.754 12.66 379.754 13.023 cv
379.754 13.371 379.781 13.687 379.84 13.973 cv
379.895 14.266 379.988 14.516 380.117 14.727 cv
380.242 14.941 380.414 15.105 380.637 15.219 cv
380.852 15.34 381.121 15.398 381.445 15.395 cv
381.738 15.398 381.996 15.344 382.219 15.234 cv
382.434 15.129 382.613 14.977 382.754 14.77 cv
382.895 14.57 382.996 14.324 383.066 14.035 cv
383.129 13.75 383.164 13.422 383.168 13.047 cv
cp
f
390.969 6.914 mo
390.965 7.06598 390.961 7.18701 390.953 7.27698 cv
390.941 7.37097 390.926 7.44098 390.906 7.48798 cv
390.883 7.539 390.859 7.57397 390.836 7.59003 cv
390.809 7.60901 390.781 7.617 390.75 7.617 cv
390.711 7.617 390.668 7.60901 390.629 7.59003 cv
390.582 7.57397 390.527 7.55499 390.465 7.53101 cv
390.395 7.51202 390.32 7.492 390.234 7.47302 cv
390.145 7.45697 390.039 7.44897 389.922 7.44501 cv
389.777 7.44897 389.656 7.46899 389.559 7.51202 cv
389.457 7.55902 389.375 7.62903 389.309 7.72302 cv
389.238 7.82001 389.188 7.94501 389.16 8.09802 cv
389.125 8.25 389.109 8.43701 389.113 8.65997 cv
389.113 9.30103 li
390.383 9.30103 li
390.426 9.30499 390.469 9.31598 390.512 9.34003 cv
390.547 9.367 390.582 9.40997 390.609 9.46899 cv
390.633 9.53101 390.652 9.61298 390.668 9.71503 cv
390.68 9.81598 390.684 9.94501 390.688 10.094 cv
390.684 10.383 390.66 10.586 390.609 10.707 cv
390.555 10.832 390.477 10.895 390.383 10.891 cv
389.113 10.891 li
389.113 16.516 li
389.109 16.57 389.094 16.613 389.066 16.652 cv
389.031 16.691 388.98 16.727 388.91 16.75 cv
388.836 16.777 388.734 16.793 388.605 16.809 cv
388.473 16.82 388.313 16.828 388.129 16.828 cv
387.941 16.828 387.785 16.82 387.66 16.809 cv
387.531 16.793 387.43 16.777 387.355 16.75 cv
387.277 16.727 387.227 16.691 387.199 16.652 cv
387.168 16.613 387.152 16.57 387.156 16.516 cv
387.156 10.891 li
386.285 10.891 li
386.184 10.895 386.109 10.832 386.063 10.707 cv
386.012 10.586 385.984 10.383 385.988 10.094 cv
385.984 9.94501 385.992 9.81598 386.008 9.71503 cv
386.02 9.61298 386.039 9.53101 386.063 9.46899 cv
386.086 9.40997 386.117 9.367 386.156 9.34003 cv
386.195 9.31598 386.238 9.30499 386.293 9.30103 cv
387.156 9.30103 li
387.156 8.71503 li
387.152 8.24597 387.199 7.83197 387.297 7.47302 cv
387.387 7.117 387.535 6.82001 387.738 6.586 cv
387.938 6.35199 388.191 6.17603 388.5 6.05103 cv
388.809 5.93402 389.172 5.87097 389.598 5.87097 cv
389.793 5.87097 389.984 5.89099 390.172 5.922 cv
390.352 5.961 390.496 5.99597 390.602 6.03101 cv
390.703 6.07397 390.773 6.10901 390.813 6.14099 cv
390.848 6.17603 390.879 6.22699 390.902 6.289 cv
390.926 6.35498 390.941 6.43701 390.953 6.539 cv
390.961 6.64099 390.965 6.76599 390.969 6.914 cv
cp
f
401.516 13.758 mo
401.512 14.289 401.414 14.754 401.219 15.152 cv
401.02 15.555 400.754 15.891 400.418 16.156 cv
400.078 16.426 399.68 16.625 399.23 16.758 cv
398.777 16.891 398.297 16.957 397.785 16.961 cv
397.434 16.957 397.109 16.93 396.813 16.875 cv
396.512 16.816 396.25 16.75 396.023 16.668 cv
395.793 16.59 395.602 16.504 395.449 16.414 cv
395.297 16.328 395.188 16.25 395.121 16.18 cv
395.051 16.113 395 16.016 394.977 15.891 cv
394.945 15.766 394.934 15.582 394.934 15.34 cv
394.934 15.18 394.938 15.047 394.949 14.934 cv
394.957 14.828 394.973 14.738 395 14.668 cv
395.02 14.602 395.051 14.555 395.094 14.523 cv
395.129 14.5 395.176 14.484 395.227 14.48 cv
395.297 14.484 395.398 14.527 395.535 14.609 cv
395.664 14.699 395.836 14.793 396.047 14.895 cv
396.254 15 396.5 15.098 396.789 15.18 cv
397.074 15.27 397.41 15.312 397.793 15.309 cv
398.043 15.312 398.266 15.281 398.461 15.219 cv
398.656 15.16 398.824 15.074 398.965 14.965 cv
399.102 14.855 399.207 14.723 399.281 14.562 cv
399.352 14.402 399.387 14.223 399.391 14.023 cv
399.387 13.797 399.324 13.602 399.203 13.434 cv
399.074 13.273 398.91 13.129 398.715 13 cv
398.512 12.875 398.285 12.754 398.031 12.641 cv
397.777 12.531 397.516 12.414 397.246 12.285 cv
396.973 12.164 396.711 12.02 396.457 11.859 cv
396.203 11.703 395.977 11.516 395.777 11.293 cv
395.574 11.074 395.41 10.812 395.289 10.508 cv
395.164 10.207 395.102 9.84802 395.105 9.42603 cv
395.102 8.94501 395.191 8.52002 395.371 8.15198 cv
395.547 7.789 395.789 7.48401 396.098 7.23798 cv
396.398 7 396.758 6.82001 397.172 6.69897 cv
397.586 6.58197 398.023 6.52301 398.484 6.52002 cv
398.723 6.52301 398.961 6.539 399.203 6.57397 cv
399.441 6.61298 399.664 6.664 399.871 6.72302 cv
400.078 6.78497 400.262 6.85498 400.426 6.92999 cv
400.582 7.01202 400.691 7.07397 400.746 7.125 cv
400.797 7.17999 400.832 7.22699 400.852 7.258 cv
400.867 7.297 400.883 7.34399 400.898 7.40198 cv
400.91 7.46503 400.918 7.539 400.926 7.62903 cv
400.93 7.72302 400.934 7.836 400.934 7.96899 cv
400.934 8.12097 400.93 8.25 400.922 8.35199 cv
400.914 8.45697 400.898 8.54303 400.883 8.60498 cv
400.859 8.67603 400.836 8.72302 400.805 8.75403 cv
400.77 8.78497 400.723 8.80103 400.668 8.80103 cv
400.609 8.80103 400.52 8.76599 400.395 8.69098 cv
400.27 8.62097 400.113 8.54303 399.934 8.453 cv
399.75 8.37097 399.543 8.29303 399.305 8.22302 cv
399.063 8.15601 398.797 8.12097 398.516 8.117 cv
398.289 8.12097 398.098 8.14801 397.934 8.19897 cv
397.766 8.25403 397.625 8.328 397.516 8.422 cv
397.402 8.52002 397.32 8.63702 397.266 8.77002 cv
397.211 8.90997 397.184 9.05103 397.184 9.19897 cv
397.184 9.42603 397.242 9.62097 397.367 9.78101 cv
397.484 9.94501 397.648 10.09 397.859 10.215 cv
398.063 10.344 398.297 10.465 398.555 10.574 cv
398.813 10.691 399.078 10.809 399.352 10.93 cv
399.621 11.059 399.883 11.199 400.145 11.355 cv
400.402 11.512 400.637 11.703 400.84 11.922 cv
401.043 12.148 401.203 12.406 401.328 12.703 cv
401.449 13 401.512 13.352 401.516 13.758 cv
cp
f
409.566 16.516 mo
409.563 16.57 409.551 16.613 409.527 16.652 cv
409.5 16.691 409.453 16.727 409.391 16.75 cv
409.324 16.777 409.238 16.793 409.133 16.809 cv
409.027 16.82 408.895 16.828 408.734 16.828 cv
408.559 16.828 408.418 16.82 408.316 16.809 cv
408.207 16.793 408.125 16.777 408.063 16.75 cv
408 16.727 407.953 16.691 407.93 16.652 cv
407.898 16.613 407.887 16.57 407.891 16.516 cv
407.891 15.715 li
407.504 16.129 407.113 16.441 406.719 16.648 cv
406.316 16.855 405.906 16.957 405.484 16.961 cv
405.004 16.957 404.602 16.883 404.277 16.727 cv
403.953 16.574 403.691 16.359 403.492 16.09 cv
403.289 15.82 403.145 15.508 403.063 15.148 cv
402.973 14.793 402.93 14.352 402.934 13.82 cv
402.934 9.56598 li
402.93 9.52002 402.945 9.47302 402.977 9.42999 cv
403.004 9.39502 403.055 9.36298 403.133 9.33197 cv
403.207 9.30902 403.309 9.289 403.438 9.27301 cv
403.563 9.26599 403.719 9.258 403.91 9.25403 cv
404.098 9.258 404.258 9.26599 404.383 9.27301 cv
404.508 9.289 404.605 9.30902 404.684 9.33197 cv
404.754 9.36298 404.809 9.39502 404.844 9.42999 cv
404.871 9.47302 404.887 9.52002 404.891 9.56598 cv
404.891 13.492 li
404.887 13.859 404.91 14.137 404.961 14.328 cv
405.004 14.52 405.074 14.684 405.176 14.82 cv
405.27 14.961 405.395 15.066 405.543 15.141 cv
405.691 15.219 405.863 15.258 406.059 15.254 cv
406.309 15.258 406.559 15.168 406.813 14.98 cv
407.063 14.801 407.332 14.535 407.617 14.187 cv
407.617 9.56598 li
407.617 9.52002 407.629 9.47302 407.66 9.42999 cv
407.684 9.39502 407.738 9.36298 407.816 9.33197 cv
407.891 9.30902 407.988 9.289 408.117 9.27301 cv
408.238 9.26599 408.398 9.258 408.594 9.25403 cv
408.785 9.258 408.941 9.26599 409.066 9.27301 cv
409.188 9.289 409.289 9.30902 409.363 9.33197 cv
409.434 9.36298 409.484 9.39502 409.52 9.42999 cv
409.547 9.47302 409.563 9.52002 409.566 9.56598 cv
cp
f
418.496 12.945 mo
418.496 13.566 418.426 14.125 418.293 14.617 cv
418.152 15.113 417.957 15.531 417.707 15.879 cv
417.449 16.227 417.137 16.496 416.77 16.68 cv
416.395 16.867 415.973 16.957 415.504 16.961 cv
415.266 16.957 415.047 16.934 414.848 16.895 cv
414.641 16.848 414.449 16.781 414.266 16.68 cv
414.082 16.586 413.898 16.461 413.723 16.305 cv
413.539 16.156 413.355 15.973 413.172 15.762 cv
413.172 16.516 li
413.168 16.578 413.156 16.625 413.129 16.66 cv
413.098 16.703 413.051 16.734 412.988 16.758 cv
412.922 16.781 412.832 16.797 412.727 16.812 cv
412.617 16.82 412.488 16.828 412.332 16.828 cv
412.168 16.828 412.031 16.82 411.93 16.812 cv
411.82 16.797 411.734 16.781 411.672 16.758 cv
411.602 16.734 411.559 16.703 411.535 16.66 cv
411.508 16.625 411.492 16.578 411.496 16.516 cv
411.496 6.27002 li
411.492 6.21899 411.508 6.172 411.543 6.12903 cv
411.57 6.09003 411.625 6.05499 411.703 6.02301 cv
411.777 5.99597 411.879 5.97699 412.004 5.95697 cv
412.129 5.94501 412.285 5.93701 412.48 5.93402 cv
412.668 5.93701 412.828 5.94501 412.953 5.95697 cv
413.078 5.97699 413.176 5.99597 413.254 6.02301 cv
413.324 6.05499 413.379 6.09003 413.414 6.12903 cv
413.441 6.172 413.457 6.21899 413.461 6.27002 cv
413.461 10.109 li
413.637 9.93402 413.813 9.78497 413.992 9.65997 cv
414.164 9.539 414.34 9.43402 414.52 9.35199 cv
414.691 9.27301 414.875 9.21503 415.066 9.17603 cv
415.25 9.14099 415.449 9.125 415.66 9.12097 cv
416.172 9.125 416.605 9.22699 416.969 9.42999 cv
417.324 9.63702 417.617 9.914 417.844 10.262 cv
418.066 10.609 418.23 11.016 418.34 11.48 cv
418.441 11.945 418.496 12.434 418.496 12.945 cv
cp
416.461 13.086 mo
416.457 12.793 416.434 12.508 416.395 12.23 cv
416.348 11.957 416.273 11.715 416.164 11.5 cv
416.055 11.289 415.91 11.117 415.738 10.988 cv
415.563 10.863 415.344 10.801 415.082 10.797 cv
414.949 10.801 414.824 10.816 414.699 10.852 cv
414.574 10.891 414.445 10.953 414.313 11.039 cv
414.18 11.129 414.043 11.246 413.906 11.383 cv
413.762 11.523 413.613 11.695 413.461 11.902 cv
413.461 14.211 li
413.734 14.566 413.996 14.836 414.25 15.016 cv
414.5 15.203 414.766 15.293 415.043 15.293 cv
415.297 15.293 415.512 15.23 415.691 15.098 cv
415.863 14.973 416.012 14.805 416.129 14.594 cv
416.246 14.391 416.328 14.152 416.383 13.883 cv
416.43 13.621 416.457 13.355 416.461 13.086 cv
cp
f
423.586 12.863 mo
423.582 13.164 423.555 13.375 423.5 13.492 cv
423.441 13.617 423.352 13.676 423.227 13.672 cv
419.984 13.672 li
419.855 13.676 419.762 13.613 419.707 13.488 cv
419.645 13.367 419.617 13.16 419.621 12.863 cv
419.617 12.574 419.645 12.367 419.707 12.246 cv
419.762 12.129 419.855 12.07 419.984 12.066 cv
423.227 12.066 li
423.289 12.07 423.34 12.082 423.387 12.105 cv
423.426 12.133 423.465 12.18 423.5 12.238 cv
423.527 12.305 423.551 12.387 423.566 12.488 cv
423.578 12.594 423.582 12.719 423.586 12.863 cv
cp
f
427.234 16.5 mo
427.23 16.555 427.215 16.602 427.184 16.641 cv
427.148 16.684 427.09 16.719 427.016 16.742 cv
426.934 16.77 426.832 16.789 426.703 16.805 cv
426.57 16.82 426.402 16.828 426.207 16.828 cv
426.004 16.828 425.84 16.82 425.711 16.805 cv
425.574 16.789 425.469 16.77 425.395 16.742 cv
425.313 16.719 425.258 16.684 425.227 16.641 cv
425.191 16.602 425.172 16.555 425.176 16.5 cv
425.176 6.97699 li
425.172 6.92999 425.191 6.883 425.227 6.836 cv
425.258 6.797 425.313 6.76202 425.398 6.73401 cv
425.477 6.711 425.582 6.69098 425.715 6.672 cv
425.84 6.65997 426.004 6.65198 426.207 6.64801 cv
426.402 6.65198 426.57 6.65997 426.703 6.672 cv
426.832 6.69098 426.934 6.711 427.016 6.73401 cv
427.09 6.76202 427.148 6.797 427.184 6.836 cv
427.215 6.883 427.23 6.92999 427.234 6.97699 cv
cp
f
440.316 16.516 mo
440.313 16.57 440.297 16.613 440.27 16.652 cv
440.234 16.691 440.184 16.727 440.113 16.75 cv
440.039 16.777 439.938 16.793 439.816 16.809 cv
439.691 16.82 439.535 16.828 439.344 16.828 cv
439.145 16.828 438.984 16.82 438.859 16.809 cv
438.734 16.793 438.633 16.777 438.559 16.75 cv
438.48 16.727 438.43 16.691 438.402 16.652 cv
438.375 16.613 438.359 16.57 438.363 16.516 cv
438.363 12.395 li
438.359 12.164 438.34 11.949 438.297 11.754 cv
438.25 11.562 438.18 11.398 438.094 11.262 cv
438 11.125 437.887 11.02 437.75 10.941 cv
437.609 10.867 437.445 10.828 437.254 10.828 cv
437.02 10.828 436.781 10.922 436.543 11.102 cv
436.305 11.285 436.047 11.547 435.766 11.895 cv
435.766 16.516 li
435.766 16.57 435.75 16.613 435.719 16.652 cv
435.688 16.691 435.633 16.727 435.559 16.75 cv
435.48 16.777 435.379 16.793 435.258 16.809 cv
435.133 16.82 434.98 16.828 434.793 16.828 cv
434.598 16.828 434.438 16.82 434.316 16.809 cv
434.188 16.793 434.086 16.777 434.016 16.75 cv
433.938 16.727 433.887 16.691 433.855 16.652 cv
433.824 16.613 433.809 16.57 433.809 16.516 cv
433.809 12.395 li
433.809 12.164 433.785 11.949 433.742 11.754 cv
433.699 11.562 433.633 11.398 433.547 11.262 cv
433.453 11.125 433.34 11.02 433.203 10.941 cv
433.059 10.867 432.895 10.828 432.711 10.828 cv
432.469 10.828 432.23 10.922 431.992 11.102 cv
431.754 11.285 431.496 11.547 431.223 11.895 cv
431.223 16.516 li
431.219 16.57 431.203 16.613 431.176 16.652 cv
431.141 16.691 431.086 16.727 431.016 16.75 cv
430.938 16.777 430.84 16.793 430.715 16.809 cv
430.59 16.82 430.43 16.828 430.242 16.828 cv
430.047 16.828 429.891 16.82 429.766 16.809 cv
429.641 16.793 429.539 16.777 429.465 16.75 cv
429.387 16.727 429.332 16.691 429.305 16.652 cv
429.27 16.613 429.254 16.57 429.258 16.516 cv
429.258 9.56598 li
429.254 9.52002 429.27 9.47302 429.297 9.42999 cv
429.32 9.39502 429.367 9.36298 429.438 9.33197 cv
429.504 9.30902 429.59 9.289 429.699 9.27301 cv
429.805 9.26599 429.938 9.258 430.102 9.25403 cv
430.266 9.258 430.402 9.26599 430.512 9.27301 cv
430.617 9.289 430.703 9.30902 430.766 9.33197 cv
430.824 9.36298 430.867 9.39502 430.895 9.42999 cv
430.918 9.47302 430.93 9.52002 430.934 9.56598 cv
430.934 10.367 li
431.316 9.95697 431.699 9.64502 432.082 9.43402 cv
432.461 9.22699 432.863 9.125 433.281 9.12097 cv
433.566 9.125 433.82 9.15198 434.051 9.211 cv
434.277 9.27301 434.484 9.35901 434.664 9.46899 cv
434.844 9.58197 434.996 9.71899 435.125 9.87097 cv
435.254 10.027 435.363 10.199 435.453 10.391 cv
435.66 10.168 435.863 9.97699 436.066 9.81598 cv
436.262 9.65601 436.461 9.52301 436.656 9.422 cv
436.852 9.32001 437.047 9.24597 437.242 9.19501 cv
437.438 9.14801 437.637 9.125 437.84 9.12097 cv
438.301 9.125 438.688 9.203 439.008 9.35498 cv
439.32 9.51599 439.578 9.72699 439.773 9.992 cv
439.969 10.262 440.105 10.574 440.191 10.93 cv
440.27 11.289 440.313 11.668 440.316 12.066 cv
cp
f
448.16 16.539 mo
448.156 16.617 448.129 16.672 448.082 16.711 cv
448.027 16.754 447.945 16.781 447.836 16.801 cv
447.719 16.816 447.555 16.828 447.34 16.828 cv
447.102 16.828 446.93 16.816 446.828 16.801 cv
446.719 16.781 446.645 16.754 446.605 16.711 cv
446.559 16.672 446.539 16.617 446.539 16.539 cv
446.539 15.988 li
446.25 16.297 445.922 16.535 445.559 16.703 cv
445.191 16.875 444.785 16.957 444.34 16.961 cv
443.969 16.957 443.629 16.91 443.32 16.816 cv
443.012 16.723 442.746 16.582 442.52 16.387 cv
442.293 16.199 442.117 15.965 441.992 15.684 cv
441.867 15.406 441.805 15.078 441.809 14.699 cv
441.805 14.301 441.883 13.949 442.043 13.645 cv
442.199 13.348 442.438 13.102 442.754 12.906 cv
443.066 12.715 443.457 12.57 443.926 12.473 cv
444.395 12.383 444.938 12.336 445.555 12.332 cv
446.234 12.332 li
446.234 11.91 li
446.234 11.695 446.211 11.504 446.168 11.34 cv
446.121 11.18 446.047 11.043 445.949 10.93 cv
445.844 10.824 445.711 10.742 445.543 10.687 cv
445.371 10.637 445.16 10.613 444.918 10.609 cv
444.586 10.613 444.293 10.648 444.039 10.719 cv
443.777 10.793 443.551 10.875 443.355 10.961 cv
443.156 11.055 442.992 11.133 442.863 11.203 cv
442.727 11.277 442.617 11.316 442.539 11.312 cv
442.477 11.316 442.426 11.297 442.387 11.258 cv
442.34 11.223 442.305 11.172 442.277 11.102 cv
442.246 11.039 442.223 10.953 442.211 10.852 cv
442.191 10.754 442.184 10.645 442.188 10.523 cv
442.184 10.363 442.199 10.238 442.227 10.141 cv
442.25 10.051 442.297 9.96503 442.375 9.88702 cv
442.445 9.81201 442.574 9.72998 442.758 9.64099 cv
442.938 9.55103 443.148 9.46503 443.395 9.38702 cv
443.637 9.30902 443.906 9.24597 444.195 9.19501 cv
444.484 9.14801 444.781 9.125 445.09 9.12097 cv
445.633 9.125 446.098 9.17603 446.484 9.28101 cv
446.871 9.39099 447.191 9.55499 447.441 9.77301 cv
447.691 9.992 447.871 10.277 447.988 10.625 cv
448.098 10.977 448.156 11.391 448.16 11.863 cv
cp
446.234 13.562 mo
445.484 13.562 li
445.168 13.566 444.898 13.59 444.676 13.633 cv
444.449 13.684 444.266 13.754 444.129 13.844 cv
443.984 13.941 443.883 14.055 443.82 14.184 cv
443.754 14.32 443.719 14.469 443.723 14.637 cv
443.719 14.93 443.813 15.16 444 15.324 cv
444.184 15.492 444.441 15.574 444.77 15.574 cv
445.043 15.574 445.293 15.504 445.527 15.363 cv
445.754 15.223 445.992 15.02 446.234 14.746 cv
cp
f
456.383 10.047 mo
456.379 10.301 456.352 10.484 456.297 10.602 cv
456.238 10.723 456.168 10.781 456.09 10.781 cv
455.27 10.781 li
455.383 10.906 455.465 11.051 455.516 11.207 cv
455.563 11.367 455.586 11.531 455.59 11.699 cv
455.586 12.109 455.52 12.469 455.387 12.781 cv
455.25 13.098 455.055 13.363 454.805 13.574 cv
454.551 13.793 454.25 13.957 453.895 14.066 cv
453.535 14.184 453.137 14.238 452.707 14.234 cv
452.48 14.238 452.27 14.211 452.066 14.152 cv
451.863 14.102 451.707 14.039 451.598 13.961 cv
451.535 14.031 451.477 14.109 451.43 14.203 cv
451.379 14.297 451.355 14.402 451.359 14.512 cv
451.355 14.668 451.422 14.789 451.555 14.883 cv
451.684 14.98 451.871 15.035 452.113 15.043 cv
453.805 15.105 li
454.199 15.121 454.551 15.18 454.859 15.273 cv
455.168 15.375 455.43 15.508 455.641 15.68 cv
455.852 15.855 456.012 16.066 456.121 16.309 cv
456.23 16.555 456.285 16.828 456.289 17.141 cv
456.285 17.477 456.211 17.801 456.063 18.109 cv
455.914 18.41 455.688 18.672 455.387 18.898 cv
455.082 19.117 454.703 19.297 454.25 19.43 cv
453.793 19.559 453.262 19.621 452.66 19.625 cv
452.063 19.621 451.559 19.574 451.141 19.484 cv
450.723 19.387 450.379 19.258 450.113 19.094 cv
449.844 18.926 449.648 18.727 449.531 18.5 cv
449.406 18.266 449.348 18.012 449.348 17.738 cv
449.348 17.566 449.367 17.406 449.414 17.25 cv
449.453 17.094 449.52 16.941 449.609 16.801 cv
449.691 16.656 449.797 16.523 449.922 16.391 cv
450.047 16.262 450.188 16.137 450.352 16.016 cv
450.125 15.902 449.953 15.742 449.832 15.531 cv
449.711 15.328 449.652 15.102 449.652 14.855 cv
449.652 14.555 449.719 14.277 449.859 14.02 cv
449.996 13.77 450.18 13.539 450.406 13.336 cv
450.223 13.156 450.078 12.941 449.969 12.684 cv
449.859 12.434 449.805 12.113 449.809 11.73 cv
449.805 11.328 449.875 10.969 450.02 10.645 cv
450.16 10.328 450.359 10.059 450.617 9.836 cv
450.871 9.617 451.176 9.44501 451.527 9.328 cv
451.879 9.211 452.27 9.15198 452.699 9.15198 cv
452.918 9.15198 453.125 9.16803 453.324 9.19098 cv
453.523 9.22302 453.711 9.258 453.883 9.30103 cv
456.09 9.30103 li
456.172 9.30499 456.242 9.36298 456.301 9.47302 cv
456.352 9.59003 456.379 9.78101 456.383 10.047 cv
cp
453.867 11.691 mo
453.863 11.32 453.762 11.031 453.555 10.82 cv
453.344 10.617 453.051 10.512 452.676 10.508 cv
452.48 10.512 452.309 10.543 452.168 10.605 cv
452.02 10.672 451.898 10.762 451.805 10.871 cv
451.703 10.984 451.633 11.113 451.59 11.262 cv
451.539 11.41 451.516 11.566 451.52 11.723 cv
451.516 12.082 451.621 12.359 451.832 12.562 cv
452.039 12.77 452.328 12.875 452.699 12.871 cv
452.895 12.875 453.063 12.844 453.211 12.777 cv
453.352 12.719 453.473 12.633 453.574 12.52 cv
453.668 12.414 453.742 12.285 453.793 12.141 cv
453.84 12 453.863 11.852 453.867 11.691 cv
cp
454.328 17.242 mo
454.328 17.004 454.234 16.828 454.047 16.703 cv
453.859 16.582 453.602 16.512 453.273 16.5 cv
451.879 16.461 li
451.742 16.562 451.633 16.656 451.555 16.746 cv
451.473 16.836 451.41 16.922 451.363 17.008 cv
451.313 17.09 451.277 17.172 451.266 17.25 cv
451.246 17.328 451.238 17.406 451.242 17.492 cv
451.238 17.746 451.371 17.945 451.633 18.082 cv
451.895 18.215 452.266 18.281 452.746 18.285 cv
453.039 18.281 453.285 18.25 453.492 18.195 cv
453.691 18.133 453.855 18.055 453.984 17.957 cv
454.105 17.855 454.195 17.746 454.25 17.625 cv
454.301 17.504 454.328 17.375 454.328 17.242 cv
cp
f
464.023 12.84 mo
464.02 13.078 463.969 13.254 463.863 13.367 cv
463.754 13.484 463.605 13.543 463.426 13.539 cv
459.191 13.539 li
459.188 13.84 459.223 14.109 459.297 14.348 cv
459.363 14.59 459.477 14.793 459.633 14.961 cv
459.785 15.133 459.98 15.262 460.223 15.348 cv
460.461 15.437 460.75 15.48 461.094 15.48 cv
461.434 15.48 461.734 15.457 461.996 15.406 cv
462.254 15.359 462.48 15.305 462.672 15.242 cv
462.859 15.184 463.016 15.129 463.145 15.078 cv
463.266 15.031 463.367 15.008 463.449 15.004 cv
463.492 15.008 463.531 15.016 463.566 15.031 cv
463.594 15.051 463.621 15.082 463.641 15.129 cv
463.66 15.176 463.672 15.242 463.684 15.328 cv
463.688 15.414 463.691 15.523 463.695 15.652 cv
463.691 15.77 463.691 15.867 463.688 15.945 cv
463.68 16.027 463.672 16.094 463.664 16.148 cv
463.652 16.207 463.637 16.258 463.617 16.293 cv
463.598 16.336 463.57 16.371 463.539 16.406 cv
463.504 16.445 463.41 16.496 463.262 16.555 cv
463.105 16.621 462.914 16.684 462.684 16.738 cv
462.445 16.801 462.176 16.848 461.879 16.895 cv
461.574 16.934 461.254 16.957 460.914 16.961 cv
460.293 16.957 459.75 16.883 459.289 16.727 cv
458.82 16.574 458.434 16.336 458.125 16.02 cv
457.809 15.703 457.574 15.305 457.426 14.82 cv
457.27 14.34 457.195 13.773 457.199 13.117 cv
457.195 12.504 457.273 11.945 457.438 11.449 cv
457.594 10.953 457.828 10.535 458.141 10.187 cv
458.445 9.84399 458.82 9.578 459.258 9.39502 cv
459.695 9.21503 460.188 9.125 460.742 9.12097 cv
461.32 9.125 461.82 9.211 462.234 9.37903 cv
462.648 9.55499 462.984 9.79303 463.25 10.094 cv
463.512 10.398 463.707 10.758 463.836 11.172 cv
463.957 11.59 464.02 12.039 464.023 12.527 cv
cp
462.121 12.277 mo
462.133 11.727 462.023 11.293 461.789 10.98 cv
461.555 10.668 461.188 10.512 460.695 10.508 cv
460.445 10.512 460.23 10.559 460.047 10.648 cv
459.859 10.746 459.707 10.871 459.586 11.027 cv
459.461 11.187 459.367 11.375 459.305 11.59 cv
459.238 11.805 459.199 12.035 459.191 12.277 cv
cp
f
470.523 14.551 mo
470.52 14.949 470.445 15.297 470.301 15.598 cv
470.152 15.898 469.945 16.152 469.676 16.352 cv
469.402 16.559 469.082 16.707 468.715 16.809 cv
468.348 16.906 467.945 16.957 467.516 16.961 cv
467.25 16.957 467.004 16.937 466.77 16.902 cv
466.535 16.859 466.324 16.812 466.137 16.754 cv
465.949 16.695 465.793 16.633 465.668 16.57 cv
465.543 16.508 465.449 16.449 465.395 16.395 cv
465.336 16.34 465.293 16.258 465.266 16.141 cv
465.23 16.027 465.215 15.852 465.219 15.621 cv
465.215 15.473 465.223 15.352 465.234 15.258 cv
465.242 15.168 465.258 15.098 465.281 15.039 cv
465.301 14.988 465.324 14.949 465.359 14.93 cv
465.387 14.914 465.426 14.906 465.473 14.902 cv
465.527 14.906 465.613 14.937 465.727 15 cv
465.836 15.066 465.973 15.141 466.145 15.215 cv
466.309 15.297 466.504 15.367 466.723 15.434 cv
466.941 15.504 467.191 15.539 467.477 15.535 cv
467.652 15.539 467.809 15.52 467.949 15.48 cv
468.082 15.445 468.203 15.395 468.309 15.324 cv
468.406 15.258 468.48 15.172 468.535 15.066 cv
468.582 14.965 468.609 14.844 468.613 14.707 cv
468.609 14.551 468.563 14.418 468.469 14.309 cv
468.375 14.199 468.246 14.102 468.09 14.016 cv
467.926 13.934 467.746 13.855 467.551 13.781 cv
467.348 13.711 467.145 13.633 466.934 13.539 cv
466.723 13.453 466.516 13.352 466.32 13.234 cv
466.117 13.125 465.938 12.984 465.781 12.816 cv
465.617 12.652 465.492 12.453 465.398 12.215 cv
465.305 11.984 465.258 11.703 465.258 11.371 cv
465.258 11.043 465.32 10.738 465.449 10.457 cv
465.578 10.184 465.766 9.94501 466.012 9.74597 cv
466.254 9.55103 466.551 9.39801 466.902 9.28497 cv
467.25 9.17999 467.645 9.125 468.086 9.12097 cv
468.301 9.125 468.512 9.14099 468.719 9.16803 cv
468.922 9.203 469.109 9.242 469.277 9.28497 cv
469.441 9.336 469.582 9.38702 469.699 9.43701 cv
469.813 9.49597 469.895 9.54303 469.945 9.578 cv
469.992 9.62097 470.027 9.65997 470.051 9.69501 cv
470.07 9.73798 470.082 9.78497 470.094 9.836 cv
470.102 9.89099 470.113 9.95697 470.121 10.035 cv
470.129 10.121 470.133 10.219 470.133 10.336 cv
470.133 10.477 470.129 10.594 470.121 10.68 cv
470.113 10.773 470.098 10.844 470.082 10.891 cv
470.063 10.945 470.039 10.98 470.012 10.996 cv
469.977 11.02 469.941 11.027 469.902 11.023 cv
469.852 11.027 469.777 11 469.684 10.941 cv
469.582 10.891 469.461 10.832 469.313 10.766 cv
469.164 10.707 468.992 10.648 468.797 10.59 cv
468.602 10.539 468.379 10.512 468.133 10.508 cv
467.953 10.512 467.801 10.531 467.672 10.562 cv
467.539 10.602 467.43 10.652 467.352 10.719 cv
467.266 10.789 467.203 10.867 467.164 10.957 cv
467.117 11.051 467.098 11.148 467.102 11.25 cv
467.098 11.41 467.148 11.547 467.25 11.652 cv
467.348 11.766 467.477 11.859 467.641 11.941 cv
467.801 12.027 467.984 12.105 468.191 12.176 cv
468.395 12.25 468.602 12.332 468.813 12.414 cv
469.02 12.504 469.227 12.602 469.438 12.715 cv
469.641 12.828 469.824 12.969 469.984 13.133 cv
470.145 13.301 470.273 13.5 470.375 13.73 cv
470.469 13.965 470.52 14.238 470.523 14.551 cv
cp
f
479.266 12.863 mo
479.262 13.164 479.234 13.375 479.18 13.492 cv
479.121 13.617 479.031 13.676 478.906 13.672 cv
475.664 13.672 li
475.535 13.676 475.441 13.613 475.387 13.488 cv
475.324 13.367 475.297 13.16 475.301 12.863 cv
475.297 12.574 475.324 12.367 475.387 12.246 cv
475.441 12.129 475.535 12.07 475.664 12.066 cv
478.906 12.066 li
478.969 12.07 479.02 12.082 479.066 12.105 cv
479.105 12.133 479.145 12.18 479.18 12.238 cv
479.207 12.305 479.23 12.387 479.246 12.488 cv
479.258 12.594 479.262 12.719 479.266 12.863 cv
cp
f
491.121 13.883 mo
491.117 14.152 491.09 14.355 491.039 14.488 cv
490.98 14.629 490.906 14.695 490.816 14.691 cv
489.922 14.691 li
489.922 16.516 li
489.922 16.57 489.906 16.613 489.875 16.652 cv
489.844 16.691 489.789 16.727 489.711 16.75 cv
489.633 16.777 489.531 16.793 489.406 16.809 cv
489.281 16.82 489.117 16.828 488.922 16.828 cv
488.734 16.828 488.578 16.82 488.453 16.809 cv
488.32 16.793 488.219 16.777 488.148 16.75 cv
488.07 16.727 488.02 16.691 487.992 16.652 cv
487.961 16.613 487.945 16.57 487.949 16.516 cv
487.949 14.691 li
484.094 14.691 li
484.016 14.695 483.953 14.687 483.898 14.664 cv
483.84 14.648 483.789 14.605 483.754 14.543 cv
483.711 14.48 483.684 14.387 483.668 14.262 cv
483.648 14.141 483.641 13.98 483.641 13.773 cv
483.641 13.609 483.645 13.465 483.652 13.34 cv
483.66 13.223 483.672 13.113 483.691 13.012 cv
483.707 12.918 483.734 12.824 483.77 12.73 cv
483.801 12.645 483.844 12.551 483.898 12.449 cv
487.031 6.922 li
487.055 6.87903 487.098 6.84003 487.164 6.80103 cv
487.223 6.77002 487.309 6.73798 487.422 6.71503 cv
487.531 6.69098 487.676 6.67603 487.848 6.664 cv
488.02 6.65601 488.227 6.65198 488.473 6.64801 cv
488.734 6.65198 488.961 6.65601 489.148 6.66803 cv
489.336 6.68402 489.484 6.70697 489.598 6.72998 cv
489.707 6.76202 489.789 6.797 489.844 6.836 cv
489.895 6.883 489.922 6.92999 489.922 6.98401 cv
489.922 13.055 li
490.816 13.055 li
490.898 13.055 490.969 13.121 491.031 13.246 cv
491.086 13.379 491.117 13.59 491.121 13.883 cv
cp
487.949 8.41803 mo
487.934 8.41803 li
485.277 13.055 li
487.949 13.055 li
cp
f
502.82 7.539 mo
502.816 7.69501 502.809 7.82397 502.801 7.92603 cv
502.785 8.03497 502.766 8.12097 502.742 8.18402 cv
502.711 8.25 502.68 8.297 502.645 8.32397 cv
502.602 8.35901 502.559 8.375 502.516 8.37097 cv
499.992 8.37097 li
499.992 16.5 li
499.992 16.555 499.973 16.602 499.941 16.641 cv
499.902 16.684 499.848 16.719 499.773 16.742 cv
499.691 16.77 499.586 16.789 499.457 16.805 cv
499.32 16.82 499.156 16.828 498.961 16.828 cv
498.766 16.828 498.602 16.82 498.469 16.805 cv
498.336 16.789 498.23 16.77 498.152 16.742 cv
498.074 16.719 498.016 16.684 497.984 16.641 cv
497.945 16.602 497.93 16.555 497.934 16.5 cv
497.934 8.37097 li
495.41 8.37097 li
495.355 8.375 495.309 8.35901 495.277 8.32397 cv
495.238 8.297 495.207 8.25 495.184 8.18402 cv
495.152 8.12097 495.133 8.03497 495.125 7.92603 cv
495.109 7.82397 495.105 7.69501 495.105 7.539 cv
495.105 7.38702 495.109 7.25403 495.125 7.14099 cv
495.133 7.03497 495.152 6.94501 495.184 6.87903 cv
495.207 6.81598 495.238 6.77002 495.277 6.73798 cv
495.309 6.711 495.355 6.69897 495.41 6.69501 cv
502.516 6.69501 li
502.559 6.69897 502.602 6.711 502.645 6.73798 cv
502.68 6.77002 502.711 6.81598 502.742 6.87903 cv
502.766 6.94501 502.785 7.03497 502.801 7.14099 cv
502.809 7.25403 502.816 7.38702 502.82 7.539 cv
cp
f
510.531 16.516 mo
510.527 16.57 510.512 16.613 510.484 16.652 cv
510.449 16.691 510.398 16.727 510.328 16.75 cv
510.254 16.777 510.152 16.793 510.027 16.809 cv
509.898 16.82 509.742 16.828 509.559 16.828 cv
509.363 16.828 509.203 16.82 509.078 16.809 cv
508.949 16.793 508.848 16.777 508.777 16.75 cv
508.699 16.727 508.648 16.691 508.621 16.652 cv
508.586 16.613 508.57 16.57 508.574 16.516 cv
508.574 12.551 li
508.57 12.215 508.547 11.949 508.5 11.754 cv
508.449 11.562 508.375 11.398 508.285 11.262 cv
508.191 11.125 508.074 11.02 507.926 10.941 cv
507.777 10.867 507.602 10.828 507.406 10.828 cv
507.152 10.828 506.902 10.922 506.648 11.102 cv
506.395 11.285 506.129 11.547 505.855 11.895 cv
505.855 16.516 li
505.852 16.57 505.836 16.613 505.809 16.652 cv
505.773 16.691 505.719 16.727 505.648 16.75 cv
505.57 16.777 505.473 16.793 505.348 16.809 cv
505.223 16.82 505.063 16.828 504.875 16.828 cv
504.68 16.828 504.523 16.82 504.398 16.809 cv
504.273 16.793 504.172 16.777 504.098 16.75 cv
504.02 16.727 503.965 16.691 503.938 16.652 cv
503.902 16.613 503.887 16.57 503.891 16.516 cv
503.891 6.27002 li
503.887 6.21899 503.902 6.172 503.938 6.12903 cv
503.965 6.09003 504.02 6.05499 504.098 6.02301 cv
504.172 5.99597 504.273 5.97699 504.398 5.95697 cv
504.523 5.94501 504.68 5.93701 504.875 5.93402 cv
505.063 5.93701 505.223 5.94501 505.348 5.95697 cv
505.473 5.97699 505.57 5.99597 505.648 6.02301 cv
505.719 6.05499 505.773 6.09003 505.809 6.12903 cv
505.836 6.172 505.852 6.21899 505.855 6.27002 cv
505.855 10.109 li
506.191 9.78101 506.535 9.53497 506.887 9.367 cv
507.234 9.20697 507.602 9.125 507.984 9.12097 cv
508.453 9.125 508.852 9.203 509.18 9.35498 cv
509.504 9.51599 509.766 9.72699 509.965 9.99597 cv
510.164 10.266 510.309 10.582 510.398 10.941 cv
510.484 11.305 510.527 11.742 510.531 12.254 cv
cp
f
516.93 10.211 mo
516.93 10.402 516.922 10.555 516.914 10.672 cv
516.898 10.793 516.883 10.887 516.867 10.953 cv
516.844 11.023 516.816 11.07 516.785 11.094 cv
516.746 11.121 516.703 11.133 516.656 11.133 cv
516.609 11.133 516.563 11.125 516.516 11.105 cv
516.461 11.09 516.402 11.07 516.34 11.047 cv
516.27 11.027 516.199 11.008 516.125 10.988 cv
516.043 10.973 515.957 10.965 515.867 10.961 cv
515.754 10.965 515.645 10.984 515.539 11.027 cv
515.43 11.074 515.316 11.145 515.203 11.234 cv
515.082 11.328 514.961 11.453 514.836 11.605 cv
514.707 11.766 514.57 11.957 514.426 12.184 cv
514.426 16.516 li
514.422 16.57 514.406 16.613 514.379 16.652 cv
514.344 16.691 514.289 16.727 514.219 16.75 cv
514.141 16.777 514.043 16.793 513.918 16.809 cv
513.793 16.82 513.633 16.828 513.445 16.828 cv
513.25 16.828 513.094 16.82 512.969 16.809 cv
512.844 16.793 512.742 16.777 512.668 16.75 cv
512.59 16.727 512.535 16.691 512.508 16.652 cv
512.473 16.613 512.457 16.57 512.461 16.516 cv
512.461 9.56598 li
512.457 9.52002 512.473 9.47302 512.5 9.42999 cv
512.523 9.39502 512.57 9.36298 512.641 9.33197 cv
512.707 9.30902 512.793 9.289 512.902 9.27301 cv
513.008 9.26599 513.141 9.258 513.305 9.25403 cv
513.469 9.258 513.605 9.26599 513.715 9.27301 cv
513.82 9.289 513.906 9.30902 513.969 9.33197 cv
514.027 9.36298 514.07 9.39502 514.098 9.42999 cv
514.121 9.47302 514.133 9.52002 514.137 9.56598 cv
514.137 10.43 li
514.316 10.172 514.488 9.961 514.652 9.789 cv
514.809 9.625 514.965 9.48798 515.113 9.38702 cv
515.258 9.289 515.402 9.22302 515.547 9.17999 cv
515.691 9.14502 515.836 9.125 515.984 9.12097 cv
516.051 9.125 516.125 9.12903 516.203 9.133 cv
516.281 9.14502 516.359 9.15601 516.445 9.172 cv
516.523 9.19098 516.598 9.211 516.664 9.23401 cv
516.723 9.258 516.77 9.28497 516.801 9.30902 cv
516.828 9.34003 516.848 9.367 516.863 9.39502 cv
516.875 9.42999 516.887 9.47302 516.898 9.52301 cv
516.906 9.58197 516.914 9.664 516.922 9.77002 cv
516.926 9.87903 516.93 10.027 516.93 10.211 cv
cp
f
524.375 12.84 mo
524.371 13.078 524.32 13.254 524.215 13.367 cv
524.105 13.484 523.957 13.543 523.777 13.539 cv
519.543 13.539 li
519.539 13.84 519.574 14.109 519.648 14.348 cv
519.715 14.59 519.828 14.793 519.984 14.961 cv
520.137 15.133 520.332 15.262 520.574 15.348 cv
520.813 15.437 521.102 15.48 521.445 15.48 cv
521.785 15.48 522.086 15.457 522.348 15.406 cv
522.605 15.359 522.832 15.305 523.023 15.242 cv
523.211 15.184 523.367 15.129 523.496 15.078 cv
523.617 15.031 523.719 15.008 523.801 15.004 cv
523.844 15.008 523.883 15.016 523.918 15.031 cv
523.945 15.051 523.973 15.082 523.992 15.129 cv
524.012 15.176 524.023 15.242 524.035 15.328 cv
524.039 15.414 524.043 15.523 524.047 15.652 cv
524.043 15.77 524.043 15.867 524.039 15.945 cv
524.031 16.027 524.023 16.094 524.016 16.148 cv
524.004 16.207 523.988 16.258 523.969 16.293 cv
523.949 16.336 523.922 16.371 523.891 16.406 cv
523.855 16.445 523.762 16.496 523.613 16.555 cv
523.457 16.621 523.266 16.684 523.035 16.738 cv
522.797 16.801 522.527 16.848 522.23 16.895 cv
521.926 16.934 521.605 16.957 521.266 16.961 cv
520.645 16.957 520.102 16.883 519.641 16.727 cv
519.172 16.574 518.785 16.336 518.477 16.02 cv
518.16 15.703 517.926 15.305 517.777 14.82 cv
517.621 14.34 517.547 13.773 517.551 13.117 cv
517.547 12.504 517.625 11.945 517.789 11.449 cv
517.945 10.953 518.18 10.535 518.492 10.187 cv
518.797 9.84399 519.172 9.578 519.609 9.39502 cv
520.047 9.21503 520.539 9.125 521.094 9.12097 cv
521.672 9.125 522.172 9.211 522.586 9.37903 cv
523 9.55499 523.336 9.79303 523.602 10.094 cv
523.863 10.398 524.059 10.758 524.188 11.172 cv
524.309 11.59 524.371 12.039 524.375 12.527 cv
cp
522.473 12.277 mo
522.484 11.727 522.375 11.293 522.141 10.98 cv
521.906 10.668 521.539 10.512 521.047 10.508 cv
520.797 10.512 520.582 10.559 520.398 10.648 cv
520.211 10.746 520.059 10.871 519.938 11.027 cv
519.813 11.187 519.719 11.375 519.656 11.59 cv
519.59 11.805 519.551 12.035 519.543 12.277 cv
cp
f
531.906 16.539 mo
531.902 16.617 531.875 16.672 531.828 16.711 cv
531.773 16.754 531.691 16.781 531.582 16.801 cv
531.465 16.816 531.301 16.828 531.086 16.828 cv
530.848 16.828 530.676 16.816 530.574 16.801 cv
530.465 16.781 530.391 16.754 530.352 16.711 cv
530.305 16.672 530.285 16.617 530.285 16.539 cv
530.285 15.988 li
529.996 16.297 529.668 16.535 529.305 16.703 cv
528.938 16.875 528.531 16.957 528.086 16.961 cv
527.715 16.957 527.375 16.91 527.066 16.816 cv
526.758 16.723 526.492 16.582 526.266 16.387 cv
526.039 16.199 525.863 15.965 525.738 15.684 cv
525.613 15.406 525.551 15.078 525.555 14.699 cv
525.551 14.301 525.629 13.949 525.789 13.645 cv
525.945 13.348 526.184 13.102 526.5 12.906 cv
526.813 12.715 527.203 12.57 527.672 12.473 cv
528.141 12.383 528.684 12.336 529.301 12.332 cv
529.98 12.332 li
529.98 11.91 li
529.98 11.695 529.957 11.504 529.914 11.34 cv
529.867 11.18 529.793 11.043 529.695 10.93 cv
529.59 10.824 529.457 10.742 529.289 10.687 cv
529.117 10.637 528.906 10.613 528.664 10.609 cv
528.332 10.613 528.039 10.648 527.785 10.719 cv
527.523 10.793 527.297 10.875 527.102 10.961 cv
526.902 11.055 526.738 11.133 526.609 11.203 cv
526.473 11.277 526.363 11.316 526.285 11.312 cv
526.223 11.316 526.172 11.297 526.133 11.258 cv
526.086 11.223 526.051 11.172 526.023 11.102 cv
525.992 11.039 525.969 10.953 525.957 10.852 cv
525.938 10.754 525.93 10.645 525.934 10.523 cv
525.93 10.363 525.945 10.238 525.973 10.141 cv
525.996 10.051 526.043 9.96503 526.121 9.88702 cv
526.191 9.81201 526.32 9.72998 526.504 9.64099 cv
526.684 9.55103 526.895 9.46503 527.141 9.38702 cv
527.383 9.30902 527.652 9.24597 527.941 9.19501 cv
528.23 9.14801 528.527 9.125 528.836 9.12097 cv
529.379 9.125 529.844 9.17603 530.23 9.28101 cv
530.617 9.39099 530.938 9.55499 531.188 9.77301 cv
531.438 9.992 531.617 10.277 531.734 10.625 cv
531.844 10.977 531.902 11.391 531.906 11.863 cv
cp
529.98 13.562 mo
529.23 13.562 li
528.914 13.566 528.645 13.59 528.422 13.633 cv
528.195 13.684 528.012 13.754 527.875 13.844 cv
527.73 13.941 527.629 14.055 527.566 14.184 cv
527.5 14.32 527.465 14.469 527.469 14.637 cv
527.465 14.93 527.559 15.16 527.746 15.324 cv
527.93 15.492 528.188 15.574 528.516 15.574 cv
528.789 15.574 529.039 15.504 529.273 15.363 cv
529.5 15.223 529.738 15.02 529.98 14.746 cv
cp
f
540.488 16.516 mo
540.484 16.578 540.473 16.625 540.449 16.66 cv
540.422 16.703 540.375 16.734 540.316 16.758 cv
540.25 16.781 540.168 16.797 540.063 16.812 cv
539.957 16.82 539.824 16.828 539.672 16.828 cv
539.5 16.828 539.367 16.82 539.266 16.812 cv
539.16 16.797 539.074 16.781 539.012 16.758 cv
538.945 16.734 538.898 16.703 538.871 16.66 cv
538.84 16.625 538.824 16.578 538.828 16.516 cv
538.828 15.746 li
538.469 16.133 538.094 16.43 537.703 16.641 cv
537.305 16.852 536.871 16.957 536.398 16.961 cv
535.863 16.957 535.414 16.855 535.051 16.652 cv
534.684 16.449 534.387 16.176 534.156 15.824 cv
533.922 15.48 533.754 15.074 533.652 14.605 cv
533.551 14.145 533.5 13.652 533.5 13.133 cv
533.5 12.52 533.563 11.965 533.695 11.469 cv
533.824 10.977 534.02 10.555 534.277 10.207 cv
534.531 9.85901 534.848 9.59399 535.227 9.40198 cv
535.605 9.21899 536.043 9.125 536.539 9.12097 cv
536.926 9.125 537.277 9.203 537.598 9.35901 cv
537.91 9.52002 538.227 9.75 538.539 10.055 cv
538.539 6.29303 li
538.539 6.242 538.551 6.19501 538.582 6.15198 cv
538.605 6.11298 538.66 6.078 538.738 6.047 cv
538.813 6.02002 538.91 6 539.039 5.97998 cv
539.16 5.96899 539.32 5.961 539.516 5.95697 cv
539.707 5.961 539.863 5.96899 539.988 5.97998 cv
540.109 6 540.211 6.02002 540.285 6.047 cv
540.355 6.078 540.406 6.11298 540.441 6.15198 cv
540.469 6.19501 540.484 6.242 540.488 6.29303 cv
cp
538.539 11.871 mo
538.258 11.52 537.988 11.25 537.734 11.062 cv
537.473 10.875 537.203 10.781 536.926 10.781 cv
536.672 10.781 536.453 10.848 536.27 10.973 cv
536.082 11.105 535.934 11.273 535.824 11.484 cv
535.711 11.695 535.629 11.934 535.574 12.195 cv
535.52 12.461 535.492 12.73 535.492 13 cv
535.492 13.297 535.516 13.578 535.563 13.852 cv
535.609 14.129 535.684 14.375 535.793 14.59 cv
535.895 14.805 536.039 14.977 536.219 15.105 cv
536.395 15.238 536.617 15.305 536.887 15.301 cv
537.02 15.305 537.148 15.285 537.281 15.242 cv
537.406 15.207 537.539 15.145 537.672 15.051 cv
537.805 14.965 537.941 14.848 538.082 14.703 cv
538.223 14.562 538.375 14.387 538.539 14.18 cv
cp
f
547.313 14.551 mo
547.309 14.949 547.234 15.297 547.09 15.598 cv
546.941 15.898 546.734 16.152 546.465 16.352 cv
546.191 16.559 545.871 16.707 545.504 16.809 cv
545.137 16.906 544.734 16.957 544.305 16.961 cv
544.039 16.957 543.793 16.937 543.559 16.902 cv
543.324 16.859 543.113 16.812 542.926 16.754 cv
542.738 16.695 542.582 16.633 542.457 16.57 cv
542.332 16.508 542.238 16.449 542.184 16.395 cv
542.125 16.34 542.082 16.258 542.055 16.141 cv
542.02 16.027 542.004 15.852 542.008 15.621 cv
542.004 15.473 542.012 15.352 542.023 15.258 cv
542.031 15.168 542.047 15.098 542.07 15.039 cv
542.09 14.988 542.113 14.949 542.148 14.93 cv
542.176 14.914 542.215 14.906 542.262 14.902 cv
542.316 14.906 542.402 14.937 542.516 15 cv
542.625 15.066 542.762 15.141 542.934 15.215 cv
543.098 15.297 543.293 15.367 543.512 15.434 cv
543.73 15.504 543.98 15.539 544.266 15.535 cv
544.441 15.539 544.598 15.52 544.738 15.48 cv
544.871 15.445 544.992 15.395 545.098 15.324 cv
545.195 15.258 545.27 15.172 545.324 15.066 cv
545.371 14.965 545.398 14.844 545.402 14.707 cv
545.398 14.551 545.352 14.418 545.258 14.309 cv
545.164 14.199 545.035 14.102 544.879 14.016 cv
544.715 13.934 544.535 13.855 544.34 13.781 cv
544.137 13.711 543.934 13.633 543.723 13.539 cv
543.512 13.453 543.305 13.352 543.109 13.234 cv
542.906 13.125 542.727 12.984 542.57 12.816 cv
542.406 12.652 542.281 12.453 542.188 12.215 cv
542.094 11.984 542.047 11.703 542.047 11.371 cv
542.047 11.043 542.109 10.738 542.238 10.457 cv
542.367 10.184 542.555 9.94501 542.801 9.74597 cv
543.043 9.55103 543.34 9.39801 543.691 9.28497 cv
544.039 9.17999 544.434 9.125 544.875 9.12097 cv
545.09 9.125 545.301 9.14099 545.508 9.16803 cv
545.711 9.203 545.898 9.242 546.066 9.28497 cv
546.23 9.336 546.371 9.38702 546.488 9.43701 cv
546.602 9.49597 546.684 9.54303 546.734 9.578 cv
546.781 9.62097 546.816 9.65997 546.84 9.69501 cv
546.859 9.73798 546.871 9.78497 546.883 9.836 cv
546.891 9.89099 546.902 9.95697 546.91 10.035 cv
546.918 10.121 546.922 10.219 546.922 10.336 cv
546.922 10.477 546.918 10.594 546.91 10.68 cv
546.902 10.773 546.887 10.844 546.871 10.891 cv
546.852 10.945 546.828 10.98 546.801 10.996 cv
546.766 11.02 546.73 11.027 546.691 11.023 cv
546.641 11.027 546.566 11 546.473 10.941 cv
546.371 10.891 546.25 10.832 546.102 10.766 cv
545.953 10.707 545.781 10.648 545.586 10.59 cv
545.391 10.539 545.168 10.512 544.922 10.508 cv
544.742 10.512 544.59 10.531 544.461 10.562 cv
544.328 10.602 544.219 10.652 544.141 10.719 cv
544.055 10.789 543.992 10.867 543.953 10.957 cv
543.906 11.051 543.887 11.148 543.891 11.25 cv
543.887 11.41 543.938 11.547 544.039 11.652 cv
544.137 11.766 544.266 11.859 544.43 11.941 cv
544.59 12.027 544.773 12.105 544.98 12.176 cv
545.184 12.25 545.391 12.332 545.602 12.414 cv
545.809 12.504 546.016 12.602 546.227 12.715 cv
546.43 12.828 546.613 12.969 546.773 13.133 cv
546.934 13.301 547.063 13.5 547.164 13.73 cv
547.258 13.965 547.309 14.238 547.313 14.551 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
