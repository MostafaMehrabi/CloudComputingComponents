%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AvergeFilteringTime-EightThreads.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:25:35 PM
%%BoundingBox: 0 0 657 534
%%HiResBoundingBox: 0 0 656.6401 533.7601
%%CropBox: 0 0 656.6401 533.7601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -533.76 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 533.76 li
656.64 533.76 li
656.64 0 li
cp
clp
0 0 mo
656.641 0 li
656.641 533.762 li
0 533.762 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
49.68 485.879 mo
640.559 485.879 li
49.68 476.52 mo
640.559 476.52 li
49.68 467.16 mo
640.559 467.16 li
49.68 457.801 mo
640.559 457.801 li
49.68 439.078 mo
640.559 439.078 li
49.68 429.719 mo
640.559 429.719 li
49.68 420.359 mo
640.559 420.359 li
49.68 411 mo
640.559 411 li
49.68 392.281 mo
640.559 392.281 li
49.68 382.922 mo
640.559 382.922 li
49.68 373.559 mo
640.559 373.559 li
49.68 364.199 mo
640.559 364.199 li
49.68 345.48 mo
640.559 345.48 li
49.68 336.121 mo
640.559 336.121 li
49.68 326.879 mo
640.559 326.879 li
49.68 317.52 mo
640.559 317.52 li
49.68 298.801 mo
640.559 298.801 li
49.68 289.441 mo
640.559 289.441 li
49.68 280.078 mo
640.559 280.078 li
49.68 270.719 mo
640.559 270.719 li
49.68 252 mo
640.559 252 li
49.68 242.641 mo
640.559 242.641 li
49.68 233.281 mo
640.559 233.281 li
49.68 223.922 mo
640.559 223.922 li
49.68 205.199 mo
640.559 205.199 li
49.68 195.84 mo
640.559 195.84 li
49.68 186.48 mo
640.559 186.48 li
49.68 177.121 mo
640.559 177.121 li
49.68 158.398 mo
640.559 158.398 li
49.68 149.039 mo
640.559 149.039 li
49.68 139.68 mo
640.559 139.68 li
49.68 130.32 mo
640.559 130.32 li
49.68 111.719 mo
640.559 111.719 li
49.68 102.359 mo
640.559 102.359 li
49.68 93 mo
640.559 93 li
49.68 83.641 mo
640.559 83.641 li
49.68 64.922 mo
640.559 64.922 li
49.68 55.559 mo
640.559 55.559 li
49.68 46.199 mo
640.559 46.199 li
49.68 36.84 mo
640.559 36.84 li
.140414 .108034 .108034 0 cmyk
@
49.68 448.441 mo
640.559 448.441 li
49.68 401.641 mo
640.559 401.641 li
49.68 354.84 mo
640.559 354.84 li
49.68 308.16 mo
640.559 308.16 li
49.68 261.359 mo
640.559 261.359 li
49.68 214.559 mo
640.559 214.559 li
49.68 167.762 mo
640.559 167.762 li
49.68 120.961 mo
640.559 120.961 li
49.68 74.281 mo
640.559 74.281 li
49.68 27.48 mo
640.559 27.48 li
.328344 .284215 .278569 .000915541 cmyk
@
86.641 27.48 mo
86.641 495.238 li
160.441 27.48 mo
160.441 495.238 li
234.359 27.48 mo
234.359 495.238 li
308.16 27.48 mo
308.16 495.238 li
382.078 27.48 mo
382.078 495.238 li
455.879 27.48 mo
455.879 495.238 li
529.801 27.48 mo
529.801 495.238 li
603.602 27.48 mo
603.602 495.238 li
.178592 .148898 .143923 0 cmyk
@
49.68 27.48 mo
49.68 495.238 li
123.48 27.48 mo
123.48 495.238 li
197.398 27.48 mo
197.398 495.238 li
271.199 27.48 mo
271.199 495.238 li
345.121 27.48 mo
345.121 495.238 li
419.039 27.48 mo
419.039 495.238 li
492.84 27.48 mo
492.84 495.238 li
566.762 27.48 mo
566.762 495.238 li
640.559 27.48 mo
640.559 495.238 li
.328344 .284215 .278569 .000915541 cmyk
@
32.398 487.199 mo
38.519 487.199 li
38.519 501.84 li
32.398 501.84 li
cp
0 0 0 0 cmyk
ef
32.398 440.398 mo
38.519 440.398 li
38.519 455.039 li
32.398 455.039 li
cp
ef
32.398 393.719 mo
38.519 393.719 li
38.519 408.36 li
32.398 408.36 li
cp
ef
32.398 346.922 mo
38.519 346.922 li
38.519 361.559 li
32.398 361.559 li
cp
ef
32.398 300.121 mo
38.519 300.121 li
38.519 314.762 li
32.398 314.762 li
cp
ef
32.398 253.32 mo
38.519 253.32 li
38.519 267.961 li
32.398 267.961 li
cp
ef
32.398 206.52 mo
38.519 206.52 li
38.519 221.282 li
32.398 221.282 li
cp
ef
32.398 159.84 mo
38.519 159.84 li
38.519 174.481 li
32.398 174.481 li
cp
ef
32.398 113.039 mo
38.519 113.039 li
38.519 127.68 li
32.398 127.68 li
cp
ef
32.398 66.238 mo
38.519 66.238 li
38.519 80.879 li
32.398 80.879 li
cp
ef
26.398 19.441 mo
38.519 19.441 li
38.519 34.078 li
26.398 34.078 li
cp
ef
.96 lw
49.68 495.238 mo
640.559 495.238 li
.367803 .29575 .300999 .00198367 cmyk
@
49.68 495.238 mo
49.68 498.961 li
123.48 495.238 mo
123.48 498.961 li
197.398 495.238 mo
197.398 498.961 li
271.199 495.238 mo
271.199 498.961 li
345.121 495.238 mo
345.121 498.961 li
419.039 495.238 mo
419.039 498.961 li
492.84 495.238 mo
492.84 498.961 li
566.762 495.238 mo
566.762 498.961 li
640.559 495.238 mo
640.559 498.961 li
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
1 lc
49.68 479.398 mo
123.48 487.078 li
197.398 491.039 li
271.199 491.52 li
345.121 492.961 li
419.039 493.199 li
492.84 493.441 li
566.762 493.559 li
640.559 493.801 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
54.551 484.34 mo
44.469 474.262 li
44.469 484.34 mo
54.551 474.262 li
.62768 .285466 0 0 cmyk
@
128.469 492.141 mo
118.391 482.059 li
118.391 492.141 mo
128.469 482.059 li
@
202.27 495.98 mo
192.191 485.898 li
192.191 495.98 mo
202.27 485.898 li
@
276.191 496.578 mo
266.109 486.5 li
266.109 496.578 mo
276.191 486.5 li
@
350.109 498.02 mo
340.031 487.941 li
340.031 498.02 mo
350.109 487.941 li
@
423.91 498.262 mo
413.828 488.18 li
413.828 498.262 mo
423.91 488.18 li
@
497.828 498.379 mo
487.75 488.301 li
487.75 498.379 mo
497.828 488.301 li
@
571.629 498.621 mo
561.551 488.539 li
561.551 498.621 mo
571.629 488.539 li
@
645.551 498.738 mo
635.469 488.66 li
635.469 498.738 mo
645.551 488.66 li
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
49.68 464.281 mo
123.48 479.762 li
197.398 487.441 li
271.199 490.078 li
345.121 491.16 li
419.039 492.121 li
492.84 492.602 li
566.762 492.961 li
640.559 493.199 li
@
grestore
44.469 459.262 mo
54.43 459.262 li
54.43 469.219 li
44.469 469.219 li
cp
@
118.391 474.621 mo
128.352 474.621 li
128.352 484.578 li
118.391 484.578 li
cp
@
192.191 482.422 mo
202.148 482.422 li
202.148 492.379 li
192.191 492.379 li
cp
@
266.109 484.941 mo
276.07 484.941 li
276.07 494.898 li
266.109 494.898 li
cp
@
340.031 486.141 mo
349.988 486.141 li
349.988 496.102 li
340.031 496.102 li
cp
@
413.828 486.98 mo
423.789 486.98 li
423.789 496.941 li
413.828 496.941 li
cp
@
487.75 487.461 mo
497.711 487.461 li
497.711 497.422 li
487.75 497.422 li
cp
@
561.551 487.941 mo
571.512 487.941 li
571.512 497.898 li
561.551 497.898 li
cp
@
635.469 488.18 mo
645.43 488.18 li
645.43 498.141 li
635.469 498.141 li
cp
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
49.68 453.84 mo
123.48 474.238 li
197.398 484.441 li
271.199 487.32 li
345.121 489.961 li
419.039 489.48 li
492.84 491.641 li
566.762 491.039 li
640.559 492.359 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
54.551 458.898 mo
44.469 448.82 li
44.469 458.898 mo
54.551 448.82 li
.0319219 .621851 .911223 .000427253 cmyk
@
128.469 479.18 mo
118.391 469.102 li
118.391 479.18 mo
128.469 469.102 li
@
202.27 489.5 mo
192.191 479.422 li
192.191 489.5 mo
202.27 479.422 li
@
276.191 492.262 mo
266.109 482.18 li
266.109 492.262 mo
276.191 482.18 li
@
350.109 494.898 mo
340.031 484.82 li
340.031 494.898 mo
350.109 484.82 li
@
423.91 494.539 mo
413.828 484.461 li
413.828 494.539 mo
423.91 484.461 li
@
497.828 496.578 mo
487.75 486.5 li
487.75 496.578 mo
497.828 486.5 li
@
571.629 496.102 mo
561.551 486.02 li
561.551 496.102 mo
571.629 486.02 li
@
645.551 497.422 mo
635.469 487.34 li
635.469 497.422 mo
645.551 487.34 li
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
49.68 413.762 mo
123.48 454.441 li
197.398 474.719 li
271.199 481.559 li
345.121 484.922 li
419.039 487.078 li
492.84 488.398 li
566.762 489.359 li
640.559 490.078 li
@
grestore
44.469 408.621 mo
54.43 408.621 li
54.43 418.578 li
44.469 418.578 li
cp
@
118.391 449.422 mo
128.352 449.422 li
128.352 459.379 li
118.391 459.379 li
cp
@
192.191 469.699 mo
202.148 469.699 li
202.148 479.66 li
192.191 479.66 li
cp
@
266.109 476.539 mo
276.07 476.539 li
276.07 486.5 li
266.109 486.5 li
cp
@
340.031 479.898 mo
349.988 479.898 li
349.988 489.859 li
340.031 489.859 li
cp
@
413.828 481.941 mo
423.789 481.941 li
423.789 491.898 li
413.828 491.898 li
cp
@
487.75 483.262 mo
497.711 483.262 li
497.711 493.219 li
487.75 493.219 li
cp
@
561.551 484.219 mo
571.512 484.219 li
571.512 494.18 li
561.551 494.18 li
cp
@
635.469 484.941 mo
645.43 484.941 li
645.43 494.898 li
635.469 494.898 li
cp
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
49.68 357.48 mo
123.48 425.281 li
197.398 459.719 li
271.199 465.961 li
345.121 476.039 li
419.039 478.922 li
492.84 480.238 li
566.762 484.441 li
640.559 484.801 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
54.551 362.422 mo
44.469 352.34 li
44.469 362.422 mo
54.551 352.34 li
.619135 .109529 .981689 .00570687 cmyk
@
128.469 430.219 mo
118.391 420.141 li
118.391 430.219 mo
128.469 420.141 li
@
202.27 464.66 mo
192.191 454.578 li
192.191 464.66 mo
202.27 454.578 li
@
276.191 471.02 mo
266.109 460.941 li
266.109 471.02 mo
276.191 460.941 li
@
350.109 480.98 mo
340.031 470.898 li
340.031 480.98 mo
350.109 470.898 li
@
423.91 483.98 mo
413.828 473.898 li
413.828 483.98 mo
423.91 473.898 li
@
497.828 485.18 mo
487.75 475.102 li
487.75 485.18 mo
497.828 475.102 li
@
571.629 489.5 mo
561.551 479.422 li
561.551 489.5 mo
571.629 479.422 li
@
645.551 489.859 mo
635.469 479.781 li
635.469 489.859 mo
645.551 479.781 li
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
49.68 222.84 mo
123.48 358.922 li
197.398 426.602 li
271.199 449.52 li
345.121 460.801 li
419.039 467.879 li
492.84 472.32 li
566.762 475.559 li
640.559 477.961 li
@
grestore
44.469 217.699 mo
54.43 217.699 li
54.43 227.66 li
44.469 227.66 li
cp
@
118.391 353.781 mo
128.352 353.781 li
128.352 363.738 li
118.391 363.738 li
cp
@
192.191 421.461 mo
202.148 421.461 li
202.148 431.422 li
192.191 431.422 li
cp
@
266.109 444.5 mo
276.07 444.5 li
276.07 454.461 li
266.109 454.461 li
cp
@
340.031 455.781 mo
349.988 455.781 li
349.988 465.738 li
340.031 465.738 li
cp
@
413.828 462.738 mo
423.789 462.738 li
423.789 472.699 li
413.828 472.699 li
cp
@
487.75 467.301 mo
497.711 467.301 li
497.711 477.262 li
487.75 477.262 li
cp
@
561.551 470.539 mo
571.512 470.539 li
571.512 480.5 li
561.551 480.5 li
cp
@
635.469 472.82 mo
645.43 472.82 li
645.43 482.781 li
635.469 482.781 li
cp
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
49.68 405.961 mo
123.48 449.879 li
197.398 472.078 li
271.199 476.281 li
345.121 483.719 li
419.039 484.68 li
492.84 487.441 li
566.762 485.281 li
640.559 489 li
0 .990631 1 .000396735 cmyk
@
grestore
54.551 410.898 mo
44.469 400.82 li
44.469 410.898 mo
54.551 400.82 li
0 .990631 1 .000396735 cmyk
@
128.469 454.82 mo
118.391 444.738 li
118.391 454.82 mo
128.469 444.738 li
@
202.27 477.141 mo
192.191 467.059 li
192.191 477.141 mo
202.27 467.059 li
@
276.191 481.219 mo
266.109 471.141 li
266.109 481.219 mo
276.191 471.141 li
@
350.109 488.781 mo
340.031 478.699 li
340.031 488.781 mo
350.109 478.699 li
@
423.91 489.738 mo
413.828 479.66 li
413.828 489.738 mo
423.91 479.66 li
@
497.828 492.5 mo
487.75 482.422 li
487.75 492.5 mo
497.828 482.422 li
@
571.629 490.219 mo
561.551 480.141 li
561.551 490.219 mo
571.629 480.141 li
@
645.551 494.059 mo
635.469 483.98 li
635.469 494.059 mo
645.551 483.98 li
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
49.68 318.719 mo
123.48 406.68 li
197.398 450.84 li
271.199 465.602 li
345.121 472.922 li
419.039 477.359 li
492.84 480.359 li
566.762 482.398 li
640.559 484.078 li
@
grestore
44.469 313.578 mo
54.43 313.578 li
54.43 323.539 li
44.469 323.539 li
cp
@
118.391 401.66 mo
128.352 401.66 li
128.352 411.621 li
118.391 411.621 li
cp
@
192.191 445.699 mo
202.148 445.699 li
202.148 455.66 li
192.191 455.66 li
cp
@
266.109 460.461 mo
276.07 460.461 li
276.07 470.422 li
266.109 470.422 li
cp
@
340.031 467.898 mo
349.988 467.898 li
349.988 477.859 li
340.031 477.859 li
cp
@
413.828 472.219 mo
423.789 472.219 li
423.789 482.18 li
413.828 482.18 li
cp
@
487.75 475.34 mo
497.711 475.34 li
497.711 485.301 li
487.75 485.301 li
cp
@
561.551 477.379 mo
571.512 477.379 li
571.512 487.34 li
561.551 487.34 li
cp
@
635.469 478.941 mo
645.43 478.941 li
645.43 488.898 li
635.469 488.898 li
cp
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 252.602 mo
123.48 372.238 li
197.398 432.602 li
271.199 447.359 li
345.121 459 li
419.039 457.68 li
492.84 467.641 li
566.762 471.961 li
640.559 473.039 li
.62768 .285466 0 0 cmyk
@
grestore
54.551 257.66 mo
44.469 247.578 li
44.469 257.66 mo
54.551 247.578 li
.62768 .285466 0 0 cmyk
@
128.469 377.301 mo
118.391 367.219 li
118.391 377.301 mo
128.469 367.219 li
@
202.27 437.66 mo
192.191 427.578 li
192.191 437.66 mo
202.27 427.578 li
@
276.191 452.422 mo
266.109 442.34 li
266.109 452.422 mo
276.191 442.34 li
@
350.109 464.059 mo
340.031 453.98 li
340.031 464.059 mo
350.109 453.98 li
@
423.91 462.738 mo
413.828 452.66 li
413.828 462.738 mo
423.91 452.66 li
@
497.828 472.578 mo
487.75 462.5 li
487.75 472.578 mo
497.828 462.5 li
@
571.629 477.02 mo
561.551 466.941 li
561.551 477.02 mo
571.629 466.941 li
@
645.551 477.98 mo
635.469 467.898 li
635.469 477.98 mo
645.551 467.898 li
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 62.641 mo
123.48 281.52 li
197.398 377.762 li
271.199 413.398 li
345.121 434.16 li
419.039 446.641 li
492.84 454.68 li
566.762 460.559 li
640.559 464.879 li
@
grestore
44.469 57.621 mo
54.43 57.621 li
54.43 67.578 li
44.469 67.578 li
cp
@
118.391 276.379 mo
128.352 276.379 li
128.352 286.34 li
118.391 286.34 li
cp
@
192.191 372.738 mo
202.148 372.738 li
202.148 382.699 li
192.191 382.699 li
cp
@
266.109 408.262 mo
276.07 408.262 li
276.07 418.219 li
266.109 418.219 li
cp
@
340.031 429.02 mo
349.988 429.02 li
349.988 438.981 li
340.031 438.981 li
cp
@
413.828 441.621 mo
423.789 441.621 li
423.789 451.578 li
413.828 451.578 li
cp
@
487.75 449.66 mo
497.711 449.66 li
497.711 459.621 li
487.75 459.621 li
cp
@
561.551 455.422 mo
571.512 455.422 li
571.512 465.379 li
561.551 465.379 li
cp
@
635.469 459.738 mo
645.43 459.738 li
645.43 469.699 li
635.469 469.699 li
cp
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 307.68 mo
123.48 399.84 li
197.398 446.641 li
271.199 458.281 li
345.121 466.68 li
419.039 467.52 li
492.84 472.922 li
566.762 479.16 li
640.559 478.68 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
54.551 312.621 mo
44.469 302.539 li
44.469 312.621 mo
54.551 302.539 li
.0319219 .621851 .911223 .000427253 cmyk
@
128.469 404.898 mo
118.391 394.82 li
118.391 404.898 mo
128.469 394.82 li
@
202.27 451.578 mo
192.191 441.5 li
192.191 451.578 mo
202.27 441.5 li
@
276.191 463.34 mo
266.109 453.262 li
266.109 463.34 mo
276.191 453.262 li
@
350.109 471.621 mo
340.031 461.539 li
340.031 471.621 mo
350.109 461.539 li
@
423.91 472.461 mo
413.828 462.379 li
413.828 472.461 mo
423.91 462.379 li
@
497.828 477.859 mo
487.75 467.781 li
487.75 477.859 mo
497.828 467.781 li
@
571.629 484.102 mo
561.551 474.02 li
561.551 484.102 mo
571.629 474.02 li
@
645.551 483.738 mo
635.469 473.66 li
635.469 483.738 mo
645.551 473.66 li
@
gsave
49.559 27.48 mo
641.161 27.48 li
641.161 495.96 li
49.559 495.96 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
49.68 169.68 mo
123.48 332.398 li
197.398 413.398 li
271.199 440.762 li
345.121 454.199 li
419.039 462.602 li
492.84 467.762 li
566.762 471.84 li
640.559 474.602 li
@
grestore
44.469 164.66 mo
54.43 164.66 li
54.43 174.621 li
44.469 174.621 li
cp
@
118.391 327.379 mo
128.352 327.379 li
128.352 337.34 li
118.391 337.34 li
cp
@
192.191 408.379 mo
202.148 408.379 li
202.148 418.34 li
192.191 418.34 li
cp
@
266.109 435.621 mo
276.07 435.621 li
276.07 445.578 li
266.109 445.578 li
cp
@
340.031 449.059 mo
349.988 449.059 li
349.988 459.02 li
340.031 459.02 li
cp
@
413.828 457.461 mo
423.789 457.461 li
423.789 467.422 li
413.828 467.422 li
cp
@
487.75 462.621 mo
497.711 462.621 li
497.711 472.578 li
487.75 472.578 li
cp
@
561.551 466.699 mo
571.512 466.699 li
571.512 476.66 li
561.551 476.66 li
cp
@
635.469 469.461 mo
645.43 469.461 li
645.43 479.422 li
635.469 479.422 li
cp
@
32.41 487.242 mo
38.488 487.242 li
38.488 501.894 li
32.41 501.894 li
cp
0 0 0 0 cmyk
ef
38.086 494.934 mo
38.082 495.516 38.035 496.047 37.949 496.527 cv
37.855 497.012 37.703 497.426 37.492 497.77 cv
37.273 498.113 36.996 498.383 36.656 498.57 cv
36.309 498.758 35.887 498.848 35.387 498.852 cv
34.91 498.848 34.508 498.766 34.184 498.598 cv
33.855 498.43 33.594 498.18 33.395 497.848 cv
33.191 497.52 33.047 497.113 32.969 496.629 cv
32.883 496.148 32.844 495.594 32.844 494.969 cv
32.844 494.391 32.891 493.863 32.984 493.379 cv
33.078 492.902 33.23 492.488 33.441 492.137 cv
33.652 491.793 33.93 491.523 34.273 491.332 cv
34.617 491.145 35.039 491.051 35.539 491.047 cv
36.016 491.051 36.418 491.137 36.746 491.305 cv
37.074 491.477 37.336 491.727 37.535 492.055 cv
37.734 492.387 37.875 492.793 37.961 493.273 cv
38.039 493.758 38.082 494.309 38.086 494.934 cv
cp
37.055 495.004 mo
37.051 494.629 37.039 494.289 37.016 493.984 cv
36.988 493.684 36.945 493.418 36.895 493.187 cv
36.84 492.961 36.773 492.766 36.688 492.594 cv
36.602 492.43 36.5 492.293 36.387 492.184 cv
36.266 492.082 36.133 492.004 35.984 491.949 cv
35.836 491.902 35.668 491.875 35.48 491.875 cv
35.148 491.875 34.879 491.953 34.672 492.109 cv
34.461 492.266 34.297 492.48 34.18 492.754 cv
34.063 493.027 33.98 493.348 33.938 493.715 cv
33.895 494.082 33.875 494.477 33.875 494.898 cv
33.875 495.469 33.902 495.953 33.961 496.344 cv
34.02 496.742 34.113 497.062 34.238 497.312 cv
34.363 497.562 34.523 497.746 34.727 497.859 cv
34.922 497.973 35.164 498.027 35.445 498.027 cv
35.664 498.027 35.855 497.992 36.023 497.922 cv
36.188 497.852 36.328 497.754 36.449 497.621 cv
36.566 497.492 36.668 497.332 36.746 497.148 cv
36.824 496.969 36.887 496.766 36.934 496.539 cv
36.98 496.316 37.012 496.078 37.027 495.816 cv
37.043 495.559 37.051 495.285 37.055 495.004 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 440.469 mo
38.488 440.469 li
38.488 455.121 li
32.41 455.121 li
cp
0 0 0 0 cmyk
ef
37.863 451.57 mo
37.859 451.645 37.852 451.707 37.844 451.758 cv
37.828 451.809 37.813 451.852 37.797 451.879 cv
37.773 451.914 37.754 451.937 37.73 451.949 cv
37.707 451.965 37.68 451.969 37.652 451.969 cv
33.684 451.969 li
33.652 451.969 33.629 451.965 33.609 451.949 cv
33.582 451.937 33.559 451.914 33.539 451.879 cv
33.516 451.852 33.5 451.809 33.488 451.758 cv
33.477 451.707 33.469 451.645 33.473 451.57 cv
33.469 451.5 33.477 451.441 33.488 451.391 cv
33.5 451.34 33.516 451.297 33.535 451.262 cv
33.551 451.23 33.57 451.207 33.598 451.187 cv
33.621 451.172 33.648 451.16 33.684 451.16 cv
35.27 451.16 li
35.27 445.383 li
33.801 446.258 li
33.723 446.301 33.664 446.324 33.621 446.328 cv
33.574 446.34 33.539 446.332 33.512 446.301 cv
33.484 446.277 33.465 446.234 33.457 446.176 cv
33.445 446.117 33.441 446.043 33.445 445.949 cv
33.441 445.887 33.445 445.828 33.453 445.781 cv
33.457 445.734 33.465 445.695 33.477 445.664 cv
33.488 445.633 33.504 445.605 33.527 445.582 cv
33.547 445.559 33.574 445.535 33.613 445.512 cv
35.363 444.391 li
35.379 444.383 35.398 444.371 35.422 444.359 cv
35.445 444.355 35.473 444.348 35.508 444.336 cv
35.543 444.332 35.586 444.328 35.633 444.324 cv
35.68 444.324 35.738 444.324 35.809 444.32 cv
35.902 444.324 35.98 444.328 36.043 444.332 cv
36.105 444.344 36.152 444.352 36.188 444.363 cv
36.223 444.379 36.246 444.398 36.258 444.418 cv
36.27 444.441 36.277 444.465 36.277 444.484 cv
36.277 451.16 li
37.652 451.16 li
37.68 451.16 37.707 451.172 37.738 451.187 cv
37.762 451.207 37.785 451.23 37.809 451.262 cv
37.824 451.297 37.84 451.34 37.848 451.391 cv
37.855 451.441 37.859 451.5 37.863 451.57 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 393.699 mo
38.488 393.699 li
38.488 408.351 li
32.41 408.351 li
cp
0 0 0 0 cmyk
ef
37.836 404.738 mo
37.836 404.809 37.828 404.871 37.82 404.926 cv
37.805 404.98 37.793 405.027 37.777 405.062 cv
37.762 405.102 37.738 405.129 37.707 405.145 cv
37.676 405.164 37.645 405.172 37.613 405.172 cv
33.422 405.172 li
33.367 405.172 33.32 405.168 33.281 405.152 cv
33.238 405.145 33.203 405.121 33.176 405.086 cv
33.145 405.059 33.121 405.012 33.109 404.949 cv
33.094 404.891 33.09 404.82 33.09 404.734 cv
33.09 404.66 33.09 404.59 33.098 404.527 cv
33.102 404.469 33.117 404.418 33.137 404.371 cv
33.156 404.328 33.18 404.285 33.211 404.238 cv
33.238 404.199 33.277 404.148 33.332 404.094 cv
34.848 402.535 li
35.195 402.176 35.473 401.855 35.688 401.57 cv
35.898 401.285 36.063 401.023 36.18 400.789 cv
36.289 400.555 36.367 400.344 36.406 400.152 cv
36.441 399.961 36.457 399.781 36.461 399.609 cv
36.457 399.445 36.43 399.285 36.375 399.133 cv
36.316 398.984 36.234 398.852 36.129 398.738 cv
36.02 398.629 35.887 398.539 35.727 398.469 cv
35.563 398.402 35.375 398.371 35.172 398.367 cv
34.922 398.371 34.703 398.402 34.508 398.469 cv
34.313 398.539 34.141 398.613 33.992 398.687 cv
33.844 398.77 33.719 398.84 33.625 398.902 cv
33.523 398.969 33.453 399.004 33.406 399 cv
33.375 399.004 33.348 398.996 33.328 398.977 cv
33.305 398.965 33.285 398.937 33.273 398.902 cv
33.258 398.871 33.25 398.824 33.242 398.762 cv
33.234 398.703 33.23 398.633 33.23 398.551 cv
33.23 398.492 33.23 398.441 33.234 398.398 cv
33.238 398.359 33.246 398.324 33.258 398.289 cv
33.266 398.262 33.277 398.23 33.297 398.199 cv
33.309 398.172 33.34 398.141 33.391 398.098 cv
33.434 398.059 33.516 398 33.633 397.93 cv
33.746 397.859 33.891 397.793 34.066 397.723 cv
34.238 397.656 34.43 397.598 34.641 397.547 cv
34.848 397.504 35.066 397.48 35.297 397.477 cv
35.664 397.48 35.984 397.531 36.262 397.633 cv
36.535 397.738 36.766 397.879 36.945 398.059 cv
37.125 398.238 37.262 398.449 37.355 398.687 cv
37.445 398.926 37.488 399.18 37.492 399.445 cv
37.488 399.695 37.469 399.937 37.426 400.172 cv
37.379 400.414 37.285 400.672 37.152 400.949 cv
37.012 401.23 36.813 401.543 36.551 401.883 cv
36.289 402.227 35.941 402.617 35.508 403.062 cv
34.309 404.316 li
37.609 404.316 li
37.637 404.316 37.668 404.328 37.699 404.344 cv
37.727 404.363 37.75 404.387 37.773 404.422 cv
37.789 404.461 37.805 404.508 37.82 404.555 cv
37.828 404.609 37.836 404.668 37.836 404.738 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 346.922 mo
38.488 346.922 li
38.488 361.57 li
32.41 361.57 li
cp
0 0 0 0 cmyk
ef
37.777 356.223 mo
37.777 356.57 37.715 356.887 37.594 357.164 cv
37.473 357.445 37.301 357.684 37.074 357.883 cv
36.848 358.082 36.566 358.234 36.234 358.34 cv
35.902 358.445 35.527 358.496 35.109 358.5 cv
34.855 358.496 34.617 358.477 34.398 358.437 cv
34.176 358.398 33.98 358.352 33.813 358.297 cv
33.637 358.242 33.496 358.184 33.383 358.121 cv
33.266 358.059 33.191 358.016 33.168 357.988 cv
33.137 357.961 33.117 357.934 33.102 357.906 cv
33.086 357.879 33.07 357.844 33.059 357.805 cv
33.047 357.766 33.039 357.719 33.031 357.664 cv
33.023 357.609 33.02 357.539 33.023 357.453 cv
33.02 357.312 33.035 357.215 33.066 357.16 cv
33.094 357.105 33.133 357.078 33.188 357.078 cv
33.223 357.078 33.293 357.109 33.398 357.172 cv
33.504 357.234 33.641 357.305 33.809 357.375 cv
33.973 357.453 34.168 357.52 34.391 357.578 cv
34.613 357.645 34.859 357.676 35.137 357.672 cv
35.395 357.676 35.629 357.641 35.832 357.57 cv
36.031 357.504 36.199 357.41 36.336 357.289 cv
36.473 357.172 36.574 357.031 36.645 356.859 cv
36.711 356.695 36.746 356.512 36.746 356.316 cv
36.746 356.102 36.699 355.91 36.613 355.734 cv
36.523 355.566 36.398 355.418 36.234 355.289 cv
36.066 355.168 35.859 355.07 35.617 355.004 cv
35.367 354.941 35.09 354.91 34.785 354.906 cv
34.043 354.906 li
34.008 354.91 33.977 354.902 33.945 354.887 cv
33.914 354.871 33.887 354.848 33.867 354.816 cv
33.844 354.785 33.824 354.746 33.813 354.695 cv
33.797 354.645 33.793 354.578 33.793 354.492 cv
33.793 354.422 33.797 354.359 33.809 354.309 cv
33.82 354.262 33.836 354.223 33.859 354.191 cv
33.875 354.164 33.902 354.145 33.934 354.129 cv
33.961 354.121 33.992 354.113 34.027 354.109 cv
34.688 354.109 li
34.945 354.113 35.176 354.078 35.383 354.008 cv
35.586 353.941 35.762 353.848 35.902 353.719 cv
36.043 353.598 36.152 353.449 36.23 353.273 cv
36.309 353.102 36.348 352.906 36.348 352.687 cv
36.348 352.535 36.32 352.387 36.27 352.242 cv
36.219 352.102 36.145 351.977 36.043 351.871 cv
35.941 351.766 35.809 351.684 35.652 351.621 cv
35.488 351.566 35.309 351.535 35.105 351.531 cv
34.879 351.535 34.668 351.57 34.48 351.633 cv
34.285 351.703 34.117 351.773 33.973 351.852 cv
33.82 351.93 33.699 352.004 33.605 352.07 cv
33.508 352.141 33.438 352.176 33.398 352.172 cv
33.371 352.176 33.348 352.172 33.328 352.16 cv
33.305 352.152 33.285 352.133 33.273 352.102 cv
33.258 352.074 33.25 352.031 33.242 351.977 cv
33.234 351.926 33.23 351.855 33.234 351.77 cv
33.23 351.711 33.234 351.66 33.242 351.613 cv
33.246 351.57 33.254 351.531 33.266 351.496 cv
33.273 351.465 33.285 351.434 33.305 351.406 cv
33.316 351.383 33.344 351.352 33.383 351.312 cv
33.422 351.273 33.496 351.219 33.609 351.148 cv
33.723 351.078 33.863 351.012 34.031 350.941 cv
34.195 350.875 34.387 350.816 34.605 350.766 cv
34.82 350.723 35.055 350.699 35.305 350.695 cv
35.656 350.699 35.965 350.742 36.23 350.832 cv
36.496 350.926 36.715 351.055 36.895 351.215 cv
37.07 351.383 37.203 351.578 37.293 351.805 cv
37.379 352.031 37.426 352.285 37.426 352.562 cv
37.426 352.801 37.395 353.023 37.332 353.227 cv
37.27 353.434 37.176 353.613 37.055 353.77 cv
36.934 353.93 36.785 354.066 36.609 354.176 cv
36.434 354.293 36.23 354.367 36 354.406 cv
36 354.418 li
36.262 354.449 36.5 354.516 36.719 354.617 cv
36.934 354.719 37.121 354.848 37.281 355.004 cv
37.434 355.16 37.555 355.344 37.645 355.555 cv
37.73 355.766 37.777 355.988 37.777 356.223 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 300.148 mo
38.488 300.148 li
38.488 314.8 li
32.41 314.8 li
cp
0 0 0 0 cmyk
ef
38.156 309.465 mo
38.152 309.598 38.133 309.699 38.098 309.77 cv
38.055 309.844 38 309.883 37.938 309.879 cv
37.078 309.879 li
37.078 311.473 li
37.074 311.508 37.066 311.535 37.055 311.555 cv
37.035 311.578 37.008 311.594 36.969 311.609 cv
36.93 311.625 36.875 311.637 36.813 311.645 cv
36.746 311.652 36.664 311.656 36.566 311.656 cv
36.465 311.656 36.387 311.652 36.324 311.645 cv
36.262 311.637 36.211 311.625 36.172 311.609 cv
36.133 311.594 36.105 311.578 36.09 311.555 cv
36.074 311.535 36.066 311.508 36.07 311.473 cv
36.07 309.879 li
32.969 309.879 li
32.922 309.883 32.887 309.875 32.855 309.863 cv
32.824 309.855 32.793 309.836 32.77 309.801 cv
32.738 309.773 32.723 309.727 32.715 309.664 cv
32.707 309.605 32.703 309.531 32.703 309.434 cv
32.703 309.363 32.703 309.297 32.707 309.238 cv
32.711 309.18 32.719 309.125 32.73 309.078 cv
32.742 309.031 32.758 308.984 32.777 308.937 cv
32.797 308.891 32.82 308.844 32.848 308.793 cv
35.551 304.184 li
35.57 304.156 35.598 304.129 35.637 304.102 cv
35.672 304.082 35.723 304.062 35.785 304.043 cv
35.844 304.031 35.914 304.02 36.004 304.012 cv
36.09 304.008 36.195 304.004 36.316 304.004 cv
36.445 304.004 36.559 304.012 36.656 304.02 cv
36.754 304.035 36.832 304.047 36.895 304.059 cv
36.949 304.078 36.996 304.098 37.031 304.121 cv
37.059 304.145 37.074 304.176 37.078 304.207 cv
37.078 309.051 li
37.938 309.051 li
38 309.055 38.055 309.09 38.094 309.152 cv
38.133 309.223 38.152 309.324 38.156 309.465 cv
cp
36.07 304.887 mo
36.063 304.887 li
33.625 309.051 li
36.07 309.051 li
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 253.371 mo
38.488 253.371 li
38.488 268.019 li
32.41 268.019 li
cp
0 0 0 0 cmyk
ef
37.801 262.383 mo
37.801 262.789 37.73 263.152 37.594 263.469 cv
37.457 263.785 37.266 264.051 37.016 264.27 cv
36.766 264.488 36.465 264.652 36.121 264.762 cv
35.77 264.871 35.387 264.926 34.969 264.93 cv
34.73 264.926 34.508 264.91 34.301 264.879 cv
34.086 264.848 33.898 264.809 33.738 264.762 cv
33.57 264.715 33.438 264.668 33.336 264.617 cv
33.23 264.574 33.16 264.535 33.133 264.504 cv
33.102 264.477 33.082 264.453 33.07 264.426 cv
33.059 264.406 33.047 264.379 33.039 264.344 cv
33.023 264.312 33.02 264.27 33.02 264.219 cv
33.016 264.168 33.012 264.105 33.016 264.035 cv
33.012 263.973 33.016 263.914 33.023 263.859 cv
33.027 263.805 33.039 263.762 33.055 263.73 cv
33.07 263.699 33.086 263.676 33.109 263.656 cv
33.125 263.645 33.152 263.637 33.184 263.633 cv
33.223 263.637 33.281 263.66 33.363 263.707 cv
33.445 263.754 33.555 263.809 33.695 263.863 cv
33.832 263.922 34.004 263.973 34.211 264.023 cv
34.414 264.078 34.66 264.105 34.941 264.102 cv
35.203 264.105 35.441 264.074 35.664 264.008 cv
35.879 263.949 36.066 263.852 36.227 263.715 cv
36.383 263.586 36.508 263.418 36.598 263.215 cv
36.688 263.012 36.734 262.766 36.734 262.477 cv
36.734 262.234 36.695 262.023 36.621 261.836 cv
36.543 261.652 36.426 261.496 36.27 261.371 cv
36.109 261.25 35.91 261.16 35.668 261.098 cv
35.426 261.043 35.137 261.012 34.801 261.008 cv
34.563 261.012 34.355 261.023 34.188 261.043 cv
34.012 261.07 33.852 261.082 33.703 261.078 cv
33.59 261.082 33.512 261.055 33.469 261 cv
33.418 260.949 33.395 260.852 33.398 260.707 cv
33.398 257.617 li
33.395 257.492 33.426 257.395 33.488 257.332 cv
33.551 257.27 33.637 257.238 33.75 257.238 cv
37.109 257.238 li
37.141 257.238 37.168 257.25 37.199 257.266 cv
37.223 257.285 37.25 257.309 37.273 257.344 cv
37.293 257.383 37.305 257.43 37.316 257.48 cv
37.324 257.539 37.332 257.602 37.332 257.672 cv
37.332 257.812 37.313 257.922 37.273 258 cv
37.234 258.078 37.18 258.117 37.117 258.117 cv
34.406 258.117 li
34.406 260.242 li
34.535 260.227 34.672 260.215 34.813 260.211 cv
34.949 260.207 35.105 260.203 35.289 260.203 cv
35.703 260.203 36.07 260.258 36.383 260.359 cv
36.695 260.469 36.953 260.613 37.164 260.801 cv
37.371 260.988 37.531 261.219 37.641 261.488 cv
37.746 261.758 37.801 262.055 37.801 262.383 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 206.602 mo
38.488 206.602 li
38.488 221.25 li
32.41 221.25 li
cp
0 0 0 0 cmyk
ef
38.031 215.586 mo
38.027 215.918 37.977 216.238 37.879 216.551 cv
37.773 216.863 37.617 217.137 37.41 217.371 cv
37.195 217.605 36.93 217.797 36.605 217.937 cv
36.277 218.078 35.895 218.145 35.457 218.148 cv
35.141 218.145 34.859 218.109 34.621 218.031 cv
34.375 217.957 34.164 217.844 33.988 217.699 cv
33.805 217.559 33.656 217.383 33.539 217.168 cv
33.418 216.961 33.32 216.719 33.25 216.445 cv
33.172 216.176 33.121 215.883 33.094 215.559 cv
33.059 215.242 33.043 214.898 33.047 214.531 cv
33.043 214.207 33.063 213.879 33.102 213.547 cv
33.137 213.215 33.199 212.895 33.289 212.586 cv
33.375 212.277 33.496 211.988 33.652 211.715 cv
33.809 211.445 34 211.207 34.234 211.004 cv
34.465 210.805 34.746 210.645 35.07 210.527 cv
35.391 210.41 35.766 210.352 36.203 210.352 cv
36.344 210.352 36.492 210.363 36.641 210.379 cv
36.789 210.402 36.926 210.426 37.051 210.449 cv
37.176 210.48 37.281 210.512 37.367 210.547 cv
37.453 210.582 37.508 210.609 37.535 210.633 cv
37.563 210.656 37.582 210.68 37.598 210.703 cv
37.605 210.727 37.617 210.754 37.629 210.785 cv
37.633 210.816 37.641 210.852 37.648 210.883 cv
37.652 210.922 37.652 210.965 37.656 211.02 cv
37.652 211.09 37.652 211.152 37.652 211.203 cv
37.648 211.254 37.641 211.293 37.629 211.324 cv
37.613 211.355 37.594 211.379 37.574 211.395 cv
37.551 211.41 37.523 211.418 37.492 211.418 cv
37.445 211.418 37.387 211.406 37.313 211.379 cv
37.238 211.352 37.148 211.32 37.043 211.285 cv
36.938 211.254 36.809 211.223 36.66 211.195 cv
36.508 211.172 36.336 211.16 36.137 211.156 cv
35.773 211.16 35.461 211.234 35.199 211.379 cv
34.934 211.531 34.719 211.73 34.555 211.977 cv
34.391 212.23 34.266 212.52 34.188 212.848 cv
34.105 213.176 34.063 213.52 34.051 213.879 cv
34.152 213.82 34.266 213.762 34.395 213.703 cv
34.52 213.648 34.656 213.598 34.809 213.547 cv
34.957 213.504 35.117 213.465 35.285 213.434 cv
35.453 213.402 35.633 213.387 35.828 213.387 cv
36.234 213.387 36.582 213.445 36.863 213.555 cv
37.145 213.668 37.371 213.82 37.543 214.016 cv
37.715 214.215 37.84 214.449 37.918 214.715 cv
37.992 214.988 38.027 215.277 38.031 215.586 cv
cp
37.008 215.68 mo
37.004 215.453 36.98 215.246 36.941 215.059 cv
36.895 214.875 36.82 214.719 36.715 214.59 cv
36.609 214.461 36.469 214.359 36.293 214.289 cv
36.117 214.219 35.902 214.184 35.645 214.184 cv
35.5 214.184 35.355 214.199 35.211 214.223 cv
35.063 214.25 34.922 214.285 34.789 214.328 cv
34.656 214.375 34.527 214.426 34.402 214.488 cv
34.277 214.551 34.164 214.617 34.07 214.68 cv
34.066 215.187 34.098 215.609 34.164 215.949 cv
34.227 216.289 34.32 216.562 34.445 216.766 cv
34.566 216.973 34.723 217.117 34.906 217.203 cv
35.086 217.293 35.301 217.336 35.551 217.336 cv
35.801 217.336 36.016 217.289 36.199 217.195 cv
36.383 217.102 36.535 216.977 36.656 216.816 cv
36.777 216.66 36.867 216.484 36.922 216.285 cv
36.977 216.09 37.004 215.887 37.008 215.68 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 159.828 mo
38.488 159.828 li
38.488 174.48 li
32.41 174.48 li
cp
0 0 0 0 cmyk
ef
37.945 164.113 mo
37.941 164.184 37.938 164.25 37.938 164.305 cv
37.93 164.363 37.922 164.418 37.914 164.469 cv
37.898 164.523 37.887 164.574 37.871 164.621 cv
37.855 164.672 37.836 164.723 37.813 164.777 cv
35.082 171.066 li
35.063 171.117 35.035 171.156 35.008 171.184 cv
34.977 171.215 34.941 171.238 34.895 171.254 cv
34.848 171.27 34.789 171.277 34.723 171.285 cv
34.648 171.293 34.563 171.297 34.469 171.297 cv
34.328 171.297 34.227 171.289 34.156 171.277 cv
34.082 171.266 34.027 171.25 33.996 171.223 cv
33.961 171.199 33.945 171.168 33.949 171.129 cv
33.953 171.094 33.969 171.051 33.992 170.996 cv
36.863 164.566 li
33.227 164.566 li
33.148 164.57 33.094 164.531 33.055 164.449 cv
33.016 164.375 32.996 164.266 33 164.121 cv
32.996 164.047 33 163.98 33.016 163.926 cv
33.023 163.871 33.039 163.828 33.059 163.789 cv
33.078 163.754 33.102 163.727 33.129 163.707 cv
33.156 163.691 33.188 163.68 33.227 163.68 cv
37.641 163.68 li
37.695 163.68 37.742 163.687 37.785 163.699 cv
37.824 163.711 37.855 163.734 37.879 163.77 cv
37.898 163.805 37.918 163.848 37.93 163.902 cv
37.938 163.957 37.941 164.027 37.945 164.113 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 113.051 mo
38.488 113.051 li
38.488 127.699 li
32.41 127.699 li
cp
0 0 0 0 cmyk
ef
38.012 122.543 mo
38.012 122.871 37.953 123.164 37.836 123.418 cv
37.719 123.676 37.547 123.891 37.328 124.066 cv
37.105 124.246 36.836 124.379 36.512 124.465 cv
36.184 124.551 35.813 124.594 35.398 124.598 cv
35.008 124.594 34.656 124.555 34.348 124.477 cv
34.039 124.398 33.777 124.277 33.563 124.113 cv
33.348 123.953 33.184 123.758 33.07 123.52 cv
32.957 123.289 32.902 123.02 32.902 122.719 cv
32.902 122.484 32.941 122.266 33.02 122.062 cv
33.098 121.863 33.207 121.68 33.355 121.512 cv
33.5 121.348 33.684 121.191 33.898 121.043 cv
34.109 120.895 34.352 120.754 34.625 120.621 cv
34.391 120.504 34.184 120.379 34.004 120.238 cv
33.824 120.105 33.672 119.957 33.547 119.797 cv
33.422 119.641 33.324 119.473 33.262 119.289 cv
33.191 119.113 33.16 118.918 33.164 118.707 cv
33.16 118.445 33.207 118.195 33.309 117.961 cv
33.402 117.727 33.547 117.523 33.742 117.352 cv
33.93 117.18 34.176 117.047 34.48 116.945 cv
34.777 116.848 35.129 116.797 35.527 116.793 cv
35.91 116.797 36.238 116.844 36.52 116.934 cv
36.793 117.027 37.023 117.152 37.211 117.309 cv
37.391 117.469 37.527 117.652 37.613 117.867 cv
37.699 118.086 37.742 118.316 37.742 118.559 cv
37.742 118.758 37.707 118.949 37.645 119.133 cv
37.574 119.32 37.48 119.496 37.359 119.656 cv
37.23 119.824 37.078 119.977 36.898 120.117 cv
36.719 120.258 36.512 120.391 36.277 120.516 cv
36.555 120.656 36.801 120.797 37.02 120.937 cv
37.234 121.082 37.414 121.238 37.563 121.402 cv
37.703 121.57 37.816 121.746 37.895 121.93 cv
37.973 122.117 38.012 122.32 38.012 122.543 cv
cp
36.746 118.652 mo
36.746 118.488 36.715 118.34 36.66 118.207 cv
36.602 118.074 36.52 117.961 36.414 117.867 cv
36.301 117.773 36.164 117.703 36.004 117.656 cv
35.84 117.609 35.656 117.586 35.453 117.582 cv
35.027 117.586 34.707 117.68 34.492 117.867 cv
34.273 118.059 34.168 118.32 34.168 118.652 cv
34.168 118.805 34.191 118.949 34.246 119.078 cv
34.297 119.211 34.379 119.332 34.492 119.449 cv
34.602 119.566 34.742 119.684 34.914 119.793 cv
35.082 119.906 35.285 120.02 35.523 120.141 cv
35.914 119.937 36.219 119.715 36.43 119.469 cv
36.641 119.223 36.746 118.949 36.746 118.652 cv
cp
36.992 122.648 mo
36.992 122.469 36.957 122.309 36.891 122.16 cv
36.824 122.02 36.723 121.883 36.59 121.75 cv
36.453 121.625 36.285 121.5 36.086 121.379 cv
35.883 121.262 35.652 121.137 35.387 121.008 cv
35.137 121.133 34.918 121.254 34.738 121.371 cv
34.551 121.492 34.398 121.617 34.281 121.746 cv
34.156 121.879 34.066 122.016 34.012 122.156 cv
33.949 122.297 33.922 122.453 33.922 122.625 cv
33.922 123.004 34.051 123.297 34.313 123.504 cv
34.57 123.715 34.957 123.82 35.477 123.816 cv
35.973 123.82 36.352 123.715 36.609 123.504 cv
36.863 123.293 36.992 123.008 36.992 122.648 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.41 66.281 mo
38.488 66.281 li
38.488 80.929 li
32.41 80.929 li
cp
0 0 0 0 cmyk
ef
37.895 73.602 mo
37.895 73.93 37.875 74.262 37.836 74.598 cv
37.797 74.934 37.73 75.258 37.637 75.57 cv
37.543 75.883 37.414 76.176 37.258 76.441 cv
37.098 76.715 36.898 76.949 36.66 77.152 cv
36.418 77.355 36.133 77.516 35.805 77.629 cv
35.473 77.742 35.09 77.797 34.656 77.801 cv
34.484 77.797 34.32 77.785 34.164 77.77 cv
34.004 77.746 33.863 77.723 33.738 77.691 cv
33.609 77.66 33.504 77.629 33.418 77.594 cv
33.332 77.559 33.27 77.523 33.23 77.488 cv
33.191 77.453 33.16 77.406 33.145 77.344 cv
33.121 77.289 33.113 77.207 33.117 77.098 cv
33.113 77.02 33.117 76.949 33.125 76.895 cv
33.133 76.844 33.141 76.805 33.152 76.777 cv
33.164 76.754 33.18 76.738 33.203 76.723 cv
33.219 76.715 33.246 76.707 33.281 76.707 cv
33.324 76.707 33.387 76.723 33.465 76.75 cv
33.543 76.781 33.641 76.812 33.758 76.848 cv
33.875 76.887 34.016 76.922 34.18 76.945 cv
34.34 76.977 34.52 76.988 34.719 76.988 cv
35.098 76.988 35.422 76.918 35.695 76.77 cv
35.965 76.629 36.188 76.43 36.359 76.18 cv
36.531 75.934 36.66 75.648 36.746 75.324 cv
36.832 75.004 36.879 74.664 36.887 74.301 cv
36.68 74.422 36.43 74.527 36.145 74.621 cv
35.852 74.715 35.52 74.762 35.148 74.762 cv
34.723 74.762 34.367 74.707 34.082 74.59 cv
33.793 74.48 33.563 74.32 33.391 74.117 cv
33.215 73.918 33.09 73.684 33.016 73.406 cv
32.938 73.137 32.902 72.836 32.902 72.512 cv
32.902 72.176 32.949 71.859 33.047 71.555 cv
33.145 71.254 33.297 70.984 33.504 70.754 cv
33.711 70.527 33.977 70.344 34.297 70.203 cv
34.617 70.066 35 70 35.445 69.996 cv
35.762 70 36.039 70.039 36.285 70.117 cv
36.527 70.199 36.742 70.316 36.922 70.465 cv
37.102 70.621 37.254 70.801 37.379 71.012 cv
37.504 71.223 37.602 71.465 37.68 71.734 cv
37.754 72.004 37.809 72.297 37.844 72.609 cv
37.875 72.93 37.895 73.258 37.895 73.602 cv
cp
36.867 73.488 mo
36.863 72.992 36.832 72.57 36.77 72.227 cv
36.703 71.887 36.605 71.609 36.477 71.398 cv
36.344 71.187 36.184 71.035 36 70.941 cv
35.809 70.848 35.594 70.801 35.352 70.801 cv
35.094 70.801 34.875 70.848 34.699 70.937 cv
34.516 71.031 34.367 71.156 34.258 71.309 cv
34.141 71.465 34.059 71.637 34.004 71.832 cv
33.949 72.027 33.922 72.23 33.922 72.434 cv
33.922 72.668 33.945 72.879 33.996 73.07 cv
34.043 73.262 34.121 73.422 34.234 73.555 cv
34.34 73.687 34.484 73.793 34.66 73.863 cv
34.832 73.941 35.047 73.977 35.313 73.973 cv
35.602 73.977 35.887 73.934 36.16 73.84 cv
36.434 73.754 36.668 73.637 36.867 73.488 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.328 19.5 mo
38.488 19.5 li
38.488 34.148 li
26.328 34.148 li
cp
0 0 0 0 cmyk
ef
31.781 30.512 mo
31.777 30.586 31.773 30.648 31.766 30.699 cv
31.754 30.754 31.738 30.797 31.719 30.824 cv
31.695 30.859 31.672 30.883 31.648 30.891 cv
31.625 30.906 31.598 30.91 31.57 30.91 cv
27.609 30.91 li
27.582 30.91 27.559 30.906 27.535 30.891 cv
27.512 30.883 27.488 30.859 27.469 30.824 cv
27.445 30.797 27.43 30.754 27.418 30.699 cv
27.402 30.648 27.395 30.586 27.398 30.512 cv
27.395 30.441 27.402 30.383 27.418 30.332 cv
27.43 30.281 27.441 30.238 27.461 30.203 cv
27.477 30.172 27.5 30.148 27.523 30.129 cv
27.547 30.113 27.574 30.102 27.609 30.102 cv
29.195 30.102 li
29.195 24.336 li
27.727 25.207 li
27.652 25.254 27.594 25.277 27.551 25.281 cv
27.504 25.293 27.469 25.285 27.441 25.254 cv
27.41 25.23 27.391 25.187 27.383 25.129 cv
27.375 25.07 27.371 24.996 27.371 24.902 cv
27.371 24.84 27.371 24.781 27.379 24.734 cv
27.383 24.687 27.395 24.648 27.406 24.617 cv
27.414 24.586 27.43 24.559 27.453 24.535 cv
27.477 24.512 27.504 24.488 27.539 24.465 cv
29.289 23.348 li
29.301 23.336 29.32 23.324 29.348 23.316 cv
29.367 23.309 29.398 23.301 29.434 23.293 cv
29.465 23.285 29.504 23.281 29.555 23.281 cv
29.598 23.281 29.656 23.281 29.734 23.277 cv
29.824 23.281 29.902 23.285 29.969 23.289 cv
30.027 23.301 30.078 23.312 30.113 23.32 cv
30.145 23.336 30.168 23.352 30.184 23.371 cv
30.195 23.395 30.199 23.418 30.203 23.441 cv
30.203 30.102 li
31.57 30.102 li
31.598 30.102 31.629 30.113 31.66 30.129 cv
31.688 30.148 31.707 30.172 31.727 30.203 cv
31.742 30.238 31.758 30.281 31.766 30.332 cv
31.773 30.383 31.777 30.441 31.781 30.512 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.133 27.102 mo
38.129 27.684 38.082 28.215 37.996 28.695 cv
37.902 29.18 37.75 29.594 37.539 29.937 cv
37.32 30.281 37.043 30.551 36.703 30.738 cv
36.355 30.926 35.934 31.016 35.434 31.02 cv
34.957 31.016 34.555 30.934 34.23 30.766 cv
33.902 30.598 33.641 30.348 33.441 30.016 cv
33.238 29.687 33.094 29.281 33.016 28.797 cv
32.93 28.316 32.891 27.762 32.891 27.137 cv
32.891 26.559 32.938 26.031 33.031 25.547 cv
33.125 25.07 33.277 24.656 33.488 24.305 cv
33.699 23.961 33.977 23.691 34.32 23.5 cv
34.664 23.312 35.086 23.219 35.586 23.215 cv
36.063 23.219 36.465 23.305 36.793 23.473 cv
37.121 23.645 37.383 23.895 37.582 24.223 cv
37.781 24.555 37.922 24.961 38.008 25.441 cv
38.086 25.926 38.129 26.477 38.133 27.102 cv
cp
37.102 27.172 mo
37.098 26.797 37.086 26.457 37.063 26.152 cv
37.035 25.852 36.992 25.586 36.941 25.355 cv
36.887 25.129 36.82 24.934 36.734 24.762 cv
36.648 24.598 36.547 24.461 36.434 24.352 cv
36.313 24.25 36.18 24.172 36.031 24.117 cv
35.883 24.07 35.715 24.043 35.527 24.043 cv
35.195 24.043 34.926 24.121 34.719 24.277 cv
34.508 24.434 34.344 24.648 34.227 24.922 cv
34.109 25.195 34.027 25.516 33.984 25.883 cv
33.941 26.25 33.922 26.645 33.922 27.066 cv
33.922 27.637 33.949 28.121 34.008 28.512 cv
34.066 28.91 34.16 29.23 34.285 29.48 cv
34.41 29.73 34.57 29.914 34.773 30.027 cv
34.969 30.141 35.211 30.195 35.492 30.195 cv
35.711 30.195 35.902 30.16 36.07 30.09 cv
36.234 30.02 36.375 29.922 36.496 29.789 cv
36.613 29.66 36.715 29.5 36.793 29.316 cv
36.871 29.137 36.934 28.934 36.98 28.707 cv
37.027 28.484 37.059 28.246 37.074 27.984 cv
37.09 27.727 37.098 27.453 37.102 27.172 cv
cp
f
52.039 513.945 mo
52.035 514.02 52.031 514.082 52.023 514.133 cv
52.012 514.187 51.996 514.23 51.977 514.258 cv
51.953 514.293 51.93 514.316 51.906 514.324 cv
51.883 514.34 51.855 514.344 51.828 514.344 cv
47.867 514.344 li
47.84 514.344 47.816 514.34 47.793 514.324 cv
47.77 514.316 47.746 514.293 47.727 514.258 cv
47.703 514.23 47.688 514.187 47.676 514.133 cv
47.66 514.082 47.652 514.02 47.656 513.945 cv
47.652 513.875 47.66 513.816 47.676 513.766 cv
47.688 513.715 47.699 513.672 47.719 513.637 cv
47.734 513.605 47.758 513.582 47.781 513.562 cv
47.805 513.547 47.832 513.535 47.867 513.535 cv
49.453 513.535 li
49.453 507.77 li
47.984 508.641 li
47.91 508.687 47.852 508.711 47.809 508.715 cv
47.762 508.727 47.727 508.719 47.699 508.687 cv
47.668 508.664 47.648 508.621 47.641 508.562 cv
47.633 508.504 47.629 508.43 47.629 508.336 cv
47.629 508.273 47.629 508.215 47.637 508.168 cv
47.641 508.121 47.652 508.082 47.664 508.051 cv
47.672 508.02 47.688 507.992 47.711 507.969 cv
47.734 507.945 47.762 507.922 47.797 507.898 cv
49.547 506.781 li
49.559 506.77 49.578 506.758 49.605 506.75 cv
49.625 506.742 49.656 506.734 49.691 506.727 cv
49.723 506.719 49.762 506.715 49.813 506.715 cv
49.855 506.715 49.914 506.715 49.992 506.711 cv
50.082 506.715 50.16 506.719 50.227 506.723 cv
50.285 506.734 50.336 506.746 50.371 506.754 cv
50.402 506.77 50.426 506.785 50.441 506.805 cv
50.453 506.828 50.457 506.852 50.461 506.875 cv
50.461 513.535 li
51.828 513.535 li
51.855 513.535 51.887 513.547 51.918 513.562 cv
51.945 513.582 51.965 513.605 51.984 513.637 cv
52 513.672 52.016 513.715 52.023 513.766 cv
52.031 513.816 52.035 513.875 52.039 513.945 cv
cp
f
125.895 513.91 mo
125.895 513.98 125.887 514.043 125.879 514.098 cv
125.863 514.152 125.852 514.199 125.836 514.234 cv
125.82 514.273 125.797 514.301 125.766 514.316 cv
125.734 514.336 125.703 514.344 125.672 514.344 cv
121.48 514.344 li
121.426 514.344 121.379 514.34 121.34 514.324 cv
121.297 514.316 121.262 514.293 121.234 514.258 cv
121.203 514.23 121.18 514.184 121.168 514.121 cv
121.152 514.062 121.148 513.992 121.148 513.906 cv
121.148 513.832 121.148 513.762 121.156 513.699 cv
121.16 513.641 121.176 513.59 121.195 513.543 cv
121.215 513.5 121.238 513.457 121.27 513.41 cv
121.297 513.371 121.336 513.32 121.391 513.266 cv
122.906 511.707 li
123.254 511.348 123.531 511.027 123.746 510.742 cv
123.957 510.457 124.121 510.195 124.238 509.961 cv
124.348 509.727 124.426 509.516 124.465 509.324 cv
124.5 509.133 124.516 508.953 124.52 508.781 cv
124.516 508.617 124.488 508.457 124.434 508.305 cv
124.375 508.156 124.293 508.023 124.188 507.91 cv
124.078 507.801 123.945 507.711 123.785 507.641 cv
123.621 507.574 123.434 507.543 123.23 507.539 cv
122.98 507.543 122.762 507.574 122.566 507.641 cv
122.371 507.711 122.199 507.785 122.051 507.859 cv
121.902 507.941 121.777 508.012 121.684 508.074 cv
121.582 508.141 121.512 508.176 121.465 508.172 cv
121.434 508.176 121.406 508.168 121.387 508.148 cv
121.363 508.137 121.344 508.109 121.332 508.074 cv
121.316 508.043 121.309 507.996 121.301 507.934 cv
121.293 507.875 121.289 507.805 121.289 507.723 cv
121.289 507.664 121.289 507.613 121.293 507.57 cv
121.297 507.531 121.305 507.496 121.316 507.461 cv
121.324 507.434 121.336 507.402 121.355 507.371 cv
121.367 507.344 121.398 507.312 121.449 507.27 cv
121.492 507.23 121.574 507.172 121.691 507.102 cv
121.805 507.031 121.949 506.965 122.125 506.895 cv
122.297 506.828 122.488 506.77 122.699 506.719 cv
122.906 506.676 123.125 506.652 123.355 506.648 cv
123.723 506.652 124.043 506.703 124.32 506.805 cv
124.594 506.91 124.824 507.051 125.004 507.23 cv
125.184 507.41 125.32 507.621 125.414 507.859 cv
125.504 508.098 125.547 508.352 125.551 508.617 cv
125.547 508.867 125.527 509.109 125.484 509.344 cv
125.438 509.586 125.344 509.844 125.211 510.121 cv
125.07 510.402 124.871 510.715 124.609 511.055 cv
124.348 511.398 124 511.789 123.566 512.234 cv
122.367 513.488 li
125.668 513.488 li
125.695 513.488 125.727 513.5 125.758 513.516 cv
125.785 513.535 125.809 513.559 125.832 513.594 cv
125.848 513.633 125.863 513.68 125.879 513.727 cv
125.887 513.781 125.895 513.84 125.895 513.91 cv
cp
f
200.086 512.187 mo
200.082 512.32 200.063 512.422 200.027 512.492 cv
199.984 512.566 199.93 512.605 199.867 512.602 cv
199.008 512.602 li
199.008 514.195 li
199.004 514.23 198.996 514.258 198.984 514.277 cv
198.965 514.301 198.938 514.316 198.898 514.332 cv
198.859 514.348 198.805 514.359 198.742 514.367 cv
198.676 514.375 198.594 514.379 198.496 514.379 cv
198.395 514.379 198.316 514.375 198.254 514.367 cv
198.191 514.359 198.141 514.348 198.102 514.332 cv
198.063 514.316 198.035 514.301 198.02 514.277 cv
198.004 514.258 197.996 514.23 198 514.195 cv
198 512.602 li
194.898 512.602 li
194.852 512.605 194.816 512.598 194.785 512.586 cv
194.754 512.578 194.723 512.559 194.699 512.523 cv
194.668 512.496 194.652 512.449 194.645 512.387 cv
194.637 512.328 194.633 512.254 194.633 512.156 cv
194.633 512.086 194.633 512.02 194.637 511.961 cv
194.641 511.902 194.648 511.848 194.66 511.801 cv
194.672 511.754 194.688 511.707 194.707 511.66 cv
194.727 511.613 194.75 511.566 194.777 511.516 cv
197.48 506.906 li
197.5 506.879 197.527 506.852 197.566 506.824 cv
197.602 506.805 197.652 506.785 197.715 506.766 cv
197.773 506.754 197.844 506.742 197.934 506.734 cv
198.02 506.73 198.125 506.727 198.246 506.727 cv
198.375 506.727 198.488 506.734 198.586 506.742 cv
198.684 506.758 198.762 506.77 198.824 506.781 cv
198.879 506.801 198.926 506.82 198.961 506.844 cv
198.988 506.867 199.004 506.898 199.008 506.93 cv
199.008 511.773 li
199.867 511.773 li
199.93 511.777 199.984 511.812 200.023 511.875 cv
200.063 511.945 200.082 512.047 200.086 512.187 cv
cp
198 507.609 mo
197.992 507.609 li
195.555 511.773 li
198 511.773 li
cp
f
273.828 511.891 mo
273.824 512.223 273.773 512.543 273.676 512.855 cv
273.57 513.168 273.414 513.441 273.207 513.676 cv
272.992 513.91 272.727 514.102 272.402 514.242 cv
272.074 514.383 271.691 514.449 271.254 514.453 cv
270.938 514.449 270.656 514.414 270.418 514.336 cv
270.172 514.262 269.961 514.148 269.785 514.004 cv
269.602 513.863 269.453 513.687 269.336 513.473 cv
269.215 513.266 269.117 513.023 269.047 512.75 cv
268.969 512.48 268.918 512.187 268.891 511.863 cv
268.855 511.547 268.84 511.203 268.844 510.836 cv
268.84 510.512 268.859 510.184 268.898 509.852 cv
268.934 509.52 268.996 509.199 269.086 508.891 cv
269.172 508.582 269.293 508.293 269.449 508.02 cv
269.605 507.75 269.797 507.512 270.031 507.309 cv
270.262 507.109 270.543 506.949 270.867 506.832 cv
271.188 506.715 271.563 506.656 272 506.656 cv
272.141 506.656 272.289 506.668 272.438 506.684 cv
272.586 506.707 272.723 506.73 272.848 506.754 cv
272.973 506.785 273.078 506.816 273.164 506.852 cv
273.25 506.887 273.305 506.914 273.332 506.937 cv
273.359 506.961 273.379 506.984 273.395 507.008 cv
273.402 507.031 273.414 507.059 273.426 507.09 cv
273.43 507.121 273.438 507.156 273.445 507.187 cv
273.449 507.227 273.449 507.27 273.453 507.324 cv
273.449 507.395 273.449 507.457 273.449 507.508 cv
273.445 507.559 273.438 507.598 273.426 507.629 cv
273.41 507.66 273.391 507.684 273.371 507.699 cv
273.348 507.715 273.32 507.723 273.289 507.723 cv
273.242 507.723 273.184 507.711 273.109 507.684 cv
273.035 507.656 272.945 507.625 272.84 507.59 cv
272.734 507.559 272.605 507.527 272.457 507.5 cv
272.305 507.477 272.133 507.465 271.934 507.461 cv
271.57 507.465 271.258 507.539 270.996 507.684 cv
270.73 507.836 270.516 508.035 270.352 508.281 cv
270.188 508.535 270.063 508.824 269.984 509.152 cv
269.902 509.48 269.859 509.824 269.848 510.184 cv
269.949 510.125 270.063 510.066 270.191 510.008 cv
270.316 509.953 270.453 509.902 270.605 509.852 cv
270.754 509.809 270.914 509.77 271.082 509.738 cv
271.25 509.707 271.43 509.691 271.625 509.691 cv
272.031 509.691 272.379 509.75 272.66 509.859 cv
272.941 509.973 273.168 510.125 273.34 510.32 cv
273.512 510.52 273.637 510.754 273.715 511.02 cv
273.789 511.293 273.824 511.582 273.828 511.891 cv
cp
272.805 511.984 mo
272.801 511.758 272.777 511.551 272.738 511.363 cv
272.691 511.18 272.617 511.023 272.512 510.895 cv
272.406 510.766 272.266 510.664 272.09 510.594 cv
271.914 510.523 271.699 510.488 271.441 510.488 cv
271.297 510.488 271.152 510.504 271.008 510.527 cv
270.859 510.555 270.719 510.59 270.586 510.633 cv
270.453 510.68 270.324 510.73 270.199 510.793 cv
270.074 510.855 269.961 510.922 269.867 510.984 cv
269.863 511.492 269.895 511.914 269.961 512.254 cv
270.023 512.594 270.117 512.867 270.242 513.07 cv
270.363 513.277 270.52 513.422 270.703 513.508 cv
270.883 513.598 271.098 513.641 271.348 513.641 cv
271.598 513.641 271.813 513.594 271.996 513.5 cv
272.18 513.406 272.332 513.281 272.453 513.121 cv
272.574 512.965 272.664 512.789 272.719 512.59 cv
272.773 512.395 272.801 512.191 272.805 511.984 cv
cp
f
347.691 512.398 mo
347.691 512.727 347.633 513.02 347.516 513.273 cv
347.398 513.531 347.227 513.746 347.008 513.922 cv
346.785 514.102 346.516 514.234 346.191 514.32 cv
345.863 514.406 345.492 514.449 345.078 514.453 cv
344.688 514.449 344.336 514.41 344.027 514.332 cv
343.719 514.254 343.457 514.133 343.242 513.969 cv
343.027 513.809 342.863 513.613 342.75 513.375 cv
342.637 513.145 342.582 512.875 342.582 512.574 cv
342.582 512.34 342.621 512.121 342.699 511.918 cv
342.777 511.719 342.887 511.535 343.035 511.367 cv
343.18 511.203 343.363 511.047 343.578 510.898 cv
343.789 510.75 344.031 510.609 344.305 510.477 cv
344.07 510.359 343.863 510.234 343.684 510.094 cv
343.504 509.961 343.352 509.812 343.227 509.652 cv
343.102 509.496 343.004 509.328 342.941 509.145 cv
342.871 508.969 342.84 508.773 342.844 508.562 cv
342.84 508.301 342.887 508.051 342.988 507.816 cv
343.082 507.582 343.227 507.379 343.422 507.207 cv
343.609 507.035 343.855 506.902 344.16 506.801 cv
344.457 506.703 344.809 506.652 345.207 506.648 cv
345.59 506.652 345.918 506.699 346.199 506.789 cv
346.473 506.883 346.703 507.008 346.891 507.164 cv
347.07 507.324 347.207 507.508 347.293 507.723 cv
347.379 507.941 347.422 508.172 347.422 508.414 cv
347.422 508.613 347.387 508.805 347.324 508.988 cv
347.254 509.176 347.16 509.352 347.039 509.512 cv
346.91 509.68 346.758 509.832 346.578 509.973 cv
346.398 510.113 346.191 510.246 345.957 510.371 cv
346.234 510.512 346.48 510.652 346.699 510.793 cv
346.914 510.937 347.094 511.094 347.242 511.258 cv
347.383 511.426 347.496 511.602 347.574 511.785 cv
347.652 511.973 347.691 512.176 347.691 512.398 cv
cp
346.426 508.508 mo
346.426 508.344 346.395 508.195 346.34 508.062 cv
346.281 507.93 346.199 507.816 346.094 507.723 cv
345.98 507.629 345.844 507.559 345.684 507.512 cv
345.52 507.465 345.336 507.441 345.133 507.437 cv
344.707 507.441 344.387 507.535 344.172 507.723 cv
343.953 507.914 343.848 508.176 343.848 508.508 cv
343.848 508.66 343.871 508.805 343.926 508.934 cv
343.977 509.066 344.059 509.187 344.172 509.305 cv
344.281 509.422 344.422 509.539 344.594 509.648 cv
344.762 509.762 344.965 509.875 345.203 509.996 cv
345.594 509.793 345.898 509.57 346.109 509.324 cv
346.32 509.078 346.426 508.805 346.426 508.508 cv
cp
346.672 512.504 mo
346.672 512.324 346.637 512.164 346.57 512.016 cv
346.504 511.875 346.402 511.738 346.27 511.605 cv
346.133 511.48 345.965 511.355 345.766 511.234 cv
345.563 511.117 345.332 510.992 345.066 510.863 cv
344.816 510.988 344.598 511.109 344.418 511.227 cv
344.23 511.348 344.078 511.473 343.961 511.602 cv
343.836 511.734 343.746 511.871 343.691 512.012 cv
343.629 512.152 343.602 512.309 343.602 512.48 cv
343.602 512.859 343.73 513.152 343.992 513.359 cv
344.25 513.57 344.637 513.676 345.156 513.672 cv
345.652 513.676 346.031 513.57 346.289 513.359 cv
346.543 513.148 346.672 512.863 346.672 512.504 cv
cp
f
418.352 513.945 mo
418.348 514.02 418.344 514.082 418.336 514.133 cv
418.324 514.187 418.309 514.23 418.289 514.258 cv
418.266 514.293 418.242 514.316 418.219 514.324 cv
418.195 514.34 418.168 514.344 418.141 514.344 cv
414.18 514.344 li
414.152 514.344 414.129 514.34 414.105 514.324 cv
414.082 514.316 414.059 514.293 414.039 514.258 cv
414.016 514.23 414 514.187 413.988 514.133 cv
413.973 514.082 413.965 514.02 413.969 513.945 cv
413.965 513.875 413.973 513.816 413.988 513.766 cv
414 513.715 414.012 513.672 414.031 513.637 cv
414.047 513.605 414.07 513.582 414.094 513.562 cv
414.117 513.547 414.145 513.535 414.18 513.535 cv
415.766 513.535 li
415.766 507.77 li
414.297 508.641 li
414.223 508.687 414.164 508.711 414.121 508.715 cv
414.074 508.727 414.039 508.719 414.012 508.687 cv
413.98 508.664 413.961 508.621 413.953 508.562 cv
413.945 508.504 413.941 508.43 413.941 508.336 cv
413.941 508.273 413.941 508.215 413.949 508.168 cv
413.953 508.121 413.965 508.082 413.977 508.051 cv
413.984 508.02 414 507.992 414.023 507.969 cv
414.047 507.945 414.074 507.922 414.109 507.898 cv
415.859 506.781 li
415.871 506.77 415.891 506.758 415.918 506.75 cv
415.938 506.742 415.969 506.734 416.004 506.727 cv
416.035 506.719 416.074 506.715 416.125 506.715 cv
416.168 506.715 416.227 506.715 416.305 506.711 cv
416.395 506.715 416.473 506.719 416.539 506.723 cv
416.598 506.734 416.648 506.746 416.684 506.754 cv
416.715 506.77 416.738 506.785 416.754 506.805 cv
416.766 506.828 416.77 506.852 416.773 506.875 cv
416.773 513.535 li
418.141 513.535 li
418.168 513.535 418.199 513.547 418.23 513.562 cv
418.258 513.582 418.277 513.605 418.297 513.637 cv
418.313 513.672 418.328 513.715 418.336 513.766 cv
418.344 513.816 418.348 513.875 418.352 513.945 cv
cp
f
424.703 510.535 mo
424.699 511.117 424.652 511.648 424.566 512.129 cv
424.473 512.613 424.32 513.027 424.109 513.371 cv
423.891 513.715 423.613 513.984 423.273 514.172 cv
422.926 514.359 422.504 514.449 422.004 514.453 cv
421.527 514.449 421.125 514.367 420.801 514.199 cv
420.473 514.031 420.211 513.781 420.012 513.449 cv
419.809 513.121 419.664 512.715 419.586 512.23 cv
419.5 511.75 419.461 511.195 419.461 510.57 cv
419.461 509.992 419.508 509.465 419.602 508.98 cv
419.695 508.504 419.848 508.09 420.059 507.738 cv
420.27 507.395 420.547 507.125 420.891 506.934 cv
421.234 506.746 421.656 506.652 422.156 506.648 cv
422.633 506.652 423.035 506.738 423.363 506.906 cv
423.691 507.078 423.953 507.328 424.152 507.656 cv
424.352 507.988 424.492 508.395 424.578 508.875 cv
424.656 509.359 424.699 509.91 424.703 510.535 cv
cp
423.672 510.605 mo
423.668 510.23 423.656 509.891 423.633 509.586 cv
423.605 509.285 423.563 509.02 423.512 508.789 cv
423.457 508.562 423.391 508.367 423.305 508.195 cv
423.219 508.031 423.117 507.895 423.004 507.785 cv
422.883 507.684 422.75 507.605 422.602 507.551 cv
422.453 507.504 422.285 507.477 422.098 507.477 cv
421.766 507.477 421.496 507.555 421.289 507.711 cv
421.078 507.867 420.914 508.082 420.797 508.355 cv
420.68 508.629 420.598 508.949 420.555 509.316 cv
420.512 509.684 420.492 510.078 420.492 510.5 cv
420.492 511.07 420.52 511.555 420.578 511.945 cv
420.637 512.344 420.73 512.664 420.855 512.914 cv
420.98 513.164 421.141 513.348 421.344 513.461 cv
421.539 513.574 421.781 513.629 422.063 513.629 cv
422.281 513.629 422.473 513.594 422.641 513.523 cv
422.805 513.453 422.945 513.355 423.066 513.223 cv
423.184 513.094 423.285 512.934 423.363 512.75 cv
423.441 512.57 423.504 512.367 423.551 512.141 cv
423.598 511.918 423.629 511.68 423.645 511.418 cv
423.66 511.16 423.668 510.887 423.672 510.605 cv
cp
f
492.219 513.945 mo
492.215 514.02 492.211 514.082 492.203 514.133 cv
492.191 514.187 492.176 514.23 492.156 514.258 cv
492.133 514.293 492.109 514.316 492.086 514.324 cv
492.063 514.34 492.035 514.344 492.008 514.344 cv
488.047 514.344 li
488.02 514.344 487.996 514.34 487.973 514.324 cv
487.949 514.316 487.926 514.293 487.906 514.258 cv
487.883 514.23 487.867 514.187 487.855 514.133 cv
487.84 514.082 487.832 514.02 487.836 513.945 cv
487.832 513.875 487.84 513.816 487.855 513.766 cv
487.867 513.715 487.879 513.672 487.898 513.637 cv
487.914 513.605 487.938 513.582 487.961 513.562 cv
487.984 513.547 488.012 513.535 488.047 513.535 cv
489.633 513.535 li
489.633 507.77 li
488.164 508.641 li
488.09 508.687 488.031 508.711 487.988 508.715 cv
487.941 508.727 487.906 508.719 487.879 508.687 cv
487.848 508.664 487.828 508.621 487.82 508.562 cv
487.813 508.504 487.809 508.43 487.809 508.336 cv
487.809 508.273 487.809 508.215 487.816 508.168 cv
487.82 508.121 487.832 508.082 487.844 508.051 cv
487.852 508.02 487.867 507.992 487.891 507.969 cv
487.914 507.945 487.941 507.922 487.977 507.898 cv
489.727 506.781 li
489.738 506.77 489.758 506.758 489.785 506.75 cv
489.805 506.742 489.836 506.734 489.871 506.727 cv
489.902 506.719 489.941 506.715 489.992 506.715 cv
490.035 506.715 490.094 506.715 490.172 506.711 cv
490.262 506.715 490.34 506.719 490.406 506.723 cv
490.465 506.734 490.516 506.746 490.551 506.754 cv
490.582 506.77 490.605 506.785 490.621 506.805 cv
490.633 506.828 490.637 506.852 490.641 506.875 cv
490.641 513.535 li
492.008 513.535 li
492.035 513.535 492.066 513.547 492.098 513.562 cv
492.125 513.582 492.145 513.605 492.164 513.637 cv
492.18 513.672 492.195 513.715 492.203 513.766 cv
492.211 513.816 492.215 513.875 492.219 513.945 cv
cp
f
498.324 513.91 mo
498.324 513.98 498.316 514.043 498.309 514.098 cv
498.293 514.152 498.281 514.199 498.266 514.234 cv
498.25 514.273 498.227 514.301 498.195 514.316 cv
498.164 514.336 498.133 514.344 498.102 514.344 cv
493.91 514.344 li
493.855 514.344 493.809 514.34 493.77 514.324 cv
493.727 514.316 493.691 514.293 493.664 514.258 cv
493.633 514.23 493.609 514.184 493.598 514.121 cv
493.582 514.062 493.578 513.992 493.578 513.906 cv
493.578 513.832 493.578 513.762 493.586 513.699 cv
493.59 513.641 493.605 513.59 493.625 513.543 cv
493.645 513.5 493.668 513.457 493.699 513.41 cv
493.727 513.371 493.766 513.32 493.82 513.266 cv
495.336 511.707 li
495.684 511.348 495.961 511.027 496.176 510.742 cv
496.387 510.457 496.551 510.195 496.668 509.961 cv
496.777 509.727 496.855 509.516 496.895 509.324 cv
496.93 509.133 496.945 508.953 496.949 508.781 cv
496.945 508.617 496.918 508.457 496.863 508.305 cv
496.805 508.156 496.723 508.023 496.617 507.91 cv
496.508 507.801 496.375 507.711 496.215 507.641 cv
496.051 507.574 495.863 507.543 495.66 507.539 cv
495.41 507.543 495.191 507.574 494.996 507.641 cv
494.801 507.711 494.629 507.785 494.48 507.859 cv
494.332 507.941 494.207 508.012 494.113 508.074 cv
494.012 508.141 493.941 508.176 493.895 508.172 cv
493.863 508.176 493.836 508.168 493.816 508.148 cv
493.793 508.137 493.773 508.109 493.762 508.074 cv
493.746 508.043 493.738 507.996 493.73 507.934 cv
493.723 507.875 493.719 507.805 493.719 507.723 cv
493.719 507.664 493.719 507.613 493.723 507.57 cv
493.727 507.531 493.734 507.496 493.746 507.461 cv
493.754 507.434 493.766 507.402 493.785 507.371 cv
493.797 507.344 493.828 507.312 493.879 507.27 cv
493.922 507.23 494.004 507.172 494.121 507.102 cv
494.234 507.031 494.379 506.965 494.555 506.895 cv
494.727 506.828 494.918 506.77 495.129 506.719 cv
495.336 506.676 495.555 506.652 495.785 506.648 cv
496.152 506.652 496.473 506.703 496.75 506.805 cv
497.023 506.91 497.254 507.051 497.434 507.23 cv
497.613 507.41 497.75 507.621 497.844 507.859 cv
497.934 508.098 497.977 508.352 497.98 508.617 cv
497.977 508.867 497.957 509.109 497.914 509.344 cv
497.867 509.586 497.773 509.844 497.641 510.121 cv
497.5 510.402 497.301 510.715 497.039 511.055 cv
496.777 511.398 496.43 511.789 495.996 512.234 cv
494.797 513.488 li
498.098 513.488 li
498.125 513.488 498.156 513.5 498.188 513.516 cv
498.215 513.535 498.238 513.559 498.262 513.594 cv
498.277 513.633 498.293 513.68 498.309 513.727 cv
498.316 513.781 498.324 513.84 498.324 513.91 cv
cp
f
566.09 513.945 mo
566.086 514.02 566.082 514.082 566.074 514.133 cv
566.063 514.187 566.047 514.23 566.027 514.258 cv
566.004 514.293 565.98 514.316 565.957 514.324 cv
565.934 514.34 565.906 514.344 565.879 514.344 cv
561.918 514.344 li
561.891 514.344 561.867 514.34 561.844 514.324 cv
561.82 514.316 561.797 514.293 561.777 514.258 cv
561.754 514.23 561.738 514.187 561.727 514.133 cv
561.711 514.082 561.703 514.02 561.707 513.945 cv
561.703 513.875 561.711 513.816 561.727 513.766 cv
561.738 513.715 561.75 513.672 561.77 513.637 cv
561.785 513.605 561.809 513.582 561.832 513.562 cv
561.855 513.547 561.883 513.535 561.918 513.535 cv
563.504 513.535 li
563.504 507.77 li
562.035 508.641 li
561.961 508.687 561.902 508.711 561.859 508.715 cv
561.813 508.727 561.777 508.719 561.75 508.687 cv
561.719 508.664 561.699 508.621 561.691 508.562 cv
561.684 508.504 561.68 508.43 561.68 508.336 cv
561.68 508.273 561.68 508.215 561.688 508.168 cv
561.691 508.121 561.703 508.082 561.715 508.051 cv
561.723 508.02 561.738 507.992 561.762 507.969 cv
561.785 507.945 561.813 507.922 561.848 507.898 cv
563.598 506.781 li
563.609 506.77 563.629 506.758 563.656 506.75 cv
563.676 506.742 563.707 506.734 563.742 506.727 cv
563.773 506.719 563.813 506.715 563.863 506.715 cv
563.906 506.715 563.965 506.715 564.043 506.711 cv
564.133 506.715 564.211 506.719 564.277 506.723 cv
564.336 506.734 564.387 506.746 564.422 506.754 cv
564.453 506.77 564.477 506.785 564.492 506.805 cv
564.504 506.828 564.508 506.852 564.512 506.875 cv
564.512 513.535 li
565.879 513.535 li
565.906 513.535 565.938 513.547 565.969 513.562 cv
565.996 513.582 566.016 513.605 566.035 513.637 cv
566.051 513.672 566.066 513.715 566.074 513.766 cv
566.082 513.816 566.086 513.875 566.09 513.945 cv
cp
f
572.516 512.187 mo
572.512 512.32 572.492 512.422 572.457 512.492 cv
572.414 512.566 572.359 512.605 572.297 512.602 cv
571.438 512.602 li
571.438 514.195 li
571.434 514.23 571.426 514.258 571.414 514.277 cv
571.395 514.301 571.367 514.316 571.328 514.332 cv
571.289 514.348 571.234 514.359 571.172 514.367 cv
571.105 514.375 571.023 514.379 570.926 514.379 cv
570.824 514.379 570.746 514.375 570.684 514.367 cv
570.621 514.359 570.57 514.348 570.531 514.332 cv
570.492 514.316 570.465 514.301 570.449 514.277 cv
570.434 514.258 570.426 514.23 570.43 514.195 cv
570.43 512.602 li
567.328 512.602 li
567.281 512.605 567.246 512.598 567.215 512.586 cv
567.184 512.578 567.152 512.559 567.129 512.523 cv
567.098 512.496 567.082 512.449 567.074 512.387 cv
567.066 512.328 567.063 512.254 567.063 512.156 cv
567.063 512.086 567.063 512.02 567.066 511.961 cv
567.07 511.902 567.078 511.848 567.09 511.801 cv
567.102 511.754 567.117 511.707 567.137 511.66 cv
567.156 511.613 567.18 511.566 567.207 511.516 cv
569.91 506.906 li
569.93 506.879 569.957 506.852 569.996 506.824 cv
570.031 506.805 570.082 506.785 570.145 506.766 cv
570.203 506.754 570.273 506.742 570.363 506.734 cv
570.449 506.73 570.555 506.727 570.676 506.727 cv
570.805 506.727 570.918 506.734 571.016 506.742 cv
571.113 506.758 571.191 506.77 571.254 506.781 cv
571.309 506.801 571.355 506.82 571.391 506.844 cv
571.418 506.867 571.434 506.898 571.438 506.93 cv
571.438 511.773 li
572.297 511.773 li
572.359 511.777 572.414 511.812 572.453 511.875 cv
572.492 511.945 572.512 512.047 572.516 512.187 cv
cp
570.43 507.609 mo
570.422 507.609 li
567.984 511.773 li
570.43 511.773 li
cp
f
639.969 513.945 mo
639.965 514.02 639.961 514.082 639.953 514.133 cv
639.941 514.187 639.926 514.23 639.906 514.258 cv
639.883 514.293 639.859 514.316 639.836 514.324 cv
639.813 514.34 639.785 514.344 639.758 514.344 cv
635.797 514.344 li
635.77 514.344 635.746 514.34 635.723 514.324 cv
635.699 514.316 635.676 514.293 635.656 514.258 cv
635.633 514.23 635.617 514.187 635.605 514.133 cv
635.59 514.082 635.582 514.02 635.586 513.945 cv
635.582 513.875 635.59 513.816 635.605 513.766 cv
635.617 513.715 635.629 513.672 635.648 513.637 cv
635.664 513.605 635.688 513.582 635.711 513.562 cv
635.734 513.547 635.762 513.535 635.797 513.535 cv
637.383 513.535 li
637.383 507.77 li
635.914 508.641 li
635.84 508.687 635.781 508.711 635.738 508.715 cv
635.691 508.727 635.656 508.719 635.629 508.687 cv
635.598 508.664 635.578 508.621 635.57 508.562 cv
635.563 508.504 635.559 508.43 635.559 508.336 cv
635.559 508.273 635.559 508.215 635.566 508.168 cv
635.57 508.121 635.582 508.082 635.594 508.051 cv
635.602 508.02 635.617 507.992 635.641 507.969 cv
635.664 507.945 635.691 507.922 635.727 507.898 cv
637.477 506.781 li
637.488 506.77 637.508 506.758 637.535 506.75 cv
637.555 506.742 637.586 506.734 637.621 506.727 cv
637.652 506.719 637.691 506.715 637.742 506.715 cv
637.785 506.715 637.844 506.715 637.922 506.711 cv
638.012 506.715 638.09 506.719 638.156 506.723 cv
638.215 506.734 638.266 506.746 638.301 506.754 cv
638.332 506.77 638.355 506.785 638.371 506.805 cv
638.383 506.828 638.387 506.852 638.391 506.875 cv
638.391 513.535 li
639.758 513.535 li
639.785 513.535 639.816 513.547 639.848 513.562 cv
639.875 513.582 639.895 513.605 639.914 513.637 cv
639.93 513.672 639.945 513.715 639.953 513.766 cv
639.961 513.816 639.965 513.875 639.969 513.945 cv
cp
f
646.27 511.891 mo
646.266 512.223 646.215 512.543 646.117 512.855 cv
646.012 513.168 645.855 513.441 645.648 513.676 cv
645.434 513.91 645.168 514.102 644.844 514.242 cv
644.516 514.383 644.133 514.449 643.695 514.453 cv
643.379 514.449 643.098 514.414 642.859 514.336 cv
642.613 514.262 642.402 514.148 642.227 514.004 cv
642.043 513.863 641.895 513.687 641.777 513.473 cv
641.656 513.266 641.559 513.023 641.488 512.75 cv
641.41 512.48 641.359 512.187 641.332 511.863 cv
641.297 511.547 641.281 511.203 641.285 510.836 cv
641.281 510.512 641.301 510.184 641.34 509.852 cv
641.375 509.52 641.438 509.199 641.527 508.891 cv
641.613 508.582 641.734 508.293 641.891 508.02 cv
642.047 507.75 642.238 507.512 642.473 507.309 cv
642.703 507.109 642.984 506.949 643.309 506.832 cv
643.629 506.715 644.004 506.656 644.441 506.656 cv
644.582 506.656 644.73 506.668 644.879 506.684 cv
645.027 506.707 645.164 506.73 645.289 506.754 cv
645.414 506.785 645.52 506.816 645.605 506.852 cv
645.691 506.887 645.746 506.914 645.773 506.937 cv
645.801 506.961 645.82 506.984 645.836 507.008 cv
645.844 507.031 645.855 507.059 645.867 507.09 cv
645.871 507.121 645.879 507.156 645.887 507.187 cv
645.891 507.227 645.891 507.27 645.895 507.324 cv
645.891 507.395 645.891 507.457 645.891 507.508 cv
645.887 507.559 645.879 507.598 645.867 507.629 cv
645.852 507.66 645.832 507.684 645.813 507.699 cv
645.789 507.715 645.762 507.723 645.73 507.723 cv
645.684 507.723 645.625 507.711 645.551 507.684 cv
645.477 507.656 645.387 507.625 645.281 507.59 cv
645.176 507.559 645.047 507.527 644.898 507.5 cv
644.746 507.477 644.574 507.465 644.375 507.461 cv
644.012 507.465 643.699 507.539 643.438 507.684 cv
643.172 507.836 642.957 508.035 642.793 508.281 cv
642.629 508.535 642.504 508.824 642.426 509.152 cv
642.344 509.48 642.301 509.824 642.289 510.184 cv
642.391 510.125 642.504 510.066 642.633 510.008 cv
642.758 509.953 642.895 509.902 643.047 509.852 cv
643.195 509.809 643.355 509.77 643.523 509.738 cv
643.691 509.707 643.871 509.691 644.066 509.691 cv
644.473 509.691 644.82 509.75 645.102 509.859 cv
645.383 509.973 645.609 510.125 645.781 510.32 cv
645.953 510.52 646.078 510.754 646.156 511.02 cv
646.23 511.293 646.266 511.582 646.27 511.891 cv
cp
645.246 511.984 mo
645.242 511.758 645.219 511.551 645.18 511.363 cv
645.133 511.18 645.059 511.023 644.953 510.895 cv
644.848 510.766 644.707 510.664 644.531 510.594 cv
644.355 510.523 644.141 510.488 643.883 510.488 cv
643.738 510.488 643.594 510.504 643.449 510.527 cv
643.301 510.555 643.16 510.59 643.027 510.633 cv
642.895 510.68 642.766 510.73 642.641 510.793 cv
642.516 510.855 642.402 510.922 642.309 510.984 cv
642.305 511.492 642.336 511.914 642.402 512.254 cv
642.465 512.594 642.559 512.867 642.684 513.07 cv
642.805 513.277 642.961 513.422 643.145 513.508 cv
643.324 513.598 643.539 513.641 643.789 513.641 cv
644.039 513.641 644.254 513.594 644.438 513.5 cv
644.621 513.406 644.773 513.281 644.895 513.121 cv
645.016 512.965 645.105 512.789 645.16 512.59 cv
645.215 512.395 645.242 512.191 645.246 511.984 cv
cp
f
7.633 288.602 mo
7.734 288.605 7.82 288.609 7.891 288.617 cv
7.965 288.629 8.023 288.645 8.066 288.668 cv
8.113 288.691 8.145 288.723 8.164 288.754 cv
8.188 288.793 8.199 288.828 8.195 288.867 cv
8.195 291.703 li
16.938 291.703 li
16.98 291.703 17.016 291.715 17.047 291.734 cv
17.078 291.758 17.105 291.793 17.121 291.844 cv
17.141 291.898 17.152 291.969 17.168 292.051 cv
17.18 292.141 17.188 292.246 17.188 292.371 cv
17.188 292.496 17.18 292.605 17.168 292.691 cv
17.152 292.785 17.141 292.855 17.121 292.902 cv
17.105 292.957 17.078 292.992 17.047 293.012 cv
17.016 293.035 16.98 293.047 16.938 293.043 cv
8.195 293.043 li
8.195 295.879 li
8.199 295.926 8.188 295.961 8.164 295.992 cv
8.145 296.027 8.113 296.055 8.066 296.074 cv
8.023 296.098 7.965 296.117 7.891 296.125 cv
7.82 296.141 7.734 296.145 7.633 296.145 cv
7.535 296.145 7.449 296.141 7.371 296.125 cv
7.301 296.117 7.238 296.098 7.188 296.074 cv
7.145 296.055 7.109 296.027 7.086 295.992 cv
7.066 295.961 7.059 295.926 7.055 295.879 cv
7.055 288.867 li
7.059 288.828 7.066 288.793 7.086 288.754 cv
7.109 288.723 7.145 288.691 7.188 288.668 cv
7.238 288.645 7.301 288.629 7.371 288.617 cv
7.449 288.609 7.535 288.605 7.633 288.602 cv
cp
f
16.945 286.012 mo
16.992 286.016 17.027 286.027 17.051 286.043 cv
17.082 286.066 17.105 286.098 17.125 286.145 cv
17.145 286.191 17.156 286.258 17.172 286.336 cv
17.18 286.422 17.188 286.527 17.188 286.656 cv
17.188 286.785 17.18 286.891 17.172 286.969 cv
17.156 287.055 17.145 287.121 17.125 287.168 cv
17.105 287.223 17.082 287.254 17.051 287.27 cv
17.027 287.289 16.992 287.301 16.945 287.297 cv
9.934 287.297 li
9.898 287.301 9.867 287.289 9.832 287.27 cv
9.805 287.254 9.777 287.223 9.754 287.168 cv
9.734 287.121 9.719 287.055 9.707 286.969 cv
9.699 286.891 9.695 286.785 9.691 286.656 cv
9.695 286.527 9.699 286.422 9.707 286.336 cv
9.719 286.258 9.734 286.191 9.754 286.145 cv
9.777 286.098 9.805 286.066 9.832 286.043 cv
9.867 286.027 9.898 286.016 9.934 286.012 cv
cp
7.563 285.863 mo
7.867 285.863 8.074 285.922 8.18 286.035 cv
8.293 286.148 8.348 286.359 8.344 286.664 cv
8.348 286.969 8.293 287.176 8.184 287.285 cv
8.078 287.402 7.875 287.457 7.578 287.453 cv
7.277 287.457 7.074 287.398 6.965 287.281 cv
6.859 287.168 6.805 286.957 6.801 286.648 cv
6.805 286.348 6.859 286.145 6.961 286.031 cv
7.07 285.922 7.27 285.863 7.563 285.863 cv
cp
f
16.945 273.156 mo
16.992 273.16 17.027 273.168 17.051 273.187 cv
17.082 273.211 17.105 273.246 17.125 273.289 cv
17.145 273.34 17.156 273.406 17.172 273.484 cv
17.18 273.57 17.188 273.672 17.188 273.797 cv
17.188 273.93 17.18 274.039 17.172 274.117 cv
17.156 274.203 17.145 274.27 17.125 274.316 cv
17.105 274.371 17.082 274.406 17.051 274.422 cv
17.027 274.445 16.992 274.453 16.945 274.453 cv
12.684 274.453 li
12.391 274.453 12.121 274.48 11.875 274.531 cv
11.633 274.586 11.422 274.668 11.242 274.781 cv
11.066 274.895 10.93 275.039 10.836 275.215 cv
10.742 275.395 10.695 275.605 10.695 275.84 cv
10.695 276.137 10.813 276.434 11.039 276.73 cv
11.273 277.035 11.605 277.363 12.043 277.719 cv
16.945 277.719 li
16.992 277.723 17.027 277.734 17.051 277.75 cv
17.082 277.773 17.105 277.805 17.125 277.852 cv
17.145 277.902 17.156 277.969 17.172 278.051 cv
17.18 278.137 17.188 278.242 17.188 278.363 cv
17.188 278.484 17.18 278.586 17.172 278.672 cv
17.156 278.758 17.145 278.828 17.125 278.875 cv
17.105 278.93 17.082 278.961 17.051 278.977 cv
17.027 278.996 16.992 279.008 16.945 279.004 cv
12.684 279.004 li
12.391 279.008 12.121 279.035 11.875 279.09 cv
11.633 279.148 11.422 279.234 11.242 279.348 cv
11.066 279.461 10.93 279.605 10.836 279.777 cv
10.742 279.957 10.695 280.164 10.695 280.398 cv
10.695 280.699 10.813 280.996 11.039 281.297 cv
11.273 281.598 11.605 281.926 12.043 282.277 cv
16.945 282.277 li
16.992 282.281 17.027 282.293 17.051 282.309 cv
17.082 282.332 17.105 282.363 17.125 282.41 cv
17.145 282.457 17.156 282.523 17.172 282.602 cv
17.18 282.687 17.188 282.793 17.188 282.922 cv
17.188 283.051 17.18 283.156 17.172 283.234 cv
17.156 283.32 17.145 283.387 17.125 283.434 cv
17.105 283.488 17.082 283.52 17.051 283.535 cv
17.027 283.555 16.992 283.566 16.945 283.562 cv
9.934 283.562 li
9.895 283.566 9.859 283.559 9.828 283.539 cv
9.801 283.527 9.777 283.496 9.75 283.445 cv
9.73 283.402 9.715 283.34 9.703 283.266 cv
9.699 283.195 9.695 283.102 9.691 282.977 cv
9.695 282.867 9.699 282.77 9.703 282.691 cv
9.715 282.617 9.73 282.559 9.75 282.516 cv
9.777 282.477 9.801 282.449 9.828 282.43 cv
9.859 282.414 9.895 282.406 9.934 282.402 cv
10.859 282.402 li
10.418 282.012 10.098 281.629 9.891 281.254 cv
9.688 280.887 9.582 280.508 9.582 280.125 cv
9.582 279.836 9.617 279.578 9.684 279.344 cv
9.754 279.117 9.848 278.91 9.969 278.73 cv
10.09 278.555 10.234 278.406 10.402 278.277 cv
10.574 278.156 10.766 278.051 10.969 277.965 cv
10.719 277.734 10.504 277.512 10.324 277.301 cv
10.152 277.09 10.008 276.887 9.895 276.691 cv
9.789 276.496 9.711 276.309 9.656 276.125 cv
9.609 275.941 9.582 275.754 9.582 275.566 cv
9.582 275.113 9.664 274.734 9.82 274.43 cv
9.984 274.125 10.195 273.879 10.457 273.684 cv
10.723 273.496 11.031 273.359 11.387 273.277 cv
11.742 273.199 12.117 273.16 12.512 273.156 cv
cp
f
13.137 264.824 mo
13.34 264.828 13.48 264.879 13.566 264.977 cv
13.652 265.082 13.695 265.199 13.695 265.324 cv
13.695 269.941 li
14.086 269.945 14.438 269.906 14.75 269.824 cv
15.063 269.75 15.332 269.617 15.551 269.434 cv
15.777 269.254 15.949 269.02 16.066 268.723 cv
16.191 268.434 16.25 268.074 16.246 267.648 cv
16.25 267.316 16.223 267.02 16.164 266.758 cv
16.113 266.496 16.051 266.27 15.98 266.078 cv
15.914 265.891 15.855 265.734 15.797 265.609 cv
15.746 265.488 15.719 265.395 15.715 265.332 cv
15.719 265.297 15.727 265.266 15.742 265.234 cv
15.762 265.207 15.789 265.184 15.824 265.164 cv
15.863 265.152 15.914 265.141 15.977 265.129 cv
16.043 265.125 16.121 265.121 16.215 265.117 cv
16.285 265.121 16.344 265.125 16.391 265.125 cv
16.438 265.133 16.48 265.137 16.52 265.145 cv
16.559 265.152 16.594 265.168 16.625 265.184 cv
16.656 265.207 16.688 265.23 16.715 265.254 cv
16.746 265.285 16.793 265.367 16.855 265.508 cv
16.922 265.648 16.984 265.832 17.047 266.055 cv
17.109 266.281 17.164 266.539 17.215 266.832 cv
17.262 267.125 17.285 267.437 17.289 267.77 cv
17.285 268.348 17.207 268.855 17.047 269.285 cv
16.887 269.723 16.648 270.086 16.332 270.379 cv
16.016 270.68 15.621 270.902 15.141 271.051 cv
14.664 271.199 14.105 271.273 13.469 271.273 cv
12.871 271.273 12.332 271.199 11.848 271.043 cv
11.371 270.891 10.961 270.664 10.625 270.367 cv
10.289 270.074 10.031 269.719 9.852 269.305 cv
9.672 268.891 9.582 268.426 9.582 267.91 cv
9.582 267.359 9.672 266.891 9.848 266.504 cv
10.027 266.117 10.266 265.801 10.563 265.547 cv
10.863 265.301 11.215 265.117 11.613 265 cv
12.02 264.887 12.449 264.828 12.902 264.824 cv
cp
12.754 266.117 mo
12.078 266.102 11.547 266.254 11.164 266.57 cv
10.781 266.887 10.59 267.355 10.586 267.973 cv
10.59 268.297 10.648 268.578 10.766 268.816 cv
10.887 269.059 11.047 269.258 11.242 269.418 cv
11.441 269.582 11.672 269.707 11.934 269.793 cv
12.195 269.883 12.469 269.934 12.754 269.941 cv
cp
f
6.402 256.648 mo
7.449 257.145 8.52 257.512 9.617 257.754 cv
10.719 257.996 11.824 258.117 12.934 258.117 cv
14.051 258.117 15.16 257.996 16.254 257.746 cv
17.352 257.504 18.422 257.141 19.477 256.664 cv
19.535 256.641 19.59 256.629 19.637 256.621 cv
19.68 256.621 19.715 256.637 19.746 256.672 cv
19.773 256.711 19.793 256.766 19.809 256.84 cv
19.816 256.918 19.824 257.023 19.828 257.148 cv
19.824 257.246 19.82 257.324 19.82 257.391 cv
19.813 257.461 19.805 257.52 19.789 257.566 cv
19.773 257.617 19.754 257.66 19.734 257.687 cv
19.711 257.723 19.688 257.746 19.664 257.758 cv
19.133 258.039 18.598 258.285 18.055 258.496 cv
17.512 258.715 16.961 258.895 16.402 259.035 cv
15.84 259.184 15.273 259.293 14.699 259.363 cv
14.125 259.441 13.543 259.477 12.957 259.473 cv
12.371 259.477 11.793 259.437 11.219 259.352 cv
10.648 259.273 10.082 259.156 9.516 259.008 cv
8.953 258.859 8.398 258.68 7.852 258.469 cv
7.309 258.258 6.766 258.02 6.23 257.75 cv
6.211 257.746 6.195 257.73 6.176 257.707 cv
6.164 257.684 6.148 257.652 6.129 257.609 cv
6.117 257.57 6.105 257.512 6.094 257.437 cv
6.09 257.367 6.086 257.273 6.082 257.156 cv
6.086 257.039 6.094 256.945 6.105 256.867 cv
6.125 256.797 6.145 256.738 6.168 256.695 cv
6.195 256.656 6.23 256.633 6.27 256.625 cv
6.316 256.621 6.359 256.629 6.402 256.648 cv
cp
f
16.938 243.367 mo
16.98 243.367 17.016 243.379 17.047 243.398 cv
17.078 243.422 17.105 243.461 17.121 243.512 cv
17.141 243.566 17.152 243.633 17.168 243.715 cv
17.18 243.801 17.188 243.91 17.188 244.039 cv
17.188 244.168 17.18 244.273 17.168 244.359 cv
17.152 244.449 17.141 244.52 17.121 244.57 cv
17.105 244.621 17.078 244.656 17.047 244.676 cv
17.016 244.699 16.98 244.711 16.938 244.707 cv
8.156 244.707 li
8.156 244.723 li
16.977 248.277 li
17.016 248.293 17.047 248.316 17.07 248.344 cv
17.098 248.375 17.121 248.418 17.137 248.469 cv
17.156 248.527 17.168 248.59 17.176 248.664 cv
17.184 248.738 17.188 248.828 17.188 248.93 cv
17.188 249.043 17.18 249.137 17.172 249.211 cv
17.156 249.293 17.145 249.359 17.129 249.406 cv
17.113 249.461 17.094 249.5 17.063 249.527 cv
17.039 249.559 17.008 249.578 16.977 249.586 cv
8.156 252.984 li
8.156 252.992 li
16.938 252.992 li
16.98 252.996 17.016 253.004 17.047 253.023 cv
17.078 253.047 17.105 253.086 17.121 253.137 cv
17.141 253.191 17.152 253.262 17.168 253.344 cv
17.18 253.434 17.188 253.543 17.188 253.672 cv
17.188 253.805 17.18 253.91 17.168 253.996 cv
17.152 254.082 17.141 254.152 17.121 254.199 cv
17.105 254.254 17.078 254.289 17.047 254.305 cv
17.016 254.328 16.98 254.336 16.938 254.332 cv
7.664 254.332 li
7.449 254.336 7.293 254.277 7.195 254.16 cv
7.105 254.043 7.059 253.914 7.055 253.77 cv
7.055 252.945 li
7.059 252.781 7.074 252.633 7.102 252.504 cv
7.137 252.379 7.184 252.27 7.25 252.172 cv
7.32 252.078 7.406 251.996 7.508 251.934 cv
7.613 251.871 7.738 251.816 7.875 251.77 cv
15.176 248.883 li
15.176 248.844 li
7.898 245.844 li
7.746 245.789 7.613 245.727 7.5 245.656 cv
7.395 245.59 7.305 245.512 7.238 245.43 cv
7.176 245.348 7.129 245.258 7.098 245.156 cv
7.07 245.059 7.059 244.941 7.055 244.809 cv
7.055 243.945 li
7.059 243.867 7.07 243.789 7.09 243.719 cv
7.117 243.648 7.152 243.59 7.199 243.539 cv
7.25 243.488 7.313 243.445 7.387 243.414 cv
7.465 243.383 7.559 243.367 7.664 243.367 cv
cp
f
16.945 239.551 mo
16.992 239.555 17.027 239.566 17.051 239.582 cv
17.082 239.605 17.105 239.637 17.125 239.684 cv
17.145 239.73 17.156 239.797 17.172 239.875 cv
17.18 239.961 17.188 240.066 17.188 240.195 cv
17.188 240.324 17.18 240.43 17.172 240.508 cv
17.156 240.594 17.145 240.66 17.125 240.707 cv
17.105 240.762 17.082 240.793 17.051 240.809 cv
17.027 240.828 16.992 240.84 16.945 240.836 cv
9.934 240.836 li
9.898 240.84 9.867 240.828 9.832 240.809 cv
9.805 240.793 9.777 240.762 9.754 240.707 cv
9.734 240.66 9.719 240.594 9.707 240.508 cv
9.699 240.43 9.695 240.324 9.691 240.195 cv
9.695 240.066 9.699 239.961 9.707 239.875 cv
9.719 239.797 9.734 239.73 9.754 239.684 cv
9.777 239.637 9.805 239.605 9.832 239.582 cv
9.867 239.566 9.898 239.555 9.934 239.551 cv
cp
7.563 239.402 mo
7.867 239.402 8.074 239.461 8.18 239.574 cv
8.293 239.687 8.348 239.898 8.344 240.203 cv
8.348 240.508 8.293 240.715 8.184 240.824 cv
8.078 240.941 7.875 240.996 7.578 240.992 cv
7.277 240.996 7.074 240.937 6.965 240.82 cv
6.859 240.707 6.805 240.496 6.801 240.187 cv
6.805 239.887 6.859 239.684 6.961 239.57 cv
7.07 239.461 7.27 239.402 7.563 239.402 cv
cp
f
16.945 231.125 mo
16.992 231.125 17.027 231.137 17.051 231.156 cv
17.082 231.18 17.105 231.215 17.125 231.258 cv
17.145 231.309 17.156 231.371 17.172 231.453 cv
17.18 231.535 17.188 231.641 17.188 231.762 cv
17.188 231.895 17.18 232 17.172 232.082 cv
17.156 232.168 17.145 232.234 17.125 232.277 cv
17.105 232.328 17.082 232.359 17.051 232.379 cv
17.027 232.402 16.992 232.414 16.945 232.41 cv
12.84 232.41 li
12.441 232.414 12.121 232.445 11.875 232.504 cv
11.633 232.57 11.422 232.66 11.242 232.777 cv
11.066 232.895 10.93 233.051 10.836 233.238 cv
10.742 233.434 10.695 233.652 10.695 233.898 cv
10.695 234.223 10.813 234.547 11.039 234.867 cv
11.273 235.191 11.605 235.527 12.043 235.879 cv
16.945 235.879 li
16.992 235.883 17.027 235.895 17.051 235.91 cv
17.082 235.934 17.105 235.965 17.125 236.012 cv
17.145 236.059 17.156 236.125 17.172 236.203 cv
17.18 236.289 17.188 236.395 17.188 236.523 cv
17.188 236.652 17.18 236.758 17.172 236.836 cv
17.156 236.922 17.145 236.988 17.125 237.035 cv
17.105 237.09 17.082 237.121 17.051 237.137 cv
17.027 237.156 16.992 237.168 16.945 237.164 cv
9.934 237.164 li
9.895 237.168 9.859 237.16 9.828 237.141 cv
9.801 237.129 9.777 237.098 9.75 237.047 cv
9.73 237.004 9.715 236.941 9.703 236.867 cv
9.699 236.797 9.695 236.703 9.691 236.578 cv
9.695 236.469 9.699 236.371 9.703 236.293 cv
9.715 236.219 9.73 236.16 9.75 236.117 cv
9.777 236.078 9.801 236.051 9.828 236.031 cv
9.859 236.016 9.895 236.008 9.934 236.004 cv
10.859 236.004 li
10.418 235.613 10.098 235.219 9.891 234.824 cv
9.688 234.434 9.582 234.035 9.582 233.633 cv
9.582 233.164 9.664 232.773 9.82 232.453 cv
9.984 232.137 10.195 231.875 10.457 231.676 cv
10.723 231.48 11.031 231.34 11.387 231.254 cv
11.742 231.168 12.172 231.125 12.668 231.125 cv
cp
f
16.945 222.73 mo
16.992 222.734 17.027 222.742 17.051 222.758 cv
17.082 222.777 17.105 222.812 17.125 222.855 cv
17.145 222.902 17.156 222.961 17.172 223.035 cv
17.18 223.113 17.188 223.207 17.188 223.312 cv
17.188 223.437 17.18 223.535 17.172 223.605 cv
17.156 223.684 17.145 223.742 17.125 223.785 cv
17.105 223.832 17.082 223.863 17.051 223.875 cv
17.027 223.895 16.992 223.902 16.945 223.898 cv
16.02 223.898 li
16.465 224.301 16.785 224.695 16.984 225.082 cv
17.188 225.477 17.285 225.871 17.289 226.266 cv
17.285 226.738 17.211 227.133 17.055 227.449 cv
16.902 227.77 16.691 228.027 16.422 228.223 cv
16.156 228.426 15.844 228.566 15.484 228.648 cv
15.129 228.738 14.695 228.781 14.188 228.777 cv
9.934 228.777 li
9.895 228.781 9.859 228.773 9.828 228.75 cv
9.801 228.734 9.777 228.699 9.75 228.645 cv
9.73 228.598 9.715 228.527 9.703 228.441 cv
9.699 228.359 9.695 228.258 9.691 228.129 cv
9.695 228.008 9.699 227.902 9.703 227.816 cv
9.715 227.734 9.73 227.668 9.75 227.621 cv
9.777 227.574 9.801 227.539 9.828 227.516 cv
9.859 227.496 9.895 227.488 9.934 227.484 cv
14.016 227.484 li
14.43 227.488 14.758 227.457 15.004 227.395 cv
15.25 227.336 15.461 227.246 15.633 227.121 cv
15.813 227.004 15.945 226.848 16.039 226.656 cv
16.137 226.473 16.188 226.254 16.184 226.004 cv
16.188 225.684 16.07 225.363 15.84 225.039 cv
15.613 224.723 15.277 224.383 14.832 224.023 cv
9.934 224.023 li
9.895 224.023 9.859 224.016 9.828 223.996 cv
9.801 223.98 9.777 223.945 9.75 223.891 cv
9.73 223.84 9.715 223.773 9.703 223.691 cv
9.699 223.613 9.695 223.508 9.691 223.375 cv
9.695 223.254 9.699 223.148 9.703 223.062 cv
9.715 222.98 9.73 222.918 9.75 222.871 cv
9.777 222.828 9.801 222.793 9.828 222.766 cv
9.859 222.746 9.895 222.734 9.934 222.73 cv
cp
f
16.43 216.711 mo
16.586 216.711 16.703 216.723 16.789 216.742 cv
16.879 216.766 16.945 216.797 16.984 216.836 cv
17.027 216.879 17.066 216.941 17.102 217.023 cv
17.137 217.109 17.164 217.203 17.191 217.309 cv
17.211 217.418 17.23 217.531 17.25 217.648 cv
17.262 217.766 17.27 217.887 17.273 218.004 cv
17.27 218.371 17.223 218.684 17.129 218.941 cv
17.035 219.203 16.891 219.414 16.691 219.578 cv
16.5 219.746 16.254 219.867 15.953 219.941 cv
15.656 220.02 15.305 220.059 14.895 220.055 cv
10.797 220.055 li
10.797 221.035 li
10.801 221.113 10.758 221.176 10.672 221.223 cv
10.59 221.27 10.457 221.293 10.266 221.293 cv
10.172 221.293 10.09 221.289 10.02 221.273 cv
9.957 221.266 9.898 221.246 9.852 221.223 cv
9.809 221.203 9.777 221.176 9.758 221.141 cv
9.742 221.109 9.734 221.074 9.73 221.027 cv
9.73 220.055 li
8.063 220.055 li
8.031 220.059 7.996 220.047 7.961 220.027 cv
7.934 220.012 7.906 219.98 7.879 219.926 cv
7.859 219.879 7.844 219.812 7.828 219.727 cv
7.82 219.648 7.813 219.543 7.813 219.414 cv
7.813 219.285 7.82 219.18 7.828 219.098 cv
7.844 219.016 7.859 218.949 7.879 218.902 cv
7.906 218.855 7.934 218.824 7.961 218.801 cv
7.996 218.785 8.031 218.773 8.063 218.77 cv
9.73 218.77 li
9.73 216.969 li
9.734 216.93 9.742 216.895 9.758 216.859 cv
9.777 216.832 9.809 216.805 9.852 216.777 cv
9.898 216.758 9.957 216.742 10.02 216.727 cv
10.09 216.719 10.172 216.711 10.266 216.711 cv
10.457 216.711 10.59 216.734 10.672 216.781 cv
10.758 216.828 10.801 216.891 10.797 216.969 cv
10.797 218.77 li
14.711 218.77 li
15.195 218.773 15.559 218.703 15.805 218.555 cv
16.055 218.414 16.18 218.156 16.176 217.785 cv
16.18 217.672 16.168 217.566 16.141 217.469 cv
16.121 217.379 16.098 217.297 16.066 217.219 cv
16.043 217.148 16.016 217.086 15.992 217.031 cv
15.969 216.984 15.957 216.937 15.957 216.891 cv
15.957 216.867 15.965 216.84 15.977 216.816 cv
15.992 216.793 16.016 216.777 16.051 216.762 cv
16.09 216.754 16.141 216.742 16.199 216.727 cv
16.266 216.719 16.344 216.711 16.43 216.711 cv
cp
f
13.137 209.027 mo
13.34 209.031 13.48 209.082 13.566 209.18 cv
13.652 209.285 13.695 209.402 13.695 209.527 cv
13.695 214.145 li
14.086 214.148 14.438 214.109 14.75 214.027 cv
15.063 213.953 15.332 213.82 15.551 213.637 cv
15.777 213.457 15.949 213.223 16.066 212.926 cv
16.191 212.637 16.25 212.277 16.246 211.852 cv
16.25 211.52 16.223 211.223 16.164 210.961 cv
16.113 210.699 16.051 210.473 15.98 210.281 cv
15.914 210.094 15.855 209.937 15.797 209.812 cv
15.746 209.691 15.719 209.598 15.715 209.535 cv
15.719 209.5 15.727 209.469 15.742 209.437 cv
15.762 209.41 15.789 209.387 15.824 209.367 cv
15.863 209.355 15.914 209.344 15.977 209.332 cv
16.043 209.328 16.121 209.324 16.215 209.32 cv
16.285 209.324 16.344 209.328 16.391 209.328 cv
16.438 209.336 16.48 209.34 16.52 209.348 cv
16.559 209.355 16.594 209.371 16.625 209.387 cv
16.656 209.41 16.688 209.434 16.715 209.457 cv
16.746 209.488 16.793 209.57 16.855 209.711 cv
16.922 209.852 16.984 210.035 17.047 210.258 cv
17.109 210.484 17.164 210.742 17.215 211.035 cv
17.262 211.328 17.285 211.641 17.289 211.973 cv
17.285 212.551 17.207 213.059 17.047 213.488 cv
16.887 213.926 16.648 214.289 16.332 214.582 cv
16.016 214.883 15.621 215.105 15.141 215.254 cv
14.664 215.402 14.105 215.477 13.469 215.477 cv
12.871 215.477 12.332 215.402 11.848 215.246 cv
11.371 215.094 10.961 214.867 10.625 214.57 cv
10.289 214.277 10.031 213.922 9.852 213.508 cv
9.672 213.094 9.582 212.629 9.582 212.113 cv
9.582 211.562 9.672 211.094 9.848 210.707 cv
10.027 210.32 10.266 210.004 10.563 209.75 cv
10.863 209.504 11.215 209.32 11.613 209.203 cv
12.02 209.09 12.449 209.031 12.902 209.027 cv
cp
12.754 210.32 mo
12.078 210.305 11.547 210.457 11.164 210.773 cv
10.781 211.09 10.59 211.559 10.586 212.176 cv
10.59 212.5 10.648 212.781 10.766 213.02 cv
10.887 213.262 11.047 213.461 11.242 213.621 cv
11.441 213.785 11.672 213.91 11.934 213.996 cv
12.195 214.086 12.469 214.137 12.754 214.145 cv
cp
f
15.035 202.742 mo
15.398 202.746 15.719 202.812 15.996 202.941 cv
16.277 203.074 16.512 203.262 16.703 203.504 cv
16.898 203.75 17.043 204.043 17.141 204.379 cv
17.238 204.719 17.285 205.09 17.289 205.492 cv
17.285 205.746 17.266 205.984 17.23 206.207 cv
17.188 206.434 17.141 206.633 17.082 206.812 cv
17.023 206.992 16.961 207.145 16.895 207.27 cv
16.832 207.395 16.773 207.488 16.719 207.543 cv
16.668 207.602 16.598 207.641 16.5 207.664 cv
16.41 207.691 16.281 207.703 16.121 207.703 cv
16.023 207.703 15.941 207.699 15.871 207.687 cv
15.805 207.68 15.75 207.668 15.707 207.648 cv
15.668 207.637 15.637 207.613 15.617 207.586 cv
15.602 207.559 15.594 207.527 15.59 207.488 cv
15.594 207.434 15.629 207.348 15.695 207.234 cv
15.77 207.125 15.848 206.988 15.926 206.82 cv
16.012 206.66 16.086 206.469 16.156 206.242 cv
16.227 206.023 16.262 205.766 16.262 205.469 cv
16.262 205.254 16.238 205.055 16.191 204.875 cv
16.145 204.699 16.078 204.547 15.984 204.418 cv
15.898 204.289 15.781 204.187 15.637 204.117 cv
15.5 204.047 15.332 204.012 15.137 204.012 cv
14.941 204.012 14.777 204.062 14.641 204.164 cv
14.508 204.266 14.387 204.402 14.281 204.566 cv
14.18 204.734 14.09 204.918 14.004 205.125 cv
13.926 205.336 13.84 205.551 13.75 205.77 cv
13.664 205.988 13.563 206.203 13.449 206.414 cv
13.34 206.625 13.207 206.816 13.043 206.98 cv
12.887 207.152 12.691 207.285 12.465 207.383 cv
12.242 207.488 11.977 207.539 11.664 207.535 cv
11.391 207.539 11.125 207.484 10.871 207.375 cv
10.621 207.27 10.402 207.109 10.211 206.895 cv
10.023 206.684 9.871 206.418 9.754 206.098 cv
9.641 205.777 9.582 205.406 9.582 204.977 cv
9.582 204.793 9.598 204.605 9.629 204.418 cv
9.66 204.234 9.699 204.066 9.746 203.91 cv
9.793 203.762 9.844 203.633 9.898 203.523 cv
9.953 203.422 10.004 203.34 10.043 203.281 cv
10.09 203.23 10.125 203.195 10.152 203.172 cv
10.184 203.156 10.219 203.141 10.254 203.133 cv
10.297 203.125 10.344 203.117 10.398 203.109 cv
10.457 203.102 10.527 203.098 10.609 203.098 cv
10.699 203.098 10.777 203.102 10.84 203.109 cv
10.91 203.117 10.961 203.133 11 203.148 cv
11.043 203.172 11.074 203.191 11.09 203.215 cv
11.109 203.242 11.117 203.273 11.117 203.301 cv
11.117 203.352 11.09 203.418 11.031 203.504 cv
10.977 203.594 10.914 203.707 10.848 203.848 cv
10.785 203.988 10.727 204.156 10.664 204.344 cv
10.609 204.535 10.578 204.75 10.578 204.992 cv
10.578 205.215 10.605 205.406 10.652 205.57 cv
10.707 205.738 10.777 205.875 10.863 205.98 cv
10.957 206.086 11.063 206.168 11.188 206.219 cv
11.313 206.277 11.449 206.305 11.594 206.301 cv
11.797 206.305 11.965 206.254 12.102 206.148 cv
12.242 206.047 12.363 205.91 12.465 205.742 cv
12.57 205.578 12.664 205.387 12.746 205.172 cv
12.832 204.961 12.918 204.746 13.004 204.523 cv
13.094 204.305 13.195 204.086 13.301 203.867 cv
13.41 203.652 13.539 203.461 13.695 203.293 cv
13.852 203.129 14.039 202.996 14.258 202.895 cv
14.477 202.797 14.738 202.746 15.035 202.742 cv
cp
f
12.957 198.301 mo
13.543 198.301 14.125 198.34 14.699 198.41 cv
15.273 198.488 15.84 198.598 16.402 198.738 cv
16.961 198.887 17.512 199.062 18.055 199.273 cv
18.598 199.484 19.133 199.73 19.664 200.008 cv
19.688 200.027 19.711 200.051 19.734 200.078 cv
19.754 200.113 19.773 200.152 19.789 200.199 cv
19.805 200.25 19.813 200.309 19.82 200.375 cv
19.82 200.445 19.824 200.527 19.828 200.617 cv
19.824 200.754 19.816 200.859 19.809 200.934 cv
19.793 201.012 19.773 201.066 19.746 201.098 cv
19.715 201.133 19.68 201.148 19.637 201.145 cv
19.59 201.145 19.535 201.129 19.477 201.102 cv
18.426 200.625 17.355 200.266 16.258 200.02 cv
15.16 199.777 14.051 199.656 12.934 199.652 cv
11.824 199.656 10.719 199.777 9.617 200.02 cv
8.52 200.266 7.449 200.633 6.402 201.117 cv
6.359 201.141 6.316 201.148 6.27 201.141 cv
6.23 201.141 6.195 201.117 6.168 201.07 cv
6.145 201.031 6.125 200.973 6.105 200.898 cv
6.094 200.828 6.086 200.73 6.082 200.609 cv
6.086 200.5 6.09 200.41 6.094 200.336 cv
6.105 200.266 6.117 200.207 6.129 200.16 cv
6.148 200.117 6.164 200.086 6.176 200.062 cv
6.195 200.047 6.211 200.031 6.23 200.016 cv
7.297 199.484 8.395 199.062 9.516 198.758 cv
10.645 198.453 11.789 198.301 12.957 198.301 cv
cp
f
296.84 527.516 mo
296.836 527.621 296.82 527.711 296.785 527.781 cv
296.75 527.859 296.703 527.918 296.648 527.961 cv
296.59 528.012 296.527 528.047 296.461 528.062 cv
296.387 528.086 296.316 528.094 296.254 528.094 cv
295.809 528.094 li
295.668 528.094 295.547 528.082 295.441 528.051 cv
295.336 528.027 295.238 527.973 295.145 527.895 cv
295.051 527.82 294.957 527.719 294.863 527.586 cv
294.77 527.457 294.668 527.293 294.563 527.09 cv
291.488 521.352 li
291.324 521.059 291.16 520.75 291 520.422 cv
290.832 520.102 290.68 519.785 290.543 519.477 cv
290.527 519.477 li
290.535 519.852 290.543 520.234 290.551 520.621 cv
290.555 521.012 290.555 521.398 290.559 521.781 cv
290.559 527.867 li
290.555 527.906 290.543 527.941 290.523 527.973 cv
290.5 528.008 290.465 528.035 290.414 528.051 cv
290.359 528.07 290.289 528.082 290.207 528.098 cv
290.121 528.109 290.016 528.117 289.887 528.117 cv
289.75 528.117 289.641 528.109 289.559 528.098 cv
289.473 528.082 289.406 528.07 289.359 528.051 cv
289.309 528.035 289.273 528.008 289.25 527.973 cv
289.227 527.941 289.215 527.906 289.219 527.867 cv
289.219 518.562 li
289.215 518.355 289.273 518.207 289.395 518.117 cv
289.512 518.031 289.641 517.988 289.781 517.984 cv
290.441 517.984 li
290.594 517.988 290.727 518 290.832 518.023 cv
290.934 518.051 291.027 518.094 291.113 518.152 cv
291.195 518.215 291.273 518.297 291.355 518.402 cv
291.43 518.512 291.512 518.648 291.598 518.805 cv
293.965 523.23 li
294.109 523.504 294.25 523.77 294.387 524.023 cv
294.52 524.281 294.648 524.535 294.777 524.781 cv
294.898 525.035 295.023 525.281 295.148 525.52 cv
295.27 525.762 295.391 526.004 295.516 526.246 cv
295.523 526.246 li
295.512 525.84 295.504 525.41 295.504 524.965 cv
295.496 524.52 295.496 524.094 295.5 523.684 cv
295.5 518.211 li
295.496 518.176 295.508 518.141 295.531 518.109 cv
295.555 518.078 295.59 518.051 295.645 518.027 cv
295.691 518.004 295.762 517.988 295.848 517.977 cv
295.934 517.969 296.043 517.965 296.184 517.961 cv
296.301 517.965 296.406 517.969 296.496 517.977 cv
296.582 517.988 296.648 518.004 296.699 518.027 cv
296.746 518.051 296.781 518.078 296.805 518.109 cv
296.824 518.141 296.836 518.176 296.84 518.211 cv
cp
f
305.391 527.875 mo
305.387 527.922 305.379 527.957 305.363 527.98 cv
305.344 528.012 305.309 528.035 305.266 528.055 cv
305.219 528.074 305.16 528.086 305.086 528.102 cv
305.008 528.109 304.914 528.117 304.809 528.117 cv
304.684 528.117 304.586 528.109 304.516 528.102 cv
304.438 528.086 304.379 528.074 304.336 528.055 cv
304.289 528.035 304.258 528.012 304.246 527.98 cv
304.227 527.957 304.219 527.922 304.223 527.875 cv
304.223 526.949 li
303.82 527.395 303.426 527.715 303.039 527.914 cv
302.645 528.117 302.25 528.215 301.855 528.219 cv
301.383 528.215 300.988 528.141 300.672 527.984 cv
300.352 527.832 300.094 527.621 299.898 527.352 cv
299.695 527.086 299.555 526.773 299.473 526.414 cv
299.383 526.059 299.34 525.625 299.344 525.117 cv
299.344 520.863 li
299.34 520.824 299.348 520.789 299.371 520.758 cv
299.387 520.73 299.422 520.707 299.477 520.68 cv
299.523 520.66 299.594 520.645 299.68 520.633 cv
299.762 520.629 299.863 520.625 299.992 520.621 cv
300.113 520.625 300.219 520.629 300.305 520.633 cv
300.387 520.645 300.453 520.66 300.5 520.68 cv
300.547 520.707 300.582 520.73 300.605 520.758 cv
300.625 520.789 300.633 520.824 300.637 520.863 cv
300.637 524.945 li
300.633 525.359 300.664 525.687 300.727 525.934 cv
300.785 526.18 300.875 526.391 301 526.562 cv
301.117 526.742 301.273 526.875 301.465 526.969 cv
301.648 527.066 301.867 527.117 302.117 527.113 cv
302.438 527.117 302.758 527 303.082 526.77 cv
303.398 526.543 303.738 526.207 304.098 525.762 cv
304.098 520.863 li
304.098 520.824 304.105 520.789 304.125 520.758 cv
304.141 520.73 304.176 520.707 304.23 520.68 cv
304.281 520.66 304.348 520.645 304.43 520.633 cv
304.508 520.629 304.613 520.625 304.746 520.621 cv
304.867 520.625 304.973 520.629 305.059 520.633 cv
305.141 520.645 305.203 520.66 305.25 520.68 cv
305.293 520.707 305.328 520.73 305.355 520.758 cv
305.375 520.789 305.387 520.824 305.391 520.863 cv
cp
f
318.168 527.875 mo
318.164 527.922 318.156 527.957 318.137 527.98 cv
318.113 528.012 318.078 528.035 318.035 528.055 cv
317.984 528.074 317.918 528.086 317.84 528.102 cv
317.754 528.109 317.652 528.117 317.527 528.117 cv
317.395 528.117 317.285 528.109 317.207 528.102 cv
317.121 528.086 317.055 528.074 317.008 528.055 cv
316.953 528.035 316.918 528.012 316.902 527.98 cv
316.879 527.957 316.871 527.922 316.871 527.875 cv
316.871 523.613 li
316.871 523.32 316.844 523.051 316.793 522.805 cv
316.738 522.562 316.656 522.352 316.543 522.172 cv
316.43 521.996 316.285 521.859 316.109 521.766 cv
315.93 521.672 315.719 521.625 315.484 521.625 cv
315.188 521.625 314.891 521.742 314.594 521.969 cv
314.289 522.203 313.961 522.535 313.605 522.973 cv
313.605 527.875 li
313.602 527.922 313.59 527.957 313.574 527.98 cv
313.551 528.012 313.52 528.035 313.473 528.055 cv
313.422 528.074 313.355 528.086 313.273 528.102 cv
313.188 528.109 313.082 528.117 312.961 528.117 cv
312.84 528.117 312.738 528.109 312.652 528.102 cv
312.566 528.086 312.496 528.074 312.449 528.055 cv
312.395 528.035 312.363 528.012 312.348 527.98 cv
312.328 527.957 312.316 527.922 312.32 527.875 cv
312.32 523.613 li
312.316 523.32 312.289 523.051 312.234 522.805 cv
312.176 522.562 312.09 522.352 311.977 522.172 cv
311.863 521.996 311.719 521.859 311.547 521.766 cv
311.367 521.672 311.16 521.625 310.926 521.625 cv
310.625 521.625 310.328 521.742 310.027 521.969 cv
309.727 522.203 309.398 522.535 309.047 522.973 cv
309.047 527.875 li
309.043 527.922 309.031 527.957 309.016 527.98 cv
308.992 528.012 308.961 528.035 308.914 528.055 cv
308.867 528.074 308.801 528.086 308.723 528.102 cv
308.637 528.109 308.531 528.117 308.402 528.117 cv
308.273 528.117 308.168 528.109 308.09 528.102 cv
308.004 528.086 307.938 528.074 307.891 528.055 cv
307.836 528.035 307.805 528.012 307.789 527.98 cv
307.77 527.957 307.758 527.922 307.762 527.875 cv
307.762 520.863 li
307.758 520.824 307.766 520.789 307.785 520.758 cv
307.797 520.73 307.828 520.707 307.879 520.68 cv
307.922 520.66 307.984 520.645 308.059 520.633 cv
308.129 520.629 308.223 520.625 308.348 520.621 cv
308.457 520.625 308.555 520.629 308.633 520.633 cv
308.707 520.645 308.766 520.66 308.809 520.68 cv
308.848 520.707 308.875 520.73 308.895 520.758 cv
308.91 520.789 308.918 520.824 308.922 520.863 cv
308.922 521.789 li
309.313 521.348 309.695 521.027 310.07 520.82 cv
310.438 520.617 310.816 520.512 311.199 520.512 cv
311.488 520.512 311.746 520.547 311.98 520.613 cv
312.207 520.684 312.414 520.777 312.594 520.898 cv
312.77 521.02 312.918 521.164 313.047 521.332 cv
313.168 521.504 313.273 521.695 313.359 521.898 cv
313.59 521.648 313.813 521.434 314.023 521.254 cv
314.234 521.082 314.438 520.937 314.633 520.824 cv
314.828 520.719 315.016 520.641 315.199 520.586 cv
315.383 520.539 315.57 520.512 315.758 520.512 cv
316.211 520.512 316.59 520.594 316.895 520.75 cv
317.199 520.914 317.445 521.125 317.641 521.387 cv
317.828 521.652 317.965 521.961 318.047 522.316 cv
318.125 522.672 318.164 523.047 318.168 523.441 cv
cp
f
326.965 524.273 mo
326.961 524.883 326.895 525.434 326.766 525.918 cv
326.629 526.406 326.434 526.82 326.18 527.16 cv
325.922 527.504 325.605 527.766 325.234 527.945 cv
324.859 528.129 324.434 528.215 323.949 528.219 cv
323.723 528.215 323.516 528.195 323.328 528.152 cv
323.141 528.105 322.953 528.035 322.773 527.937 cv
322.586 527.84 322.406 527.715 322.227 527.562 cv
322.043 527.414 321.852 527.234 321.652 527.02 cv
321.652 527.875 li
321.652 527.922 321.641 527.957 321.621 527.984 cv
321.598 528.02 321.563 528.043 321.52 528.059 cv
321.469 528.074 321.41 528.086 321.344 528.102 cv
321.27 528.109 321.18 528.117 321.074 528.117 cv
320.965 528.117 320.879 528.109 320.809 528.102 cv
320.734 528.086 320.672 528.074 320.629 528.059 cv
320.578 528.043 320.547 528.02 320.535 527.984 cv
320.516 527.957 320.508 527.922 320.512 527.875 cv
320.512 517.465 li
320.508 517.426 320.52 517.391 320.539 517.355 cv
320.555 517.328 320.586 517.301 320.641 517.277 cv
320.688 517.258 320.754 517.242 320.84 517.23 cv
320.918 517.223 321.023 517.219 321.152 517.215 cv
321.281 517.219 321.387 517.223 321.473 517.23 cv
321.551 517.242 321.617 517.258 321.664 517.277 cv
321.711 517.301 321.742 517.328 321.766 517.355 cv
321.781 517.391 321.793 517.426 321.797 517.465 cv
321.797 521.664 li
322.004 521.453 322.207 521.273 322.402 521.129 cv
322.598 520.984 322.785 520.867 322.973 520.773 cv
323.156 520.687 323.344 520.621 323.535 520.574 cv
323.719 520.535 323.918 520.512 324.129 520.512 cv
324.633 520.512 325.066 520.613 325.434 520.816 cv
325.793 521.02 326.086 521.293 326.313 521.629 cv
326.535 521.973 326.703 522.371 326.809 522.828 cv
326.91 523.285 326.961 523.766 326.965 524.273 cv
cp
325.633 524.422 mo
325.629 524.066 325.602 523.719 325.551 523.379 cv
325.492 523.043 325.398 522.746 325.262 522.484 cv
325.125 522.227 324.945 522.016 324.723 521.855 cv
324.496 521.699 324.215 521.621 323.883 521.617 cv
323.715 521.621 323.551 521.645 323.391 521.687 cv
323.227 521.738 323.063 521.816 322.895 521.922 cv
322.727 522.035 322.551 522.176 322.375 522.344 cv
322.191 522.52 322 522.734 321.797 522.988 cv
321.797 525.785 li
322.152 526.219 322.492 526.551 322.816 526.773 cv
323.141 527.004 323.477 527.117 323.828 527.113 cv
324.148 527.117 324.426 527.039 324.66 526.879 cv
324.887 526.727 325.074 526.52 325.219 526.258 cv
325.363 526.004 325.469 525.715 325.535 525.395 cv
325.598 525.078 325.629 524.754 325.633 524.422 cv
cp
f
334.875 524.066 mo
334.871 524.27 334.82 524.41 334.723 524.496 cv
334.617 524.582 334.5 524.625 334.375 524.625 cv
329.758 524.625 li
329.754 525.016 329.793 525.367 329.875 525.68 cv
329.949 525.992 330.082 526.262 330.266 526.48 cv
330.445 526.707 330.68 526.879 330.977 526.996 cv
331.266 527.121 331.625 527.18 332.051 527.176 cv
332.383 527.18 332.68 527.152 332.941 527.094 cv
333.203 527.043 333.43 526.98 333.621 526.91 cv
333.809 526.844 333.965 526.785 334.09 526.727 cv
334.211 526.676 334.305 526.648 334.367 526.645 cv
334.402 526.648 334.434 526.656 334.465 526.672 cv
334.492 526.691 334.516 526.719 334.535 526.754 cv
334.547 526.793 334.559 526.844 334.57 526.906 cv
334.574 526.973 334.578 527.051 334.582 527.145 cv
334.578 527.215 334.574 527.273 334.574 527.32 cv
334.566 527.367 334.563 527.41 334.555 527.449 cv
334.547 527.488 334.531 527.523 334.516 527.555 cv
334.492 527.586 334.469 527.617 334.445 527.645 cv
334.414 527.676 334.332 527.723 334.191 527.785 cv
334.051 527.852 333.867 527.914 333.645 527.977 cv
333.418 528.039 333.16 528.094 332.867 528.145 cv
332.574 528.191 332.262 528.215 331.93 528.219 cv
331.352 528.215 330.844 528.137 330.414 527.977 cv
329.977 527.816 329.613 527.578 329.32 527.262 cv
329.02 526.945 328.797 526.551 328.648 526.07 cv
328.5 525.594 328.426 525.035 328.426 524.398 cv
328.426 523.801 328.5 523.262 328.656 522.777 cv
328.809 522.301 329.035 521.891 329.332 521.555 cv
329.625 521.219 329.98 520.961 330.395 520.781 cv
330.809 520.602 331.273 520.512 331.789 520.512 cv
332.34 520.512 332.809 520.602 333.195 520.777 cv
333.582 520.957 333.898 521.195 334.152 521.492 cv
334.398 521.793 334.582 522.145 334.699 522.543 cv
334.813 522.949 334.871 523.379 334.875 523.832 cv
cp
333.582 523.684 mo
333.598 523.008 333.445 522.477 333.129 522.094 cv
332.813 521.711 332.344 521.52 331.727 521.516 cv
331.402 521.52 331.121 521.578 330.883 521.695 cv
330.641 521.816 330.441 521.977 330.281 522.172 cv
330.117 522.371 329.992 522.602 329.906 522.863 cv
329.816 523.125 329.766 523.398 329.758 523.684 cv
cp
f
340.941 521.32 mo
340.938 521.437 340.938 521.535 340.934 521.609 cv
340.926 521.691 340.914 521.754 340.902 521.793 cv
340.883 521.84 340.863 521.871 340.844 521.895 cv
340.816 521.918 340.785 521.93 340.746 521.93 cv
340.703 521.93 340.652 521.918 340.594 521.895 cv
340.531 521.871 340.461 521.848 340.391 521.824 cv
340.313 521.801 340.23 521.781 340.137 521.758 cv
340.043 521.742 339.941 521.73 339.832 521.727 cv
339.699 521.73 339.57 521.758 339.449 521.805 cv
339.324 521.859 339.195 521.945 339.059 522.062 cv
338.918 522.187 338.773 522.344 338.625 522.539 cv
338.473 522.734 338.305 522.977 338.125 523.262 cv
338.125 527.875 li
338.121 527.922 338.109 527.957 338.094 527.98 cv
338.07 528.012 338.039 528.035 337.992 528.055 cv
337.945 528.074 337.879 528.086 337.801 528.102 cv
337.715 528.109 337.609 528.117 337.48 528.117 cv
337.352 528.117 337.246 528.109 337.168 528.102 cv
337.082 528.086 337.016 528.074 336.969 528.055 cv
336.914 528.035 336.883 528.012 336.867 527.98 cv
336.848 527.957 336.836 527.922 336.84 527.875 cv
336.84 520.863 li
336.836 520.824 336.844 520.789 336.863 520.758 cv
336.875 520.73 336.906 520.707 336.957 520.68 cv
337 520.66 337.063 520.645 337.137 520.633 cv
337.207 520.629 337.301 520.625 337.426 520.621 cv
337.535 520.625 337.633 520.629 337.711 520.633 cv
337.785 520.645 337.844 520.66 337.887 520.68 cv
337.926 520.707 337.953 520.73 337.973 520.758 cv
337.988 520.789 337.996 520.824 338 520.863 cv
338 521.883 li
338.188 521.602 338.371 521.375 338.543 521.199 cv
338.711 521.023 338.871 520.883 339.023 520.781 cv
339.172 520.68 339.32 520.609 339.469 520.57 cv
339.617 520.531 339.766 520.512 339.918 520.512 cv
339.984 520.512 340.063 520.516 340.148 520.523 cv
340.234 520.531 340.324 520.547 340.418 520.566 cv
340.512 520.59 340.594 520.613 340.672 520.637 cv
340.742 520.664 340.797 520.691 340.832 520.715 cv
340.859 520.746 340.879 520.77 340.895 520.789 cv
340.902 520.816 340.914 520.848 340.922 520.879 cv
340.93 520.918 340.934 520.969 340.938 521.039 cv
340.938 521.109 340.938 521.203 340.941 521.32 cv
cp
f
352.699 524.289 mo
352.695 524.867 352.621 525.395 352.473 525.871 cv
352.32 526.355 352.094 526.77 351.797 527.113 cv
351.496 527.465 351.121 527.734 350.676 527.926 cv
350.223 528.121 349.703 528.215 349.113 528.219 cv
348.535 528.215 348.031 528.133 347.605 527.961 cv
347.176 527.793 346.82 527.543 346.535 527.215 cv
346.246 526.887 346.031 526.492 345.895 526.023 cv
345.754 525.559 345.688 525.027 345.688 524.43 cv
345.688 523.863 345.758 523.336 345.906 522.855 cv
346.051 522.375 346.277 521.961 346.578 521.609 cv
346.875 521.262 347.246 520.992 347.695 520.801 cv
348.141 520.609 348.664 520.512 349.262 520.512 cv
349.84 520.512 350.34 520.598 350.77 520.77 cv
351.195 520.941 351.555 521.191 351.84 521.52 cv
352.125 521.848 352.34 522.246 352.484 522.711 cv
352.625 523.18 352.695 523.707 352.699 524.289 cv
cp
351.367 524.375 mo
351.363 524 351.328 523.641 351.262 523.301 cv
351.188 522.965 351.07 522.672 350.91 522.414 cv
350.746 522.164 350.527 521.961 350.25 521.809 cv
349.969 521.664 349.621 521.59 349.211 521.586 cv
348.824 521.59 348.496 521.656 348.223 521.789 cv
347.945 521.926 347.719 522.117 347.543 522.363 cv
347.363 522.609 347.23 522.902 347.148 523.238 cv
347.059 523.578 347.016 523.945 347.02 524.344 cv
347.016 524.73 347.051 525.094 347.125 525.43 cv
347.191 525.77 347.309 526.062 347.477 526.312 cv
347.641 526.566 347.863 526.77 348.141 526.914 cv
348.418 527.066 348.766 527.141 349.18 527.137 cv
349.555 527.141 349.883 527.07 350.164 526.934 cv
350.441 526.801 350.668 526.613 350.848 526.363 cv
351.023 526.121 351.152 525.828 351.238 525.492 cv
351.32 525.156 351.363 524.785 351.367 524.375 cv
cp
f
358.43 517.977 mo
358.426 518.078 358.422 518.156 358.414 518.215 cv
358.402 518.277 358.391 518.328 358.379 518.359 cv
358.363 518.398 358.348 518.422 358.328 518.434 cv
358.305 518.449 358.277 518.457 358.25 518.453 cv
358.211 518.457 358.164 518.445 358.113 518.418 cv
358.055 518.398 357.988 518.371 357.914 518.34 cv
357.832 518.312 357.742 518.285 357.637 518.262 cv
357.527 518.238 357.402 518.227 357.27 518.227 cv
357.074 518.227 356.91 518.258 356.777 518.32 cv
356.637 518.383 356.527 518.48 356.449 518.613 cv
356.363 518.746 356.305 518.918 356.27 519.129 cv
356.23 519.34 356.211 519.598 356.215 519.895 cv
356.215 520.66 li
357.781 520.66 li
357.82 520.664 357.855 520.672 357.887 520.687 cv
357.914 520.707 357.941 520.738 357.965 520.781 cv
357.988 520.828 358.004 520.887 358.02 520.949 cv
358.027 521.02 358.035 521.102 358.039 521.195 cv
358.035 521.387 358.012 521.52 357.969 521.602 cv
357.918 521.687 357.855 521.73 357.781 521.727 cv
356.215 521.727 li
356.215 527.875 li
356.211 527.922 356.203 527.957 356.184 527.98 cv
356.16 528.012 356.125 528.035 356.078 528.055 cv
356.027 528.074 355.961 528.086 355.879 528.102 cv
355.793 528.109 355.688 528.117 355.57 528.117 cv
355.441 528.117 355.34 528.109 355.258 528.102 cv
355.172 528.086 355.105 528.074 355.059 528.055 cv
355.008 528.035 354.973 528.012 354.953 527.98 cv
354.93 527.957 354.918 527.922 354.922 527.875 cv
354.922 521.727 li
353.934 521.727 li
353.848 521.73 353.785 521.687 353.746 521.602 cv
353.703 521.52 353.68 521.387 353.684 521.195 cv
353.68 521.102 353.688 521.02 353.699 520.949 cv
353.707 520.887 353.723 520.828 353.746 520.781 cv
353.766 520.738 353.789 520.707 353.824 520.687 cv
353.852 520.672 353.891 520.664 353.934 520.66 cv
354.922 520.66 li
354.922 519.934 li
354.918 519.449 354.965 519.031 355.059 518.676 cv
355.148 518.328 355.285 518.039 355.473 517.816 cv
355.656 517.594 355.891 517.43 356.18 517.32 cv
356.461 517.215 356.797 517.16 357.184 517.16 cv
357.359 517.16 357.535 517.18 357.711 517.211 cv
357.879 517.25 358.012 517.285 358.109 517.32 cv
358.199 517.363 358.262 517.398 358.297 517.426 cv
358.324 517.461 358.352 517.5 358.375 517.547 cv
358.395 517.598 358.406 517.66 358.418 517.727 cv
358.422 517.801 358.426 517.883 358.43 517.977 cv
cp
f
368.629 525.242 mo
368.625 525.715 368.539 526.137 368.367 526.504 cv
368.191 526.879 367.949 527.191 367.641 527.445 cv
367.332 527.703 366.969 527.895 366.551 528.023 cv
366.129 528.152 365.68 528.215 365.199 528.219 cv
364.859 528.215 364.543 528.187 364.258 528.133 cv
363.969 528.074 363.715 528.008 363.488 527.922 cv
363.262 527.844 363.07 527.758 362.918 527.664 cv
362.762 527.578 362.656 527.5 362.598 527.437 cv
362.539 527.375 362.496 527.297 362.469 527.203 cv
362.438 527.109 362.422 526.98 362.426 526.816 cv
362.422 526.703 362.426 526.609 362.441 526.531 cv
362.449 526.457 362.465 526.395 362.488 526.348 cv
362.504 526.301 362.531 526.27 362.566 526.25 cv
362.594 526.234 362.629 526.227 362.672 526.223 cv
362.742 526.227 362.844 526.27 362.98 526.355 cv
363.109 526.445 363.281 526.543 363.492 526.645 cv
363.699 526.754 363.949 526.852 364.242 526.937 cv
364.535 527.031 364.875 527.074 365.262 527.074 cv
365.551 527.074 365.816 527.035 366.059 526.957 cv
366.297 526.879 366.504 526.77 366.684 526.625 cv
366.855 526.484 366.992 526.309 367.086 526.098 cv
367.18 525.891 367.227 525.656 367.227 525.391 cv
367.227 525.109 367.16 524.863 367.031 524.656 cv
366.898 524.457 366.727 524.281 366.516 524.125 cv
366.301 523.977 366.059 523.836 365.785 523.703 cv
365.512 523.578 365.23 523.445 364.949 523.312 cv
364.66 523.18 364.383 523.035 364.113 522.871 cv
363.844 522.715 363.602 522.523 363.391 522.305 cv
363.172 522.086 363 521.832 362.871 521.535 cv
362.734 521.246 362.668 520.895 362.672 520.48 cv
362.668 520.062 362.746 519.687 362.902 519.355 cv
363.055 519.027 363.266 518.75 363.543 518.523 cv
363.813 518.305 364.137 518.133 364.516 518.016 cv
364.891 517.898 365.301 517.84 365.738 517.84 cv
365.957 517.84 366.18 517.859 366.41 517.898 cv
366.633 517.937 366.844 517.988 367.047 518.051 cv
367.242 518.117 367.422 518.191 367.582 518.27 cv
367.734 518.352 367.836 518.418 367.891 518.465 cv
367.938 518.52 367.973 518.559 367.988 518.582 cv
368.004 518.613 368.016 518.648 368.027 518.691 cv
368.035 518.738 368.043 518.793 368.051 518.852 cv
368.055 518.918 368.059 518.996 368.059 519.094 cv
368.059 519.187 368.055 519.273 368.047 519.344 cv
368.039 519.422 368.027 519.48 368.012 519.527 cv
367.996 519.574 367.973 519.609 367.945 519.633 cv
367.914 519.656 367.883 519.668 367.848 519.668 cv
367.789 519.668 367.699 519.633 367.578 519.562 cv
367.453 519.492 367.301 519.41 367.129 519.316 cv
366.949 519.227 366.742 519.145 366.504 519.066 cv
366.258 518.992 365.988 518.953 365.691 518.953 cv
365.41 518.953 365.164 518.992 364.957 519.066 cv
364.746 519.145 364.574 519.246 364.441 519.367 cv
364.305 519.492 364.203 519.637 364.137 519.809 cv
364.07 519.98 364.039 520.164 364.039 520.355 cv
364.039 520.641 364.102 520.883 364.23 521.082 cv
364.359 521.285 364.531 521.465 364.75 521.617 cv
364.961 521.777 365.207 521.918 365.484 522.047 cv
365.758 522.18 366.039 522.312 366.328 522.441 cv
366.613 522.574 366.895 522.719 367.168 522.875 cv
367.441 523.035 367.688 523.223 367.906 523.437 cv
368.121 523.656 368.293 523.91 368.43 524.203 cv
368.559 524.496 368.625 524.844 368.629 525.242 cv
cp
f
376.395 527.875 mo
376.391 527.922 376.383 527.957 376.367 527.98 cv
376.348 528.012 376.313 528.035 376.27 528.055 cv
376.223 528.074 376.164 528.086 376.09 528.102 cv
376.012 528.109 375.918 528.117 375.813 528.117 cv
375.688 528.117 375.59 528.109 375.52 528.102 cv
375.441 528.086 375.383 528.074 375.34 528.055 cv
375.293 528.035 375.262 528.012 375.25 527.98 cv
375.23 527.957 375.223 527.922 375.227 527.875 cv
375.227 526.949 li
374.824 527.395 374.43 527.715 374.043 527.914 cv
373.648 528.117 373.254 528.215 372.859 528.219 cv
372.387 528.215 371.992 528.141 371.676 527.984 cv
371.355 527.832 371.098 527.621 370.902 527.352 cv
370.699 527.086 370.559 526.773 370.477 526.414 cv
370.387 526.059 370.344 525.625 370.348 525.117 cv
370.348 520.863 li
370.344 520.824 370.352 520.789 370.375 520.758 cv
370.391 520.73 370.426 520.707 370.48 520.68 cv
370.527 520.66 370.598 520.645 370.684 520.633 cv
370.766 520.629 370.867 520.625 370.996 520.621 cv
371.117 520.625 371.223 520.629 371.309 520.633 cv
371.391 520.645 371.457 520.66 371.504 520.68 cv
371.551 520.707 371.586 520.73 371.609 520.758 cv
371.629 520.789 371.637 520.824 371.641 520.863 cv
371.641 524.945 li
371.637 525.359 371.668 525.687 371.73 525.934 cv
371.789 526.18 371.879 526.391 372.004 526.562 cv
372.121 526.742 372.277 526.875 372.469 526.969 cv
372.652 527.066 372.871 527.117 373.121 527.113 cv
373.441 527.117 373.762 527 374.086 526.77 cv
374.402 526.543 374.742 526.207 375.102 525.762 cv
375.102 520.863 li
375.102 520.824 375.109 520.789 375.129 520.758 cv
375.145 520.73 375.18 520.707 375.234 520.68 cv
375.285 520.66 375.352 520.645 375.434 520.633 cv
375.512 520.629 375.617 520.625 375.75 520.621 cv
375.871 520.625 375.977 520.629 376.063 520.633 cv
376.145 520.645 376.207 520.66 376.254 520.68 cv
376.297 520.707 376.332 520.73 376.359 520.758 cv
376.379 520.789 376.391 520.824 376.395 520.863 cv
cp
f
385.25 524.273 mo
385.246 524.883 385.18 525.434 385.051 525.918 cv
384.914 526.406 384.719 526.82 384.465 527.16 cv
384.207 527.504 383.891 527.766 383.52 527.945 cv
383.145 528.129 382.719 528.215 382.234 528.219 cv
382.008 528.215 381.801 528.195 381.613 528.152 cv
381.426 528.105 381.238 528.035 381.059 527.937 cv
380.871 527.84 380.691 527.715 380.512 527.562 cv
380.328 527.414 380.137 527.234 379.938 527.02 cv
379.938 527.875 li
379.938 527.922 379.926 527.957 379.906 527.984 cv
379.883 528.02 379.848 528.043 379.805 528.059 cv
379.754 528.074 379.695 528.086 379.629 528.102 cv
379.555 528.109 379.465 528.117 379.359 528.117 cv
379.25 528.117 379.164 528.109 379.094 528.102 cv
379.02 528.086 378.957 528.074 378.914 528.059 cv
378.863 528.043 378.832 528.02 378.82 527.984 cv
378.801 527.957 378.793 527.922 378.797 527.875 cv
378.797 517.465 li
378.793 517.426 378.805 517.391 378.824 517.355 cv
378.84 517.328 378.871 517.301 378.926 517.277 cv
378.973 517.258 379.039 517.242 379.125 517.23 cv
379.203 517.223 379.309 517.219 379.438 517.215 cv
379.566 517.219 379.672 517.223 379.758 517.23 cv
379.836 517.242 379.902 517.258 379.949 517.277 cv
379.996 517.301 380.027 517.328 380.051 517.355 cv
380.066 517.391 380.078 517.426 380.082 517.465 cv
380.082 521.664 li
380.289 521.453 380.492 521.273 380.688 521.129 cv
380.883 520.984 381.07 520.867 381.258 520.773 cv
381.441 520.687 381.629 520.621 381.82 520.574 cv
382.004 520.535 382.203 520.512 382.414 520.512 cv
382.918 520.512 383.352 520.613 383.719 520.816 cv
384.078 521.02 384.371 521.293 384.598 521.629 cv
384.82 521.973 384.988 522.371 385.094 522.828 cv
385.195 523.285 385.246 523.766 385.25 524.273 cv
cp
383.918 524.422 mo
383.914 524.066 383.887 523.719 383.836 523.379 cv
383.777 523.043 383.684 522.746 383.547 522.484 cv
383.41 522.227 383.23 522.016 383.008 521.855 cv
382.781 521.699 382.5 521.621 382.168 521.617 cv
382 521.621 381.836 521.645 381.676 521.687 cv
381.512 521.738 381.348 521.816 381.18 521.922 cv
381.012 522.035 380.836 522.176 380.66 522.344 cv
380.477 522.52 380.285 522.734 380.082 522.988 cv
380.082 525.785 li
380.438 526.219 380.777 526.551 381.102 526.773 cv
381.426 527.004 381.762 527.117 382.113 527.113 cv
382.434 527.117 382.711 527.039 382.945 526.879 cv
383.172 526.727 383.359 526.52 383.504 526.258 cv
383.648 526.004 383.754 525.715 383.82 525.395 cv
383.883 525.078 383.914 524.754 383.918 524.422 cv
cp
f
390.406 524.137 mo
390.406 524.34 390.383 524.477 390.336 524.555 cv
390.289 524.633 390.219 524.672 390.133 524.672 cv
386.875 524.672 li
386.781 524.672 386.715 524.633 386.668 524.551 cv
386.621 524.473 386.598 524.336 386.598 524.137 cv
386.598 523.941 386.621 523.801 386.668 523.723 cv
386.715 523.645 386.781 523.605 386.875 523.605 cv
390.133 523.605 li
390.172 523.605 390.211 523.613 390.246 523.629 cv
390.277 523.645 390.305 523.676 390.332 523.719 cv
390.352 523.766 390.371 523.82 390.387 523.887 cv
390.398 523.957 390.406 524.043 390.406 524.137 cv
cp
f
393.66 527.867 mo
393.656 527.91 393.648 527.945 393.629 527.977 cv
393.605 528.008 393.566 528.035 393.52 528.051 cv
393.465 528.07 393.398 528.082 393.313 528.098 cv
393.227 528.109 393.117 528.117 392.992 528.117 cv
392.863 528.117 392.758 528.109 392.672 528.098 cv
392.582 528.082 392.512 528.07 392.461 528.051 cv
392.406 528.035 392.371 528.008 392.352 527.977 cv
392.328 527.945 392.316 527.91 392.32 527.867 cv
392.32 518.187 li
392.316 518.148 392.328 518.113 392.355 518.078 cv
392.375 518.051 392.414 518.023 392.473 518.004 cv
392.523 517.988 392.594 517.973 392.684 517.957 cv
392.766 517.945 392.867 517.941 392.992 517.937 cv
393.117 517.941 393.227 517.945 393.313 517.957 cv
393.398 517.973 393.465 517.988 393.52 518.004 cv
393.566 518.023 393.605 518.051 393.629 518.078 cv
393.648 518.113 393.656 518.148 393.66 518.187 cv
cp
f
406.648 527.875 mo
406.645 527.922 406.637 527.957 406.617 527.98 cv
406.594 528.012 406.559 528.035 406.516 528.055 cv
406.465 528.074 406.398 528.086 406.32 528.102 cv
406.234 528.109 406.133 528.117 406.008 528.117 cv
405.875 528.117 405.766 528.109 405.688 528.102 cv
405.602 528.086 405.535 528.074 405.488 528.055 cv
405.434 528.035 405.398 528.012 405.383 527.98 cv
405.359 527.957 405.352 527.922 405.352 527.875 cv
405.352 523.613 li
405.352 523.32 405.324 523.051 405.273 522.805 cv
405.219 522.562 405.137 522.352 405.023 522.172 cv
404.91 521.996 404.766 521.859 404.59 521.766 cv
404.41 521.672 404.199 521.625 403.965 521.625 cv
403.668 521.625 403.371 521.742 403.074 521.969 cv
402.77 522.203 402.441 522.535 402.086 522.973 cv
402.086 527.875 li
402.082 527.922 402.07 527.957 402.055 527.98 cv
402.031 528.012 402 528.035 401.953 528.055 cv
401.902 528.074 401.836 528.086 401.754 528.102 cv
401.668 528.109 401.563 528.117 401.441 528.117 cv
401.32 528.117 401.219 528.109 401.133 528.102 cv
401.047 528.086 400.977 528.074 400.93 528.055 cv
400.875 528.035 400.844 528.012 400.828 527.98 cv
400.809 527.957 400.797 527.922 400.801 527.875 cv
400.801 523.613 li
400.797 523.32 400.77 523.051 400.715 522.805 cv
400.656 522.562 400.57 522.352 400.457 522.172 cv
400.344 521.996 400.199 521.859 400.027 521.766 cv
399.848 521.672 399.641 521.625 399.406 521.625 cv
399.105 521.625 398.809 521.742 398.508 521.969 cv
398.207 522.203 397.879 522.535 397.527 522.973 cv
397.527 527.875 li
397.523 527.922 397.512 527.957 397.496 527.98 cv
397.473 528.012 397.441 528.035 397.395 528.055 cv
397.348 528.074 397.281 528.086 397.203 528.102 cv
397.117 528.109 397.012 528.117 396.883 528.117 cv
396.754 528.117 396.648 528.109 396.57 528.102 cv
396.484 528.086 396.418 528.074 396.371 528.055 cv
396.316 528.035 396.285 528.012 396.27 527.98 cv
396.25 527.957 396.238 527.922 396.242 527.875 cv
396.242 520.863 li
396.238 520.824 396.246 520.789 396.266 520.758 cv
396.277 520.73 396.309 520.707 396.359 520.68 cv
396.402 520.66 396.465 520.645 396.539 520.633 cv
396.609 520.629 396.703 520.625 396.828 520.621 cv
396.938 520.625 397.035 520.629 397.113 520.633 cv
397.188 520.645 397.246 520.66 397.289 520.68 cv
397.328 520.707 397.355 520.73 397.375 520.758 cv
397.391 520.789 397.398 520.824 397.402 520.863 cv
397.402 521.789 li
397.793 521.348 398.176 521.027 398.551 520.82 cv
398.918 520.617 399.297 520.512 399.68 520.512 cv
399.969 520.512 400.227 520.547 400.461 520.613 cv
400.688 520.684 400.895 520.777 401.074 520.898 cv
401.25 521.02 401.398 521.164 401.527 521.332 cv
401.648 521.504 401.754 521.695 401.84 521.898 cv
402.07 521.648 402.293 521.434 402.504 521.254 cv
402.715 521.082 402.918 520.937 403.113 520.824 cv
403.309 520.719 403.496 520.641 403.68 520.586 cv
403.863 520.539 404.051 520.512 404.238 520.512 cv
404.691 520.512 405.07 520.594 405.375 520.75 cv
405.68 520.914 405.926 521.125 406.121 521.387 cv
406.309 521.652 406.445 521.961 406.527 522.316 cv
406.605 522.672 406.645 523.047 406.648 523.441 cv
cp
f
414.277 527.883 mo
414.273 527.945 414.254 527.992 414.215 528.023 cv
414.172 528.055 414.113 528.078 414.043 528.094 cv
413.965 528.109 413.859 528.117 413.723 528.117 cv
413.586 528.117 413.477 528.109 413.398 528.094 cv
413.313 528.078 413.254 528.055 413.223 528.023 cv
413.184 527.992 413.168 527.945 413.172 527.883 cv
413.172 527.184 li
412.863 527.512 412.52 527.766 412.145 527.945 cv
411.766 528.129 411.367 528.215 410.949 528.219 cv
410.574 528.215 410.242 528.168 409.945 528.074 cv
409.648 527.977 409.395 527.84 409.184 527.656 cv
408.973 527.477 408.809 527.254 408.691 526.988 cv
408.574 526.727 408.516 526.426 408.52 526.082 cv
408.516 525.691 408.594 525.348 408.758 525.055 cv
408.914 524.766 409.148 524.523 409.453 524.332 cv
409.754 524.141 410.121 523.996 410.559 523.898 cv
410.992 523.805 411.484 523.758 412.031 523.754 cv
413 523.754 li
413 523.207 li
412.996 522.937 412.969 522.699 412.914 522.492 cv
412.855 522.285 412.762 522.113 412.637 521.973 cv
412.504 521.836 412.34 521.73 412.141 521.66 cv
411.934 521.59 411.684 521.555 411.395 521.555 cv
411.074 521.555 410.789 521.594 410.539 521.668 cv
410.281 521.746 410.063 521.828 409.875 521.918 cv
409.688 522.012 409.527 522.098 409.402 522.168 cv
409.27 522.246 409.176 522.281 409.117 522.281 cv
409.074 522.281 409.039 522.273 409.008 522.25 cv
408.977 522.234 408.949 522.203 408.926 522.156 cv
408.902 522.117 408.883 522.062 408.875 521.996 cv
408.859 521.934 408.855 521.863 408.859 521.781 cv
408.855 521.656 408.863 521.551 408.887 521.473 cv
408.902 521.398 408.949 521.328 409.02 521.258 cv
409.09 521.191 409.211 521.113 409.383 521.023 cv
409.555 520.934 409.75 520.852 409.973 520.773 cv
410.195 520.703 410.441 520.641 410.707 520.586 cv
410.973 520.539 411.238 520.512 411.512 520.512 cv
412.012 520.512 412.441 520.57 412.793 520.684 cv
413.145 520.801 413.43 520.969 413.652 521.187 cv
413.867 521.41 414.027 521.684 414.129 522.008 cv
414.227 522.34 414.273 522.723 414.277 523.152 cv
cp
413 524.68 mo
411.898 524.68 li
411.543 524.684 411.238 524.715 410.98 524.77 cv
410.719 524.832 410.504 524.918 410.332 525.035 cv
410.16 525.152 410.035 525.293 409.957 525.457 cv
409.875 525.621 409.832 525.809 409.836 526.02 cv
409.832 526.387 409.949 526.68 410.18 526.891 cv
410.41 527.109 410.734 527.215 411.152 527.215 cv
411.488 527.215 411.801 527.129 412.09 526.957 cv
412.379 526.785 412.68 526.523 413 526.168 cv
cp
f
422.496 521.18 mo
422.492 521.363 422.469 521.496 422.422 521.574 cv
422.371 521.656 422.309 521.695 422.234 521.695 cv
421.227 521.695 li
421.406 521.883 421.535 522.09 421.609 522.316 cv
421.68 522.543 421.715 522.777 421.719 523.02 cv
421.715 523.426 421.648 523.785 421.523 524.098 cv
421.391 524.41 421.207 524.676 420.965 524.887 cv
420.723 525.105 420.434 525.27 420.105 525.383 cv
419.77 525.5 419.402 525.559 419 525.555 cv
418.711 525.559 418.438 525.52 418.184 525.441 cv
417.922 525.367 417.727 525.273 417.59 525.156 cv
417.496 525.254 417.418 525.359 417.359 525.477 cv
417.297 525.598 417.266 525.734 417.27 525.887 cv
417.266 526.07 417.352 526.223 417.523 526.34 cv
417.691 526.465 417.914 526.527 418.195 526.535 cv
420.027 526.613 li
420.375 526.625 420.691 526.672 420.984 526.758 cv
421.273 526.844 421.527 526.969 421.742 527.125 cv
421.953 527.285 422.121 527.477 422.242 527.707 cv
422.359 527.941 422.418 528.211 422.422 528.516 cv
422.418 528.836 422.352 529.141 422.219 529.434 cv
422.082 529.723 421.875 529.977 421.598 530.199 cv
421.316 530.418 420.961 530.594 420.531 530.723 cv
420.102 530.848 419.594 530.91 419.008 530.914 cv
418.438 530.91 417.953 530.863 417.559 530.77 cv
417.16 530.672 416.836 530.539 416.582 530.375 cv
416.328 530.207 416.145 530.012 416.031 529.781 cv
415.914 529.547 415.855 529.293 415.859 529.027 cv
415.855 528.855 415.875 528.691 415.922 528.531 cv
415.961 528.367 416.023 528.215 416.109 528.07 cv
416.191 527.926 416.301 527.789 416.43 527.652 cv
416.555 527.523 416.699 527.391 416.871 527.262 cv
416.613 527.133 416.426 526.969 416.305 526.77 cv
416.184 526.574 416.125 526.363 416.125 526.129 cv
416.125 525.816 416.188 525.531 416.316 525.281 cv
416.445 525.031 416.605 524.809 416.801 524.609 cv
416.637 524.418 416.512 524.203 416.418 523.961 cv
416.324 523.723 416.277 523.43 416.277 523.082 cv
416.277 522.687 416.344 522.328 416.48 522.008 cv
416.613 521.691 416.801 521.426 417.043 521.207 cv
417.281 520.992 417.566 520.824 417.902 520.703 cv
418.234 520.59 418.602 520.531 419 520.527 cv
419.211 520.531 419.41 520.543 419.594 520.562 cv
419.777 520.59 419.949 520.621 420.113 520.66 cv
422.234 520.66 li
422.32 520.664 422.387 520.707 422.43 520.789 cv
422.473 520.879 422.492 521.008 422.496 521.18 cv
cp
420.488 523.027 mo
420.484 522.555 420.352 522.184 420.094 521.91 cv
419.828 521.645 419.457 521.508 418.977 521.508 cv
418.723 521.508 418.504 521.551 418.324 521.633 cv
418.137 521.719 417.984 521.832 417.863 521.977 cv
417.742 522.125 417.652 522.293 417.594 522.48 cv
417.531 522.668 417.5 522.867 417.504 523.074 cv
417.5 523.539 417.633 523.902 417.895 524.168 cv
418.156 524.434 418.523 524.566 419 524.562 cv
419.25 524.566 419.469 524.527 419.66 524.441 cv
419.844 524.363 420 524.25 420.125 524.109 cv
420.246 523.969 420.336 523.805 420.398 523.613 cv
420.453 523.43 420.484 523.234 420.488 523.027 cv
cp
421.133 528.586 mo
421.129 528.281 421.004 528.051 420.762 527.887 cv
420.512 527.727 420.18 527.637 419.762 527.625 cv
417.945 527.562 li
417.777 527.695 417.641 527.82 417.539 527.934 cv
417.43 528.051 417.348 528.16 417.285 528.27 cv
417.223 528.375 417.18 528.48 417.156 528.586 cv
417.133 528.687 417.121 528.793 417.121 528.902 cv
417.121 529.238 417.289 529.492 417.633 529.672 cv
417.973 529.844 418.453 529.934 419.07 529.934 cv
419.457 529.934 419.781 529.895 420.047 529.82 cv
420.305 529.742 420.516 529.641 420.68 529.52 cv
420.836 529.391 420.953 529.25 421.027 529.09 cv
421.094 528.93 421.129 528.762 421.133 528.586 cv
cp
f
430.059 524.066 mo
430.055 524.27 430.004 524.41 429.906 524.496 cv
429.801 524.582 429.684 524.625 429.559 524.625 cv
424.941 524.625 li
424.938 525.016 424.977 525.367 425.059 525.68 cv
425.133 525.992 425.266 526.262 425.449 526.48 cv
425.629 526.707 425.863 526.879 426.16 526.996 cv
426.449 527.121 426.809 527.18 427.234 527.176 cv
427.566 527.18 427.863 527.152 428.125 527.094 cv
428.387 527.043 428.613 526.98 428.805 526.91 cv
428.992 526.844 429.148 526.785 429.273 526.727 cv
429.395 526.676 429.488 526.648 429.551 526.645 cv
429.586 526.648 429.617 526.656 429.648 526.672 cv
429.676 526.691 429.699 526.719 429.719 526.754 cv
429.73 526.793 429.742 526.844 429.754 526.906 cv
429.758 526.973 429.762 527.051 429.766 527.145 cv
429.762 527.215 429.758 527.273 429.758 527.32 cv
429.75 527.367 429.746 527.41 429.738 527.449 cv
429.73 527.488 429.715 527.523 429.699 527.555 cv
429.676 527.586 429.652 527.617 429.629 527.645 cv
429.598 527.676 429.516 527.723 429.375 527.785 cv
429.234 527.852 429.051 527.914 428.828 527.977 cv
428.602 528.039 428.344 528.094 428.051 528.145 cv
427.758 528.191 427.445 528.215 427.113 528.219 cv
426.535 528.215 426.027 528.137 425.598 527.977 cv
425.16 527.816 424.797 527.578 424.504 527.262 cv
424.203 526.945 423.98 526.551 423.832 526.07 cv
423.684 525.594 423.609 525.035 423.609 524.398 cv
423.609 523.801 423.684 523.262 423.84 522.777 cv
423.992 522.301 424.219 521.891 424.516 521.555 cv
424.809 521.219 425.164 520.961 425.578 520.781 cv
425.992 520.602 426.457 520.512 426.973 520.512 cv
427.523 520.512 427.992 520.602 428.379 520.777 cv
428.766 520.957 429.082 521.195 429.336 521.492 cv
429.582 521.793 429.766 522.145 429.883 522.543 cv
429.996 522.949 430.055 523.379 430.059 523.832 cv
cp
428.766 523.684 mo
428.781 523.008 428.629 522.477 428.313 522.094 cv
427.996 521.711 427.527 521.52 426.91 521.516 cv
426.586 521.52 426.305 521.578 426.066 521.695 cv
425.824 521.816 425.625 521.977 425.465 522.172 cv
425.301 522.371 425.176 522.602 425.09 522.863 cv
425 523.125 424.949 523.398 424.941 523.684 cv
cp
f
436.426 525.965 mo
436.422 526.328 436.355 526.648 436.227 526.926 cv
436.094 527.207 435.906 527.441 435.664 527.633 cv
435.418 527.828 435.125 527.973 434.789 528.07 cv
434.449 528.168 434.078 528.215 433.676 528.219 cv
433.422 528.215 433.184 528.195 432.961 528.16 cv
432.734 528.117 432.535 528.07 432.355 528.012 cv
432.176 527.953 432.023 527.891 431.898 527.824 cv
431.773 527.762 431.68 527.703 431.625 527.648 cv
431.566 527.598 431.527 527.527 431.504 527.43 cv
431.477 527.34 431.465 527.211 431.465 527.051 cv
431.465 526.953 431.469 526.871 431.48 526.801 cv
431.488 526.734 431.5 526.68 431.52 526.637 cv
431.531 526.598 431.555 526.566 431.582 526.547 cv
431.609 526.531 431.641 526.523 431.68 526.52 cv
431.734 526.523 431.82 526.559 431.934 526.625 cv
432.043 526.699 432.18 526.777 432.348 526.855 cv
432.508 526.941 432.699 527.016 432.926 527.086 cv
433.145 527.156 433.402 527.191 433.699 527.191 cv
433.914 527.191 434.113 527.168 434.293 527.121 cv
434.469 527.074 434.621 527.008 434.75 526.914 cv
434.879 526.828 434.98 526.711 435.051 526.566 cv
435.121 526.43 435.156 526.262 435.156 526.066 cv
435.156 525.871 435.105 525.707 435.004 525.57 cv
434.902 525.437 434.766 525.316 434.602 525.211 cv
434.434 525.109 434.25 525.02 434.043 524.934 cv
433.832 524.855 433.617 524.77 433.398 524.68 cv
433.18 524.594 432.965 524.492 432.754 524.379 cv
432.543 524.27 432.352 524.137 432.188 523.973 cv
432.016 523.816 431.883 523.621 431.785 523.395 cv
431.68 523.172 431.629 522.906 431.633 522.594 cv
431.629 522.32 431.684 522.055 431.793 521.801 cv
431.898 521.551 432.059 521.332 432.273 521.141 cv
432.484 520.953 432.75 520.801 433.07 520.684 cv
433.391 520.57 433.762 520.512 434.191 520.512 cv
434.375 520.512 434.563 520.527 434.75 520.559 cv
434.934 520.59 435.102 520.629 435.258 520.676 cv
435.406 520.723 435.535 520.773 435.645 520.828 cv
435.746 520.883 435.828 520.934 435.887 520.973 cv
435.938 521.02 435.973 521.055 435.996 521.082 cv
436.012 521.113 436.027 521.148 436.035 521.184 cv
436.043 521.227 436.051 521.273 436.059 521.328 cv
436.066 521.387 436.07 521.457 436.07 521.539 cv
436.07 521.629 436.066 521.707 436.059 521.77 cv
436.051 521.84 436.035 521.891 436.02 521.93 cv
435.996 521.973 435.977 522.004 435.953 522.02 cv
435.926 522.039 435.895 522.047 435.867 522.047 cv
435.816 522.047 435.75 522.02 435.664 521.961 cv
435.574 521.906 435.461 521.844 435.32 521.777 cv
435.18 521.715 435.012 521.656 434.824 521.594 cv
434.633 521.539 434.418 521.508 434.176 521.508 cv
433.953 521.508 433.762 521.535 433.598 521.582 cv
433.43 521.637 433.293 521.707 433.188 521.793 cv
433.082 521.887 433 521.992 432.949 522.117 cv
432.891 522.242 432.863 522.379 432.867 522.523 cv
432.863 522.727 432.914 522.895 433.02 523.031 cv
433.121 523.172 433.258 523.293 433.426 523.395 cv
433.59 523.5 433.781 523.594 433.996 523.676 cv
434.207 523.762 434.422 523.848 434.645 523.934 cv
434.863 524.023 435.082 524.125 435.301 524.23 cv
435.516 524.34 435.707 524.469 435.875 524.625 cv
436.039 524.781 436.172 524.969 436.273 525.187 cv
436.371 525.406 436.422 525.668 436.426 525.965 cv
cp
f
180.938 16.016 mo
180.996 16.207 181.035 16.355 181.055 16.461 cv
181.066 16.574 181.047 16.656 180.992 16.707 cv
180.934 16.762 180.832 16.793 180.688 16.809 cv
180.539 16.82 180.34 16.828 180.09 16.828 cv
179.82 16.828 179.613 16.824 179.469 16.816 cv
179.316 16.809 179.203 16.793 179.129 16.77 cv
179.047 16.746 178.992 16.715 178.965 16.672 cv
178.93 16.633 178.902 16.578 178.887 16.508 cv
178.211 14.48 li
174.422 14.48 li
173.785 16.453 li
173.762 16.527 173.734 16.59 173.703 16.637 cv
173.668 16.687 173.613 16.727 173.539 16.754 cv
173.461 16.781 173.355 16.797 173.219 16.812 cv
173.078 16.82 172.895 16.828 172.676 16.828 cv
172.434 16.828 172.25 16.82 172.117 16.805 cv
171.98 16.789 171.887 16.754 171.836 16.691 cv
171.781 16.637 171.762 16.551 171.781 16.437 cv
171.793 16.332 171.832 16.187 171.898 16 cv
175.008 7.05499 li
175.035 6.96899 175.074 6.89801 175.117 6.84003 cv
175.156 6.789 175.223 6.74597 175.316 6.71503 cv
175.406 6.68701 175.531 6.672 175.691 6.65997 cv
175.852 6.65601 176.063 6.65198 176.332 6.64801 cv
176.637 6.65198 176.883 6.65601 177.063 6.65997 cv
177.242 6.672 177.383 6.68701 177.488 6.71503 cv
177.586 6.74597 177.66 6.789 177.707 6.84399 cv
177.75 6.90198 177.785 6.97998 177.82 7.078 cv
cp
176.309 8.62097 mo
176.301 8.62097 li
174.875 12.906 li
177.734 12.906 li
cp
f
188.313 9.55902 mo
188.309 9.586 188.309 9.617 188.309 9.65198 cv
188.305 9.69098 188.301 9.72998 188.293 9.77301 cv
188.285 9.81598 188.273 9.867 188.262 9.922 cv
188.246 9.97998 188.23 10.047 188.211 10.117 cv
186.125 16.406 li
186.098 16.496 186.063 16.57 186.02 16.621 cv
185.973 16.68 185.898 16.723 185.801 16.75 cv
185.695 16.781 185.559 16.797 185.387 16.812 cv
185.211 16.82 184.984 16.828 184.707 16.828 cv
184.43 16.828 184.203 16.82 184.031 16.809 cv
183.855 16.793 183.719 16.773 183.621 16.742 cv
183.52 16.715 183.449 16.672 183.406 16.613 cv
183.359 16.562 183.324 16.492 183.301 16.406 cv
181.215 10.117 li
181.184 10.016 181.156 9.922 181.141 9.84003 cv
181.117 9.758 181.109 9.69897 181.109 9.65997 cv
181.105 9.62903 181.102 9.59399 181.105 9.55902 cv
181.102 9.508 181.117 9.461 181.148 9.422 cv
181.176 9.383 181.227 9.35199 181.301 9.32397 cv
181.371 9.30103 181.469 9.28101 181.598 9.27002 cv
181.723 9.26202 181.883 9.258 182.078 9.25403 cv
182.289 9.258 182.461 9.26599 182.594 9.27301 cv
182.719 9.289 182.824 9.30499 182.902 9.328 cv
182.977 9.35199 183.027 9.38702 183.063 9.42999 cv
183.09 9.47699 183.117 9.53101 183.141 9.59003 cv
184.723 14.691 li
184.77 14.887 li
184.816 14.691 li
186.375 9.59003 li
186.387 9.53101 186.41 9.47699 186.445 9.42999 cv
186.477 9.38702 186.531 9.35199 186.605 9.328 cv
186.676 9.30499 186.773 9.289 186.898 9.27301 cv
187.02 9.26599 187.18 9.258 187.379 9.25403 cv
187.57 9.258 187.727 9.26202 187.848 9.27002 cv
187.969 9.28101 188.063 9.30103 188.133 9.32397 cv
188.199 9.35199 188.246 9.383 188.273 9.422 cv
188.297 9.461 188.309 9.508 188.313 9.55902 cv
cp
f
195.773 12.84 mo
195.77 13.078 195.719 13.254 195.613 13.367 cv
195.504 13.484 195.355 13.543 195.176 13.539 cv
190.941 13.539 li
190.938 13.84 190.973 14.109 191.047 14.348 cv
191.113 14.59 191.227 14.793 191.383 14.961 cv
191.535 15.133 191.73 15.262 191.973 15.348 cv
192.211 15.437 192.5 15.48 192.844 15.48 cv
193.184 15.48 193.484 15.457 193.746 15.406 cv
194.004 15.359 194.23 15.305 194.422 15.242 cv
194.609 15.184 194.766 15.129 194.895 15.078 cv
195.016 15.031 195.117 15.008 195.199 15.004 cv
195.242 15.008 195.281 15.016 195.316 15.031 cv
195.344 15.051 195.371 15.082 195.391 15.129 cv
195.41 15.176 195.422 15.242 195.434 15.328 cv
195.438 15.414 195.441 15.523 195.445 15.652 cv
195.441 15.77 195.441 15.867 195.438 15.945 cv
195.43 16.027 195.422 16.094 195.414 16.148 cv
195.402 16.207 195.387 16.258 195.367 16.293 cv
195.348 16.336 195.32 16.371 195.289 16.406 cv
195.254 16.445 195.16 16.496 195.012 16.555 cv
194.855 16.621 194.664 16.684 194.434 16.738 cv
194.195 16.801 193.926 16.848 193.629 16.895 cv
193.324 16.934 193.004 16.957 192.664 16.961 cv
192.043 16.957 191.5 16.883 191.039 16.727 cv
190.57 16.574 190.184 16.336 189.875 16.02 cv
189.559 15.703 189.324 15.305 189.176 14.82 cv
189.02 14.34 188.945 13.773 188.949 13.117 cv
188.945 12.504 189.023 11.945 189.188 11.449 cv
189.344 10.953 189.578 10.535 189.891 10.187 cv
190.195 9.84399 190.57 9.578 191.008 9.39502 cv
191.445 9.21503 191.938 9.125 192.492 9.12097 cv
193.07 9.125 193.57 9.211 193.984 9.37903 cv
194.398 9.55499 194.734 9.79303 195 10.094 cv
195.262 10.398 195.457 10.758 195.586 11.172 cv
195.707 11.59 195.77 12.039 195.773 12.527 cv
cp
193.871 12.277 mo
193.883 11.727 193.773 11.293 193.539 10.98 cv
193.305 10.668 192.938 10.512 192.445 10.508 cv
192.195 10.512 191.98 10.559 191.797 10.648 cv
191.609 10.746 191.457 10.871 191.336 11.027 cv
191.211 11.187 191.117 11.375 191.055 11.59 cv
190.988 11.805 190.949 12.035 190.941 12.277 cv
cp
f
201.848 10.211 mo
201.848 10.402 201.84 10.555 201.832 10.672 cv
201.816 10.793 201.801 10.887 201.785 10.953 cv
201.762 11.023 201.734 11.07 201.703 11.094 cv
201.664 11.121 201.621 11.133 201.574 11.133 cv
201.527 11.133 201.48 11.125 201.434 11.105 cv
201.379 11.09 201.32 11.07 201.258 11.047 cv
201.188 11.027 201.117 11.008 201.043 10.988 cv
200.961 10.973 200.875 10.965 200.785 10.961 cv
200.672 10.965 200.563 10.984 200.457 11.027 cv
200.348 11.074 200.234 11.145 200.121 11.234 cv
200 11.328 199.879 11.453 199.754 11.605 cv
199.625 11.766 199.488 11.957 199.344 12.184 cv
199.344 16.516 li
199.34 16.57 199.324 16.613 199.297 16.652 cv
199.262 16.691 199.207 16.727 199.137 16.75 cv
199.059 16.777 198.961 16.793 198.836 16.809 cv
198.711 16.82 198.551 16.828 198.363 16.828 cv
198.168 16.828 198.012 16.82 197.887 16.809 cv
197.762 16.793 197.66 16.777 197.586 16.75 cv
197.508 16.727 197.453 16.691 197.426 16.652 cv
197.391 16.613 197.375 16.57 197.379 16.516 cv
197.379 9.56598 li
197.375 9.52002 197.391 9.47302 197.418 9.42999 cv
197.441 9.39502 197.488 9.36298 197.559 9.33197 cv
197.625 9.30902 197.711 9.289 197.82 9.27301 cv
197.926 9.26599 198.059 9.258 198.223 9.25403 cv
198.387 9.258 198.523 9.26599 198.633 9.27301 cv
198.738 9.289 198.824 9.30902 198.887 9.33197 cv
198.945 9.36298 198.988 9.39502 199.016 9.42999 cv
199.039 9.47302 199.051 9.52002 199.055 9.56598 cv
199.055 10.43 li
199.234 10.172 199.406 9.961 199.57 9.789 cv
199.727 9.625 199.883 9.48798 200.031 9.38702 cv
200.176 9.289 200.32 9.22302 200.465 9.17999 cv
200.609 9.14502 200.754 9.125 200.902 9.12097 cv
200.969 9.125 201.043 9.12903 201.121 9.133 cv
201.199 9.14502 201.277 9.15601 201.363 9.172 cv
201.441 9.19098 201.516 9.211 201.582 9.23401 cv
201.641 9.258 201.688 9.28497 201.719 9.30902 cv
201.746 9.34003 201.766 9.367 201.781 9.39502 cv
201.793 9.42999 201.805 9.47302 201.816 9.52301 cv
201.824 9.58197 201.832 9.664 201.84 9.77002 cv
201.844 9.87903 201.848 10.027 201.848 10.211 cv
cp
f
208.602 16.539 mo
208.598 16.617 208.57 16.672 208.523 16.711 cv
208.469 16.754 208.387 16.781 208.277 16.801 cv
208.16 16.816 207.996 16.828 207.781 16.828 cv
207.543 16.828 207.371 16.816 207.27 16.801 cv
207.16 16.781 207.086 16.754 207.047 16.711 cv
207 16.672 206.98 16.617 206.98 16.539 cv
206.98 15.988 li
206.691 16.297 206.363 16.535 206 16.703 cv
205.633 16.875 205.227 16.957 204.781 16.961 cv
204.41 16.957 204.07 16.91 203.762 16.816 cv
203.453 16.723 203.188 16.582 202.961 16.387 cv
202.734 16.199 202.559 15.965 202.434 15.684 cv
202.309 15.406 202.246 15.078 202.25 14.699 cv
202.246 14.301 202.324 13.949 202.484 13.645 cv
202.641 13.348 202.879 13.102 203.195 12.906 cv
203.508 12.715 203.898 12.57 204.367 12.473 cv
204.836 12.383 205.379 12.336 205.996 12.332 cv
206.676 12.332 li
206.676 11.91 li
206.676 11.695 206.652 11.504 206.609 11.34 cv
206.563 11.18 206.488 11.043 206.391 10.93 cv
206.285 10.824 206.152 10.742 205.984 10.687 cv
205.813 10.637 205.602 10.613 205.359 10.609 cv
205.027 10.613 204.734 10.648 204.48 10.719 cv
204.219 10.793 203.992 10.875 203.797 10.961 cv
203.598 11.055 203.434 11.133 203.305 11.203 cv
203.168 11.277 203.059 11.316 202.98 11.312 cv
202.918 11.316 202.867 11.297 202.828 11.258 cv
202.781 11.223 202.746 11.172 202.719 11.102 cv
202.688 11.039 202.664 10.953 202.652 10.852 cv
202.633 10.754 202.625 10.645 202.629 10.523 cv
202.625 10.363 202.641 10.238 202.668 10.141 cv
202.691 10.051 202.738 9.96503 202.816 9.88702 cv
202.887 9.81201 203.016 9.72998 203.199 9.64099 cv
203.379 9.55103 203.59 9.46503 203.836 9.38702 cv
204.078 9.30902 204.348 9.24597 204.637 9.19501 cv
204.926 9.14801 205.223 9.125 205.531 9.12097 cv
206.074 9.125 206.539 9.17603 206.926 9.28101 cv
207.313 9.39099 207.633 9.55499 207.883 9.77301 cv
208.133 9.992 208.313 10.277 208.43 10.625 cv
208.539 10.977 208.598 11.391 208.602 11.863 cv
cp
206.676 13.562 mo
205.926 13.562 li
205.609 13.566 205.34 13.59 205.117 13.633 cv
204.891 13.684 204.707 13.754 204.57 13.844 cv
204.426 13.941 204.324 14.055 204.262 14.184 cv
204.195 14.32 204.16 14.469 204.164 14.637 cv
204.16 14.93 204.254 15.16 204.441 15.324 cv
204.625 15.492 204.883 15.574 205.211 15.574 cv
205.484 15.574 205.734 15.504 205.969 15.363 cv
206.195 15.223 206.434 15.02 206.676 14.746 cv
cp
f
216.828 10.047 mo
216.824 10.301 216.797 10.484 216.742 10.602 cv
216.684 10.723 216.613 10.781 216.535 10.781 cv
215.715 10.781 li
215.828 10.906 215.91 11.051 215.961 11.207 cv
216.008 11.367 216.031 11.531 216.035 11.699 cv
216.031 12.109 215.965 12.469 215.832 12.781 cv
215.695 13.098 215.5 13.363 215.25 13.574 cv
214.996 13.793 214.695 13.957 214.34 14.066 cv
213.98 14.184 213.582 14.238 213.152 14.234 cv
212.926 14.238 212.715 14.211 212.512 14.152 cv
212.309 14.102 212.152 14.039 212.043 13.961 cv
211.98 14.031 211.922 14.109 211.875 14.203 cv
211.824 14.297 211.801 14.402 211.805 14.512 cv
211.801 14.668 211.867 14.789 212 14.883 cv
212.129 14.98 212.316 15.035 212.559 15.043 cv
214.25 15.105 li
214.645 15.121 214.996 15.18 215.305 15.273 cv
215.613 15.375 215.875 15.508 216.086 15.68 cv
216.297 15.855 216.457 16.066 216.566 16.309 cv
216.676 16.555 216.73 16.828 216.734 17.141 cv
216.73 17.477 216.656 17.801 216.508 18.109 cv
216.359 18.41 216.133 18.672 215.832 18.898 cv
215.527 19.117 215.148 19.297 214.695 19.43 cv
214.238 19.559 213.707 19.621 213.105 19.625 cv
212.508 19.621 212.004 19.574 211.586 19.484 cv
211.168 19.387 210.824 19.258 210.559 19.094 cv
210.289 18.926 210.094 18.727 209.977 18.5 cv
209.852 18.266 209.793 18.012 209.793 17.738 cv
209.793 17.566 209.813 17.406 209.859 17.25 cv
209.898 17.094 209.965 16.941 210.055 16.801 cv
210.137 16.656 210.242 16.523 210.367 16.391 cv
210.492 16.262 210.633 16.137 210.797 16.016 cv
210.57 15.902 210.398 15.742 210.277 15.531 cv
210.156 15.328 210.098 15.102 210.098 14.855 cv
210.098 14.555 210.164 14.277 210.305 14.02 cv
210.441 13.77 210.625 13.539 210.852 13.336 cv
210.668 13.156 210.523 12.941 210.414 12.684 cv
210.305 12.434 210.25 12.113 210.254 11.73 cv
210.25 11.328 210.32 10.969 210.465 10.645 cv
210.605 10.328 210.805 10.059 211.063 9.836 cv
211.316 9.617 211.621 9.44501 211.973 9.328 cv
212.324 9.211 212.715 9.15198 213.145 9.15198 cv
213.363 9.15198 213.57 9.16803 213.77 9.19098 cv
213.969 9.22302 214.156 9.258 214.328 9.30103 cv
216.535 9.30103 li
216.617 9.30499 216.688 9.36298 216.746 9.47302 cv
216.797 9.59003 216.824 9.78101 216.828 10.047 cv
cp
214.313 11.691 mo
214.309 11.32 214.207 11.031 214 10.82 cv
213.789 10.617 213.496 10.512 213.121 10.508 cv
212.926 10.512 212.754 10.543 212.613 10.605 cv
212.465 10.672 212.344 10.762 212.25 10.871 cv
212.148 10.984 212.078 11.113 212.035 11.262 cv
211.984 11.41 211.961 11.566 211.965 11.723 cv
211.961 12.082 212.066 12.359 212.277 12.562 cv
212.484 12.77 212.773 12.875 213.145 12.871 cv
213.34 12.875 213.508 12.844 213.656 12.777 cv
213.797 12.719 213.918 12.633 214.02 12.52 cv
214.113 12.414 214.188 12.285 214.238 12.141 cv
214.285 12 214.309 11.852 214.313 11.691 cv
cp
214.773 17.242 mo
214.773 17.004 214.68 16.828 214.492 16.703 cv
214.305 16.582 214.047 16.512 213.719 16.5 cv
212.324 16.461 li
212.188 16.562 212.078 16.656 212 16.746 cv
211.918 16.836 211.855 16.922 211.809 17.008 cv
211.758 17.09 211.723 17.172 211.711 17.25 cv
211.691 17.328 211.684 17.406 211.688 17.492 cv
211.684 17.746 211.816 17.945 212.078 18.082 cv
212.34 18.215 212.711 18.281 213.191 18.285 cv
213.484 18.281 213.73 18.25 213.938 18.195 cv
214.137 18.133 214.301 18.055 214.43 17.957 cv
214.551 17.855 214.641 17.746 214.695 17.625 cv
214.746 17.504 214.773 17.375 214.773 17.242 cv
cp
f
224.453 12.84 mo
224.449 13.078 224.398 13.254 224.293 13.367 cv
224.184 13.484 224.035 13.543 223.855 13.539 cv
219.621 13.539 li
219.617 13.84 219.652 14.109 219.727 14.348 cv
219.793 14.59 219.906 14.793 220.063 14.961 cv
220.215 15.133 220.41 15.262 220.652 15.348 cv
220.891 15.437 221.18 15.48 221.523 15.48 cv
221.863 15.48 222.164 15.457 222.426 15.406 cv
222.684 15.359 222.91 15.305 223.102 15.242 cv
223.289 15.184 223.445 15.129 223.574 15.078 cv
223.695 15.031 223.797 15.008 223.879 15.004 cv
223.922 15.008 223.961 15.016 223.996 15.031 cv
224.023 15.051 224.051 15.082 224.07 15.129 cv
224.09 15.176 224.102 15.242 224.113 15.328 cv
224.117 15.414 224.121 15.523 224.125 15.652 cv
224.121 15.77 224.121 15.867 224.117 15.945 cv
224.109 16.027 224.102 16.094 224.094 16.148 cv
224.082 16.207 224.066 16.258 224.047 16.293 cv
224.027 16.336 224 16.371 223.969 16.406 cv
223.934 16.445 223.84 16.496 223.691 16.555 cv
223.535 16.621 223.344 16.684 223.113 16.738 cv
222.875 16.801 222.605 16.848 222.309 16.895 cv
222.004 16.934 221.684 16.957 221.344 16.961 cv
220.723 16.957 220.18 16.883 219.719 16.727 cv
219.25 16.574 218.863 16.336 218.555 16.02 cv
218.238 15.703 218.004 15.305 217.855 14.82 cv
217.699 14.34 217.625 13.773 217.629 13.117 cv
217.625 12.504 217.703 11.945 217.867 11.449 cv
218.023 10.953 218.258 10.535 218.57 10.187 cv
218.875 9.84399 219.25 9.578 219.688 9.39502 cv
220.125 9.21503 220.617 9.125 221.172 9.12097 cv
221.75 9.125 222.25 9.211 222.664 9.37903 cv
223.078 9.55499 223.414 9.79303 223.68 10.094 cv
223.941 10.398 224.137 10.758 224.266 11.172 cv
224.387 11.59 224.449 12.039 224.453 12.527 cv
cp
222.551 12.277 mo
222.563 11.727 222.453 11.293 222.219 10.98 cv
221.984 10.668 221.617 10.512 221.125 10.508 cv
220.875 10.512 220.66 10.559 220.477 10.648 cv
220.289 10.746 220.137 10.871 220.016 11.027 cv
219.891 11.187 219.797 11.375 219.734 11.59 cv
219.668 11.805 219.629 12.035 219.621 12.277 cv
cp
f
235.441 7.539 mo
235.438 7.69897 235.434 7.828 235.422 7.93402 cv
235.406 8.04303 235.383 8.12903 235.359 8.18701 cv
235.328 8.25 235.297 8.297 235.262 8.32397 cv
235.223 8.35901 235.18 8.375 235.137 8.37097 cv
231.84 8.37097 li
231.84 11.086 li
234.934 11.086 li
234.977 11.086 235.02 11.102 235.059 11.125 cv
235.094 11.156 235.125 11.199 235.156 11.258 cv
235.184 11.32 235.203 11.402 235.219 11.504 cv
235.227 11.609 235.234 11.738 235.238 11.895 cv
235.234 12.051 235.227 12.184 235.219 12.285 cv
235.203 12.395 235.184 12.48 235.156 12.543 cv
235.125 12.613 235.094 12.66 235.059 12.687 cv
235.02 12.719 234.977 12.734 234.934 12.73 cv
231.84 12.73 li
231.84 16.484 li
231.836 16.543 231.82 16.594 231.793 16.633 cv
231.758 16.68 231.703 16.715 231.625 16.738 cv
231.543 16.77 231.438 16.789 231.309 16.805 cv
231.176 16.82 231.008 16.828 230.813 16.828 cv
230.609 16.828 230.445 16.82 230.316 16.805 cv
230.18 16.789 230.074 16.77 230 16.738 cv
229.918 16.715 229.863 16.68 229.832 16.633 cv
229.797 16.594 229.777 16.543 229.781 16.484 cv
229.781 7.34399 li
229.777 7.117 229.836 6.953 229.957 6.84802 cv
230.07 6.75 230.215 6.69897 230.391 6.69501 cv
235.137 6.69501 li
235.18 6.69897 235.223 6.711 235.262 6.73798 cv
235.297 6.77002 235.328 6.81598 235.359 6.87903 cv
235.383 6.94501 235.406 7.03497 235.422 7.14099 cv
235.434 7.25403 235.438 7.38702 235.441 7.539 cv
cp
f
238.957 16.516 mo
238.953 16.57 238.938 16.613 238.91 16.652 cv
238.875 16.691 238.82 16.727 238.75 16.75 cv
238.672 16.777 238.574 16.793 238.449 16.809 cv
238.324 16.82 238.164 16.828 237.977 16.828 cv
237.781 16.828 237.625 16.82 237.5 16.809 cv
237.375 16.793 237.273 16.777 237.199 16.75 cv
237.121 16.727 237.066 16.691 237.039 16.652 cv
237.004 16.613 236.988 16.57 236.992 16.516 cv
236.992 9.58197 li
236.988 9.53101 237.004 9.48401 237.039 9.44501 cv
237.066 9.40601 237.121 9.375 237.199 9.34399 cv
237.273 9.32001 237.375 9.297 237.5 9.27698 cv
237.625 9.26599 237.781 9.258 237.977 9.25403 cv
238.164 9.258 238.324 9.26599 238.449 9.27698 cv
238.574 9.297 238.672 9.32001 238.75 9.34399 cv
238.82 9.375 238.875 9.40601 238.91 9.44501 cv
238.938 9.48401 238.953 9.53101 238.957 9.58197 cv
cp
239.105 7.211 mo
239.105 7.60901 239.023 7.883 238.863 8.03101 cv
238.699 8.18402 238.402 8.258 237.969 8.25403 cv
237.523 8.258 237.223 8.18402 237.074 8.039 cv
236.918 7.89502 236.844 7.633 236.844 7.25 cv
236.844 6.85498 236.922 6.58197 237.082 6.42999 cv
237.238 6.27698 237.539 6.19897 237.984 6.19897 cv
238.418 6.19897 238.715 6.27301 238.871 6.422 cv
239.027 6.57001 239.105 6.836 239.105 7.211 cv
cp
f
242.883 16.516 mo
242.879 16.57 242.863 16.613 242.836 16.652 cv
242.801 16.691 242.746 16.727 242.676 16.75 cv
242.598 16.777 242.5 16.793 242.375 16.809 cv
242.25 16.82 242.09 16.828 241.902 16.828 cv
241.707 16.828 241.551 16.82 241.426 16.809 cv
241.301 16.793 241.199 16.777 241.125 16.75 cv
241.047 16.727 240.992 16.691 240.965 16.652 cv
240.93 16.613 240.914 16.57 240.918 16.516 cv
240.918 6.27002 li
240.914 6.21899 240.93 6.172 240.965 6.12903 cv
240.992 6.09003 241.047 6.05499 241.125 6.02301 cv
241.199 5.99597 241.301 5.97699 241.426 5.95697 cv
241.551 5.94501 241.707 5.93701 241.902 5.93402 cv
242.09 5.93701 242.25 5.94501 242.375 5.95697 cv
242.5 5.97699 242.598 5.99597 242.676 6.02301 cv
242.746 6.05499 242.801 6.09003 242.836 6.12903 cv
242.863 6.172 242.879 6.21899 242.883 6.27002 cv
cp
f
249.008 15.832 mo
249.008 16.059 248.992 16.234 248.965 16.355 cv
248.934 16.48 248.895 16.566 248.852 16.613 cv
248.801 16.664 248.734 16.707 248.645 16.746 cv
248.551 16.785 248.441 16.816 248.324 16.848 cv
248.199 16.871 248.066 16.895 247.926 16.914 cv
247.781 16.926 247.641 16.934 247.496 16.937 cv
247.105 16.934 246.766 16.883 246.48 16.789 cv
246.195 16.687 245.961 16.539 245.773 16.332 cv
245.586 16.129 245.445 15.871 245.359 15.559 cv
245.266 15.25 245.223 14.879 245.227 14.449 cv
245.227 10.891 li
244.395 10.891 li
244.293 10.895 244.219 10.832 244.168 10.707 cv
244.113 10.586 244.086 10.383 244.09 10.094 cv
244.086 9.94501 244.094 9.81598 244.109 9.71503 cv
244.121 9.61298 244.141 9.53101 244.168 9.46899 cv
244.191 9.40997 244.223 9.367 244.266 9.34003 cv
244.301 9.31598 244.348 9.30499 244.402 9.30103 cv
245.227 9.30103 li
245.227 7.75 li
245.223 7.703 245.238 7.65601 245.27 7.60901 cv
245.297 7.57001 245.348 7.53497 245.426 7.50403 cv
245.5 7.47998 245.602 7.45697 245.73 7.44098 cv
245.855 7.42999 246.012 7.42603 246.203 7.422 cv
246.391 7.42603 246.551 7.42999 246.68 7.44098 cv
246.805 7.45697 246.906 7.47998 246.98 7.50403 cv
247.051 7.53497 247.102 7.57001 247.137 7.60901 cv
247.164 7.65601 247.18 7.703 247.184 7.75 cv
247.184 9.30103 li
248.695 9.30103 li
248.746 9.30499 248.793 9.31598 248.832 9.34003 cv
248.871 9.367 248.902 9.40997 248.93 9.46899 cv
248.953 9.53101 248.973 9.61298 248.988 9.71503 cv
249 9.81598 249.008 9.94501 249.008 10.094 cv
249.008 10.383 248.98 10.586 248.93 10.707 cv
248.875 10.832 248.801 10.895 248.703 10.891 cv
247.184 10.891 li
247.184 14.156 li
247.18 14.535 247.238 14.82 247.363 15.008 cv
247.48 15.199 247.695 15.293 248 15.293 cv
248.102 15.293 248.195 15.285 248.281 15.266 cv
248.363 15.25 248.438 15.23 248.504 15.203 cv
248.566 15.184 248.621 15.16 248.668 15.141 cv
248.711 15.125 248.75 15.117 248.789 15.113 cv
248.816 15.117 248.848 15.125 248.879 15.141 cv
248.906 15.16 248.926 15.199 248.945 15.25 cv
248.957 15.309 248.973 15.383 248.988 15.473 cv
249 15.57 249.008 15.687 249.008 15.832 cv
cp
f
256.598 12.84 mo
256.594 13.078 256.543 13.254 256.438 13.367 cv
256.328 13.484 256.18 13.543 256 13.539 cv
251.766 13.539 li
251.762 13.84 251.797 14.109 251.871 14.348 cv
251.938 14.59 252.051 14.793 252.207 14.961 cv
252.359 15.133 252.555 15.262 252.797 15.348 cv
253.035 15.437 253.324 15.48 253.668 15.48 cv
254.008 15.48 254.309 15.457 254.57 15.406 cv
254.828 15.359 255.055 15.305 255.246 15.242 cv
255.434 15.184 255.59 15.129 255.719 15.078 cv
255.84 15.031 255.941 15.008 256.023 15.004 cv
256.066 15.008 256.105 15.016 256.141 15.031 cv
256.168 15.051 256.195 15.082 256.215 15.129 cv
256.234 15.176 256.246 15.242 256.258 15.328 cv
256.262 15.414 256.266 15.523 256.27 15.652 cv
256.266 15.77 256.266 15.867 256.262 15.945 cv
256.254 16.027 256.246 16.094 256.238 16.148 cv
256.227 16.207 256.211 16.258 256.191 16.293 cv
256.172 16.336 256.145 16.371 256.113 16.406 cv
256.078 16.445 255.984 16.496 255.836 16.555 cv
255.68 16.621 255.488 16.684 255.258 16.738 cv
255.02 16.801 254.75 16.848 254.453 16.895 cv
254.148 16.934 253.828 16.957 253.488 16.961 cv
252.867 16.957 252.324 16.883 251.863 16.727 cv
251.395 16.574 251.008 16.336 250.699 16.02 cv
250.383 15.703 250.148 15.305 250 14.82 cv
249.844 14.34 249.77 13.773 249.773 13.117 cv
249.77 12.504 249.848 11.945 250.012 11.449 cv
250.168 10.953 250.402 10.535 250.715 10.187 cv
251.02 9.84399 251.395 9.578 251.832 9.39502 cv
252.27 9.21503 252.762 9.125 253.316 9.12097 cv
253.895 9.125 254.395 9.211 254.809 9.37903 cv
255.223 9.55499 255.559 9.79303 255.824 10.094 cv
256.086 10.398 256.281 10.758 256.41 11.172 cv
256.531 11.59 256.594 12.039 256.598 12.527 cv
cp
254.695 12.277 mo
254.707 11.727 254.598 11.293 254.363 10.98 cv
254.129 10.668 253.762 10.512 253.27 10.508 cv
253.02 10.512 252.805 10.559 252.621 10.648 cv
252.434 10.746 252.281 10.871 252.16 11.027 cv
252.035 11.187 251.941 11.375 251.879 11.59 cv
251.813 11.805 251.773 12.035 251.766 12.277 cv
cp
f
262.672 10.211 mo
262.672 10.402 262.664 10.555 262.656 10.672 cv
262.641 10.793 262.625 10.887 262.609 10.953 cv
262.586 11.023 262.559 11.07 262.527 11.094 cv
262.488 11.121 262.445 11.133 262.398 11.133 cv
262.352 11.133 262.305 11.125 262.258 11.105 cv
262.203 11.09 262.145 11.07 262.082 11.047 cv
262.012 11.027 261.941 11.008 261.867 10.988 cv
261.785 10.973 261.699 10.965 261.609 10.961 cv
261.496 10.965 261.387 10.984 261.281 11.027 cv
261.172 11.074 261.059 11.145 260.945 11.234 cv
260.824 11.328 260.703 11.453 260.578 11.605 cv
260.449 11.766 260.313 11.957 260.168 12.184 cv
260.168 16.516 li
260.164 16.57 260.148 16.613 260.121 16.652 cv
260.086 16.691 260.031 16.727 259.961 16.75 cv
259.883 16.777 259.785 16.793 259.66 16.809 cv
259.535 16.82 259.375 16.828 259.188 16.828 cv
258.992 16.828 258.836 16.82 258.711 16.809 cv
258.586 16.793 258.484 16.777 258.41 16.75 cv
258.332 16.727 258.277 16.691 258.25 16.652 cv
258.215 16.613 258.199 16.57 258.203 16.516 cv
258.203 9.56598 li
258.199 9.52002 258.215 9.47302 258.242 9.42999 cv
258.266 9.39502 258.313 9.36298 258.383 9.33197 cv
258.449 9.30902 258.535 9.289 258.645 9.27301 cv
258.75 9.26599 258.883 9.258 259.047 9.25403 cv
259.211 9.258 259.348 9.26599 259.457 9.27301 cv
259.563 9.289 259.648 9.30902 259.711 9.33197 cv
259.77 9.36298 259.813 9.39502 259.84 9.42999 cv
259.863 9.47302 259.875 9.52002 259.879 9.56598 cv
259.879 10.43 li
260.059 10.172 260.23 9.961 260.395 9.789 cv
260.551 9.625 260.707 9.48798 260.855 9.38702 cv
261 9.289 261.145 9.22302 261.289 9.17999 cv
261.434 9.14502 261.578 9.125 261.727 9.12097 cv
261.793 9.125 261.867 9.12903 261.945 9.133 cv
262.023 9.14502 262.102 9.15601 262.188 9.172 cv
262.266 9.19098 262.34 9.211 262.406 9.23401 cv
262.465 9.258 262.512 9.28497 262.543 9.30902 cv
262.57 9.34003 262.59 9.367 262.605 9.39502 cv
262.617 9.42999 262.629 9.47302 262.641 9.52301 cv
262.648 9.58197 262.656 9.664 262.664 9.77002 cv
262.668 9.87903 262.672 10.027 262.672 10.211 cv
cp
f
265.832 16.516 mo
265.828 16.57 265.813 16.613 265.785 16.652 cv
265.75 16.691 265.695 16.727 265.625 16.75 cv
265.547 16.777 265.449 16.793 265.324 16.809 cv
265.199 16.82 265.039 16.828 264.852 16.828 cv
264.656 16.828 264.5 16.82 264.375 16.809 cv
264.25 16.793 264.148 16.777 264.074 16.75 cv
263.996 16.727 263.941 16.691 263.914 16.652 cv
263.879 16.613 263.863 16.57 263.867 16.516 cv
263.867 9.58197 li
263.863 9.53101 263.879 9.48401 263.914 9.44501 cv
263.941 9.40601 263.996 9.375 264.074 9.34399 cv
264.148 9.32001 264.25 9.297 264.375 9.27698 cv
264.5 9.26599 264.656 9.258 264.852 9.25403 cv
265.039 9.258 265.199 9.26599 265.324 9.27698 cv
265.449 9.297 265.547 9.32001 265.625 9.34399 cv
265.695 9.375 265.75 9.40601 265.785 9.44501 cv
265.813 9.48401 265.828 9.53101 265.832 9.58197 cv
cp
265.98 7.211 mo
265.98 7.60901 265.898 7.883 265.738 8.03101 cv
265.574 8.18402 265.277 8.258 264.844 8.25403 cv
264.398 8.258 264.098 8.18402 263.949 8.039 cv
263.793 7.89502 263.719 7.633 263.719 7.25 cv
263.719 6.85498 263.797 6.58197 263.957 6.42999 cv
264.113 6.27698 264.414 6.19897 264.859 6.19897 cv
265.293 6.19897 265.59 6.27301 265.746 6.422 cv
265.902 6.57001 265.98 6.836 265.98 7.211 cv
cp
f
274.434 16.516 mo
274.43 16.57 274.414 16.613 274.387 16.652 cv
274.352 16.691 274.301 16.727 274.23 16.75 cv
274.156 16.777 274.055 16.793 273.93 16.809 cv
273.801 16.82 273.645 16.828 273.461 16.828 cv
273.266 16.828 273.105 16.82 272.98 16.809 cv
272.852 16.793 272.75 16.777 272.68 16.75 cv
272.602 16.727 272.551 16.691 272.523 16.652 cv
272.488 16.613 272.473 16.57 272.477 16.516 cv
272.477 12.551 li
272.473 12.215 272.449 11.949 272.402 11.754 cv
272.352 11.562 272.277 11.398 272.188 11.262 cv
272.094 11.125 271.977 11.02 271.828 10.941 cv
271.68 10.867 271.504 10.828 271.309 10.828 cv
271.055 10.828 270.805 10.922 270.551 11.102 cv
270.297 11.285 270.031 11.547 269.758 11.895 cv
269.758 16.516 li
269.754 16.57 269.738 16.613 269.711 16.652 cv
269.676 16.691 269.621 16.727 269.551 16.75 cv
269.473 16.777 269.375 16.793 269.25 16.809 cv
269.125 16.82 268.965 16.828 268.777 16.828 cv
268.582 16.828 268.426 16.82 268.301 16.809 cv
268.176 16.793 268.074 16.777 268 16.75 cv
267.922 16.727 267.867 16.691 267.84 16.652 cv
267.805 16.613 267.789 16.57 267.793 16.516 cv
267.793 9.56598 li
267.789 9.52002 267.805 9.47302 267.832 9.42999 cv
267.855 9.39502 267.902 9.36298 267.973 9.33197 cv
268.039 9.30902 268.125 9.289 268.234 9.27301 cv
268.34 9.26599 268.473 9.258 268.637 9.25403 cv
268.801 9.258 268.938 9.26599 269.047 9.27301 cv
269.152 9.289 269.238 9.30902 269.301 9.33197 cv
269.359 9.36298 269.402 9.39502 269.43 9.42999 cv
269.453 9.47302 269.465 9.52002 269.469 9.56598 cv
269.469 10.367 li
269.852 9.95697 270.242 9.64502 270.641 9.43402 cv
271.035 9.22699 271.453 9.125 271.887 9.12097 cv
272.355 9.125 272.754 9.203 273.082 9.35498 cv
273.406 9.51599 273.668 9.72699 273.867 9.992 cv
274.066 10.262 274.211 10.574 274.301 10.93 cv
274.387 11.289 274.43 11.719 274.434 12.223 cv
cp
f
282.629 10.047 mo
282.625 10.301 282.598 10.484 282.543 10.602 cv
282.484 10.723 282.414 10.781 282.336 10.781 cv
281.516 10.781 li
281.629 10.906 281.711 11.051 281.762 11.207 cv
281.809 11.367 281.832 11.531 281.836 11.699 cv
281.832 12.109 281.766 12.469 281.633 12.781 cv
281.496 13.098 281.301 13.363 281.051 13.574 cv
280.797 13.793 280.496 13.957 280.141 14.066 cv
279.781 14.184 279.383 14.238 278.953 14.234 cv
278.727 14.238 278.516 14.211 278.313 14.152 cv
278.109 14.102 277.953 14.039 277.844 13.961 cv
277.781 14.031 277.723 14.109 277.676 14.203 cv
277.625 14.297 277.602 14.402 277.605 14.512 cv
277.602 14.668 277.668 14.789 277.801 14.883 cv
277.93 14.98 278.117 15.035 278.359 15.043 cv
280.051 15.105 li
280.445 15.121 280.797 15.18 281.105 15.273 cv
281.414 15.375 281.676 15.508 281.887 15.68 cv
282.098 15.855 282.258 16.066 282.367 16.309 cv
282.477 16.555 282.531 16.828 282.535 17.141 cv
282.531 17.477 282.457 17.801 282.309 18.109 cv
282.16 18.41 281.934 18.672 281.633 18.898 cv
281.328 19.117 280.949 19.297 280.496 19.43 cv
280.039 19.559 279.508 19.621 278.906 19.625 cv
278.309 19.621 277.805 19.574 277.387 19.484 cv
276.969 19.387 276.625 19.258 276.359 19.094 cv
276.09 18.926 275.895 18.727 275.777 18.5 cv
275.652 18.266 275.594 18.012 275.594 17.738 cv
275.594 17.566 275.613 17.406 275.66 17.25 cv
275.699 17.094 275.766 16.941 275.855 16.801 cv
275.938 16.656 276.043 16.523 276.168 16.391 cv
276.293 16.262 276.434 16.137 276.598 16.016 cv
276.371 15.902 276.199 15.742 276.078 15.531 cv
275.957 15.328 275.898 15.102 275.898 14.855 cv
275.898 14.555 275.965 14.277 276.105 14.02 cv
276.242 13.77 276.426 13.539 276.652 13.336 cv
276.469 13.156 276.324 12.941 276.215 12.684 cv
276.105 12.434 276.051 12.113 276.055 11.73 cv
276.051 11.328 276.121 10.969 276.266 10.645 cv
276.406 10.328 276.605 10.059 276.863 9.836 cv
277.117 9.617 277.422 9.44501 277.773 9.328 cv
278.125 9.211 278.516 9.15198 278.945 9.15198 cv
279.164 9.15198 279.371 9.16803 279.57 9.19098 cv
279.77 9.22302 279.957 9.258 280.129 9.30103 cv
282.336 9.30103 li
282.418 9.30499 282.488 9.36298 282.547 9.47302 cv
282.598 9.59003 282.625 9.78101 282.629 10.047 cv
cp
280.113 11.691 mo
280.109 11.32 280.008 11.031 279.801 10.82 cv
279.59 10.617 279.297 10.512 278.922 10.508 cv
278.727 10.512 278.555 10.543 278.414 10.605 cv
278.266 10.672 278.145 10.762 278.051 10.871 cv
277.949 10.984 277.879 11.113 277.836 11.262 cv
277.785 11.41 277.762 11.566 277.766 11.723 cv
277.762 12.082 277.867 12.359 278.078 12.562 cv
278.285 12.77 278.574 12.875 278.945 12.871 cv
279.141 12.875 279.309 12.844 279.457 12.777 cv
279.598 12.719 279.719 12.633 279.82 12.52 cv
279.914 12.414 279.988 12.285 280.039 12.141 cv
280.086 12 280.109 11.852 280.113 11.691 cv
cp
280.574 17.242 mo
280.574 17.004 280.48 16.828 280.293 16.703 cv
280.105 16.582 279.848 16.512 279.52 16.5 cv
278.125 16.461 li
277.988 16.562 277.879 16.656 277.801 16.746 cv
277.719 16.836 277.656 16.922 277.609 17.008 cv
277.559 17.09 277.523 17.172 277.512 17.25 cv
277.492 17.328 277.484 17.406 277.488 17.492 cv
277.484 17.746 277.617 17.945 277.879 18.082 cv
278.141 18.215 278.512 18.281 278.992 18.285 cv
279.285 18.281 279.531 18.25 279.738 18.195 cv
279.938 18.133 280.102 18.055 280.23 17.957 cv
280.352 17.855 280.441 17.746 280.496 17.625 cv
280.547 17.504 280.574 17.375 280.574 17.242 cv
cp
f
294.43 7.539 mo
294.426 7.69501 294.418 7.82397 294.41 7.92603 cv
294.395 8.03497 294.375 8.12097 294.352 8.18402 cv
294.32 8.25 294.289 8.297 294.254 8.32397 cv
294.211 8.35901 294.168 8.375 294.125 8.37097 cv
291.602 8.37097 li
291.602 16.5 li
291.602 16.555 291.582 16.602 291.551 16.641 cv
291.512 16.684 291.457 16.719 291.383 16.742 cv
291.301 16.77 291.195 16.789 291.066 16.805 cv
290.93 16.82 290.766 16.828 290.57 16.828 cv
290.375 16.828 290.211 16.82 290.078 16.805 cv
289.945 16.789 289.84 16.77 289.762 16.742 cv
289.684 16.719 289.625 16.684 289.594 16.641 cv
289.555 16.602 289.539 16.555 289.543 16.5 cv
289.543 8.37097 li
287.02 8.37097 li
286.965 8.375 286.918 8.35901 286.887 8.32397 cv
286.848 8.297 286.816 8.25 286.793 8.18402 cv
286.762 8.12097 286.742 8.03497 286.734 7.92603 cv
286.719 7.82397 286.715 7.69501 286.715 7.539 cv
286.715 7.38702 286.719 7.25403 286.734 7.14099 cv
286.742 7.03497 286.762 6.94501 286.793 6.87903 cv
286.816 6.81598 286.848 6.77002 286.887 6.73798 cv
286.918 6.711 286.965 6.69897 287.02 6.69501 cv
294.125 6.69501 li
294.168 6.69897 294.211 6.711 294.254 6.73798 cv
294.289 6.77002 294.32 6.81598 294.352 6.87903 cv
294.375 6.94501 294.395 7.03497 294.41 7.14099 cv
294.418 7.25403 294.426 7.38702 294.43 7.539 cv
cp
f
297.465 16.516 mo
297.461 16.57 297.445 16.613 297.418 16.652 cv
297.383 16.691 297.328 16.727 297.258 16.75 cv
297.18 16.777 297.082 16.793 296.957 16.809 cv
296.832 16.82 296.672 16.828 296.484 16.828 cv
296.289 16.828 296.133 16.82 296.008 16.809 cv
295.883 16.793 295.781 16.777 295.707 16.75 cv
295.629 16.727 295.574 16.691 295.547 16.652 cv
295.512 16.613 295.496 16.57 295.5 16.516 cv
295.5 9.58197 li
295.496 9.53101 295.512 9.48401 295.547 9.44501 cv
295.574 9.40601 295.629 9.375 295.707 9.34399 cv
295.781 9.32001 295.883 9.297 296.008 9.27698 cv
296.133 9.26599 296.289 9.258 296.484 9.25403 cv
296.672 9.258 296.832 9.26599 296.957 9.27698 cv
297.082 9.297 297.18 9.32001 297.258 9.34399 cv
297.328 9.375 297.383 9.40601 297.418 9.44501 cv
297.445 9.48401 297.461 9.53101 297.465 9.58197 cv
cp
297.613 7.211 mo
297.613 7.60901 297.531 7.883 297.371 8.03101 cv
297.207 8.18402 296.91 8.258 296.477 8.25403 cv
296.031 8.258 295.73 8.18402 295.582 8.039 cv
295.426 7.89502 295.352 7.633 295.352 7.25 cv
295.352 6.85498 295.43 6.58197 295.59 6.42999 cv
295.746 6.27698 296.047 6.19897 296.492 6.19897 cv
296.926 6.19897 297.223 6.27301 297.379 6.422 cv
297.535 6.57001 297.613 6.836 297.613 7.211 cv
cp
f
310.516 16.516 mo
310.512 16.57 310.496 16.613 310.469 16.652 cv
310.434 16.691 310.383 16.727 310.313 16.75 cv
310.238 16.777 310.137 16.793 310.016 16.809 cv
309.891 16.82 309.734 16.828 309.543 16.828 cv
309.344 16.828 309.184 16.82 309.059 16.809 cv
308.934 16.793 308.832 16.777 308.758 16.75 cv
308.68 16.727 308.629 16.691 308.602 16.652 cv
308.574 16.613 308.559 16.57 308.563 16.516 cv
308.563 12.395 li
308.559 12.164 308.539 11.949 308.496 11.754 cv
308.449 11.562 308.379 11.398 308.293 11.262 cv
308.199 11.125 308.086 11.02 307.949 10.941 cv
307.809 10.867 307.645 10.828 307.453 10.828 cv
307.219 10.828 306.98 10.922 306.742 11.102 cv
306.504 11.285 306.246 11.547 305.965 11.895 cv
305.965 16.516 li
305.965 16.57 305.949 16.613 305.918 16.652 cv
305.887 16.691 305.832 16.727 305.758 16.75 cv
305.68 16.777 305.578 16.793 305.457 16.809 cv
305.332 16.82 305.18 16.828 304.992 16.828 cv
304.797 16.828 304.637 16.82 304.516 16.809 cv
304.387 16.793 304.285 16.777 304.215 16.75 cv
304.137 16.727 304.086 16.691 304.055 16.652 cv
304.023 16.613 304.008 16.57 304.008 16.516 cv
304.008 12.395 li
304.008 12.164 303.984 11.949 303.941 11.754 cv
303.898 11.562 303.832 11.398 303.746 11.262 cv
303.652 11.125 303.539 11.02 303.402 10.941 cv
303.258 10.867 303.094 10.828 302.91 10.828 cv
302.668 10.828 302.43 10.922 302.191 11.102 cv
301.953 11.285 301.695 11.547 301.422 11.895 cv
301.422 16.516 li
301.418 16.57 301.402 16.613 301.375 16.652 cv
301.34 16.691 301.285 16.727 301.215 16.75 cv
301.137 16.777 301.039 16.793 300.914 16.809 cv
300.789 16.82 300.629 16.828 300.441 16.828 cv
300.246 16.828 300.09 16.82 299.965 16.809 cv
299.84 16.793 299.738 16.777 299.664 16.75 cv
299.586 16.727 299.531 16.691 299.504 16.652 cv
299.469 16.613 299.453 16.57 299.457 16.516 cv
299.457 9.56598 li
299.453 9.52002 299.469 9.47302 299.496 9.42999 cv
299.52 9.39502 299.566 9.36298 299.637 9.33197 cv
299.703 9.30902 299.789 9.289 299.898 9.27301 cv
300.004 9.26599 300.137 9.258 300.301 9.25403 cv
300.465 9.258 300.602 9.26599 300.711 9.27301 cv
300.816 9.289 300.902 9.30902 300.965 9.33197 cv
301.023 9.36298 301.066 9.39502 301.094 9.42999 cv
301.117 9.47302 301.129 9.52002 301.133 9.56598 cv
301.133 10.367 li
301.516 9.95697 301.898 9.64502 302.281 9.43402 cv
302.66 9.22699 303.063 9.125 303.48 9.12097 cv
303.766 9.125 304.02 9.15198 304.25 9.211 cv
304.477 9.27301 304.684 9.35901 304.863 9.46899 cv
305.043 9.58197 305.195 9.71899 305.324 9.87097 cv
305.453 10.027 305.563 10.199 305.652 10.391 cv
305.859 10.168 306.063 9.97699 306.266 9.81598 cv
306.461 9.65601 306.66 9.52301 306.855 9.422 cv
307.051 9.32001 307.246 9.24597 307.441 9.19501 cv
307.637 9.14801 307.836 9.125 308.039 9.12097 cv
308.5 9.125 308.887 9.203 309.207 9.35498 cv
309.52 9.51599 309.777 9.72699 309.973 9.992 cv
310.168 10.262 310.305 10.574 310.391 10.93 cv
310.469 11.289 310.512 11.668 310.516 12.066 cv
cp
f
318.855 12.84 mo
318.852 13.078 318.801 13.254 318.695 13.367 cv
318.586 13.484 318.438 13.543 318.258 13.539 cv
314.023 13.539 li
314.02 13.84 314.055 14.109 314.129 14.348 cv
314.195 14.59 314.309 14.793 314.465 14.961 cv
314.617 15.133 314.813 15.262 315.055 15.348 cv
315.293 15.437 315.582 15.48 315.926 15.48 cv
316.266 15.48 316.566 15.457 316.828 15.406 cv
317.086 15.359 317.313 15.305 317.504 15.242 cv
317.691 15.184 317.848 15.129 317.977 15.078 cv
318.098 15.031 318.199 15.008 318.281 15.004 cv
318.324 15.008 318.363 15.016 318.398 15.031 cv
318.426 15.051 318.453 15.082 318.473 15.129 cv
318.492 15.176 318.504 15.242 318.516 15.328 cv
318.52 15.414 318.523 15.523 318.527 15.652 cv
318.523 15.77 318.523 15.867 318.52 15.945 cv
318.512 16.027 318.504 16.094 318.496 16.148 cv
318.484 16.207 318.469 16.258 318.449 16.293 cv
318.43 16.336 318.402 16.371 318.371 16.406 cv
318.336 16.445 318.242 16.496 318.094 16.555 cv
317.938 16.621 317.746 16.684 317.516 16.738 cv
317.277 16.801 317.008 16.848 316.711 16.895 cv
316.406 16.934 316.086 16.957 315.746 16.961 cv
315.125 16.957 314.582 16.883 314.121 16.727 cv
313.652 16.574 313.266 16.336 312.957 16.02 cv
312.641 15.703 312.406 15.305 312.258 14.82 cv
312.102 14.34 312.027 13.773 312.031 13.117 cv
312.027 12.504 312.105 11.945 312.27 11.449 cv
312.426 10.953 312.66 10.535 312.973 10.187 cv
313.277 9.84399 313.652 9.578 314.09 9.39502 cv
314.527 9.21503 315.02 9.125 315.574 9.12097 cv
316.152 9.125 316.652 9.211 317.066 9.37903 cv
317.48 9.55499 317.816 9.79303 318.082 10.094 cv
318.344 10.398 318.539 10.758 318.668 11.172 cv
318.789 11.59 318.852 12.039 318.855 12.527 cv
cp
316.953 12.277 mo
316.965 11.727 316.855 11.293 316.621 10.98 cv
316.387 10.668 316.02 10.512 315.527 10.508 cv
315.277 10.512 315.063 10.559 314.879 10.648 cv
314.691 10.746 314.539 10.871 314.418 11.027 cv
314.293 11.187 314.199 11.375 314.137 11.59 cv
314.07 11.805 314.031 12.035 314.023 12.277 cv
cp
f
325.355 14.551 mo
325.352 14.949 325.277 15.297 325.133 15.598 cv
324.984 15.898 324.777 16.152 324.508 16.352 cv
324.234 16.559 323.914 16.707 323.547 16.809 cv
323.18 16.906 322.777 16.957 322.348 16.961 cv
322.082 16.957 321.836 16.937 321.602 16.902 cv
321.367 16.859 321.156 16.812 320.969 16.754 cv
320.781 16.695 320.625 16.633 320.5 16.57 cv
320.375 16.508 320.281 16.449 320.227 16.395 cv
320.168 16.34 320.125 16.258 320.098 16.141 cv
320.063 16.027 320.047 15.852 320.051 15.621 cv
320.047 15.473 320.055 15.352 320.066 15.258 cv
320.074 15.168 320.09 15.098 320.113 15.039 cv
320.133 14.988 320.156 14.949 320.191 14.93 cv
320.219 14.914 320.258 14.906 320.305 14.902 cv
320.359 14.906 320.445 14.937 320.559 15 cv
320.668 15.066 320.805 15.141 320.977 15.215 cv
321.141 15.297 321.336 15.367 321.555 15.434 cv
321.773 15.504 322.023 15.539 322.309 15.535 cv
322.484 15.539 322.641 15.52 322.781 15.48 cv
322.914 15.445 323.035 15.395 323.141 15.324 cv
323.238 15.258 323.313 15.172 323.367 15.066 cv
323.414 14.965 323.441 14.844 323.445 14.707 cv
323.441 14.551 323.395 14.418 323.301 14.309 cv
323.207 14.199 323.078 14.102 322.922 14.016 cv
322.758 13.934 322.578 13.855 322.383 13.781 cv
322.18 13.711 321.977 13.633 321.766 13.539 cv
321.555 13.453 321.348 13.352 321.152 13.234 cv
320.949 13.125 320.77 12.984 320.613 12.816 cv
320.449 12.652 320.324 12.453 320.23 12.215 cv
320.137 11.984 320.09 11.703 320.09 11.371 cv
320.09 11.043 320.152 10.738 320.281 10.457 cv
320.41 10.184 320.598 9.94501 320.844 9.74597 cv
321.086 9.55103 321.383 9.39801 321.734 9.28497 cv
322.082 9.17999 322.477 9.125 322.918 9.12097 cv
323.133 9.125 323.344 9.14099 323.551 9.16803 cv
323.754 9.203 323.941 9.242 324.109 9.28497 cv
324.273 9.336 324.414 9.38702 324.531 9.43701 cv
324.645 9.49597 324.727 9.54303 324.777 9.578 cv
324.824 9.62097 324.859 9.65997 324.883 9.69501 cv
324.902 9.73798 324.914 9.78497 324.926 9.836 cv
324.934 9.89099 324.945 9.95697 324.953 10.035 cv
324.961 10.121 324.965 10.219 324.965 10.336 cv
324.965 10.477 324.961 10.594 324.953 10.68 cv
324.945 10.773 324.93 10.844 324.914 10.891 cv
324.895 10.945 324.871 10.98 324.844 10.996 cv
324.809 11.02 324.773 11.027 324.734 11.023 cv
324.684 11.027 324.609 11 324.516 10.941 cv
324.414 10.891 324.293 10.832 324.145 10.766 cv
323.996 10.707 323.824 10.648 323.629 10.59 cv
323.434 10.539 323.211 10.512 322.965 10.508 cv
322.785 10.512 322.633 10.531 322.504 10.562 cv
322.371 10.602 322.262 10.652 322.184 10.719 cv
322.098 10.789 322.035 10.867 321.996 10.957 cv
321.949 11.051 321.93 11.148 321.934 11.25 cv
321.93 11.41 321.98 11.547 322.082 11.652 cv
322.18 11.766 322.309 11.859 322.473 11.941 cv
322.633 12.027 322.816 12.105 323.023 12.176 cv
323.227 12.25 323.434 12.332 323.645 12.414 cv
323.852 12.504 324.059 12.602 324.27 12.715 cv
324.473 12.828 324.656 12.969 324.816 13.133 cv
324.977 13.301 325.105 13.5 325.207 13.73 cv
325.301 13.965 325.352 14.238 325.355 14.551 cv
cp
f
337.547 12.969 mo
337.543 13.566 337.465 14.109 337.313 14.594 cv
337.152 15.086 336.918 15.504 336.602 15.855 cv
336.285 16.207 335.887 16.48 335.41 16.672 cv
334.93 16.863 334.371 16.957 333.734 16.961 cv
333.113 16.957 332.574 16.875 332.121 16.703 cv
331.66 16.535 331.281 16.285 330.984 15.957 cv
330.68 15.633 330.457 15.23 330.313 14.75 cv
330.168 14.273 330.098 13.727 330.098 13.109 cv
330.098 12.52 330.176 11.98 330.332 11.488 cv
330.488 11 330.727 10.578 331.047 10.227 cv
331.363 9.87903 331.758 9.60498 332.234 9.40997 cv
332.707 9.21899 333.266 9.125 333.906 9.12097 cv
334.531 9.125 335.07 9.20697 335.527 9.375 cv
335.984 9.547 336.363 9.797 336.66 10.121 cv
336.957 10.449 337.18 10.852 337.328 11.328 cv
337.473 11.809 337.543 12.355 337.547 12.969 cv
cp
335.527 13.047 mo
335.523 12.711 335.496 12.395 335.445 12.102 cv
335.387 11.816 335.293 11.566 335.168 11.352 cv
335.035 11.141 334.863 10.973 334.652 10.852 cv
334.434 10.734 334.164 10.676 333.836 10.672 cv
333.547 10.676 333.293 10.73 333.074 10.832 cv
332.855 10.941 332.676 11.098 332.535 11.301 cv
332.395 11.508 332.289 11.754 332.219 12.039 cv
332.148 12.332 332.113 12.66 332.113 13.023 cv
332.113 13.371 332.141 13.687 332.199 13.973 cv
332.254 14.266 332.348 14.516 332.477 14.727 cv
332.602 14.941 332.773 15.105 332.996 15.219 cv
333.211 15.34 333.48 15.398 333.805 15.395 cv
334.098 15.398 334.355 15.344 334.578 15.234 cv
334.793 15.129 334.973 14.977 335.113 14.77 cv
335.254 14.57 335.355 14.324 335.426 14.035 cv
335.488 13.75 335.523 13.422 335.527 13.047 cv
cp
f
343.332 6.914 mo
343.328 7.06598 343.324 7.18701 343.316 7.27698 cv
343.305 7.37097 343.289 7.44098 343.27 7.48798 cv
343.246 7.539 343.223 7.57397 343.199 7.59003 cv
343.172 7.60901 343.145 7.617 343.113 7.617 cv
343.074 7.617 343.031 7.60901 342.992 7.59003 cv
342.945 7.57397 342.891 7.55499 342.828 7.53101 cv
342.758 7.51202 342.684 7.492 342.598 7.47302 cv
342.508 7.45697 342.402 7.44897 342.285 7.44501 cv
342.141 7.44897 342.02 7.46899 341.922 7.51202 cv
341.82 7.55902 341.738 7.62903 341.672 7.72302 cv
341.602 7.82001 341.551 7.94501 341.523 8.09802 cv
341.488 8.25 341.473 8.43701 341.477 8.65997 cv
341.477 9.30103 li
342.746 9.30103 li
342.789 9.30499 342.832 9.31598 342.875 9.34003 cv
342.91 9.367 342.945 9.40997 342.973 9.46899 cv
342.996 9.53101 343.016 9.61298 343.031 9.71503 cv
343.043 9.81598 343.047 9.94501 343.051 10.094 cv
343.047 10.383 343.023 10.586 342.973 10.707 cv
342.918 10.832 342.84 10.895 342.746 10.891 cv
341.477 10.891 li
341.477 16.516 li
341.473 16.57 341.457 16.613 341.43 16.652 cv
341.395 16.691 341.344 16.727 341.273 16.75 cv
341.199 16.777 341.098 16.793 340.969 16.809 cv
340.836 16.82 340.676 16.828 340.492 16.828 cv
340.305 16.828 340.148 16.82 340.023 16.809 cv
339.895 16.793 339.793 16.777 339.719 16.75 cv
339.641 16.727 339.59 16.691 339.563 16.652 cv
339.531 16.613 339.516 16.57 339.52 16.516 cv
339.52 10.891 li
338.648 10.891 li
338.547 10.895 338.473 10.832 338.426 10.707 cv
338.375 10.586 338.348 10.383 338.352 10.094 cv
338.348 9.94501 338.355 9.81598 338.371 9.71503 cv
338.383 9.61298 338.402 9.53101 338.426 9.46899 cv
338.449 9.40997 338.48 9.367 338.52 9.34003 cv
338.559 9.31598 338.602 9.30499 338.656 9.30103 cv
339.52 9.30103 li
339.52 8.71503 li
339.516 8.24597 339.563 7.83197 339.66 7.47302 cv
339.75 7.117 339.898 6.82001 340.102 6.586 cv
340.301 6.35199 340.555 6.17603 340.863 6.05103 cv
341.172 5.93402 341.535 5.87097 341.961 5.87097 cv
342.156 5.87097 342.348 5.89099 342.535 5.922 cv
342.715 5.961 342.859 5.99597 342.965 6.03101 cv
343.066 6.07397 343.137 6.10901 343.176 6.14099 cv
343.211 6.17603 343.242 6.22699 343.266 6.289 cv
343.289 6.35498 343.305 6.43701 343.316 6.539 cv
343.324 6.64099 343.328 6.76599 343.332 6.914 cv
cp
f
353.879 13.758 mo
353.875 14.289 353.777 14.754 353.582 15.152 cv
353.383 15.555 353.117 15.891 352.781 16.156 cv
352.441 16.426 352.043 16.625 351.594 16.758 cv
351.141 16.891 350.66 16.957 350.148 16.961 cv
349.797 16.957 349.473 16.93 349.176 16.875 cv
348.875 16.816 348.613 16.75 348.387 16.668 cv
348.156 16.59 347.965 16.504 347.813 16.414 cv
347.66 16.328 347.551 16.25 347.484 16.18 cv
347.414 16.113 347.363 16.016 347.34 15.891 cv
347.309 15.766 347.297 15.582 347.297 15.34 cv
347.297 15.18 347.301 15.047 347.313 14.934 cv
347.32 14.828 347.336 14.738 347.363 14.668 cv
347.383 14.602 347.414 14.555 347.457 14.523 cv
347.492 14.5 347.539 14.484 347.59 14.48 cv
347.66 14.484 347.762 14.527 347.898 14.609 cv
348.027 14.699 348.199 14.793 348.41 14.895 cv
348.617 15 348.863 15.098 349.152 15.18 cv
349.438 15.27 349.773 15.312 350.156 15.309 cv
350.406 15.312 350.629 15.281 350.824 15.219 cv
351.02 15.16 351.188 15.074 351.328 14.965 cv
351.465 14.855 351.57 14.723 351.645 14.562 cv
351.715 14.402 351.75 14.223 351.754 14.023 cv
351.75 13.797 351.688 13.602 351.566 13.434 cv
351.438 13.273 351.273 13.129 351.078 13 cv
350.875 12.875 350.648 12.754 350.395 12.641 cv
350.141 12.531 349.879 12.414 349.609 12.285 cv
349.336 12.164 349.074 12.02 348.82 11.859 cv
348.566 11.703 348.34 11.516 348.141 11.293 cv
347.938 11.074 347.773 10.812 347.652 10.508 cv
347.527 10.207 347.465 9.84802 347.469 9.42603 cv
347.465 8.94501 347.555 8.52002 347.734 8.15198 cv
347.91 7.789 348.152 7.48401 348.461 7.23798 cv
348.762 7 349.121 6.82001 349.535 6.69897 cv
349.949 6.58197 350.387 6.52301 350.848 6.52002 cv
351.086 6.52301 351.324 6.539 351.566 6.57397 cv
351.805 6.61298 352.027 6.664 352.234 6.72302 cv
352.441 6.78497 352.625 6.85498 352.789 6.92999 cv
352.945 7.01202 353.055 7.07397 353.109 7.125 cv
353.16 7.17999 353.195 7.22699 353.215 7.258 cv
353.23 7.297 353.246 7.34399 353.262 7.40198 cv
353.273 7.46503 353.281 7.539 353.289 7.62903 cv
353.293 7.72302 353.297 7.836 353.297 7.96899 cv
353.297 8.12097 353.293 8.25 353.285 8.35199 cv
353.277 8.45697 353.262 8.54303 353.246 8.60498 cv
353.223 8.67603 353.199 8.72302 353.168 8.75403 cv
353.133 8.78497 353.086 8.80103 353.031 8.80103 cv
352.973 8.80103 352.883 8.76599 352.758 8.69098 cv
352.633 8.62097 352.477 8.54303 352.297 8.453 cv
352.113 8.37097 351.906 8.29303 351.668 8.22302 cv
351.426 8.15601 351.16 8.12097 350.879 8.117 cv
350.652 8.12097 350.461 8.14801 350.297 8.19897 cv
350.129 8.25403 349.988 8.328 349.879 8.422 cv
349.766 8.52002 349.684 8.63702 349.629 8.77002 cv
349.574 8.90997 349.547 9.05103 349.547 9.19897 cv
349.547 9.42603 349.605 9.62097 349.73 9.78101 cv
349.848 9.94501 350.012 10.09 350.223 10.215 cv
350.426 10.344 350.66 10.465 350.918 10.574 cv
351.176 10.691 351.441 10.809 351.715 10.93 cv
351.984 11.059 352.246 11.199 352.508 11.355 cv
352.766 11.512 353 11.703 353.203 11.922 cv
353.406 12.148 353.566 12.406 353.691 12.703 cv
353.813 13 353.875 13.352 353.879 13.758 cv
cp
f
361.93 16.516 mo
361.926 16.57 361.914 16.613 361.891 16.652 cv
361.863 16.691 361.816 16.727 361.754 16.75 cv
361.688 16.777 361.602 16.793 361.496 16.809 cv
361.391 16.82 361.258 16.828 361.098 16.828 cv
360.922 16.828 360.781 16.82 360.68 16.809 cv
360.57 16.793 360.488 16.777 360.426 16.75 cv
360.363 16.727 360.316 16.691 360.293 16.652 cv
360.262 16.613 360.25 16.57 360.254 16.516 cv
360.254 15.715 li
359.867 16.129 359.477 16.441 359.082 16.648 cv
358.68 16.855 358.27 16.957 357.848 16.961 cv
357.367 16.957 356.965 16.883 356.641 16.727 cv
356.316 16.574 356.055 16.359 355.855 16.09 cv
355.652 15.82 355.508 15.508 355.426 15.148 cv
355.336 14.793 355.293 14.352 355.297 13.82 cv
355.297 9.56598 li
355.293 9.52002 355.309 9.47302 355.34 9.42999 cv
355.367 9.39502 355.418 9.36298 355.496 9.33197 cv
355.57 9.30902 355.672 9.289 355.801 9.27301 cv
355.926 9.26599 356.082 9.258 356.273 9.25403 cv
356.461 9.258 356.621 9.26599 356.746 9.27301 cv
356.871 9.289 356.969 9.30902 357.047 9.33197 cv
357.117 9.36298 357.172 9.39502 357.207 9.42999 cv
357.234 9.47302 357.25 9.52002 357.254 9.56598 cv
357.254 13.492 li
357.25 13.859 357.273 14.137 357.324 14.328 cv
357.367 14.52 357.438 14.684 357.539 14.82 cv
357.633 14.961 357.758 15.066 357.906 15.141 cv
358.055 15.219 358.227 15.258 358.422 15.254 cv
358.672 15.258 358.922 15.168 359.176 14.98 cv
359.426 14.801 359.695 14.535 359.98 14.187 cv
359.98 9.56598 li
359.98 9.52002 359.992 9.47302 360.023 9.42999 cv
360.047 9.39502 360.102 9.36298 360.18 9.33197 cv
360.254 9.30902 360.352 9.289 360.48 9.27301 cv
360.602 9.26599 360.762 9.258 360.957 9.25403 cv
361.148 9.258 361.305 9.26599 361.43 9.27301 cv
361.551 9.289 361.652 9.30902 361.727 9.33197 cv
361.797 9.36298 361.848 9.39502 361.883 9.42999 cv
361.91 9.47302 361.926 9.52002 361.93 9.56598 cv
cp
f
370.855 12.945 mo
370.855 13.566 370.785 14.125 370.652 14.617 cv
370.512 15.113 370.316 15.531 370.066 15.879 cv
369.809 16.227 369.496 16.496 369.129 16.68 cv
368.754 16.867 368.332 16.957 367.863 16.961 cv
367.625 16.957 367.406 16.934 367.207 16.895 cv
367 16.848 366.809 16.781 366.625 16.68 cv
366.441 16.586 366.258 16.461 366.082 16.305 cv
365.898 16.156 365.715 15.973 365.531 15.762 cv
365.531 16.516 li
365.527 16.578 365.516 16.625 365.488 16.66 cv
365.457 16.703 365.41 16.734 365.348 16.758 cv
365.281 16.781 365.191 16.797 365.086 16.812 cv
364.977 16.82 364.848 16.828 364.691 16.828 cv
364.527 16.828 364.391 16.82 364.289 16.812 cv
364.18 16.797 364.094 16.781 364.031 16.758 cv
363.961 16.734 363.918 16.703 363.895 16.66 cv
363.867 16.625 363.852 16.578 363.855 16.516 cv
363.855 6.27002 li
363.852 6.21899 363.867 6.172 363.902 6.12903 cv
363.93 6.09003 363.984 6.05499 364.063 6.02301 cv
364.137 5.99597 364.238 5.97699 364.363 5.95697 cv
364.488 5.94501 364.645 5.93701 364.84 5.93402 cv
365.027 5.93701 365.188 5.94501 365.313 5.95697 cv
365.438 5.97699 365.535 5.99597 365.613 6.02301 cv
365.684 6.05499 365.738 6.09003 365.773 6.12903 cv
365.801 6.172 365.816 6.21899 365.82 6.27002 cv
365.82 10.109 li
365.996 9.93402 366.172 9.78497 366.352 9.65997 cv
366.523 9.539 366.699 9.43402 366.879 9.35199 cv
367.051 9.27301 367.234 9.21503 367.426 9.17603 cv
367.609 9.14099 367.809 9.125 368.02 9.12097 cv
368.531 9.125 368.965 9.22699 369.328 9.42999 cv
369.684 9.63702 369.977 9.914 370.203 10.262 cv
370.426 10.609 370.59 11.016 370.699 11.48 cv
370.801 11.945 370.855 12.434 370.855 12.945 cv
cp
368.82 13.086 mo
368.816 12.793 368.793 12.508 368.754 12.23 cv
368.707 11.957 368.633 11.715 368.523 11.5 cv
368.414 11.289 368.27 11.117 368.098 10.988 cv
367.922 10.863 367.703 10.801 367.441 10.797 cv
367.309 10.801 367.184 10.816 367.059 10.852 cv
366.934 10.891 366.805 10.953 366.672 11.039 cv
366.539 11.129 366.402 11.246 366.266 11.383 cv
366.121 11.523 365.973 11.695 365.82 11.902 cv
365.82 14.211 li
366.094 14.566 366.355 14.836 366.609 15.016 cv
366.859 15.203 367.125 15.293 367.402 15.293 cv
367.656 15.293 367.871 15.23 368.051 15.098 cv
368.223 14.973 368.371 14.805 368.488 14.594 cv
368.605 14.391 368.688 14.152 368.742 13.883 cv
368.789 13.621 368.816 13.355 368.82 13.086 cv
cp
f
375.945 12.863 mo
375.941 13.164 375.914 13.375 375.859 13.492 cv
375.801 13.617 375.711 13.676 375.586 13.672 cv
372.344 13.672 li
372.215 13.676 372.121 13.613 372.066 13.488 cv
372.004 13.367 371.977 13.16 371.98 12.863 cv
371.977 12.574 372.004 12.367 372.066 12.246 cv
372.121 12.129 372.215 12.07 372.344 12.066 cv
375.586 12.066 li
375.648 12.07 375.699 12.082 375.746 12.105 cv
375.785 12.133 375.824 12.18 375.859 12.238 cv
375.887 12.305 375.91 12.387 375.926 12.488 cv
375.938 12.594 375.941 12.719 375.945 12.863 cv
cp
f
379.598 16.5 mo
379.594 16.555 379.578 16.602 379.547 16.641 cv
379.512 16.684 379.453 16.719 379.379 16.742 cv
379.297 16.77 379.195 16.789 379.066 16.805 cv
378.934 16.82 378.766 16.828 378.57 16.828 cv
378.367 16.828 378.203 16.82 378.074 16.805 cv
377.938 16.789 377.832 16.77 377.758 16.742 cv
377.676 16.719 377.621 16.684 377.59 16.641 cv
377.555 16.602 377.535 16.555 377.539 16.5 cv
377.539 6.97699 li
377.535 6.92999 377.555 6.883 377.59 6.836 cv
377.621 6.797 377.676 6.76202 377.762 6.73401 cv
377.84 6.711 377.945 6.69098 378.078 6.672 cv
378.203 6.65997 378.367 6.65198 378.57 6.64801 cv
378.766 6.65198 378.934 6.65997 379.066 6.672 cv
379.195 6.69098 379.297 6.711 379.379 6.73401 cv
379.453 6.76202 379.512 6.797 379.547 6.836 cv
379.578 6.883 379.594 6.92999 379.598 6.97699 cv
cp
f
392.676 16.516 mo
392.672 16.57 392.656 16.613 392.629 16.652 cv
392.594 16.691 392.543 16.727 392.473 16.75 cv
392.398 16.777 392.297 16.793 392.176 16.809 cv
392.051 16.82 391.895 16.828 391.703 16.828 cv
391.504 16.828 391.344 16.82 391.219 16.809 cv
391.094 16.793 390.992 16.777 390.918 16.75 cv
390.84 16.727 390.789 16.691 390.762 16.652 cv
390.734 16.613 390.719 16.57 390.723 16.516 cv
390.723 12.395 li
390.719 12.164 390.699 11.949 390.656 11.754 cv
390.609 11.562 390.539 11.398 390.453 11.262 cv
390.359 11.125 390.246 11.02 390.109 10.941 cv
389.969 10.867 389.805 10.828 389.613 10.828 cv
389.379 10.828 389.141 10.922 388.902 11.102 cv
388.664 11.285 388.406 11.547 388.125 11.895 cv
388.125 16.516 li
388.125 16.57 388.109 16.613 388.078 16.652 cv
388.047 16.691 387.992 16.727 387.918 16.75 cv
387.84 16.777 387.738 16.793 387.617 16.809 cv
387.492 16.82 387.34 16.828 387.152 16.828 cv
386.957 16.828 386.797 16.82 386.676 16.809 cv
386.547 16.793 386.445 16.777 386.375 16.75 cv
386.297 16.727 386.246 16.691 386.215 16.652 cv
386.184 16.613 386.168 16.57 386.168 16.516 cv
386.168 12.395 li
386.168 12.164 386.145 11.949 386.102 11.754 cv
386.059 11.562 385.992 11.398 385.906 11.262 cv
385.813 11.125 385.699 11.02 385.563 10.941 cv
385.418 10.867 385.254 10.828 385.07 10.828 cv
384.828 10.828 384.59 10.922 384.352 11.102 cv
384.113 11.285 383.855 11.547 383.582 11.895 cv
383.582 16.516 li
383.578 16.57 383.563 16.613 383.535 16.652 cv
383.5 16.691 383.445 16.727 383.375 16.75 cv
383.297 16.777 383.199 16.793 383.074 16.809 cv
382.949 16.82 382.789 16.828 382.602 16.828 cv
382.406 16.828 382.25 16.82 382.125 16.809 cv
382 16.793 381.898 16.777 381.824 16.75 cv
381.746 16.727 381.691 16.691 381.664 16.652 cv
381.629 16.613 381.613 16.57 381.617 16.516 cv
381.617 9.56598 li
381.613 9.52002 381.629 9.47302 381.656 9.42999 cv
381.68 9.39502 381.727 9.36298 381.797 9.33197 cv
381.863 9.30902 381.949 9.289 382.059 9.27301 cv
382.164 9.26599 382.297 9.258 382.461 9.25403 cv
382.625 9.258 382.762 9.26599 382.871 9.27301 cv
382.977 9.289 383.063 9.30902 383.125 9.33197 cv
383.184 9.36298 383.227 9.39502 383.254 9.42999 cv
383.277 9.47302 383.289 9.52002 383.293 9.56598 cv
383.293 10.367 li
383.676 9.95697 384.059 9.64502 384.441 9.43402 cv
384.82 9.22699 385.223 9.125 385.641 9.12097 cv
385.926 9.125 386.18 9.15198 386.41 9.211 cv
386.637 9.27301 386.844 9.35901 387.023 9.46899 cv
387.203 9.58197 387.355 9.71899 387.484 9.87097 cv
387.613 10.027 387.723 10.199 387.813 10.391 cv
388.02 10.168 388.223 9.97699 388.426 9.81598 cv
388.621 9.65601 388.82 9.52301 389.016 9.422 cv
389.211 9.32001 389.406 9.24597 389.602 9.19501 cv
389.797 9.14801 389.996 9.125 390.199 9.12097 cv
390.66 9.125 391.047 9.203 391.367 9.35498 cv
391.68 9.51599 391.938 9.72699 392.133 9.992 cv
392.328 10.262 392.465 10.574 392.551 10.93 cv
392.629 11.289 392.672 11.668 392.676 12.066 cv
cp
f
400.52 16.539 mo
400.516 16.617 400.488 16.672 400.441 16.711 cv
400.387 16.754 400.305 16.781 400.195 16.801 cv
400.078 16.816 399.914 16.828 399.699 16.828 cv
399.461 16.828 399.289 16.816 399.188 16.801 cv
399.078 16.781 399.004 16.754 398.965 16.711 cv
398.918 16.672 398.898 16.617 398.898 16.539 cv
398.898 15.988 li
398.609 16.297 398.281 16.535 397.918 16.703 cv
397.551 16.875 397.145 16.957 396.699 16.961 cv
396.328 16.957 395.988 16.91 395.68 16.816 cv
395.371 16.723 395.105 16.582 394.879 16.387 cv
394.652 16.199 394.477 15.965 394.352 15.684 cv
394.227 15.406 394.164 15.078 394.168 14.699 cv
394.164 14.301 394.242 13.949 394.402 13.645 cv
394.559 13.348 394.797 13.102 395.113 12.906 cv
395.426 12.715 395.816 12.57 396.285 12.473 cv
396.754 12.383 397.297 12.336 397.914 12.332 cv
398.594 12.332 li
398.594 11.91 li
398.594 11.695 398.57 11.504 398.527 11.34 cv
398.48 11.18 398.406 11.043 398.309 10.93 cv
398.203 10.824 398.07 10.742 397.902 10.687 cv
397.73 10.637 397.52 10.613 397.277 10.609 cv
396.945 10.613 396.652 10.648 396.398 10.719 cv
396.137 10.793 395.91 10.875 395.715 10.961 cv
395.516 11.055 395.352 11.133 395.223 11.203 cv
395.086 11.277 394.977 11.316 394.898 11.312 cv
394.836 11.316 394.785 11.297 394.746 11.258 cv
394.699 11.223 394.664 11.172 394.637 11.102 cv
394.605 11.039 394.582 10.953 394.57 10.852 cv
394.551 10.754 394.543 10.645 394.547 10.523 cv
394.543 10.363 394.559 10.238 394.586 10.141 cv
394.609 10.051 394.656 9.96503 394.734 9.88702 cv
394.805 9.81201 394.934 9.72998 395.117 9.64099 cv
395.297 9.55103 395.508 9.46503 395.754 9.38702 cv
395.996 9.30902 396.266 9.24597 396.555 9.19501 cv
396.844 9.14801 397.141 9.125 397.449 9.12097 cv
397.992 9.125 398.457 9.17603 398.844 9.28101 cv
399.23 9.39099 399.551 9.55499 399.801 9.77301 cv
400.051 9.992 400.23 10.277 400.348 10.625 cv
400.457 10.977 400.516 11.391 400.52 11.863 cv
cp
398.594 13.562 mo
397.844 13.562 li
397.527 13.566 397.258 13.59 397.035 13.633 cv
396.809 13.684 396.625 13.754 396.488 13.844 cv
396.344 13.941 396.242 14.055 396.18 14.184 cv
396.113 14.32 396.078 14.469 396.082 14.637 cv
396.078 14.93 396.172 15.16 396.359 15.324 cv
396.543 15.492 396.801 15.574 397.129 15.574 cv
397.402 15.574 397.652 15.504 397.887 15.363 cv
398.113 15.223 398.352 15.02 398.594 14.746 cv
cp
f
408.742 10.047 mo
408.738 10.301 408.711 10.484 408.656 10.602 cv
408.598 10.723 408.527 10.781 408.449 10.781 cv
407.629 10.781 li
407.742 10.906 407.824 11.051 407.875 11.207 cv
407.922 11.367 407.945 11.531 407.949 11.699 cv
407.945 12.109 407.879 12.469 407.746 12.781 cv
407.609 13.098 407.414 13.363 407.164 13.574 cv
406.91 13.793 406.609 13.957 406.254 14.066 cv
405.895 14.184 405.496 14.238 405.066 14.234 cv
404.84 14.238 404.629 14.211 404.426 14.152 cv
404.223 14.102 404.066 14.039 403.957 13.961 cv
403.895 14.031 403.836 14.109 403.789 14.203 cv
403.738 14.297 403.715 14.402 403.719 14.512 cv
403.715 14.668 403.781 14.789 403.914 14.883 cv
404.043 14.98 404.23 15.035 404.473 15.043 cv
406.164 15.105 li
406.559 15.121 406.91 15.18 407.219 15.273 cv
407.527 15.375 407.789 15.508 408 15.68 cv
408.211 15.855 408.371 16.066 408.48 16.309 cv
408.59 16.555 408.645 16.828 408.648 17.141 cv
408.645 17.477 408.57 17.801 408.422 18.109 cv
408.273 18.41 408.047 18.672 407.746 18.898 cv
407.441 19.117 407.063 19.297 406.609 19.43 cv
406.152 19.559 405.621 19.621 405.02 19.625 cv
404.422 19.621 403.918 19.574 403.5 19.484 cv
403.082 19.387 402.738 19.258 402.473 19.094 cv
402.203 18.926 402.008 18.727 401.891 18.5 cv
401.766 18.266 401.707 18.012 401.707 17.738 cv
401.707 17.566 401.727 17.406 401.773 17.25 cv
401.813 17.094 401.879 16.941 401.969 16.801 cv
402.051 16.656 402.156 16.523 402.281 16.391 cv
402.406 16.262 402.547 16.137 402.711 16.016 cv
402.484 15.902 402.313 15.742 402.191 15.531 cv
402.07 15.328 402.012 15.102 402.012 14.855 cv
402.012 14.555 402.078 14.277 402.219 14.02 cv
402.355 13.77 402.539 13.539 402.766 13.336 cv
402.582 13.156 402.438 12.941 402.328 12.684 cv
402.219 12.434 402.164 12.113 402.168 11.73 cv
402.164 11.328 402.234 10.969 402.379 10.645 cv
402.52 10.328 402.719 10.059 402.977 9.836 cv
403.23 9.617 403.535 9.44501 403.887 9.328 cv
404.238 9.211 404.629 9.15198 405.059 9.15198 cv
405.277 9.15198 405.484 9.16803 405.684 9.19098 cv
405.883 9.22302 406.07 9.258 406.242 9.30103 cv
408.449 9.30103 li
408.531 9.30499 408.602 9.36298 408.66 9.47302 cv
408.711 9.59003 408.738 9.78101 408.742 10.047 cv
cp
406.227 11.691 mo
406.223 11.32 406.121 11.031 405.914 10.82 cv
405.703 10.617 405.41 10.512 405.035 10.508 cv
404.84 10.512 404.668 10.543 404.527 10.605 cv
404.379 10.672 404.258 10.762 404.164 10.871 cv
404.063 10.984 403.992 11.113 403.949 11.262 cv
403.898 11.41 403.875 11.566 403.879 11.723 cv
403.875 12.082 403.98 12.359 404.191 12.562 cv
404.398 12.77 404.688 12.875 405.059 12.871 cv
405.254 12.875 405.422 12.844 405.57 12.777 cv
405.711 12.719 405.832 12.633 405.934 12.52 cv
406.027 12.414 406.102 12.285 406.152 12.141 cv
406.199 12 406.223 11.852 406.227 11.691 cv
cp
406.688 17.242 mo
406.688 17.004 406.594 16.828 406.406 16.703 cv
406.219 16.582 405.961 16.512 405.633 16.5 cv
404.238 16.461 li
404.102 16.562 403.992 16.656 403.914 16.746 cv
403.832 16.836 403.77 16.922 403.723 17.008 cv
403.672 17.09 403.637 17.172 403.625 17.25 cv
403.605 17.328 403.598 17.406 403.602 17.492 cv
403.598 17.746 403.73 17.945 403.992 18.082 cv
404.254 18.215 404.625 18.281 405.105 18.285 cv
405.398 18.281 405.645 18.25 405.852 18.195 cv
406.051 18.133 406.215 18.055 406.344 17.957 cv
406.465 17.855 406.555 17.746 406.609 17.625 cv
406.66 17.504 406.688 17.375 406.688 17.242 cv
cp
f
416.352 12.84 mo
416.348 13.078 416.297 13.254 416.191 13.367 cv
416.082 13.484 415.934 13.543 415.754 13.539 cv
411.52 13.539 li
411.516 13.84 411.551 14.109 411.625 14.348 cv
411.691 14.59 411.805 14.793 411.961 14.961 cv
412.113 15.133 412.309 15.262 412.551 15.348 cv
412.789 15.437 413.078 15.48 413.422 15.48 cv
413.762 15.48 414.063 15.457 414.324 15.406 cv
414.582 15.359 414.809 15.305 415 15.242 cv
415.188 15.184 415.344 15.129 415.473 15.078 cv
415.594 15.031 415.695 15.008 415.777 15.004 cv
415.82 15.008 415.859 15.016 415.895 15.031 cv
415.922 15.051 415.949 15.082 415.969 15.129 cv
415.988 15.176 416 15.242 416.012 15.328 cv
416.016 15.414 416.02 15.523 416.023 15.652 cv
416.02 15.77 416.02 15.867 416.016 15.945 cv
416.008 16.027 416 16.094 415.992 16.148 cv
415.98 16.207 415.965 16.258 415.945 16.293 cv
415.926 16.336 415.898 16.371 415.867 16.406 cv
415.832 16.445 415.738 16.496 415.59 16.555 cv
415.434 16.621 415.242 16.684 415.012 16.738 cv
414.773 16.801 414.504 16.848 414.207 16.895 cv
413.902 16.934 413.582 16.957 413.242 16.961 cv
412.621 16.957 412.078 16.883 411.617 16.727 cv
411.148 16.574 410.762 16.336 410.453 16.02 cv
410.137 15.703 409.902 15.305 409.754 14.82 cv
409.598 14.34 409.523 13.773 409.527 13.117 cv
409.523 12.504 409.602 11.945 409.766 11.449 cv
409.922 10.953 410.156 10.535 410.469 10.187 cv
410.773 9.84399 411.148 9.578 411.586 9.39502 cv
412.023 9.21503 412.516 9.125 413.07 9.12097 cv
413.648 9.125 414.148 9.211 414.563 9.37903 cv
414.977 9.55499 415.313 9.79303 415.578 10.094 cv
415.84 10.398 416.035 10.758 416.164 11.172 cv
416.285 11.59 416.348 12.039 416.352 12.527 cv
cp
414.449 12.277 mo
414.461 11.727 414.352 11.293 414.117 10.98 cv
413.883 10.668 413.516 10.512 413.023 10.508 cv
412.773 10.512 412.559 10.559 412.375 10.648 cv
412.188 10.746 412.035 10.871 411.914 11.027 cv
411.789 11.187 411.695 11.375 411.633 11.59 cv
411.566 11.805 411.527 12.035 411.52 12.277 cv
cp
f
422.852 14.551 mo
422.848 14.949 422.773 15.297 422.629 15.598 cv
422.48 15.898 422.273 16.152 422.004 16.352 cv
421.73 16.559 421.41 16.707 421.043 16.809 cv
420.676 16.906 420.273 16.957 419.844 16.961 cv
419.578 16.957 419.332 16.937 419.098 16.902 cv
418.863 16.859 418.652 16.812 418.465 16.754 cv
418.277 16.695 418.121 16.633 417.996 16.57 cv
417.871 16.508 417.777 16.449 417.723 16.395 cv
417.664 16.34 417.621 16.258 417.594 16.141 cv
417.559 16.027 417.543 15.852 417.547 15.621 cv
417.543 15.473 417.551 15.352 417.563 15.258 cv
417.57 15.168 417.586 15.098 417.609 15.039 cv
417.629 14.988 417.652 14.949 417.688 14.93 cv
417.715 14.914 417.754 14.906 417.801 14.902 cv
417.855 14.906 417.941 14.937 418.055 15 cv
418.164 15.066 418.301 15.141 418.473 15.215 cv
418.637 15.297 418.832 15.367 419.051 15.434 cv
419.27 15.504 419.52 15.539 419.805 15.535 cv
419.98 15.539 420.137 15.52 420.277 15.48 cv
420.41 15.445 420.531 15.395 420.637 15.324 cv
420.734 15.258 420.809 15.172 420.863 15.066 cv
420.91 14.965 420.938 14.844 420.941 14.707 cv
420.938 14.551 420.891 14.418 420.797 14.309 cv
420.703 14.199 420.574 14.102 420.418 14.016 cv
420.254 13.934 420.074 13.855 419.879 13.781 cv
419.676 13.711 419.473 13.633 419.262 13.539 cv
419.051 13.453 418.844 13.352 418.648 13.234 cv
418.445 13.125 418.266 12.984 418.109 12.816 cv
417.945 12.652 417.82 12.453 417.727 12.215 cv
417.633 11.984 417.586 11.703 417.586 11.371 cv
417.586 11.043 417.648 10.738 417.777 10.457 cv
417.906 10.184 418.094 9.94501 418.34 9.74597 cv
418.582 9.55103 418.879 9.39801 419.23 9.28497 cv
419.578 9.17999 419.973 9.125 420.414 9.12097 cv
420.629 9.125 420.84 9.14099 421.047 9.16803 cv
421.25 9.203 421.438 9.242 421.605 9.28497 cv
421.77 9.336 421.91 9.38702 422.027 9.43701 cv
422.141 9.49597 422.223 9.54303 422.273 9.578 cv
422.32 9.62097 422.355 9.65997 422.379 9.69501 cv
422.398 9.73798 422.41 9.78497 422.422 9.836 cv
422.43 9.89099 422.441 9.95697 422.449 10.035 cv
422.457 10.121 422.461 10.219 422.461 10.336 cv
422.461 10.477 422.457 10.594 422.449 10.68 cv
422.441 10.773 422.426 10.844 422.41 10.891 cv
422.391 10.945 422.367 10.98 422.34 10.996 cv
422.305 11.02 422.27 11.027 422.23 11.023 cv
422.18 11.027 422.105 11 422.012 10.941 cv
421.91 10.891 421.789 10.832 421.641 10.766 cv
421.492 10.707 421.32 10.648 421.125 10.59 cv
420.93 10.539 420.707 10.512 420.461 10.508 cv
420.281 10.512 420.129 10.531 420 10.562 cv
419.867 10.602 419.758 10.652 419.68 10.719 cv
419.594 10.789 419.531 10.867 419.492 10.957 cv
419.445 11.051 419.426 11.148 419.43 11.25 cv
419.426 11.41 419.477 11.547 419.578 11.652 cv
419.676 11.766 419.805 11.859 419.969 11.941 cv
420.129 12.027 420.313 12.105 420.52 12.176 cv
420.723 12.25 420.93 12.332 421.141 12.414 cv
421.348 12.504 421.555 12.602 421.766 12.715 cv
421.969 12.828 422.152 12.969 422.313 13.133 cv
422.473 13.301 422.602 13.5 422.703 13.73 cv
422.797 13.965 422.848 14.238 422.852 14.551 cv
cp
f
431.625 12.863 mo
431.621 13.164 431.594 13.375 431.539 13.492 cv
431.48 13.617 431.391 13.676 431.266 13.672 cv
428.023 13.672 li
427.895 13.676 427.801 13.613 427.746 13.488 cv
427.684 13.367 427.656 13.16 427.66 12.863 cv
427.656 12.574 427.684 12.367 427.746 12.246 cv
427.801 12.129 427.895 12.07 428.023 12.066 cv
431.266 12.066 li
431.328 12.07 431.379 12.082 431.426 12.105 cv
431.465 12.133 431.504 12.18 431.539 12.238 cv
431.566 12.305 431.59 12.387 431.605 12.488 cv
431.617 12.594 431.621 12.719 431.625 12.863 cv
cp
f
443.324 14.078 mo
443.324 14.539 443.242 14.945 443.086 15.301 cv
442.922 15.664 442.688 15.969 442.383 16.211 cv
442.07 16.461 441.688 16.645 441.234 16.77 cv
440.773 16.895 440.246 16.957 439.652 16.961 cv
439.078 16.957 438.578 16.898 438.148 16.789 cv
437.715 16.672 437.355 16.508 437.066 16.289 cv
436.773 16.07 436.555 15.797 436.41 15.469 cv
436.266 15.145 436.191 14.773 436.195 14.352 cv
436.191 14.066 436.234 13.797 436.324 13.543 cv
436.406 13.293 436.535 13.059 436.703 12.844 cv
436.871 12.629 437.082 12.426 437.336 12.234 cv
437.586 12.047 437.875 11.867 438.203 11.691 cv
437.938 11.547 437.699 11.391 437.488 11.223 cv
437.273 11.055 437.09 10.871 436.941 10.668 cv
436.789 10.473 436.676 10.254 436.598 10.012 cv
436.52 9.77698 436.48 9.51599 436.484 9.22998 cv
436.48 8.828 436.551 8.461 436.695 8.12903 cv
436.836 7.80103 437.051 7.51599 437.336 7.27002 cv
437.617 7.03101 437.969 6.84399 438.398 6.71503 cv
438.82 6.586 439.316 6.52301 439.879 6.52002 cv
440.434 6.52301 440.91 6.58197 441.309 6.69897 cv
441.707 6.82001 442.031 6.98798 442.289 7.203 cv
442.539 7.42603 442.727 7.68701 442.852 7.98798 cv
442.969 8.29303 443.031 8.62903 443.035 8.99597 cv
443.031 9.242 442.992 9.47998 442.914 9.711 cv
442.832 9.94098 442.719 10.16 442.574 10.367 cv
442.43 10.578 442.25 10.773 442.039 10.957 cv
441.824 11.145 441.582 11.312 441.313 11.457 cv
441.629 11.625 441.914 11.801 442.164 11.988 cv
442.414 12.176 442.621 12.379 442.793 12.594 cv
442.961 12.809 443.094 13.039 443.188 13.281 cv
443.277 13.531 443.324 13.797 443.324 14.078 cv
cp
441.066 9.18402 mo
441.063 9.00403 441.035 8.84003 440.988 8.69098 cv
440.934 8.547 440.852 8.42603 440.742 8.32397 cv
440.625 8.22699 440.488 8.14801 440.328 8.09399 cv
440.16 8.04303 439.965 8.01599 439.746 8.01599 cv
439.309 8.01599 438.984 8.117 438.773 8.31598 cv
438.555 8.51599 438.449 8.79303 438.453 9.14502 cv
438.449 9.31598 438.477 9.46899 438.535 9.60498 cv
438.586 9.74597 438.672 9.87903 438.789 10 cv
438.902 10.129 439.051 10.25 439.234 10.367 cv
439.414 10.488 439.629 10.617 439.879 10.75 cv
440.258 10.531 440.551 10.293 440.758 10.035 cv
440.961 9.78497 441.063 9.5 441.066 9.18402 cv
cp
441.297 14.219 mo
441.297 14.031 441.262 13.855 441.199 13.691 cv
441.133 13.535 441.035 13.383 440.898 13.242 cv
440.758 13.102 440.582 12.969 440.379 12.84 cv
440.168 12.711 439.926 12.578 439.652 12.441 cv
439.41 12.574 439.203 12.703 439.023 12.832 cv
438.84 12.961 438.688 13.098 438.57 13.238 cv
438.449 13.383 438.359 13.535 438.301 13.691 cv
438.238 13.855 438.207 14.023 438.211 14.203 cv
438.207 14.609 438.34 14.918 438.605 15.129 cv
438.867 15.344 439.258 15.453 439.777 15.449 cv
440.285 15.453 440.664 15.344 440.918 15.121 cv
441.168 14.906 441.297 14.605 441.297 14.219 cv
cp
f
455.273 7.539 mo
455.27 7.69501 455.262 7.82397 455.254 7.92603 cv
455.238 8.03497 455.219 8.12097 455.195 8.18402 cv
455.164 8.25 455.133 8.297 455.098 8.32397 cv
455.055 8.35901 455.012 8.375 454.969 8.37097 cv
452.445 8.37097 li
452.445 16.5 li
452.445 16.555 452.426 16.602 452.395 16.641 cv
452.355 16.684 452.301 16.719 452.227 16.742 cv
452.145 16.77 452.039 16.789 451.91 16.805 cv
451.773 16.82 451.609 16.828 451.414 16.828 cv
451.219 16.828 451.055 16.82 450.922 16.805 cv
450.789 16.789 450.684 16.77 450.605 16.742 cv
450.527 16.719 450.469 16.684 450.438 16.641 cv
450.398 16.602 450.383 16.555 450.387 16.5 cv
450.387 8.37097 li
447.863 8.37097 li
447.809 8.375 447.762 8.35901 447.73 8.32397 cv
447.691 8.297 447.66 8.25 447.637 8.18402 cv
447.605 8.12097 447.586 8.03497 447.578 7.92603 cv
447.563 7.82397 447.559 7.69501 447.559 7.539 cv
447.559 7.38702 447.563 7.25403 447.578 7.14099 cv
447.586 7.03497 447.605 6.94501 447.637 6.87903 cv
447.66 6.81598 447.691 6.77002 447.73 6.73798 cv
447.762 6.711 447.809 6.69897 447.863 6.69501 cv
454.969 6.69501 li
455.012 6.69897 455.055 6.711 455.098 6.73798 cv
455.133 6.77002 455.164 6.81598 455.195 6.87903 cv
455.219 6.94501 455.238 7.03497 455.254 7.14099 cv
455.262 7.25403 455.27 7.38702 455.273 7.539 cv
cp
f
462.988 16.516 mo
462.984 16.57 462.969 16.613 462.941 16.652 cv
462.906 16.691 462.855 16.727 462.785 16.75 cv
462.711 16.777 462.609 16.793 462.484 16.809 cv
462.355 16.82 462.199 16.828 462.016 16.828 cv
461.82 16.828 461.66 16.82 461.535 16.809 cv
461.406 16.793 461.305 16.777 461.234 16.75 cv
461.156 16.727 461.105 16.691 461.078 16.652 cv
461.043 16.613 461.027 16.57 461.031 16.516 cv
461.031 12.551 li
461.027 12.215 461.004 11.949 460.957 11.754 cv
460.906 11.562 460.832 11.398 460.742 11.262 cv
460.648 11.125 460.531 11.02 460.383 10.941 cv
460.234 10.867 460.059 10.828 459.863 10.828 cv
459.609 10.828 459.359 10.922 459.105 11.102 cv
458.852 11.285 458.586 11.547 458.313 11.895 cv
458.313 16.516 li
458.309 16.57 458.293 16.613 458.266 16.652 cv
458.23 16.691 458.176 16.727 458.105 16.75 cv
458.027 16.777 457.93 16.793 457.805 16.809 cv
457.68 16.82 457.52 16.828 457.332 16.828 cv
457.137 16.828 456.98 16.82 456.855 16.809 cv
456.73 16.793 456.629 16.777 456.555 16.75 cv
456.477 16.727 456.422 16.691 456.395 16.652 cv
456.359 16.613 456.344 16.57 456.348 16.516 cv
456.348 6.27002 li
456.344 6.21899 456.359 6.172 456.395 6.12903 cv
456.422 6.09003 456.477 6.05499 456.555 6.02301 cv
456.629 5.99597 456.73 5.97699 456.855 5.95697 cv
456.98 5.94501 457.137 5.93701 457.332 5.93402 cv
457.52 5.93701 457.68 5.94501 457.805 5.95697 cv
457.93 5.97699 458.027 5.99597 458.105 6.02301 cv
458.176 6.05499 458.23 6.09003 458.266 6.12903 cv
458.293 6.172 458.309 6.21899 458.313 6.27002 cv
458.313 10.109 li
458.648 9.78101 458.992 9.53497 459.344 9.367 cv
459.691 9.20697 460.059 9.125 460.441 9.12097 cv
460.91 9.125 461.309 9.203 461.637 9.35498 cv
461.961 9.51599 462.223 9.72699 462.422 9.99597 cv
462.621 10.266 462.766 10.582 462.855 10.941 cv
462.941 11.305 462.984 11.742 462.988 12.254 cv
cp
f
469.387 10.211 mo
469.387 10.402 469.379 10.555 469.371 10.672 cv
469.355 10.793 469.34 10.887 469.324 10.953 cv
469.301 11.023 469.273 11.07 469.242 11.094 cv
469.203 11.121 469.16 11.133 469.113 11.133 cv
469.066 11.133 469.02 11.125 468.973 11.105 cv
468.918 11.09 468.859 11.07 468.797 11.047 cv
468.727 11.027 468.656 11.008 468.582 10.988 cv
468.5 10.973 468.414 10.965 468.324 10.961 cv
468.211 10.965 468.102 10.984 467.996 11.027 cv
467.887 11.074 467.773 11.145 467.66 11.234 cv
467.539 11.328 467.418 11.453 467.293 11.605 cv
467.164 11.766 467.027 11.957 466.883 12.184 cv
466.883 16.516 li
466.879 16.57 466.863 16.613 466.836 16.652 cv
466.801 16.691 466.746 16.727 466.676 16.75 cv
466.598 16.777 466.5 16.793 466.375 16.809 cv
466.25 16.82 466.09 16.828 465.902 16.828 cv
465.707 16.828 465.551 16.82 465.426 16.809 cv
465.301 16.793 465.199 16.777 465.125 16.75 cv
465.047 16.727 464.992 16.691 464.965 16.652 cv
464.93 16.613 464.914 16.57 464.918 16.516 cv
464.918 9.56598 li
464.914 9.52002 464.93 9.47302 464.957 9.42999 cv
464.98 9.39502 465.027 9.36298 465.098 9.33197 cv
465.164 9.30902 465.25 9.289 465.359 9.27301 cv
465.465 9.26599 465.598 9.258 465.762 9.25403 cv
465.926 9.258 466.063 9.26599 466.172 9.27301 cv
466.277 9.289 466.363 9.30902 466.426 9.33197 cv
466.484 9.36298 466.527 9.39502 466.555 9.42999 cv
466.578 9.47302 466.59 9.52002 466.594 9.56598 cv
466.594 10.43 li
466.773 10.172 466.945 9.961 467.109 9.789 cv
467.266 9.625 467.422 9.48798 467.57 9.38702 cv
467.715 9.289 467.859 9.22302 468.004 9.17999 cv
468.148 9.14502 468.293 9.125 468.441 9.12097 cv
468.508 9.125 468.582 9.12903 468.66 9.133 cv
468.738 9.14502 468.816 9.15601 468.902 9.172 cv
468.98 9.19098 469.055 9.211 469.121 9.23401 cv
469.18 9.258 469.227 9.28497 469.258 9.30902 cv
469.285 9.34003 469.305 9.367 469.32 9.39502 cv
469.332 9.42999 469.344 9.47302 469.355 9.52301 cv
469.363 9.58197 469.371 9.664 469.379 9.77002 cv
469.383 9.87903 469.387 10.027 469.387 10.211 cv
cp
f
476.828 12.84 mo
476.824 13.078 476.773 13.254 476.668 13.367 cv
476.559 13.484 476.41 13.543 476.23 13.539 cv
471.996 13.539 li
471.992 13.84 472.027 14.109 472.102 14.348 cv
472.168 14.59 472.281 14.793 472.438 14.961 cv
472.59 15.133 472.785 15.262 473.027 15.348 cv
473.266 15.437 473.555 15.48 473.898 15.48 cv
474.238 15.48 474.539 15.457 474.801 15.406 cv
475.059 15.359 475.285 15.305 475.477 15.242 cv
475.664 15.184 475.82 15.129 475.949 15.078 cv
476.07 15.031 476.172 15.008 476.254 15.004 cv
476.297 15.008 476.336 15.016 476.371 15.031 cv
476.398 15.051 476.426 15.082 476.445 15.129 cv
476.465 15.176 476.477 15.242 476.488 15.328 cv
476.492 15.414 476.496 15.523 476.5 15.652 cv
476.496 15.77 476.496 15.867 476.492 15.945 cv
476.484 16.027 476.477 16.094 476.469 16.148 cv
476.457 16.207 476.441 16.258 476.422 16.293 cv
476.402 16.336 476.375 16.371 476.344 16.406 cv
476.309 16.445 476.215 16.496 476.066 16.555 cv
475.91 16.621 475.719 16.684 475.488 16.738 cv
475.25 16.801 474.98 16.848 474.684 16.895 cv
474.379 16.934 474.059 16.957 473.719 16.961 cv
473.098 16.957 472.555 16.883 472.094 16.727 cv
471.625 16.574 471.238 16.336 470.93 16.02 cv
470.613 15.703 470.379 15.305 470.23 14.82 cv
470.074 14.34 470 13.773 470.004 13.117 cv
470 12.504 470.078 11.945 470.242 11.449 cv
470.398 10.953 470.633 10.535 470.945 10.187 cv
471.25 9.84399 471.625 9.578 472.063 9.39502 cv
472.5 9.21503 472.992 9.125 473.547 9.12097 cv
474.125 9.125 474.625 9.211 475.039 9.37903 cv
475.453 9.55499 475.789 9.79303 476.055 10.094 cv
476.316 10.398 476.512 10.758 476.641 11.172 cv
476.762 11.59 476.824 12.039 476.828 12.527 cv
cp
474.926 12.277 mo
474.938 11.727 474.828 11.293 474.594 10.98 cv
474.359 10.668 473.992 10.512 473.5 10.508 cv
473.25 10.512 473.035 10.559 472.852 10.648 cv
472.664 10.746 472.512 10.871 472.391 11.027 cv
472.266 11.187 472.172 11.375 472.109 11.59 cv
472.043 11.805 472.004 12.035 471.996 12.277 cv
cp
f
484.363 16.539 mo
484.359 16.617 484.332 16.672 484.285 16.711 cv
484.23 16.754 484.148 16.781 484.039 16.801 cv
483.922 16.816 483.758 16.828 483.543 16.828 cv
483.305 16.828 483.133 16.816 483.031 16.801 cv
482.922 16.781 482.848 16.754 482.809 16.711 cv
482.762 16.672 482.742 16.617 482.742 16.539 cv
482.742 15.988 li
482.453 16.297 482.125 16.535 481.762 16.703 cv
481.395 16.875 480.988 16.957 480.543 16.961 cv
480.172 16.957 479.832 16.91 479.523 16.816 cv
479.215 16.723 478.949 16.582 478.723 16.387 cv
478.496 16.199 478.32 15.965 478.195 15.684 cv
478.07 15.406 478.008 15.078 478.012 14.699 cv
478.008 14.301 478.086 13.949 478.246 13.645 cv
478.402 13.348 478.641 13.102 478.957 12.906 cv
479.27 12.715 479.66 12.57 480.129 12.473 cv
480.598 12.383 481.141 12.336 481.758 12.332 cv
482.438 12.332 li
482.438 11.91 li
482.438 11.695 482.414 11.504 482.371 11.34 cv
482.324 11.18 482.25 11.043 482.152 10.93 cv
482.047 10.824 481.914 10.742 481.746 10.687 cv
481.574 10.637 481.363 10.613 481.121 10.609 cv
480.789 10.613 480.496 10.648 480.242 10.719 cv
479.98 10.793 479.754 10.875 479.559 10.961 cv
479.359 11.055 479.195 11.133 479.066 11.203 cv
478.93 11.277 478.82 11.316 478.742 11.312 cv
478.68 11.316 478.629 11.297 478.59 11.258 cv
478.543 11.223 478.508 11.172 478.48 11.102 cv
478.449 11.039 478.426 10.953 478.414 10.852 cv
478.395 10.754 478.387 10.645 478.391 10.523 cv
478.387 10.363 478.402 10.238 478.43 10.141 cv
478.453 10.051 478.5 9.96503 478.578 9.88702 cv
478.648 9.81201 478.777 9.72998 478.961 9.64099 cv
479.141 9.55103 479.352 9.46503 479.598 9.38702 cv
479.84 9.30902 480.109 9.24597 480.398 9.19501 cv
480.688 9.14801 480.984 9.125 481.293 9.12097 cv
481.836 9.125 482.301 9.17603 482.688 9.28101 cv
483.074 9.39099 483.395 9.55499 483.645 9.77301 cv
483.895 9.992 484.074 10.277 484.191 10.625 cv
484.301 10.977 484.359 11.391 484.363 11.863 cv
cp
482.438 13.562 mo
481.688 13.562 li
481.371 13.566 481.102 13.59 480.879 13.633 cv
480.652 13.684 480.469 13.754 480.332 13.844 cv
480.188 13.941 480.086 14.055 480.023 14.184 cv
479.957 14.32 479.922 14.469 479.926 14.637 cv
479.922 14.93 480.016 15.16 480.203 15.324 cv
480.387 15.492 480.645 15.574 480.973 15.574 cv
481.246 15.574 481.496 15.504 481.73 15.363 cv
481.957 15.223 482.195 15.02 482.438 14.746 cv
cp
f
492.945 16.516 mo
492.941 16.578 492.93 16.625 492.906 16.66 cv
492.879 16.703 492.832 16.734 492.773 16.758 cv
492.707 16.781 492.625 16.797 492.52 16.812 cv
492.414 16.82 492.281 16.828 492.129 16.828 cv
491.957 16.828 491.824 16.82 491.723 16.812 cv
491.617 16.797 491.531 16.781 491.469 16.758 cv
491.402 16.734 491.355 16.703 491.328 16.66 cv
491.297 16.625 491.281 16.578 491.285 16.516 cv
491.285 15.746 li
490.926 16.133 490.551 16.43 490.16 16.641 cv
489.762 16.852 489.328 16.957 488.855 16.961 cv
488.32 16.957 487.871 16.855 487.508 16.652 cv
487.141 16.449 486.844 16.176 486.613 15.824 cv
486.379 15.48 486.211 15.074 486.109 14.605 cv
486.008 14.145 485.957 13.652 485.957 13.133 cv
485.957 12.52 486.02 11.965 486.152 11.469 cv
486.281 10.977 486.477 10.555 486.734 10.207 cv
486.988 9.85901 487.305 9.59399 487.684 9.40198 cv
488.063 9.21899 488.5 9.125 488.996 9.12097 cv
489.383 9.125 489.734 9.203 490.055 9.35901 cv
490.367 9.52002 490.684 9.75 490.996 10.055 cv
490.996 6.29303 li
490.996 6.242 491.008 6.19501 491.039 6.15198 cv
491.063 6.11298 491.117 6.078 491.195 6.047 cv
491.27 6.02002 491.367 6 491.496 5.97998 cv
491.617 5.96899 491.777 5.961 491.973 5.95697 cv
492.164 5.961 492.32 5.96899 492.445 5.97998 cv
492.566 6 492.668 6.02002 492.742 6.047 cv
492.813 6.078 492.863 6.11298 492.898 6.15198 cv
492.926 6.19501 492.941 6.242 492.945 6.29303 cv
cp
490.996 11.871 mo
490.715 11.52 490.445 11.25 490.191 11.062 cv
489.93 10.875 489.66 10.781 489.383 10.781 cv
489.129 10.781 488.91 10.848 488.727 10.973 cv
488.539 11.105 488.391 11.273 488.281 11.484 cv
488.168 11.695 488.086 11.934 488.031 12.195 cv
487.977 12.461 487.949 12.73 487.949 13 cv
487.949 13.297 487.973 13.578 488.02 13.852 cv
488.066 14.129 488.141 14.375 488.25 14.59 cv
488.352 14.805 488.496 14.977 488.676 15.105 cv
488.852 15.238 489.074 15.305 489.344 15.301 cv
489.477 15.305 489.605 15.285 489.738 15.242 cv
489.863 15.207 489.996 15.145 490.129 15.051 cv
490.262 14.965 490.398 14.848 490.539 14.703 cv
490.68 14.562 490.832 14.387 490.996 14.18 cv
cp
f
499.77 14.551 mo
499.766 14.949 499.691 15.297 499.547 15.598 cv
499.398 15.898 499.191 16.152 498.922 16.352 cv
498.648 16.559 498.328 16.707 497.961 16.809 cv
497.594 16.906 497.191 16.957 496.762 16.961 cv
496.496 16.957 496.25 16.937 496.016 16.902 cv
495.781 16.859 495.57 16.812 495.383 16.754 cv
495.195 16.695 495.039 16.633 494.914 16.57 cv
494.789 16.508 494.695 16.449 494.641 16.395 cv
494.582 16.34 494.539 16.258 494.512 16.141 cv
494.477 16.027 494.461 15.852 494.465 15.621 cv
494.461 15.473 494.469 15.352 494.48 15.258 cv
494.488 15.168 494.504 15.098 494.527 15.039 cv
494.547 14.988 494.57 14.949 494.605 14.93 cv
494.633 14.914 494.672 14.906 494.719 14.902 cv
494.773 14.906 494.859 14.937 494.973 15 cv
495.082 15.066 495.219 15.141 495.391 15.215 cv
495.555 15.297 495.75 15.367 495.969 15.434 cv
496.188 15.504 496.438 15.539 496.723 15.535 cv
496.898 15.539 497.055 15.52 497.195 15.48 cv
497.328 15.445 497.449 15.395 497.555 15.324 cv
497.652 15.258 497.727 15.172 497.781 15.066 cv
497.828 14.965 497.855 14.844 497.859 14.707 cv
497.855 14.551 497.809 14.418 497.715 14.309 cv
497.621 14.199 497.492 14.102 497.336 14.016 cv
497.172 13.934 496.992 13.855 496.797 13.781 cv
496.594 13.711 496.391 13.633 496.18 13.539 cv
495.969 13.453 495.762 13.352 495.566 13.234 cv
495.363 13.125 495.184 12.984 495.027 12.816 cv
494.863 12.652 494.738 12.453 494.645 12.215 cv
494.551 11.984 494.504 11.703 494.504 11.371 cv
494.504 11.043 494.566 10.738 494.695 10.457 cv
494.824 10.184 495.012 9.94501 495.258 9.74597 cv
495.5 9.55103 495.797 9.39801 496.148 9.28497 cv
496.496 9.17999 496.891 9.125 497.332 9.12097 cv
497.547 9.125 497.758 9.14099 497.965 9.16803 cv
498.168 9.203 498.355 9.242 498.523 9.28497 cv
498.688 9.336 498.828 9.38702 498.945 9.43701 cv
499.059 9.49597 499.141 9.54303 499.191 9.578 cv
499.238 9.62097 499.273 9.65997 499.297 9.69501 cv
499.316 9.73798 499.328 9.78497 499.34 9.836 cv
499.348 9.89099 499.359 9.95697 499.367 10.035 cv
499.375 10.121 499.379 10.219 499.379 10.336 cv
499.379 10.477 499.375 10.594 499.367 10.68 cv
499.359 10.773 499.344 10.844 499.328 10.891 cv
499.309 10.945 499.285 10.98 499.258 10.996 cv
499.223 11.02 499.188 11.027 499.148 11.023 cv
499.098 11.027 499.023 11 498.93 10.941 cv
498.828 10.891 498.707 10.832 498.559 10.766 cv
498.41 10.707 498.238 10.648 498.043 10.59 cv
497.848 10.539 497.625 10.512 497.379 10.508 cv
497.199 10.512 497.047 10.531 496.918 10.562 cv
496.785 10.602 496.676 10.652 496.598 10.719 cv
496.512 10.789 496.449 10.867 496.41 10.957 cv
496.363 11.051 496.344 11.148 496.348 11.25 cv
496.344 11.41 496.395 11.547 496.496 11.652 cv
496.594 11.766 496.723 11.859 496.887 11.941 cv
497.047 12.027 497.23 12.105 497.438 12.176 cv
497.641 12.25 497.848 12.332 498.059 12.414 cv
498.266 12.504 498.473 12.602 498.684 12.715 cv
498.887 12.828 499.07 12.969 499.23 13.133 cv
499.391 13.301 499.52 13.5 499.621 13.73 cv
499.715 13.965 499.766 14.238 499.77 14.551 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
