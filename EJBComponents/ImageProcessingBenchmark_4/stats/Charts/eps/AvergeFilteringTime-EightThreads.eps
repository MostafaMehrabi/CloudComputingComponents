%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AvergeFilteringTime-EightThreads.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:26:13 p.m.
%%BoundingBox: 0 0 673 538
%%HiResBoundingBox: 0 0 672.7201 537.3600
%%CropBox: 0 0 672.7201 537.3600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -537.36 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 537.36 li
672.72 537.36 li
672.72 0 li
cp
clp
0 0 mo
672.719 0 li
672.719 537.359 li
0 537.359 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.52 487.199 mo
656.281 487.199 li
47.52 477.719 mo
656.281 477.719 li
47.52 468.359 mo
656.281 468.359 li
47.52 458.879 mo
656.281 458.879 li
47.52 440.039 mo
656.281 440.039 li
47.52 430.68 mo
656.281 430.68 li
47.52 421.199 mo
656.281 421.199 li
47.52 411.84 mo
656.281 411.84 li
47.52 393 mo
656.281 393 li
47.52 383.52 mo
656.281 383.52 li
47.52 374.16 mo
656.281 374.16 li
47.52 364.68 mo
656.281 364.68 li
47.52 345.84 mo
656.281 345.84 li
47.52 336.48 mo
656.281 336.48 li
47.52 327 mo
656.281 327 li
47.52 317.641 mo
656.281 317.641 li
47.52 298.801 mo
656.281 298.801 li
47.52 289.32 mo
656.281 289.32 li
47.52 279.961 mo
656.281 279.961 li
47.52 270.48 mo
656.281 270.48 li
47.52 251.641 mo
656.281 251.641 li
47.52 242.281 mo
656.281 242.281 li
47.52 232.801 mo
656.281 232.801 li
47.52 223.441 mo
656.281 223.441 li
47.52 204.602 mo
656.281 204.602 li
47.52 195.121 mo
656.281 195.121 li
47.52 185.762 mo
656.281 185.762 li
47.52 176.281 mo
656.281 176.281 li
47.52 157.441 mo
656.281 157.441 li
47.52 148.078 mo
656.281 148.078 li
47.52 138.602 mo
656.281 138.602 li
47.52 129.238 mo
656.281 129.238 li
47.52 110.398 mo
656.281 110.398 li
47.52 100.922 mo
656.281 100.922 li
47.52 91.559 mo
656.281 91.559 li
47.52 82.078 mo
656.281 82.078 li
47.52 63.238 mo
656.281 63.238 li
47.52 53.879 mo
656.281 53.879 li
47.52 44.398 mo
656.281 44.398 li
47.52 35.039 mo
656.281 35.039 li
.140414 .108034 .108034 0 cmyk
@
47.52 449.52 mo
656.281 449.52 li
47.52 402.359 mo
656.281 402.359 li
47.52 355.32 mo
656.281 355.32 li
47.52 308.16 mo
656.281 308.16 li
47.52 261.121 mo
656.281 261.121 li
47.52 213.961 mo
656.281 213.961 li
47.52 166.922 mo
656.281 166.922 li
47.52 119.762 mo
656.281 119.762 li
47.52 72.719 mo
656.281 72.719 li
47.52 25.559 mo
656.281 25.559 li
.328344 .284215 .278569 .000915541 cmyk
@
85.559 25.559 mo
85.559 496.559 li
161.641 25.559 mo
161.641 496.559 li
237.719 25.559 mo
237.719 496.559 li
313.801 25.559 mo
313.801 496.559 li
389.879 25.559 mo
389.879 496.559 li
466.078 25.559 mo
466.078 496.559 li
542.16 25.559 mo
542.16 496.559 li
618.238 25.559 mo
618.238 496.559 li
.178592 .148898 .143923 0 cmyk
@
47.52 25.559 mo
47.52 496.559 li
123.602 25.559 mo
123.602 496.559 li
199.68 25.559 mo
199.68 496.559 li
275.762 25.559 mo
275.762 496.559 li
351.84 25.559 mo
351.84 496.559 li
427.922 25.559 mo
427.922 496.559 li
504.121 25.559 mo
504.121 496.559 li
580.199 25.559 mo
580.199 496.559 li
656.281 25.559 mo
656.281 496.559 li
.328344 .284215 .278569 .000915541 cmyk
@
27.48 487.199 mo
34.558 487.199 li
34.558 504.359 li
27.48 504.359 li
cp
0 0 0 0 cmyk
ef
27.48 440.16 mo
34.558 440.16 li
34.558 457.199 li
27.48 457.199 li
cp
ef
27.48 393 mo
34.558 393 li
34.558 410.16 li
27.48 410.16 li
cp
ef
27.48 345.961 mo
34.558 345.961 li
34.558 363 li
27.48 363 li
cp
ef
27.48 298.922 mo
34.558 298.922 li
34.558 315.961 li
27.48 315.961 li
cp
ef
27.48 251.762 mo
34.558 251.762 li
34.558 268.801 li
27.48 268.801 li
cp
ef
27.48 204.719 mo
34.558 204.719 li
34.558 221.762 li
27.48 221.762 li
cp
ef
27.48 157.559 mo
34.558 157.559 li
34.558 174.719 li
27.48 174.719 li
cp
ef
27.48 110.52 mo
34.558 110.52 li
34.558 127.559 li
27.48 127.559 li
cp
ef
27.48 63.359 mo
34.558 63.359 li
34.558 80.519 li
27.48 80.519 li
cp
ef
20.398 16.32 mo
34.558 16.32 li
34.558 33.359 li
20.398 33.359 li
cp
ef
.96 lw
47.52 496.559 mo
656.281 496.559 li
.367803 .29575 .300999 .00198367 cmyk
@
47.52 496.559 mo
47.52 501 li
123.602 496.559 mo
123.602 501 li
199.68 496.559 mo
199.68 501 li
275.762 496.559 mo
275.762 501 li
351.84 496.559 mo
351.84 501 li
427.922 496.559 mo
427.922 501 li
504.121 496.559 mo
504.121 501 li
580.199 496.559 mo
580.199 501 li
656.281 496.559 mo
656.281 501 li
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
1 lc
47.52 480.602 mo
123.602 488.398 li
199.68 492.359 li
275.762 492.84 li
351.84 494.281 li
427.922 494.52 li
504.121 494.762 li
580.199 495 li
656.281 495.121 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
52.531 485.648 mo
42.449 475.57 li
42.449 485.648 mo
52.531 475.57 li
.62768 .285466 0 0 cmyk
@
128.609 493.449 mo
118.531 483.371 li
118.531 493.449 mo
128.609 483.371 li
@
204.691 497.41 mo
194.609 487.328 li
194.609 497.41 mo
204.691 487.328 li
@
280.77 497.891 mo
270.691 487.809 li
270.691 497.891 mo
280.77 487.809 li
@
356.852 499.328 mo
346.77 489.25 li
346.77 499.328 mo
356.852 489.25 li
@
432.93 499.57 mo
422.852 489.488 li
422.852 499.57 mo
432.93 489.488 li
@
509.012 499.809 mo
498.93 489.73 li
498.93 499.809 mo
509.012 489.73 li
@
585.09 499.93 mo
575.012 489.852 li
575.012 499.93 mo
585.09 489.852 li
@
661.172 500.051 mo
651.09 489.969 li
651.09 500.051 mo
661.172 489.969 li
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
47.52 465.48 mo
123.602 480.961 li
199.68 488.762 li
275.762 491.398 li
351.84 492.48 li
427.922 493.441 li
504.121 493.922 li
580.199 494.281 li
656.281 494.641 li
@
grestore
42.449 460.328 mo
52.41 460.328 li
52.41 470.289 li
42.449 470.289 li
cp
@
118.531 475.93 mo
128.488 475.93 li
128.488 485.891 li
118.531 485.891 li
cp
@
194.609 483.73 mo
204.57 483.73 li
204.57 493.691 li
194.609 493.691 li
cp
@
270.691 486.25 mo
280.648 486.25 li
280.648 496.211 li
270.691 496.211 li
cp
@
346.77 487.449 mo
356.731 487.449 li
356.731 497.41 li
346.77 497.41 li
cp
@
422.852 488.41 mo
432.809 488.41 li
432.809 498.371 li
422.852 498.371 li
cp
@
498.93 488.891 mo
508.891 488.891 li
508.891 498.852 li
498.93 498.852 li
cp
@
575.012 489.25 mo
584.969 489.25 li
584.969 499.211 li
575.012 499.211 li
cp
@
651.09 489.488 mo
661.051 489.488 li
661.051 499.449 li
651.09 499.449 li
cp
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
47.52 454.922 mo
123.602 475.441 li
199.68 485.762 li
275.762 488.52 li
351.84 491.281 li
427.922 490.801 li
504.121 492.961 li
580.199 492.359 li
656.281 493.68 li
.466651 0 .889799 0 cmyk
@
grestore
52.531 459.969 mo
42.449 449.891 li
42.449 459.969 mo
52.531 449.891 li
.466651 0 .889799 0 cmyk
@
128.609 480.371 mo
118.531 470.289 li
118.531 480.371 mo
128.609 470.289 li
@
204.691 490.809 mo
194.609 480.73 li
194.609 490.809 mo
204.691 480.73 li
@
280.77 493.57 mo
270.691 483.488 li
270.691 493.57 mo
280.77 483.488 li
@
356.852 496.211 mo
346.77 486.129 li
346.77 496.211 mo
356.852 486.129 li
@
432.93 495.852 mo
422.852 485.77 li
422.852 495.852 mo
432.93 485.77 li
@
509.012 497.891 mo
498.93 487.809 li
498.93 497.891 mo
509.012 487.809 li
@
585.09 497.41 mo
575.012 487.328 li
575.012 497.41 mo
585.09 487.328 li
@
661.172 498.73 mo
651.09 488.648 li
651.09 498.73 mo
661.172 488.648 li
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
47.52 414.48 mo
123.602 455.52 li
199.68 476.039 li
275.762 482.879 li
351.84 486.238 li
427.922 488.398 li
504.121 489.719 li
580.199 490.68 li
656.281 491.398 li
@
grestore
42.449 409.449 mo
52.41 409.449 li
52.41 419.41 li
42.449 419.41 li
cp
@
118.531 450.488 mo
128.488 450.488 li
128.488 460.449 li
118.531 460.449 li
cp
@
194.609 470.891 mo
204.57 470.891 li
204.57 480.852 li
194.609 480.852 li
cp
@
270.691 477.73 mo
280.648 477.73 li
280.648 487.691 li
270.691 487.691 li
cp
@
346.77 481.211 mo
356.731 481.211 li
356.731 491.172 li
346.77 491.172 li
cp
@
422.852 483.25 mo
432.809 483.25 li
432.809 493.211 li
422.852 493.211 li
cp
@
498.93 484.57 mo
508.891 484.57 li
508.891 494.531 li
498.93 494.531 li
cp
@
575.012 485.531 mo
584.969 485.531 li
584.969 495.488 li
575.012 495.488 li
cp
@
651.09 486.25 mo
661.051 486.25 li
661.051 496.211 li
651.09 496.211 li
cp
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
47.52 357.84 mo
123.602 426.121 li
199.68 460.801 li
275.762 467.16 li
351.84 477.238 li
427.922 480.238 li
504.121 481.441 li
580.199 485.762 li
656.281 486.121 li
0 .990631 1 .000396735 cmyk
@
grestore
52.531 362.891 mo
42.449 352.809 li
42.449 362.891 mo
52.531 352.809 li
0 .990631 1 .000396735 cmyk
@
128.609 431.051 mo
118.531 420.969 li
118.531 431.051 mo
128.609 420.969 li
@
204.691 465.73 mo
194.609 455.648 li
194.609 465.73 mo
204.691 455.648 li
@
280.77 472.211 mo
270.691 462.129 li
270.691 472.211 mo
280.77 462.129 li
@
356.852 482.172 mo
346.77 472.09 li
346.77 482.172 mo
356.852 472.09 li
@
432.93 485.172 mo
422.852 475.09 li
422.852 485.172 mo
432.93 475.09 li
@
509.012 486.488 mo
498.93 476.41 li
498.93 486.488 mo
509.012 476.41 li
@
585.09 490.691 mo
575.012 480.609 li
575.012 490.691 mo
585.09 480.609 li
@
661.172 491.051 mo
651.09 480.969 li
651.09 491.051 mo
661.172 480.969 li
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
47.52 222.359 mo
123.602 359.281 li
199.68 427.441 li
275.762 450.602 li
351.84 462 li
427.922 468.961 li
504.121 473.52 li
580.199 476.879 li
656.281 479.16 li
@
grestore
42.449 217.211 mo
52.41 217.211 li
52.41 227.172 li
42.449 227.172 li
cp
@
118.531 354.25 mo
128.488 354.25 li
128.488 364.211 li
118.531 364.211 li
cp
@
194.609 422.289 mo
204.57 422.289 li
204.57 432.25 li
194.609 432.25 li
cp
@
270.691 445.57 mo
280.648 445.57 li
280.648 455.531 li
270.691 455.531 li
cp
@
346.77 456.852 mo
356.731 456.852 li
356.731 466.809 li
346.77 466.809 li
cp
@
422.852 463.93 mo
432.809 463.93 li
432.809 473.891 li
422.852 473.891 li
cp
@
498.93 468.488 mo
508.891 468.488 li
508.891 478.449 li
498.93 478.449 li
cp
@
575.012 471.73 mo
584.969 471.73 li
584.969 481.691 li
575.012 481.691 li
cp
@
651.09 474.129 mo
661.051 474.129 li
661.051 484.09 li
651.09 484.09 li
cp
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
47.52 406.68 mo
123.602 450.961 li
199.68 473.281 li
275.762 477.48 li
351.84 485.039 li
427.922 486 li
504.121 488.762 li
580.199 486.48 li
656.281 490.32 li
.62768 .285466 0 0 cmyk
@
grestore
52.531 411.609 mo
42.449 401.531 li
42.449 411.609 mo
52.531 401.531 li
.62768 .285466 0 0 cmyk
@
128.609 455.891 mo
118.531 445.809 li
118.531 455.891 mo
128.609 445.809 li
@
204.691 478.328 mo
194.609 468.25 li
194.609 478.328 mo
204.691 468.25 li
@
280.77 482.41 mo
270.691 472.328 li
270.691 482.41 mo
280.77 472.328 li
@
356.852 489.969 mo
346.77 479.891 li
346.77 489.969 mo
356.852 479.891 li
@
432.93 490.93 mo
422.852 480.852 li
422.852 490.93 mo
432.93 480.852 li
@
509.012 493.809 mo
498.93 483.73 li
498.93 493.809 mo
509.012 483.73 li
@
585.09 491.531 mo
575.012 481.449 li
575.012 491.531 mo
585.09 481.449 li
@
661.172 495.25 mo
651.09 485.172 li
651.09 495.25 mo
661.172 485.172 li
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
47.52 318.84 mo
123.602 407.398 li
199.68 451.801 li
275.762 466.68 li
351.84 474.121 li
427.922 478.559 li
504.121 481.559 li
580.199 483.719 li
656.281 485.281 li
@
grestore
42.449 313.691 mo
52.41 313.691 li
52.41 323.648 li
42.449 323.648 li
cp
@
118.531 402.371 mo
128.488 402.371 li
128.488 412.328 li
118.531 412.328 li
cp
@
194.609 446.77 mo
204.57 446.77 li
204.57 456.731 li
194.609 456.731 li
cp
@
270.691 461.648 mo
280.648 461.648 li
280.648 471.609 li
270.691 471.609 li
cp
@
346.77 469.09 mo
356.731 469.09 li
356.731 479.051 li
346.77 479.051 li
cp
@
422.852 473.531 mo
432.809 473.531 li
432.809 483.488 li
422.852 483.488 li
cp
@
498.93 476.531 mo
508.891 476.531 li
508.891 486.488 li
498.93 486.488 li
cp
@
575.012 478.691 mo
584.969 478.691 li
584.969 488.648 li
575.012 488.648 li
cp
@
651.09 480.25 mo
661.051 480.25 li
661.051 490.211 li
651.09 490.211 li
cp
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
47.52 252.359 mo
123.602 372.719 li
199.68 433.559 li
275.762 448.441 li
351.84 460.199 li
427.922 458.762 li
504.121 468.719 li
580.199 473.16 li
656.281 474.238 li
.466651 0 .889799 0 cmyk
@
grestore
52.531 257.289 mo
42.449 247.211 li
42.449 257.289 mo
52.531 247.211 li
.466651 0 .889799 0 cmyk
@
128.609 377.77 mo
118.531 367.691 li
118.531 377.77 mo
128.609 367.691 li
@
204.691 438.609 mo
194.609 428.531 li
194.609 438.609 mo
204.691 428.531 li
@
280.77 453.371 mo
270.691 443.289 li
270.691 453.371 mo
280.77 443.289 li
@
356.852 465.129 mo
346.77 455.051 li
346.77 465.129 mo
356.852 455.051 li
@
432.93 463.809 mo
422.852 453.73 li
422.852 463.809 mo
432.93 453.73 li
@
509.012 473.77 mo
498.93 463.691 li
498.93 473.77 mo
509.012 463.691 li
@
585.09 478.211 mo
575.012 468.129 li
575.012 478.211 mo
585.09 468.129 li
@
661.172 479.172 mo
651.09 469.09 li
651.09 479.172 mo
661.172 469.09 li
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
47.52 61.078 mo
123.602 281.398 li
199.68 378.359 li
275.762 414.121 li
351.84 435.121 li
427.922 447.719 li
504.121 455.762 li
580.199 461.641 li
656.281 465.961 li
@
grestore
42.449 55.93 mo
52.41 55.93 li
52.41 65.891 li
42.449 65.891 li
cp
@
118.531 276.25 mo
128.488 276.25 li
128.488 286.211 li
118.531 286.211 li
cp
@
194.609 373.211 mo
204.57 373.211 li
204.57 383.172 li
194.609 383.172 li
cp
@
270.691 409.09 mo
280.648 409.09 li
280.648 419.051 li
270.691 419.051 li
cp
@
346.77 429.969 mo
356.731 429.969 li
356.731 439.93 li
346.77 439.93 li
cp
@
422.852 442.57 mo
432.809 442.57 li
432.809 452.531 li
422.852 452.531 li
cp
@
498.93 450.73 mo
508.891 450.73 li
508.891 460.691 li
498.93 460.691 li
cp
@
575.012 456.609 mo
584.969 456.609 li
584.969 466.57 li
575.012 466.57 li
cp
@
651.09 460.93 mo
661.051 460.93 li
661.051 470.891 li
651.09 470.891 li
cp
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
47.52 307.68 mo
123.602 400.559 li
199.68 447.602 li
275.762 459.359 li
351.84 467.879 li
427.922 468.719 li
504.121 474.121 li
580.199 480.359 li
656.281 480 li
0 .990631 1 .000396735 cmyk
@
grestore
52.531 312.73 mo
42.449 302.648 li
42.449 312.73 mo
52.531 302.648 li
0 .990631 1 .000396735 cmyk
@
128.609 405.609 mo
118.531 395.531 li
118.531 405.609 mo
128.609 395.531 li
@
204.691 452.648 mo
194.609 442.57 li
194.609 452.648 mo
204.691 442.57 li
@
280.77 464.41 mo
270.691 454.328 li
270.691 464.41 mo
280.77 454.328 li
@
356.852 472.809 mo
346.77 462.73 li
346.77 472.809 mo
356.852 462.73 li
@
432.93 473.648 mo
422.852 463.57 li
422.852 473.648 mo
432.93 463.57 li
@
509.012 479.051 mo
498.93 468.969 li
498.93 479.051 mo
509.012 468.969 li
@
585.09 485.41 mo
575.012 475.328 li
575.012 485.41 mo
585.09 475.328 li
@
661.172 484.93 mo
651.09 474.852 li
651.09 484.93 mo
661.172 474.852 li
@
gsave
47.52 25.559 mo
656.879 25.559 li
656.879 497.282 li
47.52 497.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
47.52 168.84 mo
123.602 332.641 li
199.68 414.238 li
275.762 441.719 li
351.84 455.281 li
427.922 463.68 li
504.121 468.84 li
580.199 473.039 li
656.281 475.801 li
@
grestore
42.449 163.809 mo
52.41 163.809 li
52.41 173.77 li
42.449 173.77 li
cp
@
118.531 327.609 mo
128.488 327.609 li
128.488 337.57 li
118.531 337.57 li
cp
@
194.609 409.09 mo
204.57 409.09 li
204.57 419.051 li
194.609 419.051 li
cp
@
270.691 436.691 mo
280.648 436.691 li
280.648 446.648 li
270.691 446.648 li
cp
@
346.77 450.129 mo
356.731 450.129 li
356.731 460.09 li
346.77 460.09 li
cp
@
422.852 458.648 mo
432.809 458.648 li
432.809 468.609 li
422.852 468.609 li
cp
@
498.93 463.809 mo
508.891 463.809 li
508.891 473.77 li
498.93 473.77 li
cp
@
575.012 467.891 mo
584.969 467.891 li
584.969 477.852 li
575.012 477.852 li
cp
@
651.09 470.648 mo
661.051 470.648 li
661.051 480.609 li
651.09 480.609 li
cp
@
27.441 487.262 mo
34.535 487.262 li
34.535 504.352 li
27.441 504.352 li
cp
0 0 0 0 cmyk
ef
34.09 496.207 mo
34.086 496.891 34.035 497.512 33.93 498.074 cv
33.82 498.637 33.641 499.121 33.395 499.523 cv
33.141 499.93 32.813 500.242 32.414 500.461 cv
32.008 500.684 31.516 500.793 30.93 500.793 cv
30.371 500.793 29.898 500.695 29.52 500.496 cv
29.137 500.301 28.832 500.008 28.598 499.621 cv
28.363 499.234 28.195 498.762 28.102 498.195 cv
28 497.633 27.953 496.984 27.953 496.25 cv
27.953 495.578 28.008 494.957 28.117 494.391 cv
28.227 493.828 28.402 493.344 28.652 492.937 cv
28.895 492.535 29.219 492.223 29.625 491.996 cv
30.023 491.777 30.52 491.664 31.109 491.664 cv
31.668 491.664 32.141 491.766 32.523 491.961 cv
32.906 492.164 33.211 492.457 33.445 492.84 cv
33.676 493.23 33.844 493.703 33.941 494.266 cv
34.039 494.828 34.086 495.477 34.09 496.207 cv
cp
32.883 496.289 mo
32.879 495.848 32.863 495.449 32.836 495.098 cv
32.801 494.746 32.754 494.437 32.695 494.168 cv
32.629 493.898 32.551 493.668 32.453 493.473 cv
32.355 493.281 32.238 493.121 32.102 492.992 cv
31.961 492.867 31.801 492.773 31.629 492.715 cv
31.449 492.66 31.254 492.633 31.039 492.629 cv
30.648 492.633 30.332 492.723 30.094 492.906 cv
29.848 493.09 29.656 493.344 29.52 493.66 cv
29.379 493.98 29.285 494.352 29.234 494.781 cv
29.184 495.211 29.16 495.676 29.16 496.168 cv
29.16 496.832 29.191 497.395 29.262 497.855 cv
29.328 498.324 29.438 498.703 29.59 498.992 cv
29.734 499.289 29.926 499.5 30.156 499.629 cv
30.387 499.766 30.668 499.832 31 499.828 cv
31.254 499.832 31.477 499.793 31.672 499.707 cv
31.863 499.629 32.031 499.508 32.172 499.352 cv
32.313 499.199 32.426 499.016 32.52 498.801 cv
32.605 498.586 32.68 498.348 32.738 498.086 cv
32.789 497.828 32.828 497.547 32.852 497.242 cv
32.871 496.937 32.879 496.621 32.883 496.289 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 440.16 mo
34.535 440.16 li
34.535 457.25 li
27.441 457.25 li
cp
0 0 0 0 cmyk
ef
33.816 453.113 mo
33.813 453.203 33.805 453.273 33.793 453.332 cv
33.777 453.395 33.758 453.445 33.738 453.477 cv
33.715 453.516 33.691 453.539 33.66 453.555 cv
33.629 453.57 33.598 453.578 33.57 453.578 cv
28.934 453.578 li
28.898 453.578 28.871 453.57 28.844 453.555 cv
28.816 453.539 28.789 453.516 28.766 453.477 cv
28.738 453.445 28.719 453.395 28.707 453.332 cv
28.691 453.273 28.684 453.203 28.688 453.113 cv
28.684 453.035 28.691 452.961 28.707 452.898 cv
28.719 452.84 28.734 452.793 28.758 452.754 cv
28.773 452.719 28.801 452.687 28.832 452.664 cv
28.863 452.645 28.895 452.637 28.934 452.633 cv
30.785 452.633 li
30.785 445.887 li
29.07 446.906 li
28.98 446.957 28.91 446.984 28.863 446.992 cv
28.809 447 28.766 446.992 28.734 446.961 cv
28.699 446.934 28.68 446.883 28.668 446.812 cv
28.656 446.746 28.648 446.66 28.652 446.551 cv
28.648 446.477 28.652 446.41 28.664 446.352 cv
28.668 446.301 28.68 446.254 28.695 446.215 cv
28.707 446.18 28.727 446.148 28.75 446.121 cv
28.773 446.094 28.805 446.066 28.852 446.039 cv
30.895 444.727 li
30.91 444.715 30.93 444.703 30.961 444.695 cv
30.984 444.687 31.02 444.68 31.066 444.668 cv
31.105 444.66 31.156 444.652 31.211 444.648 cv
31.266 444.648 31.332 444.648 31.418 444.645 cv
31.523 444.648 31.617 444.652 31.691 444.66 cv
31.762 444.668 31.816 444.684 31.863 444.699 cv
31.902 444.719 31.93 444.738 31.945 444.762 cv
31.953 444.789 31.961 444.812 31.965 444.836 cv
31.965 452.633 li
33.57 452.633 li
33.605 452.637 33.641 452.645 33.672 452.664 cv
33.703 452.687 33.727 452.719 33.75 452.754 cv
33.766 452.793 33.781 452.84 33.797 452.898 cv
33.805 452.961 33.813 453.035 33.816 453.113 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 393.07 mo
34.535 393.07 li
34.535 410.16 li
27.441 410.16 li
cp
0 0 0 0 cmyk
ef
33.797 405.953 mo
33.793 406.039 33.789 406.113 33.777 406.176 cv
33.766 406.242 33.75 406.297 33.73 406.336 cv
33.707 406.383 33.68 406.414 33.648 406.43 cv
33.613 406.453 33.574 406.461 33.535 406.461 cv
28.633 406.461 li
28.57 406.461 28.512 406.453 28.465 406.437 cv
28.414 406.422 28.375 406.398 28.34 406.359 cv
28.305 406.328 28.277 406.273 28.266 406.203 cv
28.246 406.133 28.238 406.047 28.242 405.945 cv
28.238 405.855 28.242 405.777 28.25 405.707 cv
28.254 405.641 28.27 405.582 28.297 405.527 cv
28.32 405.477 28.352 405.422 28.387 405.367 cv
28.422 405.316 28.465 405.262 28.523 405.199 cv
30.297 403.375 li
30.707 402.957 31.035 402.582 31.285 402.246 cv
31.531 401.918 31.723 401.613 31.855 401.336 cv
31.988 401.062 32.074 400.812 32.121 400.586 cv
32.16 400.363 32.184 400.152 32.184 399.957 cv
32.184 399.762 32.148 399.578 32.082 399.398 cv
32.016 399.227 31.922 399.07 31.797 398.934 cv
31.672 398.805 31.516 398.699 31.328 398.617 cv
31.141 398.543 30.922 398.504 30.676 398.5 cv
30.387 398.504 30.129 398.543 29.902 398.617 cv
29.672 398.699 29.473 398.785 29.301 398.871 cv
29.129 398.965 28.984 399.047 28.867 399.125 cv
28.75 399.203 28.664 399.242 28.613 399.242 cv
28.578 399.242 28.547 399.234 28.523 399.215 cv
28.492 399.199 28.473 399.168 28.457 399.125 cv
28.441 399.086 28.426 399.031 28.418 398.961 cv
28.406 398.895 28.402 398.812 28.406 398.715 cv
28.402 398.648 28.406 398.59 28.414 398.539 cv
28.418 398.488 28.426 398.445 28.438 398.406 cv
28.445 398.371 28.461 398.336 28.48 398.305 cv
28.5 398.273 28.535 398.234 28.594 398.184 cv
28.645 398.137 28.738 398.07 28.875 397.988 cv
29.008 397.906 29.18 397.828 29.383 397.746 cv
29.586 397.668 29.809 397.598 30.055 397.543 cv
30.297 397.488 30.555 397.461 30.828 397.461 cv
31.254 397.461 31.629 397.523 31.953 397.645 cv
32.273 397.766 32.539 397.93 32.754 398.141 cv
32.965 398.352 33.125 398.598 33.23 398.871 cv
33.336 399.152 33.391 399.449 33.391 399.762 cv
33.391 400.051 33.363 400.332 33.313 400.609 cv
33.262 400.895 33.156 401.199 32.996 401.523 cv
32.832 401.852 32.598 402.215 32.293 402.613 cv
31.984 403.016 31.578 403.477 31.074 403.992 cv
29.668 405.461 li
33.527 405.461 li
33.559 405.465 33.594 405.477 33.633 405.492 cv
33.664 405.516 33.695 405.547 33.723 405.586 cv
33.746 405.629 33.766 405.68 33.777 405.738 cv
33.789 405.805 33.793 405.875 33.797 405.953 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 345.969 mo
34.535 345.969 li
34.535 363.059 li
27.441 363.059 li
cp
0 0 0 0 cmyk
ef
33.727 356.816 mo
33.723 357.227 33.652 357.594 33.512 357.918 cv
33.367 358.246 33.164 358.527 32.902 358.758 cv
32.637 358.992 32.309 359.168 31.922 359.293 cv
31.531 359.418 31.094 359.48 30.609 359.48 cv
30.305 359.48 30.027 359.453 29.773 359.406 cv
29.512 359.359 29.281 359.309 29.086 359.238 cv
28.883 359.176 28.719 359.105 28.586 359.035 cv
28.453 358.965 28.367 358.914 28.336 358.879 cv
28.297 358.852 28.273 358.82 28.258 358.785 cv
28.238 358.754 28.219 358.715 28.207 358.668 cv
28.191 358.625 28.184 358.57 28.176 358.5 cv
28.168 358.437 28.164 358.355 28.168 358.254 cv
28.164 358.094 28.18 357.98 28.215 357.914 cv
28.246 357.852 28.293 357.816 28.355 357.816 cv
28.398 357.816 28.48 357.855 28.605 357.926 cv
28.727 358.004 28.887 358.082 29.082 358.164 cv
29.273 358.25 29.5 358.328 29.766 358.398 cv
30.023 358.473 30.316 358.508 30.637 358.508 cv
30.945 358.508 31.215 358.469 31.453 358.391 cv
31.684 358.312 31.883 358.203 32.043 358.062 cv
32.199 357.922 32.316 357.754 32.398 357.559 cv
32.477 357.363 32.516 357.152 32.52 356.926 cv
32.516 356.676 32.465 356.449 32.367 356.246 cv
32.262 356.047 32.113 355.875 31.922 355.727 cv
31.723 355.582 31.484 355.469 31.199 355.391 cv
30.914 355.312 30.59 355.273 30.227 355.273 cv
29.355 355.273 li
29.313 355.273 29.277 355.266 29.242 355.25 cv
29.207 355.234 29.176 355.207 29.152 355.168 cv
29.125 355.133 29.105 355.086 29.09 355.027 cv
29.074 354.969 29.066 354.891 29.066 354.793 cv
29.066 354.707 29.07 354.637 29.086 354.578 cv
29.094 354.523 29.113 354.477 29.145 354.441 cv
29.168 354.406 29.199 354.383 29.23 354.363 cv
29.262 354.352 29.297 354.344 29.34 354.34 cv
30.113 354.34 li
30.414 354.344 30.684 354.305 30.926 354.223 cv
31.16 354.148 31.363 354.035 31.535 353.887 cv
31.699 353.742 31.828 353.566 31.918 353.363 cv
32.008 353.16 32.055 352.934 32.055 352.68 cv
32.055 352.5 32.023 352.324 31.965 352.156 cv
31.902 351.992 31.813 351.848 31.695 351.723 cv
31.574 351.598 31.422 351.5 31.242 351.43 cv
31.055 351.359 30.844 351.324 30.602 351.324 cv
30.336 351.324 30.09 351.367 29.871 351.445 cv
29.645 351.527 29.449 351.613 29.277 351.703 cv
29.102 351.797 28.957 351.883 28.844 351.961 cv
28.73 352.043 28.648 352.082 28.605 352.078 cv
28.57 352.082 28.543 352.074 28.52 352.062 cv
28.492 352.051 28.473 352.027 28.457 351.992 cv
28.441 351.961 28.43 351.914 28.422 351.848 cv
28.414 351.789 28.41 351.707 28.414 351.605 cv
28.41 351.539 28.41 351.48 28.418 351.426 cv
28.418 351.375 28.43 351.328 28.445 351.285 cv
28.461 351.25 28.477 351.215 28.496 351.18 cv
28.512 351.152 28.543 351.113 28.586 351.066 cv
28.629 351.023 28.715 350.961 28.852 350.879 cv
28.98 350.797 29.145 350.719 29.34 350.637 cv
29.531 350.559 29.754 350.488 30.012 350.434 cv
30.262 350.379 30.535 350.352 30.832 350.352 cv
31.238 350.352 31.602 350.406 31.914 350.508 cv
32.227 350.617 32.484 350.766 32.695 350.953 cv
32.898 351.148 33.055 351.379 33.16 351.645 cv
33.262 351.914 33.313 352.207 33.316 352.531 cv
33.313 352.812 33.277 353.074 33.207 353.309 cv
33.133 353.551 33.023 353.762 32.883 353.945 cv
32.738 354.133 32.566 354.289 32.363 354.418 cv
32.156 354.551 31.918 354.645 31.648 354.691 cv
31.648 354.703 li
31.953 354.738 32.234 354.812 32.488 354.934 cv
32.742 355.055 32.961 355.207 33.145 355.391 cv
33.324 355.574 33.465 355.789 33.57 356.031 cv
33.672 356.277 33.723 356.539 33.727 356.816 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 298.879 mo
34.535 298.879 li
34.535 315.969 li
27.441 315.969 li
cp
0 0 0 0 cmyk
ef
34.172 309.738 mo
34.168 309.891 34.145 310.012 34.102 310.098 cv
34.055 310.187 33.992 310.23 33.91 310.227 cv
32.91 310.227 li
32.91 312.09 li
32.91 312.129 32.898 312.16 32.883 312.184 cv
32.859 312.211 32.828 312.23 32.785 312.25 cv
32.734 312.266 32.672 312.277 32.602 312.289 cv
32.523 312.297 32.43 312.301 32.313 312.305 cv
32.195 312.301 32.098 312.297 32.027 312.289 cv
31.949 312.277 31.891 312.266 31.848 312.25 cv
31.801 312.23 31.77 312.211 31.754 312.184 cv
31.734 312.16 31.727 312.129 31.73 312.09 cv
31.73 310.227 li
28.102 310.227 li
28.043 310.23 28 310.223 27.965 310.207 cv
27.93 310.195 27.895 310.168 27.867 310.129 cv
27.836 310.094 27.816 310.043 27.805 309.973 cv
27.793 309.906 27.789 309.816 27.789 309.703 cv
27.789 309.621 27.789 309.543 27.797 309.473 cv
27.797 309.402 27.809 309.34 27.824 309.285 cv
27.836 309.23 27.852 309.176 27.879 309.121 cv
27.898 309.066 27.926 309.012 27.961 308.949 cv
31.121 303.562 li
31.141 303.527 31.176 303.496 31.223 303.469 cv
31.266 303.441 31.32 303.418 31.395 303.398 cv
31.461 303.383 31.547 303.371 31.652 303.359 cv
31.754 303.355 31.875 303.352 32.016 303.348 cv
32.164 303.352 32.301 303.355 32.418 303.367 cv
32.531 303.379 32.621 303.395 32.695 303.41 cv
32.762 303.43 32.816 303.453 32.855 303.484 cv
32.891 303.516 32.91 303.551 32.91 303.59 cv
32.91 309.254 li
33.91 309.254 li
33.984 309.258 34.047 309.297 34.098 309.375 cv
34.145 309.457 34.168 309.578 34.172 309.738 cv
cp
31.73 304.387 mo
31.719 304.387 li
28.867 309.254 li
31.73 309.254 li
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 251.781 mo
34.535 251.781 li
34.535 268.871 li
27.441 268.871 li
cp
0 0 0 0 cmyk
ef
33.754 262.297 mo
33.754 262.773 33.672 263.195 33.512 263.566 cv
33.352 263.937 33.125 264.25 32.836 264.504 cv
32.539 264.758 32.191 264.953 31.789 265.082 cv
31.383 265.215 30.934 265.277 30.441 265.277 cv
30.164 265.277 29.902 265.258 29.66 265.219 cv
29.41 265.18 29.191 265.133 29.004 265.078 cv
28.809 265.023 28.652 264.969 28.527 264.91 cv
28.402 264.859 28.324 264.816 28.293 264.781 cv
28.258 264.75 28.234 264.719 28.223 264.691 cv
28.207 264.664 28.191 264.633 28.184 264.59 cv
28.168 264.555 28.16 264.504 28.16 264.441 cv
28.152 264.383 28.152 264.312 28.152 264.23 cv
28.152 264.156 28.156 264.086 28.164 264.023 cv
28.172 263.961 28.184 263.91 28.203 263.871 cv
28.219 263.832 28.238 263.805 28.266 263.785 cv
28.289 263.77 28.32 263.762 28.352 263.758 cv
28.398 263.762 28.469 263.789 28.563 263.844 cv
28.656 263.902 28.785 263.965 28.949 264.031 cv
29.113 264.098 29.313 264.16 29.555 264.219 cv
29.789 264.277 30.074 264.305 30.41 264.305 cv
30.711 264.305 30.992 264.27 31.25 264.195 cv
31.504 264.125 31.727 264.012 31.914 263.855 cv
32.098 263.703 32.242 263.508 32.348 263.27 cv
32.453 263.035 32.504 262.746 32.508 262.406 cv
32.504 262.125 32.461 261.875 32.371 261.656 cv
32.281 261.437 32.145 261.258 31.961 261.113 cv
31.773 260.973 31.539 260.867 31.258 260.793 cv
30.973 260.723 30.633 260.684 30.246 260.684 cv
29.961 260.684 29.723 260.699 29.523 260.727 cv
29.32 260.758 29.133 260.773 28.961 260.77 cv
28.832 260.773 28.738 260.742 28.688 260.68 cv
28.629 260.621 28.602 260.508 28.605 260.336 cv
28.605 256.723 li
28.602 256.574 28.637 256.465 28.711 256.387 cv
28.777 256.316 28.879 256.277 29.016 256.277 cv
32.945 256.277 li
32.98 256.277 33.016 256.289 33.051 256.309 cv
33.082 256.332 33.109 256.363 33.137 256.402 cv
33.156 256.445 33.172 256.496 33.188 256.559 cv
33.195 256.625 33.203 256.703 33.207 256.785 cv
33.203 256.953 33.18 257.078 33.141 257.168 cv
33.094 257.262 33.035 257.309 32.957 257.305 cv
29.785 257.305 li
29.785 259.793 li
29.938 259.773 30.094 259.762 30.258 259.754 cv
30.414 259.75 30.602 259.746 30.816 259.746 cv
31.301 259.746 31.727 259.809 32.094 259.93 cv
32.457 260.051 32.762 260.223 33.012 260.441 cv
33.254 260.668 33.441 260.934 33.566 261.246 cv
33.691 261.562 33.754 261.914 33.754 262.297 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 204.68 mo
34.535 204.68 li
34.535 221.77 li
27.441 221.77 li
cp
0 0 0 0 cmyk
ef
34.023 215.168 mo
34.023 215.559 33.961 215.937 33.844 216.297 cv
33.719 216.664 33.535 216.98 33.293 217.254 cv
33.043 217.531 32.73 217.754 32.355 217.918 cv
31.973 218.086 31.527 218.168 31.012 218.168 cv
30.641 218.168 30.313 218.125 30.031 218.031 cv
29.746 217.945 29.5 217.812 29.289 217.641 cv
29.078 217.473 28.902 217.266 28.766 217.02 cv
28.625 216.773 28.512 216.492 28.43 216.176 cv
28.344 215.863 28.285 215.52 28.25 215.141 cv
28.211 214.77 28.191 214.367 28.195 213.934 cv
28.191 213.555 28.211 213.172 28.254 212.781 cv
28.293 212.398 28.367 212.023 28.473 211.656 cv
28.578 211.297 28.723 210.957 28.902 210.641 cv
29.082 210.324 29.309 210.047 29.582 209.812 cv
29.855 209.578 30.18 209.391 30.559 209.25 cv
30.938 209.113 31.379 209.047 31.883 209.043 cv
32.051 209.047 32.223 209.055 32.395 209.074 cv
32.566 209.098 32.727 209.129 32.875 209.16 cv
33.023 209.199 33.145 209.234 33.246 209.273 cv
33.344 209.312 33.41 209.348 33.445 209.371 cv
33.473 209.398 33.496 209.426 33.516 209.453 cv
33.531 209.484 33.547 209.516 33.555 209.551 cv
33.563 209.586 33.566 209.625 33.574 209.668 cv
33.574 209.711 33.578 209.766 33.582 209.828 cv
33.578 209.914 33.578 209.984 33.578 210.039 cv
33.574 210.102 33.563 210.148 33.551 210.184 cv
33.531 210.223 33.512 210.25 33.488 210.266 cv
33.461 210.285 33.43 210.293 33.391 210.293 cv
33.34 210.293 33.27 210.277 33.184 210.246 cv
33.094 210.215 32.988 210.18 32.867 210.137 cv
32.742 210.102 32.594 210.066 32.418 210.031 cv
32.242 210.004 32.039 209.988 31.809 209.984 cv
31.379 209.988 31.012 210.074 30.707 210.246 cv
30.402 210.418 30.152 210.652 29.957 210.945 cv
29.762 211.238 29.617 211.578 29.527 211.961 cv
29.43 212.352 29.375 212.754 29.367 213.172 cv
29.484 213.105 29.621 213.039 29.77 212.969 cv
29.918 212.902 30.078 212.84 30.254 212.781 cv
30.43 212.73 30.617 212.684 30.813 212.648 cv
31.008 212.617 31.219 212.602 31.445 212.598 cv
31.922 212.602 32.324 212.668 32.656 212.793 cv
32.984 212.926 33.25 213.105 33.457 213.336 cv
33.656 213.566 33.801 213.836 33.891 214.148 cv
33.977 214.461 34.023 214.801 34.023 215.168 cv
cp
32.828 215.277 mo
32.828 215.016 32.801 214.773 32.75 214.555 cv
32.695 214.34 32.605 214.156 32.484 214 cv
32.359 213.852 32.195 213.734 31.992 213.652 cv
31.781 213.57 31.527 213.527 31.23 213.527 cv
31.059 213.527 30.891 213.543 30.723 213.574 cv
30.551 213.605 30.387 213.648 30.23 213.695 cv
30.07 213.75 29.922 213.812 29.781 213.883 cv
29.637 213.957 29.504 214.031 29.387 214.109 cv
29.383 214.703 29.422 215.199 29.5 215.594 cv
29.574 215.992 29.684 216.309 29.828 216.547 cv
29.973 216.789 30.152 216.961 30.367 217.062 cv
30.582 217.168 30.832 217.219 31.121 217.215 cv
31.41 217.219 31.664 217.164 31.879 217.051 cv
32.094 216.945 32.27 216.797 32.414 216.609 cv
32.555 216.426 32.66 216.219 32.727 215.988 cv
32.793 215.758 32.828 215.523 32.828 215.277 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 157.59 mo
34.535 157.59 li
34.535 174.68 li
27.441 174.68 li
cp
0 0 0 0 cmyk
ef
33.926 162.586 mo
33.922 162.672 33.918 162.746 33.914 162.809 cv
33.906 162.879 33.898 162.941 33.887 163 cv
33.875 163.066 33.859 163.125 33.84 163.18 cv
33.816 163.238 33.793 163.301 33.77 163.359 cv
30.574 170.723 li
30.547 170.781 30.52 170.824 30.488 170.855 cv
30.453 170.891 30.41 170.918 30.355 170.937 cv
30.301 170.957 30.23 170.969 30.152 170.98 cv
30.066 170.984 29.969 170.988 29.852 170.992 cv
29.695 170.988 29.574 170.98 29.488 170.969 cv
29.402 170.953 29.34 170.937 29.301 170.906 cv
29.262 170.879 29.242 170.84 29.25 170.797 cv
29.25 170.754 29.266 170.703 29.297 170.641 cv
32.656 163.113 li
28.398 163.113 li
28.313 163.117 28.246 163.07 28.203 162.977 cv
28.16 162.887 28.141 162.758 28.141 162.594 cv
28.141 162.508 28.145 162.434 28.156 162.367 cv
28.168 162.305 28.184 162.25 28.207 162.207 cv
28.227 162.164 28.254 162.133 28.289 162.109 cv
28.32 162.09 28.359 162.078 28.398 162.078 cv
33.57 162.078 li
33.629 162.078 33.684 162.086 33.734 162.102 cv
33.781 162.117 33.816 162.145 33.844 162.184 cv
33.867 162.223 33.887 162.277 33.902 162.34 cv
33.914 162.406 33.922 162.488 33.926 162.586 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 110.488 mo
34.535 110.488 li
34.535 127.578 li
27.441 127.578 li
cp
0 0 0 0 cmyk
ef
34 121.562 mo
34 121.949 33.93 122.293 33.793 122.59 cv
33.656 122.895 33.461 123.145 33.203 123.348 cv
32.945 123.555 32.625 123.711 32.246 123.812 cv
31.863 123.918 31.43 123.969 30.945 123.969 cv
30.484 123.969 30.074 123.922 29.715 123.828 cv
29.352 123.734 29.047 123.594 28.797 123.402 cv
28.547 123.219 28.355 122.988 28.223 122.711 cv
28.09 122.437 28.023 122.125 28.023 121.77 cv
28.023 121.496 28.066 121.238 28.16 121.004 cv
28.246 120.77 28.379 120.555 28.555 120.359 cv
28.723 120.164 28.934 119.98 29.188 119.805 cv
29.438 119.637 29.723 119.473 30.039 119.316 cv
29.766 119.176 29.523 119.027 29.313 118.867 cv
29.102 118.711 28.922 118.539 28.777 118.352 cv
28.629 118.168 28.52 117.973 28.445 117.762 cv
28.367 117.555 28.328 117.324 28.332 117.074 cv
28.328 116.766 28.383 116.473 28.5 116.199 cv
28.609 115.93 28.781 115.695 29.008 115.492 cv
29.234 115.293 29.52 115.133 29.871 115.016 cv
30.215 114.898 30.625 114.84 31.094 114.84 cv
31.539 114.84 31.926 114.895 32.254 115 cv
32.582 115.109 32.852 115.254 33.063 115.437 cv
33.273 115.625 33.43 115.844 33.535 116.094 cv
33.633 116.344 33.684 116.613 33.688 116.902 cv
33.684 117.137 33.645 117.363 33.574 117.574 cv
33.496 117.793 33.387 117.996 33.238 118.184 cv
33.09 118.379 32.91 118.559 32.699 118.723 cv
32.488 118.895 32.246 119.051 31.973 119.191 cv
32.293 119.355 32.578 119.52 32.836 119.687 cv
33.086 119.855 33.301 120.035 33.477 120.23 cv
33.645 120.426 33.773 120.633 33.867 120.848 cv
33.953 121.066 34 121.305 34 121.562 cv
cp
32.52 117.012 mo
32.516 116.824 32.484 116.648 32.418 116.492 cv
32.352 116.336 32.254 116.203 32.129 116.094 cv
32 115.984 31.84 115.902 31.652 115.844 cv
31.457 115.789 31.242 115.762 31.004 115.758 cv
30.508 115.762 30.133 115.871 29.883 116.094 cv
29.625 116.32 29.5 116.629 29.504 117.012 cv
29.5 117.191 29.531 117.355 29.594 117.508 cv
29.656 117.664 29.75 117.809 29.883 117.945 cv
30.008 118.082 30.172 118.215 30.375 118.344 cv
30.57 118.477 30.809 118.613 31.086 118.754 cv
31.547 118.52 31.902 118.258 32.148 117.965 cv
32.395 117.68 32.516 117.363 32.52 117.012 cv
cp
32.809 121.687 mo
32.805 121.48 32.766 121.289 32.691 121.117 cv
32.609 120.949 32.492 120.789 32.336 120.637 cv
32.18 120.488 31.98 120.344 31.746 120.203 cv
31.508 120.066 31.238 119.922 30.93 119.77 cv
30.641 119.914 30.387 120.055 30.172 120.195 cv
29.953 120.336 29.773 120.484 29.637 120.633 cv
29.496 120.789 29.391 120.945 29.32 121.109 cv
29.246 121.277 29.211 121.461 29.215 121.66 cv
29.211 122.105 29.363 122.449 29.672 122.687 cv
29.973 122.934 30.426 123.055 31.031 123.051 cv
31.613 123.055 32.059 122.934 32.359 122.684 cv
32.656 122.441 32.805 122.109 32.809 121.687 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
27.441 63.391 mo
34.535 63.391 li
34.535 80.481 li
27.441 80.481 li
cp
0 0 0 0 cmyk
ef
33.863 71.945 mo
33.859 72.332 33.836 72.719 33.793 73.109 cv
33.746 73.504 33.668 73.883 33.563 74.246 cv
33.449 74.609 33.305 74.949 33.121 75.266 cv
32.934 75.586 32.699 75.867 32.422 76.102 cv
32.137 76.344 31.801 76.527 31.418 76.66 cv
31.027 76.793 30.582 76.859 30.074 76.859 cv
29.875 76.859 29.684 76.844 29.5 76.82 cv
29.313 76.793 29.145 76.766 29 76.73 cv
28.848 76.695 28.723 76.656 28.625 76.613 cv
28.523 76.574 28.449 76.535 28.406 76.492 cv
28.359 76.453 28.328 76.398 28.309 76.324 cv
28.285 76.254 28.273 76.156 28.277 76.039 cv
28.273 75.937 28.277 75.859 28.285 75.801 cv
28.289 75.742 28.301 75.695 28.316 75.664 cv
28.332 75.633 28.352 75.613 28.375 75.598 cv
28.398 75.59 28.43 75.582 28.469 75.578 cv
28.516 75.582 28.586 75.598 28.68 75.629 cv
28.77 75.664 28.883 75.703 29.027 75.742 cv
29.164 75.785 29.328 75.824 29.516 75.855 cv
29.699 75.895 29.91 75.91 30.148 75.906 cv
30.59 75.91 30.969 75.824 31.289 75.652 cv
31.602 75.48 31.863 75.254 32.066 74.965 cv
32.27 74.68 32.418 74.344 32.52 73.961 cv
32.617 73.582 32.672 73.184 32.684 72.762 cv
32.438 72.906 32.148 73.031 31.813 73.137 cv
31.473 73.25 31.086 73.305 30.648 73.301 cv
30.156 73.305 29.742 73.238 29.406 73.102 cv
29.07 72.969 28.797 72.785 28.594 72.551 cv
28.387 72.32 28.242 72.043 28.156 71.719 cv
28.066 71.402 28.023 71.051 28.023 70.672 cv
28.023 70.281 28.078 69.91 28.195 69.551 cv
28.305 69.199 28.484 68.887 28.73 68.617 cv
28.969 68.348 29.277 68.133 29.656 67.973 cv
30.027 67.812 30.477 67.73 31 67.73 cv
31.367 67.73 31.691 67.777 31.98 67.871 cv
32.262 67.965 32.512 68.102 32.727 68.277 cv
32.934 68.453 33.113 68.664 33.262 68.914 cv
33.406 69.164 33.523 69.445 33.613 69.758 cv
33.699 70.074 33.762 70.418 33.805 70.785 cv
33.84 71.156 33.859 71.543 33.863 71.945 cv
cp
32.664 71.816 mo
32.664 71.234 32.625 70.742 32.547 70.34 cv
32.469 69.941 32.352 69.617 32.203 69.367 cv
32.051 69.121 31.867 68.941 31.648 68.832 cv
31.426 68.723 31.172 68.668 30.891 68.668 cv
30.586 68.668 30.332 68.723 30.125 68.832 cv
29.914 68.941 29.742 69.086 29.609 69.262 cv
29.473 69.445 29.371 69.648 29.309 69.875 cv
29.242 70.105 29.211 70.344 29.215 70.582 cv
29.211 70.855 29.242 71.102 29.301 71.32 cv
29.355 71.547 29.445 71.734 29.578 71.891 cv
29.703 72.047 29.871 72.168 30.078 72.254 cv
30.281 72.34 30.535 72.383 30.84 72.379 cv
31.18 72.383 31.512 72.332 31.836 72.227 cv
32.152 72.125 32.43 71.988 32.664 71.816 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.344 16.301 mo
34.532 16.301 li
34.532 33.391 li
20.344 33.391 li
cp
0 0 0 0 cmyk
ef
26.719 29.172 mo
26.715 29.262 26.707 29.336 26.695 29.395 cv
26.68 29.457 26.66 29.508 26.641 29.539 cv
26.617 29.578 26.594 29.602 26.563 29.617 cv
26.531 29.633 26.5 29.641 26.469 29.641 cv
21.828 29.641 li
21.797 29.641 21.766 29.633 21.738 29.617 cv
21.711 29.602 21.684 29.578 21.66 29.539 cv
21.629 29.508 21.609 29.457 21.602 29.395 cv
21.586 29.336 21.582 29.262 21.582 29.172 cv
21.582 29.094 21.586 29.023 21.602 28.961 cv
21.609 28.902 21.629 28.855 21.652 28.812 cv
21.672 28.777 21.695 28.746 21.727 28.723 cv
21.754 28.703 21.789 28.691 21.828 28.691 cv
23.684 28.691 li
23.684 21.937 li
21.965 22.957 li
21.875 23.008 21.805 23.035 21.754 23.043 cv
21.699 23.051 21.66 23.043 21.629 23.012 cv
21.598 22.984 21.574 22.934 21.563 22.863 cv
21.551 22.797 21.547 22.711 21.547 22.602 cv
21.547 22.527 21.547 22.461 21.555 22.402 cv
21.559 22.352 21.57 22.305 21.586 22.266 cv
21.598 22.23 21.617 22.199 21.645 22.172 cv
21.668 22.145 21.703 22.117 21.746 22.086 cv
23.793 20.773 li
23.809 20.766 23.832 20.754 23.859 20.742 cv
23.887 20.734 23.922 20.727 23.965 20.715 cv
24.004 20.707 24.051 20.699 24.109 20.695 cv
24.16 20.695 24.23 20.695 24.313 20.691 cv
24.422 20.695 24.512 20.699 24.59 20.707 cv
24.66 20.719 24.719 20.73 24.758 20.746 cv
24.797 20.762 24.824 20.785 24.84 20.809 cv
24.855 20.836 24.863 20.859 24.863 20.887 cv
24.863 28.691 li
26.469 28.691 li
26.504 28.691 26.535 28.703 26.57 28.723 cv
26.602 28.746 26.629 28.777 26.652 28.812 cv
26.668 28.855 26.684 28.902 26.699 28.961 cv
26.707 29.023 26.715 29.094 26.719 29.172 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.074 25.176 mo
34.07 25.859 34.016 26.484 33.91 27.047 cv
33.801 27.613 33.625 28.098 33.375 28.5 cv
33.125 28.906 32.797 29.219 32.398 29.437 cv
31.992 29.66 31.496 29.77 30.91 29.77 cv
30.348 29.77 29.879 29.672 29.496 29.473 cv
29.113 29.273 28.805 28.98 28.57 28.594 cv
28.336 28.207 28.168 27.73 28.074 27.164 cv
27.973 26.602 27.926 25.953 27.93 25.219 cv
27.926 24.543 27.98 23.922 28.094 23.355 cv
28.199 22.789 28.379 22.305 28.629 21.898 cv
28.875 21.496 29.199 21.18 29.602 20.957 cv
30.004 20.738 30.496 20.629 31.086 20.625 cv
31.645 20.629 32.117 20.73 32.504 20.926 cv
32.883 21.129 33.191 21.422 33.426 21.805 cv
33.656 22.195 33.824 22.668 33.926 23.23 cv
34.023 23.797 34.07 24.445 34.074 25.176 cv
cp
32.867 25.258 mo
32.863 24.816 32.848 24.422 32.816 24.066 cv
32.781 23.715 32.734 23.402 32.676 23.133 cv
32.609 22.863 32.527 22.629 32.434 22.434 cv
32.332 22.238 32.215 22.078 32.082 21.953 cv
31.941 21.828 31.785 21.738 31.609 21.68 cv
31.434 21.625 31.238 21.598 31.02 21.594 cv
30.629 21.598 30.313 21.687 30.07 21.867 cv
29.828 22.051 29.637 22.301 29.496 22.621 cv
29.355 22.941 29.258 23.32 29.211 23.75 cv
29.156 24.184 29.133 24.645 29.137 25.137 cv
29.133 25.805 29.168 26.371 29.238 26.832 cv
29.309 27.301 29.418 27.68 29.566 27.969 cv
29.715 28.266 29.902 28.477 30.137 28.605 cv
30.363 28.742 30.645 28.809 30.977 28.805 cv
31.23 28.809 31.457 28.766 31.652 28.68 cv
31.848 28.598 32.012 28.48 32.152 28.324 cv
32.289 28.172 32.406 27.988 32.5 27.773 cv
32.59 27.559 32.664 27.32 32.723 27.059 cv
32.773 26.801 32.813 26.52 32.836 26.211 cv
32.855 25.91 32.863 25.59 32.867 25.258 cv
cp
f
50.344 518.414 mo
50.34 518.504 50.332 518.574 50.32 518.633 cv
50.305 518.695 50.285 518.746 50.266 518.777 cv
50.242 518.816 50.219 518.84 50.188 518.855 cv
50.156 518.871 50.125 518.879 50.098 518.879 cv
45.461 518.879 li
45.426 518.879 45.398 518.871 45.371 518.855 cv
45.344 518.84 45.316 518.816 45.293 518.777 cv
45.266 518.746 45.246 518.695 45.234 518.633 cv
45.219 518.574 45.211 518.504 45.215 518.414 cv
45.211 518.336 45.219 518.262 45.234 518.199 cv
45.246 518.141 45.262 518.094 45.285 518.055 cv
45.301 518.02 45.328 517.988 45.359 517.965 cv
45.391 517.945 45.422 517.937 45.461 517.934 cv
47.313 517.934 li
47.313 511.187 li
45.598 512.207 li
45.508 512.258 45.438 512.285 45.391 512.293 cv
45.336 512.301 45.293 512.293 45.262 512.262 cv
45.227 512.234 45.207 512.184 45.195 512.113 cv
45.184 512.047 45.176 511.961 45.18 511.852 cv
45.176 511.777 45.18 511.711 45.191 511.652 cv
45.195 511.602 45.207 511.555 45.223 511.516 cv
45.234 511.48 45.254 511.449 45.277 511.422 cv
45.301 511.395 45.332 511.367 45.379 511.34 cv
47.422 510.027 li
47.438 510.016 47.457 510.004 47.488 509.996 cv
47.512 509.988 47.547 509.98 47.594 509.969 cv
47.633 509.961 47.684 509.953 47.738 509.949 cv
47.793 509.949 47.859 509.949 47.945 509.945 cv
48.051 509.949 48.145 509.953 48.219 509.961 cv
48.289 509.969 48.344 509.984 48.391 510 cv
48.43 510.02 48.457 510.039 48.473 510.062 cv
48.48 510.09 48.488 510.113 48.492 510.137 cv
48.492 517.934 li
50.098 517.934 li
50.133 517.937 50.168 517.945 50.199 517.965 cv
50.23 517.988 50.254 518.02 50.277 518.055 cv
50.293 518.094 50.309 518.141 50.324 518.199 cv
50.332 518.262 50.34 518.336 50.344 518.414 cv
cp
f
126.438 518.371 mo
126.434 518.457 126.43 518.531 126.418 518.594 cv
126.406 518.66 126.391 518.715 126.371 518.754 cv
126.348 518.801 126.32 518.832 126.289 518.848 cv
126.254 518.871 126.215 518.879 126.176 518.879 cv
121.273 518.879 li
121.211 518.879 121.152 518.871 121.105 518.855 cv
121.055 518.84 121.016 518.816 120.98 518.777 cv
120.945 518.746 120.918 518.691 120.906 518.621 cv
120.887 518.551 120.879 518.465 120.883 518.363 cv
120.879 518.273 120.883 518.195 120.891 518.125 cv
120.895 518.059 120.91 518 120.938 517.945 cv
120.961 517.895 120.992 517.84 121.027 517.785 cv
121.063 517.734 121.105 517.68 121.164 517.617 cv
122.938 515.793 li
123.348 515.375 123.676 515 123.926 514.664 cv
124.172 514.336 124.363 514.031 124.496 513.754 cv
124.629 513.48 124.715 513.23 124.762 513.004 cv
124.801 512.781 124.824 512.57 124.824 512.375 cv
124.824 512.18 124.789 511.996 124.723 511.816 cv
124.656 511.645 124.563 511.488 124.438 511.352 cv
124.313 511.223 124.156 511.117 123.969 511.035 cv
123.781 510.961 123.563 510.922 123.316 510.918 cv
123.027 510.922 122.77 510.961 122.543 511.035 cv
122.313 511.117 122.113 511.203 121.941 511.289 cv
121.77 511.383 121.625 511.465 121.508 511.543 cv
121.391 511.621 121.305 511.66 121.254 511.66 cv
121.219 511.66 121.188 511.652 121.164 511.633 cv
121.133 511.617 121.113 511.586 121.098 511.543 cv
121.082 511.504 121.066 511.449 121.059 511.379 cv
121.047 511.312 121.043 511.23 121.047 511.133 cv
121.043 511.066 121.047 511.008 121.055 510.957 cv
121.059 510.906 121.066 510.863 121.078 510.824 cv
121.086 510.789 121.102 510.754 121.121 510.723 cv
121.141 510.691 121.176 510.652 121.234 510.602 cv
121.285 510.555 121.379 510.488 121.516 510.406 cv
121.648 510.324 121.82 510.246 122.023 510.164 cv
122.227 510.086 122.449 510.016 122.695 509.961 cv
122.938 509.906 123.195 509.879 123.469 509.879 cv
123.895 509.879 124.27 509.941 124.594 510.062 cv
124.914 510.184 125.18 510.348 125.395 510.559 cv
125.605 510.77 125.766 511.016 125.871 511.289 cv
125.977 511.57 126.031 511.867 126.031 512.18 cv
126.031 512.469 126.004 512.75 125.953 513.027 cv
125.902 513.312 125.797 513.617 125.637 513.941 cv
125.473 514.27 125.238 514.633 124.934 515.031 cv
124.625 515.434 124.219 515.895 123.715 516.41 cv
122.309 517.879 li
126.168 517.879 li
126.199 517.883 126.234 517.895 126.273 517.91 cv
126.305 517.934 126.336 517.965 126.363 518.004 cv
126.387 518.047 126.406 518.098 126.418 518.156 cv
126.43 518.223 126.434 518.293 126.438 518.371 cv
cp
f
202.891 516.355 mo
202.887 516.508 202.863 516.629 202.82 516.715 cv
202.773 516.805 202.711 516.848 202.629 516.844 cv
201.629 516.844 li
201.629 518.707 li
201.629 518.746 201.617 518.777 201.602 518.801 cv
201.578 518.828 201.547 518.848 201.504 518.867 cv
201.453 518.883 201.391 518.895 201.32 518.906 cv
201.242 518.914 201.148 518.918 201.031 518.922 cv
200.914 518.918 200.816 518.914 200.746 518.906 cv
200.668 518.895 200.609 518.883 200.566 518.867 cv
200.52 518.848 200.488 518.828 200.473 518.801 cv
200.453 518.777 200.445 518.746 200.449 518.707 cv
200.449 516.844 li
196.82 516.844 li
196.762 516.848 196.719 516.84 196.684 516.824 cv
196.648 516.812 196.613 516.785 196.586 516.746 cv
196.555 516.711 196.535 516.66 196.523 516.59 cv
196.512 516.523 196.508 516.434 196.508 516.32 cv
196.508 516.238 196.508 516.16 196.516 516.09 cv
196.516 516.02 196.527 515.957 196.543 515.902 cv
196.555 515.848 196.57 515.793 196.598 515.738 cv
196.617 515.684 196.645 515.629 196.68 515.566 cv
199.84 510.18 li
199.859 510.145 199.895 510.113 199.941 510.086 cv
199.984 510.059 200.039 510.035 200.113 510.016 cv
200.18 510 200.266 509.988 200.371 509.977 cv
200.473 509.973 200.594 509.969 200.734 509.965 cv
200.883 509.969 201.02 509.973 201.137 509.984 cv
201.25 509.996 201.34 510.012 201.414 510.027 cv
201.48 510.047 201.535 510.07 201.574 510.102 cv
201.609 510.133 201.629 510.168 201.629 510.207 cv
201.629 515.871 li
202.629 515.871 li
202.703 515.875 202.766 515.914 202.816 515.992 cv
202.863 516.074 202.887 516.195 202.891 516.355 cv
cp
200.449 511.004 mo
200.438 511.004 li
197.586 515.871 li
200.449 515.871 li
cp
f
278.844 516.008 mo
278.844 516.398 278.781 516.777 278.664 517.137 cv
278.539 517.504 278.355 517.82 278.113 518.094 cv
277.863 518.371 277.551 518.594 277.176 518.758 cv
276.793 518.926 276.348 519.008 275.832 519.008 cv
275.461 519.008 275.133 518.965 274.852 518.871 cv
274.566 518.785 274.32 518.652 274.109 518.48 cv
273.898 518.312 273.723 518.105 273.586 517.859 cv
273.445 517.613 273.332 517.332 273.25 517.016 cv
273.164 516.703 273.105 516.359 273.07 515.98 cv
273.031 515.609 273.012 515.207 273.016 514.773 cv
273.012 514.395 273.031 514.012 273.074 513.621 cv
273.113 513.238 273.188 512.863 273.293 512.496 cv
273.398 512.137 273.543 511.797 273.723 511.48 cv
273.902 511.164 274.129 510.887 274.402 510.652 cv
274.676 510.418 275 510.23 275.379 510.09 cv
275.758 509.953 276.199 509.887 276.703 509.883 cv
276.871 509.887 277.043 509.895 277.215 509.914 cv
277.387 509.937 277.547 509.969 277.695 510 cv
277.844 510.039 277.965 510.074 278.066 510.113 cv
278.164 510.152 278.23 510.187 278.266 510.211 cv
278.293 510.238 278.316 510.266 278.336 510.293 cv
278.352 510.324 278.367 510.355 278.375 510.391 cv
278.383 510.426 278.387 510.465 278.395 510.508 cv
278.395 510.551 278.398 510.605 278.402 510.668 cv
278.398 510.754 278.398 510.824 278.398 510.879 cv
278.395 510.941 278.383 510.988 278.371 511.023 cv
278.352 511.062 278.332 511.09 278.309 511.105 cv
278.281 511.125 278.25 511.133 278.211 511.133 cv
278.16 511.133 278.09 511.117 278.004 511.086 cv
277.914 511.055 277.809 511.02 277.688 510.977 cv
277.563 510.941 277.414 510.906 277.238 510.871 cv
277.063 510.844 276.859 510.828 276.629 510.824 cv
276.199 510.828 275.832 510.914 275.527 511.086 cv
275.223 511.258 274.973 511.492 274.777 511.785 cv
274.582 512.078 274.438 512.418 274.348 512.801 cv
274.25 513.191 274.195 513.594 274.188 514.012 cv
274.305 513.945 274.441 513.879 274.59 513.809 cv
274.738 513.742 274.898 513.68 275.074 513.621 cv
275.25 513.57 275.438 513.523 275.633 513.488 cv
275.828 513.457 276.039 513.441 276.266 513.437 cv
276.742 513.441 277.145 513.508 277.477 513.633 cv
277.805 513.766 278.07 513.945 278.277 514.176 cv
278.477 514.406 278.621 514.676 278.711 514.988 cv
278.797 515.301 278.844 515.641 278.844 516.008 cv
cp
277.648 516.117 mo
277.648 515.855 277.621 515.613 277.57 515.395 cv
277.516 515.18 277.426 514.996 277.305 514.84 cv
277.18 514.691 277.016 514.574 276.813 514.492 cv
276.602 514.41 276.348 514.367 276.051 514.367 cv
275.879 514.367 275.711 514.383 275.543 514.414 cv
275.371 514.445 275.207 514.488 275.051 514.535 cv
274.891 514.59 274.742 514.652 274.602 514.723 cv
274.457 514.797 274.324 514.871 274.207 514.949 cv
274.203 515.543 274.242 516.039 274.32 516.434 cv
274.395 516.832 274.504 517.148 274.648 517.387 cv
274.793 517.629 274.973 517.801 275.188 517.902 cv
275.402 518.008 275.652 518.059 275.941 518.055 cv
276.23 518.059 276.484 518.004 276.699 517.891 cv
276.914 517.785 277.09 517.637 277.234 517.449 cv
277.375 517.266 277.48 517.059 277.547 516.828 cv
277.613 516.598 277.648 516.363 277.648 516.117 cv
cp
f
354.898 516.602 mo
354.898 516.988 354.828 517.332 354.691 517.629 cv
354.555 517.934 354.359 518.184 354.102 518.387 cv
353.844 518.594 353.523 518.75 353.145 518.852 cv
352.762 518.957 352.328 519.008 351.844 519.008 cv
351.383 519.008 350.973 518.961 350.613 518.867 cv
350.25 518.773 349.945 518.633 349.695 518.441 cv
349.445 518.258 349.254 518.027 349.121 517.75 cv
348.988 517.477 348.922 517.164 348.922 516.809 cv
348.922 516.535 348.965 516.277 349.059 516.043 cv
349.145 515.809 349.277 515.594 349.453 515.398 cv
349.621 515.203 349.832 515.02 350.086 514.844 cv
350.336 514.676 350.621 514.512 350.938 514.355 cv
350.664 514.215 350.422 514.066 350.211 513.906 cv
350 513.75 349.82 513.578 349.676 513.391 cv
349.527 513.207 349.418 513.012 349.344 512.801 cv
349.266 512.594 349.227 512.363 349.23 512.113 cv
349.227 511.805 349.281 511.512 349.398 511.238 cv
349.508 510.969 349.68 510.734 349.906 510.531 cv
350.133 510.332 350.418 510.172 350.77 510.055 cv
351.113 509.937 351.523 509.879 351.992 509.879 cv
352.438 509.879 352.824 509.934 353.152 510.039 cv
353.48 510.148 353.75 510.293 353.961 510.477 cv
354.172 510.664 354.328 510.883 354.434 511.133 cv
354.531 511.383 354.582 511.652 354.586 511.941 cv
354.582 512.176 354.543 512.402 354.473 512.613 cv
354.395 512.832 354.285 513.035 354.137 513.223 cv
353.988 513.418 353.809 513.598 353.598 513.762 cv
353.387 513.934 353.145 514.09 352.871 514.23 cv
353.191 514.395 353.477 514.559 353.734 514.727 cv
353.984 514.895 354.199 515.074 354.375 515.27 cv
354.543 515.465 354.672 515.672 354.766 515.887 cv
354.852 516.105 354.898 516.344 354.898 516.602 cv
cp
353.418 512.051 mo
353.414 511.863 353.383 511.687 353.316 511.531 cv
353.25 511.375 353.152 511.242 353.027 511.133 cv
352.898 511.023 352.738 510.941 352.551 510.883 cv
352.355 510.828 352.141 510.801 351.902 510.797 cv
351.406 510.801 351.031 510.91 350.781 511.133 cv
350.523 511.359 350.398 511.668 350.402 512.051 cv
350.398 512.23 350.43 512.395 350.492 512.547 cv
350.555 512.703 350.648 512.848 350.781 512.984 cv
350.906 513.121 351.07 513.254 351.273 513.383 cv
351.469 513.516 351.707 513.652 351.984 513.793 cv
352.445 513.559 352.801 513.297 353.047 513.004 cv
353.293 512.719 353.414 512.402 353.418 512.051 cv
cp
353.707 516.727 mo
353.703 516.52 353.664 516.328 353.59 516.156 cv
353.508 515.988 353.391 515.828 353.234 515.676 cv
353.078 515.527 352.879 515.383 352.645 515.242 cv
352.406 515.105 352.137 514.961 351.828 514.809 cv
351.539 514.953 351.285 515.094 351.07 515.234 cv
350.852 515.375 350.672 515.523 350.535 515.672 cv
350.395 515.828 350.289 515.984 350.219 516.148 cv
350.145 516.316 350.109 516.5 350.113 516.699 cv
350.109 517.145 350.262 517.488 350.57 517.727 cv
350.871 517.973 351.324 518.094 351.93 518.09 cv
352.512 518.094 352.957 517.973 353.258 517.723 cv
353.555 517.48 353.703 517.148 353.707 516.727 cv
cp
f
427.266 518.414 mo
427.262 518.504 427.254 518.574 427.242 518.633 cv
427.227 518.695 427.207 518.746 427.188 518.777 cv
427.164 518.816 427.141 518.84 427.109 518.855 cv
427.078 518.871 427.047 518.879 427.02 518.879 cv
422.383 518.879 li
422.348 518.879 422.32 518.871 422.293 518.855 cv
422.266 518.84 422.238 518.816 422.215 518.777 cv
422.188 518.746 422.168 518.695 422.156 518.633 cv
422.141 518.574 422.133 518.504 422.137 518.414 cv
422.133 518.336 422.141 518.262 422.156 518.199 cv
422.168 518.141 422.184 518.094 422.207 518.055 cv
422.223 518.02 422.25 517.988 422.281 517.965 cv
422.313 517.945 422.344 517.937 422.383 517.934 cv
424.234 517.934 li
424.234 511.187 li
422.52 512.207 li
422.43 512.258 422.359 512.285 422.313 512.293 cv
422.258 512.301 422.215 512.293 422.184 512.262 cv
422.148 512.234 422.129 512.184 422.117 512.113 cv
422.105 512.047 422.098 511.961 422.102 511.852 cv
422.098 511.777 422.102 511.711 422.113 511.652 cv
422.117 511.602 422.129 511.555 422.145 511.516 cv
422.156 511.48 422.176 511.449 422.199 511.422 cv
422.223 511.395 422.254 511.367 422.301 511.34 cv
424.344 510.027 li
424.359 510.016 424.379 510.004 424.41 509.996 cv
424.434 509.988 424.469 509.98 424.516 509.969 cv
424.555 509.961 424.605 509.953 424.66 509.949 cv
424.715 509.949 424.781 509.949 424.867 509.945 cv
424.973 509.949 425.066 509.953 425.141 509.961 cv
425.211 509.969 425.266 509.984 425.313 510 cv
425.352 510.02 425.379 510.039 425.395 510.062 cv
425.402 510.09 425.41 510.113 425.414 510.137 cv
425.414 517.934 li
427.02 517.934 li
427.055 517.937 427.09 517.945 427.121 517.965 cv
427.152 517.988 427.176 518.02 427.199 518.055 cv
427.215 518.094 427.23 518.141 427.246 518.199 cv
427.254 518.262 427.262 518.336 427.266 518.414 cv
cp
f
434.617 514.422 mo
434.613 515.105 434.563 515.727 434.457 516.289 cv
434.348 516.852 434.168 517.336 433.922 517.738 cv
433.668 518.145 433.34 518.457 432.941 518.676 cv
432.535 518.898 432.043 519.008 431.457 519.008 cv
430.898 519.008 430.426 518.91 430.047 518.711 cv
429.664 518.516 429.359 518.223 429.125 517.836 cv
428.891 517.449 428.723 516.977 428.629 516.41 cv
428.527 515.848 428.48 515.199 428.48 514.465 cv
428.48 513.793 428.535 513.172 428.645 512.605 cv
428.754 512.043 428.93 511.559 429.18 511.152 cv
429.422 510.75 429.746 510.437 430.152 510.211 cv
430.551 509.992 431.047 509.879 431.637 509.879 cv
432.195 509.879 432.668 509.98 433.051 510.176 cv
433.434 510.379 433.738 510.672 433.973 511.055 cv
434.203 511.445 434.371 511.918 434.469 512.48 cv
434.566 513.043 434.613 513.691 434.617 514.422 cv
cp
433.41 514.504 mo
433.406 514.062 433.391 513.664 433.363 513.312 cv
433.328 512.961 433.281 512.652 433.223 512.383 cv
433.156 512.113 433.078 511.883 432.98 511.687 cv
432.883 511.496 432.766 511.336 432.629 511.207 cv
432.488 511.082 432.328 510.988 432.156 510.93 cv
431.977 510.875 431.781 510.848 431.566 510.844 cv
431.176 510.848 430.859 510.937 430.621 511.121 cv
430.375 511.305 430.184 511.559 430.047 511.875 cv
429.906 512.195 429.813 512.566 429.762 512.996 cv
429.711 513.426 429.688 513.891 429.688 514.383 cv
429.688 515.047 429.719 515.609 429.789 516.07 cv
429.855 516.539 429.965 516.918 430.117 517.207 cv
430.262 517.504 430.453 517.715 430.684 517.844 cv
430.914 517.98 431.195 518.047 431.527 518.043 cv
431.781 518.047 432.004 518.008 432.199 517.922 cv
432.391 517.844 432.559 517.723 432.699 517.566 cv
432.84 517.414 432.953 517.23 433.047 517.016 cv
433.133 516.801 433.207 516.562 433.266 516.301 cv
433.316 516.043 433.355 515.762 433.379 515.457 cv
433.398 515.152 433.406 514.836 433.41 514.504 cv
cp
f
503.375 518.414 mo
503.371 518.504 503.363 518.574 503.352 518.633 cv
503.336 518.695 503.316 518.746 503.297 518.777 cv
503.273 518.816 503.25 518.84 503.219 518.855 cv
503.188 518.871 503.156 518.879 503.129 518.879 cv
498.492 518.879 li
498.457 518.879 498.43 518.871 498.402 518.855 cv
498.375 518.84 498.348 518.816 498.324 518.777 cv
498.297 518.746 498.277 518.695 498.266 518.633 cv
498.25 518.574 498.242 518.504 498.246 518.414 cv
498.242 518.336 498.25 518.262 498.266 518.199 cv
498.277 518.141 498.293 518.094 498.316 518.055 cv
498.332 518.02 498.359 517.988 498.391 517.965 cv
498.422 517.945 498.453 517.937 498.492 517.934 cv
500.344 517.934 li
500.344 511.187 li
498.629 512.207 li
498.539 512.258 498.469 512.285 498.422 512.293 cv
498.367 512.301 498.324 512.293 498.293 512.262 cv
498.258 512.234 498.238 512.184 498.227 512.113 cv
498.215 512.047 498.207 511.961 498.211 511.852 cv
498.207 511.777 498.211 511.711 498.223 511.652 cv
498.227 511.602 498.238 511.555 498.254 511.516 cv
498.266 511.48 498.285 511.449 498.309 511.422 cv
498.332 511.395 498.363 511.367 498.41 511.34 cv
500.453 510.027 li
500.469 510.016 500.488 510.004 500.52 509.996 cv
500.543 509.988 500.578 509.98 500.625 509.969 cv
500.664 509.961 500.715 509.953 500.77 509.949 cv
500.824 509.949 500.891 509.949 500.977 509.945 cv
501.082 509.949 501.176 509.953 501.25 509.961 cv
501.32 509.969 501.375 509.984 501.422 510 cv
501.461 510.02 501.488 510.039 501.504 510.062 cv
501.512 510.09 501.52 510.113 501.523 510.137 cv
501.523 517.934 li
503.129 517.934 li
503.164 517.937 503.199 517.945 503.23 517.965 cv
503.262 517.988 503.285 518.02 503.309 518.055 cv
503.324 518.094 503.34 518.141 503.355 518.199 cv
503.363 518.262 503.371 518.336 503.375 518.414 cv
cp
f
510.438 518.371 mo
510.434 518.457 510.43 518.531 510.418 518.594 cv
510.406 518.66 510.391 518.715 510.371 518.754 cv
510.348 518.801 510.32 518.832 510.289 518.848 cv
510.254 518.871 510.215 518.879 510.176 518.879 cv
505.273 518.879 li
505.211 518.879 505.152 518.871 505.105 518.855 cv
505.055 518.84 505.016 518.816 504.98 518.777 cv
504.945 518.746 504.918 518.691 504.906 518.621 cv
504.887 518.551 504.879 518.465 504.883 518.363 cv
504.879 518.273 504.883 518.195 504.891 518.125 cv
504.895 518.059 504.91 518 504.938 517.945 cv
504.961 517.895 504.992 517.84 505.027 517.785 cv
505.063 517.734 505.105 517.68 505.164 517.617 cv
506.938 515.793 li
507.348 515.375 507.676 515 507.926 514.664 cv
508.172 514.336 508.363 514.031 508.496 513.754 cv
508.629 513.48 508.715 513.23 508.762 513.004 cv
508.801 512.781 508.824 512.57 508.824 512.375 cv
508.824 512.18 508.789 511.996 508.723 511.816 cv
508.656 511.645 508.563 511.488 508.438 511.352 cv
508.313 511.223 508.156 511.117 507.969 511.035 cv
507.781 510.961 507.563 510.922 507.316 510.918 cv
507.027 510.922 506.77 510.961 506.543 511.035 cv
506.313 511.117 506.113 511.203 505.941 511.289 cv
505.77 511.383 505.625 511.465 505.508 511.543 cv
505.391 511.621 505.305 511.66 505.254 511.66 cv
505.219 511.66 505.188 511.652 505.164 511.633 cv
505.133 511.617 505.113 511.586 505.098 511.543 cv
505.082 511.504 505.066 511.449 505.059 511.379 cv
505.047 511.312 505.043 511.23 505.047 511.133 cv
505.043 511.066 505.047 511.008 505.055 510.957 cv
505.059 510.906 505.066 510.863 505.078 510.824 cv
505.086 510.789 505.102 510.754 505.121 510.723 cv
505.141 510.691 505.176 510.652 505.234 510.602 cv
505.285 510.555 505.379 510.488 505.516 510.406 cv
505.648 510.324 505.82 510.246 506.023 510.164 cv
506.227 510.086 506.449 510.016 506.695 509.961 cv
506.938 509.906 507.195 509.879 507.469 509.879 cv
507.895 509.879 508.27 509.941 508.594 510.062 cv
508.914 510.184 509.18 510.348 509.395 510.559 cv
509.605 510.77 509.766 511.016 509.871 511.289 cv
509.977 511.57 510.031 511.867 510.031 512.18 cv
510.031 512.469 510.004 512.75 509.953 513.027 cv
509.902 513.312 509.797 513.617 509.637 513.941 cv
509.473 514.27 509.238 514.633 508.934 515.031 cv
508.625 515.434 508.219 515.895 507.715 516.41 cv
506.309 517.879 li
510.168 517.879 li
510.199 517.883 510.234 517.895 510.273 517.91 cv
510.305 517.934 510.336 517.965 510.363 518.004 cv
510.387 518.047 510.406 518.098 510.418 518.156 cv
510.43 518.223 510.434 518.293 510.438 518.371 cv
cp
f
579.477 518.414 mo
579.473 518.504 579.465 518.574 579.453 518.633 cv
579.438 518.695 579.418 518.746 579.398 518.777 cv
579.375 518.816 579.352 518.84 579.32 518.855 cv
579.289 518.871 579.258 518.879 579.23 518.879 cv
574.594 518.879 li
574.559 518.879 574.531 518.871 574.504 518.855 cv
574.477 518.84 574.449 518.816 574.426 518.777 cv
574.398 518.746 574.379 518.695 574.367 518.633 cv
574.352 518.574 574.344 518.504 574.348 518.414 cv
574.344 518.336 574.352 518.262 574.367 518.199 cv
574.379 518.141 574.395 518.094 574.418 518.055 cv
574.434 518.02 574.461 517.988 574.492 517.965 cv
574.523 517.945 574.555 517.937 574.594 517.934 cv
576.445 517.934 li
576.445 511.187 li
574.73 512.207 li
574.641 512.258 574.57 512.285 574.523 512.293 cv
574.469 512.301 574.426 512.293 574.395 512.262 cv
574.359 512.234 574.34 512.184 574.328 512.113 cv
574.316 512.047 574.309 511.961 574.313 511.852 cv
574.309 511.777 574.313 511.711 574.324 511.652 cv
574.328 511.602 574.34 511.555 574.355 511.516 cv
574.367 511.48 574.387 511.449 574.41 511.422 cv
574.434 511.395 574.465 511.367 574.512 511.34 cv
576.555 510.027 li
576.57 510.016 576.59 510.004 576.621 509.996 cv
576.645 509.988 576.68 509.98 576.727 509.969 cv
576.766 509.961 576.816 509.953 576.871 509.949 cv
576.926 509.949 576.992 509.949 577.078 509.945 cv
577.184 509.949 577.277 509.953 577.352 509.961 cv
577.422 509.969 577.477 509.984 577.523 510 cv
577.563 510.02 577.59 510.039 577.605 510.062 cv
577.613 510.09 577.621 510.113 577.625 510.137 cv
577.625 517.934 li
579.23 517.934 li
579.266 517.937 579.301 517.945 579.332 517.965 cv
579.363 517.988 579.387 518.02 579.41 518.055 cv
579.426 518.094 579.441 518.141 579.457 518.199 cv
579.465 518.262 579.473 518.336 579.477 518.414 cv
cp
f
586.91 516.355 mo
586.906 516.508 586.883 516.629 586.84 516.715 cv
586.793 516.805 586.73 516.848 586.648 516.844 cv
585.648 516.844 li
585.648 518.707 li
585.648 518.746 585.637 518.777 585.621 518.801 cv
585.598 518.828 585.566 518.848 585.523 518.867 cv
585.473 518.883 585.41 518.895 585.34 518.906 cv
585.262 518.914 585.168 518.918 585.051 518.922 cv
584.934 518.918 584.836 518.914 584.766 518.906 cv
584.688 518.895 584.629 518.883 584.586 518.867 cv
584.539 518.848 584.508 518.828 584.492 518.801 cv
584.473 518.777 584.465 518.746 584.469 518.707 cv
584.469 516.844 li
580.84 516.844 li
580.781 516.848 580.738 516.84 580.703 516.824 cv
580.668 516.812 580.633 516.785 580.605 516.746 cv
580.574 516.711 580.555 516.66 580.543 516.59 cv
580.531 516.523 580.527 516.434 580.527 516.32 cv
580.527 516.238 580.527 516.16 580.535 516.09 cv
580.535 516.02 580.547 515.957 580.563 515.902 cv
580.574 515.848 580.59 515.793 580.617 515.738 cv
580.637 515.684 580.664 515.629 580.699 515.566 cv
583.859 510.18 li
583.879 510.145 583.914 510.113 583.961 510.086 cv
584.004 510.059 584.059 510.035 584.133 510.016 cv
584.199 510 584.285 509.988 584.391 509.977 cv
584.492 509.973 584.613 509.969 584.754 509.965 cv
584.902 509.969 585.039 509.973 585.156 509.984 cv
585.27 509.996 585.359 510.012 585.434 510.027 cv
585.5 510.047 585.555 510.07 585.594 510.102 cv
585.629 510.133 585.648 510.168 585.648 510.207 cv
585.648 515.871 li
586.648 515.871 li
586.723 515.875 586.785 515.914 586.836 515.992 cv
586.883 516.074 586.906 516.195 586.91 516.355 cv
cp
584.469 511.004 mo
584.457 511.004 li
581.605 515.871 li
584.469 515.871 li
cp
f
655.555 518.414 mo
655.551 518.504 655.543 518.574 655.531 518.633 cv
655.516 518.695 655.496 518.746 655.477 518.777 cv
655.453 518.816 655.43 518.84 655.398 518.855 cv
655.367 518.871 655.336 518.879 655.309 518.879 cv
650.672 518.879 li
650.637 518.879 650.609 518.871 650.582 518.855 cv
650.555 518.84 650.527 518.816 650.504 518.777 cv
650.477 518.746 650.457 518.695 650.445 518.633 cv
650.43 518.574 650.422 518.504 650.426 518.414 cv
650.422 518.336 650.43 518.262 650.445 518.199 cv
650.457 518.141 650.473 518.094 650.496 518.055 cv
650.512 518.02 650.539 517.988 650.57 517.965 cv
650.602 517.945 650.633 517.937 650.672 517.934 cv
652.523 517.934 li
652.523 511.187 li
650.809 512.207 li
650.719 512.258 650.648 512.285 650.602 512.293 cv
650.547 512.301 650.504 512.293 650.473 512.262 cv
650.438 512.234 650.418 512.184 650.406 512.113 cv
650.395 512.047 650.387 511.961 650.391 511.852 cv
650.387 511.777 650.391 511.711 650.402 511.652 cv
650.406 511.602 650.418 511.555 650.434 511.516 cv
650.445 511.48 650.465 511.449 650.488 511.422 cv
650.512 511.395 650.543 511.367 650.59 511.34 cv
652.633 510.027 li
652.648 510.016 652.668 510.004 652.699 509.996 cv
652.723 509.988 652.758 509.98 652.805 509.969 cv
652.844 509.961 652.895 509.953 652.949 509.949 cv
653.004 509.949 653.07 509.949 653.156 509.945 cv
653.262 509.949 653.355 509.953 653.43 509.961 cv
653.5 509.969 653.555 509.984 653.602 510 cv
653.641 510.02 653.668 510.039 653.684 510.062 cv
653.691 510.09 653.699 510.113 653.703 510.137 cv
653.703 517.934 li
655.309 517.934 li
655.344 517.937 655.379 517.945 655.41 517.965 cv
655.441 517.988 655.465 518.02 655.488 518.055 cv
655.504 518.094 655.52 518.141 655.535 518.199 cv
655.543 518.262 655.551 518.336 655.555 518.414 cv
cp
f
662.844 516.008 mo
662.844 516.398 662.781 516.777 662.664 517.137 cv
662.539 517.504 662.355 517.82 662.113 518.094 cv
661.863 518.371 661.551 518.594 661.176 518.758 cv
660.793 518.926 660.348 519.008 659.832 519.008 cv
659.461 519.008 659.133 518.965 658.852 518.871 cv
658.566 518.785 658.32 518.652 658.109 518.48 cv
657.898 518.312 657.723 518.105 657.586 517.859 cv
657.445 517.613 657.332 517.332 657.25 517.016 cv
657.164 516.703 657.105 516.359 657.07 515.98 cv
657.031 515.609 657.012 515.207 657.016 514.773 cv
657.012 514.395 657.031 514.012 657.074 513.621 cv
657.113 513.238 657.188 512.863 657.293 512.496 cv
657.398 512.137 657.543 511.797 657.723 511.48 cv
657.902 511.164 658.129 510.887 658.402 510.652 cv
658.676 510.418 659 510.23 659.379 510.09 cv
659.758 509.953 660.199 509.887 660.703 509.883 cv
660.871 509.887 661.043 509.895 661.215 509.914 cv
661.387 509.937 661.547 509.969 661.695 510 cv
661.844 510.039 661.965 510.074 662.066 510.113 cv
662.164 510.152 662.23 510.187 662.266 510.211 cv
662.293 510.238 662.316 510.266 662.336 510.293 cv
662.352 510.324 662.367 510.355 662.375 510.391 cv
662.383 510.426 662.387 510.465 662.395 510.508 cv
662.395 510.551 662.398 510.605 662.402 510.668 cv
662.398 510.754 662.398 510.824 662.398 510.879 cv
662.395 510.941 662.383 510.988 662.371 511.023 cv
662.352 511.062 662.332 511.09 662.309 511.105 cv
662.281 511.125 662.25 511.133 662.211 511.133 cv
662.16 511.133 662.09 511.117 662.004 511.086 cv
661.914 511.055 661.809 511.02 661.688 510.977 cv
661.563 510.941 661.414 510.906 661.238 510.871 cv
661.063 510.844 660.859 510.828 660.629 510.824 cv
660.199 510.828 659.832 510.914 659.527 511.086 cv
659.223 511.258 658.973 511.492 658.777 511.785 cv
658.582 512.078 658.438 512.418 658.348 512.801 cv
658.25 513.191 658.195 513.594 658.188 514.012 cv
658.305 513.945 658.441 513.879 658.59 513.809 cv
658.738 513.742 658.898 513.68 659.074 513.621 cv
659.25 513.57 659.438 513.523 659.633 513.488 cv
659.828 513.457 660.039 513.441 660.266 513.437 cv
660.742 513.441 661.145 513.508 661.477 513.633 cv
661.805 513.766 662.07 513.945 662.277 514.176 cv
662.477 514.406 662.621 514.676 662.711 514.988 cv
662.797 515.301 662.844 515.641 662.844 516.008 cv
cp
661.648 516.117 mo
661.648 515.855 661.621 515.613 661.57 515.395 cv
661.516 515.18 661.426 514.996 661.305 514.84 cv
661.18 514.691 661.016 514.574 660.813 514.492 cv
660.602 514.41 660.348 514.367 660.051 514.367 cv
659.879 514.367 659.711 514.383 659.543 514.414 cv
659.371 514.445 659.207 514.488 659.051 514.535 cv
658.891 514.59 658.742 514.652 658.602 514.723 cv
658.457 514.797 658.324 514.871 658.207 514.949 cv
658.203 515.543 658.242 516.039 658.32 516.434 cv
658.395 516.832 658.504 517.148 658.648 517.387 cv
658.793 517.629 658.973 517.801 659.188 517.902 cv
659.402 518.008 659.652 518.059 659.941 518.055 cv
660.23 518.059 660.484 518.004 660.699 517.891 cv
660.914 517.785 661.09 517.637 661.234 517.449 cv
661.375 517.266 661.48 517.059 661.547 516.828 cv
661.613 516.598 661.648 516.363 661.648 516.117 cv
cp
f
7.652 289.84 mo
7.754 289.844 7.84 289.848 7.91 289.855 cv
7.984 289.867 8.043 289.883 8.086 289.906 cv
8.133 289.93 8.164 289.961 8.184 289.992 cv
8.207 290.031 8.219 290.066 8.215 290.105 cv
8.215 292.941 li
16.957 292.941 li
17 292.941 17.035 292.953 17.066 292.973 cv
17.098 292.996 17.125 293.031 17.141 293.082 cv
17.16 293.137 17.172 293.207 17.188 293.289 cv
17.199 293.379 17.207 293.484 17.207 293.609 cv
17.207 293.734 17.199 293.844 17.188 293.93 cv
17.172 294.023 17.16 294.094 17.141 294.141 cv
17.125 294.195 17.098 294.23 17.066 294.25 cv
17.035 294.273 17 294.285 16.957 294.281 cv
8.215 294.281 li
8.215 297.117 li
8.219 297.164 8.207 297.199 8.184 297.23 cv
8.164 297.266 8.133 297.293 8.086 297.312 cv
8.043 297.336 7.984 297.355 7.91 297.363 cv
7.84 297.379 7.754 297.383 7.652 297.383 cv
7.555 297.383 7.469 297.379 7.391 297.363 cv
7.32 297.355 7.258 297.336 7.207 297.312 cv
7.164 297.293 7.129 297.266 7.105 297.23 cv
7.086 297.199 7.078 297.164 7.074 297.117 cv
7.074 290.105 li
7.078 290.066 7.086 290.031 7.105 289.992 cv
7.129 289.961 7.164 289.93 7.207 289.906 cv
7.258 289.883 7.32 289.867 7.391 289.855 cv
7.469 289.848 7.555 289.844 7.652 289.84 cv
cp
f
16.965 287.25 mo
17.012 287.254 17.047 287.266 17.07 287.281 cv
17.102 287.305 17.125 287.336 17.145 287.383 cv
17.164 287.43 17.176 287.496 17.191 287.574 cv
17.199 287.66 17.207 287.766 17.207 287.895 cv
17.207 288.023 17.199 288.129 17.191 288.207 cv
17.176 288.293 17.164 288.359 17.145 288.406 cv
17.125 288.461 17.102 288.492 17.07 288.508 cv
17.047 288.527 17.012 288.539 16.965 288.535 cv
9.953 288.535 li
9.918 288.539 9.887 288.527 9.852 288.508 cv
9.824 288.492 9.797 288.461 9.773 288.406 cv
9.754 288.359 9.738 288.293 9.727 288.207 cv
9.719 288.129 9.715 288.023 9.711 287.895 cv
9.715 287.766 9.719 287.66 9.727 287.574 cv
9.738 287.496 9.754 287.43 9.773 287.383 cv
9.797 287.336 9.824 287.305 9.852 287.281 cv
9.887 287.266 9.918 287.254 9.953 287.25 cv
cp
7.582 287.102 mo
7.887 287.102 8.094 287.16 8.199 287.273 cv
8.313 287.387 8.367 287.598 8.363 287.902 cv
8.367 288.207 8.313 288.414 8.203 288.523 cv
8.098 288.641 7.895 288.695 7.598 288.691 cv
7.297 288.695 7.094 288.637 6.984 288.52 cv
6.879 288.406 6.824 288.195 6.82 287.887 cv
6.824 287.586 6.879 287.383 6.98 287.27 cv
7.09 287.16 7.289 287.102 7.582 287.102 cv
cp
f
16.965 274.395 mo
17.012 274.398 17.047 274.406 17.07 274.426 cv
17.102 274.449 17.125 274.484 17.145 274.527 cv
17.164 274.578 17.176 274.645 17.191 274.723 cv
17.199 274.809 17.207 274.91 17.207 275.035 cv
17.207 275.168 17.199 275.277 17.191 275.355 cv
17.176 275.441 17.164 275.508 17.145 275.555 cv
17.125 275.609 17.102 275.645 17.07 275.66 cv
17.047 275.684 17.012 275.691 16.965 275.691 cv
12.703 275.691 li
12.41 275.691 12.141 275.719 11.895 275.77 cv
11.652 275.824 11.441 275.906 11.262 276.02 cv
11.086 276.133 10.949 276.277 10.855 276.453 cv
10.762 276.633 10.715 276.844 10.715 277.078 cv
10.715 277.375 10.832 277.672 11.059 277.969 cv
11.293 278.273 11.625 278.602 12.063 278.957 cv
16.965 278.957 li
17.012 278.961 17.047 278.973 17.07 278.988 cv
17.102 279.012 17.125 279.043 17.145 279.09 cv
17.164 279.141 17.176 279.207 17.191 279.289 cv
17.199 279.375 17.207 279.48 17.207 279.602 cv
17.207 279.723 17.199 279.824 17.191 279.91 cv
17.176 279.996 17.164 280.066 17.145 280.113 cv
17.125 280.168 17.102 280.199 17.07 280.215 cv
17.047 280.234 17.012 280.246 16.965 280.242 cv
12.703 280.242 li
12.41 280.246 12.141 280.273 11.895 280.328 cv
11.652 280.387 11.441 280.473 11.262 280.586 cv
11.086 280.699 10.949 280.844 10.855 281.016 cv
10.762 281.195 10.715 281.402 10.715 281.637 cv
10.715 281.937 10.832 282.234 11.059 282.535 cv
11.293 282.836 11.625 283.164 12.063 283.516 cv
16.965 283.516 li
17.012 283.52 17.047 283.531 17.07 283.547 cv
17.102 283.57 17.125 283.602 17.145 283.648 cv
17.164 283.695 17.176 283.762 17.191 283.84 cv
17.199 283.926 17.207 284.031 17.207 284.16 cv
17.207 284.289 17.199 284.395 17.191 284.473 cv
17.176 284.559 17.164 284.625 17.145 284.672 cv
17.125 284.727 17.102 284.758 17.07 284.773 cv
17.047 284.793 17.012 284.805 16.965 284.801 cv
9.953 284.801 li
9.914 284.805 9.879 284.797 9.848 284.777 cv
9.82 284.766 9.797 284.734 9.77 284.684 cv
9.75 284.641 9.734 284.578 9.723 284.504 cv
9.719 284.434 9.715 284.34 9.711 284.215 cv
9.715 284.105 9.719 284.008 9.723 283.93 cv
9.734 283.855 9.75 283.797 9.77 283.754 cv
9.797 283.715 9.82 283.687 9.848 283.668 cv
9.879 283.652 9.914 283.645 9.953 283.641 cv
10.879 283.641 li
10.438 283.25 10.117 282.867 9.91 282.492 cv
9.707 282.125 9.602 281.746 9.602 281.363 cv
9.602 281.074 9.637 280.816 9.703 280.582 cv
9.773 280.355 9.867 280.148 9.988 279.969 cv
10.109 279.793 10.254 279.645 10.422 279.516 cv
10.594 279.395 10.785 279.289 10.988 279.203 cv
10.738 278.973 10.523 278.75 10.344 278.539 cv
10.172 278.328 10.027 278.125 9.914 277.93 cv
9.809 277.734 9.73 277.547 9.676 277.363 cv
9.629 277.18 9.602 276.992 9.602 276.805 cv
9.602 276.352 9.684 275.973 9.84 275.668 cv
10.004 275.363 10.215 275.117 10.477 274.922 cv
10.742 274.734 11.051 274.598 11.406 274.516 cv
11.762 274.437 12.137 274.398 12.531 274.395 cv
cp
f
13.156 266.066 mo
13.359 266.07 13.5 266.121 13.586 266.219 cv
13.672 266.324 13.715 266.441 13.715 266.566 cv
13.715 271.184 li
14.105 271.187 14.457 271.148 14.77 271.066 cv
15.082 270.992 15.352 270.859 15.57 270.676 cv
15.797 270.496 15.969 270.262 16.086 269.965 cv
16.211 269.676 16.27 269.316 16.266 268.891 cv
16.27 268.559 16.242 268.262 16.184 268 cv
16.133 267.738 16.07 267.512 16 267.32 cv
15.934 267.133 15.875 266.977 15.816 266.852 cv
15.766 266.73 15.738 266.637 15.734 266.574 cv
15.738 266.539 15.746 266.508 15.762 266.477 cv
15.781 266.449 15.809 266.426 15.844 266.406 cv
15.883 266.395 15.934 266.383 15.996 266.371 cv
16.063 266.367 16.141 266.363 16.234 266.359 cv
16.305 266.363 16.363 266.367 16.41 266.367 cv
16.457 266.375 16.5 266.379 16.539 266.387 cv
16.578 266.395 16.613 266.41 16.645 266.426 cv
16.676 266.449 16.707 266.473 16.734 266.496 cv
16.766 266.527 16.813 266.609 16.875 266.75 cv
16.941 266.891 17.004 267.074 17.066 267.297 cv
17.129 267.523 17.184 267.781 17.234 268.074 cv
17.281 268.367 17.305 268.68 17.309 269.012 cv
17.305 269.59 17.227 270.098 17.066 270.527 cv
16.906 270.965 16.668 271.328 16.352 271.621 cv
16.035 271.922 15.641 272.145 15.16 272.293 cv
14.684 272.441 14.125 272.516 13.488 272.516 cv
12.891 272.516 12.352 272.441 11.867 272.285 cv
11.391 272.133 10.98 271.906 10.645 271.609 cv
10.309 271.316 10.051 270.961 9.871 270.547 cv
9.691 270.133 9.602 269.668 9.602 269.152 cv
9.602 268.602 9.691 268.133 9.867 267.746 cv
10.047 267.359 10.285 267.043 10.582 266.789 cv
10.883 266.543 11.234 266.359 11.633 266.242 cv
12.039 266.129 12.469 266.07 12.922 266.066 cv
cp
12.773 267.359 mo
12.098 267.344 11.566 267.496 11.184 267.812 cv
10.801 268.129 10.609 268.598 10.605 269.215 cv
10.609 269.539 10.668 269.82 10.785 270.059 cv
10.906 270.301 11.066 270.5 11.262 270.66 cv
11.461 270.824 11.691 270.949 11.953 271.035 cv
12.215 271.125 12.488 271.176 12.773 271.184 cv
cp
f
6.422 257.891 mo
7.469 258.387 8.539 258.754 9.637 258.996 cv
10.738 259.238 11.844 259.359 12.953 259.359 cv
14.07 259.359 15.18 259.238 16.273 258.988 cv
17.371 258.746 18.441 258.383 19.496 257.906 cv
19.555 257.883 19.609 257.871 19.656 257.863 cv
19.699 257.863 19.734 257.879 19.766 257.914 cv
19.793 257.953 19.813 258.008 19.828 258.082 cv
19.836 258.16 19.844 258.266 19.848 258.391 cv
19.844 258.488 19.84 258.566 19.84 258.633 cv
19.832 258.703 19.824 258.762 19.809 258.809 cv
19.793 258.859 19.773 258.902 19.754 258.93 cv
19.73 258.965 19.707 258.988 19.684 259 cv
19.152 259.281 18.617 259.527 18.074 259.738 cv
17.531 259.957 16.98 260.137 16.422 260.277 cv
15.859 260.426 15.293 260.535 14.719 260.605 cv
14.145 260.684 13.563 260.719 12.977 260.715 cv
12.391 260.719 11.813 260.68 11.238 260.594 cv
10.668 260.516 10.102 260.398 9.535 260.25 cv
8.973 260.102 8.418 259.922 7.871 259.711 cv
7.328 259.5 6.785 259.262 6.25 258.992 cv
6.23 258.988 6.215 258.973 6.195 258.949 cv
6.184 258.926 6.168 258.895 6.148 258.852 cv
6.137 258.812 6.125 258.754 6.113 258.68 cv
6.109 258.609 6.105 258.516 6.102 258.398 cv
6.105 258.281 6.113 258.187 6.125 258.109 cv
6.145 258.039 6.164 257.98 6.188 257.937 cv
6.215 257.898 6.25 257.875 6.289 257.867 cv
6.336 257.863 6.379 257.871 6.422 257.891 cv
cp
f
16.957 244.609 mo
17 244.609 17.035 244.621 17.066 244.641 cv
17.098 244.664 17.125 244.703 17.141 244.754 cv
17.16 244.809 17.172 244.875 17.188 244.957 cv
17.199 245.043 17.207 245.152 17.207 245.281 cv
17.207 245.41 17.199 245.516 17.188 245.602 cv
17.172 245.691 17.16 245.762 17.141 245.812 cv
17.125 245.863 17.098 245.898 17.066 245.918 cv
17.035 245.941 17 245.953 16.957 245.949 cv
8.176 245.949 li
8.176 245.965 li
16.996 249.52 li
17.035 249.535 17.066 249.559 17.09 249.586 cv
17.117 249.617 17.141 249.66 17.156 249.711 cv
17.176 249.77 17.188 249.832 17.195 249.906 cv
17.203 249.98 17.207 250.07 17.207 250.172 cv
17.207 250.285 17.199 250.379 17.191 250.453 cv
17.176 250.535 17.164 250.602 17.148 250.648 cv
17.133 250.703 17.113 250.742 17.082 250.77 cv
17.059 250.801 17.027 250.82 16.996 250.828 cv
8.176 254.227 li
8.176 254.234 li
16.957 254.234 li
17 254.238 17.035 254.246 17.066 254.266 cv
17.098 254.289 17.125 254.328 17.141 254.379 cv
17.16 254.434 17.172 254.504 17.188 254.586 cv
17.199 254.676 17.207 254.785 17.207 254.914 cv
17.207 255.047 17.199 255.152 17.188 255.238 cv
17.172 255.324 17.16 255.395 17.141 255.441 cv
17.125 255.496 17.098 255.531 17.066 255.547 cv
17.035 255.57 17 255.578 16.957 255.574 cv
7.684 255.574 li
7.469 255.578 7.313 255.52 7.215 255.402 cv
7.125 255.285 7.078 255.156 7.074 255.012 cv
7.074 254.187 li
7.078 254.023 7.094 253.875 7.121 253.746 cv
7.156 253.621 7.203 253.512 7.27 253.414 cv
7.34 253.32 7.426 253.238 7.527 253.176 cv
7.633 253.113 7.758 253.059 7.895 253.012 cv
15.195 250.125 li
15.195 250.086 li
7.918 247.086 li
7.766 247.031 7.633 246.969 7.52 246.898 cv
7.414 246.832 7.324 246.754 7.258 246.672 cv
7.195 246.59 7.148 246.5 7.117 246.398 cv
7.09 246.301 7.078 246.184 7.074 246.051 cv
7.074 245.187 li
7.078 245.109 7.09 245.031 7.109 244.961 cv
7.137 244.891 7.172 244.832 7.219 244.781 cv
7.27 244.73 7.332 244.687 7.406 244.656 cv
7.484 244.625 7.578 244.609 7.684 244.609 cv
cp
f
16.965 240.793 mo
17.012 240.797 17.047 240.809 17.07 240.824 cv
17.102 240.848 17.125 240.879 17.145 240.926 cv
17.164 240.973 17.176 241.039 17.191 241.117 cv
17.199 241.203 17.207 241.309 17.207 241.437 cv
17.207 241.566 17.199 241.672 17.191 241.75 cv
17.176 241.836 17.164 241.902 17.145 241.949 cv
17.125 242.004 17.102 242.035 17.07 242.051 cv
17.047 242.07 17.012 242.082 16.965 242.078 cv
9.953 242.078 li
9.918 242.082 9.887 242.07 9.852 242.051 cv
9.824 242.035 9.797 242.004 9.773 241.949 cv
9.754 241.902 9.738 241.836 9.727 241.75 cv
9.719 241.672 9.715 241.566 9.711 241.437 cv
9.715 241.309 9.719 241.203 9.727 241.117 cv
9.738 241.039 9.754 240.973 9.773 240.926 cv
9.797 240.879 9.824 240.848 9.852 240.824 cv
9.887 240.809 9.918 240.797 9.953 240.793 cv
cp
7.582 240.645 mo
7.887 240.645 8.094 240.703 8.199 240.816 cv
8.313 240.93 8.367 241.141 8.363 241.445 cv
8.367 241.75 8.313 241.957 8.203 242.066 cv
8.098 242.184 7.895 242.238 7.598 242.234 cv
7.297 242.238 7.094 242.18 6.984 242.062 cv
6.879 241.949 6.824 241.738 6.82 241.43 cv
6.824 241.129 6.879 240.926 6.98 240.812 cv
7.09 240.703 7.289 240.645 7.582 240.645 cv
cp
f
16.965 232.367 mo
17.012 232.367 17.047 232.379 17.07 232.398 cv
17.102 232.422 17.125 232.457 17.145 232.5 cv
17.164 232.551 17.176 232.613 17.191 232.695 cv
17.199 232.777 17.207 232.883 17.207 233.004 cv
17.207 233.137 17.199 233.242 17.191 233.324 cv
17.176 233.41 17.164 233.477 17.145 233.52 cv
17.125 233.57 17.102 233.602 17.07 233.621 cv
17.047 233.645 17.012 233.656 16.965 233.652 cv
12.859 233.652 li
12.461 233.656 12.141 233.687 11.895 233.746 cv
11.652 233.812 11.441 233.902 11.262 234.02 cv
11.086 234.137 10.949 234.293 10.855 234.48 cv
10.762 234.676 10.715 234.895 10.715 235.141 cv
10.715 235.465 10.832 235.789 11.059 236.109 cv
11.293 236.434 11.625 236.77 12.063 237.121 cv
16.965 237.121 li
17.012 237.125 17.047 237.137 17.07 237.152 cv
17.102 237.176 17.125 237.207 17.145 237.254 cv
17.164 237.301 17.176 237.367 17.191 237.445 cv
17.199 237.531 17.207 237.637 17.207 237.766 cv
17.207 237.895 17.199 238 17.191 238.078 cv
17.176 238.164 17.164 238.23 17.145 238.277 cv
17.125 238.332 17.102 238.363 17.07 238.379 cv
17.047 238.398 17.012 238.41 16.965 238.406 cv
9.953 238.406 li
9.914 238.41 9.879 238.402 9.848 238.383 cv
9.82 238.371 9.797 238.34 9.77 238.289 cv
9.75 238.246 9.734 238.184 9.723 238.109 cv
9.719 238.039 9.715 237.945 9.711 237.82 cv
9.715 237.711 9.719 237.613 9.723 237.535 cv
9.734 237.461 9.75 237.402 9.77 237.359 cv
9.797 237.32 9.82 237.293 9.848 237.273 cv
9.879 237.258 9.914 237.25 9.953 237.246 cv
10.879 237.246 li
10.438 236.855 10.117 236.461 9.91 236.066 cv
9.707 235.676 9.602 235.277 9.602 234.875 cv
9.602 234.406 9.684 234.016 9.84 233.695 cv
10.004 233.379 10.215 233.117 10.477 232.918 cv
10.742 232.723 11.051 232.582 11.406 232.496 cv
11.762 232.41 12.191 232.367 12.688 232.367 cv
cp
f
16.965 223.973 mo
17.012 223.977 17.047 223.984 17.07 224 cv
17.102 224.02 17.125 224.055 17.145 224.098 cv
17.164 224.145 17.176 224.203 17.191 224.277 cv
17.199 224.355 17.207 224.449 17.207 224.555 cv
17.207 224.68 17.199 224.777 17.191 224.848 cv
17.176 224.926 17.164 224.984 17.145 225.027 cv
17.125 225.074 17.102 225.105 17.07 225.117 cv
17.047 225.137 17.012 225.145 16.965 225.141 cv
16.039 225.141 li
16.484 225.543 16.805 225.937 17.004 226.324 cv
17.207 226.719 17.305 227.113 17.309 227.508 cv
17.305 227.98 17.23 228.375 17.074 228.691 cv
16.922 229.012 16.711 229.27 16.441 229.465 cv
16.176 229.668 15.863 229.809 15.504 229.891 cv
15.148 229.98 14.715 230.023 14.207 230.02 cv
9.953 230.02 li
9.914 230.023 9.879 230.016 9.848 229.992 cv
9.82 229.977 9.797 229.941 9.77 229.887 cv
9.75 229.84 9.734 229.77 9.723 229.684 cv
9.719 229.602 9.715 229.5 9.711 229.371 cv
9.715 229.25 9.719 229.145 9.723 229.059 cv
9.734 228.977 9.75 228.91 9.77 228.863 cv
9.797 228.816 9.82 228.781 9.848 228.758 cv
9.879 228.738 9.914 228.73 9.953 228.727 cv
14.035 228.727 li
14.449 228.73 14.777 228.699 15.023 228.637 cv
15.27 228.578 15.48 228.488 15.652 228.363 cv
15.832 228.246 15.965 228.09 16.059 227.898 cv
16.156 227.715 16.207 227.496 16.203 227.246 cv
16.207 226.926 16.09 226.605 15.859 226.281 cv
15.633 225.965 15.297 225.625 14.852 225.266 cv
9.953 225.266 li
9.914 225.266 9.879 225.258 9.848 225.238 cv
9.82 225.223 9.797 225.187 9.77 225.133 cv
9.75 225.082 9.734 225.016 9.723 224.934 cv
9.719 224.855 9.715 224.75 9.711 224.617 cv
9.715 224.496 9.719 224.391 9.723 224.305 cv
9.734 224.223 9.75 224.16 9.77 224.113 cv
9.797 224.07 9.82 224.035 9.848 224.008 cv
9.879 223.988 9.914 223.977 9.953 223.973 cv
cp
f
16.449 217.953 mo
16.605 217.953 16.723 217.965 16.809 217.984 cv
16.898 218.008 16.965 218.039 17.004 218.078 cv
17.047 218.121 17.086 218.184 17.121 218.266 cv
17.156 218.352 17.184 218.445 17.211 218.551 cv
17.23 218.66 17.25 218.773 17.27 218.891 cv
17.281 219.008 17.289 219.129 17.293 219.246 cv
17.289 219.613 17.242 219.926 17.148 220.184 cv
17.055 220.445 16.91 220.656 16.711 220.82 cv
16.52 220.988 16.273 221.109 15.973 221.184 cv
15.676 221.262 15.324 221.301 14.914 221.297 cv
10.816 221.297 li
10.816 222.277 li
10.82 222.355 10.777 222.418 10.691 222.465 cv
10.609 222.512 10.477 222.535 10.285 222.535 cv
10.191 222.535 10.109 222.531 10.039 222.516 cv
9.977 222.508 9.918 222.488 9.871 222.465 cv
9.828 222.445 9.797 222.418 9.777 222.383 cv
9.762 222.352 9.754 222.316 9.75 222.27 cv
9.75 221.297 li
8.082 221.297 li
8.051 221.301 8.016 221.289 7.98 221.27 cv
7.953 221.254 7.926 221.223 7.898 221.168 cv
7.879 221.121 7.863 221.055 7.848 220.969 cv
7.84 220.891 7.832 220.785 7.832 220.656 cv
7.832 220.527 7.84 220.422 7.848 220.34 cv
7.863 220.258 7.879 220.191 7.898 220.145 cv
7.926 220.098 7.953 220.066 7.98 220.043 cv
8.016 220.027 8.051 220.016 8.082 220.012 cv
9.75 220.012 li
9.75 218.211 li
9.754 218.172 9.762 218.137 9.777 218.102 cv
9.797 218.074 9.828 218.047 9.871 218.02 cv
9.918 218 9.977 217.984 10.039 217.969 cv
10.109 217.961 10.191 217.953 10.285 217.953 cv
10.477 217.953 10.609 217.977 10.691 218.023 cv
10.777 218.07 10.82 218.133 10.816 218.211 cv
10.816 220.012 li
14.73 220.012 li
15.215 220.016 15.578 219.945 15.824 219.797 cv
16.074 219.656 16.199 219.398 16.195 219.027 cv
16.199 218.914 16.188 218.809 16.16 218.711 cv
16.141 218.621 16.117 218.539 16.086 218.461 cv
16.063 218.391 16.035 218.328 16.012 218.273 cv
15.988 218.227 15.977 218.18 15.977 218.133 cv
15.977 218.109 15.984 218.082 15.996 218.059 cv
16.012 218.035 16.035 218.02 16.07 218.004 cv
16.109 217.996 16.16 217.984 16.219 217.969 cv
16.285 217.961 16.363 217.953 16.449 217.953 cv
cp
f
13.156 210.27 mo
13.359 210.273 13.5 210.324 13.586 210.422 cv
13.672 210.527 13.715 210.645 13.715 210.77 cv
13.715 215.387 li
14.105 215.391 14.457 215.352 14.77 215.27 cv
15.082 215.195 15.352 215.062 15.57 214.879 cv
15.797 214.699 15.969 214.465 16.086 214.168 cv
16.211 213.879 16.27 213.52 16.266 213.094 cv
16.27 212.762 16.242 212.465 16.184 212.203 cv
16.133 211.941 16.07 211.715 16 211.523 cv
15.934 211.336 15.875 211.18 15.816 211.055 cv
15.766 210.934 15.738 210.84 15.734 210.777 cv
15.738 210.742 15.746 210.711 15.762 210.68 cv
15.781 210.652 15.809 210.629 15.844 210.609 cv
15.883 210.598 15.934 210.586 15.996 210.574 cv
16.063 210.57 16.141 210.566 16.234 210.562 cv
16.305 210.566 16.363 210.57 16.41 210.57 cv
16.457 210.578 16.5 210.582 16.539 210.59 cv
16.578 210.598 16.613 210.613 16.645 210.629 cv
16.676 210.652 16.707 210.676 16.734 210.699 cv
16.766 210.73 16.813 210.812 16.875 210.953 cv
16.941 211.094 17.004 211.277 17.066 211.5 cv
17.129 211.727 17.184 211.984 17.234 212.277 cv
17.281 212.57 17.305 212.883 17.309 213.215 cv
17.305 213.793 17.227 214.301 17.066 214.73 cv
16.906 215.168 16.668 215.531 16.352 215.824 cv
16.035 216.125 15.641 216.348 15.16 216.496 cv
14.684 216.645 14.125 216.719 13.488 216.719 cv
12.891 216.719 12.352 216.645 11.867 216.488 cv
11.391 216.336 10.98 216.109 10.645 215.812 cv
10.309 215.52 10.051 215.164 9.871 214.75 cv
9.691 214.336 9.602 213.871 9.602 213.355 cv
9.602 212.805 9.691 212.336 9.867 211.949 cv
10.047 211.562 10.285 211.246 10.582 210.992 cv
10.883 210.746 11.234 210.562 11.633 210.445 cv
12.039 210.332 12.469 210.273 12.922 210.27 cv
cp
12.773 211.562 mo
12.098 211.547 11.566 211.699 11.184 212.016 cv
10.801 212.332 10.609 212.801 10.605 213.418 cv
10.609 213.742 10.668 214.023 10.785 214.262 cv
10.906 214.504 11.066 214.703 11.262 214.863 cv
11.461 215.027 11.691 215.152 11.953 215.238 cv
12.215 215.328 12.488 215.379 12.773 215.387 cv
cp
f
15.055 203.984 mo
15.418 203.988 15.738 204.055 16.016 204.184 cv
16.297 204.316 16.531 204.504 16.723 204.746 cv
16.918 204.992 17.063 205.285 17.16 205.621 cv
17.258 205.961 17.305 206.332 17.309 206.734 cv
17.305 206.988 17.285 207.227 17.25 207.449 cv
17.207 207.676 17.16 207.875 17.102 208.055 cv
17.043 208.234 16.98 208.387 16.914 208.512 cv
16.852 208.637 16.793 208.73 16.738 208.785 cv
16.688 208.844 16.617 208.883 16.52 208.906 cv
16.43 208.934 16.301 208.945 16.141 208.945 cv
16.043 208.945 15.961 208.941 15.891 208.93 cv
15.824 208.922 15.77 208.91 15.727 208.891 cv
15.688 208.879 15.656 208.855 15.637 208.828 cv
15.621 208.801 15.613 208.77 15.609 208.73 cv
15.613 208.676 15.648 208.59 15.715 208.477 cv
15.789 208.367 15.867 208.23 15.945 208.062 cv
16.031 207.902 16.105 207.711 16.176 207.484 cv
16.246 207.266 16.281 207.008 16.281 206.711 cv
16.281 206.496 16.258 206.297 16.211 206.117 cv
16.164 205.941 16.098 205.789 16.004 205.66 cv
15.918 205.531 15.801 205.43 15.656 205.359 cv
15.52 205.289 15.352 205.254 15.156 205.254 cv
14.961 205.254 14.797 205.305 14.66 205.406 cv
14.527 205.508 14.406 205.645 14.301 205.809 cv
14.199 205.977 14.109 206.16 14.023 206.367 cv
13.945 206.578 13.859 206.793 13.77 207.012 cv
13.684 207.23 13.582 207.445 13.469 207.656 cv
13.359 207.867 13.227 208.059 13.063 208.223 cv
12.906 208.395 12.711 208.527 12.484 208.625 cv
12.262 208.73 11.996 208.781 11.684 208.777 cv
11.41 208.781 11.145 208.727 10.891 208.617 cv
10.641 208.512 10.422 208.352 10.23 208.137 cv
10.043 207.926 9.891 207.66 9.773 207.34 cv
9.66 207.02 9.602 206.648 9.602 206.219 cv
9.602 206.035 9.617 205.848 9.648 205.66 cv
9.68 205.477 9.719 205.309 9.766 205.152 cv
9.813 205.004 9.863 204.875 9.918 204.766 cv
9.973 204.664 10.023 204.582 10.063 204.523 cv
10.109 204.473 10.145 204.437 10.172 204.414 cv
10.203 204.398 10.238 204.383 10.273 204.375 cv
10.316 204.367 10.363 204.359 10.418 204.352 cv
10.477 204.344 10.547 204.34 10.629 204.34 cv
10.719 204.34 10.797 204.344 10.859 204.352 cv
10.93 204.359 10.98 204.375 11.02 204.391 cv
11.063 204.414 11.094 204.434 11.109 204.457 cv
11.129 204.484 11.137 204.516 11.137 204.543 cv
11.137 204.594 11.109 204.66 11.051 204.746 cv
10.996 204.836 10.934 204.949 10.867 205.09 cv
10.805 205.23 10.746 205.398 10.684 205.586 cv
10.629 205.777 10.598 205.992 10.598 206.234 cv
10.598 206.457 10.625 206.648 10.672 206.812 cv
10.727 206.98 10.797 207.117 10.883 207.223 cv
10.977 207.328 11.082 207.41 11.207 207.461 cv
11.332 207.52 11.469 207.547 11.613 207.543 cv
11.816 207.547 11.984 207.496 12.121 207.391 cv
12.262 207.289 12.383 207.152 12.484 206.984 cv
12.59 206.82 12.684 206.629 12.766 206.414 cv
12.852 206.203 12.938 205.988 13.023 205.766 cv
13.113 205.547 13.215 205.328 13.32 205.109 cv
13.43 204.895 13.559 204.703 13.715 204.535 cv
13.871 204.371 14.059 204.238 14.277 204.137 cv
14.496 204.039 14.758 203.988 15.055 203.984 cv
cp
f
12.977 199.539 mo
13.563 199.539 14.145 199.578 14.719 199.648 cv
15.293 199.727 15.859 199.836 16.422 199.977 cv
16.98 200.125 17.531 200.301 18.074 200.512 cv
18.617 200.723 19.152 200.969 19.684 201.246 cv
19.707 201.266 19.73 201.289 19.754 201.316 cv
19.773 201.352 19.793 201.391 19.809 201.437 cv
19.824 201.488 19.832 201.547 19.84 201.613 cv
19.84 201.684 19.844 201.766 19.848 201.855 cv
19.844 201.992 19.836 202.098 19.828 202.172 cv
19.813 202.25 19.793 202.305 19.766 202.336 cv
19.734 202.371 19.699 202.387 19.656 202.383 cv
19.609 202.383 19.555 202.367 19.496 202.34 cv
18.445 201.863 17.375 201.504 16.277 201.258 cv
15.18 201.016 14.07 200.895 12.953 200.891 cv
11.844 200.895 10.738 201.016 9.637 201.258 cv
8.539 201.504 7.469 201.871 6.422 202.355 cv
6.379 202.379 6.336 202.387 6.289 202.379 cv
6.25 202.379 6.215 202.355 6.188 202.309 cv
6.164 202.27 6.145 202.211 6.125 202.137 cv
6.113 202.066 6.105 201.969 6.102 201.848 cv
6.105 201.738 6.109 201.648 6.113 201.574 cv
6.125 201.504 6.137 201.445 6.148 201.398 cv
6.168 201.355 6.184 201.324 6.195 201.301 cv
6.215 201.285 6.23 201.27 6.25 201.254 cv
7.316 200.723 8.414 200.301 9.535 199.996 cv
10.664 199.691 11.809 199.539 12.977 199.539 cv
cp
f
303.871 531.07 mo
303.867 531.176 303.852 531.266 303.816 531.336 cv
303.781 531.414 303.734 531.473 303.68 531.516 cv
303.621 531.566 303.559 531.602 303.492 531.617 cv
303.418 531.641 303.348 531.648 303.285 531.648 cv
302.84 531.648 li
302.699 531.648 302.578 531.637 302.473 531.605 cv
302.367 531.582 302.27 531.527 302.176 531.449 cv
302.082 531.375 301.988 531.273 301.895 531.141 cv
301.801 531.012 301.699 530.848 301.594 530.645 cv
298.52 524.906 li
298.355 524.613 298.191 524.305 298.031 523.977 cv
297.863 523.656 297.711 523.34 297.574 523.031 cv
297.559 523.031 li
297.566 523.406 297.574 523.789 297.582 524.176 cv
297.586 524.566 297.586 524.953 297.59 525.336 cv
297.59 531.422 li
297.586 531.461 297.574 531.496 297.555 531.527 cv
297.531 531.562 297.496 531.59 297.445 531.605 cv
297.391 531.625 297.32 531.637 297.238 531.652 cv
297.152 531.664 297.047 531.672 296.918 531.672 cv
296.781 531.672 296.672 531.664 296.59 531.652 cv
296.504 531.637 296.438 531.625 296.391 531.605 cv
296.34 531.59 296.305 531.562 296.281 531.527 cv
296.258 531.496 296.246 531.461 296.25 531.422 cv
296.25 522.117 li
296.246 521.91 296.305 521.762 296.426 521.672 cv
296.543 521.586 296.672 521.543 296.813 521.539 cv
297.473 521.539 li
297.625 521.543 297.758 521.555 297.863 521.578 cv
297.965 521.605 298.059 521.648 298.145 521.707 cv
298.227 521.77 298.305 521.852 298.387 521.957 cv
298.461 522.066 298.543 522.203 298.629 522.359 cv
300.996 526.785 li
301.141 527.059 301.281 527.324 301.418 527.578 cv
301.551 527.836 301.68 528.09 301.809 528.336 cv
301.93 528.59 302.055 528.836 302.18 529.074 cv
302.301 529.316 302.422 529.559 302.547 529.801 cv
302.555 529.801 li
302.543 529.395 302.535 528.965 302.535 528.52 cv
302.527 528.074 302.527 527.648 302.531 527.238 cv
302.531 521.766 li
302.527 521.73 302.539 521.695 302.563 521.664 cv
302.586 521.633 302.621 521.605 302.676 521.582 cv
302.723 521.559 302.793 521.543 302.879 521.531 cv
302.965 521.523 303.074 521.52 303.215 521.516 cv
303.332 521.52 303.438 521.523 303.527 521.531 cv
303.613 521.543 303.68 521.559 303.73 521.582 cv
303.777 521.605 303.813 521.633 303.836 521.664 cv
303.855 521.695 303.867 521.73 303.871 521.766 cv
cp
f
312.418 531.43 mo
312.414 531.477 312.406 531.512 312.391 531.535 cv
312.371 531.566 312.336 531.59 312.293 531.609 cv
312.246 531.629 312.188 531.641 312.113 531.656 cv
312.035 531.664 311.941 531.672 311.836 531.672 cv
311.711 531.672 311.613 531.664 311.543 531.656 cv
311.465 531.641 311.406 531.629 311.363 531.609 cv
311.316 531.59 311.285 531.566 311.273 531.535 cv
311.254 531.512 311.246 531.477 311.25 531.43 cv
311.25 530.504 li
310.848 530.949 310.453 531.27 310.066 531.469 cv
309.672 531.672 309.277 531.77 308.883 531.773 cv
308.41 531.77 308.016 531.695 307.699 531.539 cv
307.379 531.387 307.121 531.176 306.926 530.906 cv
306.723 530.641 306.582 530.328 306.5 529.969 cv
306.41 529.613 306.367 529.18 306.371 528.672 cv
306.371 524.418 li
306.367 524.379 306.375 524.344 306.398 524.312 cv
306.414 524.285 306.449 524.262 306.504 524.234 cv
306.551 524.215 306.621 524.199 306.707 524.187 cv
306.789 524.184 306.891 524.18 307.02 524.176 cv
307.141 524.18 307.246 524.184 307.332 524.187 cv
307.414 524.199 307.48 524.215 307.527 524.234 cv
307.574 524.262 307.609 524.285 307.633 524.312 cv
307.652 524.344 307.66 524.379 307.664 524.418 cv
307.664 528.5 li
307.66 528.914 307.691 529.242 307.754 529.488 cv
307.813 529.734 307.902 529.945 308.027 530.117 cv
308.145 530.297 308.301 530.43 308.492 530.523 cv
308.676 530.621 308.895 530.672 309.145 530.668 cv
309.465 530.672 309.785 530.555 310.109 530.324 cv
310.426 530.098 310.766 529.762 311.125 529.316 cv
311.125 524.418 li
311.125 524.379 311.133 524.344 311.152 524.312 cv
311.168 524.285 311.203 524.262 311.258 524.234 cv
311.309 524.215 311.375 524.199 311.457 524.187 cv
311.535 524.184 311.641 524.18 311.773 524.176 cv
311.895 524.18 312 524.184 312.086 524.187 cv
312.168 524.199 312.23 524.215 312.277 524.234 cv
312.32 524.262 312.355 524.285 312.383 524.312 cv
312.402 524.344 312.414 524.379 312.418 524.418 cv
cp
f
325.195 531.43 mo
325.191 531.477 325.184 531.512 325.164 531.535 cv
325.141 531.566 325.105 531.59 325.063 531.609 cv
325.012 531.629 324.945 531.641 324.867 531.656 cv
324.781 531.664 324.68 531.672 324.555 531.672 cv
324.422 531.672 324.313 531.664 324.234 531.656 cv
324.148 531.641 324.082 531.629 324.035 531.609 cv
323.98 531.59 323.945 531.566 323.93 531.535 cv
323.906 531.512 323.898 531.477 323.898 531.43 cv
323.898 527.168 li
323.898 526.875 323.871 526.605 323.82 526.359 cv
323.766 526.117 323.684 525.906 323.57 525.727 cv
323.457 525.551 323.313 525.414 323.137 525.32 cv
322.957 525.227 322.746 525.18 322.512 525.18 cv
322.215 525.18 321.918 525.297 321.621 525.523 cv
321.316 525.758 320.988 526.09 320.633 526.527 cv
320.633 531.43 li
320.629 531.477 320.617 531.512 320.602 531.535 cv
320.578 531.566 320.547 531.59 320.5 531.609 cv
320.449 531.629 320.383 531.641 320.301 531.656 cv
320.215 531.664 320.109 531.672 319.988 531.672 cv
319.867 531.672 319.766 531.664 319.68 531.656 cv
319.594 531.641 319.523 531.629 319.477 531.609 cv
319.422 531.59 319.391 531.566 319.375 531.535 cv
319.355 531.512 319.344 531.477 319.348 531.43 cv
319.348 527.168 li
319.344 526.875 319.316 526.605 319.262 526.359 cv
319.203 526.117 319.117 525.906 319.004 525.727 cv
318.891 525.551 318.746 525.414 318.574 525.32 cv
318.395 525.227 318.188 525.18 317.953 525.18 cv
317.652 525.18 317.355 525.297 317.055 525.523 cv
316.754 525.758 316.426 526.09 316.074 526.527 cv
316.074 531.43 li
316.07 531.477 316.059 531.512 316.043 531.535 cv
316.02 531.566 315.988 531.59 315.941 531.609 cv
315.895 531.629 315.828 531.641 315.75 531.656 cv
315.664 531.664 315.559 531.672 315.43 531.672 cv
315.301 531.672 315.195 531.664 315.117 531.656 cv
315.031 531.641 314.965 531.629 314.918 531.609 cv
314.863 531.59 314.832 531.566 314.816 531.535 cv
314.797 531.512 314.785 531.477 314.789 531.43 cv
314.789 524.418 li
314.785 524.379 314.793 524.344 314.813 524.312 cv
314.824 524.285 314.855 524.262 314.906 524.234 cv
314.949 524.215 315.012 524.199 315.086 524.187 cv
315.156 524.184 315.25 524.18 315.375 524.176 cv
315.484 524.18 315.582 524.184 315.66 524.187 cv
315.734 524.199 315.793 524.215 315.836 524.234 cv
315.875 524.262 315.902 524.285 315.922 524.312 cv
315.938 524.344 315.945 524.379 315.949 524.418 cv
315.949 525.344 li
316.34 524.902 316.723 524.582 317.098 524.375 cv
317.465 524.172 317.844 524.066 318.227 524.066 cv
318.516 524.066 318.773 524.102 319.008 524.168 cv
319.234 524.238 319.441 524.332 319.621 524.453 cv
319.797 524.574 319.945 524.719 320.074 524.887 cv
320.195 525.059 320.301 525.25 320.387 525.453 cv
320.617 525.203 320.84 524.988 321.051 524.809 cv
321.262 524.637 321.465 524.492 321.66 524.379 cv
321.855 524.273 322.043 524.195 322.227 524.141 cv
322.41 524.094 322.598 524.066 322.785 524.066 cv
323.238 524.066 323.617 524.148 323.922 524.305 cv
324.227 524.469 324.473 524.68 324.668 524.941 cv
324.855 525.207 324.992 525.516 325.074 525.871 cv
325.152 526.227 325.191 526.602 325.195 526.996 cv
cp
f
333.996 527.828 mo
333.992 528.437 333.926 528.988 333.797 529.473 cv
333.66 529.961 333.465 530.375 333.211 530.715 cv
332.953 531.059 332.637 531.32 332.266 531.5 cv
331.891 531.684 331.465 531.77 330.98 531.773 cv
330.754 531.77 330.547 531.75 330.359 531.707 cv
330.172 531.66 329.984 531.59 329.805 531.492 cv
329.617 531.395 329.438 531.27 329.258 531.117 cv
329.074 530.969 328.883 530.789 328.684 530.574 cv
328.684 531.43 li
328.684 531.477 328.672 531.512 328.652 531.539 cv
328.629 531.574 328.594 531.598 328.551 531.613 cv
328.5 531.629 328.441 531.641 328.375 531.656 cv
328.301 531.664 328.211 531.672 328.105 531.672 cv
327.996 531.672 327.91 531.664 327.84 531.656 cv
327.766 531.641 327.703 531.629 327.66 531.613 cv
327.609 531.598 327.578 531.574 327.566 531.539 cv
327.547 531.512 327.539 531.477 327.543 531.43 cv
327.543 521.02 li
327.539 520.98 327.551 520.945 327.57 520.91 cv
327.586 520.883 327.617 520.855 327.672 520.832 cv
327.719 520.812 327.785 520.797 327.871 520.785 cv
327.949 520.777 328.055 520.773 328.184 520.77 cv
328.313 520.773 328.418 520.777 328.504 520.785 cv
328.582 520.797 328.648 520.812 328.695 520.832 cv
328.742 520.855 328.773 520.883 328.797 520.91 cv
328.813 520.945 328.824 520.98 328.828 521.02 cv
328.828 525.219 li
329.035 525.008 329.238 524.828 329.434 524.684 cv
329.629 524.539 329.816 524.422 330.004 524.328 cv
330.188 524.242 330.375 524.176 330.566 524.129 cv
330.75 524.09 330.949 524.066 331.16 524.066 cv
331.664 524.066 332.098 524.168 332.465 524.371 cv
332.824 524.574 333.117 524.848 333.344 525.184 cv
333.566 525.527 333.734 525.926 333.84 526.383 cv
333.941 526.84 333.992 527.32 333.996 527.828 cv
cp
332.664 527.977 mo
332.66 527.621 332.633 527.273 332.582 526.934 cv
332.523 526.598 332.43 526.301 332.293 526.039 cv
332.156 525.781 331.977 525.57 331.754 525.41 cv
331.527 525.254 331.246 525.176 330.914 525.172 cv
330.746 525.176 330.582 525.199 330.422 525.242 cv
330.258 525.293 330.094 525.371 329.926 525.477 cv
329.758 525.59 329.582 525.73 329.406 525.898 cv
329.223 526.074 329.031 526.289 328.828 526.543 cv
328.828 529.34 li
329.184 529.773 329.523 530.105 329.848 530.328 cv
330.172 530.559 330.508 530.672 330.859 530.668 cv
331.18 530.672 331.457 530.594 331.691 530.434 cv
331.918 530.281 332.105 530.074 332.25 529.812 cv
332.395 529.559 332.5 529.27 332.566 528.949 cv
332.629 528.633 332.66 528.309 332.664 527.977 cv
cp
f
341.906 527.621 mo
341.902 527.824 341.852 527.965 341.754 528.051 cv
341.648 528.137 341.531 528.18 341.406 528.18 cv
336.789 528.18 li
336.785 528.57 336.824 528.922 336.906 529.234 cv
336.98 529.547 337.113 529.816 337.297 530.035 cv
337.477 530.262 337.711 530.434 338.008 530.551 cv
338.297 530.676 338.656 530.734 339.082 530.73 cv
339.414 530.734 339.711 530.707 339.973 530.648 cv
340.234 530.598 340.461 530.535 340.652 530.465 cv
340.84 530.398 340.996 530.34 341.121 530.281 cv
341.242 530.23 341.336 530.203 341.398 530.199 cv
341.434 530.203 341.465 530.211 341.496 530.227 cv
341.523 530.246 341.547 530.273 341.566 530.309 cv
341.578 530.348 341.59 530.398 341.602 530.461 cv
341.605 530.527 341.609 530.605 341.613 530.699 cv
341.609 530.77 341.605 530.828 341.605 530.875 cv
341.598 530.922 341.594 530.965 341.586 531.004 cv
341.578 531.043 341.563 531.078 341.547 531.109 cv
341.523 531.141 341.5 531.172 341.477 531.199 cv
341.445 531.23 341.363 531.277 341.223 531.34 cv
341.082 531.406 340.898 531.469 340.676 531.531 cv
340.449 531.594 340.191 531.648 339.898 531.699 cv
339.605 531.746 339.293 531.77 338.961 531.773 cv
338.383 531.77 337.875 531.691 337.445 531.531 cv
337.008 531.371 336.645 531.133 336.352 530.816 cv
336.051 530.5 335.828 530.105 335.68 529.625 cv
335.531 529.148 335.457 528.59 335.457 527.953 cv
335.457 527.355 335.531 526.816 335.688 526.332 cv
335.84 525.855 336.066 525.445 336.363 525.109 cv
336.656 524.773 337.012 524.516 337.426 524.336 cv
337.84 524.156 338.305 524.066 338.82 524.066 cv
339.371 524.066 339.84 524.156 340.227 524.332 cv
340.613 524.512 340.93 524.75 341.184 525.047 cv
341.43 525.348 341.613 525.699 341.73 526.098 cv
341.844 526.504 341.902 526.934 341.906 527.387 cv
cp
340.613 527.238 mo
340.629 526.562 340.477 526.031 340.16 525.648 cv
339.844 525.266 339.375 525.074 338.758 525.07 cv
338.434 525.074 338.152 525.133 337.914 525.25 cv
337.672 525.371 337.473 525.531 337.313 525.727 cv
337.148 525.926 337.023 526.156 336.938 526.418 cv
336.848 526.68 336.797 526.953 336.789 527.238 cv
cp
f
347.973 524.875 mo
347.969 524.992 347.969 525.09 347.965 525.164 cv
347.957 525.246 347.945 525.309 347.934 525.348 cv
347.914 525.395 347.895 525.426 347.875 525.449 cv
347.848 525.473 347.816 525.484 347.777 525.484 cv
347.734 525.484 347.684 525.473 347.625 525.449 cv
347.563 525.426 347.492 525.402 347.422 525.379 cv
347.344 525.355 347.262 525.336 347.168 525.312 cv
347.074 525.297 346.973 525.285 346.863 525.281 cv
346.73 525.285 346.602 525.312 346.48 525.359 cv
346.355 525.414 346.227 525.5 346.09 525.617 cv
345.949 525.742 345.805 525.898 345.656 526.094 cv
345.504 526.289 345.336 526.531 345.156 526.816 cv
345.156 531.43 li
345.152 531.477 345.141 531.512 345.125 531.535 cv
345.102 531.566 345.07 531.59 345.023 531.609 cv
344.977 531.629 344.91 531.641 344.832 531.656 cv
344.746 531.664 344.641 531.672 344.512 531.672 cv
344.383 531.672 344.277 531.664 344.199 531.656 cv
344.113 531.641 344.047 531.629 344 531.609 cv
343.945 531.59 343.914 531.566 343.898 531.535 cv
343.879 531.512 343.867 531.477 343.871 531.43 cv
343.871 524.418 li
343.867 524.379 343.875 524.344 343.895 524.312 cv
343.906 524.285 343.938 524.262 343.988 524.234 cv
344.031 524.215 344.094 524.199 344.168 524.187 cv
344.238 524.184 344.332 524.18 344.457 524.176 cv
344.566 524.18 344.664 524.184 344.742 524.187 cv
344.816 524.199 344.875 524.215 344.918 524.234 cv
344.957 524.262 344.984 524.285 345.004 524.312 cv
345.02 524.344 345.027 524.379 345.031 524.418 cv
345.031 525.437 li
345.219 525.156 345.402 524.93 345.574 524.754 cv
345.742 524.578 345.902 524.437 346.055 524.336 cv
346.203 524.234 346.352 524.164 346.5 524.125 cv
346.648 524.086 346.797 524.066 346.949 524.066 cv
347.016 524.066 347.094 524.07 347.18 524.078 cv
347.266 524.086 347.355 524.102 347.449 524.121 cv
347.543 524.145 347.625 524.168 347.703 524.191 cv
347.773 524.219 347.828 524.246 347.863 524.27 cv
347.891 524.301 347.91 524.324 347.926 524.344 cv
347.934 524.371 347.945 524.402 347.953 524.434 cv
347.961 524.473 347.965 524.523 347.969 524.594 cv
347.969 524.664 347.969 524.758 347.973 524.875 cv
cp
f
359.73 527.844 mo
359.727 528.422 359.652 528.949 359.504 529.426 cv
359.352 529.91 359.125 530.324 358.828 530.668 cv
358.527 531.02 358.152 531.289 357.707 531.48 cv
357.254 531.676 356.734 531.77 356.145 531.773 cv
355.566 531.77 355.063 531.687 354.637 531.516 cv
354.207 531.348 353.852 531.098 353.566 530.77 cv
353.277 530.441 353.063 530.047 352.926 529.578 cv
352.785 529.113 352.719 528.582 352.719 527.984 cv
352.719 527.418 352.789 526.891 352.938 526.41 cv
353.082 525.93 353.309 525.516 353.609 525.164 cv
353.906 524.816 354.277 524.547 354.727 524.355 cv
355.172 524.164 355.695 524.066 356.293 524.066 cv
356.871 524.066 357.371 524.152 357.801 524.324 cv
358.227 524.496 358.586 524.746 358.871 525.074 cv
359.156 525.402 359.371 525.801 359.516 526.266 cv
359.656 526.734 359.727 527.262 359.73 527.844 cv
cp
358.398 527.93 mo
358.395 527.555 358.359 527.195 358.293 526.855 cv
358.219 526.52 358.102 526.227 357.941 525.969 cv
357.777 525.719 357.559 525.516 357.281 525.363 cv
357 525.219 356.652 525.145 356.242 525.141 cv
355.855 525.145 355.527 525.211 355.254 525.344 cv
354.977 525.48 354.75 525.672 354.574 525.918 cv
354.395 526.164 354.262 526.457 354.18 526.793 cv
354.09 527.133 354.047 527.5 354.051 527.898 cv
354.047 528.285 354.082 528.648 354.156 528.984 cv
354.223 529.324 354.34 529.617 354.508 529.867 cv
354.672 530.121 354.895 530.324 355.172 530.469 cv
355.449 530.621 355.797 530.695 356.211 530.691 cv
356.586 530.695 356.914 530.625 357.195 530.488 cv
357.473 530.355 357.699 530.168 357.879 529.918 cv
358.055 529.676 358.184 529.383 358.27 529.047 cv
358.352 528.711 358.395 528.34 358.398 527.93 cv
cp
f
365.461 521.531 mo
365.457 521.633 365.453 521.711 365.445 521.77 cv
365.434 521.832 365.422 521.883 365.41 521.914 cv
365.395 521.953 365.379 521.977 365.359 521.988 cv
365.336 522.004 365.309 522.012 365.281 522.008 cv
365.242 522.012 365.195 522 365.145 521.973 cv
365.086 521.953 365.02 521.926 364.945 521.895 cv
364.863 521.867 364.773 521.84 364.668 521.816 cv
364.559 521.793 364.434 521.781 364.301 521.781 cv
364.105 521.781 363.941 521.812 363.809 521.875 cv
363.668 521.937 363.559 522.035 363.48 522.168 cv
363.395 522.301 363.336 522.473 363.301 522.684 cv
363.262 522.895 363.242 523.152 363.246 523.449 cv
363.246 524.215 li
364.813 524.215 li
364.852 524.219 364.887 524.227 364.918 524.242 cv
364.945 524.262 364.973 524.293 364.996 524.336 cv
365.02 524.383 365.035 524.441 365.051 524.504 cv
365.059 524.574 365.066 524.656 365.07 524.75 cv
365.066 524.941 365.043 525.074 365 525.156 cv
364.949 525.242 364.887 525.285 364.813 525.281 cv
363.246 525.281 li
363.246 531.43 li
363.242 531.477 363.234 531.512 363.215 531.535 cv
363.191 531.566 363.156 531.59 363.109 531.609 cv
363.059 531.629 362.992 531.641 362.91 531.656 cv
362.824 531.664 362.719 531.672 362.602 531.672 cv
362.473 531.672 362.371 531.664 362.289 531.656 cv
362.203 531.641 362.137 531.629 362.09 531.609 cv
362.039 531.59 362.004 531.566 361.984 531.535 cv
361.961 531.512 361.949 531.477 361.953 531.43 cv
361.953 525.281 li
360.965 525.281 li
360.879 525.285 360.816 525.242 360.777 525.156 cv
360.734 525.074 360.711 524.941 360.715 524.75 cv
360.711 524.656 360.719 524.574 360.73 524.504 cv
360.738 524.441 360.754 524.383 360.777 524.336 cv
360.797 524.293 360.82 524.262 360.855 524.242 cv
360.883 524.227 360.922 524.219 360.965 524.215 cv
361.953 524.215 li
361.953 523.488 li
361.949 523.004 361.996 522.586 362.09 522.23 cv
362.18 521.883 362.316 521.594 362.504 521.371 cv
362.688 521.148 362.922 520.984 363.211 520.875 cv
363.492 520.77 363.828 520.715 364.215 520.715 cv
364.391 520.715 364.566 520.734 364.742 520.766 cv
364.91 520.805 365.043 520.84 365.141 520.875 cv
365.23 520.918 365.293 520.953 365.328 520.98 cv
365.355 521.016 365.383 521.055 365.406 521.102 cv
365.426 521.152 365.438 521.215 365.449 521.281 cv
365.453 521.355 365.457 521.437 365.461 521.531 cv
cp
f
375.66 528.797 mo
375.656 529.27 375.57 529.691 375.398 530.059 cv
375.223 530.434 374.98 530.746 374.672 531 cv
374.363 531.258 374 531.449 373.582 531.578 cv
373.16 531.707 372.711 531.77 372.23 531.773 cv
371.891 531.77 371.574 531.742 371.289 531.687 cv
371 531.629 370.746 531.562 370.52 531.477 cv
370.293 531.398 370.102 531.312 369.949 531.219 cv
369.793 531.133 369.688 531.055 369.629 530.992 cv
369.57 530.93 369.527 530.852 369.5 530.758 cv
369.469 530.664 369.453 530.535 369.457 530.371 cv
369.453 530.258 369.457 530.164 369.473 530.086 cv
369.48 530.012 369.496 529.949 369.52 529.902 cv
369.535 529.855 369.563 529.824 369.598 529.805 cv
369.625 529.789 369.66 529.781 369.703 529.777 cv
369.773 529.781 369.875 529.824 370.012 529.91 cv
370.141 530 370.313 530.098 370.523 530.199 cv
370.73 530.309 370.98 530.406 371.273 530.492 cv
371.566 530.586 371.906 530.629 372.293 530.629 cv
372.582 530.629 372.848 530.59 373.09 530.512 cv
373.328 530.434 373.535 530.324 373.715 530.18 cv
373.887 530.039 374.023 529.863 374.117 529.652 cv
374.211 529.445 374.258 529.211 374.258 528.945 cv
374.258 528.664 374.191 528.418 374.063 528.211 cv
373.93 528.012 373.758 527.836 373.547 527.68 cv
373.332 527.531 373.09 527.391 372.816 527.258 cv
372.543 527.133 372.262 527 371.98 526.867 cv
371.691 526.734 371.414 526.59 371.145 526.426 cv
370.875 526.27 370.633 526.078 370.422 525.859 cv
370.203 525.641 370.031 525.387 369.902 525.09 cv
369.766 524.801 369.699 524.449 369.703 524.035 cv
369.699 523.617 369.777 523.242 369.934 522.91 cv
370.086 522.582 370.297 522.305 370.574 522.078 cv
370.844 521.859 371.168 521.687 371.547 521.57 cv
371.922 521.453 372.332 521.395 372.77 521.395 cv
372.988 521.395 373.211 521.414 373.441 521.453 cv
373.664 521.492 373.875 521.543 374.078 521.605 cv
374.273 521.672 374.453 521.746 374.613 521.824 cv
374.766 521.906 374.867 521.973 374.922 522.02 cv
374.969 522.074 375.004 522.113 375.02 522.137 cv
375.035 522.168 375.047 522.203 375.059 522.246 cv
375.066 522.293 375.074 522.348 375.082 522.406 cv
375.086 522.473 375.09 522.551 375.09 522.648 cv
375.09 522.742 375.086 522.828 375.078 522.898 cv
375.07 522.977 375.059 523.035 375.043 523.082 cv
375.027 523.129 375.004 523.164 374.977 523.187 cv
374.945 523.211 374.914 523.223 374.879 523.223 cv
374.82 523.223 374.73 523.187 374.609 523.117 cv
374.484 523.047 374.332 522.965 374.16 522.871 cv
373.98 522.781 373.773 522.699 373.535 522.621 cv
373.289 522.547 373.02 522.508 372.723 522.508 cv
372.441 522.508 372.195 522.547 371.988 522.621 cv
371.777 522.699 371.605 522.801 371.473 522.922 cv
371.336 523.047 371.234 523.191 371.168 523.363 cv
371.102 523.535 371.07 523.719 371.07 523.91 cv
371.07 524.195 371.133 524.437 371.262 524.637 cv
371.391 524.84 371.563 525.02 371.781 525.172 cv
371.992 525.332 372.238 525.473 372.516 525.602 cv
372.789 525.734 373.07 525.867 373.359 525.996 cv
373.645 526.129 373.926 526.273 374.199 526.43 cv
374.473 526.59 374.719 526.777 374.938 526.992 cv
375.152 527.211 375.324 527.465 375.461 527.758 cv
375.59 528.051 375.656 528.398 375.66 528.797 cv
cp
f
383.426 531.43 mo
383.422 531.477 383.414 531.512 383.398 531.535 cv
383.379 531.566 383.344 531.59 383.301 531.609 cv
383.254 531.629 383.195 531.641 383.121 531.656 cv
383.043 531.664 382.949 531.672 382.844 531.672 cv
382.719 531.672 382.621 531.664 382.551 531.656 cv
382.473 531.641 382.414 531.629 382.371 531.609 cv
382.324 531.59 382.293 531.566 382.281 531.535 cv
382.262 531.512 382.254 531.477 382.258 531.43 cv
382.258 530.504 li
381.855 530.949 381.461 531.27 381.074 531.469 cv
380.68 531.672 380.285 531.77 379.891 531.773 cv
379.418 531.77 379.023 531.695 378.707 531.539 cv
378.387 531.387 378.129 531.176 377.934 530.906 cv
377.73 530.641 377.59 530.328 377.508 529.969 cv
377.418 529.613 377.375 529.18 377.379 528.672 cv
377.379 524.418 li
377.375 524.379 377.383 524.344 377.406 524.312 cv
377.422 524.285 377.457 524.262 377.512 524.234 cv
377.559 524.215 377.629 524.199 377.715 524.187 cv
377.797 524.184 377.898 524.18 378.027 524.176 cv
378.148 524.18 378.254 524.184 378.34 524.187 cv
378.422 524.199 378.488 524.215 378.535 524.234 cv
378.582 524.262 378.617 524.285 378.641 524.312 cv
378.66 524.344 378.668 524.379 378.672 524.418 cv
378.672 528.5 li
378.668 528.914 378.699 529.242 378.762 529.488 cv
378.82 529.734 378.91 529.945 379.035 530.117 cv
379.152 530.297 379.309 530.43 379.5 530.523 cv
379.684 530.621 379.902 530.672 380.152 530.668 cv
380.473 530.672 380.793 530.555 381.117 530.324 cv
381.434 530.098 381.773 529.762 382.133 529.316 cv
382.133 524.418 li
382.133 524.379 382.141 524.344 382.16 524.312 cv
382.176 524.285 382.211 524.262 382.266 524.234 cv
382.316 524.215 382.383 524.199 382.465 524.187 cv
382.543 524.184 382.648 524.18 382.781 524.176 cv
382.902 524.18 383.008 524.184 383.094 524.187 cv
383.176 524.199 383.238 524.215 383.285 524.234 cv
383.328 524.262 383.363 524.285 383.391 524.312 cv
383.41 524.344 383.422 524.379 383.426 524.418 cv
cp
f
392.281 527.828 mo
392.277 528.437 392.211 528.988 392.082 529.473 cv
391.945 529.961 391.75 530.375 391.496 530.715 cv
391.238 531.059 390.922 531.32 390.551 531.5 cv
390.176 531.684 389.75 531.77 389.266 531.773 cv
389.039 531.77 388.832 531.75 388.645 531.707 cv
388.457 531.66 388.27 531.59 388.09 531.492 cv
387.902 531.395 387.723 531.27 387.543 531.117 cv
387.359 530.969 387.168 530.789 386.969 530.574 cv
386.969 531.43 li
386.969 531.477 386.957 531.512 386.938 531.539 cv
386.914 531.574 386.879 531.598 386.836 531.613 cv
386.785 531.629 386.727 531.641 386.66 531.656 cv
386.586 531.664 386.496 531.672 386.391 531.672 cv
386.281 531.672 386.195 531.664 386.125 531.656 cv
386.051 531.641 385.988 531.629 385.945 531.613 cv
385.895 531.598 385.863 531.574 385.852 531.539 cv
385.832 531.512 385.824 531.477 385.828 531.43 cv
385.828 521.02 li
385.824 520.98 385.836 520.945 385.855 520.91 cv
385.871 520.883 385.902 520.855 385.957 520.832 cv
386.004 520.812 386.07 520.797 386.156 520.785 cv
386.234 520.777 386.34 520.773 386.469 520.77 cv
386.598 520.773 386.703 520.777 386.789 520.785 cv
386.867 520.797 386.934 520.812 386.98 520.832 cv
387.027 520.855 387.059 520.883 387.082 520.91 cv
387.098 520.945 387.109 520.98 387.113 521.02 cv
387.113 525.219 li
387.32 525.008 387.523 524.828 387.719 524.684 cv
387.914 524.539 388.102 524.422 388.289 524.328 cv
388.473 524.242 388.66 524.176 388.852 524.129 cv
389.035 524.09 389.234 524.066 389.445 524.066 cv
389.949 524.066 390.383 524.168 390.75 524.371 cv
391.109 524.574 391.402 524.848 391.629 525.184 cv
391.852 525.527 392.02 525.926 392.125 526.383 cv
392.227 526.84 392.277 527.32 392.281 527.828 cv
cp
390.949 527.977 mo
390.945 527.621 390.918 527.273 390.867 526.934 cv
390.809 526.598 390.715 526.301 390.578 526.039 cv
390.441 525.781 390.262 525.57 390.039 525.41 cv
389.813 525.254 389.531 525.176 389.199 525.172 cv
389.031 525.176 388.867 525.199 388.707 525.242 cv
388.543 525.293 388.379 525.371 388.211 525.477 cv
388.043 525.59 387.867 525.73 387.691 525.898 cv
387.508 526.074 387.316 526.289 387.113 526.543 cv
387.113 529.34 li
387.469 529.773 387.809 530.105 388.133 530.328 cv
388.457 530.559 388.793 530.672 389.145 530.668 cv
389.465 530.672 389.742 530.594 389.977 530.434 cv
390.203 530.281 390.391 530.074 390.535 529.812 cv
390.68 529.559 390.785 529.27 390.852 528.949 cv
390.914 528.633 390.945 528.309 390.949 527.977 cv
cp
f
397.449 527.691 mo
397.449 527.895 397.426 528.031 397.379 528.109 cv
397.332 528.187 397.262 528.227 397.176 528.227 cv
393.918 528.227 li
393.824 528.227 393.758 528.187 393.711 528.105 cv
393.664 528.027 393.641 527.891 393.641 527.691 cv
393.641 527.496 393.664 527.355 393.711 527.277 cv
393.758 527.199 393.824 527.16 393.918 527.16 cv
397.176 527.16 li
397.215 527.16 397.254 527.168 397.289 527.184 cv
397.32 527.199 397.348 527.23 397.375 527.273 cv
397.395 527.32 397.414 527.375 397.43 527.441 cv
397.441 527.512 397.449 527.598 397.449 527.691 cv
cp
f
400.699 531.422 mo
400.695 531.465 400.688 531.5 400.668 531.531 cv
400.645 531.562 400.605 531.59 400.559 531.605 cv
400.504 531.625 400.438 531.637 400.352 531.652 cv
400.266 531.664 400.156 531.672 400.031 531.672 cv
399.902 531.672 399.797 531.664 399.711 531.652 cv
399.621 531.637 399.551 531.625 399.5 531.605 cv
399.445 531.59 399.41 531.562 399.391 531.531 cv
399.367 531.5 399.355 531.465 399.359 531.422 cv
399.359 521.742 li
399.355 521.703 399.367 521.668 399.395 521.633 cv
399.414 521.605 399.453 521.578 399.512 521.559 cv
399.563 521.543 399.633 521.527 399.723 521.512 cv
399.805 521.5 399.906 521.496 400.031 521.492 cv
400.156 521.496 400.266 521.5 400.352 521.512 cv
400.438 521.527 400.504 521.543 400.559 521.559 cv
400.605 521.578 400.645 521.605 400.668 521.633 cv
400.688 521.668 400.695 521.703 400.699 521.742 cv
cp
f
413.688 531.43 mo
413.684 531.477 413.676 531.512 413.656 531.535 cv
413.633 531.566 413.598 531.59 413.555 531.609 cv
413.504 531.629 413.438 531.641 413.359 531.656 cv
413.273 531.664 413.172 531.672 413.047 531.672 cv
412.914 531.672 412.805 531.664 412.727 531.656 cv
412.641 531.641 412.574 531.629 412.527 531.609 cv
412.473 531.59 412.438 531.566 412.422 531.535 cv
412.398 531.512 412.391 531.477 412.391 531.43 cv
412.391 527.168 li
412.391 526.875 412.363 526.605 412.313 526.359 cv
412.258 526.117 412.176 525.906 412.063 525.727 cv
411.949 525.551 411.805 525.414 411.629 525.32 cv
411.449 525.227 411.238 525.18 411.004 525.18 cv
410.707 525.18 410.41 525.297 410.113 525.523 cv
409.809 525.758 409.48 526.09 409.125 526.527 cv
409.125 531.43 li
409.121 531.477 409.109 531.512 409.094 531.535 cv
409.07 531.566 409.039 531.59 408.992 531.609 cv
408.941 531.629 408.875 531.641 408.793 531.656 cv
408.707 531.664 408.602 531.672 408.48 531.672 cv
408.359 531.672 408.258 531.664 408.172 531.656 cv
408.086 531.641 408.016 531.629 407.969 531.609 cv
407.914 531.59 407.883 531.566 407.867 531.535 cv
407.848 531.512 407.836 531.477 407.84 531.43 cv
407.84 527.168 li
407.836 526.875 407.809 526.605 407.754 526.359 cv
407.695 526.117 407.609 525.906 407.496 525.727 cv
407.383 525.551 407.238 525.414 407.066 525.32 cv
406.887 525.227 406.68 525.18 406.445 525.18 cv
406.145 525.18 405.848 525.297 405.547 525.523 cv
405.246 525.758 404.918 526.09 404.566 526.527 cv
404.566 531.43 li
404.563 531.477 404.551 531.512 404.535 531.535 cv
404.512 531.566 404.48 531.59 404.434 531.609 cv
404.387 531.629 404.32 531.641 404.242 531.656 cv
404.156 531.664 404.051 531.672 403.922 531.672 cv
403.793 531.672 403.688 531.664 403.609 531.656 cv
403.523 531.641 403.457 531.629 403.41 531.609 cv
403.355 531.59 403.324 531.566 403.309 531.535 cv
403.289 531.512 403.277 531.477 403.281 531.43 cv
403.281 524.418 li
403.277 524.379 403.285 524.344 403.305 524.312 cv
403.316 524.285 403.348 524.262 403.398 524.234 cv
403.441 524.215 403.504 524.199 403.578 524.187 cv
403.648 524.184 403.742 524.18 403.867 524.176 cv
403.977 524.18 404.074 524.184 404.152 524.187 cv
404.227 524.199 404.285 524.215 404.328 524.234 cv
404.367 524.262 404.395 524.285 404.414 524.312 cv
404.43 524.344 404.438 524.379 404.441 524.418 cv
404.441 525.344 li
404.832 524.902 405.215 524.582 405.59 524.375 cv
405.957 524.172 406.336 524.066 406.719 524.066 cv
407.008 524.066 407.266 524.102 407.5 524.168 cv
407.727 524.238 407.934 524.332 408.113 524.453 cv
408.289 524.574 408.438 524.719 408.566 524.887 cv
408.688 525.059 408.793 525.25 408.879 525.453 cv
409.109 525.203 409.332 524.988 409.543 524.809 cv
409.754 524.637 409.957 524.492 410.152 524.379 cv
410.348 524.273 410.535 524.195 410.719 524.141 cv
410.902 524.094 411.09 524.066 411.277 524.066 cv
411.73 524.066 412.109 524.148 412.414 524.305 cv
412.719 524.469 412.965 524.68 413.16 524.941 cv
413.348 525.207 413.484 525.516 413.566 525.871 cv
413.645 526.227 413.684 526.602 413.688 526.996 cv
cp
f
421.32 531.437 mo
421.316 531.5 421.297 531.547 421.258 531.578 cv
421.215 531.609 421.156 531.633 421.086 531.648 cv
421.008 531.664 420.902 531.672 420.766 531.672 cv
420.629 531.672 420.52 531.664 420.441 531.648 cv
420.355 531.633 420.297 531.609 420.266 531.578 cv
420.227 531.547 420.211 531.5 420.215 531.437 cv
420.215 530.738 li
419.906 531.066 419.563 531.32 419.188 531.5 cv
418.809 531.684 418.41 531.77 417.992 531.773 cv
417.617 531.77 417.285 531.723 416.988 531.629 cv
416.691 531.531 416.438 531.395 416.227 531.211 cv
416.016 531.031 415.852 530.809 415.734 530.543 cv
415.617 530.281 415.559 529.98 415.563 529.637 cv
415.559 529.246 415.637 528.902 415.801 528.609 cv
415.957 528.32 416.191 528.078 416.496 527.887 cv
416.797 527.695 417.164 527.551 417.602 527.453 cv
418.035 527.359 418.527 527.312 419.074 527.309 cv
420.043 527.309 li
420.043 526.762 li
420.039 526.492 420.012 526.254 419.957 526.047 cv
419.898 525.84 419.805 525.668 419.68 525.527 cv
419.547 525.391 419.383 525.285 419.184 525.215 cv
418.977 525.145 418.727 525.109 418.438 525.109 cv
418.117 525.109 417.832 525.148 417.582 525.223 cv
417.324 525.301 417.105 525.383 416.918 525.473 cv
416.73 525.566 416.57 525.652 416.445 525.723 cv
416.313 525.801 416.219 525.836 416.16 525.836 cv
416.117 525.836 416.082 525.828 416.051 525.805 cv
416.02 525.789 415.992 525.758 415.969 525.711 cv
415.945 525.672 415.926 525.617 415.918 525.551 cv
415.902 525.488 415.898 525.418 415.902 525.336 cv
415.898 525.211 415.906 525.105 415.93 525.027 cv
415.945 524.953 415.992 524.883 416.063 524.812 cv
416.133 524.746 416.254 524.668 416.426 524.578 cv
416.598 524.488 416.793 524.406 417.016 524.328 cv
417.238 524.258 417.484 524.195 417.75 524.141 cv
418.016 524.094 418.281 524.066 418.555 524.066 cv
419.055 524.066 419.484 524.125 419.836 524.238 cv
420.188 524.355 420.473 524.523 420.695 524.742 cv
420.91 524.965 421.07 525.238 421.172 525.562 cv
421.27 525.895 421.316 526.277 421.32 526.707 cv
cp
420.043 528.234 mo
418.941 528.234 li
418.586 528.238 418.281 528.27 418.023 528.324 cv
417.762 528.387 417.547 528.473 417.375 528.59 cv
417.203 528.707 417.078 528.848 417 529.012 cv
416.918 529.176 416.875 529.363 416.879 529.574 cv
416.875 529.941 416.992 530.234 417.223 530.445 cv
417.453 530.664 417.777 530.77 418.195 530.77 cv
418.531 530.77 418.844 530.684 419.133 530.512 cv
419.422 530.34 419.723 530.078 420.043 529.723 cv
cp
f
429.539 524.734 mo
429.535 524.918 429.512 525.051 429.465 525.129 cv
429.414 525.211 429.352 525.25 429.277 525.25 cv
428.27 525.25 li
428.449 525.437 428.578 525.645 428.652 525.871 cv
428.723 526.098 428.758 526.332 428.762 526.574 cv
428.758 526.98 428.691 527.34 428.566 527.652 cv
428.434 527.965 428.25 528.23 428.008 528.441 cv
427.766 528.66 427.477 528.824 427.148 528.937 cv
426.813 529.055 426.445 529.113 426.043 529.109 cv
425.754 529.113 425.48 529.074 425.227 528.996 cv
424.965 528.922 424.77 528.828 424.633 528.711 cv
424.539 528.809 424.461 528.914 424.402 529.031 cv
424.34 529.152 424.309 529.289 424.313 529.441 cv
424.309 529.625 424.395 529.777 424.566 529.895 cv
424.734 530.02 424.957 530.082 425.238 530.09 cv
427.07 530.168 li
427.418 530.18 427.734 530.227 428.027 530.312 cv
428.316 530.398 428.57 530.523 428.785 530.68 cv
428.996 530.84 429.164 531.031 429.285 531.262 cv
429.402 531.496 429.461 531.766 429.465 532.07 cv
429.461 532.391 429.395 532.695 429.262 532.988 cv
429.125 533.277 428.918 533.531 428.641 533.754 cv
428.359 533.973 428.004 534.148 427.574 534.277 cv
427.145 534.402 426.637 534.465 426.051 534.469 cv
425.48 534.465 424.996 534.418 424.602 534.324 cv
424.203 534.227 423.879 534.094 423.625 533.93 cv
423.371 533.762 423.188 533.566 423.074 533.336 cv
422.957 533.102 422.898 532.848 422.902 532.582 cv
422.898 532.41 422.918 532.246 422.965 532.086 cv
423.004 531.922 423.066 531.77 423.152 531.625 cv
423.234 531.48 423.344 531.344 423.473 531.207 cv
423.598 531.078 423.742 530.945 423.914 530.816 cv
423.656 530.687 423.469 530.523 423.348 530.324 cv
423.227 530.129 423.168 529.918 423.168 529.684 cv
423.168 529.371 423.23 529.086 423.359 528.836 cv
423.488 528.586 423.648 528.363 423.844 528.164 cv
423.68 527.973 423.555 527.758 423.461 527.516 cv
423.367 527.277 423.32 526.984 423.32 526.637 cv
423.32 526.242 423.387 525.883 423.523 525.562 cv
423.656 525.246 423.844 524.98 424.086 524.762 cv
424.324 524.547 424.609 524.379 424.945 524.258 cv
425.277 524.145 425.645 524.086 426.043 524.082 cv
426.254 524.086 426.453 524.098 426.637 524.117 cv
426.82 524.145 426.992 524.176 427.156 524.215 cv
429.277 524.215 li
429.363 524.219 429.43 524.262 429.473 524.344 cv
429.516 524.434 429.535 524.562 429.539 524.734 cv
cp
427.531 526.582 mo
427.527 526.109 427.395 525.738 427.137 525.465 cv
426.871 525.199 426.5 525.062 426.02 525.062 cv
425.766 525.062 425.547 525.105 425.367 525.187 cv
425.18 525.273 425.027 525.387 424.906 525.531 cv
424.785 525.68 424.695 525.848 424.637 526.035 cv
424.574 526.223 424.543 526.422 424.547 526.629 cv
424.543 527.094 424.676 527.457 424.938 527.723 cv
425.199 527.988 425.566 528.121 426.043 528.117 cv
426.293 528.121 426.512 528.082 426.703 527.996 cv
426.887 527.918 427.043 527.805 427.168 527.664 cv
427.289 527.523 427.379 527.359 427.441 527.168 cv
427.496 526.984 427.527 526.789 427.531 526.582 cv
cp
428.176 532.141 mo
428.172 531.836 428.047 531.605 427.805 531.441 cv
427.555 531.281 427.223 531.191 426.805 531.18 cv
424.988 531.117 li
424.82 531.25 424.684 531.375 424.582 531.488 cv
424.473 531.605 424.391 531.715 424.328 531.824 cv
424.266 531.93 424.223 532.035 424.199 532.141 cv
424.176 532.242 424.164 532.348 424.164 532.457 cv
424.164 532.793 424.332 533.047 424.676 533.227 cv
425.016 533.398 425.496 533.488 426.113 533.488 cv
426.5 533.488 426.824 533.449 427.09 533.375 cv
427.348 533.297 427.559 533.195 427.723 533.074 cv
427.879 532.945 427.996 532.805 428.07 532.645 cv
428.137 532.484 428.172 532.316 428.176 532.141 cv
cp
f
437.102 527.621 mo
437.098 527.824 437.047 527.965 436.949 528.051 cv
436.844 528.137 436.727 528.18 436.602 528.18 cv
431.984 528.18 li
431.98 528.57 432.02 528.922 432.102 529.234 cv
432.176 529.547 432.309 529.816 432.492 530.035 cv
432.672 530.262 432.906 530.434 433.203 530.551 cv
433.492 530.676 433.852 530.734 434.277 530.73 cv
434.609 530.734 434.906 530.707 435.168 530.648 cv
435.43 530.598 435.656 530.535 435.848 530.465 cv
436.035 530.398 436.191 530.34 436.316 530.281 cv
436.438 530.23 436.531 530.203 436.594 530.199 cv
436.629 530.203 436.66 530.211 436.691 530.227 cv
436.719 530.246 436.742 530.273 436.762 530.309 cv
436.773 530.348 436.785 530.398 436.797 530.461 cv
436.801 530.527 436.805 530.605 436.809 530.699 cv
436.805 530.77 436.801 530.828 436.801 530.875 cv
436.793 530.922 436.789 530.965 436.781 531.004 cv
436.773 531.043 436.758 531.078 436.742 531.109 cv
436.719 531.141 436.695 531.172 436.672 531.199 cv
436.641 531.23 436.559 531.277 436.418 531.34 cv
436.277 531.406 436.094 531.469 435.871 531.531 cv
435.645 531.594 435.387 531.648 435.094 531.699 cv
434.801 531.746 434.488 531.77 434.156 531.773 cv
433.578 531.77 433.07 531.691 432.641 531.531 cv
432.203 531.371 431.84 531.133 431.547 530.816 cv
431.246 530.5 431.023 530.105 430.875 529.625 cv
430.727 529.148 430.652 528.59 430.652 527.953 cv
430.652 527.355 430.727 526.816 430.883 526.332 cv
431.035 525.855 431.262 525.445 431.559 525.109 cv
431.852 524.773 432.207 524.516 432.621 524.336 cv
433.035 524.156 433.5 524.066 434.016 524.066 cv
434.566 524.066 435.035 524.156 435.422 524.332 cv
435.809 524.512 436.125 524.75 436.379 525.047 cv
436.625 525.348 436.809 525.699 436.926 526.098 cv
437.039 526.504 437.098 526.934 437.102 527.387 cv
cp
435.809 527.238 mo
435.824 526.562 435.672 526.031 435.355 525.648 cv
435.039 525.266 434.57 525.074 433.953 525.07 cv
433.629 525.074 433.348 525.133 433.109 525.25 cv
432.867 525.371 432.668 525.531 432.508 525.727 cv
432.344 525.926 432.219 526.156 432.133 526.418 cv
432.043 526.68 431.992 526.953 431.984 527.238 cv
cp
f
443.465 529.52 mo
443.461 529.883 443.395 530.203 443.266 530.48 cv
443.133 530.762 442.945 530.996 442.703 531.187 cv
442.457 531.383 442.164 531.527 441.828 531.625 cv
441.488 531.723 441.117 531.77 440.715 531.773 cv
440.461 531.77 440.223 531.75 440 531.715 cv
439.773 531.672 439.574 531.625 439.395 531.566 cv
439.215 531.508 439.063 531.445 438.938 531.379 cv
438.813 531.316 438.719 531.258 438.664 531.203 cv
438.605 531.152 438.566 531.082 438.543 530.984 cv
438.516 530.895 438.504 530.766 438.504 530.605 cv
438.504 530.508 438.508 530.426 438.52 530.355 cv
438.527 530.289 438.539 530.234 438.559 530.191 cv
438.57 530.152 438.594 530.121 438.621 530.102 cv
438.648 530.086 438.68 530.078 438.719 530.074 cv
438.773 530.078 438.859 530.113 438.973 530.18 cv
439.082 530.254 439.219 530.332 439.387 530.41 cv
439.547 530.496 439.738 530.57 439.965 530.641 cv
440.184 530.711 440.441 530.746 440.738 530.746 cv
440.953 530.746 441.152 530.723 441.332 530.676 cv
441.508 530.629 441.66 530.562 441.789 530.469 cv
441.918 530.383 442.02 530.266 442.09 530.121 cv
442.16 529.984 442.195 529.816 442.195 529.621 cv
442.195 529.426 442.145 529.262 442.043 529.125 cv
441.941 528.992 441.805 528.871 441.641 528.766 cv
441.473 528.664 441.289 528.574 441.082 528.488 cv
440.871 528.41 440.656 528.324 440.438 528.234 cv
440.219 528.148 440.004 528.047 439.793 527.934 cv
439.582 527.824 439.391 527.691 439.227 527.527 cv
439.055 527.371 438.922 527.176 438.824 526.949 cv
438.719 526.727 438.668 526.461 438.672 526.148 cv
438.668 525.875 438.723 525.609 438.832 525.355 cv
438.938 525.105 439.098 524.887 439.313 524.695 cv
439.523 524.508 439.789 524.355 440.109 524.238 cv
440.43 524.125 440.801 524.066 441.23 524.066 cv
441.414 524.066 441.602 524.082 441.789 524.113 cv
441.973 524.145 442.141 524.184 442.297 524.23 cv
442.445 524.277 442.574 524.328 442.684 524.383 cv
442.785 524.437 442.867 524.488 442.926 524.527 cv
442.977 524.574 443.012 524.609 443.035 524.637 cv
443.051 524.668 443.066 524.703 443.074 524.738 cv
443.082 524.781 443.09 524.828 443.098 524.883 cv
443.105 524.941 443.109 525.012 443.109 525.094 cv
443.109 525.184 443.105 525.262 443.098 525.324 cv
443.09 525.395 443.074 525.445 443.059 525.484 cv
443.035 525.527 443.016 525.559 442.992 525.574 cv
442.965 525.594 442.934 525.602 442.906 525.602 cv
442.855 525.602 442.789 525.574 442.703 525.516 cv
442.613 525.461 442.5 525.398 442.359 525.332 cv
442.219 525.27 442.051 525.211 441.863 525.148 cv
441.672 525.094 441.457 525.062 441.215 525.062 cv
440.992 525.062 440.801 525.09 440.637 525.137 cv
440.469 525.191 440.332 525.262 440.227 525.348 cv
440.121 525.441 440.039 525.547 439.988 525.672 cv
439.93 525.797 439.902 525.934 439.906 526.078 cv
439.902 526.281 439.953 526.449 440.059 526.586 cv
440.16 526.727 440.297 526.848 440.465 526.949 cv
440.629 527.055 440.82 527.148 441.035 527.23 cv
441.246 527.316 441.461 527.402 441.684 527.488 cv
441.902 527.578 442.121 527.68 442.34 527.785 cv
442.555 527.895 442.746 528.023 442.914 528.18 cv
443.078 528.336 443.211 528.523 443.313 528.742 cv
443.41 528.961 443.461 529.223 443.465 529.52 cv
cp
f
194.738 15.984 mo
194.797 16.176 194.836 16.324 194.855 16.43 cv
194.867 16.543 194.848 16.625 194.793 16.676 cv
194.734 16.73 194.633 16.762 194.488 16.777 cv
194.34 16.789 194.141 16.797 193.891 16.797 cv
193.621 16.797 193.414 16.793 193.27 16.785 cv
193.117 16.777 193.004 16.762 192.93 16.738 cv
192.848 16.715 192.793 16.684 192.766 16.641 cv
192.73 16.602 192.703 16.547 192.688 16.477 cv
192.012 14.449 li
188.223 14.449 li
187.586 16.422 li
187.563 16.496 187.535 16.559 187.504 16.605 cv
187.469 16.656 187.414 16.695 187.34 16.723 cv
187.262 16.75 187.156 16.766 187.02 16.781 cv
186.879 16.789 186.695 16.797 186.477 16.797 cv
186.234 16.797 186.051 16.789 185.918 16.773 cv
185.781 16.758 185.688 16.723 185.637 16.66 cv
185.582 16.605 185.563 16.52 185.582 16.406 cv
185.594 16.301 185.633 16.156 185.699 15.969 cv
188.809 7.02301 li
188.836 6.93701 188.875 6.867 188.918 6.80902 cv
188.957 6.758 189.023 6.71503 189.117 6.68402 cv
189.207 6.65601 189.332 6.64099 189.492 6.62903 cv
189.652 6.625 189.863 6.62097 190.133 6.617 cv
190.438 6.62097 190.684 6.625 190.863 6.62903 cv
191.043 6.64099 191.184 6.65601 191.289 6.68402 cv
191.387 6.71503 191.461 6.758 191.508 6.81201 cv
191.551 6.87097 191.586 6.94897 191.621 7.047 cv
cp
190.109 8.59003 mo
190.102 8.59003 li
188.676 12.875 li
191.535 12.875 li
cp
f
202.113 9.52698 mo
202.109 9.55499 202.109 9.586 202.109 9.62097 cv
202.105 9.65997 202.102 9.69897 202.094 9.742 cv
202.086 9.78497 202.074 9.836 202.063 9.89099 cv
202.047 9.94897 202.031 10.016 202.012 10.086 cv
199.926 16.375 li
199.898 16.465 199.863 16.539 199.82 16.59 cv
199.773 16.648 199.699 16.691 199.602 16.719 cv
199.496 16.75 199.359 16.766 199.188 16.781 cv
199.012 16.789 198.785 16.797 198.508 16.797 cv
198.23 16.797 198.004 16.789 197.832 16.777 cv
197.656 16.762 197.52 16.742 197.422 16.711 cv
197.32 16.684 197.25 16.641 197.207 16.582 cv
197.16 16.531 197.125 16.461 197.102 16.375 cv
195.016 10.086 li
194.984 9.98401 194.957 9.89099 194.941 9.80902 cv
194.918 9.72699 194.91 9.66803 194.91 9.62903 cv
194.906 9.59802 194.902 9.56201 194.906 9.52698 cv
194.902 9.47699 194.918 9.42999 194.949 9.39099 cv
194.977 9.35199 195.027 9.32001 195.102 9.29303 cv
195.172 9.27002 195.27 9.25 195.398 9.23798 cv
195.523 9.22998 195.684 9.22699 195.879 9.22302 cv
196.09 9.22699 196.262 9.23401 196.395 9.242 cv
196.52 9.258 196.625 9.27301 196.703 9.297 cv
196.777 9.32001 196.828 9.35498 196.863 9.39801 cv
196.891 9.44501 196.918 9.5 196.941 9.55902 cv
198.523 14.66 li
198.57 14.855 li
198.617 14.66 li
200.176 9.55902 li
200.188 9.5 200.211 9.44501 200.246 9.39801 cv
200.277 9.35498 200.332 9.32001 200.406 9.297 cv
200.477 9.27301 200.574 9.258 200.699 9.242 cv
200.82 9.23401 200.98 9.22699 201.18 9.22302 cv
201.371 9.22699 201.527 9.22998 201.648 9.23798 cv
201.77 9.25 201.863 9.27002 201.934 9.29303 cv
202 9.32001 202.047 9.35199 202.074 9.39099 cv
202.098 9.42999 202.109 9.47699 202.113 9.52698 cv
cp
f
209.57 12.809 mo
209.566 13.047 209.516 13.223 209.41 13.336 cv
209.301 13.453 209.152 13.512 208.973 13.508 cv
204.738 13.508 li
204.734 13.809 204.77 14.078 204.844 14.316 cv
204.91 14.559 205.023 14.762 205.18 14.93 cv
205.332 15.102 205.527 15.23 205.77 15.316 cv
206.008 15.406 206.297 15.449 206.641 15.449 cv
206.98 15.449 207.281 15.426 207.543 15.375 cv
207.801 15.328 208.027 15.273 208.219 15.211 cv
208.406 15.152 208.563 15.098 208.691 15.047 cv
208.813 15 208.914 14.977 208.996 14.973 cv
209.039 14.977 209.078 14.984 209.113 15 cv
209.141 15.02 209.168 15.051 209.188 15.098 cv
209.207 15.145 209.219 15.211 209.23 15.297 cv
209.234 15.383 209.238 15.492 209.242 15.621 cv
209.238 15.738 209.238 15.836 209.234 15.914 cv
209.227 15.996 209.219 16.062 209.211 16.117 cv
209.199 16.176 209.184 16.227 209.164 16.262 cv
209.145 16.305 209.117 16.34 209.086 16.375 cv
209.051 16.414 208.957 16.465 208.809 16.523 cv
208.652 16.59 208.461 16.652 208.23 16.707 cv
207.992 16.77 207.723 16.816 207.426 16.863 cv
207.121 16.902 206.801 16.926 206.461 16.93 cv
205.84 16.926 205.297 16.852 204.836 16.695 cv
204.367 16.543 203.98 16.305 203.672 15.988 cv
203.355 15.672 203.121 15.273 202.973 14.789 cv
202.816 14.309 202.742 13.742 202.746 13.086 cv
202.742 12.473 202.82 11.914 202.984 11.418 cv
203.141 10.922 203.375 10.504 203.688 10.156 cv
203.992 9.81201 204.367 9.547 204.805 9.36298 cv
205.242 9.18402 205.734 9.09399 206.289 9.09003 cv
206.867 9.09399 207.367 9.17999 207.781 9.34802 cv
208.195 9.52301 208.531 9.76202 208.797 10.062 cv
209.059 10.367 209.254 10.727 209.383 11.141 cv
209.504 11.559 209.566 12.008 209.57 12.496 cv
cp
207.668 12.246 mo
207.68 11.695 207.57 11.262 207.336 10.949 cv
207.102 10.637 206.734 10.48 206.242 10.477 cv
205.992 10.48 205.777 10.527 205.594 10.617 cv
205.406 10.715 205.254 10.84 205.133 10.996 cv
205.008 11.156 204.914 11.344 204.852 11.559 cv
204.785 11.773 204.746 12.004 204.738 12.246 cv
cp
f
215.648 10.18 mo
215.648 10.371 215.641 10.523 215.633 10.641 cv
215.617 10.762 215.602 10.855 215.586 10.922 cv
215.563 10.992 215.535 11.039 215.504 11.062 cv
215.465 11.09 215.422 11.102 215.375 11.102 cv
215.328 11.102 215.281 11.094 215.234 11.074 cv
215.18 11.059 215.121 11.039 215.059 11.016 cv
214.988 10.996 214.918 10.977 214.844 10.957 cv
214.762 10.941 214.676 10.934 214.586 10.93 cv
214.473 10.934 214.363 10.953 214.258 10.996 cv
214.148 11.043 214.035 11.113 213.922 11.203 cv
213.801 11.297 213.68 11.422 213.555 11.574 cv
213.426 11.734 213.289 11.926 213.145 12.152 cv
213.145 16.484 li
213.141 16.539 213.125 16.582 213.098 16.621 cv
213.063 16.66 213.008 16.695 212.938 16.719 cv
212.859 16.746 212.762 16.762 212.637 16.777 cv
212.512 16.789 212.352 16.797 212.164 16.797 cv
211.969 16.797 211.813 16.789 211.688 16.777 cv
211.563 16.762 211.461 16.746 211.387 16.719 cv
211.309 16.695 211.254 16.66 211.227 16.621 cv
211.191 16.582 211.176 16.539 211.18 16.484 cv
211.18 9.53497 li
211.176 9.48798 211.191 9.44098 211.219 9.39801 cv
211.242 9.36298 211.289 9.33197 211.359 9.30103 cv
211.426 9.27698 211.512 9.258 211.621 9.242 cv
211.727 9.23401 211.859 9.22699 212.023 9.22302 cv
212.188 9.22699 212.324 9.23401 212.434 9.242 cv
212.539 9.258 212.625 9.27698 212.688 9.30103 cv
212.746 9.33197 212.789 9.36298 212.816 9.39801 cv
212.84 9.44098 212.852 9.48798 212.855 9.53497 cv
212.855 10.398 li
213.035 10.141 213.207 9.92999 213.371 9.758 cv
213.527 9.59399 213.684 9.45697 213.832 9.35498 cv
213.977 9.258 214.121 9.19098 214.266 9.14801 cv
214.41 9.11298 214.555 9.09399 214.703 9.09003 cv
214.77 9.09399 214.844 9.09802 214.922 9.10199 cv
215 9.11298 215.078 9.125 215.164 9.14099 cv
215.242 9.15997 215.316 9.17999 215.383 9.203 cv
215.441 9.22699 215.488 9.25403 215.52 9.27698 cv
215.547 9.30902 215.566 9.336 215.582 9.36298 cv
215.594 9.39801 215.605 9.44098 215.617 9.492 cv
215.625 9.55103 215.633 9.633 215.641 9.73798 cv
215.645 9.84802 215.648 9.99597 215.648 10.18 cv
cp
f
222.402 16.508 mo
222.398 16.586 222.371 16.641 222.324 16.68 cv
222.27 16.723 222.188 16.75 222.078 16.77 cv
221.961 16.785 221.797 16.797 221.582 16.797 cv
221.344 16.797 221.172 16.785 221.07 16.77 cv
220.961 16.75 220.887 16.723 220.848 16.68 cv
220.801 16.641 220.781 16.586 220.781 16.508 cv
220.781 15.957 li
220.492 16.266 220.164 16.504 219.801 16.672 cv
219.434 16.844 219.027 16.926 218.582 16.93 cv
218.211 16.926 217.871 16.879 217.563 16.785 cv
217.254 16.691 216.988 16.551 216.762 16.355 cv
216.535 16.168 216.359 15.934 216.234 15.652 cv
216.109 15.375 216.047 15.047 216.051 14.668 cv
216.047 14.27 216.125 13.918 216.285 13.613 cv
216.441 13.316 216.68 13.07 216.996 12.875 cv
217.309 12.684 217.699 12.539 218.168 12.441 cv
218.637 12.352 219.18 12.305 219.797 12.301 cv
220.477 12.301 li
220.477 11.879 li
220.477 11.664 220.453 11.473 220.41 11.309 cv
220.363 11.148 220.289 11.012 220.191 10.898 cv
220.086 10.793 219.953 10.711 219.785 10.656 cv
219.613 10.605 219.402 10.582 219.16 10.578 cv
218.828 10.582 218.535 10.617 218.281 10.687 cv
218.02 10.762 217.793 10.844 217.598 10.93 cv
217.398 11.023 217.234 11.102 217.105 11.172 cv
216.969 11.246 216.859 11.285 216.781 11.281 cv
216.719 11.285 216.668 11.266 216.629 11.227 cv
216.582 11.191 216.547 11.141 216.52 11.07 cv
216.488 11.008 216.465 10.922 216.453 10.82 cv
216.434 10.723 216.426 10.613 216.43 10.492 cv
216.426 10.332 216.441 10.207 216.469 10.109 cv
216.492 10.02 216.539 9.93402 216.617 9.85498 cv
216.688 9.78101 216.816 9.69897 217 9.60901 cv
217.18 9.52002 217.391 9.43402 217.637 9.35498 cv
217.879 9.27698 218.148 9.21503 218.438 9.164 cv
218.727 9.117 219.023 9.09399 219.332 9.09003 cv
219.875 9.09399 220.34 9.14502 220.727 9.25 cv
221.113 9.35901 221.434 9.52301 221.684 9.742 cv
221.934 9.961 222.113 10.246 222.23 10.594 cv
222.34 10.945 222.398 11.359 222.402 11.832 cv
cp
220.477 13.531 mo
219.727 13.531 li
219.41 13.535 219.141 13.559 218.918 13.602 cv
218.691 13.652 218.508 13.723 218.371 13.812 cv
218.227 13.91 218.125 14.023 218.063 14.152 cv
217.996 14.289 217.961 14.437 217.965 14.605 cv
217.961 14.898 218.055 15.129 218.242 15.293 cv
218.426 15.461 218.684 15.543 219.012 15.543 cv
219.285 15.543 219.535 15.473 219.77 15.332 cv
219.996 15.191 220.234 14.988 220.477 14.715 cv
cp
f
230.625 10.016 mo
230.621 10.27 230.594 10.453 230.539 10.57 cv
230.48 10.691 230.41 10.75 230.332 10.75 cv
229.512 10.75 li
229.625 10.875 229.707 11.02 229.758 11.176 cv
229.805 11.336 229.828 11.5 229.832 11.668 cv
229.828 12.078 229.762 12.437 229.629 12.75 cv
229.492 13.066 229.297 13.332 229.047 13.543 cv
228.793 13.762 228.492 13.926 228.137 14.035 cv
227.777 14.152 227.379 14.207 226.949 14.203 cv
226.723 14.207 226.512 14.18 226.309 14.121 cv
226.105 14.07 225.949 14.008 225.84 13.93 cv
225.777 14 225.719 14.078 225.672 14.172 cv
225.621 14.266 225.598 14.371 225.602 14.48 cv
225.598 14.637 225.664 14.758 225.797 14.852 cv
225.926 14.949 226.113 15.004 226.355 15.012 cv
228.047 15.074 li
228.441 15.09 228.793 15.148 229.102 15.242 cv
229.41 15.344 229.672 15.477 229.883 15.648 cv
230.094 15.824 230.254 16.035 230.363 16.277 cv
230.473 16.523 230.527 16.797 230.531 17.109 cv
230.527 17.445 230.453 17.77 230.305 18.078 cv
230.156 18.379 229.93 18.641 229.629 18.867 cv
229.324 19.086 228.945 19.266 228.492 19.398 cv
228.035 19.527 227.504 19.59 226.902 19.594 cv
226.305 19.59 225.801 19.543 225.383 19.453 cv
224.965 19.355 224.621 19.227 224.355 19.062 cv
224.086 18.895 223.891 18.695 223.773 18.469 cv
223.648 18.234 223.59 17.98 223.59 17.707 cv
223.59 17.535 223.609 17.375 223.656 17.219 cv
223.695 17.062 223.762 16.91 223.852 16.77 cv
223.934 16.625 224.039 16.492 224.164 16.359 cv
224.289 16.23 224.43 16.105 224.594 15.984 cv
224.367 15.871 224.195 15.711 224.074 15.5 cv
223.953 15.297 223.895 15.07 223.895 14.824 cv
223.895 14.523 223.961 14.246 224.102 13.988 cv
224.238 13.738 224.422 13.508 224.648 13.305 cv
224.465 13.125 224.32 12.91 224.211 12.652 cv
224.102 12.402 224.047 12.082 224.051 11.699 cv
224.047 11.297 224.117 10.937 224.262 10.613 cv
224.402 10.297 224.602 10.027 224.859 9.80499 cv
225.113 9.586 225.418 9.414 225.77 9.297 cv
226.121 9.17999 226.512 9.12097 226.941 9.12097 cv
227.16 9.12097 227.367 9.13702 227.566 9.15997 cv
227.766 9.19098 227.953 9.22699 228.125 9.27002 cv
230.332 9.27002 li
230.414 9.27301 230.484 9.33197 230.543 9.44098 cv
230.594 9.55902 230.621 9.75 230.625 10.016 cv
cp
228.109 11.66 mo
228.105 11.289 228.004 11 227.797 10.789 cv
227.586 10.586 227.293 10.48 226.918 10.477 cv
226.723 10.48 226.551 10.512 226.41 10.574 cv
226.262 10.641 226.141 10.73 226.047 10.84 cv
225.945 10.953 225.875 11.082 225.832 11.23 cv
225.781 11.379 225.758 11.535 225.762 11.691 cv
225.758 12.051 225.863 12.328 226.074 12.531 cv
226.281 12.738 226.57 12.844 226.941 12.84 cv
227.137 12.844 227.305 12.812 227.453 12.746 cv
227.594 12.687 227.715 12.602 227.816 12.488 cv
227.91 12.383 227.984 12.254 228.035 12.109 cv
228.082 11.969 228.105 11.82 228.109 11.66 cv
cp
228.57 17.211 mo
228.57 16.973 228.477 16.797 228.289 16.672 cv
228.102 16.551 227.844 16.48 227.516 16.469 cv
226.121 16.43 li
225.984 16.531 225.875 16.625 225.797 16.715 cv
225.715 16.805 225.652 16.891 225.605 16.977 cv
225.555 17.059 225.52 17.141 225.508 17.219 cv
225.488 17.297 225.48 17.375 225.484 17.461 cv
225.48 17.715 225.613 17.914 225.875 18.051 cv
226.137 18.184 226.508 18.25 226.988 18.254 cv
227.281 18.25 227.527 18.219 227.734 18.164 cv
227.934 18.102 228.098 18.023 228.227 17.926 cv
228.348 17.824 228.438 17.715 228.492 17.594 cv
228.543 17.473 228.57 17.344 228.57 17.211 cv
cp
f
238.254 12.809 mo
238.25 13.047 238.199 13.223 238.094 13.336 cv
237.984 13.453 237.836 13.512 237.656 13.508 cv
233.422 13.508 li
233.418 13.809 233.453 14.078 233.527 14.316 cv
233.594 14.559 233.707 14.762 233.863 14.93 cv
234.016 15.102 234.211 15.23 234.453 15.316 cv
234.691 15.406 234.98 15.449 235.324 15.449 cv
235.664 15.449 235.965 15.426 236.227 15.375 cv
236.484 15.328 236.711 15.273 236.902 15.211 cv
237.09 15.152 237.246 15.098 237.375 15.047 cv
237.496 15 237.598 14.977 237.68 14.973 cv
237.723 14.977 237.762 14.984 237.797 15 cv
237.824 15.02 237.852 15.051 237.871 15.098 cv
237.891 15.145 237.902 15.211 237.914 15.297 cv
237.918 15.383 237.922 15.492 237.926 15.621 cv
237.922 15.738 237.922 15.836 237.918 15.914 cv
237.91 15.996 237.902 16.062 237.895 16.117 cv
237.883 16.176 237.867 16.227 237.848 16.262 cv
237.828 16.305 237.801 16.34 237.77 16.375 cv
237.734 16.414 237.641 16.465 237.492 16.523 cv
237.336 16.59 237.145 16.652 236.914 16.707 cv
236.676 16.77 236.406 16.816 236.109 16.863 cv
235.805 16.902 235.484 16.926 235.145 16.93 cv
234.523 16.926 233.98 16.852 233.52 16.695 cv
233.051 16.543 232.664 16.305 232.355 15.988 cv
232.039 15.672 231.805 15.273 231.656 14.789 cv
231.5 14.309 231.426 13.742 231.43 13.086 cv
231.426 12.473 231.504 11.914 231.668 11.418 cv
231.824 10.922 232.059 10.504 232.371 10.156 cv
232.676 9.81201 233.051 9.547 233.488 9.36298 cv
233.926 9.18402 234.418 9.09399 234.973 9.09003 cv
235.551 9.09399 236.051 9.17999 236.465 9.34802 cv
236.879 9.52301 237.215 9.76202 237.48 10.062 cv
237.742 10.367 237.938 10.727 238.066 11.141 cv
238.188 11.559 238.25 12.008 238.254 12.496 cv
cp
236.352 12.246 mo
236.363 11.695 236.254 11.262 236.02 10.949 cv
235.785 10.637 235.418 10.48 234.926 10.477 cv
234.676 10.48 234.461 10.527 234.277 10.617 cv
234.09 10.715 233.938 10.84 233.816 10.996 cv
233.691 11.156 233.598 11.344 233.535 11.559 cv
233.469 11.773 233.43 12.004 233.422 12.246 cv
cp
f
249.242 7.508 mo
249.238 7.66803 249.234 7.797 249.223 7.90198 cv
249.207 8.01202 249.184 8.09802 249.16 8.15601 cv
249.129 8.21899 249.098 8.26599 249.063 8.29303 cv
249.023 8.328 248.98 8.34399 248.938 8.34003 cv
245.641 8.34003 li
245.641 11.055 li
248.734 11.055 li
248.777 11.055 248.82 11.07 248.859 11.094 cv
248.895 11.125 248.926 11.168 248.957 11.227 cv
248.984 11.289 249.004 11.371 249.02 11.473 cv
249.027 11.578 249.035 11.707 249.039 11.863 cv
249.035 12.02 249.027 12.152 249.02 12.254 cv
249.004 12.363 248.984 12.449 248.957 12.512 cv
248.926 12.582 248.895 12.629 248.859 12.656 cv
248.82 12.687 248.777 12.703 248.734 12.699 cv
245.641 12.699 li
245.641 16.453 li
245.637 16.512 245.621 16.562 245.594 16.602 cv
245.559 16.648 245.504 16.684 245.426 16.707 cv
245.344 16.738 245.238 16.758 245.109 16.773 cv
244.977 16.789 244.809 16.797 244.613 16.797 cv
244.41 16.797 244.246 16.789 244.117 16.773 cv
243.98 16.758 243.875 16.738 243.801 16.707 cv
243.719 16.684 243.664 16.648 243.633 16.602 cv
243.598 16.562 243.578 16.512 243.582 16.453 cv
243.582 7.31201 li
243.578 7.086 243.637 6.922 243.758 6.81598 cv
243.871 6.71899 244.016 6.66803 244.191 6.664 cv
248.938 6.664 li
248.98 6.66803 249.023 6.67999 249.063 6.70697 cv
249.098 6.73798 249.129 6.78497 249.16 6.84802 cv
249.184 6.914 249.207 7.00403 249.223 7.10901 cv
249.234 7.22302 249.238 7.35498 249.242 7.508 cv
cp
f
252.754 16.484 mo
252.75 16.539 252.734 16.582 252.707 16.621 cv
252.672 16.66 252.617 16.695 252.547 16.719 cv
252.469 16.746 252.371 16.762 252.246 16.777 cv
252.121 16.789 251.961 16.797 251.773 16.797 cv
251.578 16.797 251.422 16.789 251.297 16.777 cv
251.172 16.762 251.07 16.746 250.996 16.719 cv
250.918 16.695 250.863 16.66 250.836 16.621 cv
250.801 16.582 250.785 16.539 250.789 16.484 cv
250.789 9.55103 li
250.785 9.5 250.801 9.453 250.836 9.414 cv
250.863 9.375 250.918 9.34399 250.996 9.31201 cv
251.07 9.289 251.172 9.26599 251.297 9.24597 cv
251.422 9.23401 251.578 9.22699 251.773 9.22302 cv
251.961 9.22699 252.121 9.23401 252.246 9.24597 cv
252.371 9.26599 252.469 9.289 252.547 9.31201 cv
252.617 9.34399 252.672 9.375 252.707 9.414 cv
252.734 9.453 252.75 9.5 252.754 9.55103 cv
cp
252.902 7.17999 mo
252.902 7.578 252.82 7.85199 252.66 8 cv
252.496 8.15198 252.199 8.22699 251.766 8.22302 cv
251.32 8.22699 251.02 8.15198 250.871 8.008 cv
250.715 7.86298 250.641 7.60199 250.641 7.21899 cv
250.641 6.82397 250.719 6.55103 250.879 6.39801 cv
251.035 6.24597 251.336 6.16803 251.781 6.16803 cv
252.215 6.16803 252.512 6.242 252.668 6.39099 cv
252.824 6.539 252.902 6.80499 252.902 7.17999 cv
cp
f
256.684 16.484 mo
256.68 16.539 256.664 16.582 256.637 16.621 cv
256.602 16.66 256.547 16.695 256.477 16.719 cv
256.398 16.746 256.301 16.762 256.176 16.777 cv
256.051 16.789 255.891 16.797 255.703 16.797 cv
255.508 16.797 255.352 16.789 255.227 16.777 cv
255.102 16.762 255 16.746 254.926 16.719 cv
254.848 16.695 254.793 16.66 254.766 16.621 cv
254.73 16.582 254.715 16.539 254.719 16.484 cv
254.719 6.23798 li
254.715 6.18701 254.73 6.14099 254.766 6.09802 cv
254.793 6.05902 254.848 6.02301 254.926 5.992 cv
255 5.96503 255.102 5.94501 255.227 5.92603 cv
255.352 5.914 255.508 5.90601 255.703 5.90198 cv
255.891 5.90601 256.051 5.914 256.176 5.92603 cv
256.301 5.94501 256.398 5.96503 256.477 5.992 cv
256.547 6.02301 256.602 6.05902 256.637 6.09802 cv
256.664 6.14099 256.68 6.18701 256.684 6.23798 cv
cp
f
262.809 15.801 mo
262.809 16.027 262.793 16.203 262.766 16.324 cv
262.734 16.449 262.695 16.535 262.652 16.582 cv
262.602 16.633 262.535 16.676 262.445 16.715 cv
262.352 16.754 262.242 16.785 262.125 16.816 cv
262 16.84 261.867 16.863 261.727 16.883 cv
261.582 16.895 261.441 16.902 261.297 16.906 cv
260.906 16.902 260.566 16.852 260.281 16.758 cv
259.996 16.656 259.762 16.508 259.574 16.301 cv
259.387 16.098 259.246 15.84 259.16 15.527 cv
259.066 15.219 259.023 14.848 259.027 14.418 cv
259.027 10.859 li
258.195 10.859 li
258.094 10.863 258.02 10.801 257.969 10.676 cv
257.914 10.555 257.887 10.352 257.891 10.062 cv
257.887 9.914 257.895 9.78497 257.91 9.68402 cv
257.922 9.58197 257.941 9.5 257.969 9.43701 cv
257.992 9.37903 258.023 9.336 258.066 9.30902 cv
258.102 9.28497 258.148 9.27301 258.203 9.27002 cv
259.027 9.27002 li
259.027 7.71899 li
259.023 7.672 259.039 7.625 259.07 7.578 cv
259.098 7.539 259.148 7.50403 259.227 7.47302 cv
259.301 7.44897 259.402 7.42603 259.531 7.40997 cv
259.656 7.39801 259.813 7.39502 260.004 7.39099 cv
260.191 7.39502 260.352 7.39801 260.48 7.40997 cv
260.605 7.42603 260.707 7.44897 260.781 7.47302 cv
260.852 7.50403 260.902 7.539 260.938 7.578 cv
260.965 7.625 260.98 7.672 260.984 7.71899 cv
260.984 9.27002 li
262.496 9.27002 li
262.547 9.27301 262.594 9.28497 262.633 9.30902 cv
262.672 9.336 262.703 9.37903 262.73 9.43701 cv
262.754 9.5 262.773 9.58197 262.789 9.68402 cv
262.801 9.78497 262.809 9.914 262.809 10.062 cv
262.809 10.352 262.781 10.555 262.73 10.676 cv
262.676 10.801 262.602 10.863 262.504 10.859 cv
260.984 10.859 li
260.984 14.125 li
260.98 14.504 261.039 14.789 261.164 14.977 cv
261.281 15.168 261.496 15.262 261.801 15.262 cv
261.902 15.262 261.996 15.254 262.082 15.234 cv
262.164 15.219 262.238 15.199 262.305 15.172 cv
262.367 15.152 262.422 15.129 262.469 15.109 cv
262.512 15.094 262.551 15.086 262.59 15.082 cv
262.617 15.086 262.648 15.094 262.68 15.109 cv
262.707 15.129 262.727 15.168 262.746 15.219 cv
262.758 15.277 262.773 15.352 262.789 15.441 cv
262.801 15.539 262.809 15.656 262.809 15.801 cv
cp
f
270.395 12.809 mo
270.391 13.047 270.34 13.223 270.234 13.336 cv
270.125 13.453 269.977 13.512 269.797 13.508 cv
265.563 13.508 li
265.559 13.809 265.594 14.078 265.668 14.316 cv
265.734 14.559 265.848 14.762 266.004 14.93 cv
266.156 15.102 266.352 15.23 266.594 15.316 cv
266.832 15.406 267.121 15.449 267.465 15.449 cv
267.805 15.449 268.105 15.426 268.367 15.375 cv
268.625 15.328 268.852 15.273 269.043 15.211 cv
269.23 15.152 269.387 15.098 269.516 15.047 cv
269.637 15 269.738 14.977 269.82 14.973 cv
269.863 14.977 269.902 14.984 269.938 15 cv
269.965 15.02 269.992 15.051 270.012 15.098 cv
270.031 15.145 270.043 15.211 270.055 15.297 cv
270.059 15.383 270.063 15.492 270.066 15.621 cv
270.063 15.738 270.063 15.836 270.059 15.914 cv
270.051 15.996 270.043 16.062 270.035 16.117 cv
270.023 16.176 270.008 16.227 269.988 16.262 cv
269.969 16.305 269.941 16.34 269.91 16.375 cv
269.875 16.414 269.781 16.465 269.633 16.523 cv
269.477 16.59 269.285 16.652 269.055 16.707 cv
268.816 16.77 268.547 16.816 268.25 16.863 cv
267.945 16.902 267.625 16.926 267.285 16.93 cv
266.664 16.926 266.121 16.852 265.66 16.695 cv
265.191 16.543 264.805 16.305 264.496 15.988 cv
264.18 15.672 263.945 15.273 263.797 14.789 cv
263.641 14.309 263.566 13.742 263.57 13.086 cv
263.566 12.473 263.645 11.914 263.809 11.418 cv
263.965 10.922 264.199 10.504 264.512 10.156 cv
264.816 9.81201 265.191 9.547 265.629 9.36298 cv
266.066 9.18402 266.559 9.09399 267.113 9.09003 cv
267.691 9.09399 268.191 9.17999 268.605 9.34802 cv
269.02 9.52301 269.355 9.76202 269.621 10.062 cv
269.883 10.367 270.078 10.727 270.207 11.141 cv
270.328 11.559 270.391 12.008 270.395 12.496 cv
cp
268.492 12.246 mo
268.504 11.695 268.395 11.262 268.16 10.949 cv
267.926 10.637 267.559 10.48 267.066 10.477 cv
266.816 10.48 266.602 10.527 266.418 10.617 cv
266.23 10.715 266.078 10.84 265.957 10.996 cv
265.832 11.156 265.738 11.344 265.676 11.559 cv
265.609 11.773 265.57 12.004 265.563 12.246 cv
cp
f
276.469 10.18 mo
276.469 10.371 276.461 10.523 276.453 10.641 cv
276.438 10.762 276.422 10.855 276.406 10.922 cv
276.383 10.992 276.355 11.039 276.324 11.062 cv
276.285 11.09 276.242 11.102 276.195 11.102 cv
276.148 11.102 276.102 11.094 276.055 11.074 cv
276 11.059 275.941 11.039 275.879 11.016 cv
275.809 10.996 275.738 10.977 275.664 10.957 cv
275.582 10.941 275.496 10.934 275.406 10.93 cv
275.293 10.934 275.184 10.953 275.078 10.996 cv
274.969 11.043 274.855 11.113 274.742 11.203 cv
274.621 11.297 274.5 11.422 274.375 11.574 cv
274.246 11.734 274.109 11.926 273.965 12.152 cv
273.965 16.484 li
273.961 16.539 273.945 16.582 273.918 16.621 cv
273.883 16.66 273.828 16.695 273.758 16.719 cv
273.68 16.746 273.582 16.762 273.457 16.777 cv
273.332 16.789 273.172 16.797 272.984 16.797 cv
272.789 16.797 272.633 16.789 272.508 16.777 cv
272.383 16.762 272.281 16.746 272.207 16.719 cv
272.129 16.695 272.074 16.66 272.047 16.621 cv
272.012 16.582 271.996 16.539 272 16.484 cv
272 9.53497 li
271.996 9.48798 272.012 9.44098 272.039 9.39801 cv
272.063 9.36298 272.109 9.33197 272.18 9.30103 cv
272.246 9.27698 272.332 9.258 272.441 9.242 cv
272.547 9.23401 272.68 9.22699 272.844 9.22302 cv
273.008 9.22699 273.145 9.23401 273.254 9.242 cv
273.359 9.258 273.445 9.27698 273.508 9.30103 cv
273.566 9.33197 273.609 9.36298 273.637 9.39801 cv
273.66 9.44098 273.672 9.48798 273.676 9.53497 cv
273.676 10.398 li
273.855 10.141 274.027 9.92999 274.191 9.758 cv
274.348 9.59399 274.504 9.45697 274.652 9.35498 cv
274.797 9.258 274.941 9.19098 275.086 9.14801 cv
275.23 9.11298 275.375 9.09399 275.523 9.09003 cv
275.59 9.09399 275.664 9.09802 275.742 9.10199 cv
275.82 9.11298 275.898 9.125 275.984 9.14099 cv
276.063 9.15997 276.137 9.17999 276.203 9.203 cv
276.262 9.22699 276.309 9.25403 276.34 9.27698 cv
276.367 9.30902 276.387 9.336 276.402 9.36298 cv
276.414 9.39801 276.426 9.44098 276.438 9.492 cv
276.445 9.55103 276.453 9.633 276.461 9.73798 cv
276.465 9.84802 276.469 9.99597 276.469 10.18 cv
cp
f
279.633 16.484 mo
279.629 16.539 279.613 16.582 279.586 16.621 cv
279.551 16.66 279.496 16.695 279.426 16.719 cv
279.348 16.746 279.25 16.762 279.125 16.777 cv
279 16.789 278.84 16.797 278.652 16.797 cv
278.457 16.797 278.301 16.789 278.176 16.777 cv
278.051 16.762 277.949 16.746 277.875 16.719 cv
277.797 16.695 277.742 16.66 277.715 16.621 cv
277.68 16.582 277.664 16.539 277.668 16.484 cv
277.668 9.55103 li
277.664 9.5 277.68 9.453 277.715 9.414 cv
277.742 9.375 277.797 9.34399 277.875 9.31201 cv
277.949 9.289 278.051 9.26599 278.176 9.24597 cv
278.301 9.23401 278.457 9.22699 278.652 9.22302 cv
278.84 9.22699 279 9.23401 279.125 9.24597 cv
279.25 9.26599 279.348 9.289 279.426 9.31201 cv
279.496 9.34399 279.551 9.375 279.586 9.414 cv
279.613 9.453 279.629 9.5 279.633 9.55103 cv
cp
279.781 7.17999 mo
279.781 7.578 279.699 7.85199 279.539 8 cv
279.375 8.15198 279.078 8.22699 278.645 8.22302 cv
278.199 8.22699 277.898 8.15198 277.75 8.008 cv
277.594 7.86298 277.52 7.60199 277.52 7.21899 cv
277.52 6.82397 277.598 6.55103 277.758 6.39801 cv
277.914 6.24597 278.215 6.16803 278.66 6.16803 cv
279.094 6.16803 279.391 6.242 279.547 6.39099 cv
279.703 6.539 279.781 6.80499 279.781 7.17999 cv
cp
f
288.234 16.484 mo
288.23 16.539 288.215 16.582 288.188 16.621 cv
288.152 16.66 288.102 16.695 288.031 16.719 cv
287.957 16.746 287.855 16.762 287.73 16.777 cv
287.602 16.789 287.445 16.797 287.262 16.797 cv
287.066 16.797 286.906 16.789 286.781 16.777 cv
286.652 16.762 286.551 16.746 286.48 16.719 cv
286.402 16.695 286.352 16.66 286.324 16.621 cv
286.289 16.582 286.273 16.539 286.277 16.484 cv
286.277 12.52 li
286.273 12.184 286.25 11.918 286.203 11.723 cv
286.152 11.531 286.078 11.367 285.988 11.23 cv
285.895 11.094 285.777 10.988 285.629 10.91 cv
285.48 10.836 285.305 10.797 285.109 10.797 cv
284.855 10.797 284.605 10.891 284.352 11.07 cv
284.098 11.254 283.832 11.516 283.559 11.863 cv
283.559 16.484 li
283.555 16.539 283.539 16.582 283.512 16.621 cv
283.477 16.66 283.422 16.695 283.352 16.719 cv
283.273 16.746 283.176 16.762 283.051 16.777 cv
282.926 16.789 282.766 16.797 282.578 16.797 cv
282.383 16.797 282.227 16.789 282.102 16.777 cv
281.977 16.762 281.875 16.746 281.801 16.719 cv
281.723 16.695 281.668 16.66 281.641 16.621 cv
281.605 16.582 281.59 16.539 281.594 16.484 cv
281.594 9.53497 li
281.59 9.48798 281.605 9.44098 281.633 9.39801 cv
281.656 9.36298 281.703 9.33197 281.773 9.30103 cv
281.84 9.27698 281.926 9.258 282.035 9.242 cv
282.141 9.23401 282.273 9.22699 282.438 9.22302 cv
282.602 9.22699 282.738 9.23401 282.848 9.242 cv
282.953 9.258 283.039 9.27698 283.102 9.30103 cv
283.16 9.33197 283.203 9.36298 283.23 9.39801 cv
283.254 9.44098 283.266 9.48798 283.27 9.53497 cv
283.27 10.336 li
283.652 9.92603 284.043 9.61298 284.441 9.40198 cv
284.836 9.19501 285.254 9.09399 285.688 9.09003 cv
286.156 9.09399 286.555 9.172 286.883 9.32397 cv
287.207 9.48401 287.469 9.69501 287.668 9.961 cv
287.867 10.23 288.012 10.543 288.102 10.898 cv
288.188 11.258 288.23 11.687 288.234 12.191 cv
cp
f
296.43 10.016 mo
296.426 10.27 296.398 10.453 296.344 10.57 cv
296.285 10.691 296.215 10.75 296.137 10.75 cv
295.316 10.75 li
295.43 10.875 295.512 11.02 295.563 11.176 cv
295.609 11.336 295.633 11.5 295.637 11.668 cv
295.633 12.078 295.566 12.437 295.434 12.75 cv
295.297 13.066 295.102 13.332 294.852 13.543 cv
294.598 13.762 294.297 13.926 293.941 14.035 cv
293.582 14.152 293.184 14.207 292.754 14.203 cv
292.527 14.207 292.316 14.18 292.113 14.121 cv
291.91 14.07 291.754 14.008 291.645 13.93 cv
291.582 14 291.523 14.078 291.477 14.172 cv
291.426 14.266 291.402 14.371 291.406 14.48 cv
291.402 14.637 291.469 14.758 291.602 14.852 cv
291.73 14.949 291.918 15.004 292.16 15.012 cv
293.852 15.074 li
294.246 15.09 294.598 15.148 294.906 15.242 cv
295.215 15.344 295.477 15.477 295.688 15.648 cv
295.898 15.824 296.059 16.035 296.168 16.277 cv
296.277 16.523 296.332 16.797 296.336 17.109 cv
296.332 17.445 296.258 17.77 296.109 18.078 cv
295.961 18.379 295.734 18.641 295.434 18.867 cv
295.129 19.086 294.75 19.266 294.297 19.398 cv
293.84 19.527 293.309 19.59 292.707 19.594 cv
292.109 19.59 291.605 19.543 291.188 19.453 cv
290.77 19.355 290.426 19.227 290.16 19.062 cv
289.891 18.895 289.695 18.695 289.578 18.469 cv
289.453 18.234 289.395 17.98 289.395 17.707 cv
289.395 17.535 289.414 17.375 289.461 17.219 cv
289.5 17.062 289.566 16.91 289.656 16.77 cv
289.738 16.625 289.844 16.492 289.969 16.359 cv
290.094 16.23 290.234 16.105 290.398 15.984 cv
290.172 15.871 290 15.711 289.879 15.5 cv
289.758 15.297 289.699 15.07 289.699 14.824 cv
289.699 14.523 289.766 14.246 289.906 13.988 cv
290.043 13.738 290.227 13.508 290.453 13.305 cv
290.27 13.125 290.125 12.91 290.016 12.652 cv
289.906 12.402 289.852 12.082 289.855 11.699 cv
289.852 11.297 289.922 10.937 290.066 10.613 cv
290.207 10.297 290.406 10.027 290.664 9.80499 cv
290.918 9.586 291.223 9.414 291.574 9.297 cv
291.926 9.17999 292.316 9.12097 292.746 9.12097 cv
292.965 9.12097 293.172 9.13702 293.371 9.15997 cv
293.57 9.19098 293.758 9.22699 293.93 9.27002 cv
296.137 9.27002 li
296.219 9.27301 296.289 9.33197 296.348 9.44098 cv
296.398 9.55902 296.426 9.75 296.43 10.016 cv
cp
293.914 11.66 mo
293.91 11.289 293.809 11 293.602 10.789 cv
293.391 10.586 293.098 10.48 292.723 10.477 cv
292.527 10.48 292.355 10.512 292.215 10.574 cv
292.066 10.641 291.945 10.73 291.852 10.84 cv
291.75 10.953 291.68 11.082 291.637 11.23 cv
291.586 11.379 291.563 11.535 291.566 11.691 cv
291.563 12.051 291.668 12.328 291.879 12.531 cv
292.086 12.738 292.375 12.844 292.746 12.84 cv
292.941 12.844 293.109 12.812 293.258 12.746 cv
293.398 12.687 293.52 12.602 293.621 12.488 cv
293.715 12.383 293.789 12.254 293.84 12.109 cv
293.887 11.969 293.91 11.82 293.914 11.66 cv
cp
294.375 17.211 mo
294.375 16.973 294.281 16.797 294.094 16.672 cv
293.906 16.551 293.648 16.48 293.32 16.469 cv
291.926 16.43 li
291.789 16.531 291.68 16.625 291.602 16.715 cv
291.52 16.805 291.457 16.891 291.41 16.977 cv
291.359 17.059 291.324 17.141 291.313 17.219 cv
291.293 17.297 291.285 17.375 291.289 17.461 cv
291.285 17.715 291.418 17.914 291.68 18.051 cv
291.941 18.184 292.313 18.25 292.793 18.254 cv
293.086 18.25 293.332 18.219 293.539 18.164 cv
293.738 18.102 293.902 18.023 294.031 17.926 cv
294.152 17.824 294.242 17.715 294.297 17.594 cv
294.348 17.473 294.375 17.344 294.375 17.211 cv
cp
f
308.227 7.508 mo
308.223 7.664 308.215 7.79303 308.207 7.89502 cv
308.191 8.00403 308.172 8.09003 308.148 8.15198 cv
308.117 8.21899 308.086 8.26599 308.051 8.29303 cv
308.008 8.328 307.965 8.34399 307.922 8.34003 cv
305.398 8.34003 li
305.398 16.469 li
305.398 16.523 305.379 16.57 305.348 16.609 cv
305.309 16.652 305.254 16.687 305.18 16.711 cv
305.098 16.738 304.992 16.758 304.863 16.773 cv
304.727 16.789 304.563 16.797 304.367 16.797 cv
304.172 16.797 304.008 16.789 303.875 16.773 cv
303.742 16.758 303.637 16.738 303.559 16.711 cv
303.48 16.687 303.422 16.652 303.391 16.609 cv
303.352 16.57 303.336 16.523 303.34 16.469 cv
303.34 8.34003 li
300.816 8.34003 li
300.762 8.34399 300.715 8.328 300.684 8.29303 cv
300.645 8.26599 300.613 8.21899 300.59 8.15198 cv
300.559 8.09003 300.539 8.00403 300.531 7.89502 cv
300.516 7.79303 300.512 7.664 300.512 7.508 cv
300.512 7.35498 300.516 7.22302 300.531 7.10901 cv
300.539 7.00403 300.559 6.914 300.59 6.84802 cv
300.613 6.78497 300.645 6.73798 300.684 6.70697 cv
300.715 6.67999 300.762 6.66803 300.816 6.664 cv
307.922 6.664 li
307.965 6.66803 308.008 6.67999 308.051 6.70697 cv
308.086 6.73798 308.117 6.78497 308.148 6.84802 cv
308.172 6.914 308.191 7.00403 308.207 7.10901 cv
308.215 7.22302 308.223 7.35498 308.227 7.508 cv
cp
f
311.266 16.484 mo
311.262 16.539 311.246 16.582 311.219 16.621 cv
311.184 16.66 311.129 16.695 311.059 16.719 cv
310.98 16.746 310.883 16.762 310.758 16.777 cv
310.633 16.789 310.473 16.797 310.285 16.797 cv
310.09 16.797 309.934 16.789 309.809 16.777 cv
309.684 16.762 309.582 16.746 309.508 16.719 cv
309.43 16.695 309.375 16.66 309.348 16.621 cv
309.313 16.582 309.297 16.539 309.301 16.484 cv
309.301 9.55103 li
309.297 9.5 309.313 9.453 309.348 9.414 cv
309.375 9.375 309.43 9.34399 309.508 9.31201 cv
309.582 9.289 309.684 9.26599 309.809 9.24597 cv
309.934 9.23401 310.09 9.22699 310.285 9.22302 cv
310.473 9.22699 310.633 9.23401 310.758 9.24597 cv
310.883 9.26599 310.98 9.289 311.059 9.31201 cv
311.129 9.34399 311.184 9.375 311.219 9.414 cv
311.246 9.453 311.262 9.5 311.266 9.55103 cv
cp
311.414 7.17999 mo
311.414 7.578 311.332 7.85199 311.172 8 cv
311.008 8.15198 310.711 8.22699 310.277 8.22302 cv
309.832 8.22699 309.531 8.15198 309.383 8.008 cv
309.227 7.86298 309.152 7.60199 309.152 7.21899 cv
309.152 6.82397 309.23 6.55103 309.391 6.39801 cv
309.547 6.24597 309.848 6.16803 310.293 6.16803 cv
310.727 6.16803 311.023 6.242 311.18 6.39099 cv
311.336 6.539 311.414 6.80499 311.414 7.17999 cv
cp
f
324.316 16.484 mo
324.313 16.539 324.297 16.582 324.27 16.621 cv
324.234 16.66 324.184 16.695 324.113 16.719 cv
324.039 16.746 323.938 16.762 323.816 16.777 cv
323.691 16.789 323.535 16.797 323.344 16.797 cv
323.145 16.797 322.984 16.789 322.859 16.777 cv
322.734 16.762 322.633 16.746 322.559 16.719 cv
322.48 16.695 322.43 16.66 322.402 16.621 cv
322.375 16.582 322.359 16.539 322.363 16.484 cv
322.363 12.363 li
322.359 12.133 322.34 11.918 322.297 11.723 cv
322.25 11.531 322.18 11.367 322.094 11.23 cv
322 11.094 321.887 10.988 321.75 10.91 cv
321.609 10.836 321.445 10.797 321.254 10.797 cv
321.02 10.797 320.781 10.891 320.543 11.07 cv
320.305 11.254 320.047 11.516 319.766 11.863 cv
319.766 16.484 li
319.766 16.539 319.75 16.582 319.719 16.621 cv
319.688 16.66 319.633 16.695 319.559 16.719 cv
319.48 16.746 319.379 16.762 319.258 16.777 cv
319.133 16.789 318.98 16.797 318.793 16.797 cv
318.598 16.797 318.438 16.789 318.316 16.777 cv
318.188 16.762 318.086 16.746 318.016 16.719 cv
317.938 16.695 317.887 16.66 317.855 16.621 cv
317.824 16.582 317.809 16.539 317.809 16.484 cv
317.809 12.363 li
317.809 12.133 317.785 11.918 317.742 11.723 cv
317.699 11.531 317.633 11.367 317.547 11.23 cv
317.453 11.094 317.34 10.988 317.203 10.91 cv
317.059 10.836 316.895 10.797 316.711 10.797 cv
316.469 10.797 316.23 10.891 315.992 11.07 cv
315.754 11.254 315.496 11.516 315.223 11.863 cv
315.223 16.484 li
315.219 16.539 315.203 16.582 315.176 16.621 cv
315.141 16.66 315.086 16.695 315.016 16.719 cv
314.938 16.746 314.84 16.762 314.715 16.777 cv
314.59 16.789 314.43 16.797 314.242 16.797 cv
314.047 16.797 313.891 16.789 313.766 16.777 cv
313.641 16.762 313.539 16.746 313.465 16.719 cv
313.387 16.695 313.332 16.66 313.305 16.621 cv
313.27 16.582 313.254 16.539 313.258 16.484 cv
313.258 9.53497 li
313.254 9.48798 313.27 9.44098 313.297 9.39801 cv
313.32 9.36298 313.367 9.33197 313.438 9.30103 cv
313.504 9.27698 313.59 9.258 313.699 9.242 cv
313.805 9.23401 313.938 9.22699 314.102 9.22302 cv
314.266 9.22699 314.402 9.23401 314.512 9.242 cv
314.617 9.258 314.703 9.27698 314.766 9.30103 cv
314.824 9.33197 314.867 9.36298 314.895 9.39801 cv
314.918 9.44098 314.93 9.48798 314.934 9.53497 cv
314.934 10.336 li
315.316 9.92603 315.699 9.61298 316.082 9.40198 cv
316.461 9.19501 316.863 9.09399 317.281 9.09003 cv
317.566 9.09399 317.82 9.12097 318.051 9.17999 cv
318.277 9.242 318.484 9.328 318.664 9.43701 cv
318.844 9.55103 318.996 9.68701 319.125 9.84003 cv
319.254 9.99597 319.363 10.168 319.453 10.359 cv
319.66 10.137 319.863 9.94501 320.066 9.78497 cv
320.262 9.625 320.461 9.492 320.656 9.39099 cv
320.852 9.289 321.047 9.21503 321.242 9.164 cv
321.438 9.117 321.637 9.09399 321.84 9.09003 cv
322.301 9.09399 322.688 9.172 323.008 9.32397 cv
323.32 9.48401 323.578 9.69501 323.773 9.961 cv
323.969 10.23 324.105 10.543 324.191 10.898 cv
324.27 11.258 324.313 11.637 324.316 12.035 cv
cp
f
332.656 12.809 mo
332.652 13.047 332.602 13.223 332.496 13.336 cv
332.387 13.453 332.238 13.512 332.059 13.508 cv
327.824 13.508 li
327.82 13.809 327.855 14.078 327.93 14.316 cv
327.996 14.559 328.109 14.762 328.266 14.93 cv
328.418 15.102 328.613 15.23 328.855 15.316 cv
329.094 15.406 329.383 15.449 329.727 15.449 cv
330.066 15.449 330.367 15.426 330.629 15.375 cv
330.887 15.328 331.113 15.273 331.305 15.211 cv
331.492 15.152 331.648 15.098 331.777 15.047 cv
331.898 15 332 14.977 332.082 14.973 cv
332.125 14.977 332.164 14.984 332.199 15 cv
332.227 15.02 332.254 15.051 332.273 15.098 cv
332.293 15.145 332.305 15.211 332.316 15.297 cv
332.32 15.383 332.324 15.492 332.328 15.621 cv
332.324 15.738 332.324 15.836 332.32 15.914 cv
332.313 15.996 332.305 16.062 332.297 16.117 cv
332.285 16.176 332.27 16.227 332.25 16.262 cv
332.23 16.305 332.203 16.34 332.172 16.375 cv
332.137 16.414 332.043 16.465 331.895 16.523 cv
331.738 16.59 331.547 16.652 331.316 16.707 cv
331.078 16.77 330.809 16.816 330.512 16.863 cv
330.207 16.902 329.887 16.926 329.547 16.93 cv
328.926 16.926 328.383 16.852 327.922 16.695 cv
327.453 16.543 327.066 16.305 326.758 15.988 cv
326.441 15.672 326.207 15.273 326.059 14.789 cv
325.902 14.309 325.828 13.742 325.832 13.086 cv
325.828 12.473 325.906 11.914 326.07 11.418 cv
326.227 10.922 326.461 10.504 326.773 10.156 cv
327.078 9.81201 327.453 9.547 327.891 9.36298 cv
328.328 9.18402 328.82 9.09399 329.375 9.09003 cv
329.953 9.09399 330.453 9.17999 330.867 9.34802 cv
331.281 9.52301 331.617 9.76202 331.883 10.062 cv
332.145 10.367 332.34 10.727 332.469 11.141 cv
332.59 11.559 332.652 12.008 332.656 12.496 cv
cp
330.754 12.246 mo
330.766 11.695 330.656 11.262 330.422 10.949 cv
330.188 10.637 329.82 10.48 329.328 10.477 cv
329.078 10.48 328.863 10.527 328.68 10.617 cv
328.492 10.715 328.34 10.84 328.219 10.996 cv
328.094 11.156 328 11.344 327.938 11.559 cv
327.871 11.773 327.832 12.004 327.824 12.246 cv
cp
f
339.156 14.52 mo
339.152 14.918 339.078 15.266 338.934 15.566 cv
338.785 15.867 338.578 16.121 338.309 16.32 cv
338.035 16.527 337.715 16.676 337.348 16.777 cv
336.98 16.875 336.578 16.926 336.148 16.93 cv
335.883 16.926 335.637 16.906 335.402 16.871 cv
335.168 16.828 334.957 16.781 334.77 16.723 cv
334.582 16.664 334.426 16.602 334.301 16.539 cv
334.176 16.477 334.082 16.418 334.027 16.363 cv
333.969 16.309 333.926 16.227 333.898 16.109 cv
333.863 15.996 333.848 15.82 333.852 15.59 cv
333.848 15.441 333.855 15.32 333.867 15.227 cv
333.875 15.137 333.891 15.066 333.914 15.008 cv
333.934 14.957 333.957 14.918 333.992 14.898 cv
334.02 14.883 334.059 14.875 334.105 14.871 cv
334.16 14.875 334.246 14.906 334.359 14.969 cv
334.469 15.035 334.605 15.109 334.777 15.184 cv
334.941 15.266 335.137 15.336 335.355 15.402 cv
335.574 15.473 335.824 15.508 336.109 15.504 cv
336.285 15.508 336.441 15.488 336.582 15.449 cv
336.715 15.414 336.836 15.363 336.941 15.293 cv
337.039 15.227 337.113 15.141 337.168 15.035 cv
337.215 14.934 337.242 14.812 337.246 14.676 cv
337.242 14.52 337.195 14.387 337.102 14.277 cv
337.008 14.168 336.879 14.07 336.723 13.984 cv
336.559 13.902 336.379 13.824 336.184 13.75 cv
335.98 13.68 335.777 13.602 335.566 13.508 cv
335.355 13.422 335.148 13.32 334.953 13.203 cv
334.75 13.094 334.57 12.953 334.414 12.785 cv
334.25 12.621 334.125 12.422 334.031 12.184 cv
333.938 11.953 333.891 11.672 333.891 11.34 cv
333.891 11.012 333.953 10.707 334.082 10.426 cv
334.211 10.152 334.398 9.914 334.645 9.71503 cv
334.887 9.52002 335.184 9.367 335.535 9.25403 cv
335.883 9.14801 336.277 9.09399 336.719 9.09003 cv
336.934 9.09399 337.145 9.10901 337.352 9.13702 cv
337.555 9.172 337.742 9.211 337.91 9.25403 cv
338.074 9.30499 338.215 9.35498 338.332 9.40601 cv
338.445 9.46503 338.527 9.51202 338.578 9.547 cv
338.625 9.59003 338.66 9.62903 338.684 9.664 cv
338.703 9.70697 338.715 9.75403 338.727 9.80499 cv
338.734 9.85901 338.746 9.92603 338.754 10.004 cv
338.762 10.09 338.766 10.187 338.766 10.305 cv
338.766 10.445 338.762 10.562 338.754 10.648 cv
338.746 10.742 338.73 10.812 338.715 10.859 cv
338.695 10.914 338.672 10.949 338.645 10.965 cv
338.609 10.988 338.574 10.996 338.535 10.992 cv
338.484 10.996 338.41 10.969 338.316 10.91 cv
338.215 10.859 338.094 10.801 337.945 10.734 cv
337.797 10.676 337.625 10.617 337.43 10.559 cv
337.234 10.508 337.012 10.48 336.766 10.477 cv
336.586 10.48 336.434 10.5 336.305 10.531 cv
336.172 10.57 336.063 10.621 335.984 10.687 cv
335.898 10.758 335.836 10.836 335.797 10.926 cv
335.75 11.02 335.73 11.117 335.734 11.219 cv
335.73 11.379 335.781 11.516 335.883 11.621 cv
335.98 11.734 336.109 11.828 336.273 11.91 cv
336.434 11.996 336.617 12.074 336.824 12.145 cv
337.027 12.219 337.234 12.301 337.445 12.383 cv
337.652 12.473 337.859 12.57 338.07 12.684 cv
338.273 12.797 338.457 12.937 338.617 13.102 cv
338.777 13.27 338.906 13.469 339.008 13.699 cv
339.102 13.934 339.152 14.207 339.156 14.52 cv
cp
f
351.348 12.937 mo
351.344 13.535 351.266 14.078 351.113 14.562 cv
350.953 15.055 350.719 15.473 350.402 15.824 cv
350.086 16.176 349.688 16.449 349.211 16.641 cv
348.73 16.832 348.172 16.926 347.535 16.93 cv
346.914 16.926 346.375 16.844 345.922 16.672 cv
345.461 16.504 345.082 16.254 344.785 15.926 cv
344.48 15.602 344.258 15.199 344.113 14.719 cv
343.969 14.242 343.898 13.695 343.898 13.078 cv
343.898 12.488 343.977 11.949 344.133 11.457 cv
344.289 10.969 344.527 10.547 344.848 10.195 cv
345.164 9.84802 345.559 9.57397 346.035 9.37903 cv
346.508 9.18701 347.066 9.09399 347.707 9.09003 cv
348.332 9.09399 348.871 9.17603 349.328 9.34399 cv
349.785 9.51599 350.164 9.76599 350.461 10.09 cv
350.758 10.418 350.98 10.82 351.129 11.297 cv
351.273 11.777 351.344 12.324 351.348 12.937 cv
cp
349.328 13.016 mo
349.324 12.68 349.297 12.363 349.246 12.07 cv
349.188 11.785 349.094 11.535 348.969 11.32 cv
348.836 11.109 348.664 10.941 348.453 10.82 cv
348.234 10.703 347.965 10.645 347.637 10.641 cv
347.348 10.645 347.094 10.699 346.875 10.801 cv
346.656 10.91 346.477 11.066 346.336 11.27 cv
346.195 11.477 346.09 11.723 346.02 12.008 cv
345.949 12.301 345.914 12.629 345.914 12.992 cv
345.914 13.34 345.941 13.656 346 13.941 cv
346.055 14.234 346.148 14.484 346.277 14.695 cv
346.402 14.91 346.574 15.074 346.797 15.187 cv
347.012 15.309 347.281 15.367 347.605 15.363 cv
347.898 15.367 348.156 15.312 348.379 15.203 cv
348.594 15.098 348.773 14.945 348.914 14.738 cv
349.055 14.539 349.156 14.293 349.227 14.004 cv
349.289 13.719 349.324 13.391 349.328 13.016 cv
cp
f
357.129 6.883 mo
357.125 7.03497 357.121 7.15601 357.113 7.24597 cv
357.102 7.34003 357.086 7.40997 357.066 7.45697 cv
357.043 7.508 357.02 7.54303 356.996 7.55902 cv
356.969 7.578 356.941 7.586 356.91 7.586 cv
356.871 7.586 356.828 7.578 356.789 7.55902 cv
356.742 7.54303 356.688 7.52301 356.625 7.5 cv
356.555 7.47998 356.48 7.461 356.395 7.44098 cv
356.305 7.42603 356.199 7.41803 356.082 7.414 cv
355.938 7.41803 355.816 7.43701 355.719 7.47998 cv
355.617 7.52698 355.535 7.59802 355.469 7.69098 cv
355.398 7.789 355.348 7.914 355.32 8.06598 cv
355.285 8.21899 355.27 8.40601 355.273 8.62903 cv
355.273 9.27002 li
356.543 9.27002 li
356.586 9.27301 356.629 9.28497 356.672 9.30902 cv
356.707 9.336 356.742 9.37903 356.77 9.43701 cv
356.793 9.5 356.813 9.58197 356.828 9.68402 cv
356.84 9.78497 356.844 9.914 356.848 10.062 cv
356.844 10.352 356.82 10.555 356.77 10.676 cv
356.715 10.801 356.637 10.863 356.543 10.859 cv
355.273 10.859 li
355.273 16.484 li
355.27 16.539 355.254 16.582 355.227 16.621 cv
355.191 16.66 355.141 16.695 355.07 16.719 cv
354.996 16.746 354.895 16.762 354.766 16.777 cv
354.633 16.789 354.473 16.797 354.289 16.797 cv
354.102 16.797 353.945 16.789 353.82 16.777 cv
353.691 16.762 353.59 16.746 353.516 16.719 cv
353.438 16.695 353.387 16.66 353.359 16.621 cv
353.328 16.582 353.313 16.539 353.316 16.484 cv
353.316 10.859 li
352.445 10.859 li
352.344 10.863 352.27 10.801 352.223 10.676 cv
352.172 10.555 352.145 10.352 352.148 10.062 cv
352.145 9.914 352.152 9.78497 352.168 9.68402 cv
352.18 9.58197 352.199 9.5 352.223 9.43701 cv
352.246 9.37903 352.277 9.336 352.316 9.30902 cv
352.355 9.28497 352.398 9.27301 352.453 9.27002 cv
353.316 9.27002 li
353.316 8.68402 li
353.313 8.21503 353.359 7.80103 353.457 7.44098 cv
353.547 7.086 353.695 6.789 353.898 6.55499 cv
354.098 6.32001 354.352 6.14502 354.66 6.02002 cv
354.969 5.90198 355.332 5.84003 355.758 5.84003 cv
355.953 5.84003 356.145 5.85901 356.332 5.89099 cv
356.512 5.92999 356.656 5.96503 356.762 6 cv
356.863 6.04303 356.934 6.078 356.973 6.10901 cv
357.008 6.14502 357.039 6.19501 357.063 6.258 cv
357.086 6.32397 357.102 6.40601 357.113 6.508 cv
357.121 6.60901 357.125 6.73401 357.129 6.883 cv
cp
f
367.68 13.727 mo
367.676 14.258 367.578 14.723 367.383 15.121 cv
367.184 15.523 366.918 15.859 366.582 16.125 cv
366.242 16.395 365.844 16.594 365.395 16.727 cv
364.941 16.859 364.461 16.926 363.949 16.93 cv
363.598 16.926 363.273 16.898 362.977 16.844 cv
362.676 16.785 362.414 16.719 362.188 16.637 cv
361.957 16.559 361.766 16.473 361.613 16.383 cv
361.461 16.297 361.352 16.219 361.285 16.148 cv
361.215 16.082 361.164 15.984 361.141 15.859 cv
361.109 15.734 361.098 15.551 361.098 15.309 cv
361.098 15.148 361.102 15.016 361.113 14.902 cv
361.121 14.797 361.137 14.707 361.164 14.637 cv
361.184 14.57 361.215 14.523 361.258 14.492 cv
361.293 14.469 361.34 14.453 361.391 14.449 cv
361.461 14.453 361.563 14.496 361.699 14.578 cv
361.828 14.668 362 14.762 362.211 14.863 cv
362.418 14.969 362.664 15.066 362.953 15.148 cv
363.238 15.238 363.574 15.281 363.957 15.277 cv
364.207 15.281 364.43 15.25 364.625 15.187 cv
364.82 15.129 364.988 15.043 365.129 14.934 cv
365.266 14.824 365.371 14.691 365.445 14.531 cv
365.516 14.371 365.551 14.191 365.555 13.992 cv
365.551 13.766 365.488 13.57 365.367 13.402 cv
365.238 13.242 365.074 13.098 364.879 12.969 cv
364.676 12.844 364.449 12.723 364.195 12.609 cv
363.941 12.5 363.68 12.383 363.41 12.254 cv
363.137 12.133 362.875 11.988 362.621 11.828 cv
362.367 11.672 362.141 11.484 361.941 11.262 cv
361.738 11.043 361.574 10.781 361.453 10.477 cv
361.328 10.176 361.266 9.81598 361.27 9.39502 cv
361.266 8.914 361.355 8.48798 361.535 8.12097 cv
361.711 7.758 361.953 7.453 362.262 7.20697 cv
362.563 6.96899 362.922 6.789 363.336 6.66803 cv
363.75 6.55103 364.188 6.492 364.648 6.48798 cv
364.887 6.492 365.125 6.508 365.367 6.54303 cv
365.605 6.58197 365.828 6.633 366.035 6.69098 cv
366.242 6.75403 366.426 6.82397 366.59 6.89801 cv
366.746 6.97998 366.855 7.04303 366.91 7.09399 cv
366.961 7.14801 366.996 7.19501 367.016 7.22699 cv
367.031 7.26599 367.047 7.31201 367.063 7.37097 cv
367.074 7.43402 367.082 7.508 367.09 7.59802 cv
367.094 7.69098 367.098 7.80499 367.098 7.93701 cv
367.098 8.09003 367.094 8.21899 367.086 8.32001 cv
367.078 8.42603 367.063 8.51202 367.047 8.57397 cv
367.023 8.64502 367 8.69098 366.969 8.72302 cv
366.934 8.75403 366.887 8.77002 366.832 8.77002 cv
366.773 8.77002 366.684 8.73401 366.559 8.65997 cv
366.434 8.59003 366.277 8.51202 366.098 8.422 cv
365.914 8.34003 365.707 8.26202 365.469 8.19098 cv
365.227 8.125 364.961 8.09003 364.68 8.086 cv
364.453 8.09003 364.262 8.117 364.098 8.16803 cv
363.93 8.22302 363.789 8.297 363.68 8.39099 cv
363.566 8.48798 363.484 8.60498 363.43 8.73798 cv
363.375 8.87903 363.348 9.02002 363.348 9.16803 cv
363.348 9.39502 363.406 9.59003 363.531 9.75 cv
363.648 9.914 363.813 10.059 364.023 10.184 cv
364.227 10.312 364.461 10.434 364.719 10.543 cv
364.977 10.66 365.242 10.777 365.516 10.898 cv
365.785 11.027 366.047 11.168 366.309 11.324 cv
366.566 11.48 366.801 11.672 367.004 11.891 cv
367.207 12.117 367.367 12.375 367.492 12.672 cv
367.613 12.969 367.676 13.32 367.68 13.727 cv
cp
f
375.727 16.484 mo
375.723 16.539 375.711 16.582 375.688 16.621 cv
375.66 16.66 375.613 16.695 375.551 16.719 cv
375.484 16.746 375.398 16.762 375.293 16.777 cv
375.188 16.789 375.055 16.797 374.895 16.797 cv
374.719 16.797 374.578 16.789 374.477 16.777 cv
374.367 16.762 374.285 16.746 374.223 16.719 cv
374.16 16.695 374.113 16.66 374.09 16.621 cv
374.059 16.582 374.047 16.539 374.051 16.484 cv
374.051 15.684 li
373.664 16.098 373.273 16.41 372.879 16.617 cv
372.477 16.824 372.066 16.926 371.645 16.93 cv
371.164 16.926 370.762 16.852 370.438 16.695 cv
370.113 16.543 369.852 16.328 369.652 16.059 cv
369.449 15.789 369.305 15.477 369.223 15.117 cv
369.133 14.762 369.09 14.32 369.094 13.789 cv
369.094 9.53497 li
369.09 9.48798 369.105 9.44098 369.137 9.39801 cv
369.164 9.36298 369.215 9.33197 369.293 9.30103 cv
369.367 9.27698 369.469 9.258 369.598 9.242 cv
369.723 9.23401 369.879 9.22699 370.07 9.22302 cv
370.258 9.22699 370.418 9.23401 370.543 9.242 cv
370.668 9.258 370.766 9.27698 370.844 9.30103 cv
370.914 9.33197 370.969 9.36298 371.004 9.39801 cv
371.031 9.44098 371.047 9.48798 371.051 9.53497 cv
371.051 13.461 li
371.047 13.828 371.07 14.105 371.121 14.297 cv
371.164 14.488 371.234 14.652 371.336 14.789 cv
371.43 14.93 371.555 15.035 371.703 15.109 cv
371.852 15.187 372.023 15.227 372.219 15.223 cv
372.469 15.227 372.719 15.137 372.973 14.949 cv
373.223 14.77 373.492 14.504 373.777 14.156 cv
373.777 9.53497 li
373.777 9.48798 373.789 9.44098 373.82 9.39801 cv
373.844 9.36298 373.898 9.33197 373.977 9.30103 cv
374.051 9.27698 374.148 9.258 374.277 9.242 cv
374.398 9.23401 374.559 9.22699 374.754 9.22302 cv
374.945 9.22699 375.102 9.23401 375.227 9.242 cv
375.348 9.258 375.449 9.27698 375.523 9.30103 cv
375.594 9.33197 375.645 9.36298 375.68 9.39801 cv
375.707 9.44098 375.723 9.48798 375.727 9.53497 cv
cp
f
384.656 12.914 mo
384.656 13.535 384.586 14.094 384.453 14.586 cv
384.313 15.082 384.117 15.5 383.867 15.848 cv
383.609 16.195 383.297 16.465 382.93 16.648 cv
382.555 16.836 382.133 16.926 381.664 16.93 cv
381.426 16.926 381.207 16.902 381.008 16.863 cv
380.801 16.816 380.609 16.75 380.426 16.648 cv
380.242 16.555 380.059 16.43 379.883 16.273 cv
379.699 16.125 379.516 15.941 379.332 15.73 cv
379.332 16.484 li
379.328 16.547 379.316 16.594 379.289 16.629 cv
379.258 16.672 379.211 16.703 379.148 16.727 cv
379.082 16.75 378.992 16.766 378.887 16.781 cv
378.777 16.789 378.648 16.797 378.492 16.797 cv
378.328 16.797 378.191 16.789 378.09 16.781 cv
377.98 16.766 377.895 16.75 377.832 16.727 cv
377.762 16.703 377.719 16.672 377.695 16.629 cv
377.668 16.594 377.652 16.547 377.656 16.484 cv
377.656 6.23798 li
377.652 6.18701 377.668 6.14099 377.703 6.09802 cv
377.73 6.05902 377.785 6.02301 377.863 5.992 cv
377.938 5.96503 378.039 5.94501 378.164 5.92603 cv
378.289 5.914 378.445 5.90601 378.641 5.90198 cv
378.828 5.90601 378.988 5.914 379.113 5.92603 cv
379.238 5.94501 379.336 5.96503 379.414 5.992 cv
379.484 6.02301 379.539 6.05902 379.574 6.09802 cv
379.602 6.14099 379.617 6.18701 379.621 6.23798 cv
379.621 10.078 li
379.797 9.90198 379.973 9.75403 380.152 9.62903 cv
380.324 9.508 380.5 9.40198 380.68 9.32001 cv
380.852 9.242 381.035 9.18402 381.227 9.14502 cv
381.41 9.10901 381.609 9.09399 381.82 9.09003 cv
382.332 9.09399 382.766 9.19501 383.129 9.39801 cv
383.484 9.60498 383.777 9.883 384.004 10.23 cv
384.227 10.578 384.391 10.984 384.5 11.449 cv
384.602 11.914 384.656 12.402 384.656 12.914 cv
cp
382.621 13.055 mo
382.617 12.762 382.594 12.477 382.555 12.199 cv
382.508 11.926 382.434 11.684 382.324 11.469 cv
382.215 11.258 382.07 11.086 381.898 10.957 cv
381.723 10.832 381.504 10.77 381.242 10.766 cv
381.109 10.77 380.984 10.785 380.859 10.82 cv
380.734 10.859 380.605 10.922 380.473 11.008 cv
380.34 11.098 380.203 11.215 380.066 11.352 cv
379.922 11.492 379.773 11.664 379.621 11.871 cv
379.621 14.18 li
379.895 14.535 380.156 14.805 380.41 14.984 cv
380.66 15.172 380.926 15.262 381.203 15.262 cv
381.457 15.262 381.672 15.199 381.852 15.066 cv
382.023 14.941 382.172 14.773 382.289 14.562 cv
382.406 14.359 382.488 14.121 382.543 13.852 cv
382.59 13.59 382.617 13.324 382.621 13.055 cv
cp
f
389.746 12.832 mo
389.742 13.133 389.715 13.344 389.66 13.461 cv
389.602 13.586 389.512 13.645 389.387 13.641 cv
386.145 13.641 li
386.016 13.645 385.922 13.582 385.867 13.457 cv
385.805 13.336 385.777 13.129 385.781 12.832 cv
385.777 12.543 385.805 12.336 385.867 12.215 cv
385.922 12.098 386.016 12.039 386.145 12.035 cv
389.387 12.035 li
389.449 12.039 389.5 12.051 389.547 12.074 cv
389.586 12.102 389.625 12.148 389.66 12.207 cv
389.688 12.273 389.711 12.355 389.727 12.457 cv
389.738 12.562 389.742 12.687 389.746 12.832 cv
cp
f
393.395 16.469 mo
393.391 16.523 393.375 16.57 393.344 16.609 cv
393.309 16.652 393.25 16.687 393.176 16.711 cv
393.094 16.738 392.992 16.758 392.863 16.773 cv
392.73 16.789 392.563 16.797 392.367 16.797 cv
392.164 16.797 392 16.789 391.871 16.773 cv
391.734 16.758 391.629 16.738 391.555 16.711 cv
391.473 16.687 391.418 16.652 391.387 16.609 cv
391.352 16.57 391.332 16.523 391.336 16.469 cv
391.336 6.94501 li
391.332 6.89801 391.352 6.85199 391.387 6.80499 cv
391.418 6.76599 391.473 6.72998 391.559 6.703 cv
391.637 6.67999 391.742 6.65997 391.875 6.64099 cv
392 6.62903 392.164 6.62097 392.367 6.617 cv
392.563 6.62097 392.73 6.62903 392.863 6.64099 cv
392.992 6.65997 393.094 6.67999 393.176 6.703 cv
393.25 6.72998 393.309 6.76599 393.344 6.80499 cv
393.375 6.85199 393.391 6.89801 393.395 6.94501 cv
cp
f
406.477 16.484 mo
406.473 16.539 406.457 16.582 406.43 16.621 cv
406.395 16.66 406.344 16.695 406.273 16.719 cv
406.199 16.746 406.098 16.762 405.977 16.777 cv
405.852 16.789 405.695 16.797 405.504 16.797 cv
405.305 16.797 405.145 16.789 405.02 16.777 cv
404.895 16.762 404.793 16.746 404.719 16.719 cv
404.641 16.695 404.59 16.66 404.563 16.621 cv
404.535 16.582 404.52 16.539 404.523 16.484 cv
404.523 12.363 li
404.52 12.133 404.5 11.918 404.457 11.723 cv
404.41 11.531 404.34 11.367 404.254 11.23 cv
404.16 11.094 404.047 10.988 403.91 10.91 cv
403.77 10.836 403.605 10.797 403.414 10.797 cv
403.18 10.797 402.941 10.891 402.703 11.07 cv
402.465 11.254 402.207 11.516 401.926 11.863 cv
401.926 16.484 li
401.926 16.539 401.91 16.582 401.879 16.621 cv
401.848 16.66 401.793 16.695 401.719 16.719 cv
401.641 16.746 401.539 16.762 401.418 16.777 cv
401.293 16.789 401.141 16.797 400.953 16.797 cv
400.758 16.797 400.598 16.789 400.477 16.777 cv
400.348 16.762 400.246 16.746 400.176 16.719 cv
400.098 16.695 400.047 16.66 400.016 16.621 cv
399.984 16.582 399.969 16.539 399.969 16.484 cv
399.969 12.363 li
399.969 12.133 399.945 11.918 399.902 11.723 cv
399.859 11.531 399.793 11.367 399.707 11.23 cv
399.613 11.094 399.5 10.988 399.363 10.91 cv
399.219 10.836 399.055 10.797 398.871 10.797 cv
398.629 10.797 398.391 10.891 398.152 11.07 cv
397.914 11.254 397.656 11.516 397.383 11.863 cv
397.383 16.484 li
397.379 16.539 397.363 16.582 397.336 16.621 cv
397.301 16.66 397.246 16.695 397.176 16.719 cv
397.098 16.746 397 16.762 396.875 16.777 cv
396.75 16.789 396.59 16.797 396.402 16.797 cv
396.207 16.797 396.051 16.789 395.926 16.777 cv
395.801 16.762 395.699 16.746 395.625 16.719 cv
395.547 16.695 395.492 16.66 395.465 16.621 cv
395.43 16.582 395.414 16.539 395.418 16.484 cv
395.418 9.53497 li
395.414 9.48798 395.43 9.44098 395.457 9.39801 cv
395.48 9.36298 395.527 9.33197 395.598 9.30103 cv
395.664 9.27698 395.75 9.258 395.859 9.242 cv
395.965 9.23401 396.098 9.22699 396.262 9.22302 cv
396.426 9.22699 396.563 9.23401 396.672 9.242 cv
396.777 9.258 396.863 9.27698 396.926 9.30103 cv
396.984 9.33197 397.027 9.36298 397.055 9.39801 cv
397.078 9.44098 397.09 9.48798 397.094 9.53497 cv
397.094 10.336 li
397.477 9.92603 397.859 9.61298 398.242 9.40198 cv
398.621 9.19501 399.023 9.09399 399.441 9.09003 cv
399.727 9.09399 399.98 9.12097 400.211 9.17999 cv
400.438 9.242 400.645 9.328 400.824 9.43701 cv
401.004 9.55103 401.156 9.68701 401.285 9.84003 cv
401.414 9.99597 401.523 10.168 401.613 10.359 cv
401.82 10.137 402.023 9.94501 402.227 9.78497 cv
402.422 9.625 402.621 9.492 402.816 9.39099 cv
403.012 9.289 403.207 9.21503 403.402 9.164 cv
403.598 9.117 403.797 9.09399 404 9.09003 cv
404.461 9.09399 404.848 9.172 405.168 9.32397 cv
405.48 9.48401 405.738 9.69501 405.934 9.961 cv
406.129 10.23 406.266 10.543 406.352 10.898 cv
406.43 11.258 406.473 11.637 406.477 12.035 cv
cp
f
414.32 16.508 mo
414.316 16.586 414.289 16.641 414.242 16.68 cv
414.188 16.723 414.105 16.75 413.996 16.77 cv
413.879 16.785 413.715 16.797 413.5 16.797 cv
413.262 16.797 413.09 16.785 412.988 16.77 cv
412.879 16.75 412.805 16.723 412.766 16.68 cv
412.719 16.641 412.699 16.586 412.699 16.508 cv
412.699 15.957 li
412.41 16.266 412.082 16.504 411.719 16.672 cv
411.352 16.844 410.945 16.926 410.5 16.93 cv
410.129 16.926 409.789 16.879 409.48 16.785 cv
409.172 16.691 408.906 16.551 408.68 16.355 cv
408.453 16.168 408.277 15.934 408.152 15.652 cv
408.027 15.375 407.965 15.047 407.969 14.668 cv
407.965 14.27 408.043 13.918 408.203 13.613 cv
408.359 13.316 408.598 13.07 408.914 12.875 cv
409.227 12.684 409.617 12.539 410.086 12.441 cv
410.555 12.352 411.098 12.305 411.715 12.301 cv
412.395 12.301 li
412.395 11.879 li
412.395 11.664 412.371 11.473 412.328 11.309 cv
412.281 11.148 412.207 11.012 412.109 10.898 cv
412.004 10.793 411.871 10.711 411.703 10.656 cv
411.531 10.605 411.32 10.582 411.078 10.578 cv
410.746 10.582 410.453 10.617 410.199 10.687 cv
409.938 10.762 409.711 10.844 409.516 10.93 cv
409.316 11.023 409.152 11.102 409.023 11.172 cv
408.887 11.246 408.777 11.285 408.699 11.281 cv
408.637 11.285 408.586 11.266 408.547 11.227 cv
408.5 11.191 408.465 11.141 408.438 11.07 cv
408.406 11.008 408.383 10.922 408.371 10.82 cv
408.352 10.723 408.344 10.613 408.348 10.492 cv
408.344 10.332 408.359 10.207 408.387 10.109 cv
408.41 10.02 408.457 9.93402 408.535 9.85498 cv
408.605 9.78101 408.734 9.69897 408.918 9.60901 cv
409.098 9.52002 409.309 9.43402 409.555 9.35498 cv
409.797 9.27698 410.066 9.21503 410.355 9.164 cv
410.645 9.117 410.941 9.09399 411.25 9.09003 cv
411.793 9.09399 412.258 9.14502 412.645 9.25 cv
413.031 9.35901 413.352 9.52301 413.602 9.742 cv
413.852 9.961 414.031 10.246 414.148 10.594 cv
414.258 10.945 414.316 11.359 414.32 11.832 cv
cp
412.395 13.531 mo
411.645 13.531 li
411.328 13.535 411.059 13.559 410.836 13.602 cv
410.609 13.652 410.426 13.723 410.289 13.812 cv
410.145 13.91 410.043 14.023 409.98 14.152 cv
409.914 14.289 409.879 14.437 409.883 14.605 cv
409.879 14.898 409.973 15.129 410.16 15.293 cv
410.344 15.461 410.602 15.543 410.93 15.543 cv
411.203 15.543 411.453 15.473 411.688 15.332 cv
411.914 15.191 412.152 14.988 412.395 14.715 cv
cp
f
422.543 10.016 mo
422.539 10.27 422.512 10.453 422.457 10.57 cv
422.398 10.691 422.328 10.75 422.25 10.75 cv
421.43 10.75 li
421.543 10.875 421.625 11.02 421.676 11.176 cv
421.723 11.336 421.746 11.5 421.75 11.668 cv
421.746 12.078 421.68 12.437 421.547 12.75 cv
421.41 13.066 421.215 13.332 420.965 13.543 cv
420.711 13.762 420.41 13.926 420.055 14.035 cv
419.695 14.152 419.297 14.207 418.867 14.203 cv
418.641 14.207 418.43 14.18 418.227 14.121 cv
418.023 14.07 417.867 14.008 417.758 13.93 cv
417.695 14 417.637 14.078 417.59 14.172 cv
417.539 14.266 417.516 14.371 417.52 14.48 cv
417.516 14.637 417.582 14.758 417.715 14.852 cv
417.844 14.949 418.031 15.004 418.273 15.012 cv
419.965 15.074 li
420.359 15.09 420.711 15.148 421.02 15.242 cv
421.328 15.344 421.59 15.477 421.801 15.648 cv
422.012 15.824 422.172 16.035 422.281 16.277 cv
422.391 16.523 422.445 16.797 422.449 17.109 cv
422.445 17.445 422.371 17.77 422.223 18.078 cv
422.074 18.379 421.848 18.641 421.547 18.867 cv
421.242 19.086 420.863 19.266 420.41 19.398 cv
419.953 19.527 419.422 19.59 418.82 19.594 cv
418.223 19.59 417.719 19.543 417.301 19.453 cv
416.883 19.355 416.539 19.227 416.273 19.062 cv
416.004 18.895 415.809 18.695 415.691 18.469 cv
415.566 18.234 415.508 17.98 415.508 17.707 cv
415.508 17.535 415.527 17.375 415.574 17.219 cv
415.613 17.062 415.68 16.91 415.77 16.77 cv
415.852 16.625 415.957 16.492 416.082 16.359 cv
416.207 16.23 416.348 16.105 416.512 15.984 cv
416.285 15.871 416.113 15.711 415.992 15.5 cv
415.871 15.297 415.813 15.07 415.813 14.824 cv
415.813 14.523 415.879 14.246 416.02 13.988 cv
416.156 13.738 416.34 13.508 416.566 13.305 cv
416.383 13.125 416.238 12.91 416.129 12.652 cv
416.02 12.402 415.965 12.082 415.969 11.699 cv
415.965 11.297 416.035 10.937 416.18 10.613 cv
416.32 10.297 416.52 10.027 416.777 9.80499 cv
417.031 9.586 417.336 9.414 417.688 9.297 cv
418.039 9.17999 418.43 9.12097 418.859 9.12097 cv
419.078 9.12097 419.285 9.13702 419.484 9.15997 cv
419.684 9.19098 419.871 9.22699 420.043 9.27002 cv
422.25 9.27002 li
422.332 9.27301 422.402 9.33197 422.461 9.44098 cv
422.512 9.55902 422.539 9.75 422.543 10.016 cv
cp
420.027 11.66 mo
420.023 11.289 419.922 11 419.715 10.789 cv
419.504 10.586 419.211 10.48 418.836 10.477 cv
418.641 10.48 418.469 10.512 418.328 10.574 cv
418.18 10.641 418.059 10.73 417.965 10.84 cv
417.863 10.953 417.793 11.082 417.75 11.23 cv
417.699 11.379 417.676 11.535 417.68 11.691 cv
417.676 12.051 417.781 12.328 417.992 12.531 cv
418.199 12.738 418.488 12.844 418.859 12.84 cv
419.055 12.844 419.223 12.812 419.371 12.746 cv
419.512 12.687 419.633 12.602 419.734 12.488 cv
419.828 12.383 419.902 12.254 419.953 12.109 cv
420 11.969 420.023 11.82 420.027 11.66 cv
cp
420.488 17.211 mo
420.488 16.973 420.395 16.797 420.207 16.672 cv
420.02 16.551 419.762 16.48 419.434 16.469 cv
418.039 16.43 li
417.902 16.531 417.793 16.625 417.715 16.715 cv
417.633 16.805 417.57 16.891 417.523 16.977 cv
417.473 17.059 417.438 17.141 417.426 17.219 cv
417.406 17.297 417.398 17.375 417.402 17.461 cv
417.398 17.715 417.531 17.914 417.793 18.051 cv
418.055 18.184 418.426 18.25 418.906 18.254 cv
419.199 18.25 419.445 18.219 419.652 18.164 cv
419.852 18.102 420.016 18.023 420.145 17.926 cv
420.266 17.824 420.355 17.715 420.41 17.594 cv
420.461 17.473 420.488 17.344 420.488 17.211 cv
cp
f
430.152 12.809 mo
430.148 13.047 430.098 13.223 429.992 13.336 cv
429.883 13.453 429.734 13.512 429.555 13.508 cv
425.32 13.508 li
425.316 13.809 425.352 14.078 425.426 14.316 cv
425.492 14.559 425.605 14.762 425.762 14.93 cv
425.914 15.102 426.109 15.23 426.352 15.316 cv
426.59 15.406 426.879 15.449 427.223 15.449 cv
427.563 15.449 427.863 15.426 428.125 15.375 cv
428.383 15.328 428.609 15.273 428.801 15.211 cv
428.988 15.152 429.145 15.098 429.273 15.047 cv
429.395 15 429.496 14.977 429.578 14.973 cv
429.621 14.977 429.66 14.984 429.695 15 cv
429.723 15.02 429.75 15.051 429.77 15.098 cv
429.789 15.145 429.801 15.211 429.813 15.297 cv
429.816 15.383 429.82 15.492 429.824 15.621 cv
429.82 15.738 429.82 15.836 429.816 15.914 cv
429.809 15.996 429.801 16.062 429.793 16.117 cv
429.781 16.176 429.766 16.227 429.746 16.262 cv
429.727 16.305 429.699 16.34 429.668 16.375 cv
429.633 16.414 429.539 16.465 429.391 16.523 cv
429.234 16.59 429.043 16.652 428.813 16.707 cv
428.574 16.77 428.305 16.816 428.008 16.863 cv
427.703 16.902 427.383 16.926 427.043 16.93 cv
426.422 16.926 425.879 16.852 425.418 16.695 cv
424.949 16.543 424.563 16.305 424.254 15.988 cv
423.938 15.672 423.703 15.273 423.555 14.789 cv
423.398 14.309 423.324 13.742 423.328 13.086 cv
423.324 12.473 423.402 11.914 423.566 11.418 cv
423.723 10.922 423.957 10.504 424.27 10.156 cv
424.574 9.81201 424.949 9.547 425.387 9.36298 cv
425.824 9.18402 426.316 9.09399 426.871 9.09003 cv
427.449 9.09399 427.949 9.17999 428.363 9.34802 cv
428.777 9.52301 429.113 9.76202 429.379 10.062 cv
429.641 10.367 429.836 10.727 429.965 11.141 cv
430.086 11.559 430.148 12.008 430.152 12.496 cv
cp
428.25 12.246 mo
428.262 11.695 428.152 11.262 427.918 10.949 cv
427.684 10.637 427.316 10.48 426.824 10.477 cv
426.574 10.48 426.359 10.527 426.176 10.617 cv
425.988 10.715 425.836 10.84 425.715 10.996 cv
425.59 11.156 425.496 11.344 425.434 11.559 cv
425.367 11.773 425.328 12.004 425.32 12.246 cv
cp
f
436.652 14.52 mo
436.648 14.918 436.574 15.266 436.43 15.566 cv
436.281 15.867 436.074 16.121 435.805 16.32 cv
435.531 16.527 435.211 16.676 434.844 16.777 cv
434.477 16.875 434.074 16.926 433.645 16.93 cv
433.379 16.926 433.133 16.906 432.898 16.871 cv
432.664 16.828 432.453 16.781 432.266 16.723 cv
432.078 16.664 431.922 16.602 431.797 16.539 cv
431.672 16.477 431.578 16.418 431.523 16.363 cv
431.465 16.309 431.422 16.227 431.395 16.109 cv
431.359 15.996 431.344 15.82 431.348 15.59 cv
431.344 15.441 431.352 15.32 431.363 15.227 cv
431.371 15.137 431.387 15.066 431.41 15.008 cv
431.43 14.957 431.453 14.918 431.488 14.898 cv
431.516 14.883 431.555 14.875 431.602 14.871 cv
431.656 14.875 431.742 14.906 431.855 14.969 cv
431.965 15.035 432.102 15.109 432.273 15.184 cv
432.438 15.266 432.633 15.336 432.852 15.402 cv
433.07 15.473 433.32 15.508 433.605 15.504 cv
433.781 15.508 433.938 15.488 434.078 15.449 cv
434.211 15.414 434.332 15.363 434.438 15.293 cv
434.535 15.227 434.609 15.141 434.664 15.035 cv
434.711 14.934 434.738 14.812 434.742 14.676 cv
434.738 14.52 434.691 14.387 434.598 14.277 cv
434.504 14.168 434.375 14.07 434.219 13.984 cv
434.055 13.902 433.875 13.824 433.68 13.75 cv
433.477 13.68 433.273 13.602 433.063 13.508 cv
432.852 13.422 432.645 13.32 432.449 13.203 cv
432.246 13.094 432.066 12.953 431.91 12.785 cv
431.746 12.621 431.621 12.422 431.527 12.184 cv
431.434 11.953 431.387 11.672 431.387 11.34 cv
431.387 11.012 431.449 10.707 431.578 10.426 cv
431.707 10.152 431.895 9.914 432.141 9.71503 cv
432.383 9.52002 432.68 9.367 433.031 9.25403 cv
433.379 9.14801 433.773 9.09399 434.215 9.09003 cv
434.43 9.09399 434.641 9.10901 434.848 9.13702 cv
435.051 9.172 435.238 9.211 435.406 9.25403 cv
435.57 9.30499 435.711 9.35498 435.828 9.40601 cv
435.941 9.46503 436.023 9.51202 436.074 9.547 cv
436.121 9.59003 436.156 9.62903 436.18 9.664 cv
436.199 9.70697 436.211 9.75403 436.223 9.80499 cv
436.23 9.85901 436.242 9.92603 436.25 10.004 cv
436.258 10.09 436.262 10.187 436.262 10.305 cv
436.262 10.445 436.258 10.562 436.25 10.648 cv
436.242 10.742 436.227 10.812 436.211 10.859 cv
436.191 10.914 436.168 10.949 436.141 10.965 cv
436.105 10.988 436.07 10.996 436.031 10.992 cv
435.98 10.996 435.906 10.969 435.813 10.91 cv
435.711 10.859 435.59 10.801 435.441 10.734 cv
435.293 10.676 435.121 10.617 434.926 10.559 cv
434.73 10.508 434.508 10.48 434.262 10.477 cv
434.082 10.48 433.93 10.5 433.801 10.531 cv
433.668 10.57 433.559 10.621 433.48 10.687 cv
433.395 10.758 433.332 10.836 433.293 10.926 cv
433.246 11.02 433.227 11.117 433.23 11.219 cv
433.227 11.379 433.277 11.516 433.379 11.621 cv
433.477 11.734 433.605 11.828 433.77 11.91 cv
433.93 11.996 434.113 12.074 434.32 12.145 cv
434.523 12.219 434.73 12.301 434.941 12.383 cv
435.148 12.473 435.355 12.57 435.566 12.684 cv
435.77 12.797 435.953 12.937 436.113 13.102 cv
436.273 13.27 436.402 13.469 436.504 13.699 cv
436.598 13.934 436.648 14.207 436.652 14.52 cv
cp
f
449.027 12.832 mo
449.023 13.133 448.996 13.344 448.941 13.461 cv
448.883 13.586 448.793 13.645 448.668 13.641 cv
445.426 13.641 li
445.297 13.645 445.203 13.582 445.148 13.457 cv
445.086 13.336 445.059 13.129 445.063 12.832 cv
445.059 12.543 445.086 12.336 445.148 12.215 cv
445.203 12.098 445.297 12.039 445.426 12.035 cv
448.668 12.035 li
448.73 12.039 448.781 12.051 448.828 12.074 cv
448.867 12.102 448.906 12.148 448.941 12.207 cv
448.969 12.273 448.992 12.355 449.008 12.457 cv
449.02 12.562 449.023 12.687 449.027 12.832 cv
cp
f
464.324 14.047 mo
464.324 14.508 464.242 14.914 464.086 15.27 cv
463.922 15.633 463.688 15.937 463.383 16.18 cv
463.07 16.43 462.688 16.613 462.234 16.738 cv
461.773 16.863 461.246 16.926 460.652 16.93 cv
460.078 16.926 459.578 16.867 459.148 16.758 cv
458.715 16.641 458.355 16.477 458.066 16.258 cv
457.773 16.039 457.555 15.766 457.41 15.437 cv
457.266 15.113 457.191 14.742 457.195 14.32 cv
457.191 14.035 457.234 13.766 457.324 13.512 cv
457.406 13.262 457.535 13.027 457.703 12.812 cv
457.871 12.598 458.082 12.395 458.336 12.203 cv
458.586 12.016 458.875 11.836 459.203 11.66 cv
458.938 11.516 458.699 11.359 458.488 11.191 cv
458.273 11.023 458.09 10.84 457.941 10.637 cv
457.789 10.441 457.676 10.223 457.598 9.97998 cv
457.52 9.74597 457.48 9.48401 457.484 9.19897 cv
457.48 8.797 457.551 8.42999 457.695 8.09802 cv
457.836 7.77002 458.051 7.48401 458.336 7.23798 cv
458.617 7 458.969 6.81201 459.398 6.68402 cv
459.82 6.55499 460.316 6.492 460.879 6.48798 cv
461.434 6.492 461.91 6.55103 462.309 6.66803 cv
462.707 6.789 463.031 6.95697 463.289 7.172 cv
463.539 7.39502 463.727 7.65601 463.852 7.95697 cv
463.969 8.26202 464.031 8.59802 464.035 8.96503 cv
464.031 9.211 463.992 9.44897 463.914 9.67999 cv
463.832 9.90997 463.719 10.129 463.574 10.336 cv
463.43 10.547 463.25 10.742 463.039 10.926 cv
462.824 11.113 462.582 11.281 462.313 11.426 cv
462.629 11.594 462.914 11.77 463.164 11.957 cv
463.414 12.145 463.621 12.348 463.793 12.562 cv
463.961 12.777 464.094 13.008 464.188 13.25 cv
464.277 13.5 464.324 13.766 464.324 14.047 cv
cp
462.066 9.15198 mo
462.063 8.97302 462.035 8.80902 461.988 8.65997 cv
461.934 8.51599 461.852 8.39502 461.742 8.29303 cv
461.625 8.19501 461.488 8.117 461.328 8.06201 cv
461.16 8.01202 460.965 7.98401 460.746 7.98401 cv
460.309 7.98401 459.984 8.086 459.773 8.28497 cv
459.555 8.48401 459.449 8.76202 459.453 9.11298 cv
459.449 9.28497 459.477 9.43701 459.535 9.57397 cv
459.586 9.71503 459.672 9.84802 459.789 9.96899 cv
459.902 10.098 460.051 10.219 460.234 10.336 cv
460.414 10.457 460.629 10.586 460.879 10.719 cv
461.258 10.5 461.551 10.262 461.758 10.004 cv
461.961 9.75403 462.063 9.46899 462.066 9.15198 cv
cp
462.297 14.187 mo
462.297 14 462.262 13.824 462.199 13.66 cv
462.133 13.504 462.035 13.352 461.898 13.211 cv
461.758 13.07 461.582 12.937 461.379 12.809 cv
461.168 12.68 460.926 12.547 460.652 12.41 cv
460.41 12.543 460.203 12.672 460.023 12.801 cv
459.84 12.93 459.688 13.066 459.57 13.207 cv
459.449 13.352 459.359 13.504 459.301 13.66 cv
459.238 13.824 459.207 13.992 459.211 14.172 cv
459.207 14.578 459.34 14.887 459.605 15.098 cv
459.867 15.312 460.258 15.422 460.777 15.418 cv
461.285 15.422 461.664 15.312 461.918 15.09 cv
462.168 14.875 462.297 14.574 462.297 14.187 cv
cp
f
476.273 7.508 mo
476.27 7.664 476.262 7.79303 476.254 7.89502 cv
476.238 8.00403 476.219 8.09003 476.195 8.15198 cv
476.164 8.21899 476.133 8.26599 476.098 8.29303 cv
476.055 8.328 476.012 8.34399 475.969 8.34003 cv
473.445 8.34003 li
473.445 16.469 li
473.445 16.523 473.426 16.57 473.395 16.609 cv
473.355 16.652 473.301 16.687 473.227 16.711 cv
473.145 16.738 473.039 16.758 472.91 16.773 cv
472.773 16.789 472.609 16.797 472.414 16.797 cv
472.219 16.797 472.055 16.789 471.922 16.773 cv
471.789 16.758 471.684 16.738 471.605 16.711 cv
471.527 16.687 471.469 16.652 471.438 16.609 cv
471.398 16.57 471.383 16.523 471.387 16.469 cv
471.387 8.34003 li
468.863 8.34003 li
468.809 8.34399 468.762 8.328 468.73 8.29303 cv
468.691 8.26599 468.66 8.21899 468.637 8.15198 cv
468.605 8.09003 468.586 8.00403 468.578 7.89502 cv
468.563 7.79303 468.559 7.664 468.559 7.508 cv
468.559 7.35498 468.563 7.22302 468.578 7.10901 cv
468.586 7.00403 468.605 6.914 468.637 6.84802 cv
468.66 6.78497 468.691 6.73798 468.73 6.70697 cv
468.762 6.67999 468.809 6.66803 468.863 6.664 cv
475.969 6.664 li
476.012 6.66803 476.055 6.67999 476.098 6.70697 cv
476.133 6.73798 476.164 6.78497 476.195 6.84802 cv
476.219 6.914 476.238 7.00403 476.254 7.10901 cv
476.262 7.22302 476.27 7.35498 476.273 7.508 cv
cp
f
483.988 16.484 mo
483.984 16.539 483.969 16.582 483.941 16.621 cv
483.906 16.66 483.855 16.695 483.785 16.719 cv
483.711 16.746 483.609 16.762 483.484 16.777 cv
483.355 16.789 483.199 16.797 483.016 16.797 cv
482.82 16.797 482.66 16.789 482.535 16.777 cv
482.406 16.762 482.305 16.746 482.234 16.719 cv
482.156 16.695 482.105 16.66 482.078 16.621 cv
482.043 16.582 482.027 16.539 482.031 16.484 cv
482.031 12.52 li
482.027 12.184 482.004 11.918 481.957 11.723 cv
481.906 11.531 481.832 11.367 481.742 11.23 cv
481.648 11.094 481.531 10.988 481.383 10.91 cv
481.234 10.836 481.059 10.797 480.863 10.797 cv
480.609 10.797 480.359 10.891 480.105 11.07 cv
479.852 11.254 479.586 11.516 479.313 11.863 cv
479.313 16.484 li
479.309 16.539 479.293 16.582 479.266 16.621 cv
479.23 16.66 479.176 16.695 479.105 16.719 cv
479.027 16.746 478.93 16.762 478.805 16.777 cv
478.68 16.789 478.52 16.797 478.332 16.797 cv
478.137 16.797 477.98 16.789 477.855 16.777 cv
477.73 16.762 477.629 16.746 477.555 16.719 cv
477.477 16.695 477.422 16.66 477.395 16.621 cv
477.359 16.582 477.344 16.539 477.348 16.484 cv
477.348 6.23798 li
477.344 6.18701 477.359 6.14099 477.395 6.09802 cv
477.422 6.05902 477.477 6.02301 477.555 5.992 cv
477.629 5.96503 477.73 5.94501 477.855 5.92603 cv
477.98 5.914 478.137 5.90601 478.332 5.90198 cv
478.52 5.90601 478.68 5.914 478.805 5.92603 cv
478.93 5.94501 479.027 5.96503 479.105 5.992 cv
479.176 6.02301 479.23 6.05902 479.266 6.09802 cv
479.293 6.14099 479.309 6.18701 479.313 6.23798 cv
479.313 10.078 li
479.648 9.75 479.992 9.50403 480.344 9.336 cv
480.691 9.17603 481.059 9.09399 481.441 9.09003 cv
481.91 9.09399 482.309 9.172 482.637 9.32397 cv
482.961 9.48401 483.223 9.69501 483.422 9.96503 cv
483.621 10.234 483.766 10.551 483.855 10.91 cv
483.941 11.273 483.984 11.711 483.988 12.223 cv
cp
f
490.387 10.18 mo
490.387 10.371 490.379 10.523 490.371 10.641 cv
490.355 10.762 490.34 10.855 490.324 10.922 cv
490.301 10.992 490.273 11.039 490.242 11.062 cv
490.203 11.09 490.16 11.102 490.113 11.102 cv
490.066 11.102 490.02 11.094 489.973 11.074 cv
489.918 11.059 489.859 11.039 489.797 11.016 cv
489.727 10.996 489.656 10.977 489.582 10.957 cv
489.5 10.941 489.414 10.934 489.324 10.93 cv
489.211 10.934 489.102 10.953 488.996 10.996 cv
488.887 11.043 488.773 11.113 488.66 11.203 cv
488.539 11.297 488.418 11.422 488.293 11.574 cv
488.164 11.734 488.027 11.926 487.883 12.152 cv
487.883 16.484 li
487.879 16.539 487.863 16.582 487.836 16.621 cv
487.801 16.66 487.746 16.695 487.676 16.719 cv
487.598 16.746 487.5 16.762 487.375 16.777 cv
487.25 16.789 487.09 16.797 486.902 16.797 cv
486.707 16.797 486.551 16.789 486.426 16.777 cv
486.301 16.762 486.199 16.746 486.125 16.719 cv
486.047 16.695 485.992 16.66 485.965 16.621 cv
485.93 16.582 485.914 16.539 485.918 16.484 cv
485.918 9.53497 li
485.914 9.48798 485.93 9.44098 485.957 9.39801 cv
485.98 9.36298 486.027 9.33197 486.098 9.30103 cv
486.164 9.27698 486.25 9.258 486.359 9.242 cv
486.465 9.23401 486.598 9.22699 486.762 9.22302 cv
486.926 9.22699 487.063 9.23401 487.172 9.242 cv
487.277 9.258 487.363 9.27698 487.426 9.30103 cv
487.484 9.33197 487.527 9.36298 487.555 9.39801 cv
487.578 9.44098 487.59 9.48798 487.594 9.53497 cv
487.594 10.398 li
487.773 10.141 487.945 9.92999 488.109 9.758 cv
488.266 9.59399 488.422 9.45697 488.57 9.35498 cv
488.715 9.258 488.859 9.19098 489.004 9.14801 cv
489.148 9.11298 489.293 9.09399 489.441 9.09003 cv
489.508 9.09399 489.582 9.09802 489.66 9.10199 cv
489.738 9.11298 489.816 9.125 489.902 9.14099 cv
489.98 9.15997 490.055 9.17999 490.121 9.203 cv
490.18 9.22699 490.227 9.25403 490.258 9.27698 cv
490.285 9.30902 490.305 9.336 490.32 9.36298 cv
490.332 9.39801 490.344 9.44098 490.355 9.492 cv
490.363 9.55103 490.371 9.633 490.379 9.73798 cv
490.383 9.84802 490.387 9.99597 490.387 10.18 cv
cp
f
497.828 12.809 mo
497.824 13.047 497.773 13.223 497.668 13.336 cv
497.559 13.453 497.41 13.512 497.23 13.508 cv
492.996 13.508 li
492.992 13.809 493.027 14.078 493.102 14.316 cv
493.168 14.559 493.281 14.762 493.438 14.93 cv
493.59 15.102 493.785 15.23 494.027 15.316 cv
494.266 15.406 494.555 15.449 494.898 15.449 cv
495.238 15.449 495.539 15.426 495.801 15.375 cv
496.059 15.328 496.285 15.273 496.477 15.211 cv
496.664 15.152 496.82 15.098 496.949 15.047 cv
497.07 15 497.172 14.977 497.254 14.973 cv
497.297 14.977 497.336 14.984 497.371 15 cv
497.398 15.02 497.426 15.051 497.445 15.098 cv
497.465 15.145 497.477 15.211 497.488 15.297 cv
497.492 15.383 497.496 15.492 497.5 15.621 cv
497.496 15.738 497.496 15.836 497.492 15.914 cv
497.484 15.996 497.477 16.062 497.469 16.117 cv
497.457 16.176 497.441 16.227 497.422 16.262 cv
497.402 16.305 497.375 16.34 497.344 16.375 cv
497.309 16.414 497.215 16.465 497.066 16.523 cv
496.91 16.59 496.719 16.652 496.488 16.707 cv
496.25 16.77 495.98 16.816 495.684 16.863 cv
495.379 16.902 495.059 16.926 494.719 16.93 cv
494.098 16.926 493.555 16.852 493.094 16.695 cv
492.625 16.543 492.238 16.305 491.93 15.988 cv
491.613 15.672 491.379 15.273 491.23 14.789 cv
491.074 14.309 491 13.742 491.004 13.086 cv
491 12.473 491.078 11.914 491.242 11.418 cv
491.398 10.922 491.633 10.504 491.945 10.156 cv
492.25 9.81201 492.625 9.547 493.063 9.36298 cv
493.5 9.18402 493.992 9.09399 494.547 9.09003 cv
495.125 9.09399 495.625 9.17999 496.039 9.34802 cv
496.453 9.52301 496.789 9.76202 497.055 10.062 cv
497.316 10.367 497.512 10.727 497.641 11.141 cv
497.762 11.559 497.824 12.008 497.828 12.496 cv
cp
495.926 12.246 mo
495.938 11.695 495.828 11.262 495.594 10.949 cv
495.359 10.637 494.992 10.48 494.5 10.477 cv
494.25 10.48 494.035 10.527 493.852 10.617 cv
493.664 10.715 493.512 10.84 493.391 10.996 cv
493.266 11.156 493.172 11.344 493.109 11.559 cv
493.043 11.773 493.004 12.004 492.996 12.246 cv
cp
f
505.363 16.508 mo
505.359 16.586 505.332 16.641 505.285 16.68 cv
505.23 16.723 505.148 16.75 505.039 16.77 cv
504.922 16.785 504.758 16.797 504.543 16.797 cv
504.305 16.797 504.133 16.785 504.031 16.77 cv
503.922 16.75 503.848 16.723 503.809 16.68 cv
503.762 16.641 503.742 16.586 503.742 16.508 cv
503.742 15.957 li
503.453 16.266 503.125 16.504 502.762 16.672 cv
502.395 16.844 501.988 16.926 501.543 16.93 cv
501.172 16.926 500.832 16.879 500.523 16.785 cv
500.215 16.691 499.949 16.551 499.723 16.355 cv
499.496 16.168 499.32 15.934 499.195 15.652 cv
499.07 15.375 499.008 15.047 499.012 14.668 cv
499.008 14.27 499.086 13.918 499.246 13.613 cv
499.402 13.316 499.641 13.07 499.957 12.875 cv
500.27 12.684 500.66 12.539 501.129 12.441 cv
501.598 12.352 502.141 12.305 502.758 12.301 cv
503.438 12.301 li
503.438 11.879 li
503.438 11.664 503.414 11.473 503.371 11.309 cv
503.324 11.148 503.25 11.012 503.152 10.898 cv
503.047 10.793 502.914 10.711 502.746 10.656 cv
502.574 10.605 502.363 10.582 502.121 10.578 cv
501.789 10.582 501.496 10.617 501.242 10.687 cv
500.98 10.762 500.754 10.844 500.559 10.93 cv
500.359 11.023 500.195 11.102 500.066 11.172 cv
499.93 11.246 499.82 11.285 499.742 11.281 cv
499.68 11.285 499.629 11.266 499.59 11.227 cv
499.543 11.191 499.508 11.141 499.48 11.07 cv
499.449 11.008 499.426 10.922 499.414 10.82 cv
499.395 10.723 499.387 10.613 499.391 10.492 cv
499.387 10.332 499.402 10.207 499.43 10.109 cv
499.453 10.02 499.5 9.93402 499.578 9.85498 cv
499.648 9.78101 499.777 9.69897 499.961 9.60901 cv
500.141 9.52002 500.352 9.43402 500.598 9.35498 cv
500.84 9.27698 501.109 9.21503 501.398 9.164 cv
501.688 9.117 501.984 9.09399 502.293 9.09003 cv
502.836 9.09399 503.301 9.14502 503.688 9.25 cv
504.074 9.35901 504.395 9.52301 504.645 9.742 cv
504.895 9.961 505.074 10.246 505.191 10.594 cv
505.301 10.945 505.359 11.359 505.363 11.832 cv
cp
503.438 13.531 mo
502.688 13.531 li
502.371 13.535 502.102 13.559 501.879 13.602 cv
501.652 13.652 501.469 13.723 501.332 13.812 cv
501.188 13.91 501.086 14.023 501.023 14.152 cv
500.957 14.289 500.922 14.437 500.926 14.605 cv
500.922 14.898 501.016 15.129 501.203 15.293 cv
501.387 15.461 501.645 15.543 501.973 15.543 cv
502.246 15.543 502.496 15.473 502.73 15.332 cv
502.957 15.191 503.195 14.988 503.438 14.715 cv
cp
f
513.945 16.484 mo
513.941 16.547 513.93 16.594 513.906 16.629 cv
513.879 16.672 513.832 16.703 513.773 16.727 cv
513.707 16.75 513.625 16.766 513.52 16.781 cv
513.414 16.789 513.281 16.797 513.129 16.797 cv
512.957 16.797 512.824 16.789 512.723 16.781 cv
512.617 16.766 512.531 16.75 512.469 16.727 cv
512.402 16.703 512.355 16.672 512.328 16.629 cv
512.297 16.594 512.281 16.547 512.285 16.484 cv
512.285 15.715 li
511.926 16.102 511.551 16.398 511.16 16.609 cv
510.762 16.82 510.328 16.926 509.855 16.93 cv
509.32 16.926 508.871 16.824 508.508 16.621 cv
508.141 16.418 507.844 16.145 507.613 15.793 cv
507.379 15.449 507.211 15.043 507.109 14.574 cv
507.008 14.113 506.957 13.621 506.957 13.102 cv
506.957 12.488 507.02 11.934 507.152 11.437 cv
507.281 10.945 507.477 10.523 507.734 10.176 cv
507.988 9.828 508.305 9.56201 508.684 9.37097 cv
509.063 9.18701 509.5 9.09399 509.996 9.09003 cv
510.383 9.09399 510.734 9.172 511.055 9.328 cv
511.367 9.48798 511.684 9.71899 511.996 10.023 cv
511.996 6.26202 li
511.996 6.211 512.008 6.164 512.039 6.12097 cv
512.063 6.08197 512.117 6.047 512.195 6.01599 cv
512.27 5.98798 512.367 5.96899 512.496 5.94897 cv
512.617 5.93701 512.777 5.92999 512.973 5.92603 cv
513.164 5.92999 513.32 5.93701 513.445 5.94897 cv
513.566 5.96899 513.668 5.98798 513.742 6.01599 cv
513.813 6.047 513.863 6.08197 513.898 6.12097 cv
513.926 6.164 513.941 6.211 513.945 6.26202 cv
cp
511.996 11.84 mo
511.715 11.488 511.445 11.219 511.191 11.031 cv
510.93 10.844 510.66 10.75 510.383 10.75 cv
510.129 10.75 509.91 10.816 509.727 10.941 cv
509.539 11.074 509.391 11.242 509.281 11.453 cv
509.168 11.664 509.086 11.902 509.031 12.164 cv
508.977 12.43 508.949 12.699 508.949 12.969 cv
508.949 13.266 508.973 13.547 509.02 13.82 cv
509.066 14.098 509.141 14.344 509.25 14.559 cv
509.352 14.773 509.496 14.945 509.676 15.074 cv
509.852 15.207 510.074 15.273 510.344 15.27 cv
510.477 15.273 510.605 15.254 510.738 15.211 cv
510.863 15.176 510.996 15.113 511.129 15.02 cv
511.262 14.934 511.398 14.816 511.539 14.672 cv
511.68 14.531 511.832 14.355 511.996 14.148 cv
cp
f
520.77 14.52 mo
520.766 14.918 520.691 15.266 520.547 15.566 cv
520.398 15.867 520.191 16.121 519.922 16.32 cv
519.648 16.527 519.328 16.676 518.961 16.777 cv
518.594 16.875 518.191 16.926 517.762 16.93 cv
517.496 16.926 517.25 16.906 517.016 16.871 cv
516.781 16.828 516.57 16.781 516.383 16.723 cv
516.195 16.664 516.039 16.602 515.914 16.539 cv
515.789 16.477 515.695 16.418 515.641 16.363 cv
515.582 16.309 515.539 16.227 515.512 16.109 cv
515.477 15.996 515.461 15.82 515.465 15.59 cv
515.461 15.441 515.469 15.32 515.48 15.227 cv
515.488 15.137 515.504 15.066 515.527 15.008 cv
515.547 14.957 515.57 14.918 515.605 14.898 cv
515.633 14.883 515.672 14.875 515.719 14.871 cv
515.773 14.875 515.859 14.906 515.973 14.969 cv
516.082 15.035 516.219 15.109 516.391 15.184 cv
516.555 15.266 516.75 15.336 516.969 15.402 cv
517.188 15.473 517.438 15.508 517.723 15.504 cv
517.898 15.508 518.055 15.488 518.195 15.449 cv
518.328 15.414 518.449 15.363 518.555 15.293 cv
518.652 15.227 518.727 15.141 518.781 15.035 cv
518.828 14.934 518.855 14.812 518.859 14.676 cv
518.855 14.52 518.809 14.387 518.715 14.277 cv
518.621 14.168 518.492 14.07 518.336 13.984 cv
518.172 13.902 517.992 13.824 517.797 13.75 cv
517.594 13.68 517.391 13.602 517.18 13.508 cv
516.969 13.422 516.762 13.32 516.566 13.203 cv
516.363 13.094 516.184 12.953 516.027 12.785 cv
515.863 12.621 515.738 12.422 515.645 12.184 cv
515.551 11.953 515.504 11.672 515.504 11.34 cv
515.504 11.012 515.566 10.707 515.695 10.426 cv
515.824 10.152 516.012 9.914 516.258 9.71503 cv
516.5 9.52002 516.797 9.367 517.148 9.25403 cv
517.496 9.14801 517.891 9.09399 518.332 9.09003 cv
518.547 9.09399 518.758 9.10901 518.965 9.13702 cv
519.168 9.172 519.355 9.211 519.523 9.25403 cv
519.688 9.30499 519.828 9.35498 519.945 9.40601 cv
520.059 9.46503 520.141 9.51202 520.191 9.547 cv
520.238 9.59003 520.273 9.62903 520.297 9.664 cv
520.316 9.70697 520.328 9.75403 520.34 9.80499 cv
520.348 9.85901 520.359 9.92603 520.367 10.004 cv
520.375 10.09 520.379 10.187 520.379 10.305 cv
520.379 10.445 520.375 10.562 520.367 10.648 cv
520.359 10.742 520.344 10.812 520.328 10.859 cv
520.309 10.914 520.285 10.949 520.258 10.965 cv
520.223 10.988 520.188 10.996 520.148 10.992 cv
520.098 10.996 520.023 10.969 519.93 10.91 cv
519.828 10.859 519.707 10.801 519.559 10.734 cv
519.41 10.676 519.238 10.617 519.043 10.559 cv
518.848 10.508 518.625 10.48 518.379 10.477 cv
518.199 10.48 518.047 10.5 517.918 10.531 cv
517.785 10.57 517.676 10.621 517.598 10.687 cv
517.512 10.758 517.449 10.836 517.41 10.926 cv
517.363 11.02 517.344 11.117 517.348 11.219 cv
517.344 11.379 517.395 11.516 517.496 11.621 cv
517.594 11.734 517.723 11.828 517.887 11.91 cv
518.047 11.996 518.23 12.074 518.438 12.145 cv
518.641 12.219 518.848 12.301 519.059 12.383 cv
519.266 12.473 519.473 12.57 519.684 12.684 cv
519.887 12.797 520.07 12.937 520.23 13.102 cv
520.391 13.27 520.52 13.469 520.621 13.699 cv
520.715 13.934 520.766 14.207 520.77 14.52 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
