%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SpeedupFourThread-Remote.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:49:30 PM
%%BoundingBox: 0 0 603 557
%%HiResBoundingBox: 0 0 602.0400 556.0800
%%CropBox: 0 0 602.0400 556.0800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -556.08 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 556.08 li
602.04 556.08 li
602.04 0 li
cp
clp
gsave
0 556.08 mo
603 556.08 li
603 -.920044 li
0 -.920044 li
cp
clp
0 -6.10352e-5 mo
602.039 -6.10352e-5 li
602.039 556.078 li
0 556.078 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
29.039 498.719 mo
588.961 498.719 li
29.039 466.078 mo
588.961 466.078 li
29.039 433.441 mo
588.961 433.441 li
29.039 400.801 mo
588.961 400.801 li
29.039 368.16 mo
588.961 368.16 li
29.039 335.52 mo
588.961 335.52 li
29.039 302.879 mo
588.961 302.879 li
29.039 270.238 mo
588.961 270.238 li
29.039 237.602 mo
588.961 237.602 li
29.039 204.961 mo
588.961 204.961 li
29.039 172.32 mo
588.961 172.32 li
29.039 139.68 mo
588.961 139.68 li
29.039 107.039 mo
588.961 107.039 li
29.039 74.3979 mo
588.961 74.3979 li
29.039 41.762 mo
588.961 41.762 li
.140414 .108034 .108034 0 cmyk
@
29.039 482.398 mo
588.961 482.398 li
29.039 449.762 mo
588.961 449.762 li
29.039 417.121 mo
588.961 417.121 li
29.039 384.481 mo
588.961 384.481 li
29.039 351.84 mo
588.961 351.84 li
29.039 319.199 mo
588.961 319.199 li
29.039 286.559 mo
588.961 286.559 li
29.039 253.922 mo
588.961 253.922 li
29.039 221.281 mo
588.961 221.281 li
29.039 188.641 mo
588.961 188.641 li
29.039 156 mo
588.961 156 li
29.039 123.359 mo
588.961 123.359 li
29.039 90.719 mo
588.961 90.719 li
29.039 58.0779 mo
588.961 58.0779 li
29.039 25.559 mo
588.961 25.559 li
.328344 .284215 .278569 .000915541 cmyk
@
64.078 25.559 mo
64.078 515.039 li
134.039 25.559 mo
134.039 515.039 li
204.121 25.559 mo
204.121 515.039 li
274.078 25.559 mo
274.078 515.039 li
344.039 25.559 mo
344.039 515.039 li
414 25.559 mo
414 515.039 li
483.961 25.559 mo
483.961 515.039 li
554.039 25.559 mo
554.039 515.039 li
.178592 .148898 .143923 0 cmyk
@
29.039 25.559 mo
29.039 515.039 li
99.121 25.559 mo
99.121 515.039 li
169.078 25.559 mo
169.078 515.039 li
239.039 25.559 mo
239.039 515.039 li
309 25.559 mo
309 515.039 li
379.078 25.559 mo
379.078 515.039 li
449.039 25.559 mo
449.039 515.039 li
519 25.559 mo
519 515.039 li
588.961 25.559 mo
588.961 515.039 li
.328344 .284215 .278569 .000915541 cmyk
@
11.879 507 mo
18 507 li
18 521.641 li
11.879 521.641 li
cp
0 0 0 0 cmyk
ef
11.879 474.359 mo
18 474.359 li
18 489.121 li
11.879 489.121 li
cp
ef
11.879 441.719 mo
18 441.719 li
18 456.481 li
11.879 456.481 li
cp
ef
11.879 409.078 mo
18 409.078 li
18 423.84 li
11.879 423.84 li
cp
ef
11.879 376.559 mo
18 376.559 li
18 391.2 li
11.879 391.2 li
cp
ef
11.879 343.922 mo
18 343.922 li
18 358.559 li
11.879 358.559 li
cp
ef
11.879 311.281 mo
18 311.281 li
18 325.922 li
11.879 325.922 li
cp
ef
11.879 278.641 mo
18 278.641 li
18 293.282 li
11.879 293.282 li
cp
ef
11.879 246 mo
18 246 li
18 260.641 li
11.879 260.641 li
cp
ef
5.762 213.359 mo
18 213.359 li
18 228 li
5.762 228 li
cp
ef
5.762 180.719 mo
18 180.719 li
18 195.36 li
5.762 195.36 li
cp
ef
5.762 148.078 mo
18 148.078 li
18 162.719 li
5.762 162.719 li
cp
ef
5.762 115.441 mo
18 115.441 li
18 130.078 li
5.762 130.078 li
cp
ef
5.762 82.801 mo
18 82.801 li
18 97.442 li
5.762 97.442 li
cp
ef
5.762 50.1599 mo
18 50.1599 li
18 64.8009 li
5.762 64.8009 li
cp
ef
5.762 17.52 mo
18 17.52 li
18 32.1609 li
5.762 32.1609 li
cp
ef
.96 lw
29.039 515.039 mo
588.961 515.039 li
.367803 .29575 .300999 .00198367 cmyk
@
29.039 515.039 mo
29.039 518.879 li
99.121 515.039 mo
99.121 518.879 li
169.078 515.039 mo
169.078 518.879 li
239.039 515.039 mo
239.039 518.879 li
309 515.039 mo
309 518.879 li
379.078 515.039 mo
379.078 518.879 li
449.039 515.039 mo
449.039 518.879 li
519 515.039 mo
519 518.879 li
588.961 515.039 mo
588.961 518.879 li
@
gsave
29.039 25.441 mo
589.68 25.441 li
589.68 515.64 li
29.039 515.64 li
cp
clp
1 lc
29.039 515.039 mo
99.121 493.441 li
169.078 439.32 li
239.039 439.32 li
309 412.199 li
379.078 378.359 li
449.039 418.68 li
519 472.441 li
588.961 429.84 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
23.969 509.84 mo
33.93 509.84 li
33.93 519.801 li
23.969 519.801 li
cp
.62768 .285466 0 0 cmyk
@
93.93 488.359 mo
103.891 488.359 li
103.891 498.32 li
93.93 498.32 li
cp
@
163.891 434.121 mo
173.852 434.121 li
173.852 444.078 li
163.891 444.078 li
cp
@
233.969 434.121 mo
243.93 434.121 li
243.93 444.078 li
233.969 444.078 li
cp
@
303.93 407.121 mo
313.891 407.121 li
313.891 417.078 li
303.93 417.078 li
cp
@
373.891 373.281 mo
383.852 373.281 li
383.852 383.238 li
373.891 383.238 li
cp
@
443.852 413.602 mo
453.809 413.602 li
453.809 423.559 li
443.852 423.559 li
cp
@
513.93 467.238 mo
523.891 467.238 li
523.891 477.199 li
513.93 477.199 li
cp
@
583.891 424.762 mo
593.852 424.762 li
593.852 434.719 li
583.891 434.719 li
cp
@
gsave
29.039 25.441 mo
589.68 25.441 li
589.68 515.64 li
29.039 515.64 li
cp
clp
.96 lw
1 lc
29.039 515.039 mo
99.121 476.641 li
169.078 445.078 li
239.039 437.16 li
309 419.398 li
379.078 404.039 li
449.039 308.398 li
519 372.602 li
588.961 342.48 li
.466651 0 .889799 0 cmyk
@
grestore
23.969 509.84 mo
33.93 509.84 li
33.93 519.801 li
23.969 519.801 li
cp
.466651 0 .889799 0 cmyk
@
93.93 471.441 mo
103.891 471.441 li
103.891 481.398 li
93.93 481.398 li
cp
@
163.891 440 mo
173.852 440 li
173.852 449.961 li
163.891 449.961 li
cp
@
233.969 432.078 mo
243.93 432.078 li
243.93 442.039 li
233.969 442.039 li
cp
@
303.93 414.32 mo
313.891 414.32 li
313.891 424.281 li
303.93 424.281 li
cp
@
373.891 398.961 mo
383.852 398.961 li
383.852 408.922 li
373.891 408.922 li
cp
@
443.852 303.199 mo
453.809 303.199 li
453.809 313.16 li
443.852 313.16 li
cp
@
513.93 367.398 mo
523.891 367.398 li
523.891 377.359 li
513.93 377.359 li
cp
@
583.891 337.398 mo
593.852 337.398 li
593.852 347.359 li
583.891 347.359 li
cp
@
gsave
29.039 25.441 mo
589.68 25.441 li
589.68 515.64 li
29.039 515.64 li
cp
clp
.96 lw
1 lc
29.039 515.039 mo
99.121 493.199 li
169.078 453.48 li
239.039 443.762 li
309 421.199 li
379.078 395.039 li
449.039 400.199 li
519 389.641 li
588.961 404.879 li
0 .990631 1 .000396735 cmyk
@
grestore
23.969 509.84 mo
33.93 509.84 li
33.93 519.801 li
23.969 519.801 li
cp
0 .990631 1 .000396735 cmyk
@
93.93 488 mo
103.891 488 li
103.891 497.961 li
93.93 497.961 li
cp
@
163.891 448.398 mo
173.852 448.398 li
173.852 458.359 li
163.891 458.359 li
cp
@
233.969 438.68 mo
243.93 438.68 li
243.93 448.641 li
233.969 448.641 li
cp
@
303.93 416.121 mo
313.891 416.121 li
313.891 426.078 li
303.93 426.078 li
cp
@
373.891 389.961 mo
383.852 389.961 li
383.852 399.922 li
373.891 399.922 li
cp
@
443.852 395 mo
453.809 395 li
453.809 404.961 li
443.852 404.961 li
cp
@
513.93 384.441 mo
523.891 384.441 li
523.891 394.398 li
513.93 394.398 li
cp
@
583.891 399.801 mo
593.852 399.801 li
593.852 409.762 li
583.891 409.762 li
cp
@
gsave
29.039 25.441 mo
589.68 25.441 li
589.68 515.64 li
29.039 515.64 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
29.039 515.039 mo
99.121 492 li
169.078 450.238 li
239.039 402.84 li
309 418.801 li
379.078 359.879 li
449.039 404.16 li
519 347.52 li
588.961 344.879 li
@
grestore
23.969 509.84 mo
33.93 509.84 li
33.93 519.801 li
23.969 519.801 li
cp
@
93.93 486.801 mo
103.891 486.801 li
103.891 496.762 li
93.93 496.762 li
cp
@
163.891 445.039 mo
173.852 445.039 li
173.852 455 li
163.891 455 li
cp
@
233.969 397.641 mo
243.93 397.641 li
243.93 407.602 li
233.969 407.602 li
cp
@
303.93 413.602 mo
313.891 413.602 li
313.891 423.559 li
303.93 423.559 li
cp
@
373.891 354.801 mo
383.852 354.801 li
383.852 364.762 li
373.891 364.762 li
cp
@
443.852 399.078 mo
453.809 399.078 li
453.809 409.039 li
443.852 409.039 li
cp
@
513.93 342.441 mo
523.891 342.441 li
523.891 352.398 li
513.93 352.398 li
cp
@
583.891 339.801 mo
593.852 339.801 li
593.852 349.762 li
583.891 349.762 li
cp
@
gsave
29.039 25.441 mo
589.68 25.441 li
589.68 515.64 li
29.039 515.64 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
29.039 515.039 mo
99.121 489.48 li
169.078 456 li
239.039 407.16 li
309 420.121 li
379.078 382.32 li
449.039 408.121 li
519 376.68 li
588.961 417.238 li
.62768 .285466 0 0 cmyk
@
grestore
23.969 509.84 mo
33.93 509.84 li
33.93 519.801 li
23.969 519.801 li
cp
.62768 .285466 0 0 cmyk
@
93.93 484.398 mo
103.891 484.398 li
103.891 494.359 li
93.93 494.359 li
cp
@
163.891 450.801 mo
173.852 450.801 li
173.852 460.762 li
163.891 460.762 li
cp
@
233.969 402.078 mo
243.93 402.078 li
243.93 412.039 li
233.969 412.039 li
cp
@
303.93 415.039 mo
313.891 415.039 li
313.891 425 li
303.93 425 li
cp
@
373.891 377.238 mo
383.852 377.238 li
383.852 387.199 li
373.891 387.199 li
cp
@
443.852 403.039 mo
453.809 403.039 li
453.809 413 li
443.852 413 li
cp
@
513.93 371.602 mo
523.891 371.602 li
523.891 381.559 li
513.93 381.559 li
cp
@
583.891 412.039 mo
593.852 412.039 li
593.852 422 li
583.891 422 li
cp
@
gsave
29.039 25.441 mo
589.68 25.441 li
589.68 515.64 li
29.039 515.64 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
29.039 515.039 mo
99.121 475.68 li
169.078 434.641 li
239.039 437.762 li
309 410.641 li
379.078 369.84 li
449.039 386.16 li
519 309.602 li
588.961 355.801 li
.466651 0 .889799 0 cmyk
@
grestore
24.449 510.32 mo
33.449 510.32 li
33.449 519.32 li
24.449 519.32 li
cp
.466651 0 .889799 0 cmyk
@
94.41 471.078 mo
103.41 471.078 li
103.41 480.078 li
94.41 480.078 li
cp
@
164.371 429.922 mo
173.371 429.922 li
173.371 438.922 li
164.371 438.922 li
cp
@
234.449 433.039 mo
243.449 433.039 li
243.449 442.039 li
234.449 442.039 li
cp
@
304.41 405.922 mo
313.41 405.922 li
313.41 414.922 li
304.41 414.922 li
cp
@
374.371 365.121 mo
383.371 365.121 li
383.371 374.121 li
374.371 374.121 li
cp
@
444.328 381.441 mo
453.328 381.441 li
453.328 390.441 li
444.328 390.441 li
cp
@
514.41 305 mo
523.41 305 li
523.41 314 li
514.41 314 li
cp
@
584.371 351.199 mo
593.371 351.199 li
593.371 360.199 li
584.371 360.199 li
cp
@
11.852 507.008 mo
17.93 507.008 li
17.93 521.656 li
11.852 521.656 li
cp
0 0 0 0 cmyk
ef
17.309 518.098 mo
17.305 518.172 17.301 518.234 17.293 518.285 cv
17.281 518.34 17.266 518.383 17.246 518.41 cv
17.223 518.445 17.199 518.469 17.176 518.477 cv
17.152 518.492 17.125 518.496 17.098 518.496 cv
13.137 518.496 li
13.109 518.496 13.086 518.492 13.063 518.477 cv
13.039 518.469 13.016 518.445 12.996 518.41 cv
12.973 518.383 12.957 518.34 12.945 518.285 cv
12.93 518.234 12.922 518.172 12.926 518.098 cv
12.922 518.027 12.93 517.969 12.945 517.918 cv
12.957 517.867 12.969 517.824 12.988 517.789 cv
13.004 517.758 13.027 517.734 13.051 517.715 cv
13.074 517.699 13.102 517.687 13.137 517.687 cv
14.723 517.687 li
14.723 511.922 li
13.254 512.793 li
13.18 512.84 13.121 512.863 13.078 512.867 cv
13.031 512.879 12.996 512.871 12.969 512.84 cv
12.938 512.816 12.918 512.773 12.91 512.715 cv
12.902 512.656 12.898 512.582 12.898 512.488 cv
12.898 512.426 12.898 512.367 12.906 512.32 cv
12.91 512.273 12.922 512.234 12.934 512.203 cv
12.941 512.172 12.957 512.145 12.98 512.121 cv
13.004 512.098 13.031 512.074 13.066 512.051 cv
14.816 510.934 li
14.828 510.922 14.848 510.91 14.875 510.902 cv
14.895 510.895 14.926 510.887 14.961 510.879 cv
14.992 510.871 15.031 510.867 15.082 510.867 cv
15.125 510.867 15.184 510.867 15.262 510.863 cv
15.352 510.867 15.43 510.871 15.496 510.875 cv
15.555 510.887 15.605 510.898 15.641 510.906 cv
15.672 510.922 15.695 510.937 15.711 510.957 cv
15.723 510.98 15.727 511.004 15.73 511.027 cv
15.73 517.687 li
17.098 517.687 li
17.125 517.687 17.156 517.699 17.188 517.715 cv
17.215 517.734 17.234 517.758 17.254 517.789 cv
17.27 517.824 17.285 517.867 17.293 517.918 cv
17.301 517.969 17.305 518.027 17.309 518.098 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
11.852 474.371 mo
17.93 474.371 li
17.93 489.019 li
11.852 489.019 li
cp
0 0 0 0 cmyk
ef
17.293 485.422 mo
17.293 485.492 17.285 485.555 17.277 485.609 cv
17.262 485.664 17.25 485.711 17.234 485.746 cv
17.219 485.785 17.195 485.812 17.164 485.828 cv
17.133 485.848 17.102 485.855 17.07 485.855 cv
12.879 485.855 li
12.824 485.855 12.777 485.852 12.738 485.836 cv
12.695 485.828 12.66 485.805 12.633 485.77 cv
12.602 485.742 12.578 485.695 12.566 485.633 cv
12.551 485.574 12.547 485.504 12.547 485.418 cv
12.547 485.344 12.547 485.273 12.555 485.211 cv
12.559 485.152 12.574 485.102 12.594 485.055 cv
12.613 485.012 12.637 484.969 12.668 484.922 cv
12.695 484.883 12.734 484.832 12.789 484.777 cv
14.305 483.219 li
14.652 482.859 14.93 482.539 15.145 482.254 cv
15.355 481.969 15.52 481.707 15.637 481.473 cv
15.746 481.238 15.824 481.027 15.863 480.836 cv
15.898 480.645 15.914 480.465 15.918 480.293 cv
15.914 480.129 15.887 479.969 15.832 479.816 cv
15.773 479.668 15.691 479.535 15.586 479.422 cv
15.477 479.312 15.344 479.223 15.184 479.152 cv
15.02 479.086 14.832 479.055 14.629 479.051 cv
14.379 479.055 14.16 479.086 13.965 479.152 cv
13.77 479.223 13.598 479.297 13.449 479.371 cv
13.301 479.453 13.176 479.523 13.082 479.586 cv
12.98 479.652 12.91 479.687 12.863 479.684 cv
12.832 479.687 12.805 479.68 12.785 479.66 cv
12.762 479.648 12.742 479.621 12.73 479.586 cv
12.715 479.555 12.707 479.508 12.699 479.445 cv
12.691 479.387 12.688 479.316 12.688 479.234 cv
12.688 479.176 12.688 479.125 12.691 479.082 cv
12.695 479.043 12.703 479.008 12.715 478.973 cv
12.723 478.945 12.734 478.914 12.754 478.883 cv
12.766 478.855 12.797 478.824 12.848 478.781 cv
12.891 478.742 12.973 478.684 13.09 478.613 cv
13.203 478.543 13.348 478.477 13.523 478.406 cv
13.695 478.34 13.887 478.281 14.098 478.23 cv
14.305 478.187 14.523 478.164 14.754 478.16 cv
15.121 478.164 15.441 478.215 15.719 478.316 cv
15.992 478.422 16.223 478.562 16.402 478.742 cv
16.582 478.922 16.719 479.133 16.813 479.371 cv
16.902 479.609 16.945 479.863 16.949 480.129 cv
16.945 480.379 16.926 480.621 16.883 480.855 cv
16.836 481.098 16.742 481.355 16.609 481.633 cv
16.469 481.914 16.27 482.227 16.008 482.566 cv
15.746 482.91 15.398 483.301 14.965 483.746 cv
13.766 485 li
17.066 485 li
17.094 485 17.125 485.012 17.156 485.027 cv
17.184 485.047 17.207 485.07 17.23 485.105 cv
17.246 485.145 17.262 485.191 17.277 485.238 cv
17.285 485.293 17.293 485.352 17.293 485.422 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
11.852 441.738 mo
17.93 441.738 li
17.93 456.39 li
11.852 456.39 li
cp
0 0 0 0 cmyk
ef
17.234 451.051 mo
17.234 451.398 17.172 451.715 17.051 451.992 cv
16.93 452.273 16.758 452.512 16.531 452.711 cv
16.305 452.91 16.023 453.062 15.691 453.168 cv
15.359 453.273 14.984 453.324 14.566 453.328 cv
14.313 453.324 14.074 453.305 13.855 453.266 cv
13.633 453.227 13.438 453.18 13.27 453.125 cv
13.094 453.07 12.953 453.012 12.84 452.949 cv
12.723 452.887 12.648 452.844 12.625 452.816 cv
12.594 452.789 12.574 452.762 12.559 452.734 cv
12.543 452.707 12.527 452.672 12.516 452.633 cv
12.504 452.594 12.496 452.547 12.488 452.492 cv
12.48 452.437 12.477 452.367 12.48 452.281 cv
12.477 452.141 12.492 452.043 12.523 451.988 cv
12.551 451.934 12.59 451.906 12.645 451.906 cv
12.68 451.906 12.75 451.937 12.855 452 cv
12.961 452.062 13.098 452.133 13.266 452.203 cv
13.43 452.281 13.625 452.348 13.848 452.406 cv
14.07 452.473 14.316 452.504 14.594 452.5 cv
14.852 452.504 15.086 452.469 15.289 452.398 cv
15.488 452.332 15.656 452.238 15.793 452.117 cv
15.93 452 16.031 451.859 16.102 451.687 cv
16.168 451.523 16.203 451.34 16.203 451.145 cv
16.203 450.93 16.156 450.738 16.07 450.562 cv
15.98 450.395 15.855 450.246 15.691 450.117 cv
15.523 449.996 15.316 449.898 15.074 449.832 cv
14.824 449.77 14.547 449.738 14.242 449.734 cv
13.5 449.734 li
13.465 449.738 13.434 449.73 13.402 449.715 cv
13.371 449.699 13.344 449.676 13.324 449.645 cv
13.301 449.613 13.281 449.574 13.27 449.523 cv
13.254 449.473 13.25 449.406 13.25 449.32 cv
13.25 449.25 13.254 449.187 13.266 449.137 cv
13.277 449.09 13.293 449.051 13.316 449.02 cv
13.332 448.992 13.359 448.973 13.391 448.957 cv
13.418 448.949 13.449 448.941 13.484 448.937 cv
14.145 448.937 li
14.402 448.941 14.633 448.906 14.84 448.836 cv
15.043 448.77 15.219 448.676 15.359 448.547 cv
15.5 448.426 15.609 448.277 15.688 448.102 cv
15.766 447.93 15.805 447.734 15.805 447.516 cv
15.805 447.363 15.777 447.215 15.727 447.07 cv
15.676 446.93 15.602 446.805 15.5 446.699 cv
15.398 446.594 15.266 446.512 15.109 446.449 cv
14.945 446.395 14.766 446.363 14.563 446.359 cv
14.336 446.363 14.125 446.398 13.938 446.461 cv
13.742 446.531 13.574 446.602 13.43 446.68 cv
13.277 446.758 13.156 446.832 13.063 446.898 cv
12.965 446.969 12.895 447.004 12.855 447 cv
12.828 447.004 12.805 447 12.785 446.988 cv
12.762 446.98 12.742 446.961 12.73 446.93 cv
12.715 446.902 12.707 446.859 12.699 446.805 cv
12.691 446.754 12.688 446.684 12.691 446.598 cv
12.688 446.539 12.691 446.488 12.699 446.441 cv
12.703 446.398 12.711 446.359 12.723 446.324 cv
12.73 446.293 12.742 446.262 12.762 446.234 cv
12.773 446.211 12.801 446.18 12.84 446.141 cv
12.879 446.102 12.953 446.047 13.066 445.977 cv
13.18 445.906 13.32 445.84 13.488 445.77 cv
13.652 445.703 13.844 445.645 14.063 445.594 cv
14.277 445.551 14.512 445.527 14.762 445.523 cv
15.113 445.527 15.422 445.57 15.688 445.66 cv
15.953 445.754 16.172 445.883 16.352 446.043 cv
16.527 446.211 16.66 446.406 16.75 446.633 cv
16.836 446.859 16.883 447.113 16.883 447.391 cv
16.883 447.629 16.852 447.852 16.789 448.055 cv
16.727 448.262 16.633 448.441 16.512 448.598 cv
16.391 448.758 16.242 448.895 16.066 449.004 cv
15.891 449.121 15.688 449.195 15.457 449.234 cv
15.457 449.246 li
15.719 449.277 15.957 449.344 16.176 449.445 cv
16.391 449.547 16.578 449.676 16.738 449.832 cv
16.891 449.988 17.012 450.172 17.102 450.383 cv
17.188 450.594 17.234 450.816 17.234 451.051 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
11.852 409.102 mo
17.93 409.102 li
17.93 423.75 li
11.852 423.75 li
cp
0 0 0 0 cmyk
ef
17.613 418.422 mo
17.609 418.555 17.59 418.656 17.555 418.727 cv
17.512 418.801 17.457 418.84 17.395 418.836 cv
16.535 418.836 li
16.535 420.43 li
16.531 420.465 16.523 420.492 16.512 420.512 cv
16.492 420.535 16.465 420.551 16.426 420.566 cv
16.387 420.582 16.332 420.594 16.27 420.602 cv
16.203 420.609 16.121 420.613 16.023 420.613 cv
15.922 420.613 15.844 420.609 15.781 420.602 cv
15.719 420.594 15.668 420.582 15.629 420.566 cv
15.59 420.551 15.563 420.535 15.547 420.512 cv
15.531 420.492 15.523 420.465 15.527 420.43 cv
15.527 418.836 li
12.426 418.836 li
12.379 418.84 12.344 418.832 12.313 418.82 cv
12.281 418.812 12.25 418.793 12.227 418.758 cv
12.195 418.73 12.18 418.684 12.172 418.621 cv
12.164 418.562 12.16 418.488 12.16 418.391 cv
12.16 418.32 12.16 418.254 12.164 418.195 cv
12.168 418.137 12.176 418.082 12.188 418.035 cv
12.199 417.988 12.215 417.941 12.234 417.895 cv
12.254 417.848 12.277 417.801 12.305 417.75 cv
15.008 413.141 li
15.027 413.113 15.055 413.086 15.094 413.059 cv
15.129 413.039 15.18 413.02 15.242 413 cv
15.301 412.988 15.371 412.977 15.461 412.969 cv
15.547 412.965 15.652 412.961 15.773 412.961 cv
15.902 412.961 16.016 412.969 16.113 412.977 cv
16.211 412.992 16.289 413.004 16.352 413.016 cv
16.406 413.035 16.453 413.055 16.488 413.078 cv
16.516 413.102 16.531 413.133 16.535 413.164 cv
16.535 418.008 li
17.395 418.008 li
17.457 418.012 17.512 418.047 17.551 418.109 cv
17.59 418.18 17.609 418.281 17.613 418.422 cv
cp
15.527 413.844 mo
15.52 413.844 li
13.082 418.008 li
15.527 418.008 li
cp
.629114 .553033 .543389 .289647 cmyk
f
11.852 376.461 mo
17.93 376.461 li
17.93 391.109 li
11.852 391.109 li
cp
0 0 0 0 cmyk
ef
17.258 385.504 mo
17.258 385.91 17.188 386.273 17.051 386.59 cv
16.914 386.906 16.723 387.172 16.473 387.391 cv
16.223 387.609 15.922 387.773 15.578 387.883 cv
15.227 387.992 14.844 388.047 14.426 388.051 cv
14.188 388.047 13.965 388.031 13.758 388 cv
13.543 387.969 13.355 387.93 13.195 387.883 cv
13.027 387.836 12.895 387.789 12.793 387.738 cv
12.688 387.695 12.617 387.656 12.59 387.625 cv
12.559 387.598 12.539 387.574 12.527 387.547 cv
12.516 387.527 12.504 387.5 12.496 387.465 cv
12.48 387.434 12.477 387.391 12.477 387.34 cv
12.473 387.289 12.469 387.227 12.473 387.156 cv
12.469 387.094 12.473 387.035 12.48 386.98 cv
12.484 386.926 12.496 386.883 12.512 386.852 cv
12.527 386.82 12.543 386.797 12.566 386.777 cv
12.582 386.766 12.609 386.758 12.641 386.754 cv
12.68 386.758 12.738 386.781 12.82 386.828 cv
12.902 386.875 13.012 386.93 13.152 386.984 cv
13.289 387.043 13.461 387.094 13.668 387.145 cv
13.871 387.199 14.117 387.227 14.398 387.223 cv
14.66 387.227 14.898 387.195 15.121 387.129 cv
15.336 387.07 15.523 386.973 15.684 386.836 cv
15.84 386.707 15.965 386.539 16.055 386.336 cv
16.145 386.133 16.191 385.887 16.191 385.598 cv
16.191 385.355 16.152 385.145 16.078 384.957 cv
16 384.773 15.883 384.617 15.727 384.492 cv
15.566 384.371 15.367 384.281 15.125 384.219 cv
14.883 384.164 14.594 384.133 14.258 384.129 cv
14.02 384.133 13.813 384.145 13.645 384.164 cv
13.469 384.191 13.309 384.203 13.16 384.199 cv
13.047 384.203 12.969 384.176 12.926 384.121 cv
12.875 384.07 12.852 383.973 12.855 383.828 cv
12.855 380.738 li
12.852 380.613 12.883 380.516 12.945 380.453 cv
13.008 380.391 13.094 380.359 13.207 380.359 cv
16.566 380.359 li
16.598 380.359 16.625 380.371 16.656 380.387 cv
16.68 380.406 16.707 380.43 16.73 380.465 cv
16.75 380.504 16.762 380.551 16.773 380.602 cv
16.781 380.66 16.789 380.723 16.789 380.793 cv
16.789 380.934 16.77 381.043 16.73 381.121 cv
16.691 381.199 16.637 381.238 16.574 381.238 cv
13.863 381.238 li
13.863 383.363 li
13.992 383.348 14.129 383.336 14.27 383.332 cv
14.406 383.328 14.563 383.324 14.746 383.324 cv
15.16 383.324 15.527 383.379 15.84 383.48 cv
16.152 383.59 16.41 383.734 16.621 383.922 cv
16.828 384.109 16.988 384.34 17.098 384.609 cv
17.203 384.879 17.258 385.176 17.258 385.504 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
11.852 343.828 mo
17.93 343.828 li
17.93 358.48 li
11.852 358.48 li
cp
0 0 0 0 cmyk
ef
17.488 352.848 mo
17.484 353.18 17.434 353.5 17.336 353.812 cv
17.23 354.125 17.074 354.398 16.867 354.633 cv
16.652 354.867 16.387 355.059 16.063 355.199 cv
15.734 355.34 15.352 355.406 14.914 355.41 cv
14.598 355.406 14.316 355.371 14.078 355.293 cv
13.832 355.219 13.621 355.105 13.445 354.961 cv
13.262 354.82 13.113 354.645 12.996 354.43 cv
12.875 354.223 12.777 353.98 12.707 353.707 cv
12.629 353.437 12.578 353.145 12.551 352.82 cv
12.516 352.504 12.5 352.16 12.504 351.793 cv
12.5 351.469 12.52 351.141 12.559 350.809 cv
12.594 350.477 12.656 350.156 12.746 349.848 cv
12.832 349.539 12.953 349.25 13.109 348.977 cv
13.266 348.707 13.457 348.469 13.691 348.266 cv
13.922 348.066 14.203 347.906 14.527 347.789 cv
14.848 347.672 15.223 347.613 15.66 347.613 cv
15.801 347.613 15.949 347.625 16.098 347.641 cv
16.246 347.664 16.383 347.687 16.508 347.711 cv
16.633 347.742 16.738 347.773 16.824 347.809 cv
16.91 347.844 16.965 347.871 16.992 347.895 cv
17.02 347.918 17.039 347.941 17.055 347.965 cv
17.063 347.988 17.074 348.016 17.086 348.047 cv
17.09 348.078 17.098 348.113 17.105 348.145 cv
17.109 348.184 17.109 348.227 17.113 348.281 cv
17.109 348.352 17.109 348.414 17.109 348.465 cv
17.105 348.516 17.098 348.555 17.086 348.586 cv
17.07 348.617 17.051 348.641 17.031 348.656 cv
17.008 348.672 16.98 348.68 16.949 348.68 cv
16.902 348.68 16.844 348.668 16.77 348.641 cv
16.695 348.613 16.605 348.582 16.5 348.547 cv
16.395 348.516 16.266 348.484 16.117 348.457 cv
15.965 348.434 15.793 348.422 15.594 348.418 cv
15.23 348.422 14.918 348.496 14.656 348.641 cv
14.391 348.793 14.176 348.992 14.012 349.238 cv
13.848 349.492 13.723 349.781 13.645 350.109 cv
13.563 350.437 13.52 350.781 13.508 351.141 cv
13.609 351.082 13.723 351.023 13.852 350.965 cv
13.977 350.91 14.113 350.859 14.266 350.809 cv
14.414 350.766 14.574 350.727 14.742 350.695 cv
14.91 350.664 15.09 350.648 15.285 350.648 cv
15.691 350.648 16.039 350.707 16.32 350.816 cv
16.602 350.93 16.828 351.082 17 351.277 cv
17.172 351.477 17.297 351.711 17.375 351.977 cv
17.449 352.25 17.484 352.539 17.488 352.848 cv
cp
16.465 352.941 mo
16.461 352.715 16.438 352.508 16.398 352.32 cv
16.352 352.137 16.277 351.98 16.172 351.852 cv
16.066 351.723 15.926 351.621 15.75 351.551 cv
15.574 351.48 15.359 351.445 15.102 351.445 cv
14.957 351.445 14.813 351.461 14.668 351.484 cv
14.52 351.512 14.379 351.547 14.246 351.59 cv
14.113 351.637 13.984 351.687 13.859 351.75 cv
13.734 351.812 13.621 351.879 13.527 351.941 cv
13.523 352.449 13.555 352.871 13.621 353.211 cv
13.684 353.551 13.777 353.824 13.902 354.027 cv
14.023 354.234 14.18 354.379 14.363 354.465 cv
14.543 354.555 14.758 354.598 15.008 354.598 cv
15.258 354.598 15.473 354.551 15.656 354.457 cv
15.84 354.363 15.992 354.238 16.113 354.078 cv
16.234 353.922 16.324 353.746 16.379 353.547 cv
16.434 353.352 16.461 353.148 16.465 352.941 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
11.852 311.191 mo
17.93 311.191 li
17.93 325.839 li
11.852 325.839 li
cp
0 0 0 0 cmyk
ef
17.402 315.512 mo
17.398 315.582 17.395 315.648 17.395 315.703 cv
17.387 315.762 17.379 315.816 17.371 315.867 cv
17.355 315.922 17.344 315.973 17.328 316.02 cv
17.313 316.07 17.293 316.121 17.27 316.176 cv
14.539 322.465 li
14.52 322.516 14.492 322.555 14.465 322.582 cv
14.434 322.613 14.398 322.637 14.352 322.652 cv
14.305 322.668 14.246 322.676 14.18 322.684 cv
14.105 322.691 14.02 322.695 13.926 322.695 cv
13.785 322.695 13.684 322.687 13.613 322.676 cv
13.539 322.664 13.484 322.648 13.453 322.621 cv
13.418 322.598 13.402 322.566 13.406 322.527 cv
13.41 322.492 13.426 322.449 13.449 322.395 cv
16.32 315.965 li
12.684 315.965 li
12.605 315.969 12.551 315.93 12.512 315.848 cv
12.473 315.773 12.453 315.664 12.457 315.52 cv
12.453 315.445 12.457 315.379 12.473 315.324 cv
12.48 315.27 12.496 315.227 12.516 315.187 cv
12.535 315.152 12.559 315.125 12.586 315.105 cv
12.613 315.09 12.645 315.078 12.684 315.078 cv
17.098 315.078 li
17.152 315.078 17.199 315.086 17.242 315.098 cv
17.281 315.109 17.313 315.133 17.336 315.168 cv
17.355 315.203 17.375 315.246 17.387 315.301 cv
17.395 315.355 17.398 315.426 17.402 315.512 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
11.852 278.559 mo
17.93 278.559 li
17.93 293.211 li
11.852 293.211 li
cp
0 0 0 0 cmyk
ef
17.469 288.074 mo
17.469 288.402 17.41 288.695 17.293 288.949 cv
17.176 289.207 17.004 289.422 16.785 289.598 cv
16.563 289.777 16.293 289.91 15.969 289.996 cv
15.641 290.082 15.27 290.125 14.855 290.129 cv
14.465 290.125 14.113 290.086 13.805 290.008 cv
13.496 289.93 13.234 289.809 13.02 289.645 cv
12.805 289.484 12.641 289.289 12.527 289.051 cv
12.414 288.82 12.359 288.551 12.359 288.25 cv
12.359 288.016 12.398 287.797 12.477 287.594 cv
12.555 287.395 12.664 287.211 12.813 287.043 cv
12.957 286.879 13.141 286.723 13.355 286.574 cv
13.566 286.426 13.809 286.285 14.082 286.152 cv
13.848 286.035 13.641 285.91 13.461 285.77 cv
13.281 285.637 13.129 285.488 13.004 285.328 cv
12.879 285.172 12.781 285.004 12.719 284.82 cv
12.648 284.645 12.617 284.449 12.621 284.238 cv
12.617 283.977 12.664 283.727 12.766 283.492 cv
12.859 283.258 13.004 283.055 13.199 282.883 cv
13.387 282.711 13.633 282.578 13.938 282.477 cv
14.234 282.379 14.586 282.328 14.984 282.324 cv
15.367 282.328 15.695 282.375 15.977 282.465 cv
16.25 282.559 16.48 282.684 16.668 282.84 cv
16.848 283 16.984 283.184 17.07 283.398 cv
17.156 283.617 17.199 283.848 17.199 284.09 cv
17.199 284.289 17.164 284.48 17.102 284.664 cv
17.031 284.852 16.938 285.027 16.816 285.187 cv
16.688 285.355 16.535 285.508 16.355 285.648 cv
16.176 285.789 15.969 285.922 15.734 286.047 cv
16.012 286.187 16.258 286.328 16.477 286.469 cv
16.691 286.613 16.871 286.77 17.02 286.934 cv
17.16 287.102 17.273 287.277 17.352 287.461 cv
17.43 287.648 17.469 287.852 17.469 288.074 cv
cp
16.203 284.184 mo
16.203 284.02 16.172 283.871 16.117 283.738 cv
16.059 283.605 15.977 283.492 15.871 283.398 cv
15.758 283.305 15.621 283.234 15.461 283.187 cv
15.297 283.141 15.113 283.117 14.91 283.113 cv
14.484 283.117 14.164 283.211 13.949 283.398 cv
13.73 283.59 13.625 283.852 13.625 284.184 cv
13.625 284.336 13.648 284.48 13.703 284.609 cv
13.754 284.742 13.836 284.863 13.949 284.98 cv
14.059 285.098 14.199 285.215 14.371 285.324 cv
14.539 285.437 14.742 285.551 14.98 285.672 cv
15.371 285.469 15.676 285.246 15.887 285 cv
16.098 284.754 16.203 284.48 16.203 284.184 cv
cp
16.449 288.18 mo
16.449 288 16.414 287.84 16.348 287.691 cv
16.281 287.551 16.18 287.414 16.047 287.281 cv
15.91 287.156 15.742 287.031 15.543 286.91 cv
15.34 286.793 15.109 286.668 14.844 286.539 cv
14.594 286.664 14.375 286.785 14.195 286.902 cv
14.008 287.023 13.855 287.148 13.738 287.277 cv
13.613 287.41 13.523 287.547 13.469 287.687 cv
13.406 287.828 13.379 287.984 13.379 288.156 cv
13.379 288.535 13.508 288.828 13.77 289.035 cv
14.027 289.246 14.414 289.352 14.934 289.348 cv
15.43 289.352 15.809 289.246 16.066 289.035 cv
16.32 288.824 16.449 288.539 16.449 288.18 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
11.852 245.922 mo
17.93 245.922 li
17.93 260.57 li
11.852 260.57 li
cp
0 0 0 0 cmyk
ef
17.352 253.289 mo
17.352 253.617 17.332 253.949 17.293 254.285 cv
17.254 254.621 17.188 254.945 17.094 255.258 cv
17 255.57 16.871 255.863 16.715 256.129 cv
16.555 256.402 16.355 256.637 16.117 256.84 cv
15.875 257.043 15.59 257.203 15.262 257.316 cv
14.93 257.43 14.547 257.484 14.113 257.488 cv
13.941 257.484 13.777 257.473 13.621 257.457 cv
13.461 257.434 13.32 257.41 13.195 257.379 cv
13.066 257.348 12.961 257.316 12.875 257.281 cv
12.789 257.246 12.727 257.211 12.688 257.176 cv
12.648 257.141 12.617 257.094 12.602 257.031 cv
12.578 256.977 12.57 256.895 12.574 256.785 cv
12.57 256.707 12.574 256.637 12.582 256.582 cv
12.59 256.531 12.598 256.492 12.609 256.465 cv
12.621 256.441 12.637 256.426 12.66 256.41 cv
12.676 256.402 12.703 256.395 12.738 256.395 cv
12.781 256.395 12.844 256.41 12.922 256.437 cv
13 256.469 13.098 256.5 13.215 256.535 cv
13.332 256.574 13.473 256.609 13.637 256.633 cv
13.797 256.664 13.977 256.676 14.176 256.676 cv
14.555 256.676 14.879 256.605 15.152 256.457 cv
15.422 256.316 15.645 256.117 15.816 255.867 cv
15.988 255.621 16.117 255.336 16.203 255.012 cv
16.289 254.691 16.336 254.352 16.344 253.988 cv
16.137 254.109 15.887 254.215 15.602 254.309 cv
15.309 254.402 14.977 254.449 14.605 254.449 cv
14.18 254.449 13.824 254.395 13.539 254.277 cv
13.25 254.168 13.02 254.008 12.848 253.805 cv
12.672 253.605 12.547 253.371 12.473 253.094 cv
12.395 252.824 12.359 252.523 12.359 252.199 cv
12.359 251.863 12.406 251.547 12.504 251.242 cv
12.602 250.941 12.754 250.672 12.961 250.441 cv
13.168 250.215 13.434 250.031 13.754 249.891 cv
14.074 249.754 14.457 249.687 14.902 249.684 cv
15.219 249.687 15.496 249.727 15.742 249.805 cv
15.984 249.887 16.199 250.004 16.379 250.152 cv
16.559 250.309 16.711 250.488 16.836 250.699 cv
16.961 250.91 17.059 251.152 17.137 251.422 cv
17.211 251.691 17.266 251.984 17.301 252.297 cv
17.332 252.617 17.352 252.945 17.352 253.289 cv
cp
16.324 253.176 mo
16.32 252.68 16.289 252.258 16.227 251.914 cv
16.16 251.574 16.063 251.297 15.934 251.086 cv
15.801 250.875 15.641 250.723 15.457 250.629 cv
15.266 250.535 15.051 250.488 14.809 250.488 cv
14.551 250.488 14.332 250.535 14.156 250.625 cv
13.973 250.719 13.824 250.844 13.715 250.996 cv
13.598 251.152 13.516 251.324 13.461 251.52 cv
13.406 251.715 13.379 251.918 13.379 252.121 cv
13.379 252.355 13.402 252.566 13.453 252.758 cv
13.5 252.949 13.578 253.109 13.691 253.242 cv
13.797 253.375 13.941 253.48 14.117 253.551 cv
14.289 253.629 14.504 253.664 14.77 253.66 cv
15.059 253.664 15.344 253.621 15.617 253.527 cv
15.891 253.441 16.125 253.324 16.324 253.176 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
5.77 213.289 mo
17.93 213.289 li
17.93 227.941 li
5.77 227.941 li
cp
0 0 0 0 cmyk
ef
11.211 224.34 mo
11.207 224.414 11.203 224.477 11.195 224.527 cv
11.184 224.582 11.168 224.625 11.148 224.652 cv
11.125 224.687 11.102 224.711 11.078 224.719 cv
11.055 224.734 11.027 224.738 11 224.738 cv
7.039 224.738 li
7.012 224.738 6.988 224.734 6.965 224.719 cv
6.941 224.711 6.918 224.687 6.898 224.652 cv
6.875 224.625 6.859 224.582 6.848 224.527 cv
6.832 224.477 6.824 224.414 6.828 224.34 cv
6.824 224.27 6.832 224.211 6.848 224.16 cv
6.859 224.109 6.871 224.066 6.891 224.031 cv
6.906 224 6.93 223.977 6.953 223.957 cv
6.977 223.941 7.004 223.93 7.039 223.93 cv
8.625 223.93 li
8.625 218.164 li
7.156 219.035 li
7.082 219.082 7.023 219.105 6.98 219.109 cv
6.934 219.121 6.898 219.113 6.871 219.082 cv
6.84 219.059 6.82 219.016 6.813 218.957 cv
6.805 218.898 6.801 218.824 6.801 218.73 cv
6.801 218.668 6.801 218.609 6.809 218.562 cv
6.813 218.516 6.824 218.477 6.836 218.445 cv
6.844 218.414 6.859 218.387 6.883 218.363 cv
6.906 218.34 6.934 218.316 6.969 218.293 cv
8.719 217.176 li
8.73 217.164 8.75 217.152 8.777 217.145 cv
8.797 217.137 8.828 217.129 8.863 217.121 cv
8.895 217.113 8.934 217.109 8.984 217.109 cv
9.027 217.109 9.086 217.109 9.164 217.105 cv
9.254 217.109 9.332 217.113 9.398 217.117 cv
9.457 217.129 9.508 217.141 9.543 217.148 cv
9.574 217.164 9.598 217.18 9.613 217.199 cv
9.625 217.223 9.629 217.246 9.633 217.27 cv
9.633 223.93 li
11 223.93 li
11.027 223.93 11.059 223.941 11.09 223.957 cv
11.117 223.977 11.137 224 11.156 224.031 cv
11.172 224.066 11.188 224.109 11.195 224.16 cv
11.203 224.211 11.207 224.27 11.211 224.34 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.563 220.93 mo
17.559 221.512 17.512 222.043 17.426 222.523 cv
17.332 223.008 17.18 223.422 16.969 223.766 cv
16.75 224.109 16.473 224.379 16.133 224.566 cv
15.785 224.754 15.363 224.844 14.863 224.848 cv
14.387 224.844 13.984 224.762 13.66 224.594 cv
13.332 224.426 13.07 224.176 12.871 223.844 cv
12.668 223.516 12.523 223.109 12.445 222.625 cv
12.359 222.145 12.32 221.59 12.32 220.965 cv
12.32 220.387 12.367 219.859 12.461 219.375 cv
12.555 218.898 12.707 218.484 12.918 218.133 cv
13.129 217.789 13.406 217.52 13.75 217.328 cv
14.094 217.141 14.516 217.047 15.016 217.043 cv
15.492 217.047 15.895 217.133 16.223 217.301 cv
16.551 217.473 16.813 217.723 17.012 218.051 cv
17.211 218.383 17.352 218.789 17.438 219.27 cv
17.516 219.754 17.559 220.305 17.563 220.93 cv
cp
16.531 221 mo
16.527 220.625 16.516 220.285 16.492 219.98 cv
16.465 219.68 16.422 219.414 16.371 219.184 cv
16.316 218.957 16.25 218.762 16.164 218.59 cv
16.078 218.426 15.977 218.289 15.863 218.18 cv
15.742 218.078 15.609 218 15.461 217.945 cv
15.313 217.898 15.145 217.871 14.957 217.871 cv
14.625 217.871 14.355 217.949 14.148 218.105 cv
13.938 218.262 13.773 218.477 13.656 218.75 cv
13.539 219.023 13.457 219.344 13.414 219.711 cv
13.371 220.078 13.352 220.473 13.352 220.895 cv
13.352 221.465 13.379 221.949 13.438 222.34 cv
13.496 222.738 13.59 223.059 13.715 223.309 cv
13.84 223.559 14 223.742 14.203 223.855 cv
14.398 223.969 14.641 224.023 14.922 224.023 cv
15.141 224.023 15.332 223.988 15.5 223.918 cv
15.664 223.848 15.805 223.75 15.926 223.617 cv
16.043 223.488 16.145 223.328 16.223 223.145 cv
16.301 222.965 16.363 222.762 16.41 222.535 cv
16.457 222.312 16.488 222.074 16.504 221.812 cv
16.52 221.555 16.527 221.281 16.531 221 cv
cp
f
5.77 180.648 mo
17.93 180.648 li
17.93 195.3 li
5.77 195.3 li
cp
0 0 0 0 cmyk
ef
11.211 191.703 mo
11.207 191.777 11.203 191.84 11.195 191.891 cv
11.184 191.945 11.168 191.988 11.148 192.016 cv
11.125 192.051 11.102 192.074 11.078 192.082 cv
11.055 192.098 11.027 192.102 11 192.102 cv
7.039 192.102 li
7.012 192.102 6.988 192.098 6.965 192.082 cv
6.941 192.074 6.918 192.051 6.898 192.016 cv
6.875 191.988 6.859 191.945 6.848 191.891 cv
6.832 191.84 6.824 191.777 6.828 191.703 cv
6.824 191.633 6.832 191.574 6.848 191.523 cv
6.859 191.473 6.871 191.43 6.891 191.395 cv
6.906 191.363 6.93 191.34 6.953 191.32 cv
6.977 191.305 7.004 191.293 7.039 191.293 cv
8.625 191.293 li
8.625 185.527 li
7.156 186.398 li
7.082 186.445 7.023 186.469 6.98 186.473 cv
6.934 186.484 6.898 186.477 6.871 186.445 cv
6.84 186.422 6.82 186.379 6.813 186.32 cv
6.805 186.262 6.801 186.187 6.801 186.094 cv
6.801 186.031 6.801 185.973 6.809 185.926 cv
6.813 185.879 6.824 185.84 6.836 185.809 cv
6.844 185.777 6.859 185.75 6.883 185.727 cv
6.906 185.703 6.934 185.68 6.969 185.656 cv
8.719 184.539 li
8.73 184.527 8.75 184.516 8.777 184.508 cv
8.797 184.5 8.828 184.492 8.863 184.484 cv
8.895 184.477 8.934 184.473 8.984 184.473 cv
9.027 184.473 9.086 184.473 9.164 184.469 cv
9.254 184.473 9.332 184.477 9.398 184.48 cv
9.457 184.492 9.508 184.504 9.543 184.512 cv
9.574 184.527 9.598 184.543 9.613 184.562 cv
9.625 184.586 9.629 184.609 9.633 184.633 cv
9.633 191.293 li
11 191.293 li
11.027 191.293 11.059 191.305 11.09 191.32 cv
11.117 191.34 11.137 191.363 11.156 191.395 cv
11.172 191.43 11.188 191.473 11.195 191.523 cv
11.203 191.574 11.207 191.633 11.211 191.703 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.328 191.703 mo
17.324 191.777 17.32 191.84 17.313 191.891 cv
17.301 191.945 17.285 191.988 17.266 192.016 cv
17.242 192.051 17.219 192.074 17.195 192.082 cv
17.172 192.098 17.145 192.102 17.117 192.102 cv
13.156 192.102 li
13.129 192.102 13.105 192.098 13.082 192.082 cv
13.059 192.074 13.035 192.051 13.016 192.016 cv
12.992 191.988 12.977 191.945 12.965 191.891 cv
12.949 191.84 12.941 191.777 12.945 191.703 cv
12.941 191.633 12.949 191.574 12.965 191.523 cv
12.977 191.473 12.988 191.43 13.008 191.395 cv
13.023 191.363 13.047 191.34 13.07 191.32 cv
13.094 191.305 13.121 191.293 13.156 191.293 cv
14.742 191.293 li
14.742 185.527 li
13.273 186.398 li
13.199 186.445 13.141 186.469 13.098 186.473 cv
13.051 186.484 13.016 186.477 12.988 186.445 cv
12.957 186.422 12.938 186.379 12.93 186.32 cv
12.922 186.262 12.918 186.187 12.918 186.094 cv
12.918 186.031 12.918 185.973 12.926 185.926 cv
12.93 185.879 12.941 185.84 12.953 185.809 cv
12.961 185.777 12.977 185.75 13 185.727 cv
13.023 185.703 13.051 185.68 13.086 185.656 cv
14.836 184.539 li
14.848 184.527 14.867 184.516 14.895 184.508 cv
14.914 184.5 14.945 184.492 14.98 184.484 cv
15.012 184.477 15.051 184.473 15.102 184.473 cv
15.145 184.473 15.203 184.473 15.281 184.469 cv
15.371 184.473 15.449 184.477 15.516 184.48 cv
15.574 184.492 15.625 184.504 15.66 184.512 cv
15.691 184.527 15.715 184.543 15.73 184.562 cv
15.742 184.586 15.746 184.609 15.75 184.633 cv
15.75 191.293 li
17.117 191.293 li
17.145 191.293 17.176 191.305 17.207 191.32 cv
17.234 191.34 17.254 191.363 17.273 191.395 cv
17.289 191.43 17.305 191.473 17.313 191.523 cv
17.32 191.574 17.324 191.633 17.328 191.703 cv
cp
f
5.77 148.02 mo
17.93 148.02 li
17.93 162.672 li
5.77 162.672 li
cp
0 0 0 0 cmyk
ef
11.211 159.062 mo
11.207 159.137 11.203 159.199 11.195 159.25 cv
11.184 159.305 11.168 159.348 11.148 159.375 cv
11.125 159.41 11.102 159.434 11.078 159.441 cv
11.055 159.457 11.027 159.461 11 159.461 cv
7.039 159.461 li
7.012 159.461 6.988 159.457 6.965 159.441 cv
6.941 159.434 6.918 159.41 6.898 159.375 cv
6.875 159.348 6.859 159.305 6.848 159.25 cv
6.832 159.199 6.824 159.137 6.828 159.062 cv
6.824 158.992 6.832 158.934 6.848 158.883 cv
6.859 158.832 6.871 158.789 6.891 158.754 cv
6.906 158.723 6.93 158.699 6.953 158.68 cv
6.977 158.664 7.004 158.652 7.039 158.652 cv
8.625 158.652 li
8.625 152.887 li
7.156 153.758 li
7.082 153.805 7.023 153.828 6.98 153.832 cv
6.934 153.844 6.898 153.836 6.871 153.805 cv
6.84 153.781 6.82 153.738 6.813 153.68 cv
6.805 153.621 6.801 153.547 6.801 153.453 cv
6.801 153.391 6.801 153.332 6.809 153.285 cv
6.813 153.238 6.824 153.199 6.836 153.168 cv
6.844 153.137 6.859 153.109 6.883 153.086 cv
6.906 153.062 6.934 153.039 6.969 153.016 cv
8.719 151.898 li
8.73 151.887 8.75 151.875 8.777 151.867 cv
8.797 151.859 8.828 151.852 8.863 151.844 cv
8.895 151.836 8.934 151.832 8.984 151.832 cv
9.027 151.832 9.086 151.832 9.164 151.828 cv
9.254 151.832 9.332 151.836 9.398 151.84 cv
9.457 151.852 9.508 151.863 9.543 151.871 cv
9.574 151.887 9.598 151.902 9.613 151.922 cv
9.625 151.945 9.629 151.969 9.633 151.992 cv
9.633 158.652 li
11 158.652 li
11.027 158.652 11.059 158.664 11.09 158.68 cv
11.117 158.699 11.137 158.723 11.156 158.754 cv
11.172 158.789 11.188 158.832 11.195 158.883 cv
11.203 158.934 11.207 158.992 11.211 159.062 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.313 159.027 mo
17.313 159.098 17.305 159.16 17.297 159.215 cv
17.281 159.27 17.27 159.316 17.254 159.352 cv
17.238 159.391 17.215 159.418 17.184 159.434 cv
17.152 159.453 17.121 159.461 17.09 159.461 cv
12.898 159.461 li
12.844 159.461 12.797 159.457 12.758 159.441 cv
12.715 159.434 12.68 159.41 12.652 159.375 cv
12.621 159.348 12.598 159.301 12.586 159.238 cv
12.57 159.18 12.566 159.109 12.566 159.023 cv
12.566 158.949 12.566 158.879 12.574 158.816 cv
12.578 158.758 12.594 158.707 12.613 158.66 cv
12.633 158.617 12.656 158.574 12.688 158.527 cv
12.715 158.488 12.754 158.437 12.809 158.383 cv
14.324 156.824 li
14.672 156.465 14.949 156.145 15.164 155.859 cv
15.375 155.574 15.539 155.312 15.656 155.078 cv
15.766 154.844 15.844 154.633 15.883 154.441 cv
15.918 154.25 15.934 154.07 15.938 153.898 cv
15.934 153.734 15.906 153.574 15.852 153.422 cv
15.793 153.273 15.711 153.141 15.605 153.027 cv
15.496 152.918 15.363 152.828 15.203 152.758 cv
15.039 152.691 14.852 152.66 14.648 152.656 cv
14.398 152.66 14.18 152.691 13.984 152.758 cv
13.789 152.828 13.617 152.902 13.469 152.977 cv
13.32 153.059 13.195 153.129 13.102 153.191 cv
13 153.258 12.93 153.293 12.883 153.289 cv
12.852 153.293 12.824 153.285 12.805 153.266 cv
12.781 153.254 12.762 153.227 12.75 153.191 cv
12.734 153.16 12.727 153.113 12.719 153.051 cv
12.711 152.992 12.707 152.922 12.707 152.84 cv
12.707 152.781 12.707 152.73 12.711 152.687 cv
12.715 152.648 12.723 152.613 12.734 152.578 cv
12.742 152.551 12.754 152.52 12.773 152.488 cv
12.785 152.461 12.816 152.43 12.867 152.387 cv
12.91 152.348 12.992 152.289 13.109 152.219 cv
13.223 152.148 13.367 152.082 13.543 152.012 cv
13.715 151.945 13.906 151.887 14.117 151.836 cv
14.324 151.793 14.543 151.77 14.773 151.766 cv
15.141 151.77 15.461 151.82 15.738 151.922 cv
16.012 152.027 16.242 152.168 16.422 152.348 cv
16.602 152.527 16.738 152.738 16.832 152.977 cv
16.922 153.215 16.965 153.469 16.969 153.734 cv
16.965 153.984 16.945 154.227 16.902 154.461 cv
16.855 154.703 16.762 154.961 16.629 155.238 cv
16.488 155.52 16.289 155.832 16.027 156.172 cv
15.766 156.516 15.418 156.906 14.984 157.352 cv
13.785 158.605 li
17.086 158.605 li
17.113 158.605 17.145 158.617 17.176 158.633 cv
17.203 158.652 17.227 158.676 17.25 158.711 cv
17.266 158.75 17.281 158.797 17.297 158.844 cv
17.305 158.898 17.313 158.957 17.313 159.027 cv
cp
f
5.77 115.379 mo
17.93 115.379 li
17.93 130.031 li
5.77 130.031 li
cp
0 0 0 0 cmyk
ef
11.211 126.422 mo
11.207 126.496 11.203 126.559 11.195 126.609 cv
11.184 126.664 11.168 126.707 11.148 126.734 cv
11.125 126.77 11.102 126.793 11.078 126.801 cv
11.055 126.816 11.027 126.82 11 126.82 cv
7.039 126.82 li
7.012 126.82 6.988 126.816 6.965 126.801 cv
6.941 126.793 6.918 126.77 6.898 126.734 cv
6.875 126.707 6.859 126.664 6.848 126.609 cv
6.832 126.559 6.824 126.496 6.828 126.422 cv
6.824 126.352 6.832 126.293 6.848 126.242 cv
6.859 126.191 6.871 126.148 6.891 126.113 cv
6.906 126.082 6.93 126.059 6.953 126.039 cv
6.977 126.023 7.004 126.012 7.039 126.012 cv
8.625 126.012 li
8.625 120.246 li
7.156 121.117 li
7.082 121.164 7.023 121.187 6.98 121.191 cv
6.934 121.203 6.898 121.195 6.871 121.164 cv
6.84 121.141 6.82 121.098 6.813 121.039 cv
6.805 120.98 6.801 120.906 6.801 120.812 cv
6.801 120.75 6.801 120.691 6.809 120.645 cv
6.813 120.598 6.824 120.559 6.836 120.527 cv
6.844 120.496 6.859 120.469 6.883 120.445 cv
6.906 120.422 6.934 120.398 6.969 120.375 cv
8.719 119.258 li
8.73 119.246 8.75 119.234 8.777 119.227 cv
8.797 119.219 8.828 119.211 8.863 119.203 cv
8.895 119.195 8.934 119.191 8.984 119.191 cv
9.027 119.191 9.086 119.191 9.164 119.187 cv
9.254 119.191 9.332 119.195 9.398 119.199 cv
9.457 119.211 9.508 119.223 9.543 119.23 cv
9.574 119.246 9.598 119.262 9.613 119.281 cv
9.625 119.305 9.629 119.328 9.633 119.352 cv
9.633 126.012 li
11 126.012 li
11.027 126.012 11.059 126.023 11.09 126.039 cv
11.117 126.059 11.137 126.082 11.156 126.113 cv
11.172 126.148 11.188 126.191 11.195 126.242 cv
11.203 126.293 11.207 126.352 11.211 126.422 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.254 124.652 mo
17.254 125 17.191 125.316 17.07 125.594 cv
16.949 125.875 16.777 126.113 16.551 126.312 cv
16.324 126.512 16.043 126.664 15.711 126.77 cv
15.379 126.875 15.004 126.926 14.586 126.93 cv
14.332 126.926 14.094 126.906 13.875 126.867 cv
13.652 126.828 13.457 126.781 13.289 126.727 cv
13.113 126.672 12.973 126.613 12.859 126.551 cv
12.742 126.488 12.668 126.445 12.645 126.418 cv
12.613 126.391 12.594 126.363 12.578 126.336 cv
12.563 126.309 12.547 126.273 12.535 126.234 cv
12.523 126.195 12.516 126.148 12.508 126.094 cv
12.5 126.039 12.496 125.969 12.5 125.883 cv
12.496 125.742 12.512 125.645 12.543 125.59 cv
12.57 125.535 12.609 125.508 12.664 125.508 cv
12.699 125.508 12.77 125.539 12.875 125.602 cv
12.98 125.664 13.117 125.734 13.285 125.805 cv
13.449 125.883 13.645 125.949 13.867 126.008 cv
14.09 126.074 14.336 126.105 14.613 126.102 cv
14.871 126.105 15.105 126.07 15.309 126 cv
15.508 125.934 15.676 125.84 15.813 125.719 cv
15.949 125.602 16.051 125.461 16.121 125.289 cv
16.188 125.125 16.223 124.941 16.223 124.746 cv
16.223 124.531 16.176 124.34 16.09 124.164 cv
16 123.996 15.875 123.848 15.711 123.719 cv
15.543 123.598 15.336 123.5 15.094 123.434 cv
14.844 123.371 14.566 123.34 14.262 123.336 cv
13.52 123.336 li
13.484 123.34 13.453 123.332 13.422 123.316 cv
13.391 123.301 13.363 123.277 13.344 123.246 cv
13.32 123.215 13.301 123.176 13.289 123.125 cv
13.273 123.074 13.27 123.008 13.27 122.922 cv
13.27 122.852 13.273 122.789 13.285 122.738 cv
13.297 122.691 13.313 122.652 13.336 122.621 cv
13.352 122.594 13.379 122.574 13.41 122.559 cv
13.438 122.551 13.469 122.543 13.504 122.539 cv
14.164 122.539 li
14.422 122.543 14.652 122.508 14.859 122.437 cv
15.063 122.371 15.238 122.277 15.379 122.148 cv
15.52 122.027 15.629 121.879 15.707 121.703 cv
15.785 121.531 15.824 121.336 15.824 121.117 cv
15.824 120.965 15.797 120.816 15.746 120.672 cv
15.695 120.531 15.621 120.406 15.52 120.301 cv
15.418 120.195 15.285 120.113 15.129 120.051 cv
14.965 119.996 14.785 119.965 14.582 119.961 cv
14.355 119.965 14.145 120 13.957 120.062 cv
13.762 120.133 13.594 120.203 13.449 120.281 cv
13.297 120.359 13.176 120.434 13.082 120.5 cv
12.984 120.57 12.914 120.605 12.875 120.602 cv
12.848 120.605 12.824 120.602 12.805 120.59 cv
12.781 120.582 12.762 120.562 12.75 120.531 cv
12.734 120.504 12.727 120.461 12.719 120.406 cv
12.711 120.355 12.707 120.285 12.711 120.199 cv
12.707 120.141 12.711 120.09 12.719 120.043 cv
12.723 120 12.73 119.961 12.742 119.926 cv
12.75 119.895 12.762 119.863 12.781 119.836 cv
12.793 119.812 12.82 119.781 12.859 119.742 cv
12.898 119.703 12.973 119.648 13.086 119.578 cv
13.199 119.508 13.34 119.441 13.508 119.371 cv
13.672 119.305 13.863 119.246 14.082 119.195 cv
14.297 119.152 14.531 119.129 14.781 119.125 cv
15.133 119.129 15.441 119.172 15.707 119.262 cv
15.973 119.355 16.191 119.484 16.371 119.645 cv
16.547 119.812 16.68 120.008 16.77 120.234 cv
16.855 120.461 16.902 120.715 16.902 120.992 cv
16.902 121.23 16.871 121.453 16.809 121.656 cv
16.746 121.863 16.652 122.043 16.531 122.199 cv
16.41 122.359 16.262 122.496 16.086 122.605 cv
15.91 122.723 15.707 122.797 15.477 122.836 cv
15.477 122.848 li
15.738 122.879 15.977 122.945 16.195 123.047 cv
16.41 123.148 16.598 123.277 16.758 123.434 cv
16.91 123.59 17.031 123.773 17.121 123.984 cv
17.207 124.195 17.254 124.418 17.254 124.652 cv
cp
f
5.77 82.75 mo
17.93 82.75 li
17.93 97.398 li
5.77 97.398 li
cp
0 0 0 0 cmyk
ef
11.211 93.781 mo
11.207 93.855 11.203 93.918 11.195 93.969 cv
11.184 94.023 11.168 94.066 11.148 94.094 cv
11.125 94.129 11.102 94.152 11.078 94.16 cv
11.055 94.176 11.027 94.18 11 94.18 cv
7.039 94.18 li
7.012 94.18 6.988 94.176 6.965 94.16 cv
6.941 94.152 6.918 94.129 6.898 94.094 cv
6.875 94.066 6.859 94.023 6.848 93.969 cv
6.832 93.918 6.824 93.855 6.828 93.781 cv
6.824 93.711 6.832 93.652 6.848 93.602 cv
6.859 93.551 6.871 93.508 6.891 93.473 cv
6.906 93.441 6.93 93.418 6.953 93.398 cv
6.977 93.383 7.004 93.371 7.039 93.371 cv
8.625 93.371 li
8.625 87.605 li
7.156 88.477 li
7.082 88.523 7.023 88.547 6.98 88.551 cv
6.934 88.562 6.898 88.555 6.871 88.523 cv
6.84 88.5 6.82 88.457 6.813 88.398 cv
6.805 88.34 6.801 88.266 6.801 88.172 cv
6.801 88.109 6.801 88.051 6.809 88.004 cv
6.813 87.957 6.824 87.918 6.836 87.887 cv
6.844 87.855 6.859 87.828 6.883 87.805 cv
6.906 87.781 6.934 87.758 6.969 87.734 cv
8.719 86.617 li
8.73 86.605 8.75 86.594 8.777 86.586 cv
8.797 86.578 8.828 86.57 8.863 86.562 cv
8.895 86.555 8.934 86.551 8.984 86.551 cv
9.027 86.551 9.086 86.551 9.164 86.547 cv
9.254 86.551 9.332 86.555 9.398 86.559 cv
9.457 86.57 9.508 86.582 9.543 86.59 cv
9.574 86.605 9.598 86.621 9.613 86.641 cv
9.625 86.664 9.629 86.687 9.633 86.711 cv
9.633 93.371 li
11 93.371 li
11.027 93.371 11.059 93.383 11.09 93.398 cv
11.117 93.418 11.137 93.441 11.156 93.473 cv
11.172 93.508 11.188 93.551 11.195 93.602 cv
11.203 93.652 11.207 93.711 11.211 93.781 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.633 92.023 mo
17.629 92.156 17.609 92.258 17.574 92.328 cv
17.531 92.402 17.477 92.441 17.414 92.437 cv
16.555 92.437 li
16.555 94.031 li
16.551 94.066 16.543 94.094 16.531 94.113 cv
16.512 94.137 16.484 94.152 16.445 94.168 cv
16.406 94.184 16.352 94.195 16.289 94.203 cv
16.223 94.211 16.141 94.215 16.043 94.215 cv
15.941 94.215 15.863 94.211 15.801 94.203 cv
15.738 94.195 15.688 94.184 15.648 94.168 cv
15.609 94.152 15.582 94.137 15.566 94.113 cv
15.551 94.094 15.543 94.066 15.547 94.031 cv
15.547 92.437 li
12.445 92.437 li
12.398 92.441 12.363 92.434 12.332 92.422 cv
12.301 92.414 12.27 92.395 12.246 92.359 cv
12.215 92.332 12.199 92.285 12.191 92.223 cv
12.184 92.164 12.18 92.09 12.18 91.992 cv
12.18 91.922 12.18 91.855 12.184 91.797 cv
12.188 91.738 12.195 91.684 12.207 91.637 cv
12.219 91.59 12.234 91.543 12.254 91.496 cv
12.273 91.449 12.297 91.402 12.324 91.352 cv
15.027 86.742 li
15.047 86.715 15.074 86.687 15.113 86.66 cv
15.148 86.641 15.199 86.621 15.262 86.602 cv
15.32 86.59 15.391 86.578 15.48 86.57 cv
15.566 86.566 15.672 86.562 15.793 86.562 cv
15.922 86.562 16.035 86.57 16.133 86.578 cv
16.23 86.594 16.309 86.605 16.371 86.617 cv
16.426 86.637 16.473 86.656 16.508 86.68 cv
16.535 86.703 16.551 86.734 16.555 86.766 cv
16.555 91.609 li
17.414 91.609 li
17.477 91.613 17.531 91.648 17.57 91.711 cv
17.609 91.781 17.629 91.883 17.633 92.023 cv
cp
15.547 87.445 mo
15.539 87.445 li
13.102 91.609 li
15.547 91.609 li
cp
f
5.77 50.1089 mo
17.93 50.1089 li
17.93 64.761 li
5.77 64.761 li
cp
0 0 0 0 cmyk
ef
11.223 61.141 mo
11.219 61.215 11.211 61.277 11.203 61.328 cv
11.188 61.379 11.172 61.422 11.156 61.449 cv
11.133 61.484 11.113 61.508 11.09 61.52 cv
11.066 61.535 11.039 61.539 11.012 61.539 cv
7.043 61.539 li
7.012 61.539 6.988 61.535 6.969 61.52 cv
6.941 61.508 6.918 61.484 6.898 61.449 cv
6.875 61.422 6.859 61.379 6.848 61.328 cv
6.836 61.277 6.828 61.215 6.832 61.141 cv
6.828 61.07 6.836 61.012 6.848 60.961 cv
6.859 60.91 6.875 60.867 6.895 60.832 cv
6.91 60.801 6.93 60.777 6.957 60.758 cv
6.98 60.742 7.008 60.73 7.043 60.73 cv
8.629 60.73 li
8.629 54.953 li
7.16 55.828 li
7.082 55.871 7.023 55.895 6.98 55.898 cv
6.934 55.91 6.898 55.902 6.871 55.871 cv
6.844 55.848 6.824 55.805 6.816 55.746 cv
6.805 55.687 6.801 55.613 6.805 55.52 cv
6.801 55.457 6.805 55.398 6.813 55.352 cv
6.816 55.305 6.824 55.266 6.836 55.234 cv
6.848 55.203 6.863 55.176 6.887 55.152 cv
6.906 55.129 6.934 55.105 6.973 55.082 cv
8.723 53.961 li
8.738 53.953 8.758 53.941 8.781 53.93 cv
8.805 53.926 8.832 53.918 8.867 53.906 cv
8.902 53.902 8.945 53.898 8.992 53.895 cv
9.039 53.895 9.098 53.895 9.168 53.891 cv
9.262 53.895 9.34 53.898 9.402 53.902 cv
9.465 53.914 9.512 53.922 9.547 53.934 cv
9.582 53.949 9.605 53.969 9.617 53.988 cv
9.629 54.012 9.637 54.035 9.637 54.055 cv
9.637 60.73 li
11.012 60.73 li
11.039 60.73 11.066 60.742 11.098 60.758 cv
11.121 60.777 11.145 60.801 11.168 60.832 cv
11.184 60.867 11.199 60.91 11.207 60.961 cv
11.215 61.012 11.219 61.07 11.223 61.141 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.289 59.098 mo
17.289 59.508 17.219 59.871 17.082 60.184 cv
16.945 60.504 16.75 60.77 16.5 60.984 cv
16.246 61.203 15.949 61.367 15.605 61.48 cv
15.258 61.594 14.875 61.648 14.453 61.652 cv
14.219 61.648 13.992 61.633 13.781 61.602 cv
13.566 61.566 13.379 61.527 13.219 61.477 cv
13.051 61.43 12.918 61.383 12.813 61.332 cv
12.707 61.289 12.637 61.25 12.609 61.223 cv
12.578 61.195 12.559 61.172 12.547 61.145 cv
12.535 61.125 12.523 61.098 12.516 61.062 cv
12.504 61.031 12.5 60.988 12.496 60.937 cv
12.492 60.887 12.488 60.824 12.492 60.754 cv
12.488 60.687 12.492 60.629 12.5 60.574 cv
12.504 60.523 12.516 60.48 12.531 60.445 cv
12.547 60.414 12.563 60.391 12.586 60.371 cv
12.605 60.359 12.633 60.352 12.66 60.348 cv
12.699 60.352 12.758 60.375 12.844 60.422 cv
12.922 60.473 13.035 60.523 13.176 60.578 cv
13.313 60.637 13.484 60.691 13.691 60.742 cv
13.895 60.793 14.137 60.82 14.422 60.816 cv
14.684 60.82 14.926 60.789 15.145 60.723 cv
15.363 60.664 15.551 60.566 15.711 60.43 cv
15.867 60.301 15.992 60.133 16.082 59.93 cv
16.172 59.73 16.215 59.484 16.219 59.191 cv
16.215 58.953 16.18 58.738 16.105 58.551 cv
16.027 58.363 15.91 58.211 15.754 58.086 cv
15.594 57.965 15.391 57.871 15.148 57.809 cv
14.902 57.75 14.613 57.719 14.281 57.719 cv
14.043 57.719 13.836 57.73 13.664 57.754 cv
13.488 57.777 13.328 57.789 13.184 57.789 cv
13.07 57.789 12.992 57.766 12.949 57.715 cv
12.898 57.664 12.875 57.566 12.879 57.418 cv
12.879 54.324 li
12.875 54.199 12.906 54.102 12.969 54.035 cv
13.027 53.977 13.113 53.945 13.23 53.941 cv
16.594 53.941 li
16.621 53.945 16.652 53.953 16.684 53.969 cv
16.711 53.988 16.734 54.016 16.758 54.051 cv
16.773 54.086 16.789 54.133 16.805 54.184 cv
16.813 54.242 16.82 54.305 16.82 54.375 cv
16.82 54.52 16.801 54.629 16.762 54.707 cv
16.723 54.785 16.668 54.824 16.605 54.824 cv
13.891 54.824 li
13.891 56.953 li
14.02 56.937 14.152 56.926 14.293 56.922 cv
14.43 56.918 14.59 56.918 14.77 56.914 cv
15.188 56.918 15.551 56.969 15.867 57.07 cv
16.18 57.176 16.441 57.32 16.652 57.508 cv
16.855 57.699 17.016 57.93 17.125 58.199 cv
17.234 58.469 17.289 58.77 17.289 59.098 cv
cp
f
5.77 17.4689 mo
17.93 17.4689 li
17.93 32.1209 li
5.77 32.1209 li
cp
0 0 0 0 cmyk
ef
11.223 28.5 mo
11.219 28.574 11.211 28.637 11.203 28.687 cv
11.188 28.738 11.172 28.781 11.156 28.809 cv
11.133 28.844 11.113 28.867 11.09 28.879 cv
11.066 28.895 11.039 28.898 11.012 28.898 cv
7.043 28.898 li
7.012 28.898 6.988 28.895 6.969 28.879 cv
6.941 28.867 6.918 28.844 6.898 28.809 cv
6.875 28.781 6.859 28.738 6.848 28.687 cv
6.836 28.637 6.828 28.574 6.832 28.5 cv
6.828 28.43 6.836 28.371 6.848 28.32 cv
6.859 28.27 6.875 28.227 6.895 28.191 cv
6.91 28.16 6.93 28.137 6.957 28.117 cv
6.98 28.102 7.008 28.09 7.043 28.09 cv
8.629 28.09 li
8.629 22.312 li
7.16 23.187 li
7.082 23.23 7.023 23.254 6.98 23.258 cv
6.934 23.27 6.898 23.262 6.871 23.23 cv
6.844 23.207 6.824 23.164 6.816 23.105 cv
6.805 23.047 6.801 22.973 6.805 22.879 cv
6.801 22.816 6.805 22.758 6.813 22.711 cv
6.816 22.664 6.824 22.625 6.836 22.594 cv
6.848 22.562 6.863 22.535 6.887 22.512 cv
6.906 22.488 6.934 22.465 6.973 22.441 cv
8.723 21.32 li
8.738 21.312 8.758 21.301 8.781 21.289 cv
8.805 21.285 8.832 21.277 8.867 21.266 cv
8.902 21.262 8.945 21.258 8.992 21.254 cv
9.039 21.254 9.098 21.254 9.168 21.25 cv
9.262 21.254 9.34 21.258 9.402 21.262 cv
9.465 21.273 9.512 21.281 9.547 21.293 cv
9.582 21.309 9.605 21.328 9.617 21.348 cv
9.629 21.371 9.637 21.395 9.637 21.414 cv
9.637 28.09 li
11.012 28.09 li
11.039 28.09 11.066 28.102 11.098 28.117 cv
11.121 28.137 11.145 28.16 11.168 28.191 cv
11.184 28.227 11.199 28.27 11.207 28.32 cv
11.215 28.371 11.219 28.43 11.223 28.5 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
17.516 26.437 mo
17.512 26.773 17.461 27.098 17.363 27.406 cv
17.258 27.719 17.102 27.992 16.895 28.227 cv
16.68 28.465 16.41 28.656 16.09 28.797 cv
15.762 28.941 15.379 29.008 14.941 29.012 cv
14.621 29.008 14.34 28.973 14.098 28.895 cv
13.852 28.816 13.641 28.703 13.465 28.559 cv
13.281 28.414 13.133 28.238 13.016 28.023 cv
12.895 27.816 12.797 27.574 12.727 27.301 cv
12.652 27.031 12.602 26.734 12.574 26.414 cv
12.539 26.094 12.523 25.75 12.527 25.383 cv
12.523 25.059 12.543 24.73 12.578 24.395 cv
12.613 24.062 12.676 23.742 12.766 23.434 cv
12.855 23.125 12.977 22.836 13.133 22.562 cv
13.285 22.293 13.48 22.055 13.715 21.852 cv
13.949 21.652 14.227 21.492 14.551 21.371 cv
14.875 21.258 15.254 21.199 15.684 21.195 cv
15.828 21.199 15.973 21.207 16.125 21.223 cv
16.27 21.242 16.406 21.266 16.535 21.293 cv
16.656 21.324 16.762 21.359 16.852 21.391 cv
16.938 21.43 16.996 21.457 17.023 21.477 cv
17.051 21.5 17.07 21.523 17.086 21.547 cv
17.094 21.574 17.105 21.602 17.117 21.629 cv
17.121 21.66 17.125 21.691 17.133 21.727 cv
17.133 21.766 17.137 21.812 17.141 21.863 cv
17.137 21.937 17.137 22 17.137 22.047 cv
17.137 22.102 17.129 22.141 17.113 22.172 cv
17.098 22.203 17.078 22.227 17.063 22.242 cv
17.039 22.258 17.012 22.266 16.977 22.266 cv
16.934 22.266 16.875 22.254 16.801 22.227 cv
16.723 22.199 16.633 22.168 16.527 22.133 cv
16.422 22.102 16.293 22.07 16.145 22.043 cv
15.992 22.016 15.816 22.004 15.621 22 cv
15.254 22.004 14.941 22.078 14.68 22.223 cv
14.418 22.375 14.203 22.574 14.039 22.824 cv
13.867 23.078 13.746 23.367 13.668 23.695 cv
13.586 24.027 13.539 24.375 13.531 24.73 cv
13.629 24.676 13.742 24.617 13.875 24.555 cv
14 24.5 14.141 24.445 14.289 24.395 cv
14.438 24.352 14.598 24.312 14.77 24.281 cv
14.938 24.254 15.117 24.242 15.309 24.238 cv
15.719 24.242 16.063 24.297 16.348 24.406 cv
16.625 24.52 16.855 24.672 17.031 24.867 cv
17.203 25.066 17.324 25.301 17.402 25.566 cv
17.473 25.836 17.512 26.125 17.516 26.437 cv
cp
16.496 26.531 mo
16.492 26.305 16.469 26.102 16.426 25.914 cv
16.379 25.73 16.305 25.57 16.199 25.441 cv
16.094 25.312 15.953 25.215 15.777 25.141 cv
15.602 25.074 15.383 25.039 15.129 25.035 cv
14.98 25.039 14.836 25.051 14.691 25.074 cv
14.547 25.102 14.406 25.137 14.273 25.18 cv
14.133 25.227 14.004 25.281 13.883 25.34 cv
13.758 25.402 13.645 25.465 13.547 25.535 cv
13.543 26.043 13.578 26.469 13.645 26.805 cv
13.707 27.148 13.801 27.418 13.926 27.621 cv
14.051 27.828 14.203 27.977 14.387 28.062 cv
14.57 28.152 14.785 28.195 15.035 28.195 cv
15.281 28.195 15.5 28.148 15.684 28.055 cv
15.867 27.961 16.02 27.836 16.141 27.676 cv
16.262 27.52 16.352 27.34 16.41 27.141 cv
16.465 26.945 16.492 26.742 16.496 26.531 cv
cp
f
31.469 533.723 mo
31.465 533.797 31.461 533.859 31.453 533.91 cv
31.441 533.965 31.426 534.008 31.406 534.035 cv
31.383 534.07 31.359 534.094 31.336 534.102 cv
31.313 534.117 31.285 534.121 31.258 534.121 cv
27.297 534.121 li
27.27 534.121 27.246 534.117 27.223 534.102 cv
27.199 534.094 27.176 534.07 27.156 534.035 cv
27.133 534.008 27.117 533.965 27.105 533.91 cv
27.09 533.859 27.082 533.797 27.086 533.723 cv
27.082 533.652 27.09 533.594 27.105 533.543 cv
27.117 533.492 27.129 533.449 27.148 533.414 cv
27.164 533.383 27.188 533.359 27.211 533.34 cv
27.234 533.324 27.262 533.312 27.297 533.312 cv
28.883 533.312 li
28.883 527.547 li
27.414 528.418 li
27.34 528.465 27.281 528.488 27.238 528.492 cv
27.191 528.504 27.156 528.496 27.129 528.465 cv
27.098 528.441 27.078 528.398 27.07 528.34 cv
27.063 528.281 27.059 528.207 27.059 528.113 cv
27.059 528.051 27.059 527.992 27.066 527.945 cv
27.07 527.898 27.082 527.859 27.094 527.828 cv
27.102 527.797 27.117 527.77 27.141 527.746 cv
27.164 527.723 27.191 527.699 27.227 527.676 cv
28.977 526.559 li
28.988 526.547 29.008 526.535 29.035 526.527 cv
29.055 526.52 29.086 526.512 29.121 526.504 cv
29.152 526.496 29.191 526.492 29.242 526.492 cv
29.285 526.492 29.344 526.492 29.422 526.488 cv
29.512 526.492 29.59 526.496 29.656 526.5 cv
29.715 526.512 29.766 526.523 29.801 526.531 cv
29.832 526.547 29.855 526.562 29.871 526.582 cv
29.883 526.605 29.887 526.629 29.891 526.652 cv
29.891 533.312 li
31.258 533.312 li
31.285 533.312 31.316 533.324 31.348 533.34 cv
31.375 533.359 31.395 533.383 31.414 533.414 cv
31.43 533.449 31.445 533.492 31.453 533.543 cv
31.461 533.594 31.465 533.652 31.469 533.723 cv
cp
f
101.465 533.687 mo
101.465 533.758 101.457 533.82 101.449 533.875 cv
101.434 533.93 101.422 533.977 101.406 534.012 cv
101.391 534.051 101.367 534.078 101.336 534.094 cv
101.305 534.113 101.273 534.121 101.242 534.121 cv
97.051 534.121 li
96.996 534.121 96.949 534.117 96.91 534.102 cv
96.867 534.094 96.832 534.07 96.805 534.035 cv
96.773 534.008 96.75 533.961 96.738 533.898 cv
96.723 533.84 96.719 533.77 96.719 533.684 cv
96.719 533.609 96.719 533.539 96.727 533.477 cv
96.73 533.418 96.746 533.367 96.766 533.32 cv
96.785 533.277 96.809 533.234 96.84 533.187 cv
96.867 533.148 96.906 533.098 96.961 533.043 cv
98.477 531.484 li
98.824 531.125 99.102 530.805 99.316 530.52 cv
99.527 530.234 99.691 529.973 99.809 529.738 cv
99.918 529.504 99.996 529.293 100.035 529.102 cv
100.07 528.91 100.086 528.73 100.09 528.559 cv
100.086 528.395 100.059 528.234 100.004 528.082 cv
99.945 527.934 99.863 527.801 99.758 527.687 cv
99.648 527.578 99.516 527.488 99.355 527.418 cv
99.191 527.352 99.004 527.32 98.801 527.316 cv
98.551 527.32 98.332 527.352 98.137 527.418 cv
97.941 527.488 97.77 527.562 97.621 527.637 cv
97.473 527.719 97.348 527.789 97.254 527.852 cv
97.152 527.918 97.082 527.953 97.035 527.949 cv
97.004 527.953 96.977 527.945 96.957 527.926 cv
96.934 527.914 96.914 527.887 96.902 527.852 cv
96.887 527.82 96.879 527.773 96.871 527.711 cv
96.863 527.652 96.859 527.582 96.859 527.5 cv
96.859 527.441 96.859 527.391 96.863 527.348 cv
96.867 527.309 96.875 527.273 96.887 527.238 cv
96.895 527.211 96.906 527.18 96.926 527.148 cv
96.938 527.121 96.969 527.09 97.02 527.047 cv
97.063 527.008 97.145 526.949 97.262 526.879 cv
97.375 526.809 97.52 526.742 97.695 526.672 cv
97.867 526.605 98.059 526.547 98.27 526.496 cv
98.477 526.453 98.695 526.43 98.926 526.426 cv
99.293 526.43 99.613 526.48 99.891 526.582 cv
100.164 526.687 100.395 526.828 100.574 527.008 cv
100.754 527.187 100.891 527.398 100.984 527.637 cv
101.074 527.875 101.117 528.129 101.121 528.395 cv
101.117 528.645 101.098 528.887 101.055 529.121 cv
101.008 529.363 100.914 529.621 100.781 529.898 cv
100.641 530.18 100.441 530.492 100.18 530.832 cv
99.918 531.176 99.57 531.566 99.137 532.012 cv
97.938 533.266 li
101.238 533.266 li
101.266 533.266 101.297 533.277 101.328 533.293 cv
101.355 533.312 101.379 533.336 101.402 533.371 cv
101.418 533.41 101.434 533.457 101.449 533.504 cv
101.457 533.559 101.465 533.617 101.465 533.687 cv
cp
f
171.766 531.965 mo
171.762 532.098 171.742 532.199 171.707 532.27 cv
171.664 532.344 171.609 532.383 171.547 532.379 cv
170.688 532.379 li
170.688 533.973 li
170.684 534.008 170.676 534.035 170.664 534.055 cv
170.645 534.078 170.617 534.094 170.578 534.109 cv
170.539 534.125 170.484 534.137 170.422 534.145 cv
170.355 534.152 170.273 534.156 170.176 534.156 cv
170.074 534.156 169.996 534.152 169.934 534.145 cv
169.871 534.137 169.82 534.125 169.781 534.109 cv
169.742 534.094 169.715 534.078 169.699 534.055 cv
169.684 534.035 169.676 534.008 169.68 533.973 cv
169.68 532.379 li
166.578 532.379 li
166.531 532.383 166.496 532.375 166.465 532.363 cv
166.434 532.355 166.402 532.336 166.379 532.301 cv
166.348 532.273 166.332 532.227 166.324 532.164 cv
166.316 532.105 166.313 532.031 166.313 531.934 cv
166.313 531.863 166.313 531.797 166.316 531.738 cv
166.32 531.68 166.328 531.625 166.34 531.578 cv
166.352 531.531 166.367 531.484 166.387 531.437 cv
166.406 531.391 166.43 531.344 166.457 531.293 cv
169.16 526.684 li
169.18 526.656 169.207 526.629 169.246 526.602 cv
169.281 526.582 169.332 526.562 169.395 526.543 cv
169.453 526.531 169.523 526.52 169.613 526.512 cv
169.699 526.508 169.805 526.504 169.926 526.504 cv
170.055 526.504 170.168 526.512 170.266 526.52 cv
170.363 526.535 170.441 526.547 170.504 526.559 cv
170.559 526.578 170.605 526.598 170.641 526.621 cv
170.668 526.645 170.684 526.676 170.688 526.707 cv
170.688 531.551 li
171.547 531.551 li
171.609 531.555 171.664 531.59 171.703 531.652 cv
171.742 531.723 171.762 531.824 171.766 531.965 cv
cp
169.68 527.387 mo
169.672 527.387 li
167.234 531.551 li
169.68 531.551 li
cp
f
241.648 531.668 mo
241.645 532 241.594 532.32 241.496 532.633 cv
241.391 532.945 241.234 533.219 241.027 533.453 cv
240.813 533.687 240.547 533.879 240.223 534.02 cv
239.895 534.16 239.512 534.227 239.074 534.23 cv
238.758 534.227 238.477 534.191 238.238 534.113 cv
237.992 534.039 237.781 533.926 237.605 533.781 cv
237.422 533.641 237.273 533.465 237.156 533.25 cv
237.035 533.043 236.938 532.801 236.867 532.527 cv
236.789 532.258 236.738 531.965 236.711 531.641 cv
236.676 531.324 236.66 530.98 236.664 530.613 cv
236.66 530.289 236.68 529.961 236.719 529.629 cv
236.754 529.297 236.816 528.977 236.906 528.668 cv
236.992 528.359 237.113 528.07 237.27 527.797 cv
237.426 527.527 237.617 527.289 237.852 527.086 cv
238.082 526.887 238.363 526.727 238.688 526.609 cv
239.008 526.492 239.383 526.434 239.82 526.434 cv
239.961 526.434 240.109 526.445 240.258 526.461 cv
240.406 526.484 240.543 526.508 240.668 526.531 cv
240.793 526.562 240.898 526.594 240.984 526.629 cv
241.07 526.664 241.125 526.691 241.152 526.715 cv
241.18 526.738 241.199 526.762 241.215 526.785 cv
241.223 526.809 241.234 526.836 241.246 526.867 cv
241.25 526.898 241.258 526.934 241.266 526.965 cv
241.27 527.004 241.27 527.047 241.273 527.102 cv
241.27 527.172 241.27 527.234 241.27 527.285 cv
241.266 527.336 241.258 527.375 241.246 527.406 cv
241.23 527.437 241.211 527.461 241.191 527.477 cv
241.168 527.492 241.141 527.5 241.109 527.5 cv
241.063 527.5 241.004 527.488 240.93 527.461 cv
240.855 527.434 240.766 527.402 240.66 527.367 cv
240.555 527.336 240.426 527.305 240.277 527.277 cv
240.125 527.254 239.953 527.242 239.754 527.238 cv
239.391 527.242 239.078 527.316 238.816 527.461 cv
238.551 527.613 238.336 527.812 238.172 528.059 cv
238.008 528.312 237.883 528.602 237.805 528.93 cv
237.723 529.258 237.68 529.602 237.668 529.961 cv
237.77 529.902 237.883 529.844 238.012 529.785 cv
238.137 529.73 238.273 529.68 238.426 529.629 cv
238.574 529.586 238.734 529.547 238.902 529.516 cv
239.07 529.484 239.25 529.469 239.445 529.469 cv
239.852 529.469 240.199 529.527 240.48 529.637 cv
240.762 529.75 240.988 529.902 241.16 530.098 cv
241.332 530.297 241.457 530.531 241.535 530.797 cv
241.609 531.07 241.645 531.359 241.648 531.668 cv
cp
240.625 531.762 mo
240.621 531.535 240.598 531.328 240.559 531.141 cv
240.512 530.957 240.438 530.801 240.332 530.672 cv
240.227 530.543 240.086 530.441 239.91 530.371 cv
239.734 530.301 239.52 530.266 239.262 530.266 cv
239.117 530.266 238.973 530.281 238.828 530.305 cv
238.68 530.332 238.539 530.367 238.406 530.41 cv
238.273 530.457 238.145 530.508 238.02 530.57 cv
237.895 530.633 237.781 530.699 237.688 530.762 cv
237.684 531.27 237.715 531.691 237.781 532.031 cv
237.844 532.371 237.938 532.645 238.063 532.848 cv
238.184 533.055 238.34 533.199 238.523 533.285 cv
238.703 533.375 238.918 533.418 239.168 533.418 cv
239.418 533.418 239.633 533.371 239.816 533.277 cv
240 533.184 240.152 533.059 240.273 532.898 cv
240.395 532.742 240.484 532.566 240.539 532.367 cv
240.594 532.172 240.621 531.969 240.625 531.762 cv
cp
f
311.609 532.176 mo
311.609 532.504 311.551 532.797 311.434 533.051 cv
311.316 533.309 311.145 533.523 310.926 533.699 cv
310.703 533.879 310.434 534.012 310.109 534.098 cv
309.781 534.184 309.41 534.227 308.996 534.23 cv
308.605 534.227 308.254 534.187 307.945 534.109 cv
307.637 534.031 307.375 533.91 307.16 533.746 cv
306.945 533.586 306.781 533.391 306.668 533.152 cv
306.555 532.922 306.5 532.652 306.5 532.352 cv
306.5 532.117 306.539 531.898 306.617 531.695 cv
306.695 531.496 306.805 531.312 306.953 531.145 cv
307.098 530.98 307.281 530.824 307.496 530.676 cv
307.707 530.527 307.949 530.387 308.223 530.254 cv
307.988 530.137 307.781 530.012 307.602 529.871 cv
307.422 529.738 307.27 529.59 307.145 529.43 cv
307.02 529.273 306.922 529.105 306.859 528.922 cv
306.789 528.746 306.758 528.551 306.762 528.34 cv
306.758 528.078 306.805 527.828 306.906 527.594 cv
307 527.359 307.145 527.156 307.34 526.984 cv
307.527 526.812 307.773 526.68 308.078 526.578 cv
308.375 526.48 308.727 526.43 309.125 526.426 cv
309.508 526.43 309.836 526.477 310.117 526.566 cv
310.391 526.66 310.621 526.785 310.809 526.941 cv
310.988 527.102 311.125 527.285 311.211 527.5 cv
311.297 527.719 311.34 527.949 311.34 528.191 cv
311.34 528.391 311.305 528.582 311.242 528.766 cv
311.172 528.953 311.078 529.129 310.957 529.289 cv
310.828 529.457 310.676 529.609 310.496 529.75 cv
310.316 529.891 310.109 530.023 309.875 530.148 cv
310.152 530.289 310.398 530.43 310.617 530.57 cv
310.832 530.715 311.012 530.871 311.16 531.035 cv
311.301 531.203 311.414 531.379 311.492 531.562 cv
311.57 531.75 311.609 531.953 311.609 532.176 cv
cp
310.344 528.285 mo
310.344 528.121 310.313 527.973 310.258 527.84 cv
310.199 527.707 310.117 527.594 310.012 527.5 cv
309.898 527.406 309.762 527.336 309.602 527.289 cv
309.438 527.242 309.254 527.219 309.051 527.215 cv
308.625 527.219 308.305 527.312 308.09 527.5 cv
307.871 527.691 307.766 527.953 307.766 528.285 cv
307.766 528.437 307.789 528.582 307.844 528.711 cv
307.895 528.844 307.977 528.965 308.09 529.082 cv
308.199 529.199 308.34 529.316 308.512 529.426 cv
308.68 529.539 308.883 529.652 309.121 529.773 cv
309.512 529.57 309.816 529.348 310.027 529.102 cv
310.238 528.855 310.344 528.582 310.344 528.285 cv
cp
310.59 532.281 mo
310.59 532.102 310.555 531.941 310.488 531.793 cv
310.422 531.652 310.32 531.516 310.188 531.383 cv
310.051 531.258 309.883 531.133 309.684 531.012 cv
309.48 530.895 309.25 530.77 308.984 530.641 cv
308.734 530.766 308.516 530.887 308.336 531.004 cv
308.148 531.125 307.996 531.25 307.879 531.379 cv
307.754 531.512 307.664 531.648 307.609 531.789 cv
307.547 531.93 307.52 532.086 307.52 532.258 cv
307.52 532.637 307.648 532.93 307.91 533.137 cv
308.168 533.348 308.555 533.453 309.074 533.449 cv
309.57 533.453 309.949 533.348 310.207 533.137 cv
310.461 532.926 310.59 532.641 310.59 532.281 cv
cp
f
378.41 533.723 mo
378.406 533.797 378.402 533.859 378.395 533.91 cv
378.383 533.965 378.367 534.008 378.348 534.035 cv
378.324 534.07 378.301 534.094 378.277 534.102 cv
378.254 534.117 378.227 534.121 378.199 534.121 cv
374.238 534.121 li
374.211 534.121 374.188 534.117 374.164 534.102 cv
374.141 534.094 374.117 534.07 374.098 534.035 cv
374.074 534.008 374.059 533.965 374.047 533.91 cv
374.031 533.859 374.023 533.797 374.027 533.723 cv
374.023 533.652 374.031 533.594 374.047 533.543 cv
374.059 533.492 374.07 533.449 374.09 533.414 cv
374.105 533.383 374.129 533.359 374.152 533.34 cv
374.176 533.324 374.203 533.312 374.238 533.312 cv
375.824 533.312 li
375.824 527.547 li
374.355 528.418 li
374.281 528.465 374.223 528.488 374.18 528.492 cv
374.133 528.504 374.098 528.496 374.07 528.465 cv
374.039 528.441 374.02 528.398 374.012 528.34 cv
374.004 528.281 374 528.207 374 528.113 cv
374 528.051 374 527.992 374.008 527.945 cv
374.012 527.898 374.023 527.859 374.035 527.828 cv
374.043 527.797 374.059 527.77 374.082 527.746 cv
374.105 527.723 374.133 527.699 374.168 527.676 cv
375.918 526.559 li
375.93 526.547 375.949 526.535 375.977 526.527 cv
375.996 526.52 376.027 526.512 376.063 526.504 cv
376.094 526.496 376.133 526.492 376.184 526.492 cv
376.227 526.492 376.285 526.492 376.363 526.488 cv
376.453 526.492 376.531 526.496 376.598 526.5 cv
376.656 526.512 376.707 526.523 376.742 526.531 cv
376.773 526.547 376.797 526.562 376.813 526.582 cv
376.824 526.605 376.828 526.629 376.832 526.652 cv
376.832 533.312 li
378.199 533.312 li
378.227 533.312 378.258 533.324 378.289 533.34 cv
378.316 533.359 378.336 533.383 378.355 533.414 cv
378.371 533.449 378.387 533.492 378.395 533.543 cv
378.402 533.594 378.406 533.652 378.41 533.723 cv
cp
f
384.766 530.312 mo
384.762 530.895 384.715 531.426 384.629 531.906 cv
384.535 532.391 384.383 532.805 384.172 533.148 cv
383.953 533.492 383.676 533.762 383.336 533.949 cv
382.988 534.137 382.566 534.227 382.066 534.23 cv
381.59 534.227 381.188 534.145 380.863 533.977 cv
380.535 533.809 380.273 533.559 380.074 533.227 cv
379.871 532.898 379.727 532.492 379.648 532.008 cv
379.563 531.527 379.523 530.973 379.523 530.348 cv
379.523 529.77 379.57 529.242 379.664 528.758 cv
379.758 528.281 379.91 527.867 380.121 527.516 cv
380.332 527.172 380.609 526.902 380.953 526.711 cv
381.297 526.523 381.719 526.43 382.219 526.426 cv
382.695 526.43 383.098 526.516 383.426 526.684 cv
383.754 526.855 384.016 527.105 384.215 527.434 cv
384.414 527.766 384.555 528.172 384.641 528.652 cv
384.719 529.137 384.762 529.687 384.766 530.312 cv
cp
383.734 530.383 mo
383.73 530.008 383.719 529.668 383.695 529.363 cv
383.668 529.062 383.625 528.797 383.574 528.566 cv
383.52 528.34 383.453 528.145 383.367 527.973 cv
383.281 527.809 383.18 527.672 383.066 527.562 cv
382.945 527.461 382.813 527.383 382.664 527.328 cv
382.516 527.281 382.348 527.254 382.16 527.254 cv
381.828 527.254 381.559 527.332 381.352 527.488 cv
381.141 527.645 380.977 527.859 380.859 528.133 cv
380.742 528.406 380.66 528.727 380.617 529.094 cv
380.574 529.461 380.555 529.855 380.555 530.277 cv
380.555 530.848 380.582 531.332 380.641 531.723 cv
380.699 532.121 380.793 532.441 380.918 532.691 cv
381.043 532.941 381.203 533.125 381.406 533.238 cv
381.602 533.352 381.844 533.406 382.125 533.406 cv
382.344 533.406 382.535 533.371 382.703 533.301 cv
382.867 533.23 383.008 533.133 383.129 533 cv
383.246 532.871 383.348 532.711 383.426 532.527 cv
383.504 532.348 383.566 532.145 383.613 531.918 cv
383.66 531.695 383.691 531.457 383.707 531.195 cv
383.723 530.937 383.73 530.664 383.734 530.383 cv
cp
f
448.398 533.723 mo
448.395 533.797 448.391 533.859 448.383 533.91 cv
448.371 533.965 448.355 534.008 448.336 534.035 cv
448.313 534.07 448.289 534.094 448.266 534.102 cv
448.242 534.117 448.215 534.121 448.188 534.121 cv
444.227 534.121 li
444.199 534.121 444.176 534.117 444.152 534.102 cv
444.129 534.094 444.105 534.07 444.086 534.035 cv
444.063 534.008 444.047 533.965 444.035 533.91 cv
444.02 533.859 444.012 533.797 444.016 533.723 cv
444.012 533.652 444.02 533.594 444.035 533.543 cv
444.047 533.492 444.059 533.449 444.078 533.414 cv
444.094 533.383 444.117 533.359 444.141 533.34 cv
444.164 533.324 444.191 533.312 444.227 533.312 cv
445.813 533.312 li
445.813 527.547 li
444.344 528.418 li
444.27 528.465 444.211 528.488 444.168 528.492 cv
444.121 528.504 444.086 528.496 444.059 528.465 cv
444.027 528.441 444.008 528.398 444 528.34 cv
443.992 528.281 443.988 528.207 443.988 528.113 cv
443.988 528.051 443.988 527.992 443.996 527.945 cv
444 527.898 444.012 527.859 444.023 527.828 cv
444.031 527.797 444.047 527.77 444.07 527.746 cv
444.094 527.723 444.121 527.699 444.156 527.676 cv
445.906 526.559 li
445.918 526.547 445.938 526.535 445.965 526.527 cv
445.984 526.52 446.016 526.512 446.051 526.504 cv
446.082 526.496 446.121 526.492 446.172 526.492 cv
446.215 526.492 446.273 526.492 446.352 526.488 cv
446.441 526.492 446.52 526.496 446.586 526.5 cv
446.645 526.512 446.695 526.523 446.73 526.531 cv
446.762 526.547 446.785 526.562 446.801 526.582 cv
446.813 526.605 446.816 526.629 446.82 526.652 cv
446.82 533.312 li
448.188 533.312 li
448.215 533.312 448.246 533.324 448.277 533.34 cv
448.305 533.359 448.324 533.383 448.344 533.414 cv
448.359 533.449 448.375 533.492 448.383 533.543 cv
448.391 533.594 448.395 533.652 448.398 533.723 cv
cp
f
454.504 533.687 mo
454.504 533.758 454.496 533.82 454.488 533.875 cv
454.473 533.93 454.461 533.977 454.445 534.012 cv
454.43 534.051 454.406 534.078 454.375 534.094 cv
454.344 534.113 454.313 534.121 454.281 534.121 cv
450.09 534.121 li
450.035 534.121 449.988 534.117 449.949 534.102 cv
449.906 534.094 449.871 534.07 449.844 534.035 cv
449.813 534.008 449.789 533.961 449.777 533.898 cv
449.762 533.84 449.758 533.77 449.758 533.684 cv
449.758 533.609 449.758 533.539 449.766 533.477 cv
449.77 533.418 449.785 533.367 449.805 533.32 cv
449.824 533.277 449.848 533.234 449.879 533.187 cv
449.906 533.148 449.945 533.098 450 533.043 cv
451.516 531.484 li
451.863 531.125 452.141 530.805 452.355 530.52 cv
452.566 530.234 452.73 529.973 452.848 529.738 cv
452.957 529.504 453.035 529.293 453.074 529.102 cv
453.109 528.91 453.125 528.73 453.129 528.559 cv
453.125 528.395 453.098 528.234 453.043 528.082 cv
452.984 527.934 452.902 527.801 452.797 527.687 cv
452.688 527.578 452.555 527.488 452.395 527.418 cv
452.23 527.352 452.043 527.32 451.84 527.316 cv
451.59 527.32 451.371 527.352 451.176 527.418 cv
450.98 527.488 450.809 527.562 450.66 527.637 cv
450.512 527.719 450.387 527.789 450.293 527.852 cv
450.191 527.918 450.121 527.953 450.074 527.949 cv
450.043 527.953 450.016 527.945 449.996 527.926 cv
449.973 527.914 449.953 527.887 449.941 527.852 cv
449.926 527.82 449.918 527.773 449.91 527.711 cv
449.902 527.652 449.898 527.582 449.898 527.5 cv
449.898 527.441 449.898 527.391 449.902 527.348 cv
449.906 527.309 449.914 527.273 449.926 527.238 cv
449.934 527.211 449.945 527.18 449.965 527.148 cv
449.977 527.121 450.008 527.09 450.059 527.047 cv
450.102 527.008 450.184 526.949 450.301 526.879 cv
450.414 526.809 450.559 526.742 450.734 526.672 cv
450.906 526.605 451.098 526.547 451.309 526.496 cv
451.516 526.453 451.734 526.43 451.965 526.426 cv
452.332 526.43 452.652 526.48 452.93 526.582 cv
453.203 526.687 453.434 526.828 453.613 527.008 cv
453.793 527.187 453.93 527.398 454.023 527.637 cv
454.113 527.875 454.156 528.129 454.16 528.395 cv
454.156 528.645 454.137 528.887 454.094 529.121 cv
454.047 529.363 453.953 529.621 453.82 529.898 cv
453.68 530.18 453.48 530.492 453.219 530.832 cv
452.957 531.176 452.609 531.566 452.176 532.012 cv
450.977 533.266 li
454.277 533.266 li
454.305 533.266 454.336 533.277 454.367 533.293 cv
454.395 533.312 454.418 533.336 454.441 533.371 cv
454.457 533.41 454.473 533.457 454.488 533.504 cv
454.496 533.559 454.504 533.617 454.504 533.687 cv
cp
f
518.41 533.723 mo
518.406 533.797 518.402 533.859 518.395 533.91 cv
518.383 533.965 518.367 534.008 518.348 534.035 cv
518.324 534.07 518.301 534.094 518.277 534.102 cv
518.254 534.117 518.227 534.121 518.199 534.121 cv
514.238 534.121 li
514.211 534.121 514.188 534.117 514.164 534.102 cv
514.141 534.094 514.117 534.07 514.098 534.035 cv
514.074 534.008 514.059 533.965 514.047 533.91 cv
514.031 533.859 514.023 533.797 514.027 533.723 cv
514.023 533.652 514.031 533.594 514.047 533.543 cv
514.059 533.492 514.07 533.449 514.09 533.414 cv
514.105 533.383 514.129 533.359 514.152 533.34 cv
514.176 533.324 514.203 533.312 514.238 533.312 cv
515.824 533.312 li
515.824 527.547 li
514.355 528.418 li
514.281 528.465 514.223 528.488 514.18 528.492 cv
514.133 528.504 514.098 528.496 514.07 528.465 cv
514.039 528.441 514.02 528.398 514.012 528.34 cv
514.004 528.281 514 528.207 514 528.113 cv
514 528.051 514 527.992 514.008 527.945 cv
514.012 527.898 514.023 527.859 514.035 527.828 cv
514.043 527.797 514.059 527.77 514.082 527.746 cv
514.105 527.723 514.133 527.699 514.168 527.676 cv
515.918 526.559 li
515.93 526.547 515.949 526.535 515.977 526.527 cv
515.996 526.52 516.027 526.512 516.063 526.504 cv
516.094 526.496 516.133 526.492 516.184 526.492 cv
516.227 526.492 516.285 526.492 516.363 526.488 cv
516.453 526.492 516.531 526.496 516.598 526.5 cv
516.656 526.512 516.707 526.523 516.742 526.531 cv
516.773 526.547 516.797 526.562 516.813 526.582 cv
516.824 526.605 516.828 526.629 516.832 526.652 cv
516.832 533.312 li
518.199 533.312 li
518.227 533.312 518.258 533.324 518.289 533.34 cv
518.316 533.359 518.336 533.383 518.355 533.414 cv
518.371 533.449 518.387 533.492 518.395 533.543 cv
518.402 533.594 518.406 533.652 518.41 533.723 cv
cp
f
524.836 531.965 mo
524.832 532.098 524.813 532.199 524.777 532.27 cv
524.734 532.344 524.68 532.383 524.617 532.379 cv
523.758 532.379 li
523.758 533.973 li
523.754 534.008 523.746 534.035 523.734 534.055 cv
523.715 534.078 523.688 534.094 523.648 534.109 cv
523.609 534.125 523.555 534.137 523.492 534.145 cv
523.426 534.152 523.344 534.156 523.246 534.156 cv
523.145 534.156 523.066 534.152 523.004 534.145 cv
522.941 534.137 522.891 534.125 522.852 534.109 cv
522.813 534.094 522.785 534.078 522.77 534.055 cv
522.754 534.035 522.746 534.008 522.75 533.973 cv
522.75 532.379 li
519.648 532.379 li
519.602 532.383 519.566 532.375 519.535 532.363 cv
519.504 532.355 519.473 532.336 519.449 532.301 cv
519.418 532.273 519.402 532.227 519.395 532.164 cv
519.387 532.105 519.383 532.031 519.383 531.934 cv
519.383 531.863 519.383 531.797 519.387 531.738 cv
519.391 531.68 519.398 531.625 519.41 531.578 cv
519.422 531.531 519.438 531.484 519.457 531.437 cv
519.477 531.391 519.5 531.344 519.527 531.293 cv
522.23 526.684 li
522.25 526.656 522.277 526.629 522.316 526.602 cv
522.352 526.582 522.402 526.562 522.465 526.543 cv
522.523 526.531 522.594 526.52 522.684 526.512 cv
522.77 526.508 522.875 526.504 522.996 526.504 cv
523.125 526.504 523.238 526.512 523.336 526.52 cv
523.434 526.535 523.512 526.547 523.574 526.559 cv
523.629 526.578 523.676 526.598 523.711 526.621 cv
523.738 526.645 523.754 526.676 523.758 526.707 cv
523.758 531.551 li
524.617 531.551 li
524.68 531.555 524.734 531.59 524.773 531.652 cv
524.813 531.723 524.832 531.824 524.836 531.965 cv
cp
522.75 527.387 mo
522.742 527.387 li
520.305 531.551 li
522.75 531.551 li
cp
f
588.391 533.723 mo
588.387 533.797 588.383 533.859 588.375 533.91 cv
588.363 533.965 588.348 534.008 588.328 534.035 cv
588.305 534.07 588.281 534.094 588.258 534.102 cv
588.234 534.117 588.207 534.121 588.18 534.121 cv
584.219 534.121 li
584.191 534.121 584.168 534.117 584.145 534.102 cv
584.121 534.094 584.098 534.07 584.078 534.035 cv
584.055 534.008 584.039 533.965 584.027 533.91 cv
584.012 533.859 584.004 533.797 584.008 533.723 cv
584.004 533.652 584.012 533.594 584.027 533.543 cv
584.039 533.492 584.051 533.449 584.07 533.414 cv
584.086 533.383 584.109 533.359 584.133 533.34 cv
584.156 533.324 584.184 533.312 584.219 533.312 cv
585.805 533.312 li
585.805 527.547 li
584.336 528.418 li
584.262 528.465 584.203 528.488 584.16 528.492 cv
584.113 528.504 584.078 528.496 584.051 528.465 cv
584.02 528.441 584 528.398 583.992 528.34 cv
583.984 528.281 583.98 528.207 583.98 528.113 cv
583.98 528.051 583.98 527.992 583.988 527.945 cv
583.992 527.898 584.004 527.859 584.016 527.828 cv
584.023 527.797 584.039 527.77 584.063 527.746 cv
584.086 527.723 584.113 527.699 584.148 527.676 cv
585.898 526.559 li
585.91 526.547 585.93 526.535 585.957 526.527 cv
585.977 526.52 586.008 526.512 586.043 526.504 cv
586.074 526.496 586.113 526.492 586.164 526.492 cv
586.207 526.492 586.266 526.492 586.344 526.488 cv
586.434 526.492 586.512 526.496 586.578 526.5 cv
586.637 526.512 586.688 526.523 586.723 526.531 cv
586.754 526.547 586.777 526.562 586.793 526.582 cv
586.805 526.605 586.809 526.629 586.813 526.652 cv
586.813 533.312 li
588.18 533.312 li
588.207 533.312 588.238 533.324 588.27 533.34 cv
588.297 533.359 588.316 533.383 588.336 533.414 cv
588.352 533.449 588.367 533.492 588.375 533.543 cv
588.383 533.594 588.387 533.652 588.391 533.723 cv
cp
f
594.688 531.668 mo
594.684 532 594.633 532.32 594.535 532.633 cv
594.43 532.945 594.273 533.219 594.066 533.453 cv
593.852 533.687 593.586 533.879 593.262 534.02 cv
592.934 534.16 592.551 534.227 592.113 534.23 cv
591.797 534.227 591.516 534.191 591.277 534.113 cv
591.031 534.039 590.82 533.926 590.645 533.781 cv
590.461 533.641 590.313 533.465 590.195 533.25 cv
590.074 533.043 589.977 532.801 589.906 532.527 cv
589.828 532.258 589.777 531.965 589.75 531.641 cv
589.715 531.324 589.699 530.98 589.703 530.613 cv
589.699 530.289 589.719 529.961 589.758 529.629 cv
589.793 529.297 589.855 528.977 589.945 528.668 cv
590.031 528.359 590.152 528.07 590.309 527.797 cv
590.465 527.527 590.656 527.289 590.891 527.086 cv
591.121 526.887 591.402 526.727 591.727 526.609 cv
592.047 526.492 592.422 526.434 592.859 526.434 cv
593 526.434 593.148 526.445 593.297 526.461 cv
593.445 526.484 593.582 526.508 593.707 526.531 cv
593.832 526.562 593.938 526.594 594.023 526.629 cv
594.109 526.664 594.164 526.691 594.191 526.715 cv
594.219 526.738 594.238 526.762 594.254 526.785 cv
594.262 526.809 594.273 526.836 594.285 526.867 cv
594.289 526.898 594.297 526.934 594.305 526.965 cv
594.309 527.004 594.309 527.047 594.313 527.102 cv
594.309 527.172 594.309 527.234 594.309 527.285 cv
594.305 527.336 594.297 527.375 594.285 527.406 cv
594.27 527.437 594.25 527.461 594.23 527.477 cv
594.207 527.492 594.18 527.5 594.148 527.5 cv
594.102 527.5 594.043 527.488 593.969 527.461 cv
593.895 527.434 593.805 527.402 593.699 527.367 cv
593.594 527.336 593.465 527.305 593.316 527.277 cv
593.164 527.254 592.992 527.242 592.793 527.238 cv
592.43 527.242 592.117 527.316 591.855 527.461 cv
591.59 527.613 591.375 527.812 591.211 528.059 cv
591.047 528.312 590.922 528.602 590.844 528.93 cv
590.762 529.258 590.719 529.602 590.707 529.961 cv
590.809 529.902 590.922 529.844 591.051 529.785 cv
591.176 529.73 591.313 529.68 591.465 529.629 cv
591.613 529.586 591.773 529.547 591.941 529.516 cv
592.109 529.484 592.289 529.469 592.484 529.469 cv
592.891 529.469 593.238 529.527 593.52 529.637 cv
593.801 529.75 594.027 529.902 594.199 530.098 cv
594.371 530.297 594.496 530.531 594.574 530.797 cv
594.648 531.07 594.684 531.359 594.688 531.668 cv
cp
593.664 531.762 mo
593.66 531.535 593.637 531.328 593.598 531.141 cv
593.551 530.957 593.477 530.801 593.371 530.672 cv
593.266 530.543 593.125 530.441 592.949 530.371 cv
592.773 530.301 592.559 530.266 592.301 530.266 cv
592.156 530.266 592.012 530.281 591.867 530.305 cv
591.719 530.332 591.578 530.367 591.445 530.41 cv
591.313 530.457 591.184 530.508 591.059 530.57 cv
590.934 530.633 590.82 530.699 590.727 530.762 cv
590.723 531.27 590.754 531.691 590.82 532.031 cv
590.883 532.371 590.977 532.645 591.102 532.848 cv
591.223 533.055 591.379 533.199 591.563 533.285 cv
591.742 533.375 591.957 533.418 592.207 533.418 cv
592.457 533.418 592.672 533.371 592.855 533.277 cv
593.039 533.184 593.191 533.059 593.313 532.898 cv
593.434 532.742 593.523 532.566 593.578 532.367 cv
593.633 532.172 593.66 531.969 593.664 531.762 cv
cp
f
240.801 549.812 mo
240.797 549.918 240.781 550.008 240.746 550.078 cv
240.711 550.156 240.664 550.215 240.609 550.258 cv
240.551 550.309 240.488 550.344 240.422 550.359 cv
240.348 550.383 240.277 550.391 240.215 550.391 cv
239.77 550.391 li
239.629 550.391 239.508 550.379 239.402 550.348 cv
239.297 550.324 239.199 550.27 239.105 550.191 cv
239.012 550.117 238.918 550.016 238.824 549.883 cv
238.73 549.754 238.629 549.59 238.523 549.387 cv
235.449 543.648 li
235.285 543.355 235.121 543.047 234.961 542.719 cv
234.793 542.398 234.641 542.082 234.504 541.773 cv
234.488 541.773 li
234.496 542.148 234.504 542.531 234.512 542.918 cv
234.516 543.309 234.516 543.695 234.52 544.078 cv
234.52 550.164 li
234.516 550.203 234.504 550.238 234.484 550.27 cv
234.461 550.305 234.426 550.332 234.375 550.348 cv
234.32 550.367 234.25 550.379 234.168 550.395 cv
234.082 550.406 233.977 550.414 233.848 550.414 cv
233.711 550.414 233.602 550.406 233.52 550.395 cv
233.434 550.379 233.367 550.367 233.32 550.348 cv
233.27 550.332 233.234 550.305 233.211 550.27 cv
233.188 550.238 233.176 550.203 233.18 550.164 cv
233.18 540.859 li
233.176 540.652 233.234 540.504 233.355 540.414 cv
233.473 540.328 233.602 540.285 233.742 540.281 cv
234.402 540.281 li
234.555 540.285 234.688 540.297 234.793 540.32 cv
234.895 540.348 234.988 540.391 235.074 540.449 cv
235.156 540.512 235.234 540.594 235.316 540.699 cv
235.391 540.809 235.473 540.945 235.559 541.102 cv
237.926 545.527 li
238.07 545.801 238.211 546.066 238.348 546.32 cv
238.48 546.578 238.609 546.832 238.738 547.078 cv
238.859 547.332 238.984 547.578 239.109 547.816 cv
239.23 548.059 239.352 548.301 239.477 548.543 cv
239.484 548.543 li
239.473 548.137 239.465 547.707 239.465 547.262 cv
239.457 546.816 239.457 546.391 239.461 545.98 cv
239.461 540.508 li
239.457 540.473 239.469 540.437 239.492 540.406 cv
239.516 540.375 239.551 540.348 239.605 540.324 cv
239.652 540.301 239.723 540.285 239.809 540.273 cv
239.895 540.266 240.004 540.262 240.145 540.258 cv
240.262 540.262 240.367 540.266 240.457 540.273 cv
240.543 540.285 240.609 540.301 240.66 540.324 cv
240.707 540.348 240.742 540.375 240.766 540.406 cv
240.785 540.437 240.797 540.473 240.801 540.508 cv
cp
f
249.348 550.172 mo
249.344 550.219 249.336 550.254 249.32 550.277 cv
249.301 550.309 249.266 550.332 249.223 550.352 cv
249.176 550.371 249.117 550.383 249.043 550.398 cv
248.965 550.406 248.871 550.414 248.766 550.414 cv
248.641 550.414 248.543 550.406 248.473 550.398 cv
248.395 550.383 248.336 550.371 248.293 550.352 cv
248.246 550.332 248.215 550.309 248.203 550.277 cv
248.184 550.254 248.176 550.219 248.18 550.172 cv
248.18 549.246 li
247.777 549.691 247.383 550.012 246.996 550.211 cv
246.602 550.414 246.207 550.512 245.813 550.516 cv
245.34 550.512 244.945 550.437 244.629 550.281 cv
244.309 550.129 244.051 549.918 243.855 549.648 cv
243.652 549.383 243.512 549.07 243.43 548.711 cv
243.34 548.355 243.297 547.922 243.301 547.414 cv
243.301 543.16 li
243.297 543.121 243.305 543.086 243.328 543.055 cv
243.344 543.027 243.379 543.004 243.434 542.977 cv
243.48 542.957 243.551 542.941 243.637 542.93 cv
243.719 542.926 243.82 542.922 243.949 542.918 cv
244.07 542.922 244.176 542.926 244.262 542.93 cv
244.344 542.941 244.41 542.957 244.457 542.977 cv
244.504 543.004 244.539 543.027 244.563 543.055 cv
244.582 543.086 244.59 543.121 244.594 543.16 cv
244.594 547.242 li
244.59 547.656 244.621 547.984 244.684 548.23 cv
244.742 548.477 244.832 548.687 244.957 548.859 cv
245.074 549.039 245.23 549.172 245.422 549.266 cv
245.605 549.363 245.824 549.414 246.074 549.41 cv
246.395 549.414 246.715 549.297 247.039 549.066 cv
247.355 548.84 247.695 548.504 248.055 548.059 cv
248.055 543.16 li
248.055 543.121 248.063 543.086 248.082 543.055 cv
248.098 543.027 248.133 543.004 248.188 542.977 cv
248.238 542.957 248.305 542.941 248.387 542.93 cv
248.465 542.926 248.57 542.922 248.703 542.918 cv
248.824 542.922 248.93 542.926 249.016 542.93 cv
249.098 542.941 249.16 542.957 249.207 542.977 cv
249.25 543.004 249.285 543.027 249.313 543.055 cv
249.332 543.086 249.344 543.121 249.348 543.16 cv
cp
f
262.125 550.172 mo
262.121 550.219 262.113 550.254 262.094 550.277 cv
262.07 550.309 262.035 550.332 261.992 550.352 cv
261.941 550.371 261.875 550.383 261.797 550.398 cv
261.711 550.406 261.609 550.414 261.484 550.414 cv
261.352 550.414 261.242 550.406 261.164 550.398 cv
261.078 550.383 261.012 550.371 260.965 550.352 cv
260.91 550.332 260.875 550.309 260.859 550.277 cv
260.836 550.254 260.828 550.219 260.828 550.172 cv
260.828 545.91 li
260.828 545.617 260.801 545.348 260.75 545.102 cv
260.695 544.859 260.613 544.648 260.5 544.469 cv
260.387 544.293 260.242 544.156 260.066 544.062 cv
259.887 543.969 259.676 543.922 259.441 543.922 cv
259.145 543.922 258.848 544.039 258.551 544.266 cv
258.246 544.5 257.918 544.832 257.563 545.27 cv
257.563 550.172 li
257.559 550.219 257.547 550.254 257.531 550.277 cv
257.508 550.309 257.477 550.332 257.43 550.352 cv
257.379 550.371 257.313 550.383 257.23 550.398 cv
257.145 550.406 257.039 550.414 256.918 550.414 cv
256.797 550.414 256.695 550.406 256.609 550.398 cv
256.523 550.383 256.453 550.371 256.406 550.352 cv
256.352 550.332 256.32 550.309 256.305 550.277 cv
256.285 550.254 256.273 550.219 256.277 550.172 cv
256.277 545.91 li
256.273 545.617 256.246 545.348 256.191 545.102 cv
256.133 544.859 256.047 544.648 255.934 544.469 cv
255.82 544.293 255.676 544.156 255.504 544.062 cv
255.324 543.969 255.117 543.922 254.883 543.922 cv
254.582 543.922 254.285 544.039 253.984 544.266 cv
253.684 544.5 253.355 544.832 253.004 545.27 cv
253.004 550.172 li
253 550.219 252.988 550.254 252.973 550.277 cv
252.949 550.309 252.918 550.332 252.871 550.352 cv
252.824 550.371 252.758 550.383 252.68 550.398 cv
252.594 550.406 252.488 550.414 252.359 550.414 cv
252.23 550.414 252.125 550.406 252.047 550.398 cv
251.961 550.383 251.895 550.371 251.848 550.352 cv
251.793 550.332 251.762 550.309 251.746 550.277 cv
251.727 550.254 251.715 550.219 251.719 550.172 cv
251.719 543.16 li
251.715 543.121 251.723 543.086 251.742 543.055 cv
251.754 543.027 251.785 543.004 251.836 542.977 cv
251.879 542.957 251.941 542.941 252.016 542.93 cv
252.086 542.926 252.18 542.922 252.305 542.918 cv
252.414 542.922 252.512 542.926 252.59 542.93 cv
252.664 542.941 252.723 542.957 252.766 542.977 cv
252.805 543.004 252.832 543.027 252.852 543.055 cv
252.867 543.086 252.875 543.121 252.879 543.16 cv
252.879 544.086 li
253.27 543.645 253.652 543.324 254.027 543.117 cv
254.395 542.914 254.773 542.809 255.156 542.809 cv
255.445 542.809 255.703 542.844 255.938 542.91 cv
256.164 542.98 256.371 543.074 256.551 543.195 cv
256.727 543.316 256.875 543.461 257.004 543.629 cv
257.125 543.801 257.23 543.992 257.316 544.195 cv
257.547 543.945 257.77 543.73 257.98 543.551 cv
258.191 543.379 258.395 543.234 258.59 543.121 cv
258.785 543.016 258.973 542.937 259.156 542.883 cv
259.34 542.836 259.527 542.809 259.715 542.809 cv
260.168 542.809 260.547 542.891 260.852 543.047 cv
261.156 543.211 261.402 543.422 261.598 543.684 cv
261.785 543.949 261.922 544.258 262.004 544.613 cv
262.082 544.969 262.121 545.344 262.125 545.738 cv
cp
f
270.926 546.57 mo
270.922 547.18 270.855 547.73 270.727 548.215 cv
270.59 548.703 270.395 549.117 270.141 549.457 cv
269.883 549.801 269.566 550.062 269.195 550.242 cv
268.82 550.426 268.395 550.512 267.91 550.516 cv
267.684 550.512 267.477 550.492 267.289 550.449 cv
267.102 550.402 266.914 550.332 266.734 550.234 cv
266.547 550.137 266.367 550.012 266.188 549.859 cv
266.004 549.711 265.813 549.531 265.613 549.316 cv
265.613 550.172 li
265.613 550.219 265.602 550.254 265.582 550.281 cv
265.559 550.316 265.523 550.34 265.48 550.355 cv
265.43 550.371 265.371 550.383 265.305 550.398 cv
265.23 550.406 265.141 550.414 265.035 550.414 cv
264.926 550.414 264.84 550.406 264.77 550.398 cv
264.695 550.383 264.633 550.371 264.59 550.355 cv
264.539 550.34 264.508 550.316 264.496 550.281 cv
264.477 550.254 264.469 550.219 264.473 550.172 cv
264.473 539.762 li
264.469 539.723 264.48 539.687 264.5 539.652 cv
264.516 539.625 264.547 539.598 264.602 539.574 cv
264.648 539.555 264.715 539.539 264.801 539.527 cv
264.879 539.52 264.984 539.516 265.113 539.512 cv
265.242 539.516 265.348 539.52 265.434 539.527 cv
265.512 539.539 265.578 539.555 265.625 539.574 cv
265.672 539.598 265.703 539.625 265.727 539.652 cv
265.742 539.687 265.754 539.723 265.758 539.762 cv
265.758 543.961 li
265.965 543.75 266.168 543.57 266.363 543.426 cv
266.559 543.281 266.746 543.164 266.934 543.07 cv
267.117 542.984 267.305 542.918 267.496 542.871 cv
267.68 542.832 267.879 542.809 268.09 542.809 cv
268.594 542.809 269.027 542.91 269.395 543.113 cv
269.754 543.316 270.047 543.59 270.273 543.926 cv
270.496 544.27 270.664 544.668 270.77 545.125 cv
270.871 545.582 270.922 546.062 270.926 546.57 cv
cp
269.594 546.719 mo
269.59 546.363 269.563 546.016 269.512 545.676 cv
269.453 545.34 269.359 545.043 269.223 544.781 cv
269.086 544.523 268.906 544.312 268.684 544.152 cv
268.457 543.996 268.176 543.918 267.844 543.914 cv
267.676 543.918 267.512 543.941 267.352 543.984 cv
267.188 544.035 267.023 544.113 266.855 544.219 cv
266.688 544.332 266.512 544.473 266.336 544.641 cv
266.152 544.816 265.961 545.031 265.758 545.285 cv
265.758 548.082 li
266.113 548.516 266.453 548.848 266.777 549.07 cv
267.102 549.301 267.438 549.414 267.789 549.41 cv
268.109 549.414 268.387 549.336 268.621 549.176 cv
268.848 549.023 269.035 548.816 269.18 548.555 cv
269.324 548.301 269.43 548.012 269.496 547.691 cv
269.559 547.375 269.59 547.051 269.594 546.719 cv
cp
f
278.836 546.363 mo
278.832 546.566 278.781 546.707 278.684 546.793 cv
278.578 546.879 278.461 546.922 278.336 546.922 cv
273.719 546.922 li
273.715 547.312 273.754 547.664 273.836 547.977 cv
273.91 548.289 274.043 548.559 274.227 548.777 cv
274.406 549.004 274.641 549.176 274.938 549.293 cv
275.227 549.418 275.586 549.477 276.012 549.473 cv
276.344 549.477 276.641 549.449 276.902 549.391 cv
277.164 549.34 277.391 549.277 277.582 549.207 cv
277.77 549.141 277.926 549.082 278.051 549.023 cv
278.172 548.973 278.266 548.945 278.328 548.941 cv
278.363 548.945 278.395 548.953 278.426 548.969 cv
278.453 548.988 278.477 549.016 278.496 549.051 cv
278.508 549.09 278.52 549.141 278.531 549.203 cv
278.535 549.27 278.539 549.348 278.543 549.441 cv
278.539 549.512 278.535 549.57 278.535 549.617 cv
278.527 549.664 278.523 549.707 278.516 549.746 cv
278.508 549.785 278.492 549.82 278.477 549.852 cv
278.453 549.883 278.43 549.914 278.406 549.941 cv
278.375 549.973 278.293 550.02 278.152 550.082 cv
278.012 550.148 277.828 550.211 277.605 550.273 cv
277.379 550.336 277.121 550.391 276.828 550.441 cv
276.535 550.488 276.223 550.512 275.891 550.516 cv
275.313 550.512 274.805 550.434 274.375 550.273 cv
273.938 550.113 273.574 549.875 273.281 549.559 cv
272.98 549.242 272.758 548.848 272.609 548.367 cv
272.461 547.891 272.387 547.332 272.387 546.695 cv
272.387 546.098 272.461 545.559 272.617 545.074 cv
272.77 544.598 272.996 544.187 273.293 543.852 cv
273.586 543.516 273.941 543.258 274.355 543.078 cv
274.77 542.898 275.234 542.809 275.75 542.809 cv
276.301 542.809 276.77 542.898 277.156 543.074 cv
277.543 543.254 277.859 543.492 278.113 543.789 cv
278.359 544.09 278.543 544.441 278.66 544.84 cv
278.773 545.246 278.832 545.676 278.836 546.129 cv
cp
277.543 545.98 mo
277.559 545.305 277.406 544.773 277.09 544.391 cv
276.773 544.008 276.305 543.816 275.688 543.812 cv
275.363 543.816 275.082 543.875 274.844 543.992 cv
274.602 544.113 274.402 544.273 274.242 544.469 cv
274.078 544.668 273.953 544.898 273.867 545.16 cv
273.777 545.422 273.727 545.695 273.719 545.98 cv
cp
f
284.902 543.617 mo
284.898 543.734 284.898 543.832 284.895 543.906 cv
284.887 543.988 284.875 544.051 284.863 544.09 cv
284.844 544.137 284.824 544.168 284.805 544.191 cv
284.777 544.215 284.746 544.227 284.707 544.227 cv
284.664 544.227 284.613 544.215 284.555 544.191 cv
284.492 544.168 284.422 544.145 284.352 544.121 cv
284.273 544.098 284.191 544.078 284.098 544.055 cv
284.004 544.039 283.902 544.027 283.793 544.023 cv
283.66 544.027 283.531 544.055 283.41 544.102 cv
283.285 544.156 283.156 544.242 283.02 544.359 cv
282.879 544.484 282.734 544.641 282.586 544.836 cv
282.434 545.031 282.266 545.273 282.086 545.559 cv
282.086 550.172 li
282.082 550.219 282.07 550.254 282.055 550.277 cv
282.031 550.309 282 550.332 281.953 550.352 cv
281.906 550.371 281.84 550.383 281.762 550.398 cv
281.676 550.406 281.57 550.414 281.441 550.414 cv
281.313 550.414 281.207 550.406 281.129 550.398 cv
281.043 550.383 280.977 550.371 280.93 550.352 cv
280.875 550.332 280.844 550.309 280.828 550.277 cv
280.809 550.254 280.797 550.219 280.801 550.172 cv
280.801 543.16 li
280.797 543.121 280.805 543.086 280.824 543.055 cv
280.836 543.027 280.867 543.004 280.918 542.977 cv
280.961 542.957 281.023 542.941 281.098 542.93 cv
281.168 542.926 281.262 542.922 281.387 542.918 cv
281.496 542.922 281.594 542.926 281.672 542.93 cv
281.746 542.941 281.805 542.957 281.848 542.977 cv
281.887 543.004 281.914 543.027 281.934 543.055 cv
281.949 543.086 281.957 543.121 281.961 543.16 cv
281.961 544.18 li
282.148 543.898 282.332 543.672 282.504 543.496 cv
282.672 543.32 282.832 543.18 282.984 543.078 cv
283.133 542.977 283.281 542.906 283.43 542.867 cv
283.578 542.828 283.727 542.809 283.879 542.809 cv
283.945 542.809 284.023 542.812 284.109 542.82 cv
284.195 542.828 284.285 542.844 284.379 542.863 cv
284.473 542.887 284.555 542.91 284.633 542.934 cv
284.703 542.961 284.758 542.988 284.793 543.012 cv
284.82 543.043 284.84 543.066 284.855 543.086 cv
284.863 543.113 284.875 543.145 284.883 543.176 cv
284.891 543.215 284.895 543.266 284.898 543.336 cv
284.898 543.406 284.898 543.5 284.902 543.617 cv
cp
f
296.66 546.586 mo
296.656 547.164 296.582 547.691 296.434 548.168 cv
296.281 548.652 296.055 549.066 295.758 549.41 cv
295.457 549.762 295.082 550.031 294.637 550.223 cv
294.184 550.418 293.664 550.512 293.074 550.516 cv
292.496 550.512 291.992 550.43 291.566 550.258 cv
291.137 550.09 290.781 549.84 290.496 549.512 cv
290.207 549.184 289.992 548.789 289.855 548.32 cv
289.715 547.855 289.648 547.324 289.648 546.727 cv
289.648 546.16 289.719 545.633 289.867 545.152 cv
290.012 544.672 290.238 544.258 290.539 543.906 cv
290.836 543.559 291.207 543.289 291.656 543.098 cv
292.102 542.906 292.625 542.809 293.223 542.809 cv
293.801 542.809 294.301 542.895 294.73 543.066 cv
295.156 543.238 295.516 543.488 295.801 543.816 cv
296.086 544.145 296.301 544.543 296.445 545.008 cv
296.586 545.477 296.656 546.004 296.66 546.586 cv
cp
295.328 546.672 mo
295.324 546.297 295.289 545.937 295.223 545.598 cv
295.148 545.262 295.031 544.969 294.871 544.711 cv
294.707 544.461 294.488 544.258 294.211 544.105 cv
293.93 543.961 293.582 543.887 293.172 543.883 cv
292.785 543.887 292.457 543.953 292.184 544.086 cv
291.906 544.223 291.68 544.414 291.504 544.66 cv
291.324 544.906 291.191 545.199 291.109 545.535 cv
291.02 545.875 290.977 546.242 290.98 546.641 cv
290.977 547.027 291.012 547.391 291.086 547.727 cv
291.152 548.066 291.27 548.359 291.438 548.609 cv
291.602 548.863 291.824 549.066 292.102 549.211 cv
292.379 549.363 292.727 549.437 293.141 549.434 cv
293.516 549.437 293.844 549.367 294.125 549.23 cv
294.402 549.098 294.629 548.91 294.809 548.66 cv
294.984 548.418 295.113 548.125 295.199 547.789 cv
295.281 547.453 295.324 547.082 295.328 546.672 cv
cp
f
302.391 540.273 mo
302.387 540.375 302.383 540.453 302.375 540.512 cv
302.363 540.574 302.352 540.625 302.34 540.656 cv
302.324 540.695 302.309 540.719 302.289 540.73 cv
302.266 540.746 302.238 540.754 302.211 540.75 cv
302.172 540.754 302.125 540.742 302.074 540.715 cv
302.016 540.695 301.949 540.668 301.875 540.637 cv
301.793 540.609 301.703 540.582 301.598 540.559 cv
301.488 540.535 301.363 540.523 301.23 540.523 cv
301.035 540.523 300.871 540.555 300.738 540.617 cv
300.598 540.68 300.488 540.777 300.41 540.91 cv
300.324 541.043 300.266 541.215 300.23 541.426 cv
300.191 541.637 300.172 541.895 300.176 542.191 cv
300.176 542.957 li
301.742 542.957 li
301.781 542.961 301.816 542.969 301.848 542.984 cv
301.875 543.004 301.902 543.035 301.926 543.078 cv
301.949 543.125 301.965 543.184 301.98 543.246 cv
301.988 543.316 301.996 543.398 302 543.492 cv
301.996 543.684 301.973 543.816 301.93 543.898 cv
301.879 543.984 301.816 544.027 301.742 544.023 cv
300.176 544.023 li
300.176 550.172 li
300.172 550.219 300.164 550.254 300.145 550.277 cv
300.121 550.309 300.086 550.332 300.039 550.352 cv
299.988 550.371 299.922 550.383 299.84 550.398 cv
299.754 550.406 299.648 550.414 299.531 550.414 cv
299.402 550.414 299.301 550.406 299.219 550.398 cv
299.133 550.383 299.066 550.371 299.02 550.352 cv
298.969 550.332 298.934 550.309 298.914 550.277 cv
298.891 550.254 298.879 550.219 298.883 550.172 cv
298.883 544.023 li
297.895 544.023 li
297.809 544.027 297.746 543.984 297.707 543.898 cv
297.664 543.816 297.641 543.684 297.645 543.492 cv
297.641 543.398 297.648 543.316 297.66 543.246 cv
297.668 543.184 297.684 543.125 297.707 543.078 cv
297.727 543.035 297.75 543.004 297.785 542.984 cv
297.813 542.969 297.852 542.961 297.895 542.957 cv
298.883 542.957 li
298.883 542.23 li
298.879 541.746 298.926 541.328 299.02 540.973 cv
299.109 540.625 299.246 540.336 299.434 540.113 cv
299.617 539.891 299.852 539.727 300.141 539.617 cv
300.422 539.512 300.758 539.457 301.145 539.457 cv
301.32 539.457 301.496 539.477 301.672 539.508 cv
301.84 539.547 301.973 539.582 302.07 539.617 cv
302.16 539.66 302.223 539.695 302.258 539.723 cv
302.285 539.758 302.313 539.797 302.336 539.844 cv
302.355 539.895 302.367 539.957 302.379 540.023 cv
302.383 540.098 302.387 540.18 302.391 540.273 cv
cp
f
312.59 547.539 mo
312.586 548.012 312.5 548.434 312.328 548.801 cv
312.152 549.176 311.91 549.488 311.602 549.742 cv
311.293 550 310.93 550.191 310.512 550.32 cv
310.09 550.449 309.641 550.512 309.16 550.516 cv
308.82 550.512 308.504 550.484 308.219 550.43 cv
307.93 550.371 307.676 550.305 307.449 550.219 cv
307.223 550.141 307.031 550.055 306.879 549.961 cv
306.723 549.875 306.617 549.797 306.559 549.734 cv
306.5 549.672 306.457 549.594 306.43 549.5 cv
306.398 549.406 306.383 549.277 306.387 549.113 cv
306.383 549 306.387 548.906 306.402 548.828 cv
306.41 548.754 306.426 548.691 306.449 548.645 cv
306.465 548.598 306.492 548.566 306.527 548.547 cv
306.555 548.531 306.59 548.523 306.633 548.52 cv
306.703 548.523 306.805 548.566 306.941 548.652 cv
307.07 548.742 307.242 548.84 307.453 548.941 cv
307.66 549.051 307.91 549.148 308.203 549.234 cv
308.496 549.328 308.836 549.371 309.223 549.371 cv
309.512 549.371 309.777 549.332 310.02 549.254 cv
310.258 549.176 310.465 549.066 310.645 548.922 cv
310.816 548.781 310.953 548.605 311.047 548.395 cv
311.141 548.187 311.188 547.953 311.188 547.687 cv
311.188 547.406 311.121 547.16 310.992 546.953 cv
310.859 546.754 310.688 546.578 310.477 546.422 cv
310.262 546.273 310.02 546.133 309.746 546 cv
309.473 545.875 309.191 545.742 308.91 545.609 cv
308.621 545.477 308.344 545.332 308.074 545.168 cv
307.805 545.012 307.563 544.82 307.352 544.602 cv
307.133 544.383 306.961 544.129 306.832 543.832 cv
306.695 543.543 306.629 543.191 306.633 542.777 cv
306.629 542.359 306.707 541.984 306.863 541.652 cv
307.016 541.324 307.227 541.047 307.504 540.82 cv
307.773 540.602 308.098 540.43 308.477 540.312 cv
308.852 540.195 309.262 540.137 309.699 540.137 cv
309.918 540.137 310.141 540.156 310.371 540.195 cv
310.594 540.234 310.805 540.285 311.008 540.348 cv
311.203 540.414 311.383 540.488 311.543 540.566 cv
311.695 540.648 311.797 540.715 311.852 540.762 cv
311.898 540.816 311.934 540.855 311.949 540.879 cv
311.965 540.91 311.977 540.945 311.988 540.988 cv
311.996 541.035 312.004 541.09 312.012 541.148 cv
312.016 541.215 312.02 541.293 312.02 541.391 cv
312.02 541.484 312.016 541.57 312.008 541.641 cv
312 541.719 311.988 541.777 311.973 541.824 cv
311.957 541.871 311.934 541.906 311.906 541.93 cv
311.875 541.953 311.844 541.965 311.809 541.965 cv
311.75 541.965 311.66 541.93 311.539 541.859 cv
311.414 541.789 311.262 541.707 311.09 541.613 cv
310.91 541.523 310.703 541.441 310.465 541.363 cv
310.219 541.289 309.949 541.25 309.652 541.25 cv
309.371 541.25 309.125 541.289 308.918 541.363 cv
308.707 541.441 308.535 541.543 308.402 541.664 cv
308.266 541.789 308.164 541.934 308.098 542.105 cv
308.031 542.277 308 542.461 308 542.652 cv
308 542.937 308.063 543.18 308.191 543.379 cv
308.32 543.582 308.492 543.762 308.711 543.914 cv
308.922 544.074 309.168 544.215 309.445 544.344 cv
309.719 544.477 310 544.609 310.289 544.738 cv
310.574 544.871 310.855 545.016 311.129 545.172 cv
311.402 545.332 311.648 545.52 311.867 545.734 cv
312.082 545.953 312.254 546.207 312.391 546.5 cv
312.52 546.793 312.586 547.141 312.59 547.539 cv
cp
f
320.355 550.172 mo
320.352 550.219 320.344 550.254 320.328 550.277 cv
320.309 550.309 320.273 550.332 320.23 550.352 cv
320.184 550.371 320.125 550.383 320.051 550.398 cv
319.973 550.406 319.879 550.414 319.773 550.414 cv
319.648 550.414 319.551 550.406 319.48 550.398 cv
319.402 550.383 319.344 550.371 319.301 550.352 cv
319.254 550.332 319.223 550.309 319.211 550.277 cv
319.191 550.254 319.184 550.219 319.188 550.172 cv
319.188 549.246 li
318.785 549.691 318.391 550.012 318.004 550.211 cv
317.609 550.414 317.215 550.512 316.82 550.516 cv
316.348 550.512 315.953 550.437 315.637 550.281 cv
315.316 550.129 315.059 549.918 314.863 549.648 cv
314.66 549.383 314.52 549.07 314.438 548.711 cv
314.348 548.355 314.305 547.922 314.309 547.414 cv
314.309 543.16 li
314.305 543.121 314.313 543.086 314.336 543.055 cv
314.352 543.027 314.387 543.004 314.441 542.977 cv
314.488 542.957 314.559 542.941 314.645 542.93 cv
314.727 542.926 314.828 542.922 314.957 542.918 cv
315.078 542.922 315.184 542.926 315.27 542.93 cv
315.352 542.941 315.418 542.957 315.465 542.977 cv
315.512 543.004 315.547 543.027 315.57 543.055 cv
315.59 543.086 315.598 543.121 315.602 543.16 cv
315.602 547.242 li
315.598 547.656 315.629 547.984 315.691 548.23 cv
315.75 548.477 315.84 548.687 315.965 548.859 cv
316.082 549.039 316.238 549.172 316.43 549.266 cv
316.613 549.363 316.832 549.414 317.082 549.41 cv
317.402 549.414 317.723 549.297 318.047 549.066 cv
318.363 548.84 318.703 548.504 319.063 548.059 cv
319.063 543.16 li
319.063 543.121 319.07 543.086 319.09 543.055 cv
319.105 543.027 319.141 543.004 319.195 542.977 cv
319.246 542.957 319.313 542.941 319.395 542.93 cv
319.473 542.926 319.578 542.922 319.711 542.918 cv
319.832 542.922 319.938 542.926 320.023 542.93 cv
320.105 542.941 320.168 542.957 320.215 542.977 cv
320.258 543.004 320.293 543.027 320.32 543.055 cv
320.34 543.086 320.352 543.121 320.355 543.16 cv
cp
f
329.211 546.57 mo
329.207 547.18 329.141 547.73 329.012 548.215 cv
328.875 548.703 328.68 549.117 328.426 549.457 cv
328.168 549.801 327.852 550.062 327.48 550.242 cv
327.105 550.426 326.68 550.512 326.195 550.516 cv
325.969 550.512 325.762 550.492 325.574 550.449 cv
325.387 550.402 325.199 550.332 325.02 550.234 cv
324.832 550.137 324.652 550.012 324.473 549.859 cv
324.289 549.711 324.098 549.531 323.898 549.316 cv
323.898 550.172 li
323.898 550.219 323.887 550.254 323.867 550.281 cv
323.844 550.316 323.809 550.34 323.766 550.355 cv
323.715 550.371 323.656 550.383 323.59 550.398 cv
323.516 550.406 323.426 550.414 323.32 550.414 cv
323.211 550.414 323.125 550.406 323.055 550.398 cv
322.98 550.383 322.918 550.371 322.875 550.355 cv
322.824 550.34 322.793 550.316 322.781 550.281 cv
322.762 550.254 322.754 550.219 322.758 550.172 cv
322.758 539.762 li
322.754 539.723 322.766 539.687 322.785 539.652 cv
322.801 539.625 322.832 539.598 322.887 539.574 cv
322.934 539.555 323 539.539 323.086 539.527 cv
323.164 539.52 323.27 539.516 323.398 539.512 cv
323.527 539.516 323.633 539.52 323.719 539.527 cv
323.797 539.539 323.863 539.555 323.91 539.574 cv
323.957 539.598 323.988 539.625 324.012 539.652 cv
324.027 539.687 324.039 539.723 324.043 539.762 cv
324.043 543.961 li
324.25 543.75 324.453 543.57 324.648 543.426 cv
324.844 543.281 325.031 543.164 325.219 543.07 cv
325.402 542.984 325.59 542.918 325.781 542.871 cv
325.965 542.832 326.164 542.809 326.375 542.809 cv
326.879 542.809 327.313 542.91 327.68 543.113 cv
328.039 543.316 328.332 543.59 328.559 543.926 cv
328.781 544.27 328.949 544.668 329.055 545.125 cv
329.156 545.582 329.207 546.062 329.211 546.57 cv
cp
327.879 546.719 mo
327.875 546.363 327.848 546.016 327.797 545.676 cv
327.738 545.34 327.645 545.043 327.508 544.781 cv
327.371 544.523 327.191 544.312 326.969 544.152 cv
326.742 543.996 326.461 543.918 326.129 543.914 cv
325.961 543.918 325.797 543.941 325.637 543.984 cv
325.473 544.035 325.309 544.113 325.141 544.219 cv
324.973 544.332 324.797 544.473 324.621 544.641 cv
324.438 544.816 324.246 545.031 324.043 545.285 cv
324.043 548.082 li
324.398 548.516 324.738 548.848 325.063 549.07 cv
325.387 549.301 325.723 549.414 326.074 549.41 cv
326.395 549.414 326.672 549.336 326.906 549.176 cv
327.133 549.023 327.32 548.816 327.465 548.555 cv
327.609 548.301 327.715 548.012 327.781 547.691 cv
327.844 547.375 327.875 547.051 327.879 546.719 cv
cp
f
334.367 546.434 mo
334.367 546.637 334.344 546.773 334.297 546.852 cv
334.25 546.93 334.18 546.969 334.094 546.969 cv
330.836 546.969 li
330.742 546.969 330.676 546.93 330.629 546.848 cv
330.582 546.77 330.559 546.633 330.559 546.434 cv
330.559 546.238 330.582 546.098 330.629 546.02 cv
330.676 545.941 330.742 545.902 330.836 545.902 cv
334.094 545.902 li
334.133 545.902 334.172 545.91 334.207 545.926 cv
334.238 545.941 334.266 545.973 334.293 546.016 cv
334.313 546.062 334.332 546.117 334.348 546.184 cv
334.359 546.254 334.367 546.34 334.367 546.434 cv
cp
f
337.621 550.164 mo
337.617 550.207 337.609 550.242 337.59 550.273 cv
337.566 550.305 337.527 550.332 337.48 550.348 cv
337.426 550.367 337.359 550.379 337.273 550.395 cv
337.188 550.406 337.078 550.414 336.953 550.414 cv
336.824 550.414 336.719 550.406 336.633 550.395 cv
336.543 550.379 336.473 550.367 336.422 550.348 cv
336.367 550.332 336.332 550.305 336.313 550.273 cv
336.289 550.242 336.277 550.207 336.281 550.164 cv
336.281 540.484 li
336.277 540.445 336.289 540.41 336.316 540.375 cv
336.336 540.348 336.375 540.32 336.434 540.301 cv
336.484 540.285 336.555 540.27 336.645 540.254 cv
336.727 540.242 336.828 540.238 336.953 540.234 cv
337.078 540.238 337.188 540.242 337.273 540.254 cv
337.359 540.27 337.426 540.285 337.48 540.301 cv
337.527 540.32 337.566 540.348 337.59 540.375 cv
337.609 540.41 337.617 540.445 337.621 540.484 cv
cp
f
350.609 550.172 mo
350.605 550.219 350.598 550.254 350.578 550.277 cv
350.555 550.309 350.52 550.332 350.477 550.352 cv
350.426 550.371 350.359 550.383 350.281 550.398 cv
350.195 550.406 350.094 550.414 349.969 550.414 cv
349.836 550.414 349.727 550.406 349.648 550.398 cv
349.563 550.383 349.496 550.371 349.449 550.352 cv
349.395 550.332 349.359 550.309 349.344 550.277 cv
349.32 550.254 349.313 550.219 349.313 550.172 cv
349.313 545.91 li
349.313 545.617 349.285 545.348 349.234 545.102 cv
349.18 544.859 349.098 544.648 348.984 544.469 cv
348.871 544.293 348.727 544.156 348.551 544.062 cv
348.371 543.969 348.16 543.922 347.926 543.922 cv
347.629 543.922 347.332 544.039 347.035 544.266 cv
346.73 544.5 346.402 544.832 346.047 545.27 cv
346.047 550.172 li
346.043 550.219 346.031 550.254 346.016 550.277 cv
345.992 550.309 345.961 550.332 345.914 550.352 cv
345.863 550.371 345.797 550.383 345.715 550.398 cv
345.629 550.406 345.523 550.414 345.402 550.414 cv
345.281 550.414 345.18 550.406 345.094 550.398 cv
345.008 550.383 344.938 550.371 344.891 550.352 cv
344.836 550.332 344.805 550.309 344.789 550.277 cv
344.77 550.254 344.758 550.219 344.762 550.172 cv
344.762 545.91 li
344.758 545.617 344.73 545.348 344.676 545.102 cv
344.617 544.859 344.531 544.648 344.418 544.469 cv
344.305 544.293 344.16 544.156 343.988 544.062 cv
343.809 543.969 343.602 543.922 343.367 543.922 cv
343.066 543.922 342.77 544.039 342.469 544.266 cv
342.168 544.5 341.84 544.832 341.488 545.27 cv
341.488 550.172 li
341.484 550.219 341.473 550.254 341.457 550.277 cv
341.434 550.309 341.402 550.332 341.355 550.352 cv
341.309 550.371 341.242 550.383 341.164 550.398 cv
341.078 550.406 340.973 550.414 340.844 550.414 cv
340.715 550.414 340.609 550.406 340.531 550.398 cv
340.445 550.383 340.379 550.371 340.332 550.352 cv
340.277 550.332 340.246 550.309 340.23 550.277 cv
340.211 550.254 340.199 550.219 340.203 550.172 cv
340.203 543.16 li
340.199 543.121 340.207 543.086 340.227 543.055 cv
340.238 543.027 340.27 543.004 340.32 542.977 cv
340.363 542.957 340.426 542.941 340.5 542.93 cv
340.57 542.926 340.664 542.922 340.789 542.918 cv
340.898 542.922 340.996 542.926 341.074 542.93 cv
341.148 542.941 341.207 542.957 341.25 542.977 cv
341.289 543.004 341.316 543.027 341.336 543.055 cv
341.352 543.086 341.359 543.121 341.363 543.16 cv
341.363 544.086 li
341.754 543.645 342.137 543.324 342.512 543.117 cv
342.879 542.914 343.258 542.809 343.641 542.809 cv
343.93 542.809 344.188 542.844 344.422 542.91 cv
344.648 542.98 344.855 543.074 345.035 543.195 cv
345.211 543.316 345.359 543.461 345.488 543.629 cv
345.609 543.801 345.715 543.992 345.801 544.195 cv
346.031 543.945 346.254 543.73 346.465 543.551 cv
346.676 543.379 346.879 543.234 347.074 543.121 cv
347.27 543.016 347.457 542.937 347.641 542.883 cv
347.824 542.836 348.012 542.809 348.199 542.809 cv
348.652 542.809 349.031 542.891 349.336 543.047 cv
349.641 543.211 349.887 543.422 350.082 543.684 cv
350.27 543.949 350.406 544.258 350.488 544.613 cv
350.566 544.969 350.605 545.344 350.609 545.738 cv
cp
f
358.238 550.18 mo
358.234 550.242 358.215 550.289 358.176 550.32 cv
358.133 550.352 358.074 550.375 358.004 550.391 cv
357.926 550.406 357.82 550.414 357.684 550.414 cv
357.547 550.414 357.438 550.406 357.359 550.391 cv
357.273 550.375 357.215 550.352 357.184 550.32 cv
357.145 550.289 357.129 550.242 357.133 550.18 cv
357.133 549.48 li
356.824 549.809 356.48 550.062 356.105 550.242 cv
355.727 550.426 355.328 550.512 354.91 550.516 cv
354.535 550.512 354.203 550.465 353.906 550.371 cv
353.609 550.273 353.355 550.137 353.145 549.953 cv
352.934 549.773 352.77 549.551 352.652 549.285 cv
352.535 549.023 352.477 548.723 352.48 548.379 cv
352.477 547.988 352.555 547.645 352.719 547.352 cv
352.875 547.062 353.109 546.82 353.414 546.629 cv
353.715 546.437 354.082 546.293 354.52 546.195 cv
354.953 546.102 355.445 546.055 355.992 546.051 cv
356.961 546.051 li
356.961 545.504 li
356.957 545.234 356.93 544.996 356.875 544.789 cv
356.816 544.582 356.723 544.41 356.598 544.27 cv
356.465 544.133 356.301 544.027 356.102 543.957 cv
355.895 543.887 355.645 543.852 355.355 543.852 cv
355.035 543.852 354.75 543.891 354.5 543.965 cv
354.242 544.043 354.023 544.125 353.836 544.215 cv
353.648 544.309 353.488 544.395 353.363 544.465 cv
353.23 544.543 353.137 544.578 353.078 544.578 cv
353.035 544.578 353 544.57 352.969 544.547 cv
352.938 544.531 352.91 544.5 352.887 544.453 cv
352.863 544.414 352.844 544.359 352.836 544.293 cv
352.82 544.23 352.816 544.16 352.82 544.078 cv
352.816 543.953 352.824 543.848 352.848 543.77 cv
352.863 543.695 352.91 543.625 352.98 543.555 cv
353.051 543.488 353.172 543.41 353.344 543.32 cv
353.516 543.23 353.711 543.148 353.934 543.07 cv
354.156 543 354.402 542.937 354.668 542.883 cv
354.934 542.836 355.199 542.809 355.473 542.809 cv
355.973 542.809 356.402 542.867 356.754 542.98 cv
357.105 543.098 357.391 543.266 357.613 543.484 cv
357.828 543.707 357.988 543.98 358.09 544.305 cv
358.188 544.637 358.234 545.02 358.238 545.449 cv
cp
356.961 546.977 mo
355.859 546.977 li
355.504 546.98 355.199 547.012 354.941 547.066 cv
354.68 547.129 354.465 547.215 354.293 547.332 cv
354.121 547.449 353.996 547.59 353.918 547.754 cv
353.836 547.918 353.793 548.105 353.797 548.316 cv
353.793 548.684 353.91 548.977 354.141 549.187 cv
354.371 549.406 354.695 549.512 355.113 549.512 cv
355.449 549.512 355.762 549.426 356.051 549.254 cv
356.34 549.082 356.641 548.82 356.961 548.465 cv
cp
f
366.457 543.477 mo
366.453 543.66 366.43 543.793 366.383 543.871 cv
366.332 543.953 366.27 543.992 366.195 543.992 cv
365.188 543.992 li
365.367 544.18 365.496 544.387 365.57 544.613 cv
365.641 544.84 365.676 545.074 365.68 545.316 cv
365.676 545.723 365.609 546.082 365.484 546.395 cv
365.352 546.707 365.168 546.973 364.926 547.184 cv
364.684 547.402 364.395 547.566 364.066 547.68 cv
363.73 547.797 363.363 547.855 362.961 547.852 cv
362.672 547.855 362.398 547.816 362.145 547.738 cv
361.883 547.664 361.688 547.57 361.551 547.453 cv
361.457 547.551 361.379 547.656 361.32 547.773 cv
361.258 547.895 361.227 548.031 361.23 548.184 cv
361.227 548.367 361.313 548.52 361.484 548.637 cv
361.652 548.762 361.875 548.824 362.156 548.832 cv
363.988 548.91 li
364.336 548.922 364.652 548.969 364.945 549.055 cv
365.234 549.141 365.488 549.266 365.703 549.422 cv
365.914 549.582 366.082 549.773 366.203 550.004 cv
366.32 550.238 366.379 550.508 366.383 550.812 cv
366.379 551.133 366.313 551.437 366.18 551.73 cv
366.043 552.02 365.836 552.273 365.559 552.496 cv
365.277 552.715 364.922 552.891 364.492 553.02 cv
364.063 553.145 363.555 553.207 362.969 553.211 cv
362.398 553.207 361.914 553.16 361.52 553.066 cv
361.121 552.969 360.797 552.836 360.543 552.672 cv
360.289 552.504 360.105 552.309 359.992 552.078 cv
359.875 551.844 359.816 551.59 359.82 551.324 cv
359.816 551.152 359.836 550.988 359.883 550.828 cv
359.922 550.664 359.984 550.512 360.07 550.367 cv
360.152 550.223 360.262 550.086 360.391 549.949 cv
360.516 549.82 360.66 549.687 360.832 549.559 cv
360.574 549.43 360.387 549.266 360.266 549.066 cv
360.145 548.871 360.086 548.66 360.086 548.426 cv
360.086 548.113 360.148 547.828 360.277 547.578 cv
360.406 547.328 360.566 547.105 360.762 546.906 cv
360.598 546.715 360.473 546.5 360.379 546.258 cv
360.285 546.02 360.238 545.727 360.238 545.379 cv
360.238 544.984 360.305 544.625 360.441 544.305 cv
360.574 543.988 360.762 543.723 361.004 543.504 cv
361.242 543.289 361.527 543.121 361.863 543 cv
362.195 542.887 362.563 542.828 362.961 542.824 cv
363.172 542.828 363.371 542.84 363.555 542.859 cv
363.738 542.887 363.91 542.918 364.074 542.957 cv
366.195 542.957 li
366.281 542.961 366.348 543.004 366.391 543.086 cv
366.434 543.176 366.453 543.305 366.457 543.477 cv
cp
364.449 545.324 mo
364.445 544.852 364.313 544.48 364.055 544.207 cv
363.789 543.941 363.418 543.805 362.938 543.805 cv
362.684 543.805 362.465 543.848 362.285 543.93 cv
362.098 544.016 361.945 544.129 361.824 544.273 cv
361.703 544.422 361.613 544.59 361.555 544.777 cv
361.492 544.965 361.461 545.164 361.465 545.371 cv
361.461 545.836 361.594 546.199 361.855 546.465 cv
362.117 546.73 362.484 546.863 362.961 546.859 cv
363.211 546.863 363.43 546.824 363.621 546.738 cv
363.805 546.66 363.961 546.547 364.086 546.406 cv
364.207 546.266 364.297 546.102 364.359 545.91 cv
364.414 545.727 364.445 545.531 364.449 545.324 cv
cp
365.094 550.883 mo
365.09 550.578 364.965 550.348 364.723 550.184 cv
364.473 550.023 364.141 549.934 363.723 549.922 cv
361.906 549.859 li
361.738 549.992 361.602 550.117 361.5 550.23 cv
361.391 550.348 361.309 550.457 361.246 550.566 cv
361.184 550.672 361.141 550.777 361.117 550.883 cv
361.094 550.984 361.082 551.09 361.082 551.199 cv
361.082 551.535 361.25 551.789 361.594 551.969 cv
361.934 552.141 362.414 552.23 363.031 552.23 cv
363.418 552.23 363.742 552.191 364.008 552.117 cv
364.266 552.039 364.477 551.937 364.641 551.816 cv
364.797 551.687 364.914 551.547 364.988 551.387 cv
365.055 551.227 365.09 551.059 365.094 550.883 cv
cp
f
374.02 546.363 mo
374.016 546.566 373.965 546.707 373.867 546.793 cv
373.762 546.879 373.645 546.922 373.52 546.922 cv
368.902 546.922 li
368.898 547.312 368.938 547.664 369.02 547.977 cv
369.094 548.289 369.227 548.559 369.41 548.777 cv
369.59 549.004 369.824 549.176 370.121 549.293 cv
370.41 549.418 370.77 549.477 371.195 549.473 cv
371.527 549.477 371.824 549.449 372.086 549.391 cv
372.348 549.34 372.574 549.277 372.766 549.207 cv
372.953 549.141 373.109 549.082 373.234 549.023 cv
373.355 548.973 373.449 548.945 373.512 548.941 cv
373.547 548.945 373.578 548.953 373.609 548.969 cv
373.637 548.988 373.66 549.016 373.68 549.051 cv
373.691 549.09 373.703 549.141 373.715 549.203 cv
373.719 549.27 373.723 549.348 373.727 549.441 cv
373.723 549.512 373.719 549.57 373.719 549.617 cv
373.711 549.664 373.707 549.707 373.699 549.746 cv
373.691 549.785 373.676 549.82 373.66 549.852 cv
373.637 549.883 373.613 549.914 373.59 549.941 cv
373.559 549.973 373.477 550.02 373.336 550.082 cv
373.195 550.148 373.012 550.211 372.789 550.273 cv
372.563 550.336 372.305 550.391 372.012 550.441 cv
371.719 550.488 371.406 550.512 371.074 550.516 cv
370.496 550.512 369.988 550.434 369.559 550.273 cv
369.121 550.113 368.758 549.875 368.465 549.559 cv
368.164 549.242 367.941 548.848 367.793 548.367 cv
367.645 547.891 367.57 547.332 367.57 546.695 cv
367.57 546.098 367.645 545.559 367.801 545.074 cv
367.953 544.598 368.18 544.187 368.477 543.852 cv
368.77 543.516 369.125 543.258 369.539 543.078 cv
369.953 542.898 370.418 542.809 370.934 542.809 cv
371.484 542.809 371.953 542.898 372.34 543.074 cv
372.727 543.254 373.043 543.492 373.297 543.789 cv
373.543 544.09 373.727 544.441 373.844 544.84 cv
373.957 545.246 374.016 545.676 374.02 546.129 cv
cp
372.727 545.98 mo
372.742 545.305 372.59 544.773 372.273 544.391 cv
371.957 544.008 371.488 543.816 370.871 543.812 cv
370.547 543.816 370.266 543.875 370.027 543.992 cv
369.785 544.113 369.586 544.273 369.426 544.469 cv
369.262 544.668 369.137 544.898 369.051 545.16 cv
368.961 545.422 368.91 545.695 368.902 545.98 cv
cp
f
380.387 548.262 mo
380.383 548.625 380.316 548.945 380.188 549.223 cv
380.055 549.504 379.867 549.738 379.625 549.93 cv
379.379 550.125 379.086 550.27 378.75 550.367 cv
378.41 550.465 378.039 550.512 377.637 550.516 cv
377.383 550.512 377.145 550.492 376.922 550.457 cv
376.695 550.414 376.496 550.367 376.316 550.309 cv
376.137 550.25 375.984 550.187 375.859 550.121 cv
375.734 550.059 375.641 550 375.586 549.945 cv
375.527 549.895 375.488 549.824 375.465 549.727 cv
375.438 549.637 375.426 549.508 375.426 549.348 cv
375.426 549.25 375.43 549.168 375.441 549.098 cv
375.449 549.031 375.461 548.977 375.48 548.934 cv
375.492 548.895 375.516 548.863 375.543 548.844 cv
375.57 548.828 375.602 548.82 375.641 548.816 cv
375.695 548.82 375.781 548.855 375.895 548.922 cv
376.004 548.996 376.141 549.074 376.309 549.152 cv
376.469 549.238 376.66 549.312 376.887 549.383 cv
377.105 549.453 377.363 549.488 377.66 549.488 cv
377.875 549.488 378.074 549.465 378.254 549.418 cv
378.43 549.371 378.582 549.305 378.711 549.211 cv
378.84 549.125 378.941 549.008 379.012 548.863 cv
379.082 548.727 379.117 548.559 379.117 548.363 cv
379.117 548.168 379.066 548.004 378.965 547.867 cv
378.863 547.734 378.727 547.613 378.563 547.508 cv
378.395 547.406 378.211 547.316 378.004 547.23 cv
377.793 547.152 377.578 547.066 377.359 546.977 cv
377.141 546.891 376.926 546.789 376.715 546.676 cv
376.504 546.566 376.313 546.434 376.148 546.27 cv
375.977 546.113 375.844 545.918 375.746 545.691 cv
375.641 545.469 375.59 545.203 375.594 544.891 cv
375.59 544.617 375.645 544.352 375.754 544.098 cv
375.859 543.848 376.02 543.629 376.234 543.437 cv
376.445 543.25 376.711 543.098 377.031 542.98 cv
377.352 542.867 377.723 542.809 378.152 542.809 cv
378.336 542.809 378.523 542.824 378.711 542.855 cv
378.895 542.887 379.063 542.926 379.219 542.973 cv
379.367 543.02 379.496 543.07 379.605 543.125 cv
379.707 543.18 379.789 543.23 379.848 543.27 cv
379.898 543.316 379.934 543.352 379.957 543.379 cv
379.973 543.41 379.988 543.445 379.996 543.48 cv
380.004 543.523 380.012 543.57 380.02 543.625 cv
380.027 543.684 380.031 543.754 380.031 543.836 cv
380.031 543.926 380.027 544.004 380.02 544.066 cv
380.012 544.137 379.996 544.187 379.98 544.227 cv
379.957 544.27 379.938 544.301 379.914 544.316 cv
379.887 544.336 379.855 544.344 379.828 544.344 cv
379.777 544.344 379.711 544.316 379.625 544.258 cv
379.535 544.203 379.422 544.141 379.281 544.074 cv
379.141 544.012 378.973 543.953 378.785 543.891 cv
378.594 543.836 378.379 543.805 378.137 543.805 cv
377.914 543.805 377.723 543.832 377.559 543.879 cv
377.391 543.934 377.254 544.004 377.148 544.09 cv
377.043 544.184 376.961 544.289 376.91 544.414 cv
376.852 544.539 376.824 544.676 376.828 544.82 cv
376.824 545.023 376.875 545.191 376.98 545.328 cv
377.082 545.469 377.219 545.59 377.387 545.691 cv
377.551 545.797 377.742 545.891 377.957 545.973 cv
378.168 546.059 378.383 546.145 378.605 546.23 cv
378.824 546.32 379.043 546.422 379.262 546.527 cv
379.477 546.637 379.668 546.766 379.836 546.922 cv
380 547.078 380.133 547.266 380.234 547.484 cv
380.332 547.703 380.383 547.965 380.387 548.262 cv
cp
f
142.34 12.238 mo
142.336 13.078 142.234 13.828 142.027 14.484 cv
141.82 15.148 141.512 15.707 141.102 16.164 cv
140.691 16.625 140.184 16.977 139.578 17.215 cv
138.973 17.457 138.273 17.574 137.48 17.578 cv
136.691 17.574 136.004 17.473 135.422 17.27 cv
134.836 17.066 134.348 16.754 133.961 16.332 cv
133.57 15.91 133.281 15.375 133.086 14.727 cv
132.891 14.078 132.793 13.309 132.797 12.418 cv
132.793 11.605 132.895 10.875 133.105 10.219 cv
133.309 9.57001 133.617 9.01599 134.031 8.55499 cv
134.438 8.10199 134.945 7.75 135.555 7.50403 cv
136.156 7.26202 136.859 7.14099 137.664 7.13702 cv
138.426 7.14099 139.102 7.242 139.688 7.44098 cv
140.27 7.64502 140.758 7.953 141.152 8.375 cv
141.543 8.797 141.84 9.328 142.039 9.96899 cv
142.238 10.609 142.336 11.367 142.34 12.238 cv
cp
140.191 12.348 mo
140.188 11.82 140.145 11.34 140.066 10.906 cv
139.98 10.473 139.84 10.102 139.641 9.789 cv
139.438 9.47998 139.172 9.242 138.84 9.07397 cv
138.508 8.90601 138.094 8.82001 137.598 8.82001 cv
137.09 8.82001 136.668 8.91803 136.332 9.10498 cv
135.996 9.297 135.723 9.547 135.516 9.86298 cv
135.305 10.184 135.156 10.555 135.074 10.977 cv
134.984 11.398 134.941 11.848 134.945 12.316 cv
134.941 12.871 134.984 13.367 135.07 13.805 cv
135.152 14.246 135.293 14.621 135.492 14.93 cv
135.688 15.242 135.953 15.477 136.285 15.641 cv
136.617 15.805 137.035 15.887 137.543 15.887 cv
138.043 15.887 138.461 15.793 138.801 15.605 cv
139.137 15.418 139.41 15.164 139.621 14.844 cv
139.824 14.523 139.973 14.148 140.063 13.719 cv
140.145 13.289 140.188 12.832 140.191 12.348 cv
cp
f
150.336 10.176 mo
150.332 10.203 150.332 10.234 150.332 10.27 cv
150.328 10.309 150.324 10.348 150.316 10.391 cv
150.309 10.434 150.297 10.484 150.285 10.539 cv
150.27 10.598 150.254 10.664 150.234 10.734 cv
148.148 17.023 li
148.121 17.113 148.086 17.187 148.043 17.238 cv
147.996 17.297 147.922 17.34 147.824 17.367 cv
147.719 17.398 147.582 17.414 147.41 17.43 cv
147.234 17.437 147.008 17.445 146.73 17.445 cv
146.453 17.445 146.227 17.437 146.055 17.426 cv
145.879 17.41 145.742 17.391 145.645 17.359 cv
145.543 17.332 145.473 17.289 145.43 17.23 cv
145.383 17.18 145.348 17.109 145.324 17.023 cv
143.238 10.734 li
143.207 10.633 143.18 10.539 143.164 10.457 cv
143.141 10.375 143.133 10.316 143.133 10.277 cv
143.129 10.246 143.125 10.211 143.129 10.176 cv
143.125 10.125 143.141 10.078 143.172 10.039 cv
143.199 10 143.25 9.96899 143.324 9.94098 cv
143.395 9.91803 143.492 9.89801 143.621 9.88702 cv
143.746 9.87903 143.906 9.875 144.102 9.87097 cv
144.313 9.875 144.484 9.883 144.617 9.89099 cv
144.742 9.90601 144.848 9.922 144.926 9.94501 cv
145 9.96899 145.051 10.004 145.086 10.047 cv
145.113 10.094 145.141 10.148 145.164 10.207 cv
146.746 15.309 li
146.793 15.504 li
146.84 15.309 li
148.398 10.207 li
148.41 10.148 148.434 10.094 148.469 10.047 cv
148.5 10.004 148.555 9.96899 148.629 9.94501 cv
148.699 9.922 148.797 9.90601 148.922 9.89099 cv
149.043 9.883 149.203 9.875 149.402 9.87097 cv
149.594 9.875 149.75 9.87903 149.871 9.88702 cv
149.992 9.89801 150.086 9.91803 150.156 9.94098 cv
150.223 9.96899 150.27 10 150.297 10.039 cv
150.32 10.078 150.332 10.125 150.336 10.176 cv
cp
f
157.816 13.457 mo
157.813 13.695 157.762 13.871 157.656 13.984 cv
157.547 14.102 157.398 14.16 157.219 14.156 cv
152.984 14.156 li
152.98 14.457 153.016 14.727 153.09 14.965 cv
153.156 15.207 153.27 15.41 153.426 15.578 cv
153.578 15.75 153.773 15.879 154.016 15.965 cv
154.254 16.055 154.543 16.098 154.887 16.098 cv
155.227 16.098 155.527 16.074 155.789 16.023 cv
156.047 15.977 156.273 15.922 156.465 15.859 cv
156.652 15.801 156.809 15.746 156.938 15.695 cv
157.059 15.648 157.16 15.625 157.242 15.621 cv
157.285 15.625 157.324 15.633 157.359 15.648 cv
157.387 15.668 157.414 15.699 157.434 15.746 cv
157.453 15.793 157.465 15.859 157.477 15.945 cv
157.48 16.031 157.484 16.141 157.488 16.27 cv
157.484 16.387 157.484 16.484 157.48 16.562 cv
157.473 16.645 157.465 16.711 157.457 16.766 cv
157.445 16.824 157.43 16.875 157.41 16.91 cv
157.391 16.953 157.363 16.988 157.332 17.023 cv
157.297 17.062 157.203 17.113 157.055 17.172 cv
156.898 17.238 156.707 17.301 156.477 17.355 cv
156.238 17.418 155.969 17.465 155.672 17.512 cv
155.367 17.551 155.047 17.574 154.707 17.578 cv
154.086 17.574 153.543 17.5 153.082 17.344 cv
152.613 17.191 152.227 16.953 151.918 16.637 cv
151.602 16.32 151.367 15.922 151.219 15.437 cv
151.063 14.957 150.988 14.391 150.992 13.734 cv
150.988 13.121 151.066 12.562 151.23 12.066 cv
151.387 11.57 151.621 11.152 151.934 10.805 cv
152.238 10.461 152.613 10.195 153.051 10.012 cv
153.488 9.83197 153.98 9.742 154.535 9.73798 cv
155.113 9.742 155.613 9.828 156.027 9.99597 cv
156.441 10.172 156.777 10.41 157.043 10.711 cv
157.305 11.016 157.5 11.375 157.629 11.789 cv
157.75 12.207 157.813 12.656 157.816 13.145 cv
cp
155.914 12.895 mo
155.926 12.344 155.816 11.91 155.582 11.598 cv
155.348 11.285 154.98 11.129 154.488 11.125 cv
154.238 11.129 154.023 11.176 153.84 11.266 cv
153.652 11.363 153.5 11.488 153.379 11.645 cv
153.254 11.805 153.16 11.992 153.098 12.207 cv
153.031 12.422 152.992 12.652 152.984 12.895 cv
cp
f
163.891 10.828 mo
163.891 11.02 163.883 11.172 163.875 11.289 cv
163.859 11.41 163.844 11.504 163.828 11.57 cv
163.805 11.641 163.777 11.687 163.746 11.711 cv
163.707 11.738 163.664 11.75 163.617 11.75 cv
163.57 11.75 163.523 11.742 163.477 11.723 cv
163.422 11.707 163.363 11.687 163.301 11.664 cv
163.23 11.645 163.16 11.625 163.086 11.605 cv
163.004 11.59 162.918 11.582 162.828 11.578 cv
162.715 11.582 162.605 11.602 162.5 11.645 cv
162.391 11.691 162.277 11.762 162.164 11.852 cv
162.043 11.945 161.922 12.07 161.797 12.223 cv
161.668 12.383 161.531 12.574 161.387 12.801 cv
161.387 17.133 li
161.383 17.187 161.367 17.23 161.34 17.27 cv
161.305 17.309 161.25 17.344 161.18 17.367 cv
161.102 17.395 161.004 17.41 160.879 17.426 cv
160.754 17.437 160.594 17.445 160.406 17.445 cv
160.211 17.445 160.055 17.437 159.93 17.426 cv
159.805 17.41 159.703 17.395 159.629 17.367 cv
159.551 17.344 159.496 17.309 159.469 17.27 cv
159.434 17.23 159.418 17.187 159.422 17.133 cv
159.422 10.184 li
159.418 10.137 159.434 10.09 159.461 10.047 cv
159.484 10.012 159.531 9.97998 159.602 9.94897 cv
159.668 9.92603 159.754 9.90601 159.863 9.89099 cv
159.969 9.883 160.102 9.875 160.266 9.87097 cv
160.43 9.875 160.566 9.883 160.676 9.89099 cv
160.781 9.90601 160.867 9.92603 160.93 9.94897 cv
160.988 9.97998 161.031 10.012 161.059 10.047 cv
161.082 10.09 161.094 10.137 161.098 10.184 cv
161.098 11.047 li
161.277 10.789 161.449 10.578 161.613 10.406 cv
161.77 10.242 161.926 10.105 162.074 10.004 cv
162.219 9.90601 162.363 9.84003 162.508 9.797 cv
162.652 9.76202 162.797 9.742 162.945 9.73798 cv
163.012 9.742 163.086 9.74597 163.164 9.75 cv
163.242 9.76202 163.32 9.77301 163.406 9.789 cv
163.484 9.80902 163.559 9.828 163.625 9.85199 cv
163.684 9.875 163.73 9.90198 163.762 9.92603 cv
163.789 9.95697 163.809 9.98401 163.824 10.012 cv
163.836 10.047 163.848 10.09 163.859 10.141 cv
163.867 10.199 163.875 10.281 163.883 10.387 cv
163.887 10.496 163.891 10.645 163.891 10.828 cv
cp
f
170.645 17.156 mo
170.641 17.234 170.613 17.289 170.566 17.328 cv
170.512 17.371 170.43 17.398 170.32 17.418 cv
170.203 17.434 170.039 17.445 169.824 17.445 cv
169.586 17.445 169.414 17.434 169.313 17.418 cv
169.203 17.398 169.129 17.371 169.09 17.328 cv
169.043 17.289 169.023 17.234 169.023 17.156 cv
169.023 16.605 li
168.734 16.914 168.406 17.152 168.043 17.32 cv
167.676 17.492 167.27 17.574 166.824 17.578 cv
166.453 17.574 166.113 17.527 165.805 17.434 cv
165.496 17.34 165.23 17.199 165.004 17.004 cv
164.777 16.816 164.602 16.582 164.477 16.301 cv
164.352 16.023 164.289 15.695 164.293 15.316 cv
164.289 14.918 164.367 14.566 164.527 14.262 cv
164.684 13.965 164.922 13.719 165.238 13.523 cv
165.551 13.332 165.941 13.187 166.41 13.09 cv
166.879 13 167.422 12.953 168.039 12.949 cv
168.719 12.949 li
168.719 12.527 li
168.719 12.312 168.695 12.121 168.652 11.957 cv
168.605 11.797 168.531 11.66 168.434 11.547 cv
168.328 11.441 168.195 11.359 168.027 11.305 cv
167.855 11.254 167.645 11.23 167.402 11.227 cv
167.07 11.23 166.777 11.266 166.523 11.336 cv
166.262 11.41 166.035 11.492 165.84 11.578 cv
165.641 11.672 165.477 11.75 165.348 11.82 cv
165.211 11.895 165.102 11.934 165.023 11.93 cv
164.961 11.934 164.91 11.914 164.871 11.875 cv
164.824 11.84 164.789 11.789 164.762 11.719 cv
164.73 11.656 164.707 11.57 164.695 11.469 cv
164.676 11.371 164.668 11.262 164.672 11.141 cv
164.668 10.98 164.684 10.855 164.711 10.758 cv
164.734 10.668 164.781 10.582 164.859 10.504 cv
164.93 10.43 165.059 10.348 165.242 10.258 cv
165.422 10.168 165.633 10.082 165.879 10.004 cv
166.121 9.92603 166.391 9.86298 166.68 9.81201 cv
166.969 9.76599 167.266 9.742 167.574 9.73798 cv
168.117 9.742 168.582 9.79303 168.969 9.89801 cv
169.355 10.008 169.676 10.172 169.926 10.391 cv
170.176 10.609 170.355 10.895 170.473 11.242 cv
170.582 11.594 170.641 12.008 170.645 12.48 cv
cp
168.719 14.18 mo
167.969 14.18 li
167.652 14.184 167.383 14.207 167.16 14.25 cv
166.934 14.301 166.75 14.371 166.613 14.461 cv
166.469 14.559 166.367 14.672 166.305 14.801 cv
166.238 14.937 166.203 15.086 166.207 15.254 cv
166.203 15.547 166.297 15.777 166.484 15.941 cv
166.668 16.109 166.926 16.191 167.254 16.191 cv
167.527 16.191 167.777 16.121 168.012 15.98 cv
168.238 15.84 168.477 15.637 168.719 15.363 cv
cp
f
174.57 17.133 mo
174.566 17.187 174.551 17.23 174.523 17.27 cv
174.488 17.309 174.434 17.344 174.363 17.367 cv
174.285 17.395 174.188 17.41 174.063 17.426 cv
173.938 17.437 173.777 17.445 173.59 17.445 cv
173.395 17.445 173.238 17.437 173.113 17.426 cv
172.988 17.41 172.887 17.395 172.813 17.367 cv
172.734 17.344 172.68 17.309 172.652 17.27 cv
172.617 17.23 172.602 17.187 172.605 17.133 cv
172.605 6.88702 li
172.602 6.836 172.617 6.789 172.652 6.74597 cv
172.68 6.70697 172.734 6.672 172.813 6.64099 cv
172.887 6.61298 172.988 6.59399 173.113 6.57397 cv
173.238 6.56201 173.395 6.55499 173.59 6.55103 cv
173.777 6.55499 173.938 6.56201 174.063 6.57397 cv
174.188 6.59399 174.285 6.61298 174.363 6.64099 cv
174.434 6.672 174.488 6.70697 174.523 6.74597 cv
174.551 6.789 174.566 6.836 174.57 6.88702 cv
cp
f
178.543 17.133 mo
178.539 17.187 178.523 17.23 178.496 17.27 cv
178.461 17.309 178.406 17.344 178.336 17.367 cv
178.258 17.395 178.16 17.41 178.035 17.426 cv
177.91 17.437 177.75 17.445 177.563 17.445 cv
177.367 17.445 177.211 17.437 177.086 17.426 cv
176.961 17.41 176.859 17.395 176.785 17.367 cv
176.707 17.344 176.652 17.309 176.625 17.27 cv
176.59 17.23 176.574 17.187 176.578 17.133 cv
176.578 6.88702 li
176.574 6.836 176.59 6.789 176.625 6.74597 cv
176.652 6.70697 176.707 6.672 176.785 6.64099 cv
176.859 6.61298 176.961 6.59399 177.086 6.57397 cv
177.211 6.56201 177.367 6.55499 177.563 6.55103 cv
177.75 6.55499 177.91 6.56201 178.035 6.57397 cv
178.16 6.59399 178.258 6.61298 178.336 6.64099 cv
178.406 6.672 178.461 6.70697 178.496 6.74597 cv
178.523 6.789 178.539 6.836 178.543 6.88702 cv
cp
f
190.203 14.375 mo
190.199 14.906 190.102 15.371 189.906 15.77 cv
189.707 16.172 189.441 16.508 189.105 16.773 cv
188.766 17.043 188.367 17.242 187.918 17.375 cv
187.465 17.508 186.984 17.574 186.473 17.578 cv
186.121 17.574 185.797 17.547 185.5 17.492 cv
185.199 17.434 184.938 17.367 184.711 17.285 cv
184.48 17.207 184.289 17.121 184.137 17.031 cv
183.984 16.945 183.875 16.867 183.809 16.797 cv
183.738 16.73 183.688 16.633 183.664 16.508 cv
183.633 16.383 183.621 16.199 183.621 15.957 cv
183.621 15.797 183.625 15.664 183.637 15.551 cv
183.645 15.445 183.66 15.355 183.688 15.285 cv
183.707 15.219 183.738 15.172 183.781 15.141 cv
183.816 15.117 183.863 15.102 183.914 15.098 cv
183.984 15.102 184.086 15.145 184.223 15.227 cv
184.352 15.316 184.523 15.41 184.734 15.512 cv
184.941 15.617 185.188 15.715 185.477 15.797 cv
185.762 15.887 186.098 15.93 186.48 15.926 cv
186.73 15.93 186.953 15.898 187.148 15.836 cv
187.344 15.777 187.512 15.691 187.652 15.582 cv
187.789 15.473 187.895 15.34 187.969 15.18 cv
188.039 15.02 188.074 14.84 188.078 14.641 cv
188.074 14.414 188.012 14.219 187.891 14.051 cv
187.762 13.891 187.598 13.746 187.402 13.617 cv
187.199 13.492 186.973 13.371 186.719 13.258 cv
186.465 13.148 186.203 13.031 185.934 12.902 cv
185.66 12.781 185.398 12.637 185.145 12.477 cv
184.891 12.32 184.664 12.133 184.465 11.91 cv
184.262 11.691 184.098 11.43 183.977 11.125 cv
183.852 10.824 183.789 10.465 183.793 10.043 cv
183.789 9.56201 183.879 9.13702 184.059 8.77002 cv
184.234 8.40601 184.477 8.10199 184.785 7.85498 cv
185.086 7.617 185.445 7.43701 185.859 7.31598 cv
186.273 7.19897 186.711 7.14099 187.172 7.13702 cv
187.41 7.14099 187.648 7.15601 187.891 7.19098 cv
188.129 7.22998 188.352 7.28101 188.559 7.34003 cv
188.766 7.40198 188.949 7.47302 189.113 7.547 cv
189.27 7.62903 189.379 7.69098 189.434 7.742 cv
189.484 7.797 189.52 7.84399 189.539 7.875 cv
189.555 7.914 189.57 7.961 189.586 8.02002 cv
189.598 8.08197 189.605 8.15601 189.613 8.24597 cv
189.617 8.34003 189.621 8.453 189.621 8.586 cv
189.621 8.73798 189.617 8.867 189.609 8.96899 cv
189.602 9.07397 189.586 9.15997 189.57 9.22302 cv
189.547 9.29303 189.523 9.34003 189.492 9.37097 cv
189.457 9.40198 189.41 9.41803 189.355 9.41803 cv
189.297 9.41803 189.207 9.383 189.082 9.30902 cv
188.957 9.23798 188.801 9.15997 188.621 9.07001 cv
188.438 8.98798 188.23 8.90997 187.992 8.84003 cv
187.75 8.77301 187.484 8.73798 187.203 8.73401 cv
186.977 8.73798 186.785 8.76599 186.621 8.81598 cv
186.453 8.87097 186.313 8.94501 186.203 9.039 cv
186.09 9.13702 186.008 9.25403 185.953 9.38702 cv
185.898 9.52698 185.871 9.66803 185.871 9.81598 cv
185.871 10.043 185.93 10.238 186.055 10.398 cv
186.172 10.562 186.336 10.707 186.547 10.832 cv
186.75 10.961 186.984 11.082 187.242 11.191 cv
187.5 11.309 187.766 11.426 188.039 11.547 cv
188.309 11.676 188.57 11.816 188.832 11.973 cv
189.09 12.129 189.324 12.32 189.527 12.539 cv
189.73 12.766 189.891 13.023 190.016 13.32 cv
190.137 13.617 190.199 13.969 190.203 14.375 cv
cp
f
198.66 13.555 mo
198.66 14.176 198.594 14.734 198.461 15.23 cv
198.328 15.727 198.133 16.148 197.879 16.496 cv
197.625 16.844 197.309 17.113 196.93 17.297 cv
196.547 17.484 196.113 17.574 195.629 17.578 cv
195.422 17.574 195.234 17.555 195.07 17.52 cv
194.898 17.477 194.734 17.418 194.578 17.34 cv
194.418 17.262 194.262 17.164 194.109 17.039 cv
193.949 16.922 193.789 16.781 193.625 16.617 cv
193.625 19.891 li
193.621 19.937 193.605 19.984 193.578 20.031 cv
193.543 20.07 193.488 20.105 193.418 20.137 cv
193.34 20.16 193.242 20.184 193.117 20.203 cv
192.992 20.215 192.832 20.223 192.645 20.227 cv
192.449 20.223 192.293 20.215 192.168 20.203 cv
192.043 20.184 191.941 20.16 191.867 20.137 cv
191.789 20.105 191.734 20.07 191.707 20.031 cv
191.672 19.984 191.656 19.937 191.66 19.891 cv
191.66 10.184 li
191.656 10.137 191.672 10.09 191.699 10.047 cv
191.723 10.012 191.766 9.97998 191.836 9.94897 cv
191.898 9.92603 191.984 9.90601 192.094 9.89099 cv
192.195 9.883 192.332 9.875 192.496 9.87097 cv
192.652 9.875 192.781 9.883 192.887 9.89099 cv
192.992 9.90601 193.078 9.92603 193.145 9.94897 cv
193.207 9.97998 193.254 10.012 193.281 10.047 cv
193.305 10.09 193.316 10.137 193.32 10.184 cv
193.32 11 li
193.52 10.793 193.719 10.613 193.918 10.453 cv
194.109 10.297 194.309 10.164 194.512 10.055 cv
194.715 9.953 194.922 9.87097 195.141 9.81598 cv
195.352 9.76599 195.582 9.742 195.832 9.73798 cv
196.336 9.742 196.77 9.84003 197.133 10.039 cv
197.488 10.242 197.781 10.52 198.008 10.863 cv
198.23 11.215 198.395 11.617 198.504 12.078 cv
198.605 12.539 198.66 13.031 198.66 13.555 cv
cp
196.617 13.695 mo
196.613 13.402 196.594 13.121 196.551 12.844 cv
196.504 12.574 196.426 12.332 196.324 12.117 cv
196.215 11.906 196.074 11.734 195.902 11.605 cv
195.727 11.48 195.512 11.418 195.254 11.414 cv
195.121 11.418 194.992 11.437 194.867 11.473 cv
194.738 11.516 194.609 11.578 194.477 11.664 cv
194.344 11.754 194.207 11.867 194.07 12.008 cv
193.926 12.148 193.777 12.324 193.625 12.527 cv
193.625 14.82 li
193.898 15.168 194.16 15.437 194.41 15.625 cv
194.656 15.816 194.918 15.91 195.191 15.91 cv
195.445 15.91 195.66 15.848 195.844 15.715 cv
196.02 15.59 196.168 15.418 196.281 15.207 cv
196.395 14.996 196.477 14.758 196.535 14.492 cv
196.586 14.227 196.613 13.961 196.617 13.695 cv
cp
f
206.652 13.457 mo
206.648 13.695 206.598 13.871 206.492 13.984 cv
206.383 14.102 206.234 14.16 206.055 14.156 cv
201.82 14.156 li
201.816 14.457 201.852 14.727 201.926 14.965 cv
201.992 15.207 202.105 15.41 202.262 15.578 cv
202.414 15.75 202.609 15.879 202.852 15.965 cv
203.09 16.055 203.379 16.098 203.723 16.098 cv
204.063 16.098 204.363 16.074 204.625 16.023 cv
204.883 15.977 205.109 15.922 205.301 15.859 cv
205.488 15.801 205.645 15.746 205.773 15.695 cv
205.895 15.648 205.996 15.625 206.078 15.621 cv
206.121 15.625 206.16 15.633 206.195 15.648 cv
206.223 15.668 206.25 15.699 206.27 15.746 cv
206.289 15.793 206.301 15.859 206.313 15.945 cv
206.316 16.031 206.32 16.141 206.324 16.27 cv
206.32 16.387 206.32 16.484 206.316 16.562 cv
206.309 16.645 206.301 16.711 206.293 16.766 cv
206.281 16.824 206.266 16.875 206.246 16.91 cv
206.227 16.953 206.199 16.988 206.168 17.023 cv
206.133 17.062 206.039 17.113 205.891 17.172 cv
205.734 17.238 205.543 17.301 205.313 17.355 cv
205.074 17.418 204.805 17.465 204.508 17.512 cv
204.203 17.551 203.883 17.574 203.543 17.578 cv
202.922 17.574 202.379 17.5 201.918 17.344 cv
201.449 17.191 201.063 16.953 200.754 16.637 cv
200.438 16.32 200.203 15.922 200.055 15.437 cv
199.898 14.957 199.824 14.391 199.828 13.734 cv
199.824 13.121 199.902 12.562 200.066 12.066 cv
200.223 11.57 200.457 11.152 200.77 10.805 cv
201.074 10.461 201.449 10.195 201.887 10.012 cv
202.324 9.83197 202.816 9.742 203.371 9.73798 cv
203.949 9.742 204.449 9.828 204.863 9.99597 cv
205.277 10.172 205.613 10.41 205.879 10.711 cv
206.141 11.016 206.336 11.375 206.465 11.789 cv
206.586 12.207 206.648 12.656 206.652 13.145 cv
cp
204.75 12.895 mo
204.762 12.344 204.652 11.91 204.418 11.598 cv
204.184 11.285 203.816 11.129 203.324 11.125 cv
203.074 11.129 202.859 11.176 202.676 11.266 cv
202.488 11.363 202.336 11.488 202.215 11.645 cv
202.09 11.805 201.996 11.992 201.934 12.207 cv
201.867 12.422 201.828 12.652 201.82 12.895 cv
cp
f
214.68 13.457 mo
214.676 13.695 214.625 13.871 214.52 13.984 cv
214.41 14.102 214.262 14.16 214.082 14.156 cv
209.848 14.156 li
209.844 14.457 209.879 14.727 209.953 14.965 cv
210.02 15.207 210.133 15.41 210.289 15.578 cv
210.441 15.75 210.637 15.879 210.879 15.965 cv
211.117 16.055 211.406 16.098 211.75 16.098 cv
212.09 16.098 212.391 16.074 212.652 16.023 cv
212.91 15.977 213.137 15.922 213.328 15.859 cv
213.516 15.801 213.672 15.746 213.801 15.695 cv
213.922 15.648 214.023 15.625 214.105 15.621 cv
214.148 15.625 214.188 15.633 214.223 15.648 cv
214.25 15.668 214.277 15.699 214.297 15.746 cv
214.316 15.793 214.328 15.859 214.34 15.945 cv
214.344 16.031 214.348 16.141 214.352 16.27 cv
214.348 16.387 214.348 16.484 214.344 16.562 cv
214.336 16.645 214.328 16.711 214.32 16.766 cv
214.309 16.824 214.293 16.875 214.273 16.91 cv
214.254 16.953 214.227 16.988 214.195 17.023 cv
214.16 17.062 214.066 17.113 213.918 17.172 cv
213.762 17.238 213.57 17.301 213.34 17.355 cv
213.102 17.418 212.832 17.465 212.535 17.512 cv
212.23 17.551 211.91 17.574 211.57 17.578 cv
210.949 17.574 210.406 17.5 209.945 17.344 cv
209.477 17.191 209.09 16.953 208.781 16.637 cv
208.465 16.32 208.23 15.922 208.082 15.437 cv
207.926 14.957 207.852 14.391 207.855 13.734 cv
207.852 13.121 207.93 12.562 208.094 12.066 cv
208.25 11.57 208.484 11.152 208.797 10.805 cv
209.102 10.461 209.477 10.195 209.914 10.012 cv
210.352 9.83197 210.844 9.742 211.398 9.73798 cv
211.977 9.742 212.477 9.828 212.891 9.99597 cv
213.305 10.172 213.641 10.41 213.906 10.711 cv
214.168 11.016 214.363 11.375 214.492 11.789 cv
214.613 12.207 214.676 12.656 214.68 13.145 cv
cp
212.777 12.895 mo
212.789 12.344 212.68 11.91 212.445 11.598 cv
212.211 11.285 211.844 11.129 211.352 11.125 cv
211.102 11.129 210.887 11.176 210.703 11.266 cv
210.516 11.363 210.363 11.488 210.242 11.645 cv
210.117 11.805 210.023 11.992 209.961 12.207 cv
209.895 12.422 209.855 12.652 209.848 12.895 cv
cp
f
222.879 17.133 mo
222.875 17.195 222.863 17.242 222.84 17.277 cv
222.813 17.32 222.766 17.352 222.707 17.375 cv
222.641 17.398 222.559 17.414 222.453 17.43 cv
222.348 17.437 222.215 17.445 222.063 17.445 cv
221.891 17.445 221.758 17.437 221.656 17.43 cv
221.551 17.414 221.465 17.398 221.402 17.375 cv
221.336 17.352 221.289 17.32 221.262 17.277 cv
221.23 17.242 221.215 17.195 221.219 17.133 cv
221.219 16.363 li
220.859 16.75 220.484 17.047 220.094 17.258 cv
219.695 17.469 219.262 17.574 218.789 17.578 cv
218.254 17.574 217.805 17.473 217.441 17.27 cv
217.074 17.066 216.777 16.793 216.547 16.441 cv
216.313 16.098 216.145 15.691 216.043 15.223 cv
215.941 14.762 215.891 14.27 215.891 13.75 cv
215.891 13.137 215.953 12.582 216.086 12.086 cv
216.215 11.594 216.41 11.172 216.668 10.824 cv
216.922 10.477 217.238 10.211 217.617 10.02 cv
217.996 9.836 218.434 9.742 218.93 9.73798 cv
219.316 9.742 219.668 9.82001 219.988 9.97699 cv
220.301 10.137 220.617 10.367 220.93 10.672 cv
220.93 6.90997 li
220.93 6.85901 220.941 6.81201 220.973 6.77002 cv
220.996 6.72998 221.051 6.69501 221.129 6.664 cv
221.203 6.63702 221.301 6.617 221.43 6.59802 cv
221.551 6.586 221.711 6.578 221.906 6.57397 cv
222.098 6.578 222.254 6.586 222.379 6.59802 cv
222.5 6.617 222.602 6.63702 222.676 6.664 cv
222.746 6.69501 222.797 6.72998 222.832 6.77002 cv
222.859 6.81201 222.875 6.85901 222.879 6.90997 cv
cp
220.93 12.488 mo
220.648 12.137 220.379 11.867 220.125 11.68 cv
219.863 11.492 219.594 11.398 219.316 11.398 cv
219.063 11.398 218.844 11.465 218.66 11.59 cv
218.473 11.723 218.324 11.891 218.215 12.102 cv
218.102 12.312 218.02 12.551 217.965 12.812 cv
217.91 13.078 217.883 13.348 217.883 13.617 cv
217.883 13.914 217.906 14.195 217.953 14.469 cv
218 14.746 218.074 14.992 218.184 15.207 cv
218.285 15.422 218.43 15.594 218.609 15.723 cv
218.785 15.855 219.008 15.922 219.277 15.918 cv
219.41 15.922 219.539 15.902 219.672 15.859 cv
219.797 15.824 219.93 15.762 220.063 15.668 cv
220.195 15.582 220.332 15.465 220.473 15.32 cv
220.613 15.18 220.766 15.004 220.93 14.797 cv
cp
f
231.449 17.133 mo
231.445 17.187 231.434 17.23 231.41 17.27 cv
231.383 17.309 231.336 17.344 231.273 17.367 cv
231.207 17.395 231.121 17.41 231.016 17.426 cv
230.91 17.437 230.777 17.445 230.617 17.445 cv
230.441 17.445 230.301 17.437 230.199 17.426 cv
230.09 17.41 230.008 17.395 229.945 17.367 cv
229.883 17.344 229.836 17.309 229.813 17.27 cv
229.781 17.23 229.77 17.187 229.773 17.133 cv
229.773 16.332 li
229.387 16.746 228.996 17.059 228.602 17.266 cv
228.199 17.473 227.789 17.574 227.367 17.578 cv
226.887 17.574 226.484 17.5 226.16 17.344 cv
225.836 17.191 225.574 16.977 225.375 16.707 cv
225.172 16.437 225.027 16.125 224.945 15.766 cv
224.855 15.41 224.813 14.969 224.816 14.437 cv
224.816 10.184 li
224.813 10.137 224.828 10.09 224.859 10.047 cv
224.887 10.012 224.938 9.97998 225.016 9.94897 cv
225.09 9.92603 225.191 9.90601 225.32 9.89099 cv
225.445 9.883 225.602 9.875 225.793 9.87097 cv
225.98 9.875 226.141 9.883 226.266 9.89099 cv
226.391 9.90601 226.488 9.92603 226.566 9.94897 cv
226.637 9.97998 226.691 10.012 226.727 10.047 cv
226.754 10.09 226.77 10.137 226.773 10.184 cv
226.773 14.109 li
226.77 14.477 226.793 14.754 226.844 14.945 cv
226.887 15.137 226.957 15.301 227.059 15.437 cv
227.152 15.578 227.277 15.684 227.426 15.758 cv
227.574 15.836 227.746 15.875 227.941 15.871 cv
228.191 15.875 228.441 15.785 228.695 15.598 cv
228.945 15.418 229.215 15.152 229.5 14.805 cv
229.5 10.184 li
229.5 10.137 229.512 10.09 229.543 10.047 cv
229.566 10.012 229.621 9.97998 229.699 9.94897 cv
229.773 9.92603 229.871 9.90601 230 9.89099 cv
230.121 9.883 230.281 9.875 230.477 9.87097 cv
230.668 9.875 230.824 9.883 230.949 9.89099 cv
231.07 9.90601 231.172 9.92603 231.246 9.94897 cv
231.316 9.97998 231.367 10.012 231.402 10.047 cv
231.43 10.09 231.445 10.137 231.449 10.184 cv
cp
f
240.332 13.555 mo
240.332 14.176 240.266 14.734 240.133 15.23 cv
240 15.727 239.805 16.148 239.551 16.496 cv
239.297 16.844 238.98 17.113 238.602 17.297 cv
238.219 17.484 237.785 17.574 237.301 17.578 cv
237.094 17.574 236.906 17.555 236.742 17.52 cv
236.57 17.477 236.406 17.418 236.25 17.34 cv
236.09 17.262 235.934 17.164 235.781 17.039 cv
235.621 16.922 235.461 16.781 235.297 16.617 cv
235.297 19.891 li
235.293 19.937 235.277 19.984 235.25 20.031 cv
235.215 20.07 235.16 20.105 235.09 20.137 cv
235.012 20.16 234.914 20.184 234.789 20.203 cv
234.664 20.215 234.504 20.223 234.316 20.227 cv
234.121 20.223 233.965 20.215 233.84 20.203 cv
233.715 20.184 233.613 20.16 233.539 20.137 cv
233.461 20.105 233.406 20.07 233.379 20.031 cv
233.344 19.984 233.328 19.937 233.332 19.891 cv
233.332 10.184 li
233.328 10.137 233.344 10.09 233.371 10.047 cv
233.395 10.012 233.438 9.97998 233.508 9.94897 cv
233.57 9.92603 233.656 9.90601 233.766 9.89099 cv
233.867 9.883 234.004 9.875 234.168 9.87097 cv
234.324 9.875 234.453 9.883 234.559 9.89099 cv
234.664 9.90601 234.75 9.92603 234.816 9.94897 cv
234.879 9.97998 234.926 10.012 234.953 10.047 cv
234.977 10.09 234.988 10.137 234.992 10.184 cv
234.992 11 li
235.191 10.793 235.391 10.613 235.59 10.453 cv
235.781 10.297 235.98 10.164 236.184 10.055 cv
236.387 9.953 236.594 9.87097 236.813 9.81598 cv
237.023 9.76599 237.254 9.742 237.504 9.73798 cv
238.008 9.742 238.441 9.84003 238.805 10.039 cv
239.16 10.242 239.453 10.52 239.68 10.863 cv
239.902 11.215 240.066 11.617 240.176 12.078 cv
240.277 12.539 240.332 13.031 240.332 13.555 cv
cp
238.289 13.695 mo
238.285 13.402 238.266 13.121 238.223 12.844 cv
238.176 12.574 238.098 12.332 237.996 12.117 cv
237.887 11.906 237.746 11.734 237.574 11.605 cv
237.398 11.48 237.184 11.418 236.926 11.414 cv
236.793 11.418 236.664 11.437 236.539 11.473 cv
236.41 11.516 236.281 11.578 236.148 11.664 cv
236.016 11.754 235.879 11.867 235.742 12.008 cv
235.598 12.148 235.449 12.324 235.297 12.527 cv
235.297 14.82 li
235.57 15.168 235.832 15.437 236.082 15.625 cv
236.328 15.816 236.59 15.91 236.863 15.91 cv
237.117 15.91 237.332 15.848 237.516 15.715 cv
237.691 15.59 237.84 15.418 237.953 15.207 cv
238.066 14.996 238.148 14.758 238.207 14.492 cv
238.258 14.227 238.285 13.961 238.289 13.695 cv
cp
f
246.621 15.168 mo
246.617 15.566 246.543 15.914 246.398 16.215 cv
246.25 16.516 246.043 16.77 245.773 16.969 cv
245.5 17.176 245.18 17.324 244.813 17.426 cv
244.445 17.523 244.043 17.574 243.613 17.578 cv
243.348 17.574 243.102 17.555 242.867 17.52 cv
242.633 17.477 242.422 17.43 242.234 17.371 cv
242.047 17.312 241.891 17.25 241.766 17.187 cv
241.641 17.125 241.547 17.066 241.492 17.012 cv
241.434 16.957 241.391 16.875 241.363 16.758 cv
241.328 16.645 241.313 16.469 241.316 16.238 cv
241.313 16.09 241.32 15.969 241.332 15.875 cv
241.34 15.785 241.355 15.715 241.379 15.656 cv
241.398 15.605 241.422 15.566 241.457 15.547 cv
241.484 15.531 241.523 15.523 241.57 15.52 cv
241.625 15.523 241.711 15.555 241.824 15.617 cv
241.934 15.684 242.07 15.758 242.242 15.832 cv
242.406 15.914 242.602 15.984 242.82 16.051 cv
243.039 16.121 243.289 16.156 243.574 16.152 cv
243.75 16.156 243.906 16.137 244.047 16.098 cv
244.18 16.062 244.301 16.012 244.406 15.941 cv
244.504 15.875 244.578 15.789 244.633 15.684 cv
244.68 15.582 244.707 15.461 244.711 15.324 cv
244.707 15.168 244.66 15.035 244.566 14.926 cv
244.473 14.816 244.344 14.719 244.188 14.633 cv
244.023 14.551 243.844 14.473 243.648 14.398 cv
243.445 14.328 243.242 14.25 243.031 14.156 cv
242.82 14.07 242.613 13.969 242.418 13.852 cv
242.215 13.742 242.035 13.602 241.879 13.434 cv
241.715 13.27 241.59 13.07 241.496 12.832 cv
241.402 12.602 241.355 12.32 241.355 11.988 cv
241.355 11.66 241.418 11.355 241.547 11.074 cv
241.676 10.801 241.863 10.562 242.109 10.363 cv
242.352 10.168 242.648 10.016 243 9.90198 cv
243.348 9.797 243.742 9.742 244.184 9.73798 cv
244.398 9.742 244.609 9.758 244.816 9.78497 cv
245.02 9.82001 245.207 9.85901 245.375 9.90198 cv
245.539 9.953 245.68 10.004 245.797 10.055 cv
245.91 10.113 245.992 10.16 246.043 10.195 cv
246.09 10.238 246.125 10.277 246.148 10.312 cv
246.168 10.355 246.18 10.402 246.191 10.453 cv
246.199 10.508 246.211 10.574 246.219 10.652 cv
246.227 10.738 246.23 10.836 246.23 10.953 cv
246.23 11.094 246.227 11.211 246.219 11.297 cv
246.211 11.391 246.195 11.461 246.18 11.508 cv
246.16 11.562 246.137 11.598 246.109 11.613 cv
246.074 11.637 246.039 11.645 246 11.641 cv
245.949 11.645 245.875 11.617 245.781 11.559 cv
245.68 11.508 245.559 11.449 245.41 11.383 cv
245.262 11.324 245.09 11.266 244.895 11.207 cv
244.699 11.156 244.477 11.129 244.23 11.125 cv
244.051 11.129 243.898 11.148 243.77 11.18 cv
243.637 11.219 243.527 11.27 243.449 11.336 cv
243.363 11.406 243.301 11.484 243.262 11.574 cv
243.215 11.668 243.195 11.766 243.199 11.867 cv
243.195 12.027 243.246 12.164 243.348 12.27 cv
243.445 12.383 243.574 12.477 243.738 12.559 cv
243.898 12.645 244.082 12.723 244.289 12.793 cv
244.492 12.867 244.699 12.949 244.91 13.031 cv
245.117 13.121 245.324 13.219 245.535 13.332 cv
245.738 13.445 245.922 13.586 246.082 13.75 cv
246.242 13.918 246.371 14.117 246.473 14.348 cv
246.566 14.582 246.617 14.855 246.621 15.168 cv
cp
f
262.676 10.168 mo
262.672 10.227 262.664 10.297 262.652 10.379 cv
262.633 10.461 262.605 10.582 262.566 10.734 cv
260.711 17.023 li
260.684 17.113 260.648 17.187 260.609 17.238 cv
260.566 17.297 260.504 17.34 260.418 17.367 cv
260.332 17.398 260.207 17.414 260.051 17.43 cv
259.887 17.437 259.684 17.445 259.434 17.445 cv
259.176 17.445 258.965 17.437 258.809 17.426 cv
258.645 17.41 258.52 17.391 258.43 17.359 cv
258.336 17.332 258.27 17.289 258.23 17.23 cv
258.188 17.18 258.156 17.109 258.137 17.023 cv
256.969 12.801 li
256.953 12.73 li
256.938 12.801 li
255.863 17.023 li
255.84 17.113 255.809 17.187 255.773 17.238 cv
255.73 17.297 255.664 17.34 255.574 17.367 cv
255.477 17.398 255.352 17.414 255.191 17.43 cv
255.031 17.437 254.824 17.445 254.57 17.445 cv
254.309 17.445 254.098 17.437 253.941 17.426 cv
253.781 17.41 253.656 17.391 253.566 17.359 cv
253.473 17.332 253.406 17.289 253.367 17.23 cv
253.324 17.18 253.293 17.109 253.277 17.023 cv
251.438 10.734 li
251.387 10.586 251.359 10.469 251.348 10.383 cv
251.332 10.301 251.324 10.227 251.328 10.168 cv
251.324 10.117 251.34 10.074 251.371 10.031 cv
251.398 9.99597 251.449 9.96503 251.527 9.93701 cv
251.602 9.91803 251.703 9.89801 251.828 9.88702 cv
251.953 9.87903 252.113 9.875 252.309 9.87097 cv
252.516 9.875 252.684 9.87903 252.816 9.88702 cv
252.945 9.89801 253.047 9.91803 253.121 9.94098 cv
253.191 9.96899 253.242 10.004 253.273 10.047 cv
253.301 10.094 253.324 10.148 253.34 10.207 cv
254.719 15.309 li
254.734 15.402 li
254.75 15.309 li
256.043 10.207 li
256.055 10.148 256.082 10.094 256.117 10.047 cv
256.148 10.004 256.199 9.96899 256.27 9.94098 cv
256.336 9.91803 256.43 9.89801 256.551 9.88702 cv
256.672 9.87903 256.828 9.875 257.023 9.87097 cv
257.215 9.875 257.371 9.883 257.492 9.89099 cv
257.609 9.90601 257.703 9.922 257.777 9.94501 cv
257.844 9.96899 257.895 10 257.926 10.039 cv
257.953 10.078 257.977 10.125 257.992 10.176 cv
259.379 15.316 li
259.402 15.402 li
259.418 15.309 li
260.742 10.207 li
260.75 10.148 260.773 10.094 260.805 10.047 cv
260.836 10.004 260.887 9.96899 260.961 9.94098 cv
261.031 9.91803 261.129 9.89801 261.254 9.88702 cv
261.375 9.87903 261.535 9.875 261.73 9.87097 cv
261.922 9.875 262.078 9.87903 262.203 9.88702 cv
262.324 9.89801 262.422 9.91803 262.492 9.93701 cv
262.563 9.96503 262.609 9.99597 262.637 10.031 cv
262.66 10.074 262.672 10.117 262.676 10.168 cv
cp
f
265.891 17.133 mo
265.887 17.187 265.871 17.23 265.844 17.27 cv
265.809 17.309 265.754 17.344 265.684 17.367 cv
265.605 17.395 265.508 17.41 265.383 17.426 cv
265.258 17.437 265.098 17.445 264.91 17.445 cv
264.715 17.445 264.559 17.437 264.434 17.426 cv
264.309 17.41 264.207 17.395 264.133 17.367 cv
264.055 17.344 264 17.309 263.973 17.27 cv
263.938 17.23 263.922 17.187 263.926 17.133 cv
263.926 10.199 li
263.922 10.148 263.938 10.102 263.973 10.062 cv
264 10.023 264.055 9.992 264.133 9.961 cv
264.207 9.93701 264.309 9.914 264.434 9.89502 cv
264.559 9.883 264.715 9.875 264.91 9.87097 cv
265.098 9.875 265.258 9.883 265.383 9.89502 cv
265.508 9.914 265.605 9.93701 265.684 9.961 cv
265.754 9.992 265.809 10.023 265.844 10.062 cv
265.871 10.102 265.887 10.148 265.891 10.199 cv
cp
266.039 7.828 mo
266.039 8.22699 265.957 8.5 265.797 8.64801 cv
265.633 8.80103 265.336 8.875 264.902 8.87097 cv
264.457 8.875 264.156 8.80103 264.008 8.65601 cv
263.852 8.51202 263.777 8.25 263.777 7.867 cv
263.777 7.47302 263.855 7.19897 264.016 7.047 cv
264.172 6.89502 264.473 6.81598 264.918 6.81598 cv
265.352 6.81598 265.648 6.89099 265.805 7.039 cv
265.961 7.18701 266.039 7.453 266.039 7.828 cv
cp
f
271.969 16.449 mo
271.969 16.676 271.953 16.852 271.926 16.973 cv
271.895 17.098 271.855 17.184 271.813 17.23 cv
271.762 17.281 271.695 17.324 271.605 17.363 cv
271.512 17.402 271.402 17.434 271.285 17.465 cv
271.16 17.488 271.027 17.512 270.887 17.531 cv
270.742 17.543 270.602 17.551 270.457 17.555 cv
270.066 17.551 269.727 17.5 269.441 17.406 cv
269.156 17.305 268.922 17.156 268.734 16.949 cv
268.547 16.746 268.406 16.488 268.32 16.176 cv
268.227 15.867 268.184 15.496 268.188 15.066 cv
268.188 11.508 li
267.355 11.508 li
267.254 11.512 267.18 11.449 267.129 11.324 cv
267.074 11.203 267.047 11 267.051 10.711 cv
267.047 10.562 267.055 10.434 267.07 10.332 cv
267.082 10.23 267.102 10.148 267.129 10.086 cv
267.152 10.027 267.184 9.98401 267.227 9.95697 cv
267.262 9.93402 267.309 9.922 267.363 9.91803 cv
268.188 9.91803 li
268.188 8.367 li
268.184 8.32001 268.199 8.27301 268.23 8.22699 cv
268.258 8.18701 268.309 8.15198 268.387 8.12097 cv
268.461 8.09802 268.563 8.07397 268.691 8.05902 cv
268.816 8.047 268.973 8.04303 269.164 8.039 cv
269.352 8.04303 269.512 8.047 269.641 8.05902 cv
269.766 8.07397 269.867 8.09802 269.941 8.12097 cv
270.012 8.15198 270.063 8.18701 270.098 8.22699 cv
270.125 8.27301 270.141 8.32001 270.145 8.367 cv
270.145 9.91803 li
271.656 9.91803 li
271.707 9.922 271.754 9.93402 271.793 9.95697 cv
271.832 9.98401 271.863 10.027 271.891 10.086 cv
271.914 10.148 271.934 10.23 271.949 10.332 cv
271.961 10.434 271.969 10.562 271.969 10.711 cv
271.969 11 271.941 11.203 271.891 11.324 cv
271.836 11.449 271.762 11.512 271.664 11.508 cv
270.145 11.508 li
270.145 14.773 li
270.141 15.152 270.199 15.437 270.324 15.625 cv
270.441 15.816 270.656 15.91 270.961 15.91 cv
271.063 15.91 271.156 15.902 271.242 15.883 cv
271.324 15.867 271.398 15.848 271.465 15.82 cv
271.527 15.801 271.582 15.777 271.629 15.758 cv
271.672 15.742 271.711 15.734 271.75 15.73 cv
271.777 15.734 271.809 15.742 271.84 15.758 cv
271.867 15.777 271.887 15.816 271.906 15.867 cv
271.918 15.926 271.934 16 271.949 16.09 cv
271.961 16.187 271.969 16.305 271.969 16.449 cv
cp
f
280.031 17.133 mo
280.027 17.187 280.012 17.23 279.984 17.27 cv
279.949 17.309 279.898 17.344 279.828 17.367 cv
279.754 17.395 279.652 17.41 279.527 17.426 cv
279.398 17.437 279.242 17.445 279.059 17.445 cv
278.863 17.445 278.703 17.437 278.578 17.426 cv
278.449 17.41 278.348 17.395 278.277 17.367 cv
278.199 17.344 278.148 17.309 278.121 17.27 cv
278.086 17.23 278.07 17.187 278.074 17.133 cv
278.074 13.168 li
278.07 12.832 278.047 12.566 278 12.371 cv
277.949 12.18 277.875 12.016 277.785 11.879 cv
277.691 11.742 277.574 11.637 277.426 11.559 cv
277.277 11.484 277.102 11.445 276.906 11.445 cv
276.652 11.445 276.402 11.539 276.148 11.719 cv
275.895 11.902 275.629 12.164 275.355 12.512 cv
275.355 17.133 li
275.352 17.187 275.336 17.23 275.309 17.27 cv
275.273 17.309 275.219 17.344 275.148 17.367 cv
275.07 17.395 274.973 17.41 274.848 17.426 cv
274.723 17.437 274.563 17.445 274.375 17.445 cv
274.18 17.445 274.023 17.437 273.898 17.426 cv
273.773 17.41 273.672 17.395 273.598 17.367 cv
273.52 17.344 273.465 17.309 273.438 17.27 cv
273.402 17.23 273.387 17.187 273.391 17.133 cv
273.391 6.88702 li
273.387 6.836 273.402 6.789 273.438 6.74597 cv
273.465 6.70697 273.52 6.672 273.598 6.64099 cv
273.672 6.61298 273.773 6.59399 273.898 6.57397 cv
274.023 6.56201 274.18 6.55499 274.375 6.55103 cv
274.563 6.55499 274.723 6.56201 274.848 6.57397 cv
274.973 6.59399 275.07 6.61298 275.148 6.64099 cv
275.219 6.672 275.273 6.70697 275.309 6.74597 cv
275.336 6.789 275.352 6.836 275.355 6.88702 cv
275.355 10.727 li
275.691 10.398 276.035 10.152 276.387 9.98401 cv
276.734 9.82397 277.102 9.742 277.484 9.73798 cv
277.953 9.742 278.352 9.82001 278.68 9.97302 cv
279.004 10.133 279.266 10.344 279.465 10.613 cv
279.664 10.883 279.809 11.199 279.898 11.559 cv
279.984 11.922 280.027 12.359 280.031 12.871 cv
cp
f
291.395 8.15601 mo
291.391 8.31598 291.387 8.44501 291.375 8.55103 cv
291.359 8.65997 291.336 8.74597 291.313 8.80499 cv
291.281 8.867 291.25 8.914 291.215 8.94098 cv
291.176 8.97699 291.133 8.992 291.09 8.98798 cv
287.793 8.98798 li
287.793 11.703 li
290.887 11.703 li
290.93 11.703 290.973 11.719 291.012 11.742 cv
291.047 11.773 291.078 11.816 291.109 11.875 cv
291.137 11.937 291.156 12.02 291.172 12.121 cv
291.18 12.227 291.188 12.355 291.191 12.512 cv
291.188 12.668 291.18 12.801 291.172 12.902 cv
291.156 13.012 291.137 13.098 291.109 13.16 cv
291.078 13.23 291.047 13.277 291.012 13.305 cv
290.973 13.336 290.93 13.352 290.887 13.348 cv
287.793 13.348 li
287.793 17.102 li
287.789 17.16 287.773 17.211 287.746 17.25 cv
287.711 17.297 287.656 17.332 287.578 17.355 cv
287.496 17.387 287.391 17.406 287.262 17.422 cv
287.129 17.437 286.961 17.445 286.766 17.445 cv
286.563 17.445 286.398 17.437 286.27 17.422 cv
286.133 17.406 286.027 17.387 285.953 17.355 cv
285.871 17.332 285.816 17.297 285.785 17.25 cv
285.75 17.211 285.73 17.16 285.734 17.102 cv
285.734 7.961 li
285.73 7.73401 285.789 7.57001 285.91 7.46503 cv
286.023 7.367 286.168 7.31598 286.344 7.31201 cv
291.09 7.31201 li
291.133 7.31598 291.176 7.328 291.215 7.35498 cv
291.25 7.38702 291.281 7.43402 291.313 7.49597 cv
291.336 7.56201 291.359 7.65198 291.375 7.758 cv
291.387 7.87097 291.391 8.00403 291.395 8.15601 cv
cp
f
299.734 13.586 mo
299.73 14.184 299.652 14.727 299.5 15.211 cv
299.34 15.703 299.105 16.121 298.789 16.473 cv
298.473 16.824 298.074 17.098 297.598 17.289 cv
297.117 17.48 296.559 17.574 295.922 17.578 cv
295.301 17.574 294.762 17.492 294.309 17.32 cv
293.848 17.152 293.469 16.902 293.172 16.574 cv
292.867 16.25 292.645 15.848 292.5 15.367 cv
292.355 14.891 292.285 14.344 292.285 13.727 cv
292.285 13.137 292.363 12.598 292.52 12.105 cv
292.676 11.617 292.914 11.195 293.234 10.844 cv
293.551 10.496 293.945 10.223 294.422 10.027 cv
294.895 9.836 295.453 9.742 296.094 9.73798 cv
296.719 9.742 297.258 9.82397 297.715 9.992 cv
298.172 10.164 298.551 10.414 298.848 10.738 cv
299.145 11.066 299.367 11.469 299.516 11.945 cv
299.66 12.426 299.73 12.973 299.734 13.586 cv
cp
297.715 13.664 mo
297.711 13.328 297.684 13.012 297.633 12.719 cv
297.574 12.434 297.48 12.184 297.355 11.969 cv
297.223 11.758 297.051 11.59 296.84 11.469 cv
296.621 11.352 296.352 11.293 296.023 11.289 cv
295.734 11.293 295.48 11.348 295.262 11.449 cv
295.043 11.559 294.863 11.715 294.723 11.918 cv
294.582 12.125 294.477 12.371 294.406 12.656 cv
294.336 12.949 294.301 13.277 294.301 13.641 cv
294.301 13.988 294.328 14.305 294.387 14.59 cv
294.441 14.883 294.535 15.133 294.664 15.344 cv
294.789 15.559 294.961 15.723 295.184 15.836 cv
295.398 15.957 295.668 16.016 295.992 16.012 cv
296.285 16.016 296.543 15.961 296.766 15.852 cv
296.98 15.746 297.16 15.594 297.301 15.387 cv
297.441 15.187 297.543 14.941 297.613 14.652 cv
297.676 14.367 297.711 14.039 297.715 13.664 cv
cp
f
307.914 17.133 mo
307.91 17.187 307.898 17.23 307.875 17.27 cv
307.848 17.309 307.801 17.344 307.738 17.367 cv
307.672 17.395 307.586 17.41 307.48 17.426 cv
307.375 17.437 307.242 17.445 307.082 17.445 cv
306.906 17.445 306.766 17.437 306.664 17.426 cv
306.555 17.41 306.473 17.395 306.41 17.367 cv
306.348 17.344 306.301 17.309 306.277 17.27 cv
306.246 17.23 306.234 17.187 306.238 17.133 cv
306.238 16.332 li
305.852 16.746 305.461 17.059 305.066 17.266 cv
304.664 17.473 304.254 17.574 303.832 17.578 cv
303.352 17.574 302.949 17.5 302.625 17.344 cv
302.301 17.191 302.039 16.977 301.84 16.707 cv
301.637 16.437 301.492 16.125 301.41 15.766 cv
301.32 15.41 301.277 14.969 301.281 14.437 cv
301.281 10.184 li
301.277 10.137 301.293 10.09 301.324 10.047 cv
301.352 10.012 301.402 9.97998 301.48 9.94897 cv
301.555 9.92603 301.656 9.90601 301.785 9.89099 cv
301.91 9.883 302.066 9.875 302.258 9.87097 cv
302.445 9.875 302.605 9.883 302.73 9.89099 cv
302.855 9.90601 302.953 9.92603 303.031 9.94897 cv
303.102 9.97998 303.156 10.012 303.191 10.047 cv
303.219 10.09 303.234 10.137 303.238 10.184 cv
303.238 14.109 li
303.234 14.477 303.258 14.754 303.309 14.945 cv
303.352 15.137 303.422 15.301 303.523 15.437 cv
303.617 15.578 303.742 15.684 303.891 15.758 cv
304.039 15.836 304.211 15.875 304.406 15.871 cv
304.656 15.875 304.906 15.785 305.16 15.598 cv
305.41 15.418 305.68 15.152 305.965 14.805 cv
305.965 10.184 li
305.965 10.137 305.977 10.09 306.008 10.047 cv
306.031 10.012 306.086 9.97998 306.164 9.94897 cv
306.238 9.92603 306.336 9.90601 306.465 9.89099 cv
306.586 9.883 306.746 9.875 306.941 9.87097 cv
307.133 9.875 307.289 9.883 307.414 9.89099 cv
307.535 9.90601 307.637 9.92603 307.711 9.94897 cv
307.781 9.97998 307.832 10.012 307.867 10.047 cv
307.895 10.09 307.91 10.137 307.914 10.184 cv
cp
f
314.313 10.828 mo
314.313 11.02 314.305 11.172 314.297 11.289 cv
314.281 11.41 314.266 11.504 314.25 11.57 cv
314.227 11.641 314.199 11.687 314.168 11.711 cv
314.129 11.738 314.086 11.75 314.039 11.75 cv
313.992 11.75 313.945 11.742 313.898 11.723 cv
313.844 11.707 313.785 11.687 313.723 11.664 cv
313.652 11.645 313.582 11.625 313.508 11.605 cv
313.426 11.59 313.34 11.582 313.25 11.578 cv
313.137 11.582 313.027 11.602 312.922 11.645 cv
312.813 11.691 312.699 11.762 312.586 11.852 cv
312.465 11.945 312.344 12.07 312.219 12.223 cv
312.09 12.383 311.953 12.574 311.809 12.801 cv
311.809 17.133 li
311.805 17.187 311.789 17.23 311.762 17.27 cv
311.727 17.309 311.672 17.344 311.602 17.367 cv
311.523 17.395 311.426 17.41 311.301 17.426 cv
311.176 17.437 311.016 17.445 310.828 17.445 cv
310.633 17.445 310.477 17.437 310.352 17.426 cv
310.227 17.41 310.125 17.395 310.051 17.367 cv
309.973 17.344 309.918 17.309 309.891 17.27 cv
309.855 17.23 309.84 17.187 309.844 17.133 cv
309.844 10.184 li
309.84 10.137 309.855 10.09 309.883 10.047 cv
309.906 10.012 309.953 9.97998 310.023 9.94897 cv
310.09 9.92603 310.176 9.90601 310.285 9.89099 cv
310.391 9.883 310.523 9.875 310.688 9.87097 cv
310.852 9.875 310.988 9.883 311.098 9.89099 cv
311.203 9.90601 311.289 9.92603 311.352 9.94897 cv
311.41 9.97998 311.453 10.012 311.48 10.047 cv
311.504 10.09 311.516 10.137 311.52 10.184 cv
311.52 11.047 li
311.699 10.789 311.871 10.578 312.035 10.406 cv
312.191 10.242 312.348 10.105 312.496 10.004 cv
312.641 9.90601 312.785 9.84003 312.93 9.797 cv
313.074 9.76202 313.219 9.742 313.367 9.73798 cv
313.434 9.742 313.508 9.74597 313.586 9.75 cv
313.664 9.76202 313.742 9.77301 313.828 9.789 cv
313.906 9.80902 313.98 9.828 314.047 9.85199 cv
314.105 9.875 314.152 9.90198 314.184 9.92603 cv
314.211 9.95697 314.23 9.98401 314.246 10.012 cv
314.258 10.047 314.27 10.09 314.281 10.141 cv
314.289 10.199 314.297 10.281 314.305 10.387 cv
314.309 10.496 314.313 10.645 314.313 10.828 cv
cp
f
326.137 8.15601 mo
326.133 8.31201 326.125 8.44098 326.117 8.54303 cv
326.102 8.65198 326.082 8.73798 326.059 8.80103 cv
326.027 8.867 325.996 8.914 325.961 8.94098 cv
325.918 8.97699 325.875 8.992 325.832 8.98798 cv
323.309 8.98798 li
323.309 17.117 li
323.309 17.172 323.289 17.219 323.258 17.258 cv
323.219 17.301 323.164 17.336 323.09 17.359 cv
323.008 17.387 322.902 17.406 322.773 17.422 cv
322.637 17.437 322.473 17.445 322.277 17.445 cv
322.082 17.445 321.918 17.437 321.785 17.422 cv
321.652 17.406 321.547 17.387 321.469 17.359 cv
321.391 17.336 321.332 17.301 321.301 17.258 cv
321.262 17.219 321.246 17.172 321.25 17.117 cv
321.25 8.98798 li
318.727 8.98798 li
318.672 8.992 318.625 8.97699 318.594 8.94098 cv
318.555 8.914 318.523 8.867 318.5 8.80103 cv
318.469 8.73798 318.449 8.65198 318.441 8.54303 cv
318.426 8.44098 318.422 8.31201 318.422 8.15601 cv
318.422 8.00403 318.426 7.87097 318.441 7.758 cv
318.449 7.65198 318.469 7.56201 318.5 7.49597 cv
318.523 7.43402 318.555 7.38702 318.594 7.35498 cv
318.625 7.328 318.672 7.31598 318.727 7.31201 cv
325.832 7.31201 li
325.875 7.31598 325.918 7.328 325.961 7.35498 cv
325.996 7.38702 326.027 7.43402 326.059 7.49597 cv
326.082 7.56201 326.102 7.65198 326.117 7.758 cv
326.125 7.87097 326.133 8.00403 326.137 8.15601 cv
cp
f
333.848 17.133 mo
333.844 17.187 333.828 17.23 333.801 17.27 cv
333.766 17.309 333.715 17.344 333.645 17.367 cv
333.57 17.395 333.469 17.41 333.344 17.426 cv
333.215 17.437 333.059 17.445 332.875 17.445 cv
332.68 17.445 332.52 17.437 332.395 17.426 cv
332.266 17.41 332.164 17.395 332.094 17.367 cv
332.016 17.344 331.965 17.309 331.938 17.27 cv
331.902 17.23 331.887 17.187 331.891 17.133 cv
331.891 13.168 li
331.887 12.832 331.863 12.566 331.816 12.371 cv
331.766 12.18 331.691 12.016 331.602 11.879 cv
331.508 11.742 331.391 11.637 331.242 11.559 cv
331.094 11.484 330.918 11.445 330.723 11.445 cv
330.469 11.445 330.219 11.539 329.965 11.719 cv
329.711 11.902 329.445 12.164 329.172 12.512 cv
329.172 17.133 li
329.168 17.187 329.152 17.23 329.125 17.27 cv
329.09 17.309 329.035 17.344 328.965 17.367 cv
328.887 17.395 328.789 17.41 328.664 17.426 cv
328.539 17.437 328.379 17.445 328.191 17.445 cv
327.996 17.445 327.84 17.437 327.715 17.426 cv
327.59 17.41 327.488 17.395 327.414 17.367 cv
327.336 17.344 327.281 17.309 327.254 17.27 cv
327.219 17.23 327.203 17.187 327.207 17.133 cv
327.207 6.88702 li
327.203 6.836 327.219 6.789 327.254 6.74597 cv
327.281 6.70697 327.336 6.672 327.414 6.64099 cv
327.488 6.61298 327.59 6.59399 327.715 6.57397 cv
327.84 6.56201 327.996 6.55499 328.191 6.55103 cv
328.379 6.55499 328.539 6.56201 328.664 6.57397 cv
328.789 6.59399 328.887 6.61298 328.965 6.64099 cv
329.035 6.672 329.09 6.70697 329.125 6.74597 cv
329.152 6.789 329.168 6.836 329.172 6.88702 cv
329.172 10.727 li
329.508 10.398 329.852 10.152 330.203 9.98401 cv
330.551 9.82397 330.918 9.742 331.301 9.73798 cv
331.77 9.742 332.168 9.82001 332.496 9.97302 cv
332.82 10.133 333.082 10.344 333.281 10.613 cv
333.48 10.883 333.625 11.199 333.715 11.559 cv
333.801 11.922 333.844 12.359 333.848 12.871 cv
cp
f
340.246 10.828 mo
340.246 11.02 340.238 11.172 340.23 11.289 cv
340.215 11.41 340.199 11.504 340.184 11.57 cv
340.16 11.641 340.133 11.687 340.102 11.711 cv
340.063 11.738 340.02 11.75 339.973 11.75 cv
339.926 11.75 339.879 11.742 339.832 11.723 cv
339.777 11.707 339.719 11.687 339.656 11.664 cv
339.586 11.645 339.516 11.625 339.441 11.605 cv
339.359 11.59 339.273 11.582 339.184 11.578 cv
339.07 11.582 338.961 11.602 338.855 11.645 cv
338.746 11.691 338.633 11.762 338.52 11.852 cv
338.398 11.945 338.277 12.07 338.152 12.223 cv
338.023 12.383 337.887 12.574 337.742 12.801 cv
337.742 17.133 li
337.738 17.187 337.723 17.23 337.695 17.27 cv
337.66 17.309 337.605 17.344 337.535 17.367 cv
337.457 17.395 337.359 17.41 337.234 17.426 cv
337.109 17.437 336.949 17.445 336.762 17.445 cv
336.566 17.445 336.41 17.437 336.285 17.426 cv
336.16 17.41 336.059 17.395 335.984 17.367 cv
335.906 17.344 335.852 17.309 335.824 17.27 cv
335.789 17.23 335.773 17.187 335.777 17.133 cv
335.777 10.184 li
335.773 10.137 335.789 10.09 335.816 10.047 cv
335.84 10.012 335.887 9.97998 335.957 9.94897 cv
336.023 9.92603 336.109 9.90601 336.219 9.89099 cv
336.324 9.883 336.457 9.875 336.621 9.87097 cv
336.785 9.875 336.922 9.883 337.031 9.89099 cv
337.137 9.90601 337.223 9.92603 337.285 9.94897 cv
337.344 9.97998 337.387 10.012 337.414 10.047 cv
337.438 10.09 337.449 10.137 337.453 10.184 cv
337.453 11.047 li
337.633 10.789 337.805 10.578 337.969 10.406 cv
338.125 10.242 338.281 10.105 338.43 10.004 cv
338.574 9.90601 338.719 9.84003 338.863 9.797 cv
339.008 9.76202 339.152 9.742 339.301 9.73798 cv
339.367 9.742 339.441 9.74597 339.52 9.75 cv
339.598 9.76202 339.676 9.77301 339.762 9.789 cv
339.84 9.80902 339.914 9.828 339.98 9.85199 cv
340.039 9.875 340.086 9.90198 340.117 9.92603 cv
340.145 9.95697 340.164 9.98401 340.18 10.012 cv
340.191 10.047 340.203 10.09 340.215 10.141 cv
340.223 10.199 340.23 10.281 340.238 10.387 cv
340.242 10.496 340.246 10.645 340.246 10.828 cv
cp
f
347.691 13.457 mo
347.688 13.695 347.637 13.871 347.531 13.984 cv
347.422 14.102 347.273 14.16 347.094 14.156 cv
342.859 14.156 li
342.855 14.457 342.891 14.727 342.965 14.965 cv
343.031 15.207 343.145 15.41 343.301 15.578 cv
343.453 15.75 343.648 15.879 343.891 15.965 cv
344.129 16.055 344.418 16.098 344.762 16.098 cv
345.102 16.098 345.402 16.074 345.664 16.023 cv
345.922 15.977 346.148 15.922 346.34 15.859 cv
346.527 15.801 346.684 15.746 346.813 15.695 cv
346.934 15.648 347.035 15.625 347.117 15.621 cv
347.16 15.625 347.199 15.633 347.234 15.648 cv
347.262 15.668 347.289 15.699 347.309 15.746 cv
347.328 15.793 347.34 15.859 347.352 15.945 cv
347.355 16.031 347.359 16.141 347.363 16.27 cv
347.359 16.387 347.359 16.484 347.355 16.562 cv
347.348 16.645 347.34 16.711 347.332 16.766 cv
347.32 16.824 347.305 16.875 347.285 16.91 cv
347.266 16.953 347.238 16.988 347.207 17.023 cv
347.172 17.062 347.078 17.113 346.93 17.172 cv
346.773 17.238 346.582 17.301 346.352 17.355 cv
346.113 17.418 345.844 17.465 345.547 17.512 cv
345.242 17.551 344.922 17.574 344.582 17.578 cv
343.961 17.574 343.418 17.5 342.957 17.344 cv
342.488 17.191 342.102 16.953 341.793 16.637 cv
341.477 16.32 341.242 15.922 341.094 15.437 cv
340.938 14.957 340.863 14.391 340.867 13.734 cv
340.863 13.121 340.941 12.562 341.105 12.066 cv
341.262 11.57 341.496 11.152 341.809 10.805 cv
342.113 10.461 342.488 10.195 342.926 10.012 cv
343.363 9.83197 343.855 9.742 344.41 9.73798 cv
344.988 9.742 345.488 9.828 345.902 9.99597 cv
346.316 10.172 346.652 10.41 346.918 10.711 cv
347.18 11.016 347.375 11.375 347.504 11.789 cv
347.625 12.207 347.688 12.656 347.691 13.145 cv
cp
345.789 12.895 mo
345.801 12.344 345.691 11.91 345.457 11.598 cv
345.223 11.285 344.855 11.129 344.363 11.125 cv
344.113 11.129 343.898 11.176 343.715 11.266 cv
343.527 11.363 343.375 11.488 343.254 11.645 cv
343.129 11.805 343.035 11.992 342.973 12.207 cv
342.906 12.422 342.867 12.652 342.859 12.895 cv
cp
f
355.223 17.156 mo
355.219 17.234 355.191 17.289 355.145 17.328 cv
355.09 17.371 355.008 17.398 354.898 17.418 cv
354.781 17.434 354.617 17.445 354.402 17.445 cv
354.164 17.445 353.992 17.434 353.891 17.418 cv
353.781 17.398 353.707 17.371 353.668 17.328 cv
353.621 17.289 353.602 17.234 353.602 17.156 cv
353.602 16.605 li
353.313 16.914 352.984 17.152 352.621 17.32 cv
352.254 17.492 351.848 17.574 351.402 17.578 cv
351.031 17.574 350.691 17.527 350.383 17.434 cv
350.074 17.34 349.809 17.199 349.582 17.004 cv
349.355 16.816 349.18 16.582 349.055 16.301 cv
348.93 16.023 348.867 15.695 348.871 15.316 cv
348.867 14.918 348.945 14.566 349.105 14.262 cv
349.262 13.965 349.5 13.719 349.816 13.523 cv
350.129 13.332 350.52 13.187 350.988 13.09 cv
351.457 13 352 12.953 352.617 12.949 cv
353.297 12.949 li
353.297 12.527 li
353.297 12.312 353.273 12.121 353.23 11.957 cv
353.184 11.797 353.109 11.66 353.012 11.547 cv
352.906 11.441 352.773 11.359 352.605 11.305 cv
352.434 11.254 352.223 11.23 351.98 11.227 cv
351.648 11.23 351.355 11.266 351.102 11.336 cv
350.84 11.41 350.613 11.492 350.418 11.578 cv
350.219 11.672 350.055 11.75 349.926 11.82 cv
349.789 11.895 349.68 11.934 349.602 11.93 cv
349.539 11.934 349.488 11.914 349.449 11.875 cv
349.402 11.84 349.367 11.789 349.34 11.719 cv
349.309 11.656 349.285 11.57 349.273 11.469 cv
349.254 11.371 349.246 11.262 349.25 11.141 cv
349.246 10.98 349.262 10.855 349.289 10.758 cv
349.313 10.668 349.359 10.582 349.438 10.504 cv
349.508 10.43 349.637 10.348 349.82 10.258 cv
350 10.168 350.211 10.082 350.457 10.004 cv
350.699 9.92603 350.969 9.86298 351.258 9.81201 cv
351.547 9.76599 351.844 9.742 352.152 9.73798 cv
352.695 9.742 353.16 9.79303 353.547 9.89801 cv
353.934 10.008 354.254 10.172 354.504 10.391 cv
354.754 10.609 354.934 10.895 355.051 11.242 cv
355.16 11.594 355.219 12.008 355.223 12.48 cv
cp
353.297 14.18 mo
352.547 14.18 li
352.23 14.184 351.961 14.207 351.738 14.25 cv
351.512 14.301 351.328 14.371 351.191 14.461 cv
351.047 14.559 350.945 14.672 350.883 14.801 cv
350.816 14.937 350.781 15.086 350.785 15.254 cv
350.781 15.547 350.875 15.777 351.063 15.941 cv
351.246 16.109 351.504 16.191 351.832 16.191 cv
352.105 16.191 352.355 16.121 352.59 15.98 cv
352.816 15.84 353.055 15.637 353.297 15.363 cv
cp
f
363.809 17.133 mo
363.805 17.195 363.793 17.242 363.77 17.277 cv
363.742 17.32 363.695 17.352 363.637 17.375 cv
363.57 17.398 363.488 17.414 363.383 17.43 cv
363.277 17.437 363.145 17.445 362.992 17.445 cv
362.82 17.445 362.688 17.437 362.586 17.43 cv
362.48 17.414 362.395 17.398 362.332 17.375 cv
362.266 17.352 362.219 17.32 362.191 17.277 cv
362.16 17.242 362.145 17.195 362.148 17.133 cv
362.148 16.363 li
361.789 16.75 361.414 17.047 361.023 17.258 cv
360.625 17.469 360.191 17.574 359.719 17.578 cv
359.184 17.574 358.734 17.473 358.371 17.27 cv
358.004 17.066 357.707 16.793 357.477 16.441 cv
357.242 16.098 357.074 15.691 356.973 15.223 cv
356.871 14.762 356.82 14.27 356.82 13.75 cv
356.82 13.137 356.883 12.582 357.016 12.086 cv
357.145 11.594 357.34 11.172 357.598 10.824 cv
357.852 10.477 358.168 10.211 358.547 10.02 cv
358.926 9.836 359.363 9.742 359.859 9.73798 cv
360.246 9.742 360.598 9.82001 360.918 9.97699 cv
361.23 10.137 361.547 10.367 361.859 10.672 cv
361.859 6.90997 li
361.859 6.85901 361.871 6.81201 361.902 6.77002 cv
361.926 6.72998 361.98 6.69501 362.059 6.664 cv
362.133 6.63702 362.23 6.617 362.359 6.59802 cv
362.48 6.586 362.641 6.578 362.836 6.57397 cv
363.027 6.578 363.184 6.586 363.309 6.59802 cv
363.43 6.617 363.531 6.63702 363.605 6.664 cv
363.676 6.69501 363.727 6.72998 363.762 6.77002 cv
363.789 6.81201 363.805 6.85901 363.809 6.90997 cv
cp
361.859 12.488 mo
361.578 12.137 361.309 11.867 361.055 11.68 cv
360.793 11.492 360.523 11.398 360.246 11.398 cv
359.992 11.398 359.773 11.465 359.59 11.59 cv
359.402 11.723 359.254 11.891 359.145 12.102 cv
359.031 12.312 358.949 12.551 358.895 12.812 cv
358.84 13.078 358.813 13.348 358.813 13.617 cv
358.813 13.914 358.836 14.195 358.883 14.469 cv
358.93 14.746 359.004 14.992 359.113 15.207 cv
359.215 15.422 359.359 15.594 359.539 15.723 cv
359.715 15.855 359.938 15.922 360.207 15.918 cv
360.34 15.922 360.469 15.902 360.602 15.859 cv
360.727 15.824 360.859 15.762 360.992 15.668 cv
361.125 15.582 361.262 15.465 361.402 15.32 cv
361.543 15.18 361.695 15.004 361.859 14.797 cv
cp
f
370.629 15.168 mo
370.625 15.566 370.551 15.914 370.406 16.215 cv
370.258 16.516 370.051 16.77 369.781 16.969 cv
369.508 17.176 369.188 17.324 368.82 17.426 cv
368.453 17.523 368.051 17.574 367.621 17.578 cv
367.355 17.574 367.109 17.555 366.875 17.52 cv
366.641 17.477 366.43 17.43 366.242 17.371 cv
366.055 17.312 365.898 17.25 365.773 17.187 cv
365.648 17.125 365.555 17.066 365.5 17.012 cv
365.441 16.957 365.398 16.875 365.371 16.758 cv
365.336 16.645 365.32 16.469 365.324 16.238 cv
365.32 16.09 365.328 15.969 365.34 15.875 cv
365.348 15.785 365.363 15.715 365.387 15.656 cv
365.406 15.605 365.43 15.566 365.465 15.547 cv
365.492 15.531 365.531 15.523 365.578 15.52 cv
365.633 15.523 365.719 15.555 365.832 15.617 cv
365.941 15.684 366.078 15.758 366.25 15.832 cv
366.414 15.914 366.609 15.984 366.828 16.051 cv
367.047 16.121 367.297 16.156 367.582 16.152 cv
367.758 16.156 367.914 16.137 368.055 16.098 cv
368.188 16.062 368.309 16.012 368.414 15.941 cv
368.512 15.875 368.586 15.789 368.641 15.684 cv
368.688 15.582 368.715 15.461 368.719 15.324 cv
368.715 15.168 368.668 15.035 368.574 14.926 cv
368.48 14.816 368.352 14.719 368.195 14.633 cv
368.031 14.551 367.852 14.473 367.656 14.398 cv
367.453 14.328 367.25 14.25 367.039 14.156 cv
366.828 14.07 366.621 13.969 366.426 13.852 cv
366.223 13.742 366.043 13.602 365.887 13.434 cv
365.723 13.27 365.598 13.07 365.504 12.832 cv
365.41 12.602 365.363 12.32 365.363 11.988 cv
365.363 11.66 365.426 11.355 365.555 11.074 cv
365.684 10.801 365.871 10.562 366.117 10.363 cv
366.359 10.168 366.656 10.016 367.008 9.90198 cv
367.355 9.797 367.75 9.742 368.191 9.73798 cv
368.406 9.742 368.617 9.758 368.824 9.78497 cv
369.027 9.82001 369.215 9.85901 369.383 9.90198 cv
369.547 9.953 369.688 10.004 369.805 10.055 cv
369.918 10.113 370 10.16 370.051 10.195 cv
370.098 10.238 370.133 10.277 370.156 10.312 cv
370.176 10.355 370.188 10.402 370.199 10.453 cv
370.207 10.508 370.219 10.574 370.227 10.652 cv
370.234 10.738 370.238 10.836 370.238 10.953 cv
370.238 11.094 370.234 11.211 370.227 11.297 cv
370.219 11.391 370.203 11.461 370.188 11.508 cv
370.168 11.562 370.145 11.598 370.117 11.613 cv
370.082 11.637 370.047 11.645 370.008 11.641 cv
369.957 11.645 369.883 11.617 369.789 11.559 cv
369.688 11.508 369.566 11.449 369.418 11.383 cv
369.27 11.324 369.098 11.266 368.902 11.207 cv
368.707 11.156 368.484 11.129 368.238 11.125 cv
368.059 11.129 367.906 11.148 367.777 11.18 cv
367.645 11.219 367.535 11.27 367.457 11.336 cv
367.371 11.406 367.309 11.484 367.27 11.574 cv
367.223 11.668 367.203 11.766 367.207 11.867 cv
367.203 12.027 367.254 12.164 367.355 12.27 cv
367.453 12.383 367.582 12.477 367.746 12.559 cv
367.906 12.645 368.09 12.723 368.297 12.793 cv
368.5 12.867 368.707 12.949 368.918 13.031 cv
369.125 13.121 369.332 13.219 369.543 13.332 cv
369.746 13.445 369.93 13.586 370.09 13.75 cv
370.25 13.918 370.379 14.117 370.48 14.348 cv
370.574 14.582 370.625 14.855 370.629 15.168 cv
cp
f
379.375 13.48 mo
379.371 13.781 379.344 13.992 379.289 14.109 cv
379.23 14.234 379.141 14.293 379.016 14.289 cv
375.773 14.289 li
375.645 14.293 375.551 14.23 375.496 14.105 cv
375.434 13.984 375.406 13.777 375.41 13.48 cv
375.406 13.191 375.434 12.984 375.496 12.863 cv
375.551 12.746 375.645 12.687 375.773 12.684 cv
379.016 12.684 li
379.078 12.687 379.129 12.699 379.176 12.723 cv
379.215 12.75 379.254 12.797 379.289 12.855 cv
379.316 12.922 379.34 13.004 379.355 13.105 cv
379.367 13.211 379.371 13.336 379.375 13.48 cv
cp
f
392.047 17.133 mo
392.047 17.195 392.035 17.242 392.016 17.277 cv
391.996 17.32 391.949 17.352 391.871 17.375 cv
391.793 17.398 391.676 17.414 391.527 17.43 cv
391.371 17.437 391.168 17.445 390.91 17.445 cv
390.691 17.445 390.516 17.437 390.387 17.43 cv
390.258 17.414 390.156 17.398 390.082 17.371 cv
390.004 17.344 389.949 17.309 389.922 17.262 cv
389.887 17.223 389.863 17.168 389.844 17.102 cv
388.938 14.852 li
388.828 14.598 388.723 14.371 388.621 14.172 cv
388.512 13.977 388.398 13.812 388.273 13.68 cv
388.145 13.551 387.996 13.449 387.832 13.379 cv
387.664 13.312 387.473 13.281 387.258 13.277 cv
386.617 13.277 li
386.617 17.117 li
386.613 17.172 386.598 17.219 386.566 17.258 cv
386.531 17.301 386.477 17.336 386.398 17.359 cv
386.32 17.387 386.215 17.406 386.086 17.422 cv
385.953 17.437 385.789 17.445 385.59 17.445 cv
385.391 17.445 385.223 17.437 385.094 17.422 cv
384.957 17.406 384.852 17.387 384.777 17.359 cv
384.695 17.336 384.641 17.301 384.613 17.258 cv
384.578 17.219 384.563 17.172 384.566 17.117 cv
384.566 7.961 li
384.563 7.73401 384.621 7.57001 384.742 7.46503 cv
384.855 7.367 385 7.31598 385.176 7.31201 cv
387.785 7.31201 li
388.047 7.31598 388.266 7.32001 388.441 7.328 cv
388.609 7.34003 388.766 7.35199 388.91 7.367 cv
389.313 7.42603 389.676 7.52698 390 7.664 cv
390.324 7.80902 390.602 7.992 390.828 8.21503 cv
391.055 8.44501 391.227 8.711 391.348 9.02002 cv
391.465 9.328 391.523 9.68402 391.527 10.082 cv
391.523 10.422 391.48 10.73 391.398 11.004 cv
391.309 11.285 391.184 11.531 391.02 11.75 cv
390.852 11.969 390.645 12.16 390.402 12.316 cv
390.156 12.48 389.879 12.609 389.57 12.707 cv
389.719 12.781 389.863 12.871 389.996 12.973 cv
390.129 13.082 390.25 13.207 390.367 13.352 cv
390.48 13.5 390.594 13.668 390.699 13.855 cv
390.801 14.047 390.902 14.262 391.004 14.5 cv
391.855 16.488 li
391.93 16.687 391.98 16.828 392.008 16.918 cv
392.031 17.012 392.047 17.086 392.047 17.133 cv
cp
389.406 10.293 mo
389.402 9.961 389.328 9.67999 389.18 9.44897 cv
389.027 9.22302 388.781 9.06201 388.441 8.96503 cv
388.336 8.94098 388.219 8.91803 388.086 8.90198 cv
387.953 8.88702 387.77 8.87903 387.535 8.87903 cv
386.617 8.87903 li
386.617 11.742 li
387.66 11.742 li
387.949 11.746 388.207 11.711 388.426 11.637 cv
388.645 11.57 388.824 11.469 388.969 11.34 cv
389.113 11.215 389.223 11.062 389.297 10.883 cv
389.367 10.707 389.402 10.512 389.406 10.293 cv
cp
f
399.633 13.457 mo
399.629 13.695 399.578 13.871 399.473 13.984 cv
399.363 14.102 399.215 14.16 399.035 14.156 cv
394.801 14.156 li
394.797 14.457 394.832 14.727 394.906 14.965 cv
394.973 15.207 395.086 15.41 395.242 15.578 cv
395.395 15.75 395.59 15.879 395.832 15.965 cv
396.07 16.055 396.359 16.098 396.703 16.098 cv
397.043 16.098 397.344 16.074 397.605 16.023 cv
397.863 15.977 398.09 15.922 398.281 15.859 cv
398.469 15.801 398.625 15.746 398.754 15.695 cv
398.875 15.648 398.977 15.625 399.059 15.621 cv
399.102 15.625 399.141 15.633 399.176 15.648 cv
399.203 15.668 399.23 15.699 399.25 15.746 cv
399.27 15.793 399.281 15.859 399.293 15.945 cv
399.297 16.031 399.301 16.141 399.305 16.27 cv
399.301 16.387 399.301 16.484 399.297 16.562 cv
399.289 16.645 399.281 16.711 399.273 16.766 cv
399.262 16.824 399.246 16.875 399.227 16.91 cv
399.207 16.953 399.18 16.988 399.148 17.023 cv
399.113 17.062 399.02 17.113 398.871 17.172 cv
398.715 17.238 398.523 17.301 398.293 17.355 cv
398.055 17.418 397.785 17.465 397.488 17.512 cv
397.184 17.551 396.863 17.574 396.523 17.578 cv
395.902 17.574 395.359 17.5 394.898 17.344 cv
394.43 17.191 394.043 16.953 393.734 16.637 cv
393.418 16.32 393.184 15.922 393.035 15.437 cv
392.879 14.957 392.805 14.391 392.809 13.734 cv
392.805 13.121 392.883 12.562 393.047 12.066 cv
393.203 11.57 393.438 11.152 393.75 10.805 cv
394.055 10.461 394.43 10.195 394.867 10.012 cv
395.305 9.83197 395.797 9.742 396.352 9.73798 cv
396.93 9.742 397.43 9.828 397.844 9.99597 cv
398.258 10.172 398.594 10.41 398.859 10.711 cv
399.121 11.016 399.316 11.375 399.445 11.789 cv
399.566 12.207 399.629 12.656 399.633 13.145 cv
cp
397.73 12.895 mo
397.742 12.344 397.633 11.91 397.398 11.598 cv
397.164 11.285 396.797 11.129 396.305 11.125 cv
396.055 11.129 395.84 11.176 395.656 11.266 cv
395.469 11.363 395.316 11.488 395.195 11.645 cv
395.07 11.805 394.977 11.992 394.914 12.207 cv
394.848 12.422 394.809 12.652 394.801 12.895 cv
cp
f
412.301 17.133 mo
412.297 17.187 412.281 17.23 412.254 17.27 cv
412.219 17.309 412.168 17.344 412.098 17.367 cv
412.023 17.395 411.922 17.41 411.801 17.426 cv
411.676 17.437 411.52 17.445 411.328 17.445 cv
411.129 17.445 410.969 17.437 410.844 17.426 cv
410.719 17.41 410.617 17.395 410.543 17.367 cv
410.465 17.344 410.414 17.309 410.387 17.27 cv
410.359 17.23 410.344 17.187 410.348 17.133 cv
410.348 13.012 li
410.344 12.781 410.324 12.566 410.281 12.371 cv
410.234 12.18 410.164 12.016 410.078 11.879 cv
409.984 11.742 409.871 11.637 409.734 11.559 cv
409.594 11.484 409.43 11.445 409.238 11.445 cv
409.004 11.445 408.766 11.539 408.527 11.719 cv
408.289 11.902 408.031 12.164 407.75 12.512 cv
407.75 17.133 li
407.75 17.187 407.734 17.23 407.703 17.27 cv
407.672 17.309 407.617 17.344 407.543 17.367 cv
407.465 17.395 407.363 17.41 407.242 17.426 cv
407.117 17.437 406.965 17.445 406.777 17.445 cv
406.582 17.445 406.422 17.437 406.301 17.426 cv
406.172 17.41 406.07 17.395 406 17.367 cv
405.922 17.344 405.871 17.309 405.84 17.27 cv
405.809 17.23 405.793 17.187 405.793 17.133 cv
405.793 13.012 li
405.793 12.781 405.77 12.566 405.727 12.371 cv
405.684 12.18 405.617 12.016 405.531 11.879 cv
405.438 11.742 405.324 11.637 405.188 11.559 cv
405.043 11.484 404.879 11.445 404.695 11.445 cv
404.453 11.445 404.215 11.539 403.977 11.719 cv
403.738 11.902 403.48 12.164 403.207 12.512 cv
403.207 17.133 li
403.203 17.187 403.188 17.23 403.16 17.27 cv
403.125 17.309 403.07 17.344 403 17.367 cv
402.922 17.395 402.824 17.41 402.699 17.426 cv
402.574 17.437 402.414 17.445 402.227 17.445 cv
402.031 17.445 401.875 17.437 401.75 17.426 cv
401.625 17.41 401.523 17.395 401.449 17.367 cv
401.371 17.344 401.316 17.309 401.289 17.27 cv
401.254 17.23 401.238 17.187 401.242 17.133 cv
401.242 10.184 li
401.238 10.137 401.254 10.09 401.281 10.047 cv
401.305 10.012 401.352 9.97998 401.422 9.94897 cv
401.488 9.92603 401.574 9.90601 401.684 9.89099 cv
401.789 9.883 401.922 9.875 402.086 9.87097 cv
402.25 9.875 402.387 9.883 402.496 9.89099 cv
402.602 9.90601 402.688 9.92603 402.75 9.94897 cv
402.809 9.97998 402.852 10.012 402.879 10.047 cv
402.902 10.09 402.914 10.137 402.918 10.184 cv
402.918 10.984 li
403.301 10.574 403.684 10.262 404.066 10.051 cv
404.445 9.84399 404.848 9.742 405.266 9.73798 cv
405.551 9.742 405.805 9.77002 406.035 9.828 cv
406.262 9.89099 406.469 9.97699 406.648 10.086 cv
406.828 10.199 406.98 10.336 407.109 10.488 cv
407.238 10.645 407.348 10.816 407.438 11.008 cv
407.645 10.785 407.848 10.594 408.051 10.434 cv
408.246 10.273 408.445 10.141 408.641 10.039 cv
408.836 9.93701 409.031 9.86298 409.227 9.81201 cv
409.422 9.76599 409.621 9.742 409.824 9.73798 cv
410.285 9.742 410.672 9.82001 410.992 9.97302 cv
411.305 10.133 411.563 10.344 411.758 10.609 cv
411.953 10.879 412.09 11.191 412.176 11.547 cv
412.254 11.906 412.297 12.285 412.301 12.684 cv
cp
f
421.246 13.586 mo
421.242 14.184 421.164 14.727 421.012 15.211 cv
420.852 15.703 420.617 16.121 420.301 16.473 cv
419.984 16.824 419.586 17.098 419.109 17.289 cv
418.629 17.48 418.07 17.574 417.434 17.578 cv
416.813 17.574 416.273 17.492 415.82 17.32 cv
415.359 17.152 414.98 16.902 414.684 16.574 cv
414.379 16.25 414.156 15.848 414.012 15.367 cv
413.867 14.891 413.797 14.344 413.797 13.727 cv
413.797 13.137 413.875 12.598 414.031 12.105 cv
414.188 11.617 414.426 11.195 414.746 10.844 cv
415.063 10.496 415.457 10.223 415.934 10.027 cv
416.406 9.836 416.965 9.742 417.605 9.73798 cv
418.23 9.742 418.77 9.82397 419.227 9.992 cv
419.684 10.164 420.063 10.414 420.359 10.738 cv
420.656 11.066 420.879 11.469 421.027 11.945 cv
421.172 12.426 421.242 12.973 421.246 13.586 cv
cp
419.227 13.664 mo
419.223 13.328 419.195 13.012 419.145 12.719 cv
419.086 12.434 418.992 12.184 418.867 11.969 cv
418.734 11.758 418.563 11.59 418.352 11.469 cv
418.133 11.352 417.863 11.293 417.535 11.289 cv
417.246 11.293 416.992 11.348 416.773 11.449 cv
416.555 11.559 416.375 11.715 416.234 11.918 cv
416.094 12.125 415.988 12.371 415.918 12.656 cv
415.848 12.949 415.813 13.277 415.813 13.641 cv
415.813 13.988 415.84 14.305 415.898 14.59 cv
415.953 14.883 416.047 15.133 416.176 15.344 cv
416.301 15.559 416.473 15.723 416.695 15.836 cv
416.91 15.957 417.18 16.016 417.504 16.012 cv
417.797 16.016 418.055 15.961 418.277 15.852 cv
418.492 15.746 418.672 15.594 418.813 15.387 cv
418.953 15.187 419.055 14.941 419.125 14.652 cv
419.188 14.367 419.223 14.039 419.227 13.664 cv
cp
f
426.953 16.449 mo
426.953 16.676 426.938 16.852 426.91 16.973 cv
426.879 17.098 426.84 17.184 426.797 17.23 cv
426.746 17.281 426.68 17.324 426.59 17.363 cv
426.496 17.402 426.387 17.434 426.27 17.465 cv
426.145 17.488 426.012 17.512 425.871 17.531 cv
425.727 17.543 425.586 17.551 425.441 17.555 cv
425.051 17.551 424.711 17.5 424.426 17.406 cv
424.141 17.305 423.906 17.156 423.719 16.949 cv
423.531 16.746 423.391 16.488 423.305 16.176 cv
423.211 15.867 423.168 15.496 423.172 15.066 cv
423.172 11.508 li
422.34 11.508 li
422.238 11.512 422.164 11.449 422.113 11.324 cv
422.059 11.203 422.031 11 422.035 10.711 cv
422.031 10.562 422.039 10.434 422.055 10.332 cv
422.066 10.23 422.086 10.148 422.113 10.086 cv
422.137 10.027 422.168 9.98401 422.211 9.95697 cv
422.246 9.93402 422.293 9.922 422.348 9.91803 cv
423.172 9.91803 li
423.172 8.367 li
423.168 8.32001 423.184 8.27301 423.215 8.22699 cv
423.242 8.18701 423.293 8.15198 423.371 8.12097 cv
423.445 8.09802 423.547 8.07397 423.676 8.05902 cv
423.801 8.047 423.957 8.04303 424.148 8.039 cv
424.336 8.04303 424.496 8.047 424.625 8.05902 cv
424.75 8.07397 424.852 8.09802 424.926 8.12097 cv
424.996 8.15198 425.047 8.18701 425.082 8.22699 cv
425.109 8.27301 425.125 8.32001 425.129 8.367 cv
425.129 9.91803 li
426.641 9.91803 li
426.691 9.922 426.738 9.93402 426.777 9.95697 cv
426.816 9.98401 426.848 10.027 426.875 10.086 cv
426.898 10.148 426.918 10.23 426.934 10.332 cv
426.945 10.434 426.953 10.562 426.953 10.711 cv
426.953 11 426.926 11.203 426.875 11.324 cv
426.82 11.449 426.746 11.512 426.648 11.508 cv
425.129 11.508 li
425.129 14.773 li
425.125 15.152 425.184 15.437 425.309 15.625 cv
425.426 15.816 425.641 15.91 425.945 15.91 cv
426.047 15.91 426.141 15.902 426.227 15.883 cv
426.309 15.867 426.383 15.848 426.449 15.82 cv
426.512 15.801 426.566 15.777 426.613 15.758 cv
426.656 15.742 426.695 15.734 426.734 15.73 cv
426.762 15.734 426.793 15.742 426.824 15.758 cv
426.852 15.777 426.871 15.816 426.891 15.867 cv
426.902 15.926 426.918 16 426.934 16.09 cv
426.945 16.187 426.953 16.305 426.953 16.449 cv
cp
f
434.539 13.457 mo
434.535 13.695 434.484 13.871 434.379 13.984 cv
434.27 14.102 434.121 14.16 433.941 14.156 cv
429.707 14.156 li
429.703 14.457 429.738 14.727 429.813 14.965 cv
429.879 15.207 429.992 15.41 430.148 15.578 cv
430.301 15.75 430.496 15.879 430.738 15.965 cv
430.977 16.055 431.266 16.098 431.609 16.098 cv
431.949 16.098 432.25 16.074 432.512 16.023 cv
432.77 15.977 432.996 15.922 433.188 15.859 cv
433.375 15.801 433.531 15.746 433.66 15.695 cv
433.781 15.648 433.883 15.625 433.965 15.621 cv
434.008 15.625 434.047 15.633 434.082 15.648 cv
434.109 15.668 434.137 15.699 434.156 15.746 cv
434.176 15.793 434.188 15.859 434.199 15.945 cv
434.203 16.031 434.207 16.141 434.211 16.27 cv
434.207 16.387 434.207 16.484 434.203 16.562 cv
434.195 16.645 434.188 16.711 434.18 16.766 cv
434.168 16.824 434.152 16.875 434.133 16.91 cv
434.113 16.953 434.086 16.988 434.055 17.023 cv
434.02 17.062 433.926 17.113 433.777 17.172 cv
433.621 17.238 433.43 17.301 433.199 17.355 cv
432.961 17.418 432.691 17.465 432.395 17.512 cv
432.09 17.551 431.77 17.574 431.43 17.578 cv
430.809 17.574 430.266 17.5 429.805 17.344 cv
429.336 17.191 428.949 16.953 428.641 16.637 cv
428.324 16.32 428.09 15.922 427.941 15.437 cv
427.785 14.957 427.711 14.391 427.715 13.734 cv
427.711 13.121 427.789 12.562 427.953 12.066 cv
428.109 11.57 428.344 11.152 428.656 10.805 cv
428.961 10.461 429.336 10.195 429.773 10.012 cv
430.211 9.83197 430.703 9.742 431.258 9.73798 cv
431.836 9.742 432.336 9.828 432.75 9.99597 cv
433.164 10.172 433.5 10.41 433.766 10.711 cv
434.027 11.016 434.223 11.375 434.352 11.789 cv
434.473 12.207 434.535 12.656 434.539 13.145 cv
cp
432.637 12.895 mo
432.648 12.344 432.539 11.91 432.305 11.598 cv
432.07 11.285 431.703 11.129 431.211 11.125 cv
430.961 11.129 430.746 11.176 430.563 11.266 cv
430.375 11.363 430.223 11.488 430.102 11.645 cv
429.977 11.805 429.883 11.992 429.82 12.207 cv
429.754 12.422 429.715 12.652 429.707 12.895 cv
cp
f
451.734 17.117 mo
451.73 17.172 451.719 17.219 451.691 17.258 cv
451.66 17.301 451.605 17.336 451.535 17.359 cv
451.457 17.387 451.359 17.406 451.234 17.422 cv
451.109 17.437 450.949 17.445 450.758 17.445 cv
450.57 17.445 450.414 17.437 450.293 17.422 cv
450.164 17.406 450.066 17.387 449.996 17.359 cv
449.922 17.336 449.871 17.301 449.84 17.258 cv
449.809 17.219 449.793 17.172 449.793 17.117 cv
449.793 8.90997 li
449.777 8.90997 li
446.855 17.109 li
446.832 17.18 446.797 17.234 446.754 17.277 cv
446.703 17.324 446.641 17.359 446.563 17.383 cv
446.48 17.41 446.379 17.426 446.254 17.434 cv
446.129 17.441 445.977 17.445 445.805 17.445 cv
445.625 17.445 445.477 17.437 445.352 17.426 cv
445.227 17.41 445.121 17.391 445.043 17.363 cv
444.957 17.336 444.895 17.301 444.852 17.258 cv
444.801 17.219 444.77 17.172 444.758 17.109 cv
441.938 8.90997 li
441.922 8.90997 li
441.922 17.117 li
441.918 17.172 441.902 17.219 441.879 17.258 cv
441.848 17.301 441.797 17.336 441.719 17.359 cv
441.641 17.387 441.539 17.406 441.418 17.422 cv
441.293 17.437 441.137 17.445 440.949 17.445 cv
440.758 17.445 440.602 17.437 440.48 17.422 cv
440.352 17.406 440.25 17.387 440.18 17.359 cv
440.102 17.336 440.051 17.301 440.023 17.258 cv
439.992 17.219 439.977 17.172 439.98 17.117 cv
439.98 8.133 li
439.977 7.87097 440.047 7.66803 440.191 7.52301 cv
440.328 7.38702 440.516 7.31598 440.754 7.31201 cv
442.094 7.31201 li
442.332 7.31598 442.535 7.336 442.707 7.37097 cv
442.875 7.414 443.023 7.47699 443.152 7.56598 cv
443.273 7.65997 443.379 7.78101 443.465 7.92603 cv
443.547 8.078 443.617 8.26202 443.684 8.47699 cv
445.867 14.484 li
445.898 14.484 li
448.156 8.492 li
448.223 8.27301 448.297 8.09003 448.379 7.93701 cv
448.457 7.789 448.551 7.66803 448.66 7.57001 cv
448.766 7.47998 448.891 7.414 449.035 7.37097 cv
449.18 7.336 449.348 7.31598 449.543 7.31201 cv
450.922 7.31201 li
451.059 7.31598 451.18 7.33197 451.285 7.367 cv
451.383 7.40601 451.465 7.461 451.535 7.52698 cv
451.598 7.60199 451.648 7.68701 451.684 7.78497 cv
451.715 7.89099 451.73 8.008 451.734 8.133 cv
cp
f
460.844 13.586 mo
460.84 14.184 460.762 14.727 460.609 15.211 cv
460.449 15.703 460.215 16.121 459.898 16.473 cv
459.582 16.824 459.184 17.098 458.707 17.289 cv
458.227 17.48 457.668 17.574 457.031 17.578 cv
456.41 17.574 455.871 17.492 455.418 17.32 cv
454.957 17.152 454.578 16.902 454.281 16.574 cv
453.977 16.25 453.754 15.848 453.609 15.367 cv
453.465 14.891 453.395 14.344 453.395 13.727 cv
453.395 13.137 453.473 12.598 453.629 12.105 cv
453.785 11.617 454.023 11.195 454.344 10.844 cv
454.66 10.496 455.055 10.223 455.531 10.027 cv
456.004 9.836 456.563 9.742 457.203 9.73798 cv
457.828 9.742 458.367 9.82397 458.824 9.992 cv
459.281 10.164 459.66 10.414 459.957 10.738 cv
460.254 11.066 460.477 11.469 460.625 11.945 cv
460.77 12.426 460.84 12.973 460.844 13.586 cv
cp
458.824 13.664 mo
458.82 13.328 458.793 13.012 458.742 12.719 cv
458.684 12.434 458.59 12.184 458.465 11.969 cv
458.332 11.758 458.16 11.59 457.949 11.469 cv
457.73 11.352 457.461 11.293 457.133 11.289 cv
456.844 11.293 456.59 11.348 456.371 11.449 cv
456.152 11.559 455.973 11.715 455.832 11.918 cv
455.691 12.125 455.586 12.371 455.516 12.656 cv
455.445 12.949 455.41 13.277 455.41 13.641 cv
455.41 13.988 455.438 14.305 455.496 14.59 cv
455.551 14.883 455.645 15.133 455.773 15.344 cv
455.898 15.559 456.07 15.723 456.293 15.836 cv
456.508 15.957 456.777 16.016 457.102 16.012 cv
457.395 16.016 457.652 15.961 457.875 15.852 cv
458.09 15.746 458.27 15.594 458.41 15.387 cv
458.551 15.187 458.652 14.941 458.723 14.652 cv
458.785 14.367 458.82 14.039 458.824 13.664 cv
cp
f
468.992 17.133 mo
468.988 17.195 468.977 17.242 468.953 17.277 cv
468.926 17.32 468.879 17.352 468.82 17.375 cv
468.754 17.398 468.672 17.414 468.566 17.43 cv
468.461 17.437 468.328 17.445 468.176 17.445 cv
468.004 17.445 467.871 17.437 467.77 17.43 cv
467.664 17.414 467.578 17.398 467.516 17.375 cv
467.449 17.352 467.402 17.32 467.375 17.277 cv
467.344 17.242 467.328 17.195 467.332 17.133 cv
467.332 16.363 li
466.973 16.75 466.598 17.047 466.207 17.258 cv
465.809 17.469 465.375 17.574 464.902 17.578 cv
464.367 17.574 463.918 17.473 463.555 17.27 cv
463.188 17.066 462.891 16.793 462.66 16.441 cv
462.426 16.098 462.258 15.691 462.156 15.223 cv
462.055 14.762 462.004 14.27 462.004 13.75 cv
462.004 13.137 462.066 12.582 462.199 12.086 cv
462.328 11.594 462.523 11.172 462.781 10.824 cv
463.035 10.477 463.352 10.211 463.73 10.02 cv
464.109 9.836 464.547 9.742 465.043 9.73798 cv
465.43 9.742 465.781 9.82001 466.102 9.97699 cv
466.414 10.137 466.73 10.367 467.043 10.672 cv
467.043 6.90997 li
467.043 6.85901 467.055 6.81201 467.086 6.77002 cv
467.109 6.72998 467.164 6.69501 467.242 6.664 cv
467.316 6.63702 467.414 6.617 467.543 6.59802 cv
467.664 6.586 467.824 6.578 468.02 6.57397 cv
468.211 6.578 468.367 6.586 468.492 6.59802 cv
468.613 6.617 468.715 6.63702 468.789 6.664 cv
468.859 6.69501 468.91 6.72998 468.945 6.77002 cv
468.973 6.81201 468.988 6.85901 468.992 6.90997 cv
cp
467.043 12.488 mo
466.762 12.137 466.492 11.867 466.238 11.68 cv
465.977 11.492 465.707 11.398 465.43 11.398 cv
465.176 11.398 464.957 11.465 464.773 11.59 cv
464.586 11.723 464.438 11.891 464.328 12.102 cv
464.215 12.312 464.133 12.551 464.078 12.812 cv
464.023 13.078 463.996 13.348 463.996 13.617 cv
463.996 13.914 464.02 14.195 464.066 14.469 cv
464.113 14.746 464.188 14.992 464.297 15.207 cv
464.398 15.422 464.543 15.594 464.723 15.723 cv
464.898 15.855 465.121 15.922 465.391 15.918 cv
465.523 15.922 465.652 15.902 465.785 15.859 cv
465.91 15.824 466.043 15.762 466.176 15.668 cv
466.309 15.582 466.445 15.465 466.586 15.32 cv
466.727 15.18 466.879 15.004 467.043 14.797 cv
cp
f
477.391 13.457 mo
477.387 13.695 477.336 13.871 477.23 13.984 cv
477.121 14.102 476.973 14.16 476.793 14.156 cv
472.559 14.156 li
472.555 14.457 472.59 14.727 472.664 14.965 cv
472.73 15.207 472.844 15.41 473 15.578 cv
473.152 15.75 473.348 15.879 473.59 15.965 cv
473.828 16.055 474.117 16.098 474.461 16.098 cv
474.801 16.098 475.102 16.074 475.363 16.023 cv
475.621 15.977 475.848 15.922 476.039 15.859 cv
476.227 15.801 476.383 15.746 476.512 15.695 cv
476.633 15.648 476.734 15.625 476.816 15.621 cv
476.859 15.625 476.898 15.633 476.934 15.648 cv
476.961 15.668 476.988 15.699 477.008 15.746 cv
477.027 15.793 477.039 15.859 477.051 15.945 cv
477.055 16.031 477.059 16.141 477.063 16.27 cv
477.059 16.387 477.059 16.484 477.055 16.562 cv
477.047 16.645 477.039 16.711 477.031 16.766 cv
477.02 16.824 477.004 16.875 476.984 16.91 cv
476.965 16.953 476.938 16.988 476.906 17.023 cv
476.871 17.062 476.777 17.113 476.629 17.172 cv
476.473 17.238 476.281 17.301 476.051 17.355 cv
475.813 17.418 475.543 17.465 475.246 17.512 cv
474.941 17.551 474.621 17.574 474.281 17.578 cv
473.66 17.574 473.117 17.5 472.656 17.344 cv
472.188 17.191 471.801 16.953 471.492 16.637 cv
471.176 16.32 470.941 15.922 470.793 15.437 cv
470.637 14.957 470.563 14.391 470.566 13.734 cv
470.563 13.121 470.641 12.562 470.805 12.066 cv
470.961 11.57 471.195 11.152 471.508 10.805 cv
471.813 10.461 472.188 10.195 472.625 10.012 cv
473.063 9.83197 473.555 9.742 474.109 9.73798 cv
474.688 9.742 475.188 9.828 475.602 9.99597 cv
476.016 10.172 476.352 10.41 476.617 10.711 cv
476.879 11.016 477.074 11.375 477.203 11.789 cv
477.324 12.207 477.387 12.656 477.391 13.145 cv
cp
475.488 12.895 mo
475.5 12.344 475.391 11.91 475.156 11.598 cv
474.922 11.285 474.555 11.129 474.063 11.125 cv
473.813 11.129 473.598 11.176 473.414 11.266 cv
473.227 11.363 473.074 11.488 472.953 11.645 cv
472.828 11.805 472.734 11.992 472.672 12.207 cv
472.605 12.422 472.566 12.652 472.559 12.895 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
