%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SpeedupFourThread-Local.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:33:11 p.m.
%%BoundingBox: 0 0 622 549
%%HiResBoundingBox: 0 0 621.9601 548.6401
%%CropBox: 0 0 621.9601 548.6401
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -548.64 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 548.64 li
621.96 548.64 li
621.96 0 li
cp
clp
gsave
0 548.64 mo
622 548.64 li
622 -.359985 li
0 -.359985 li
cp
clp
0 0 mo
621.961 0 li
621.961 548.641 li
0 548.641 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
35.52 486.238 mo
606.719 486.238 li
35.52 454.441 mo
606.719 454.441 li
35.52 422.641 mo
606.719 422.641 li
35.52 390.84 mo
606.719 390.84 li
35.52 359.039 mo
606.719 359.039 li
35.52 327.121 mo
606.719 327.121 li
35.52 295.32 mo
606.719 295.32 li
35.52 263.52 mo
606.719 263.52 li
35.52 231.719 mo
606.719 231.719 li
35.52 199.922 mo
606.719 199.922 li
35.52 168.121 mo
606.719 168.121 li
35.52 136.32 mo
606.719 136.32 li
35.52 104.52 mo
606.719 104.52 li
35.52 72.719 mo
606.719 72.719 li
35.52 40.922 mo
606.719 40.922 li
.140414 .108034 .108034 0 cmyk
@
35.52 470.281 mo
606.719 470.281 li
35.52 438.48 mo
606.719 438.48 li
35.52 406.68 mo
606.719 406.68 li
35.52 374.879 mo
606.719 374.879 li
35.52 343.078 mo
606.719 343.078 li
35.52 311.281 mo
606.719 311.281 li
35.52 279.48 mo
606.719 279.48 li
35.52 247.68 mo
606.719 247.68 li
35.52 215.879 mo
606.719 215.879 li
35.52 184.078 mo
606.719 184.078 li
35.52 152.281 mo
606.719 152.281 li
35.52 120.359 mo
606.719 120.359 li
35.52 88.559 mo
606.719 88.559 li
35.52 56.762 mo
606.719 56.762 li
35.52 24.961 mo
606.719 24.961 li
.328344 .284215 .278569 .000915541 cmyk
@
71.281 24.961 mo
71.281 502.078 li
142.68 24.961 mo
142.68 502.078 li
214.078 24.961 mo
214.078 502.078 li
285.48 24.961 mo
285.48 502.078 li
356.879 24.961 mo
356.879 502.078 li
428.16 24.961 mo
428.16 502.078 li
499.559 24.961 mo
499.559 502.078 li
570.961 24.961 mo
570.961 502.078 li
.178592 .148898 .143923 0 cmyk
@
35.52 24.961 mo
35.52 502.078 li
106.922 24.961 mo
106.922 502.078 li
178.32 24.961 mo
178.32 502.078 li
249.719 24.961 mo
249.719 502.078 li
321.121 24.961 mo
321.121 502.078 li
392.52 24.961 mo
392.52 502.078 li
463.922 24.961 mo
463.922 502.078 li
535.32 24.961 mo
535.32 502.078 li
606.719 24.961 mo
606.719 502.078 li
.328344 .284215 .278569 .000915541 cmyk
@
15.48 492.84 mo
22.558 492.84 li
22.558 509.879 li
15.48 509.879 li
cp
0 0 0 0 cmyk
ef
15.48 461.039 mo
22.558 461.039 li
22.558 478.078 li
15.48 478.078 li
cp
ef
15.48 429.238 mo
22.558 429.238 li
22.558 446.281 li
15.48 446.281 li
cp
ef
15.48 397.32 mo
22.558 397.32 li
22.558 414.48 li
15.48 414.48 li
cp
ef
15.48 365.52 mo
22.558 365.52 li
22.558 382.68 li
15.48 382.68 li
cp
ef
15.48 333.719 mo
22.558 333.719 li
22.558 350.879 li
15.48 350.879 li
cp
ef
15.48 301.922 mo
22.558 301.922 li
22.558 319.078 li
15.48 319.078 li
cp
ef
15.48 270.121 mo
22.558 270.121 li
22.558 287.281 li
15.48 287.281 li
cp
ef
15.48 238.32 mo
22.558 238.32 li
22.558 255.48 li
15.48 255.48 li
cp
ef
8.398 206.52 mo
22.558 206.52 li
22.558 223.559 li
8.398 223.559 li
cp
ef
8.398 174.719 mo
22.558 174.719 li
22.558 191.762 li
8.398 191.762 li
cp
ef
8.398 142.922 mo
22.558 142.922 li
22.558 159.961 li
8.398 159.961 li
cp
ef
8.398 111.121 mo
22.558 111.121 li
22.558 128.16 li
8.398 128.16 li
cp
ef
8.398 79.32 mo
22.558 79.32 li
22.558 96.359 li
8.398 96.359 li
cp
ef
8.398 47.52 mo
22.558 47.52 li
22.558 64.559 li
8.398 64.559 li
cp
ef
8.398 15.719 mo
22.558 15.719 li
22.558 32.762 li
8.398 32.762 li
cp
ef
.96 lw
35.52 502.078 mo
606.719 502.078 li
.367803 .29575 .300999 .00198367 cmyk
@
35.52 502.078 mo
35.52 506.52 li
106.922 502.078 mo
106.922 506.52 li
178.32 502.078 mo
178.32 506.52 li
249.719 502.078 mo
249.719 506.52 li
321.121 502.078 mo
321.121 506.52 li
392.52 502.078 mo
392.52 506.52 li
463.922 502.078 mo
463.922 506.52 li
535.32 502.078 mo
535.32 506.52 li
606.719 502.078 mo
606.719 506.52 li
@
gsave
35.52 24.961 mo
607.321 24.961 li
607.321 502.801 li
35.52 502.801 li
cp
clp
1 lc
35.52 502.078 mo
106.922 471.719 li
178.32 403.801 li
249.719 454.441 li
321.121 423.84 li
392.52 438.48 li
463.922 438.48 li
535.32 444.48 li
606.719 438.48 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
40.531 507.129 mo
30.449 497.051 li
30.449 507.129 mo
40.531 497.051 li
.62768 .285466 0 0 cmyk
@
111.93 476.648 mo
101.852 466.57 li
101.852 476.648 mo
111.93 466.57 li
@
183.328 408.852 mo
173.25 398.77 li
173.25 408.852 mo
183.328 398.77 li
@
254.73 459.371 mo
244.648 449.289 li
244.648 459.371 mo
254.73 449.289 li
@
326.129 428.77 mo
316.051 418.691 li
316.051 428.77 mo
326.129 418.691 li
@
397.41 443.531 mo
387.328 433.449 li
387.328 443.531 mo
397.41 433.449 li
@
468.809 443.531 mo
458.73 433.449 li
458.73 443.531 mo
468.809 433.449 li
@
540.211 449.41 mo
530.129 439.328 li
530.129 449.41 mo
540.211 439.328 li
@
611.609 443.531 mo
601.531 433.449 li
601.531 443.531 mo
611.609 433.449 li
@
gsave
35.52 24.961 mo
607.321 24.961 li
607.321 502.801 li
35.52 502.801 li
cp
clp
.96 lw
1 lc
35.52 502.078 mo
106.922 471.359 li
178.32 412.801 li
249.719 442.441 li
321.121 412.801 li
392.52 446.641 li
463.922 408.84 li
535.32 442.441 li
606.719 420.238 li
.466651 0 .889799 0 cmyk
@
grestore
40.531 507.129 mo
30.449 497.051 li
30.449 507.129 mo
40.531 497.051 li
.466651 0 .889799 0 cmyk
@
111.93 476.41 mo
101.852 466.328 li
101.852 476.41 mo
111.93 466.328 li
@
183.328 417.852 mo
173.25 407.77 li
173.25 417.852 mo
183.328 407.77 li
@
254.73 447.371 mo
244.648 437.289 li
244.648 447.371 mo
254.73 437.289 li
@
326.129 417.852 mo
316.051 407.77 li
316.051 417.852 mo
326.129 407.77 li
@
397.41 451.57 mo
387.328 441.488 li
387.328 451.57 mo
397.41 441.488 li
@
468.809 413.77 mo
458.73 403.691 li
458.73 413.77 mo
468.809 403.691 li
@
540.211 447.371 mo
530.129 437.289 li
530.129 447.371 mo
540.211 437.289 li
@
611.609 425.172 mo
601.531 415.09 li
601.531 425.172 mo
611.609 415.09 li
@
gsave
35.52 24.961 mo
607.321 24.961 li
607.321 502.801 li
35.52 502.801 li
cp
clp
.96 lw
1 lc
35.52 502.078 mo
106.922 471.602 li
178.32 413.398 li
249.719 452.762 li
321.121 426.602 li
392.52 432.602 li
463.922 435 li
535.32 424.801 li
606.719 433.441 li
0 .990631 1 .000396735 cmyk
@
grestore
40.531 507.129 mo
30.449 497.051 li
30.449 507.129 mo
40.531 497.051 li
0 .990631 1 .000396735 cmyk
@
111.93 476.531 mo
101.852 466.449 li
101.852 476.531 mo
111.93 466.449 li
@
183.328 418.328 mo
173.25 408.25 li
173.25 418.328 mo
183.328 408.25 li
@
254.73 457.809 mo
244.648 447.73 li
244.648 457.809 mo
254.73 447.73 li
@
326.129 431.648 mo
316.051 421.57 li
316.051 431.648 mo
326.129 421.57 li
@
397.41 437.648 mo
387.328 427.57 li
387.328 437.648 mo
397.41 427.57 li
@
468.809 440.051 mo
458.73 429.969 li
458.73 440.051 mo
468.809 429.969 li
@
540.211 429.73 mo
530.129 419.648 li
530.129 429.73 mo
540.211 419.648 li
@
611.609 438.488 mo
601.531 428.41 li
601.531 438.488 mo
611.609 428.41 li
@
gsave
35.52 24.961 mo
607.321 24.961 li
607.321 502.801 li
35.52 502.801 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.52 502.078 mo
106.922 471.719 li
178.32 414.121 li
249.719 453.359 li
321.121 414.121 li
392.52 433.441 li
463.922 410.52 li
535.32 457.078 li
606.719 422.398 li
@
grestore
40.531 507.129 mo
30.449 497.051 li
30.449 507.129 mo
40.531 497.051 li
@
111.93 476.77 mo
101.852 466.691 li
101.852 476.77 mo
111.93 466.691 li
@
183.328 419.172 mo
173.25 409.09 li
173.25 419.172 mo
183.328 409.09 li
@
254.73 458.289 mo
244.648 448.211 li
244.648 458.289 mo
254.73 448.211 li
@
326.129 419.172 mo
316.051 409.09 li
316.051 419.172 mo
326.129 409.09 li
@
397.41 438.371 mo
387.328 428.289 li
387.328 438.371 mo
397.41 428.289 li
@
468.809 415.57 mo
458.73 405.488 li
458.73 415.57 mo
468.809 405.488 li
@
540.211 462.129 mo
530.129 452.051 li
530.129 462.129 mo
540.211 452.051 li
@
611.609 427.328 mo
601.531 417.25 li
601.531 427.328 mo
611.609 417.25 li
@
gsave
35.52 24.961 mo
607.321 24.961 li
607.321 502.801 li
35.52 502.801 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.52 502.078 mo
106.922 471.238 li
178.32 412.078 li
249.719 445.078 li
321.121 437.398 li
392.52 453.719 li
463.922 446.879 li
535.32 443.281 li
606.719 448.199 li
.62768 .285466 0 0 cmyk
@
grestore
40.051 506.648 mo
30.93 497.531 li
30.93 506.648 mo
40.051 497.531 li
.62768 .285466 0 0 cmyk
@
111.449 475.809 mo
102.328 466.691 li
102.328 475.809 mo
111.449 466.691 li
@
182.852 416.648 mo
173.73 407.531 li
173.73 416.648 mo
182.852 407.531 li
@
254.25 449.648 mo
245.129 440.531 li
245.129 449.648 mo
254.25 440.531 li
@
325.648 441.969 mo
316.531 432.852 li
316.531 441.969 mo
325.648 432.852 li
@
396.93 458.289 mo
387.809 449.172 li
387.809 458.289 mo
396.93 449.172 li
@
468.328 451.328 mo
459.211 442.211 li
459.211 451.328 mo
468.328 442.211 li
@
539.73 447.852 mo
530.609 438.73 li
530.609 447.852 mo
539.73 438.73 li
@
611.129 452.648 mo
602.012 443.531 li
602.012 452.648 mo
611.129 443.531 li
@
gsave
35.52 24.961 mo
607.321 24.961 li
607.321 502.801 li
35.52 502.801 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.52 502.078 mo
106.922 471.602 li
178.32 411.84 li
249.719 445.68 li
321.121 437.281 li
392.52 453.84 li
463.922 443.398 li
535.32 435.602 li
606.719 439.922 li
.466651 0 .889799 0 cmyk
@
grestore
40.531 507.129 mo
30.449 497.051 li
30.449 507.129 mo
40.531 497.051 li
.466651 0 .889799 0 cmyk
@
111.93 476.531 mo
101.852 466.449 li
101.852 476.531 mo
111.93 466.449 li
@
183.328 416.891 mo
173.25 406.809 li
173.25 416.891 mo
183.328 406.809 li
@
254.73 450.73 mo
244.648 440.648 li
244.648 450.73 mo
254.73 440.648 li
@
326.129 442.211 mo
316.051 432.129 li
316.051 442.211 mo
326.129 432.129 li
@
397.41 458.891 mo
387.328 448.809 li
387.328 458.891 mo
397.41 448.809 li
@
468.809 448.328 mo
458.73 438.25 li
458.73 448.328 mo
468.809 438.25 li
@
540.211 440.531 mo
530.129 430.449 li
530.129 440.531 mo
540.211 430.449 li
@
611.609 444.852 mo
601.531 434.77 li
601.531 444.852 mo
611.609 434.77 li
@
15.469 492.812 mo
22.567 492.812 li
22.567 509.902 li
15.469 509.902 li
cp
0 0 0 0 cmyk
ef
21.836 505.766 mo
21.832 505.855 21.824 505.926 21.813 505.984 cv
21.797 506.047 21.777 506.098 21.758 506.129 cv
21.734 506.168 21.711 506.191 21.68 506.207 cv
21.648 506.223 21.617 506.23 21.59 506.23 cv
16.953 506.23 li
16.918 506.23 16.891 506.223 16.863 506.207 cv
16.836 506.191 16.809 506.168 16.785 506.129 cv
16.758 506.098 16.738 506.047 16.727 505.984 cv
16.711 505.926 16.703 505.855 16.707 505.766 cv
16.703 505.687 16.711 505.613 16.727 505.551 cv
16.738 505.492 16.754 505.445 16.777 505.406 cv
16.793 505.371 16.82 505.34 16.852 505.316 cv
16.883 505.297 16.914 505.289 16.953 505.285 cv
18.805 505.285 li
18.805 498.539 li
17.09 499.559 li
17 499.609 16.93 499.637 16.883 499.645 cv
16.828 499.652 16.785 499.645 16.754 499.613 cv
16.719 499.586 16.699 499.535 16.688 499.465 cv
16.676 499.398 16.668 499.312 16.672 499.203 cv
16.668 499.129 16.672 499.062 16.684 499.004 cv
16.688 498.953 16.699 498.906 16.715 498.867 cv
16.727 498.832 16.746 498.801 16.77 498.773 cv
16.793 498.746 16.824 498.719 16.871 498.691 cv
18.914 497.379 li
18.93 497.367 18.949 497.355 18.98 497.348 cv
19.004 497.34 19.039 497.332 19.086 497.32 cv
19.125 497.312 19.176 497.305 19.23 497.301 cv
19.285 497.301 19.352 497.301 19.438 497.297 cv
19.543 497.301 19.637 497.305 19.711 497.312 cv
19.781 497.32 19.836 497.336 19.883 497.352 cv
19.922 497.371 19.949 497.391 19.965 497.414 cv
19.973 497.441 19.98 497.465 19.984 497.488 cv
19.984 505.285 li
21.59 505.285 li
21.625 505.289 21.66 505.297 21.691 505.316 cv
21.723 505.34 21.746 505.371 21.77 505.406 cv
21.785 505.445 21.801 505.492 21.816 505.551 cv
21.824 505.613 21.832 505.687 21.836 505.766 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.469 461.004 mo
22.567 461.004 li
22.567 478.094 li
15.469 478.094 li
cp
0 0 0 0 cmyk
ef
21.816 473.898 mo
21.813 473.984 21.809 474.059 21.797 474.121 cv
21.785 474.187 21.77 474.242 21.75 474.281 cv
21.727 474.328 21.699 474.359 21.668 474.375 cv
21.633 474.398 21.594 474.406 21.555 474.406 cv
16.652 474.406 li
16.59 474.406 16.531 474.398 16.484 474.383 cv
16.434 474.367 16.395 474.344 16.359 474.305 cv
16.324 474.273 16.297 474.219 16.285 474.148 cv
16.266 474.078 16.258 473.992 16.262 473.891 cv
16.258 473.801 16.262 473.723 16.27 473.652 cv
16.273 473.586 16.289 473.527 16.316 473.473 cv
16.34 473.422 16.371 473.367 16.406 473.312 cv
16.441 473.262 16.484 473.207 16.543 473.145 cv
18.316 471.32 li
18.727 470.902 19.055 470.527 19.305 470.191 cv
19.551 469.863 19.742 469.559 19.875 469.281 cv
20.008 469.008 20.094 468.758 20.141 468.531 cv
20.18 468.309 20.203 468.098 20.203 467.902 cv
20.203 467.707 20.168 467.523 20.102 467.344 cv
20.035 467.172 19.941 467.016 19.816 466.879 cv
19.691 466.75 19.535 466.645 19.348 466.562 cv
19.16 466.488 18.941 466.449 18.695 466.445 cv
18.406 466.449 18.148 466.488 17.922 466.562 cv
17.691 466.645 17.492 466.73 17.32 466.816 cv
17.148 466.91 17.004 466.992 16.887 467.07 cv
16.77 467.148 16.684 467.187 16.633 467.187 cv
16.598 467.187 16.566 467.18 16.543 467.16 cv
16.512 467.145 16.492 467.113 16.477 467.07 cv
16.461 467.031 16.445 466.977 16.438 466.906 cv
16.426 466.84 16.422 466.758 16.426 466.66 cv
16.422 466.594 16.426 466.535 16.434 466.484 cv
16.438 466.434 16.445 466.391 16.457 466.352 cv
16.465 466.316 16.48 466.281 16.5 466.25 cv
16.52 466.219 16.555 466.18 16.613 466.129 cv
16.664 466.082 16.758 466.016 16.895 465.934 cv
17.027 465.852 17.199 465.773 17.402 465.691 cv
17.605 465.613 17.828 465.543 18.074 465.488 cv
18.316 465.434 18.574 465.406 18.848 465.406 cv
19.273 465.406 19.648 465.469 19.973 465.59 cv
20.293 465.711 20.559 465.875 20.773 466.086 cv
20.984 466.297 21.145 466.543 21.25 466.816 cv
21.355 467.098 21.41 467.395 21.41 467.707 cv
21.41 467.996 21.383 468.277 21.332 468.555 cv
21.281 468.84 21.176 469.145 21.016 469.469 cv
20.852 469.797 20.617 470.16 20.313 470.559 cv
20.004 470.961 19.598 471.422 19.094 471.937 cv
17.688 473.406 li
21.547 473.406 li
21.578 473.41 21.613 473.422 21.652 473.437 cv
21.684 473.461 21.715 473.492 21.742 473.531 cv
21.766 473.574 21.785 473.625 21.797 473.684 cv
21.809 473.75 21.813 473.82 21.816 473.898 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.469 429.199 mo
22.567 429.199 li
22.567 446.289 li
15.469 446.289 li
cp
0 0 0 0 cmyk
ef
21.746 440.074 mo
21.742 440.484 21.672 440.852 21.531 441.176 cv
21.387 441.504 21.184 441.785 20.922 442.016 cv
20.656 442.25 20.328 442.426 19.941 442.551 cv
19.551 442.676 19.113 442.738 18.629 442.738 cv
18.324 442.738 18.047 442.711 17.793 442.664 cv
17.531 442.617 17.301 442.566 17.105 442.496 cv
16.902 442.434 16.738 442.363 16.605 442.293 cv
16.473 442.223 16.387 442.172 16.355 442.137 cv
16.316 442.109 16.293 442.078 16.277 442.043 cv
16.258 442.012 16.238 441.973 16.227 441.926 cv
16.211 441.883 16.203 441.828 16.195 441.758 cv
16.188 441.695 16.184 441.613 16.188 441.512 cv
16.184 441.352 16.199 441.238 16.234 441.172 cv
16.266 441.109 16.313 441.074 16.375 441.074 cv
16.418 441.074 16.5 441.113 16.625 441.184 cv
16.746 441.262 16.906 441.34 17.102 441.422 cv
17.293 441.508 17.52 441.586 17.785 441.656 cv
18.043 441.73 18.336 441.766 18.656 441.766 cv
18.965 441.766 19.234 441.727 19.473 441.648 cv
19.703 441.57 19.902 441.461 20.063 441.32 cv
20.219 441.18 20.336 441.012 20.418 440.816 cv
20.496 440.621 20.535 440.41 20.539 440.184 cv
20.535 439.934 20.484 439.707 20.387 439.504 cv
20.281 439.305 20.133 439.133 19.941 438.984 cv
19.742 438.84 19.504 438.727 19.219 438.648 cv
18.934 438.57 18.609 438.531 18.246 438.531 cv
17.375 438.531 li
17.332 438.531 17.297 438.523 17.262 438.508 cv
17.227 438.492 17.195 438.465 17.172 438.426 cv
17.145 438.391 17.125 438.344 17.109 438.285 cv
17.094 438.227 17.086 438.148 17.086 438.051 cv
17.086 437.965 17.09 437.895 17.105 437.836 cv
17.113 437.781 17.133 437.734 17.164 437.699 cv
17.188 437.664 17.219 437.641 17.25 437.621 cv
17.281 437.609 17.316 437.602 17.359 437.598 cv
18.133 437.598 li
18.434 437.602 18.703 437.562 18.945 437.48 cv
19.18 437.406 19.383 437.293 19.555 437.145 cv
19.719 437 19.848 436.824 19.938 436.621 cv
20.027 436.418 20.074 436.191 20.074 435.937 cv
20.074 435.758 20.043 435.582 19.984 435.414 cv
19.922 435.25 19.832 435.105 19.715 434.98 cv
19.594 434.855 19.441 434.758 19.262 434.687 cv
19.074 434.617 18.863 434.582 18.621 434.582 cv
18.355 434.582 18.109 434.625 17.891 434.703 cv
17.664 434.785 17.469 434.871 17.297 434.961 cv
17.121 435.055 16.977 435.141 16.863 435.219 cv
16.75 435.301 16.668 435.34 16.625 435.336 cv
16.59 435.34 16.563 435.332 16.539 435.32 cv
16.512 435.309 16.492 435.285 16.477 435.25 cv
16.461 435.219 16.449 435.172 16.441 435.105 cv
16.434 435.047 16.43 434.965 16.434 434.863 cv
16.43 434.797 16.43 434.738 16.438 434.684 cv
16.438 434.633 16.449 434.586 16.465 434.543 cv
16.48 434.508 16.496 434.473 16.516 434.437 cv
16.531 434.41 16.563 434.371 16.605 434.324 cv
16.648 434.281 16.734 434.219 16.871 434.137 cv
17 434.055 17.164 433.977 17.359 433.895 cv
17.551 433.816 17.773 433.746 18.031 433.691 cv
18.281 433.637 18.555 433.609 18.852 433.609 cv
19.258 433.609 19.621 433.664 19.934 433.766 cv
20.246 433.875 20.504 434.023 20.715 434.211 cv
20.918 434.406 21.074 434.637 21.18 434.902 cv
21.281 435.172 21.332 435.465 21.336 435.789 cv
21.332 436.07 21.297 436.332 21.227 436.566 cv
21.152 436.809 21.043 437.02 20.902 437.203 cv
20.758 437.391 20.586 437.547 20.383 437.676 cv
20.176 437.809 19.938 437.902 19.668 437.949 cv
19.668 437.961 li
19.973 437.996 20.254 438.07 20.508 438.191 cv
20.762 438.312 20.98 438.465 21.164 438.648 cv
21.344 438.832 21.484 439.047 21.59 439.289 cv
21.691 439.535 21.742 439.797 21.746 440.074 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.469 397.391 mo
22.567 397.391 li
22.567 414.481 li
15.469 414.481 li
cp
0 0 0 0 cmyk
ef
22.191 408.258 mo
22.188 408.41 22.164 408.531 22.121 408.617 cv
22.074 408.707 22.012 408.75 21.93 408.746 cv
20.93 408.746 li
20.93 410.609 li
20.93 410.648 20.918 410.68 20.902 410.703 cv
20.879 410.73 20.848 410.75 20.805 410.77 cv
20.754 410.785 20.691 410.797 20.621 410.809 cv
20.543 410.816 20.449 410.82 20.332 410.824 cv
20.215 410.82 20.117 410.816 20.047 410.809 cv
19.969 410.797 19.91 410.785 19.867 410.77 cv
19.82 410.75 19.789 410.73 19.773 410.703 cv
19.754 410.68 19.746 410.648 19.75 410.609 cv
19.75 408.746 li
16.121 408.746 li
16.063 408.75 16.02 408.742 15.984 408.727 cv
15.949 408.715 15.914 408.687 15.887 408.648 cv
15.855 408.613 15.836 408.562 15.824 408.492 cv
15.813 408.426 15.809 408.336 15.809 408.223 cv
15.809 408.141 15.809 408.062 15.816 407.992 cv
15.816 407.922 15.828 407.859 15.844 407.805 cv
15.855 407.75 15.871 407.695 15.898 407.641 cv
15.918 407.586 15.945 407.531 15.98 407.469 cv
19.141 402.082 li
19.16 402.047 19.195 402.016 19.242 401.988 cv
19.285 401.961 19.34 401.937 19.414 401.918 cv
19.48 401.902 19.566 401.891 19.672 401.879 cv
19.773 401.875 19.895 401.871 20.035 401.867 cv
20.184 401.871 20.32 401.875 20.438 401.887 cv
20.551 401.898 20.641 401.914 20.715 401.93 cv
20.781 401.949 20.836 401.973 20.875 402.004 cv
20.91 402.035 20.93 402.07 20.93 402.109 cv
20.93 407.773 li
21.93 407.773 li
22.004 407.777 22.066 407.816 22.117 407.895 cv
22.164 407.977 22.188 408.098 22.191 408.258 cv
cp
19.75 402.906 mo
19.738 402.906 li
16.887 407.773 li
19.75 407.773 li
cp
.629114 .553033 .543389 .289647 cmyk
f
15.469 365.578 mo
22.567 365.578 li
22.567 382.672 li
15.469 382.672 li
cp
0 0 0 0 cmyk
ef
21.773 376.109 mo
21.773 376.586 21.691 377.008 21.531 377.379 cv
21.371 377.75 21.145 378.062 20.855 378.316 cv
20.559 378.57 20.211 378.766 19.809 378.895 cv
19.402 379.027 18.953 379.09 18.461 379.09 cv
18.184 379.09 17.922 379.07 17.68 379.031 cv
17.43 378.992 17.211 378.945 17.023 378.891 cv
16.828 378.836 16.672 378.781 16.547 378.723 cv
16.422 378.672 16.344 378.629 16.313 378.594 cv
16.277 378.562 16.254 378.531 16.242 378.504 cv
16.227 378.477 16.211 378.445 16.203 378.402 cv
16.188 378.367 16.18 378.316 16.18 378.254 cv
16.172 378.195 16.172 378.125 16.172 378.043 cv
16.172 377.969 16.176 377.898 16.184 377.836 cv
16.191 377.773 16.203 377.723 16.223 377.684 cv
16.238 377.645 16.258 377.617 16.285 377.598 cv
16.309 377.582 16.34 377.574 16.371 377.57 cv
16.418 377.574 16.488 377.602 16.582 377.656 cv
16.676 377.715 16.805 377.777 16.969 377.844 cv
17.133 377.91 17.332 377.973 17.574 378.031 cv
17.809 378.09 18.094 378.117 18.43 378.117 cv
18.73 378.117 19.012 378.082 19.27 378.008 cv
19.523 377.937 19.746 377.824 19.934 377.668 cv
20.117 377.516 20.262 377.32 20.367 377.082 cv
20.473 376.848 20.523 376.559 20.527 376.219 cv
20.523 375.937 20.48 375.687 20.391 375.469 cv
20.301 375.25 20.164 375.07 19.98 374.926 cv
19.793 374.785 19.559 374.68 19.277 374.605 cv
18.992 374.535 18.652 374.496 18.266 374.496 cv
17.98 374.496 17.742 374.512 17.543 374.539 cv
17.34 374.57 17.152 374.586 16.98 374.582 cv
16.852 374.586 16.758 374.555 16.707 374.492 cv
16.648 374.434 16.621 374.32 16.625 374.148 cv
16.625 370.535 li
16.621 370.387 16.656 370.277 16.73 370.199 cv
16.797 370.129 16.898 370.09 17.035 370.09 cv
20.965 370.09 li
21 370.09 21.035 370.102 21.07 370.121 cv
21.102 370.145 21.129 370.176 21.156 370.215 cv
21.176 370.258 21.191 370.309 21.207 370.371 cv
21.215 370.437 21.223 370.516 21.227 370.598 cv
21.223 370.766 21.199 370.891 21.16 370.98 cv
21.113 371.074 21.055 371.121 20.977 371.117 cv
17.805 371.117 li
17.805 373.605 li
17.957 373.586 18.113 373.574 18.277 373.566 cv
18.434 373.562 18.621 373.559 18.836 373.559 cv
19.32 373.559 19.746 373.621 20.113 373.742 cv
20.477 373.863 20.781 374.035 21.031 374.254 cv
21.273 374.48 21.461 374.746 21.586 375.059 cv
21.711 375.375 21.773 375.727 21.773 376.109 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.469 333.77 mo
22.567 333.77 li
22.567 350.86 li
15.469 350.86 li
cp
0 0 0 0 cmyk
ef
22.043 344.289 mo
22.043 344.68 21.98 345.059 21.863 345.418 cv
21.738 345.785 21.555 346.102 21.313 346.375 cv
21.063 346.652 20.75 346.875 20.375 347.039 cv
19.992 347.207 19.547 347.289 19.031 347.289 cv
18.66 347.289 18.332 347.246 18.051 347.152 cv
17.766 347.066 17.52 346.934 17.309 346.762 cv
17.098 346.594 16.922 346.387 16.785 346.141 cv
16.645 345.895 16.531 345.613 16.449 345.297 cv
16.363 344.984 16.305 344.641 16.27 344.262 cv
16.23 343.891 16.211 343.488 16.215 343.055 cv
16.211 342.676 16.23 342.293 16.273 341.902 cv
16.313 341.52 16.387 341.145 16.492 340.777 cv
16.598 340.418 16.742 340.078 16.922 339.762 cv
17.102 339.445 17.328 339.168 17.602 338.934 cv
17.875 338.699 18.199 338.512 18.578 338.371 cv
18.957 338.234 19.398 338.168 19.902 338.164 cv
20.07 338.168 20.242 338.176 20.414 338.195 cv
20.586 338.219 20.746 338.25 20.895 338.281 cv
21.043 338.32 21.164 338.355 21.266 338.395 cv
21.363 338.434 21.43 338.469 21.465 338.492 cv
21.492 338.52 21.516 338.547 21.535 338.574 cv
21.551 338.605 21.566 338.637 21.574 338.672 cv
21.582 338.707 21.586 338.746 21.594 338.789 cv
21.594 338.832 21.598 338.887 21.602 338.949 cv
21.598 339.035 21.598 339.105 21.598 339.16 cv
21.594 339.223 21.582 339.27 21.57 339.305 cv
21.551 339.344 21.531 339.371 21.508 339.387 cv
21.48 339.406 21.449 339.414 21.41 339.414 cv
21.359 339.414 21.289 339.398 21.203 339.367 cv
21.113 339.336 21.008 339.301 20.887 339.258 cv
20.762 339.223 20.613 339.187 20.438 339.152 cv
20.262 339.125 20.059 339.109 19.828 339.105 cv
19.398 339.109 19.031 339.195 18.727 339.367 cv
18.422 339.539 18.172 339.773 17.977 340.066 cv
17.781 340.359 17.637 340.699 17.547 341.082 cv
17.449 341.473 17.395 341.875 17.387 342.293 cv
17.504 342.227 17.641 342.16 17.789 342.09 cv
17.938 342.023 18.098 341.961 18.273 341.902 cv
18.449 341.852 18.637 341.805 18.832 341.77 cv
19.027 341.738 19.238 341.723 19.465 341.719 cv
19.941 341.723 20.344 341.789 20.676 341.914 cv
21.004 342.047 21.27 342.227 21.477 342.457 cv
21.676 342.687 21.82 342.957 21.91 343.27 cv
21.996 343.582 22.043 343.922 22.043 344.289 cv
cp
20.848 344.398 mo
20.848 344.137 20.82 343.895 20.77 343.676 cv
20.715 343.461 20.625 343.277 20.504 343.121 cv
20.379 342.973 20.215 342.855 20.012 342.773 cv
19.801 342.691 19.547 342.648 19.25 342.648 cv
19.078 342.648 18.91 342.664 18.742 342.695 cv
18.57 342.727 18.406 342.77 18.25 342.816 cv
18.09 342.871 17.941 342.934 17.801 343.004 cv
17.656 343.078 17.523 343.152 17.406 343.23 cv
17.402 343.824 17.441 344.32 17.52 344.715 cv
17.594 345.113 17.703 345.43 17.848 345.668 cv
17.992 345.91 18.172 346.082 18.387 346.184 cv
18.602 346.289 18.852 346.34 19.141 346.336 cv
19.43 346.34 19.684 346.285 19.898 346.172 cv
20.113 346.066 20.289 345.918 20.434 345.73 cv
20.574 345.547 20.68 345.34 20.746 345.109 cv
20.813 344.879 20.848 344.645 20.848 344.398 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.469 301.961 mo
22.567 301.961 li
22.567 319.051 li
15.469 319.051 li
cp
0 0 0 0 cmyk
ef
21.945 306.977 mo
21.941 307.062 21.938 307.137 21.934 307.199 cv
21.926 307.27 21.918 307.332 21.906 307.391 cv
21.895 307.457 21.879 307.516 21.859 307.57 cv
21.836 307.629 21.813 307.691 21.789 307.75 cv
18.594 315.113 li
18.566 315.172 18.539 315.215 18.508 315.246 cv
18.473 315.281 18.43 315.309 18.375 315.328 cv
18.32 315.348 18.25 315.359 18.172 315.371 cv
18.086 315.375 17.988 315.379 17.871 315.383 cv
17.715 315.379 17.594 315.371 17.508 315.359 cv
17.422 315.344 17.359 315.328 17.32 315.297 cv
17.281 315.27 17.262 315.23 17.27 315.187 cv
17.27 315.145 17.285 315.094 17.316 315.031 cv
20.676 307.504 li
16.418 307.504 li
16.332 307.508 16.266 307.461 16.223 307.367 cv
16.18 307.277 16.16 307.148 16.16 306.984 cv
16.16 306.898 16.164 306.824 16.176 306.758 cv
16.188 306.695 16.203 306.641 16.227 306.598 cv
16.246 306.555 16.273 306.523 16.309 306.5 cv
16.34 306.48 16.379 306.469 16.418 306.469 cv
21.59 306.469 li
21.648 306.469 21.703 306.477 21.754 306.492 cv
21.801 306.508 21.836 306.535 21.863 306.574 cv
21.887 306.613 21.906 306.668 21.922 306.73 cv
21.934 306.797 21.941 306.879 21.945 306.977 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.469 270.148 mo
22.567 270.148 li
22.567 287.238 li
15.469 287.238 li
cp
0 0 0 0 cmyk
ef
22.031 281.258 mo
22.031 281.648 21.961 281.988 21.824 282.285 cv
21.688 282.586 21.488 282.84 21.23 283.047 cv
20.969 283.254 20.652 283.41 20.273 283.512 cv
19.891 283.617 19.453 283.668 18.969 283.668 cv
18.508 283.668 18.098 283.621 17.738 283.527 cv
17.375 283.434 17.07 283.293 16.82 283.102 cv
16.566 282.914 16.375 282.684 16.242 282.406 cv
16.109 282.133 16.043 281.816 16.043 281.465 cv
16.043 281.187 16.086 280.934 16.18 280.699 cv
16.266 280.469 16.398 280.254 16.574 280.051 cv
16.742 279.855 16.953 279.668 17.211 279.496 cv
17.461 279.324 17.746 279.164 18.063 279.008 cv
17.785 278.867 17.543 278.715 17.336 278.559 cv
17.121 278.402 16.941 278.23 16.797 278.043 cv
16.648 277.859 16.539 277.664 16.465 277.449 cv
16.387 277.242 16.348 277.012 16.352 276.762 cv
16.348 276.453 16.402 276.16 16.52 275.887 cv
16.629 275.613 16.801 275.379 17.027 275.176 cv
17.254 274.977 17.539 274.816 17.891 274.699 cv
18.238 274.586 18.648 274.527 19.121 274.523 cv
19.566 274.527 19.953 274.582 20.281 274.684 cv
20.605 274.793 20.879 274.937 21.094 275.125 cv
21.305 275.312 21.461 275.531 21.563 275.781 cv
21.664 276.031 21.715 276.301 21.715 276.59 cv
21.715 276.824 21.676 277.051 21.602 277.266 cv
21.523 277.48 21.414 277.684 21.27 277.875 cv
21.121 278.066 20.941 278.246 20.73 278.414 cv
20.516 278.582 20.27 278.738 20 278.883 cv
20.32 279.047 20.609 279.211 20.867 279.379 cv
21.117 279.551 21.332 279.734 21.508 279.926 cv
21.676 280.121 21.805 280.328 21.898 280.543 cv
21.984 280.762 22.031 281 22.031 281.258 cv
cp
20.547 276.699 mo
20.543 276.512 20.508 276.336 20.445 276.18 cv
20.375 276.023 20.281 275.891 20.156 275.781 cv
20.027 275.672 19.867 275.59 19.68 275.527 cv
19.488 275.473 19.273 275.441 19.031 275.441 cv
18.535 275.441 18.16 275.555 17.906 275.781 cv
17.652 276.008 17.523 276.316 17.527 276.699 cv
17.523 276.883 17.555 277.047 17.617 277.199 cv
17.676 277.352 17.773 277.496 17.906 277.633 cv
18.039 277.773 18.203 277.91 18.402 278.035 cv
18.602 278.168 18.84 278.305 19.113 278.445 cv
19.574 278.211 19.926 277.945 20.176 277.656 cv
20.418 277.367 20.543 277.051 20.547 276.699 cv
cp
20.836 281.383 mo
20.836 281.172 20.797 280.98 20.719 280.809 cv
20.641 280.637 20.52 280.477 20.363 280.328 cv
20.203 280.18 20.008 280.039 19.773 279.898 cv
19.535 279.762 19.262 279.613 18.957 279.461 cv
18.664 279.602 18.41 279.746 18.195 279.887 cv
17.977 280.031 17.801 280.176 17.66 280.324 cv
17.52 280.477 17.414 280.637 17.344 280.805 cv
17.273 280.973 17.238 281.156 17.238 281.355 cv
17.238 281.801 17.391 282.145 17.695 282.387 cv
18 282.633 18.453 282.754 19.059 282.75 cv
19.641 282.754 20.082 282.633 20.387 282.383 cv
20.684 282.141 20.836 281.805 20.836 281.383 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
15.469 238.34 mo
22.567 238.34 li
22.567 255.43 li
15.469 255.43 li
cp
0 0 0 0 cmyk
ef
21.883 246.926 mo
21.879 247.312 21.855 247.699 21.813 248.09 cv
21.766 248.484 21.688 248.863 21.582 249.227 cv
21.469 249.59 21.324 249.93 21.141 250.246 cv
20.953 250.566 20.719 250.848 20.441 251.082 cv
20.156 251.324 19.82 251.508 19.438 251.641 cv
19.047 251.773 18.602 251.84 18.094 251.84 cv
17.895 251.84 17.703 251.824 17.52 251.801 cv
17.332 251.773 17.164 251.746 17.02 251.711 cv
16.867 251.676 16.742 251.637 16.645 251.594 cv
16.543 251.555 16.469 251.516 16.426 251.473 cv
16.379 251.434 16.348 251.379 16.328 251.305 cv
16.305 251.234 16.293 251.137 16.297 251.02 cv
16.293 250.918 16.297 250.84 16.305 250.781 cv
16.309 250.723 16.32 250.676 16.336 250.645 cv
16.352 250.613 16.371 250.594 16.395 250.578 cv
16.418 250.57 16.449 250.562 16.488 250.559 cv
16.535 250.562 16.605 250.578 16.699 250.609 cv
16.789 250.645 16.902 250.684 17.047 250.723 cv
17.184 250.766 17.348 250.805 17.535 250.836 cv
17.719 250.875 17.93 250.891 18.168 250.887 cv
18.609 250.891 18.988 250.805 19.309 250.633 cv
19.621 250.461 19.883 250.234 20.086 249.945 cv
20.289 249.66 20.438 249.324 20.539 248.941 cv
20.637 248.562 20.691 248.164 20.703 247.742 cv
20.457 247.887 20.168 248.012 19.832 248.117 cv
19.492 248.23 19.105 248.285 18.668 248.281 cv
18.176 248.285 17.762 248.219 17.426 248.082 cv
17.09 247.949 16.816 247.766 16.613 247.531 cv
16.406 247.301 16.262 247.023 16.176 246.699 cv
16.086 246.383 16.043 246.031 16.043 245.652 cv
16.043 245.262 16.098 244.891 16.215 244.531 cv
16.324 244.18 16.504 243.867 16.75 243.598 cv
16.988 243.328 17.297 243.113 17.676 242.953 cv
18.047 242.793 18.496 242.711 19.02 242.711 cv
19.387 242.711 19.711 242.758 20 242.852 cv
20.281 242.945 20.531 243.082 20.746 243.258 cv
20.953 243.434 21.133 243.645 21.281 243.895 cv
21.426 244.145 21.543 244.426 21.633 244.738 cv
21.719 245.055 21.781 245.398 21.824 245.766 cv
21.859 246.137 21.879 246.523 21.883 246.926 cv
cp
20.684 246.797 mo
20.684 246.215 20.645 245.723 20.566 245.32 cv
20.488 244.922 20.371 244.598 20.223 244.348 cv
20.07 244.102 19.887 243.922 19.668 243.812 cv
19.445 243.703 19.191 243.648 18.91 243.648 cv
18.605 243.648 18.352 243.703 18.145 243.812 cv
17.934 243.922 17.762 244.066 17.629 244.242 cv
17.492 244.426 17.391 244.629 17.328 244.855 cv
17.262 245.086 17.23 245.324 17.234 245.562 cv
17.23 245.836 17.262 246.082 17.32 246.301 cv
17.375 246.527 17.465 246.715 17.598 246.871 cv
17.723 247.027 17.891 247.148 18.098 247.234 cv
18.301 247.32 18.555 247.363 18.859 247.359 cv
19.199 247.363 19.531 247.312 19.855 247.207 cv
20.172 247.105 20.449 246.969 20.684 246.797 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
8.371 206.531 mo
22.559 206.531 li
22.559 223.621 li
8.371 223.621 li
cp
0 0 0 0 cmyk
ef
14.734 219.426 mo
14.73 219.516 14.723 219.586 14.711 219.645 cv
14.695 219.707 14.676 219.758 14.656 219.789 cv
14.633 219.828 14.609 219.852 14.578 219.867 cv
14.547 219.883 14.516 219.891 14.488 219.891 cv
9.852 219.891 li
9.816 219.891 9.789 219.883 9.762 219.867 cv
9.734 219.852 9.707 219.828 9.684 219.789 cv
9.656 219.758 9.637 219.707 9.625 219.645 cv
9.609 219.586 9.602 219.516 9.605 219.426 cv
9.602 219.348 9.609 219.273 9.625 219.211 cv
9.637 219.152 9.652 219.105 9.676 219.066 cv
9.691 219.031 9.719 219 9.75 218.977 cv
9.781 218.957 9.813 218.949 9.852 218.945 cv
11.703 218.945 li
11.703 212.199 li
9.988 213.219 li
9.898 213.27 9.828 213.297 9.781 213.305 cv
9.727 213.312 9.684 213.305 9.652 213.273 cv
9.617 213.246 9.598 213.195 9.586 213.125 cv
9.574 213.059 9.566 212.973 9.57 212.863 cv
9.566 212.789 9.57 212.723 9.582 212.664 cv
9.586 212.613 9.598 212.566 9.613 212.527 cv
9.625 212.492 9.645 212.461 9.668 212.434 cv
9.691 212.406 9.723 212.379 9.77 212.352 cv
11.813 211.039 li
11.828 211.027 11.848 211.016 11.879 211.008 cv
11.902 211 11.938 210.992 11.984 210.98 cv
12.023 210.973 12.074 210.965 12.129 210.961 cv
12.184 210.961 12.25 210.961 12.336 210.957 cv
12.441 210.961 12.535 210.965 12.609 210.973 cv
12.68 210.98 12.734 210.996 12.781 211.012 cv
12.82 211.031 12.848 211.051 12.863 211.074 cv
12.871 211.102 12.879 211.125 12.883 211.148 cv
12.883 218.945 li
14.488 218.945 li
14.523 218.949 14.559 218.957 14.59 218.977 cv
14.621 219 14.645 219.031 14.668 219.066 cv
14.684 219.105 14.699 219.152 14.715 219.211 cv
14.723 219.273 14.73 219.348 14.734 219.426 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
22.09 215.434 mo
22.086 216.117 22.035 216.738 21.93 217.301 cv
21.82 217.863 21.641 218.348 21.395 218.75 cv
21.141 219.156 20.813 219.469 20.414 219.687 cv
20.008 219.91 19.516 220.02 18.93 220.02 cv
18.371 220.02 17.898 219.922 17.52 219.723 cv
17.137 219.527 16.832 219.234 16.598 218.848 cv
16.363 218.461 16.195 217.988 16.102 217.422 cv
16 216.859 15.953 216.211 15.953 215.477 cv
15.953 214.805 16.008 214.184 16.117 213.617 cv
16.227 213.055 16.402 212.57 16.652 212.164 cv
16.895 211.762 17.219 211.449 17.625 211.223 cv
18.023 211.004 18.52 210.891 19.109 210.891 cv
19.668 210.891 20.141 210.992 20.523 211.187 cv
20.906 211.391 21.211 211.684 21.445 212.066 cv
21.676 212.457 21.844 212.93 21.941 213.492 cv
22.039 214.055 22.086 214.703 22.09 215.434 cv
cp
20.883 215.516 mo
20.879 215.074 20.863 214.676 20.836 214.324 cv
20.801 213.973 20.754 213.664 20.695 213.395 cv
20.629 213.125 20.551 212.895 20.453 212.699 cv
20.355 212.508 20.238 212.348 20.102 212.219 cv
19.961 212.094 19.801 212 19.629 211.941 cv
19.449 211.887 19.254 211.859 19.039 211.855 cv
18.648 211.859 18.332 211.949 18.094 212.133 cv
17.848 212.316 17.656 212.57 17.52 212.887 cv
17.379 213.207 17.285 213.578 17.234 214.008 cv
17.184 214.437 17.16 214.902 17.16 215.395 cv
17.16 216.059 17.191 216.621 17.262 217.082 cv
17.328 217.551 17.438 217.93 17.59 218.219 cv
17.734 218.516 17.926 218.727 18.156 218.855 cv
18.387 218.992 18.668 219.059 19 219.055 cv
19.254 219.059 19.477 219.02 19.672 218.934 cv
19.863 218.855 20.031 218.734 20.172 218.578 cv
20.313 218.426 20.426 218.242 20.52 218.027 cv
20.605 217.812 20.68 217.574 20.738 217.312 cv
20.789 217.055 20.828 216.773 20.852 216.469 cv
20.871 216.164 20.879 215.848 20.883 215.516 cv
cp
f
8.371 174.719 mo
22.559 174.719 li
22.559 191.809 li
8.371 191.809 li
cp
0 0 0 0 cmyk
ef
14.734 187.625 mo
14.73 187.715 14.723 187.785 14.711 187.844 cv
14.695 187.906 14.676 187.957 14.656 187.988 cv
14.633 188.027 14.609 188.051 14.578 188.066 cv
14.547 188.082 14.516 188.09 14.488 188.09 cv
9.852 188.09 li
9.816 188.09 9.789 188.082 9.762 188.066 cv
9.734 188.051 9.707 188.027 9.684 187.988 cv
9.656 187.957 9.637 187.906 9.625 187.844 cv
9.609 187.785 9.602 187.715 9.605 187.625 cv
9.602 187.547 9.609 187.473 9.625 187.41 cv
9.637 187.352 9.652 187.305 9.676 187.266 cv
9.691 187.23 9.719 187.199 9.75 187.176 cv
9.781 187.156 9.813 187.148 9.852 187.145 cv
11.703 187.145 li
11.703 180.398 li
9.988 181.418 li
9.898 181.469 9.828 181.496 9.781 181.504 cv
9.727 181.512 9.684 181.504 9.652 181.473 cv
9.617 181.445 9.598 181.395 9.586 181.324 cv
9.574 181.258 9.566 181.172 9.57 181.062 cv
9.566 180.988 9.57 180.922 9.582 180.863 cv
9.586 180.812 9.598 180.766 9.613 180.727 cv
9.625 180.691 9.645 180.66 9.668 180.633 cv
9.691 180.605 9.723 180.578 9.77 180.551 cv
11.813 179.238 li
11.828 179.227 11.848 179.215 11.879 179.207 cv
11.902 179.199 11.938 179.191 11.984 179.18 cv
12.023 179.172 12.074 179.164 12.129 179.16 cv
12.184 179.16 12.25 179.16 12.336 179.156 cv
12.441 179.16 12.535 179.164 12.609 179.172 cv
12.68 179.18 12.734 179.195 12.781 179.211 cv
12.82 179.23 12.848 179.25 12.863 179.273 cv
12.871 179.301 12.879 179.324 12.883 179.348 cv
12.883 187.145 li
14.488 187.145 li
14.523 187.148 14.559 187.156 14.59 187.176 cv
14.621 187.199 14.645 187.23 14.668 187.266 cv
14.684 187.305 14.699 187.352 14.715 187.41 cv
14.723 187.473 14.73 187.547 14.734 187.625 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.816 187.625 mo
21.813 187.715 21.805 187.785 21.793 187.844 cv
21.777 187.906 21.758 187.957 21.738 187.988 cv
21.715 188.027 21.691 188.051 21.66 188.066 cv
21.629 188.082 21.598 188.09 21.57 188.09 cv
16.934 188.09 li
16.898 188.09 16.871 188.082 16.844 188.066 cv
16.816 188.051 16.789 188.027 16.766 187.988 cv
16.738 187.957 16.719 187.906 16.707 187.844 cv
16.691 187.785 16.684 187.715 16.688 187.625 cv
16.684 187.547 16.691 187.473 16.707 187.41 cv
16.719 187.352 16.734 187.305 16.758 187.266 cv
16.773 187.23 16.801 187.199 16.832 187.176 cv
16.863 187.156 16.895 187.148 16.934 187.145 cv
18.785 187.145 li
18.785 180.398 li
17.07 181.418 li
16.98 181.469 16.91 181.496 16.863 181.504 cv
16.809 181.512 16.766 181.504 16.734 181.473 cv
16.699 181.445 16.68 181.395 16.668 181.324 cv
16.656 181.258 16.648 181.172 16.652 181.062 cv
16.648 180.988 16.652 180.922 16.664 180.863 cv
16.668 180.812 16.68 180.766 16.695 180.727 cv
16.707 180.691 16.727 180.66 16.75 180.633 cv
16.773 180.605 16.805 180.578 16.852 180.551 cv
18.895 179.238 li
18.91 179.227 18.93 179.215 18.961 179.207 cv
18.984 179.199 19.02 179.191 19.066 179.18 cv
19.105 179.172 19.156 179.164 19.211 179.16 cv
19.266 179.16 19.332 179.16 19.418 179.156 cv
19.523 179.16 19.617 179.164 19.691 179.172 cv
19.762 179.18 19.816 179.195 19.863 179.211 cv
19.902 179.23 19.93 179.25 19.945 179.273 cv
19.953 179.301 19.961 179.324 19.965 179.348 cv
19.965 187.145 li
21.57 187.145 li
21.605 187.148 21.641 187.156 21.672 187.176 cv
21.703 187.199 21.727 187.23 21.75 187.266 cv
21.766 187.305 21.781 187.352 21.797 187.41 cv
21.805 187.473 21.813 187.547 21.816 187.625 cv
cp
f
8.371 142.91 mo
22.559 142.91 li
22.559 160 li
8.371 160 li
cp
0 0 0 0 cmyk
ef
14.734 155.797 mo
14.73 155.887 14.723 155.957 14.711 156.016 cv
14.695 156.078 14.676 156.129 14.656 156.16 cv
14.633 156.199 14.609 156.223 14.578 156.238 cv
14.547 156.254 14.516 156.262 14.488 156.262 cv
9.852 156.262 li
9.816 156.262 9.789 156.254 9.762 156.238 cv
9.734 156.223 9.707 156.199 9.684 156.16 cv
9.656 156.129 9.637 156.078 9.625 156.016 cv
9.609 155.957 9.602 155.887 9.605 155.797 cv
9.602 155.719 9.609 155.645 9.625 155.582 cv
9.637 155.523 9.652 155.477 9.676 155.437 cv
9.691 155.402 9.719 155.371 9.75 155.348 cv
9.781 155.328 9.813 155.32 9.852 155.316 cv
11.703 155.316 li
11.703 148.57 li
9.988 149.59 li
9.898 149.641 9.828 149.668 9.781 149.676 cv
9.727 149.684 9.684 149.676 9.652 149.645 cv
9.617 149.617 9.598 149.566 9.586 149.496 cv
9.574 149.43 9.566 149.344 9.57 149.234 cv
9.566 149.16 9.57 149.094 9.582 149.035 cv
9.586 148.984 9.598 148.937 9.613 148.898 cv
9.625 148.863 9.645 148.832 9.668 148.805 cv
9.691 148.777 9.723 148.75 9.77 148.723 cv
11.813 147.41 li
11.828 147.398 11.848 147.387 11.879 147.379 cv
11.902 147.371 11.938 147.363 11.984 147.352 cv
12.023 147.344 12.074 147.336 12.129 147.332 cv
12.184 147.332 12.25 147.332 12.336 147.328 cv
12.441 147.332 12.535 147.336 12.609 147.344 cv
12.68 147.352 12.734 147.367 12.781 147.383 cv
12.82 147.402 12.848 147.422 12.863 147.445 cv
12.871 147.473 12.879 147.496 12.883 147.52 cv
12.883 155.316 li
14.488 155.316 li
14.523 155.32 14.559 155.328 14.59 155.348 cv
14.621 155.371 14.645 155.402 14.668 155.437 cv
14.684 155.477 14.699 155.523 14.715 155.582 cv
14.723 155.645 14.73 155.719 14.734 155.797 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.797 155.754 mo
21.793 155.84 21.789 155.914 21.777 155.977 cv
21.766 156.043 21.75 156.098 21.73 156.137 cv
21.707 156.184 21.68 156.215 21.648 156.23 cv
21.613 156.254 21.574 156.262 21.535 156.262 cv
16.633 156.262 li
16.57 156.262 16.512 156.254 16.465 156.238 cv
16.414 156.223 16.375 156.199 16.34 156.16 cv
16.305 156.129 16.277 156.074 16.266 156.004 cv
16.246 155.934 16.238 155.848 16.242 155.746 cv
16.238 155.656 16.242 155.578 16.25 155.508 cv
16.254 155.441 16.27 155.383 16.297 155.328 cv
16.32 155.277 16.352 155.223 16.387 155.168 cv
16.422 155.117 16.465 155.062 16.523 155 cv
18.297 153.176 li
18.707 152.758 19.035 152.383 19.285 152.047 cv
19.531 151.719 19.723 151.414 19.855 151.137 cv
19.988 150.863 20.074 150.613 20.121 150.387 cv
20.16 150.164 20.184 149.953 20.184 149.758 cv
20.184 149.562 20.148 149.379 20.082 149.199 cv
20.016 149.027 19.922 148.871 19.797 148.734 cv
19.672 148.605 19.516 148.5 19.328 148.418 cv
19.141 148.344 18.922 148.305 18.676 148.301 cv
18.387 148.305 18.129 148.344 17.902 148.418 cv
17.672 148.5 17.473 148.586 17.301 148.672 cv
17.129 148.766 16.984 148.848 16.867 148.926 cv
16.75 149.004 16.664 149.043 16.613 149.043 cv
16.578 149.043 16.547 149.035 16.523 149.016 cv
16.492 149 16.473 148.969 16.457 148.926 cv
16.441 148.887 16.426 148.832 16.418 148.762 cv
16.406 148.695 16.402 148.613 16.406 148.516 cv
16.402 148.449 16.406 148.391 16.414 148.34 cv
16.418 148.289 16.426 148.246 16.438 148.207 cv
16.445 148.172 16.461 148.137 16.48 148.105 cv
16.5 148.074 16.535 148.035 16.594 147.984 cv
16.645 147.937 16.738 147.871 16.875 147.789 cv
17.008 147.707 17.18 147.629 17.383 147.547 cv
17.586 147.469 17.809 147.398 18.055 147.344 cv
18.297 147.289 18.555 147.262 18.828 147.262 cv
19.254 147.262 19.629 147.324 19.953 147.445 cv
20.273 147.566 20.539 147.73 20.754 147.941 cv
20.965 148.152 21.125 148.398 21.23 148.672 cv
21.336 148.953 21.391 149.25 21.391 149.562 cv
21.391 149.852 21.363 150.133 21.313 150.41 cv
21.262 150.695 21.156 151 20.996 151.324 cv
20.832 151.652 20.598 152.016 20.293 152.414 cv
19.984 152.816 19.578 153.277 19.074 153.793 cv
17.668 155.262 li
21.527 155.262 li
21.559 155.266 21.594 155.277 21.633 155.293 cv
21.664 155.316 21.695 155.348 21.723 155.387 cv
21.746 155.43 21.766 155.48 21.777 155.539 cv
21.789 155.605 21.793 155.676 21.797 155.754 cv
cp
f
8.371 111.109 mo
22.559 111.109 li
22.559 128.199 li
8.371 128.199 li
cp
0 0 0 0 cmyk
ef
14.746 123.992 mo
14.742 124.082 14.734 124.156 14.723 124.215 cv
14.707 124.277 14.688 124.328 14.668 124.359 cv
14.645 124.398 14.621 124.422 14.59 124.437 cv
14.559 124.453 14.527 124.461 14.496 124.461 cv
9.855 124.461 li
9.824 124.461 9.793 124.453 9.766 124.437 cv
9.738 124.422 9.711 124.398 9.688 124.359 cv
9.656 124.328 9.637 124.277 9.629 124.215 cv
9.613 124.156 9.609 124.082 9.609 123.992 cv
9.609 123.914 9.613 123.844 9.629 123.781 cv
9.637 123.723 9.656 123.676 9.68 123.633 cv
9.699 123.598 9.723 123.566 9.754 123.543 cv
9.781 123.523 9.816 123.512 9.855 123.512 cv
11.711 123.512 li
11.711 116.758 li
9.992 117.777 li
9.902 117.828 9.832 117.855 9.781 117.863 cv
9.727 117.871 9.688 117.863 9.656 117.832 cv
9.625 117.805 9.602 117.754 9.59 117.684 cv
9.578 117.617 9.574 117.531 9.574 117.422 cv
9.574 117.348 9.574 117.281 9.582 117.223 cv
9.586 117.172 9.598 117.125 9.613 117.086 cv
9.625 117.051 9.645 117.02 9.672 116.992 cv
9.695 116.965 9.73 116.937 9.773 116.906 cv
11.82 115.594 li
11.836 115.586 11.859 115.574 11.887 115.562 cv
11.914 115.555 11.949 115.547 11.992 115.535 cv
12.031 115.527 12.078 115.52 12.137 115.516 cv
12.188 115.516 12.258 115.516 12.34 115.512 cv
12.449 115.516 12.539 115.52 12.617 115.527 cv
12.688 115.539 12.746 115.551 12.785 115.566 cv
12.824 115.582 12.852 115.605 12.867 115.629 cv
12.883 115.656 12.891 115.68 12.891 115.707 cv
12.891 123.512 li
14.496 123.512 li
14.531 123.512 14.563 123.523 14.598 123.543 cv
14.629 123.566 14.656 123.598 14.68 123.633 cv
14.695 123.676 14.711 123.723 14.727 123.781 cv
14.734 123.844 14.742 123.914 14.746 123.992 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.738 121.922 mo
21.734 122.332 21.664 122.699 21.523 123.023 cv
21.379 123.352 21.176 123.629 20.914 123.863 cv
20.645 124.098 20.316 124.277 19.93 124.402 cv
19.539 124.527 19.102 124.59 18.613 124.59 cv
18.316 124.59 18.035 124.562 17.777 124.516 cv
17.516 124.469 17.285 124.418 17.086 124.348 cv
16.883 124.285 16.719 124.215 16.586 124.145 cv
16.453 124.074 16.367 124.023 16.336 123.988 cv
16.297 123.957 16.273 123.926 16.258 123.891 cv
16.238 123.863 16.219 123.824 16.207 123.777 cv
16.191 123.734 16.184 123.68 16.176 123.609 cv
16.168 123.547 16.164 123.465 16.168 123.363 cv
16.164 123.199 16.18 123.082 16.215 123.02 cv
16.246 122.957 16.293 122.926 16.359 122.922 cv
16.398 122.926 16.484 122.961 16.609 123.031 cv
16.734 123.105 16.891 123.187 17.086 123.27 cv
17.277 123.359 17.508 123.437 17.77 123.508 cv
18.027 123.582 18.316 123.617 18.641 123.617 cv
18.949 123.617 19.223 123.578 19.457 123.5 cv
19.691 123.422 19.887 123.312 20.047 123.172 cv
20.207 123.031 20.328 122.863 20.406 122.668 cv
20.484 122.473 20.523 122.262 20.527 122.031 cv
20.523 121.781 20.473 121.555 20.375 121.352 cv
20.27 121.152 20.121 120.977 19.93 120.828 cv
19.73 120.684 19.488 120.574 19.207 120.492 cv
18.918 120.418 18.594 120.379 18.23 120.375 cv
17.359 120.375 li
17.32 120.379 17.281 120.371 17.246 120.352 cv
17.211 120.34 17.18 120.312 17.156 120.273 cv
17.125 120.238 17.105 120.191 17.09 120.129 cv
17.074 120.074 17.066 119.996 17.066 119.895 cv
17.066 119.812 17.07 119.738 17.086 119.68 cv
17.098 119.625 17.117 119.582 17.145 119.543 cv
17.168 119.512 17.199 119.484 17.23 119.465 cv
17.262 119.453 17.297 119.445 17.344 119.441 cv
18.117 119.441 li
18.414 119.445 18.688 119.406 18.93 119.324 cv
19.172 119.25 19.375 119.137 19.543 118.988 cv
19.707 118.844 19.836 118.672 19.926 118.465 cv
20.016 118.262 20.059 118.031 20.063 117.777 cv
20.059 117.598 20.031 117.422 19.973 117.254 cv
19.91 117.09 19.82 116.945 19.703 116.82 cv
19.586 116.695 19.434 116.598 19.246 116.527 cv
19.059 116.457 18.844 116.422 18.605 116.418 cv
18.336 116.422 18.094 116.461 17.875 116.539 cv
17.652 116.621 17.453 116.707 17.281 116.797 cv
17.105 116.891 16.961 116.977 16.848 117.055 cv
16.73 117.137 16.652 117.18 16.609 117.176 cv
16.574 117.18 16.543 117.172 16.52 117.16 cv
16.492 117.148 16.473 117.125 16.461 117.09 cv
16.441 117.059 16.43 117.012 16.426 116.945 cv
16.414 116.887 16.41 116.805 16.414 116.699 cv
16.41 116.633 16.414 116.574 16.422 116.52 cv
16.426 116.473 16.434 116.426 16.449 116.383 cv
16.461 116.348 16.477 116.312 16.496 116.277 cv
16.512 116.246 16.543 116.207 16.59 116.164 cv
16.633 116.121 16.723 116.059 16.855 115.973 cv
16.988 115.891 17.148 115.809 17.344 115.73 cv
17.535 115.652 17.762 115.586 18.016 115.527 cv
18.27 115.477 18.543 115.449 18.84 115.445 cv
19.25 115.449 19.609 115.504 19.922 115.605 cv
20.23 115.715 20.492 115.863 20.703 116.051 cv
20.91 116.246 21.066 116.473 21.168 116.738 cv
21.27 117.008 21.32 117.305 21.324 117.629 cv
21.32 117.91 21.285 118.172 21.215 118.41 cv
21.141 118.652 21.031 118.863 20.891 119.047 cv
20.746 119.234 20.574 119.395 20.371 119.52 cv
20.164 119.652 19.926 119.742 19.656 119.793 cv
19.656 119.805 li
19.961 119.84 20.238 119.918 20.496 120.035 cv
20.746 120.16 20.965 120.312 21.152 120.492 cv
21.332 120.68 21.477 120.891 21.582 121.133 cv
21.684 121.379 21.734 121.645 21.738 121.922 cv
cp
f
8.371 79.301 mo
22.559 79.301 li
22.559 96.391 li
8.371 96.391 li
cp
0 0 0 0 cmyk
ef
14.734 92.176 mo
14.73 92.266 14.723 92.336 14.711 92.395 cv
14.695 92.457 14.676 92.508 14.656 92.539 cv
14.633 92.578 14.609 92.602 14.578 92.617 cv
14.547 92.633 14.516 92.641 14.488 92.641 cv
9.852 92.641 li
9.816 92.641 9.789 92.633 9.762 92.617 cv
9.734 92.602 9.707 92.578 9.684 92.539 cv
9.656 92.508 9.637 92.457 9.625 92.395 cv
9.609 92.336 9.602 92.266 9.605 92.176 cv
9.602 92.098 9.609 92.023 9.625 91.961 cv
9.637 91.902 9.652 91.855 9.676 91.816 cv
9.691 91.781 9.719 91.75 9.75 91.727 cv
9.781 91.707 9.813 91.699 9.852 91.695 cv
11.703 91.695 li
11.703 84.949 li
9.988 85.969 li
9.898 86.02 9.828 86.047 9.781 86.055 cv
9.727 86.062 9.684 86.055 9.652 86.023 cv
9.617 85.996 9.598 85.945 9.586 85.875 cv
9.574 85.809 9.566 85.723 9.57 85.613 cv
9.566 85.539 9.57 85.473 9.582 85.414 cv
9.586 85.363 9.598 85.316 9.613 85.277 cv
9.625 85.242 9.645 85.211 9.668 85.184 cv
9.691 85.156 9.723 85.129 9.77 85.102 cv
11.813 83.789 li
11.828 83.777 11.848 83.766 11.879 83.758 cv
11.902 83.75 11.938 83.742 11.984 83.73 cv
12.023 83.723 12.074 83.715 12.129 83.711 cv
12.184 83.711 12.25 83.711 12.336 83.707 cv
12.441 83.711 12.535 83.715 12.609 83.723 cv
12.68 83.73 12.734 83.746 12.781 83.762 cv
12.82 83.781 12.848 83.801 12.863 83.824 cv
12.871 83.852 12.879 83.875 12.883 83.898 cv
12.883 91.695 li
14.488 91.695 li
14.523 91.699 14.559 91.707 14.59 91.727 cv
14.621 91.75 14.645 91.781 14.668 91.816 cv
14.684 91.855 14.699 91.902 14.715 91.961 cv
14.723 92.023 14.73 92.098 14.734 92.176 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
22.172 90.117 mo
22.168 90.27 22.145 90.391 22.102 90.477 cv
22.055 90.566 21.992 90.609 21.91 90.605 cv
20.91 90.605 li
20.91 92.469 li
20.91 92.508 20.898 92.539 20.883 92.562 cv
20.859 92.59 20.828 92.609 20.785 92.629 cv
20.734 92.645 20.672 92.656 20.602 92.668 cv
20.523 92.676 20.43 92.68 20.313 92.684 cv
20.195 92.68 20.098 92.676 20.027 92.668 cv
19.949 92.656 19.891 92.645 19.848 92.629 cv
19.801 92.609 19.77 92.59 19.754 92.562 cv
19.734 92.539 19.727 92.508 19.73 92.469 cv
19.73 90.605 li
16.102 90.605 li
16.043 90.609 16 90.602 15.965 90.586 cv
15.93 90.574 15.895 90.547 15.867 90.508 cv
15.836 90.473 15.816 90.422 15.805 90.352 cv
15.793 90.285 15.789 90.195 15.789 90.082 cv
15.789 90 15.789 89.922 15.797 89.852 cv
15.797 89.781 15.809 89.719 15.824 89.664 cv
15.836 89.609 15.852 89.555 15.879 89.5 cv
15.898 89.445 15.926 89.391 15.961 89.328 cv
19.121 83.941 li
19.141 83.906 19.176 83.875 19.223 83.848 cv
19.266 83.82 19.32 83.797 19.395 83.777 cv
19.461 83.762 19.547 83.75 19.652 83.738 cv
19.754 83.734 19.875 83.73 20.016 83.727 cv
20.164 83.73 20.301 83.734 20.418 83.746 cv
20.531 83.758 20.621 83.773 20.695 83.789 cv
20.762 83.809 20.816 83.832 20.855 83.863 cv
20.891 83.895 20.91 83.93 20.91 83.969 cv
20.91 89.633 li
21.91 89.633 li
21.984 89.637 22.047 89.676 22.098 89.754 cv
22.145 89.836 22.168 89.957 22.172 90.117 cv
cp
19.73 84.766 mo
19.719 84.766 li
16.867 89.633 li
19.73 89.633 li
cp
f
8.371 47.488 mo
22.559 47.488 li
22.559 64.578 li
8.371 64.578 li
cp
0 0 0 0 cmyk
ef
14.734 60.355 mo
14.73 60.445 14.723 60.516 14.711 60.574 cv
14.695 60.637 14.676 60.687 14.656 60.719 cv
14.633 60.758 14.609 60.781 14.578 60.797 cv
14.547 60.812 14.516 60.82 14.488 60.82 cv
9.852 60.82 li
9.816 60.82 9.789 60.812 9.762 60.797 cv
9.734 60.781 9.707 60.758 9.684 60.719 cv
9.656 60.687 9.637 60.637 9.625 60.574 cv
9.609 60.516 9.602 60.445 9.605 60.355 cv
9.602 60.277 9.609 60.203 9.625 60.141 cv
9.637 60.082 9.652 60.035 9.676 59.996 cv
9.691 59.961 9.719 59.93 9.75 59.906 cv
9.781 59.887 9.813 59.879 9.852 59.875 cv
11.703 59.875 li
11.703 53.129 li
9.988 54.148 li
9.898 54.199 9.828 54.227 9.781 54.234 cv
9.727 54.242 9.684 54.234 9.652 54.203 cv
9.617 54.176 9.598 54.125 9.586 54.055 cv
9.574 53.988 9.566 53.902 9.57 53.793 cv
9.566 53.719 9.57 53.652 9.582 53.594 cv
9.586 53.543 9.598 53.496 9.613 53.457 cv
9.625 53.422 9.645 53.391 9.668 53.363 cv
9.691 53.336 9.723 53.309 9.77 53.281 cv
11.813 51.969 li
11.828 51.957 11.848 51.945 11.879 51.937 cv
11.902 51.93 11.938 51.922 11.984 51.91 cv
12.023 51.902 12.074 51.895 12.129 51.891 cv
12.184 51.891 12.25 51.891 12.336 51.887 cv
12.441 51.891 12.535 51.895 12.609 51.902 cv
12.68 51.91 12.734 51.926 12.781 51.941 cv
12.82 51.961 12.848 51.98 12.863 52.004 cv
12.871 52.031 12.879 52.055 12.883 52.078 cv
12.883 59.875 li
14.488 59.875 li
14.523 59.879 14.559 59.887 14.59 59.906 cv
14.621 59.93 14.645 59.961 14.668 59.996 cv
14.684 60.035 14.699 60.082 14.715 60.141 cv
14.723 60.203 14.73 60.277 14.734 60.355 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.754 57.969 mo
21.754 58.445 21.672 58.867 21.512 59.238 cv
21.352 59.609 21.125 59.922 20.836 60.176 cv
20.539 60.43 20.191 60.625 19.789 60.754 cv
19.383 60.887 18.934 60.949 18.441 60.949 cv
18.164 60.949 17.902 60.93 17.66 60.891 cv
17.41 60.852 17.191 60.805 17.004 60.75 cv
16.809 60.695 16.652 60.641 16.527 60.582 cv
16.402 60.531 16.324 60.488 16.293 60.453 cv
16.258 60.422 16.234 60.391 16.223 60.363 cv
16.207 60.336 16.191 60.305 16.184 60.262 cv
16.168 60.227 16.16 60.176 16.16 60.113 cv
16.152 60.055 16.152 59.984 16.152 59.902 cv
16.152 59.828 16.156 59.758 16.164 59.695 cv
16.172 59.633 16.184 59.582 16.203 59.543 cv
16.219 59.504 16.238 59.477 16.266 59.457 cv
16.289 59.441 16.32 59.434 16.352 59.43 cv
16.398 59.434 16.469 59.461 16.563 59.516 cv
16.656 59.574 16.785 59.637 16.949 59.703 cv
17.113 59.77 17.313 59.832 17.555 59.891 cv
17.789 59.949 18.074 59.977 18.41 59.977 cv
18.711 59.977 18.992 59.941 19.25 59.867 cv
19.504 59.797 19.727 59.684 19.914 59.527 cv
20.098 59.375 20.242 59.18 20.348 58.941 cv
20.453 58.707 20.504 58.418 20.508 58.078 cv
20.504 57.797 20.461 57.547 20.371 57.328 cv
20.281 57.109 20.145 56.93 19.961 56.785 cv
19.773 56.645 19.539 56.539 19.258 56.465 cv
18.973 56.395 18.633 56.355 18.246 56.355 cv
17.961 56.355 17.723 56.371 17.523 56.398 cv
17.32 56.43 17.133 56.445 16.961 56.441 cv
16.832 56.445 16.738 56.414 16.688 56.352 cv
16.629 56.293 16.602 56.18 16.605 56.008 cv
16.605 52.395 li
16.602 52.246 16.637 52.137 16.711 52.059 cv
16.777 51.988 16.879 51.949 17.016 51.949 cv
20.945 51.949 li
20.98 51.949 21.016 51.961 21.051 51.98 cv
21.082 52.004 21.109 52.035 21.137 52.074 cv
21.156 52.117 21.172 52.168 21.188 52.23 cv
21.195 52.297 21.203 52.375 21.207 52.457 cv
21.203 52.625 21.18 52.75 21.141 52.84 cv
21.094 52.934 21.035 52.98 20.957 52.977 cv
17.785 52.977 li
17.785 55.465 li
17.938 55.445 18.094 55.434 18.258 55.426 cv
18.414 55.422 18.602 55.418 18.816 55.418 cv
19.301 55.418 19.727 55.48 20.094 55.602 cv
20.457 55.723 20.762 55.895 21.012 56.113 cv
21.254 56.34 21.441 56.605 21.566 56.918 cv
21.691 57.234 21.754 57.586 21.754 57.969 cv
cp
f
8.371 15.68 mo
22.559 15.68 li
22.559 32.77 li
8.371 32.77 li
cp
0 0 0 0 cmyk
ef
14.734 28.555 mo
14.73 28.645 14.723 28.715 14.711 28.773 cv
14.695 28.836 14.676 28.887 14.656 28.918 cv
14.633 28.957 14.609 28.98 14.578 28.996 cv
14.547 29.012 14.516 29.02 14.488 29.02 cv
9.852 29.02 li
9.816 29.02 9.789 29.012 9.762 28.996 cv
9.734 28.98 9.707 28.957 9.684 28.918 cv
9.656 28.887 9.637 28.836 9.625 28.773 cv
9.609 28.715 9.602 28.645 9.605 28.555 cv
9.602 28.477 9.609 28.402 9.625 28.34 cv
9.637 28.281 9.652 28.234 9.676 28.195 cv
9.691 28.16 9.719 28.129 9.75 28.105 cv
9.781 28.086 9.813 28.078 9.852 28.074 cv
11.703 28.074 li
11.703 21.328 li
9.988 22.348 li
9.898 22.398 9.828 22.426 9.781 22.434 cv
9.727 22.441 9.684 22.434 9.652 22.402 cv
9.617 22.375 9.598 22.324 9.586 22.254 cv
9.574 22.187 9.566 22.102 9.57 21.992 cv
9.566 21.918 9.57 21.852 9.582 21.793 cv
9.586 21.742 9.598 21.695 9.613 21.656 cv
9.625 21.621 9.645 21.59 9.668 21.562 cv
9.691 21.535 9.723 21.508 9.77 21.48 cv
11.813 20.168 li
11.828 20.156 11.848 20.145 11.879 20.137 cv
11.902 20.129 11.938 20.121 11.984 20.109 cv
12.023 20.102 12.074 20.094 12.129 20.09 cv
12.184 20.09 12.25 20.09 12.336 20.086 cv
12.441 20.09 12.535 20.094 12.609 20.102 cv
12.68 20.109 12.734 20.125 12.781 20.141 cv
12.82 20.16 12.848 20.18 12.863 20.203 cv
12.871 20.23 12.879 20.254 12.883 20.277 cv
12.883 28.074 li
14.488 28.074 li
14.523 28.078 14.559 28.086 14.59 28.105 cv
14.621 28.129 14.645 28.16 14.668 28.195 cv
14.684 28.234 14.699 28.281 14.715 28.34 cv
14.723 28.402 14.73 28.477 14.734 28.555 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
22.023 26.148 mo
22.023 26.539 21.961 26.918 21.844 27.277 cv
21.719 27.645 21.535 27.961 21.293 28.234 cv
21.043 28.512 20.73 28.734 20.355 28.898 cv
19.973 29.066 19.527 29.148 19.012 29.148 cv
18.641 29.148 18.313 29.105 18.031 29.012 cv
17.746 28.926 17.5 28.793 17.289 28.621 cv
17.078 28.453 16.902 28.246 16.766 28 cv
16.625 27.754 16.512 27.473 16.43 27.156 cv
16.344 26.844 16.285 26.5 16.25 26.121 cv
16.211 25.75 16.191 25.348 16.195 24.914 cv
16.191 24.535 16.211 24.152 16.254 23.762 cv
16.293 23.379 16.367 23.004 16.473 22.637 cv
16.578 22.277 16.723 21.937 16.902 21.621 cv
17.082 21.305 17.309 21.027 17.582 20.793 cv
17.855 20.559 18.18 20.371 18.559 20.23 cv
18.938 20.094 19.379 20.027 19.883 20.023 cv
20.051 20.027 20.223 20.035 20.395 20.055 cv
20.566 20.078 20.727 20.109 20.875 20.141 cv
21.023 20.18 21.145 20.215 21.246 20.254 cv
21.344 20.293 21.41 20.328 21.445 20.352 cv
21.473 20.379 21.496 20.406 21.516 20.434 cv
21.531 20.465 21.547 20.496 21.555 20.531 cv
21.563 20.566 21.566 20.605 21.574 20.648 cv
21.574 20.691 21.578 20.746 21.582 20.809 cv
21.578 20.895 21.578 20.965 21.578 21.02 cv
21.574 21.082 21.563 21.129 21.551 21.164 cv
21.531 21.203 21.512 21.23 21.488 21.246 cv
21.461 21.266 21.43 21.273 21.391 21.273 cv
21.34 21.273 21.27 21.258 21.184 21.227 cv
21.094 21.195 20.988 21.16 20.867 21.117 cv
20.742 21.082 20.594 21.047 20.418 21.012 cv
20.242 20.984 20.039 20.969 19.809 20.965 cv
19.379 20.969 19.012 21.055 18.707 21.227 cv
18.402 21.398 18.152 21.633 17.957 21.926 cv
17.762 22.219 17.617 22.559 17.527 22.941 cv
17.43 23.332 17.375 23.734 17.367 24.152 cv
17.484 24.086 17.621 24.02 17.77 23.949 cv
17.918 23.883 18.078 23.82 18.254 23.762 cv
18.43 23.711 18.617 23.664 18.813 23.629 cv
19.008 23.598 19.219 23.582 19.445 23.578 cv
19.922 23.582 20.324 23.648 20.656 23.773 cv
20.984 23.906 21.25 24.086 21.457 24.316 cv
21.656 24.547 21.801 24.816 21.891 25.129 cv
21.977 25.441 22.023 25.781 22.023 26.148 cv
cp
20.828 26.258 mo
20.828 25.996 20.801 25.754 20.75 25.535 cv
20.695 25.32 20.605 25.137 20.484 24.98 cv
20.359 24.832 20.195 24.715 19.992 24.633 cv
19.781 24.551 19.527 24.508 19.23 24.508 cv
19.059 24.508 18.891 24.523 18.723 24.555 cv
18.551 24.586 18.387 24.629 18.23 24.676 cv
18.07 24.73 17.922 24.793 17.781 24.863 cv
17.637 24.937 17.504 25.012 17.387 25.09 cv
17.383 25.684 17.422 26.18 17.5 26.574 cv
17.574 26.973 17.684 27.289 17.828 27.527 cv
17.973 27.77 18.152 27.941 18.367 28.043 cv
18.582 28.148 18.832 28.199 19.121 28.195 cv
19.41 28.199 19.664 28.145 19.879 28.031 cv
20.094 27.926 20.27 27.777 20.414 27.59 cv
20.555 27.406 20.66 27.199 20.727 26.969 cv
20.793 26.738 20.828 26.504 20.828 26.258 cv
cp
f
38.375 523.961 mo
38.371 524.051 38.363 524.121 38.352 524.18 cv
38.336 524.242 38.316 524.293 38.297 524.324 cv
38.273 524.363 38.25 524.387 38.219 524.402 cv
38.188 524.418 38.156 524.426 38.129 524.426 cv
33.492 524.426 li
33.457 524.426 33.43 524.418 33.402 524.402 cv
33.375 524.387 33.348 524.363 33.324 524.324 cv
33.297 524.293 33.277 524.242 33.266 524.18 cv
33.25 524.121 33.242 524.051 33.246 523.961 cv
33.242 523.883 33.25 523.809 33.266 523.746 cv
33.277 523.687 33.293 523.641 33.316 523.602 cv
33.332 523.566 33.359 523.535 33.391 523.512 cv
33.422 523.492 33.453 523.484 33.492 523.48 cv
35.344 523.48 li
35.344 516.734 li
33.629 517.754 li
33.539 517.805 33.469 517.832 33.422 517.84 cv
33.367 517.848 33.324 517.84 33.293 517.809 cv
33.258 517.781 33.238 517.73 33.227 517.66 cv
33.215 517.594 33.207 517.508 33.211 517.398 cv
33.207 517.324 33.211 517.258 33.223 517.199 cv
33.227 517.148 33.238 517.102 33.254 517.062 cv
33.266 517.027 33.285 516.996 33.309 516.969 cv
33.332 516.941 33.363 516.914 33.41 516.887 cv
35.453 515.574 li
35.469 515.562 35.488 515.551 35.52 515.543 cv
35.543 515.535 35.578 515.527 35.625 515.516 cv
35.664 515.508 35.715 515.5 35.77 515.496 cv
35.824 515.496 35.891 515.496 35.977 515.492 cv
36.082 515.496 36.176 515.5 36.25 515.508 cv
36.32 515.516 36.375 515.531 36.422 515.547 cv
36.461 515.566 36.488 515.586 36.504 515.609 cv
36.512 515.637 36.52 515.66 36.523 515.684 cv
36.523 523.48 li
38.129 523.48 li
38.164 523.484 38.199 523.492 38.23 523.512 cv
38.262 523.535 38.285 523.566 38.309 523.602 cv
38.324 523.641 38.34 523.687 38.355 523.746 cv
38.363 523.809 38.371 523.883 38.375 523.961 cv
cp
f
109.758 523.918 mo
109.754 524.004 109.75 524.078 109.738 524.141 cv
109.727 524.207 109.711 524.262 109.691 524.301 cv
109.668 524.348 109.641 524.379 109.609 524.395 cv
109.574 524.418 109.535 524.426 109.496 524.426 cv
104.594 524.426 li
104.531 524.426 104.473 524.418 104.426 524.402 cv
104.375 524.387 104.336 524.363 104.301 524.324 cv
104.266 524.293 104.238 524.238 104.227 524.168 cv
104.207 524.098 104.199 524.012 104.203 523.91 cv
104.199 523.82 104.203 523.742 104.211 523.672 cv
104.215 523.605 104.23 523.547 104.258 523.492 cv
104.281 523.441 104.313 523.387 104.348 523.332 cv
104.383 523.281 104.426 523.227 104.484 523.164 cv
106.258 521.34 li
106.668 520.922 106.996 520.547 107.246 520.211 cv
107.492 519.883 107.684 519.578 107.816 519.301 cv
107.949 519.027 108.035 518.777 108.082 518.551 cv
108.121 518.328 108.145 518.117 108.145 517.922 cv
108.145 517.727 108.109 517.543 108.043 517.363 cv
107.977 517.191 107.883 517.035 107.758 516.898 cv
107.633 516.77 107.477 516.664 107.289 516.582 cv
107.102 516.508 106.883 516.469 106.637 516.465 cv
106.348 516.469 106.09 516.508 105.863 516.582 cv
105.633 516.664 105.434 516.75 105.262 516.836 cv
105.09 516.93 104.945 517.012 104.828 517.09 cv
104.711 517.168 104.625 517.207 104.574 517.207 cv
104.539 517.207 104.508 517.199 104.484 517.18 cv
104.453 517.164 104.434 517.133 104.418 517.09 cv
104.402 517.051 104.387 516.996 104.379 516.926 cv
104.367 516.859 104.363 516.777 104.367 516.68 cv
104.363 516.613 104.367 516.555 104.375 516.504 cv
104.379 516.453 104.387 516.41 104.398 516.371 cv
104.406 516.336 104.422 516.301 104.441 516.27 cv
104.461 516.238 104.496 516.199 104.555 516.148 cv
104.605 516.102 104.699 516.035 104.836 515.953 cv
104.969 515.871 105.141 515.793 105.344 515.711 cv
105.547 515.633 105.77 515.562 106.016 515.508 cv
106.258 515.453 106.516 515.426 106.789 515.426 cv
107.215 515.426 107.59 515.488 107.914 515.609 cv
108.234 515.73 108.5 515.895 108.715 516.105 cv
108.926 516.316 109.086 516.562 109.191 516.836 cv
109.297 517.117 109.352 517.414 109.352 517.727 cv
109.352 518.016 109.324 518.297 109.273 518.574 cv
109.223 518.859 109.117 519.164 108.957 519.488 cv
108.793 519.816 108.559 520.18 108.254 520.578 cv
107.945 520.98 107.539 521.441 107.035 521.957 cv
105.629 523.426 li
109.488 523.426 li
109.52 523.43 109.555 523.441 109.594 523.457 cv
109.625 523.48 109.656 523.512 109.684 523.551 cv
109.707 523.594 109.727 523.645 109.738 523.703 cv
109.75 523.77 109.754 523.84 109.758 523.918 cv
cp
f
181.531 521.902 mo
181.527 522.055 181.504 522.176 181.461 522.262 cv
181.414 522.352 181.352 522.395 181.27 522.391 cv
180.27 522.391 li
180.27 524.254 li
180.27 524.293 180.258 524.324 180.242 524.348 cv
180.219 524.375 180.188 524.395 180.145 524.414 cv
180.094 524.43 180.031 524.441 179.961 524.453 cv
179.883 524.461 179.789 524.465 179.672 524.469 cv
179.555 524.465 179.457 524.461 179.387 524.453 cv
179.309 524.441 179.25 524.43 179.207 524.414 cv
179.16 524.395 179.129 524.375 179.113 524.348 cv
179.094 524.324 179.086 524.293 179.09 524.254 cv
179.09 522.391 li
175.461 522.391 li
175.402 522.395 175.359 522.387 175.324 522.371 cv
175.289 522.359 175.254 522.332 175.227 522.293 cv
175.195 522.258 175.176 522.207 175.164 522.137 cv
175.152 522.07 175.148 521.98 175.148 521.867 cv
175.148 521.785 175.148 521.707 175.156 521.637 cv
175.156 521.566 175.168 521.504 175.184 521.449 cv
175.195 521.395 175.211 521.34 175.238 521.285 cv
175.258 521.23 175.285 521.176 175.32 521.113 cv
178.48 515.727 li
178.5 515.691 178.535 515.66 178.582 515.633 cv
178.625 515.605 178.68 515.582 178.754 515.562 cv
178.82 515.547 178.906 515.535 179.012 515.523 cv
179.113 515.52 179.234 515.516 179.375 515.512 cv
179.523 515.516 179.66 515.52 179.777 515.531 cv
179.891 515.543 179.98 515.559 180.055 515.574 cv
180.121 515.594 180.176 515.617 180.215 515.648 cv
180.25 515.68 180.27 515.715 180.27 515.754 cv
180.27 521.418 li
181.27 521.418 li
181.344 521.422 181.406 521.461 181.457 521.539 cv
181.504 521.621 181.527 521.742 181.531 521.902 cv
cp
179.09 516.551 mo
179.078 516.551 li
176.227 521.418 li
179.09 521.418 li
cp
f
252.781 521.555 mo
252.781 521.945 252.719 522.324 252.602 522.684 cv
252.477 523.051 252.293 523.367 252.051 523.641 cv
251.801 523.918 251.488 524.141 251.113 524.305 cv
250.73 524.473 250.285 524.555 249.77 524.555 cv
249.398 524.555 249.07 524.512 248.789 524.418 cv
248.504 524.332 248.258 524.199 248.047 524.027 cv
247.836 523.859 247.66 523.652 247.523 523.406 cv
247.383 523.16 247.27 522.879 247.188 522.562 cv
247.102 522.25 247.043 521.906 247.008 521.527 cv
246.969 521.156 246.949 520.754 246.953 520.32 cv
246.949 519.941 246.969 519.559 247.012 519.168 cv
247.051 518.785 247.125 518.41 247.23 518.043 cv
247.336 517.684 247.48 517.344 247.66 517.027 cv
247.84 516.711 248.066 516.434 248.34 516.199 cv
248.613 515.965 248.938 515.777 249.316 515.637 cv
249.695 515.5 250.137 515.434 250.641 515.43 cv
250.809 515.434 250.98 515.441 251.152 515.461 cv
251.324 515.484 251.484 515.516 251.633 515.547 cv
251.781 515.586 251.902 515.621 252.004 515.66 cv
252.102 515.699 252.168 515.734 252.203 515.758 cv
252.23 515.785 252.254 515.812 252.273 515.84 cv
252.289 515.871 252.305 515.902 252.313 515.937 cv
252.32 515.973 252.324 516.012 252.332 516.055 cv
252.332 516.098 252.336 516.152 252.34 516.215 cv
252.336 516.301 252.336 516.371 252.336 516.426 cv
252.332 516.488 252.32 516.535 252.309 516.57 cv
252.289 516.609 252.27 516.637 252.246 516.652 cv
252.219 516.672 252.188 516.68 252.148 516.68 cv
252.098 516.68 252.027 516.664 251.941 516.633 cv
251.852 516.602 251.746 516.566 251.625 516.523 cv
251.5 516.488 251.352 516.453 251.176 516.418 cv
251 516.391 250.797 516.375 250.566 516.371 cv
250.137 516.375 249.77 516.461 249.465 516.633 cv
249.16 516.805 248.91 517.039 248.715 517.332 cv
248.52 517.625 248.375 517.965 248.285 518.348 cv
248.188 518.738 248.133 519.141 248.125 519.559 cv
248.242 519.492 248.379 519.426 248.527 519.355 cv
248.676 519.289 248.836 519.227 249.012 519.168 cv
249.188 519.117 249.375 519.07 249.57 519.035 cv
249.766 519.004 249.977 518.988 250.203 518.984 cv
250.68 518.988 251.082 519.055 251.414 519.18 cv
251.742 519.312 252.008 519.492 252.215 519.723 cv
252.414 519.953 252.559 520.223 252.648 520.535 cv
252.734 520.848 252.781 521.187 252.781 521.555 cv
cp
251.586 521.664 mo
251.586 521.402 251.559 521.16 251.508 520.941 cv
251.453 520.727 251.363 520.543 251.242 520.387 cv
251.117 520.238 250.953 520.121 250.75 520.039 cv
250.539 519.957 250.285 519.914 249.988 519.914 cv
249.816 519.914 249.648 519.93 249.48 519.961 cv
249.309 519.992 249.145 520.035 248.988 520.082 cv
248.828 520.137 248.68 520.199 248.539 520.27 cv
248.395 520.344 248.262 520.418 248.145 520.496 cv
248.141 521.09 248.18 521.586 248.258 521.98 cv
248.332 522.379 248.441 522.695 248.586 522.934 cv
248.73 523.176 248.91 523.348 249.125 523.449 cv
249.34 523.555 249.59 523.605 249.879 523.602 cv
250.168 523.605 250.422 523.551 250.637 523.437 cv
250.852 523.332 251.027 523.184 251.172 522.996 cv
251.313 522.812 251.418 522.605 251.484 522.375 cv
251.551 522.145 251.586 521.91 251.586 521.664 cv
cp
f
324.16 522.148 mo
324.16 522.535 324.09 522.879 323.953 523.176 cv
323.816 523.48 323.621 523.73 323.363 523.934 cv
323.105 524.141 322.785 524.297 322.406 524.398 cv
322.023 524.504 321.59 524.555 321.105 524.555 cv
320.645 524.555 320.234 524.508 319.875 524.414 cv
319.512 524.32 319.207 524.18 318.957 523.988 cv
318.707 523.805 318.516 523.574 318.383 523.297 cv
318.25 523.023 318.184 522.711 318.184 522.355 cv
318.184 522.082 318.227 521.824 318.32 521.59 cv
318.406 521.355 318.539 521.141 318.715 520.945 cv
318.883 520.75 319.094 520.566 319.348 520.391 cv
319.598 520.223 319.883 520.059 320.199 519.902 cv
319.926 519.762 319.684 519.613 319.473 519.453 cv
319.262 519.297 319.082 519.125 318.938 518.937 cv
318.789 518.754 318.68 518.559 318.605 518.348 cv
318.527 518.141 318.488 517.91 318.492 517.66 cv
318.488 517.352 318.543 517.059 318.66 516.785 cv
318.77 516.516 318.941 516.281 319.168 516.078 cv
319.395 515.879 319.68 515.719 320.031 515.602 cv
320.375 515.484 320.785 515.426 321.254 515.426 cv
321.699 515.426 322.086 515.48 322.414 515.586 cv
322.742 515.695 323.012 515.84 323.223 516.023 cv
323.434 516.211 323.59 516.43 323.695 516.68 cv
323.793 516.93 323.844 517.199 323.848 517.488 cv
323.844 517.723 323.805 517.949 323.734 518.16 cv
323.656 518.379 323.547 518.582 323.398 518.77 cv
323.25 518.965 323.07 519.145 322.859 519.309 cv
322.648 519.48 322.406 519.637 322.133 519.777 cv
322.453 519.941 322.738 520.105 322.996 520.273 cv
323.246 520.441 323.461 520.621 323.637 520.816 cv
323.805 521.012 323.934 521.219 324.027 521.434 cv
324.113 521.652 324.16 521.891 324.16 522.148 cv
cp
322.68 517.598 mo
322.676 517.41 322.645 517.234 322.578 517.078 cv
322.512 516.922 322.414 516.789 322.289 516.68 cv
322.16 516.57 322 516.488 321.813 516.43 cv
321.617 516.375 321.402 516.348 321.164 516.344 cv
320.668 516.348 320.293 516.457 320.043 516.68 cv
319.785 516.906 319.66 517.215 319.664 517.598 cv
319.66 517.777 319.691 517.941 319.754 518.094 cv
319.816 518.25 319.91 518.395 320.043 518.531 cv
320.168 518.668 320.332 518.801 320.535 518.93 cv
320.73 519.062 320.969 519.199 321.246 519.34 cv
321.707 519.105 322.063 518.844 322.309 518.551 cv
322.555 518.266 322.676 517.949 322.68 517.598 cv
cp
322.969 522.273 mo
322.965 522.066 322.926 521.875 322.852 521.703 cv
322.77 521.535 322.652 521.375 322.496 521.223 cv
322.34 521.074 322.141 520.93 321.906 520.789 cv
321.668 520.652 321.398 520.508 321.09 520.355 cv
320.801 520.5 320.547 520.641 320.332 520.781 cv
320.113 520.922 319.934 521.07 319.797 521.219 cv
319.656 521.375 319.551 521.531 319.48 521.695 cv
319.406 521.863 319.371 522.047 319.375 522.246 cv
319.371 522.691 319.523 523.035 319.832 523.273 cv
320.133 523.52 320.586 523.641 321.191 523.637 cv
321.773 523.641 322.219 523.52 322.52 523.27 cv
322.816 523.027 322.965 522.695 322.969 522.273 cv
cp
f
391.816 523.961 mo
391.813 524.051 391.805 524.121 391.793 524.18 cv
391.777 524.242 391.758 524.293 391.738 524.324 cv
391.715 524.363 391.691 524.387 391.66 524.402 cv
391.629 524.418 391.598 524.426 391.57 524.426 cv
386.934 524.426 li
386.898 524.426 386.871 524.418 386.844 524.402 cv
386.816 524.387 386.789 524.363 386.766 524.324 cv
386.738 524.293 386.719 524.242 386.707 524.18 cv
386.691 524.121 386.684 524.051 386.688 523.961 cv
386.684 523.883 386.691 523.809 386.707 523.746 cv
386.719 523.687 386.734 523.641 386.758 523.602 cv
386.773 523.566 386.801 523.535 386.832 523.512 cv
386.863 523.492 386.895 523.484 386.934 523.48 cv
388.785 523.48 li
388.785 516.734 li
387.07 517.754 li
386.98 517.805 386.91 517.832 386.863 517.84 cv
386.809 517.848 386.766 517.84 386.734 517.809 cv
386.699 517.781 386.68 517.73 386.668 517.66 cv
386.656 517.594 386.648 517.508 386.652 517.398 cv
386.648 517.324 386.652 517.258 386.664 517.199 cv
386.668 517.148 386.68 517.102 386.695 517.062 cv
386.707 517.027 386.727 516.996 386.75 516.969 cv
386.773 516.941 386.805 516.914 386.852 516.887 cv
388.895 515.574 li
388.91 515.562 388.93 515.551 388.961 515.543 cv
388.984 515.535 389.02 515.527 389.066 515.516 cv
389.105 515.508 389.156 515.5 389.211 515.496 cv
389.266 515.496 389.332 515.496 389.418 515.492 cv
389.523 515.496 389.617 515.5 389.691 515.508 cv
389.762 515.516 389.816 515.531 389.863 515.547 cv
389.902 515.566 389.93 515.586 389.945 515.609 cv
389.953 515.637 389.961 515.66 389.965 515.684 cv
389.965 523.48 li
391.57 523.48 li
391.605 523.484 391.641 523.492 391.672 523.512 cv
391.703 523.535 391.727 523.566 391.75 523.602 cv
391.766 523.641 391.781 523.687 391.797 523.746 cv
391.805 523.809 391.813 523.883 391.816 523.961 cv
cp
f
399.168 519.969 mo
399.164 520.652 399.113 521.273 399.008 521.836 cv
398.898 522.398 398.719 522.883 398.473 523.285 cv
398.219 523.691 397.891 524.004 397.492 524.223 cv
397.086 524.445 396.594 524.555 396.008 524.555 cv
395.449 524.555 394.977 524.457 394.598 524.258 cv
394.215 524.062 393.91 523.77 393.676 523.383 cv
393.441 522.996 393.273 522.523 393.18 521.957 cv
393.078 521.395 393.031 520.746 393.031 520.012 cv
393.031 519.34 393.086 518.719 393.195 518.152 cv
393.305 517.59 393.48 517.105 393.73 516.699 cv
393.973 516.297 394.297 515.984 394.703 515.758 cv
395.102 515.539 395.598 515.426 396.188 515.426 cv
396.746 515.426 397.219 515.527 397.602 515.723 cv
397.984 515.926 398.289 516.219 398.523 516.602 cv
398.754 516.992 398.922 517.465 399.02 518.027 cv
399.117 518.59 399.164 519.238 399.168 519.969 cv
cp
397.961 520.051 mo
397.957 519.609 397.941 519.211 397.914 518.859 cv
397.879 518.508 397.832 518.199 397.773 517.93 cv
397.707 517.66 397.629 517.43 397.531 517.234 cv
397.434 517.043 397.316 516.883 397.18 516.754 cv
397.039 516.629 396.879 516.535 396.707 516.477 cv
396.527 516.422 396.332 516.395 396.117 516.391 cv
395.727 516.395 395.41 516.484 395.172 516.668 cv
394.926 516.852 394.734 517.105 394.598 517.422 cv
394.457 517.742 394.363 518.113 394.313 518.543 cv
394.262 518.973 394.238 519.437 394.238 519.93 cv
394.238 520.594 394.27 521.156 394.34 521.617 cv
394.406 522.086 394.516 522.465 394.668 522.754 cv
394.813 523.051 395.004 523.262 395.234 523.391 cv
395.465 523.527 395.746 523.594 396.078 523.59 cv
396.332 523.594 396.555 523.555 396.75 523.469 cv
396.941 523.391 397.109 523.27 397.25 523.113 cv
397.391 522.961 397.504 522.777 397.598 522.562 cv
397.684 522.348 397.758 522.109 397.816 521.848 cv
397.867 521.59 397.906 521.309 397.93 521.004 cv
397.949 520.699 397.957 520.383 397.961 520.051 cv
cp
f
463.195 523.961 mo
463.191 524.051 463.184 524.121 463.172 524.18 cv
463.156 524.242 463.137 524.293 463.117 524.324 cv
463.094 524.363 463.07 524.387 463.039 524.402 cv
463.008 524.418 462.977 524.426 462.949 524.426 cv
458.313 524.426 li
458.277 524.426 458.25 524.418 458.223 524.402 cv
458.195 524.387 458.168 524.363 458.145 524.324 cv
458.117 524.293 458.098 524.242 458.086 524.18 cv
458.07 524.121 458.063 524.051 458.066 523.961 cv
458.063 523.883 458.07 523.809 458.086 523.746 cv
458.098 523.687 458.113 523.641 458.137 523.602 cv
458.152 523.566 458.18 523.535 458.211 523.512 cv
458.242 523.492 458.273 523.484 458.313 523.48 cv
460.164 523.48 li
460.164 516.734 li
458.449 517.754 li
458.359 517.805 458.289 517.832 458.242 517.84 cv
458.188 517.848 458.145 517.84 458.113 517.809 cv
458.078 517.781 458.059 517.73 458.047 517.66 cv
458.035 517.594 458.027 517.508 458.031 517.398 cv
458.027 517.324 458.031 517.258 458.043 517.199 cv
458.047 517.148 458.059 517.102 458.074 517.062 cv
458.086 517.027 458.105 516.996 458.129 516.969 cv
458.152 516.941 458.184 516.914 458.23 516.887 cv
460.273 515.574 li
460.289 515.562 460.309 515.551 460.34 515.543 cv
460.363 515.535 460.398 515.527 460.445 515.516 cv
460.484 515.508 460.535 515.5 460.59 515.496 cv
460.645 515.496 460.711 515.496 460.797 515.492 cv
460.902 515.496 460.996 515.5 461.07 515.508 cv
461.141 515.516 461.195 515.531 461.242 515.547 cv
461.281 515.566 461.309 515.586 461.324 515.609 cv
461.332 515.637 461.34 515.66 461.344 515.684 cv
461.344 523.48 li
462.949 523.48 li
462.984 523.484 463.02 523.492 463.051 523.512 cv
463.082 523.535 463.105 523.566 463.129 523.602 cv
463.145 523.641 463.16 523.687 463.176 523.746 cv
463.184 523.809 463.191 523.883 463.195 523.961 cv
cp
f
470.258 523.918 mo
470.254 524.004 470.25 524.078 470.238 524.141 cv
470.227 524.207 470.211 524.262 470.191 524.301 cv
470.168 524.348 470.141 524.379 470.109 524.395 cv
470.074 524.418 470.035 524.426 469.996 524.426 cv
465.094 524.426 li
465.031 524.426 464.973 524.418 464.926 524.402 cv
464.875 524.387 464.836 524.363 464.801 524.324 cv
464.766 524.293 464.738 524.238 464.727 524.168 cv
464.707 524.098 464.699 524.012 464.703 523.91 cv
464.699 523.82 464.703 523.742 464.711 523.672 cv
464.715 523.605 464.73 523.547 464.758 523.492 cv
464.781 523.441 464.813 523.387 464.848 523.332 cv
464.883 523.281 464.926 523.227 464.984 523.164 cv
466.758 521.34 li
467.168 520.922 467.496 520.547 467.746 520.211 cv
467.992 519.883 468.184 519.578 468.316 519.301 cv
468.449 519.027 468.535 518.777 468.582 518.551 cv
468.621 518.328 468.645 518.117 468.645 517.922 cv
468.645 517.727 468.609 517.543 468.543 517.363 cv
468.477 517.191 468.383 517.035 468.258 516.898 cv
468.133 516.77 467.977 516.664 467.789 516.582 cv
467.602 516.508 467.383 516.469 467.137 516.465 cv
466.848 516.469 466.59 516.508 466.363 516.582 cv
466.133 516.664 465.934 516.75 465.762 516.836 cv
465.59 516.93 465.445 517.012 465.328 517.09 cv
465.211 517.168 465.125 517.207 465.074 517.207 cv
465.039 517.207 465.008 517.199 464.984 517.18 cv
464.953 517.164 464.934 517.133 464.918 517.09 cv
464.902 517.051 464.887 516.996 464.879 516.926 cv
464.867 516.859 464.863 516.777 464.867 516.68 cv
464.863 516.613 464.867 516.555 464.875 516.504 cv
464.879 516.453 464.887 516.41 464.898 516.371 cv
464.906 516.336 464.922 516.301 464.941 516.27 cv
464.961 516.238 464.996 516.199 465.055 516.148 cv
465.105 516.102 465.199 516.035 465.336 515.953 cv
465.469 515.871 465.641 515.793 465.844 515.711 cv
466.047 515.633 466.27 515.562 466.516 515.508 cv
466.758 515.453 467.016 515.426 467.289 515.426 cv
467.715 515.426 468.09 515.488 468.414 515.609 cv
468.734 515.73 469 515.895 469.215 516.105 cv
469.426 516.316 469.586 516.562 469.691 516.836 cv
469.797 517.117 469.852 517.414 469.852 517.727 cv
469.852 518.016 469.824 518.297 469.773 518.574 cv
469.723 518.859 469.617 519.164 469.457 519.488 cv
469.293 519.816 469.059 520.18 468.754 520.578 cv
468.445 520.98 468.039 521.441 467.535 521.957 cv
466.129 523.426 li
469.988 523.426 li
470.02 523.43 470.055 523.441 470.094 523.457 cv
470.125 523.48 470.156 523.512 470.184 523.551 cv
470.207 523.594 470.227 523.645 470.238 523.703 cv
470.25 523.77 470.254 523.84 470.258 523.918 cv
cp
f
534.594 523.961 mo
534.59 524.051 534.582 524.121 534.57 524.18 cv
534.555 524.242 534.535 524.293 534.516 524.324 cv
534.492 524.363 534.469 524.387 534.438 524.402 cv
534.406 524.418 534.375 524.426 534.348 524.426 cv
529.711 524.426 li
529.676 524.426 529.648 524.418 529.621 524.402 cv
529.594 524.387 529.566 524.363 529.543 524.324 cv
529.516 524.293 529.496 524.242 529.484 524.18 cv
529.469 524.121 529.461 524.051 529.465 523.961 cv
529.461 523.883 529.469 523.809 529.484 523.746 cv
529.496 523.687 529.512 523.641 529.535 523.602 cv
529.551 523.566 529.578 523.535 529.609 523.512 cv
529.641 523.492 529.672 523.484 529.711 523.48 cv
531.563 523.48 li
531.563 516.734 li
529.848 517.754 li
529.758 517.805 529.688 517.832 529.641 517.84 cv
529.586 517.848 529.543 517.84 529.512 517.809 cv
529.477 517.781 529.457 517.73 529.445 517.66 cv
529.434 517.594 529.426 517.508 529.43 517.398 cv
529.426 517.324 529.43 517.258 529.441 517.199 cv
529.445 517.148 529.457 517.102 529.473 517.062 cv
529.484 517.027 529.504 516.996 529.527 516.969 cv
529.551 516.941 529.582 516.914 529.629 516.887 cv
531.672 515.574 li
531.688 515.562 531.707 515.551 531.738 515.543 cv
531.762 515.535 531.797 515.527 531.844 515.516 cv
531.883 515.508 531.934 515.5 531.988 515.496 cv
532.043 515.496 532.109 515.496 532.195 515.492 cv
532.301 515.496 532.395 515.5 532.469 515.508 cv
532.539 515.516 532.594 515.531 532.641 515.547 cv
532.68 515.566 532.707 515.586 532.723 515.609 cv
532.73 515.637 532.738 515.66 532.742 515.684 cv
532.742 523.48 li
534.348 523.48 li
534.383 523.484 534.418 523.492 534.449 523.512 cv
534.48 523.535 534.504 523.566 534.527 523.602 cv
534.543 523.641 534.559 523.687 534.574 523.746 cv
534.582 523.809 534.59 523.883 534.594 523.961 cv
cp
f
542.031 521.902 mo
542.027 522.055 542.004 522.176 541.961 522.262 cv
541.914 522.352 541.852 522.395 541.77 522.391 cv
540.77 522.391 li
540.77 524.254 li
540.77 524.293 540.758 524.324 540.742 524.348 cv
540.719 524.375 540.688 524.395 540.645 524.414 cv
540.594 524.43 540.531 524.441 540.461 524.453 cv
540.383 524.461 540.289 524.465 540.172 524.469 cv
540.055 524.465 539.957 524.461 539.887 524.453 cv
539.809 524.441 539.75 524.43 539.707 524.414 cv
539.66 524.395 539.629 524.375 539.613 524.348 cv
539.594 524.324 539.586 524.293 539.59 524.254 cv
539.59 522.391 li
535.961 522.391 li
535.902 522.395 535.859 522.387 535.824 522.371 cv
535.789 522.359 535.754 522.332 535.727 522.293 cv
535.695 522.258 535.676 522.207 535.664 522.137 cv
535.652 522.07 535.648 521.98 535.648 521.867 cv
535.648 521.785 535.648 521.707 535.656 521.637 cv
535.656 521.566 535.668 521.504 535.684 521.449 cv
535.695 521.395 535.711 521.34 535.738 521.285 cv
535.758 521.23 535.785 521.176 535.82 521.113 cv
538.98 515.727 li
539 515.691 539.035 515.66 539.082 515.633 cv
539.125 515.605 539.18 515.582 539.254 515.562 cv
539.32 515.547 539.406 515.535 539.512 515.523 cv
539.613 515.52 539.734 515.516 539.875 515.512 cv
540.023 515.516 540.16 515.52 540.277 515.531 cv
540.391 515.543 540.48 515.559 540.555 515.574 cv
540.621 515.594 540.676 515.617 540.715 515.648 cv
540.75 515.68 540.77 515.715 540.77 515.754 cv
540.77 521.418 li
541.77 521.418 li
541.844 521.422 541.906 521.461 541.957 521.539 cv
542.004 521.621 542.027 521.742 542.031 521.902 cv
cp
539.59 516.551 mo
539.578 516.551 li
536.727 521.418 li
539.59 521.418 li
cp
f
605.996 523.961 mo
605.992 524.051 605.984 524.121 605.973 524.18 cv
605.957 524.242 605.938 524.293 605.918 524.324 cv
605.895 524.363 605.871 524.387 605.84 524.402 cv
605.809 524.418 605.777 524.426 605.75 524.426 cv
601.113 524.426 li
601.078 524.426 601.051 524.418 601.023 524.402 cv
600.996 524.387 600.969 524.363 600.945 524.324 cv
600.918 524.293 600.898 524.242 600.887 524.18 cv
600.871 524.121 600.863 524.051 600.867 523.961 cv
600.863 523.883 600.871 523.809 600.887 523.746 cv
600.898 523.687 600.914 523.641 600.938 523.602 cv
600.953 523.566 600.98 523.535 601.012 523.512 cv
601.043 523.492 601.074 523.484 601.113 523.48 cv
602.965 523.48 li
602.965 516.734 li
601.25 517.754 li
601.16 517.805 601.09 517.832 601.043 517.84 cv
600.988 517.848 600.945 517.84 600.914 517.809 cv
600.879 517.781 600.859 517.73 600.848 517.66 cv
600.836 517.594 600.828 517.508 600.832 517.398 cv
600.828 517.324 600.832 517.258 600.844 517.199 cv
600.848 517.148 600.859 517.102 600.875 517.062 cv
600.887 517.027 600.906 516.996 600.93 516.969 cv
600.953 516.941 600.984 516.914 601.031 516.887 cv
603.074 515.574 li
603.09 515.562 603.109 515.551 603.141 515.543 cv
603.164 515.535 603.199 515.527 603.246 515.516 cv
603.285 515.508 603.336 515.5 603.391 515.496 cv
603.445 515.496 603.512 515.496 603.598 515.492 cv
603.703 515.496 603.797 515.5 603.871 515.508 cv
603.941 515.516 603.996 515.531 604.043 515.547 cv
604.082 515.566 604.109 515.586 604.125 515.609 cv
604.133 515.637 604.141 515.66 604.145 515.684 cv
604.145 523.48 li
605.75 523.48 li
605.785 523.484 605.82 523.492 605.852 523.512 cv
605.883 523.535 605.906 523.566 605.93 523.602 cv
605.945 523.641 605.961 523.687 605.977 523.746 cv
605.984 523.809 605.992 523.883 605.996 523.961 cv
cp
f
613.281 521.555 mo
613.281 521.945 613.219 522.324 613.102 522.684 cv
612.977 523.051 612.793 523.367 612.551 523.641 cv
612.301 523.918 611.988 524.141 611.613 524.305 cv
611.23 524.473 610.785 524.555 610.27 524.555 cv
609.898 524.555 609.57 524.512 609.289 524.418 cv
609.004 524.332 608.758 524.199 608.547 524.027 cv
608.336 523.859 608.16 523.652 608.023 523.406 cv
607.883 523.16 607.77 522.879 607.688 522.562 cv
607.602 522.25 607.543 521.906 607.508 521.527 cv
607.469 521.156 607.449 520.754 607.453 520.32 cv
607.449 519.941 607.469 519.559 607.512 519.168 cv
607.551 518.785 607.625 518.41 607.73 518.043 cv
607.836 517.684 607.98 517.344 608.16 517.027 cv
608.34 516.711 608.566 516.434 608.84 516.199 cv
609.113 515.965 609.438 515.777 609.816 515.637 cv
610.195 515.5 610.637 515.434 611.141 515.43 cv
611.309 515.434 611.48 515.441 611.652 515.461 cv
611.824 515.484 611.984 515.516 612.133 515.547 cv
612.281 515.586 612.402 515.621 612.504 515.66 cv
612.602 515.699 612.668 515.734 612.703 515.758 cv
612.73 515.785 612.754 515.812 612.773 515.84 cv
612.789 515.871 612.805 515.902 612.813 515.937 cv
612.82 515.973 612.824 516.012 612.832 516.055 cv
612.832 516.098 612.836 516.152 612.84 516.215 cv
612.836 516.301 612.836 516.371 612.836 516.426 cv
612.832 516.488 612.82 516.535 612.809 516.57 cv
612.789 516.609 612.77 516.637 612.746 516.652 cv
612.719 516.672 612.688 516.68 612.648 516.68 cv
612.598 516.68 612.527 516.664 612.441 516.633 cv
612.352 516.602 612.246 516.566 612.125 516.523 cv
612 516.488 611.852 516.453 611.676 516.418 cv
611.5 516.391 611.297 516.375 611.066 516.371 cv
610.637 516.375 610.27 516.461 609.965 516.633 cv
609.66 516.805 609.41 517.039 609.215 517.332 cv
609.02 517.625 608.875 517.965 608.785 518.348 cv
608.688 518.738 608.633 519.141 608.625 519.559 cv
608.742 519.492 608.879 519.426 609.027 519.355 cv
609.176 519.289 609.336 519.227 609.512 519.168 cv
609.688 519.117 609.875 519.07 610.07 519.035 cv
610.266 519.004 610.477 518.988 610.703 518.984 cv
611.18 518.988 611.582 519.055 611.914 519.18 cv
612.242 519.312 612.508 519.492 612.715 519.723 cv
612.914 519.953 613.059 520.223 613.148 520.535 cv
613.234 520.848 613.281 521.187 613.281 521.555 cv
cp
612.086 521.664 mo
612.086 521.402 612.059 521.16 612.008 520.941 cv
611.953 520.727 611.863 520.543 611.742 520.387 cv
611.617 520.238 611.453 520.121 611.25 520.039 cv
611.039 519.957 610.785 519.914 610.488 519.914 cv
610.316 519.914 610.148 519.93 609.98 519.961 cv
609.809 519.992 609.645 520.035 609.488 520.082 cv
609.328 520.137 609.18 520.199 609.039 520.27 cv
608.895 520.344 608.762 520.418 608.645 520.496 cv
608.641 521.09 608.68 521.586 608.758 521.98 cv
608.832 522.379 608.941 522.695 609.086 522.934 cv
609.23 523.176 609.41 523.348 609.625 523.449 cv
609.84 523.555 610.09 523.605 610.379 523.602 cv
610.668 523.605 610.922 523.551 611.137 523.437 cv
611.352 523.332 611.527 523.184 611.672 522.996 cv
611.813 522.812 611.918 522.605 611.984 522.375 cv
612.051 522.145 612.086 521.91 612.086 521.664 cv
cp
f
262.641 542.422 mo
262.637 542.527 262.621 542.617 262.586 542.687 cv
262.551 542.766 262.504 542.824 262.449 542.867 cv
262.391 542.918 262.328 542.953 262.262 542.969 cv
262.188 542.992 262.117 543 262.055 543 cv
261.609 543 li
261.469 543 261.348 542.988 261.242 542.957 cv
261.137 542.934 261.039 542.879 260.945 542.801 cv
260.852 542.727 260.758 542.625 260.664 542.492 cv
260.57 542.363 260.469 542.199 260.363 541.996 cv
257.289 536.258 li
257.125 535.965 256.961 535.656 256.801 535.328 cv
256.633 535.008 256.48 534.691 256.344 534.383 cv
256.328 534.383 li
256.336 534.758 256.344 535.141 256.352 535.527 cv
256.355 535.918 256.355 536.305 256.359 536.687 cv
256.359 542.773 li
256.355 542.812 256.344 542.848 256.324 542.879 cv
256.301 542.914 256.266 542.941 256.215 542.957 cv
256.16 542.977 256.09 542.988 256.008 543.004 cv
255.922 543.016 255.816 543.023 255.688 543.023 cv
255.551 543.023 255.441 543.016 255.359 543.004 cv
255.273 542.988 255.207 542.977 255.16 542.957 cv
255.109 542.941 255.074 542.914 255.051 542.879 cv
255.027 542.848 255.016 542.812 255.02 542.773 cv
255.02 533.469 li
255.016 533.262 255.074 533.113 255.195 533.023 cv
255.313 532.937 255.441 532.895 255.582 532.891 cv
256.242 532.891 li
256.395 532.895 256.527 532.906 256.633 532.93 cv
256.734 532.957 256.828 533 256.914 533.059 cv
256.996 533.121 257.074 533.203 257.156 533.309 cv
257.23 533.418 257.313 533.555 257.398 533.711 cv
259.766 538.137 li
259.91 538.41 260.051 538.676 260.188 538.93 cv
260.32 539.187 260.449 539.441 260.578 539.687 cv
260.699 539.941 260.824 540.187 260.949 540.426 cv
261.07 540.668 261.191 540.91 261.316 541.152 cv
261.324 541.152 li
261.313 540.746 261.305 540.316 261.305 539.871 cv
261.297 539.426 261.297 539 261.301 538.59 cv
261.301 533.117 li
261.297 533.082 261.309 533.047 261.332 533.016 cv
261.355 532.984 261.391 532.957 261.445 532.934 cv
261.492 532.91 261.563 532.895 261.648 532.883 cv
261.734 532.875 261.844 532.871 261.984 532.867 cv
262.102 532.871 262.207 532.875 262.297 532.883 cv
262.383 532.895 262.449 532.91 262.5 532.934 cv
262.547 532.957 262.582 532.984 262.605 533.016 cv
262.625 533.047 262.637 533.082 262.641 533.117 cv
cp
f
271.188 542.781 mo
271.184 542.828 271.176 542.863 271.16 542.887 cv
271.141 542.918 271.105 542.941 271.063 542.961 cv
271.016 542.98 270.957 542.992 270.883 543.008 cv
270.805 543.016 270.711 543.023 270.605 543.023 cv
270.48 543.023 270.383 543.016 270.313 543.008 cv
270.234 542.992 270.176 542.98 270.133 542.961 cv
270.086 542.941 270.055 542.918 270.043 542.887 cv
270.023 542.863 270.016 542.828 270.02 542.781 cv
270.02 541.855 li
269.617 542.301 269.223 542.621 268.836 542.82 cv
268.441 543.023 268.047 543.121 267.652 543.125 cv
267.18 543.121 266.785 543.047 266.469 542.891 cv
266.148 542.738 265.891 542.527 265.695 542.258 cv
265.492 541.992 265.352 541.68 265.27 541.32 cv
265.18 540.965 265.137 540.531 265.141 540.023 cv
265.141 535.77 li
265.137 535.73 265.145 535.695 265.168 535.664 cv
265.184 535.637 265.219 535.613 265.273 535.586 cv
265.32 535.566 265.391 535.551 265.477 535.539 cv
265.559 535.535 265.66 535.531 265.789 535.527 cv
265.91 535.531 266.016 535.535 266.102 535.539 cv
266.184 535.551 266.25 535.566 266.297 535.586 cv
266.344 535.613 266.379 535.637 266.402 535.664 cv
266.422 535.695 266.43 535.73 266.434 535.77 cv
266.434 539.852 li
266.43 540.266 266.461 540.594 266.523 540.84 cv
266.582 541.086 266.672 541.297 266.797 541.469 cv
266.914 541.648 267.07 541.781 267.262 541.875 cv
267.445 541.973 267.664 542.023 267.914 542.02 cv
268.234 542.023 268.555 541.906 268.879 541.676 cv
269.195 541.449 269.535 541.113 269.895 540.668 cv
269.895 535.77 li
269.895 535.73 269.902 535.695 269.922 535.664 cv
269.938 535.637 269.973 535.613 270.027 535.586 cv
270.078 535.566 270.145 535.551 270.227 535.539 cv
270.305 535.535 270.41 535.531 270.543 535.527 cv
270.664 535.531 270.77 535.535 270.855 535.539 cv
270.938 535.551 271 535.566 271.047 535.586 cv
271.09 535.613 271.125 535.637 271.152 535.664 cv
271.172 535.695 271.184 535.73 271.188 535.77 cv
cp
f
283.969 542.781 mo
283.965 542.828 283.957 542.863 283.938 542.887 cv
283.914 542.918 283.879 542.941 283.836 542.961 cv
283.785 542.98 283.719 542.992 283.641 543.008 cv
283.555 543.016 283.453 543.023 283.328 543.023 cv
283.195 543.023 283.086 543.016 283.008 543.008 cv
282.922 542.992 282.855 542.98 282.809 542.961 cv
282.754 542.941 282.719 542.918 282.703 542.887 cv
282.68 542.863 282.672 542.828 282.672 542.781 cv
282.672 538.52 li
282.672 538.227 282.645 537.957 282.594 537.711 cv
282.539 537.469 282.457 537.258 282.344 537.078 cv
282.23 536.902 282.086 536.766 281.91 536.672 cv
281.73 536.578 281.52 536.531 281.285 536.531 cv
280.988 536.531 280.691 536.648 280.395 536.875 cv
280.09 537.109 279.762 537.441 279.406 537.879 cv
279.406 542.781 li
279.402 542.828 279.391 542.863 279.375 542.887 cv
279.352 542.918 279.32 542.941 279.273 542.961 cv
279.223 542.98 279.156 542.992 279.074 543.008 cv
278.988 543.016 278.883 543.023 278.762 543.023 cv
278.641 543.023 278.539 543.016 278.453 543.008 cv
278.367 542.992 278.297 542.98 278.25 542.961 cv
278.195 542.941 278.164 542.918 278.148 542.887 cv
278.129 542.863 278.117 542.828 278.121 542.781 cv
278.121 538.52 li
278.117 538.227 278.09 537.957 278.035 537.711 cv
277.977 537.469 277.891 537.258 277.777 537.078 cv
277.664 536.902 277.52 536.766 277.348 536.672 cv
277.168 536.578 276.961 536.531 276.727 536.531 cv
276.426 536.531 276.129 536.648 275.828 536.875 cv
275.527 537.109 275.199 537.441 274.848 537.879 cv
274.848 542.781 li
274.844 542.828 274.832 542.863 274.816 542.887 cv
274.793 542.918 274.762 542.941 274.715 542.961 cv
274.668 542.98 274.602 542.992 274.523 543.008 cv
274.438 543.016 274.332 543.023 274.203 543.023 cv
274.074 543.023 273.969 543.016 273.891 543.008 cv
273.805 542.992 273.738 542.98 273.691 542.961 cv
273.637 542.941 273.605 542.918 273.59 542.887 cv
273.57 542.863 273.559 542.828 273.563 542.781 cv
273.563 535.77 li
273.559 535.73 273.566 535.695 273.586 535.664 cv
273.598 535.637 273.629 535.613 273.68 535.586 cv
273.723 535.566 273.785 535.551 273.859 535.539 cv
273.93 535.535 274.023 535.531 274.148 535.527 cv
274.258 535.531 274.355 535.535 274.434 535.539 cv
274.508 535.551 274.566 535.566 274.609 535.586 cv
274.648 535.613 274.676 535.637 274.695 535.664 cv
274.711 535.695 274.719 535.73 274.723 535.77 cv
274.723 536.695 li
275.113 536.254 275.496 535.934 275.871 535.727 cv
276.238 535.523 276.617 535.418 277 535.418 cv
277.289 535.418 277.547 535.453 277.781 535.52 cv
278.008 535.59 278.215 535.684 278.395 535.805 cv
278.57 535.926 278.719 536.07 278.848 536.238 cv
278.969 536.41 279.074 536.602 279.16 536.805 cv
279.391 536.555 279.613 536.34 279.824 536.16 cv
280.035 535.988 280.238 535.844 280.434 535.73 cv
280.629 535.625 280.816 535.547 281 535.492 cv
281.184 535.445 281.371 535.418 281.559 535.418 cv
282.012 535.418 282.391 535.5 282.695 535.656 cv
283 535.82 283.246 536.031 283.441 536.293 cv
283.629 536.559 283.766 536.867 283.848 537.223 cv
283.926 537.578 283.965 537.953 283.969 538.348 cv
cp
f
292.766 539.18 mo
292.762 539.789 292.695 540.34 292.566 540.824 cv
292.43 541.312 292.234 541.727 291.98 542.066 cv
291.723 542.41 291.406 542.672 291.035 542.852 cv
290.66 543.035 290.234 543.121 289.75 543.125 cv
289.523 543.121 289.316 543.102 289.129 543.059 cv
288.941 543.012 288.754 542.941 288.574 542.844 cv
288.387 542.746 288.207 542.621 288.027 542.469 cv
287.844 542.32 287.652 542.141 287.453 541.926 cv
287.453 542.781 li
287.453 542.828 287.441 542.863 287.422 542.891 cv
287.398 542.926 287.363 542.949 287.32 542.965 cv
287.27 542.98 287.211 542.992 287.145 543.008 cv
287.07 543.016 286.98 543.023 286.875 543.023 cv
286.766 543.023 286.68 543.016 286.609 543.008 cv
286.535 542.992 286.473 542.98 286.43 542.965 cv
286.379 542.949 286.348 542.926 286.336 542.891 cv
286.316 542.863 286.309 542.828 286.313 542.781 cv
286.313 532.371 li
286.309 532.332 286.32 532.297 286.34 532.262 cv
286.355 532.234 286.387 532.207 286.441 532.184 cv
286.488 532.164 286.555 532.148 286.641 532.137 cv
286.719 532.129 286.824 532.125 286.953 532.121 cv
287.082 532.125 287.188 532.129 287.273 532.137 cv
287.352 532.148 287.418 532.164 287.465 532.184 cv
287.512 532.207 287.543 532.234 287.566 532.262 cv
287.582 532.297 287.594 532.332 287.598 532.371 cv
287.598 536.57 li
287.805 536.359 288.008 536.18 288.203 536.035 cv
288.398 535.891 288.586 535.773 288.773 535.68 cv
288.957 535.594 289.145 535.527 289.336 535.48 cv
289.52 535.441 289.719 535.418 289.93 535.418 cv
290.434 535.418 290.867 535.52 291.234 535.723 cv
291.594 535.926 291.887 536.199 292.113 536.535 cv
292.336 536.879 292.504 537.277 292.609 537.734 cv
292.711 538.191 292.762 538.672 292.766 539.18 cv
cp
291.434 539.328 mo
291.43 538.973 291.402 538.625 291.352 538.285 cv
291.293 537.949 291.199 537.652 291.063 537.391 cv
290.926 537.133 290.746 536.922 290.523 536.762 cv
290.297 536.605 290.016 536.527 289.684 536.523 cv
289.516 536.527 289.352 536.551 289.191 536.594 cv
289.027 536.645 288.863 536.723 288.695 536.828 cv
288.527 536.941 288.352 537.082 288.176 537.25 cv
287.992 537.426 287.801 537.641 287.598 537.895 cv
287.598 540.691 li
287.953 541.125 288.293 541.457 288.617 541.68 cv
288.941 541.91 289.277 542.023 289.629 542.02 cv
289.949 542.023 290.227 541.945 290.461 541.785 cv
290.688 541.633 290.875 541.426 291.02 541.164 cv
291.164 540.91 291.27 540.621 291.336 540.301 cv
291.398 539.984 291.43 539.66 291.434 539.328 cv
cp
f
300.676 538.973 mo
300.672 539.176 300.621 539.316 300.523 539.402 cv
300.418 539.488 300.301 539.531 300.176 539.531 cv
295.559 539.531 li
295.555 539.922 295.594 540.273 295.676 540.586 cv
295.75 540.898 295.883 541.168 296.066 541.387 cv
296.246 541.613 296.48 541.785 296.777 541.902 cv
297.066 542.027 297.426 542.086 297.852 542.082 cv
298.184 542.086 298.48 542.059 298.742 542 cv
299.004 541.949 299.23 541.887 299.422 541.816 cv
299.609 541.75 299.766 541.691 299.891 541.633 cv
300.012 541.582 300.105 541.555 300.168 541.551 cv
300.203 541.555 300.234 541.562 300.266 541.578 cv
300.293 541.598 300.316 541.625 300.336 541.66 cv
300.348 541.699 300.359 541.75 300.371 541.812 cv
300.375 541.879 300.379 541.957 300.383 542.051 cv
300.379 542.121 300.375 542.18 300.375 542.227 cv
300.367 542.273 300.363 542.316 300.355 542.355 cv
300.348 542.395 300.332 542.43 300.316 542.461 cv
300.293 542.492 300.27 542.523 300.246 542.551 cv
300.215 542.582 300.133 542.629 299.992 542.691 cv
299.852 542.758 299.668 542.82 299.445 542.883 cv
299.219 542.945 298.961 543 298.668 543.051 cv
298.375 543.098 298.063 543.121 297.73 543.125 cv
297.152 543.121 296.645 543.043 296.215 542.883 cv
295.777 542.723 295.414 542.484 295.121 542.168 cv
294.82 541.852 294.598 541.457 294.449 540.977 cv
294.301 540.5 294.227 539.941 294.227 539.305 cv
294.227 538.707 294.301 538.168 294.457 537.684 cv
294.609 537.207 294.836 536.797 295.133 536.461 cv
295.426 536.125 295.781 535.867 296.195 535.687 cv
296.609 535.508 297.074 535.418 297.59 535.418 cv
298.141 535.418 298.609 535.508 298.996 535.684 cv
299.383 535.863 299.699 536.102 299.953 536.398 cv
300.199 536.699 300.383 537.051 300.5 537.449 cv
300.613 537.855 300.672 538.285 300.676 538.738 cv
cp
299.383 538.59 mo
299.398 537.914 299.246 537.383 298.93 537 cv
298.613 536.617 298.145 536.426 297.527 536.422 cv
297.203 536.426 296.922 536.484 296.684 536.602 cv
296.441 536.723 296.242 536.883 296.082 537.078 cv
295.918 537.277 295.793 537.508 295.707 537.77 cv
295.617 538.031 295.566 538.305 295.559 538.59 cv
cp
f
306.742 536.227 mo
306.738 536.344 306.738 536.441 306.734 536.516 cv
306.727 536.598 306.715 536.66 306.703 536.699 cv
306.684 536.746 306.664 536.777 306.645 536.801 cv
306.617 536.824 306.586 536.836 306.547 536.836 cv
306.504 536.836 306.453 536.824 306.395 536.801 cv
306.332 536.777 306.262 536.754 306.191 536.73 cv
306.113 536.707 306.031 536.687 305.938 536.664 cv
305.844 536.648 305.742 536.637 305.633 536.633 cv
305.5 536.637 305.371 536.664 305.25 536.711 cv
305.125 536.766 304.996 536.852 304.859 536.969 cv
304.719 537.094 304.574 537.25 304.426 537.445 cv
304.273 537.641 304.105 537.883 303.926 538.168 cv
303.926 542.781 li
303.922 542.828 303.91 542.863 303.895 542.887 cv
303.871 542.918 303.84 542.941 303.793 542.961 cv
303.746 542.98 303.68 542.992 303.602 543.008 cv
303.516 543.016 303.41 543.023 303.281 543.023 cv
303.152 543.023 303.047 543.016 302.969 543.008 cv
302.883 542.992 302.816 542.98 302.77 542.961 cv
302.715 542.941 302.684 542.918 302.668 542.887 cv
302.648 542.863 302.637 542.828 302.641 542.781 cv
302.641 535.77 li
302.637 535.73 302.645 535.695 302.664 535.664 cv
302.676 535.637 302.707 535.613 302.758 535.586 cv
302.801 535.566 302.863 535.551 302.938 535.539 cv
303.008 535.535 303.102 535.531 303.227 535.527 cv
303.336 535.531 303.434 535.535 303.512 535.539 cv
303.586 535.551 303.645 535.566 303.688 535.586 cv
303.727 535.613 303.754 535.637 303.773 535.664 cv
303.789 535.695 303.797 535.73 303.801 535.77 cv
303.801 536.789 li
303.988 536.508 304.172 536.281 304.344 536.105 cv
304.512 535.93 304.672 535.789 304.824 535.687 cv
304.973 535.586 305.121 535.516 305.27 535.477 cv
305.418 535.437 305.566 535.418 305.719 535.418 cv
305.785 535.418 305.863 535.422 305.949 535.43 cv
306.035 535.437 306.125 535.453 306.219 535.473 cv
306.313 535.496 306.395 535.52 306.473 535.543 cv
306.543 535.57 306.598 535.598 306.633 535.621 cv
306.66 535.652 306.68 535.676 306.695 535.695 cv
306.703 535.723 306.715 535.754 306.723 535.785 cv
306.73 535.824 306.734 535.875 306.738 535.945 cv
306.738 536.016 306.738 536.109 306.742 536.227 cv
cp
f
318.5 539.195 mo
318.496 539.773 318.422 540.301 318.273 540.777 cv
318.121 541.262 317.895 541.676 317.598 542.02 cv
317.297 542.371 316.922 542.641 316.477 542.832 cv
316.023 543.027 315.504 543.121 314.914 543.125 cv
314.336 543.121 313.832 543.039 313.406 542.867 cv
312.977 542.699 312.621 542.449 312.336 542.121 cv
312.047 541.793 311.832 541.398 311.695 540.93 cv
311.555 540.465 311.488 539.934 311.488 539.336 cv
311.488 538.77 311.559 538.242 311.707 537.762 cv
311.852 537.281 312.078 536.867 312.379 536.516 cv
312.676 536.168 313.047 535.898 313.496 535.707 cv
313.941 535.516 314.465 535.418 315.063 535.418 cv
315.641 535.418 316.141 535.504 316.57 535.676 cv
316.996 535.848 317.355 536.098 317.641 536.426 cv
317.926 536.754 318.141 537.152 318.285 537.617 cv
318.426 538.086 318.496 538.613 318.5 539.195 cv
cp
317.168 539.281 mo
317.164 538.906 317.129 538.547 317.063 538.207 cv
316.988 537.871 316.871 537.578 316.711 537.32 cv
316.547 537.07 316.328 536.867 316.051 536.715 cv
315.77 536.57 315.422 536.496 315.012 536.492 cv
314.625 536.496 314.297 536.562 314.023 536.695 cv
313.746 536.832 313.52 537.023 313.344 537.27 cv
313.164 537.516 313.031 537.809 312.949 538.145 cv
312.859 538.484 312.816 538.852 312.82 539.25 cv
312.816 539.637 312.852 540 312.926 540.336 cv
312.992 540.676 313.109 540.969 313.277 541.219 cv
313.441 541.473 313.664 541.676 313.941 541.82 cv
314.219 541.973 314.566 542.047 314.98 542.043 cv
315.355 542.047 315.684 541.977 315.965 541.84 cv
316.242 541.707 316.469 541.52 316.648 541.27 cv
316.824 541.027 316.953 540.734 317.039 540.398 cv
317.121 540.062 317.164 539.691 317.168 539.281 cv
cp
f
324.23 532.883 mo
324.227 532.984 324.223 533.062 324.215 533.121 cv
324.203 533.184 324.191 533.234 324.18 533.266 cv
324.164 533.305 324.148 533.328 324.129 533.34 cv
324.105 533.355 324.078 533.363 324.051 533.359 cv
324.012 533.363 323.965 533.352 323.914 533.324 cv
323.855 533.305 323.789 533.277 323.715 533.246 cv
323.633 533.219 323.543 533.191 323.438 533.168 cv
323.328 533.145 323.203 533.133 323.07 533.133 cv
322.875 533.133 322.711 533.164 322.578 533.227 cv
322.438 533.289 322.328 533.387 322.25 533.52 cv
322.164 533.652 322.105 533.824 322.07 534.035 cv
322.031 534.246 322.012 534.504 322.016 534.801 cv
322.016 535.566 li
323.582 535.566 li
323.621 535.57 323.656 535.578 323.688 535.594 cv
323.715 535.613 323.742 535.645 323.766 535.687 cv
323.789 535.734 323.805 535.793 323.82 535.855 cv
323.828 535.926 323.836 536.008 323.84 536.102 cv
323.836 536.293 323.813 536.426 323.77 536.508 cv
323.719 536.594 323.656 536.637 323.582 536.633 cv
322.016 536.633 li
322.016 542.781 li
322.012 542.828 322.004 542.863 321.984 542.887 cv
321.961 542.918 321.926 542.941 321.879 542.961 cv
321.828 542.98 321.762 542.992 321.68 543.008 cv
321.594 543.016 321.488 543.023 321.371 543.023 cv
321.242 543.023 321.141 543.016 321.059 543.008 cv
320.973 542.992 320.906 542.98 320.859 542.961 cv
320.809 542.941 320.773 542.918 320.754 542.887 cv
320.73 542.863 320.719 542.828 320.723 542.781 cv
320.723 536.633 li
319.734 536.633 li
319.648 536.637 319.586 536.594 319.547 536.508 cv
319.504 536.426 319.48 536.293 319.484 536.102 cv
319.48 536.008 319.488 535.926 319.5 535.855 cv
319.508 535.793 319.523 535.734 319.547 535.687 cv
319.566 535.645 319.59 535.613 319.625 535.594 cv
319.652 535.578 319.691 535.57 319.734 535.566 cv
320.723 535.566 li
320.723 534.84 li
320.719 534.355 320.766 533.937 320.859 533.582 cv
320.949 533.234 321.086 532.945 321.273 532.723 cv
321.457 532.5 321.691 532.336 321.98 532.227 cv
322.262 532.121 322.598 532.066 322.984 532.066 cv
323.16 532.066 323.336 532.086 323.512 532.117 cv
323.68 532.156 323.813 532.191 323.91 532.227 cv
324 532.27 324.063 532.305 324.098 532.332 cv
324.125 532.367 324.152 532.406 324.176 532.453 cv
324.195 532.504 324.207 532.566 324.219 532.633 cv
324.223 532.707 324.227 532.789 324.23 532.883 cv
cp
f
334.43 540.148 mo
334.426 540.621 334.34 541.043 334.168 541.41 cv
333.992 541.785 333.75 542.098 333.441 542.352 cv
333.133 542.609 332.77 542.801 332.352 542.93 cv
331.93 543.059 331.48 543.121 331 543.125 cv
330.66 543.121 330.344 543.094 330.059 543.039 cv
329.77 542.98 329.516 542.914 329.289 542.828 cv
329.063 542.75 328.871 542.664 328.719 542.57 cv
328.563 542.484 328.457 542.406 328.398 542.344 cv
328.34 542.281 328.297 542.203 328.27 542.109 cv
328.238 542.016 328.223 541.887 328.227 541.723 cv
328.223 541.609 328.227 541.516 328.242 541.437 cv
328.25 541.363 328.266 541.301 328.289 541.254 cv
328.305 541.207 328.332 541.176 328.367 541.156 cv
328.395 541.141 328.43 541.133 328.473 541.129 cv
328.543 541.133 328.645 541.176 328.781 541.262 cv
328.91 541.352 329.082 541.449 329.293 541.551 cv
329.5 541.66 329.75 541.758 330.043 541.844 cv
330.336 541.937 330.676 541.98 331.063 541.98 cv
331.352 541.98 331.617 541.941 331.859 541.863 cv
332.098 541.785 332.305 541.676 332.484 541.531 cv
332.656 541.391 332.793 541.215 332.887 541.004 cv
332.98 540.797 333.027 540.562 333.027 540.297 cv
333.027 540.016 332.961 539.77 332.832 539.562 cv
332.699 539.363 332.527 539.187 332.316 539.031 cv
332.102 538.883 331.859 538.742 331.586 538.609 cv
331.313 538.484 331.031 538.352 330.75 538.219 cv
330.461 538.086 330.184 537.941 329.914 537.777 cv
329.645 537.621 329.402 537.43 329.191 537.211 cv
328.973 536.992 328.801 536.738 328.672 536.441 cv
328.535 536.152 328.469 535.801 328.473 535.387 cv
328.469 534.969 328.547 534.594 328.703 534.262 cv
328.855 533.934 329.066 533.656 329.344 533.43 cv
329.613 533.211 329.938 533.039 330.316 532.922 cv
330.691 532.805 331.102 532.746 331.539 532.746 cv
331.758 532.746 331.98 532.766 332.211 532.805 cv
332.434 532.844 332.645 532.895 332.848 532.957 cv
333.043 533.023 333.223 533.098 333.383 533.176 cv
333.535 533.258 333.637 533.324 333.691 533.371 cv
333.738 533.426 333.773 533.465 333.789 533.488 cv
333.805 533.52 333.816 533.555 333.828 533.598 cv
333.836 533.645 333.844 533.699 333.852 533.758 cv
333.855 533.824 333.859 533.902 333.859 534 cv
333.859 534.094 333.855 534.18 333.848 534.25 cv
333.84 534.328 333.828 534.387 333.813 534.434 cv
333.797 534.48 333.773 534.516 333.746 534.539 cv
333.715 534.562 333.684 534.574 333.648 534.574 cv
333.59 534.574 333.5 534.539 333.379 534.469 cv
333.254 534.398 333.102 534.316 332.93 534.223 cv
332.75 534.133 332.543 534.051 332.305 533.973 cv
332.059 533.898 331.789 533.859 331.492 533.859 cv
331.211 533.859 330.965 533.898 330.758 533.973 cv
330.547 534.051 330.375 534.152 330.242 534.273 cv
330.105 534.398 330.004 534.543 329.938 534.715 cv
329.871 534.887 329.84 535.07 329.84 535.262 cv
329.84 535.547 329.902 535.789 330.031 535.988 cv
330.16 536.191 330.332 536.371 330.551 536.523 cv
330.762 536.684 331.008 536.824 331.285 536.953 cv
331.559 537.086 331.84 537.219 332.129 537.348 cv
332.414 537.48 332.695 537.625 332.969 537.781 cv
333.242 537.941 333.488 538.129 333.707 538.344 cv
333.922 538.562 334.094 538.816 334.23 539.109 cv
334.359 539.402 334.426 539.75 334.43 540.148 cv
cp
f
342.195 542.781 mo
342.191 542.828 342.184 542.863 342.168 542.887 cv
342.148 542.918 342.113 542.941 342.07 542.961 cv
342.023 542.98 341.965 542.992 341.891 543.008 cv
341.813 543.016 341.719 543.023 341.613 543.023 cv
341.488 543.023 341.391 543.016 341.32 543.008 cv
341.242 542.992 341.184 542.98 341.141 542.961 cv
341.094 542.941 341.063 542.918 341.051 542.887 cv
341.031 542.863 341.023 542.828 341.027 542.781 cv
341.027 541.855 li
340.625 542.301 340.23 542.621 339.844 542.82 cv
339.449 543.023 339.055 543.121 338.66 543.125 cv
338.188 543.121 337.793 543.047 337.477 542.891 cv
337.156 542.738 336.898 542.527 336.703 542.258 cv
336.5 541.992 336.359 541.68 336.277 541.32 cv
336.188 540.965 336.145 540.531 336.148 540.023 cv
336.148 535.77 li
336.145 535.73 336.152 535.695 336.176 535.664 cv
336.191 535.637 336.227 535.613 336.281 535.586 cv
336.328 535.566 336.398 535.551 336.484 535.539 cv
336.566 535.535 336.668 535.531 336.797 535.527 cv
336.918 535.531 337.023 535.535 337.109 535.539 cv
337.191 535.551 337.258 535.566 337.305 535.586 cv
337.352 535.613 337.387 535.637 337.41 535.664 cv
337.43 535.695 337.438 535.73 337.441 535.77 cv
337.441 539.852 li
337.438 540.266 337.469 540.594 337.531 540.84 cv
337.59 541.086 337.68 541.297 337.805 541.469 cv
337.922 541.648 338.078 541.781 338.27 541.875 cv
338.453 541.973 338.672 542.023 338.922 542.02 cv
339.242 542.023 339.563 541.906 339.887 541.676 cv
340.203 541.449 340.543 541.113 340.902 540.668 cv
340.902 535.77 li
340.902 535.73 340.91 535.695 340.93 535.664 cv
340.945 535.637 340.98 535.613 341.035 535.586 cv
341.086 535.566 341.152 535.551 341.234 535.539 cv
341.313 535.535 341.418 535.531 341.551 535.527 cv
341.672 535.531 341.777 535.535 341.863 535.539 cv
341.945 535.551 342.008 535.566 342.055 535.586 cv
342.098 535.613 342.133 535.637 342.16 535.664 cv
342.18 535.695 342.191 535.73 342.195 535.77 cv
cp
f
351.051 539.18 mo
351.047 539.789 350.98 540.34 350.852 540.824 cv
350.715 541.312 350.52 541.727 350.266 542.066 cv
350.008 542.41 349.691 542.672 349.32 542.852 cv
348.945 543.035 348.52 543.121 348.035 543.125 cv
347.809 543.121 347.602 543.102 347.414 543.059 cv
347.227 543.012 347.039 542.941 346.859 542.844 cv
346.672 542.746 346.492 542.621 346.313 542.469 cv
346.129 542.32 345.938 542.141 345.738 541.926 cv
345.738 542.781 li
345.738 542.828 345.727 542.863 345.707 542.891 cv
345.684 542.926 345.648 542.949 345.605 542.965 cv
345.555 542.98 345.496 542.992 345.43 543.008 cv
345.355 543.016 345.266 543.023 345.16 543.023 cv
345.051 543.023 344.965 543.016 344.895 543.008 cv
344.82 542.992 344.758 542.98 344.715 542.965 cv
344.664 542.949 344.633 542.926 344.621 542.891 cv
344.602 542.863 344.594 542.828 344.598 542.781 cv
344.598 532.371 li
344.594 532.332 344.605 532.297 344.625 532.262 cv
344.641 532.234 344.672 532.207 344.727 532.184 cv
344.773 532.164 344.84 532.148 344.926 532.137 cv
345.004 532.129 345.109 532.125 345.238 532.121 cv
345.367 532.125 345.473 532.129 345.559 532.137 cv
345.637 532.148 345.703 532.164 345.75 532.184 cv
345.797 532.207 345.828 532.234 345.852 532.262 cv
345.867 532.297 345.879 532.332 345.883 532.371 cv
345.883 536.57 li
346.09 536.359 346.293 536.18 346.488 536.035 cv
346.684 535.891 346.871 535.773 347.059 535.68 cv
347.242 535.594 347.43 535.527 347.621 535.48 cv
347.805 535.441 348.004 535.418 348.215 535.418 cv
348.719 535.418 349.152 535.52 349.52 535.723 cv
349.879 535.926 350.172 536.199 350.398 536.535 cv
350.621 536.879 350.789 537.277 350.895 537.734 cv
350.996 538.191 351.047 538.672 351.051 539.18 cv
cp
349.719 539.328 mo
349.715 538.973 349.688 538.625 349.637 538.285 cv
349.578 537.949 349.484 537.652 349.348 537.391 cv
349.211 537.133 349.031 536.922 348.809 536.762 cv
348.582 536.605 348.301 536.527 347.969 536.523 cv
347.801 536.527 347.637 536.551 347.477 536.594 cv
347.313 536.645 347.148 536.723 346.98 536.828 cv
346.813 536.941 346.637 537.082 346.461 537.25 cv
346.277 537.426 346.086 537.641 345.883 537.895 cv
345.883 540.691 li
346.238 541.125 346.578 541.457 346.902 541.68 cv
347.227 541.91 347.563 542.023 347.914 542.02 cv
348.234 542.023 348.512 541.945 348.746 541.785 cv
348.973 541.633 349.16 541.426 349.305 541.164 cv
349.449 540.91 349.555 540.621 349.621 540.301 cv
349.684 539.984 349.715 539.66 349.719 539.328 cv
cp
f
356.188 539.043 mo
356.188 539.246 356.164 539.383 356.117 539.461 cv
356.07 539.539 356 539.578 355.914 539.578 cv
352.656 539.578 li
352.563 539.578 352.496 539.539 352.449 539.457 cv
352.402 539.379 352.379 539.242 352.379 539.043 cv
352.379 538.848 352.402 538.707 352.449 538.629 cv
352.496 538.551 352.563 538.512 352.656 538.512 cv
355.914 538.512 li
355.953 538.512 355.992 538.52 356.027 538.535 cv
356.059 538.551 356.086 538.582 356.113 538.625 cv
356.133 538.672 356.152 538.727 356.168 538.793 cv
356.18 538.863 356.188 538.949 356.188 539.043 cv
cp
f
359.441 542.773 mo
359.438 542.816 359.43 542.852 359.41 542.883 cv
359.387 542.914 359.348 542.941 359.301 542.957 cv
359.246 542.977 359.18 542.988 359.094 543.004 cv
359.008 543.016 358.898 543.023 358.773 543.023 cv
358.645 543.023 358.539 543.016 358.453 543.004 cv
358.363 542.988 358.293 542.977 358.242 542.957 cv
358.188 542.941 358.152 542.914 358.133 542.883 cv
358.109 542.852 358.098 542.816 358.102 542.773 cv
358.102 533.094 li
358.098 533.055 358.109 533.02 358.137 532.984 cv
358.156 532.957 358.195 532.93 358.254 532.91 cv
358.305 532.895 358.375 532.879 358.465 532.863 cv
358.547 532.852 358.648 532.848 358.773 532.844 cv
358.898 532.848 359.008 532.852 359.094 532.863 cv
359.18 532.879 359.246 532.895 359.301 532.91 cv
359.348 532.93 359.387 532.957 359.41 532.984 cv
359.43 533.02 359.438 533.055 359.441 533.094 cv
cp
f
372.426 542.781 mo
372.422 542.828 372.414 542.863 372.395 542.887 cv
372.371 542.918 372.336 542.941 372.293 542.961 cv
372.242 542.98 372.176 542.992 372.098 543.008 cv
372.012 543.016 371.91 543.023 371.785 543.023 cv
371.652 543.023 371.543 543.016 371.465 543.008 cv
371.379 542.992 371.313 542.98 371.266 542.961 cv
371.211 542.941 371.176 542.918 371.16 542.887 cv
371.137 542.863 371.129 542.828 371.129 542.781 cv
371.129 538.52 li
371.129 538.227 371.102 537.957 371.051 537.711 cv
370.996 537.469 370.914 537.258 370.801 537.078 cv
370.688 536.902 370.543 536.766 370.367 536.672 cv
370.188 536.578 369.977 536.531 369.742 536.531 cv
369.445 536.531 369.148 536.648 368.852 536.875 cv
368.547 537.109 368.219 537.441 367.863 537.879 cv
367.863 542.781 li
367.859 542.828 367.848 542.863 367.832 542.887 cv
367.809 542.918 367.777 542.941 367.73 542.961 cv
367.68 542.98 367.613 542.992 367.531 543.008 cv
367.445 543.016 367.34 543.023 367.219 543.023 cv
367.098 543.023 366.996 543.016 366.91 543.008 cv
366.824 542.992 366.754 542.98 366.707 542.961 cv
366.652 542.941 366.621 542.918 366.605 542.887 cv
366.586 542.863 366.574 542.828 366.578 542.781 cv
366.578 538.52 li
366.574 538.227 366.547 537.957 366.492 537.711 cv
366.434 537.469 366.348 537.258 366.234 537.078 cv
366.121 536.902 365.977 536.766 365.805 536.672 cv
365.625 536.578 365.418 536.531 365.184 536.531 cv
364.883 536.531 364.586 536.648 364.285 536.875 cv
363.984 537.109 363.656 537.441 363.305 537.879 cv
363.305 542.781 li
363.301 542.828 363.289 542.863 363.273 542.887 cv
363.25 542.918 363.219 542.941 363.172 542.961 cv
363.125 542.98 363.059 542.992 362.98 543.008 cv
362.895 543.016 362.789 543.023 362.66 543.023 cv
362.531 543.023 362.426 543.016 362.348 543.008 cv
362.262 542.992 362.195 542.98 362.148 542.961 cv
362.094 542.941 362.063 542.918 362.047 542.887 cv
362.027 542.863 362.016 542.828 362.02 542.781 cv
362.02 535.77 li
362.016 535.73 362.023 535.695 362.043 535.664 cv
362.055 535.637 362.086 535.613 362.137 535.586 cv
362.18 535.566 362.242 535.551 362.316 535.539 cv
362.387 535.535 362.48 535.531 362.605 535.527 cv
362.715 535.531 362.813 535.535 362.891 535.539 cv
362.965 535.551 363.023 535.566 363.066 535.586 cv
363.105 535.613 363.133 535.637 363.152 535.664 cv
363.168 535.695 363.176 535.73 363.18 535.77 cv
363.18 536.695 li
363.57 536.254 363.953 535.934 364.328 535.727 cv
364.695 535.523 365.074 535.418 365.457 535.418 cv
365.746 535.418 366.004 535.453 366.238 535.52 cv
366.465 535.59 366.672 535.684 366.852 535.805 cv
367.027 535.926 367.176 536.07 367.305 536.238 cv
367.426 536.41 367.531 536.602 367.617 536.805 cv
367.848 536.555 368.07 536.34 368.281 536.16 cv
368.492 535.988 368.695 535.844 368.891 535.73 cv
369.086 535.625 369.273 535.547 369.457 535.492 cv
369.641 535.445 369.828 535.418 370.016 535.418 cv
370.469 535.418 370.848 535.5 371.152 535.656 cv
371.457 535.82 371.703 536.031 371.898 536.293 cv
372.086 536.559 372.223 536.867 372.305 537.223 cv
372.383 537.578 372.422 537.953 372.426 538.348 cv
cp
f
380.059 542.789 mo
380.055 542.852 380.035 542.898 379.996 542.93 cv
379.953 542.961 379.895 542.984 379.824 543 cv
379.746 543.016 379.641 543.023 379.504 543.023 cv
379.367 543.023 379.258 543.016 379.18 543 cv
379.094 542.984 379.035 542.961 379.004 542.93 cv
378.965 542.898 378.949 542.852 378.953 542.789 cv
378.953 542.09 li
378.645 542.418 378.301 542.672 377.926 542.852 cv
377.547 543.035 377.148 543.121 376.73 543.125 cv
376.355 543.121 376.023 543.074 375.727 542.98 cv
375.43 542.883 375.176 542.746 374.965 542.562 cv
374.754 542.383 374.59 542.16 374.473 541.895 cv
374.355 541.633 374.297 541.332 374.301 540.988 cv
374.297 540.598 374.375 540.254 374.539 539.961 cv
374.695 539.672 374.93 539.43 375.234 539.238 cv
375.535 539.047 375.902 538.902 376.34 538.805 cv
376.773 538.711 377.266 538.664 377.813 538.66 cv
378.781 538.66 li
378.781 538.113 li
378.777 537.844 378.75 537.605 378.695 537.398 cv
378.637 537.191 378.543 537.02 378.418 536.879 cv
378.285 536.742 378.121 536.637 377.922 536.566 cv
377.715 536.496 377.465 536.461 377.176 536.461 cv
376.855 536.461 376.57 536.5 376.32 536.574 cv
376.063 536.652 375.844 536.734 375.656 536.824 cv
375.469 536.918 375.309 537.004 375.184 537.074 cv
375.051 537.152 374.957 537.187 374.898 537.187 cv
374.855 537.187 374.82 537.18 374.789 537.156 cv
374.758 537.141 374.73 537.109 374.707 537.062 cv
374.684 537.023 374.664 536.969 374.656 536.902 cv
374.641 536.84 374.637 536.77 374.641 536.687 cv
374.637 536.562 374.645 536.457 374.668 536.379 cv
374.684 536.305 374.73 536.234 374.801 536.164 cv
374.871 536.098 374.992 536.02 375.164 535.93 cv
375.336 535.84 375.531 535.758 375.754 535.68 cv
375.977 535.609 376.223 535.547 376.488 535.492 cv
376.754 535.445 377.02 535.418 377.293 535.418 cv
377.793 535.418 378.223 535.477 378.574 535.59 cv
378.926 535.707 379.211 535.875 379.434 536.094 cv
379.648 536.316 379.809 536.59 379.91 536.914 cv
380.008 537.246 380.055 537.629 380.059 538.059 cv
cp
378.781 539.586 mo
377.68 539.586 li
377.324 539.59 377.02 539.621 376.762 539.676 cv
376.5 539.738 376.285 539.824 376.113 539.941 cv
375.941 540.059 375.816 540.199 375.738 540.363 cv
375.656 540.527 375.613 540.715 375.617 540.926 cv
375.613 541.293 375.73 541.586 375.961 541.797 cv
376.191 542.016 376.516 542.121 376.934 542.121 cv
377.27 542.121 377.582 542.035 377.871 541.863 cv
378.16 541.691 378.461 541.43 378.781 541.074 cv
cp
f
388.277 536.086 mo
388.273 536.27 388.25 536.402 388.203 536.48 cv
388.152 536.562 388.09 536.602 388.016 536.602 cv
387.008 536.602 li
387.188 536.789 387.316 536.996 387.391 537.223 cv
387.461 537.449 387.496 537.684 387.5 537.926 cv
387.496 538.332 387.43 538.691 387.305 539.004 cv
387.172 539.316 386.988 539.582 386.746 539.793 cv
386.504 540.012 386.215 540.176 385.887 540.289 cv
385.551 540.406 385.184 540.465 384.781 540.461 cv
384.492 540.465 384.219 540.426 383.965 540.348 cv
383.703 540.273 383.508 540.18 383.371 540.062 cv
383.277 540.16 383.199 540.266 383.141 540.383 cv
383.078 540.504 383.047 540.641 383.051 540.793 cv
383.047 540.977 383.133 541.129 383.305 541.246 cv
383.473 541.371 383.695 541.434 383.977 541.441 cv
385.809 541.52 li
386.156 541.531 386.473 541.578 386.766 541.664 cv
387.055 541.75 387.309 541.875 387.523 542.031 cv
387.734 542.191 387.902 542.383 388.023 542.613 cv
388.141 542.848 388.199 543.117 388.203 543.422 cv
388.199 543.742 388.133 544.047 388 544.34 cv
387.863 544.629 387.656 544.883 387.379 545.105 cv
387.098 545.324 386.742 545.5 386.313 545.629 cv
385.883 545.754 385.375 545.816 384.789 545.82 cv
384.219 545.816 383.734 545.77 383.34 545.676 cv
382.941 545.578 382.617 545.445 382.363 545.281 cv
382.109 545.113 381.926 544.918 381.813 544.687 cv
381.695 544.453 381.637 544.199 381.641 543.934 cv
381.637 543.762 381.656 543.598 381.703 543.437 cv
381.742 543.273 381.805 543.121 381.891 542.977 cv
381.973 542.832 382.082 542.695 382.211 542.559 cv
382.336 542.43 382.48 542.297 382.652 542.168 cv
382.395 542.039 382.207 541.875 382.086 541.676 cv
381.965 541.48 381.906 541.27 381.906 541.035 cv
381.906 540.723 381.969 540.437 382.098 540.187 cv
382.227 539.937 382.387 539.715 382.582 539.516 cv
382.418 539.324 382.293 539.109 382.199 538.867 cv
382.105 538.629 382.059 538.336 382.059 537.988 cv
382.059 537.594 382.125 537.234 382.262 536.914 cv
382.395 536.598 382.582 536.332 382.824 536.113 cv
383.063 535.898 383.348 535.73 383.684 535.609 cv
384.016 535.496 384.383 535.437 384.781 535.434 cv
384.992 535.437 385.191 535.449 385.375 535.469 cv
385.559 535.496 385.73 535.527 385.895 535.566 cv
388.016 535.566 li
388.102 535.57 388.168 535.613 388.211 535.695 cv
388.254 535.785 388.273 535.914 388.277 536.086 cv
cp
386.27 537.934 mo
386.266 537.461 386.133 537.09 385.875 536.816 cv
385.609 536.551 385.238 536.414 384.758 536.414 cv
384.504 536.414 384.285 536.457 384.105 536.539 cv
383.918 536.625 383.766 536.738 383.645 536.883 cv
383.523 537.031 383.434 537.199 383.375 537.387 cv
383.313 537.574 383.281 537.773 383.285 537.98 cv
383.281 538.445 383.414 538.809 383.676 539.074 cv
383.938 539.34 384.305 539.473 384.781 539.469 cv
385.031 539.473 385.25 539.434 385.441 539.348 cv
385.625 539.27 385.781 539.156 385.906 539.016 cv
386.027 538.875 386.117 538.711 386.18 538.52 cv
386.234 538.336 386.266 538.141 386.27 537.934 cv
cp
386.914 543.492 mo
386.91 543.187 386.785 542.957 386.543 542.793 cv
386.293 542.633 385.961 542.543 385.543 542.531 cv
383.727 542.469 li
383.559 542.602 383.422 542.727 383.32 542.84 cv
383.211 542.957 383.129 543.066 383.066 543.176 cv
383.004 543.281 382.961 543.387 382.938 543.492 cv
382.914 543.594 382.902 543.699 382.902 543.809 cv
382.902 544.145 383.07 544.398 383.414 544.578 cv
383.754 544.75 384.234 544.84 384.852 544.84 cv
385.238 544.84 385.563 544.801 385.828 544.727 cv
386.086 544.648 386.297 544.547 386.461 544.426 cv
386.617 544.297 386.734 544.156 386.809 543.996 cv
386.875 543.836 386.91 543.668 386.914 543.492 cv
cp
f
395.84 538.973 mo
395.836 539.176 395.785 539.316 395.688 539.402 cv
395.582 539.488 395.465 539.531 395.34 539.531 cv
390.723 539.531 li
390.719 539.922 390.758 540.273 390.84 540.586 cv
390.914 540.898 391.047 541.168 391.23 541.387 cv
391.41 541.613 391.645 541.785 391.941 541.902 cv
392.23 542.027 392.59 542.086 393.016 542.082 cv
393.348 542.086 393.645 542.059 393.906 542 cv
394.168 541.949 394.395 541.887 394.586 541.816 cv
394.773 541.75 394.93 541.691 395.055 541.633 cv
395.176 541.582 395.27 541.555 395.332 541.551 cv
395.367 541.555 395.398 541.562 395.43 541.578 cv
395.457 541.598 395.48 541.625 395.5 541.66 cv
395.512 541.699 395.523 541.75 395.535 541.812 cv
395.539 541.879 395.543 541.957 395.547 542.051 cv
395.543 542.121 395.539 542.18 395.539 542.227 cv
395.531 542.273 395.527 542.316 395.52 542.355 cv
395.512 542.395 395.496 542.43 395.48 542.461 cv
395.457 542.492 395.434 542.523 395.41 542.551 cv
395.379 542.582 395.297 542.629 395.156 542.691 cv
395.016 542.758 394.832 542.82 394.609 542.883 cv
394.383 542.945 394.125 543 393.832 543.051 cv
393.539 543.098 393.227 543.121 392.895 543.125 cv
392.316 543.121 391.809 543.043 391.379 542.883 cv
390.941 542.723 390.578 542.484 390.285 542.168 cv
389.984 541.852 389.762 541.457 389.613 540.977 cv
389.465 540.5 389.391 539.941 389.391 539.305 cv
389.391 538.707 389.465 538.168 389.621 537.684 cv
389.773 537.207 390 536.797 390.297 536.461 cv
390.59 536.125 390.945 535.867 391.359 535.687 cv
391.773 535.508 392.238 535.418 392.754 535.418 cv
393.305 535.418 393.773 535.508 394.16 535.684 cv
394.547 535.863 394.863 536.102 395.117 536.398 cv
395.363 536.699 395.547 537.051 395.664 537.449 cv
395.777 537.855 395.836 538.285 395.84 538.738 cv
cp
394.547 538.59 mo
394.563 537.914 394.41 537.383 394.094 537 cv
393.777 536.617 393.309 536.426 392.691 536.422 cv
392.367 536.426 392.086 536.484 391.848 536.602 cv
391.605 536.723 391.406 536.883 391.246 537.078 cv
391.082 537.277 390.957 537.508 390.871 537.77 cv
390.781 538.031 390.73 538.305 390.723 538.59 cv
cp
f
402.207 540.871 mo
402.203 541.234 402.137 541.555 402.008 541.832 cv
401.875 542.113 401.688 542.348 401.445 542.539 cv
401.199 542.734 400.906 542.879 400.57 542.977 cv
400.23 543.074 399.859 543.121 399.457 543.125 cv
399.203 543.121 398.965 543.102 398.742 543.066 cv
398.516 543.023 398.316 542.977 398.137 542.918 cv
397.957 542.859 397.805 542.797 397.68 542.73 cv
397.555 542.668 397.461 542.609 397.406 542.555 cv
397.348 542.504 397.309 542.434 397.285 542.336 cv
397.258 542.246 397.246 542.117 397.246 541.957 cv
397.246 541.859 397.25 541.777 397.262 541.707 cv
397.27 541.641 397.281 541.586 397.301 541.543 cv
397.313 541.504 397.336 541.473 397.363 541.453 cv
397.391 541.437 397.422 541.43 397.461 541.426 cv
397.516 541.43 397.602 541.465 397.715 541.531 cv
397.824 541.605 397.961 541.684 398.129 541.762 cv
398.289 541.848 398.48 541.922 398.707 541.992 cv
398.926 542.062 399.184 542.098 399.48 542.098 cv
399.695 542.098 399.895 542.074 400.074 542.027 cv
400.25 541.98 400.402 541.914 400.531 541.82 cv
400.66 541.734 400.762 541.617 400.832 541.473 cv
400.902 541.336 400.938 541.168 400.938 540.973 cv
400.938 540.777 400.887 540.613 400.785 540.477 cv
400.684 540.344 400.547 540.223 400.383 540.117 cv
400.215 540.016 400.031 539.926 399.824 539.84 cv
399.613 539.762 399.398 539.676 399.18 539.586 cv
398.961 539.5 398.746 539.398 398.535 539.285 cv
398.324 539.176 398.133 539.043 397.969 538.879 cv
397.797 538.723 397.664 538.527 397.566 538.301 cv
397.461 538.078 397.41 537.812 397.414 537.5 cv
397.41 537.227 397.465 536.961 397.574 536.707 cv
397.68 536.457 397.84 536.238 398.055 536.047 cv
398.266 535.859 398.531 535.707 398.852 535.59 cv
399.172 535.477 399.543 535.418 399.973 535.418 cv
400.156 535.418 400.344 535.434 400.531 535.465 cv
400.715 535.496 400.883 535.535 401.039 535.582 cv
401.188 535.629 401.316 535.68 401.426 535.734 cv
401.527 535.789 401.609 535.84 401.668 535.879 cv
401.719 535.926 401.754 535.961 401.777 535.988 cv
401.793 536.02 401.809 536.055 401.816 536.09 cv
401.824 536.133 401.832 536.18 401.84 536.234 cv
401.848 536.293 401.852 536.363 401.852 536.445 cv
401.852 536.535 401.848 536.613 401.84 536.676 cv
401.832 536.746 401.816 536.797 401.801 536.836 cv
401.777 536.879 401.758 536.91 401.734 536.926 cv
401.707 536.945 401.676 536.953 401.648 536.953 cv
401.598 536.953 401.531 536.926 401.445 536.867 cv
401.355 536.812 401.242 536.75 401.102 536.684 cv
400.961 536.621 400.793 536.562 400.605 536.5 cv
400.414 536.445 400.199 536.414 399.957 536.414 cv
399.734 536.414 399.543 536.441 399.379 536.488 cv
399.211 536.543 399.074 536.613 398.969 536.699 cv
398.863 536.793 398.781 536.898 398.73 537.023 cv
398.672 537.148 398.645 537.285 398.648 537.43 cv
398.645 537.633 398.695 537.801 398.801 537.937 cv
398.902 538.078 399.039 538.199 399.207 538.301 cv
399.371 538.406 399.563 538.5 399.777 538.582 cv
399.988 538.668 400.203 538.754 400.426 538.84 cv
400.645 538.93 400.863 539.031 401.082 539.137 cv
401.297 539.246 401.488 539.375 401.656 539.531 cv
401.82 539.687 401.953 539.875 402.055 540.094 cv
402.152 540.312 402.203 540.574 402.207 540.871 cv
cp
f
166.238 11.59 mo
166.234 12.43 166.133 13.18 165.926 13.836 cv
165.719 14.5 165.41 15.059 165 15.516 cv
164.59 15.977 164.082 16.328 163.477 16.566 cv
162.871 16.809 162.172 16.926 161.379 16.93 cv
160.59 16.926 159.902 16.824 159.32 16.621 cv
158.734 16.418 158.246 16.105 157.859 15.684 cv
157.469 15.262 157.18 14.727 156.984 14.078 cv
156.789 13.43 156.691 12.66 156.695 11.77 cv
156.691 10.957 156.793 10.227 157.004 9.57001 cv
157.207 8.922 157.516 8.367 157.93 7.90601 cv
158.336 7.453 158.844 7.10199 159.453 6.85498 cv
160.055 6.61298 160.758 6.492 161.563 6.48798 cv
162.324 6.492 163 6.59399 163.586 6.79303 cv
164.168 6.99597 164.656 7.30499 165.051 7.72699 cv
165.441 8.14801 165.738 8.67999 165.938 9.32001 cv
166.137 9.961 166.234 10.719 166.238 11.59 cv
cp
164.09 11.699 mo
164.086 11.172 164.043 10.691 163.965 10.258 cv
163.879 9.82397 163.738 9.453 163.539 9.14099 cv
163.336 8.83197 163.07 8.59399 162.738 8.42603 cv
162.406 8.258 161.992 8.172 161.496 8.172 cv
160.988 8.172 160.566 8.27002 160.23 8.45697 cv
159.895 8.64801 159.621 8.89801 159.414 9.21503 cv
159.203 9.53497 159.055 9.90601 158.973 10.328 cv
158.883 10.75 158.84 11.199 158.844 11.668 cv
158.84 12.223 158.883 12.719 158.969 13.156 cv
159.051 13.598 159.191 13.973 159.391 14.281 cv
159.586 14.594 159.852 14.828 160.184 14.992 cv
160.516 15.156 160.934 15.238 161.441 15.238 cv
161.941 15.238 162.359 15.145 162.699 14.957 cv
163.035 14.77 163.309 14.516 163.52 14.195 cv
163.723 13.875 163.871 13.5 163.961 13.07 cv
164.043 12.641 164.086 12.184 164.09 11.699 cv
cp
f
174.238 9.52698 mo
174.234 9.55499 174.234 9.586 174.234 9.62097 cv
174.23 9.65997 174.227 9.69897 174.219 9.742 cv
174.211 9.78497 174.199 9.836 174.188 9.89099 cv
174.172 9.94897 174.156 10.016 174.137 10.086 cv
172.051 16.375 li
172.023 16.465 171.988 16.539 171.945 16.59 cv
171.898 16.648 171.824 16.691 171.727 16.719 cv
171.621 16.75 171.484 16.766 171.313 16.781 cv
171.137 16.789 170.91 16.797 170.633 16.797 cv
170.355 16.797 170.129 16.789 169.957 16.777 cv
169.781 16.762 169.645 16.742 169.547 16.711 cv
169.445 16.684 169.375 16.641 169.332 16.582 cv
169.285 16.531 169.25 16.461 169.227 16.375 cv
167.141 10.086 li
167.109 9.98401 167.082 9.89099 167.066 9.80902 cv
167.043 9.72699 167.035 9.66803 167.035 9.62903 cv
167.031 9.59802 167.027 9.56201 167.031 9.52698 cv
167.027 9.47699 167.043 9.42999 167.074 9.39099 cv
167.102 9.35199 167.152 9.32001 167.227 9.29303 cv
167.297 9.27002 167.395 9.25 167.523 9.23798 cv
167.648 9.22998 167.809 9.22699 168.004 9.22302 cv
168.215 9.22699 168.387 9.23401 168.52 9.242 cv
168.645 9.258 168.75 9.27301 168.828 9.297 cv
168.902 9.32001 168.953 9.35498 168.988 9.39801 cv
169.016 9.44501 169.043 9.5 169.066 9.55902 cv
170.648 14.66 li
170.695 14.855 li
170.742 14.66 li
172.301 9.55902 li
172.313 9.5 172.336 9.44501 172.371 9.39801 cv
172.402 9.35498 172.457 9.32001 172.531 9.297 cv
172.602 9.27301 172.699 9.258 172.824 9.242 cv
172.945 9.23401 173.105 9.22699 173.305 9.22302 cv
173.496 9.22699 173.652 9.22998 173.773 9.23798 cv
173.895 9.25 173.988 9.27002 174.059 9.29303 cv
174.125 9.32001 174.172 9.35199 174.199 9.39099 cv
174.223 9.42999 174.234 9.47699 174.238 9.52698 cv
cp
f
181.715 12.809 mo
181.711 13.047 181.66 13.223 181.555 13.336 cv
181.445 13.453 181.297 13.512 181.117 13.508 cv
176.883 13.508 li
176.879 13.809 176.914 14.078 176.988 14.316 cv
177.055 14.559 177.168 14.762 177.324 14.93 cv
177.477 15.102 177.672 15.23 177.914 15.316 cv
178.152 15.406 178.441 15.449 178.785 15.449 cv
179.125 15.449 179.426 15.426 179.688 15.375 cv
179.945 15.328 180.172 15.273 180.363 15.211 cv
180.551 15.152 180.707 15.098 180.836 15.047 cv
180.957 15 181.059 14.977 181.141 14.973 cv
181.184 14.977 181.223 14.984 181.258 15 cv
181.285 15.02 181.313 15.051 181.332 15.098 cv
181.352 15.145 181.363 15.211 181.375 15.297 cv
181.379 15.383 181.383 15.492 181.387 15.621 cv
181.383 15.738 181.383 15.836 181.379 15.914 cv
181.371 15.996 181.363 16.062 181.355 16.117 cv
181.344 16.176 181.328 16.227 181.309 16.262 cv
181.289 16.305 181.262 16.34 181.23 16.375 cv
181.195 16.414 181.102 16.465 180.953 16.523 cv
180.797 16.59 180.605 16.652 180.375 16.707 cv
180.137 16.77 179.867 16.816 179.57 16.863 cv
179.266 16.902 178.945 16.926 178.605 16.93 cv
177.984 16.926 177.441 16.852 176.98 16.695 cv
176.512 16.543 176.125 16.305 175.816 15.988 cv
175.5 15.672 175.266 15.273 175.117 14.789 cv
174.961 14.309 174.887 13.742 174.891 13.086 cv
174.887 12.473 174.965 11.914 175.129 11.418 cv
175.285 10.922 175.52 10.504 175.832 10.156 cv
176.137 9.81201 176.512 9.547 176.949 9.36298 cv
177.387 9.18402 177.879 9.09399 178.434 9.09003 cv
179.012 9.09399 179.512 9.17999 179.926 9.34802 cv
180.34 9.52301 180.676 9.76202 180.941 10.062 cv
181.203 10.367 181.398 10.727 181.527 11.141 cv
181.648 11.559 181.711 12.008 181.715 12.496 cv
cp
179.813 12.246 mo
179.824 11.695 179.715 11.262 179.48 10.949 cv
179.246 10.637 178.879 10.48 178.387 10.477 cv
178.137 10.48 177.922 10.527 177.738 10.617 cv
177.551 10.715 177.398 10.84 177.277 10.996 cv
177.152 11.156 177.059 11.344 176.996 11.559 cv
176.93 11.773 176.891 12.004 176.883 12.246 cv
cp
f
187.789 10.18 mo
187.789 10.371 187.781 10.523 187.773 10.641 cv
187.758 10.762 187.742 10.855 187.727 10.922 cv
187.703 10.992 187.676 11.039 187.645 11.062 cv
187.605 11.09 187.563 11.102 187.516 11.102 cv
187.469 11.102 187.422 11.094 187.375 11.074 cv
187.32 11.059 187.262 11.039 187.199 11.016 cv
187.129 10.996 187.059 10.977 186.984 10.957 cv
186.902 10.941 186.816 10.934 186.727 10.93 cv
186.613 10.934 186.504 10.953 186.398 10.996 cv
186.289 11.043 186.176 11.113 186.063 11.203 cv
185.941 11.297 185.82 11.422 185.695 11.574 cv
185.566 11.734 185.43 11.926 185.285 12.152 cv
185.285 16.484 li
185.281 16.539 185.266 16.582 185.238 16.621 cv
185.203 16.66 185.148 16.695 185.078 16.719 cv
185 16.746 184.902 16.762 184.777 16.777 cv
184.652 16.789 184.492 16.797 184.305 16.797 cv
184.109 16.797 183.953 16.789 183.828 16.777 cv
183.703 16.762 183.602 16.746 183.527 16.719 cv
183.449 16.695 183.395 16.66 183.367 16.621 cv
183.332 16.582 183.316 16.539 183.32 16.484 cv
183.32 9.53497 li
183.316 9.48798 183.332 9.44098 183.359 9.39801 cv
183.383 9.36298 183.43 9.33197 183.5 9.30103 cv
183.566 9.27698 183.652 9.258 183.762 9.242 cv
183.867 9.23401 184 9.22699 184.164 9.22302 cv
184.328 9.22699 184.465 9.23401 184.574 9.242 cv
184.68 9.258 184.766 9.27698 184.828 9.30103 cv
184.887 9.33197 184.93 9.36298 184.957 9.39801 cv
184.98 9.44098 184.992 9.48798 184.996 9.53497 cv
184.996 10.398 li
185.176 10.141 185.348 9.92999 185.512 9.758 cv
185.668 9.59399 185.824 9.45697 185.973 9.35498 cv
186.117 9.258 186.262 9.19098 186.406 9.14801 cv
186.551 9.11298 186.695 9.09399 186.844 9.09003 cv
186.91 9.09399 186.984 9.09802 187.063 9.10199 cv
187.141 9.11298 187.219 9.125 187.305 9.14099 cv
187.383 9.15997 187.457 9.17999 187.523 9.203 cv
187.582 9.22699 187.629 9.25403 187.66 9.27698 cv
187.688 9.30902 187.707 9.336 187.723 9.36298 cv
187.734 9.39801 187.746 9.44098 187.758 9.492 cv
187.766 9.55103 187.773 9.633 187.781 9.73798 cv
187.785 9.84802 187.789 9.99597 187.789 10.18 cv
cp
f
194.547 16.508 mo
194.543 16.586 194.516 16.641 194.469 16.68 cv
194.414 16.723 194.332 16.75 194.223 16.77 cv
194.105 16.785 193.941 16.797 193.727 16.797 cv
193.488 16.797 193.316 16.785 193.215 16.77 cv
193.105 16.75 193.031 16.723 192.992 16.68 cv
192.945 16.641 192.926 16.586 192.926 16.508 cv
192.926 15.957 li
192.637 16.266 192.309 16.504 191.945 16.672 cv
191.578 16.844 191.172 16.926 190.727 16.93 cv
190.355 16.926 190.016 16.879 189.707 16.785 cv
189.398 16.691 189.133 16.551 188.906 16.355 cv
188.68 16.168 188.504 15.934 188.379 15.652 cv
188.254 15.375 188.191 15.047 188.195 14.668 cv
188.191 14.27 188.27 13.918 188.43 13.613 cv
188.586 13.316 188.824 13.07 189.141 12.875 cv
189.453 12.684 189.844 12.539 190.313 12.441 cv
190.781 12.352 191.324 12.305 191.941 12.301 cv
192.621 12.301 li
192.621 11.879 li
192.621 11.664 192.598 11.473 192.555 11.309 cv
192.508 11.148 192.434 11.012 192.336 10.898 cv
192.23 10.793 192.098 10.711 191.93 10.656 cv
191.758 10.605 191.547 10.582 191.305 10.578 cv
190.973 10.582 190.68 10.617 190.426 10.687 cv
190.164 10.762 189.938 10.844 189.742 10.93 cv
189.543 11.023 189.379 11.102 189.25 11.172 cv
189.113 11.246 189.004 11.285 188.926 11.281 cv
188.863 11.285 188.813 11.266 188.773 11.227 cv
188.727 11.191 188.691 11.141 188.664 11.07 cv
188.633 11.008 188.609 10.922 188.598 10.82 cv
188.578 10.723 188.57 10.613 188.574 10.492 cv
188.57 10.332 188.586 10.207 188.613 10.109 cv
188.637 10.02 188.684 9.93402 188.762 9.85498 cv
188.832 9.78101 188.961 9.69897 189.145 9.60901 cv
189.324 9.52002 189.535 9.43402 189.781 9.35498 cv
190.023 9.27698 190.293 9.21503 190.582 9.164 cv
190.871 9.117 191.168 9.09399 191.477 9.09003 cv
192.02 9.09399 192.484 9.14502 192.871 9.25 cv
193.258 9.35901 193.578 9.52301 193.828 9.742 cv
194.078 9.961 194.258 10.246 194.375 10.594 cv
194.484 10.945 194.543 11.359 194.547 11.832 cv
cp
192.621 13.531 mo
191.871 13.531 li
191.555 13.535 191.285 13.559 191.063 13.602 cv
190.836 13.652 190.652 13.723 190.516 13.812 cv
190.371 13.91 190.27 14.023 190.207 14.152 cv
190.141 14.289 190.105 14.437 190.109 14.605 cv
190.105 14.898 190.199 15.129 190.387 15.293 cv
190.57 15.461 190.828 15.543 191.156 15.543 cv
191.43 15.543 191.68 15.473 191.914 15.332 cv
192.141 15.191 192.379 14.988 192.621 14.715 cv
cp
f
198.469 16.484 mo
198.465 16.539 198.449 16.582 198.422 16.621 cv
198.387 16.66 198.332 16.695 198.262 16.719 cv
198.184 16.746 198.086 16.762 197.961 16.777 cv
197.836 16.789 197.676 16.797 197.488 16.797 cv
197.293 16.797 197.137 16.789 197.012 16.777 cv
196.887 16.762 196.785 16.746 196.711 16.719 cv
196.633 16.695 196.578 16.66 196.551 16.621 cv
196.516 16.582 196.5 16.539 196.504 16.484 cv
196.504 6.23798 li
196.5 6.18701 196.516 6.14099 196.551 6.09802 cv
196.578 6.05902 196.633 6.02301 196.711 5.992 cv
196.785 5.96503 196.887 5.94501 197.012 5.92603 cv
197.137 5.914 197.293 5.90601 197.488 5.90198 cv
197.676 5.90601 197.836 5.914 197.961 5.92603 cv
198.086 5.94501 198.184 5.96503 198.262 5.992 cv
198.332 6.02301 198.387 6.05902 198.422 6.09802 cv
198.449 6.14099 198.465 6.18701 198.469 6.23798 cv
cp
f
202.441 16.484 mo
202.438 16.539 202.422 16.582 202.395 16.621 cv
202.359 16.66 202.305 16.695 202.234 16.719 cv
202.156 16.746 202.059 16.762 201.934 16.777 cv
201.809 16.789 201.648 16.797 201.461 16.797 cv
201.266 16.797 201.109 16.789 200.984 16.777 cv
200.859 16.762 200.758 16.746 200.684 16.719 cv
200.605 16.695 200.551 16.66 200.523 16.621 cv
200.488 16.582 200.473 16.539 200.477 16.484 cv
200.477 6.23798 li
200.473 6.18701 200.488 6.14099 200.523 6.09802 cv
200.551 6.05902 200.605 6.02301 200.684 5.992 cv
200.758 5.96503 200.859 5.94501 200.984 5.92603 cv
201.109 5.914 201.266 5.90601 201.461 5.90198 cv
201.648 5.90601 201.809 5.914 201.934 5.92603 cv
202.059 5.94501 202.156 5.96503 202.234 5.992 cv
202.305 6.02301 202.359 6.05902 202.395 6.09802 cv
202.422 6.14099 202.438 6.18701 202.441 6.23798 cv
cp
f
214.105 13.727 mo
214.102 14.258 214.004 14.723 213.809 15.121 cv
213.609 15.523 213.344 15.859 213.008 16.125 cv
212.668 16.395 212.27 16.594 211.82 16.727 cv
211.367 16.859 210.887 16.926 210.375 16.93 cv
210.023 16.926 209.699 16.898 209.402 16.844 cv
209.102 16.785 208.84 16.719 208.613 16.637 cv
208.383 16.559 208.191 16.473 208.039 16.383 cv
207.887 16.297 207.777 16.219 207.711 16.148 cv
207.641 16.082 207.59 15.984 207.566 15.859 cv
207.535 15.734 207.523 15.551 207.523 15.309 cv
207.523 15.148 207.527 15.016 207.539 14.902 cv
207.547 14.797 207.563 14.707 207.59 14.637 cv
207.609 14.57 207.641 14.523 207.684 14.492 cv
207.719 14.469 207.766 14.453 207.816 14.449 cv
207.887 14.453 207.988 14.496 208.125 14.578 cv
208.254 14.668 208.426 14.762 208.637 14.863 cv
208.844 14.969 209.09 15.066 209.379 15.148 cv
209.664 15.238 210 15.281 210.383 15.277 cv
210.633 15.281 210.855 15.25 211.051 15.187 cv
211.246 15.129 211.414 15.043 211.555 14.934 cv
211.691 14.824 211.797 14.691 211.871 14.531 cv
211.941 14.371 211.977 14.191 211.98 13.992 cv
211.977 13.766 211.914 13.57 211.793 13.402 cv
211.664 13.242 211.5 13.098 211.305 12.969 cv
211.102 12.844 210.875 12.723 210.621 12.609 cv
210.367 12.5 210.105 12.383 209.836 12.254 cv
209.563 12.133 209.301 11.988 209.047 11.828 cv
208.793 11.672 208.566 11.484 208.367 11.262 cv
208.164 11.043 208 10.781 207.879 10.477 cv
207.754 10.176 207.691 9.81598 207.695 9.39502 cv
207.691 8.914 207.781 8.48798 207.961 8.12097 cv
208.137 7.758 208.379 7.453 208.688 7.20697 cv
208.988 6.96899 209.348 6.789 209.762 6.66803 cv
210.176 6.55103 210.613 6.492 211.074 6.48798 cv
211.313 6.492 211.551 6.508 211.793 6.54303 cv
212.031 6.58197 212.254 6.633 212.461 6.69098 cv
212.668 6.75403 212.852 6.82397 213.016 6.89801 cv
213.172 6.97998 213.281 7.04303 213.336 7.09399 cv
213.387 7.14801 213.422 7.19501 213.441 7.22699 cv
213.457 7.26599 213.473 7.31201 213.488 7.37097 cv
213.5 7.43402 213.508 7.508 213.516 7.59802 cv
213.52 7.69098 213.523 7.80499 213.523 7.93701 cv
213.523 8.09003 213.52 8.21899 213.512 8.32001 cv
213.504 8.42603 213.488 8.51202 213.473 8.57397 cv
213.449 8.64502 213.426 8.69098 213.395 8.72302 cv
213.359 8.75403 213.313 8.77002 213.258 8.77002 cv
213.199 8.77002 213.109 8.73401 212.984 8.65997 cv
212.859 8.59003 212.703 8.51202 212.523 8.422 cv
212.34 8.34003 212.133 8.26202 211.895 8.19098 cv
211.652 8.125 211.387 8.09003 211.105 8.086 cv
210.879 8.09003 210.688 8.117 210.523 8.16803 cv
210.355 8.22302 210.215 8.297 210.105 8.39099 cv
209.992 8.48798 209.91 8.60498 209.855 8.73798 cv
209.801 8.87903 209.773 9.02002 209.773 9.16803 cv
209.773 9.39502 209.832 9.59003 209.957 9.75 cv
210.074 9.914 210.238 10.059 210.449 10.184 cv
210.652 10.312 210.887 10.434 211.145 10.543 cv
211.402 10.66 211.668 10.777 211.941 10.898 cv
212.211 11.027 212.473 11.168 212.734 11.324 cv
212.992 11.48 213.227 11.672 213.43 11.891 cv
213.633 12.117 213.793 12.375 213.918 12.672 cv
214.039 12.969 214.102 13.32 214.105 13.727 cv
cp
f
222.559 12.906 mo
222.559 13.527 222.492 14.086 222.359 14.582 cv
222.227 15.078 222.031 15.5 221.777 15.848 cv
221.523 16.195 221.207 16.465 220.828 16.648 cv
220.445 16.836 220.012 16.926 219.527 16.93 cv
219.32 16.926 219.133 16.906 218.969 16.871 cv
218.797 16.828 218.633 16.77 218.477 16.691 cv
218.316 16.613 218.16 16.516 218.008 16.391 cv
217.848 16.273 217.688 16.133 217.523 15.969 cv
217.523 19.242 li
217.52 19.289 217.504 19.336 217.477 19.383 cv
217.441 19.422 217.387 19.457 217.316 19.488 cv
217.238 19.512 217.141 19.535 217.016 19.555 cv
216.891 19.566 216.73 19.574 216.543 19.578 cv
216.348 19.574 216.191 19.566 216.066 19.555 cv
215.941 19.535 215.84 19.512 215.766 19.488 cv
215.688 19.457 215.633 19.422 215.605 19.383 cv
215.57 19.336 215.555 19.289 215.559 19.242 cv
215.559 9.53497 li
215.555 9.48798 215.57 9.44098 215.598 9.39801 cv
215.621 9.36298 215.664 9.33197 215.734 9.30103 cv
215.797 9.27698 215.883 9.258 215.992 9.242 cv
216.094 9.23401 216.23 9.22699 216.395 9.22302 cv
216.551 9.22699 216.68 9.23401 216.785 9.242 cv
216.891 9.258 216.977 9.27698 217.043 9.30103 cv
217.105 9.33197 217.152 9.36298 217.18 9.39801 cv
217.203 9.44098 217.215 9.48798 217.219 9.53497 cv
217.219 10.352 li
217.418 10.145 217.617 9.96503 217.816 9.80499 cv
218.008 9.64801 218.207 9.51599 218.41 9.40601 cv
218.613 9.30499 218.82 9.22302 219.039 9.16803 cv
219.25 9.117 219.48 9.09399 219.73 9.09003 cv
220.234 9.09399 220.668 9.19098 221.031 9.39099 cv
221.387 9.59399 221.68 9.87097 221.906 10.215 cv
222.129 10.566 222.293 10.969 222.402 11.43 cv
222.504 11.891 222.559 12.383 222.559 12.906 cv
cp
220.516 13.047 mo
220.512 12.754 220.492 12.473 220.449 12.195 cv
220.402 11.926 220.324 11.684 220.223 11.469 cv
220.113 11.258 219.973 11.086 219.801 10.957 cv
219.625 10.832 219.41 10.77 219.152 10.766 cv
219.02 10.77 218.891 10.789 218.766 10.824 cv
218.637 10.867 218.508 10.93 218.375 11.016 cv
218.242 11.105 218.105 11.219 217.969 11.359 cv
217.824 11.5 217.676 11.676 217.523 11.879 cv
217.523 14.172 li
217.797 14.52 218.059 14.789 218.309 14.977 cv
218.555 15.168 218.816 15.262 219.09 15.262 cv
219.344 15.262 219.559 15.199 219.742 15.066 cv
219.918 14.941 220.066 14.77 220.18 14.559 cv
220.293 14.348 220.375 14.109 220.434 13.844 cv
220.484 13.578 220.512 13.312 220.516 13.047 cv
cp
f
230.551 12.809 mo
230.547 13.047 230.496 13.223 230.391 13.336 cv
230.281 13.453 230.133 13.512 229.953 13.508 cv
225.719 13.508 li
225.715 13.809 225.75 14.078 225.824 14.316 cv
225.891 14.559 226.004 14.762 226.16 14.93 cv
226.313 15.102 226.508 15.23 226.75 15.316 cv
226.988 15.406 227.277 15.449 227.621 15.449 cv
227.961 15.449 228.262 15.426 228.523 15.375 cv
228.781 15.328 229.008 15.273 229.199 15.211 cv
229.387 15.152 229.543 15.098 229.672 15.047 cv
229.793 15 229.895 14.977 229.977 14.973 cv
230.02 14.977 230.059 14.984 230.094 15 cv
230.121 15.02 230.148 15.051 230.168 15.098 cv
230.188 15.145 230.199 15.211 230.211 15.297 cv
230.215 15.383 230.219 15.492 230.223 15.621 cv
230.219 15.738 230.219 15.836 230.215 15.914 cv
230.207 15.996 230.199 16.062 230.191 16.117 cv
230.18 16.176 230.164 16.227 230.145 16.262 cv
230.125 16.305 230.098 16.34 230.066 16.375 cv
230.031 16.414 229.938 16.465 229.789 16.523 cv
229.633 16.59 229.441 16.652 229.211 16.707 cv
228.973 16.77 228.703 16.816 228.406 16.863 cv
228.102 16.902 227.781 16.926 227.441 16.93 cv
226.82 16.926 226.277 16.852 225.816 16.695 cv
225.348 16.543 224.961 16.305 224.652 15.988 cv
224.336 15.672 224.102 15.273 223.953 14.789 cv
223.797 14.309 223.723 13.742 223.727 13.086 cv
223.723 12.473 223.801 11.914 223.965 11.418 cv
224.121 10.922 224.355 10.504 224.668 10.156 cv
224.973 9.81201 225.348 9.547 225.785 9.36298 cv
226.223 9.18402 226.715 9.09399 227.27 9.09003 cv
227.848 9.09399 228.348 9.17999 228.762 9.34802 cv
229.176 9.52301 229.512 9.76202 229.777 10.062 cv
230.039 10.367 230.234 10.727 230.363 11.141 cv
230.484 11.559 230.547 12.008 230.551 12.496 cv
cp
228.648 12.246 mo
228.66 11.695 228.551 11.262 228.316 10.949 cv
228.082 10.637 227.715 10.48 227.223 10.477 cv
226.973 10.48 226.758 10.527 226.574 10.617 cv
226.387 10.715 226.234 10.84 226.113 10.996 cv
225.988 11.156 225.895 11.344 225.832 11.559 cv
225.766 11.773 225.727 12.004 225.719 12.246 cv
cp
f
238.582 12.809 mo
238.578 13.047 238.527 13.223 238.422 13.336 cv
238.313 13.453 238.164 13.512 237.984 13.508 cv
233.75 13.508 li
233.746 13.809 233.781 14.078 233.855 14.316 cv
233.922 14.559 234.035 14.762 234.191 14.93 cv
234.344 15.102 234.539 15.23 234.781 15.316 cv
235.02 15.406 235.309 15.449 235.652 15.449 cv
235.992 15.449 236.293 15.426 236.555 15.375 cv
236.813 15.328 237.039 15.273 237.23 15.211 cv
237.418 15.152 237.574 15.098 237.703 15.047 cv
237.824 15 237.926 14.977 238.008 14.973 cv
238.051 14.977 238.09 14.984 238.125 15 cv
238.152 15.02 238.18 15.051 238.199 15.098 cv
238.219 15.145 238.23 15.211 238.242 15.297 cv
238.246 15.383 238.25 15.492 238.254 15.621 cv
238.25 15.738 238.25 15.836 238.246 15.914 cv
238.238 15.996 238.23 16.062 238.223 16.117 cv
238.211 16.176 238.195 16.227 238.176 16.262 cv
238.156 16.305 238.129 16.34 238.098 16.375 cv
238.063 16.414 237.969 16.465 237.82 16.523 cv
237.664 16.59 237.473 16.652 237.242 16.707 cv
237.004 16.77 236.734 16.816 236.438 16.863 cv
236.133 16.902 235.813 16.926 235.473 16.93 cv
234.852 16.926 234.309 16.852 233.848 16.695 cv
233.379 16.543 232.992 16.305 232.684 15.988 cv
232.367 15.672 232.133 15.273 231.984 14.789 cv
231.828 14.309 231.754 13.742 231.758 13.086 cv
231.754 12.473 231.832 11.914 231.996 11.418 cv
232.152 10.922 232.387 10.504 232.699 10.156 cv
233.004 9.81201 233.379 9.547 233.816 9.36298 cv
234.254 9.18402 234.746 9.09399 235.301 9.09003 cv
235.879 9.09399 236.379 9.17999 236.793 9.34802 cv
237.207 9.52301 237.543 9.76202 237.809 10.062 cv
238.07 10.367 238.266 10.727 238.395 11.141 cv
238.516 11.559 238.578 12.008 238.582 12.496 cv
cp
236.68 12.246 mo
236.691 11.695 236.582 11.262 236.348 10.949 cv
236.113 10.637 235.746 10.48 235.254 10.477 cv
235.004 10.48 234.789 10.527 234.605 10.617 cv
234.418 10.715 234.266 10.84 234.145 10.996 cv
234.02 11.156 233.926 11.344 233.863 11.559 cv
233.797 11.773 233.758 12.004 233.75 12.246 cv
cp
f
246.781 16.484 mo
246.777 16.547 246.766 16.594 246.742 16.629 cv
246.715 16.672 246.668 16.703 246.609 16.727 cv
246.543 16.75 246.461 16.766 246.355 16.781 cv
246.25 16.789 246.117 16.797 245.965 16.797 cv
245.793 16.797 245.66 16.789 245.559 16.781 cv
245.453 16.766 245.367 16.75 245.305 16.727 cv
245.238 16.703 245.191 16.672 245.164 16.629 cv
245.133 16.594 245.117 16.547 245.121 16.484 cv
245.121 15.715 li
244.762 16.102 244.387 16.398 243.996 16.609 cv
243.598 16.82 243.164 16.926 242.691 16.93 cv
242.156 16.926 241.707 16.824 241.344 16.621 cv
240.977 16.418 240.68 16.145 240.449 15.793 cv
240.215 15.449 240.047 15.043 239.945 14.574 cv
239.844 14.113 239.793 13.621 239.793 13.102 cv
239.793 12.488 239.855 11.934 239.988 11.437 cv
240.117 10.945 240.313 10.523 240.57 10.176 cv
240.824 9.828 241.141 9.56201 241.52 9.37097 cv
241.898 9.18701 242.336 9.09399 242.832 9.09003 cv
243.219 9.09399 243.57 9.172 243.891 9.328 cv
244.203 9.48798 244.52 9.71899 244.832 10.023 cv
244.832 6.26202 li
244.832 6.211 244.844 6.164 244.875 6.12097 cv
244.898 6.08197 244.953 6.047 245.031 6.01599 cv
245.105 5.98798 245.203 5.96899 245.332 5.94897 cv
245.453 5.93701 245.613 5.92999 245.809 5.92603 cv
246 5.92999 246.156 5.93701 246.281 5.94897 cv
246.402 5.96899 246.504 5.98798 246.578 6.01599 cv
246.648 6.047 246.699 6.08197 246.734 6.12097 cv
246.762 6.164 246.777 6.211 246.781 6.26202 cv
cp
244.832 11.84 mo
244.551 11.488 244.281 11.219 244.027 11.031 cv
243.766 10.844 243.496 10.75 243.219 10.75 cv
242.965 10.75 242.746 10.816 242.563 10.941 cv
242.375 11.074 242.227 11.242 242.117 11.453 cv
242.004 11.664 241.922 11.902 241.867 12.164 cv
241.813 12.43 241.785 12.699 241.785 12.969 cv
241.785 13.266 241.809 13.547 241.855 13.82 cv
241.902 14.098 241.977 14.344 242.086 14.559 cv
242.188 14.773 242.332 14.945 242.512 15.074 cv
242.688 15.207 242.91 15.273 243.18 15.27 cv
243.313 15.273 243.441 15.254 243.574 15.211 cv
243.699 15.176 243.832 15.113 243.965 15.02 cv
244.098 14.934 244.234 14.816 244.375 14.672 cv
244.516 14.531 244.668 14.355 244.832 14.148 cv
cp
f
255.352 16.484 mo
255.348 16.539 255.336 16.582 255.313 16.621 cv
255.285 16.66 255.238 16.695 255.176 16.719 cv
255.109 16.746 255.023 16.762 254.918 16.777 cv
254.813 16.789 254.68 16.797 254.52 16.797 cv
254.344 16.797 254.203 16.789 254.102 16.777 cv
253.992 16.762 253.91 16.746 253.848 16.719 cv
253.785 16.695 253.738 16.66 253.715 16.621 cv
253.684 16.582 253.672 16.539 253.676 16.484 cv
253.676 15.684 li
253.289 16.098 252.898 16.41 252.504 16.617 cv
252.102 16.824 251.691 16.926 251.27 16.93 cv
250.789 16.926 250.387 16.852 250.063 16.695 cv
249.738 16.543 249.477 16.328 249.277 16.059 cv
249.074 15.789 248.93 15.477 248.848 15.117 cv
248.758 14.762 248.715 14.32 248.719 13.789 cv
248.719 9.53497 li
248.715 9.48798 248.73 9.44098 248.762 9.39801 cv
248.789 9.36298 248.84 9.33197 248.918 9.30103 cv
248.992 9.27698 249.094 9.258 249.223 9.242 cv
249.348 9.23401 249.504 9.22699 249.695 9.22302 cv
249.883 9.22699 250.043 9.23401 250.168 9.242 cv
250.293 9.258 250.391 9.27698 250.469 9.30103 cv
250.539 9.33197 250.594 9.36298 250.629 9.39801 cv
250.656 9.44098 250.672 9.48798 250.676 9.53497 cv
250.676 13.461 li
250.672 13.828 250.695 14.105 250.746 14.297 cv
250.789 14.488 250.859 14.652 250.961 14.789 cv
251.055 14.93 251.18 15.035 251.328 15.109 cv
251.477 15.187 251.648 15.227 251.844 15.223 cv
252.094 15.227 252.344 15.137 252.598 14.949 cv
252.848 14.77 253.117 14.504 253.402 14.156 cv
253.402 9.53497 li
253.402 9.48798 253.414 9.44098 253.445 9.39801 cv
253.469 9.36298 253.523 9.33197 253.602 9.30103 cv
253.676 9.27698 253.773 9.258 253.902 9.242 cv
254.023 9.23401 254.184 9.22699 254.379 9.22302 cv
254.57 9.22699 254.727 9.23401 254.852 9.242 cv
254.973 9.258 255.074 9.27698 255.148 9.30103 cv
255.219 9.33197 255.27 9.36298 255.305 9.39801 cv
255.332 9.44098 255.348 9.48798 255.352 9.53497 cv
cp
f
264.23 12.906 mo
264.23 13.527 264.164 14.086 264.031 14.582 cv
263.898 15.078 263.703 15.5 263.449 15.848 cv
263.195 16.195 262.879 16.465 262.5 16.648 cv
262.117 16.836 261.684 16.926 261.199 16.93 cv
260.992 16.926 260.805 16.906 260.641 16.871 cv
260.469 16.828 260.305 16.77 260.148 16.691 cv
259.988 16.613 259.832 16.516 259.68 16.391 cv
259.52 16.273 259.359 16.133 259.195 15.969 cv
259.195 19.242 li
259.191 19.289 259.176 19.336 259.148 19.383 cv
259.113 19.422 259.059 19.457 258.988 19.488 cv
258.91 19.512 258.813 19.535 258.688 19.555 cv
258.563 19.566 258.402 19.574 258.215 19.578 cv
258.02 19.574 257.863 19.566 257.738 19.555 cv
257.613 19.535 257.512 19.512 257.438 19.488 cv
257.359 19.457 257.305 19.422 257.277 19.383 cv
257.242 19.336 257.227 19.289 257.23 19.242 cv
257.23 9.53497 li
257.227 9.48798 257.242 9.44098 257.27 9.39801 cv
257.293 9.36298 257.336 9.33197 257.406 9.30103 cv
257.469 9.27698 257.555 9.258 257.664 9.242 cv
257.766 9.23401 257.902 9.22699 258.066 9.22302 cv
258.223 9.22699 258.352 9.23401 258.457 9.242 cv
258.563 9.258 258.648 9.27698 258.715 9.30103 cv
258.777 9.33197 258.824 9.36298 258.852 9.39801 cv
258.875 9.44098 258.887 9.48798 258.891 9.53497 cv
258.891 10.352 li
259.09 10.145 259.289 9.96503 259.488 9.80499 cv
259.68 9.64801 259.879 9.51599 260.082 9.40601 cv
260.285 9.30499 260.492 9.22302 260.711 9.16803 cv
260.922 9.117 261.152 9.09399 261.402 9.09003 cv
261.906 9.09399 262.34 9.19098 262.703 9.39099 cv
263.059 9.59399 263.352 9.87097 263.578 10.215 cv
263.801 10.566 263.965 10.969 264.074 11.43 cv
264.176 11.891 264.23 12.383 264.23 12.906 cv
cp
262.188 13.047 mo
262.184 12.754 262.164 12.473 262.121 12.195 cv
262.074 11.926 261.996 11.684 261.895 11.469 cv
261.785 11.258 261.645 11.086 261.473 10.957 cv
261.297 10.832 261.082 10.77 260.824 10.766 cv
260.691 10.77 260.563 10.789 260.438 10.824 cv
260.309 10.867 260.18 10.93 260.047 11.016 cv
259.914 11.105 259.777 11.219 259.641 11.359 cv
259.496 11.5 259.348 11.676 259.195 11.879 cv
259.195 14.172 li
259.469 14.52 259.73 14.789 259.98 14.977 cv
260.227 15.168 260.488 15.262 260.762 15.262 cv
261.016 15.262 261.23 15.199 261.414 15.066 cv
261.59 14.941 261.738 14.77 261.852 14.559 cv
261.965 14.348 262.047 14.109 262.105 13.844 cv
262.156 13.578 262.184 13.312 262.188 13.047 cv
cp
f
270.52 14.52 mo
270.516 14.918 270.441 15.266 270.297 15.566 cv
270.148 15.867 269.941 16.121 269.672 16.32 cv
269.398 16.527 269.078 16.676 268.711 16.777 cv
268.344 16.875 267.941 16.926 267.512 16.93 cv
267.246 16.926 267 16.906 266.766 16.871 cv
266.531 16.828 266.32 16.781 266.133 16.723 cv
265.945 16.664 265.789 16.602 265.664 16.539 cv
265.539 16.477 265.445 16.418 265.391 16.363 cv
265.332 16.309 265.289 16.227 265.262 16.109 cv
265.227 15.996 265.211 15.82 265.215 15.59 cv
265.211 15.441 265.219 15.32 265.23 15.227 cv
265.238 15.137 265.254 15.066 265.277 15.008 cv
265.297 14.957 265.32 14.918 265.355 14.898 cv
265.383 14.883 265.422 14.875 265.469 14.871 cv
265.523 14.875 265.609 14.906 265.723 14.969 cv
265.832 15.035 265.969 15.109 266.141 15.184 cv
266.305 15.266 266.5 15.336 266.719 15.402 cv
266.938 15.473 267.188 15.508 267.473 15.504 cv
267.648 15.508 267.805 15.488 267.945 15.449 cv
268.078 15.414 268.199 15.363 268.305 15.293 cv
268.402 15.227 268.477 15.141 268.531 15.035 cv
268.578 14.934 268.605 14.812 268.609 14.676 cv
268.605 14.52 268.559 14.387 268.465 14.277 cv
268.371 14.168 268.242 14.07 268.086 13.984 cv
267.922 13.902 267.742 13.824 267.547 13.75 cv
267.344 13.68 267.141 13.602 266.93 13.508 cv
266.719 13.422 266.512 13.32 266.316 13.203 cv
266.113 13.094 265.934 12.953 265.777 12.785 cv
265.613 12.621 265.488 12.422 265.395 12.184 cv
265.301 11.953 265.254 11.672 265.254 11.34 cv
265.254 11.012 265.316 10.707 265.445 10.426 cv
265.574 10.152 265.762 9.914 266.008 9.71503 cv
266.25 9.52002 266.547 9.367 266.898 9.25403 cv
267.246 9.14801 267.641 9.09399 268.082 9.09003 cv
268.297 9.09399 268.508 9.10901 268.715 9.13702 cv
268.918 9.172 269.105 9.211 269.273 9.25403 cv
269.438 9.30499 269.578 9.35498 269.695 9.40601 cv
269.809 9.46503 269.891 9.51202 269.941 9.547 cv
269.988 9.59003 270.023 9.62903 270.047 9.664 cv
270.066 9.70697 270.078 9.75403 270.09 9.80499 cv
270.098 9.85901 270.109 9.92603 270.117 10.004 cv
270.125 10.09 270.129 10.187 270.129 10.305 cv
270.129 10.445 270.125 10.562 270.117 10.648 cv
270.109 10.742 270.094 10.812 270.078 10.859 cv
270.059 10.914 270.035 10.949 270.008 10.965 cv
269.973 10.988 269.938 10.996 269.898 10.992 cv
269.848 10.996 269.773 10.969 269.68 10.91 cv
269.578 10.859 269.457 10.801 269.309 10.734 cv
269.16 10.676 268.988 10.617 268.793 10.559 cv
268.598 10.508 268.375 10.48 268.129 10.477 cv
267.949 10.48 267.797 10.5 267.668 10.531 cv
267.535 10.57 267.426 10.621 267.348 10.687 cv
267.262 10.758 267.199 10.836 267.16 10.926 cv
267.113 11.02 267.094 11.117 267.098 11.219 cv
267.094 11.379 267.145 11.516 267.246 11.621 cv
267.344 11.734 267.473 11.828 267.637 11.91 cv
267.797 11.996 267.98 12.074 268.188 12.145 cv
268.391 12.219 268.598 12.301 268.809 12.383 cv
269.016 12.473 269.223 12.57 269.434 12.684 cv
269.637 12.797 269.82 12.937 269.98 13.102 cv
270.141 13.27 270.27 13.469 270.371 13.699 cv
270.465 13.934 270.516 14.207 270.52 14.52 cv
cp
f
286.578 9.52002 mo
286.574 9.578 286.566 9.64801 286.555 9.72998 cv
286.535 9.81201 286.508 9.93402 286.469 10.086 cv
284.613 16.375 li
284.586 16.465 284.551 16.539 284.512 16.59 cv
284.469 16.648 284.406 16.691 284.32 16.719 cv
284.234 16.75 284.109 16.766 283.953 16.781 cv
283.789 16.789 283.586 16.797 283.336 16.797 cv
283.078 16.797 282.867 16.789 282.711 16.777 cv
282.547 16.762 282.422 16.742 282.332 16.711 cv
282.238 16.684 282.172 16.641 282.133 16.582 cv
282.09 16.531 282.059 16.461 282.039 16.375 cv
280.871 12.152 li
280.855 12.082 li
280.84 12.152 li
279.766 16.375 li
279.742 16.465 279.711 16.539 279.676 16.59 cv
279.633 16.648 279.566 16.691 279.477 16.719 cv
279.379 16.75 279.254 16.766 279.094 16.781 cv
278.934 16.789 278.727 16.797 278.473 16.797 cv
278.211 16.797 278 16.789 277.844 16.777 cv
277.684 16.762 277.559 16.742 277.469 16.711 cv
277.375 16.684 277.309 16.641 277.27 16.582 cv
277.227 16.531 277.195 16.461 277.18 16.375 cv
275.34 10.086 li
275.289 9.93701 275.262 9.82001 275.25 9.73401 cv
275.234 9.65198 275.227 9.578 275.23 9.52002 cv
275.227 9.46899 275.242 9.42603 275.273 9.383 cv
275.301 9.34802 275.352 9.31598 275.43 9.289 cv
275.504 9.27002 275.605 9.25 275.73 9.23798 cv
275.855 9.22998 276.016 9.22699 276.211 9.22302 cv
276.418 9.22699 276.586 9.22998 276.719 9.23798 cv
276.848 9.25 276.949 9.27002 277.023 9.29303 cv
277.094 9.32001 277.145 9.35498 277.176 9.39801 cv
277.203 9.44501 277.227 9.5 277.242 9.55902 cv
278.621 14.66 li
278.637 14.754 li
278.652 14.66 li
279.945 9.55902 li
279.957 9.5 279.984 9.44501 280.02 9.39801 cv
280.051 9.35498 280.102 9.32001 280.172 9.29303 cv
280.238 9.27002 280.332 9.25 280.453 9.23798 cv
280.574 9.22998 280.73 9.22699 280.926 9.22302 cv
281.117 9.22699 281.273 9.23401 281.395 9.242 cv
281.512 9.258 281.605 9.27301 281.68 9.297 cv
281.746 9.32001 281.797 9.35199 281.828 9.39099 cv
281.855 9.42999 281.879 9.47699 281.895 9.52698 cv
283.281 14.668 li
283.305 14.754 li
283.32 14.66 li
284.645 9.55902 li
284.652 9.5 284.676 9.44501 284.707 9.39801 cv
284.738 9.35498 284.789 9.32001 284.863 9.29303 cv
284.934 9.27002 285.031 9.25 285.156 9.23798 cv
285.277 9.22998 285.438 9.22699 285.633 9.22302 cv
285.824 9.22699 285.98 9.22998 286.105 9.23798 cv
286.227 9.25 286.324 9.27002 286.395 9.289 cv
286.465 9.31598 286.512 9.34802 286.539 9.383 cv
286.563 9.42603 286.574 9.46899 286.578 9.52002 cv
cp
f
289.793 16.484 mo
289.789 16.539 289.773 16.582 289.746 16.621 cv
289.711 16.66 289.656 16.695 289.586 16.719 cv
289.508 16.746 289.41 16.762 289.285 16.777 cv
289.16 16.789 289 16.797 288.813 16.797 cv
288.617 16.797 288.461 16.789 288.336 16.777 cv
288.211 16.762 288.109 16.746 288.035 16.719 cv
287.957 16.695 287.902 16.66 287.875 16.621 cv
287.84 16.582 287.824 16.539 287.828 16.484 cv
287.828 9.55103 li
287.824 9.5 287.84 9.453 287.875 9.414 cv
287.902 9.375 287.957 9.34399 288.035 9.31201 cv
288.109 9.289 288.211 9.26599 288.336 9.24597 cv
288.461 9.23401 288.617 9.22699 288.813 9.22302 cv
289 9.22699 289.16 9.23401 289.285 9.24597 cv
289.41 9.26599 289.508 9.289 289.586 9.31201 cv
289.656 9.34399 289.711 9.375 289.746 9.414 cv
289.773 9.453 289.789 9.5 289.793 9.55103 cv
cp
289.941 7.17999 mo
289.941 7.578 289.859 7.85199 289.699 8 cv
289.535 8.15198 289.238 8.22699 288.805 8.22302 cv
288.359 8.22699 288.059 8.15198 287.91 8.008 cv
287.754 7.86298 287.68 7.60199 287.68 7.21899 cv
287.68 6.82397 287.758 6.55103 287.918 6.39801 cv
288.074 6.24597 288.375 6.16803 288.82 6.16803 cv
289.254 6.16803 289.551 6.242 289.707 6.39099 cv
289.863 6.539 289.941 6.80499 289.941 7.17999 cv
cp
f
295.871 15.801 mo
295.871 16.027 295.855 16.203 295.828 16.324 cv
295.797 16.449 295.758 16.535 295.715 16.582 cv
295.664 16.633 295.598 16.676 295.508 16.715 cv
295.414 16.754 295.305 16.785 295.188 16.816 cv
295.063 16.84 294.93 16.863 294.789 16.883 cv
294.645 16.895 294.504 16.902 294.359 16.906 cv
293.969 16.902 293.629 16.852 293.344 16.758 cv
293.059 16.656 292.824 16.508 292.637 16.301 cv
292.449 16.098 292.309 15.84 292.223 15.527 cv
292.129 15.219 292.086 14.848 292.09 14.418 cv
292.09 10.859 li
291.258 10.859 li
291.156 10.863 291.082 10.801 291.031 10.676 cv
290.977 10.555 290.949 10.352 290.953 10.062 cv
290.949 9.914 290.957 9.78497 290.973 9.68402 cv
290.984 9.58197 291.004 9.5 291.031 9.43701 cv
291.055 9.37903 291.086 9.336 291.129 9.30902 cv
291.164 9.28497 291.211 9.27301 291.266 9.27002 cv
292.09 9.27002 li
292.09 7.71899 li
292.086 7.672 292.102 7.625 292.133 7.578 cv
292.16 7.539 292.211 7.50403 292.289 7.47302 cv
292.363 7.44897 292.465 7.42603 292.594 7.40997 cv
292.719 7.39801 292.875 7.39502 293.066 7.39099 cv
293.254 7.39502 293.414 7.39801 293.543 7.40997 cv
293.668 7.42603 293.77 7.44897 293.844 7.47302 cv
293.914 7.50403 293.965 7.539 294 7.578 cv
294.027 7.625 294.043 7.672 294.047 7.71899 cv
294.047 9.27002 li
295.559 9.27002 li
295.609 9.27301 295.656 9.28497 295.695 9.30902 cv
295.734 9.336 295.766 9.37903 295.793 9.43701 cv
295.816 9.5 295.836 9.58197 295.852 9.68402 cv
295.863 9.78497 295.871 9.914 295.871 10.062 cv
295.871 10.352 295.844 10.555 295.793 10.676 cv
295.738 10.801 295.664 10.863 295.566 10.859 cv
294.047 10.859 li
294.047 14.125 li
294.043 14.504 294.102 14.789 294.227 14.977 cv
294.344 15.168 294.559 15.262 294.863 15.262 cv
294.965 15.262 295.059 15.254 295.145 15.234 cv
295.227 15.219 295.301 15.199 295.367 15.172 cv
295.43 15.152 295.484 15.129 295.531 15.109 cv
295.574 15.094 295.613 15.086 295.652 15.082 cv
295.68 15.086 295.711 15.094 295.742 15.109 cv
295.77 15.129 295.789 15.168 295.809 15.219 cv
295.82 15.277 295.836 15.352 295.852 15.441 cv
295.863 15.539 295.871 15.656 295.871 15.801 cv
cp
f
303.93 16.484 mo
303.926 16.539 303.91 16.582 303.883 16.621 cv
303.848 16.66 303.797 16.695 303.727 16.719 cv
303.652 16.746 303.551 16.762 303.426 16.777 cv
303.297 16.789 303.141 16.797 302.957 16.797 cv
302.762 16.797 302.602 16.789 302.477 16.777 cv
302.348 16.762 302.246 16.746 302.176 16.719 cv
302.098 16.695 302.047 16.66 302.02 16.621 cv
301.984 16.582 301.969 16.539 301.973 16.484 cv
301.973 12.52 li
301.969 12.184 301.945 11.918 301.898 11.723 cv
301.848 11.531 301.773 11.367 301.684 11.23 cv
301.59 11.094 301.473 10.988 301.324 10.91 cv
301.176 10.836 301 10.797 300.805 10.797 cv
300.551 10.797 300.301 10.891 300.047 11.07 cv
299.793 11.254 299.527 11.516 299.254 11.863 cv
299.254 16.484 li
299.25 16.539 299.234 16.582 299.207 16.621 cv
299.172 16.66 299.117 16.695 299.047 16.719 cv
298.969 16.746 298.871 16.762 298.746 16.777 cv
298.621 16.789 298.461 16.797 298.273 16.797 cv
298.078 16.797 297.922 16.789 297.797 16.777 cv
297.672 16.762 297.57 16.746 297.496 16.719 cv
297.418 16.695 297.363 16.66 297.336 16.621 cv
297.301 16.582 297.285 16.539 297.289 16.484 cv
297.289 6.23798 li
297.285 6.18701 297.301 6.14099 297.336 6.09802 cv
297.363 6.05902 297.418 6.02301 297.496 5.992 cv
297.57 5.96503 297.672 5.94501 297.797 5.92603 cv
297.922 5.914 298.078 5.90601 298.273 5.90198 cv
298.461 5.90601 298.621 5.914 298.746 5.92603 cv
298.871 5.94501 298.969 5.96503 299.047 5.992 cv
299.117 6.02301 299.172 6.05902 299.207 6.09802 cv
299.234 6.14099 299.25 6.18701 299.254 6.23798 cv
299.254 10.078 li
299.59 9.75 299.934 9.50403 300.285 9.336 cv
300.633 9.17603 301 9.09399 301.383 9.09003 cv
301.852 9.09399 302.25 9.172 302.578 9.32397 cv
302.902 9.48401 303.164 9.69501 303.363 9.96503 cv
303.563 10.234 303.707 10.551 303.797 10.91 cv
303.883 11.273 303.926 11.711 303.93 12.223 cv
cp
f
315.293 7.508 mo
315.289 7.66803 315.285 7.797 315.273 7.90198 cv
315.258 8.01202 315.234 8.09802 315.211 8.15601 cv
315.18 8.21899 315.148 8.26599 315.113 8.29303 cv
315.074 8.328 315.031 8.34399 314.988 8.34003 cv
311.691 8.34003 li
311.691 11.055 li
314.785 11.055 li
314.828 11.055 314.871 11.07 314.91 11.094 cv
314.945 11.125 314.977 11.168 315.008 11.227 cv
315.035 11.289 315.055 11.371 315.07 11.473 cv
315.078 11.578 315.086 11.707 315.09 11.863 cv
315.086 12.02 315.078 12.152 315.07 12.254 cv
315.055 12.363 315.035 12.449 315.008 12.512 cv
314.977 12.582 314.945 12.629 314.91 12.656 cv
314.871 12.687 314.828 12.703 314.785 12.699 cv
311.691 12.699 li
311.691 16.453 li
311.688 16.512 311.672 16.562 311.645 16.602 cv
311.609 16.648 311.555 16.684 311.477 16.707 cv
311.395 16.738 311.289 16.758 311.16 16.773 cv
311.027 16.789 310.859 16.797 310.664 16.797 cv
310.461 16.797 310.297 16.789 310.168 16.773 cv
310.031 16.758 309.926 16.738 309.852 16.707 cv
309.77 16.684 309.715 16.648 309.684 16.602 cv
309.648 16.562 309.629 16.512 309.633 16.453 cv
309.633 7.31201 li
309.629 7.086 309.688 6.922 309.809 6.81598 cv
309.922 6.71899 310.066 6.66803 310.242 6.664 cv
314.988 6.664 li
315.031 6.66803 315.074 6.67999 315.113 6.70697 cv
315.148 6.73798 315.18 6.78497 315.211 6.84802 cv
315.234 6.914 315.258 7.00403 315.273 7.10901 cv
315.285 7.22302 315.289 7.35498 315.293 7.508 cv
cp
f
323.633 12.937 mo
323.629 13.535 323.551 14.078 323.398 14.562 cv
323.238 15.055 323.004 15.473 322.688 15.824 cv
322.371 16.176 321.973 16.449 321.496 16.641 cv
321.016 16.832 320.457 16.926 319.82 16.93 cv
319.199 16.926 318.66 16.844 318.207 16.672 cv
317.746 16.504 317.367 16.254 317.07 15.926 cv
316.766 15.602 316.543 15.199 316.398 14.719 cv
316.254 14.242 316.184 13.695 316.184 13.078 cv
316.184 12.488 316.262 11.949 316.418 11.457 cv
316.574 10.969 316.813 10.547 317.133 10.195 cv
317.449 9.84802 317.844 9.57397 318.32 9.37903 cv
318.793 9.18701 319.352 9.09399 319.992 9.09003 cv
320.617 9.09399 321.156 9.17603 321.613 9.34399 cv
322.07 9.51599 322.449 9.76599 322.746 10.09 cv
323.043 10.418 323.266 10.82 323.414 11.297 cv
323.559 11.777 323.629 12.324 323.633 12.937 cv
cp
321.613 13.016 mo
321.609 12.68 321.582 12.363 321.531 12.07 cv
321.473 11.785 321.379 11.535 321.254 11.32 cv
321.121 11.109 320.949 10.941 320.738 10.82 cv
320.52 10.703 320.25 10.645 319.922 10.641 cv
319.633 10.645 319.379 10.699 319.16 10.801 cv
318.941 10.91 318.762 11.066 318.621 11.27 cv
318.48 11.477 318.375 11.723 318.305 12.008 cv
318.234 12.301 318.199 12.629 318.199 12.992 cv
318.199 13.34 318.227 13.656 318.285 13.941 cv
318.34 14.234 318.434 14.484 318.563 14.695 cv
318.688 14.91 318.859 15.074 319.082 15.187 cv
319.297 15.309 319.566 15.367 319.891 15.363 cv
320.184 15.367 320.441 15.312 320.664 15.203 cv
320.879 15.098 321.059 14.945 321.199 14.738 cv
321.34 14.539 321.441 14.293 321.512 14.004 cv
321.574 13.719 321.609 13.391 321.613 13.016 cv
cp
f
331.816 16.484 mo
331.813 16.539 331.801 16.582 331.777 16.621 cv
331.75 16.66 331.703 16.695 331.641 16.719 cv
331.574 16.746 331.488 16.762 331.383 16.777 cv
331.277 16.789 331.145 16.797 330.984 16.797 cv
330.809 16.797 330.668 16.789 330.566 16.777 cv
330.457 16.762 330.375 16.746 330.313 16.719 cv
330.25 16.695 330.203 16.66 330.18 16.621 cv
330.148 16.582 330.137 16.539 330.141 16.484 cv
330.141 15.684 li
329.754 16.098 329.363 16.41 328.969 16.617 cv
328.566 16.824 328.156 16.926 327.734 16.93 cv
327.254 16.926 326.852 16.852 326.527 16.695 cv
326.203 16.543 325.941 16.328 325.742 16.059 cv
325.539 15.789 325.395 15.477 325.313 15.117 cv
325.223 14.762 325.18 14.32 325.184 13.789 cv
325.184 9.53497 li
325.18 9.48798 325.195 9.44098 325.227 9.39801 cv
325.254 9.36298 325.305 9.33197 325.383 9.30103 cv
325.457 9.27698 325.559 9.258 325.688 9.242 cv
325.813 9.23401 325.969 9.22699 326.16 9.22302 cv
326.348 9.22699 326.508 9.23401 326.633 9.242 cv
326.758 9.258 326.855 9.27698 326.934 9.30103 cv
327.004 9.33197 327.059 9.36298 327.094 9.39801 cv
327.121 9.44098 327.137 9.48798 327.141 9.53497 cv
327.141 13.461 li
327.137 13.828 327.16 14.105 327.211 14.297 cv
327.254 14.488 327.324 14.652 327.426 14.789 cv
327.52 14.93 327.645 15.035 327.793 15.109 cv
327.941 15.187 328.113 15.227 328.309 15.223 cv
328.559 15.227 328.809 15.137 329.063 14.949 cv
329.313 14.77 329.582 14.504 329.867 14.156 cv
329.867 9.53497 li
329.867 9.48798 329.879 9.44098 329.91 9.39801 cv
329.934 9.36298 329.988 9.33197 330.066 9.30103 cv
330.141 9.27698 330.238 9.258 330.367 9.242 cv
330.488 9.23401 330.648 9.22699 330.844 9.22302 cv
331.035 9.22699 331.191 9.23401 331.316 9.242 cv
331.438 9.258 331.539 9.27698 331.613 9.30103 cv
331.684 9.33197 331.734 9.36298 331.77 9.39801 cv
331.797 9.44098 331.813 9.48798 331.816 9.53497 cv
cp
f
338.211 10.18 mo
338.211 10.371 338.203 10.523 338.195 10.641 cv
338.18 10.762 338.164 10.855 338.148 10.922 cv
338.125 10.992 338.098 11.039 338.066 11.062 cv
338.027 11.09 337.984 11.102 337.938 11.102 cv
337.891 11.102 337.844 11.094 337.797 11.074 cv
337.742 11.059 337.684 11.039 337.621 11.016 cv
337.551 10.996 337.48 10.977 337.406 10.957 cv
337.324 10.941 337.238 10.934 337.148 10.93 cv
337.035 10.934 336.926 10.953 336.82 10.996 cv
336.711 11.043 336.598 11.113 336.484 11.203 cv
336.363 11.297 336.242 11.422 336.117 11.574 cv
335.988 11.734 335.852 11.926 335.707 12.152 cv
335.707 16.484 li
335.703 16.539 335.688 16.582 335.66 16.621 cv
335.625 16.66 335.57 16.695 335.5 16.719 cv
335.422 16.746 335.324 16.762 335.199 16.777 cv
335.074 16.789 334.914 16.797 334.727 16.797 cv
334.531 16.797 334.375 16.789 334.25 16.777 cv
334.125 16.762 334.023 16.746 333.949 16.719 cv
333.871 16.695 333.816 16.66 333.789 16.621 cv
333.754 16.582 333.738 16.539 333.742 16.484 cv
333.742 9.53497 li
333.738 9.48798 333.754 9.44098 333.781 9.39801 cv
333.805 9.36298 333.852 9.33197 333.922 9.30103 cv
333.988 9.27698 334.074 9.258 334.184 9.242 cv
334.289 9.23401 334.422 9.22699 334.586 9.22302 cv
334.75 9.22699 334.887 9.23401 334.996 9.242 cv
335.102 9.258 335.188 9.27698 335.25 9.30103 cv
335.309 9.33197 335.352 9.36298 335.379 9.39801 cv
335.402 9.44098 335.414 9.48798 335.418 9.53497 cv
335.418 10.398 li
335.598 10.141 335.77 9.92999 335.934 9.758 cv
336.09 9.59399 336.246 9.45697 336.395 9.35498 cv
336.539 9.258 336.684 9.19098 336.828 9.14801 cv
336.973 9.11298 337.117 9.09399 337.266 9.09003 cv
337.332 9.09399 337.406 9.09802 337.484 9.10199 cv
337.563 9.11298 337.641 9.125 337.727 9.14099 cv
337.805 9.15997 337.879 9.17999 337.945 9.203 cv
338.004 9.22699 338.051 9.25403 338.082 9.27698 cv
338.109 9.30902 338.129 9.336 338.145 9.36298 cv
338.156 9.39801 338.168 9.44098 338.18 9.492 cv
338.188 9.55103 338.195 9.633 338.203 9.73798 cv
338.207 9.84802 338.211 9.99597 338.211 10.18 cv
cp
f
350.035 7.508 mo
350.031 7.664 350.023 7.79303 350.016 7.89502 cv
350 8.00403 349.98 8.09003 349.957 8.15198 cv
349.926 8.21899 349.895 8.26599 349.859 8.29303 cv
349.816 8.328 349.773 8.34399 349.73 8.34003 cv
347.207 8.34003 li
347.207 16.469 li
347.207 16.523 347.188 16.57 347.156 16.609 cv
347.117 16.652 347.063 16.687 346.988 16.711 cv
346.906 16.738 346.801 16.758 346.672 16.773 cv
346.535 16.789 346.371 16.797 346.176 16.797 cv
345.98 16.797 345.816 16.789 345.684 16.773 cv
345.551 16.758 345.445 16.738 345.367 16.711 cv
345.289 16.687 345.23 16.652 345.199 16.609 cv
345.16 16.57 345.145 16.523 345.148 16.469 cv
345.148 8.34003 li
342.625 8.34003 li
342.57 8.34399 342.523 8.328 342.492 8.29303 cv
342.453 8.26599 342.422 8.21899 342.398 8.15198 cv
342.367 8.09003 342.348 8.00403 342.34 7.89502 cv
342.324 7.79303 342.32 7.664 342.32 7.508 cv
342.32 7.35498 342.324 7.22302 342.34 7.10901 cv
342.348 7.00403 342.367 6.914 342.398 6.84802 cv
342.422 6.78497 342.453 6.73798 342.492 6.70697 cv
342.523 6.67999 342.57 6.66803 342.625 6.664 cv
349.73 6.664 li
349.773 6.66803 349.816 6.67999 349.859 6.70697 cv
349.895 6.73798 349.926 6.78497 349.957 6.84802 cv
349.98 6.914 350 7.00403 350.016 7.10901 cv
350.023 7.22302 350.031 7.35498 350.035 7.508 cv
cp
f
357.75 16.484 mo
357.746 16.539 357.73 16.582 357.703 16.621 cv
357.668 16.66 357.617 16.695 357.547 16.719 cv
357.473 16.746 357.371 16.762 357.246 16.777 cv
357.117 16.789 356.961 16.797 356.777 16.797 cv
356.582 16.797 356.422 16.789 356.297 16.777 cv
356.168 16.762 356.066 16.746 355.996 16.719 cv
355.918 16.695 355.867 16.66 355.84 16.621 cv
355.805 16.582 355.789 16.539 355.793 16.484 cv
355.793 12.52 li
355.789 12.184 355.766 11.918 355.719 11.723 cv
355.668 11.531 355.594 11.367 355.504 11.23 cv
355.41 11.094 355.293 10.988 355.145 10.91 cv
354.996 10.836 354.82 10.797 354.625 10.797 cv
354.371 10.797 354.121 10.891 353.867 11.07 cv
353.613 11.254 353.348 11.516 353.074 11.863 cv
353.074 16.484 li
353.07 16.539 353.055 16.582 353.027 16.621 cv
352.992 16.66 352.938 16.695 352.867 16.719 cv
352.789 16.746 352.691 16.762 352.566 16.777 cv
352.441 16.789 352.281 16.797 352.094 16.797 cv
351.898 16.797 351.742 16.789 351.617 16.777 cv
351.492 16.762 351.391 16.746 351.316 16.719 cv
351.238 16.695 351.184 16.66 351.156 16.621 cv
351.121 16.582 351.105 16.539 351.109 16.484 cv
351.109 6.23798 li
351.105 6.18701 351.121 6.14099 351.156 6.09802 cv
351.184 6.05902 351.238 6.02301 351.316 5.992 cv
351.391 5.96503 351.492 5.94501 351.617 5.92603 cv
351.742 5.914 351.898 5.90601 352.094 5.90198 cv
352.281 5.90601 352.441 5.914 352.566 5.92603 cv
352.691 5.94501 352.789 5.96503 352.867 5.992 cv
352.938 6.02301 352.992 6.05902 353.027 6.09802 cv
353.055 6.14099 353.07 6.18701 353.074 6.23798 cv
353.074 10.078 li
353.41 9.75 353.754 9.50403 354.105 9.336 cv
354.453 9.17603 354.82 9.09399 355.203 9.09003 cv
355.672 9.09399 356.07 9.172 356.398 9.32397 cv
356.723 9.48401 356.984 9.69501 357.184 9.96503 cv
357.383 10.234 357.527 10.551 357.617 10.91 cv
357.703 11.273 357.746 11.711 357.75 12.223 cv
cp
f
364.148 10.18 mo
364.148 10.371 364.141 10.523 364.133 10.641 cv
364.117 10.762 364.102 10.855 364.086 10.922 cv
364.063 10.992 364.035 11.039 364.004 11.062 cv
363.965 11.09 363.922 11.102 363.875 11.102 cv
363.828 11.102 363.781 11.094 363.734 11.074 cv
363.68 11.059 363.621 11.039 363.559 11.016 cv
363.488 10.996 363.418 10.977 363.344 10.957 cv
363.262 10.941 363.176 10.934 363.086 10.93 cv
362.973 10.934 362.863 10.953 362.758 10.996 cv
362.648 11.043 362.535 11.113 362.422 11.203 cv
362.301 11.297 362.18 11.422 362.055 11.574 cv
361.926 11.734 361.789 11.926 361.645 12.152 cv
361.645 16.484 li
361.641 16.539 361.625 16.582 361.598 16.621 cv
361.563 16.66 361.508 16.695 361.438 16.719 cv
361.359 16.746 361.262 16.762 361.137 16.777 cv
361.012 16.789 360.852 16.797 360.664 16.797 cv
360.469 16.797 360.313 16.789 360.188 16.777 cv
360.063 16.762 359.961 16.746 359.887 16.719 cv
359.809 16.695 359.754 16.66 359.727 16.621 cv
359.691 16.582 359.676 16.539 359.68 16.484 cv
359.68 9.53497 li
359.676 9.48798 359.691 9.44098 359.719 9.39801 cv
359.742 9.36298 359.789 9.33197 359.859 9.30103 cv
359.926 9.27698 360.012 9.258 360.121 9.242 cv
360.227 9.23401 360.359 9.22699 360.523 9.22302 cv
360.688 9.22699 360.824 9.23401 360.934 9.242 cv
361.039 9.258 361.125 9.27698 361.188 9.30103 cv
361.246 9.33197 361.289 9.36298 361.316 9.39801 cv
361.34 9.44098 361.352 9.48798 361.355 9.53497 cv
361.355 10.398 li
361.535 10.141 361.707 9.92999 361.871 9.758 cv
362.027 9.59399 362.184 9.45697 362.332 9.35498 cv
362.477 9.258 362.621 9.19098 362.766 9.14801 cv
362.91 9.11298 363.055 9.09399 363.203 9.09003 cv
363.27 9.09399 363.344 9.09802 363.422 9.10199 cv
363.5 9.11298 363.578 9.125 363.664 9.14099 cv
363.742 9.15997 363.816 9.17999 363.883 9.203 cv
363.941 9.22699 363.988 9.25403 364.02 9.27698 cv
364.047 9.30902 364.066 9.336 364.082 9.36298 cv
364.094 9.39801 364.105 9.44098 364.117 9.492 cv
364.125 9.55103 364.133 9.633 364.141 9.73798 cv
364.145 9.84802 364.148 9.99597 364.148 10.18 cv
cp
f
371.59 12.809 mo
371.586 13.047 371.535 13.223 371.43 13.336 cv
371.32 13.453 371.172 13.512 370.992 13.508 cv
366.758 13.508 li
366.754 13.809 366.789 14.078 366.863 14.316 cv
366.93 14.559 367.043 14.762 367.199 14.93 cv
367.352 15.102 367.547 15.23 367.789 15.316 cv
368.027 15.406 368.316 15.449 368.66 15.449 cv
369 15.449 369.301 15.426 369.563 15.375 cv
369.82 15.328 370.047 15.273 370.238 15.211 cv
370.426 15.152 370.582 15.098 370.711 15.047 cv
370.832 15 370.934 14.977 371.016 14.973 cv
371.059 14.977 371.098 14.984 371.133 15 cv
371.16 15.02 371.188 15.051 371.207 15.098 cv
371.227 15.145 371.238 15.211 371.25 15.297 cv
371.254 15.383 371.258 15.492 371.262 15.621 cv
371.258 15.738 371.258 15.836 371.254 15.914 cv
371.246 15.996 371.238 16.062 371.23 16.117 cv
371.219 16.176 371.203 16.227 371.184 16.262 cv
371.164 16.305 371.137 16.34 371.105 16.375 cv
371.07 16.414 370.977 16.465 370.828 16.523 cv
370.672 16.59 370.48 16.652 370.25 16.707 cv
370.012 16.77 369.742 16.816 369.445 16.863 cv
369.141 16.902 368.82 16.926 368.48 16.93 cv
367.859 16.926 367.316 16.852 366.855 16.695 cv
366.387 16.543 366 16.305 365.691 15.988 cv
365.375 15.672 365.141 15.273 364.992 14.789 cv
364.836 14.309 364.762 13.742 364.766 13.086 cv
364.762 12.473 364.84 11.914 365.004 11.418 cv
365.16 10.922 365.395 10.504 365.707 10.156 cv
366.012 9.81201 366.387 9.547 366.824 9.36298 cv
367.262 9.18402 367.754 9.09399 368.309 9.09003 cv
368.887 9.09399 369.387 9.17999 369.801 9.34802 cv
370.215 9.52301 370.551 9.76202 370.816 10.062 cv
371.078 10.367 371.273 10.727 371.402 11.141 cv
371.523 11.559 371.586 12.008 371.59 12.496 cv
cp
369.688 12.246 mo
369.699 11.695 369.59 11.262 369.355 10.949 cv
369.121 10.637 368.754 10.48 368.262 10.477 cv
368.012 10.48 367.797 10.527 367.613 10.617 cv
367.426 10.715 367.273 10.84 367.152 10.996 cv
367.027 11.156 366.934 11.344 366.871 11.559 cv
366.805 11.773 366.766 12.004 366.758 12.246 cv
cp
f
379.121 16.508 mo
379.117 16.586 379.09 16.641 379.043 16.68 cv
378.988 16.723 378.906 16.75 378.797 16.77 cv
378.68 16.785 378.516 16.797 378.301 16.797 cv
378.063 16.797 377.891 16.785 377.789 16.77 cv
377.68 16.75 377.605 16.723 377.566 16.68 cv
377.52 16.641 377.5 16.586 377.5 16.508 cv
377.5 15.957 li
377.211 16.266 376.883 16.504 376.52 16.672 cv
376.152 16.844 375.746 16.926 375.301 16.93 cv
374.93 16.926 374.59 16.879 374.281 16.785 cv
373.973 16.691 373.707 16.551 373.48 16.355 cv
373.254 16.168 373.078 15.934 372.953 15.652 cv
372.828 15.375 372.766 15.047 372.77 14.668 cv
372.766 14.27 372.844 13.918 373.004 13.613 cv
373.16 13.316 373.398 13.07 373.715 12.875 cv
374.027 12.684 374.418 12.539 374.887 12.441 cv
375.355 12.352 375.898 12.305 376.516 12.301 cv
377.195 12.301 li
377.195 11.879 li
377.195 11.664 377.172 11.473 377.129 11.309 cv
377.082 11.148 377.008 11.012 376.91 10.898 cv
376.805 10.793 376.672 10.711 376.504 10.656 cv
376.332 10.605 376.121 10.582 375.879 10.578 cv
375.547 10.582 375.254 10.617 375 10.687 cv
374.738 10.762 374.512 10.844 374.316 10.93 cv
374.117 11.023 373.953 11.102 373.824 11.172 cv
373.688 11.246 373.578 11.285 373.5 11.281 cv
373.438 11.285 373.387 11.266 373.348 11.227 cv
373.301 11.191 373.266 11.141 373.238 11.07 cv
373.207 11.008 373.184 10.922 373.172 10.82 cv
373.152 10.723 373.145 10.613 373.148 10.492 cv
373.145 10.332 373.16 10.207 373.188 10.109 cv
373.211 10.02 373.258 9.93402 373.336 9.85498 cv
373.406 9.78101 373.535 9.69897 373.719 9.60901 cv
373.898 9.52002 374.109 9.43402 374.355 9.35498 cv
374.598 9.27698 374.867 9.21503 375.156 9.164 cv
375.445 9.117 375.742 9.09399 376.051 9.09003 cv
376.594 9.09399 377.059 9.14502 377.445 9.25 cv
377.832 9.35901 378.152 9.52301 378.402 9.742 cv
378.652 9.961 378.832 10.246 378.949 10.594 cv
379.059 10.945 379.117 11.359 379.121 11.832 cv
cp
377.195 13.531 mo
376.445 13.531 li
376.129 13.535 375.859 13.559 375.637 13.602 cv
375.41 13.652 375.227 13.723 375.09 13.812 cv
374.945 13.91 374.844 14.023 374.781 14.152 cv
374.715 14.289 374.68 14.437 374.684 14.605 cv
374.68 14.898 374.773 15.129 374.961 15.293 cv
375.145 15.461 375.402 15.543 375.73 15.543 cv
376.004 15.543 376.254 15.473 376.488 15.332 cv
376.715 15.191 376.953 14.988 377.195 14.715 cv
cp
f
387.707 16.484 mo
387.703 16.547 387.691 16.594 387.668 16.629 cv
387.641 16.672 387.594 16.703 387.535 16.727 cv
387.469 16.75 387.387 16.766 387.281 16.781 cv
387.176 16.789 387.043 16.797 386.891 16.797 cv
386.719 16.797 386.586 16.789 386.484 16.781 cv
386.379 16.766 386.293 16.75 386.23 16.727 cv
386.164 16.703 386.117 16.672 386.09 16.629 cv
386.059 16.594 386.043 16.547 386.047 16.484 cv
386.047 15.715 li
385.688 16.102 385.313 16.398 384.922 16.609 cv
384.523 16.82 384.09 16.926 383.617 16.93 cv
383.082 16.926 382.633 16.824 382.27 16.621 cv
381.902 16.418 381.605 16.145 381.375 15.793 cv
381.141 15.449 380.973 15.043 380.871 14.574 cv
380.77 14.113 380.719 13.621 380.719 13.102 cv
380.719 12.488 380.781 11.934 380.914 11.437 cv
381.043 10.945 381.238 10.523 381.496 10.176 cv
381.75 9.828 382.066 9.56201 382.445 9.37097 cv
382.824 9.18701 383.262 9.09399 383.758 9.09003 cv
384.145 9.09399 384.496 9.172 384.816 9.328 cv
385.129 9.48798 385.445 9.71899 385.758 10.023 cv
385.758 6.26202 li
385.758 6.211 385.77 6.164 385.801 6.12097 cv
385.824 6.08197 385.879 6.047 385.957 6.01599 cv
386.031 5.98798 386.129 5.96899 386.258 5.94897 cv
386.379 5.93701 386.539 5.92999 386.734 5.92603 cv
386.926 5.92999 387.082 5.93701 387.207 5.94897 cv
387.328 5.96899 387.43 5.98798 387.504 6.01599 cv
387.574 6.047 387.625 6.08197 387.66 6.12097 cv
387.688 6.164 387.703 6.211 387.707 6.26202 cv
cp
385.758 11.84 mo
385.477 11.488 385.207 11.219 384.953 11.031 cv
384.691 10.844 384.422 10.75 384.145 10.75 cv
383.891 10.75 383.672 10.816 383.488 10.941 cv
383.301 11.074 383.152 11.242 383.043 11.453 cv
382.93 11.664 382.848 11.902 382.793 12.164 cv
382.738 12.43 382.711 12.699 382.711 12.969 cv
382.711 13.266 382.734 13.547 382.781 13.82 cv
382.828 14.098 382.902 14.344 383.012 14.559 cv
383.113 14.773 383.258 14.945 383.438 15.074 cv
383.613 15.207 383.836 15.273 384.105 15.27 cv
384.238 15.273 384.367 15.254 384.5 15.211 cv
384.625 15.176 384.758 15.113 384.891 15.02 cv
385.023 14.934 385.16 14.816 385.301 14.672 cv
385.441 14.531 385.594 14.355 385.758 14.148 cv
cp
f
394.531 14.52 mo
394.527 14.918 394.453 15.266 394.309 15.566 cv
394.16 15.867 393.953 16.121 393.684 16.32 cv
393.41 16.527 393.09 16.676 392.723 16.777 cv
392.355 16.875 391.953 16.926 391.523 16.93 cv
391.258 16.926 391.012 16.906 390.777 16.871 cv
390.543 16.828 390.332 16.781 390.145 16.723 cv
389.957 16.664 389.801 16.602 389.676 16.539 cv
389.551 16.477 389.457 16.418 389.402 16.363 cv
389.344 16.309 389.301 16.227 389.273 16.109 cv
389.238 15.996 389.223 15.82 389.227 15.59 cv
389.223 15.441 389.23 15.32 389.242 15.227 cv
389.25 15.137 389.266 15.066 389.289 15.008 cv
389.309 14.957 389.332 14.918 389.367 14.898 cv
389.395 14.883 389.434 14.875 389.48 14.871 cv
389.535 14.875 389.621 14.906 389.734 14.969 cv
389.844 15.035 389.98 15.109 390.152 15.184 cv
390.316 15.266 390.512 15.336 390.73 15.402 cv
390.949 15.473 391.199 15.508 391.484 15.504 cv
391.66 15.508 391.816 15.488 391.957 15.449 cv
392.09 15.414 392.211 15.363 392.316 15.293 cv
392.414 15.227 392.488 15.141 392.543 15.035 cv
392.59 14.934 392.617 14.812 392.621 14.676 cv
392.617 14.52 392.57 14.387 392.477 14.277 cv
392.383 14.168 392.254 14.07 392.098 13.984 cv
391.934 13.902 391.754 13.824 391.559 13.75 cv
391.355 13.68 391.152 13.602 390.941 13.508 cv
390.73 13.422 390.523 13.32 390.328 13.203 cv
390.125 13.094 389.945 12.953 389.789 12.785 cv
389.625 12.621 389.5 12.422 389.406 12.184 cv
389.313 11.953 389.266 11.672 389.266 11.34 cv
389.266 11.012 389.328 10.707 389.457 10.426 cv
389.586 10.152 389.773 9.914 390.02 9.71503 cv
390.262 9.52002 390.559 9.367 390.91 9.25403 cv
391.258 9.14801 391.652 9.09399 392.094 9.09003 cv
392.309 9.09399 392.52 9.10901 392.727 9.13702 cv
392.93 9.172 393.117 9.211 393.285 9.25403 cv
393.449 9.30499 393.59 9.35498 393.707 9.40601 cv
393.82 9.46503 393.902 9.51202 393.953 9.547 cv
394 9.59003 394.035 9.62903 394.059 9.664 cv
394.078 9.70697 394.09 9.75403 394.102 9.80499 cv
394.109 9.85901 394.121 9.92603 394.129 10.004 cv
394.137 10.09 394.141 10.187 394.141 10.305 cv
394.141 10.445 394.137 10.562 394.129 10.648 cv
394.121 10.742 394.105 10.812 394.09 10.859 cv
394.07 10.914 394.047 10.949 394.02 10.965 cv
393.984 10.988 393.949 10.996 393.91 10.992 cv
393.859 10.996 393.785 10.969 393.691 10.91 cv
393.59 10.859 393.469 10.801 393.32 10.734 cv
393.172 10.676 393 10.617 392.805 10.559 cv
392.609 10.508 392.387 10.48 392.141 10.477 cv
391.961 10.48 391.809 10.5 391.68 10.531 cv
391.547 10.57 391.438 10.621 391.359 10.687 cv
391.273 10.758 391.211 10.836 391.172 10.926 cv
391.125 11.02 391.105 11.117 391.109 11.219 cv
391.105 11.379 391.156 11.516 391.258 11.621 cv
391.355 11.734 391.484 11.828 391.648 11.91 cv
391.809 11.996 391.992 12.074 392.199 12.145 cv
392.402 12.219 392.609 12.301 392.82 12.383 cv
393.027 12.473 393.234 12.57 393.445 12.684 cv
393.648 12.797 393.832 12.937 393.992 13.102 cv
394.152 13.27 394.281 13.469 394.383 13.699 cv
394.477 13.934 394.527 14.207 394.531 14.52 cv
cp
f
403.305 12.832 mo
403.301 13.133 403.273 13.344 403.219 13.461 cv
403.16 13.586 403.07 13.645 402.945 13.641 cv
399.703 13.641 li
399.574 13.645 399.48 13.582 399.426 13.457 cv
399.363 13.336 399.336 13.129 399.34 12.832 cv
399.336 12.543 399.363 12.336 399.426 12.215 cv
399.48 12.098 399.574 12.039 399.703 12.035 cv
402.945 12.035 li
403.008 12.039 403.059 12.051 403.105 12.074 cv
403.145 12.102 403.184 12.148 403.219 12.207 cv
403.246 12.273 403.27 12.355 403.285 12.457 cv
403.297 12.562 403.301 12.687 403.305 12.832 cv
cp
f
414.039 15.895 mo
414.035 16.051 414.031 16.184 414.02 16.285 cv
414.004 16.395 413.984 16.48 413.961 16.551 cv
413.934 16.621 413.898 16.672 413.863 16.703 cv
413.82 16.734 413.777 16.75 413.727 16.75 cv
409.105 16.75 li
408.93 16.75 408.785 16.699 408.672 16.598 cv
408.551 16.496 408.492 16.332 408.496 16.102 cv
408.496 6.94501 li
408.492 6.89801 408.512 6.85199 408.547 6.80499 cv
408.578 6.76599 408.633 6.72998 408.715 6.703 cv
408.789 6.67999 408.895 6.65997 409.031 6.64099 cv
409.16 6.62903 409.324 6.62097 409.527 6.617 cv
409.723 6.62097 409.891 6.62903 410.023 6.64099 cv
410.152 6.65997 410.254 6.67999 410.336 6.703 cv
410.41 6.72998 410.469 6.76599 410.504 6.80499 cv
410.535 6.85199 410.551 6.89801 410.555 6.94501 cv
410.555 15.059 li
413.727 15.059 li
413.777 15.062 413.82 15.078 413.863 15.102 cv
413.898 15.133 413.934 15.18 413.961 15.242 cv
413.984 15.312 414.004 15.398 414.02 15.5 cv
414.031 15.609 414.035 15.738 414.039 15.895 cv
cp
f
422.164 12.937 mo
422.16 13.535 422.082 14.078 421.93 14.562 cv
421.77 15.055 421.535 15.473 421.219 15.824 cv
420.902 16.176 420.504 16.449 420.027 16.641 cv
419.547 16.832 418.988 16.926 418.352 16.93 cv
417.73 16.926 417.191 16.844 416.738 16.672 cv
416.277 16.504 415.898 16.254 415.602 15.926 cv
415.297 15.602 415.074 15.199 414.93 14.719 cv
414.785 14.242 414.715 13.695 414.715 13.078 cv
414.715 12.488 414.793 11.949 414.949 11.457 cv
415.105 10.969 415.344 10.547 415.664 10.195 cv
415.98 9.84802 416.375 9.57397 416.852 9.37903 cv
417.324 9.18701 417.883 9.09399 418.523 9.09003 cv
419.148 9.09399 419.688 9.17603 420.145 9.34399 cv
420.602 9.51599 420.98 9.76599 421.277 10.09 cv
421.574 10.418 421.797 10.82 421.945 11.297 cv
422.09 11.777 422.16 12.324 422.164 12.937 cv
cp
420.145 13.016 mo
420.141 12.68 420.113 12.363 420.063 12.07 cv
420.004 11.785 419.91 11.535 419.785 11.32 cv
419.652 11.109 419.48 10.941 419.27 10.82 cv
419.051 10.703 418.781 10.645 418.453 10.641 cv
418.164 10.645 417.91 10.699 417.691 10.801 cv
417.473 10.91 417.293 11.066 417.152 11.27 cv
417.012 11.477 416.906 11.723 416.836 12.008 cv
416.766 12.301 416.73 12.629 416.73 12.992 cv
416.73 13.34 416.758 13.656 416.816 13.941 cv
416.871 14.234 416.965 14.484 417.094 14.695 cv
417.219 14.91 417.391 15.074 417.613 15.187 cv
417.828 15.309 418.098 15.367 418.422 15.363 cv
418.715 15.367 418.973 15.312 419.195 15.203 cv
419.41 15.098 419.59 14.945 419.73 14.738 cv
419.871 14.539 419.973 14.293 420.043 14.004 cv
420.105 13.719 420.141 13.391 420.145 13.016 cv
cp
f
428.98 15.379 mo
428.977 15.516 428.973 15.629 428.969 15.719 cv
428.957 15.812 428.949 15.891 428.938 15.949 cv
428.922 16.012 428.906 16.062 428.891 16.098 cv
428.871 16.141 428.828 16.187 428.77 16.246 cv
428.703 16.309 428.598 16.383 428.449 16.465 cv
428.297 16.555 428.125 16.633 427.934 16.695 cv
427.742 16.766 427.535 16.816 427.309 16.859 cv
427.082 16.898 426.848 16.918 426.613 16.922 cv
426.074 16.918 425.602 16.84 425.188 16.672 cv
424.773 16.508 424.426 16.262 424.148 15.937 cv
423.863 15.613 423.652 15.219 423.512 14.75 cv
423.371 14.285 423.301 13.746 423.301 13.141 cv
423.301 12.445 423.387 11.848 423.559 11.34 cv
423.73 10.836 423.973 10.414 424.289 10.082 cv
424.598 9.75 424.965 9.50403 425.395 9.34003 cv
425.816 9.17999 426.285 9.09802 426.797 9.09802 cv
427.004 9.09802 427.207 9.117 427.41 9.15198 cv
427.605 9.19098 427.793 9.242 427.969 9.30103 cv
428.141 9.367 428.297 9.43701 428.438 9.51202 cv
428.574 9.59399 428.672 9.65997 428.73 9.71503 cv
428.785 9.77301 428.824 9.82001 428.852 9.85498 cv
428.871 9.89801 428.891 9.94897 428.906 10.008 cv
428.918 10.074 428.93 10.152 428.938 10.238 cv
428.945 10.332 428.949 10.441 428.949 10.57 cv
428.949 10.875 428.922 11.086 428.871 11.207 cv
428.816 11.328 428.75 11.391 428.668 11.387 cv
428.578 11.391 428.484 11.355 428.387 11.281 cv
428.285 11.211 428.168 11.129 428.035 11.039 cv
427.902 10.953 427.742 10.871 427.555 10.797 cv
427.367 10.727 427.141 10.691 426.883 10.687 cv
426.371 10.691 425.984 10.887 425.715 11.277 cv
425.441 11.668 425.305 12.242 425.309 13 cv
425.305 13.375 425.34 13.707 425.41 13.992 cv
425.477 14.277 425.574 14.516 425.711 14.707 cv
425.84 14.902 426.008 15.047 426.211 15.141 cv
426.41 15.238 426.641 15.285 426.906 15.285 cv
427.172 15.285 427.406 15.246 427.605 15.164 cv
427.797 15.086 427.965 14.996 428.113 14.895 cv
428.254 14.797 428.379 14.707 428.48 14.625 cv
428.578 14.547 428.66 14.508 428.73 14.504 cv
428.773 14.508 428.813 14.52 428.848 14.543 cv
428.875 14.57 428.898 14.617 428.922 14.687 cv
428.938 14.758 428.953 14.848 428.965 14.957 cv
428.973 15.066 428.977 15.207 428.98 15.379 cv
cp
f
436.266 16.508 mo
436.262 16.586 436.234 16.641 436.188 16.68 cv
436.133 16.723 436.051 16.75 435.941 16.77 cv
435.824 16.785 435.66 16.797 435.445 16.797 cv
435.207 16.797 435.035 16.785 434.934 16.77 cv
434.824 16.75 434.75 16.723 434.711 16.68 cv
434.664 16.641 434.645 16.586 434.645 16.508 cv
434.645 15.957 li
434.355 16.266 434.027 16.504 433.664 16.672 cv
433.297 16.844 432.891 16.926 432.445 16.93 cv
432.074 16.926 431.734 16.879 431.426 16.785 cv
431.117 16.691 430.852 16.551 430.625 16.355 cv
430.398 16.168 430.223 15.934 430.098 15.652 cv
429.973 15.375 429.91 15.047 429.914 14.668 cv
429.91 14.27 429.988 13.918 430.148 13.613 cv
430.305 13.316 430.543 13.07 430.859 12.875 cv
431.172 12.684 431.563 12.539 432.031 12.441 cv
432.5 12.352 433.043 12.305 433.66 12.301 cv
434.34 12.301 li
434.34 11.879 li
434.34 11.664 434.316 11.473 434.273 11.309 cv
434.227 11.148 434.152 11.012 434.055 10.898 cv
433.949 10.793 433.816 10.711 433.648 10.656 cv
433.477 10.605 433.266 10.582 433.023 10.578 cv
432.691 10.582 432.398 10.617 432.145 10.687 cv
431.883 10.762 431.656 10.844 431.461 10.93 cv
431.262 11.023 431.098 11.102 430.969 11.172 cv
430.832 11.246 430.723 11.285 430.645 11.281 cv
430.582 11.285 430.531 11.266 430.492 11.227 cv
430.445 11.191 430.41 11.141 430.383 11.07 cv
430.352 11.008 430.328 10.922 430.316 10.82 cv
430.297 10.723 430.289 10.613 430.293 10.492 cv
430.289 10.332 430.305 10.207 430.332 10.109 cv
430.355 10.02 430.402 9.93402 430.48 9.85498 cv
430.551 9.78101 430.68 9.69897 430.863 9.60901 cv
431.043 9.52002 431.254 9.43402 431.5 9.35498 cv
431.742 9.27698 432.012 9.21503 432.301 9.164 cv
432.59 9.117 432.887 9.09399 433.195 9.09003 cv
433.738 9.09399 434.203 9.14502 434.59 9.25 cv
434.977 9.35901 435.297 9.52301 435.547 9.742 cv
435.797 9.961 435.977 10.246 436.094 10.594 cv
436.203 10.945 436.262 11.359 436.266 11.832 cv
cp
434.34 13.531 mo
433.59 13.531 li
433.273 13.535 433.004 13.559 432.781 13.602 cv
432.555 13.652 432.371 13.723 432.234 13.812 cv
432.09 13.91 431.988 14.023 431.926 14.152 cv
431.859 14.289 431.824 14.437 431.828 14.605 cv
431.824 14.898 431.918 15.129 432.105 15.293 cv
432.289 15.461 432.547 15.543 432.875 15.543 cv
433.148 15.543 433.398 15.473 433.633 15.332 cv
433.859 15.191 434.098 14.988 434.34 14.715 cv
cp
f
440.191 16.484 mo
440.188 16.539 440.172 16.582 440.145 16.621 cv
440.109 16.66 440.055 16.695 439.984 16.719 cv
439.906 16.746 439.809 16.762 439.684 16.777 cv
439.559 16.789 439.398 16.797 439.211 16.797 cv
439.016 16.797 438.859 16.789 438.734 16.777 cv
438.609 16.762 438.508 16.746 438.434 16.719 cv
438.355 16.695 438.301 16.66 438.273 16.621 cv
438.238 16.582 438.223 16.539 438.227 16.484 cv
438.227 6.23798 li
438.223 6.18701 438.238 6.14099 438.273 6.09802 cv
438.301 6.05902 438.355 6.02301 438.434 5.992 cv
438.508 5.96503 438.609 5.94501 438.734 5.92603 cv
438.859 5.914 439.016 5.90601 439.211 5.90198 cv
439.398 5.90601 439.559 5.914 439.684 5.92603 cv
439.809 5.94501 439.906 5.96503 439.984 5.992 cv
440.055 6.02301 440.109 6.05902 440.145 6.09802 cv
440.172 6.14099 440.188 6.18701 440.191 6.23798 cv
cp
f
457.68 16.469 mo
457.676 16.523 457.664 16.57 457.637 16.609 cv
457.605 16.652 457.551 16.687 457.48 16.711 cv
457.402 16.738 457.305 16.758 457.18 16.773 cv
457.055 16.789 456.895 16.797 456.703 16.797 cv
456.516 16.797 456.359 16.789 456.238 16.773 cv
456.109 16.758 456.012 16.738 455.941 16.711 cv
455.867 16.687 455.816 16.652 455.785 16.609 cv
455.754 16.57 455.738 16.523 455.738 16.469 cv
455.738 8.26202 li
455.723 8.26202 li
452.801 16.461 li
452.777 16.531 452.742 16.586 452.699 16.629 cv
452.648 16.676 452.586 16.711 452.508 16.734 cv
452.426 16.762 452.324 16.777 452.199 16.785 cv
452.074 16.793 451.922 16.797 451.75 16.797 cv
451.57 16.797 451.422 16.789 451.297 16.777 cv
451.172 16.762 451.066 16.742 450.988 16.715 cv
450.902 16.687 450.84 16.652 450.797 16.609 cv
450.746 16.57 450.715 16.523 450.703 16.461 cv
447.883 8.26202 li
447.867 8.26202 li
447.867 16.469 li
447.863 16.523 447.848 16.57 447.824 16.609 cv
447.793 16.652 447.742 16.687 447.664 16.711 cv
447.586 16.738 447.484 16.758 447.363 16.773 cv
447.238 16.789 447.082 16.797 446.895 16.797 cv
446.703 16.797 446.547 16.789 446.426 16.773 cv
446.297 16.758 446.195 16.738 446.125 16.711 cv
446.047 16.687 445.996 16.652 445.969 16.609 cv
445.938 16.57 445.922 16.523 445.926 16.469 cv
445.926 7.48401 li
445.922 7.22302 445.992 7.02002 446.137 6.875 cv
446.273 6.73798 446.461 6.66803 446.699 6.664 cv
448.039 6.664 li
448.277 6.66803 448.48 6.68701 448.652 6.72302 cv
448.82 6.76599 448.969 6.828 449.098 6.91803 cv
449.219 7.01202 449.324 7.133 449.41 7.27698 cv
449.492 7.42999 449.563 7.61298 449.629 7.828 cv
451.813 13.836 li
451.844 13.836 li
454.102 7.84399 li
454.168 7.625 454.242 7.44098 454.324 7.289 cv
454.402 7.14099 454.496 7.02002 454.605 6.922 cv
454.711 6.83197 454.836 6.76599 454.98 6.72302 cv
455.125 6.68701 455.293 6.66803 455.488 6.664 cv
456.867 6.664 li
457.004 6.66803 457.125 6.68402 457.23 6.71899 cv
457.328 6.758 457.41 6.81201 457.48 6.87903 cv
457.543 6.953 457.594 7.039 457.629 7.13702 cv
457.66 7.242 457.676 7.35901 457.68 7.48401 cv
cp
f
466.785 12.937 mo
466.781 13.535 466.703 14.078 466.551 14.562 cv
466.391 15.055 466.156 15.473 465.84 15.824 cv
465.523 16.176 465.125 16.449 464.648 16.641 cv
464.168 16.832 463.609 16.926 462.973 16.93 cv
462.352 16.926 461.813 16.844 461.359 16.672 cv
460.898 16.504 460.52 16.254 460.223 15.926 cv
459.918 15.602 459.695 15.199 459.551 14.719 cv
459.406 14.242 459.336 13.695 459.336 13.078 cv
459.336 12.488 459.414 11.949 459.57 11.457 cv
459.727 10.969 459.965 10.547 460.285 10.195 cv
460.602 9.84802 460.996 9.57397 461.473 9.37903 cv
461.945 9.18701 462.504 9.09399 463.145 9.09003 cv
463.77 9.09399 464.309 9.17603 464.766 9.34399 cv
465.223 9.51599 465.602 9.76599 465.898 10.09 cv
466.195 10.418 466.418 10.82 466.566 11.297 cv
466.711 11.777 466.781 12.324 466.785 12.937 cv
cp
464.766 13.016 mo
464.762 12.68 464.734 12.363 464.684 12.07 cv
464.625 11.785 464.531 11.535 464.406 11.32 cv
464.273 11.109 464.102 10.941 463.891 10.82 cv
463.672 10.703 463.402 10.645 463.074 10.641 cv
462.785 10.645 462.531 10.699 462.313 10.801 cv
462.094 10.91 461.914 11.066 461.773 11.27 cv
461.633 11.477 461.527 11.723 461.457 12.008 cv
461.387 12.301 461.352 12.629 461.352 12.992 cv
461.352 13.34 461.379 13.656 461.438 13.941 cv
461.492 14.234 461.586 14.484 461.715 14.695 cv
461.84 14.91 462.012 15.074 462.234 15.187 cv
462.449 15.309 462.719 15.367 463.043 15.363 cv
463.336 15.367 463.594 15.312 463.816 15.203 cv
464.031 15.098 464.211 14.945 464.352 14.738 cv
464.492 14.539 464.594 14.293 464.664 14.004 cv
464.727 13.719 464.762 13.391 464.766 13.016 cv
cp
f
474.938 16.484 mo
474.934 16.547 474.922 16.594 474.898 16.629 cv
474.871 16.672 474.824 16.703 474.766 16.727 cv
474.699 16.75 474.617 16.766 474.512 16.781 cv
474.406 16.789 474.273 16.797 474.121 16.797 cv
473.949 16.797 473.816 16.789 473.715 16.781 cv
473.609 16.766 473.523 16.75 473.461 16.727 cv
473.395 16.703 473.348 16.672 473.32 16.629 cv
473.289 16.594 473.273 16.547 473.277 16.484 cv
473.277 15.715 li
472.918 16.102 472.543 16.398 472.152 16.609 cv
471.754 16.82 471.32 16.926 470.848 16.93 cv
470.313 16.926 469.863 16.824 469.5 16.621 cv
469.133 16.418 468.836 16.145 468.605 15.793 cv
468.371 15.449 468.203 15.043 468.102 14.574 cv
468 14.113 467.949 13.621 467.949 13.102 cv
467.949 12.488 468.012 11.934 468.145 11.437 cv
468.273 10.945 468.469 10.523 468.727 10.176 cv
468.98 9.828 469.297 9.56201 469.676 9.37097 cv
470.055 9.18701 470.492 9.09399 470.988 9.09003 cv
471.375 9.09399 471.727 9.172 472.047 9.328 cv
472.359 9.48798 472.676 9.71899 472.988 10.023 cv
472.988 6.26202 li
472.988 6.211 473 6.164 473.031 6.12097 cv
473.055 6.08197 473.109 6.047 473.188 6.01599 cv
473.262 5.98798 473.359 5.96899 473.488 5.94897 cv
473.609 5.93701 473.77 5.92999 473.965 5.92603 cv
474.156 5.92999 474.313 5.93701 474.438 5.94897 cv
474.559 5.96899 474.66 5.98798 474.734 6.01599 cv
474.805 6.047 474.855 6.08197 474.891 6.12097 cv
474.918 6.164 474.934 6.211 474.938 6.26202 cv
cp
472.988 11.84 mo
472.707 11.488 472.438 11.219 472.184 11.031 cv
471.922 10.844 471.652 10.75 471.375 10.75 cv
471.121 10.75 470.902 10.816 470.719 10.941 cv
470.531 11.074 470.383 11.242 470.273 11.453 cv
470.16 11.664 470.078 11.902 470.023 12.164 cv
469.969 12.43 469.941 12.699 469.941 12.969 cv
469.941 13.266 469.965 13.547 470.012 13.82 cv
470.059 14.098 470.133 14.344 470.242 14.559 cv
470.344 14.773 470.488 14.945 470.668 15.074 cv
470.844 15.207 471.066 15.273 471.336 15.27 cv
471.469 15.273 471.598 15.254 471.73 15.211 cv
471.855 15.176 471.988 15.113 472.121 15.02 cv
472.254 14.934 472.391 14.816 472.531 14.672 cv
472.672 14.531 472.824 14.355 472.988 14.148 cv
cp
f
483.336 12.809 mo
483.332 13.047 483.281 13.223 483.176 13.336 cv
483.066 13.453 482.918 13.512 482.738 13.508 cv
478.504 13.508 li
478.5 13.809 478.535 14.078 478.609 14.316 cv
478.676 14.559 478.789 14.762 478.945 14.93 cv
479.098 15.102 479.293 15.23 479.535 15.316 cv
479.773 15.406 480.063 15.449 480.406 15.449 cv
480.746 15.449 481.047 15.426 481.309 15.375 cv
481.566 15.328 481.793 15.273 481.984 15.211 cv
482.172 15.152 482.328 15.098 482.457 15.047 cv
482.578 15 482.68 14.977 482.762 14.973 cv
482.805 14.977 482.844 14.984 482.879 15 cv
482.906 15.02 482.934 15.051 482.953 15.098 cv
482.973 15.145 482.984 15.211 482.996 15.297 cv
483 15.383 483.004 15.492 483.008 15.621 cv
483.004 15.738 483.004 15.836 483 15.914 cv
482.992 15.996 482.984 16.062 482.977 16.117 cv
482.965 16.176 482.949 16.227 482.93 16.262 cv
482.91 16.305 482.883 16.34 482.852 16.375 cv
482.816 16.414 482.723 16.465 482.574 16.523 cv
482.418 16.59 482.227 16.652 481.996 16.707 cv
481.758 16.77 481.488 16.816 481.191 16.863 cv
480.887 16.902 480.566 16.926 480.227 16.93 cv
479.605 16.926 479.063 16.852 478.602 16.695 cv
478.133 16.543 477.746 16.305 477.438 15.988 cv
477.121 15.672 476.887 15.273 476.738 14.789 cv
476.582 14.309 476.508 13.742 476.512 13.086 cv
476.508 12.473 476.586 11.914 476.75 11.418 cv
476.906 10.922 477.141 10.504 477.453 10.156 cv
477.758 9.81201 478.133 9.547 478.57 9.36298 cv
479.008 9.18402 479.5 9.09399 480.055 9.09003 cv
480.633 9.09399 481.133 9.17999 481.547 9.34802 cv
481.961 9.52301 482.297 9.76202 482.563 10.062 cv
482.824 10.367 483.02 10.727 483.148 11.141 cv
483.27 11.559 483.332 12.008 483.336 12.496 cv
cp
481.434 12.246 mo
481.445 11.695 481.336 11.262 481.102 10.949 cv
480.867 10.637 480.5 10.48 480.008 10.477 cv
479.758 10.48 479.543 10.527 479.359 10.617 cv
479.172 10.715 479.02 10.84 478.898 10.996 cv
478.773 11.156 478.68 11.344 478.617 11.559 cv
478.551 11.773 478.512 12.004 478.504 12.246 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
