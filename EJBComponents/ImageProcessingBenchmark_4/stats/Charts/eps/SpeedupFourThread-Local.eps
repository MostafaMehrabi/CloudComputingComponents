%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SpeedupFourThread-Local.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:49:13 PM
%%BoundingBox: 0 0 622 549
%%HiResBoundingBox: 0 0 621.9601 548.6401
%%CropBox: 0 0 621.9601 548.6401
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -548.64 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 548.64 li
621.96 548.64 li
621.96 0 li
cp
clp
gsave
0 548.64 mo
622 548.64 li
622 -.359985 li
0 -.359985 li
cp
clp
0 0 mo
621.961 0 li
621.961 548.641 li
0 548.641 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
30.602 492 mo
606.719 492 li
30.602 459.84 mo
606.719 459.84 li
30.602 427.559 mo
606.719 427.559 li
30.602 395.398 mo
606.719 395.398 li
30.602 363.238 mo
606.719 363.238 li
30.602 330.961 mo
606.719 330.961 li
30.602 298.801 mo
606.719 298.801 li
30.602 266.52 mo
606.719 266.52 li
30.602 234.359 mo
606.719 234.359 li
30.602 202.078 mo
606.719 202.078 li
30.602 169.922 mo
606.719 169.922 li
30.602 137.762 mo
606.719 137.762 li
30.602 105.48 mo
606.719 105.48 li
30.602 73.32 mo
606.719 73.32 li
30.602 41.039 mo
606.719 41.039 li
.140414 .108034 .108034 0 cmyk
@
30.602 475.922 mo
606.719 475.922 li
30.602 443.762 mo
606.719 443.762 li
30.602 411.48 mo
606.719 411.48 li
30.602 379.32 mo
606.719 379.32 li
30.602 347.039 mo
606.719 347.039 li
30.602 314.879 mo
606.719 314.879 li
30.602 282.602 mo
606.719 282.602 li
30.602 250.441 mo
606.719 250.441 li
30.602 218.281 mo
606.719 218.281 li
30.602 186 mo
606.719 186 li
30.602 153.84 mo
606.719 153.84 li
30.602 121.559 mo
606.719 121.559 li
30.602 89.398 mo
606.719 89.398 li
30.602 57.238 mo
606.719 57.238 li
30.602 24.961 mo
606.719 24.961 li
.328344 .284215 .278569 .000915541 cmyk
@
66.602 24.961 mo
66.602 508.078 li
138.602 24.961 mo
138.602 508.078 li
210.602 24.961 mo
210.602 508.078 li
282.602 24.961 mo
282.602 508.078 li
354.602 24.961 mo
354.602 508.078 li
426.602 24.961 mo
426.602 508.078 li
498.719 24.961 mo
498.719 508.078 li
570.719 24.961 mo
570.719 508.078 li
.178592 .148898 .143923 0 cmyk
@
30.602 24.961 mo
30.602 508.078 li
102.602 24.961 mo
102.602 508.078 li
174.602 24.961 mo
174.602 508.078 li
246.602 24.961 mo
246.602 508.078 li
318.602 24.961 mo
318.602 508.078 li
390.602 24.961 mo
390.602 508.078 li
462.602 24.961 mo
462.602 508.078 li
534.719 24.961 mo
534.719 508.078 li
606.719 24.961 mo
606.719 508.078 li
.328344 .284215 .278569 .000915541 cmyk
@
13.32 500.16 mo
19.441 500.16 li
19.441 514.801 li
13.32 514.801 li
cp
0 0 0 0 cmyk
ef
13.32 467.879 mo
19.441 467.879 li
19.441 482.52 li
13.32 482.52 li
cp
ef
13.32 435.719 mo
19.441 435.719 li
19.441 450.36 li
13.32 450.36 li
cp
ef
13.32 403.559 mo
19.441 403.559 li
19.441 418.2 li
13.32 418.2 li
cp
ef
13.32 371.281 mo
19.441 371.281 li
19.441 385.922 li
13.32 385.922 li
cp
ef
13.32 339.121 mo
19.441 339.121 li
19.441 353.762 li
13.32 353.762 li
cp
ef
13.32 306.84 mo
19.441 306.84 li
19.441 321.481 li
13.32 321.481 li
cp
ef
13.32 274.68 mo
19.441 274.68 li
19.441 289.321 li
13.32 289.321 li
cp
ef
13.32 242.52 mo
19.441 242.52 li
19.441 257.161 li
13.32 257.161 li
cp
ef
7.32 210.238 mo
19.441 210.238 li
19.441 224.879 li
7.32 224.879 li
cp
ef
7.32 178.078 mo
19.441 178.078 li
19.441 192.719 li
7.32 192.719 li
cp
ef
7.32 145.801 mo
19.441 145.801 li
19.441 160.442 li
7.32 160.442 li
cp
ef
7.32 113.641 mo
19.441 113.641 li
19.441 128.282 li
7.32 128.282 li
cp
ef
7.32 81.359 mo
19.441 81.359 li
19.441 96.121 li
7.32 96.121 li
cp
ef
7.32 49.199 mo
19.441 49.199 li
19.441 63.84 li
7.32 63.84 li
cp
ef
7.32 17.039 mo
19.441 17.039 li
19.441 31.68 li
7.32 31.68 li
cp
ef
.96 lw
30.602 508.078 mo
606.719 508.078 li
.367803 .29575 .300999 .00198367 cmyk
@
30.602 508.078 mo
30.602 511.922 li
102.602 508.078 mo
102.602 511.922 li
174.602 508.078 mo
174.602 511.922 li
246.602 508.078 mo
246.602 511.922 li
318.602 508.078 mo
318.602 511.922 li
390.602 508.078 mo
390.602 511.922 li
462.602 508.078 mo
462.602 511.922 li
534.719 508.078 mo
534.719 511.922 li
606.719 508.078 mo
606.719 511.922 li
@
gsave
30.48 24.961 mo
607.32 24.961 li
607.32 508.801 li
30.48 508.801 li
cp
clp
1 lc
30.602 508.078 mo
102.602 477.359 li
174.602 408.602 li
246.602 459.84 li
318.602 428.879 li
390.602 443.762 li
462.602 443.762 li
534.719 449.762 li
606.719 443.762 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
35.512 513.07 mo
25.43 502.988 li
25.43 513.07 mo
35.512 502.988 li
.62768 .285466 0 0 cmyk
@
107.512 482.23 mo
97.43 472.148 li
97.43 482.23 mo
107.512 472.148 li
@
179.629 413.469 mo
169.551 403.391 li
169.551 413.469 mo
179.629 403.391 li
@
251.629 464.711 mo
241.551 454.629 li
241.551 464.711 mo
251.629 454.629 li
@
323.629 433.75 mo
313.551 423.672 li
313.551 433.75 mo
323.629 423.672 li
@
395.629 448.629 mo
385.551 438.551 li
385.551 448.629 mo
395.629 438.551 li
@
467.629 448.629 mo
457.551 438.551 li
457.551 448.629 mo
467.629 438.551 li
@
539.629 454.629 mo
529.551 444.551 li
529.551 454.629 mo
539.629 444.551 li
@
611.629 448.629 mo
601.551 438.551 li
601.551 448.629 mo
611.629 438.551 li
@
gsave
30.48 24.961 mo
607.32 24.961 li
607.32 508.801 li
30.48 508.801 li
cp
clp
.96 lw
1 lc
30.602 508.078 mo
102.602 477 li
174.602 417.719 li
246.602 447.602 li
318.602 417.719 li
390.602 451.922 li
462.602 413.641 li
534.719 447.602 li
606.719 425.16 li
.466651 0 .889799 0 cmyk
@
grestore
35.512 513.07 mo
25.43 502.988 li
25.43 513.07 mo
35.512 502.988 li
.466651 0 .889799 0 cmyk
@
107.512 481.871 mo
97.43 471.789 li
97.43 481.871 mo
107.512 471.789 li
@
179.629 422.711 mo
169.551 412.629 li
169.551 422.711 mo
179.629 412.629 li
@
251.629 452.59 mo
241.551 442.512 li
241.551 452.59 mo
251.629 442.512 li
@
323.629 422.711 mo
313.551 412.629 li
313.551 422.711 mo
323.629 412.629 li
@
395.629 456.91 mo
385.551 446.828 li
385.551 456.91 mo
395.629 446.828 li
@
467.629 418.629 mo
457.551 408.551 li
457.551 418.629 mo
467.629 408.551 li
@
539.629 452.59 mo
529.551 442.512 li
529.551 452.59 mo
539.629 442.512 li
@
611.629 430.031 mo
601.551 419.949 li
601.551 430.031 mo
611.629 419.949 li
@
gsave
30.48 24.961 mo
607.32 24.961 li
607.32 508.801 li
30.48 508.801 li
cp
clp
.96 lw
1 lc
30.602 508.078 mo
102.602 477.238 li
174.602 418.199 li
246.602 458.16 li
318.602 431.641 li
390.602 437.762 li
462.602 440.16 li
534.719 429.84 li
606.719 438.602 li
0 .990631 1 .000396735 cmyk
@
grestore
35.512 513.07 mo
25.43 502.988 li
25.43 513.07 mo
35.512 502.988 li
0 .990631 1 .000396735 cmyk
@
107.512 482.109 mo
97.43 472.031 li
97.43 482.109 mo
107.512 472.031 li
@
179.629 423.191 mo
169.551 413.109 li
169.551 423.191 mo
179.629 413.109 li
@
251.629 463.031 mo
241.551 452.949 li
241.551 463.031 mo
251.629 452.949 li
@
323.629 436.629 mo
313.551 426.551 li
313.551 436.629 mo
323.629 426.551 li
@
395.629 442.75 mo
385.551 432.672 li
385.551 442.75 mo
395.629 432.672 li
@
467.629 445.148 mo
457.551 435.07 li
457.551 445.148 mo
467.629 435.07 li
@
539.629 434.711 mo
529.551 424.629 li
529.551 434.711 mo
539.629 424.629 li
@
611.629 443.469 mo
601.551 433.391 li
601.551 443.469 mo
611.629 433.391 li
@
gsave
30.48 24.961 mo
607.32 24.961 li
607.32 508.801 li
30.48 508.801 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
30.602 508.078 mo
102.602 477.359 li
174.602 419.039 li
246.602 458.641 li
318.602 419.039 li
390.602 438.48 li
462.602 415.441 li
534.719 462.602 li
606.719 427.32 li
@
grestore
35.512 513.07 mo
25.43 502.988 li
25.43 513.07 mo
35.512 502.988 li
@
107.512 482.352 mo
97.43 472.27 li
97.43 482.352 mo
107.512 472.27 li
@
179.629 424.031 mo
169.551 413.949 li
169.551 424.031 mo
179.629 413.949 li
@
251.629 463.629 mo
241.551 453.551 li
241.551 463.629 mo
251.629 453.551 li
@
323.629 424.031 mo
313.551 413.949 li
313.551 424.031 mo
323.629 413.949 li
@
395.629 443.469 mo
385.551 433.391 li
385.551 443.469 mo
395.629 433.391 li
@
467.629 420.309 mo
457.551 410.23 li
457.551 420.309 mo
467.629 410.23 li
@
539.629 467.469 mo
529.551 457.391 li
529.551 467.469 mo
539.629 457.391 li
@
611.629 432.309 mo
601.551 422.23 li
601.551 432.309 mo
611.629 422.23 li
@
gsave
30.48 24.961 mo
607.32 24.961 li
607.32 508.801 li
30.48 508.801 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
30.602 508.078 mo
102.602 476.879 li
174.602 417 li
246.602 450.359 li
318.602 442.559 li
390.602 459.121 li
462.602 452.16 li
534.719 448.559 li
606.719 453.48 li
.62768 .285466 0 0 cmyk
@
grestore
35.031 512.59 mo
25.91 503.469 li
25.91 512.59 mo
35.031 503.469 li
.62768 .285466 0 0 cmyk
@
107.031 481.391 mo
97.91 472.27 li
97.91 481.391 mo
107.031 472.27 li
@
179.148 421.391 mo
170.031 412.27 li
170.031 421.391 mo
179.148 412.27 li
@
251.148 454.871 mo
242.031 445.75 li
242.031 454.871 mo
251.148 445.75 li
@
323.148 447.07 mo
314.031 437.949 li
314.031 447.07 mo
323.148 437.949 li
@
395.148 463.512 mo
386.031 454.391 li
386.031 463.512 mo
395.148 454.391 li
@
467.148 456.551 mo
458.031 447.43 li
458.031 456.551 mo
467.148 447.43 li
@
539.148 452.949 mo
530.031 443.828 li
530.031 452.949 mo
539.148 443.828 li
@
611.148 457.988 mo
602.031 448.871 li
602.031 457.988 mo
611.148 448.871 li
@
gsave
30.48 24.961 mo
607.32 24.961 li
607.32 508.801 li
30.48 508.801 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
30.602 508.078 mo
102.602 477.238 li
174.602 416.762 li
246.602 450.961 li
318.602 442.441 li
390.602 459.238 li
462.602 448.559 li
534.719 440.762 li
606.719 445.078 li
.466651 0 .889799 0 cmyk
@
grestore
35.512 513.07 mo
25.43 502.988 li
25.43 513.07 mo
35.512 502.988 li
.466651 0 .889799 0 cmyk
@
107.512 482.109 mo
97.43 472.031 li
97.43 482.109 mo
107.512 472.031 li
@
179.629 421.629 mo
169.551 411.551 li
169.551 421.629 mo
179.629 411.551 li
@
251.629 455.949 mo
241.551 445.871 li
241.551 455.949 mo
251.629 445.871 li
@
323.629 447.309 mo
313.551 437.23 li
313.551 447.309 mo
323.629 437.23 li
@
395.629 464.23 mo
385.551 454.148 li
385.551 464.23 mo
395.629 454.148 li
@
467.629 453.551 mo
457.551 443.469 li
457.551 453.551 mo
467.629 443.469 li
@
539.629 445.629 mo
529.551 435.551 li
529.551 445.629 mo
539.629 435.551 li
@
611.629 450.07 mo
601.551 439.988 li
601.551 450.07 mo
611.629 439.988 li
@
13.359 500.082 mo
19.441 500.082 li
19.441 514.734 li
13.359 514.734 li
cp
0 0 0 0 cmyk
ef
18.801 511.187 mo
18.797 511.262 18.793 511.324 18.785 511.375 cv
18.773 511.43 18.758 511.473 18.738 511.5 cv
18.715 511.535 18.691 511.559 18.668 511.566 cv
18.645 511.582 18.617 511.586 18.59 511.586 cv
14.629 511.586 li
14.602 511.586 14.578 511.582 14.555 511.566 cv
14.531 511.559 14.508 511.535 14.488 511.5 cv
14.465 511.473 14.449 511.43 14.438 511.375 cv
14.422 511.324 14.414 511.262 14.418 511.187 cv
14.414 511.117 14.422 511.059 14.438 511.008 cv
14.449 510.957 14.461 510.914 14.48 510.879 cv
14.496 510.848 14.52 510.824 14.543 510.805 cv
14.566 510.789 14.594 510.777 14.629 510.777 cv
16.215 510.777 li
16.215 505.012 li
14.746 505.883 li
14.672 505.93 14.613 505.953 14.57 505.957 cv
14.523 505.969 14.488 505.961 14.461 505.93 cv
14.43 505.906 14.41 505.863 14.402 505.805 cv
14.395 505.746 14.391 505.672 14.391 505.578 cv
14.391 505.516 14.391 505.457 14.398 505.41 cv
14.402 505.363 14.414 505.324 14.426 505.293 cv
14.434 505.262 14.449 505.234 14.473 505.211 cv
14.496 505.187 14.523 505.164 14.559 505.141 cv
16.309 504.023 li
16.32 504.012 16.34 504 16.367 503.992 cv
16.387 503.984 16.418 503.977 16.453 503.969 cv
16.484 503.961 16.523 503.957 16.574 503.957 cv
16.617 503.957 16.676 503.957 16.754 503.953 cv
16.844 503.957 16.922 503.961 16.988 503.965 cv
17.047 503.977 17.098 503.988 17.133 503.996 cv
17.164 504.012 17.188 504.027 17.203 504.047 cv
17.215 504.07 17.219 504.094 17.223 504.117 cv
17.223 510.777 li
18.59 510.777 li
18.617 510.777 18.648 510.789 18.68 510.805 cv
18.707 510.824 18.727 510.848 18.746 510.879 cv
18.762 510.914 18.777 510.957 18.785 511.008 cv
18.793 511.059 18.797 511.117 18.801 511.187 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.359 467.875 mo
19.441 467.875 li
19.441 482.523 li
13.359 482.523 li
cp
0 0 0 0 cmyk
ef
18.785 478.941 mo
18.785 479.012 18.777 479.074 18.77 479.129 cv
18.754 479.184 18.742 479.23 18.727 479.266 cv
18.711 479.305 18.688 479.332 18.656 479.348 cv
18.625 479.367 18.594 479.375 18.563 479.375 cv
14.371 479.375 li
14.316 479.375 14.27 479.371 14.23 479.355 cv
14.188 479.348 14.152 479.324 14.125 479.289 cv
14.094 479.262 14.07 479.215 14.059 479.152 cv
14.043 479.094 14.039 479.023 14.039 478.937 cv
14.039 478.863 14.039 478.793 14.047 478.73 cv
14.051 478.672 14.066 478.621 14.086 478.574 cv
14.105 478.531 14.129 478.488 14.16 478.441 cv
14.188 478.402 14.227 478.352 14.281 478.297 cv
15.797 476.738 li
16.145 476.379 16.422 476.059 16.637 475.773 cv
16.848 475.488 17.012 475.227 17.129 474.992 cv
17.238 474.758 17.316 474.547 17.355 474.355 cv
17.391 474.164 17.406 473.984 17.41 473.812 cv
17.406 473.648 17.379 473.488 17.324 473.336 cv
17.266 473.187 17.184 473.055 17.078 472.941 cv
16.969 472.832 16.836 472.742 16.676 472.672 cv
16.512 472.605 16.324 472.574 16.121 472.57 cv
15.871 472.574 15.652 472.605 15.457 472.672 cv
15.262 472.742 15.09 472.816 14.941 472.891 cv
14.793 472.973 14.668 473.043 14.574 473.105 cv
14.473 473.172 14.402 473.207 14.355 473.203 cv
14.324 473.207 14.297 473.199 14.277 473.18 cv
14.254 473.168 14.234 473.141 14.223 473.105 cv
14.207 473.074 14.199 473.027 14.191 472.965 cv
14.184 472.906 14.18 472.836 14.18 472.754 cv
14.18 472.695 14.18 472.645 14.184 472.602 cv
14.188 472.562 14.195 472.527 14.207 472.492 cv
14.215 472.465 14.227 472.434 14.246 472.402 cv
14.258 472.375 14.289 472.344 14.34 472.301 cv
14.383 472.262 14.465 472.203 14.582 472.133 cv
14.695 472.062 14.84 471.996 15.016 471.926 cv
15.188 471.859 15.379 471.801 15.59 471.75 cv
15.797 471.707 16.016 471.684 16.246 471.68 cv
16.613 471.684 16.934 471.734 17.211 471.836 cv
17.484 471.941 17.715 472.082 17.895 472.262 cv
18.074 472.441 18.211 472.652 18.305 472.891 cv
18.395 473.129 18.438 473.383 18.441 473.648 cv
18.438 473.898 18.418 474.141 18.375 474.375 cv
18.328 474.617 18.234 474.875 18.102 475.152 cv
17.961 475.434 17.762 475.746 17.5 476.086 cv
17.238 476.43 16.891 476.82 16.457 477.266 cv
15.258 478.52 li
18.559 478.52 li
18.586 478.52 18.617 478.531 18.648 478.547 cv
18.676 478.566 18.699 478.59 18.723 478.625 cv
18.738 478.664 18.754 478.711 18.77 478.758 cv
18.777 478.812 18.785 478.871 18.785 478.941 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.359 435.672 mo
19.441 435.672 li
19.441 450.32 li
13.359 450.32 li
cp
0 0 0 0 cmyk
ef
18.727 444.973 mo
18.727 445.32 18.664 445.637 18.543 445.914 cv
18.422 446.195 18.25 446.434 18.023 446.633 cv
17.797 446.832 17.516 446.984 17.184 447.09 cv
16.852 447.195 16.477 447.246 16.059 447.25 cv
15.805 447.246 15.566 447.227 15.348 447.187 cv
15.125 447.148 14.93 447.102 14.762 447.047 cv
14.586 446.992 14.445 446.934 14.332 446.871 cv
14.215 446.809 14.141 446.766 14.117 446.738 cv
14.086 446.711 14.066 446.684 14.051 446.656 cv
14.035 446.629 14.02 446.594 14.008 446.555 cv
13.996 446.516 13.988 446.469 13.98 446.414 cv
13.973 446.359 13.969 446.289 13.973 446.203 cv
13.969 446.062 13.984 445.965 14.016 445.91 cv
14.043 445.855 14.082 445.828 14.137 445.828 cv
14.172 445.828 14.242 445.859 14.348 445.922 cv
14.453 445.984 14.59 446.055 14.758 446.125 cv
14.922 446.203 15.117 446.27 15.34 446.328 cv
15.563 446.395 15.809 446.426 16.086 446.422 cv
16.344 446.426 16.578 446.391 16.781 446.32 cv
16.98 446.254 17.148 446.16 17.285 446.039 cv
17.422 445.922 17.523 445.781 17.594 445.609 cv
17.66 445.445 17.695 445.262 17.695 445.066 cv
17.695 444.852 17.648 444.66 17.563 444.484 cv
17.473 444.316 17.348 444.168 17.184 444.039 cv
17.016 443.918 16.809 443.82 16.566 443.754 cv
16.316 443.691 16.039 443.66 15.734 443.656 cv
14.992 443.656 li
14.957 443.66 14.926 443.652 14.895 443.637 cv
14.863 443.621 14.836 443.598 14.816 443.566 cv
14.793 443.535 14.773 443.496 14.762 443.445 cv
14.746 443.395 14.742 443.328 14.742 443.242 cv
14.742 443.172 14.746 443.109 14.758 443.059 cv
14.77 443.012 14.785 442.973 14.809 442.941 cv
14.824 442.914 14.852 442.895 14.883 442.879 cv
14.91 442.871 14.941 442.863 14.977 442.859 cv
15.637 442.859 li
15.895 442.863 16.125 442.828 16.332 442.758 cv
16.535 442.691 16.711 442.598 16.852 442.469 cv
16.992 442.348 17.102 442.199 17.18 442.023 cv
17.258 441.852 17.297 441.656 17.297 441.437 cv
17.297 441.285 17.27 441.137 17.219 440.992 cv
17.168 440.852 17.094 440.727 16.992 440.621 cv
16.891 440.516 16.758 440.434 16.602 440.371 cv
16.438 440.316 16.258 440.285 16.055 440.281 cv
15.828 440.285 15.617 440.32 15.43 440.383 cv
15.234 440.453 15.066 440.523 14.922 440.602 cv
14.77 440.68 14.648 440.754 14.555 440.82 cv
14.457 440.891 14.387 440.926 14.348 440.922 cv
14.32 440.926 14.297 440.922 14.277 440.91 cv
14.254 440.902 14.234 440.883 14.223 440.852 cv
14.207 440.824 14.199 440.781 14.191 440.727 cv
14.184 440.676 14.18 440.605 14.184 440.52 cv
14.18 440.461 14.184 440.41 14.191 440.363 cv
14.195 440.32 14.203 440.281 14.215 440.246 cv
14.223 440.215 14.234 440.184 14.254 440.156 cv
14.266 440.133 14.293 440.102 14.332 440.062 cv
14.371 440.023 14.445 439.969 14.559 439.898 cv
14.672 439.828 14.813 439.762 14.98 439.691 cv
15.145 439.625 15.336 439.566 15.555 439.516 cv
15.77 439.473 16.004 439.449 16.254 439.445 cv
16.605 439.449 16.914 439.492 17.18 439.582 cv
17.445 439.676 17.664 439.805 17.844 439.965 cv
18.02 440.133 18.152 440.328 18.242 440.555 cv
18.328 440.781 18.375 441.035 18.375 441.312 cv
18.375 441.551 18.344 441.773 18.281 441.977 cv
18.219 442.184 18.125 442.363 18.004 442.52 cv
17.883 442.68 17.734 442.816 17.559 442.926 cv
17.383 443.043 17.18 443.117 16.949 443.156 cv
16.949 443.168 li
17.211 443.199 17.449 443.266 17.668 443.367 cv
17.883 443.469 18.07 443.598 18.23 443.754 cv
18.383 443.91 18.504 444.094 18.594 444.305 cv
18.68 444.516 18.727 444.738 18.727 444.973 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.359 403.461 mo
19.441 403.461 li
19.441 418.109 li
13.359 418.109 li
cp
0 0 0 0 cmyk
ef
19.105 412.785 mo
19.102 412.918 19.082 413.02 19.047 413.09 cv
19.004 413.164 18.949 413.203 18.887 413.199 cv
18.027 413.199 li
18.027 414.793 li
18.023 414.828 18.016 414.855 18.004 414.875 cv
17.984 414.898 17.957 414.914 17.918 414.93 cv
17.879 414.945 17.824 414.957 17.762 414.965 cv
17.695 414.973 17.613 414.977 17.516 414.977 cv
17.414 414.977 17.336 414.973 17.273 414.965 cv
17.211 414.957 17.16 414.945 17.121 414.93 cv
17.082 414.914 17.055 414.898 17.039 414.875 cv
17.023 414.855 17.016 414.828 17.02 414.793 cv
17.02 413.199 li
13.918 413.199 li
13.871 413.203 13.836 413.195 13.805 413.184 cv
13.773 413.176 13.742 413.156 13.719 413.121 cv
13.688 413.094 13.672 413.047 13.664 412.984 cv
13.656 412.926 13.652 412.852 13.652 412.754 cv
13.652 412.684 13.652 412.617 13.656 412.559 cv
13.66 412.5 13.668 412.445 13.68 412.398 cv
13.691 412.352 13.707 412.305 13.727 412.258 cv
13.746 412.211 13.77 412.164 13.797 412.113 cv
16.5 407.504 li
16.52 407.477 16.547 407.449 16.586 407.422 cv
16.621 407.402 16.672 407.383 16.734 407.363 cv
16.793 407.352 16.863 407.34 16.953 407.332 cv
17.039 407.328 17.145 407.324 17.266 407.324 cv
17.395 407.324 17.508 407.332 17.605 407.34 cv
17.703 407.355 17.781 407.367 17.844 407.379 cv
17.898 407.398 17.945 407.418 17.98 407.441 cv
18.008 407.465 18.023 407.496 18.027 407.527 cv
18.027 412.371 li
18.887 412.371 li
18.949 412.375 19.004 412.41 19.043 412.473 cv
19.082 412.543 19.102 412.645 19.105 412.785 cv
cp
17.02 408.207 mo
17.012 408.207 li
14.574 412.371 li
17.02 412.371 li
cp
.629114 .553033 .543389 .289647 cmyk
f
13.359 371.25 mo
19.441 371.25 li
19.441 385.898 li
13.359 385.898 li
cp
0 0 0 0 cmyk
ef
18.75 380.293 mo
18.75 380.699 18.68 381.062 18.543 381.379 cv
18.406 381.695 18.215 381.961 17.965 382.18 cv
17.715 382.398 17.414 382.562 17.07 382.672 cv
16.719 382.781 16.336 382.836 15.918 382.84 cv
15.68 382.836 15.457 382.82 15.25 382.789 cv
15.035 382.758 14.848 382.719 14.688 382.672 cv
14.52 382.625 14.387 382.578 14.285 382.527 cv
14.18 382.484 14.109 382.445 14.082 382.414 cv
14.051 382.387 14.031 382.363 14.02 382.336 cv
14.008 382.316 13.996 382.289 13.988 382.254 cv
13.973 382.223 13.969 382.18 13.969 382.129 cv
13.965 382.078 13.961 382.016 13.965 381.945 cv
13.961 381.883 13.965 381.824 13.973 381.77 cv
13.977 381.715 13.988 381.672 14.004 381.641 cv
14.02 381.609 14.035 381.586 14.059 381.566 cv
14.074 381.555 14.102 381.547 14.133 381.543 cv
14.172 381.547 14.23 381.57 14.313 381.617 cv
14.395 381.664 14.504 381.719 14.645 381.773 cv
14.781 381.832 14.953 381.883 15.16 381.934 cv
15.363 381.988 15.609 382.016 15.891 382.012 cv
16.152 382.016 16.391 381.984 16.613 381.918 cv
16.828 381.859 17.016 381.762 17.176 381.625 cv
17.332 381.496 17.457 381.328 17.547 381.125 cv
17.637 380.922 17.684 380.676 17.684 380.387 cv
17.684 380.145 17.645 379.934 17.57 379.746 cv
17.492 379.562 17.375 379.406 17.219 379.281 cv
17.059 379.16 16.859 379.07 16.617 379.008 cv
16.375 378.953 16.086 378.922 15.75 378.918 cv
15.512 378.922 15.305 378.934 15.137 378.953 cv
14.961 378.98 14.801 378.992 14.652 378.988 cv
14.539 378.992 14.461 378.965 14.418 378.91 cv
14.367 378.859 14.344 378.762 14.348 378.617 cv
14.348 375.527 li
14.344 375.402 14.375 375.305 14.438 375.242 cv
14.5 375.18 14.586 375.148 14.699 375.148 cv
18.059 375.148 li
18.09 375.148 18.117 375.16 18.148 375.176 cv
18.172 375.195 18.199 375.219 18.223 375.254 cv
18.242 375.293 18.254 375.34 18.266 375.391 cv
18.273 375.449 18.281 375.512 18.281 375.582 cv
18.281 375.723 18.262 375.832 18.223 375.91 cv
18.184 375.988 18.129 376.027 18.066 376.027 cv
15.355 376.027 li
15.355 378.152 li
15.484 378.137 15.621 378.125 15.762 378.121 cv
15.898 378.117 16.055 378.113 16.238 378.113 cv
16.652 378.113 17.02 378.168 17.332 378.27 cv
17.645 378.379 17.902 378.523 18.113 378.711 cv
18.32 378.898 18.48 379.129 18.59 379.398 cv
18.695 379.668 18.75 379.965 18.75 380.293 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.359 339.039 mo
19.441 339.039 li
19.441 353.691 li
13.359 353.691 li
cp
0 0 0 0 cmyk
ef
18.98 348.047 mo
18.977 348.379 18.926 348.699 18.828 349.012 cv
18.723 349.324 18.566 349.598 18.359 349.832 cv
18.145 350.066 17.879 350.258 17.555 350.398 cv
17.227 350.539 16.844 350.605 16.406 350.609 cv
16.09 350.605 15.809 350.57 15.57 350.492 cv
15.324 350.418 15.113 350.305 14.938 350.16 cv
14.754 350.02 14.605 349.844 14.488 349.629 cv
14.367 349.422 14.27 349.18 14.199 348.906 cv
14.121 348.637 14.07 348.344 14.043 348.02 cv
14.008 347.703 13.992 347.359 13.996 346.992 cv
13.992 346.668 14.012 346.34 14.051 346.008 cv
14.086 345.676 14.148 345.355 14.238 345.047 cv
14.324 344.738 14.445 344.449 14.602 344.176 cv
14.758 343.906 14.949 343.668 15.184 343.465 cv
15.414 343.266 15.695 343.105 16.02 342.988 cv
16.34 342.871 16.715 342.812 17.152 342.812 cv
17.293 342.812 17.441 342.824 17.59 342.84 cv
17.738 342.863 17.875 342.887 18 342.91 cv
18.125 342.941 18.23 342.973 18.316 343.008 cv
18.402 343.043 18.457 343.07 18.484 343.094 cv
18.512 343.117 18.531 343.141 18.547 343.164 cv
18.555 343.187 18.566 343.215 18.578 343.246 cv
18.582 343.277 18.59 343.312 18.598 343.344 cv
18.602 343.383 18.602 343.426 18.605 343.48 cv
18.602 343.551 18.602 343.613 18.602 343.664 cv
18.598 343.715 18.59 343.754 18.578 343.785 cv
18.563 343.816 18.543 343.84 18.523 343.855 cv
18.5 343.871 18.473 343.879 18.441 343.879 cv
18.395 343.879 18.336 343.867 18.262 343.84 cv
18.188 343.812 18.098 343.781 17.992 343.746 cv
17.887 343.715 17.758 343.684 17.609 343.656 cv
17.457 343.633 17.285 343.621 17.086 343.617 cv
16.723 343.621 16.41 343.695 16.148 343.84 cv
15.883 343.992 15.668 344.191 15.504 344.437 cv
15.34 344.691 15.215 344.98 15.137 345.309 cv
15.055 345.637 15.012 345.98 15 346.34 cv
15.102 346.281 15.215 346.223 15.344 346.164 cv
15.469 346.109 15.605 346.059 15.758 346.008 cv
15.906 345.965 16.066 345.926 16.234 345.895 cv
16.402 345.863 16.582 345.848 16.777 345.848 cv
17.184 345.848 17.531 345.906 17.813 346.016 cv
18.094 346.129 18.32 346.281 18.492 346.477 cv
18.664 346.676 18.789 346.91 18.867 347.176 cv
18.941 347.449 18.977 347.738 18.98 348.047 cv
cp
17.957 348.141 mo
17.953 347.914 17.93 347.707 17.891 347.52 cv
17.844 347.336 17.77 347.18 17.664 347.051 cv
17.559 346.922 17.418 346.82 17.242 346.75 cv
17.066 346.68 16.852 346.645 16.594 346.645 cv
16.449 346.645 16.305 346.66 16.16 346.684 cv
16.012 346.711 15.871 346.746 15.738 346.789 cv
15.605 346.836 15.477 346.887 15.352 346.949 cv
15.227 347.012 15.113 347.078 15.02 347.141 cv
15.016 347.648 15.047 348.07 15.113 348.41 cv
15.176 348.75 15.27 349.023 15.395 349.227 cv
15.516 349.434 15.672 349.578 15.855 349.664 cv
16.035 349.754 16.25 349.797 16.5 349.797 cv
16.75 349.797 16.965 349.75 17.148 349.656 cv
17.332 349.562 17.484 349.437 17.605 349.277 cv
17.727 349.121 17.816 348.945 17.871 348.746 cv
17.926 348.551 17.953 348.348 17.957 348.141 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.359 306.828 mo
19.441 306.828 li
19.441 321.48 li
13.359 321.48 li
cp
0 0 0 0 cmyk
ef
18.895 311.141 mo
18.891 311.211 18.887 311.277 18.887 311.332 cv
18.879 311.391 18.871 311.445 18.863 311.496 cv
18.848 311.551 18.836 311.602 18.82 311.648 cv
18.805 311.699 18.785 311.75 18.762 311.805 cv
16.031 318.094 li
16.012 318.145 15.984 318.184 15.957 318.211 cv
15.926 318.242 15.891 318.266 15.844 318.281 cv
15.797 318.297 15.738 318.305 15.672 318.312 cv
15.598 318.32 15.512 318.324 15.418 318.324 cv
15.277 318.324 15.176 318.316 15.105 318.305 cv
15.031 318.293 14.977 318.277 14.945 318.25 cv
14.91 318.227 14.895 318.195 14.898 318.156 cv
14.902 318.121 14.918 318.078 14.941 318.023 cv
17.813 311.594 li
14.176 311.594 li
14.098 311.598 14.043 311.559 14.004 311.477 cv
13.965 311.402 13.945 311.293 13.949 311.148 cv
13.945 311.074 13.949 311.008 13.965 310.953 cv
13.973 310.898 13.988 310.855 14.008 310.816 cv
14.027 310.781 14.051 310.754 14.078 310.734 cv
14.105 310.719 14.137 310.707 14.176 310.707 cv
18.59 310.707 li
18.645 310.707 18.691 310.715 18.734 310.727 cv
18.773 310.738 18.805 310.762 18.828 310.797 cv
18.848 310.832 18.867 310.875 18.879 310.93 cv
18.887 310.984 18.891 311.055 18.895 311.141 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.359 274.621 mo
19.441 274.621 li
19.441 289.269 li
13.359 289.269 li
cp
0 0 0 0 cmyk
ef
18.961 284.133 mo
18.961 284.461 18.902 284.754 18.785 285.008 cv
18.668 285.266 18.496 285.48 18.277 285.656 cv
18.055 285.836 17.785 285.969 17.461 286.055 cv
17.133 286.141 16.762 286.184 16.348 286.187 cv
15.957 286.184 15.605 286.145 15.297 286.066 cv
14.988 285.988 14.727 285.867 14.512 285.703 cv
14.297 285.543 14.133 285.348 14.02 285.109 cv
13.906 284.879 13.852 284.609 13.852 284.309 cv
13.852 284.074 13.891 283.855 13.969 283.652 cv
14.047 283.453 14.156 283.27 14.305 283.102 cv
14.449 282.937 14.633 282.781 14.848 282.633 cv
15.059 282.484 15.301 282.344 15.574 282.211 cv
15.34 282.094 15.133 281.969 14.953 281.828 cv
14.773 281.695 14.621 281.547 14.496 281.387 cv
14.371 281.23 14.273 281.062 14.211 280.879 cv
14.141 280.703 14.109 280.508 14.113 280.297 cv
14.109 280.035 14.156 279.785 14.258 279.551 cv
14.352 279.316 14.496 279.113 14.691 278.941 cv
14.879 278.77 15.125 278.637 15.43 278.535 cv
15.727 278.437 16.078 278.387 16.477 278.383 cv
16.859 278.387 17.188 278.434 17.469 278.523 cv
17.742 278.617 17.973 278.742 18.16 278.898 cv
18.34 279.059 18.477 279.242 18.563 279.457 cv
18.648 279.676 18.691 279.906 18.691 280.148 cv
18.691 280.348 18.656 280.539 18.594 280.723 cv
18.523 280.91 18.43 281.086 18.309 281.246 cv
18.18 281.414 18.027 281.566 17.848 281.707 cv
17.668 281.848 17.461 281.98 17.227 282.105 cv
17.504 282.246 17.75 282.387 17.969 282.527 cv
18.184 282.672 18.363 282.828 18.512 282.992 cv
18.652 283.16 18.766 283.336 18.844 283.52 cv
18.922 283.707 18.961 283.91 18.961 284.133 cv
cp
17.695 280.242 mo
17.695 280.078 17.664 279.93 17.609 279.797 cv
17.551 279.664 17.469 279.551 17.363 279.457 cv
17.25 279.363 17.113 279.293 16.953 279.246 cv
16.789 279.199 16.605 279.176 16.402 279.172 cv
15.977 279.176 15.656 279.27 15.441 279.457 cv
15.223 279.648 15.117 279.91 15.117 280.242 cv
15.117 280.395 15.141 280.539 15.195 280.668 cv
15.246 280.801 15.328 280.922 15.441 281.039 cv
15.551 281.156 15.691 281.273 15.863 281.383 cv
16.031 281.496 16.234 281.609 16.473 281.73 cv
16.863 281.527 17.168 281.305 17.379 281.059 cv
17.59 280.812 17.695 280.539 17.695 280.242 cv
cp
17.941 284.238 mo
17.941 284.059 17.906 283.898 17.84 283.75 cv
17.773 283.609 17.672 283.473 17.539 283.34 cv
17.402 283.215 17.234 283.09 17.035 282.969 cv
16.832 282.852 16.602 282.727 16.336 282.598 cv
16.086 282.723 15.867 282.844 15.688 282.961 cv
15.5 283.082 15.348 283.207 15.23 283.336 cv
15.105 283.469 15.016 283.605 14.961 283.746 cv
14.898 283.887 14.871 284.043 14.871 284.215 cv
14.871 284.594 15 284.887 15.262 285.094 cv
15.52 285.305 15.906 285.41 16.426 285.406 cv
16.922 285.41 17.301 285.305 17.559 285.094 cv
17.813 284.883 17.941 284.598 17.941 284.238 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
13.359 242.41 mo
19.441 242.41 li
19.441 257.058 li
13.359 257.058 li
cp
0 0 0 0 cmyk
ef
18.844 249.781 mo
18.844 250.109 18.824 250.441 18.785 250.777 cv
18.746 251.113 18.68 251.437 18.586 251.75 cv
18.492 252.062 18.363 252.355 18.207 252.621 cv
18.047 252.895 17.848 253.129 17.609 253.332 cv
17.367 253.535 17.082 253.695 16.754 253.809 cv
16.422 253.922 16.039 253.977 15.605 253.98 cv
15.434 253.977 15.27 253.965 15.113 253.949 cv
14.953 253.926 14.813 253.902 14.688 253.871 cv
14.559 253.84 14.453 253.809 14.367 253.773 cv
14.281 253.738 14.219 253.703 14.18 253.668 cv
14.141 253.633 14.109 253.586 14.094 253.523 cv
14.07 253.469 14.063 253.387 14.066 253.277 cv
14.063 253.199 14.066 253.129 14.074 253.074 cv
14.082 253.023 14.09 252.984 14.102 252.957 cv
14.113 252.934 14.129 252.918 14.152 252.902 cv
14.168 252.895 14.195 252.887 14.23 252.887 cv
14.273 252.887 14.336 252.902 14.414 252.93 cv
14.492 252.961 14.59 252.992 14.707 253.027 cv
14.824 253.066 14.965 253.102 15.129 253.125 cv
15.289 253.156 15.469 253.168 15.668 253.168 cv
16.047 253.168 16.371 253.098 16.645 252.949 cv
16.914 252.809 17.137 252.609 17.309 252.359 cv
17.48 252.113 17.609 251.828 17.695 251.504 cv
17.781 251.184 17.828 250.844 17.836 250.48 cv
17.629 250.602 17.379 250.707 17.094 250.801 cv
16.801 250.895 16.469 250.941 16.098 250.941 cv
15.672 250.941 15.316 250.887 15.031 250.77 cv
14.742 250.66 14.512 250.5 14.34 250.297 cv
14.164 250.098 14.039 249.863 13.965 249.586 cv
13.887 249.316 13.852 249.016 13.852 248.691 cv
13.852 248.355 13.898 248.039 13.996 247.734 cv
14.094 247.434 14.246 247.164 14.453 246.934 cv
14.66 246.707 14.926 246.523 15.246 246.383 cv
15.566 246.246 15.949 246.18 16.395 246.176 cv
16.711 246.18 16.988 246.219 17.234 246.297 cv
17.477 246.379 17.691 246.496 17.871 246.645 cv
18.051 246.801 18.203 246.98 18.328 247.191 cv
18.453 247.402 18.551 247.645 18.629 247.914 cv
18.703 248.184 18.758 248.477 18.793 248.789 cv
18.824 249.109 18.844 249.437 18.844 249.781 cv
cp
17.816 249.668 mo
17.813 249.172 17.781 248.75 17.719 248.406 cv
17.652 248.066 17.555 247.789 17.426 247.578 cv
17.293 247.367 17.133 247.215 16.949 247.121 cv
16.758 247.027 16.543 246.98 16.301 246.98 cv
16.043 246.98 15.824 247.027 15.648 247.117 cv
15.465 247.211 15.316 247.336 15.207 247.488 cv
15.09 247.645 15.008 247.816 14.953 248.012 cv
14.898 248.207 14.871 248.41 14.871 248.613 cv
14.871 248.848 14.895 249.059 14.945 249.25 cv
14.992 249.441 15.07 249.602 15.184 249.734 cv
15.289 249.867 15.434 249.973 15.609 250.043 cv
15.781 250.121 15.996 250.156 16.262 250.152 cv
16.551 250.156 16.836 250.113 17.109 250.02 cv
17.383 249.934 17.617 249.816 17.816 249.668 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
7.281 210.199 mo
19.441 210.199 li
19.441 224.851 li
7.281 224.851 li
cp
0 0 0 0 cmyk
ef
12.73 221.242 mo
12.727 221.316 12.723 221.379 12.715 221.43 cv
12.703 221.484 12.688 221.527 12.668 221.555 cv
12.645 221.59 12.621 221.613 12.598 221.621 cv
12.574 221.637 12.547 221.641 12.52 221.641 cv
8.559 221.641 li
8.531 221.641 8.508 221.637 8.484 221.621 cv
8.461 221.613 8.438 221.59 8.418 221.555 cv
8.395 221.527 8.379 221.484 8.367 221.43 cv
8.352 221.379 8.344 221.316 8.348 221.242 cv
8.344 221.172 8.352 221.113 8.367 221.062 cv
8.379 221.012 8.391 220.969 8.41 220.934 cv
8.426 220.902 8.449 220.879 8.473 220.859 cv
8.496 220.844 8.523 220.832 8.559 220.832 cv
10.145 220.832 li
10.145 215.066 li
8.676 215.937 li
8.602 215.984 8.543 216.008 8.5 216.012 cv
8.453 216.023 8.418 216.016 8.391 215.984 cv
8.359 215.961 8.34 215.918 8.332 215.859 cv
8.324 215.801 8.32 215.727 8.32 215.633 cv
8.32 215.57 8.32 215.512 8.328 215.465 cv
8.332 215.418 8.344 215.379 8.355 215.348 cv
8.363 215.316 8.379 215.289 8.402 215.266 cv
8.426 215.242 8.453 215.219 8.488 215.195 cv
10.238 214.078 li
10.25 214.066 10.27 214.055 10.297 214.047 cv
10.316 214.039 10.348 214.031 10.383 214.023 cv
10.414 214.016 10.453 214.012 10.504 214.012 cv
10.547 214.012 10.605 214.012 10.684 214.008 cv
10.773 214.012 10.852 214.016 10.918 214.02 cv
10.977 214.031 11.027 214.043 11.063 214.051 cv
11.094 214.066 11.117 214.082 11.133 214.102 cv
11.145 214.125 11.148 214.148 11.152 214.172 cv
11.152 220.832 li
12.52 220.832 li
12.547 220.832 12.578 220.844 12.609 220.859 cv
12.637 220.879 12.656 220.902 12.676 220.934 cv
12.691 220.969 12.707 221.012 12.715 221.062 cv
12.723 221.113 12.727 221.172 12.73 221.242 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.086 217.832 mo
19.082 218.414 19.035 218.945 18.949 219.426 cv
18.855 219.91 18.703 220.324 18.492 220.668 cv
18.273 221.012 17.996 221.281 17.656 221.469 cv
17.309 221.656 16.887 221.746 16.387 221.75 cv
15.91 221.746 15.508 221.664 15.184 221.496 cv
14.855 221.328 14.594 221.078 14.395 220.746 cv
14.191 220.418 14.047 220.012 13.969 219.527 cv
13.883 219.047 13.844 218.492 13.844 217.867 cv
13.844 217.289 13.891 216.762 13.984 216.277 cv
14.078 215.801 14.23 215.387 14.441 215.035 cv
14.652 214.691 14.93 214.422 15.273 214.23 cv
15.617 214.043 16.039 213.949 16.539 213.945 cv
17.016 213.949 17.418 214.035 17.746 214.203 cv
18.074 214.375 18.336 214.625 18.535 214.953 cv
18.734 215.285 18.875 215.691 18.961 216.172 cv
19.039 216.656 19.082 217.207 19.086 217.832 cv
cp
18.055 217.902 mo
18.051 217.527 18.039 217.187 18.016 216.883 cv
17.988 216.582 17.945 216.316 17.895 216.086 cv
17.84 215.859 17.773 215.664 17.688 215.492 cv
17.602 215.328 17.5 215.191 17.387 215.082 cv
17.266 214.98 17.133 214.902 16.984 214.848 cv
16.836 214.801 16.668 214.773 16.48 214.773 cv
16.148 214.773 15.879 214.852 15.672 215.008 cv
15.461 215.164 15.297 215.379 15.18 215.652 cv
15.063 215.926 14.98 216.246 14.938 216.613 cv
14.895 216.98 14.875 217.375 14.875 217.797 cv
14.875 218.367 14.902 218.852 14.961 219.242 cv
15.02 219.641 15.113 219.961 15.238 220.211 cv
15.363 220.461 15.523 220.645 15.727 220.758 cv
15.922 220.871 16.164 220.926 16.445 220.926 cv
16.664 220.926 16.855 220.891 17.023 220.82 cv
17.188 220.75 17.328 220.652 17.449 220.52 cv
17.566 220.391 17.668 220.23 17.746 220.047 cv
17.824 219.867 17.887 219.664 17.934 219.437 cv
17.98 219.215 18.012 218.977 18.027 218.715 cv
18.043 218.457 18.051 218.184 18.055 217.902 cv
cp
f
7.281 177.988 mo
19.441 177.988 li
19.441 192.64 li
7.281 192.64 li
cp
0 0 0 0 cmyk
ef
12.73 189.031 mo
12.727 189.105 12.723 189.168 12.715 189.219 cv
12.703 189.273 12.688 189.316 12.668 189.344 cv
12.645 189.379 12.621 189.402 12.598 189.41 cv
12.574 189.426 12.547 189.43 12.52 189.43 cv
8.559 189.43 li
8.531 189.43 8.508 189.426 8.484 189.41 cv
8.461 189.402 8.438 189.379 8.418 189.344 cv
8.395 189.316 8.379 189.273 8.367 189.219 cv
8.352 189.168 8.344 189.105 8.348 189.031 cv
8.344 188.961 8.352 188.902 8.367 188.852 cv
8.379 188.801 8.391 188.758 8.41 188.723 cv
8.426 188.691 8.449 188.668 8.473 188.648 cv
8.496 188.633 8.523 188.621 8.559 188.621 cv
10.145 188.621 li
10.145 182.855 li
8.676 183.727 li
8.602 183.773 8.543 183.797 8.5 183.801 cv
8.453 183.812 8.418 183.805 8.391 183.773 cv
8.359 183.75 8.34 183.707 8.332 183.648 cv
8.324 183.59 8.32 183.516 8.32 183.422 cv
8.32 183.359 8.32 183.301 8.328 183.254 cv
8.332 183.207 8.344 183.168 8.355 183.137 cv
8.363 183.105 8.379 183.078 8.402 183.055 cv
8.426 183.031 8.453 183.008 8.488 182.984 cv
10.238 181.867 li
10.25 181.855 10.27 181.844 10.297 181.836 cv
10.316 181.828 10.348 181.82 10.383 181.812 cv
10.414 181.805 10.453 181.801 10.504 181.801 cv
10.547 181.801 10.605 181.801 10.684 181.797 cv
10.773 181.801 10.852 181.805 10.918 181.809 cv
10.977 181.82 11.027 181.832 11.063 181.84 cv
11.094 181.855 11.117 181.871 11.133 181.891 cv
11.145 181.914 11.148 181.937 11.152 181.961 cv
11.152 188.621 li
12.52 188.621 li
12.547 188.621 12.578 188.633 12.609 188.648 cv
12.637 188.668 12.656 188.691 12.676 188.723 cv
12.691 188.758 12.707 188.801 12.715 188.852 cv
12.723 188.902 12.727 188.961 12.73 189.031 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
18.852 189.031 mo
18.848 189.105 18.844 189.168 18.836 189.219 cv
18.824 189.273 18.809 189.316 18.789 189.344 cv
18.766 189.379 18.742 189.402 18.719 189.41 cv
18.695 189.426 18.668 189.43 18.641 189.43 cv
14.68 189.43 li
14.652 189.43 14.629 189.426 14.605 189.41 cv
14.582 189.402 14.559 189.379 14.539 189.344 cv
14.516 189.316 14.5 189.273 14.488 189.219 cv
14.473 189.168 14.465 189.105 14.469 189.031 cv
14.465 188.961 14.473 188.902 14.488 188.852 cv
14.5 188.801 14.512 188.758 14.531 188.723 cv
14.547 188.691 14.57 188.668 14.594 188.648 cv
14.617 188.633 14.645 188.621 14.68 188.621 cv
16.266 188.621 li
16.266 182.855 li
14.797 183.727 li
14.723 183.773 14.664 183.797 14.621 183.801 cv
14.574 183.812 14.539 183.805 14.512 183.773 cv
14.48 183.75 14.461 183.707 14.453 183.648 cv
14.445 183.59 14.441 183.516 14.441 183.422 cv
14.441 183.359 14.441 183.301 14.449 183.254 cv
14.453 183.207 14.465 183.168 14.477 183.137 cv
14.484 183.105 14.5 183.078 14.523 183.055 cv
14.547 183.031 14.574 183.008 14.609 182.984 cv
16.359 181.867 li
16.371 181.855 16.391 181.844 16.418 181.836 cv
16.438 181.828 16.469 181.82 16.504 181.812 cv
16.535 181.805 16.574 181.801 16.625 181.801 cv
16.668 181.801 16.727 181.801 16.805 181.797 cv
16.895 181.801 16.973 181.805 17.039 181.809 cv
17.098 181.82 17.148 181.832 17.184 181.84 cv
17.215 181.855 17.238 181.871 17.254 181.891 cv
17.266 181.914 17.27 181.937 17.273 181.961 cv
17.273 188.621 li
18.641 188.621 li
18.668 188.621 18.699 188.633 18.73 188.648 cv
18.758 188.668 18.777 188.691 18.797 188.723 cv
18.813 188.758 18.828 188.801 18.836 188.852 cv
18.844 188.902 18.848 188.961 18.852 189.031 cv
cp
f
7.281 145.789 mo
19.441 145.789 li
19.441 160.441 li
7.281 160.441 li
cp
0 0 0 0 cmyk
ef
12.73 156.82 mo
12.727 156.895 12.723 156.957 12.715 157.008 cv
12.703 157.062 12.688 157.105 12.668 157.133 cv
12.645 157.168 12.621 157.191 12.598 157.199 cv
12.574 157.215 12.547 157.219 12.52 157.219 cv
8.559 157.219 li
8.531 157.219 8.508 157.215 8.484 157.199 cv
8.461 157.191 8.438 157.168 8.418 157.133 cv
8.395 157.105 8.379 157.062 8.367 157.008 cv
8.352 156.957 8.344 156.895 8.348 156.82 cv
8.344 156.75 8.352 156.691 8.367 156.641 cv
8.379 156.59 8.391 156.547 8.41 156.512 cv
8.426 156.48 8.449 156.457 8.473 156.437 cv
8.496 156.422 8.523 156.41 8.559 156.41 cv
10.145 156.41 li
10.145 150.645 li
8.676 151.516 li
8.602 151.562 8.543 151.586 8.5 151.59 cv
8.453 151.602 8.418 151.594 8.391 151.562 cv
8.359 151.539 8.34 151.496 8.332 151.437 cv
8.324 151.379 8.32 151.305 8.32 151.211 cv
8.32 151.148 8.32 151.09 8.328 151.043 cv
8.332 150.996 8.344 150.957 8.355 150.926 cv
8.363 150.895 8.379 150.867 8.402 150.844 cv
8.426 150.82 8.453 150.797 8.488 150.773 cv
10.238 149.656 li
10.25 149.645 10.27 149.633 10.297 149.625 cv
10.316 149.617 10.348 149.609 10.383 149.602 cv
10.414 149.594 10.453 149.59 10.504 149.59 cv
10.547 149.59 10.605 149.59 10.684 149.586 cv
10.773 149.59 10.852 149.594 10.918 149.598 cv
10.977 149.609 11.027 149.621 11.063 149.629 cv
11.094 149.645 11.117 149.66 11.133 149.68 cv
11.145 149.703 11.148 149.727 11.152 149.75 cv
11.152 156.41 li
12.52 156.41 li
12.547 156.41 12.578 156.422 12.609 156.437 cv
12.637 156.457 12.656 156.48 12.676 156.512 cv
12.691 156.547 12.707 156.59 12.715 156.641 cv
12.723 156.691 12.727 156.75 12.73 156.82 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
18.836 156.785 mo
18.836 156.855 18.828 156.918 18.82 156.973 cv
18.805 157.027 18.793 157.074 18.777 157.109 cv
18.762 157.148 18.738 157.176 18.707 157.191 cv
18.676 157.211 18.645 157.219 18.613 157.219 cv
14.422 157.219 li
14.367 157.219 14.32 157.215 14.281 157.199 cv
14.238 157.191 14.203 157.168 14.176 157.133 cv
14.145 157.105 14.121 157.059 14.109 156.996 cv
14.094 156.937 14.09 156.867 14.09 156.781 cv
14.09 156.707 14.09 156.637 14.098 156.574 cv
14.102 156.516 14.117 156.465 14.137 156.418 cv
14.156 156.375 14.18 156.332 14.211 156.285 cv
14.238 156.246 14.277 156.195 14.332 156.141 cv
15.848 154.582 li
16.195 154.223 16.473 153.902 16.688 153.617 cv
16.898 153.332 17.063 153.07 17.18 152.836 cv
17.289 152.602 17.367 152.391 17.406 152.199 cv
17.441 152.008 17.457 151.828 17.461 151.656 cv
17.457 151.492 17.43 151.332 17.375 151.18 cv
17.316 151.031 17.234 150.898 17.129 150.785 cv
17.02 150.676 16.887 150.586 16.727 150.516 cv
16.563 150.449 16.375 150.418 16.172 150.414 cv
15.922 150.418 15.703 150.449 15.508 150.516 cv
15.313 150.586 15.141 150.66 14.992 150.734 cv
14.844 150.816 14.719 150.887 14.625 150.949 cv
14.523 151.016 14.453 151.051 14.406 151.047 cv
14.375 151.051 14.348 151.043 14.328 151.023 cv
14.305 151.012 14.285 150.984 14.273 150.949 cv
14.258 150.918 14.25 150.871 14.242 150.809 cv
14.234 150.75 14.23 150.68 14.23 150.598 cv
14.23 150.539 14.23 150.488 14.234 150.445 cv
14.238 150.406 14.246 150.371 14.258 150.336 cv
14.266 150.309 14.277 150.277 14.297 150.246 cv
14.309 150.219 14.34 150.187 14.391 150.145 cv
14.434 150.105 14.516 150.047 14.633 149.977 cv
14.746 149.906 14.891 149.84 15.066 149.77 cv
15.238 149.703 15.43 149.645 15.641 149.594 cv
15.848 149.551 16.066 149.527 16.297 149.523 cv
16.664 149.527 16.984 149.578 17.262 149.68 cv
17.535 149.785 17.766 149.926 17.945 150.105 cv
18.125 150.285 18.262 150.496 18.355 150.734 cv
18.445 150.973 18.488 151.227 18.492 151.492 cv
18.488 151.742 18.469 151.984 18.426 152.219 cv
18.379 152.461 18.285 152.719 18.152 152.996 cv
18.012 153.277 17.813 153.59 17.551 153.93 cv
17.289 154.273 16.941 154.664 16.508 155.109 cv
15.309 156.363 li
18.609 156.363 li
18.637 156.363 18.668 156.375 18.699 156.391 cv
18.727 156.41 18.75 156.434 18.773 156.469 cv
18.789 156.508 18.805 156.555 18.82 156.602 cv
18.828 156.656 18.836 156.715 18.836 156.785 cv
cp
f
7.281 113.578 mo
19.441 113.578 li
19.441 128.23 li
7.281 128.23 li
cp
0 0 0 0 cmyk
ef
12.73 124.59 mo
12.727 124.664 12.723 124.727 12.715 124.777 cv
12.703 124.832 12.688 124.875 12.668 124.902 cv
12.645 124.937 12.621 124.961 12.598 124.969 cv
12.574 124.984 12.547 124.988 12.52 124.988 cv
8.559 124.988 li
8.531 124.988 8.508 124.984 8.484 124.969 cv
8.461 124.961 8.438 124.937 8.418 124.902 cv
8.395 124.875 8.379 124.832 8.367 124.777 cv
8.352 124.727 8.344 124.664 8.348 124.59 cv
8.344 124.52 8.352 124.461 8.367 124.41 cv
8.379 124.359 8.391 124.316 8.41 124.281 cv
8.426 124.25 8.449 124.227 8.473 124.207 cv
8.496 124.191 8.523 124.18 8.559 124.18 cv
10.145 124.18 li
10.145 118.414 li
8.676 119.285 li
8.602 119.332 8.543 119.355 8.5 119.359 cv
8.453 119.371 8.418 119.363 8.391 119.332 cv
8.359 119.309 8.34 119.266 8.332 119.207 cv
8.324 119.148 8.32 119.074 8.32 118.98 cv
8.32 118.918 8.32 118.859 8.328 118.812 cv
8.332 118.766 8.344 118.727 8.355 118.695 cv
8.363 118.664 8.379 118.637 8.402 118.613 cv
8.426 118.59 8.453 118.566 8.488 118.543 cv
10.238 117.426 li
10.25 117.414 10.27 117.402 10.297 117.395 cv
10.316 117.387 10.348 117.379 10.383 117.371 cv
10.414 117.363 10.453 117.359 10.504 117.359 cv
10.547 117.359 10.605 117.359 10.684 117.355 cv
10.773 117.359 10.852 117.363 10.918 117.367 cv
10.977 117.379 11.027 117.391 11.063 117.398 cv
11.094 117.414 11.117 117.43 11.133 117.449 cv
11.145 117.473 11.148 117.496 11.152 117.52 cv
11.152 124.18 li
12.52 124.18 li
12.547 124.18 12.578 124.191 12.609 124.207 cv
12.637 124.227 12.656 124.25 12.676 124.281 cv
12.691 124.316 12.707 124.359 12.715 124.41 cv
12.723 124.461 12.727 124.52 12.73 124.59 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
18.777 122.82 mo
18.777 123.168 18.715 123.484 18.594 123.762 cv
18.473 124.043 18.301 124.281 18.074 124.48 cv
17.848 124.68 17.566 124.832 17.234 124.937 cv
16.902 125.043 16.527 125.094 16.109 125.098 cv
15.855 125.094 15.617 125.074 15.398 125.035 cv
15.176 124.996 14.98 124.949 14.813 124.895 cv
14.637 124.84 14.496 124.781 14.383 124.719 cv
14.266 124.656 14.191 124.613 14.168 124.586 cv
14.137 124.559 14.117 124.531 14.102 124.504 cv
14.086 124.477 14.07 124.441 14.059 124.402 cv
14.047 124.363 14.039 124.316 14.031 124.262 cv
14.023 124.207 14.02 124.137 14.023 124.051 cv
14.02 123.91 14.035 123.812 14.066 123.758 cv
14.094 123.703 14.133 123.676 14.188 123.676 cv
14.223 123.676 14.293 123.707 14.398 123.77 cv
14.504 123.832 14.641 123.902 14.809 123.973 cv
14.973 124.051 15.168 124.117 15.391 124.176 cv
15.613 124.242 15.859 124.273 16.137 124.27 cv
16.395 124.273 16.629 124.238 16.832 124.168 cv
17.031 124.102 17.199 124.008 17.336 123.887 cv
17.473 123.77 17.574 123.629 17.645 123.457 cv
17.711 123.293 17.746 123.109 17.746 122.914 cv
17.746 122.699 17.699 122.508 17.613 122.332 cv
17.523 122.164 17.398 122.016 17.234 121.887 cv
17.066 121.766 16.859 121.668 16.617 121.602 cv
16.367 121.539 16.09 121.508 15.785 121.504 cv
15.043 121.504 li
15.008 121.508 14.977 121.5 14.945 121.484 cv
14.914 121.469 14.887 121.445 14.867 121.414 cv
14.844 121.383 14.824 121.344 14.813 121.293 cv
14.797 121.242 14.793 121.176 14.793 121.09 cv
14.793 121.02 14.797 120.957 14.809 120.906 cv
14.82 120.859 14.836 120.82 14.859 120.789 cv
14.875 120.762 14.902 120.742 14.934 120.727 cv
14.961 120.719 14.992 120.711 15.027 120.707 cv
15.688 120.707 li
15.945 120.711 16.176 120.676 16.383 120.605 cv
16.586 120.539 16.762 120.445 16.902 120.316 cv
17.043 120.195 17.152 120.047 17.23 119.871 cv
17.309 119.699 17.348 119.504 17.348 119.285 cv
17.348 119.133 17.32 118.984 17.27 118.84 cv
17.219 118.699 17.145 118.574 17.043 118.469 cv
16.941 118.363 16.809 118.281 16.652 118.219 cv
16.488 118.164 16.309 118.133 16.105 118.129 cv
15.879 118.133 15.668 118.168 15.48 118.23 cv
15.285 118.301 15.117 118.371 14.973 118.449 cv
14.82 118.527 14.699 118.602 14.605 118.668 cv
14.508 118.738 14.438 118.773 14.398 118.77 cv
14.371 118.773 14.348 118.77 14.328 118.758 cv
14.305 118.75 14.285 118.73 14.273 118.699 cv
14.258 118.672 14.25 118.629 14.242 118.574 cv
14.234 118.523 14.23 118.453 14.234 118.367 cv
14.23 118.309 14.234 118.258 14.242 118.211 cv
14.246 118.168 14.254 118.129 14.266 118.094 cv
14.273 118.062 14.285 118.031 14.305 118.004 cv
14.316 117.98 14.344 117.949 14.383 117.91 cv
14.422 117.871 14.496 117.816 14.609 117.746 cv
14.723 117.676 14.863 117.609 15.031 117.539 cv
15.195 117.473 15.387 117.414 15.605 117.363 cv
15.82 117.32 16.055 117.297 16.305 117.293 cv
16.656 117.297 16.965 117.34 17.23 117.43 cv
17.496 117.523 17.715 117.652 17.895 117.812 cv
18.07 117.98 18.203 118.176 18.293 118.402 cv
18.379 118.629 18.426 118.883 18.426 119.16 cv
18.426 119.398 18.395 119.621 18.332 119.824 cv
18.27 120.031 18.176 120.211 18.055 120.367 cv
17.934 120.527 17.785 120.664 17.609 120.773 cv
17.434 120.891 17.23 120.965 17 121.004 cv
17 121.016 li
17.262 121.047 17.5 121.113 17.719 121.215 cv
17.934 121.316 18.121 121.445 18.281 121.602 cv
18.434 121.758 18.555 121.941 18.645 122.152 cv
18.73 122.363 18.777 122.586 18.777 122.82 cv
cp
f
7.281 81.371 mo
19.441 81.371 li
19.441 96.019 li
7.281 96.019 li
cp
0 0 0 0 cmyk
ef
12.73 92.383 mo
12.727 92.457 12.723 92.52 12.715 92.57 cv
12.703 92.625 12.688 92.668 12.668 92.695 cv
12.645 92.73 12.621 92.754 12.598 92.762 cv
12.574 92.777 12.547 92.781 12.52 92.781 cv
8.559 92.781 li
8.531 92.781 8.508 92.777 8.484 92.762 cv
8.461 92.754 8.438 92.73 8.418 92.695 cv
8.395 92.668 8.379 92.625 8.367 92.57 cv
8.352 92.52 8.344 92.457 8.348 92.383 cv
8.344 92.312 8.352 92.254 8.367 92.203 cv
8.379 92.152 8.391 92.109 8.41 92.074 cv
8.426 92.043 8.449 92.02 8.473 92 cv
8.496 91.984 8.523 91.973 8.559 91.973 cv
10.145 91.973 li
10.145 86.207 li
8.676 87.078 li
8.602 87.125 8.543 87.148 8.5 87.152 cv
8.453 87.164 8.418 87.156 8.391 87.125 cv
8.359 87.102 8.34 87.059 8.332 87 cv
8.324 86.941 8.32 86.867 8.32 86.773 cv
8.32 86.711 8.32 86.652 8.328 86.605 cv
8.332 86.559 8.344 86.52 8.355 86.488 cv
8.363 86.457 8.379 86.43 8.402 86.406 cv
8.426 86.383 8.453 86.359 8.488 86.336 cv
10.238 85.219 li
10.25 85.207 10.27 85.195 10.297 85.187 cv
10.316 85.18 10.348 85.172 10.383 85.164 cv
10.414 85.156 10.453 85.152 10.504 85.152 cv
10.547 85.152 10.605 85.152 10.684 85.148 cv
10.773 85.152 10.852 85.156 10.918 85.16 cv
10.977 85.172 11.027 85.184 11.063 85.191 cv
11.094 85.207 11.117 85.223 11.133 85.242 cv
11.145 85.266 11.148 85.289 11.152 85.312 cv
11.152 91.973 li
12.52 91.973 li
12.547 91.973 12.578 91.984 12.609 92 cv
12.637 92.02 12.656 92.043 12.676 92.074 cv
12.691 92.109 12.707 92.152 12.715 92.203 cv
12.723 92.254 12.727 92.312 12.73 92.383 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.156 90.625 mo
19.152 90.758 19.133 90.859 19.098 90.93 cv
19.055 91.004 19 91.043 18.938 91.039 cv
18.078 91.039 li
18.078 92.633 li
18.074 92.668 18.066 92.695 18.055 92.715 cv
18.035 92.738 18.008 92.754 17.969 92.77 cv
17.93 92.785 17.875 92.797 17.813 92.805 cv
17.746 92.812 17.664 92.816 17.566 92.816 cv
17.465 92.816 17.387 92.812 17.324 92.805 cv
17.262 92.797 17.211 92.785 17.172 92.77 cv
17.133 92.754 17.105 92.738 17.09 92.715 cv
17.074 92.695 17.066 92.668 17.07 92.633 cv
17.07 91.039 li
13.969 91.039 li
13.922 91.043 13.887 91.035 13.855 91.023 cv
13.824 91.016 13.793 90.996 13.77 90.961 cv
13.738 90.934 13.723 90.887 13.715 90.824 cv
13.707 90.766 13.703 90.691 13.703 90.594 cv
13.703 90.523 13.703 90.457 13.707 90.398 cv
13.711 90.34 13.719 90.285 13.73 90.238 cv
13.742 90.191 13.758 90.145 13.777 90.098 cv
13.797 90.051 13.82 90.004 13.848 89.953 cv
16.551 85.344 li
16.57 85.316 16.598 85.289 16.637 85.262 cv
16.672 85.242 16.723 85.223 16.785 85.203 cv
16.844 85.191 16.914 85.18 17.004 85.172 cv
17.09 85.168 17.195 85.164 17.316 85.164 cv
17.445 85.164 17.559 85.172 17.656 85.18 cv
17.754 85.195 17.832 85.207 17.895 85.219 cv
17.949 85.238 17.996 85.258 18.031 85.281 cv
18.059 85.305 18.074 85.336 18.078 85.367 cv
18.078 90.211 li
18.938 90.211 li
19 90.215 19.055 90.25 19.094 90.312 cv
19.133 90.383 19.152 90.484 19.156 90.625 cv
cp
17.07 86.047 mo
17.063 86.047 li
14.625 90.211 li
17.07 90.211 li
cp
f
7.281 49.16 mo
19.441 49.16 li
19.441 63.808 li
7.281 63.808 li
cp
0 0 0 0 cmyk
ef
12.73 60.18 mo
12.727 60.254 12.723 60.316 12.715 60.367 cv
12.703 60.422 12.688 60.465 12.668 60.492 cv
12.645 60.527 12.621 60.551 12.598 60.559 cv
12.574 60.574 12.547 60.578 12.52 60.578 cv
8.559 60.578 li
8.531 60.578 8.508 60.574 8.484 60.559 cv
8.461 60.551 8.438 60.527 8.418 60.492 cv
8.395 60.465 8.379 60.422 8.367 60.367 cv
8.352 60.316 8.344 60.254 8.348 60.18 cv
8.344 60.109 8.352 60.051 8.367 60 cv
8.379 59.949 8.391 59.906 8.41 59.871 cv
8.426 59.84 8.449 59.816 8.473 59.797 cv
8.496 59.781 8.523 59.77 8.559 59.77 cv
10.145 59.77 li
10.145 54.004 li
8.676 54.875 li
8.602 54.922 8.543 54.945 8.5 54.949 cv
8.453 54.961 8.418 54.953 8.391 54.922 cv
8.359 54.898 8.34 54.855 8.332 54.797 cv
8.324 54.738 8.32 54.664 8.32 54.57 cv
8.32 54.508 8.32 54.449 8.328 54.402 cv
8.332 54.355 8.344 54.316 8.355 54.285 cv
8.363 54.254 8.379 54.227 8.402 54.203 cv
8.426 54.18 8.453 54.156 8.488 54.133 cv
10.238 53.016 li
10.25 53.004 10.27 52.992 10.297 52.984 cv
10.316 52.977 10.348 52.969 10.383 52.961 cv
10.414 52.953 10.453 52.949 10.504 52.949 cv
10.547 52.949 10.605 52.949 10.684 52.945 cv
10.773 52.949 10.852 52.953 10.918 52.957 cv
10.977 52.969 11.027 52.98 11.063 52.988 cv
11.094 53.004 11.117 53.02 11.133 53.039 cv
11.145 53.062 11.148 53.086 11.152 53.109 cv
11.152 59.77 li
12.52 59.77 li
12.547 59.77 12.578 59.781 12.609 59.797 cv
12.637 59.816 12.656 59.84 12.676 59.871 cv
12.691 59.906 12.707 59.949 12.715 60 cv
12.723 60.051 12.727 60.109 12.73 60.18 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
18.801 58.141 mo
18.801 58.547 18.73 58.91 18.594 59.227 cv
18.457 59.543 18.266 59.809 18.016 60.027 cv
17.766 60.246 17.465 60.41 17.121 60.52 cv
16.77 60.629 16.387 60.684 15.969 60.687 cv
15.73 60.684 15.508 60.668 15.301 60.637 cv
15.086 60.605 14.898 60.566 14.738 60.52 cv
14.57 60.473 14.438 60.426 14.336 60.375 cv
14.23 60.332 14.16 60.293 14.133 60.262 cv
14.102 60.234 14.082 60.211 14.07 60.184 cv
14.059 60.164 14.047 60.137 14.039 60.102 cv
14.023 60.07 14.02 60.027 14.02 59.977 cv
14.016 59.926 14.012 59.863 14.016 59.793 cv
14.012 59.73 14.016 59.672 14.023 59.617 cv
14.027 59.562 14.039 59.52 14.055 59.488 cv
14.07 59.457 14.086 59.434 14.109 59.414 cv
14.125 59.402 14.152 59.395 14.184 59.391 cv
14.223 59.395 14.281 59.418 14.363 59.465 cv
14.445 59.512 14.555 59.566 14.695 59.621 cv
14.832 59.68 15.004 59.73 15.211 59.781 cv
15.414 59.836 15.66 59.863 15.941 59.859 cv
16.203 59.863 16.441 59.832 16.664 59.766 cv
16.879 59.707 17.066 59.609 17.227 59.473 cv
17.383 59.344 17.508 59.176 17.598 58.973 cv
17.688 58.77 17.734 58.523 17.734 58.234 cv
17.734 57.992 17.695 57.781 17.621 57.594 cv
17.543 57.41 17.426 57.254 17.27 57.129 cv
17.109 57.008 16.91 56.918 16.668 56.855 cv
16.426 56.801 16.137 56.77 15.801 56.766 cv
15.563 56.77 15.355 56.781 15.188 56.801 cv
15.012 56.828 14.852 56.84 14.703 56.836 cv
14.59 56.84 14.512 56.812 14.469 56.758 cv
14.418 56.707 14.395 56.609 14.398 56.465 cv
14.398 53.375 li
14.395 53.25 14.426 53.152 14.488 53.09 cv
14.551 53.027 14.637 52.996 14.75 52.996 cv
18.109 52.996 li
18.141 52.996 18.168 53.008 18.199 53.023 cv
18.223 53.043 18.25 53.066 18.273 53.102 cv
18.293 53.141 18.305 53.187 18.316 53.238 cv
18.324 53.297 18.332 53.359 18.332 53.43 cv
18.332 53.57 18.313 53.68 18.273 53.758 cv
18.234 53.836 18.18 53.875 18.117 53.875 cv
15.406 53.875 li
15.406 56 li
15.535 55.984 15.672 55.973 15.813 55.969 cv
15.949 55.965 16.105 55.961 16.289 55.961 cv
16.703 55.961 17.07 56.016 17.383 56.117 cv
17.695 56.227 17.953 56.371 18.164 56.559 cv
18.371 56.746 18.531 56.977 18.641 57.246 cv
18.746 57.516 18.801 57.812 18.801 58.141 cv
cp
f
7.281 16.949 mo
19.441 16.949 li
19.441 31.601 li
7.281 31.601 li
cp
0 0 0 0 cmyk
ef
12.73 27.973 mo
12.727 28.047 12.723 28.109 12.715 28.16 cv
12.703 28.215 12.688 28.258 12.668 28.285 cv
12.645 28.32 12.621 28.344 12.598 28.352 cv
12.574 28.367 12.547 28.371 12.52 28.371 cv
8.559 28.371 li
8.531 28.371 8.508 28.367 8.484 28.352 cv
8.461 28.344 8.438 28.32 8.418 28.285 cv
8.395 28.258 8.379 28.215 8.367 28.16 cv
8.352 28.109 8.344 28.047 8.348 27.973 cv
8.344 27.902 8.352 27.844 8.367 27.793 cv
8.379 27.742 8.391 27.699 8.41 27.664 cv
8.426 27.633 8.449 27.609 8.473 27.59 cv
8.496 27.574 8.523 27.562 8.559 27.562 cv
10.145 27.562 li
10.145 21.797 li
8.676 22.668 li
8.602 22.715 8.543 22.738 8.5 22.742 cv
8.453 22.754 8.418 22.746 8.391 22.715 cv
8.359 22.691 8.34 22.648 8.332 22.59 cv
8.324 22.531 8.32 22.457 8.32 22.363 cv
8.32 22.301 8.32 22.242 8.328 22.195 cv
8.332 22.148 8.344 22.109 8.355 22.078 cv
8.363 22.047 8.379 22.02 8.402 21.996 cv
8.426 21.973 8.453 21.949 8.488 21.926 cv
10.238 20.809 li
10.25 20.797 10.27 20.785 10.297 20.777 cv
10.316 20.77 10.348 20.762 10.383 20.754 cv
10.414 20.746 10.453 20.742 10.504 20.742 cv
10.547 20.742 10.605 20.742 10.684 20.738 cv
10.773 20.742 10.852 20.746 10.918 20.75 cv
10.977 20.762 11.027 20.773 11.063 20.781 cv
11.094 20.797 11.117 20.812 11.133 20.832 cv
11.145 20.855 11.148 20.879 11.152 20.902 cv
11.152 27.562 li
12.52 27.562 li
12.547 27.562 12.578 27.574 12.609 27.59 cv
12.637 27.609 12.656 27.633 12.676 27.664 cv
12.691 27.699 12.707 27.742 12.715 27.793 cv
12.723 27.844 12.727 27.902 12.73 27.973 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
19.031 25.918 mo
19.027 26.25 18.977 26.57 18.879 26.883 cv
18.773 27.195 18.617 27.469 18.41 27.703 cv
18.195 27.937 17.93 28.129 17.605 28.27 cv
17.277 28.41 16.895 28.477 16.457 28.48 cv
16.141 28.477 15.859 28.441 15.621 28.363 cv
15.375 28.289 15.164 28.176 14.988 28.031 cv
14.805 27.891 14.656 27.715 14.539 27.5 cv
14.418 27.293 14.32 27.051 14.25 26.777 cv
14.172 26.508 14.121 26.215 14.094 25.891 cv
14.059 25.574 14.043 25.23 14.047 24.863 cv
14.043 24.539 14.063 24.211 14.102 23.879 cv
14.137 23.547 14.199 23.227 14.289 22.918 cv
14.375 22.609 14.496 22.32 14.652 22.047 cv
14.809 21.777 15 21.539 15.234 21.336 cv
15.465 21.137 15.746 20.977 16.07 20.859 cv
16.391 20.742 16.766 20.684 17.203 20.684 cv
17.344 20.684 17.492 20.695 17.641 20.711 cv
17.789 20.734 17.926 20.758 18.051 20.781 cv
18.176 20.812 18.281 20.844 18.367 20.879 cv
18.453 20.914 18.508 20.941 18.535 20.965 cv
18.563 20.988 18.582 21.012 18.598 21.035 cv
18.605 21.059 18.617 21.086 18.629 21.117 cv
18.633 21.148 18.641 21.184 18.648 21.215 cv
18.652 21.254 18.652 21.297 18.656 21.352 cv
18.652 21.422 18.652 21.484 18.652 21.535 cv
18.648 21.586 18.641 21.625 18.629 21.656 cv
18.613 21.687 18.594 21.711 18.574 21.727 cv
18.551 21.742 18.523 21.75 18.492 21.75 cv
18.445 21.75 18.387 21.738 18.313 21.711 cv
18.238 21.684 18.148 21.652 18.043 21.617 cv
17.938 21.586 17.809 21.555 17.66 21.527 cv
17.508 21.504 17.336 21.492 17.137 21.488 cv
16.773 21.492 16.461 21.566 16.199 21.711 cv
15.934 21.863 15.719 22.062 15.555 22.309 cv
15.391 22.562 15.266 22.852 15.188 23.18 cv
15.105 23.508 15.063 23.852 15.051 24.211 cv
15.152 24.152 15.266 24.094 15.395 24.035 cv
15.52 23.98 15.656 23.93 15.809 23.879 cv
15.957 23.836 16.117 23.797 16.285 23.766 cv
16.453 23.734 16.633 23.719 16.828 23.719 cv
17.234 23.719 17.582 23.777 17.863 23.887 cv
18.145 24 18.371 24.152 18.543 24.348 cv
18.715 24.547 18.84 24.781 18.918 25.047 cv
18.992 25.32 19.027 25.609 19.031 25.918 cv
cp
18.008 26.012 mo
18.004 25.785 17.98 25.578 17.941 25.391 cv
17.895 25.207 17.82 25.051 17.715 24.922 cv
17.609 24.793 17.469 24.691 17.293 24.621 cv
17.117 24.551 16.902 24.516 16.645 24.516 cv
16.5 24.516 16.355 24.531 16.211 24.555 cv
16.063 24.582 15.922 24.617 15.789 24.66 cv
15.656 24.707 15.527 24.758 15.402 24.82 cv
15.277 24.883 15.164 24.949 15.07 25.012 cv
15.066 25.52 15.098 25.941 15.164 26.281 cv
15.227 26.621 15.32 26.895 15.445 27.098 cv
15.566 27.305 15.723 27.449 15.906 27.535 cv
16.086 27.625 16.301 27.668 16.551 27.668 cv
16.801 27.668 17.016 27.621 17.199 27.527 cv
17.383 27.434 17.535 27.309 17.656 27.148 cv
17.777 26.992 17.867 26.816 17.922 26.617 cv
17.977 26.422 18.004 26.219 18.008 26.012 cv
cp
f
32.98 526.785 mo
32.977 526.859 32.973 526.922 32.965 526.973 cv
32.953 527.027 32.938 527.07 32.918 527.098 cv
32.895 527.133 32.871 527.156 32.848 527.164 cv
32.824 527.18 32.797 527.184 32.77 527.184 cv
28.809 527.184 li
28.781 527.184 28.758 527.18 28.734 527.164 cv
28.711 527.156 28.688 527.133 28.668 527.098 cv
28.645 527.07 28.629 527.027 28.617 526.973 cv
28.602 526.922 28.594 526.859 28.598 526.785 cv
28.594 526.715 28.602 526.656 28.617 526.605 cv
28.629 526.555 28.641 526.512 28.66 526.477 cv
28.676 526.445 28.699 526.422 28.723 526.402 cv
28.746 526.387 28.773 526.375 28.809 526.375 cv
30.395 526.375 li
30.395 520.609 li
28.926 521.48 li
28.852 521.527 28.793 521.551 28.75 521.555 cv
28.703 521.566 28.668 521.559 28.641 521.527 cv
28.609 521.504 28.59 521.461 28.582 521.402 cv
28.574 521.344 28.57 521.27 28.57 521.176 cv
28.57 521.113 28.57 521.055 28.578 521.008 cv
28.582 520.961 28.594 520.922 28.605 520.891 cv
28.613 520.859 28.629 520.832 28.652 520.809 cv
28.676 520.785 28.703 520.762 28.738 520.738 cv
30.488 519.621 li
30.5 519.609 30.52 519.598 30.547 519.59 cv
30.566 519.582 30.598 519.574 30.633 519.566 cv
30.664 519.559 30.703 519.555 30.754 519.555 cv
30.797 519.555 30.855 519.555 30.934 519.551 cv
31.023 519.555 31.102 519.559 31.168 519.562 cv
31.227 519.574 31.277 519.586 31.313 519.594 cv
31.344 519.609 31.367 519.625 31.383 519.645 cv
31.395 519.668 31.398 519.691 31.402 519.715 cv
31.402 526.375 li
32.77 526.375 li
32.797 526.375 32.828 526.387 32.859 526.402 cv
32.887 526.422 32.906 526.445 32.926 526.477 cv
32.941 526.512 32.957 526.555 32.965 526.605 cv
32.973 526.656 32.977 526.715 32.98 526.785 cv
cp
f
104.992 526.75 mo
104.992 526.82 104.984 526.883 104.977 526.937 cv
104.961 526.992 104.949 527.039 104.934 527.074 cv
104.918 527.113 104.895 527.141 104.863 527.156 cv
104.832 527.176 104.801 527.184 104.77 527.184 cv
100.578 527.184 li
100.523 527.184 100.477 527.18 100.438 527.164 cv
100.395 527.156 100.359 527.133 100.332 527.098 cv
100.301 527.07 100.277 527.023 100.266 526.961 cv
100.25 526.902 100.246 526.832 100.246 526.746 cv
100.246 526.672 100.246 526.602 100.254 526.539 cv
100.258 526.48 100.273 526.43 100.293 526.383 cv
100.313 526.34 100.336 526.297 100.367 526.25 cv
100.395 526.211 100.434 526.16 100.488 526.105 cv
102.004 524.547 li
102.352 524.187 102.629 523.867 102.844 523.582 cv
103.055 523.297 103.219 523.035 103.336 522.801 cv
103.445 522.566 103.523 522.355 103.563 522.164 cv
103.598 521.973 103.613 521.793 103.617 521.621 cv
103.613 521.457 103.586 521.297 103.531 521.145 cv
103.473 520.996 103.391 520.863 103.285 520.75 cv
103.176 520.641 103.043 520.551 102.883 520.48 cv
102.719 520.414 102.531 520.383 102.328 520.379 cv
102.078 520.383 101.859 520.414 101.664 520.48 cv
101.469 520.551 101.297 520.625 101.148 520.699 cv
101 520.781 100.875 520.852 100.781 520.914 cv
100.68 520.98 100.609 521.016 100.563 521.012 cv
100.531 521.016 100.504 521.008 100.484 520.988 cv
100.461 520.977 100.441 520.949 100.43 520.914 cv
100.414 520.883 100.406 520.836 100.398 520.773 cv
100.391 520.715 100.387 520.645 100.387 520.562 cv
100.387 520.504 100.387 520.453 100.391 520.41 cv
100.395 520.371 100.402 520.336 100.414 520.301 cv
100.422 520.273 100.434 520.242 100.453 520.211 cv
100.465 520.184 100.496 520.152 100.547 520.109 cv
100.59 520.07 100.672 520.012 100.789 519.941 cv
100.902 519.871 101.047 519.805 101.223 519.734 cv
101.395 519.668 101.586 519.609 101.797 519.559 cv
102.004 519.516 102.223 519.492 102.453 519.488 cv
102.82 519.492 103.141 519.543 103.418 519.645 cv
103.691 519.75 103.922 519.891 104.102 520.07 cv
104.281 520.25 104.418 520.461 104.512 520.699 cv
104.602 520.937 104.645 521.191 104.648 521.457 cv
104.645 521.707 104.625 521.949 104.582 522.184 cv
104.535 522.426 104.441 522.684 104.309 522.961 cv
104.168 523.242 103.969 523.555 103.707 523.895 cv
103.445 524.238 103.098 524.629 102.664 525.074 cv
101.465 526.328 li
104.766 526.328 li
104.793 526.328 104.824 526.34 104.855 526.355 cv
104.883 526.375 104.906 526.398 104.93 526.434 cv
104.945 526.473 104.961 526.52 104.977 526.566 cv
104.984 526.621 104.992 526.68 104.992 526.75 cv
cp
f
177.336 525.027 mo
177.332 525.16 177.313 525.262 177.277 525.332 cv
177.234 525.406 177.18 525.445 177.117 525.441 cv
176.258 525.441 li
176.258 527.035 li
176.254 527.07 176.246 527.098 176.234 527.117 cv
176.215 527.141 176.188 527.156 176.148 527.172 cv
176.109 527.187 176.055 527.199 175.992 527.207 cv
175.926 527.215 175.844 527.219 175.746 527.219 cv
175.645 527.219 175.566 527.215 175.504 527.207 cv
175.441 527.199 175.391 527.187 175.352 527.172 cv
175.313 527.156 175.285 527.141 175.27 527.117 cv
175.254 527.098 175.246 527.07 175.25 527.035 cv
175.25 525.441 li
172.148 525.441 li
172.102 525.445 172.066 525.437 172.035 525.426 cv
172.004 525.418 171.973 525.398 171.949 525.363 cv
171.918 525.336 171.902 525.289 171.895 525.227 cv
171.887 525.168 171.883 525.094 171.883 524.996 cv
171.883 524.926 171.883 524.859 171.887 524.801 cv
171.891 524.742 171.898 524.687 171.91 524.641 cv
171.922 524.594 171.938 524.547 171.957 524.5 cv
171.977 524.453 172 524.406 172.027 524.355 cv
174.73 519.746 li
174.75 519.719 174.777 519.691 174.816 519.664 cv
174.852 519.645 174.902 519.625 174.965 519.605 cv
175.023 519.594 175.094 519.582 175.184 519.574 cv
175.27 519.57 175.375 519.566 175.496 519.566 cv
175.625 519.566 175.738 519.574 175.836 519.582 cv
175.934 519.598 176.012 519.609 176.074 519.621 cv
176.129 519.641 176.176 519.66 176.211 519.684 cv
176.238 519.707 176.254 519.738 176.258 519.77 cv
176.258 524.613 li
177.117 524.613 li
177.18 524.617 177.234 524.652 177.273 524.715 cv
177.313 524.785 177.332 524.887 177.336 525.027 cv
cp
175.25 520.449 mo
175.242 520.449 li
172.805 524.613 li
175.25 524.613 li
cp
f
249.211 524.73 mo
249.207 525.062 249.156 525.383 249.059 525.695 cv
248.953 526.008 248.797 526.281 248.59 526.516 cv
248.375 526.75 248.109 526.941 247.785 527.082 cv
247.457 527.223 247.074 527.289 246.637 527.293 cv
246.32 527.289 246.039 527.254 245.801 527.176 cv
245.555 527.102 245.344 526.988 245.168 526.844 cv
244.984 526.703 244.836 526.527 244.719 526.312 cv
244.598 526.105 244.5 525.863 244.43 525.59 cv
244.352 525.32 244.301 525.027 244.273 524.703 cv
244.238 524.387 244.223 524.043 244.227 523.676 cv
244.223 523.352 244.242 523.023 244.281 522.691 cv
244.316 522.359 244.379 522.039 244.469 521.73 cv
244.555 521.422 244.676 521.133 244.832 520.859 cv
244.988 520.59 245.18 520.352 245.414 520.148 cv
245.645 519.949 245.926 519.789 246.25 519.672 cv
246.57 519.555 246.945 519.496 247.383 519.496 cv
247.523 519.496 247.672 519.508 247.82 519.523 cv
247.969 519.547 248.105 519.57 248.23 519.594 cv
248.355 519.625 248.461 519.656 248.547 519.691 cv
248.633 519.727 248.688 519.754 248.715 519.777 cv
248.742 519.801 248.762 519.824 248.777 519.848 cv
248.785 519.871 248.797 519.898 248.809 519.93 cv
248.813 519.961 248.82 519.996 248.828 520.027 cv
248.832 520.066 248.832 520.109 248.836 520.164 cv
248.832 520.234 248.832 520.297 248.832 520.348 cv
248.828 520.398 248.82 520.437 248.809 520.469 cv
248.793 520.5 248.773 520.523 248.754 520.539 cv
248.73 520.555 248.703 520.562 248.672 520.562 cv
248.625 520.562 248.566 520.551 248.492 520.523 cv
248.418 520.496 248.328 520.465 248.223 520.43 cv
248.117 520.398 247.988 520.367 247.84 520.34 cv
247.688 520.316 247.516 520.305 247.316 520.301 cv
246.953 520.305 246.641 520.379 246.379 520.523 cv
246.113 520.676 245.898 520.875 245.734 521.121 cv
245.57 521.375 245.445 521.664 245.367 521.992 cv
245.285 522.32 245.242 522.664 245.23 523.023 cv
245.332 522.965 245.445 522.906 245.574 522.848 cv
245.699 522.793 245.836 522.742 245.988 522.691 cv
246.137 522.648 246.297 522.609 246.465 522.578 cv
246.633 522.547 246.813 522.531 247.008 522.531 cv
247.414 522.531 247.762 522.59 248.043 522.699 cv
248.324 522.812 248.551 522.965 248.723 523.16 cv
248.895 523.359 249.02 523.594 249.098 523.859 cv
249.172 524.133 249.207 524.422 249.211 524.73 cv
cp
248.188 524.824 mo
248.184 524.598 248.16 524.391 248.121 524.203 cv
248.074 524.02 248 523.863 247.895 523.734 cv
247.789 523.605 247.648 523.504 247.473 523.434 cv
247.297 523.363 247.082 523.328 246.824 523.328 cv
246.68 523.328 246.535 523.344 246.391 523.367 cv
246.242 523.395 246.102 523.43 245.969 523.473 cv
245.836 523.52 245.707 523.57 245.582 523.633 cv
245.457 523.695 245.344 523.762 245.25 523.824 cv
245.246 524.332 245.277 524.754 245.344 525.094 cv
245.406 525.434 245.5 525.707 245.625 525.91 cv
245.746 526.117 245.902 526.262 246.086 526.348 cv
246.266 526.437 246.48 526.48 246.73 526.48 cv
246.98 526.48 247.195 526.434 247.379 526.34 cv
247.563 526.246 247.715 526.121 247.836 525.961 cv
247.957 525.805 248.047 525.629 248.102 525.43 cv
248.156 525.234 248.184 525.031 248.188 524.824 cv
cp
f
321.211 525.238 mo
321.211 525.566 321.152 525.859 321.035 526.113 cv
320.918 526.371 320.746 526.586 320.527 526.762 cv
320.305 526.941 320.035 527.074 319.711 527.16 cv
319.383 527.246 319.012 527.289 318.598 527.293 cv
318.207 527.289 317.855 527.25 317.547 527.172 cv
317.238 527.094 316.977 526.973 316.762 526.809 cv
316.547 526.648 316.383 526.453 316.27 526.215 cv
316.156 525.984 316.102 525.715 316.102 525.414 cv
316.102 525.18 316.141 524.961 316.219 524.758 cv
316.297 524.559 316.406 524.375 316.555 524.207 cv
316.699 524.043 316.883 523.887 317.098 523.738 cv
317.309 523.59 317.551 523.449 317.824 523.316 cv
317.59 523.199 317.383 523.074 317.203 522.934 cv
317.023 522.801 316.871 522.652 316.746 522.492 cv
316.621 522.336 316.523 522.168 316.461 521.984 cv
316.391 521.809 316.359 521.613 316.363 521.402 cv
316.359 521.141 316.406 520.891 316.508 520.656 cv
316.602 520.422 316.746 520.219 316.941 520.047 cv
317.129 519.875 317.375 519.742 317.68 519.641 cv
317.977 519.543 318.328 519.492 318.727 519.488 cv
319.109 519.492 319.438 519.539 319.719 519.629 cv
319.992 519.723 320.223 519.848 320.41 520.004 cv
320.59 520.164 320.727 520.348 320.813 520.562 cv
320.898 520.781 320.941 521.012 320.941 521.254 cv
320.941 521.453 320.906 521.645 320.844 521.828 cv
320.773 522.016 320.68 522.191 320.559 522.352 cv
320.43 522.52 320.277 522.672 320.098 522.812 cv
319.918 522.953 319.711 523.086 319.477 523.211 cv
319.754 523.352 320 523.492 320.219 523.633 cv
320.434 523.777 320.613 523.934 320.762 524.098 cv
320.902 524.266 321.016 524.441 321.094 524.625 cv
321.172 524.812 321.211 525.016 321.211 525.238 cv
cp
319.945 521.348 mo
319.945 521.184 319.914 521.035 319.859 520.902 cv
319.801 520.77 319.719 520.656 319.613 520.562 cv
319.5 520.469 319.363 520.398 319.203 520.352 cv
319.039 520.305 318.855 520.281 318.652 520.277 cv
318.227 520.281 317.906 520.375 317.691 520.562 cv
317.473 520.754 317.367 521.016 317.367 521.348 cv
317.367 521.5 317.391 521.645 317.445 521.773 cv
317.496 521.906 317.578 522.027 317.691 522.145 cv
317.801 522.262 317.941 522.379 318.113 522.488 cv
318.281 522.602 318.484 522.715 318.723 522.836 cv
319.113 522.633 319.418 522.41 319.629 522.164 cv
319.84 521.918 319.945 521.645 319.945 521.348 cv
cp
320.191 525.344 mo
320.191 525.164 320.156 525.004 320.09 524.855 cv
320.023 524.715 319.922 524.578 319.789 524.445 cv
319.652 524.32 319.484 524.195 319.285 524.074 cv
319.082 523.957 318.852 523.832 318.586 523.703 cv
318.336 523.828 318.117 523.949 317.938 524.066 cv
317.75 524.187 317.598 524.312 317.48 524.441 cv
317.355 524.574 317.266 524.711 317.211 524.852 cv
317.148 524.992 317.121 525.148 317.121 525.32 cv
317.121 525.699 317.25 525.992 317.512 526.199 cv
317.77 526.41 318.156 526.516 318.676 526.512 cv
319.172 526.516 319.551 526.41 319.809 526.199 cv
320.063 525.988 320.191 525.703 320.191 525.344 cv
cp
f
390.051 526.785 mo
390.047 526.859 390.043 526.922 390.035 526.973 cv
390.023 527.027 390.008 527.07 389.988 527.098 cv
389.965 527.133 389.941 527.156 389.918 527.164 cv
389.895 527.18 389.867 527.184 389.84 527.184 cv
385.879 527.184 li
385.852 527.184 385.828 527.18 385.805 527.164 cv
385.781 527.156 385.758 527.133 385.738 527.098 cv
385.715 527.07 385.699 527.027 385.688 526.973 cv
385.672 526.922 385.664 526.859 385.668 526.785 cv
385.664 526.715 385.672 526.656 385.688 526.605 cv
385.699 526.555 385.711 526.512 385.73 526.477 cv
385.746 526.445 385.77 526.422 385.793 526.402 cv
385.816 526.387 385.844 526.375 385.879 526.375 cv
387.465 526.375 li
387.465 520.609 li
385.996 521.48 li
385.922 521.527 385.863 521.551 385.82 521.555 cv
385.773 521.566 385.738 521.559 385.711 521.527 cv
385.68 521.504 385.66 521.461 385.652 521.402 cv
385.645 521.344 385.641 521.27 385.641 521.176 cv
385.641 521.113 385.641 521.055 385.648 521.008 cv
385.652 520.961 385.664 520.922 385.676 520.891 cv
385.684 520.859 385.699 520.832 385.723 520.809 cv
385.746 520.785 385.773 520.762 385.809 520.738 cv
387.559 519.621 li
387.57 519.609 387.59 519.598 387.617 519.59 cv
387.637 519.582 387.668 519.574 387.703 519.566 cv
387.734 519.559 387.773 519.555 387.824 519.555 cv
387.867 519.555 387.926 519.555 388.004 519.551 cv
388.094 519.555 388.172 519.559 388.238 519.562 cv
388.297 519.574 388.348 519.586 388.383 519.594 cv
388.414 519.609 388.438 519.625 388.453 519.645 cv
388.465 519.668 388.469 519.691 388.473 519.715 cv
388.473 526.375 li
389.84 526.375 li
389.867 526.375 389.898 526.387 389.93 526.402 cv
389.957 526.422 389.977 526.445 389.996 526.477 cv
390.012 526.512 390.027 526.555 390.035 526.605 cv
390.043 526.656 390.047 526.715 390.051 526.785 cv
cp
f
396.402 523.375 mo
396.398 523.957 396.352 524.488 396.266 524.969 cv
396.172 525.453 396.02 525.867 395.809 526.211 cv
395.59 526.555 395.313 526.824 394.973 527.012 cv
394.625 527.199 394.203 527.289 393.703 527.293 cv
393.227 527.289 392.824 527.207 392.5 527.039 cv
392.172 526.871 391.91 526.621 391.711 526.289 cv
391.508 525.961 391.363 525.555 391.285 525.07 cv
391.199 524.59 391.16 524.035 391.16 523.41 cv
391.16 522.832 391.207 522.305 391.301 521.82 cv
391.395 521.344 391.547 520.93 391.758 520.578 cv
391.969 520.234 392.246 519.965 392.59 519.773 cv
392.934 519.586 393.355 519.492 393.855 519.488 cv
394.332 519.492 394.734 519.578 395.063 519.746 cv
395.391 519.918 395.652 520.168 395.852 520.496 cv
396.051 520.828 396.191 521.234 396.277 521.715 cv
396.355 522.199 396.398 522.75 396.402 523.375 cv
cp
395.371 523.445 mo
395.367 523.07 395.355 522.73 395.332 522.426 cv
395.305 522.125 395.262 521.859 395.211 521.629 cv
395.156 521.402 395.09 521.207 395.004 521.035 cv
394.918 520.871 394.816 520.734 394.703 520.625 cv
394.582 520.523 394.449 520.445 394.301 520.391 cv
394.152 520.344 393.984 520.316 393.797 520.316 cv
393.465 520.316 393.195 520.395 392.988 520.551 cv
392.777 520.707 392.613 520.922 392.496 521.195 cv
392.379 521.469 392.297 521.789 392.254 522.156 cv
392.211 522.523 392.191 522.918 392.191 523.34 cv
392.191 523.91 392.219 524.395 392.277 524.785 cv
392.336 525.184 392.43 525.504 392.555 525.754 cv
392.68 526.004 392.84 526.187 393.043 526.301 cv
393.238 526.414 393.48 526.469 393.762 526.469 cv
393.98 526.469 394.172 526.434 394.34 526.363 cv
394.504 526.293 394.645 526.195 394.766 526.062 cv
394.883 525.934 394.984 525.773 395.063 525.59 cv
395.141 525.41 395.203 525.207 395.25 524.98 cv
395.297 524.758 395.328 524.52 395.344 524.258 cv
395.359 524 395.367 523.727 395.371 523.445 cv
cp
f
462.078 526.785 mo
462.074 526.859 462.07 526.922 462.063 526.973 cv
462.051 527.027 462.035 527.07 462.016 527.098 cv
461.992 527.133 461.969 527.156 461.945 527.164 cv
461.922 527.18 461.895 527.184 461.867 527.184 cv
457.906 527.184 li
457.879 527.184 457.855 527.18 457.832 527.164 cv
457.809 527.156 457.785 527.133 457.766 527.098 cv
457.742 527.07 457.727 527.027 457.715 526.973 cv
457.699 526.922 457.691 526.859 457.695 526.785 cv
457.691 526.715 457.699 526.656 457.715 526.605 cv
457.727 526.555 457.738 526.512 457.758 526.477 cv
457.773 526.445 457.797 526.422 457.82 526.402 cv
457.844 526.387 457.871 526.375 457.906 526.375 cv
459.492 526.375 li
459.492 520.609 li
458.023 521.48 li
457.949 521.527 457.891 521.551 457.848 521.555 cv
457.801 521.566 457.766 521.559 457.738 521.527 cv
457.707 521.504 457.688 521.461 457.68 521.402 cv
457.672 521.344 457.668 521.27 457.668 521.176 cv
457.668 521.113 457.668 521.055 457.676 521.008 cv
457.68 520.961 457.691 520.922 457.703 520.891 cv
457.711 520.859 457.727 520.832 457.75 520.809 cv
457.773 520.785 457.801 520.762 457.836 520.738 cv
459.586 519.621 li
459.598 519.609 459.617 519.598 459.645 519.59 cv
459.664 519.582 459.695 519.574 459.73 519.566 cv
459.762 519.559 459.801 519.555 459.852 519.555 cv
459.895 519.555 459.953 519.555 460.031 519.551 cv
460.121 519.555 460.199 519.559 460.266 519.562 cv
460.324 519.574 460.375 519.586 460.41 519.594 cv
460.441 519.609 460.465 519.625 460.48 519.645 cv
460.492 519.668 460.496 519.691 460.5 519.715 cv
460.5 526.375 li
461.867 526.375 li
461.895 526.375 461.926 526.387 461.957 526.402 cv
461.984 526.422 462.004 526.445 462.023 526.477 cv
462.039 526.512 462.055 526.555 462.063 526.605 cv
462.07 526.656 462.074 526.715 462.078 526.785 cv
cp
f
468.184 526.75 mo
468.184 526.82 468.176 526.883 468.168 526.937 cv
468.152 526.992 468.141 527.039 468.125 527.074 cv
468.109 527.113 468.086 527.141 468.055 527.156 cv
468.023 527.176 467.992 527.184 467.961 527.184 cv
463.77 527.184 li
463.715 527.184 463.668 527.18 463.629 527.164 cv
463.586 527.156 463.551 527.133 463.523 527.098 cv
463.492 527.07 463.469 527.023 463.457 526.961 cv
463.441 526.902 463.438 526.832 463.438 526.746 cv
463.438 526.672 463.438 526.602 463.445 526.539 cv
463.449 526.48 463.465 526.43 463.484 526.383 cv
463.504 526.34 463.527 526.297 463.559 526.25 cv
463.586 526.211 463.625 526.16 463.68 526.105 cv
465.195 524.547 li
465.543 524.187 465.82 523.867 466.035 523.582 cv
466.246 523.297 466.41 523.035 466.527 522.801 cv
466.637 522.566 466.715 522.355 466.754 522.164 cv
466.789 521.973 466.805 521.793 466.809 521.621 cv
466.805 521.457 466.777 521.297 466.723 521.145 cv
466.664 520.996 466.582 520.863 466.477 520.75 cv
466.367 520.641 466.234 520.551 466.074 520.48 cv
465.91 520.414 465.723 520.383 465.52 520.379 cv
465.27 520.383 465.051 520.414 464.855 520.48 cv
464.66 520.551 464.488 520.625 464.34 520.699 cv
464.191 520.781 464.066 520.852 463.973 520.914 cv
463.871 520.98 463.801 521.016 463.754 521.012 cv
463.723 521.016 463.695 521.008 463.676 520.988 cv
463.652 520.977 463.633 520.949 463.621 520.914 cv
463.605 520.883 463.598 520.836 463.59 520.773 cv
463.582 520.715 463.578 520.645 463.578 520.562 cv
463.578 520.504 463.578 520.453 463.582 520.41 cv
463.586 520.371 463.594 520.336 463.605 520.301 cv
463.613 520.273 463.625 520.242 463.645 520.211 cv
463.656 520.184 463.688 520.152 463.738 520.109 cv
463.781 520.07 463.863 520.012 463.98 519.941 cv
464.094 519.871 464.238 519.805 464.414 519.734 cv
464.586 519.668 464.777 519.609 464.988 519.559 cv
465.195 519.516 465.414 519.492 465.645 519.488 cv
466.012 519.492 466.332 519.543 466.609 519.645 cv
466.883 519.75 467.113 519.891 467.293 520.07 cv
467.473 520.25 467.609 520.461 467.703 520.699 cv
467.793 520.937 467.836 521.191 467.84 521.457 cv
467.836 521.707 467.816 521.949 467.773 522.184 cv
467.727 522.426 467.633 522.684 467.5 522.961 cv
467.359 523.242 467.16 523.555 466.898 523.895 cv
466.637 524.238 466.289 524.629 465.855 525.074 cv
464.656 526.328 li
467.957 526.328 li
467.984 526.328 468.016 526.34 468.047 526.355 cv
468.074 526.375 468.098 526.398 468.121 526.434 cv
468.137 526.473 468.152 526.52 468.168 526.566 cv
468.176 526.621 468.184 526.68 468.184 526.75 cv
cp
f
534.078 526.785 mo
534.074 526.859 534.07 526.922 534.063 526.973 cv
534.051 527.027 534.035 527.07 534.016 527.098 cv
533.992 527.133 533.969 527.156 533.945 527.164 cv
533.922 527.18 533.895 527.184 533.867 527.184 cv
529.906 527.184 li
529.879 527.184 529.855 527.18 529.832 527.164 cv
529.809 527.156 529.785 527.133 529.766 527.098 cv
529.742 527.07 529.727 527.027 529.715 526.973 cv
529.699 526.922 529.691 526.859 529.695 526.785 cv
529.691 526.715 529.699 526.656 529.715 526.605 cv
529.727 526.555 529.738 526.512 529.758 526.477 cv
529.773 526.445 529.797 526.422 529.82 526.402 cv
529.844 526.387 529.871 526.375 529.906 526.375 cv
531.492 526.375 li
531.492 520.609 li
530.023 521.48 li
529.949 521.527 529.891 521.551 529.848 521.555 cv
529.801 521.566 529.766 521.559 529.738 521.527 cv
529.707 521.504 529.688 521.461 529.68 521.402 cv
529.672 521.344 529.668 521.27 529.668 521.176 cv
529.668 521.113 529.668 521.055 529.676 521.008 cv
529.68 520.961 529.691 520.922 529.703 520.891 cv
529.711 520.859 529.727 520.832 529.75 520.809 cv
529.773 520.785 529.801 520.762 529.836 520.738 cv
531.586 519.621 li
531.598 519.609 531.617 519.598 531.645 519.59 cv
531.664 519.582 531.695 519.574 531.73 519.566 cv
531.762 519.559 531.801 519.555 531.852 519.555 cv
531.895 519.555 531.953 519.555 532.031 519.551 cv
532.121 519.555 532.199 519.559 532.266 519.562 cv
532.324 519.574 532.375 519.586 532.41 519.594 cv
532.441 519.609 532.465 519.625 532.48 519.645 cv
532.492 519.668 532.496 519.691 532.5 519.715 cv
532.5 526.375 li
533.867 526.375 li
533.895 526.375 533.926 526.387 533.957 526.402 cv
533.984 526.422 534.004 526.445 534.023 526.477 cv
534.039 526.512 534.055 526.555 534.063 526.605 cv
534.07 526.656 534.074 526.715 534.078 526.785 cv
cp
f
540.504 525.027 mo
540.5 525.16 540.48 525.262 540.445 525.332 cv
540.402 525.406 540.348 525.445 540.285 525.441 cv
539.426 525.441 li
539.426 527.035 li
539.422 527.07 539.414 527.098 539.402 527.117 cv
539.383 527.141 539.355 527.156 539.316 527.172 cv
539.277 527.187 539.223 527.199 539.16 527.207 cv
539.094 527.215 539.012 527.219 538.914 527.219 cv
538.813 527.219 538.734 527.215 538.672 527.207 cv
538.609 527.199 538.559 527.187 538.52 527.172 cv
538.48 527.156 538.453 527.141 538.438 527.117 cv
538.422 527.098 538.414 527.07 538.418 527.035 cv
538.418 525.441 li
535.316 525.441 li
535.27 525.445 535.234 525.437 535.203 525.426 cv
535.172 525.418 535.141 525.398 535.117 525.363 cv
535.086 525.336 535.07 525.289 535.063 525.227 cv
535.055 525.168 535.051 525.094 535.051 524.996 cv
535.051 524.926 535.051 524.859 535.055 524.801 cv
535.059 524.742 535.066 524.687 535.078 524.641 cv
535.09 524.594 535.105 524.547 535.125 524.5 cv
535.145 524.453 535.168 524.406 535.195 524.355 cv
537.898 519.746 li
537.918 519.719 537.945 519.691 537.984 519.664 cv
538.02 519.645 538.07 519.625 538.133 519.605 cv
538.191 519.594 538.262 519.582 538.352 519.574 cv
538.438 519.57 538.543 519.566 538.664 519.566 cv
538.793 519.566 538.906 519.574 539.004 519.582 cv
539.102 519.598 539.18 519.609 539.242 519.621 cv
539.297 519.641 539.344 519.66 539.379 519.684 cv
539.406 519.707 539.422 519.738 539.426 519.77 cv
539.426 524.613 li
540.285 524.613 li
540.348 524.617 540.402 524.652 540.441 524.715 cv
540.48 524.785 540.5 524.887 540.504 525.027 cv
cp
538.418 520.449 mo
538.41 520.449 li
535.973 524.613 li
538.418 524.613 li
cp
f
606.102 526.785 mo
606.098 526.859 606.094 526.922 606.086 526.973 cv
606.074 527.027 606.059 527.07 606.039 527.098 cv
606.016 527.133 605.992 527.156 605.969 527.164 cv
605.945 527.18 605.918 527.184 605.891 527.184 cv
601.93 527.184 li
601.902 527.184 601.879 527.18 601.855 527.164 cv
601.832 527.156 601.809 527.133 601.789 527.098 cv
601.766 527.07 601.75 527.027 601.738 526.973 cv
601.723 526.922 601.715 526.859 601.719 526.785 cv
601.715 526.715 601.723 526.656 601.738 526.605 cv
601.75 526.555 601.762 526.512 601.781 526.477 cv
601.797 526.445 601.82 526.422 601.844 526.402 cv
601.867 526.387 601.895 526.375 601.93 526.375 cv
603.516 526.375 li
603.516 520.609 li
602.047 521.48 li
601.973 521.527 601.914 521.551 601.871 521.555 cv
601.824 521.566 601.789 521.559 601.762 521.527 cv
601.73 521.504 601.711 521.461 601.703 521.402 cv
601.695 521.344 601.691 521.27 601.691 521.176 cv
601.691 521.113 601.691 521.055 601.699 521.008 cv
601.703 520.961 601.715 520.922 601.727 520.891 cv
601.734 520.859 601.75 520.832 601.773 520.809 cv
601.797 520.785 601.824 520.762 601.859 520.738 cv
603.609 519.621 li
603.621 519.609 603.641 519.598 603.668 519.59 cv
603.688 519.582 603.719 519.574 603.754 519.566 cv
603.785 519.559 603.824 519.555 603.875 519.555 cv
603.918 519.555 603.977 519.555 604.055 519.551 cv
604.145 519.555 604.223 519.559 604.289 519.562 cv
604.348 519.574 604.398 519.586 604.434 519.594 cv
604.465 519.609 604.488 519.625 604.504 519.645 cv
604.516 519.668 604.52 519.691 604.523 519.715 cv
604.523 526.375 li
605.891 526.375 li
605.918 526.375 605.949 526.387 605.98 526.402 cv
606.008 526.422 606.027 526.445 606.047 526.477 cv
606.063 526.512 606.078 526.555 606.086 526.605 cv
606.094 526.656 606.098 526.715 606.102 526.785 cv
cp
f
612.398 524.73 mo
612.395 525.062 612.344 525.383 612.246 525.695 cv
612.141 526.008 611.984 526.281 611.777 526.516 cv
611.563 526.75 611.297 526.941 610.973 527.082 cv
610.645 527.223 610.262 527.289 609.824 527.293 cv
609.508 527.289 609.227 527.254 608.988 527.176 cv
608.742 527.102 608.531 526.988 608.355 526.844 cv
608.172 526.703 608.023 526.527 607.906 526.312 cv
607.785 526.105 607.688 525.863 607.617 525.59 cv
607.539 525.32 607.488 525.027 607.461 524.703 cv
607.426 524.387 607.41 524.043 607.414 523.676 cv
607.41 523.352 607.43 523.023 607.469 522.691 cv
607.504 522.359 607.566 522.039 607.656 521.73 cv
607.742 521.422 607.863 521.133 608.02 520.859 cv
608.176 520.59 608.367 520.352 608.602 520.148 cv
608.832 519.949 609.113 519.789 609.438 519.672 cv
609.758 519.555 610.133 519.496 610.57 519.496 cv
610.711 519.496 610.859 519.508 611.008 519.523 cv
611.156 519.547 611.293 519.57 611.418 519.594 cv
611.543 519.625 611.648 519.656 611.734 519.691 cv
611.82 519.727 611.875 519.754 611.902 519.777 cv
611.93 519.801 611.949 519.824 611.965 519.848 cv
611.973 519.871 611.984 519.898 611.996 519.93 cv
612 519.961 612.008 519.996 612.016 520.027 cv
612.02 520.066 612.02 520.109 612.023 520.164 cv
612.02 520.234 612.02 520.297 612.02 520.348 cv
612.016 520.398 612.008 520.437 611.996 520.469 cv
611.98 520.5 611.961 520.523 611.941 520.539 cv
611.918 520.555 611.891 520.562 611.859 520.562 cv
611.813 520.562 611.754 520.551 611.68 520.523 cv
611.605 520.496 611.516 520.465 611.41 520.43 cv
611.305 520.398 611.176 520.367 611.027 520.34 cv
610.875 520.316 610.703 520.305 610.504 520.301 cv
610.141 520.305 609.828 520.379 609.566 520.523 cv
609.301 520.676 609.086 520.875 608.922 521.121 cv
608.758 521.375 608.633 521.664 608.555 521.992 cv
608.473 522.32 608.43 522.664 608.418 523.023 cv
608.52 522.965 608.633 522.906 608.762 522.848 cv
608.887 522.793 609.023 522.742 609.176 522.691 cv
609.324 522.648 609.484 522.609 609.652 522.578 cv
609.82 522.547 610 522.531 610.195 522.531 cv
610.602 522.531 610.949 522.59 611.23 522.699 cv
611.512 522.812 611.738 522.965 611.91 523.16 cv
612.082 523.359 612.207 523.594 612.285 523.859 cv
612.359 524.133 612.395 524.422 612.398 524.73 cv
cp
611.375 524.824 mo
611.371 524.598 611.348 524.391 611.309 524.203 cv
611.262 524.02 611.188 523.863 611.082 523.734 cv
610.977 523.605 610.836 523.504 610.66 523.434 cv
610.484 523.363 610.27 523.328 610.012 523.328 cv
609.867 523.328 609.723 523.344 609.578 523.367 cv
609.43 523.395 609.289 523.43 609.156 523.473 cv
609.023 523.52 608.895 523.57 608.77 523.633 cv
608.645 523.695 608.531 523.762 608.438 523.824 cv
608.434 524.332 608.465 524.754 608.531 525.094 cv
608.594 525.434 608.688 525.707 608.813 525.91 cv
608.934 526.117 609.09 526.262 609.273 526.348 cv
609.453 526.437 609.668 526.48 609.918 526.48 cv
610.168 526.48 610.383 526.434 610.566 526.34 cv
610.75 526.246 610.902 526.121 611.023 525.961 cv
611.145 525.805 611.234 525.629 611.289 525.43 cv
611.344 525.234 611.371 525.031 611.375 524.824 cv
cp
f
262.66 542.348 mo
262.656 542.453 262.641 542.543 262.605 542.613 cv
262.57 542.691 262.523 542.75 262.469 542.793 cv
262.41 542.844 262.348 542.879 262.281 542.895 cv
262.207 542.918 262.137 542.926 262.074 542.926 cv
261.629 542.926 li
261.488 542.926 261.367 542.914 261.262 542.883 cv
261.156 542.859 261.059 542.805 260.965 542.727 cv
260.871 542.652 260.777 542.551 260.684 542.418 cv
260.59 542.289 260.488 542.125 260.383 541.922 cv
257.309 536.184 li
257.145 535.891 256.98 535.582 256.82 535.254 cv
256.652 534.934 256.5 534.617 256.363 534.309 cv
256.348 534.309 li
256.355 534.684 256.363 535.066 256.371 535.453 cv
256.375 535.844 256.375 536.23 256.379 536.613 cv
256.379 542.699 li
256.375 542.738 256.363 542.773 256.344 542.805 cv
256.32 542.84 256.285 542.867 256.234 542.883 cv
256.18 542.902 256.109 542.914 256.027 542.93 cv
255.941 542.941 255.836 542.949 255.707 542.949 cv
255.57 542.949 255.461 542.941 255.379 542.93 cv
255.293 542.914 255.227 542.902 255.18 542.883 cv
255.129 542.867 255.094 542.84 255.07 542.805 cv
255.047 542.773 255.035 542.738 255.039 542.699 cv
255.039 533.395 li
255.035 533.187 255.094 533.039 255.215 532.949 cv
255.332 532.863 255.461 532.82 255.602 532.816 cv
256.262 532.816 li
256.414 532.82 256.547 532.832 256.652 532.855 cv
256.754 532.883 256.848 532.926 256.934 532.984 cv
257.016 533.047 257.094 533.129 257.176 533.234 cv
257.25 533.344 257.332 533.48 257.418 533.637 cv
259.785 538.062 li
259.93 538.336 260.07 538.602 260.207 538.855 cv
260.34 539.113 260.469 539.367 260.598 539.613 cv
260.719 539.867 260.844 540.113 260.969 540.352 cv
261.09 540.594 261.211 540.836 261.336 541.078 cv
261.344 541.078 li
261.332 540.672 261.324 540.242 261.324 539.797 cv
261.316 539.352 261.316 538.926 261.32 538.516 cv
261.32 533.043 li
261.316 533.008 261.328 532.973 261.352 532.941 cv
261.375 532.91 261.41 532.883 261.465 532.859 cv
261.512 532.836 261.582 532.82 261.668 532.809 cv
261.754 532.801 261.863 532.797 262.004 532.793 cv
262.121 532.797 262.227 532.801 262.316 532.809 cv
262.402 532.82 262.469 532.836 262.52 532.859 cv
262.566 532.883 262.602 532.91 262.625 532.941 cv
262.645 532.973 262.656 533.008 262.66 533.043 cv
cp
f
271.211 542.707 mo
271.207 542.754 271.199 542.789 271.184 542.812 cv
271.164 542.844 271.129 542.867 271.086 542.887 cv
271.039 542.906 270.98 542.918 270.906 542.934 cv
270.828 542.941 270.734 542.949 270.629 542.949 cv
270.504 542.949 270.406 542.941 270.336 542.934 cv
270.258 542.918 270.199 542.906 270.156 542.887 cv
270.109 542.867 270.078 542.844 270.066 542.812 cv
270.047 542.789 270.039 542.754 270.043 542.707 cv
270.043 541.781 li
269.641 542.227 269.246 542.547 268.859 542.746 cv
268.465 542.949 268.07 543.047 267.676 543.051 cv
267.203 543.047 266.809 542.973 266.492 542.816 cv
266.172 542.664 265.914 542.453 265.719 542.184 cv
265.516 541.918 265.375 541.605 265.293 541.246 cv
265.203 540.891 265.16 540.457 265.164 539.949 cv
265.164 535.695 li
265.16 535.656 265.168 535.621 265.191 535.59 cv
265.207 535.562 265.242 535.539 265.297 535.512 cv
265.344 535.492 265.414 535.477 265.5 535.465 cv
265.582 535.461 265.684 535.457 265.813 535.453 cv
265.934 535.457 266.039 535.461 266.125 535.465 cv
266.207 535.477 266.273 535.492 266.32 535.512 cv
266.367 535.539 266.402 535.562 266.426 535.59 cv
266.445 535.621 266.453 535.656 266.457 535.695 cv
266.457 539.777 li
266.453 540.191 266.484 540.52 266.547 540.766 cv
266.605 541.012 266.695 541.223 266.82 541.395 cv
266.938 541.574 267.094 541.707 267.285 541.801 cv
267.469 541.898 267.688 541.949 267.938 541.945 cv
268.258 541.949 268.578 541.832 268.902 541.602 cv
269.219 541.375 269.559 541.039 269.918 540.594 cv
269.918 535.695 li
269.918 535.656 269.926 535.621 269.945 535.59 cv
269.961 535.562 269.996 535.539 270.051 535.512 cv
270.102 535.492 270.168 535.477 270.25 535.465 cv
270.328 535.461 270.434 535.457 270.566 535.453 cv
270.688 535.457 270.793 535.461 270.879 535.465 cv
270.961 535.477 271.023 535.492 271.07 535.512 cv
271.113 535.539 271.148 535.562 271.176 535.59 cv
271.195 535.621 271.207 535.656 271.211 535.695 cv
cp
f
283.988 542.707 mo
283.984 542.754 283.977 542.789 283.957 542.812 cv
283.934 542.844 283.898 542.867 283.855 542.887 cv
283.805 542.906 283.738 542.918 283.66 542.934 cv
283.574 542.941 283.473 542.949 283.348 542.949 cv
283.215 542.949 283.105 542.941 283.027 542.934 cv
282.941 542.918 282.875 542.906 282.828 542.887 cv
282.773 542.867 282.738 542.844 282.723 542.812 cv
282.699 542.789 282.691 542.754 282.691 542.707 cv
282.691 538.445 li
282.691 538.152 282.664 537.883 282.613 537.637 cv
282.559 537.395 282.477 537.184 282.363 537.004 cv
282.25 536.828 282.105 536.691 281.93 536.598 cv
281.75 536.504 281.539 536.457 281.305 536.457 cv
281.008 536.457 280.711 536.574 280.414 536.801 cv
280.109 537.035 279.781 537.367 279.426 537.805 cv
279.426 542.707 li
279.422 542.754 279.41 542.789 279.395 542.812 cv
279.371 542.844 279.34 542.867 279.293 542.887 cv
279.242 542.906 279.176 542.918 279.094 542.934 cv
279.008 542.941 278.902 542.949 278.781 542.949 cv
278.66 542.949 278.559 542.941 278.473 542.934 cv
278.387 542.918 278.316 542.906 278.27 542.887 cv
278.215 542.867 278.184 542.844 278.168 542.812 cv
278.148 542.789 278.137 542.754 278.141 542.707 cv
278.141 538.445 li
278.137 538.152 278.109 537.883 278.055 537.637 cv
277.996 537.395 277.91 537.184 277.797 537.004 cv
277.684 536.828 277.539 536.691 277.367 536.598 cv
277.188 536.504 276.98 536.457 276.746 536.457 cv
276.445 536.457 276.148 536.574 275.848 536.801 cv
275.547 537.035 275.219 537.367 274.867 537.805 cv
274.867 542.707 li
274.863 542.754 274.852 542.789 274.836 542.812 cv
274.813 542.844 274.781 542.867 274.734 542.887 cv
274.688 542.906 274.621 542.918 274.543 542.934 cv
274.457 542.941 274.352 542.949 274.223 542.949 cv
274.094 542.949 273.988 542.941 273.91 542.934 cv
273.824 542.918 273.758 542.906 273.711 542.887 cv
273.656 542.867 273.625 542.844 273.609 542.812 cv
273.59 542.789 273.578 542.754 273.582 542.707 cv
273.582 535.695 li
273.578 535.656 273.586 535.621 273.605 535.59 cv
273.617 535.562 273.648 535.539 273.699 535.512 cv
273.742 535.492 273.805 535.477 273.879 535.465 cv
273.949 535.461 274.043 535.457 274.168 535.453 cv
274.277 535.457 274.375 535.461 274.453 535.465 cv
274.527 535.477 274.586 535.492 274.629 535.512 cv
274.668 535.539 274.695 535.562 274.715 535.59 cv
274.73 535.621 274.738 535.656 274.742 535.695 cv
274.742 536.621 li
275.133 536.18 275.516 535.859 275.891 535.652 cv
276.258 535.449 276.637 535.344 277.02 535.344 cv
277.309 535.344 277.566 535.379 277.801 535.445 cv
278.027 535.516 278.234 535.609 278.414 535.73 cv
278.59 535.852 278.738 535.996 278.867 536.164 cv
278.988 536.336 279.094 536.527 279.18 536.73 cv
279.41 536.48 279.633 536.266 279.844 536.086 cv
280.055 535.914 280.258 535.77 280.453 535.656 cv
280.648 535.551 280.836 535.473 281.02 535.418 cv
281.203 535.371 281.391 535.344 281.578 535.344 cv
282.031 535.344 282.41 535.426 282.715 535.582 cv
283.02 535.746 283.266 535.957 283.461 536.219 cv
283.648 536.484 283.785 536.793 283.867 537.148 cv
283.945 537.504 283.984 537.879 283.988 538.273 cv
cp
f
292.785 539.105 mo
292.781 539.715 292.715 540.266 292.586 540.75 cv
292.449 541.238 292.254 541.652 292 541.992 cv
291.742 542.336 291.426 542.598 291.055 542.777 cv
290.68 542.961 290.254 543.047 289.77 543.051 cv
289.543 543.047 289.336 543.027 289.148 542.984 cv
288.961 542.937 288.773 542.867 288.594 542.77 cv
288.406 542.672 288.227 542.547 288.047 542.395 cv
287.863 542.246 287.672 542.066 287.473 541.852 cv
287.473 542.707 li
287.473 542.754 287.461 542.789 287.441 542.816 cv
287.418 542.852 287.383 542.875 287.34 542.891 cv
287.289 542.906 287.23 542.918 287.164 542.934 cv
287.09 542.941 287 542.949 286.895 542.949 cv
286.785 542.949 286.699 542.941 286.629 542.934 cv
286.555 542.918 286.492 542.906 286.449 542.891 cv
286.398 542.875 286.367 542.852 286.355 542.816 cv
286.336 542.789 286.328 542.754 286.332 542.707 cv
286.332 532.297 li
286.328 532.258 286.34 532.223 286.359 532.187 cv
286.375 532.16 286.406 532.133 286.461 532.109 cv
286.508 532.09 286.574 532.074 286.66 532.062 cv
286.738 532.055 286.844 532.051 286.973 532.047 cv
287.102 532.051 287.207 532.055 287.293 532.062 cv
287.371 532.074 287.438 532.09 287.484 532.109 cv
287.531 532.133 287.563 532.16 287.586 532.187 cv
287.602 532.223 287.613 532.258 287.617 532.297 cv
287.617 536.496 li
287.824 536.285 288.027 536.105 288.223 535.961 cv
288.418 535.816 288.605 535.699 288.793 535.605 cv
288.977 535.52 289.164 535.453 289.355 535.406 cv
289.539 535.367 289.738 535.344 289.949 535.344 cv
290.453 535.344 290.887 535.445 291.254 535.648 cv
291.613 535.852 291.906 536.125 292.133 536.461 cv
292.355 536.805 292.523 537.203 292.629 537.66 cv
292.73 538.117 292.781 538.598 292.785 539.105 cv
cp
291.453 539.254 mo
291.449 538.898 291.422 538.551 291.371 538.211 cv
291.313 537.875 291.219 537.578 291.082 537.316 cv
290.945 537.059 290.766 536.848 290.543 536.687 cv
290.316 536.531 290.035 536.453 289.703 536.449 cv
289.535 536.453 289.371 536.477 289.211 536.52 cv
289.047 536.57 288.883 536.648 288.715 536.754 cv
288.547 536.867 288.371 537.008 288.195 537.176 cv
288.012 537.352 287.82 537.566 287.617 537.82 cv
287.617 540.617 li
287.973 541.051 288.313 541.383 288.637 541.605 cv
288.961 541.836 289.297 541.949 289.648 541.945 cv
289.969 541.949 290.246 541.871 290.48 541.711 cv
290.707 541.559 290.895 541.352 291.039 541.09 cv
291.184 540.836 291.289 540.547 291.355 540.227 cv
291.418 539.91 291.449 539.586 291.453 539.254 cv
cp
f
300.695 538.898 mo
300.691 539.102 300.641 539.242 300.543 539.328 cv
300.438 539.414 300.32 539.457 300.195 539.457 cv
295.578 539.457 li
295.574 539.848 295.613 540.199 295.695 540.512 cv
295.77 540.824 295.902 541.094 296.086 541.312 cv
296.266 541.539 296.5 541.711 296.797 541.828 cv
297.086 541.953 297.445 542.012 297.871 542.008 cv
298.203 542.012 298.5 541.984 298.762 541.926 cv
299.023 541.875 299.25 541.812 299.441 541.742 cv
299.629 541.676 299.785 541.617 299.91 541.559 cv
300.031 541.508 300.125 541.48 300.188 541.477 cv
300.223 541.48 300.254 541.488 300.285 541.504 cv
300.313 541.523 300.336 541.551 300.355 541.586 cv
300.367 541.625 300.379 541.676 300.391 541.738 cv
300.395 541.805 300.398 541.883 300.402 541.977 cv
300.398 542.047 300.395 542.105 300.395 542.152 cv
300.387 542.199 300.383 542.242 300.375 542.281 cv
300.367 542.32 300.352 542.355 300.336 542.387 cv
300.313 542.418 300.289 542.449 300.266 542.477 cv
300.234 542.508 300.152 542.555 300.012 542.617 cv
299.871 542.684 299.688 542.746 299.465 542.809 cv
299.238 542.871 298.98 542.926 298.688 542.977 cv
298.395 543.023 298.082 543.047 297.75 543.051 cv
297.172 543.047 296.664 542.969 296.234 542.809 cv
295.797 542.648 295.434 542.41 295.141 542.094 cv
294.84 541.777 294.617 541.383 294.469 540.902 cv
294.32 540.426 294.246 539.867 294.246 539.23 cv
294.246 538.633 294.32 538.094 294.477 537.609 cv
294.629 537.133 294.855 536.723 295.152 536.387 cv
295.445 536.051 295.801 535.793 296.215 535.613 cv
296.629 535.434 297.094 535.344 297.609 535.344 cv
298.16 535.344 298.629 535.434 299.016 535.609 cv
299.402 535.789 299.719 536.027 299.973 536.324 cv
300.219 536.625 300.402 536.977 300.52 537.375 cv
300.633 537.781 300.691 538.211 300.695 538.664 cv
cp
299.402 538.516 mo
299.418 537.84 299.266 537.309 298.949 536.926 cv
298.633 536.543 298.164 536.352 297.547 536.348 cv
297.223 536.352 296.941 536.41 296.703 536.527 cv
296.461 536.648 296.262 536.809 296.102 537.004 cv
295.938 537.203 295.813 537.434 295.727 537.695 cv
295.637 537.957 295.586 538.23 295.578 538.516 cv
cp
f
306.762 536.152 mo
306.758 536.27 306.758 536.367 306.754 536.441 cv
306.746 536.523 306.734 536.586 306.723 536.625 cv
306.703 536.672 306.684 536.703 306.664 536.727 cv
306.637 536.75 306.605 536.762 306.566 536.762 cv
306.523 536.762 306.473 536.75 306.414 536.727 cv
306.352 536.703 306.281 536.68 306.211 536.656 cv
306.133 536.633 306.051 536.613 305.957 536.59 cv
305.863 536.574 305.762 536.562 305.652 536.559 cv
305.52 536.562 305.391 536.59 305.27 536.637 cv
305.145 536.691 305.016 536.777 304.879 536.895 cv
304.738 537.02 304.594 537.176 304.445 537.371 cv
304.293 537.566 304.125 537.809 303.945 538.094 cv
303.945 542.707 li
303.941 542.754 303.93 542.789 303.914 542.812 cv
303.891 542.844 303.859 542.867 303.813 542.887 cv
303.766 542.906 303.699 542.918 303.621 542.934 cv
303.535 542.941 303.43 542.949 303.301 542.949 cv
303.172 542.949 303.066 542.941 302.988 542.934 cv
302.902 542.918 302.836 542.906 302.789 542.887 cv
302.734 542.867 302.703 542.844 302.688 542.812 cv
302.668 542.789 302.656 542.754 302.66 542.707 cv
302.66 535.695 li
302.656 535.656 302.664 535.621 302.684 535.59 cv
302.695 535.562 302.727 535.539 302.777 535.512 cv
302.82 535.492 302.883 535.477 302.957 535.465 cv
303.027 535.461 303.121 535.457 303.246 535.453 cv
303.355 535.457 303.453 535.461 303.531 535.465 cv
303.605 535.477 303.664 535.492 303.707 535.512 cv
303.746 535.539 303.773 535.562 303.793 535.59 cv
303.809 535.621 303.816 535.656 303.82 535.695 cv
303.82 536.715 li
304.008 536.434 304.191 536.207 304.363 536.031 cv
304.531 535.855 304.691 535.715 304.844 535.613 cv
304.992 535.512 305.141 535.441 305.289 535.402 cv
305.438 535.363 305.586 535.344 305.738 535.344 cv
305.805 535.344 305.883 535.348 305.969 535.355 cv
306.055 535.363 306.145 535.379 306.238 535.398 cv
306.332 535.422 306.414 535.445 306.492 535.469 cv
306.563 535.496 306.617 535.523 306.652 535.547 cv
306.68 535.578 306.699 535.602 306.715 535.621 cv
306.723 535.648 306.734 535.68 306.742 535.711 cv
306.75 535.75 306.754 535.801 306.758 535.871 cv
306.758 535.941 306.758 536.035 306.762 536.152 cv
cp
f
318.52 539.121 mo
318.516 539.699 318.441 540.227 318.293 540.703 cv
318.141 541.187 317.914 541.602 317.617 541.945 cv
317.316 542.297 316.941 542.566 316.496 542.758 cv
316.043 542.953 315.523 543.047 314.934 543.051 cv
314.355 543.047 313.852 542.965 313.426 542.793 cv
312.996 542.625 312.641 542.375 312.355 542.047 cv
312.066 541.719 311.852 541.324 311.715 540.855 cv
311.574 540.391 311.508 539.859 311.508 539.262 cv
311.508 538.695 311.578 538.168 311.727 537.687 cv
311.871 537.207 312.098 536.793 312.398 536.441 cv
312.695 536.094 313.066 535.824 313.516 535.633 cv
313.961 535.441 314.484 535.344 315.082 535.344 cv
315.66 535.344 316.16 535.43 316.59 535.602 cv
317.016 535.773 317.375 536.023 317.66 536.352 cv
317.945 536.68 318.16 537.078 318.305 537.543 cv
318.445 538.012 318.516 538.539 318.52 539.121 cv
cp
317.188 539.207 mo
317.184 538.832 317.148 538.473 317.082 538.133 cv
317.008 537.797 316.891 537.504 316.73 537.246 cv
316.566 536.996 316.348 536.793 316.07 536.641 cv
315.789 536.496 315.441 536.422 315.031 536.418 cv
314.645 536.422 314.316 536.488 314.043 536.621 cv
313.766 536.758 313.539 536.949 313.363 537.195 cv
313.184 537.441 313.051 537.734 312.969 538.07 cv
312.879 538.41 312.836 538.777 312.84 539.176 cv
312.836 539.562 312.871 539.926 312.945 540.262 cv
313.012 540.602 313.129 540.895 313.297 541.145 cv
313.461 541.398 313.684 541.602 313.961 541.746 cv
314.238 541.898 314.586 541.973 315 541.969 cv
315.375 541.973 315.703 541.902 315.984 541.766 cv
316.262 541.633 316.488 541.445 316.668 541.195 cv
316.844 540.953 316.973 540.66 317.059 540.324 cv
317.141 539.988 317.184 539.617 317.188 539.207 cv
cp
f
324.25 532.809 mo
324.246 532.91 324.242 532.988 324.234 533.047 cv
324.223 533.109 324.211 533.16 324.199 533.191 cv
324.184 533.23 324.168 533.254 324.148 533.266 cv
324.125 533.281 324.098 533.289 324.07 533.285 cv
324.031 533.289 323.984 533.277 323.934 533.25 cv
323.875 533.23 323.809 533.203 323.734 533.172 cv
323.652 533.145 323.563 533.117 323.457 533.094 cv
323.348 533.07 323.223 533.059 323.09 533.059 cv
322.895 533.059 322.73 533.09 322.598 533.152 cv
322.457 533.215 322.348 533.312 322.27 533.445 cv
322.184 533.578 322.125 533.75 322.09 533.961 cv
322.051 534.172 322.031 534.43 322.035 534.727 cv
322.035 535.492 li
323.602 535.492 li
323.641 535.496 323.676 535.504 323.707 535.52 cv
323.734 535.539 323.762 535.57 323.785 535.613 cv
323.809 535.66 323.824 535.719 323.84 535.781 cv
323.848 535.852 323.855 535.934 323.859 536.027 cv
323.855 536.219 323.832 536.352 323.789 536.434 cv
323.738 536.52 323.676 536.562 323.602 536.559 cv
322.035 536.559 li
322.035 542.707 li
322.031 542.754 322.023 542.789 322.004 542.812 cv
321.98 542.844 321.945 542.867 321.898 542.887 cv
321.848 542.906 321.781 542.918 321.699 542.934 cv
321.613 542.941 321.508 542.949 321.391 542.949 cv
321.262 542.949 321.16 542.941 321.078 542.934 cv
320.992 542.918 320.926 542.906 320.879 542.887 cv
320.828 542.867 320.793 542.844 320.773 542.812 cv
320.75 542.789 320.738 542.754 320.742 542.707 cv
320.742 536.559 li
319.754 536.559 li
319.668 536.562 319.605 536.52 319.566 536.434 cv
319.523 536.352 319.5 536.219 319.504 536.027 cv
319.5 535.934 319.508 535.852 319.52 535.781 cv
319.527 535.719 319.543 535.66 319.566 535.613 cv
319.586 535.57 319.609 535.539 319.645 535.52 cv
319.672 535.504 319.711 535.496 319.754 535.492 cv
320.742 535.492 li
320.742 534.766 li
320.738 534.281 320.785 533.863 320.879 533.508 cv
320.969 533.16 321.105 532.871 321.293 532.648 cv
321.477 532.426 321.711 532.262 322 532.152 cv
322.281 532.047 322.617 531.992 323.004 531.992 cv
323.18 531.992 323.355 532.012 323.531 532.043 cv
323.699 532.082 323.832 532.117 323.93 532.152 cv
324.02 532.195 324.082 532.23 324.117 532.258 cv
324.145 532.293 324.172 532.332 324.195 532.379 cv
324.215 532.43 324.227 532.492 324.238 532.559 cv
324.242 532.633 324.246 532.715 324.25 532.809 cv
cp
f
334.449 540.074 mo
334.445 540.547 334.359 540.969 334.188 541.336 cv
334.012 541.711 333.77 542.023 333.461 542.277 cv
333.152 542.535 332.789 542.727 332.371 542.855 cv
331.949 542.984 331.5 543.047 331.02 543.051 cv
330.68 543.047 330.363 543.02 330.078 542.965 cv
329.789 542.906 329.535 542.84 329.309 542.754 cv
329.082 542.676 328.891 542.59 328.738 542.496 cv
328.582 542.41 328.477 542.332 328.418 542.27 cv
328.359 542.207 328.316 542.129 328.289 542.035 cv
328.258 541.941 328.242 541.812 328.246 541.648 cv
328.242 541.535 328.246 541.441 328.262 541.363 cv
328.27 541.289 328.285 541.227 328.309 541.18 cv
328.324 541.133 328.352 541.102 328.387 541.082 cv
328.414 541.066 328.449 541.059 328.492 541.055 cv
328.563 541.059 328.664 541.102 328.801 541.187 cv
328.93 541.277 329.102 541.375 329.313 541.477 cv
329.52 541.586 329.77 541.684 330.063 541.77 cv
330.355 541.863 330.695 541.906 331.082 541.906 cv
331.371 541.906 331.637 541.867 331.879 541.789 cv
332.117 541.711 332.324 541.602 332.504 541.457 cv
332.676 541.316 332.813 541.141 332.906 540.93 cv
333 540.723 333.047 540.488 333.047 540.223 cv
333.047 539.941 332.98 539.695 332.852 539.488 cv
332.719 539.289 332.547 539.113 332.336 538.957 cv
332.121 538.809 331.879 538.668 331.605 538.535 cv
331.332 538.41 331.051 538.277 330.77 538.145 cv
330.48 538.012 330.203 537.867 329.934 537.703 cv
329.664 537.547 329.422 537.355 329.211 537.137 cv
328.992 536.918 328.82 536.664 328.691 536.367 cv
328.555 536.078 328.488 535.727 328.492 535.312 cv
328.488 534.895 328.566 534.52 328.723 534.187 cv
328.875 533.859 329.086 533.582 329.363 533.355 cv
329.633 533.137 329.957 532.965 330.336 532.848 cv
330.711 532.73 331.121 532.672 331.559 532.672 cv
331.777 532.672 332 532.691 332.23 532.73 cv
332.453 532.77 332.664 532.82 332.867 532.883 cv
333.063 532.949 333.242 533.023 333.402 533.102 cv
333.555 533.184 333.656 533.25 333.711 533.297 cv
333.758 533.352 333.793 533.391 333.809 533.414 cv
333.824 533.445 333.836 533.48 333.848 533.523 cv
333.855 533.57 333.863 533.625 333.871 533.684 cv
333.875 533.75 333.879 533.828 333.879 533.926 cv
333.879 534.02 333.875 534.105 333.867 534.176 cv
333.859 534.254 333.848 534.312 333.832 534.359 cv
333.816 534.406 333.793 534.441 333.766 534.465 cv
333.734 534.488 333.703 534.5 333.668 534.5 cv
333.609 534.5 333.52 534.465 333.398 534.395 cv
333.273 534.324 333.121 534.242 332.949 534.148 cv
332.77 534.059 332.563 533.977 332.324 533.898 cv
332.078 533.824 331.809 533.785 331.512 533.785 cv
331.23 533.785 330.984 533.824 330.777 533.898 cv
330.566 533.977 330.395 534.078 330.262 534.199 cv
330.125 534.324 330.023 534.469 329.957 534.641 cv
329.891 534.812 329.859 534.996 329.859 535.187 cv
329.859 535.473 329.922 535.715 330.051 535.914 cv
330.18 536.117 330.352 536.297 330.57 536.449 cv
330.781 536.609 331.027 536.75 331.305 536.879 cv
331.578 537.012 331.859 537.145 332.148 537.273 cv
332.434 537.406 332.715 537.551 332.988 537.707 cv
333.262 537.867 333.508 538.055 333.727 538.27 cv
333.941 538.488 334.113 538.742 334.25 539.035 cv
334.379 539.328 334.445 539.676 334.449 540.074 cv
cp
f
342.215 542.707 mo
342.211 542.754 342.203 542.789 342.188 542.812 cv
342.168 542.844 342.133 542.867 342.09 542.887 cv
342.043 542.906 341.984 542.918 341.91 542.934 cv
341.832 542.941 341.738 542.949 341.633 542.949 cv
341.508 542.949 341.41 542.941 341.34 542.934 cv
341.262 542.918 341.203 542.906 341.16 542.887 cv
341.113 542.867 341.082 542.844 341.07 542.812 cv
341.051 542.789 341.043 542.754 341.047 542.707 cv
341.047 541.781 li
340.645 542.227 340.25 542.547 339.863 542.746 cv
339.469 542.949 339.074 543.047 338.68 543.051 cv
338.207 543.047 337.813 542.973 337.496 542.816 cv
337.176 542.664 336.918 542.453 336.723 542.184 cv
336.52 541.918 336.379 541.605 336.297 541.246 cv
336.207 540.891 336.164 540.457 336.168 539.949 cv
336.168 535.695 li
336.164 535.656 336.172 535.621 336.195 535.59 cv
336.211 535.562 336.246 535.539 336.301 535.512 cv
336.348 535.492 336.418 535.477 336.504 535.465 cv
336.586 535.461 336.688 535.457 336.816 535.453 cv
336.938 535.457 337.043 535.461 337.129 535.465 cv
337.211 535.477 337.277 535.492 337.324 535.512 cv
337.371 535.539 337.406 535.562 337.43 535.59 cv
337.449 535.621 337.457 535.656 337.461 535.695 cv
337.461 539.777 li
337.457 540.191 337.488 540.52 337.551 540.766 cv
337.609 541.012 337.699 541.223 337.824 541.395 cv
337.941 541.574 338.098 541.707 338.289 541.801 cv
338.473 541.898 338.691 541.949 338.941 541.945 cv
339.262 541.949 339.582 541.832 339.906 541.602 cv
340.223 541.375 340.563 541.039 340.922 540.594 cv
340.922 535.695 li
340.922 535.656 340.93 535.621 340.949 535.59 cv
340.965 535.562 341 535.539 341.055 535.512 cv
341.105 535.492 341.172 535.477 341.254 535.465 cv
341.332 535.461 341.438 535.457 341.57 535.453 cv
341.691 535.457 341.797 535.461 341.883 535.465 cv
341.965 535.477 342.027 535.492 342.074 535.512 cv
342.117 535.539 342.152 535.562 342.18 535.59 cv
342.199 535.621 342.211 535.656 342.215 535.695 cv
cp
f
351.07 539.105 mo
351.066 539.715 351 540.266 350.871 540.75 cv
350.734 541.238 350.539 541.652 350.285 541.992 cv
350.027 542.336 349.711 542.598 349.34 542.777 cv
348.965 542.961 348.539 543.047 348.055 543.051 cv
347.828 543.047 347.621 543.027 347.434 542.984 cv
347.246 542.937 347.059 542.867 346.879 542.77 cv
346.691 542.672 346.512 542.547 346.332 542.395 cv
346.148 542.246 345.957 542.066 345.758 541.852 cv
345.758 542.707 li
345.758 542.754 345.746 542.789 345.727 542.816 cv
345.703 542.852 345.668 542.875 345.625 542.891 cv
345.574 542.906 345.516 542.918 345.449 542.934 cv
345.375 542.941 345.285 542.949 345.18 542.949 cv
345.07 542.949 344.984 542.941 344.914 542.934 cv
344.84 542.918 344.777 542.906 344.734 542.891 cv
344.684 542.875 344.652 542.852 344.641 542.816 cv
344.621 542.789 344.613 542.754 344.617 542.707 cv
344.617 532.297 li
344.613 532.258 344.625 532.223 344.645 532.187 cv
344.66 532.16 344.691 532.133 344.746 532.109 cv
344.793 532.09 344.859 532.074 344.945 532.062 cv
345.023 532.055 345.129 532.051 345.258 532.047 cv
345.387 532.051 345.492 532.055 345.578 532.062 cv
345.656 532.074 345.723 532.09 345.77 532.109 cv
345.816 532.133 345.848 532.16 345.871 532.187 cv
345.887 532.223 345.898 532.258 345.902 532.297 cv
345.902 536.496 li
346.109 536.285 346.313 536.105 346.508 535.961 cv
346.703 535.816 346.891 535.699 347.078 535.605 cv
347.262 535.52 347.449 535.453 347.641 535.406 cv
347.824 535.367 348.023 535.344 348.234 535.344 cv
348.738 535.344 349.172 535.445 349.539 535.648 cv
349.898 535.852 350.191 536.125 350.418 536.461 cv
350.641 536.805 350.809 537.203 350.914 537.66 cv
351.016 538.117 351.066 538.598 351.07 539.105 cv
cp
349.738 539.254 mo
349.734 538.898 349.707 538.551 349.656 538.211 cv
349.598 537.875 349.504 537.578 349.367 537.316 cv
349.23 537.059 349.051 536.848 348.828 536.687 cv
348.602 536.531 348.32 536.453 347.988 536.449 cv
347.82 536.453 347.656 536.477 347.496 536.52 cv
347.332 536.57 347.168 536.648 347 536.754 cv
346.832 536.867 346.656 537.008 346.48 537.176 cv
346.297 537.352 346.105 537.566 345.902 537.82 cv
345.902 540.617 li
346.258 541.051 346.598 541.383 346.922 541.605 cv
347.246 541.836 347.582 541.949 347.934 541.945 cv
348.254 541.949 348.531 541.871 348.766 541.711 cv
348.992 541.559 349.18 541.352 349.324 541.09 cv
349.469 540.836 349.574 540.547 349.641 540.227 cv
349.703 539.91 349.734 539.586 349.738 539.254 cv
cp
f
356.207 538.969 mo
356.207 539.172 356.184 539.309 356.137 539.387 cv
356.09 539.465 356.02 539.504 355.934 539.504 cv
352.676 539.504 li
352.582 539.504 352.516 539.465 352.469 539.383 cv
352.422 539.305 352.398 539.168 352.398 538.969 cv
352.398 538.773 352.422 538.633 352.469 538.555 cv
352.516 538.477 352.582 538.437 352.676 538.437 cv
355.934 538.437 li
355.973 538.437 356.012 538.445 356.047 538.461 cv
356.078 538.477 356.105 538.508 356.133 538.551 cv
356.152 538.598 356.172 538.652 356.188 538.719 cv
356.199 538.789 356.207 538.875 356.207 538.969 cv
cp
f
359.461 542.699 mo
359.457 542.742 359.449 542.777 359.43 542.809 cv
359.406 542.84 359.367 542.867 359.32 542.883 cv
359.266 542.902 359.199 542.914 359.113 542.93 cv
359.027 542.941 358.918 542.949 358.793 542.949 cv
358.664 542.949 358.559 542.941 358.473 542.93 cv
358.383 542.914 358.313 542.902 358.262 542.883 cv
358.207 542.867 358.172 542.84 358.152 542.809 cv
358.129 542.777 358.117 542.742 358.121 542.699 cv
358.121 533.02 li
358.117 532.98 358.129 532.945 358.156 532.91 cv
358.176 532.883 358.215 532.855 358.273 532.836 cv
358.324 532.82 358.395 532.805 358.484 532.789 cv
358.566 532.777 358.668 532.773 358.793 532.77 cv
358.918 532.773 359.027 532.777 359.113 532.789 cv
359.199 532.805 359.266 532.82 359.32 532.836 cv
359.367 532.855 359.406 532.883 359.43 532.91 cv
359.449 532.945 359.457 532.98 359.461 533.02 cv
cp
f
372.449 542.707 mo
372.445 542.754 372.438 542.789 372.418 542.812 cv
372.395 542.844 372.359 542.867 372.316 542.887 cv
372.266 542.906 372.199 542.918 372.121 542.934 cv
372.035 542.941 371.934 542.949 371.809 542.949 cv
371.676 542.949 371.566 542.941 371.488 542.934 cv
371.402 542.918 371.336 542.906 371.289 542.887 cv
371.234 542.867 371.199 542.844 371.184 542.812 cv
371.16 542.789 371.152 542.754 371.152 542.707 cv
371.152 538.445 li
371.152 538.152 371.125 537.883 371.074 537.637 cv
371.02 537.395 370.938 537.184 370.824 537.004 cv
370.711 536.828 370.566 536.691 370.391 536.598 cv
370.211 536.504 370 536.457 369.766 536.457 cv
369.469 536.457 369.172 536.574 368.875 536.801 cv
368.57 537.035 368.242 537.367 367.887 537.805 cv
367.887 542.707 li
367.883 542.754 367.871 542.789 367.855 542.812 cv
367.832 542.844 367.801 542.867 367.754 542.887 cv
367.703 542.906 367.637 542.918 367.555 542.934 cv
367.469 542.941 367.363 542.949 367.242 542.949 cv
367.121 542.949 367.02 542.941 366.934 542.934 cv
366.848 542.918 366.777 542.906 366.73 542.887 cv
366.676 542.867 366.645 542.844 366.629 542.812 cv
366.609 542.789 366.598 542.754 366.602 542.707 cv
366.602 538.445 li
366.598 538.152 366.57 537.883 366.516 537.637 cv
366.457 537.395 366.371 537.184 366.258 537.004 cv
366.145 536.828 366 536.691 365.828 536.598 cv
365.648 536.504 365.441 536.457 365.207 536.457 cv
364.906 536.457 364.609 536.574 364.309 536.801 cv
364.008 537.035 363.68 537.367 363.328 537.805 cv
363.328 542.707 li
363.324 542.754 363.313 542.789 363.297 542.812 cv
363.273 542.844 363.242 542.867 363.195 542.887 cv
363.148 542.906 363.082 542.918 363.004 542.934 cv
362.918 542.941 362.813 542.949 362.684 542.949 cv
362.555 542.949 362.449 542.941 362.371 542.934 cv
362.285 542.918 362.219 542.906 362.172 542.887 cv
362.117 542.867 362.086 542.844 362.07 542.812 cv
362.051 542.789 362.039 542.754 362.043 542.707 cv
362.043 535.695 li
362.039 535.656 362.047 535.621 362.066 535.59 cv
362.078 535.562 362.109 535.539 362.16 535.512 cv
362.203 535.492 362.266 535.477 362.34 535.465 cv
362.41 535.461 362.504 535.457 362.629 535.453 cv
362.738 535.457 362.836 535.461 362.914 535.465 cv
362.988 535.477 363.047 535.492 363.09 535.512 cv
363.129 535.539 363.156 535.562 363.176 535.59 cv
363.191 535.621 363.199 535.656 363.203 535.695 cv
363.203 536.621 li
363.594 536.18 363.977 535.859 364.352 535.652 cv
364.719 535.449 365.098 535.344 365.48 535.344 cv
365.77 535.344 366.027 535.379 366.262 535.445 cv
366.488 535.516 366.695 535.609 366.875 535.73 cv
367.051 535.852 367.199 535.996 367.328 536.164 cv
367.449 536.336 367.555 536.527 367.641 536.73 cv
367.871 536.48 368.094 536.266 368.305 536.086 cv
368.516 535.914 368.719 535.77 368.914 535.656 cv
369.109 535.551 369.297 535.473 369.48 535.418 cv
369.664 535.371 369.852 535.344 370.039 535.344 cv
370.492 535.344 370.871 535.426 371.176 535.582 cv
371.48 535.746 371.727 535.957 371.922 536.219 cv
372.109 536.484 372.246 536.793 372.328 537.148 cv
372.406 537.504 372.445 537.879 372.449 538.273 cv
cp
f
380.078 542.715 mo
380.074 542.777 380.055 542.824 380.016 542.855 cv
379.973 542.887 379.914 542.91 379.844 542.926 cv
379.766 542.941 379.66 542.949 379.523 542.949 cv
379.387 542.949 379.277 542.941 379.199 542.926 cv
379.113 542.91 379.055 542.887 379.023 542.855 cv
378.984 542.824 378.969 542.777 378.973 542.715 cv
378.973 542.016 li
378.664 542.344 378.32 542.598 377.945 542.777 cv
377.566 542.961 377.168 543.047 376.75 543.051 cv
376.375 543.047 376.043 543 375.746 542.906 cv
375.449 542.809 375.195 542.672 374.984 542.488 cv
374.773 542.309 374.609 542.086 374.492 541.82 cv
374.375 541.559 374.316 541.258 374.32 540.914 cv
374.316 540.523 374.395 540.18 374.559 539.887 cv
374.715 539.598 374.949 539.355 375.254 539.164 cv
375.555 538.973 375.922 538.828 376.359 538.73 cv
376.793 538.637 377.285 538.59 377.832 538.586 cv
378.801 538.586 li
378.801 538.039 li
378.797 537.77 378.77 537.531 378.715 537.324 cv
378.656 537.117 378.563 536.945 378.438 536.805 cv
378.305 536.668 378.141 536.562 377.941 536.492 cv
377.734 536.422 377.484 536.387 377.195 536.387 cv
376.875 536.387 376.59 536.426 376.34 536.5 cv
376.082 536.578 375.863 536.66 375.676 536.75 cv
375.488 536.844 375.328 536.93 375.203 537 cv
375.07 537.078 374.977 537.113 374.918 537.113 cv
374.875 537.113 374.84 537.105 374.809 537.082 cv
374.777 537.066 374.75 537.035 374.727 536.988 cv
374.703 536.949 374.684 536.895 374.676 536.828 cv
374.66 536.766 374.656 536.695 374.66 536.613 cv
374.656 536.488 374.664 536.383 374.688 536.305 cv
374.703 536.23 374.75 536.16 374.82 536.09 cv
374.891 536.023 375.012 535.945 375.184 535.855 cv
375.355 535.766 375.551 535.684 375.773 535.605 cv
375.996 535.535 376.242 535.473 376.508 535.418 cv
376.773 535.371 377.039 535.344 377.313 535.344 cv
377.813 535.344 378.242 535.402 378.594 535.516 cv
378.945 535.633 379.23 535.801 379.453 536.02 cv
379.668 536.242 379.828 536.516 379.93 536.84 cv
380.027 537.172 380.074 537.555 380.078 537.984 cv
cp
378.801 539.512 mo
377.699 539.512 li
377.344 539.516 377.039 539.547 376.781 539.602 cv
376.52 539.664 376.305 539.75 376.133 539.867 cv
375.961 539.984 375.836 540.125 375.758 540.289 cv
375.676 540.453 375.633 540.641 375.637 540.852 cv
375.633 541.219 375.75 541.512 375.98 541.723 cv
376.211 541.941 376.535 542.047 376.953 542.047 cv
377.289 542.047 377.602 541.961 377.891 541.789 cv
378.18 541.617 378.48 541.355 378.801 541 cv
cp
f
388.297 536.012 mo
388.293 536.195 388.27 536.328 388.223 536.406 cv
388.172 536.488 388.109 536.527 388.035 536.527 cv
387.027 536.527 li
387.207 536.715 387.336 536.922 387.41 537.148 cv
387.48 537.375 387.516 537.609 387.52 537.852 cv
387.516 538.258 387.449 538.617 387.324 538.93 cv
387.191 539.242 387.008 539.508 386.766 539.719 cv
386.523 539.937 386.234 540.102 385.906 540.215 cv
385.57 540.332 385.203 540.391 384.801 540.387 cv
384.512 540.391 384.238 540.352 383.984 540.273 cv
383.723 540.199 383.527 540.105 383.391 539.988 cv
383.297 540.086 383.219 540.191 383.16 540.309 cv
383.098 540.43 383.066 540.566 383.07 540.719 cv
383.066 540.902 383.152 541.055 383.324 541.172 cv
383.492 541.297 383.715 541.359 383.996 541.367 cv
385.828 541.445 li
386.176 541.457 386.492 541.504 386.785 541.59 cv
387.074 541.676 387.328 541.801 387.543 541.957 cv
387.754 542.117 387.922 542.309 388.043 542.539 cv
388.16 542.773 388.219 543.043 388.223 543.348 cv
388.219 543.668 388.152 543.973 388.02 544.266 cv
387.883 544.555 387.676 544.809 387.398 545.031 cv
387.117 545.25 386.762 545.426 386.332 545.555 cv
385.902 545.68 385.395 545.742 384.809 545.746 cv
384.238 545.742 383.754 545.695 383.359 545.602 cv
382.961 545.504 382.637 545.371 382.383 545.207 cv
382.129 545.039 381.945 544.844 381.832 544.613 cv
381.715 544.379 381.656 544.125 381.66 543.859 cv
381.656 543.687 381.676 543.523 381.723 543.363 cv
381.762 543.199 381.824 543.047 381.91 542.902 cv
381.992 542.758 382.102 542.621 382.23 542.484 cv
382.355 542.355 382.5 542.223 382.672 542.094 cv
382.414 541.965 382.227 541.801 382.105 541.602 cv
381.984 541.406 381.926 541.195 381.926 540.961 cv
381.926 540.648 381.988 540.363 382.117 540.113 cv
382.246 539.863 382.406 539.641 382.602 539.441 cv
382.438 539.25 382.313 539.035 382.219 538.793 cv
382.125 538.555 382.078 538.262 382.078 537.914 cv
382.078 537.52 382.145 537.16 382.281 536.84 cv
382.414 536.523 382.602 536.258 382.844 536.039 cv
383.082 535.824 383.367 535.656 383.703 535.535 cv
384.035 535.422 384.402 535.363 384.801 535.359 cv
385.012 535.363 385.211 535.375 385.395 535.395 cv
385.578 535.422 385.75 535.453 385.914 535.492 cv
388.035 535.492 li
388.121 535.496 388.188 535.539 388.23 535.621 cv
388.273 535.711 388.293 535.84 388.297 536.012 cv
cp
386.289 537.859 mo
386.285 537.387 386.152 537.016 385.895 536.742 cv
385.629 536.477 385.258 536.34 384.777 536.34 cv
384.523 536.34 384.305 536.383 384.125 536.465 cv
383.938 536.551 383.785 536.664 383.664 536.809 cv
383.543 536.957 383.453 537.125 383.395 537.312 cv
383.332 537.5 383.301 537.699 383.305 537.906 cv
383.301 538.371 383.434 538.734 383.695 539 cv
383.957 539.266 384.324 539.398 384.801 539.395 cv
385.051 539.398 385.27 539.359 385.461 539.273 cv
385.645 539.195 385.801 539.082 385.926 538.941 cv
386.047 538.801 386.137 538.637 386.199 538.445 cv
386.254 538.262 386.285 538.066 386.289 537.859 cv
cp
386.934 543.418 mo
386.93 543.113 386.805 542.883 386.563 542.719 cv
386.313 542.559 385.98 542.469 385.563 542.457 cv
383.746 542.395 li
383.578 542.527 383.441 542.652 383.34 542.766 cv
383.23 542.883 383.148 542.992 383.086 543.102 cv
383.023 543.207 382.98 543.312 382.957 543.418 cv
382.934 543.52 382.922 543.625 382.922 543.734 cv
382.922 544.07 383.09 544.324 383.434 544.504 cv
383.773 544.676 384.254 544.766 384.871 544.766 cv
385.258 544.766 385.582 544.727 385.848 544.652 cv
386.105 544.574 386.316 544.473 386.48 544.352 cv
386.637 544.223 386.754 544.082 386.828 543.922 cv
386.895 543.762 386.93 543.594 386.934 543.418 cv
cp
f
395.859 538.898 mo
395.855 539.102 395.805 539.242 395.707 539.328 cv
395.602 539.414 395.484 539.457 395.359 539.457 cv
390.742 539.457 li
390.738 539.848 390.777 540.199 390.859 540.512 cv
390.934 540.824 391.066 541.094 391.25 541.312 cv
391.43 541.539 391.664 541.711 391.961 541.828 cv
392.25 541.953 392.609 542.012 393.035 542.008 cv
393.367 542.012 393.664 541.984 393.926 541.926 cv
394.188 541.875 394.414 541.812 394.605 541.742 cv
394.793 541.676 394.949 541.617 395.074 541.559 cv
395.195 541.508 395.289 541.48 395.352 541.477 cv
395.387 541.48 395.418 541.488 395.449 541.504 cv
395.477 541.523 395.5 541.551 395.52 541.586 cv
395.531 541.625 395.543 541.676 395.555 541.738 cv
395.559 541.805 395.563 541.883 395.566 541.977 cv
395.563 542.047 395.559 542.105 395.559 542.152 cv
395.551 542.199 395.547 542.242 395.539 542.281 cv
395.531 542.32 395.516 542.355 395.5 542.387 cv
395.477 542.418 395.453 542.449 395.43 542.477 cv
395.398 542.508 395.316 542.555 395.176 542.617 cv
395.035 542.684 394.852 542.746 394.629 542.809 cv
394.402 542.871 394.145 542.926 393.852 542.977 cv
393.559 543.023 393.246 543.047 392.914 543.051 cv
392.336 543.047 391.828 542.969 391.398 542.809 cv
390.961 542.648 390.598 542.41 390.305 542.094 cv
390.004 541.777 389.781 541.383 389.633 540.902 cv
389.484 540.426 389.41 539.867 389.41 539.23 cv
389.41 538.633 389.484 538.094 389.641 537.609 cv
389.793 537.133 390.02 536.723 390.316 536.387 cv
390.609 536.051 390.965 535.793 391.379 535.613 cv
391.793 535.434 392.258 535.344 392.773 535.344 cv
393.324 535.344 393.793 535.434 394.18 535.609 cv
394.566 535.789 394.883 536.027 395.137 536.324 cv
395.383 536.625 395.566 536.977 395.684 537.375 cv
395.797 537.781 395.855 538.211 395.859 538.664 cv
cp
394.566 538.516 mo
394.582 537.84 394.43 537.309 394.113 536.926 cv
393.797 536.543 393.328 536.352 392.711 536.348 cv
392.387 536.352 392.105 536.41 391.867 536.527 cv
391.625 536.648 391.426 536.809 391.266 537.004 cv
391.102 537.203 390.977 537.434 390.891 537.695 cv
390.801 537.957 390.75 538.23 390.742 538.516 cv
cp
f
402.227 540.797 mo
402.223 541.16 402.156 541.48 402.027 541.758 cv
401.895 542.039 401.707 542.273 401.465 542.465 cv
401.219 542.66 400.926 542.805 400.59 542.902 cv
400.25 543 399.879 543.047 399.477 543.051 cv
399.223 543.047 398.984 543.027 398.762 542.992 cv
398.535 542.949 398.336 542.902 398.156 542.844 cv
397.977 542.785 397.824 542.723 397.699 542.656 cv
397.574 542.594 397.48 542.535 397.426 542.48 cv
397.367 542.43 397.328 542.359 397.305 542.262 cv
397.277 542.172 397.266 542.043 397.266 541.883 cv
397.266 541.785 397.27 541.703 397.281 541.633 cv
397.289 541.566 397.301 541.512 397.32 541.469 cv
397.332 541.43 397.355 541.398 397.383 541.379 cv
397.41 541.363 397.441 541.355 397.48 541.352 cv
397.535 541.355 397.621 541.391 397.734 541.457 cv
397.844 541.531 397.98 541.609 398.148 541.687 cv
398.309 541.773 398.5 541.848 398.727 541.918 cv
398.945 541.988 399.203 542.023 399.5 542.023 cv
399.715 542.023 399.914 542 400.094 541.953 cv
400.27 541.906 400.422 541.84 400.551 541.746 cv
400.68 541.66 400.781 541.543 400.852 541.398 cv
400.922 541.262 400.957 541.094 400.957 540.898 cv
400.957 540.703 400.906 540.539 400.805 540.402 cv
400.703 540.27 400.566 540.148 400.402 540.043 cv
400.234 539.941 400.051 539.852 399.844 539.766 cv
399.633 539.687 399.418 539.602 399.199 539.512 cv
398.98 539.426 398.766 539.324 398.555 539.211 cv
398.344 539.102 398.152 538.969 397.988 538.805 cv
397.816 538.648 397.684 538.453 397.586 538.227 cv
397.48 538.004 397.43 537.738 397.434 537.426 cv
397.43 537.152 397.484 536.887 397.594 536.633 cv
397.699 536.383 397.859 536.164 398.074 535.973 cv
398.285 535.785 398.551 535.633 398.871 535.516 cv
399.191 535.402 399.563 535.344 399.992 535.344 cv
400.176 535.344 400.363 535.359 400.551 535.391 cv
400.734 535.422 400.902 535.461 401.059 535.508 cv
401.207 535.555 401.336 535.605 401.445 535.66 cv
401.547 535.715 401.629 535.766 401.688 535.805 cv
401.738 535.852 401.773 535.887 401.797 535.914 cv
401.813 535.945 401.828 535.98 401.836 536.016 cv
401.844 536.059 401.852 536.105 401.859 536.16 cv
401.867 536.219 401.871 536.289 401.871 536.371 cv
401.871 536.461 401.867 536.539 401.859 536.602 cv
401.852 536.672 401.836 536.723 401.82 536.762 cv
401.797 536.805 401.777 536.836 401.754 536.852 cv
401.727 536.871 401.695 536.879 401.668 536.879 cv
401.617 536.879 401.551 536.852 401.465 536.793 cv
401.375 536.738 401.262 536.676 401.121 536.609 cv
400.98 536.547 400.813 536.488 400.625 536.426 cv
400.434 536.371 400.219 536.34 399.977 536.34 cv
399.754 536.34 399.563 536.367 399.398 536.414 cv
399.23 536.469 399.094 536.539 398.988 536.625 cv
398.883 536.719 398.801 536.824 398.75 536.949 cv
398.691 537.074 398.664 537.211 398.668 537.355 cv
398.664 537.559 398.715 537.727 398.82 537.863 cv
398.922 538.004 399.059 538.125 399.227 538.227 cv
399.391 538.332 399.582 538.426 399.797 538.508 cv
400.008 538.594 400.223 538.68 400.445 538.766 cv
400.664 538.855 400.883 538.957 401.102 539.062 cv
401.316 539.172 401.508 539.301 401.676 539.457 cv
401.84 539.613 401.973 539.801 402.074 540.02 cv
402.172 540.238 402.223 540.5 402.227 540.797 cv
cp
f
166.27 11.539 mo
166.266 12.379 166.164 13.129 165.957 13.785 cv
165.75 14.449 165.441 15.008 165.031 15.465 cv
164.621 15.926 164.113 16.277 163.508 16.516 cv
162.902 16.758 162.203 16.875 161.41 16.879 cv
160.621 16.875 159.934 16.773 159.352 16.57 cv
158.766 16.367 158.277 16.055 157.891 15.633 cv
157.5 15.211 157.211 14.676 157.016 14.027 cv
156.82 13.379 156.723 12.609 156.727 11.719 cv
156.723 10.906 156.824 10.176 157.035 9.52002 cv
157.238 8.87097 157.547 8.31598 157.961 7.85498 cv
158.367 7.40198 158.875 7.05103 159.484 6.80499 cv
160.086 6.56201 160.789 6.44098 161.594 6.43701 cv
162.355 6.44098 163.031 6.54303 163.617 6.742 cv
164.199 6.94501 164.688 7.25403 165.082 7.67603 cv
165.473 8.09802 165.77 8.62903 165.969 9.27002 cv
166.168 9.90997 166.266 10.668 166.27 11.539 cv
cp
164.121 11.648 mo
164.117 11.121 164.074 10.641 163.996 10.207 cv
163.91 9.77301 163.77 9.40198 163.57 9.09003 cv
163.367 8.78101 163.102 8.54303 162.77 8.375 cv
162.438 8.20697 162.023 8.12097 161.527 8.12097 cv
161.02 8.12097 160.598 8.21899 160.262 8.40601 cv
159.926 8.59802 159.652 8.84802 159.445 9.164 cv
159.234 9.48401 159.086 9.85498 159.004 10.277 cv
158.914 10.699 158.871 11.148 158.875 11.617 cv
158.871 12.172 158.914 12.668 159 13.105 cv
159.082 13.547 159.223 13.922 159.422 14.23 cv
159.617 14.543 159.883 14.777 160.215 14.941 cv
160.547 15.105 160.965 15.187 161.473 15.187 cv
161.973 15.187 162.391 15.094 162.73 14.906 cv
163.066 14.719 163.34 14.465 163.551 14.145 cv
163.754 13.824 163.902 13.449 163.992 13.02 cv
164.074 12.59 164.117 12.133 164.121 11.648 cv
cp
f
174.27 9.47699 mo
174.266 9.50403 174.266 9.53497 174.266 9.57001 cv
174.262 9.60901 174.258 9.64801 174.25 9.69098 cv
174.242 9.73401 174.23 9.78497 174.219 9.84003 cv
174.203 9.89801 174.188 9.96503 174.168 10.035 cv
172.082 16.324 li
172.055 16.414 172.02 16.488 171.977 16.539 cv
171.93 16.598 171.855 16.641 171.758 16.668 cv
171.652 16.699 171.516 16.715 171.344 16.73 cv
171.168 16.738 170.941 16.746 170.664 16.746 cv
170.387 16.746 170.16 16.738 169.988 16.727 cv
169.813 16.711 169.676 16.691 169.578 16.66 cv
169.477 16.633 169.406 16.59 169.363 16.531 cv
169.316 16.48 169.281 16.41 169.258 16.324 cv
167.172 10.035 li
167.141 9.93402 167.113 9.84003 167.098 9.758 cv
167.074 9.67603 167.066 9.617 167.066 9.578 cv
167.063 9.547 167.059 9.51202 167.063 9.47699 cv
167.059 9.42603 167.074 9.37903 167.105 9.34003 cv
167.133 9.30103 167.184 9.27002 167.258 9.242 cv
167.328 9.21899 167.426 9.19897 167.555 9.18701 cv
167.68 9.17999 167.84 9.17603 168.035 9.172 cv
168.246 9.17603 168.418 9.18402 168.551 9.19098 cv
168.676 9.20697 168.781 9.22302 168.859 9.24597 cv
168.934 9.27002 168.984 9.30499 169.02 9.34802 cv
169.047 9.39502 169.074 9.44897 169.098 9.508 cv
170.68 14.609 li
170.727 14.805 li
170.773 14.609 li
172.332 9.508 li
172.344 9.44897 172.367 9.39502 172.402 9.34802 cv
172.434 9.30499 172.488 9.27002 172.563 9.24597 cv
172.633 9.22302 172.73 9.20697 172.855 9.19098 cv
172.977 9.18402 173.137 9.17603 173.336 9.172 cv
173.527 9.17603 173.684 9.17999 173.805 9.18701 cv
173.926 9.19897 174.02 9.21899 174.09 9.242 cv
174.156 9.27002 174.203 9.30103 174.23 9.34003 cv
174.254 9.37903 174.266 9.42603 174.27 9.47699 cv
cp
f
181.746 12.758 mo
181.742 12.996 181.691 13.172 181.586 13.285 cv
181.477 13.402 181.328 13.461 181.148 13.457 cv
176.914 13.457 li
176.91 13.758 176.945 14.027 177.02 14.266 cv
177.086 14.508 177.199 14.711 177.355 14.879 cv
177.508 15.051 177.703 15.18 177.945 15.266 cv
178.184 15.355 178.473 15.398 178.816 15.398 cv
179.156 15.398 179.457 15.375 179.719 15.324 cv
179.977 15.277 180.203 15.223 180.395 15.16 cv
180.582 15.102 180.738 15.047 180.867 14.996 cv
180.988 14.949 181.09 14.926 181.172 14.922 cv
181.215 14.926 181.254 14.934 181.289 14.949 cv
181.316 14.969 181.344 15 181.363 15.047 cv
181.383 15.094 181.395 15.16 181.406 15.246 cv
181.41 15.332 181.414 15.441 181.418 15.57 cv
181.414 15.687 181.414 15.785 181.41 15.863 cv
181.402 15.945 181.395 16.012 181.387 16.066 cv
181.375 16.125 181.359 16.176 181.34 16.211 cv
181.32 16.254 181.293 16.289 181.262 16.324 cv
181.227 16.363 181.133 16.414 180.984 16.473 cv
180.828 16.539 180.637 16.602 180.406 16.656 cv
180.168 16.719 179.898 16.766 179.602 16.812 cv
179.297 16.852 178.977 16.875 178.637 16.879 cv
178.016 16.875 177.473 16.801 177.012 16.645 cv
176.543 16.492 176.156 16.254 175.848 15.937 cv
175.531 15.621 175.297 15.223 175.148 14.738 cv
174.992 14.258 174.918 13.691 174.922 13.035 cv
174.918 12.422 174.996 11.863 175.16 11.367 cv
175.316 10.871 175.551 10.453 175.863 10.105 cv
176.168 9.76202 176.543 9.49597 176.98 9.31201 cv
177.418 9.133 177.91 9.04303 178.465 9.039 cv
179.043 9.04303 179.543 9.12903 179.957 9.297 cv
180.371 9.47302 180.707 9.711 180.973 10.012 cv
181.234 10.316 181.43 10.676 181.559 11.09 cv
181.68 11.508 181.742 11.957 181.746 12.445 cv
cp
179.844 12.195 mo
179.855 11.645 179.746 11.211 179.512 10.898 cv
179.277 10.586 178.91 10.43 178.418 10.426 cv
178.168 10.43 177.953 10.477 177.77 10.566 cv
177.582 10.664 177.43 10.789 177.309 10.945 cv
177.184 11.105 177.09 11.293 177.027 11.508 cv
176.961 11.723 176.922 11.953 176.914 12.195 cv
cp
f
187.82 10.129 mo
187.82 10.32 187.813 10.473 187.805 10.59 cv
187.789 10.711 187.773 10.805 187.758 10.871 cv
187.734 10.941 187.707 10.988 187.676 11.012 cv
187.637 11.039 187.594 11.051 187.547 11.051 cv
187.5 11.051 187.453 11.043 187.406 11.023 cv
187.352 11.008 187.293 10.988 187.23 10.965 cv
187.16 10.945 187.09 10.926 187.016 10.906 cv
186.934 10.891 186.848 10.883 186.758 10.879 cv
186.645 10.883 186.535 10.902 186.43 10.945 cv
186.32 10.992 186.207 11.062 186.094 11.152 cv
185.973 11.246 185.852 11.371 185.727 11.523 cv
185.598 11.684 185.461 11.875 185.316 12.102 cv
185.316 16.434 li
185.313 16.488 185.297 16.531 185.27 16.57 cv
185.234 16.609 185.18 16.645 185.109 16.668 cv
185.031 16.695 184.934 16.711 184.809 16.727 cv
184.684 16.738 184.523 16.746 184.336 16.746 cv
184.141 16.746 183.984 16.738 183.859 16.727 cv
183.734 16.711 183.633 16.695 183.559 16.668 cv
183.48 16.645 183.426 16.609 183.398 16.57 cv
183.363 16.531 183.348 16.488 183.352 16.434 cv
183.352 9.48401 li
183.348 9.43701 183.363 9.39099 183.391 9.34802 cv
183.414 9.31201 183.461 9.28101 183.531 9.25 cv
183.598 9.22699 183.684 9.20697 183.793 9.19098 cv
183.898 9.18402 184.031 9.17603 184.195 9.172 cv
184.359 9.17603 184.496 9.18402 184.605 9.19098 cv
184.711 9.20697 184.797 9.22699 184.859 9.25 cv
184.918 9.28101 184.961 9.31201 184.988 9.34802 cv
185.012 9.39099 185.023 9.43701 185.027 9.48401 cv
185.027 10.348 li
185.207 10.09 185.379 9.87903 185.543 9.70697 cv
185.699 9.54303 185.855 9.40601 186.004 9.30499 cv
186.148 9.20697 186.293 9.14099 186.438 9.09802 cv
186.582 9.06201 186.727 9.04303 186.875 9.039 cv
186.941 9.04303 187.016 9.047 187.094 9.05103 cv
187.172 9.06201 187.25 9.07397 187.336 9.09003 cv
187.414 9.10901 187.488 9.12903 187.555 9.15198 cv
187.613 9.17603 187.66 9.203 187.691 9.22699 cv
187.719 9.258 187.738 9.28497 187.754 9.31201 cv
187.766 9.34802 187.777 9.39099 187.789 9.44098 cv
187.797 9.5 187.805 9.58197 187.813 9.68701 cv
187.816 9.797 187.82 9.94501 187.82 10.129 cv
cp
f
194.574 16.457 mo
194.57 16.535 194.543 16.59 194.496 16.629 cv
194.441 16.672 194.359 16.699 194.25 16.719 cv
194.133 16.734 193.969 16.746 193.754 16.746 cv
193.516 16.746 193.344 16.734 193.242 16.719 cv
193.133 16.699 193.059 16.672 193.02 16.629 cv
192.973 16.59 192.953 16.535 192.953 16.457 cv
192.953 15.906 li
192.664 16.215 192.336 16.453 191.973 16.621 cv
191.605 16.793 191.199 16.875 190.754 16.879 cv
190.383 16.875 190.043 16.828 189.734 16.734 cv
189.426 16.641 189.16 16.5 188.934 16.305 cv
188.707 16.117 188.531 15.883 188.406 15.602 cv
188.281 15.324 188.219 14.996 188.223 14.617 cv
188.219 14.219 188.297 13.867 188.457 13.562 cv
188.613 13.266 188.852 13.02 189.168 12.824 cv
189.48 12.633 189.871 12.488 190.34 12.391 cv
190.809 12.301 191.352 12.254 191.969 12.25 cv
192.648 12.25 li
192.648 11.828 li
192.648 11.613 192.625 11.422 192.582 11.258 cv
192.535 11.098 192.461 10.961 192.363 10.848 cv
192.258 10.742 192.125 10.66 191.957 10.605 cv
191.785 10.555 191.574 10.531 191.332 10.527 cv
191 10.531 190.707 10.566 190.453 10.637 cv
190.191 10.711 189.965 10.793 189.77 10.879 cv
189.57 10.973 189.406 11.051 189.277 11.121 cv
189.141 11.195 189.031 11.234 188.953 11.23 cv
188.891 11.234 188.84 11.215 188.801 11.176 cv
188.754 11.141 188.719 11.09 188.691 11.02 cv
188.66 10.957 188.637 10.871 188.625 10.77 cv
188.605 10.672 188.598 10.562 188.602 10.441 cv
188.598 10.281 188.613 10.156 188.641 10.059 cv
188.664 9.96899 188.711 9.883 188.789 9.80499 cv
188.859 9.72998 188.988 9.64801 189.172 9.55902 cv
189.352 9.46899 189.563 9.383 189.809 9.30499 cv
190.051 9.22699 190.32 9.164 190.609 9.11298 cv
190.898 9.06598 191.195 9.04303 191.504 9.039 cv
192.047 9.04303 192.512 9.09399 192.898 9.19897 cv
193.285 9.30902 193.605 9.47302 193.855 9.69098 cv
194.105 9.90997 194.285 10.195 194.402 10.543 cv
194.512 10.895 194.57 11.309 194.574 11.781 cv
cp
192.648 13.48 mo
191.898 13.48 li
191.582 13.484 191.313 13.508 191.09 13.551 cv
190.863 13.602 190.68 13.672 190.543 13.762 cv
190.398 13.859 190.297 13.973 190.234 14.102 cv
190.168 14.238 190.133 14.387 190.137 14.555 cv
190.133 14.848 190.227 15.078 190.414 15.242 cv
190.598 15.41 190.855 15.492 191.184 15.492 cv
191.457 15.492 191.707 15.422 191.941 15.281 cv
192.168 15.141 192.406 14.937 192.648 14.664 cv
cp
f
198.5 16.434 mo
198.496 16.488 198.48 16.531 198.453 16.57 cv
198.418 16.609 198.363 16.645 198.293 16.668 cv
198.215 16.695 198.117 16.711 197.992 16.727 cv
197.867 16.738 197.707 16.746 197.52 16.746 cv
197.324 16.746 197.168 16.738 197.043 16.727 cv
196.918 16.711 196.816 16.695 196.742 16.668 cv
196.664 16.645 196.609 16.609 196.582 16.57 cv
196.547 16.531 196.531 16.488 196.535 16.434 cv
196.535 6.18701 li
196.531 6.13702 196.547 6.09003 196.582 6.047 cv
196.609 6.008 196.664 5.97302 196.742 5.94098 cv
196.816 5.914 196.918 5.89502 197.043 5.875 cv
197.168 5.86298 197.324 5.85498 197.52 5.85199 cv
197.707 5.85498 197.867 5.86298 197.992 5.875 cv
198.117 5.89502 198.215 5.914 198.293 5.94098 cv
198.363 5.97302 198.418 6.008 198.453 6.047 cv
198.48 6.09003 198.496 6.13702 198.5 6.18701 cv
cp
f
202.473 16.434 mo
202.469 16.488 202.453 16.531 202.426 16.57 cv
202.391 16.609 202.336 16.645 202.266 16.668 cv
202.188 16.695 202.09 16.711 201.965 16.727 cv
201.84 16.738 201.68 16.746 201.492 16.746 cv
201.297 16.746 201.141 16.738 201.016 16.727 cv
200.891 16.711 200.789 16.695 200.715 16.668 cv
200.637 16.645 200.582 16.609 200.555 16.57 cv
200.52 16.531 200.504 16.488 200.508 16.434 cv
200.508 6.18701 li
200.504 6.13702 200.52 6.09003 200.555 6.047 cv
200.582 6.008 200.637 5.97302 200.715 5.94098 cv
200.789 5.914 200.891 5.89502 201.016 5.875 cv
201.141 5.86298 201.297 5.85498 201.492 5.85199 cv
201.68 5.85498 201.84 5.86298 201.965 5.875 cv
202.09 5.89502 202.188 5.914 202.266 5.94098 cv
202.336 5.97302 202.391 6.008 202.426 6.047 cv
202.453 6.09003 202.469 6.13702 202.473 6.18701 cv
cp
f
214.133 13.676 mo
214.129 14.207 214.031 14.672 213.836 15.07 cv
213.637 15.473 213.371 15.809 213.035 16.074 cv
212.695 16.344 212.297 16.543 211.848 16.676 cv
211.395 16.809 210.914 16.875 210.402 16.879 cv
210.051 16.875 209.727 16.848 209.43 16.793 cv
209.129 16.734 208.867 16.668 208.641 16.586 cv
208.41 16.508 208.219 16.422 208.066 16.332 cv
207.914 16.246 207.805 16.168 207.738 16.098 cv
207.668 16.031 207.617 15.934 207.594 15.809 cv
207.563 15.684 207.551 15.5 207.551 15.258 cv
207.551 15.098 207.555 14.965 207.566 14.852 cv
207.574 14.746 207.59 14.656 207.617 14.586 cv
207.637 14.52 207.668 14.473 207.711 14.441 cv
207.746 14.418 207.793 14.402 207.844 14.398 cv
207.914 14.402 208.016 14.445 208.152 14.527 cv
208.281 14.617 208.453 14.711 208.664 14.812 cv
208.871 14.918 209.117 15.016 209.406 15.098 cv
209.691 15.187 210.027 15.23 210.41 15.227 cv
210.66 15.23 210.883 15.199 211.078 15.137 cv
211.273 15.078 211.441 14.992 211.582 14.883 cv
211.719 14.773 211.824 14.641 211.898 14.48 cv
211.969 14.32 212.004 14.141 212.008 13.941 cv
212.004 13.715 211.941 13.52 211.82 13.352 cv
211.691 13.191 211.527 13.047 211.332 12.918 cv
211.129 12.793 210.902 12.672 210.648 12.559 cv
210.395 12.449 210.133 12.332 209.863 12.203 cv
209.59 12.082 209.328 11.937 209.074 11.777 cv
208.82 11.621 208.594 11.434 208.395 11.211 cv
208.191 10.992 208.027 10.73 207.906 10.426 cv
207.781 10.125 207.719 9.76599 207.723 9.34399 cv
207.719 8.86298 207.809 8.43701 207.988 8.07001 cv
208.164 7.70697 208.406 7.40198 208.715 7.15601 cv
209.016 6.91803 209.375 6.73798 209.789 6.617 cv
210.203 6.5 210.641 6.44098 211.102 6.43701 cv
211.34 6.44098 211.578 6.45697 211.82 6.492 cv
212.059 6.53101 212.281 6.58197 212.488 6.64099 cv
212.695 6.703 212.879 6.77301 213.043 6.84802 cv
213.199 6.92999 213.309 6.992 213.363 7.04303 cv
213.414 7.09802 213.449 7.14502 213.469 7.17603 cv
213.484 7.21503 213.5 7.26202 213.516 7.32001 cv
213.527 7.383 213.535 7.45697 213.543 7.547 cv
213.547 7.64099 213.551 7.75403 213.551 7.88702 cv
213.551 8.039 213.547 8.16803 213.539 8.27002 cv
213.531 8.375 213.516 8.461 213.5 8.52301 cv
213.477 8.59399 213.453 8.64099 213.422 8.672 cv
213.387 8.703 213.34 8.71899 213.285 8.71899 cv
213.227 8.71899 213.137 8.68402 213.012 8.60901 cv
212.887 8.539 212.73 8.461 212.551 8.37097 cv
212.367 8.289 212.16 8.211 211.922 8.14099 cv
211.68 8.07397 211.414 8.039 211.133 8.03497 cv
210.906 8.039 210.715 8.06598 210.551 8.117 cv
210.383 8.172 210.242 8.24597 210.133 8.34003 cv
210.02 8.43701 209.938 8.55499 209.883 8.68701 cv
209.828 8.828 209.801 8.96899 209.801 9.117 cv
209.801 9.34399 209.859 9.539 209.984 9.69897 cv
210.102 9.86298 210.266 10.008 210.477 10.133 cv
210.68 10.262 210.914 10.383 211.172 10.492 cv
211.43 10.609 211.695 10.727 211.969 10.848 cv
212.238 10.977 212.5 11.117 212.762 11.273 cv
213.02 11.43 213.254 11.621 213.457 11.84 cv
213.66 12.066 213.82 12.324 213.945 12.621 cv
214.066 12.918 214.129 13.27 214.133 13.676 cv
cp
f
222.59 12.855 mo
222.59 13.477 222.523 14.035 222.391 14.531 cv
222.258 15.027 222.063 15.449 221.809 15.797 cv
221.555 16.145 221.238 16.414 220.859 16.598 cv
220.477 16.785 220.043 16.875 219.559 16.879 cv
219.352 16.875 219.164 16.855 219 16.82 cv
218.828 16.777 218.664 16.719 218.508 16.641 cv
218.348 16.562 218.191 16.465 218.039 16.34 cv
217.879 16.223 217.719 16.082 217.555 15.918 cv
217.555 19.191 li
217.551 19.238 217.535 19.285 217.508 19.332 cv
217.473 19.371 217.418 19.406 217.348 19.437 cv
217.27 19.461 217.172 19.484 217.047 19.504 cv
216.922 19.516 216.762 19.523 216.574 19.527 cv
216.379 19.523 216.223 19.516 216.098 19.504 cv
215.973 19.484 215.871 19.461 215.797 19.437 cv
215.719 19.406 215.664 19.371 215.637 19.332 cv
215.602 19.285 215.586 19.238 215.59 19.191 cv
215.59 9.48401 li
215.586 9.43701 215.602 9.39099 215.629 9.34802 cv
215.652 9.31201 215.695 9.28101 215.766 9.25 cv
215.828 9.22699 215.914 9.20697 216.023 9.19098 cv
216.125 9.18402 216.262 9.17603 216.426 9.172 cv
216.582 9.17603 216.711 9.18402 216.816 9.19098 cv
216.922 9.20697 217.008 9.22699 217.074 9.25 cv
217.137 9.28101 217.184 9.31201 217.211 9.34802 cv
217.234 9.39099 217.246 9.43701 217.25 9.48401 cv
217.25 10.301 li
217.449 10.094 217.648 9.914 217.848 9.75403 cv
218.039 9.59802 218.238 9.46503 218.441 9.35498 cv
218.645 9.25403 218.852 9.172 219.07 9.117 cv
219.281 9.06598 219.512 9.04303 219.762 9.039 cv
220.266 9.04303 220.699 9.14099 221.063 9.34003 cv
221.418 9.54303 221.711 9.82001 221.938 10.164 cv
222.16 10.516 222.324 10.918 222.434 11.379 cv
222.535 11.84 222.59 12.332 222.59 12.855 cv
cp
220.547 12.996 mo
220.543 12.703 220.523 12.422 220.48 12.145 cv
220.434 11.875 220.355 11.633 220.254 11.418 cv
220.145 11.207 220.004 11.035 219.832 10.906 cv
219.656 10.781 219.441 10.719 219.184 10.715 cv
219.051 10.719 218.922 10.738 218.797 10.773 cv
218.668 10.816 218.539 10.879 218.406 10.965 cv
218.273 11.055 218.137 11.168 218 11.309 cv
217.855 11.449 217.707 11.625 217.555 11.828 cv
217.555 14.121 li
217.828 14.469 218.09 14.738 218.34 14.926 cv
218.586 15.117 218.848 15.211 219.121 15.211 cv
219.375 15.211 219.59 15.148 219.773 15.016 cv
219.949 14.891 220.098 14.719 220.211 14.508 cv
220.324 14.297 220.406 14.059 220.465 13.793 cv
220.516 13.527 220.543 13.262 220.547 12.996 cv
cp
f
230.582 12.758 mo
230.578 12.996 230.527 13.172 230.422 13.285 cv
230.313 13.402 230.164 13.461 229.984 13.457 cv
225.75 13.457 li
225.746 13.758 225.781 14.027 225.855 14.266 cv
225.922 14.508 226.035 14.711 226.191 14.879 cv
226.344 15.051 226.539 15.18 226.781 15.266 cv
227.02 15.355 227.309 15.398 227.652 15.398 cv
227.992 15.398 228.293 15.375 228.555 15.324 cv
228.813 15.277 229.039 15.223 229.23 15.16 cv
229.418 15.102 229.574 15.047 229.703 14.996 cv
229.824 14.949 229.926 14.926 230.008 14.922 cv
230.051 14.926 230.09 14.934 230.125 14.949 cv
230.152 14.969 230.18 15 230.199 15.047 cv
230.219 15.094 230.23 15.16 230.242 15.246 cv
230.246 15.332 230.25 15.441 230.254 15.57 cv
230.25 15.687 230.25 15.785 230.246 15.863 cv
230.238 15.945 230.23 16.012 230.223 16.066 cv
230.211 16.125 230.195 16.176 230.176 16.211 cv
230.156 16.254 230.129 16.289 230.098 16.324 cv
230.063 16.363 229.969 16.414 229.82 16.473 cv
229.664 16.539 229.473 16.602 229.242 16.656 cv
229.004 16.719 228.734 16.766 228.438 16.812 cv
228.133 16.852 227.813 16.875 227.473 16.879 cv
226.852 16.875 226.309 16.801 225.848 16.645 cv
225.379 16.492 224.992 16.254 224.684 15.937 cv
224.367 15.621 224.133 15.223 223.984 14.738 cv
223.828 14.258 223.754 13.691 223.758 13.035 cv
223.754 12.422 223.832 11.863 223.996 11.367 cv
224.152 10.871 224.387 10.453 224.699 10.105 cv
225.004 9.76202 225.379 9.49597 225.816 9.31201 cv
226.254 9.133 226.746 9.04303 227.301 9.039 cv
227.879 9.04303 228.379 9.12903 228.793 9.297 cv
229.207 9.47302 229.543 9.711 229.809 10.012 cv
230.07 10.316 230.266 10.676 230.395 11.09 cv
230.516 11.508 230.578 11.957 230.582 12.445 cv
cp
228.68 12.195 mo
228.691 11.645 228.582 11.211 228.348 10.898 cv
228.113 10.586 227.746 10.43 227.254 10.426 cv
227.004 10.43 226.789 10.477 226.605 10.566 cv
226.418 10.664 226.266 10.789 226.145 10.945 cv
226.02 11.105 225.926 11.293 225.863 11.508 cv
225.797 11.723 225.758 11.953 225.75 12.195 cv
cp
f
238.609 12.758 mo
238.605 12.996 238.555 13.172 238.449 13.285 cv
238.34 13.402 238.191 13.461 238.012 13.457 cv
233.777 13.457 li
233.773 13.758 233.809 14.027 233.883 14.266 cv
233.949 14.508 234.063 14.711 234.219 14.879 cv
234.371 15.051 234.566 15.18 234.809 15.266 cv
235.047 15.355 235.336 15.398 235.68 15.398 cv
236.02 15.398 236.32 15.375 236.582 15.324 cv
236.84 15.277 237.066 15.223 237.258 15.16 cv
237.445 15.102 237.602 15.047 237.73 14.996 cv
237.852 14.949 237.953 14.926 238.035 14.922 cv
238.078 14.926 238.117 14.934 238.152 14.949 cv
238.18 14.969 238.207 15 238.227 15.047 cv
238.246 15.094 238.258 15.16 238.27 15.246 cv
238.273 15.332 238.277 15.441 238.281 15.57 cv
238.277 15.687 238.277 15.785 238.273 15.863 cv
238.266 15.945 238.258 16.012 238.25 16.066 cv
238.238 16.125 238.223 16.176 238.203 16.211 cv
238.184 16.254 238.156 16.289 238.125 16.324 cv
238.09 16.363 237.996 16.414 237.848 16.473 cv
237.691 16.539 237.5 16.602 237.27 16.656 cv
237.031 16.719 236.762 16.766 236.465 16.812 cv
236.16 16.852 235.84 16.875 235.5 16.879 cv
234.879 16.875 234.336 16.801 233.875 16.645 cv
233.406 16.492 233.02 16.254 232.711 15.937 cv
232.395 15.621 232.16 15.223 232.012 14.738 cv
231.855 14.258 231.781 13.691 231.785 13.035 cv
231.781 12.422 231.859 11.863 232.023 11.367 cv
232.18 10.871 232.414 10.453 232.727 10.105 cv
233.031 9.76202 233.406 9.49597 233.844 9.31201 cv
234.281 9.133 234.773 9.04303 235.328 9.039 cv
235.906 9.04303 236.406 9.12903 236.82 9.297 cv
237.234 9.47302 237.57 9.711 237.836 10.012 cv
238.098 10.316 238.293 10.676 238.422 11.09 cv
238.543 11.508 238.605 11.957 238.609 12.445 cv
cp
236.707 12.195 mo
236.719 11.645 236.609 11.211 236.375 10.898 cv
236.141 10.586 235.773 10.43 235.281 10.426 cv
235.031 10.43 234.816 10.477 234.633 10.566 cv
234.445 10.664 234.293 10.789 234.172 10.945 cv
234.047 11.105 233.953 11.293 233.891 11.508 cv
233.824 11.723 233.785 11.953 233.777 12.195 cv
cp
f
246.809 16.434 mo
246.805 16.496 246.793 16.543 246.77 16.578 cv
246.742 16.621 246.695 16.652 246.637 16.676 cv
246.57 16.699 246.488 16.715 246.383 16.73 cv
246.277 16.738 246.145 16.746 245.992 16.746 cv
245.82 16.746 245.688 16.738 245.586 16.73 cv
245.48 16.715 245.395 16.699 245.332 16.676 cv
245.266 16.652 245.219 16.621 245.191 16.578 cv
245.16 16.543 245.145 16.496 245.148 16.434 cv
245.148 15.664 li
244.789 16.051 244.414 16.348 244.023 16.559 cv
243.625 16.77 243.191 16.875 242.719 16.879 cv
242.184 16.875 241.734 16.773 241.371 16.57 cv
241.004 16.367 240.707 16.094 240.477 15.742 cv
240.242 15.398 240.074 14.992 239.973 14.523 cv
239.871 14.062 239.82 13.57 239.82 13.051 cv
239.82 12.437 239.883 11.883 240.016 11.387 cv
240.145 10.895 240.34 10.473 240.598 10.125 cv
240.852 9.77698 241.168 9.51202 241.547 9.32001 cv
241.926 9.13702 242.363 9.04303 242.859 9.039 cv
243.246 9.04303 243.598 9.12097 243.918 9.27698 cv
244.23 9.43701 244.547 9.66803 244.859 9.97302 cv
244.859 6.211 li
244.859 6.15997 244.871 6.11298 244.902 6.07001 cv
244.926 6.03101 244.98 5.99597 245.059 5.96503 cv
245.133 5.93701 245.23 5.91803 245.359 5.89801 cv
245.48 5.88702 245.641 5.87903 245.836 5.875 cv
246.027 5.87903 246.184 5.88702 246.309 5.89801 cv
246.43 5.91803 246.531 5.93701 246.605 5.96503 cv
246.676 5.99597 246.727 6.03101 246.762 6.07001 cv
246.789 6.11298 246.805 6.15997 246.809 6.211 cv
cp
244.859 11.789 mo
244.578 11.437 244.309 11.168 244.055 10.98 cv
243.793 10.793 243.523 10.699 243.246 10.699 cv
242.992 10.699 242.773 10.766 242.59 10.891 cv
242.402 11.023 242.254 11.191 242.145 11.402 cv
242.031 11.613 241.949 11.852 241.895 12.113 cv
241.84 12.379 241.813 12.648 241.813 12.918 cv
241.813 13.215 241.836 13.496 241.883 13.77 cv
241.93 14.047 242.004 14.293 242.113 14.508 cv
242.215 14.723 242.359 14.895 242.539 15.023 cv
242.715 15.156 242.938 15.223 243.207 15.219 cv
243.34 15.223 243.469 15.203 243.602 15.16 cv
243.727 15.125 243.859 15.062 243.992 14.969 cv
244.125 14.883 244.262 14.766 244.402 14.621 cv
244.543 14.48 244.695 14.305 244.859 14.098 cv
cp
f
255.379 16.434 mo
255.375 16.488 255.363 16.531 255.34 16.57 cv
255.313 16.609 255.266 16.645 255.203 16.668 cv
255.137 16.695 255.051 16.711 254.945 16.727 cv
254.84 16.738 254.707 16.746 254.547 16.746 cv
254.371 16.746 254.23 16.738 254.129 16.727 cv
254.02 16.711 253.938 16.695 253.875 16.668 cv
253.813 16.645 253.766 16.609 253.742 16.57 cv
253.711 16.531 253.699 16.488 253.703 16.434 cv
253.703 15.633 li
253.316 16.047 252.926 16.359 252.531 16.566 cv
252.129 16.773 251.719 16.875 251.297 16.879 cv
250.816 16.875 250.414 16.801 250.09 16.645 cv
249.766 16.492 249.504 16.277 249.305 16.008 cv
249.102 15.738 248.957 15.426 248.875 15.066 cv
248.785 14.711 248.742 14.27 248.746 13.738 cv
248.746 9.48401 li
248.742 9.43701 248.758 9.39099 248.789 9.34802 cv
248.816 9.31201 248.867 9.28101 248.945 9.25 cv
249.02 9.22699 249.121 9.20697 249.25 9.19098 cv
249.375 9.18402 249.531 9.17603 249.723 9.172 cv
249.91 9.17603 250.07 9.18402 250.195 9.19098 cv
250.32 9.20697 250.418 9.22699 250.496 9.25 cv
250.566 9.28101 250.621 9.31201 250.656 9.34802 cv
250.684 9.39099 250.699 9.43701 250.703 9.48401 cv
250.703 13.41 li
250.699 13.777 250.723 14.055 250.773 14.246 cv
250.816 14.437 250.887 14.602 250.988 14.738 cv
251.082 14.879 251.207 14.984 251.355 15.059 cv
251.504 15.137 251.676 15.176 251.871 15.172 cv
252.121 15.176 252.371 15.086 252.625 14.898 cv
252.875 14.719 253.145 14.453 253.43 14.105 cv
253.43 9.48401 li
253.43 9.43701 253.441 9.39099 253.473 9.34802 cv
253.496 9.31201 253.551 9.28101 253.629 9.25 cv
253.703 9.22699 253.801 9.20697 253.93 9.19098 cv
254.051 9.18402 254.211 9.17603 254.406 9.172 cv
254.598 9.17603 254.754 9.18402 254.879 9.19098 cv
255 9.20697 255.102 9.22699 255.176 9.25 cv
255.246 9.28101 255.297 9.31201 255.332 9.34802 cv
255.359 9.39099 255.375 9.43701 255.379 9.48401 cv
cp
f
264.262 12.855 mo
264.262 13.477 264.195 14.035 264.063 14.531 cv
263.93 15.027 263.734 15.449 263.48 15.797 cv
263.227 16.145 262.91 16.414 262.531 16.598 cv
262.148 16.785 261.715 16.875 261.23 16.879 cv
261.023 16.875 260.836 16.855 260.672 16.82 cv
260.5 16.777 260.336 16.719 260.18 16.641 cv
260.02 16.562 259.863 16.465 259.711 16.34 cv
259.551 16.223 259.391 16.082 259.227 15.918 cv
259.227 19.191 li
259.223 19.238 259.207 19.285 259.18 19.332 cv
259.145 19.371 259.09 19.406 259.02 19.437 cv
258.941 19.461 258.844 19.484 258.719 19.504 cv
258.594 19.516 258.434 19.523 258.246 19.527 cv
258.051 19.523 257.895 19.516 257.77 19.504 cv
257.645 19.484 257.543 19.461 257.469 19.437 cv
257.391 19.406 257.336 19.371 257.309 19.332 cv
257.273 19.285 257.258 19.238 257.262 19.191 cv
257.262 9.48401 li
257.258 9.43701 257.273 9.39099 257.301 9.34802 cv
257.324 9.31201 257.367 9.28101 257.438 9.25 cv
257.5 9.22699 257.586 9.20697 257.695 9.19098 cv
257.797 9.18402 257.934 9.17603 258.098 9.172 cv
258.254 9.17603 258.383 9.18402 258.488 9.19098 cv
258.594 9.20697 258.68 9.22699 258.746 9.25 cv
258.809 9.28101 258.855 9.31201 258.883 9.34802 cv
258.906 9.39099 258.918 9.43701 258.922 9.48401 cv
258.922 10.301 li
259.121 10.094 259.32 9.914 259.52 9.75403 cv
259.711 9.59802 259.91 9.46503 260.113 9.35498 cv
260.316 9.25403 260.523 9.172 260.742 9.117 cv
260.953 9.06598 261.184 9.04303 261.434 9.039 cv
261.938 9.04303 262.371 9.14099 262.734 9.34003 cv
263.09 9.54303 263.383 9.82001 263.609 10.164 cv
263.832 10.516 263.996 10.918 264.105 11.379 cv
264.207 11.84 264.262 12.332 264.262 12.855 cv
cp
262.219 12.996 mo
262.215 12.703 262.195 12.422 262.152 12.145 cv
262.105 11.875 262.027 11.633 261.926 11.418 cv
261.816 11.207 261.676 11.035 261.504 10.906 cv
261.328 10.781 261.113 10.719 260.855 10.715 cv
260.723 10.719 260.594 10.738 260.469 10.773 cv
260.34 10.816 260.211 10.879 260.078 10.965 cv
259.945 11.055 259.809 11.168 259.672 11.309 cv
259.527 11.449 259.379 11.625 259.227 11.828 cv
259.227 14.121 li
259.5 14.469 259.762 14.738 260.012 14.926 cv
260.258 15.117 260.52 15.211 260.793 15.211 cv
261.047 15.211 261.262 15.148 261.445 15.016 cv
261.621 14.891 261.77 14.719 261.883 14.508 cv
261.996 14.297 262.078 14.059 262.137 13.793 cv
262.188 13.527 262.215 13.262 262.219 12.996 cv
cp
f
270.551 14.469 mo
270.547 14.867 270.473 15.215 270.328 15.516 cv
270.18 15.816 269.973 16.07 269.703 16.27 cv
269.43 16.477 269.109 16.625 268.742 16.727 cv
268.375 16.824 267.973 16.875 267.543 16.879 cv
267.277 16.875 267.031 16.855 266.797 16.82 cv
266.563 16.777 266.352 16.73 266.164 16.672 cv
265.977 16.613 265.82 16.551 265.695 16.488 cv
265.57 16.426 265.477 16.367 265.422 16.312 cv
265.363 16.258 265.32 16.176 265.293 16.059 cv
265.258 15.945 265.242 15.77 265.246 15.539 cv
265.242 15.391 265.25 15.27 265.262 15.176 cv
265.27 15.086 265.285 15.016 265.309 14.957 cv
265.328 14.906 265.352 14.867 265.387 14.848 cv
265.414 14.832 265.453 14.824 265.5 14.82 cv
265.555 14.824 265.641 14.855 265.754 14.918 cv
265.863 14.984 266 15.059 266.172 15.133 cv
266.336 15.215 266.531 15.285 266.75 15.352 cv
266.969 15.422 267.219 15.457 267.504 15.453 cv
267.68 15.457 267.836 15.437 267.977 15.398 cv
268.109 15.363 268.23 15.312 268.336 15.242 cv
268.434 15.176 268.508 15.09 268.563 14.984 cv
268.609 14.883 268.637 14.762 268.641 14.625 cv
268.637 14.469 268.59 14.336 268.496 14.227 cv
268.402 14.117 268.273 14.02 268.117 13.934 cv
267.953 13.852 267.773 13.773 267.578 13.699 cv
267.375 13.629 267.172 13.551 266.961 13.457 cv
266.75 13.371 266.543 13.27 266.348 13.152 cv
266.145 13.043 265.965 12.902 265.809 12.734 cv
265.645 12.57 265.52 12.371 265.426 12.133 cv
265.332 11.902 265.285 11.621 265.285 11.289 cv
265.285 10.961 265.348 10.656 265.477 10.375 cv
265.605 10.102 265.793 9.86298 266.039 9.664 cv
266.281 9.46899 266.578 9.31598 266.93 9.203 cv
267.277 9.09802 267.672 9.04303 268.113 9.039 cv
268.328 9.04303 268.539 9.05902 268.746 9.086 cv
268.949 9.12097 269.137 9.15997 269.305 9.203 cv
269.469 9.25403 269.609 9.30499 269.727 9.35498 cv
269.84 9.414 269.922 9.461 269.973 9.49597 cv
270.02 9.539 270.055 9.578 270.078 9.61298 cv
270.098 9.65601 270.109 9.703 270.121 9.75403 cv
270.129 9.80902 270.141 9.875 270.148 9.953 cv
270.156 10.039 270.16 10.137 270.16 10.254 cv
270.16 10.395 270.156 10.512 270.148 10.598 cv
270.141 10.691 270.125 10.762 270.109 10.809 cv
270.09 10.863 270.066 10.898 270.039 10.914 cv
270.004 10.937 269.969 10.945 269.93 10.941 cv
269.879 10.945 269.805 10.918 269.711 10.859 cv
269.609 10.809 269.488 10.75 269.34 10.684 cv
269.191 10.625 269.02 10.566 268.824 10.508 cv
268.629 10.457 268.406 10.43 268.16 10.426 cv
267.98 10.43 267.828 10.449 267.699 10.48 cv
267.566 10.52 267.457 10.57 267.379 10.637 cv
267.293 10.707 267.23 10.785 267.191 10.875 cv
267.145 10.969 267.125 11.066 267.129 11.168 cv
267.125 11.328 267.176 11.465 267.277 11.57 cv
267.375 11.684 267.504 11.777 267.668 11.859 cv
267.828 11.945 268.012 12.023 268.219 12.094 cv
268.422 12.168 268.629 12.25 268.84 12.332 cv
269.047 12.422 269.254 12.52 269.465 12.633 cv
269.668 12.746 269.852 12.887 270.012 13.051 cv
270.172 13.219 270.301 13.418 270.402 13.648 cv
270.496 13.883 270.547 14.156 270.551 14.469 cv
cp
f
286.605 9.46899 mo
286.602 9.52698 286.594 9.59802 286.582 9.67999 cv
286.563 9.76202 286.535 9.883 286.496 10.035 cv
284.641 16.324 li
284.613 16.414 284.578 16.488 284.539 16.539 cv
284.496 16.598 284.434 16.641 284.348 16.668 cv
284.262 16.699 284.137 16.715 283.98 16.73 cv
283.816 16.738 283.613 16.746 283.363 16.746 cv
283.105 16.746 282.895 16.738 282.738 16.727 cv
282.574 16.711 282.449 16.691 282.359 16.66 cv
282.266 16.633 282.199 16.59 282.16 16.531 cv
282.117 16.48 282.086 16.41 282.066 16.324 cv
280.898 12.102 li
280.883 12.031 li
280.867 12.102 li
279.793 16.324 li
279.77 16.414 279.738 16.488 279.703 16.539 cv
279.66 16.598 279.594 16.641 279.504 16.668 cv
279.406 16.699 279.281 16.715 279.121 16.73 cv
278.961 16.738 278.754 16.746 278.5 16.746 cv
278.238 16.746 278.027 16.738 277.871 16.727 cv
277.711 16.711 277.586 16.691 277.496 16.66 cv
277.402 16.633 277.336 16.59 277.297 16.531 cv
277.254 16.48 277.223 16.41 277.207 16.324 cv
275.367 10.035 li
275.316 9.88702 275.289 9.77002 275.277 9.68402 cv
275.262 9.60199 275.254 9.52698 275.258 9.46899 cv
275.254 9.41803 275.27 9.375 275.301 9.33197 cv
275.328 9.297 275.379 9.26599 275.457 9.23798 cv
275.531 9.21899 275.633 9.19897 275.758 9.18701 cv
275.883 9.17999 276.043 9.17603 276.238 9.172 cv
276.445 9.17603 276.613 9.17999 276.746 9.18701 cv
276.875 9.19897 276.977 9.21899 277.051 9.242 cv
277.121 9.27002 277.172 9.30499 277.203 9.34802 cv
277.23 9.39502 277.254 9.44897 277.27 9.508 cv
278.648 14.609 li
278.664 14.703 li
278.68 14.609 li
279.973 9.508 li
279.984 9.44897 280.012 9.39502 280.047 9.34802 cv
280.078 9.30499 280.129 9.27002 280.199 9.242 cv
280.266 9.21899 280.359 9.19897 280.48 9.18701 cv
280.602 9.17999 280.758 9.17603 280.953 9.172 cv
281.145 9.17603 281.301 9.18402 281.422 9.19098 cv
281.539 9.20697 281.633 9.22302 281.707 9.24597 cv
281.773 9.27002 281.824 9.30103 281.855 9.34003 cv
281.883 9.37903 281.906 9.42603 281.922 9.47699 cv
283.309 14.617 li
283.332 14.703 li
283.348 14.609 li
284.672 9.508 li
284.68 9.44897 284.703 9.39502 284.734 9.34802 cv
284.766 9.30499 284.816 9.27002 284.891 9.242 cv
284.961 9.21899 285.059 9.19897 285.184 9.18701 cv
285.305 9.17999 285.465 9.17603 285.66 9.172 cv
285.852 9.17603 286.008 9.17999 286.133 9.18701 cv
286.254 9.19897 286.352 9.21899 286.422 9.23798 cv
286.492 9.26599 286.539 9.297 286.566 9.33197 cv
286.59 9.375 286.602 9.41803 286.605 9.46899 cv
cp
f
289.82 16.434 mo
289.816 16.488 289.801 16.531 289.773 16.57 cv
289.738 16.609 289.684 16.645 289.613 16.668 cv
289.535 16.695 289.438 16.711 289.313 16.727 cv
289.188 16.738 289.027 16.746 288.84 16.746 cv
288.645 16.746 288.488 16.738 288.363 16.727 cv
288.238 16.711 288.137 16.695 288.063 16.668 cv
287.984 16.645 287.93 16.609 287.902 16.57 cv
287.867 16.531 287.852 16.488 287.855 16.434 cv
287.855 9.5 li
287.852 9.44897 287.867 9.40198 287.902 9.36298 cv
287.93 9.32397 287.984 9.29303 288.063 9.26202 cv
288.137 9.23798 288.238 9.21503 288.363 9.19501 cv
288.488 9.18402 288.645 9.17603 288.84 9.172 cv
289.027 9.17603 289.188 9.18402 289.313 9.19501 cv
289.438 9.21503 289.535 9.23798 289.613 9.26202 cv
289.684 9.29303 289.738 9.32397 289.773 9.36298 cv
289.801 9.40198 289.816 9.44897 289.82 9.5 cv
cp
289.969 7.12903 mo
289.969 7.52698 289.887 7.80103 289.727 7.94897 cv
289.563 8.10199 289.266 8.17603 288.832 8.172 cv
288.387 8.17603 288.086 8.10199 287.938 7.95697 cv
287.781 7.81201 287.707 7.55103 287.707 7.16803 cv
287.707 6.77301 287.785 6.5 287.945 6.34802 cv
288.102 6.19501 288.402 6.117 288.848 6.117 cv
289.281 6.117 289.578 6.19098 289.734 6.34003 cv
289.891 6.48798 289.969 6.75403 289.969 7.12903 cv
cp
f
295.898 15.75 mo
295.898 15.977 295.883 16.152 295.855 16.273 cv
295.824 16.398 295.785 16.484 295.742 16.531 cv
295.691 16.582 295.625 16.625 295.535 16.664 cv
295.441 16.703 295.332 16.734 295.215 16.766 cv
295.09 16.789 294.957 16.812 294.816 16.832 cv
294.672 16.844 294.531 16.852 294.387 16.855 cv
293.996 16.852 293.656 16.801 293.371 16.707 cv
293.086 16.605 292.852 16.457 292.664 16.25 cv
292.477 16.047 292.336 15.789 292.25 15.477 cv
292.156 15.168 292.113 14.797 292.117 14.367 cv
292.117 10.809 li
291.285 10.809 li
291.184 10.812 291.109 10.75 291.059 10.625 cv
291.004 10.504 290.977 10.301 290.98 10.012 cv
290.977 9.86298 290.984 9.73401 291 9.633 cv
291.012 9.53101 291.031 9.44897 291.059 9.38702 cv
291.082 9.328 291.113 9.28497 291.156 9.258 cv
291.191 9.23401 291.238 9.22302 291.293 9.21899 cv
292.117 9.21899 li
292.117 7.66803 li
292.113 7.62097 292.129 7.57397 292.16 7.52698 cv
292.188 7.48798 292.238 7.453 292.316 7.422 cv
292.391 7.39801 292.492 7.375 292.621 7.35901 cv
292.746 7.34802 292.902 7.34399 293.094 7.34003 cv
293.281 7.34399 293.441 7.34802 293.57 7.35901 cv
293.695 7.375 293.797 7.39801 293.871 7.422 cv
293.941 7.453 293.992 7.48798 294.027 7.52698 cv
294.055 7.57397 294.07 7.62097 294.074 7.66803 cv
294.074 9.21899 li
295.586 9.21899 li
295.637 9.22302 295.684 9.23401 295.723 9.258 cv
295.762 9.28497 295.793 9.328 295.82 9.38702 cv
295.844 9.44897 295.863 9.53101 295.879 9.633 cv
295.891 9.73401 295.898 9.86298 295.898 10.012 cv
295.898 10.301 295.871 10.504 295.82 10.625 cv
295.766 10.75 295.691 10.812 295.594 10.809 cv
294.074 10.809 li
294.074 14.074 li
294.07 14.453 294.129 14.738 294.254 14.926 cv
294.371 15.117 294.586 15.211 294.891 15.211 cv
294.992 15.211 295.086 15.203 295.172 15.184 cv
295.254 15.168 295.328 15.148 295.395 15.121 cv
295.457 15.102 295.512 15.078 295.559 15.059 cv
295.602 15.043 295.641 15.035 295.68 15.031 cv
295.707 15.035 295.738 15.043 295.77 15.059 cv
295.797 15.078 295.816 15.117 295.836 15.168 cv
295.848 15.227 295.863 15.301 295.879 15.391 cv
295.891 15.488 295.898 15.605 295.898 15.75 cv
cp
f
303.961 16.434 mo
303.957 16.488 303.941 16.531 303.914 16.57 cv
303.879 16.609 303.828 16.645 303.758 16.668 cv
303.684 16.695 303.582 16.711 303.457 16.727 cv
303.328 16.738 303.172 16.746 302.988 16.746 cv
302.793 16.746 302.633 16.738 302.508 16.727 cv
302.379 16.711 302.277 16.695 302.207 16.668 cv
302.129 16.645 302.078 16.609 302.051 16.57 cv
302.016 16.531 302 16.488 302.004 16.434 cv
302.004 12.469 li
302 12.133 301.977 11.867 301.93 11.672 cv
301.879 11.48 301.805 11.316 301.715 11.18 cv
301.621 11.043 301.504 10.937 301.355 10.859 cv
301.207 10.785 301.031 10.746 300.836 10.746 cv
300.582 10.746 300.332 10.84 300.078 11.02 cv
299.824 11.203 299.559 11.465 299.285 11.812 cv
299.285 16.434 li
299.281 16.488 299.266 16.531 299.238 16.57 cv
299.203 16.609 299.148 16.645 299.078 16.668 cv
299 16.695 298.902 16.711 298.777 16.727 cv
298.652 16.738 298.492 16.746 298.305 16.746 cv
298.109 16.746 297.953 16.738 297.828 16.727 cv
297.703 16.711 297.602 16.695 297.527 16.668 cv
297.449 16.645 297.395 16.609 297.367 16.57 cv
297.332 16.531 297.316 16.488 297.32 16.434 cv
297.32 6.18701 li
297.316 6.13702 297.332 6.09003 297.367 6.047 cv
297.395 6.008 297.449 5.97302 297.527 5.94098 cv
297.602 5.914 297.703 5.89502 297.828 5.875 cv
297.953 5.86298 298.109 5.85498 298.305 5.85199 cv
298.492 5.85498 298.652 5.86298 298.777 5.875 cv
298.902 5.89502 299 5.914 299.078 5.94098 cv
299.148 5.97302 299.203 6.008 299.238 6.047 cv
299.266 6.09003 299.281 6.13702 299.285 6.18701 cv
299.285 10.027 li
299.621 9.69897 299.965 9.453 300.316 9.28497 cv
300.664 9.125 301.031 9.04303 301.414 9.039 cv
301.883 9.04303 302.281 9.12097 302.609 9.27301 cv
302.934 9.43402 303.195 9.64502 303.395 9.914 cv
303.594 10.184 303.738 10.5 303.828 10.859 cv
303.914 11.223 303.957 11.66 303.961 12.172 cv
cp
f
315.324 7.45697 mo
315.32 7.617 315.316 7.74597 315.305 7.85199 cv
315.289 7.961 315.266 8.047 315.242 8.10498 cv
315.211 8.16803 315.18 8.21503 315.145 8.242 cv
315.105 8.27698 315.063 8.29303 315.02 8.289 cv
311.723 8.289 li
311.723 11.004 li
314.816 11.004 li
314.859 11.004 314.902 11.02 314.941 11.043 cv
314.977 11.074 315.008 11.117 315.039 11.176 cv
315.066 11.238 315.086 11.32 315.102 11.422 cv
315.109 11.527 315.117 11.656 315.121 11.812 cv
315.117 11.969 315.109 12.102 315.102 12.203 cv
315.086 12.312 315.066 12.398 315.039 12.461 cv
315.008 12.531 314.977 12.578 314.941 12.605 cv
314.902 12.637 314.859 12.652 314.816 12.648 cv
311.723 12.648 li
311.723 16.402 li
311.719 16.461 311.703 16.512 311.676 16.551 cv
311.641 16.598 311.586 16.633 311.508 16.656 cv
311.426 16.687 311.32 16.707 311.191 16.723 cv
311.059 16.738 310.891 16.746 310.695 16.746 cv
310.492 16.746 310.328 16.738 310.199 16.723 cv
310.063 16.707 309.957 16.687 309.883 16.656 cv
309.801 16.633 309.746 16.598 309.715 16.551 cv
309.68 16.512 309.66 16.461 309.664 16.402 cv
309.664 7.26202 li
309.66 7.03497 309.719 6.87097 309.84 6.76599 cv
309.953 6.66803 310.098 6.617 310.273 6.61298 cv
315.02 6.61298 li
315.063 6.617 315.105 6.62903 315.145 6.65601 cv
315.18 6.68701 315.211 6.73401 315.242 6.797 cv
315.266 6.86298 315.289 6.953 315.305 7.05902 cv
315.316 7.172 315.32 7.30499 315.324 7.45697 cv
cp
f
323.664 12.887 mo
323.66 13.484 323.582 14.027 323.43 14.512 cv
323.27 15.004 323.035 15.422 322.719 15.773 cv
322.402 16.125 322.004 16.398 321.527 16.59 cv
321.047 16.781 320.488 16.875 319.852 16.879 cv
319.23 16.875 318.691 16.793 318.238 16.621 cv
317.777 16.453 317.398 16.203 317.102 15.875 cv
316.797 15.551 316.574 15.148 316.43 14.668 cv
316.285 14.191 316.215 13.645 316.215 13.027 cv
316.215 12.437 316.293 11.898 316.449 11.406 cv
316.605 10.918 316.844 10.496 317.164 10.145 cv
317.48 9.797 317.875 9.52301 318.352 9.328 cv
318.824 9.13702 319.383 9.04303 320.023 9.039 cv
320.648 9.04303 321.188 9.125 321.645 9.29303 cv
322.102 9.46503 322.48 9.71503 322.777 10.039 cv
323.074 10.367 323.297 10.77 323.445 11.246 cv
323.59 11.727 323.66 12.273 323.664 12.887 cv
cp
321.645 12.965 mo
321.641 12.629 321.613 12.312 321.563 12.02 cv
321.504 11.734 321.41 11.484 321.285 11.27 cv
321.152 11.059 320.98 10.891 320.77 10.77 cv
320.551 10.652 320.281 10.594 319.953 10.59 cv
319.664 10.594 319.41 10.648 319.191 10.75 cv
318.973 10.859 318.793 11.016 318.652 11.219 cv
318.512 11.426 318.406 11.672 318.336 11.957 cv
318.266 12.25 318.23 12.578 318.23 12.941 cv
318.23 13.289 318.258 13.605 318.316 13.891 cv
318.371 14.184 318.465 14.434 318.594 14.645 cv
318.719 14.859 318.891 15.023 319.113 15.137 cv
319.328 15.258 319.598 15.316 319.922 15.312 cv
320.215 15.316 320.473 15.262 320.695 15.152 cv
320.91 15.047 321.09 14.895 321.23 14.687 cv
321.371 14.488 321.473 14.242 321.543 13.953 cv
321.605 13.668 321.641 13.34 321.645 12.965 cv
cp
f
331.844 16.434 mo
331.84 16.488 331.828 16.531 331.805 16.57 cv
331.777 16.609 331.73 16.645 331.668 16.668 cv
331.602 16.695 331.516 16.711 331.41 16.727 cv
331.305 16.738 331.172 16.746 331.012 16.746 cv
330.836 16.746 330.695 16.738 330.594 16.727 cv
330.484 16.711 330.402 16.695 330.34 16.668 cv
330.277 16.645 330.23 16.609 330.207 16.57 cv
330.176 16.531 330.164 16.488 330.168 16.434 cv
330.168 15.633 li
329.781 16.047 329.391 16.359 328.996 16.566 cv
328.594 16.773 328.184 16.875 327.762 16.879 cv
327.281 16.875 326.879 16.801 326.555 16.645 cv
326.23 16.492 325.969 16.277 325.77 16.008 cv
325.566 15.738 325.422 15.426 325.34 15.066 cv
325.25 14.711 325.207 14.27 325.211 13.738 cv
325.211 9.48401 li
325.207 9.43701 325.223 9.39099 325.254 9.34802 cv
325.281 9.31201 325.332 9.28101 325.41 9.25 cv
325.484 9.22699 325.586 9.20697 325.715 9.19098 cv
325.84 9.18402 325.996 9.17603 326.188 9.172 cv
326.375 9.17603 326.535 9.18402 326.66 9.19098 cv
326.785 9.20697 326.883 9.22699 326.961 9.25 cv
327.031 9.28101 327.086 9.31201 327.121 9.34802 cv
327.148 9.39099 327.164 9.43701 327.168 9.48401 cv
327.168 13.41 li
327.164 13.777 327.188 14.055 327.238 14.246 cv
327.281 14.437 327.352 14.602 327.453 14.738 cv
327.547 14.879 327.672 14.984 327.82 15.059 cv
327.969 15.137 328.141 15.176 328.336 15.172 cv
328.586 15.176 328.836 15.086 329.09 14.898 cv
329.34 14.719 329.609 14.453 329.895 14.105 cv
329.895 9.48401 li
329.895 9.43701 329.906 9.39099 329.938 9.34802 cv
329.961 9.31201 330.016 9.28101 330.094 9.25 cv
330.168 9.22699 330.266 9.20697 330.395 9.19098 cv
330.516 9.18402 330.676 9.17603 330.871 9.172 cv
331.063 9.17603 331.219 9.18402 331.344 9.19098 cv
331.465 9.20697 331.566 9.22699 331.641 9.25 cv
331.711 9.28101 331.762 9.31201 331.797 9.34802 cv
331.824 9.39099 331.84 9.43701 331.844 9.48401 cv
cp
f
338.242 10.129 mo
338.242 10.32 338.234 10.473 338.227 10.59 cv
338.211 10.711 338.195 10.805 338.18 10.871 cv
338.156 10.941 338.129 10.988 338.098 11.012 cv
338.059 11.039 338.016 11.051 337.969 11.051 cv
337.922 11.051 337.875 11.043 337.828 11.023 cv
337.773 11.008 337.715 10.988 337.652 10.965 cv
337.582 10.945 337.512 10.926 337.438 10.906 cv
337.355 10.891 337.27 10.883 337.18 10.879 cv
337.066 10.883 336.957 10.902 336.852 10.945 cv
336.742 10.992 336.629 11.062 336.516 11.152 cv
336.395 11.246 336.273 11.371 336.148 11.523 cv
336.02 11.684 335.883 11.875 335.738 12.102 cv
335.738 16.434 li
335.734 16.488 335.719 16.531 335.691 16.57 cv
335.656 16.609 335.602 16.645 335.531 16.668 cv
335.453 16.695 335.355 16.711 335.23 16.727 cv
335.105 16.738 334.945 16.746 334.758 16.746 cv
334.563 16.746 334.406 16.738 334.281 16.727 cv
334.156 16.711 334.055 16.695 333.98 16.668 cv
333.902 16.645 333.848 16.609 333.82 16.57 cv
333.785 16.531 333.77 16.488 333.773 16.434 cv
333.773 9.48401 li
333.77 9.43701 333.785 9.39099 333.813 9.34802 cv
333.836 9.31201 333.883 9.28101 333.953 9.25 cv
334.02 9.22699 334.105 9.20697 334.215 9.19098 cv
334.32 9.18402 334.453 9.17603 334.617 9.172 cv
334.781 9.17603 334.918 9.18402 335.027 9.19098 cv
335.133 9.20697 335.219 9.22699 335.281 9.25 cv
335.34 9.28101 335.383 9.31201 335.41 9.34802 cv
335.434 9.39099 335.445 9.43701 335.449 9.48401 cv
335.449 10.348 li
335.629 10.09 335.801 9.87903 335.965 9.70697 cv
336.121 9.54303 336.277 9.40601 336.426 9.30499 cv
336.57 9.20697 336.715 9.14099 336.859 9.09802 cv
337.004 9.06201 337.148 9.04303 337.297 9.039 cv
337.363 9.04303 337.438 9.047 337.516 9.05103 cv
337.594 9.06201 337.672 9.07397 337.758 9.09003 cv
337.836 9.10901 337.91 9.12903 337.977 9.15198 cv
338.035 9.17603 338.082 9.203 338.113 9.22699 cv
338.141 9.258 338.16 9.28497 338.176 9.31201 cv
338.188 9.34802 338.199 9.39099 338.211 9.44098 cv
338.219 9.5 338.227 9.58197 338.234 9.68701 cv
338.238 9.797 338.242 9.94501 338.242 10.129 cv
cp
f
350.066 7.45697 mo
350.063 7.61298 350.055 7.742 350.047 7.84399 cv
350.031 7.953 350.012 8.039 349.988 8.10199 cv
349.957 8.16803 349.926 8.21503 349.891 8.242 cv
349.848 8.27698 349.805 8.29303 349.762 8.289 cv
347.238 8.289 li
347.238 16.418 li
347.238 16.473 347.219 16.52 347.188 16.559 cv
347.148 16.602 347.094 16.637 347.02 16.66 cv
346.938 16.687 346.832 16.707 346.703 16.723 cv
346.566 16.738 346.402 16.746 346.207 16.746 cv
346.012 16.746 345.848 16.738 345.715 16.723 cv
345.582 16.707 345.477 16.687 345.398 16.66 cv
345.32 16.637 345.262 16.602 345.23 16.559 cv
345.191 16.52 345.176 16.473 345.18 16.418 cv
345.18 8.289 li
342.656 8.289 li
342.602 8.29303 342.555 8.27698 342.523 8.242 cv
342.484 8.21503 342.453 8.16803 342.43 8.10199 cv
342.398 8.039 342.379 7.953 342.371 7.84399 cv
342.355 7.742 342.352 7.61298 342.352 7.45697 cv
342.352 7.30499 342.355 7.172 342.371 7.05902 cv
342.379 6.953 342.398 6.86298 342.43 6.797 cv
342.453 6.73401 342.484 6.68701 342.523 6.65601 cv
342.555 6.62903 342.602 6.617 342.656 6.61298 cv
349.762 6.61298 li
349.805 6.617 349.848 6.62903 349.891 6.65601 cv
349.926 6.68701 349.957 6.73401 349.988 6.797 cv
350.012 6.86298 350.031 6.953 350.047 7.05902 cv
350.055 7.172 350.063 7.30499 350.066 7.45697 cv
cp
f
357.777 16.434 mo
357.773 16.488 357.758 16.531 357.73 16.57 cv
357.695 16.609 357.645 16.645 357.574 16.668 cv
357.5 16.695 357.398 16.711 357.273 16.727 cv
357.145 16.738 356.988 16.746 356.805 16.746 cv
356.609 16.746 356.449 16.738 356.324 16.727 cv
356.195 16.711 356.094 16.695 356.023 16.668 cv
355.945 16.645 355.895 16.609 355.867 16.57 cv
355.832 16.531 355.816 16.488 355.82 16.434 cv
355.82 12.469 li
355.816 12.133 355.793 11.867 355.746 11.672 cv
355.695 11.48 355.621 11.316 355.531 11.18 cv
355.438 11.043 355.32 10.937 355.172 10.859 cv
355.023 10.785 354.848 10.746 354.652 10.746 cv
354.398 10.746 354.148 10.84 353.895 11.02 cv
353.641 11.203 353.375 11.465 353.102 11.812 cv
353.102 16.434 li
353.098 16.488 353.082 16.531 353.055 16.57 cv
353.02 16.609 352.965 16.645 352.895 16.668 cv
352.816 16.695 352.719 16.711 352.594 16.727 cv
352.469 16.738 352.309 16.746 352.121 16.746 cv
351.926 16.746 351.77 16.738 351.645 16.727 cv
351.52 16.711 351.418 16.695 351.344 16.668 cv
351.266 16.645 351.211 16.609 351.184 16.57 cv
351.148 16.531 351.133 16.488 351.137 16.434 cv
351.137 6.18701 li
351.133 6.13702 351.148 6.09003 351.184 6.047 cv
351.211 6.008 351.266 5.97302 351.344 5.94098 cv
351.418 5.914 351.52 5.89502 351.645 5.875 cv
351.77 5.86298 351.926 5.85498 352.121 5.85199 cv
352.309 5.85498 352.469 5.86298 352.594 5.875 cv
352.719 5.89502 352.816 5.914 352.895 5.94098 cv
352.965 5.97302 353.02 6.008 353.055 6.047 cv
353.082 6.09003 353.098 6.13702 353.102 6.18701 cv
353.102 10.027 li
353.438 9.69897 353.781 9.453 354.133 9.28497 cv
354.48 9.125 354.848 9.04303 355.23 9.039 cv
355.699 9.04303 356.098 9.12097 356.426 9.27301 cv
356.75 9.43402 357.012 9.64502 357.211 9.914 cv
357.41 10.184 357.555 10.5 357.645 10.859 cv
357.73 11.223 357.773 11.66 357.777 12.172 cv
cp
f
364.176 10.129 mo
364.176 10.32 364.168 10.473 364.16 10.59 cv
364.145 10.711 364.129 10.805 364.113 10.871 cv
364.09 10.941 364.063 10.988 364.031 11.012 cv
363.992 11.039 363.949 11.051 363.902 11.051 cv
363.855 11.051 363.809 11.043 363.762 11.023 cv
363.707 11.008 363.648 10.988 363.586 10.965 cv
363.516 10.945 363.445 10.926 363.371 10.906 cv
363.289 10.891 363.203 10.883 363.113 10.879 cv
363 10.883 362.891 10.902 362.785 10.945 cv
362.676 10.992 362.563 11.062 362.449 11.152 cv
362.328 11.246 362.207 11.371 362.082 11.523 cv
361.953 11.684 361.816 11.875 361.672 12.102 cv
361.672 16.434 li
361.668 16.488 361.652 16.531 361.625 16.57 cv
361.59 16.609 361.535 16.645 361.465 16.668 cv
361.387 16.695 361.289 16.711 361.164 16.727 cv
361.039 16.738 360.879 16.746 360.691 16.746 cv
360.496 16.746 360.34 16.738 360.215 16.727 cv
360.09 16.711 359.988 16.695 359.914 16.668 cv
359.836 16.645 359.781 16.609 359.754 16.57 cv
359.719 16.531 359.703 16.488 359.707 16.434 cv
359.707 9.48401 li
359.703 9.43701 359.719 9.39099 359.746 9.34802 cv
359.77 9.31201 359.816 9.28101 359.887 9.25 cv
359.953 9.22699 360.039 9.20697 360.148 9.19098 cv
360.254 9.18402 360.387 9.17603 360.551 9.172 cv
360.715 9.17603 360.852 9.18402 360.961 9.19098 cv
361.066 9.20697 361.152 9.22699 361.215 9.25 cv
361.273 9.28101 361.316 9.31201 361.344 9.34802 cv
361.367 9.39099 361.379 9.43701 361.383 9.48401 cv
361.383 10.348 li
361.563 10.09 361.734 9.87903 361.898 9.70697 cv
362.055 9.54303 362.211 9.40601 362.359 9.30499 cv
362.504 9.20697 362.648 9.14099 362.793 9.09802 cv
362.938 9.06201 363.082 9.04303 363.23 9.039 cv
363.297 9.04303 363.371 9.047 363.449 9.05103 cv
363.527 9.06201 363.605 9.07397 363.691 9.09003 cv
363.77 9.10901 363.844 9.12903 363.91 9.15198 cv
363.969 9.17603 364.016 9.203 364.047 9.22699 cv
364.074 9.258 364.094 9.28497 364.109 9.31201 cv
364.121 9.34802 364.133 9.39099 364.145 9.44098 cv
364.152 9.5 364.16 9.58197 364.168 9.68701 cv
364.172 9.797 364.176 9.94501 364.176 10.129 cv
cp
f
371.621 12.758 mo
371.617 12.996 371.566 13.172 371.461 13.285 cv
371.352 13.402 371.203 13.461 371.023 13.457 cv
366.789 13.457 li
366.785 13.758 366.82 14.027 366.895 14.266 cv
366.961 14.508 367.074 14.711 367.23 14.879 cv
367.383 15.051 367.578 15.18 367.82 15.266 cv
368.059 15.355 368.348 15.398 368.691 15.398 cv
369.031 15.398 369.332 15.375 369.594 15.324 cv
369.852 15.277 370.078 15.223 370.27 15.16 cv
370.457 15.102 370.613 15.047 370.742 14.996 cv
370.863 14.949 370.965 14.926 371.047 14.922 cv
371.09 14.926 371.129 14.934 371.164 14.949 cv
371.191 14.969 371.219 15 371.238 15.047 cv
371.258 15.094 371.27 15.16 371.281 15.246 cv
371.285 15.332 371.289 15.441 371.293 15.57 cv
371.289 15.687 371.289 15.785 371.285 15.863 cv
371.277 15.945 371.27 16.012 371.262 16.066 cv
371.25 16.125 371.234 16.176 371.215 16.211 cv
371.195 16.254 371.168 16.289 371.137 16.324 cv
371.102 16.363 371.008 16.414 370.859 16.473 cv
370.703 16.539 370.512 16.602 370.281 16.656 cv
370.043 16.719 369.773 16.766 369.477 16.812 cv
369.172 16.852 368.852 16.875 368.512 16.879 cv
367.891 16.875 367.348 16.801 366.887 16.645 cv
366.418 16.492 366.031 16.254 365.723 15.937 cv
365.406 15.621 365.172 15.223 365.023 14.738 cv
364.867 14.258 364.793 13.691 364.797 13.035 cv
364.793 12.422 364.871 11.863 365.035 11.367 cv
365.191 10.871 365.426 10.453 365.738 10.105 cv
366.043 9.76202 366.418 9.49597 366.855 9.31201 cv
367.293 9.133 367.785 9.04303 368.34 9.039 cv
368.918 9.04303 369.418 9.12903 369.832 9.297 cv
370.246 9.47302 370.582 9.711 370.848 10.012 cv
371.109 10.316 371.305 10.676 371.434 11.09 cv
371.555 11.508 371.617 11.957 371.621 12.445 cv
cp
369.719 12.195 mo
369.73 11.645 369.621 11.211 369.387 10.898 cv
369.152 10.586 368.785 10.43 368.293 10.426 cv
368.043 10.43 367.828 10.477 367.645 10.566 cv
367.457 10.664 367.305 10.789 367.184 10.945 cv
367.059 11.105 366.965 11.293 366.902 11.508 cv
366.836 11.723 366.797 11.953 366.789 12.195 cv
cp
f
379.152 16.457 mo
379.148 16.535 379.121 16.59 379.074 16.629 cv
379.02 16.672 378.938 16.699 378.828 16.719 cv
378.711 16.734 378.547 16.746 378.332 16.746 cv
378.094 16.746 377.922 16.734 377.82 16.719 cv
377.711 16.699 377.637 16.672 377.598 16.629 cv
377.551 16.59 377.531 16.535 377.531 16.457 cv
377.531 15.906 li
377.242 16.215 376.914 16.453 376.551 16.621 cv
376.184 16.793 375.777 16.875 375.332 16.879 cv
374.961 16.875 374.621 16.828 374.313 16.734 cv
374.004 16.641 373.738 16.5 373.512 16.305 cv
373.285 16.117 373.109 15.883 372.984 15.602 cv
372.859 15.324 372.797 14.996 372.801 14.617 cv
372.797 14.219 372.875 13.867 373.035 13.562 cv
373.191 13.266 373.43 13.02 373.746 12.824 cv
374.059 12.633 374.449 12.488 374.918 12.391 cv
375.387 12.301 375.93 12.254 376.547 12.25 cv
377.227 12.25 li
377.227 11.828 li
377.227 11.613 377.203 11.422 377.16 11.258 cv
377.113 11.098 377.039 10.961 376.941 10.848 cv
376.836 10.742 376.703 10.66 376.535 10.605 cv
376.363 10.555 376.152 10.531 375.91 10.527 cv
375.578 10.531 375.285 10.566 375.031 10.637 cv
374.77 10.711 374.543 10.793 374.348 10.879 cv
374.148 10.973 373.984 11.051 373.855 11.121 cv
373.719 11.195 373.609 11.234 373.531 11.23 cv
373.469 11.234 373.418 11.215 373.379 11.176 cv
373.332 11.141 373.297 11.09 373.27 11.02 cv
373.238 10.957 373.215 10.871 373.203 10.77 cv
373.184 10.672 373.176 10.562 373.18 10.441 cv
373.176 10.281 373.191 10.156 373.219 10.059 cv
373.242 9.96899 373.289 9.883 373.367 9.80499 cv
373.438 9.72998 373.566 9.64801 373.75 9.55902 cv
373.93 9.46899 374.141 9.383 374.387 9.30499 cv
374.629 9.22699 374.898 9.164 375.188 9.11298 cv
375.477 9.06598 375.773 9.04303 376.082 9.039 cv
376.625 9.04303 377.09 9.09399 377.477 9.19897 cv
377.863 9.30902 378.184 9.47302 378.434 9.69098 cv
378.684 9.90997 378.863 10.195 378.98 10.543 cv
379.09 10.895 379.148 11.309 379.152 11.781 cv
cp
377.227 13.48 mo
376.477 13.48 li
376.16 13.484 375.891 13.508 375.668 13.551 cv
375.441 13.602 375.258 13.672 375.121 13.762 cv
374.977 13.859 374.875 13.973 374.813 14.102 cv
374.746 14.238 374.711 14.387 374.715 14.555 cv
374.711 14.848 374.805 15.078 374.992 15.242 cv
375.176 15.41 375.434 15.492 375.762 15.492 cv
376.035 15.492 376.285 15.422 376.52 15.281 cv
376.746 15.141 376.984 14.937 377.227 14.664 cv
cp
f
387.738 16.434 mo
387.734 16.496 387.723 16.543 387.699 16.578 cv
387.672 16.621 387.625 16.652 387.566 16.676 cv
387.5 16.699 387.418 16.715 387.313 16.73 cv
387.207 16.738 387.074 16.746 386.922 16.746 cv
386.75 16.746 386.617 16.738 386.516 16.73 cv
386.41 16.715 386.324 16.699 386.262 16.676 cv
386.195 16.652 386.148 16.621 386.121 16.578 cv
386.09 16.543 386.074 16.496 386.078 16.434 cv
386.078 15.664 li
385.719 16.051 385.344 16.348 384.953 16.559 cv
384.555 16.77 384.121 16.875 383.648 16.879 cv
383.113 16.875 382.664 16.773 382.301 16.57 cv
381.934 16.367 381.637 16.094 381.406 15.742 cv
381.172 15.398 381.004 14.992 380.902 14.523 cv
380.801 14.062 380.75 13.57 380.75 13.051 cv
380.75 12.437 380.813 11.883 380.945 11.387 cv
381.074 10.895 381.27 10.473 381.527 10.125 cv
381.781 9.77698 382.098 9.51202 382.477 9.32001 cv
382.855 9.13702 383.293 9.04303 383.789 9.039 cv
384.176 9.04303 384.527 9.12097 384.848 9.27698 cv
385.16 9.43701 385.477 9.66803 385.789 9.97302 cv
385.789 6.211 li
385.789 6.15997 385.801 6.11298 385.832 6.07001 cv
385.855 6.03101 385.91 5.99597 385.988 5.96503 cv
386.063 5.93701 386.16 5.91803 386.289 5.89801 cv
386.41 5.88702 386.57 5.87903 386.766 5.875 cv
386.957 5.87903 387.113 5.88702 387.238 5.89801 cv
387.359 5.91803 387.461 5.93701 387.535 5.96503 cv
387.605 5.99597 387.656 6.03101 387.691 6.07001 cv
387.719 6.11298 387.734 6.15997 387.738 6.211 cv
cp
385.789 11.789 mo
385.508 11.437 385.238 11.168 384.984 10.98 cv
384.723 10.793 384.453 10.699 384.176 10.699 cv
383.922 10.699 383.703 10.766 383.52 10.891 cv
383.332 11.023 383.184 11.191 383.074 11.402 cv
382.961 11.613 382.879 11.852 382.824 12.113 cv
382.77 12.379 382.742 12.648 382.742 12.918 cv
382.742 13.215 382.766 13.496 382.813 13.77 cv
382.859 14.047 382.934 14.293 383.043 14.508 cv
383.145 14.723 383.289 14.895 383.469 15.023 cv
383.645 15.156 383.867 15.223 384.137 15.219 cv
384.27 15.223 384.398 15.203 384.531 15.16 cv
384.656 15.125 384.789 15.062 384.922 14.969 cv
385.055 14.883 385.191 14.766 385.332 14.621 cv
385.473 14.48 385.625 14.305 385.789 14.098 cv
cp
f
394.559 14.469 mo
394.555 14.867 394.48 15.215 394.336 15.516 cv
394.188 15.816 393.98 16.07 393.711 16.27 cv
393.438 16.477 393.117 16.625 392.75 16.727 cv
392.383 16.824 391.98 16.875 391.551 16.879 cv
391.285 16.875 391.039 16.855 390.805 16.82 cv
390.57 16.777 390.359 16.73 390.172 16.672 cv
389.984 16.613 389.828 16.551 389.703 16.488 cv
389.578 16.426 389.484 16.367 389.43 16.312 cv
389.371 16.258 389.328 16.176 389.301 16.059 cv
389.266 15.945 389.25 15.77 389.254 15.539 cv
389.25 15.391 389.258 15.27 389.27 15.176 cv
389.277 15.086 389.293 15.016 389.316 14.957 cv
389.336 14.906 389.359 14.867 389.395 14.848 cv
389.422 14.832 389.461 14.824 389.508 14.82 cv
389.563 14.824 389.648 14.855 389.762 14.918 cv
389.871 14.984 390.008 15.059 390.18 15.133 cv
390.344 15.215 390.539 15.285 390.758 15.352 cv
390.977 15.422 391.227 15.457 391.512 15.453 cv
391.688 15.457 391.844 15.437 391.984 15.398 cv
392.117 15.363 392.238 15.312 392.344 15.242 cv
392.441 15.176 392.516 15.09 392.57 14.984 cv
392.617 14.883 392.645 14.762 392.648 14.625 cv
392.645 14.469 392.598 14.336 392.504 14.227 cv
392.41 14.117 392.281 14.02 392.125 13.934 cv
391.961 13.852 391.781 13.773 391.586 13.699 cv
391.383 13.629 391.18 13.551 390.969 13.457 cv
390.758 13.371 390.551 13.27 390.355 13.152 cv
390.152 13.043 389.973 12.902 389.816 12.734 cv
389.652 12.57 389.527 12.371 389.434 12.133 cv
389.34 11.902 389.293 11.621 389.293 11.289 cv
389.293 10.961 389.355 10.656 389.484 10.375 cv
389.613 10.102 389.801 9.86298 390.047 9.664 cv
390.289 9.46899 390.586 9.31598 390.938 9.203 cv
391.285 9.09802 391.68 9.04303 392.121 9.039 cv
392.336 9.04303 392.547 9.05902 392.754 9.086 cv
392.957 9.12097 393.145 9.15997 393.313 9.203 cv
393.477 9.25403 393.617 9.30499 393.734 9.35498 cv
393.848 9.414 393.93 9.461 393.98 9.49597 cv
394.027 9.539 394.063 9.578 394.086 9.61298 cv
394.105 9.65601 394.117 9.703 394.129 9.75403 cv
394.137 9.80902 394.148 9.875 394.156 9.953 cv
394.164 10.039 394.168 10.137 394.168 10.254 cv
394.168 10.395 394.164 10.512 394.156 10.598 cv
394.148 10.691 394.133 10.762 394.117 10.809 cv
394.098 10.863 394.074 10.898 394.047 10.914 cv
394.012 10.937 393.977 10.945 393.938 10.941 cv
393.887 10.945 393.813 10.918 393.719 10.859 cv
393.617 10.809 393.496 10.75 393.348 10.684 cv
393.199 10.625 393.027 10.566 392.832 10.508 cv
392.637 10.457 392.414 10.43 392.168 10.426 cv
391.988 10.43 391.836 10.449 391.707 10.48 cv
391.574 10.52 391.465 10.57 391.387 10.637 cv
391.301 10.707 391.238 10.785 391.199 10.875 cv
391.152 10.969 391.133 11.066 391.137 11.168 cv
391.133 11.328 391.184 11.465 391.285 11.57 cv
391.383 11.684 391.512 11.777 391.676 11.859 cv
391.836 11.945 392.02 12.023 392.227 12.094 cv
392.43 12.168 392.637 12.25 392.848 12.332 cv
393.055 12.422 393.262 12.52 393.473 12.633 cv
393.676 12.746 393.859 12.887 394.02 13.051 cv
394.18 13.219 394.309 13.418 394.41 13.648 cv
394.504 13.883 394.555 14.156 394.559 14.469 cv
cp
f
403.305 12.781 mo
403.301 13.082 403.273 13.293 403.219 13.41 cv
403.16 13.535 403.07 13.594 402.945 13.59 cv
399.703 13.59 li
399.574 13.594 399.48 13.531 399.426 13.406 cv
399.363 13.285 399.336 13.078 399.34 12.781 cv
399.336 12.492 399.363 12.285 399.426 12.164 cv
399.48 12.047 399.574 11.988 399.703 11.984 cv
402.945 11.984 li
403.008 11.988 403.059 12 403.105 12.023 cv
403.145 12.051 403.184 12.098 403.219 12.156 cv
403.246 12.223 403.27 12.305 403.285 12.406 cv
403.297 12.512 403.301 12.637 403.305 12.781 cv
cp
f
414.063 15.844 mo
414.059 16 414.055 16.133 414.043 16.234 cv
414.027 16.344 414.008 16.43 413.984 16.5 cv
413.957 16.57 413.922 16.621 413.887 16.652 cv
413.844 16.684 413.801 16.699 413.75 16.699 cv
409.129 16.699 li
408.953 16.699 408.809 16.648 408.695 16.547 cv
408.574 16.445 408.516 16.281 408.52 16.051 cv
408.52 6.89502 li
408.516 6.84802 408.535 6.80103 408.57 6.75403 cv
408.602 6.71503 408.656 6.67999 408.738 6.65198 cv
408.813 6.62903 408.918 6.60901 409.055 6.59003 cv
409.184 6.578 409.348 6.57001 409.551 6.56598 cv
409.746 6.57001 409.914 6.578 410.047 6.59003 cv
410.176 6.60901 410.277 6.62903 410.359 6.65198 cv
410.434 6.67999 410.492 6.71503 410.527 6.75403 cv
410.559 6.80103 410.574 6.84802 410.578 6.89502 cv
410.578 15.008 li
413.75 15.008 li
413.801 15.012 413.844 15.027 413.887 15.051 cv
413.922 15.082 413.957 15.129 413.984 15.191 cv
414.008 15.262 414.027 15.348 414.043 15.449 cv
414.055 15.559 414.059 15.687 414.063 15.844 cv
cp
f
422.184 12.887 mo
422.18 13.484 422.102 14.027 421.949 14.512 cv
421.789 15.004 421.555 15.422 421.238 15.773 cv
420.922 16.125 420.523 16.398 420.047 16.59 cv
419.566 16.781 419.008 16.875 418.371 16.879 cv
417.75 16.875 417.211 16.793 416.758 16.621 cv
416.297 16.453 415.918 16.203 415.621 15.875 cv
415.316 15.551 415.094 15.148 414.949 14.668 cv
414.805 14.191 414.734 13.645 414.734 13.027 cv
414.734 12.437 414.813 11.898 414.969 11.406 cv
415.125 10.918 415.363 10.496 415.684 10.145 cv
416 9.797 416.395 9.52301 416.871 9.328 cv
417.344 9.13702 417.902 9.04303 418.543 9.039 cv
419.168 9.04303 419.707 9.125 420.164 9.29303 cv
420.621 9.46503 421 9.71503 421.297 10.039 cv
421.594 10.367 421.816 10.77 421.965 11.246 cv
422.109 11.727 422.18 12.273 422.184 12.887 cv
cp
420.164 12.965 mo
420.16 12.629 420.133 12.312 420.082 12.02 cv
420.023 11.734 419.93 11.484 419.805 11.27 cv
419.672 11.059 419.5 10.891 419.289 10.77 cv
419.07 10.652 418.801 10.594 418.473 10.59 cv
418.184 10.594 417.93 10.648 417.711 10.75 cv
417.492 10.859 417.313 11.016 417.172 11.219 cv
417.031 11.426 416.926 11.672 416.855 11.957 cv
416.785 12.25 416.75 12.578 416.75 12.941 cv
416.75 13.289 416.777 13.605 416.836 13.891 cv
416.891 14.184 416.984 14.434 417.113 14.645 cv
417.238 14.859 417.41 15.023 417.633 15.137 cv
417.848 15.258 418.117 15.316 418.441 15.312 cv
418.734 15.316 418.992 15.262 419.215 15.152 cv
419.43 15.047 419.609 14.895 419.75 14.687 cv
419.891 14.488 419.992 14.242 420.063 13.953 cv
420.125 13.668 420.16 13.34 420.164 12.965 cv
cp
f
429 15.328 mo
428.996 15.465 428.992 15.578 428.988 15.668 cv
428.977 15.762 428.969 15.84 428.957 15.898 cv
428.941 15.961 428.926 16.012 428.91 16.047 cv
428.891 16.09 428.848 16.137 428.789 16.195 cv
428.723 16.258 428.617 16.332 428.469 16.414 cv
428.316 16.504 428.145 16.582 427.953 16.645 cv
427.762 16.715 427.555 16.766 427.328 16.809 cv
427.102 16.848 426.867 16.867 426.633 16.871 cv
426.094 16.867 425.621 16.789 425.207 16.621 cv
424.793 16.457 424.445 16.211 424.168 15.887 cv
423.883 15.562 423.672 15.168 423.531 14.699 cv
423.391 14.234 423.32 13.695 423.32 13.09 cv
423.32 12.395 423.406 11.797 423.578 11.289 cv
423.75 10.785 423.992 10.363 424.309 10.031 cv
424.617 9.69897 424.984 9.453 425.414 9.289 cv
425.836 9.12903 426.305 9.047 426.816 9.047 cv
427.023 9.047 427.227 9.06598 427.43 9.10199 cv
427.625 9.14099 427.813 9.19098 427.988 9.25 cv
428.16 9.31598 428.316 9.38702 428.457 9.461 cv
428.594 9.54303 428.691 9.60901 428.75 9.664 cv
428.805 9.72302 428.844 9.77002 428.871 9.80499 cv
428.891 9.84802 428.91 9.89801 428.926 9.95697 cv
428.938 10.023 428.949 10.102 428.957 10.187 cv
428.965 10.281 428.969 10.391 428.969 10.52 cv
428.969 10.824 428.941 11.035 428.891 11.156 cv
428.836 11.277 428.77 11.34 428.688 11.336 cv
428.598 11.34 428.504 11.305 428.406 11.23 cv
428.305 11.16 428.188 11.078 428.055 10.988 cv
427.922 10.902 427.762 10.82 427.574 10.746 cv
427.387 10.676 427.16 10.641 426.902 10.637 cv
426.391 10.641 426.004 10.836 425.734 11.227 cv
425.461 11.617 425.324 12.191 425.328 12.949 cv
425.324 13.324 425.359 13.656 425.43 13.941 cv
425.496 14.227 425.594 14.465 425.73 14.656 cv
425.859 14.852 426.027 14.996 426.23 15.09 cv
426.43 15.187 426.66 15.234 426.926 15.234 cv
427.191 15.234 427.426 15.195 427.625 15.113 cv
427.816 15.035 427.984 14.945 428.133 14.844 cv
428.273 14.746 428.398 14.656 428.5 14.574 cv
428.598 14.496 428.68 14.457 428.75 14.453 cv
428.793 14.457 428.832 14.469 428.867 14.492 cv
428.895 14.52 428.918 14.566 428.941 14.637 cv
428.957 14.707 428.973 14.797 428.984 14.906 cv
428.992 15.016 428.996 15.156 429 15.328 cv
cp
f
436.289 16.457 mo
436.285 16.535 436.258 16.59 436.211 16.629 cv
436.156 16.672 436.074 16.699 435.965 16.719 cv
435.848 16.734 435.684 16.746 435.469 16.746 cv
435.23 16.746 435.059 16.734 434.957 16.719 cv
434.848 16.699 434.773 16.672 434.734 16.629 cv
434.688 16.59 434.668 16.535 434.668 16.457 cv
434.668 15.906 li
434.379 16.215 434.051 16.453 433.688 16.621 cv
433.32 16.793 432.914 16.875 432.469 16.879 cv
432.098 16.875 431.758 16.828 431.449 16.734 cv
431.141 16.641 430.875 16.5 430.648 16.305 cv
430.422 16.117 430.246 15.883 430.121 15.602 cv
429.996 15.324 429.934 14.996 429.938 14.617 cv
429.934 14.219 430.012 13.867 430.172 13.562 cv
430.328 13.266 430.566 13.02 430.883 12.824 cv
431.195 12.633 431.586 12.488 432.055 12.391 cv
432.523 12.301 433.066 12.254 433.684 12.25 cv
434.363 12.25 li
434.363 11.828 li
434.363 11.613 434.34 11.422 434.297 11.258 cv
434.25 11.098 434.176 10.961 434.078 10.848 cv
433.973 10.742 433.84 10.66 433.672 10.605 cv
433.5 10.555 433.289 10.531 433.047 10.527 cv
432.715 10.531 432.422 10.566 432.168 10.637 cv
431.906 10.711 431.68 10.793 431.484 10.879 cv
431.285 10.973 431.121 11.051 430.992 11.121 cv
430.855 11.195 430.746 11.234 430.668 11.23 cv
430.605 11.234 430.555 11.215 430.516 11.176 cv
430.469 11.141 430.434 11.09 430.406 11.02 cv
430.375 10.957 430.352 10.871 430.34 10.77 cv
430.32 10.672 430.313 10.562 430.316 10.441 cv
430.313 10.281 430.328 10.156 430.355 10.059 cv
430.379 9.96899 430.426 9.883 430.504 9.80499 cv
430.574 9.72998 430.703 9.64801 430.887 9.55902 cv
431.066 9.46899 431.277 9.383 431.523 9.30499 cv
431.766 9.22699 432.035 9.164 432.324 9.11298 cv
432.613 9.06598 432.91 9.04303 433.219 9.039 cv
433.762 9.04303 434.227 9.09399 434.613 9.19897 cv
435 9.30902 435.32 9.47302 435.57 9.69098 cv
435.82 9.90997 436 10.195 436.117 10.543 cv
436.227 10.895 436.285 11.309 436.289 11.781 cv
cp
434.363 13.48 mo
433.613 13.48 li
433.297 13.484 433.027 13.508 432.805 13.551 cv
432.578 13.602 432.395 13.672 432.258 13.762 cv
432.113 13.859 432.012 13.973 431.949 14.102 cv
431.883 14.238 431.848 14.387 431.852 14.555 cv
431.848 14.848 431.941 15.078 432.129 15.242 cv
432.313 15.41 432.57 15.492 432.898 15.492 cv
433.172 15.492 433.422 15.422 433.656 15.281 cv
433.883 15.141 434.121 14.937 434.363 14.664 cv
cp
f
440.211 16.434 mo
440.207 16.488 440.191 16.531 440.164 16.57 cv
440.129 16.609 440.074 16.645 440.004 16.668 cv
439.926 16.695 439.828 16.711 439.703 16.727 cv
439.578 16.738 439.418 16.746 439.23 16.746 cv
439.035 16.746 438.879 16.738 438.754 16.727 cv
438.629 16.711 438.527 16.695 438.453 16.668 cv
438.375 16.645 438.32 16.609 438.293 16.57 cv
438.258 16.531 438.242 16.488 438.246 16.434 cv
438.246 6.18701 li
438.242 6.13702 438.258 6.09003 438.293 6.047 cv
438.32 6.008 438.375 5.97302 438.453 5.94098 cv
438.527 5.914 438.629 5.89502 438.754 5.875 cv
438.879 5.86298 439.035 5.85498 439.23 5.85199 cv
439.418 5.85498 439.578 5.86298 439.703 5.875 cv
439.828 5.89502 439.926 5.914 440.004 5.94098 cv
440.074 5.97302 440.129 6.008 440.164 6.047 cv
440.191 6.09003 440.207 6.13702 440.211 6.18701 cv
cp
f
457.699 16.418 mo
457.695 16.473 457.684 16.52 457.656 16.559 cv
457.625 16.602 457.57 16.637 457.5 16.66 cv
457.422 16.687 457.324 16.707 457.199 16.723 cv
457.074 16.738 456.914 16.746 456.723 16.746 cv
456.535 16.746 456.379 16.738 456.258 16.723 cv
456.129 16.707 456.031 16.687 455.961 16.66 cv
455.887 16.637 455.836 16.602 455.805 16.559 cv
455.773 16.52 455.758 16.473 455.758 16.418 cv
455.758 8.211 li
455.742 8.211 li
452.82 16.41 li
452.797 16.48 452.762 16.535 452.719 16.578 cv
452.668 16.625 452.605 16.66 452.527 16.684 cv
452.445 16.711 452.344 16.727 452.219 16.734 cv
452.094 16.742 451.941 16.746 451.77 16.746 cv
451.59 16.746 451.441 16.738 451.316 16.727 cv
451.191 16.711 451.086 16.691 451.008 16.664 cv
450.922 16.637 450.859 16.602 450.816 16.559 cv
450.766 16.52 450.734 16.473 450.723 16.41 cv
447.902 8.211 li
447.887 8.211 li
447.887 16.418 li
447.883 16.473 447.867 16.52 447.844 16.559 cv
447.813 16.602 447.762 16.637 447.684 16.66 cv
447.605 16.687 447.504 16.707 447.383 16.723 cv
447.258 16.738 447.102 16.746 446.914 16.746 cv
446.723 16.746 446.566 16.738 446.445 16.723 cv
446.316 16.707 446.215 16.687 446.145 16.66 cv
446.066 16.637 446.016 16.602 445.988 16.559 cv
445.957 16.52 445.941 16.473 445.945 16.418 cv
445.945 7.43402 li
445.941 7.172 446.012 6.96899 446.156 6.82397 cv
446.293 6.68701 446.48 6.617 446.719 6.61298 cv
448.059 6.61298 li
448.297 6.617 448.5 6.63702 448.672 6.672 cv
448.84 6.71503 448.988 6.77698 449.117 6.867 cv
449.238 6.961 449.344 7.08197 449.43 7.22699 cv
449.512 7.37903 449.582 7.56201 449.648 7.77698 cv
451.832 13.785 li
451.863 13.785 li
454.121 7.79303 li
454.188 7.57397 454.262 7.39099 454.344 7.23798 cv
454.422 7.09003 454.516 6.96899 454.625 6.87097 cv
454.73 6.78101 454.855 6.71503 455 6.672 cv
455.145 6.63702 455.313 6.617 455.508 6.61298 cv
456.887 6.61298 li
457.023 6.617 457.145 6.633 457.25 6.66803 cv
457.348 6.70697 457.43 6.76202 457.5 6.828 cv
457.563 6.90198 457.613 6.98798 457.648 7.086 cv
457.68 7.19098 457.695 7.30902 457.699 7.43402 cv
cp
f
466.809 12.887 mo
466.805 13.484 466.727 14.027 466.574 14.512 cv
466.414 15.004 466.18 15.422 465.863 15.773 cv
465.547 16.125 465.148 16.398 464.672 16.59 cv
464.191 16.781 463.633 16.875 462.996 16.879 cv
462.375 16.875 461.836 16.793 461.383 16.621 cv
460.922 16.453 460.543 16.203 460.246 15.875 cv
459.941 15.551 459.719 15.148 459.574 14.668 cv
459.43 14.191 459.359 13.645 459.359 13.027 cv
459.359 12.437 459.438 11.898 459.594 11.406 cv
459.75 10.918 459.988 10.496 460.309 10.145 cv
460.625 9.797 461.02 9.52301 461.496 9.328 cv
461.969 9.13702 462.527 9.04303 463.168 9.039 cv
463.793 9.04303 464.332 9.125 464.789 9.29303 cv
465.246 9.46503 465.625 9.71503 465.922 10.039 cv
466.219 10.367 466.441 10.77 466.59 11.246 cv
466.734 11.727 466.805 12.273 466.809 12.887 cv
cp
464.789 12.965 mo
464.785 12.629 464.758 12.312 464.707 12.02 cv
464.648 11.734 464.555 11.484 464.43 11.27 cv
464.297 11.059 464.125 10.891 463.914 10.77 cv
463.695 10.652 463.426 10.594 463.098 10.59 cv
462.809 10.594 462.555 10.648 462.336 10.75 cv
462.117 10.859 461.938 11.016 461.797 11.219 cv
461.656 11.426 461.551 11.672 461.48 11.957 cv
461.41 12.25 461.375 12.578 461.375 12.941 cv
461.375 13.289 461.402 13.605 461.461 13.891 cv
461.516 14.184 461.609 14.434 461.738 14.645 cv
461.863 14.859 462.035 15.023 462.258 15.137 cv
462.473 15.258 462.742 15.316 463.066 15.312 cv
463.359 15.316 463.617 15.262 463.84 15.152 cv
464.055 15.047 464.234 14.895 464.375 14.687 cv
464.516 14.488 464.617 14.242 464.688 13.953 cv
464.75 13.668 464.785 13.34 464.789 12.965 cv
cp
f
474.957 16.434 mo
474.953 16.496 474.941 16.543 474.918 16.578 cv
474.891 16.621 474.844 16.652 474.785 16.676 cv
474.719 16.699 474.637 16.715 474.531 16.73 cv
474.426 16.738 474.293 16.746 474.141 16.746 cv
473.969 16.746 473.836 16.738 473.734 16.73 cv
473.629 16.715 473.543 16.699 473.48 16.676 cv
473.414 16.652 473.367 16.621 473.34 16.578 cv
473.309 16.543 473.293 16.496 473.297 16.434 cv
473.297 15.664 li
472.938 16.051 472.563 16.348 472.172 16.559 cv
471.773 16.77 471.34 16.875 470.867 16.879 cv
470.332 16.875 469.883 16.773 469.52 16.57 cv
469.152 16.367 468.855 16.094 468.625 15.742 cv
468.391 15.398 468.223 14.992 468.121 14.523 cv
468.02 14.062 467.969 13.57 467.969 13.051 cv
467.969 12.437 468.031 11.883 468.164 11.387 cv
468.293 10.895 468.488 10.473 468.746 10.125 cv
469 9.77698 469.316 9.51202 469.695 9.32001 cv
470.074 9.13702 470.512 9.04303 471.008 9.039 cv
471.395 9.04303 471.746 9.12097 472.066 9.27698 cv
472.379 9.43701 472.695 9.66803 473.008 9.97302 cv
473.008 6.211 li
473.008 6.15997 473.02 6.11298 473.051 6.07001 cv
473.074 6.03101 473.129 5.99597 473.207 5.96503 cv
473.281 5.93701 473.379 5.91803 473.508 5.89801 cv
473.629 5.88702 473.789 5.87903 473.984 5.875 cv
474.176 5.87903 474.332 5.88702 474.457 5.89801 cv
474.578 5.91803 474.68 5.93701 474.754 5.96503 cv
474.824 5.99597 474.875 6.03101 474.91 6.07001 cv
474.938 6.11298 474.953 6.15997 474.957 6.211 cv
cp
473.008 11.789 mo
472.727 11.437 472.457 11.168 472.203 10.98 cv
471.941 10.793 471.672 10.699 471.395 10.699 cv
471.141 10.699 470.922 10.766 470.738 10.891 cv
470.551 11.023 470.402 11.191 470.293 11.402 cv
470.18 11.613 470.098 11.852 470.043 12.113 cv
469.988 12.379 469.961 12.648 469.961 12.918 cv
469.961 13.215 469.984 13.496 470.031 13.77 cv
470.078 14.047 470.152 14.293 470.262 14.508 cv
470.363 14.723 470.508 14.895 470.688 15.023 cv
470.863 15.156 471.086 15.223 471.355 15.219 cv
471.488 15.223 471.617 15.203 471.75 15.16 cv
471.875 15.125 472.008 15.062 472.141 14.969 cv
472.273 14.883 472.41 14.766 472.551 14.621 cv
472.691 14.48 472.844 14.305 473.008 14.098 cv
cp
f
483.355 12.758 mo
483.352 12.996 483.301 13.172 483.195 13.285 cv
483.086 13.402 482.938 13.461 482.758 13.457 cv
478.523 13.457 li
478.52 13.758 478.555 14.027 478.629 14.266 cv
478.695 14.508 478.809 14.711 478.965 14.879 cv
479.117 15.051 479.313 15.18 479.555 15.266 cv
479.793 15.355 480.082 15.398 480.426 15.398 cv
480.766 15.398 481.066 15.375 481.328 15.324 cv
481.586 15.277 481.813 15.223 482.004 15.16 cv
482.191 15.102 482.348 15.047 482.477 14.996 cv
482.598 14.949 482.699 14.926 482.781 14.922 cv
482.824 14.926 482.863 14.934 482.898 14.949 cv
482.926 14.969 482.953 15 482.973 15.047 cv
482.992 15.094 483.004 15.16 483.016 15.246 cv
483.02 15.332 483.023 15.441 483.027 15.57 cv
483.023 15.687 483.023 15.785 483.02 15.863 cv
483.012 15.945 483.004 16.012 482.996 16.066 cv
482.984 16.125 482.969 16.176 482.949 16.211 cv
482.93 16.254 482.902 16.289 482.871 16.324 cv
482.836 16.363 482.742 16.414 482.594 16.473 cv
482.438 16.539 482.246 16.602 482.016 16.656 cv
481.777 16.719 481.508 16.766 481.211 16.812 cv
480.906 16.852 480.586 16.875 480.246 16.879 cv
479.625 16.875 479.082 16.801 478.621 16.645 cv
478.152 16.492 477.766 16.254 477.457 15.937 cv
477.141 15.621 476.906 15.223 476.758 14.738 cv
476.602 14.258 476.527 13.691 476.531 13.035 cv
476.527 12.422 476.605 11.863 476.77 11.367 cv
476.926 10.871 477.16 10.453 477.473 10.105 cv
477.777 9.76202 478.152 9.49597 478.59 9.31201 cv
479.027 9.133 479.52 9.04303 480.074 9.039 cv
480.652 9.04303 481.152 9.12903 481.566 9.297 cv
481.98 9.47302 482.316 9.711 482.582 10.012 cv
482.844 10.316 483.039 10.676 483.168 11.09 cv
483.289 11.508 483.352 11.957 483.355 12.445 cv
cp
481.453 12.195 mo
481.465 11.645 481.355 11.211 481.121 10.898 cv
480.887 10.586 480.52 10.43 480.027 10.426 cv
479.777 10.43 479.563 10.477 479.379 10.566 cv
479.191 10.664 479.039 10.789 478.918 10.945 cv
478.793 11.105 478.699 11.293 478.637 11.508 cv
478.57 11.723 478.531 11.953 478.523 12.195 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
