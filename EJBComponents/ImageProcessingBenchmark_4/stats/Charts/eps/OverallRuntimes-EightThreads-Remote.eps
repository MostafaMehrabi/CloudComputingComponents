%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-EightThreads-Remote.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:43:42 PM
%%BoundingBox: 0 0 630 527
%%HiResBoundingBox: 0 0 629.0400 526.6800
%%CropBox: 0 0 629.0400 526.6800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -526.68 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 526.68 li
629.04 526.68 li
629.04 0 li
cp
clp
0 0 mo
629.039 0 li
629.039 526.68 li
0 526.68 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.398 473.16 mo
613.68 473.16 li
53.398 456 mo
613.68 456 li
53.398 421.801 mo
613.68 421.801 li
53.398 404.641 mo
613.68 404.641 li
53.398 370.441 mo
613.68 370.441 li
53.398 353.281 mo
613.68 353.281 li
53.398 319.078 mo
613.68 319.078 li
53.398 301.922 mo
613.68 301.922 li
53.398 267.719 mo
613.68 267.719 li
53.398 250.559 mo
613.68 250.559 li
53.398 216.359 mo
613.68 216.359 li
53.398 199.199 mo
613.68 199.199 li
53.398 165 mo
613.68 165 li
53.398 147.84 mo
613.68 147.84 li
53.398 113.641 mo
613.68 113.641 li
53.398 96.48 mo
613.68 96.48 li
53.398 62.281 mo
613.68 62.281 li
53.398 45.121 mo
613.68 45.121 li
.140414 .108034 .108034 0 cmyk
@
53.398 438.961 mo
613.68 438.961 li
53.398 387.48 mo
613.68 387.48 li
53.398 336.121 mo
613.68 336.121 li
53.398 284.762 mo
613.68 284.762 li
53.398 233.398 mo
613.68 233.398 li
53.398 182.039 mo
613.68 182.039 li
53.398 130.68 mo
613.68 130.68 li
53.398 79.32 mo
613.68 79.32 li
53.398 27.961 mo
613.68 27.961 li
.328344 .284215 .278569 .000915541 cmyk
@
88.441 27.961 mo
88.441 490.32 li
158.398 27.961 mo
158.398 490.32 li
228.48 27.961 mo
228.48 490.32 li
298.559 27.961 mo
298.559 490.32 li
368.52 27.961 mo
368.52 490.32 li
438.602 27.961 mo
438.602 490.32 li
508.559 27.961 mo
508.559 490.32 li
578.641 27.961 mo
578.641 490.32 li
.178592 .148898 .143923 0 cmyk
@
53.398 27.961 mo
53.398 490.32 li
123.48 27.961 mo
123.48 490.32 li
193.441 27.961 mo
193.441 490.32 li
263.52 27.961 mo
263.52 490.32 li
333.48 27.961 mo
333.48 490.32 li
403.559 27.961 mo
403.559 490.32 li
473.641 27.961 mo
473.641 490.32 li
543.602 27.961 mo
543.602 490.32 li
613.68 27.961 mo
613.68 490.32 li
.328344 .284215 .278569 .000915541 cmyk
@
27.121 482.281 mo
42.238 482.281 li
42.238 496.922 li
27.121 496.922 li
cp
0 0 0 0 cmyk
ef
27.121 430.922 mo
42.238 430.922 li
42.238 445.559 li
27.121 445.559 li
cp
ef
27.121 379.559 mo
42.238 379.559 li
42.238 394.2 li
27.121 394.2 li
cp
ef
27.121 328.199 mo
42.238 328.199 li
42.238 342.84 li
27.121 342.84 li
cp
ef
27.121 276.84 mo
42.238 276.84 li
42.238 291.481 li
27.121 291.481 li
cp
ef
27.121 225.48 mo
42.238 225.48 li
42.238 240.121 li
27.121 240.121 li
cp
ef
27.121 174.121 mo
42.238 174.121 li
42.238 188.762 li
27.121 188.762 li
cp
ef
21 122.762 mo
42.238 122.762 li
42.238 137.399 li
21 137.399 li
cp
ef
21 71.398 mo
42.238 71.398 li
42.238 86.039 li
21 86.039 li
cp
ef
21 20.039 mo
42.238 20.039 li
42.238 34.68 li
21 34.68 li
cp
ef
.96 lw
53.398 490.32 mo
613.68 490.32 li
.367803 .29575 .300999 .00198367 cmyk
@
53.398 490.32 mo
53.398 494.039 li
123.48 490.32 mo
123.48 494.039 li
193.441 490.32 mo
193.441 494.039 li
263.52 490.32 mo
263.52 494.039 li
333.48 490.32 mo
333.48 494.039 li
403.559 490.32 mo
403.559 494.039 li
473.641 490.32 mo
473.641 494.039 li
543.602 490.32 mo
543.602 494.039 li
613.68 490.32 mo
613.68 494.039 li
@
gsave
53.281 27.961 mo
614.398 27.961 li
614.398 490.922 li
53.281 490.922 li
cp
clp
1 lc
53.398 459.48 mo
123.48 473.16 li
193.441 479.641 li
263.52 483.121 li
333.48 483.359 li
403.559 480.719 li
473.641 484.801 li
543.602 484.801 li
613.68 485.16 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
48.238 454.27 mo
58.199 454.27 li
58.199 464.231 li
48.238 464.231 li
cp
.62768 .285466 0 0 cmyk
@
118.32 467.949 mo
128.281 467.949 li
128.281 477.91 li
118.32 477.91 li
cp
@
188.398 474.551 mo
198.359 474.551 li
198.359 484.512 li
188.398 484.512 li
cp
@
258.359 477.91 mo
268.32 477.91 li
268.32 487.871 li
258.359 487.871 li
cp
@
328.441 478.27 mo
338.398 478.27 li
338.398 488.231 li
328.441 488.231 li
cp
@
398.398 475.512 mo
408.359 475.512 li
408.359 485.469 li
398.398 485.469 li
cp
@
468.48 479.59 mo
478.441 479.59 li
478.441 489.551 li
468.48 489.551 li
cp
@
538.559 479.59 mo
548.52 479.59 li
548.52 489.551 li
538.559 489.551 li
cp
@
608.52 479.949 mo
618.481 479.949 li
618.481 489.91 li
608.52 489.91 li
cp
@
gsave
53.281 27.961 mo
614.398 27.961 li
614.398 490.922 li
53.281 490.922 li
cp
clp
.96 lw
1 lc
53.398 409.801 mo
123.48 451.559 li
193.441 462.48 li
263.52 465.961 li
333.48 476.52 li
403.559 470.398 li
473.641 472.078 li
543.602 474.48 li
613.68 478.922 li
.466651 0 .889799 0 cmyk
@
grestore
48.238 404.59 mo
58.199 404.59 li
58.199 414.551 li
48.238 414.551 li
cp
.466651 0 .889799 0 cmyk
@
118.32 446.469 mo
128.281 446.469 li
128.281 456.43 li
118.32 456.43 li
cp
@
188.398 457.391 mo
198.359 457.391 li
198.359 467.352 li
188.398 467.352 li
cp
@
258.359 460.75 mo
268.32 460.75 li
268.32 470.711 li
258.359 470.711 li
cp
@
328.441 471.43 mo
338.398 471.43 li
338.398 481.391 li
328.441 481.391 li
cp
@
398.398 465.309 mo
408.359 465.309 li
408.359 475.27 li
398.398 475.27 li
cp
@
468.48 466.988 mo
478.441 466.988 li
478.441 476.949 li
468.48 476.949 li
cp
@
538.559 469.391 mo
548.52 469.391 li
548.52 479.352 li
538.559 479.352 li
cp
@
608.52 473.828 mo
618.481 473.828 li
618.481 483.789 li
608.52 483.789 li
cp
@
gsave
53.281 27.961 mo
614.398 27.961 li
614.398 490.922 li
53.281 490.922 li
cp
clp
.96 lw
1 lc
53.398 224.879 mo
123.48 344.762 li
193.441 397.801 li
263.52 418.32 li
333.48 441.961 li
403.559 427.559 li
473.641 430.32 li
543.602 432.719 li
613.68 443.641 li
0 .990631 1 .000396735 cmyk
@
grestore
48.238 219.789 mo
58.199 219.789 li
58.199 229.75 li
48.238 229.75 li
cp
0 .990631 1 .000396735 cmyk
@
118.32 339.551 mo
128.281 339.551 li
128.281 349.512 li
118.32 349.512 li
cp
@
188.398 392.711 mo
198.359 392.711 li
198.359 402.672 li
188.398 402.672 li
cp
@
258.359 413.23 mo
268.32 413.23 li
268.32 423.191 li
258.359 423.191 li
cp
@
328.441 436.871 mo
338.398 436.871 li
338.398 446.828 li
328.441 446.828 li
cp
@
398.398 422.469 mo
408.359 422.469 li
408.359 432.43 li
398.398 432.43 li
cp
@
468.48 425.23 mo
478.441 425.23 li
478.441 435.191 li
468.48 435.191 li
cp
@
538.559 427.629 mo
548.52 427.629 li
548.52 437.59 li
538.559 437.59 li
cp
@
608.52 438.551 mo
618.481 438.551 li
618.481 448.512 li
608.52 448.512 li
cp
@
gsave
53.281 27.961 mo
614.398 27.961 li
614.398 490.922 li
53.281 490.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 312.84 mo
123.48 408.719 li
193.441 431.039 li
263.52 440.281 li
333.48 445.441 li
403.559 460.078 li
473.641 459.121 li
543.602 461.879 li
613.68 461.16 li
@
grestore
48.238 307.75 mo
58.199 307.75 li
58.199 317.711 li
48.238 317.711 li
cp
@
118.32 403.629 mo
128.281 403.629 li
128.281 413.59 li
118.32 413.59 li
cp
@
188.398 425.828 mo
198.359 425.828 li
198.359 435.789 li
188.398 435.789 li
cp
@
258.359 435.07 mo
268.32 435.07 li
268.32 445.031 li
258.359 445.031 li
cp
@
328.441 440.23 mo
338.398 440.23 li
338.398 450.191 li
328.441 450.191 li
cp
@
398.398 454.988 mo
408.359 454.988 li
408.359 464.949 li
398.398 464.949 li
cp
@
468.48 453.91 mo
478.441 453.91 li
478.441 463.871 li
468.48 463.871 li
cp
@
538.559 456.672 mo
548.52 456.672 li
548.52 466.629 li
538.559 466.629 li
cp
@
608.52 455.949 mo
618.481 455.949 li
618.481 465.91 li
608.52 465.91 li
cp
@
gsave
53.281 27.961 mo
614.398 27.961 li
614.398 490.922 li
53.281 490.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 33.84 mo
123.48 270.719 li
193.441 317.281 li
263.52 348.84 li
333.48 377.281 li
403.559 369.359 li
473.641 383.762 li
543.602 382.078 li
613.68 391.68 li
.62768 .285466 0 0 cmyk
@
grestore
48.238 28.629 mo
58.199 28.629 li
58.199 38.59 li
48.238 38.59 li
cp
.62768 .285466 0 0 cmyk
@
118.32 265.629 mo
128.281 265.629 li
128.281 275.59 li
118.32 275.59 li
cp
@
188.398 312.191 mo
198.359 312.191 li
198.359 322.148 li
188.398 322.148 li
cp
@
258.359 343.75 mo
268.32 343.75 li
268.32 353.711 li
258.359 353.711 li
cp
@
328.441 372.07 mo
338.398 372.07 li
338.398 382.031 li
328.441 382.031 li
cp
@
398.398 364.27 mo
408.359 364.27 li
408.359 374.231 li
398.398 374.231 li
cp
@
468.48 378.672 mo
478.441 378.672 li
478.441 388.629 li
468.48 388.629 li
cp
@
538.559 376.871 mo
548.52 376.871 li
548.52 386.828 li
538.559 386.828 li
cp
@
608.52 386.469 mo
618.481 386.469 li
618.481 396.43 li
608.52 396.43 li
cp
@
gsave
53.281 27.961 mo
614.398 27.961 li
614.398 490.922 li
53.281 490.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 176.641 mo
123.48 313.922 li
193.441 359.16 li
263.52 406.078 li
333.48 395.039 li
403.559 411.48 li
473.641 441.961 li
543.602 414.602 li
613.68 445.441 li
.466651 0 .889799 0 cmyk
@
grestore
48.719 171.91 mo
57.719 171.91 li
57.719 180.91 li
48.719 180.91 li
cp
.466651 0 .889799 0 cmyk
@
118.801 309.191 mo
127.801 309.191 li
127.801 318.191 li
118.801 318.191 li
cp
@
188.879 354.43 mo
197.879 354.43 li
197.879 363.43 li
188.879 363.43 li
cp
@
258.84 401.352 mo
267.84 401.352 li
267.84 410.352 li
258.84 410.352 li
cp
@
328.922 390.43 mo
337.922 390.43 li
337.922 399.43 li
328.922 399.43 li
cp
@
398.879 406.871 mo
407.879 406.871 li
407.879 415.871 li
398.879 415.871 li
cp
@
468.961 437.352 mo
477.961 437.352 li
477.961 446.352 li
468.961 446.352 li
cp
@
539.039 409.871 mo
548.039 409.871 li
548.039 418.871 li
539.039 418.871 li
cp
@
609 440.711 mo
618 440.711 li
618 449.711 li
609 449.711 li
cp
@
27.07 482.227 mo
42.261 482.227 li
42.261 496.879 li
27.07 496.879 li
cp
0 0 0 0 cmyk
ef
32.734 489.918 mo
32.73 490.5 32.684 491.031 32.598 491.512 cv
32.504 491.996 32.352 492.41 32.141 492.754 cv
31.922 493.098 31.645 493.367 31.305 493.555 cv
30.957 493.742 30.535 493.832 30.035 493.836 cv
29.559 493.832 29.156 493.75 28.832 493.582 cv
28.504 493.414 28.242 493.164 28.043 492.832 cv
27.84 492.504 27.695 492.098 27.617 491.613 cv
27.531 491.133 27.492 490.578 27.492 489.953 cv
27.492 489.375 27.539 488.848 27.633 488.363 cv
27.727 487.887 27.879 487.473 28.09 487.121 cv
28.301 486.777 28.578 486.508 28.922 486.316 cv
29.266 486.129 29.688 486.035 30.188 486.031 cv
30.664 486.035 31.066 486.121 31.395 486.289 cv
31.723 486.461 31.984 486.711 32.184 487.039 cv
32.383 487.371 32.523 487.777 32.609 488.258 cv
32.688 488.742 32.73 489.293 32.734 489.918 cv
cp
31.703 489.988 mo
31.699 489.613 31.688 489.273 31.664 488.969 cv
31.637 488.668 31.594 488.402 31.543 488.172 cv
31.488 487.945 31.422 487.75 31.336 487.578 cv
31.25 487.414 31.148 487.277 31.035 487.168 cv
30.914 487.066 30.781 486.988 30.633 486.934 cv
30.484 486.887 30.316 486.859 30.129 486.859 cv
29.797 486.859 29.527 486.937 29.32 487.094 cv
29.109 487.25 28.945 487.465 28.828 487.738 cv
28.711 488.012 28.629 488.332 28.586 488.699 cv
28.543 489.066 28.523 489.461 28.523 489.883 cv
28.523 490.453 28.551 490.937 28.609 491.328 cv
28.668 491.727 28.762 492.047 28.887 492.297 cv
29.012 492.547 29.172 492.73 29.375 492.844 cv
29.57 492.957 29.813 493.012 30.094 493.012 cv
30.313 493.012 30.504 492.977 30.672 492.906 cv
30.836 492.836 30.977 492.738 31.098 492.605 cv
31.215 492.477 31.316 492.316 31.395 492.133 cv
31.473 491.953 31.535 491.75 31.582 491.523 cv
31.629 491.301 31.66 491.062 31.676 490.801 cv
31.691 490.543 31.699 490.27 31.703 489.988 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.297 493.086 mo
35.297 493.367 35.25 493.551 35.156 493.645 cv
35.063 493.734 34.895 493.777 34.66 493.781 cv
34.422 493.777 34.262 493.734 34.172 493.645 cv
34.078 493.555 34.031 493.375 34.035 493.105 cv
34.031 492.828 34.078 492.645 34.172 492.551 cv
34.266 492.461 34.434 492.414 34.676 492.414 cv
34.91 492.414 35.07 492.461 35.16 492.551 cv
35.25 492.641 35.297 492.82 35.297 493.086 cv
cp
f
41.844 489.918 mo
41.84 490.5 41.793 491.031 41.707 491.512 cv
41.613 491.996 41.461 492.41 41.25 492.754 cv
41.031 493.098 40.754 493.367 40.414 493.555 cv
40.066 493.742 39.645 493.832 39.145 493.836 cv
38.668 493.832 38.266 493.75 37.941 493.582 cv
37.613 493.414 37.352 493.164 37.152 492.832 cv
36.949 492.504 36.805 492.098 36.727 491.613 cv
36.641 491.133 36.602 490.578 36.602 489.953 cv
36.602 489.375 36.648 488.848 36.742 488.363 cv
36.836 487.887 36.988 487.473 37.199 487.121 cv
37.41 486.777 37.688 486.508 38.031 486.316 cv
38.375 486.129 38.797 486.035 39.297 486.031 cv
39.773 486.035 40.176 486.121 40.504 486.289 cv
40.832 486.461 41.094 486.711 41.293 487.039 cv
41.492 487.371 41.633 487.777 41.719 488.258 cv
41.797 488.742 41.84 489.293 41.844 489.918 cv
cp
40.813 489.988 mo
40.809 489.613 40.797 489.273 40.773 488.969 cv
40.746 488.668 40.703 488.402 40.652 488.172 cv
40.598 487.945 40.531 487.75 40.445 487.578 cv
40.359 487.414 40.258 487.277 40.145 487.168 cv
40.023 487.066 39.891 486.988 39.742 486.934 cv
39.594 486.887 39.426 486.859 39.238 486.859 cv
38.906 486.859 38.637 486.937 38.43 487.094 cv
38.219 487.25 38.055 487.465 37.938 487.738 cv
37.82 488.012 37.738 488.332 37.695 488.699 cv
37.652 489.066 37.633 489.461 37.633 489.883 cv
37.633 490.453 37.66 490.937 37.719 491.328 cv
37.777 491.727 37.871 492.047 37.996 492.297 cv
38.121 492.547 38.281 492.73 38.484 492.844 cv
38.68 492.957 38.922 493.012 39.203 493.012 cv
39.422 493.012 39.613 492.977 39.781 492.906 cv
39.945 492.836 40.086 492.738 40.207 492.605 cv
40.324 492.477 40.426 492.316 40.504 492.133 cv
40.582 491.953 40.645 491.75 40.691 491.523 cv
40.738 491.301 40.77 491.062 40.785 490.801 cv
40.801 490.543 40.809 490.27 40.813 489.988 cv
cp
f
27.07 430.859 mo
42.261 430.859 li
42.261 445.511 li
27.07 445.511 li
cp
0 0 0 0 cmyk
ef
32.5 441.941 mo
32.496 442.016 32.492 442.078 32.484 442.129 cv
32.473 442.184 32.457 442.227 32.438 442.254 cv
32.414 442.289 32.391 442.312 32.367 442.32 cv
32.344 442.336 32.316 442.34 32.289 442.34 cv
28.328 442.34 li
28.301 442.34 28.277 442.336 28.254 442.32 cv
28.23 442.312 28.207 442.289 28.188 442.254 cv
28.164 442.227 28.148 442.184 28.137 442.129 cv
28.121 442.078 28.113 442.016 28.117 441.941 cv
28.113 441.871 28.121 441.812 28.137 441.762 cv
28.148 441.711 28.16 441.668 28.18 441.633 cv
28.195 441.602 28.219 441.578 28.242 441.559 cv
28.266 441.543 28.293 441.531 28.328 441.531 cv
29.914 441.531 li
29.914 435.766 li
28.445 436.637 li
28.371 436.684 28.313 436.707 28.27 436.711 cv
28.223 436.723 28.188 436.715 28.16 436.684 cv
28.129 436.66 28.109 436.617 28.102 436.559 cv
28.094 436.5 28.09 436.426 28.09 436.332 cv
28.09 436.27 28.09 436.211 28.098 436.164 cv
28.102 436.117 28.113 436.078 28.125 436.047 cv
28.133 436.016 28.148 435.988 28.172 435.965 cv
28.195 435.941 28.223 435.918 28.258 435.895 cv
30.008 434.777 li
30.02 434.766 30.039 434.754 30.066 434.746 cv
30.086 434.738 30.117 434.73 30.152 434.723 cv
30.184 434.715 30.223 434.711 30.273 434.711 cv
30.316 434.711 30.375 434.711 30.453 434.707 cv
30.543 434.711 30.621 434.715 30.688 434.719 cv
30.746 434.73 30.797 434.742 30.832 434.75 cv
30.863 434.766 30.887 434.781 30.902 434.801 cv
30.914 434.824 30.918 434.848 30.922 434.871 cv
30.922 441.531 li
32.289 441.531 li
32.316 441.531 32.348 441.543 32.379 441.559 cv
32.406 441.578 32.426 441.602 32.445 441.633 cv
32.461 441.668 32.477 441.711 32.484 441.762 cv
32.492 441.812 32.496 441.871 32.5 441.941 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.297 441.699 mo
35.297 441.98 35.25 442.164 35.156 442.258 cv
35.063 442.348 34.895 442.391 34.66 442.395 cv
34.422 442.391 34.262 442.348 34.172 442.258 cv
34.078 442.168 34.031 441.988 34.035 441.719 cv
34.031 441.441 34.078 441.258 34.172 441.164 cv
34.266 441.074 34.434 441.027 34.676 441.027 cv
34.91 441.027 35.07 441.074 35.16 441.164 cv
35.25 441.254 35.297 441.434 35.297 441.699 cv
cp
f
41.559 439.902 mo
41.559 440.309 41.488 440.672 41.352 440.988 cv
41.215 441.305 41.023 441.57 40.773 441.789 cv
40.523 442.008 40.223 442.172 39.879 442.281 cv
39.527 442.391 39.145 442.445 38.727 442.449 cv
38.488 442.445 38.266 442.43 38.059 442.398 cv
37.844 442.367 37.656 442.328 37.496 442.281 cv
37.328 442.234 37.195 442.187 37.094 442.137 cv
36.988 442.094 36.918 442.055 36.891 442.023 cv
36.859 441.996 36.84 441.973 36.828 441.945 cv
36.816 441.926 36.805 441.898 36.797 441.863 cv
36.781 441.832 36.777 441.789 36.777 441.738 cv
36.773 441.687 36.77 441.625 36.773 441.555 cv
36.77 441.492 36.773 441.434 36.781 441.379 cv
36.785 441.324 36.797 441.281 36.813 441.25 cv
36.828 441.219 36.844 441.195 36.867 441.176 cv
36.883 441.164 36.91 441.156 36.941 441.152 cv
36.98 441.156 37.039 441.18 37.121 441.227 cv
37.203 441.273 37.313 441.328 37.453 441.383 cv
37.59 441.441 37.762 441.492 37.969 441.543 cv
38.172 441.598 38.418 441.625 38.699 441.621 cv
38.961 441.625 39.199 441.594 39.422 441.527 cv
39.637 441.469 39.824 441.371 39.984 441.234 cv
40.141 441.105 40.266 440.937 40.355 440.734 cv
40.445 440.531 40.492 440.285 40.492 439.996 cv
40.492 439.754 40.453 439.543 40.379 439.355 cv
40.301 439.172 40.184 439.016 40.027 438.891 cv
39.867 438.77 39.668 438.68 39.426 438.617 cv
39.184 438.562 38.895 438.531 38.559 438.527 cv
38.32 438.531 38.113 438.543 37.945 438.562 cv
37.77 438.59 37.609 438.602 37.461 438.598 cv
37.348 438.602 37.27 438.574 37.227 438.52 cv
37.176 438.469 37.152 438.371 37.156 438.227 cv
37.156 435.137 li
37.152 435.012 37.184 434.914 37.246 434.852 cv
37.309 434.789 37.395 434.758 37.508 434.758 cv
40.867 434.758 li
40.898 434.758 40.926 434.77 40.957 434.785 cv
40.98 434.805 41.008 434.828 41.031 434.863 cv
41.051 434.902 41.063 434.949 41.074 435 cv
41.082 435.059 41.09 435.121 41.09 435.191 cv
41.09 435.332 41.07 435.441 41.031 435.52 cv
40.992 435.598 40.938 435.637 40.875 435.637 cv
38.164 435.637 li
38.164 437.762 li
38.293 437.746 38.43 437.734 38.57 437.73 cv
38.707 437.727 38.863 437.723 39.047 437.723 cv
39.461 437.723 39.828 437.777 40.141 437.879 cv
40.453 437.988 40.711 438.133 40.922 438.32 cv
41.129 438.508 41.289 438.738 41.398 439.008 cv
41.504 439.277 41.559 439.574 41.559 439.902 cv
cp
f
27.07 379.5 mo
42.261 379.5 li
42.261 394.148 li
27.07 394.148 li
cp
0 0 0 0 cmyk
ef
32.426 388.812 mo
32.426 389.16 32.363 389.477 32.242 389.754 cv
32.121 390.035 31.949 390.273 31.723 390.473 cv
31.496 390.672 31.215 390.824 30.883 390.93 cv
30.551 391.035 30.176 391.086 29.758 391.09 cv
29.504 391.086 29.266 391.066 29.047 391.027 cv
28.824 390.988 28.629 390.941 28.461 390.887 cv
28.285 390.832 28.145 390.773 28.031 390.711 cv
27.914 390.648 27.84 390.605 27.816 390.578 cv
27.785 390.551 27.766 390.523 27.75 390.496 cv
27.734 390.469 27.719 390.434 27.707 390.395 cv
27.695 390.355 27.688 390.309 27.68 390.254 cv
27.672 390.199 27.668 390.129 27.672 390.043 cv
27.668 389.902 27.684 389.805 27.715 389.75 cv
27.742 389.695 27.781 389.668 27.836 389.668 cv
27.871 389.668 27.941 389.699 28.047 389.762 cv
28.152 389.824 28.289 389.895 28.457 389.965 cv
28.621 390.043 28.816 390.109 29.039 390.168 cv
29.262 390.234 29.508 390.266 29.785 390.262 cv
30.043 390.266 30.277 390.23 30.48 390.16 cv
30.68 390.094 30.848 390 30.984 389.879 cv
31.121 389.762 31.223 389.621 31.293 389.449 cv
31.359 389.285 31.395 389.102 31.395 388.906 cv
31.395 388.691 31.348 388.5 31.262 388.324 cv
31.172 388.156 31.047 388.008 30.883 387.879 cv
30.715 387.758 30.508 387.66 30.266 387.594 cv
30.016 387.531 29.738 387.5 29.434 387.496 cv
28.691 387.496 li
28.656 387.5 28.625 387.492 28.594 387.477 cv
28.563 387.461 28.535 387.437 28.516 387.406 cv
28.492 387.375 28.473 387.336 28.461 387.285 cv
28.445 387.234 28.441 387.168 28.441 387.082 cv
28.441 387.012 28.445 386.949 28.457 386.898 cv
28.469 386.852 28.484 386.812 28.508 386.781 cv
28.523 386.754 28.551 386.734 28.582 386.719 cv
28.609 386.711 28.641 386.703 28.676 386.699 cv
29.336 386.699 li
29.594 386.703 29.824 386.668 30.031 386.598 cv
30.234 386.531 30.41 386.437 30.551 386.309 cv
30.691 386.187 30.801 386.039 30.879 385.863 cv
30.957 385.691 30.996 385.496 30.996 385.277 cv
30.996 385.125 30.969 384.977 30.918 384.832 cv
30.867 384.691 30.793 384.566 30.691 384.461 cv
30.59 384.355 30.457 384.273 30.301 384.211 cv
30.137 384.156 29.957 384.125 29.754 384.121 cv
29.527 384.125 29.316 384.16 29.129 384.223 cv
28.934 384.293 28.766 384.363 28.621 384.441 cv
28.469 384.52 28.348 384.594 28.254 384.66 cv
28.156 384.73 28.086 384.766 28.047 384.762 cv
28.02 384.766 27.996 384.762 27.977 384.75 cv
27.953 384.742 27.934 384.723 27.922 384.691 cv
27.906 384.664 27.898 384.621 27.891 384.566 cv
27.883 384.516 27.879 384.445 27.883 384.359 cv
27.879 384.301 27.883 384.25 27.891 384.203 cv
27.895 384.16 27.902 384.121 27.914 384.086 cv
27.922 384.055 27.934 384.023 27.953 383.996 cv
27.965 383.973 27.992 383.941 28.031 383.902 cv
28.07 383.863 28.145 383.809 28.258 383.738 cv
28.371 383.668 28.512 383.602 28.68 383.531 cv
28.844 383.465 29.035 383.406 29.254 383.355 cv
29.469 383.312 29.703 383.289 29.953 383.285 cv
30.305 383.289 30.613 383.332 30.879 383.422 cv
31.145 383.516 31.363 383.645 31.543 383.805 cv
31.719 383.973 31.852 384.168 31.941 384.395 cv
32.027 384.621 32.074 384.875 32.074 385.152 cv
32.074 385.391 32.043 385.613 31.98 385.816 cv
31.918 386.023 31.824 386.203 31.703 386.359 cv
31.582 386.52 31.434 386.656 31.258 386.766 cv
31.082 386.883 30.879 386.957 30.648 386.996 cv
30.648 387.008 li
30.91 387.039 31.148 387.105 31.367 387.207 cv
31.582 387.309 31.77 387.437 31.93 387.594 cv
32.082 387.75 32.203 387.934 32.293 388.145 cv
32.379 388.355 32.426 388.578 32.426 388.812 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.297 390.34 mo
35.297 390.621 35.25 390.805 35.156 390.898 cv
35.063 390.988 34.895 391.031 34.66 391.035 cv
34.422 391.031 34.262 390.988 34.172 390.898 cv
34.078 390.809 34.031 390.629 34.035 390.359 cv
34.031 390.082 34.078 389.898 34.172 389.805 cv
34.266 389.715 34.434 389.668 34.676 389.668 cv
34.91 389.668 35.07 389.715 35.16 389.805 cv
35.25 389.895 35.297 390.074 35.297 390.34 cv
cp
f
41.844 387.172 mo
41.84 387.754 41.793 388.285 41.707 388.766 cv
41.613 389.25 41.461 389.664 41.25 390.008 cv
41.031 390.352 40.754 390.621 40.414 390.809 cv
40.066 390.996 39.645 391.086 39.145 391.09 cv
38.668 391.086 38.266 391.004 37.941 390.836 cv
37.613 390.668 37.352 390.418 37.152 390.086 cv
36.949 389.758 36.805 389.352 36.727 388.867 cv
36.641 388.387 36.602 387.832 36.602 387.207 cv
36.602 386.629 36.648 386.102 36.742 385.617 cv
36.836 385.141 36.988 384.727 37.199 384.375 cv
37.41 384.031 37.688 383.762 38.031 383.57 cv
38.375 383.383 38.797 383.289 39.297 383.285 cv
39.773 383.289 40.176 383.375 40.504 383.543 cv
40.832 383.715 41.094 383.965 41.293 384.293 cv
41.492 384.625 41.633 385.031 41.719 385.512 cv
41.797 385.996 41.84 386.547 41.844 387.172 cv
cp
40.813 387.242 mo
40.809 386.867 40.797 386.527 40.773 386.223 cv
40.746 385.922 40.703 385.656 40.652 385.426 cv
40.598 385.199 40.531 385.004 40.445 384.832 cv
40.359 384.668 40.258 384.531 40.145 384.422 cv
40.023 384.32 39.891 384.242 39.742 384.187 cv
39.594 384.141 39.426 384.113 39.238 384.113 cv
38.906 384.113 38.637 384.191 38.43 384.348 cv
38.219 384.504 38.055 384.719 37.938 384.992 cv
37.82 385.266 37.738 385.586 37.695 385.953 cv
37.652 386.32 37.633 386.715 37.633 387.137 cv
37.633 387.707 37.66 388.191 37.719 388.582 cv
37.777 388.98 37.871 389.301 37.996 389.551 cv
38.121 389.801 38.281 389.984 38.484 390.098 cv
38.68 390.211 38.922 390.266 39.203 390.266 cv
39.422 390.266 39.613 390.23 39.781 390.16 cv
39.945 390.09 40.086 389.992 40.207 389.859 cv
40.324 389.73 40.426 389.57 40.504 389.387 cv
40.582 389.207 40.645 389.004 40.691 388.777 cv
40.738 388.555 40.77 388.316 40.785 388.055 cv
40.801 387.797 40.809 387.523 40.813 387.242 cv
cp
f
27.07 328.129 mo
42.261 328.129 li
42.261 342.781 li
27.07 342.781 li
cp
0 0 0 0 cmyk
ef
32.805 337.445 mo
32.801 337.578 32.781 337.68 32.746 337.75 cv
32.703 337.824 32.648 337.863 32.586 337.859 cv
31.727 337.859 li
31.727 339.453 li
31.723 339.488 31.715 339.516 31.703 339.535 cv
31.684 339.559 31.656 339.574 31.617 339.59 cv
31.578 339.605 31.523 339.617 31.461 339.625 cv
31.395 339.633 31.313 339.637 31.215 339.637 cv
31.113 339.637 31.035 339.633 30.973 339.625 cv
30.91 339.617 30.859 339.605 30.82 339.59 cv
30.781 339.574 30.754 339.559 30.738 339.535 cv
30.723 339.516 30.715 339.488 30.719 339.453 cv
30.719 337.859 li
27.617 337.859 li
27.57 337.863 27.535 337.855 27.504 337.844 cv
27.473 337.836 27.441 337.816 27.418 337.781 cv
27.387 337.754 27.371 337.707 27.363 337.645 cv
27.355 337.586 27.352 337.512 27.352 337.414 cv
27.352 337.344 27.352 337.277 27.355 337.219 cv
27.359 337.16 27.367 337.105 27.379 337.059 cv
27.391 337.012 27.406 336.965 27.426 336.918 cv
27.445 336.871 27.469 336.824 27.496 336.773 cv
30.199 332.164 li
30.219 332.137 30.246 332.109 30.285 332.082 cv
30.32 332.062 30.371 332.043 30.434 332.023 cv
30.492 332.012 30.563 332 30.652 331.992 cv
30.738 331.988 30.844 331.984 30.965 331.984 cv
31.094 331.984 31.207 331.992 31.305 332 cv
31.402 332.016 31.48 332.027 31.543 332.039 cv
31.598 332.059 31.645 332.078 31.68 332.102 cv
31.707 332.125 31.723 332.156 31.727 332.187 cv
31.727 337.031 li
32.586 337.031 li
32.648 337.035 32.703 337.07 32.742 337.133 cv
32.781 337.203 32.801 337.305 32.805 337.445 cv
cp
30.719 332.867 mo
30.711 332.867 li
28.273 337.031 li
30.719 337.031 li
cp
.629114 .553033 .543389 .289647 cmyk
f
35.297 338.961 mo
35.297 339.242 35.25 339.426 35.156 339.52 cv
35.063 339.609 34.895 339.652 34.66 339.656 cv
34.422 339.652 34.262 339.609 34.172 339.52 cv
34.078 339.43 34.031 339.25 34.035 338.98 cv
34.031 338.703 34.078 338.52 34.172 338.426 cv
34.266 338.336 34.434 338.289 34.676 338.289 cv
34.91 338.289 35.07 338.336 35.16 338.426 cv
35.25 338.516 35.297 338.695 35.297 338.961 cv
cp
f
41.559 337.164 mo
41.559 337.57 41.488 337.934 41.352 338.25 cv
41.215 338.566 41.023 338.832 40.773 339.051 cv
40.523 339.27 40.223 339.434 39.879 339.543 cv
39.527 339.652 39.145 339.707 38.727 339.711 cv
38.488 339.707 38.266 339.691 38.059 339.66 cv
37.844 339.629 37.656 339.59 37.496 339.543 cv
37.328 339.496 37.195 339.449 37.094 339.398 cv
36.988 339.355 36.918 339.316 36.891 339.285 cv
36.859 339.258 36.84 339.234 36.828 339.207 cv
36.816 339.187 36.805 339.16 36.797 339.125 cv
36.781 339.094 36.777 339.051 36.777 339 cv
36.773 338.949 36.77 338.887 36.773 338.816 cv
36.77 338.754 36.773 338.695 36.781 338.641 cv
36.785 338.586 36.797 338.543 36.813 338.512 cv
36.828 338.48 36.844 338.457 36.867 338.437 cv
36.883 338.426 36.91 338.418 36.941 338.414 cv
36.98 338.418 37.039 338.441 37.121 338.488 cv
37.203 338.535 37.313 338.59 37.453 338.645 cv
37.59 338.703 37.762 338.754 37.969 338.805 cv
38.172 338.859 38.418 338.887 38.699 338.883 cv
38.961 338.887 39.199 338.855 39.422 338.789 cv
39.637 338.73 39.824 338.633 39.984 338.496 cv
40.141 338.367 40.266 338.199 40.355 337.996 cv
40.445 337.793 40.492 337.547 40.492 337.258 cv
40.492 337.016 40.453 336.805 40.379 336.617 cv
40.301 336.434 40.184 336.277 40.027 336.152 cv
39.867 336.031 39.668 335.941 39.426 335.879 cv
39.184 335.824 38.895 335.793 38.559 335.789 cv
38.32 335.793 38.113 335.805 37.945 335.824 cv
37.77 335.852 37.609 335.863 37.461 335.859 cv
37.348 335.863 37.27 335.836 37.227 335.781 cv
37.176 335.73 37.152 335.633 37.156 335.488 cv
37.156 332.398 li
37.152 332.273 37.184 332.176 37.246 332.113 cv
37.309 332.051 37.395 332.02 37.508 332.02 cv
40.867 332.02 li
40.898 332.02 40.926 332.031 40.957 332.047 cv
40.98 332.066 41.008 332.09 41.031 332.125 cv
41.051 332.164 41.063 332.211 41.074 332.262 cv
41.082 332.32 41.09 332.383 41.09 332.453 cv
41.09 332.594 41.07 332.703 41.031 332.781 cv
40.992 332.859 40.938 332.898 40.875 332.898 cv
38.164 332.898 li
38.164 335.023 li
38.293 335.008 38.43 334.996 38.57 334.992 cv
38.707 334.988 38.863 334.984 39.047 334.984 cv
39.461 334.984 39.828 335.039 40.141 335.141 cv
40.453 335.25 40.711 335.395 40.922 335.582 cv
41.129 335.77 41.289 336 41.398 336.27 cv
41.504 336.539 41.559 336.836 41.559 337.164 cv
cp
f
27.07 276.77 mo
42.261 276.77 li
42.261 291.422 li
27.07 291.422 li
cp
0 0 0 0 cmyk
ef
32.688 285.777 mo
32.684 286.113 32.633 286.437 32.535 286.746 cv
32.43 287.059 32.273 287.332 32.066 287.566 cv
31.852 287.805 31.582 287.996 31.262 288.137 cv
30.934 288.281 30.551 288.348 30.113 288.352 cv
29.793 288.348 29.512 288.312 29.27 288.234 cv
29.023 288.156 28.813 288.043 28.637 287.898 cv
28.453 287.754 28.305 287.578 28.188 287.363 cv
28.066 287.156 27.969 286.914 27.898 286.641 cv
27.824 286.371 27.773 286.074 27.746 285.754 cv
27.711 285.434 27.695 285.09 27.699 284.723 cv
27.695 284.398 27.715 284.07 27.75 283.734 cv
27.785 283.402 27.848 283.082 27.938 282.773 cv
28.027 282.465 28.148 282.176 28.305 281.902 cv
28.457 281.633 28.652 281.395 28.887 281.191 cv
29.121 280.992 29.398 280.832 29.723 280.711 cv
30.047 280.598 30.426 280.539 30.855 280.535 cv
31 280.539 31.145 280.547 31.297 280.562 cv
31.441 280.582 31.578 280.605 31.707 280.633 cv
31.828 280.664 31.934 280.699 32.023 280.73 cv
32.109 280.77 32.168 280.797 32.195 280.816 cv
32.223 280.84 32.242 280.863 32.258 280.887 cv
32.266 280.914 32.277 280.941 32.289 280.969 cv
32.293 281 32.297 281.031 32.305 281.066 cv
32.305 281.105 32.309 281.152 32.313 281.203 cv
32.309 281.277 32.309 281.34 32.309 281.387 cv
32.309 281.441 32.301 281.48 32.285 281.512 cv
32.27 281.543 32.25 281.566 32.234 281.582 cv
32.211 281.598 32.184 281.605 32.148 281.605 cv
32.105 281.605 32.047 281.594 31.973 281.566 cv
31.895 281.539 31.805 281.508 31.699 281.473 cv
31.594 281.441 31.465 281.41 31.316 281.383 cv
31.164 281.355 30.988 281.344 30.793 281.34 cv
30.426 281.344 30.113 281.418 29.852 281.562 cv
29.59 281.715 29.375 281.914 29.211 282.164 cv
29.039 282.418 28.918 282.707 28.84 283.035 cv
28.758 283.367 28.711 283.715 28.703 284.07 cv
28.801 284.016 28.914 283.957 29.047 283.895 cv
29.172 283.84 29.313 283.785 29.461 283.734 cv
29.609 283.691 29.77 283.652 29.941 283.621 cv
30.109 283.594 30.289 283.582 30.48 283.578 cv
30.891 283.582 31.234 283.637 31.52 283.746 cv
31.797 283.859 32.027 284.012 32.203 284.207 cv
32.375 284.406 32.496 284.641 32.574 284.906 cv
32.645 285.176 32.684 285.465 32.688 285.777 cv
cp
31.668 285.871 mo
31.664 285.645 31.641 285.441 31.598 285.254 cv
31.551 285.07 31.477 284.91 31.371 284.781 cv
31.266 284.652 31.125 284.555 30.949 284.48 cv
30.773 284.414 30.555 284.379 30.301 284.375 cv
30.152 284.379 30.008 284.391 29.863 284.414 cv
29.719 284.441 29.578 284.477 29.445 284.52 cv
29.305 284.566 29.176 284.621 29.055 284.68 cv
28.93 284.742 28.816 284.805 28.719 284.875 cv
28.715 285.383 28.75 285.809 28.816 286.145 cv
28.879 286.488 28.973 286.758 29.098 286.961 cv
29.223 287.168 29.375 287.316 29.559 287.402 cv
29.742 287.492 29.957 287.535 30.207 287.535 cv
30.453 287.535 30.672 287.488 30.855 287.395 cv
31.039 287.301 31.191 287.176 31.313 287.016 cv
31.434 286.859 31.523 286.68 31.582 286.48 cv
31.637 286.285 31.664 286.082 31.668 285.871 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.316 287.598 mo
35.313 287.879 35.266 288.062 35.176 288.156 cv
35.082 288.246 34.914 288.289 34.676 288.293 cv
34.438 288.289 34.277 288.246 34.188 288.156 cv
34.098 288.066 34.051 287.887 34.055 287.617 cv
34.051 287.34 34.098 287.156 34.191 287.062 cv
34.281 286.973 34.449 286.926 34.695 286.922 cv
34.926 286.926 35.086 286.973 35.18 287.059 cv
35.266 287.152 35.313 287.332 35.316 287.598 cv
cp
f
41.871 284.422 mo
41.867 285.008 41.82 285.539 41.734 286.02 cv
41.641 286.504 41.488 286.918 41.277 287.262 cv
41.059 287.609 40.781 287.879 40.438 288.066 cv
40.094 288.258 39.668 288.348 39.168 288.352 cv
38.684 288.348 38.281 288.266 37.957 288.098 cv
37.629 287.926 37.367 287.676 37.168 287.344 cv
36.969 287.016 36.824 286.609 36.742 286.125 cv
36.656 285.645 36.617 285.09 36.617 284.457 cv
36.617 283.883 36.664 283.352 36.758 282.863 cv
36.852 282.383 37.004 281.965 37.215 281.617 cv
37.426 281.273 37.703 281.008 38.051 280.816 cv
38.391 280.629 38.813 280.535 39.32 280.531 cv
39.797 280.535 40.199 280.617 40.527 280.785 cv
40.852 280.957 41.117 281.207 41.32 281.535 cv
41.52 281.867 41.66 282.277 41.746 282.758 cv
41.824 283.246 41.867 283.801 41.871 284.422 cv
cp
40.84 284.492 mo
40.836 284.117 40.82 283.777 40.797 283.473 cv
40.766 283.176 40.727 282.906 40.676 282.672 cv
40.621 282.441 40.555 282.246 40.473 282.078 cv
40.387 281.914 40.285 281.777 40.168 281.668 cv
40.051 281.562 39.914 281.48 39.766 281.43 cv
39.613 281.383 39.445 281.359 39.262 281.355 cv
38.926 281.359 38.656 281.437 38.449 281.594 cv
38.238 281.75 38.074 281.965 37.957 282.238 cv
37.836 282.512 37.754 282.836 37.715 283.203 cv
37.668 283.574 37.648 283.969 37.652 284.387 cv
37.648 284.957 37.676 285.437 37.738 285.836 cv
37.793 286.234 37.887 286.559 38.02 286.805 cv
38.145 287.059 38.309 287.242 38.504 287.352 cv
38.699 287.469 38.938 287.523 39.227 287.523 cv
39.441 287.523 39.633 287.488 39.801 287.418 cv
39.965 287.348 40.109 287.25 40.23 287.117 cv
40.348 286.988 40.445 286.828 40.527 286.645 cv
40.602 286.461 40.664 286.258 40.715 286.031 cv
40.758 285.809 40.793 285.566 40.813 285.305 cv
40.828 285.047 40.836 284.777 40.84 284.492 cv
cp
f
27.07 225.41 mo
42.261 225.41 li
42.261 240.058 li
27.07 240.058 li
cp
0 0 0 0 cmyk
ef
32.594 229.711 mo
32.59 229.781 32.586 229.848 32.586 229.902 cv
32.578 229.961 32.57 230.016 32.563 230.066 cv
32.547 230.121 32.535 230.172 32.52 230.219 cv
32.504 230.27 32.484 230.32 32.461 230.375 cv
29.73 236.664 li
29.711 236.715 29.684 236.754 29.656 236.781 cv
29.625 236.812 29.59 236.836 29.543 236.852 cv
29.496 236.867 29.438 236.875 29.371 236.883 cv
29.297 236.891 29.211 236.895 29.117 236.895 cv
28.977 236.895 28.875 236.887 28.805 236.875 cv
28.73 236.863 28.676 236.848 28.645 236.82 cv
28.609 236.797 28.594 236.766 28.598 236.727 cv
28.602 236.691 28.617 236.648 28.641 236.594 cv
31.512 230.164 li
27.875 230.164 li
27.797 230.168 27.742 230.129 27.703 230.047 cv
27.664 229.973 27.645 229.863 27.648 229.719 cv
27.645 229.645 27.648 229.578 27.664 229.523 cv
27.672 229.469 27.688 229.426 27.707 229.387 cv
27.727 229.352 27.75 229.324 27.777 229.305 cv
27.805 229.289 27.836 229.277 27.875 229.277 cv
32.289 229.277 li
32.344 229.277 32.391 229.285 32.434 229.297 cv
32.473 229.309 32.504 229.332 32.527 229.367 cv
32.547 229.402 32.566 229.445 32.578 229.5 cv
32.586 229.555 32.59 229.625 32.594 229.711 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.297 236.219 mo
35.297 236.5 35.25 236.684 35.156 236.777 cv
35.063 236.867 34.895 236.91 34.66 236.914 cv
34.422 236.91 34.262 236.867 34.172 236.777 cv
34.078 236.687 34.031 236.508 34.035 236.238 cv
34.031 235.961 34.078 235.777 34.172 235.684 cv
34.266 235.594 34.434 235.547 34.676 235.547 cv
34.91 235.547 35.07 235.594 35.16 235.684 cv
35.25 235.773 35.297 235.953 35.297 236.219 cv
cp
f
41.559 234.422 mo
41.559 234.828 41.488 235.191 41.352 235.508 cv
41.215 235.824 41.023 236.09 40.773 236.309 cv
40.523 236.527 40.223 236.691 39.879 236.801 cv
39.527 236.91 39.145 236.965 38.727 236.969 cv
38.488 236.965 38.266 236.949 38.059 236.918 cv
37.844 236.887 37.656 236.848 37.496 236.801 cv
37.328 236.754 37.195 236.707 37.094 236.656 cv
36.988 236.613 36.918 236.574 36.891 236.543 cv
36.859 236.516 36.84 236.492 36.828 236.465 cv
36.816 236.445 36.805 236.418 36.797 236.383 cv
36.781 236.352 36.777 236.309 36.777 236.258 cv
36.773 236.207 36.77 236.145 36.773 236.074 cv
36.77 236.012 36.773 235.953 36.781 235.898 cv
36.785 235.844 36.797 235.801 36.813 235.77 cv
36.828 235.738 36.844 235.715 36.867 235.695 cv
36.883 235.684 36.91 235.676 36.941 235.672 cv
36.98 235.676 37.039 235.699 37.121 235.746 cv
37.203 235.793 37.313 235.848 37.453 235.902 cv
37.59 235.961 37.762 236.012 37.969 236.062 cv
38.172 236.117 38.418 236.145 38.699 236.141 cv
38.961 236.145 39.199 236.113 39.422 236.047 cv
39.637 235.988 39.824 235.891 39.984 235.754 cv
40.141 235.625 40.266 235.457 40.355 235.254 cv
40.445 235.051 40.492 234.805 40.492 234.516 cv
40.492 234.273 40.453 234.062 40.379 233.875 cv
40.301 233.691 40.184 233.535 40.027 233.41 cv
39.867 233.289 39.668 233.199 39.426 233.137 cv
39.184 233.082 38.895 233.051 38.559 233.047 cv
38.32 233.051 38.113 233.062 37.945 233.082 cv
37.77 233.109 37.609 233.121 37.461 233.117 cv
37.348 233.121 37.27 233.094 37.227 233.039 cv
37.176 232.988 37.152 232.891 37.156 232.746 cv
37.156 229.656 li
37.152 229.531 37.184 229.434 37.246 229.371 cv
37.309 229.309 37.395 229.277 37.508 229.277 cv
40.867 229.277 li
40.898 229.277 40.926 229.289 40.957 229.305 cv
40.98 229.324 41.008 229.348 41.031 229.383 cv
41.051 229.422 41.063 229.469 41.074 229.52 cv
41.082 229.578 41.09 229.641 41.09 229.711 cv
41.09 229.852 41.07 229.961 41.031 230.039 cv
40.992 230.117 40.938 230.156 40.875 230.156 cv
38.164 230.156 li
38.164 232.281 li
38.293 232.266 38.43 232.254 38.57 232.25 cv
38.707 232.246 38.863 232.242 39.047 232.242 cv
39.461 232.242 39.828 232.297 40.141 232.398 cv
40.453 232.508 40.711 232.652 40.922 232.84 cv
41.129 233.027 41.289 233.258 41.398 233.527 cv
41.504 233.797 41.559 234.094 41.559 234.422 cv
cp
f
27.07 174.039 mo
42.261 174.039 li
42.261 188.691 li
27.07 188.691 li
cp
0 0 0 0 cmyk
ef
32.543 181.379 mo
32.543 181.707 32.523 182.039 32.484 182.375 cv
32.445 182.711 32.379 183.035 32.285 183.348 cv
32.191 183.66 32.063 183.953 31.906 184.219 cv
31.746 184.492 31.547 184.727 31.309 184.93 cv
31.066 185.133 30.781 185.293 30.453 185.406 cv
30.121 185.52 29.738 185.574 29.305 185.578 cv
29.133 185.574 28.969 185.562 28.813 185.547 cv
28.652 185.523 28.512 185.5 28.387 185.469 cv
28.258 185.437 28.152 185.406 28.066 185.371 cv
27.98 185.336 27.918 185.301 27.879 185.266 cv
27.84 185.23 27.809 185.184 27.793 185.121 cv
27.77 185.066 27.762 184.984 27.766 184.875 cv
27.762 184.797 27.766 184.727 27.773 184.672 cv
27.781 184.621 27.789 184.582 27.801 184.555 cv
27.813 184.531 27.828 184.516 27.852 184.5 cv
27.867 184.492 27.895 184.484 27.93 184.484 cv
27.973 184.484 28.035 184.5 28.113 184.527 cv
28.191 184.559 28.289 184.59 28.406 184.625 cv
28.523 184.664 28.664 184.699 28.828 184.723 cv
28.988 184.754 29.168 184.766 29.367 184.766 cv
29.746 184.766 30.07 184.695 30.344 184.547 cv
30.613 184.406 30.836 184.207 31.008 183.957 cv
31.18 183.711 31.309 183.426 31.395 183.102 cv
31.48 182.781 31.527 182.441 31.535 182.078 cv
31.328 182.199 31.078 182.305 30.793 182.398 cv
30.5 182.492 30.168 182.539 29.797 182.539 cv
29.371 182.539 29.016 182.484 28.73 182.367 cv
28.441 182.258 28.211 182.098 28.039 181.895 cv
27.863 181.695 27.738 181.461 27.664 181.184 cv
27.586 180.914 27.551 180.613 27.551 180.289 cv
27.551 179.953 27.598 179.637 27.695 179.332 cv
27.793 179.031 27.945 178.762 28.152 178.531 cv
28.359 178.305 28.625 178.121 28.945 177.98 cv
29.266 177.844 29.648 177.777 30.094 177.773 cv
30.41 177.777 30.688 177.816 30.934 177.895 cv
31.176 177.977 31.391 178.094 31.57 178.242 cv
31.75 178.398 31.902 178.578 32.027 178.789 cv
32.152 179 32.25 179.242 32.328 179.512 cv
32.402 179.781 32.457 180.074 32.492 180.387 cv
32.523 180.707 32.543 181.035 32.543 181.379 cv
cp
31.516 181.266 mo
31.512 180.77 31.48 180.348 31.418 180.004 cv
31.352 179.664 31.254 179.387 31.125 179.176 cv
30.992 178.965 30.832 178.812 30.648 178.719 cv
30.457 178.625 30.242 178.578 30 178.578 cv
29.742 178.578 29.523 178.625 29.348 178.715 cv
29.164 178.809 29.016 178.934 28.906 179.086 cv
28.789 179.242 28.707 179.414 28.652 179.609 cv
28.598 179.805 28.57 180.008 28.57 180.211 cv
28.57 180.445 28.594 180.656 28.645 180.848 cv
28.691 181.039 28.77 181.199 28.883 181.332 cv
28.988 181.465 29.133 181.57 29.309 181.641 cv
29.48 181.719 29.695 181.754 29.961 181.75 cv
30.25 181.754 30.535 181.711 30.809 181.617 cv
31.082 181.531 31.316 181.414 31.516 181.266 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
35.297 184.828 mo
35.297 185.109 35.25 185.293 35.156 185.387 cv
35.063 185.477 34.895 185.52 34.66 185.523 cv
34.422 185.52 34.262 185.477 34.172 185.387 cv
34.078 185.297 34.031 185.117 34.035 184.848 cv
34.031 184.57 34.078 184.387 34.172 184.293 cv
34.266 184.203 34.434 184.156 34.676 184.156 cv
34.91 184.156 35.07 184.203 35.16 184.293 cv
35.25 184.383 35.297 184.562 35.297 184.828 cv
cp
f
41.844 181.66 mo
41.84 182.242 41.793 182.773 41.707 183.254 cv
41.613 183.738 41.461 184.152 41.25 184.496 cv
41.031 184.84 40.754 185.109 40.414 185.297 cv
40.066 185.484 39.645 185.574 39.145 185.578 cv
38.668 185.574 38.266 185.492 37.941 185.324 cv
37.613 185.156 37.352 184.906 37.152 184.574 cv
36.949 184.246 36.805 183.84 36.727 183.355 cv
36.641 182.875 36.602 182.32 36.602 181.695 cv
36.602 181.117 36.648 180.59 36.742 180.105 cv
36.836 179.629 36.988 179.215 37.199 178.863 cv
37.41 178.52 37.688 178.25 38.031 178.059 cv
38.375 177.871 38.797 177.777 39.297 177.773 cv
39.773 177.777 40.176 177.863 40.504 178.031 cv
40.832 178.203 41.094 178.453 41.293 178.781 cv
41.492 179.113 41.633 179.52 41.719 180 cv
41.797 180.484 41.84 181.035 41.844 181.66 cv
cp
40.813 181.73 mo
40.809 181.355 40.797 181.016 40.773 180.711 cv
40.746 180.41 40.703 180.145 40.652 179.914 cv
40.598 179.687 40.531 179.492 40.445 179.32 cv
40.359 179.156 40.258 179.02 40.145 178.91 cv
40.023 178.809 39.891 178.73 39.742 178.676 cv
39.594 178.629 39.426 178.602 39.238 178.602 cv
38.906 178.602 38.637 178.68 38.43 178.836 cv
38.219 178.992 38.055 179.207 37.938 179.48 cv
37.82 179.754 37.738 180.074 37.695 180.441 cv
37.652 180.809 37.633 181.203 37.633 181.625 cv
37.633 182.195 37.66 182.68 37.719 183.07 cv
37.777 183.469 37.871 183.789 37.996 184.039 cv
38.121 184.289 38.281 184.473 38.484 184.586 cv
38.68 184.699 38.922 184.754 39.203 184.754 cv
39.422 184.754 39.613 184.719 39.781 184.648 cv
39.945 184.578 40.086 184.48 40.207 184.348 cv
40.324 184.219 40.426 184.059 40.504 183.875 cv
40.582 183.695 40.645 183.492 40.691 183.266 cv
40.738 183.043 40.77 182.805 40.785 182.543 cv
40.801 182.285 40.809 182.012 40.813 181.73 cv
cp
f
20.988 122.68 mo
42.261 122.68 li
42.261 137.328 li
20.988 137.328 li
cp
0 0 0 0 cmyk
ef
26.43 133.711 mo
26.426 133.785 26.422 133.848 26.414 133.898 cv
26.402 133.953 26.387 133.996 26.367 134.023 cv
26.344 134.059 26.32 134.082 26.297 134.09 cv
26.273 134.105 26.246 134.109 26.219 134.109 cv
22.258 134.109 li
22.23 134.109 22.207 134.105 22.184 134.09 cv
22.16 134.082 22.137 134.059 22.117 134.023 cv
22.094 133.996 22.078 133.953 22.066 133.898 cv
22.051 133.848 22.043 133.785 22.047 133.711 cv
22.043 133.641 22.051 133.582 22.066 133.531 cv
22.078 133.48 22.09 133.437 22.109 133.402 cv
22.125 133.371 22.148 133.348 22.172 133.328 cv
22.195 133.312 22.223 133.301 22.258 133.301 cv
23.844 133.301 li
23.844 127.535 li
22.375 128.406 li
22.301 128.453 22.242 128.477 22.199 128.48 cv
22.152 128.492 22.117 128.484 22.09 128.453 cv
22.059 128.43 22.039 128.387 22.031 128.328 cv
22.023 128.27 22.02 128.195 22.02 128.102 cv
22.02 128.039 22.02 127.98 22.027 127.934 cv
22.031 127.887 22.043 127.848 22.055 127.816 cv
22.063 127.785 22.078 127.758 22.102 127.734 cv
22.125 127.711 22.152 127.687 22.188 127.664 cv
23.938 126.547 li
23.949 126.535 23.969 126.523 23.996 126.516 cv
24.016 126.508 24.047 126.5 24.082 126.492 cv
24.113 126.484 24.152 126.48 24.203 126.48 cv
24.246 126.48 24.305 126.48 24.383 126.477 cv
24.473 126.48 24.551 126.484 24.617 126.488 cv
24.676 126.5 24.727 126.512 24.762 126.52 cv
24.793 126.535 24.816 126.551 24.832 126.57 cv
24.844 126.594 24.848 126.617 24.852 126.641 cv
24.852 133.301 li
26.219 133.301 li
26.246 133.301 26.277 133.312 26.309 133.328 cv
26.336 133.348 26.355 133.371 26.375 133.402 cv
26.391 133.437 26.406 133.48 26.414 133.531 cv
26.422 133.582 26.426 133.641 26.43 133.711 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.75 130.301 mo
32.746 130.883 32.699 131.414 32.613 131.895 cv
32.52 132.379 32.367 132.793 32.156 133.137 cv
31.938 133.48 31.66 133.75 31.32 133.937 cv
30.973 134.125 30.551 134.215 30.051 134.219 cv
29.574 134.215 29.172 134.133 28.848 133.965 cv
28.52 133.797 28.258 133.547 28.059 133.215 cv
27.855 132.887 27.711 132.48 27.633 131.996 cv
27.547 131.516 27.508 130.961 27.508 130.336 cv
27.508 129.758 27.555 129.23 27.648 128.746 cv
27.742 128.27 27.895 127.855 28.105 127.504 cv
28.316 127.16 28.594 126.891 28.938 126.699 cv
29.281 126.512 29.703 126.418 30.203 126.414 cv
30.68 126.418 31.082 126.504 31.41 126.672 cv
31.738 126.844 32 127.094 32.199 127.422 cv
32.398 127.754 32.539 128.16 32.625 128.641 cv
32.703 129.125 32.746 129.676 32.75 130.301 cv
cp
31.719 130.371 mo
31.715 129.996 31.703 129.656 31.68 129.352 cv
31.652 129.051 31.609 128.785 31.559 128.555 cv
31.504 128.328 31.438 128.133 31.352 127.961 cv
31.266 127.797 31.164 127.66 31.051 127.551 cv
30.93 127.449 30.797 127.371 30.648 127.316 cv
30.5 127.27 30.332 127.242 30.145 127.242 cv
29.813 127.242 29.543 127.32 29.336 127.477 cv
29.125 127.633 28.961 127.848 28.844 128.121 cv
28.727 128.395 28.645 128.715 28.602 129.082 cv
28.559 129.449 28.539 129.844 28.539 130.266 cv
28.539 130.836 28.566 131.32 28.625 131.711 cv
28.684 132.109 28.777 132.43 28.902 132.68 cv
29.027 132.93 29.188 133.113 29.391 133.227 cv
29.586 133.34 29.828 133.395 30.109 133.395 cv
30.328 133.395 30.52 133.359 30.688 133.289 cv
30.852 133.219 30.992 133.121 31.113 132.988 cv
31.23 132.859 31.332 132.699 31.41 132.516 cv
31.488 132.336 31.551 132.133 31.598 131.906 cv
31.645 131.684 31.676 131.445 31.691 131.184 cv
31.707 130.926 31.715 130.652 31.719 130.371 cv
cp
f
35.266 133.469 mo
35.266 133.75 35.219 133.934 35.125 134.027 cv
35.031 134.117 34.863 134.16 34.629 134.164 cv
34.391 134.16 34.23 134.117 34.141 134.027 cv
34.047 133.937 34 133.758 34.004 133.488 cv
34 133.211 34.047 133.027 34.141 132.934 cv
34.234 132.844 34.402 132.797 34.645 132.797 cv
34.879 132.797 35.039 132.844 35.129 132.934 cv
35.219 133.023 35.266 133.203 35.266 133.469 cv
cp
f
41.605 131.672 mo
41.605 132.078 41.535 132.441 41.398 132.758 cv
41.262 133.074 41.07 133.34 40.82 133.559 cv
40.57 133.777 40.27 133.941 39.926 134.051 cv
39.574 134.16 39.191 134.215 38.773 134.219 cv
38.535 134.215 38.313 134.199 38.105 134.168 cv
37.891 134.137 37.703 134.098 37.543 134.051 cv
37.375 134.004 37.242 133.957 37.141 133.906 cv
37.035 133.863 36.965 133.824 36.938 133.793 cv
36.906 133.766 36.887 133.742 36.875 133.715 cv
36.863 133.695 36.852 133.668 36.844 133.633 cv
36.828 133.602 36.824 133.559 36.824 133.508 cv
36.82 133.457 36.816 133.395 36.82 133.324 cv
36.816 133.262 36.82 133.203 36.828 133.148 cv
36.832 133.094 36.844 133.051 36.859 133.02 cv
36.875 132.988 36.891 132.965 36.914 132.945 cv
36.93 132.934 36.957 132.926 36.988 132.922 cv
37.027 132.926 37.086 132.949 37.168 132.996 cv
37.25 133.043 37.359 133.098 37.5 133.152 cv
37.637 133.211 37.809 133.262 38.016 133.312 cv
38.219 133.367 38.465 133.395 38.746 133.391 cv
39.008 133.395 39.246 133.363 39.469 133.297 cv
39.684 133.238 39.871 133.141 40.031 133.004 cv
40.188 132.875 40.313 132.707 40.402 132.504 cv
40.492 132.301 40.539 132.055 40.539 131.766 cv
40.539 131.523 40.5 131.312 40.426 131.125 cv
40.348 130.941 40.23 130.785 40.074 130.66 cv
39.914 130.539 39.715 130.449 39.473 130.387 cv
39.23 130.332 38.941 130.301 38.605 130.297 cv
38.367 130.301 38.16 130.312 37.992 130.332 cv
37.816 130.359 37.656 130.371 37.508 130.367 cv
37.395 130.371 37.316 130.344 37.273 130.289 cv
37.223 130.238 37.199 130.141 37.203 129.996 cv
37.203 126.906 li
37.199 126.781 37.23 126.684 37.293 126.621 cv
37.355 126.559 37.441 126.527 37.555 126.527 cv
40.914 126.527 li
40.945 126.527 40.973 126.539 41.004 126.555 cv
41.027 126.574 41.055 126.598 41.078 126.633 cv
41.098 126.672 41.109 126.719 41.121 126.77 cv
41.129 126.828 41.137 126.891 41.137 126.961 cv
41.137 127.102 41.117 127.211 41.078 127.289 cv
41.039 127.367 40.984 127.406 40.922 127.406 cv
38.211 127.406 li
38.211 129.531 li
38.34 129.516 38.477 129.504 38.617 129.5 cv
38.754 129.496 38.91 129.492 39.094 129.492 cv
39.508 129.492 39.875 129.547 40.188 129.648 cv
40.5 129.758 40.758 129.902 40.969 130.09 cv
41.176 130.277 41.336 130.508 41.445 130.777 cv
41.551 131.047 41.605 131.344 41.605 131.672 cv
cp
f
20.988 71.309 mo
42.261 71.309 li
42.261 85.961 li
20.988 85.961 li
cp
0 0 0 0 cmyk
ef
26.43 82.332 mo
26.426 82.406 26.422 82.469 26.414 82.52 cv
26.402 82.574 26.387 82.617 26.367 82.645 cv
26.344 82.68 26.32 82.703 26.297 82.711 cv
26.273 82.727 26.246 82.73 26.219 82.73 cv
22.258 82.73 li
22.23 82.73 22.207 82.727 22.184 82.711 cv
22.16 82.703 22.137 82.68 22.117 82.645 cv
22.094 82.617 22.078 82.574 22.066 82.52 cv
22.051 82.469 22.043 82.406 22.047 82.332 cv
22.043 82.262 22.051 82.203 22.066 82.152 cv
22.078 82.102 22.09 82.059 22.109 82.023 cv
22.125 81.992 22.148 81.969 22.172 81.949 cv
22.195 81.934 22.223 81.922 22.258 81.922 cv
23.844 81.922 li
23.844 76.156 li
22.375 77.027 li
22.301 77.074 22.242 77.098 22.199 77.102 cv
22.152 77.113 22.117 77.105 22.09 77.074 cv
22.059 77.051 22.039 77.008 22.031 76.949 cv
22.023 76.891 22.02 76.816 22.02 76.723 cv
22.02 76.66 22.02 76.602 22.027 76.555 cv
22.031 76.508 22.043 76.469 22.055 76.437 cv
22.063 76.406 22.078 76.379 22.102 76.355 cv
22.125 76.332 22.152 76.309 22.188 76.285 cv
23.938 75.168 li
23.949 75.156 23.969 75.145 23.996 75.137 cv
24.016 75.129 24.047 75.121 24.082 75.113 cv
24.113 75.105 24.152 75.102 24.203 75.102 cv
24.246 75.102 24.305 75.102 24.383 75.098 cv
24.473 75.102 24.551 75.105 24.617 75.109 cv
24.676 75.121 24.727 75.133 24.762 75.141 cv
24.793 75.156 24.816 75.172 24.832 75.191 cv
24.844 75.215 24.848 75.238 24.852 75.262 cv
24.852 81.922 li
26.219 81.922 li
26.246 81.922 26.277 81.934 26.309 81.949 cv
26.336 81.969 26.355 81.992 26.375 82.023 cv
26.391 82.059 26.406 82.102 26.414 82.152 cv
26.422 82.203 26.426 82.262 26.43 82.332 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.5 82.297 mo
32.5 82.367 32.492 82.43 32.484 82.484 cv
32.469 82.539 32.457 82.586 32.441 82.621 cv
32.426 82.66 32.402 82.687 32.371 82.703 cv
32.34 82.723 32.309 82.73 32.277 82.73 cv
28.086 82.73 li
28.031 82.73 27.984 82.727 27.945 82.711 cv
27.902 82.703 27.867 82.68 27.84 82.645 cv
27.809 82.617 27.785 82.57 27.773 82.508 cv
27.758 82.449 27.754 82.379 27.754 82.293 cv
27.754 82.219 27.754 82.148 27.762 82.086 cv
27.766 82.027 27.781 81.977 27.801 81.93 cv
27.82 81.887 27.844 81.844 27.875 81.797 cv
27.902 81.758 27.941 81.707 27.996 81.652 cv
29.512 80.094 li
29.859 79.734 30.137 79.414 30.352 79.129 cv
30.563 78.844 30.727 78.582 30.844 78.348 cv
30.953 78.113 31.031 77.902 31.07 77.711 cv
31.105 77.52 31.121 77.34 31.125 77.168 cv
31.121 77.004 31.094 76.844 31.039 76.691 cv
30.98 76.543 30.898 76.41 30.793 76.297 cv
30.684 76.187 30.551 76.098 30.391 76.027 cv
30.227 75.961 30.039 75.93 29.836 75.926 cv
29.586 75.93 29.367 75.961 29.172 76.027 cv
28.977 76.098 28.805 76.172 28.656 76.246 cv
28.508 76.328 28.383 76.398 28.289 76.461 cv
28.188 76.527 28.117 76.562 28.07 76.559 cv
28.039 76.562 28.012 76.555 27.992 76.535 cv
27.969 76.523 27.949 76.496 27.938 76.461 cv
27.922 76.43 27.914 76.383 27.906 76.32 cv
27.898 76.262 27.895 76.191 27.895 76.109 cv
27.895 76.051 27.895 76 27.898 75.957 cv
27.902 75.918 27.91 75.883 27.922 75.848 cv
27.93 75.82 27.941 75.789 27.961 75.758 cv
27.973 75.73 28.004 75.699 28.055 75.656 cv
28.098 75.617 28.18 75.559 28.297 75.488 cv
28.41 75.418 28.555 75.352 28.73 75.281 cv
28.902 75.215 29.094 75.156 29.305 75.105 cv
29.512 75.062 29.73 75.039 29.961 75.035 cv
30.328 75.039 30.648 75.09 30.926 75.191 cv
31.199 75.297 31.43 75.437 31.609 75.617 cv
31.789 75.797 31.926 76.008 32.02 76.246 cv
32.109 76.484 32.152 76.738 32.156 77.004 cv
32.152 77.254 32.133 77.496 32.09 77.73 cv
32.043 77.973 31.949 78.23 31.816 78.508 cv
31.676 78.789 31.477 79.102 31.215 79.441 cv
30.953 79.785 30.605 80.176 30.172 80.621 cv
28.973 81.875 li
32.273 81.875 li
32.301 81.875 32.332 81.887 32.363 81.902 cv
32.391 81.922 32.414 81.945 32.438 81.98 cv
32.453 82.02 32.469 82.066 32.484 82.113 cv
32.492 82.168 32.5 82.227 32.5 82.297 cv
cp
f
35.266 82.09 mo
35.266 82.371 35.219 82.555 35.125 82.648 cv
35.031 82.738 34.863 82.781 34.629 82.785 cv
34.391 82.781 34.23 82.738 34.141 82.648 cv
34.047 82.559 34 82.379 34.004 82.109 cv
34 81.832 34.047 81.648 34.141 81.555 cv
34.234 81.465 34.402 81.418 34.645 81.418 cv
34.879 81.418 35.039 81.465 35.129 81.555 cv
35.219 81.645 35.266 81.824 35.266 82.09 cv
cp
f
41.891 78.922 mo
41.887 79.504 41.84 80.035 41.754 80.516 cv
41.66 81 41.508 81.414 41.297 81.758 cv
41.078 82.102 40.801 82.371 40.461 82.559 cv
40.113 82.746 39.691 82.836 39.191 82.84 cv
38.715 82.836 38.313 82.754 37.988 82.586 cv
37.66 82.418 37.398 82.168 37.199 81.836 cv
36.996 81.508 36.852 81.102 36.773 80.617 cv
36.688 80.137 36.648 79.582 36.648 78.957 cv
36.648 78.379 36.695 77.852 36.789 77.367 cv
36.883 76.891 37.035 76.477 37.246 76.125 cv
37.457 75.781 37.734 75.512 38.078 75.32 cv
38.422 75.133 38.844 75.039 39.344 75.035 cv
39.82 75.039 40.223 75.125 40.551 75.293 cv
40.879 75.465 41.141 75.715 41.34 76.043 cv
41.539 76.375 41.68 76.781 41.766 77.262 cv
41.844 77.746 41.887 78.297 41.891 78.922 cv
cp
40.859 78.992 mo
40.855 78.617 40.844 78.277 40.82 77.973 cv
40.793 77.672 40.75 77.406 40.699 77.176 cv
40.645 76.949 40.578 76.754 40.492 76.582 cv
40.406 76.418 40.305 76.281 40.191 76.172 cv
40.07 76.07 39.938 75.992 39.789 75.937 cv
39.641 75.891 39.473 75.863 39.285 75.863 cv
38.953 75.863 38.684 75.941 38.477 76.098 cv
38.266 76.254 38.102 76.469 37.984 76.742 cv
37.867 77.016 37.785 77.336 37.742 77.703 cv
37.699 78.07 37.68 78.465 37.68 78.887 cv
37.68 79.457 37.707 79.941 37.766 80.332 cv
37.824 80.73 37.918 81.051 38.043 81.301 cv
38.168 81.551 38.328 81.734 38.531 81.848 cv
38.727 81.961 38.969 82.016 39.25 82.016 cv
39.469 82.016 39.66 81.98 39.828 81.91 cv
39.992 81.84 40.133 81.742 40.254 81.609 cv
40.371 81.48 40.473 81.32 40.551 81.137 cv
40.629 80.957 40.691 80.754 40.738 80.527 cv
40.785 80.305 40.816 80.066 40.832 79.805 cv
40.848 79.547 40.855 79.273 40.859 78.992 cv
cp
f
20.988 19.949 mo
42.261 19.949 li
42.261 34.601 li
20.988 34.601 li
cp
0 0 0 0 cmyk
ef
26.43 30.973 mo
26.426 31.047 26.422 31.109 26.414 31.16 cv
26.402 31.215 26.387 31.258 26.367 31.285 cv
26.344 31.32 26.32 31.344 26.297 31.352 cv
26.273 31.367 26.246 31.371 26.219 31.371 cv
22.258 31.371 li
22.23 31.371 22.207 31.367 22.184 31.352 cv
22.16 31.344 22.137 31.32 22.117 31.285 cv
22.094 31.258 22.078 31.215 22.066 31.16 cv
22.051 31.109 22.043 31.047 22.047 30.973 cv
22.043 30.902 22.051 30.844 22.066 30.793 cv
22.078 30.742 22.09 30.699 22.109 30.664 cv
22.125 30.633 22.148 30.609 22.172 30.59 cv
22.195 30.574 22.223 30.562 22.258 30.562 cv
23.844 30.562 li
23.844 24.797 li
22.375 25.668 li
22.301 25.715 22.242 25.738 22.199 25.742 cv
22.152 25.754 22.117 25.746 22.09 25.715 cv
22.059 25.691 22.039 25.648 22.031 25.59 cv
22.023 25.531 22.02 25.457 22.02 25.363 cv
22.02 25.301 22.02 25.242 22.027 25.195 cv
22.031 25.148 22.043 25.109 22.055 25.078 cv
22.063 25.047 22.078 25.02 22.102 24.996 cv
22.125 24.973 22.152 24.949 22.188 24.926 cv
23.938 23.809 li
23.949 23.797 23.969 23.785 23.996 23.777 cv
24.016 23.77 24.047 23.762 24.082 23.754 cv
24.113 23.746 24.152 23.742 24.203 23.742 cv
24.246 23.742 24.305 23.742 24.383 23.738 cv
24.473 23.742 24.551 23.746 24.617 23.75 cv
24.676 23.762 24.727 23.773 24.762 23.781 cv
24.793 23.797 24.816 23.812 24.832 23.832 cv
24.844 23.855 24.848 23.879 24.852 23.902 cv
24.852 30.562 li
26.219 30.562 li
26.246 30.562 26.277 30.574 26.309 30.59 cv
26.336 30.609 26.355 30.633 26.375 30.664 cv
26.391 30.699 26.406 30.742 26.414 30.793 cv
26.422 30.844 26.426 30.902 26.43 30.973 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.441 29.203 mo
32.441 29.551 32.379 29.867 32.258 30.145 cv
32.137 30.426 31.965 30.664 31.738 30.863 cv
31.512 31.062 31.23 31.215 30.898 31.32 cv
30.566 31.426 30.191 31.477 29.773 31.48 cv
29.52 31.477 29.281 31.457 29.063 31.418 cv
28.84 31.379 28.645 31.332 28.477 31.277 cv
28.301 31.223 28.16 31.164 28.047 31.102 cv
27.93 31.039 27.855 30.996 27.832 30.969 cv
27.801 30.941 27.781 30.914 27.766 30.887 cv
27.75 30.859 27.734 30.824 27.723 30.785 cv
27.711 30.746 27.703 30.699 27.695 30.645 cv
27.688 30.59 27.684 30.52 27.688 30.434 cv
27.684 30.293 27.699 30.195 27.73 30.141 cv
27.758 30.086 27.797 30.059 27.852 30.059 cv
27.887 30.059 27.957 30.09 28.063 30.152 cv
28.168 30.215 28.305 30.285 28.473 30.355 cv
28.637 30.434 28.832 30.5 29.055 30.559 cv
29.277 30.625 29.523 30.656 29.801 30.652 cv
30.059 30.656 30.293 30.621 30.496 30.551 cv
30.695 30.484 30.863 30.391 31 30.27 cv
31.137 30.152 31.238 30.012 31.309 29.84 cv
31.375 29.676 31.41 29.492 31.41 29.297 cv
31.41 29.082 31.363 28.891 31.277 28.715 cv
31.188 28.547 31.063 28.398 30.898 28.27 cv
30.73 28.148 30.523 28.051 30.281 27.984 cv
30.031 27.922 29.754 27.891 29.449 27.887 cv
28.707 27.887 li
28.672 27.891 28.641 27.883 28.609 27.867 cv
28.578 27.852 28.551 27.828 28.531 27.797 cv
28.508 27.766 28.488 27.727 28.477 27.676 cv
28.461 27.625 28.457 27.559 28.457 27.473 cv
28.457 27.402 28.461 27.34 28.473 27.289 cv
28.484 27.242 28.5 27.203 28.523 27.172 cv
28.539 27.145 28.566 27.125 28.598 27.109 cv
28.625 27.102 28.656 27.094 28.691 27.09 cv
29.352 27.09 li
29.609 27.094 29.84 27.059 30.047 26.988 cv
30.25 26.922 30.426 26.828 30.566 26.699 cv
30.707 26.578 30.816 26.43 30.895 26.254 cv
30.973 26.082 31.012 25.887 31.012 25.668 cv
31.012 25.516 30.984 25.367 30.934 25.223 cv
30.883 25.082 30.809 24.957 30.707 24.852 cv
30.605 24.746 30.473 24.664 30.316 24.602 cv
30.152 24.547 29.973 24.516 29.77 24.512 cv
29.543 24.516 29.332 24.551 29.145 24.613 cv
28.949 24.684 28.781 24.754 28.637 24.832 cv
28.484 24.91 28.363 24.984 28.27 25.051 cv
28.172 25.121 28.102 25.156 28.063 25.152 cv
28.035 25.156 28.012 25.152 27.992 25.141 cv
27.969 25.133 27.949 25.113 27.938 25.082 cv
27.922 25.055 27.914 25.012 27.906 24.957 cv
27.898 24.906 27.895 24.836 27.898 24.75 cv
27.895 24.691 27.898 24.641 27.906 24.594 cv
27.91 24.551 27.918 24.512 27.93 24.477 cv
27.938 24.445 27.949 24.414 27.969 24.387 cv
27.98 24.363 28.008 24.332 28.047 24.293 cv
28.086 24.254 28.16 24.199 28.273 24.129 cv
28.387 24.059 28.527 23.992 28.695 23.922 cv
28.859 23.855 29.051 23.797 29.27 23.746 cv
29.484 23.703 29.719 23.68 29.969 23.676 cv
30.32 23.68 30.629 23.723 30.895 23.812 cv
31.16 23.906 31.379 24.035 31.559 24.195 cv
31.734 24.363 31.867 24.559 31.957 24.785 cv
32.043 25.012 32.09 25.266 32.09 25.543 cv
32.09 25.781 32.059 26.004 31.996 26.207 cv
31.934 26.414 31.84 26.594 31.719 26.75 cv
31.598 26.91 31.449 27.047 31.273 27.156 cv
31.098 27.273 30.895 27.348 30.664 27.387 cv
30.664 27.398 li
30.926 27.43 31.164 27.496 31.383 27.598 cv
31.598 27.699 31.785 27.828 31.945 27.984 cv
32.098 28.141 32.219 28.324 32.309 28.535 cv
32.395 28.746 32.441 28.969 32.441 29.203 cv
cp
f
35.266 30.73 mo
35.266 31.012 35.219 31.195 35.125 31.289 cv
35.031 31.379 34.863 31.422 34.629 31.426 cv
34.391 31.422 34.23 31.379 34.141 31.289 cv
34.047 31.199 34 31.02 34.004 30.75 cv
34 30.473 34.047 30.289 34.141 30.195 cv
34.234 30.105 34.402 30.059 34.645 30.059 cv
34.879 30.059 35.039 30.105 35.129 30.195 cv
35.219 30.285 35.266 30.465 35.266 30.73 cv
cp
f
41.605 28.934 mo
41.605 29.34 41.535 29.703 41.398 30.02 cv
41.262 30.336 41.07 30.602 40.82 30.82 cv
40.57 31.039 40.27 31.203 39.926 31.312 cv
39.574 31.422 39.191 31.477 38.773 31.48 cv
38.535 31.477 38.313 31.461 38.105 31.43 cv
37.891 31.398 37.703 31.359 37.543 31.312 cv
37.375 31.266 37.242 31.219 37.141 31.168 cv
37.035 31.125 36.965 31.086 36.938 31.055 cv
36.906 31.027 36.887 31.004 36.875 30.977 cv
36.863 30.957 36.852 30.93 36.844 30.895 cv
36.828 30.863 36.824 30.82 36.824 30.77 cv
36.82 30.719 36.816 30.656 36.82 30.586 cv
36.816 30.523 36.82 30.465 36.828 30.41 cv
36.832 30.355 36.844 30.312 36.859 30.281 cv
36.875 30.25 36.891 30.227 36.914 30.207 cv
36.93 30.195 36.957 30.187 36.988 30.184 cv
37.027 30.187 37.086 30.211 37.168 30.258 cv
37.25 30.305 37.359 30.359 37.5 30.414 cv
37.637 30.473 37.809 30.523 38.016 30.574 cv
38.219 30.629 38.465 30.656 38.746 30.652 cv
39.008 30.656 39.246 30.625 39.469 30.559 cv
39.684 30.5 39.871 30.402 40.031 30.266 cv
40.188 30.137 40.313 29.969 40.402 29.766 cv
40.492 29.562 40.539 29.316 40.539 29.027 cv
40.539 28.785 40.5 28.574 40.426 28.387 cv
40.348 28.203 40.23 28.047 40.074 27.922 cv
39.914 27.801 39.715 27.711 39.473 27.648 cv
39.23 27.594 38.941 27.562 38.605 27.559 cv
38.367 27.562 38.16 27.574 37.992 27.594 cv
37.816 27.621 37.656 27.633 37.508 27.629 cv
37.395 27.633 37.316 27.605 37.273 27.551 cv
37.223 27.5 37.199 27.402 37.203 27.258 cv
37.203 24.168 li
37.199 24.043 37.23 23.945 37.293 23.883 cv
37.355 23.82 37.441 23.789 37.555 23.789 cv
40.914 23.789 li
40.945 23.789 40.973 23.801 41.004 23.816 cv
41.027 23.836 41.055 23.859 41.078 23.895 cv
41.098 23.934 41.109 23.98 41.121 24.031 cv
41.129 24.09 41.137 24.152 41.137 24.223 cv
41.137 24.363 41.117 24.473 41.078 24.551 cv
41.039 24.629 40.984 24.668 40.922 24.668 cv
38.211 24.668 li
38.211 26.793 li
38.34 26.777 38.477 26.766 38.617 26.762 cv
38.754 26.758 38.91 26.754 39.094 26.754 cv
39.508 26.754 39.875 26.809 40.188 26.91 cv
40.5 27.02 40.758 27.164 40.969 27.352 cv
41.176 27.539 41.336 27.77 41.445 28.039 cv
41.551 28.309 41.605 28.605 41.605 28.934 cv
cp
f
55.809 508.93 mo
55.805 509.004 55.801 509.066 55.793 509.117 cv
55.781 509.172 55.766 509.215 55.746 509.242 cv
55.723 509.277 55.699 509.301 55.676 509.309 cv
55.652 509.324 55.625 509.328 55.598 509.328 cv
51.637 509.328 li
51.609 509.328 51.586 509.324 51.563 509.309 cv
51.539 509.301 51.516 509.277 51.496 509.242 cv
51.473 509.215 51.457 509.172 51.445 509.117 cv
51.43 509.066 51.422 509.004 51.426 508.93 cv
51.422 508.859 51.43 508.801 51.445 508.75 cv
51.457 508.699 51.469 508.656 51.488 508.621 cv
51.504 508.59 51.527 508.566 51.551 508.547 cv
51.574 508.531 51.602 508.52 51.637 508.52 cv
53.223 508.52 li
53.223 502.754 li
51.754 503.625 li
51.68 503.672 51.621 503.695 51.578 503.699 cv
51.531 503.711 51.496 503.703 51.469 503.672 cv
51.438 503.648 51.418 503.605 51.41 503.547 cv
51.402 503.488 51.398 503.414 51.398 503.32 cv
51.398 503.258 51.398 503.199 51.406 503.152 cv
51.41 503.105 51.422 503.066 51.434 503.035 cv
51.441 503.004 51.457 502.977 51.48 502.953 cv
51.504 502.93 51.531 502.906 51.566 502.883 cv
53.316 501.766 li
53.328 501.754 53.348 501.742 53.375 501.734 cv
53.395 501.727 53.426 501.719 53.461 501.711 cv
53.492 501.703 53.531 501.699 53.582 501.699 cv
53.625 501.699 53.684 501.699 53.762 501.695 cv
53.852 501.699 53.93 501.703 53.996 501.707 cv
54.055 501.719 54.105 501.73 54.141 501.738 cv
54.172 501.754 54.195 501.77 54.211 501.789 cv
54.223 501.812 54.227 501.836 54.23 501.859 cv
54.23 508.52 li
55.598 508.52 li
55.625 508.52 55.656 508.531 55.688 508.547 cv
55.715 508.566 55.734 508.59 55.754 508.621 cv
55.77 508.656 55.785 508.699 55.793 508.75 cv
55.801 508.801 55.805 508.859 55.809 508.93 cv
cp
f
125.824 508.895 mo
125.824 508.965 125.816 509.027 125.809 509.082 cv
125.793 509.137 125.781 509.184 125.766 509.219 cv
125.75 509.258 125.727 509.285 125.695 509.301 cv
125.664 509.32 125.633 509.328 125.602 509.328 cv
121.41 509.328 li
121.355 509.328 121.309 509.324 121.27 509.309 cv
121.227 509.301 121.191 509.277 121.164 509.242 cv
121.133 509.215 121.109 509.168 121.098 509.105 cv
121.082 509.047 121.078 508.977 121.078 508.891 cv
121.078 508.816 121.078 508.746 121.086 508.684 cv
121.09 508.625 121.105 508.574 121.125 508.527 cv
121.145 508.484 121.168 508.441 121.199 508.395 cv
121.227 508.355 121.266 508.305 121.32 508.25 cv
122.836 506.691 li
123.184 506.332 123.461 506.012 123.676 505.727 cv
123.887 505.441 124.051 505.18 124.168 504.945 cv
124.277 504.711 124.355 504.5 124.395 504.309 cv
124.43 504.117 124.445 503.937 124.449 503.766 cv
124.445 503.602 124.418 503.441 124.363 503.289 cv
124.305 503.141 124.223 503.008 124.117 502.895 cv
124.008 502.785 123.875 502.695 123.715 502.625 cv
123.551 502.559 123.363 502.527 123.16 502.523 cv
122.91 502.527 122.691 502.559 122.496 502.625 cv
122.301 502.695 122.129 502.77 121.98 502.844 cv
121.832 502.926 121.707 502.996 121.613 503.059 cv
121.512 503.125 121.441 503.16 121.395 503.156 cv
121.363 503.16 121.336 503.152 121.316 503.133 cv
121.293 503.121 121.273 503.094 121.262 503.059 cv
121.246 503.027 121.238 502.98 121.23 502.918 cv
121.223 502.859 121.219 502.789 121.219 502.707 cv
121.219 502.648 121.219 502.598 121.223 502.555 cv
121.227 502.516 121.234 502.48 121.246 502.445 cv
121.254 502.418 121.266 502.387 121.285 502.355 cv
121.297 502.328 121.328 502.297 121.379 502.254 cv
121.422 502.215 121.504 502.156 121.621 502.086 cv
121.734 502.016 121.879 501.949 122.055 501.879 cv
122.227 501.812 122.418 501.754 122.629 501.703 cv
122.836 501.66 123.055 501.637 123.285 501.633 cv
123.652 501.637 123.973 501.687 124.25 501.789 cv
124.523 501.895 124.754 502.035 124.934 502.215 cv
125.113 502.395 125.25 502.605 125.344 502.844 cv
125.434 503.082 125.477 503.336 125.48 503.602 cv
125.477 503.852 125.457 504.094 125.414 504.328 cv
125.367 504.57 125.273 504.828 125.141 505.105 cv
125 505.387 124.801 505.699 124.539 506.039 cv
124.277 506.383 123.93 506.773 123.496 507.219 cv
122.297 508.473 li
125.598 508.473 li
125.625 508.473 125.656 508.484 125.688 508.5 cv
125.715 508.52 125.738 508.543 125.762 508.578 cv
125.777 508.617 125.793 508.664 125.809 508.711 cv
125.816 508.766 125.824 508.824 125.824 508.895 cv
cp
f
196.195 507.172 mo
196.191 507.305 196.172 507.406 196.137 507.477 cv
196.094 507.551 196.039 507.59 195.977 507.586 cv
195.117 507.586 li
195.117 509.18 li
195.113 509.215 195.105 509.242 195.094 509.262 cv
195.074 509.285 195.047 509.301 195.008 509.316 cv
194.969 509.332 194.914 509.344 194.852 509.352 cv
194.785 509.359 194.703 509.363 194.605 509.363 cv
194.504 509.363 194.426 509.359 194.363 509.352 cv
194.301 509.344 194.25 509.332 194.211 509.316 cv
194.172 509.301 194.145 509.285 194.129 509.262 cv
194.113 509.242 194.105 509.215 194.109 509.18 cv
194.109 507.586 li
191.008 507.586 li
190.961 507.59 190.926 507.582 190.895 507.57 cv
190.863 507.562 190.832 507.543 190.809 507.508 cv
190.777 507.48 190.762 507.434 190.754 507.371 cv
190.746 507.312 190.742 507.238 190.742 507.141 cv
190.742 507.07 190.742 507.004 190.746 506.945 cv
190.75 506.887 190.758 506.832 190.77 506.785 cv
190.781 506.738 190.797 506.691 190.816 506.645 cv
190.836 506.598 190.859 506.551 190.887 506.5 cv
193.59 501.891 li
193.609 501.863 193.637 501.836 193.676 501.809 cv
193.711 501.789 193.762 501.77 193.824 501.75 cv
193.883 501.738 193.953 501.727 194.043 501.719 cv
194.129 501.715 194.234 501.711 194.355 501.711 cv
194.484 501.711 194.598 501.719 194.695 501.727 cv
194.793 501.742 194.871 501.754 194.934 501.766 cv
194.988 501.785 195.035 501.805 195.07 501.828 cv
195.098 501.852 195.113 501.883 195.117 501.914 cv
195.117 506.758 li
195.977 506.758 li
196.039 506.762 196.094 506.797 196.133 506.859 cv
196.172 506.93 196.191 507.031 196.195 507.172 cv
cp
194.109 502.594 mo
194.102 502.594 li
191.664 506.758 li
194.109 506.758 li
cp
f
266.109 506.875 mo
266.105 507.207 266.055 507.527 265.957 507.84 cv
265.852 508.152 265.695 508.426 265.488 508.66 cv
265.273 508.895 265.008 509.086 264.684 509.227 cv
264.355 509.367 263.973 509.434 263.535 509.437 cv
263.219 509.434 262.938 509.398 262.699 509.32 cv
262.453 509.246 262.242 509.133 262.066 508.988 cv
261.883 508.848 261.734 508.672 261.617 508.457 cv
261.496 508.25 261.398 508.008 261.328 507.734 cv
261.25 507.465 261.199 507.172 261.172 506.848 cv
261.137 506.531 261.121 506.187 261.125 505.82 cv
261.121 505.496 261.141 505.168 261.18 504.836 cv
261.215 504.504 261.277 504.184 261.367 503.875 cv
261.453 503.566 261.574 503.277 261.73 503.004 cv
261.887 502.734 262.078 502.496 262.313 502.293 cv
262.543 502.094 262.824 501.934 263.148 501.816 cv
263.469 501.699 263.844 501.641 264.281 501.641 cv
264.422 501.641 264.57 501.652 264.719 501.668 cv
264.867 501.691 265.004 501.715 265.129 501.738 cv
265.254 501.77 265.359 501.801 265.445 501.836 cv
265.531 501.871 265.586 501.898 265.613 501.922 cv
265.641 501.945 265.66 501.969 265.676 501.992 cv
265.684 502.016 265.695 502.043 265.707 502.074 cv
265.711 502.105 265.719 502.141 265.727 502.172 cv
265.73 502.211 265.73 502.254 265.734 502.309 cv
265.73 502.379 265.73 502.441 265.73 502.492 cv
265.727 502.543 265.719 502.582 265.707 502.613 cv
265.691 502.645 265.672 502.668 265.652 502.684 cv
265.629 502.699 265.602 502.707 265.57 502.707 cv
265.523 502.707 265.465 502.695 265.391 502.668 cv
265.316 502.641 265.227 502.609 265.121 502.574 cv
265.016 502.543 264.887 502.512 264.738 502.484 cv
264.586 502.461 264.414 502.449 264.215 502.445 cv
263.852 502.449 263.539 502.523 263.277 502.668 cv
263.012 502.82 262.797 503.02 262.633 503.266 cv
262.469 503.52 262.344 503.809 262.266 504.137 cv
262.184 504.465 262.141 504.809 262.129 505.168 cv
262.23 505.109 262.344 505.051 262.473 504.992 cv
262.598 504.937 262.734 504.887 262.887 504.836 cv
263.035 504.793 263.195 504.754 263.363 504.723 cv
263.531 504.691 263.711 504.676 263.906 504.676 cv
264.313 504.676 264.66 504.734 264.941 504.844 cv
265.223 504.957 265.449 505.109 265.621 505.305 cv
265.793 505.504 265.918 505.738 265.996 506.004 cv
266.07 506.277 266.105 506.566 266.109 506.875 cv
cp
265.086 506.969 mo
265.082 506.742 265.059 506.535 265.02 506.348 cv
264.973 506.164 264.898 506.008 264.793 505.879 cv
264.688 505.75 264.547 505.648 264.371 505.578 cv
264.195 505.508 263.98 505.473 263.723 505.473 cv
263.578 505.473 263.434 505.488 263.289 505.512 cv
263.141 505.539 263 505.574 262.867 505.617 cv
262.734 505.664 262.605 505.715 262.48 505.777 cv
262.355 505.84 262.242 505.906 262.148 505.969 cv
262.145 506.477 262.176 506.898 262.242 507.238 cv
262.305 507.578 262.398 507.852 262.523 508.055 cv
262.645 508.262 262.801 508.406 262.984 508.492 cv
263.164 508.582 263.379 508.625 263.629 508.625 cv
263.879 508.625 264.094 508.578 264.277 508.484 cv
264.461 508.391 264.613 508.266 264.734 508.105 cv
264.855 507.949 264.945 507.773 265 507.574 cv
265.055 507.379 265.082 507.176 265.086 506.969 cv
cp
f
336.141 507.383 mo
336.141 507.711 336.082 508.004 335.965 508.258 cv
335.848 508.516 335.676 508.73 335.457 508.906 cv
335.234 509.086 334.965 509.219 334.641 509.305 cv
334.313 509.391 333.941 509.434 333.527 509.437 cv
333.137 509.434 332.785 509.395 332.477 509.316 cv
332.168 509.238 331.906 509.117 331.691 508.953 cv
331.477 508.793 331.313 508.598 331.199 508.359 cv
331.086 508.129 331.031 507.859 331.031 507.559 cv
331.031 507.324 331.07 507.105 331.148 506.902 cv
331.227 506.703 331.336 506.52 331.484 506.352 cv
331.629 506.187 331.813 506.031 332.027 505.883 cv
332.238 505.734 332.48 505.594 332.754 505.461 cv
332.52 505.344 332.313 505.219 332.133 505.078 cv
331.953 504.945 331.801 504.797 331.676 504.637 cv
331.551 504.48 331.453 504.312 331.391 504.129 cv
331.32 503.953 331.289 503.758 331.293 503.547 cv
331.289 503.285 331.336 503.035 331.438 502.801 cv
331.531 502.566 331.676 502.363 331.871 502.191 cv
332.059 502.02 332.305 501.887 332.609 501.785 cv
332.906 501.687 333.258 501.637 333.656 501.633 cv
334.039 501.637 334.367 501.684 334.648 501.773 cv
334.922 501.867 335.152 501.992 335.34 502.148 cv
335.52 502.309 335.656 502.492 335.742 502.707 cv
335.828 502.926 335.871 503.156 335.871 503.398 cv
335.871 503.598 335.836 503.789 335.773 503.973 cv
335.703 504.16 335.609 504.336 335.488 504.496 cv
335.359 504.664 335.207 504.816 335.027 504.957 cv
334.848 505.098 334.641 505.23 334.406 505.355 cv
334.684 505.496 334.93 505.637 335.148 505.777 cv
335.363 505.922 335.543 506.078 335.691 506.242 cv
335.832 506.41 335.945 506.586 336.023 506.77 cv
336.102 506.957 336.141 507.16 336.141 507.383 cv
cp
334.875 503.492 mo
334.875 503.328 334.844 503.18 334.789 503.047 cv
334.73 502.914 334.648 502.801 334.543 502.707 cv
334.43 502.613 334.293 502.543 334.133 502.496 cv
333.969 502.449 333.785 502.426 333.582 502.422 cv
333.156 502.426 332.836 502.52 332.621 502.707 cv
332.402 502.898 332.297 503.16 332.297 503.492 cv
332.297 503.645 332.32 503.789 332.375 503.918 cv
332.426 504.051 332.508 504.172 332.621 504.289 cv
332.73 504.406 332.871 504.523 333.043 504.633 cv
333.211 504.746 333.414 504.859 333.652 504.98 cv
334.043 504.777 334.348 504.555 334.559 504.309 cv
334.77 504.062 334.875 503.789 334.875 503.492 cv
cp
335.121 507.488 mo
335.121 507.309 335.086 507.148 335.02 507 cv
334.953 506.859 334.852 506.723 334.719 506.59 cv
334.582 506.465 334.414 506.34 334.215 506.219 cv
334.012 506.102 333.781 505.977 333.516 505.848 cv
333.266 505.973 333.047 506.094 332.867 506.211 cv
332.68 506.332 332.527 506.457 332.41 506.586 cv
332.285 506.719 332.195 506.855 332.141 506.996 cv
332.078 507.137 332.051 507.293 332.051 507.465 cv
332.051 507.844 332.18 508.137 332.441 508.344 cv
332.699 508.555 333.086 508.66 333.605 508.656 cv
334.102 508.66 334.48 508.555 334.738 508.344 cv
334.992 508.133 335.121 507.848 335.121 507.488 cv
cp
f
402.969 508.93 mo
402.965 509.004 402.961 509.066 402.953 509.117 cv
402.941 509.172 402.926 509.215 402.906 509.242 cv
402.883 509.277 402.859 509.301 402.836 509.309 cv
402.813 509.324 402.785 509.328 402.758 509.328 cv
398.797 509.328 li
398.77 509.328 398.746 509.324 398.723 509.309 cv
398.699 509.301 398.676 509.277 398.656 509.242 cv
398.633 509.215 398.617 509.172 398.605 509.117 cv
398.59 509.066 398.582 509.004 398.586 508.93 cv
398.582 508.859 398.59 508.801 398.605 508.75 cv
398.617 508.699 398.629 508.656 398.648 508.621 cv
398.664 508.59 398.688 508.566 398.711 508.547 cv
398.734 508.531 398.762 508.52 398.797 508.52 cv
400.383 508.52 li
400.383 502.754 li
398.914 503.625 li
398.84 503.672 398.781 503.695 398.738 503.699 cv
398.691 503.711 398.656 503.703 398.629 503.672 cv
398.598 503.648 398.578 503.605 398.57 503.547 cv
398.563 503.488 398.559 503.414 398.559 503.32 cv
398.559 503.258 398.559 503.199 398.566 503.152 cv
398.57 503.105 398.582 503.066 398.594 503.035 cv
398.602 503.004 398.617 502.977 398.641 502.953 cv
398.664 502.93 398.691 502.906 398.727 502.883 cv
400.477 501.766 li
400.488 501.754 400.508 501.742 400.535 501.734 cv
400.555 501.727 400.586 501.719 400.621 501.711 cv
400.652 501.703 400.691 501.699 400.742 501.699 cv
400.785 501.699 400.844 501.699 400.922 501.695 cv
401.012 501.699 401.09 501.703 401.156 501.707 cv
401.215 501.719 401.266 501.73 401.301 501.738 cv
401.332 501.754 401.355 501.77 401.371 501.789 cv
401.383 501.812 401.387 501.836 401.391 501.859 cv
401.391 508.52 li
402.758 508.52 li
402.785 508.52 402.816 508.531 402.848 508.547 cv
402.875 508.566 402.895 508.59 402.914 508.621 cv
402.93 508.656 402.945 508.699 402.953 508.75 cv
402.961 508.801 402.965 508.859 402.969 508.93 cv
cp
f
409.324 505.52 mo
409.32 506.102 409.273 506.633 409.188 507.113 cv
409.094 507.598 408.941 508.012 408.73 508.355 cv
408.512 508.699 408.234 508.969 407.895 509.156 cv
407.547 509.344 407.125 509.434 406.625 509.437 cv
406.148 509.434 405.746 509.352 405.422 509.184 cv
405.094 509.016 404.832 508.766 404.633 508.434 cv
404.43 508.105 404.285 507.699 404.207 507.215 cv
404.121 506.734 404.082 506.18 404.082 505.555 cv
404.082 504.977 404.129 504.449 404.223 503.965 cv
404.316 503.488 404.469 503.074 404.68 502.723 cv
404.891 502.379 405.168 502.109 405.512 501.918 cv
405.855 501.73 406.277 501.637 406.777 501.633 cv
407.254 501.637 407.656 501.723 407.984 501.891 cv
408.313 502.062 408.574 502.312 408.773 502.641 cv
408.973 502.973 409.113 503.379 409.199 503.859 cv
409.277 504.344 409.32 504.895 409.324 505.52 cv
cp
408.293 505.59 mo
408.289 505.215 408.277 504.875 408.254 504.57 cv
408.227 504.27 408.184 504.004 408.133 503.773 cv
408.078 503.547 408.012 503.352 407.926 503.18 cv
407.84 503.016 407.738 502.879 407.625 502.77 cv
407.504 502.668 407.371 502.59 407.223 502.535 cv
407.074 502.488 406.906 502.461 406.719 502.461 cv
406.387 502.461 406.117 502.539 405.91 502.695 cv
405.699 502.852 405.535 503.066 405.418 503.34 cv
405.301 503.613 405.219 503.934 405.176 504.301 cv
405.133 504.668 405.113 505.062 405.113 505.484 cv
405.113 506.055 405.141 506.539 405.199 506.93 cv
405.258 507.328 405.352 507.648 405.477 507.898 cv
405.602 508.148 405.762 508.332 405.965 508.445 cv
406.16 508.559 406.402 508.613 406.684 508.613 cv
406.902 508.613 407.094 508.578 407.262 508.508 cv
407.426 508.437 407.566 508.34 407.688 508.207 cv
407.805 508.078 407.906 507.918 407.984 507.734 cv
408.063 507.555 408.125 507.352 408.172 507.125 cv
408.219 506.902 408.25 506.664 408.266 506.402 cv
408.281 506.145 408.289 505.871 408.293 505.59 cv
cp
f
473.02 508.93 mo
473.016 509.004 473.012 509.066 473.004 509.117 cv
472.992 509.172 472.977 509.215 472.957 509.242 cv
472.934 509.277 472.91 509.301 472.887 509.309 cv
472.863 509.324 472.836 509.328 472.809 509.328 cv
468.848 509.328 li
468.82 509.328 468.797 509.324 468.773 509.309 cv
468.75 509.301 468.727 509.277 468.707 509.242 cv
468.684 509.215 468.668 509.172 468.656 509.117 cv
468.641 509.066 468.633 509.004 468.637 508.93 cv
468.633 508.859 468.641 508.801 468.656 508.75 cv
468.668 508.699 468.68 508.656 468.699 508.621 cv
468.715 508.59 468.738 508.566 468.762 508.547 cv
468.785 508.531 468.813 508.52 468.848 508.52 cv
470.434 508.52 li
470.434 502.754 li
468.965 503.625 li
468.891 503.672 468.832 503.695 468.789 503.699 cv
468.742 503.711 468.707 503.703 468.68 503.672 cv
468.648 503.648 468.629 503.605 468.621 503.547 cv
468.613 503.488 468.609 503.414 468.609 503.32 cv
468.609 503.258 468.609 503.199 468.617 503.152 cv
468.621 503.105 468.633 503.066 468.645 503.035 cv
468.652 503.004 468.668 502.977 468.691 502.953 cv
468.715 502.93 468.742 502.906 468.777 502.883 cv
470.527 501.766 li
470.539 501.754 470.559 501.742 470.586 501.734 cv
470.605 501.727 470.637 501.719 470.672 501.711 cv
470.703 501.703 470.742 501.699 470.793 501.699 cv
470.836 501.699 470.895 501.699 470.973 501.695 cv
471.063 501.699 471.141 501.703 471.207 501.707 cv
471.266 501.719 471.316 501.73 471.352 501.738 cv
471.383 501.754 471.406 501.77 471.422 501.789 cv
471.434 501.812 471.438 501.836 471.441 501.859 cv
471.441 508.52 li
472.809 508.52 li
472.836 508.52 472.867 508.531 472.898 508.547 cv
472.926 508.566 472.945 508.59 472.965 508.621 cv
472.98 508.656 472.996 508.699 473.004 508.75 cv
473.012 508.801 473.016 508.859 473.02 508.93 cv
cp
f
479.125 508.895 mo
479.125 508.965 479.117 509.027 479.109 509.082 cv
479.094 509.137 479.082 509.184 479.066 509.219 cv
479.051 509.258 479.027 509.285 478.996 509.301 cv
478.965 509.32 478.934 509.328 478.902 509.328 cv
474.711 509.328 li
474.656 509.328 474.609 509.324 474.57 509.309 cv
474.527 509.301 474.492 509.277 474.465 509.242 cv
474.434 509.215 474.41 509.168 474.398 509.105 cv
474.383 509.047 474.379 508.977 474.379 508.891 cv
474.379 508.816 474.379 508.746 474.387 508.684 cv
474.391 508.625 474.406 508.574 474.426 508.527 cv
474.445 508.484 474.469 508.441 474.5 508.395 cv
474.527 508.355 474.566 508.305 474.621 508.25 cv
476.137 506.691 li
476.484 506.332 476.762 506.012 476.977 505.727 cv
477.188 505.441 477.352 505.18 477.469 504.945 cv
477.578 504.711 477.656 504.5 477.695 504.309 cv
477.73 504.117 477.746 503.937 477.75 503.766 cv
477.746 503.602 477.719 503.441 477.664 503.289 cv
477.605 503.141 477.523 503.008 477.418 502.895 cv
477.309 502.785 477.176 502.695 477.016 502.625 cv
476.852 502.559 476.664 502.527 476.461 502.523 cv
476.211 502.527 475.992 502.559 475.797 502.625 cv
475.602 502.695 475.43 502.77 475.281 502.844 cv
475.133 502.926 475.008 502.996 474.914 503.059 cv
474.813 503.125 474.742 503.16 474.695 503.156 cv
474.664 503.16 474.637 503.152 474.617 503.133 cv
474.594 503.121 474.574 503.094 474.563 503.059 cv
474.547 503.027 474.539 502.98 474.531 502.918 cv
474.523 502.859 474.52 502.789 474.52 502.707 cv
474.52 502.648 474.52 502.598 474.523 502.555 cv
474.527 502.516 474.535 502.48 474.547 502.445 cv
474.555 502.418 474.566 502.387 474.586 502.355 cv
474.598 502.328 474.629 502.297 474.68 502.254 cv
474.723 502.215 474.805 502.156 474.922 502.086 cv
475.035 502.016 475.18 501.949 475.355 501.879 cv
475.527 501.812 475.719 501.754 475.93 501.703 cv
476.137 501.66 476.355 501.637 476.586 501.633 cv
476.953 501.637 477.273 501.687 477.551 501.789 cv
477.824 501.895 478.055 502.035 478.234 502.215 cv
478.414 502.395 478.551 502.605 478.645 502.844 cv
478.734 503.082 478.777 503.336 478.781 503.602 cv
478.777 503.852 478.758 504.094 478.715 504.328 cv
478.668 504.57 478.574 504.828 478.441 505.105 cv
478.301 505.387 478.102 505.699 477.84 506.039 cv
477.578 506.383 477.23 506.773 476.797 507.219 cv
475.598 508.473 li
478.898 508.473 li
478.926 508.473 478.957 508.484 478.988 508.5 cv
479.016 508.52 479.039 508.543 479.063 508.578 cv
479.078 508.617 479.094 508.664 479.109 508.711 cv
479.117 508.766 479.125 508.824 479.125 508.895 cv
cp
f
543.051 508.93 mo
543.047 509.004 543.043 509.066 543.035 509.117 cv
543.023 509.172 543.008 509.215 542.988 509.242 cv
542.965 509.277 542.941 509.301 542.918 509.309 cv
542.895 509.324 542.867 509.328 542.84 509.328 cv
538.879 509.328 li
538.852 509.328 538.828 509.324 538.805 509.309 cv
538.781 509.301 538.758 509.277 538.738 509.242 cv
538.715 509.215 538.699 509.172 538.688 509.117 cv
538.672 509.066 538.664 509.004 538.668 508.93 cv
538.664 508.859 538.672 508.801 538.688 508.75 cv
538.699 508.699 538.711 508.656 538.73 508.621 cv
538.746 508.59 538.77 508.566 538.793 508.547 cv
538.816 508.531 538.844 508.52 538.879 508.52 cv
540.465 508.52 li
540.465 502.754 li
538.996 503.625 li
538.922 503.672 538.863 503.695 538.82 503.699 cv
538.773 503.711 538.738 503.703 538.711 503.672 cv
538.68 503.648 538.66 503.605 538.652 503.547 cv
538.645 503.488 538.641 503.414 538.641 503.32 cv
538.641 503.258 538.641 503.199 538.648 503.152 cv
538.652 503.105 538.664 503.066 538.676 503.035 cv
538.684 503.004 538.699 502.977 538.723 502.953 cv
538.746 502.93 538.773 502.906 538.809 502.883 cv
540.559 501.766 li
540.57 501.754 540.59 501.742 540.617 501.734 cv
540.637 501.727 540.668 501.719 540.703 501.711 cv
540.734 501.703 540.773 501.699 540.824 501.699 cv
540.867 501.699 540.926 501.699 541.004 501.695 cv
541.094 501.699 541.172 501.703 541.238 501.707 cv
541.297 501.719 541.348 501.73 541.383 501.738 cv
541.414 501.754 541.438 501.77 541.453 501.789 cv
541.465 501.812 541.469 501.836 541.473 501.859 cv
541.473 508.52 li
542.84 508.52 li
542.867 508.52 542.898 508.531 542.93 508.547 cv
542.957 508.566 542.977 508.59 542.996 508.621 cv
543.012 508.656 543.027 508.699 543.035 508.75 cv
543.043 508.801 543.047 508.859 543.051 508.93 cv
cp
f
549.473 507.172 mo
549.469 507.305 549.449 507.406 549.414 507.477 cv
549.371 507.551 549.316 507.59 549.254 507.586 cv
548.395 507.586 li
548.395 509.18 li
548.391 509.215 548.383 509.242 548.371 509.262 cv
548.352 509.285 548.324 509.301 548.285 509.316 cv
548.246 509.332 548.191 509.344 548.129 509.352 cv
548.063 509.359 547.98 509.363 547.883 509.363 cv
547.781 509.363 547.703 509.359 547.641 509.352 cv
547.578 509.344 547.527 509.332 547.488 509.316 cv
547.449 509.301 547.422 509.285 547.406 509.262 cv
547.391 509.242 547.383 509.215 547.387 509.18 cv
547.387 507.586 li
544.285 507.586 li
544.238 507.59 544.203 507.582 544.172 507.57 cv
544.141 507.562 544.109 507.543 544.086 507.508 cv
544.055 507.48 544.039 507.434 544.031 507.371 cv
544.023 507.312 544.02 507.238 544.02 507.141 cv
544.02 507.07 544.02 507.004 544.023 506.945 cv
544.027 506.887 544.035 506.832 544.047 506.785 cv
544.059 506.738 544.074 506.691 544.094 506.645 cv
544.113 506.598 544.137 506.551 544.164 506.5 cv
546.867 501.891 li
546.887 501.863 546.914 501.836 546.953 501.809 cv
546.988 501.789 547.039 501.77 547.102 501.75 cv
547.16 501.738 547.23 501.727 547.32 501.719 cv
547.406 501.715 547.512 501.711 547.633 501.711 cv
547.762 501.711 547.875 501.719 547.973 501.727 cv
548.07 501.742 548.148 501.754 548.211 501.766 cv
548.266 501.785 548.313 501.805 548.348 501.828 cv
548.375 501.852 548.391 501.883 548.395 501.914 cv
548.395 506.758 li
549.254 506.758 li
549.316 506.762 549.371 506.797 549.41 506.859 cv
549.449 506.93 549.469 507.031 549.473 507.172 cv
cp
547.387 502.594 mo
547.379 502.594 li
544.941 506.758 li
547.387 506.758 li
cp
f
613.109 508.93 mo
613.105 509.004 613.102 509.066 613.094 509.117 cv
613.082 509.172 613.066 509.215 613.047 509.242 cv
613.023 509.277 613 509.301 612.977 509.309 cv
612.953 509.324 612.926 509.328 612.898 509.328 cv
608.938 509.328 li
608.91 509.328 608.887 509.324 608.863 509.309 cv
608.84 509.301 608.816 509.277 608.797 509.242 cv
608.773 509.215 608.758 509.172 608.746 509.117 cv
608.73 509.066 608.723 509.004 608.727 508.93 cv
608.723 508.859 608.73 508.801 608.746 508.75 cv
608.758 508.699 608.77 508.656 608.789 508.621 cv
608.805 508.59 608.828 508.566 608.852 508.547 cv
608.875 508.531 608.902 508.52 608.938 508.52 cv
610.523 508.52 li
610.523 502.754 li
609.055 503.625 li
608.98 503.672 608.922 503.695 608.879 503.699 cv
608.832 503.711 608.797 503.703 608.77 503.672 cv
608.738 503.648 608.719 503.605 608.711 503.547 cv
608.703 503.488 608.699 503.414 608.699 503.32 cv
608.699 503.258 608.699 503.199 608.707 503.152 cv
608.711 503.105 608.723 503.066 608.734 503.035 cv
608.742 503.004 608.758 502.977 608.781 502.953 cv
608.805 502.93 608.832 502.906 608.867 502.883 cv
610.617 501.766 li
610.629 501.754 610.648 501.742 610.676 501.734 cv
610.695 501.727 610.727 501.719 610.762 501.711 cv
610.793 501.703 610.832 501.699 610.883 501.699 cv
610.926 501.699 610.984 501.699 611.063 501.695 cv
611.152 501.699 611.23 501.703 611.297 501.707 cv
611.355 501.719 611.406 501.73 611.441 501.738 cv
611.473 501.754 611.496 501.77 611.512 501.789 cv
611.523 501.812 611.527 501.836 611.531 501.859 cv
611.531 508.52 li
612.898 508.52 li
612.926 508.52 612.957 508.531 612.988 508.547 cv
613.016 508.566 613.035 508.59 613.055 508.621 cv
613.07 508.656 613.086 508.699 613.094 508.75 cv
613.102 508.801 613.105 508.859 613.109 508.93 cv
cp
f
619.41 506.875 mo
619.406 507.207 619.355 507.527 619.258 507.84 cv
619.152 508.152 618.996 508.426 618.789 508.66 cv
618.574 508.895 618.309 509.086 617.984 509.227 cv
617.656 509.367 617.273 509.434 616.836 509.437 cv
616.52 509.434 616.238 509.398 616 509.32 cv
615.754 509.246 615.543 509.133 615.367 508.988 cv
615.184 508.848 615.035 508.672 614.918 508.457 cv
614.797 508.25 614.699 508.008 614.629 507.734 cv
614.551 507.465 614.5 507.172 614.473 506.848 cv
614.438 506.531 614.422 506.187 614.426 505.82 cv
614.422 505.496 614.441 505.168 614.48 504.836 cv
614.516 504.504 614.578 504.184 614.668 503.875 cv
614.754 503.566 614.875 503.277 615.031 503.004 cv
615.188 502.734 615.379 502.496 615.613 502.293 cv
615.844 502.094 616.125 501.934 616.449 501.816 cv
616.77 501.699 617.145 501.641 617.582 501.641 cv
617.723 501.641 617.871 501.652 618.02 501.668 cv
618.168 501.691 618.305 501.715 618.43 501.738 cv
618.555 501.77 618.66 501.801 618.746 501.836 cv
618.832 501.871 618.887 501.898 618.914 501.922 cv
618.941 501.945 618.961 501.969 618.977 501.992 cv
618.984 502.016 618.996 502.043 619.008 502.074 cv
619.012 502.105 619.02 502.141 619.027 502.172 cv
619.031 502.211 619.031 502.254 619.035 502.309 cv
619.031 502.379 619.031 502.441 619.031 502.492 cv
619.027 502.543 619.02 502.582 619.008 502.613 cv
618.992 502.645 618.973 502.668 618.953 502.684 cv
618.93 502.699 618.902 502.707 618.871 502.707 cv
618.824 502.707 618.766 502.695 618.691 502.668 cv
618.617 502.641 618.527 502.609 618.422 502.574 cv
618.316 502.543 618.188 502.512 618.039 502.484 cv
617.887 502.461 617.715 502.449 617.516 502.445 cv
617.152 502.449 616.84 502.523 616.578 502.668 cv
616.313 502.82 616.098 503.02 615.934 503.266 cv
615.77 503.52 615.645 503.809 615.566 504.137 cv
615.484 504.465 615.441 504.809 615.43 505.168 cv
615.531 505.109 615.645 505.051 615.773 504.992 cv
615.898 504.937 616.035 504.887 616.188 504.836 cv
616.336 504.793 616.496 504.754 616.664 504.723 cv
616.832 504.691 617.012 504.676 617.207 504.676 cv
617.613 504.676 617.961 504.734 618.242 504.844 cv
618.523 504.957 618.75 505.109 618.922 505.305 cv
619.094 505.504 619.219 505.738 619.297 506.004 cv
619.371 506.277 619.406 506.566 619.41 506.875 cv
cp
618.387 506.969 mo
618.383 506.742 618.359 506.535 618.32 506.348 cv
618.273 506.164 618.199 506.008 618.094 505.879 cv
617.988 505.75 617.848 505.648 617.672 505.578 cv
617.496 505.508 617.281 505.473 617.023 505.473 cv
616.879 505.473 616.734 505.488 616.59 505.512 cv
616.441 505.539 616.301 505.574 616.168 505.617 cv
616.035 505.664 615.906 505.715 615.781 505.777 cv
615.656 505.84 615.543 505.906 615.449 505.969 cv
615.445 506.477 615.477 506.898 615.543 507.238 cv
615.605 507.578 615.699 507.852 615.824 508.055 cv
615.945 508.262 616.102 508.406 616.285 508.492 cv
616.465 508.582 616.68 508.625 616.93 508.625 cv
617.18 508.625 617.395 508.578 617.578 508.484 cv
617.762 508.391 617.914 508.266 618.035 508.105 cv
618.156 507.949 618.246 507.773 618.301 507.574 cv
618.355 507.379 618.383 507.176 618.387 506.969 cv
cp
f
16.957 325.652 mo
17 325.656 17.035 325.664 17.066 325.676 cv
17.098 325.695 17.125 325.73 17.145 325.777 cv
17.164 325.832 17.176 325.902 17.191 325.996 cv
17.199 326.09 17.207 326.215 17.207 326.371 cv
17.207 326.508 17.199 326.621 17.191 326.703 cv
17.176 326.789 17.164 326.855 17.141 326.906 cv
17.121 326.961 17.086 327 17.043 327.027 cv
17.004 327.059 16.953 327.086 16.887 327.102 cv
14.512 328.031 li
14.242 328.145 13.996 328.258 13.766 328.371 cv
13.543 328.488 13.348 328.625 13.184 328.785 cv
13.023 328.949 12.895 329.141 12.801 329.355 cv
12.711 329.578 12.668 329.84 12.664 330.141 cv
12.664 331.039 li
16.957 331.039 li
17 331.043 17.035 331.055 17.066 331.074 cv
17.098 331.102 17.125 331.137 17.141 331.184 cv
17.16 331.234 17.172 331.301 17.188 331.387 cv
17.199 331.473 17.207 331.582 17.207 331.707 cv
17.207 331.84 17.199 331.945 17.188 332.031 cv
17.172 332.117 17.16 332.187 17.141 332.238 cv
17.125 332.293 17.098 332.328 17.066 332.348 cv
17.035 332.371 17 332.383 16.957 332.379 cv
7.621 332.379 li
7.418 332.383 7.277 332.328 7.195 332.219 cv
7.117 332.113 7.078 332 7.074 331.879 cv
7.074 329.738 li
7.078 329.488 7.082 329.273 7.094 329.102 cv
7.109 328.934 7.125 328.781 7.137 328.645 cv
7.207 328.258 7.313 327.914 7.457 327.613 cv
7.605 327.316 7.793 327.066 8.012 326.863 cv
8.238 326.66 8.492 326.508 8.781 326.406 cv
9.07 326.305 9.391 326.254 9.734 326.254 cv
10.074 326.254 10.375 326.301 10.641 326.391 cv
10.91 326.484 11.148 326.617 11.352 326.785 cv
11.563 326.957 11.738 327.16 11.887 327.398 cv
12.035 327.641 12.164 327.91 12.266 328.203 cv
12.344 328.039 12.434 327.887 12.543 327.75 cv
12.656 327.617 12.793 327.492 12.945 327.371 cv
13.105 327.258 13.285 327.145 13.484 327.039 cv
13.688 326.937 13.914 326.836 14.168 326.727 cv
16.387 325.824 li
16.574 325.754 16.707 325.707 16.781 325.684 cv
16.859 325.668 16.918 325.656 16.957 325.652 cv
cp
9.875 327.672 mo
9.484 327.672 9.148 327.762 8.875 327.937 cv
8.602 328.117 8.406 328.414 8.285 328.824 cv
8.25 328.957 8.223 329.102 8.207 329.266 cv
8.191 329.43 8.184 329.645 8.184 329.906 cv
8.184 331.039 li
11.582 331.039 li
11.582 329.73 li
11.582 329.379 11.539 329.074 11.453 328.812 cv
11.367 328.559 11.25 328.344 11.094 328.172 cv
10.945 328.004 10.762 327.879 10.551 327.793 cv
10.344 327.715 10.121 327.672 9.875 327.672 cv
cp
f
16.965 317.855 mo
17.012 317.859 17.047 317.867 17.07 317.883 cv
17.102 317.902 17.125 317.937 17.145 317.98 cv
17.164 318.027 17.176 318.086 17.191 318.16 cv
17.199 318.238 17.207 318.332 17.207 318.437 cv
17.207 318.562 17.199 318.66 17.191 318.73 cv
17.176 318.809 17.164 318.867 17.145 318.91 cv
17.125 318.957 17.102 318.988 17.07 319 cv
17.047 319.02 17.012 319.027 16.965 319.023 cv
16.039 319.023 li
16.484 319.426 16.805 319.82 17.004 320.207 cv
17.207 320.602 17.305 320.996 17.309 321.391 cv
17.305 321.863 17.23 322.258 17.074 322.574 cv
16.922 322.895 16.711 323.152 16.441 323.348 cv
16.176 323.551 15.863 323.691 15.504 323.773 cv
15.148 323.863 14.715 323.906 14.207 323.902 cv
9.953 323.902 li
9.914 323.906 9.879 323.898 9.848 323.875 cv
9.82 323.859 9.797 323.824 9.77 323.77 cv
9.75 323.723 9.734 323.652 9.723 323.566 cv
9.719 323.484 9.715 323.383 9.711 323.254 cv
9.715 323.133 9.719 323.027 9.723 322.941 cv
9.734 322.859 9.75 322.793 9.77 322.746 cv
9.797 322.699 9.82 322.664 9.848 322.641 cv
9.879 322.621 9.914 322.613 9.953 322.609 cv
14.035 322.609 li
14.449 322.613 14.777 322.582 15.023 322.52 cv
15.27 322.461 15.48 322.371 15.652 322.246 cv
15.832 322.129 15.965 321.973 16.059 321.781 cv
16.156 321.598 16.207 321.379 16.203 321.129 cv
16.207 320.809 16.09 320.488 15.859 320.164 cv
15.633 319.848 15.297 319.508 14.852 319.148 cv
9.953 319.148 li
9.914 319.148 9.879 319.141 9.848 319.121 cv
9.82 319.105 9.797 319.07 9.77 319.016 cv
9.75 318.965 9.734 318.898 9.723 318.816 cv
9.719 318.738 9.715 318.633 9.711 318.5 cv
9.715 318.379 9.719 318.273 9.723 318.187 cv
9.734 318.105 9.75 318.043 9.77 317.996 cv
9.797 317.953 9.82 317.918 9.848 317.891 cv
9.879 317.871 9.914 317.859 9.953 317.855 cv
cp
f
16.965 309.445 mo
17.012 309.445 17.047 309.457 17.07 309.477 cv
17.102 309.5 17.125 309.535 17.145 309.578 cv
17.164 309.629 17.176 309.691 17.191 309.773 cv
17.199 309.855 17.207 309.961 17.207 310.082 cv
17.207 310.215 17.199 310.32 17.191 310.402 cv
17.176 310.488 17.164 310.555 17.145 310.598 cv
17.125 310.648 17.102 310.68 17.07 310.699 cv
17.047 310.723 17.012 310.734 16.965 310.73 cv
12.859 310.73 li
12.461 310.734 12.141 310.766 11.895 310.824 cv
11.652 310.891 11.441 310.98 11.262 311.098 cv
11.086 311.215 10.949 311.371 10.855 311.559 cv
10.762 311.754 10.715 311.973 10.715 312.219 cv
10.715 312.543 10.832 312.867 11.059 313.187 cv
11.293 313.512 11.625 313.848 12.063 314.199 cv
16.965 314.199 li
17.012 314.203 17.047 314.215 17.07 314.23 cv
17.102 314.254 17.125 314.285 17.145 314.332 cv
17.164 314.379 17.176 314.445 17.191 314.523 cv
17.199 314.609 17.207 314.715 17.207 314.844 cv
17.207 314.973 17.199 315.078 17.191 315.156 cv
17.176 315.242 17.164 315.309 17.145 315.355 cv
17.125 315.41 17.102 315.441 17.07 315.457 cv
17.047 315.477 17.012 315.488 16.965 315.484 cv
9.953 315.484 li
9.914 315.488 9.879 315.48 9.848 315.461 cv
9.82 315.449 9.797 315.418 9.77 315.367 cv
9.75 315.324 9.734 315.262 9.723 315.187 cv
9.719 315.117 9.715 315.023 9.711 314.898 cv
9.715 314.789 9.719 314.691 9.723 314.613 cv
9.734 314.539 9.75 314.48 9.77 314.437 cv
9.797 314.398 9.82 314.371 9.848 314.352 cv
9.879 314.336 9.914 314.328 9.953 314.324 cv
10.879 314.324 li
10.438 313.934 10.117 313.539 9.91 313.145 cv
9.707 312.754 9.602 312.355 9.602 311.953 cv
9.602 311.484 9.684 311.094 9.84 310.773 cv
10.004 310.457 10.215 310.195 10.477 309.996 cv
10.742 309.801 11.051 309.66 11.406 309.574 cv
11.762 309.488 12.191 309.445 12.688 309.445 cv
cp
f
16.449 303.52 mo
16.605 303.52 16.723 303.531 16.809 303.551 cv
16.898 303.574 16.965 303.605 17.004 303.645 cv
17.047 303.687 17.086 303.75 17.121 303.832 cv
17.156 303.918 17.184 304.012 17.211 304.117 cv
17.23 304.227 17.25 304.34 17.27 304.457 cv
17.281 304.574 17.289 304.695 17.293 304.812 cv
17.289 305.18 17.242 305.492 17.148 305.75 cv
17.055 306.012 16.91 306.223 16.711 306.387 cv
16.52 306.555 16.273 306.676 15.973 306.75 cv
15.676 306.828 15.324 306.867 14.914 306.863 cv
10.816 306.863 li
10.816 307.844 li
10.82 307.922 10.777 307.984 10.691 308.031 cv
10.609 308.078 10.477 308.102 10.285 308.102 cv
10.191 308.102 10.109 308.098 10.039 308.082 cv
9.977 308.074 9.918 308.055 9.871 308.031 cv
9.828 308.012 9.797 307.984 9.777 307.949 cv
9.762 307.918 9.754 307.883 9.75 307.836 cv
9.75 306.863 li
8.082 306.863 li
8.051 306.867 8.016 306.855 7.98 306.836 cv
7.953 306.82 7.926 306.789 7.898 306.734 cv
7.879 306.687 7.863 306.621 7.848 306.535 cv
7.84 306.457 7.832 306.352 7.832 306.223 cv
7.832 306.094 7.84 305.988 7.848 305.906 cv
7.863 305.824 7.879 305.758 7.898 305.711 cv
7.926 305.664 7.953 305.633 7.98 305.609 cv
8.016 305.594 8.051 305.582 8.082 305.578 cv
9.75 305.578 li
9.75 303.777 li
9.754 303.738 9.762 303.703 9.777 303.668 cv
9.797 303.641 9.828 303.613 9.871 303.586 cv
9.918 303.566 9.977 303.551 10.039 303.535 cv
10.109 303.527 10.191 303.52 10.285 303.52 cv
10.477 303.52 10.609 303.543 10.691 303.59 cv
10.777 303.637 10.82 303.699 10.816 303.777 cv
10.816 305.578 li
14.73 305.578 li
15.215 305.582 15.578 305.512 15.824 305.363 cv
16.074 305.223 16.199 304.965 16.195 304.594 cv
16.199 304.48 16.188 304.375 16.16 304.277 cv
16.141 304.187 16.117 304.105 16.086 304.027 cv
16.063 303.957 16.035 303.895 16.012 303.84 cv
15.988 303.793 15.977 303.746 15.977 303.699 cv
15.977 303.676 15.984 303.648 15.996 303.625 cv
16.012 303.602 16.035 303.586 16.07 303.57 cv
16.109 303.562 16.16 303.551 16.219 303.535 cv
16.285 303.527 16.363 303.52 16.449 303.52 cv
cp
f
16.965 300.504 mo
17.012 300.508 17.047 300.52 17.07 300.535 cv
17.102 300.559 17.125 300.59 17.145 300.637 cv
17.164 300.684 17.176 300.75 17.191 300.828 cv
17.199 300.914 17.207 301.02 17.207 301.148 cv
17.207 301.277 17.199 301.383 17.191 301.461 cv
17.176 301.547 17.164 301.613 17.145 301.66 cv
17.125 301.715 17.102 301.746 17.07 301.762 cv
17.047 301.781 17.012 301.793 16.965 301.789 cv
9.953 301.789 li
9.918 301.793 9.887 301.781 9.852 301.762 cv
9.824 301.746 9.797 301.715 9.773 301.66 cv
9.754 301.613 9.738 301.547 9.727 301.461 cv
9.719 301.383 9.715 301.277 9.711 301.148 cv
9.715 301.02 9.719 300.914 9.727 300.828 cv
9.738 300.75 9.754 300.684 9.773 300.637 cv
9.797 300.59 9.824 300.559 9.852 300.535 cv
9.887 300.52 9.918 300.508 9.953 300.504 cv
cp
7.582 300.355 mo
7.887 300.355 8.094 300.414 8.199 300.527 cv
8.313 300.641 8.367 300.852 8.363 301.156 cv
8.367 301.461 8.313 301.668 8.203 301.777 cv
8.098 301.895 7.895 301.949 7.598 301.945 cv
7.297 301.949 7.094 301.891 6.984 301.773 cv
6.879 301.66 6.824 301.449 6.82 301.141 cv
6.824 300.84 6.879 300.637 6.98 300.523 cv
7.09 300.414 7.289 300.355 7.582 300.355 cv
cp
f
16.965 287.68 mo
17.012 287.684 17.047 287.691 17.07 287.711 cv
17.102 287.734 17.125 287.77 17.145 287.812 cv
17.164 287.863 17.176 287.93 17.191 288.008 cv
17.199 288.094 17.207 288.195 17.207 288.32 cv
17.207 288.453 17.199 288.562 17.191 288.641 cv
17.176 288.727 17.164 288.793 17.145 288.84 cv
17.125 288.895 17.102 288.93 17.07 288.945 cv
17.047 288.969 17.012 288.977 16.965 288.977 cv
12.703 288.977 li
12.41 288.977 12.141 289.004 11.895 289.055 cv
11.652 289.109 11.441 289.191 11.262 289.305 cv
11.086 289.418 10.949 289.562 10.855 289.738 cv
10.762 289.918 10.715 290.129 10.715 290.363 cv
10.715 290.66 10.832 290.957 11.059 291.254 cv
11.293 291.559 11.625 291.887 12.063 292.242 cv
16.965 292.242 li
17.012 292.246 17.047 292.258 17.07 292.273 cv
17.102 292.297 17.125 292.328 17.145 292.375 cv
17.164 292.426 17.176 292.492 17.191 292.574 cv
17.199 292.66 17.207 292.766 17.207 292.887 cv
17.207 293.008 17.199 293.109 17.191 293.195 cv
17.176 293.281 17.164 293.352 17.145 293.398 cv
17.125 293.453 17.102 293.484 17.07 293.5 cv
17.047 293.52 17.012 293.531 16.965 293.527 cv
12.703 293.527 li
12.41 293.531 12.141 293.559 11.895 293.613 cv
11.652 293.672 11.441 293.758 11.262 293.871 cv
11.086 293.984 10.949 294.129 10.855 294.301 cv
10.762 294.48 10.715 294.687 10.715 294.922 cv
10.715 295.223 10.832 295.52 11.059 295.82 cv
11.293 296.121 11.625 296.449 12.063 296.801 cv
16.965 296.801 li
17.012 296.805 17.047 296.816 17.07 296.832 cv
17.102 296.855 17.125 296.887 17.145 296.934 cv
17.164 296.98 17.176 297.047 17.191 297.125 cv
17.199 297.211 17.207 297.316 17.207 297.445 cv
17.207 297.574 17.199 297.68 17.191 297.758 cv
17.176 297.844 17.164 297.91 17.145 297.957 cv
17.125 298.012 17.102 298.043 17.07 298.059 cv
17.047 298.078 17.012 298.09 16.965 298.086 cv
9.953 298.086 li
9.914 298.09 9.879 298.082 9.848 298.062 cv
9.82 298.051 9.797 298.02 9.77 297.969 cv
9.75 297.926 9.734 297.863 9.723 297.789 cv
9.719 297.719 9.715 297.625 9.711 297.5 cv
9.715 297.391 9.719 297.293 9.723 297.215 cv
9.734 297.141 9.75 297.082 9.77 297.039 cv
9.797 297 9.82 296.973 9.848 296.953 cv
9.879 296.937 9.914 296.93 9.953 296.926 cv
10.879 296.926 li
10.438 296.535 10.117 296.152 9.91 295.777 cv
9.707 295.41 9.602 295.031 9.602 294.648 cv
9.602 294.359 9.637 294.102 9.703 293.867 cv
9.773 293.641 9.867 293.434 9.988 293.254 cv
10.109 293.078 10.254 292.93 10.422 292.801 cv
10.594 292.68 10.785 292.574 10.988 292.488 cv
10.738 292.258 10.523 292.035 10.344 291.824 cv
10.172 291.613 10.027 291.41 9.914 291.215 cv
9.809 291.02 9.73 290.832 9.676 290.648 cv
9.629 290.465 9.602 290.277 9.602 290.09 cv
9.602 289.637 9.684 289.258 9.84 288.953 cv
10.004 288.648 10.215 288.402 10.477 288.207 cv
10.742 288.02 11.051 287.883 11.406 287.801 cv
11.762 287.723 12.137 287.684 12.531 287.68 cv
cp
f
13.156 279.352 mo
13.359 279.355 13.5 279.406 13.586 279.504 cv
13.672 279.609 13.715 279.727 13.715 279.852 cv
13.715 284.469 li
14.105 284.473 14.457 284.434 14.77 284.352 cv
15.082 284.277 15.352 284.145 15.57 283.961 cv
15.797 283.781 15.969 283.547 16.086 283.25 cv
16.211 282.961 16.27 282.602 16.266 282.176 cv
16.27 281.844 16.242 281.547 16.184 281.285 cv
16.133 281.023 16.07 280.797 16 280.605 cv
15.934 280.418 15.875 280.262 15.816 280.137 cv
15.766 280.016 15.738 279.922 15.734 279.859 cv
15.738 279.824 15.746 279.793 15.762 279.762 cv
15.781 279.734 15.809 279.711 15.844 279.691 cv
15.883 279.68 15.934 279.668 15.996 279.656 cv
16.063 279.652 16.141 279.648 16.234 279.645 cv
16.305 279.648 16.363 279.652 16.41 279.652 cv
16.457 279.66 16.5 279.664 16.539 279.672 cv
16.578 279.68 16.613 279.695 16.645 279.711 cv
16.676 279.734 16.707 279.758 16.734 279.781 cv
16.766 279.812 16.813 279.895 16.875 280.035 cv
16.941 280.176 17.004 280.359 17.066 280.582 cv
17.129 280.809 17.184 281.066 17.234 281.359 cv
17.281 281.652 17.305 281.965 17.309 282.297 cv
17.305 282.875 17.227 283.383 17.066 283.812 cv
16.906 284.25 16.668 284.613 16.352 284.906 cv
16.035 285.207 15.641 285.43 15.16 285.578 cv
14.684 285.727 14.125 285.801 13.488 285.801 cv
12.891 285.801 12.352 285.727 11.867 285.57 cv
11.391 285.418 10.98 285.191 10.645 284.895 cv
10.309 284.602 10.051 284.246 9.871 283.832 cv
9.691 283.418 9.602 282.953 9.602 282.437 cv
9.602 281.887 9.691 281.418 9.867 281.031 cv
10.047 280.645 10.285 280.328 10.582 280.074 cv
10.883 279.828 11.234 279.645 11.633 279.527 cv
12.039 279.414 12.469 279.355 12.922 279.352 cv
cp
12.773 280.645 mo
12.098 280.629 11.566 280.781 11.184 281.098 cv
10.801 281.414 10.609 281.883 10.605 282.5 cv
10.609 282.824 10.668 283.105 10.785 283.344 cv
10.906 283.586 11.066 283.785 11.262 283.945 cv
11.461 284.109 11.691 284.234 11.953 284.32 cv
12.215 284.41 12.488 284.461 12.773 284.469 cv
cp
f
6.422 271.113 mo
7.469 271.609 8.539 271.977 9.637 272.219 cv
10.738 272.461 11.844 272.582 12.953 272.582 cv
14.07 272.582 15.18 272.461 16.273 272.211 cv
17.371 271.969 18.441 271.605 19.496 271.129 cv
19.555 271.105 19.609 271.094 19.656 271.086 cv
19.699 271.086 19.734 271.102 19.766 271.137 cv
19.793 271.176 19.813 271.23 19.828 271.305 cv
19.836 271.383 19.844 271.488 19.848 271.613 cv
19.844 271.711 19.84 271.789 19.84 271.855 cv
19.832 271.926 19.824 271.984 19.809 272.031 cv
19.793 272.082 19.773 272.125 19.754 272.152 cv
19.73 272.187 19.707 272.211 19.684 272.223 cv
19.152 272.504 18.617 272.75 18.074 272.961 cv
17.531 273.18 16.98 273.359 16.422 273.5 cv
15.859 273.648 15.293 273.758 14.719 273.828 cv
14.145 273.906 13.563 273.941 12.977 273.937 cv
12.391 273.941 11.813 273.902 11.238 273.816 cv
10.668 273.738 10.102 273.621 9.535 273.473 cv
8.973 273.324 8.418 273.145 7.871 272.934 cv
7.328 272.723 6.785 272.484 6.25 272.215 cv
6.23 272.211 6.215 272.195 6.195 272.172 cv
6.184 272.148 6.168 272.117 6.148 272.074 cv
6.137 272.035 6.125 271.977 6.113 271.902 cv
6.109 271.832 6.105 271.738 6.102 271.621 cv
6.105 271.504 6.113 271.41 6.125 271.332 cv
6.145 271.262 6.164 271.203 6.188 271.16 cv
6.215 271.121 6.25 271.098 6.289 271.09 cv
6.336 271.086 6.379 271.094 6.422 271.113 cv
cp
f
16.957 257.91 mo
17 257.91 17.035 257.922 17.066 257.941 cv
17.098 257.965 17.125 258.004 17.141 258.055 cv
17.16 258.109 17.172 258.176 17.188 258.258 cv
17.199 258.344 17.207 258.453 17.207 258.582 cv
17.207 258.711 17.199 258.816 17.188 258.902 cv
17.172 258.992 17.16 259.062 17.141 259.113 cv
17.125 259.164 17.098 259.199 17.066 259.219 cv
17.035 259.242 17 259.254 16.957 259.25 cv
8.176 259.25 li
8.176 259.266 li
16.996 262.82 li
17.035 262.836 17.066 262.859 17.09 262.887 cv
17.117 262.918 17.141 262.961 17.156 263.012 cv
17.176 263.07 17.188 263.133 17.195 263.207 cv
17.203 263.281 17.207 263.371 17.207 263.473 cv
17.207 263.586 17.199 263.68 17.191 263.754 cv
17.176 263.836 17.164 263.902 17.148 263.949 cv
17.133 264.004 17.113 264.043 17.082 264.07 cv
17.059 264.102 17.027 264.121 16.996 264.129 cv
8.176 267.527 li
8.176 267.535 li
16.957 267.535 li
17 267.539 17.035 267.547 17.066 267.566 cv
17.098 267.59 17.125 267.629 17.141 267.68 cv
17.16 267.734 17.172 267.805 17.188 267.887 cv
17.199 267.977 17.207 268.086 17.207 268.215 cv
17.207 268.348 17.199 268.453 17.188 268.539 cv
17.172 268.625 17.16 268.695 17.141 268.742 cv
17.125 268.797 17.098 268.832 17.066 268.848 cv
17.035 268.871 17 268.879 16.957 268.875 cv
7.684 268.875 li
7.469 268.879 7.313 268.82 7.215 268.703 cv
7.125 268.586 7.078 268.457 7.074 268.312 cv
7.074 267.488 li
7.078 267.324 7.094 267.176 7.121 267.047 cv
7.156 266.922 7.203 266.812 7.27 266.715 cv
7.34 266.621 7.426 266.539 7.527 266.477 cv
7.633 266.414 7.758 266.359 7.895 266.312 cv
15.195 263.426 li
15.195 263.387 li
7.918 260.387 li
7.766 260.332 7.633 260.27 7.52 260.199 cv
7.414 260.133 7.324 260.055 7.258 259.973 cv
7.195 259.891 7.148 259.801 7.117 259.699 cv
7.09 259.602 7.078 259.484 7.074 259.352 cv
7.074 258.488 li
7.078 258.41 7.09 258.332 7.109 258.262 cv
7.137 258.191 7.172 258.133 7.219 258.082 cv
7.27 258.031 7.332 257.988 7.406 257.957 cv
7.484 257.926 7.578 257.91 7.684 257.91 cv
cp
f
16.965 254.043 mo
17.012 254.047 17.047 254.059 17.07 254.074 cv
17.102 254.098 17.125 254.129 17.145 254.176 cv
17.164 254.223 17.176 254.289 17.191 254.367 cv
17.199 254.453 17.207 254.559 17.207 254.687 cv
17.207 254.816 17.199 254.922 17.191 255 cv
17.176 255.086 17.164 255.152 17.145 255.199 cv
17.125 255.254 17.102 255.285 17.07 255.301 cv
17.047 255.32 17.012 255.332 16.965 255.328 cv
9.953 255.328 li
9.918 255.332 9.887 255.32 9.852 255.301 cv
9.824 255.285 9.797 255.254 9.773 255.199 cv
9.754 255.152 9.738 255.086 9.727 255 cv
9.719 254.922 9.715 254.816 9.711 254.687 cv
9.715 254.559 9.719 254.453 9.727 254.367 cv
9.738 254.289 9.754 254.223 9.773 254.176 cv
9.797 254.129 9.824 254.098 9.852 254.074 cv
9.887 254.059 9.918 254.047 9.953 254.043 cv
cp
7.582 253.895 mo
7.887 253.895 8.094 253.953 8.199 254.066 cv
8.313 254.18 8.367 254.391 8.363 254.695 cv
8.367 255 8.313 255.207 8.203 255.316 cv
8.098 255.434 7.895 255.488 7.598 255.484 cv
7.297 255.488 7.094 255.43 6.984 255.312 cv
6.879 255.199 6.824 254.988 6.82 254.68 cv
6.824 254.379 6.879 254.176 6.98 254.062 cv
7.09 253.953 7.289 253.895 7.582 253.895 cv
cp
f
16.965 245.59 mo
17.012 245.59 17.047 245.602 17.07 245.621 cv
17.102 245.645 17.125 245.68 17.145 245.723 cv
17.164 245.773 17.176 245.836 17.191 245.918 cv
17.199 246 17.207 246.105 17.207 246.227 cv
17.207 246.359 17.199 246.465 17.191 246.547 cv
17.176 246.633 17.164 246.699 17.145 246.742 cv
17.125 246.793 17.102 246.824 17.07 246.844 cv
17.047 246.867 17.012 246.879 16.965 246.875 cv
12.859 246.875 li
12.461 246.879 12.141 246.91 11.895 246.969 cv
11.652 247.035 11.441 247.125 11.262 247.242 cv
11.086 247.359 10.949 247.516 10.855 247.703 cv
10.762 247.898 10.715 248.117 10.715 248.363 cv
10.715 248.687 10.832 249.012 11.059 249.332 cv
11.293 249.656 11.625 249.992 12.063 250.344 cv
16.965 250.344 li
17.012 250.348 17.047 250.359 17.07 250.375 cv
17.102 250.398 17.125 250.43 17.145 250.477 cv
17.164 250.523 17.176 250.59 17.191 250.668 cv
17.199 250.754 17.207 250.859 17.207 250.988 cv
17.207 251.117 17.199 251.223 17.191 251.301 cv
17.176 251.387 17.164 251.453 17.145 251.5 cv
17.125 251.555 17.102 251.586 17.07 251.602 cv
17.047 251.621 17.012 251.633 16.965 251.629 cv
9.953 251.629 li
9.914 251.633 9.879 251.625 9.848 251.605 cv
9.82 251.594 9.797 251.562 9.77 251.512 cv
9.75 251.469 9.734 251.406 9.723 251.332 cv
9.719 251.262 9.715 251.168 9.711 251.043 cv
9.715 250.934 9.719 250.836 9.723 250.758 cv
9.734 250.684 9.75 250.625 9.77 250.582 cv
9.797 250.543 9.82 250.516 9.848 250.496 cv
9.879 250.48 9.914 250.473 9.953 250.469 cv
10.879 250.469 li
10.438 250.078 10.117 249.684 9.91 249.289 cv
9.707 248.898 9.602 248.5 9.602 248.098 cv
9.602 247.629 9.684 247.238 9.84 246.918 cv
10.004 246.602 10.215 246.34 10.477 246.141 cv
10.742 245.945 11.051 245.805 11.406 245.719 cv
11.762 245.633 12.191 245.59 12.688 245.59 cv
cp
f
16.965 237.242 mo
17.012 237.246 17.047 237.254 17.07 237.27 cv
17.102 237.289 17.125 237.324 17.145 237.367 cv
17.164 237.414 17.176 237.473 17.191 237.547 cv
17.199 237.625 17.207 237.719 17.207 237.824 cv
17.207 237.949 17.199 238.047 17.191 238.117 cv
17.176 238.195 17.164 238.254 17.145 238.297 cv
17.125 238.344 17.102 238.375 17.07 238.387 cv
17.047 238.406 17.012 238.414 16.965 238.41 cv
16.039 238.41 li
16.484 238.812 16.805 239.207 17.004 239.594 cv
17.207 239.988 17.305 240.383 17.309 240.777 cv
17.305 241.25 17.23 241.645 17.074 241.961 cv
16.922 242.281 16.711 242.539 16.441 242.734 cv
16.176 242.937 15.863 243.078 15.504 243.16 cv
15.148 243.25 14.715 243.293 14.207 243.289 cv
9.953 243.289 li
9.914 243.293 9.879 243.285 9.848 243.262 cv
9.82 243.246 9.797 243.211 9.77 243.156 cv
9.75 243.109 9.734 243.039 9.723 242.953 cv
9.719 242.871 9.715 242.77 9.711 242.641 cv
9.715 242.52 9.719 242.414 9.723 242.328 cv
9.734 242.246 9.75 242.18 9.77 242.133 cv
9.797 242.086 9.82 242.051 9.848 242.027 cv
9.879 242.008 9.914 242 9.953 241.996 cv
14.035 241.996 li
14.449 242 14.777 241.969 15.023 241.906 cv
15.27 241.848 15.48 241.758 15.652 241.633 cv
15.832 241.516 15.965 241.359 16.059 241.168 cv
16.156 240.984 16.207 240.766 16.203 240.516 cv
16.207 240.195 16.09 239.875 15.859 239.551 cv
15.633 239.234 15.297 238.895 14.852 238.535 cv
9.953 238.535 li
9.914 238.535 9.879 238.527 9.848 238.508 cv
9.82 238.492 9.797 238.457 9.77 238.402 cv
9.75 238.352 9.734 238.285 9.723 238.203 cv
9.719 238.125 9.715 238.02 9.711 237.887 cv
9.715 237.766 9.719 237.66 9.723 237.574 cv
9.734 237.492 9.75 237.43 9.77 237.383 cv
9.797 237.34 9.82 237.305 9.848 237.277 cv
9.879 237.258 9.914 237.246 9.953 237.242 cv
cp
f
16.449 231.141 mo
16.605 231.141 16.723 231.152 16.809 231.172 cv
16.898 231.195 16.965 231.227 17.004 231.266 cv
17.047 231.309 17.086 231.371 17.121 231.453 cv
17.156 231.539 17.184 231.633 17.211 231.738 cv
17.23 231.848 17.25 231.961 17.27 232.078 cv
17.281 232.195 17.289 232.316 17.293 232.434 cv
17.289 232.801 17.242 233.113 17.148 233.371 cv
17.055 233.633 16.91 233.844 16.711 234.008 cv
16.52 234.176 16.273 234.297 15.973 234.371 cv
15.676 234.449 15.324 234.488 14.914 234.484 cv
10.816 234.484 li
10.816 235.465 li
10.82 235.543 10.777 235.605 10.691 235.652 cv
10.609 235.699 10.477 235.723 10.285 235.723 cv
10.191 235.723 10.109 235.719 10.039 235.703 cv
9.977 235.695 9.918 235.676 9.871 235.652 cv
9.828 235.633 9.797 235.605 9.777 235.57 cv
9.762 235.539 9.754 235.504 9.75 235.457 cv
9.75 234.484 li
8.082 234.484 li
8.051 234.488 8.016 234.477 7.98 234.457 cv
7.953 234.441 7.926 234.41 7.898 234.355 cv
7.879 234.309 7.863 234.242 7.848 234.156 cv
7.84 234.078 7.832 233.973 7.832 233.844 cv
7.832 233.715 7.84 233.609 7.848 233.527 cv
7.863 233.445 7.879 233.379 7.898 233.332 cv
7.926 233.285 7.953 233.254 7.98 233.23 cv
8.016 233.215 8.051 233.203 8.082 233.199 cv
9.75 233.199 li
9.75 231.398 li
9.754 231.359 9.762 231.324 9.777 231.289 cv
9.797 231.262 9.828 231.234 9.871 231.207 cv
9.918 231.187 9.977 231.172 10.039 231.156 cv
10.109 231.148 10.191 231.141 10.285 231.141 cv
10.477 231.141 10.609 231.164 10.691 231.211 cv
10.777 231.258 10.82 231.32 10.816 231.398 cv
10.816 233.199 li
14.73 233.199 li
15.215 233.203 15.578 233.133 15.824 232.984 cv
16.074 232.844 16.199 232.586 16.195 232.215 cv
16.199 232.102 16.188 231.996 16.16 231.898 cv
16.141 231.809 16.117 231.727 16.086 231.648 cv
16.063 231.578 16.035 231.516 16.012 231.461 cv
15.988 231.414 15.977 231.367 15.977 231.32 cv
15.977 231.297 15.984 231.27 15.996 231.246 cv
16.012 231.223 16.035 231.207 16.07 231.191 cv
16.109 231.184 16.16 231.172 16.219 231.156 cv
16.285 231.148 16.363 231.141 16.449 231.141 cv
cp
f
13.156 223.523 mo
13.359 223.527 13.5 223.578 13.586 223.676 cv
13.672 223.781 13.715 223.898 13.715 224.023 cv
13.715 228.641 li
14.105 228.645 14.457 228.605 14.77 228.523 cv
15.082 228.449 15.352 228.316 15.57 228.133 cv
15.797 227.953 15.969 227.719 16.086 227.422 cv
16.211 227.133 16.27 226.773 16.266 226.348 cv
16.27 226.016 16.242 225.719 16.184 225.457 cv
16.133 225.195 16.07 224.969 16 224.777 cv
15.934 224.59 15.875 224.434 15.816 224.309 cv
15.766 224.187 15.738 224.094 15.734 224.031 cv
15.738 223.996 15.746 223.965 15.762 223.934 cv
15.781 223.906 15.809 223.883 15.844 223.863 cv
15.883 223.852 15.934 223.84 15.996 223.828 cv
16.063 223.824 16.141 223.82 16.234 223.816 cv
16.305 223.82 16.363 223.824 16.41 223.824 cv
16.457 223.832 16.5 223.836 16.539 223.844 cv
16.578 223.852 16.613 223.867 16.645 223.883 cv
16.676 223.906 16.707 223.93 16.734 223.953 cv
16.766 223.984 16.813 224.066 16.875 224.207 cv
16.941 224.348 17.004 224.531 17.066 224.754 cv
17.129 224.98 17.184 225.238 17.234 225.531 cv
17.281 225.824 17.305 226.137 17.309 226.469 cv
17.305 227.047 17.227 227.555 17.066 227.984 cv
16.906 228.422 16.668 228.785 16.352 229.078 cv
16.035 229.379 15.641 229.602 15.16 229.75 cv
14.684 229.898 14.125 229.973 13.488 229.973 cv
12.891 229.973 12.352 229.898 11.867 229.742 cv
11.391 229.59 10.98 229.363 10.645 229.066 cv
10.309 228.773 10.051 228.418 9.871 228.004 cv
9.691 227.59 9.602 227.125 9.602 226.609 cv
9.602 226.059 9.691 225.59 9.867 225.203 cv
10.047 224.816 10.285 224.5 10.582 224.246 cv
10.883 224 11.234 223.816 11.633 223.699 cv
12.039 223.586 12.469 223.527 12.922 223.523 cv
cp
12.773 224.816 mo
12.098 224.801 11.566 224.953 11.184 225.27 cv
10.801 225.586 10.609 226.055 10.605 226.672 cv
10.609 226.996 10.668 227.277 10.785 227.516 cv
10.906 227.758 11.066 227.957 11.262 228.117 cv
11.461 228.281 11.691 228.406 11.953 228.492 cv
12.215 228.582 12.488 228.633 12.773 228.641 cv
cp
f
15.055 217.156 mo
15.418 217.16 15.738 217.227 16.016 217.355 cv
16.297 217.488 16.531 217.676 16.723 217.918 cv
16.918 218.164 17.063 218.457 17.16 218.793 cv
17.258 219.133 17.305 219.504 17.309 219.906 cv
17.305 220.16 17.285 220.398 17.25 220.621 cv
17.207 220.848 17.16 221.047 17.102 221.227 cv
17.043 221.406 16.98 221.559 16.914 221.684 cv
16.852 221.809 16.793 221.902 16.738 221.957 cv
16.688 222.016 16.617 222.055 16.52 222.078 cv
16.43 222.105 16.301 222.117 16.141 222.117 cv
16.043 222.117 15.961 222.113 15.891 222.102 cv
15.824 222.094 15.77 222.082 15.727 222.062 cv
15.688 222.051 15.656 222.027 15.637 222 cv
15.621 221.973 15.613 221.941 15.609 221.902 cv
15.613 221.848 15.648 221.762 15.715 221.648 cv
15.789 221.539 15.867 221.402 15.945 221.234 cv
16.031 221.074 16.105 220.883 16.176 220.656 cv
16.246 220.437 16.281 220.18 16.281 219.883 cv
16.281 219.668 16.258 219.469 16.211 219.289 cv
16.164 219.113 16.098 218.961 16.004 218.832 cv
15.918 218.703 15.801 218.602 15.656 218.531 cv
15.52 218.461 15.352 218.426 15.156 218.426 cv
14.961 218.426 14.797 218.477 14.66 218.578 cv
14.527 218.68 14.406 218.816 14.301 218.98 cv
14.199 219.148 14.109 219.332 14.023 219.539 cv
13.945 219.75 13.859 219.965 13.77 220.184 cv
13.684 220.402 13.582 220.617 13.469 220.828 cv
13.359 221.039 13.227 221.23 13.063 221.395 cv
12.906 221.566 12.711 221.699 12.484 221.797 cv
12.262 221.902 11.996 221.953 11.684 221.949 cv
11.41 221.953 11.145 221.898 10.891 221.789 cv
10.641 221.684 10.422 221.523 10.23 221.309 cv
10.043 221.098 9.891 220.832 9.773 220.512 cv
9.66 220.191 9.602 219.82 9.602 219.391 cv
9.602 219.207 9.617 219.02 9.648 218.832 cv
9.68 218.648 9.719 218.48 9.766 218.324 cv
9.813 218.176 9.863 218.047 9.918 217.937 cv
9.973 217.836 10.023 217.754 10.063 217.695 cv
10.109 217.645 10.145 217.609 10.172 217.586 cv
10.203 217.57 10.238 217.555 10.273 217.547 cv
10.316 217.539 10.363 217.531 10.418 217.523 cv
10.477 217.516 10.547 217.512 10.629 217.512 cv
10.719 217.512 10.797 217.516 10.859 217.523 cv
10.93 217.531 10.98 217.547 11.02 217.562 cv
11.063 217.586 11.094 217.605 11.109 217.629 cv
11.129 217.656 11.137 217.687 11.137 217.715 cv
11.137 217.766 11.109 217.832 11.051 217.918 cv
10.996 218.008 10.934 218.121 10.867 218.262 cv
10.805 218.402 10.746 218.57 10.684 218.758 cv
10.629 218.949 10.598 219.164 10.598 219.406 cv
10.598 219.629 10.625 219.82 10.672 219.984 cv
10.727 220.152 10.797 220.289 10.883 220.395 cv
10.977 220.5 11.082 220.582 11.207 220.633 cv
11.332 220.691 11.469 220.719 11.613 220.715 cv
11.816 220.719 11.984 220.668 12.121 220.562 cv
12.262 220.461 12.383 220.324 12.484 220.156 cv
12.59 219.992 12.684 219.801 12.766 219.586 cv
12.852 219.375 12.938 219.16 13.023 218.937 cv
13.113 218.719 13.215 218.5 13.32 218.281 cv
13.43 218.066 13.559 217.875 13.715 217.707 cv
13.871 217.543 14.059 217.41 14.277 217.309 cv
14.496 217.211 14.758 217.16 15.055 217.156 cv
cp
f
12.977 212.711 mo
13.563 212.711 14.145 212.75 14.719 212.82 cv
15.293 212.898 15.859 213.008 16.422 213.148 cv
16.98 213.297 17.531 213.473 18.074 213.684 cv
18.617 213.895 19.152 214.141 19.684 214.418 cv
19.707 214.437 19.73 214.461 19.754 214.488 cv
19.773 214.523 19.793 214.562 19.809 214.609 cv
19.824 214.66 19.832 214.719 19.84 214.785 cv
19.84 214.855 19.844 214.937 19.848 215.027 cv
19.844 215.164 19.836 215.27 19.828 215.344 cv
19.813 215.422 19.793 215.477 19.766 215.508 cv
19.734 215.543 19.699 215.559 19.656 215.555 cv
19.609 215.555 19.555 215.539 19.496 215.512 cv
18.445 215.035 17.375 214.676 16.277 214.43 cv
15.18 214.187 14.07 214.066 12.953 214.062 cv
11.844 214.066 10.738 214.187 9.637 214.43 cv
8.539 214.676 7.469 215.043 6.422 215.527 cv
6.379 215.551 6.336 215.559 6.289 215.551 cv
6.25 215.551 6.215 215.527 6.188 215.48 cv
6.164 215.441 6.145 215.383 6.125 215.309 cv
6.113 215.238 6.105 215.141 6.102 215.02 cv
6.105 214.91 6.109 214.82 6.113 214.746 cv
6.125 214.676 6.137 214.617 6.148 214.57 cv
6.168 214.527 6.184 214.496 6.195 214.473 cv
6.215 214.457 6.23 214.441 6.25 214.426 cv
7.316 213.895 8.414 213.473 9.535 213.168 cv
10.664 212.863 11.809 212.711 12.977 212.711 cv
cp
f
265.57 520.414 mo
265.566 520.52 265.551 520.609 265.516 520.68 cv
265.48 520.758 265.434 520.816 265.379 520.859 cv
265.32 520.91 265.258 520.945 265.191 520.961 cv
265.117 520.984 265.047 520.992 264.984 520.992 cv
264.539 520.992 li
264.398 520.992 264.277 520.98 264.172 520.949 cv
264.066 520.926 263.969 520.871 263.875 520.793 cv
263.781 520.719 263.688 520.617 263.594 520.484 cv
263.5 520.355 263.398 520.191 263.293 519.988 cv
260.219 514.25 li
260.055 513.957 259.891 513.648 259.73 513.32 cv
259.563 513 259.41 512.684 259.273 512.375 cv
259.258 512.375 li
259.266 512.75 259.273 513.133 259.281 513.52 cv
259.285 513.91 259.285 514.297 259.289 514.68 cv
259.289 520.766 li
259.285 520.805 259.273 520.84 259.254 520.871 cv
259.23 520.906 259.195 520.934 259.145 520.949 cv
259.09 520.969 259.02 520.98 258.938 520.996 cv
258.852 521.008 258.746 521.016 258.617 521.016 cv
258.48 521.016 258.371 521.008 258.289 520.996 cv
258.203 520.98 258.137 520.969 258.09 520.949 cv
258.039 520.934 258.004 520.906 257.98 520.871 cv
257.957 520.84 257.945 520.805 257.949 520.766 cv
257.949 511.461 li
257.945 511.254 258.004 511.105 258.125 511.016 cv
258.242 510.93 258.371 510.887 258.512 510.883 cv
259.172 510.883 li
259.324 510.887 259.457 510.898 259.563 510.922 cv
259.664 510.949 259.758 510.992 259.844 511.051 cv
259.926 511.113 260.004 511.195 260.086 511.301 cv
260.16 511.41 260.242 511.547 260.328 511.703 cv
262.695 516.129 li
262.84 516.402 262.98 516.668 263.117 516.922 cv
263.25 517.18 263.379 517.434 263.508 517.68 cv
263.629 517.934 263.754 518.18 263.879 518.418 cv
264 518.66 264.121 518.902 264.246 519.145 cv
264.254 519.145 li
264.242 518.738 264.234 518.309 264.234 517.863 cv
264.227 517.418 264.227 516.992 264.23 516.582 cv
264.23 511.109 li
264.227 511.074 264.238 511.039 264.262 511.008 cv
264.285 510.977 264.32 510.949 264.375 510.926 cv
264.422 510.902 264.492 510.887 264.578 510.875 cv
264.664 510.867 264.773 510.863 264.914 510.859 cv
265.031 510.863 265.137 510.867 265.227 510.875 cv
265.313 510.887 265.379 510.902 265.43 510.926 cv
265.477 510.949 265.512 510.977 265.535 511.008 cv
265.555 511.039 265.566 511.074 265.57 511.109 cv
cp
f
274.121 520.773 mo
274.117 520.82 274.109 520.855 274.094 520.879 cv
274.074 520.91 274.039 520.934 273.996 520.953 cv
273.949 520.973 273.891 520.984 273.816 521 cv
273.738 521.008 273.645 521.016 273.539 521.016 cv
273.414 521.016 273.316 521.008 273.246 521 cv
273.168 520.984 273.109 520.973 273.066 520.953 cv
273.02 520.934 272.988 520.91 272.977 520.879 cv
272.957 520.855 272.949 520.82 272.953 520.773 cv
272.953 519.848 li
272.551 520.293 272.156 520.613 271.77 520.812 cv
271.375 521.016 270.98 521.113 270.586 521.117 cv
270.113 521.113 269.719 521.039 269.402 520.883 cv
269.082 520.73 268.824 520.52 268.629 520.25 cv
268.426 519.984 268.285 519.672 268.203 519.312 cv
268.113 518.957 268.07 518.523 268.074 518.016 cv
268.074 513.762 li
268.07 513.723 268.078 513.687 268.102 513.656 cv
268.117 513.629 268.152 513.605 268.207 513.578 cv
268.254 513.559 268.324 513.543 268.41 513.531 cv
268.492 513.527 268.594 513.523 268.723 513.52 cv
268.844 513.523 268.949 513.527 269.035 513.531 cv
269.117 513.543 269.184 513.559 269.23 513.578 cv
269.277 513.605 269.313 513.629 269.336 513.656 cv
269.355 513.687 269.363 513.723 269.367 513.762 cv
269.367 517.844 li
269.363 518.258 269.395 518.586 269.457 518.832 cv
269.516 519.078 269.605 519.289 269.73 519.461 cv
269.848 519.641 270.004 519.773 270.195 519.867 cv
270.379 519.965 270.598 520.016 270.848 520.012 cv
271.168 520.016 271.488 519.898 271.813 519.668 cv
272.129 519.441 272.469 519.105 272.828 518.66 cv
272.828 513.762 li
272.828 513.723 272.836 513.687 272.855 513.656 cv
272.871 513.629 272.906 513.605 272.961 513.578 cv
273.012 513.559 273.078 513.543 273.16 513.531 cv
273.238 513.527 273.344 513.523 273.477 513.52 cv
273.598 513.523 273.703 513.527 273.789 513.531 cv
273.871 513.543 273.934 513.559 273.98 513.578 cv
274.023 513.605 274.059 513.629 274.086 513.656 cv
274.105 513.687 274.117 513.723 274.121 513.762 cv
cp
f
286.898 520.773 mo
286.895 520.82 286.887 520.855 286.867 520.879 cv
286.844 520.91 286.809 520.934 286.766 520.953 cv
286.715 520.973 286.648 520.984 286.57 521 cv
286.484 521.008 286.383 521.016 286.258 521.016 cv
286.125 521.016 286.016 521.008 285.938 521 cv
285.852 520.984 285.785 520.973 285.738 520.953 cv
285.684 520.934 285.648 520.91 285.633 520.879 cv
285.609 520.855 285.602 520.82 285.602 520.773 cv
285.602 516.512 li
285.602 516.219 285.574 515.949 285.523 515.703 cv
285.469 515.461 285.387 515.25 285.273 515.07 cv
285.16 514.895 285.016 514.758 284.84 514.664 cv
284.66 514.57 284.449 514.523 284.215 514.523 cv
283.918 514.523 283.621 514.641 283.324 514.867 cv
283.02 515.102 282.691 515.434 282.336 515.871 cv
282.336 520.773 li
282.332 520.82 282.32 520.855 282.305 520.879 cv
282.281 520.91 282.25 520.934 282.203 520.953 cv
282.152 520.973 282.086 520.984 282.004 521 cv
281.918 521.008 281.813 521.016 281.691 521.016 cv
281.57 521.016 281.469 521.008 281.383 521 cv
281.297 520.984 281.227 520.973 281.18 520.953 cv
281.125 520.934 281.094 520.91 281.078 520.879 cv
281.059 520.855 281.047 520.82 281.051 520.773 cv
281.051 516.512 li
281.047 516.219 281.02 515.949 280.965 515.703 cv
280.906 515.461 280.82 515.25 280.707 515.07 cv
280.594 514.895 280.449 514.758 280.277 514.664 cv
280.098 514.57 279.891 514.523 279.656 514.523 cv
279.355 514.523 279.059 514.641 278.758 514.867 cv
278.457 515.102 278.129 515.434 277.777 515.871 cv
277.777 520.773 li
277.773 520.82 277.762 520.855 277.746 520.879 cv
277.723 520.91 277.691 520.934 277.645 520.953 cv
277.598 520.973 277.531 520.984 277.453 521 cv
277.367 521.008 277.262 521.016 277.133 521.016 cv
277.004 521.016 276.898 521.008 276.82 521 cv
276.734 520.984 276.668 520.973 276.621 520.953 cv
276.566 520.934 276.535 520.91 276.52 520.879 cv
276.5 520.855 276.488 520.82 276.492 520.773 cv
276.492 513.762 li
276.488 513.723 276.496 513.687 276.516 513.656 cv
276.527 513.629 276.559 513.605 276.609 513.578 cv
276.652 513.559 276.715 513.543 276.789 513.531 cv
276.859 513.527 276.953 513.523 277.078 513.52 cv
277.188 513.523 277.285 513.527 277.363 513.531 cv
277.438 513.543 277.496 513.559 277.539 513.578 cv
277.578 513.605 277.605 513.629 277.625 513.656 cv
277.641 513.687 277.648 513.723 277.652 513.762 cv
277.652 514.687 li
278.043 514.246 278.426 513.926 278.801 513.719 cv
279.168 513.516 279.547 513.41 279.93 513.41 cv
280.219 513.41 280.477 513.445 280.711 513.512 cv
280.938 513.582 281.145 513.676 281.324 513.797 cv
281.5 513.918 281.648 514.062 281.777 514.23 cv
281.898 514.402 282.004 514.594 282.09 514.797 cv
282.32 514.547 282.543 514.332 282.754 514.152 cv
282.965 513.98 283.168 513.836 283.363 513.723 cv
283.559 513.617 283.746 513.539 283.93 513.484 cv
284.113 513.437 284.301 513.41 284.488 513.41 cv
284.941 513.41 285.32 513.492 285.625 513.648 cv
285.93 513.812 286.176 514.023 286.371 514.285 cv
286.559 514.551 286.695 514.859 286.777 515.215 cv
286.855 515.57 286.895 515.945 286.898 516.34 cv
cp
f
295.695 517.172 mo
295.691 517.781 295.625 518.332 295.496 518.816 cv
295.359 519.305 295.164 519.719 294.91 520.059 cv
294.652 520.402 294.336 520.664 293.965 520.844 cv
293.59 521.027 293.164 521.113 292.68 521.117 cv
292.453 521.113 292.246 521.094 292.059 521.051 cv
291.871 521.004 291.684 520.934 291.504 520.836 cv
291.316 520.738 291.137 520.613 290.957 520.461 cv
290.773 520.312 290.582 520.133 290.383 519.918 cv
290.383 520.773 li
290.383 520.82 290.371 520.855 290.352 520.883 cv
290.328 520.918 290.293 520.941 290.25 520.957 cv
290.199 520.973 290.141 520.984 290.074 521 cv
290 521.008 289.91 521.016 289.805 521.016 cv
289.695 521.016 289.609 521.008 289.539 521 cv
289.465 520.984 289.402 520.973 289.359 520.957 cv
289.309 520.941 289.277 520.918 289.266 520.883 cv
289.246 520.855 289.238 520.82 289.242 520.773 cv
289.242 510.363 li
289.238 510.324 289.25 510.289 289.27 510.254 cv
289.285 510.227 289.316 510.199 289.371 510.176 cv
289.418 510.156 289.484 510.141 289.57 510.129 cv
289.648 510.121 289.754 510.117 289.883 510.113 cv
290.012 510.117 290.117 510.121 290.203 510.129 cv
290.281 510.141 290.348 510.156 290.395 510.176 cv
290.441 510.199 290.473 510.227 290.496 510.254 cv
290.512 510.289 290.523 510.324 290.527 510.363 cv
290.527 514.562 li
290.734 514.352 290.938 514.172 291.133 514.027 cv
291.328 513.883 291.516 513.766 291.703 513.672 cv
291.887 513.586 292.074 513.52 292.266 513.473 cv
292.449 513.434 292.648 513.41 292.859 513.41 cv
293.363 513.41 293.797 513.512 294.164 513.715 cv
294.523 513.918 294.816 514.191 295.043 514.527 cv
295.266 514.871 295.434 515.27 295.539 515.727 cv
295.641 516.184 295.691 516.664 295.695 517.172 cv
cp
294.363 517.32 mo
294.359 516.965 294.332 516.617 294.281 516.277 cv
294.223 515.941 294.129 515.645 293.992 515.383 cv
293.855 515.125 293.676 514.914 293.453 514.754 cv
293.227 514.598 292.945 514.52 292.613 514.516 cv
292.445 514.52 292.281 514.543 292.121 514.586 cv
291.957 514.637 291.793 514.715 291.625 514.82 cv
291.457 514.934 291.281 515.074 291.105 515.242 cv
290.922 515.418 290.73 515.633 290.527 515.887 cv
290.527 518.684 li
290.883 519.117 291.223 519.449 291.547 519.672 cv
291.871 519.902 292.207 520.016 292.559 520.012 cv
292.879 520.016 293.156 519.937 293.391 519.777 cv
293.617 519.625 293.805 519.418 293.949 519.156 cv
294.094 518.902 294.199 518.613 294.266 518.293 cv
294.328 517.977 294.359 517.652 294.363 517.32 cv
cp
f
303.605 516.965 mo
303.602 517.168 303.551 517.309 303.453 517.395 cv
303.348 517.48 303.23 517.523 303.105 517.523 cv
298.488 517.523 li
298.484 517.914 298.523 518.266 298.605 518.578 cv
298.68 518.891 298.813 519.16 298.996 519.379 cv
299.176 519.605 299.41 519.777 299.707 519.895 cv
299.996 520.02 300.355 520.078 300.781 520.074 cv
301.113 520.078 301.41 520.051 301.672 519.992 cv
301.934 519.941 302.16 519.879 302.352 519.809 cv
302.539 519.742 302.695 519.684 302.82 519.625 cv
302.941 519.574 303.035 519.547 303.098 519.543 cv
303.133 519.547 303.164 519.555 303.195 519.57 cv
303.223 519.59 303.246 519.617 303.266 519.652 cv
303.277 519.691 303.289 519.742 303.301 519.805 cv
303.305 519.871 303.309 519.949 303.313 520.043 cv
303.309 520.113 303.305 520.172 303.305 520.219 cv
303.297 520.266 303.293 520.309 303.285 520.348 cv
303.277 520.387 303.262 520.422 303.246 520.453 cv
303.223 520.484 303.199 520.516 303.176 520.543 cv
303.145 520.574 303.063 520.621 302.922 520.684 cv
302.781 520.75 302.598 520.812 302.375 520.875 cv
302.148 520.937 301.891 520.992 301.598 521.043 cv
301.305 521.09 300.992 521.113 300.66 521.117 cv
300.082 521.113 299.574 521.035 299.145 520.875 cv
298.707 520.715 298.344 520.477 298.051 520.16 cv
297.75 519.844 297.527 519.449 297.379 518.969 cv
297.23 518.492 297.156 517.934 297.156 517.297 cv
297.156 516.699 297.23 516.16 297.387 515.676 cv
297.539 515.199 297.766 514.789 298.063 514.453 cv
298.355 514.117 298.711 513.859 299.125 513.68 cv
299.539 513.5 300.004 513.41 300.52 513.41 cv
301.07 513.41 301.539 513.5 301.926 513.676 cv
302.313 513.855 302.629 514.094 302.883 514.391 cv
303.129 514.691 303.313 515.043 303.43 515.441 cv
303.543 515.848 303.602 516.277 303.605 516.73 cv
cp
302.313 516.582 mo
302.328 515.906 302.176 515.375 301.859 514.992 cv
301.543 514.609 301.074 514.418 300.457 514.414 cv
300.133 514.418 299.852 514.477 299.613 514.594 cv
299.371 514.715 299.172 514.875 299.012 515.07 cv
298.848 515.27 298.723 515.5 298.637 515.762 cv
298.547 516.023 298.496 516.297 298.488 516.582 cv
cp
f
309.672 514.219 mo
309.668 514.336 309.668 514.434 309.664 514.508 cv
309.656 514.59 309.645 514.652 309.633 514.691 cv
309.613 514.738 309.594 514.77 309.574 514.793 cv
309.547 514.816 309.516 514.828 309.477 514.828 cv
309.434 514.828 309.383 514.816 309.324 514.793 cv
309.262 514.77 309.191 514.746 309.121 514.723 cv
309.043 514.699 308.961 514.68 308.867 514.656 cv
308.773 514.641 308.672 514.629 308.563 514.625 cv
308.43 514.629 308.301 514.656 308.18 514.703 cv
308.055 514.758 307.926 514.844 307.789 514.961 cv
307.648 515.086 307.504 515.242 307.355 515.437 cv
307.203 515.633 307.035 515.875 306.855 516.16 cv
306.855 520.773 li
306.852 520.82 306.84 520.855 306.824 520.879 cv
306.801 520.91 306.77 520.934 306.723 520.953 cv
306.676 520.973 306.609 520.984 306.531 521 cv
306.445 521.008 306.34 521.016 306.211 521.016 cv
306.082 521.016 305.977 521.008 305.898 521 cv
305.813 520.984 305.746 520.973 305.699 520.953 cv
305.645 520.934 305.613 520.91 305.598 520.879 cv
305.578 520.855 305.566 520.82 305.57 520.773 cv
305.57 513.762 li
305.566 513.723 305.574 513.687 305.594 513.656 cv
305.605 513.629 305.637 513.605 305.688 513.578 cv
305.73 513.559 305.793 513.543 305.867 513.531 cv
305.938 513.527 306.031 513.523 306.156 513.52 cv
306.266 513.523 306.363 513.527 306.441 513.531 cv
306.516 513.543 306.574 513.559 306.617 513.578 cv
306.656 513.605 306.684 513.629 306.703 513.656 cv
306.719 513.687 306.727 513.723 306.73 513.762 cv
306.73 514.781 li
306.918 514.5 307.102 514.273 307.273 514.098 cv
307.441 513.922 307.602 513.781 307.754 513.68 cv
307.902 513.578 308.051 513.508 308.199 513.469 cv
308.348 513.43 308.496 513.41 308.648 513.41 cv
308.715 513.41 308.793 513.414 308.879 513.422 cv
308.965 513.43 309.055 513.445 309.148 513.465 cv
309.242 513.488 309.324 513.512 309.402 513.535 cv
309.473 513.562 309.527 513.59 309.563 513.613 cv
309.59 513.645 309.609 513.668 309.625 513.687 cv
309.633 513.715 309.645 513.746 309.652 513.777 cv
309.66 513.816 309.664 513.867 309.668 513.937 cv
309.668 514.008 309.668 514.102 309.672 514.219 cv
cp
f
321.43 517.187 mo
321.426 517.766 321.352 518.293 321.203 518.77 cv
321.051 519.254 320.824 519.668 320.527 520.012 cv
320.227 520.363 319.852 520.633 319.406 520.824 cv
318.953 521.02 318.434 521.113 317.844 521.117 cv
317.266 521.113 316.762 521.031 316.336 520.859 cv
315.906 520.691 315.551 520.441 315.266 520.113 cv
314.977 519.785 314.762 519.391 314.625 518.922 cv
314.484 518.457 314.418 517.926 314.418 517.328 cv
314.418 516.762 314.488 516.234 314.637 515.754 cv
314.781 515.273 315.008 514.859 315.309 514.508 cv
315.605 514.16 315.977 513.891 316.426 513.699 cv
316.871 513.508 317.395 513.41 317.992 513.41 cv
318.57 513.41 319.07 513.496 319.5 513.668 cv
319.926 513.84 320.285 514.09 320.57 514.418 cv
320.855 514.746 321.07 515.145 321.215 515.609 cv
321.355 516.078 321.426 516.605 321.43 517.187 cv
cp
320.098 517.273 mo
320.094 516.898 320.059 516.539 319.992 516.199 cv
319.918 515.863 319.801 515.57 319.641 515.312 cv
319.477 515.062 319.258 514.859 318.98 514.707 cv
318.699 514.562 318.352 514.488 317.941 514.484 cv
317.555 514.488 317.227 514.555 316.953 514.687 cv
316.676 514.824 316.449 515.016 316.273 515.262 cv
316.094 515.508 315.961 515.801 315.879 516.137 cv
315.789 516.477 315.746 516.844 315.75 517.242 cv
315.746 517.629 315.781 517.992 315.855 518.328 cv
315.922 518.668 316.039 518.961 316.207 519.211 cv
316.371 519.465 316.594 519.668 316.871 519.812 cv
317.148 519.965 317.496 520.039 317.91 520.035 cv
318.285 520.039 318.613 519.969 318.895 519.832 cv
319.172 519.699 319.398 519.512 319.578 519.262 cv
319.754 519.02 319.883 518.727 319.969 518.391 cv
320.051 518.055 320.094 517.684 320.098 517.273 cv
cp
f
327.16 510.875 mo
327.156 510.977 327.152 511.055 327.145 511.113 cv
327.133 511.176 327.121 511.227 327.109 511.258 cv
327.094 511.297 327.078 511.32 327.059 511.332 cv
327.035 511.348 327.008 511.355 326.98 511.352 cv
326.941 511.355 326.895 511.344 326.844 511.316 cv
326.785 511.297 326.719 511.27 326.645 511.238 cv
326.563 511.211 326.473 511.184 326.367 511.16 cv
326.258 511.137 326.133 511.125 326 511.125 cv
325.805 511.125 325.641 511.156 325.508 511.219 cv
325.367 511.281 325.258 511.379 325.18 511.512 cv
325.094 511.645 325.035 511.816 325 512.027 cv
324.961 512.238 324.941 512.496 324.945 512.793 cv
324.945 513.559 li
326.512 513.559 li
326.551 513.562 326.586 513.57 326.617 513.586 cv
326.645 513.605 326.672 513.637 326.695 513.68 cv
326.719 513.727 326.734 513.785 326.75 513.848 cv
326.758 513.918 326.766 514 326.77 514.094 cv
326.766 514.285 326.742 514.418 326.699 514.5 cv
326.648 514.586 326.586 514.629 326.512 514.625 cv
324.945 514.625 li
324.945 520.773 li
324.941 520.82 324.934 520.855 324.914 520.879 cv
324.891 520.91 324.855 520.934 324.809 520.953 cv
324.758 520.973 324.691 520.984 324.609 521 cv
324.523 521.008 324.418 521.016 324.301 521.016 cv
324.172 521.016 324.07 521.008 323.988 521 cv
323.902 520.984 323.836 520.973 323.789 520.953 cv
323.738 520.934 323.703 520.91 323.684 520.879 cv
323.66 520.855 323.648 520.82 323.652 520.773 cv
323.652 514.625 li
322.664 514.625 li
322.578 514.629 322.516 514.586 322.477 514.5 cv
322.434 514.418 322.41 514.285 322.414 514.094 cv
322.41 514 322.418 513.918 322.43 513.848 cv
322.438 513.785 322.453 513.727 322.477 513.68 cv
322.496 513.637 322.52 513.605 322.555 513.586 cv
322.582 513.57 322.621 513.562 322.664 513.559 cv
323.652 513.559 li
323.652 512.832 li
323.648 512.348 323.695 511.93 323.789 511.574 cv
323.879 511.227 324.016 510.937 324.203 510.715 cv
324.387 510.492 324.621 510.328 324.91 510.219 cv
325.191 510.113 325.527 510.059 325.914 510.059 cv
326.09 510.059 326.266 510.078 326.441 510.109 cv
326.609 510.148 326.742 510.184 326.84 510.219 cv
326.93 510.262 326.992 510.297 327.027 510.324 cv
327.055 510.359 327.082 510.398 327.105 510.445 cv
327.125 510.496 327.137 510.559 327.148 510.625 cv
327.152 510.699 327.156 510.781 327.16 510.875 cv
cp
f
337.359 518.141 mo
337.355 518.613 337.27 519.035 337.098 519.402 cv
336.922 519.777 336.68 520.09 336.371 520.344 cv
336.063 520.602 335.699 520.793 335.281 520.922 cv
334.859 521.051 334.41 521.113 333.93 521.117 cv
333.59 521.113 333.273 521.086 332.988 521.031 cv
332.699 520.973 332.445 520.906 332.219 520.82 cv
331.992 520.742 331.801 520.656 331.648 520.562 cv
331.492 520.477 331.387 520.398 331.328 520.336 cv
331.27 520.273 331.227 520.195 331.199 520.102 cv
331.168 520.008 331.152 519.879 331.156 519.715 cv
331.152 519.602 331.156 519.508 331.172 519.43 cv
331.18 519.355 331.195 519.293 331.219 519.246 cv
331.234 519.199 331.262 519.168 331.297 519.148 cv
331.324 519.133 331.359 519.125 331.402 519.121 cv
331.473 519.125 331.574 519.168 331.711 519.254 cv
331.84 519.344 332.012 519.441 332.223 519.543 cv
332.43 519.652 332.68 519.75 332.973 519.836 cv
333.266 519.93 333.605 519.973 333.992 519.973 cv
334.281 519.973 334.547 519.934 334.789 519.855 cv
335.027 519.777 335.234 519.668 335.414 519.523 cv
335.586 519.383 335.723 519.207 335.816 518.996 cv
335.91 518.789 335.957 518.555 335.957 518.289 cv
335.957 518.008 335.891 517.762 335.762 517.555 cv
335.629 517.355 335.457 517.18 335.246 517.023 cv
335.031 516.875 334.789 516.734 334.516 516.602 cv
334.242 516.477 333.961 516.344 333.68 516.211 cv
333.391 516.078 333.113 515.934 332.844 515.77 cv
332.574 515.613 332.332 515.422 332.121 515.203 cv
331.902 514.984 331.73 514.73 331.602 514.434 cv
331.465 514.145 331.398 513.793 331.402 513.379 cv
331.398 512.961 331.477 512.586 331.633 512.254 cv
331.785 511.926 331.996 511.648 332.273 511.422 cv
332.543 511.203 332.867 511.031 333.246 510.914 cv
333.621 510.797 334.031 510.738 334.469 510.738 cv
334.688 510.738 334.91 510.758 335.141 510.797 cv
335.363 510.836 335.574 510.887 335.777 510.949 cv
335.973 511.016 336.152 511.09 336.313 511.168 cv
336.465 511.25 336.566 511.316 336.621 511.363 cv
336.668 511.418 336.703 511.457 336.719 511.48 cv
336.734 511.512 336.746 511.547 336.758 511.59 cv
336.766 511.637 336.773 511.691 336.781 511.75 cv
336.785 511.816 336.789 511.895 336.789 511.992 cv
336.789 512.086 336.785 512.172 336.777 512.242 cv
336.77 512.32 336.758 512.379 336.742 512.426 cv
336.727 512.473 336.703 512.508 336.676 512.531 cv
336.645 512.555 336.613 512.566 336.578 512.566 cv
336.52 512.566 336.43 512.531 336.309 512.461 cv
336.184 512.391 336.031 512.309 335.859 512.215 cv
335.68 512.125 335.473 512.043 335.234 511.965 cv
334.988 511.891 334.719 511.852 334.422 511.852 cv
334.141 511.852 333.895 511.891 333.688 511.965 cv
333.477 512.043 333.305 512.145 333.172 512.266 cv
333.035 512.391 332.934 512.535 332.867 512.707 cv
332.801 512.879 332.77 513.062 332.77 513.254 cv
332.77 513.539 332.832 513.781 332.961 513.98 cv
333.09 514.184 333.262 514.363 333.48 514.516 cv
333.691 514.676 333.938 514.816 334.215 514.945 cv
334.488 515.078 334.77 515.211 335.059 515.34 cv
335.344 515.473 335.625 515.617 335.898 515.773 cv
336.172 515.934 336.418 516.121 336.637 516.336 cv
336.852 516.555 337.023 516.809 337.16 517.102 cv
337.289 517.395 337.355 517.742 337.359 518.141 cv
cp
f
345.125 520.773 mo
345.121 520.82 345.113 520.855 345.098 520.879 cv
345.078 520.91 345.043 520.934 345 520.953 cv
344.953 520.973 344.895 520.984 344.82 521 cv
344.742 521.008 344.648 521.016 344.543 521.016 cv
344.418 521.016 344.32 521.008 344.25 521 cv
344.172 520.984 344.113 520.973 344.07 520.953 cv
344.023 520.934 343.992 520.91 343.98 520.879 cv
343.961 520.855 343.953 520.82 343.957 520.773 cv
343.957 519.848 li
343.555 520.293 343.16 520.613 342.773 520.812 cv
342.379 521.016 341.984 521.113 341.59 521.117 cv
341.117 521.113 340.723 521.039 340.406 520.883 cv
340.086 520.73 339.828 520.52 339.633 520.25 cv
339.43 519.984 339.289 519.672 339.207 519.312 cv
339.117 518.957 339.074 518.523 339.078 518.016 cv
339.078 513.762 li
339.074 513.723 339.082 513.687 339.105 513.656 cv
339.121 513.629 339.156 513.605 339.211 513.578 cv
339.258 513.559 339.328 513.543 339.414 513.531 cv
339.496 513.527 339.598 513.523 339.727 513.52 cv
339.848 513.523 339.953 513.527 340.039 513.531 cv
340.121 513.543 340.188 513.559 340.234 513.578 cv
340.281 513.605 340.316 513.629 340.34 513.656 cv
340.359 513.687 340.367 513.723 340.371 513.762 cv
340.371 517.844 li
340.367 518.258 340.398 518.586 340.461 518.832 cv
340.52 519.078 340.609 519.289 340.734 519.461 cv
340.852 519.641 341.008 519.773 341.199 519.867 cv
341.383 519.965 341.602 520.016 341.852 520.012 cv
342.172 520.016 342.492 519.898 342.816 519.668 cv
343.133 519.441 343.473 519.105 343.832 518.66 cv
343.832 513.762 li
343.832 513.723 343.84 513.687 343.859 513.656 cv
343.875 513.629 343.91 513.605 343.965 513.578 cv
344.016 513.559 344.082 513.543 344.164 513.531 cv
344.242 513.527 344.348 513.523 344.48 513.52 cv
344.602 513.523 344.707 513.527 344.793 513.531 cv
344.875 513.543 344.938 513.559 344.984 513.578 cv
345.027 513.605 345.063 513.629 345.09 513.656 cv
345.109 513.687 345.121 513.723 345.125 513.762 cv
cp
f
353.98 517.172 mo
353.977 517.781 353.91 518.332 353.781 518.816 cv
353.645 519.305 353.449 519.719 353.195 520.059 cv
352.938 520.402 352.621 520.664 352.25 520.844 cv
351.875 521.027 351.449 521.113 350.965 521.117 cv
350.738 521.113 350.531 521.094 350.344 521.051 cv
350.156 521.004 349.969 520.934 349.789 520.836 cv
349.602 520.738 349.422 520.613 349.242 520.461 cv
349.059 520.312 348.867 520.133 348.668 519.918 cv
348.668 520.773 li
348.668 520.82 348.656 520.855 348.637 520.883 cv
348.613 520.918 348.578 520.941 348.535 520.957 cv
348.484 520.973 348.426 520.984 348.359 521 cv
348.285 521.008 348.195 521.016 348.09 521.016 cv
347.98 521.016 347.895 521.008 347.824 521 cv
347.75 520.984 347.688 520.973 347.645 520.957 cv
347.594 520.941 347.563 520.918 347.551 520.883 cv
347.531 520.855 347.523 520.82 347.527 520.773 cv
347.527 510.363 li
347.523 510.324 347.535 510.289 347.555 510.254 cv
347.57 510.227 347.602 510.199 347.656 510.176 cv
347.703 510.156 347.77 510.141 347.855 510.129 cv
347.934 510.121 348.039 510.117 348.168 510.113 cv
348.297 510.117 348.402 510.121 348.488 510.129 cv
348.566 510.141 348.633 510.156 348.68 510.176 cv
348.727 510.199 348.758 510.227 348.781 510.254 cv
348.797 510.289 348.809 510.324 348.813 510.363 cv
348.813 514.562 li
349.02 514.352 349.223 514.172 349.418 514.027 cv
349.613 513.883 349.801 513.766 349.988 513.672 cv
350.172 513.586 350.359 513.52 350.551 513.473 cv
350.734 513.434 350.934 513.41 351.145 513.41 cv
351.648 513.41 352.082 513.512 352.449 513.715 cv
352.809 513.918 353.102 514.191 353.328 514.527 cv
353.551 514.871 353.719 515.27 353.824 515.727 cv
353.926 516.184 353.977 516.664 353.98 517.172 cv
cp
352.648 517.32 mo
352.645 516.965 352.617 516.617 352.566 516.277 cv
352.508 515.941 352.414 515.645 352.277 515.383 cv
352.141 515.125 351.961 514.914 351.738 514.754 cv
351.512 514.598 351.23 514.52 350.898 514.516 cv
350.73 514.52 350.566 514.543 350.406 514.586 cv
350.242 514.637 350.078 514.715 349.91 514.82 cv
349.742 514.934 349.566 515.074 349.391 515.242 cv
349.207 515.418 349.016 515.633 348.813 515.887 cv
348.813 518.684 li
349.168 519.117 349.508 519.449 349.832 519.672 cv
350.156 519.902 350.492 520.016 350.844 520.012 cv
351.164 520.016 351.441 519.937 351.676 519.777 cv
351.902 519.625 352.09 519.418 352.234 519.156 cv
352.379 518.902 352.484 518.613 352.551 518.293 cv
352.613 517.977 352.645 517.652 352.648 517.32 cv
cp
f
359.137 517.035 mo
359.137 517.238 359.113 517.375 359.066 517.453 cv
359.02 517.531 358.949 517.57 358.863 517.57 cv
355.605 517.57 li
355.512 517.57 355.445 517.531 355.398 517.449 cv
355.352 517.371 355.328 517.234 355.328 517.035 cv
355.328 516.84 355.352 516.699 355.398 516.621 cv
355.445 516.543 355.512 516.504 355.605 516.504 cv
358.863 516.504 li
358.902 516.504 358.941 516.512 358.977 516.527 cv
359.008 516.543 359.035 516.574 359.063 516.617 cv
359.082 516.664 359.102 516.719 359.117 516.785 cv
359.129 516.855 359.137 516.941 359.137 517.035 cv
cp
f
362.391 520.766 mo
362.387 520.809 362.379 520.844 362.359 520.875 cv
362.336 520.906 362.297 520.934 362.25 520.949 cv
362.195 520.969 362.129 520.98 362.043 520.996 cv
361.957 521.008 361.848 521.016 361.723 521.016 cv
361.594 521.016 361.488 521.008 361.402 520.996 cv
361.313 520.98 361.242 520.969 361.191 520.949 cv
361.137 520.934 361.102 520.906 361.082 520.875 cv
361.059 520.844 361.047 520.809 361.051 520.766 cv
361.051 511.086 li
361.047 511.047 361.059 511.012 361.086 510.977 cv
361.105 510.949 361.145 510.922 361.203 510.902 cv
361.254 510.887 361.324 510.871 361.414 510.855 cv
361.496 510.844 361.598 510.84 361.723 510.836 cv
361.848 510.84 361.957 510.844 362.043 510.855 cv
362.129 510.871 362.195 510.887 362.25 510.902 cv
362.297 510.922 362.336 510.949 362.359 510.977 cv
362.379 511.012 362.387 511.047 362.391 511.086 cv
cp
f
375.379 520.773 mo
375.375 520.82 375.367 520.855 375.348 520.879 cv
375.324 520.91 375.289 520.934 375.246 520.953 cv
375.195 520.973 375.129 520.984 375.051 521 cv
374.965 521.008 374.863 521.016 374.738 521.016 cv
374.605 521.016 374.496 521.008 374.418 521 cv
374.332 520.984 374.266 520.973 374.219 520.953 cv
374.164 520.934 374.129 520.91 374.113 520.879 cv
374.09 520.855 374.082 520.82 374.082 520.773 cv
374.082 516.512 li
374.082 516.219 374.055 515.949 374.004 515.703 cv
373.949 515.461 373.867 515.25 373.754 515.07 cv
373.641 514.895 373.496 514.758 373.32 514.664 cv
373.141 514.57 372.93 514.523 372.695 514.523 cv
372.398 514.523 372.102 514.641 371.805 514.867 cv
371.5 515.102 371.172 515.434 370.816 515.871 cv
370.816 520.773 li
370.813 520.82 370.801 520.855 370.785 520.879 cv
370.762 520.91 370.73 520.934 370.684 520.953 cv
370.633 520.973 370.566 520.984 370.484 521 cv
370.398 521.008 370.293 521.016 370.172 521.016 cv
370.051 521.016 369.949 521.008 369.863 521 cv
369.777 520.984 369.707 520.973 369.66 520.953 cv
369.605 520.934 369.574 520.91 369.559 520.879 cv
369.539 520.855 369.527 520.82 369.531 520.773 cv
369.531 516.512 li
369.527 516.219 369.5 515.949 369.445 515.703 cv
369.387 515.461 369.301 515.25 369.188 515.07 cv
369.074 514.895 368.93 514.758 368.758 514.664 cv
368.578 514.57 368.371 514.523 368.137 514.523 cv
367.836 514.523 367.539 514.641 367.238 514.867 cv
366.938 515.102 366.609 515.434 366.258 515.871 cv
366.258 520.773 li
366.254 520.82 366.242 520.855 366.227 520.879 cv
366.203 520.91 366.172 520.934 366.125 520.953 cv
366.078 520.973 366.012 520.984 365.934 521 cv
365.848 521.008 365.742 521.016 365.613 521.016 cv
365.484 521.016 365.379 521.008 365.301 521 cv
365.215 520.984 365.148 520.973 365.102 520.953 cv
365.047 520.934 365.016 520.91 365 520.879 cv
364.98 520.855 364.969 520.82 364.973 520.773 cv
364.973 513.762 li
364.969 513.723 364.977 513.687 364.996 513.656 cv
365.008 513.629 365.039 513.605 365.09 513.578 cv
365.133 513.559 365.195 513.543 365.27 513.531 cv
365.34 513.527 365.434 513.523 365.559 513.52 cv
365.668 513.523 365.766 513.527 365.844 513.531 cv
365.918 513.543 365.977 513.559 366.02 513.578 cv
366.059 513.605 366.086 513.629 366.105 513.656 cv
366.121 513.687 366.129 513.723 366.133 513.762 cv
366.133 514.687 li
366.523 514.246 366.906 513.926 367.281 513.719 cv
367.648 513.516 368.027 513.41 368.41 513.41 cv
368.699 513.41 368.957 513.445 369.191 513.512 cv
369.418 513.582 369.625 513.676 369.805 513.797 cv
369.98 513.918 370.129 514.062 370.258 514.23 cv
370.379 514.402 370.484 514.594 370.57 514.797 cv
370.801 514.547 371.023 514.332 371.234 514.152 cv
371.445 513.98 371.648 513.836 371.844 513.723 cv
372.039 513.617 372.227 513.539 372.41 513.484 cv
372.594 513.437 372.781 513.41 372.969 513.41 cv
373.422 513.41 373.801 513.492 374.105 513.648 cv
374.41 513.812 374.656 514.023 374.852 514.285 cv
375.039 514.551 375.176 514.859 375.258 515.215 cv
375.336 515.57 375.375 515.945 375.379 516.34 cv
cp
f
383.008 520.781 mo
383.004 520.844 382.984 520.891 382.945 520.922 cv
382.902 520.953 382.844 520.977 382.773 520.992 cv
382.695 521.008 382.59 521.016 382.453 521.016 cv
382.316 521.016 382.207 521.008 382.129 520.992 cv
382.043 520.977 381.984 520.953 381.953 520.922 cv
381.914 520.891 381.898 520.844 381.902 520.781 cv
381.902 520.082 li
381.594 520.41 381.25 520.664 380.875 520.844 cv
380.496 521.027 380.098 521.113 379.68 521.117 cv
379.305 521.113 378.973 521.066 378.676 520.973 cv
378.379 520.875 378.125 520.738 377.914 520.555 cv
377.703 520.375 377.539 520.152 377.422 519.887 cv
377.305 519.625 377.246 519.324 377.25 518.98 cv
377.246 518.59 377.324 518.246 377.488 517.953 cv
377.645 517.664 377.879 517.422 378.184 517.23 cv
378.484 517.039 378.852 516.895 379.289 516.797 cv
379.723 516.703 380.215 516.656 380.762 516.652 cv
381.73 516.652 li
381.73 516.105 li
381.727 515.836 381.699 515.598 381.645 515.391 cv
381.586 515.184 381.492 515.012 381.367 514.871 cv
381.234 514.734 381.07 514.629 380.871 514.559 cv
380.664 514.488 380.414 514.453 380.125 514.453 cv
379.805 514.453 379.52 514.492 379.27 514.566 cv
379.012 514.645 378.793 514.727 378.605 514.816 cv
378.418 514.91 378.258 514.996 378.133 515.066 cv
378 515.145 377.906 515.18 377.848 515.18 cv
377.805 515.18 377.77 515.172 377.738 515.148 cv
377.707 515.133 377.68 515.102 377.656 515.055 cv
377.633 515.016 377.613 514.961 377.605 514.895 cv
377.59 514.832 377.586 514.762 377.59 514.68 cv
377.586 514.555 377.594 514.449 377.617 514.371 cv
377.633 514.297 377.68 514.227 377.75 514.156 cv
377.82 514.09 377.941 514.012 378.113 513.922 cv
378.285 513.832 378.48 513.75 378.703 513.672 cv
378.926 513.602 379.172 513.539 379.438 513.484 cv
379.703 513.437 379.969 513.41 380.242 513.41 cv
380.742 513.41 381.172 513.469 381.523 513.582 cv
381.875 513.699 382.16 513.867 382.383 514.086 cv
382.598 514.309 382.758 514.582 382.859 514.906 cv
382.957 515.238 383.004 515.621 383.008 516.051 cv
cp
381.73 517.578 mo
380.629 517.578 li
380.273 517.582 379.969 517.613 379.711 517.668 cv
379.449 517.73 379.234 517.816 379.063 517.934 cv
378.891 518.051 378.766 518.191 378.688 518.355 cv
378.605 518.52 378.563 518.707 378.566 518.918 cv
378.563 519.285 378.68 519.578 378.91 519.789 cv
379.141 520.008 379.465 520.113 379.883 520.113 cv
380.219 520.113 380.531 520.027 380.82 519.855 cv
381.109 519.684 381.41 519.422 381.73 519.066 cv
cp
f
391.227 514.078 mo
391.223 514.262 391.199 514.395 391.152 514.473 cv
391.102 514.555 391.039 514.594 390.965 514.594 cv
389.957 514.594 li
390.137 514.781 390.266 514.988 390.34 515.215 cv
390.41 515.441 390.445 515.676 390.449 515.918 cv
390.445 516.324 390.379 516.684 390.254 516.996 cv
390.121 517.309 389.938 517.574 389.695 517.785 cv
389.453 518.004 389.164 518.168 388.836 518.281 cv
388.5 518.398 388.133 518.457 387.73 518.453 cv
387.441 518.457 387.168 518.418 386.914 518.34 cv
386.652 518.266 386.457 518.172 386.32 518.055 cv
386.227 518.152 386.148 518.258 386.09 518.375 cv
386.027 518.496 385.996 518.633 386 518.785 cv
385.996 518.969 386.082 519.121 386.254 519.238 cv
386.422 519.363 386.645 519.426 386.926 519.434 cv
388.758 519.512 li
389.105 519.523 389.422 519.57 389.715 519.656 cv
390.004 519.742 390.258 519.867 390.473 520.023 cv
390.684 520.184 390.852 520.375 390.973 520.605 cv
391.09 520.84 391.148 521.109 391.152 521.414 cv
391.148 521.734 391.082 522.039 390.949 522.332 cv
390.813 522.621 390.605 522.875 390.328 523.098 cv
390.047 523.316 389.691 523.492 389.262 523.621 cv
388.832 523.746 388.324 523.809 387.738 523.812 cv
387.168 523.809 386.684 523.762 386.289 523.668 cv
385.891 523.57 385.566 523.437 385.313 523.273 cv
385.059 523.105 384.875 522.91 384.762 522.68 cv
384.645 522.445 384.586 522.191 384.59 521.926 cv
384.586 521.754 384.605 521.59 384.652 521.43 cv
384.691 521.266 384.754 521.113 384.84 520.969 cv
384.922 520.824 385.031 520.687 385.16 520.551 cv
385.285 520.422 385.43 520.289 385.602 520.16 cv
385.344 520.031 385.156 519.867 385.035 519.668 cv
384.914 519.473 384.855 519.262 384.855 519.027 cv
384.855 518.715 384.918 518.43 385.047 518.18 cv
385.176 517.93 385.336 517.707 385.531 517.508 cv
385.367 517.316 385.242 517.102 385.148 516.859 cv
385.055 516.621 385.008 516.328 385.008 515.98 cv
385.008 515.586 385.074 515.227 385.211 514.906 cv
385.344 514.59 385.531 514.324 385.773 514.105 cv
386.012 513.891 386.297 513.723 386.633 513.602 cv
386.965 513.488 387.332 513.43 387.73 513.426 cv
387.941 513.43 388.141 513.441 388.324 513.461 cv
388.508 513.488 388.68 513.52 388.844 513.559 cv
390.965 513.559 li
391.051 513.562 391.117 513.605 391.16 513.687 cv
391.203 513.777 391.223 513.906 391.227 514.078 cv
cp
389.219 515.926 mo
389.215 515.453 389.082 515.082 388.824 514.809 cv
388.559 514.543 388.188 514.406 387.707 514.406 cv
387.453 514.406 387.234 514.449 387.055 514.531 cv
386.867 514.617 386.715 514.73 386.594 514.875 cv
386.473 515.023 386.383 515.191 386.324 515.379 cv
386.262 515.566 386.23 515.766 386.234 515.973 cv
386.23 516.437 386.363 516.801 386.625 517.066 cv
386.887 517.332 387.254 517.465 387.73 517.461 cv
387.98 517.465 388.199 517.426 388.391 517.34 cv
388.574 517.262 388.73 517.148 388.855 517.008 cv
388.977 516.867 389.066 516.703 389.129 516.512 cv
389.184 516.328 389.215 516.133 389.219 515.926 cv
cp
389.863 521.484 mo
389.859 521.18 389.734 520.949 389.492 520.785 cv
389.242 520.625 388.91 520.535 388.492 520.523 cv
386.676 520.461 li
386.508 520.594 386.371 520.719 386.27 520.832 cv
386.16 520.949 386.078 521.059 386.016 521.168 cv
385.953 521.273 385.91 521.379 385.887 521.484 cv
385.863 521.586 385.852 521.691 385.852 521.801 cv
385.852 522.137 386.02 522.391 386.363 522.57 cv
386.703 522.742 387.184 522.832 387.801 522.832 cv
388.188 522.832 388.512 522.793 388.777 522.719 cv
389.035 522.641 389.246 522.539 389.41 522.418 cv
389.566 522.289 389.684 522.148 389.758 521.988 cv
389.824 521.828 389.859 521.66 389.863 521.484 cv
cp
f
398.789 516.965 mo
398.785 517.168 398.734 517.309 398.637 517.395 cv
398.531 517.48 398.414 517.523 398.289 517.523 cv
393.672 517.523 li
393.668 517.914 393.707 518.266 393.789 518.578 cv
393.863 518.891 393.996 519.16 394.18 519.379 cv
394.359 519.605 394.594 519.777 394.891 519.895 cv
395.18 520.02 395.539 520.078 395.965 520.074 cv
396.297 520.078 396.594 520.051 396.855 519.992 cv
397.117 519.941 397.344 519.879 397.535 519.809 cv
397.723 519.742 397.879 519.684 398.004 519.625 cv
398.125 519.574 398.219 519.547 398.281 519.543 cv
398.316 519.547 398.348 519.555 398.379 519.57 cv
398.406 519.59 398.43 519.617 398.449 519.652 cv
398.461 519.691 398.473 519.742 398.484 519.805 cv
398.488 519.871 398.492 519.949 398.496 520.043 cv
398.492 520.113 398.488 520.172 398.488 520.219 cv
398.48 520.266 398.477 520.309 398.469 520.348 cv
398.461 520.387 398.445 520.422 398.43 520.453 cv
398.406 520.484 398.383 520.516 398.359 520.543 cv
398.328 520.574 398.246 520.621 398.105 520.684 cv
397.965 520.75 397.781 520.812 397.559 520.875 cv
397.332 520.937 397.074 520.992 396.781 521.043 cv
396.488 521.09 396.176 521.113 395.844 521.117 cv
395.266 521.113 394.758 521.035 394.328 520.875 cv
393.891 520.715 393.527 520.477 393.234 520.16 cv
392.934 519.844 392.711 519.449 392.563 518.969 cv
392.414 518.492 392.34 517.934 392.34 517.297 cv
392.34 516.699 392.414 516.16 392.57 515.676 cv
392.723 515.199 392.949 514.789 393.246 514.453 cv
393.539 514.117 393.895 513.859 394.309 513.68 cv
394.723 513.5 395.188 513.41 395.703 513.41 cv
396.254 513.41 396.723 513.5 397.109 513.676 cv
397.496 513.855 397.813 514.094 398.066 514.391 cv
398.313 514.691 398.496 515.043 398.613 515.441 cv
398.727 515.848 398.785 516.277 398.789 516.73 cv
cp
397.496 516.582 mo
397.512 515.906 397.359 515.375 397.043 514.992 cv
396.727 514.609 396.258 514.418 395.641 514.414 cv
395.316 514.418 395.035 514.477 394.797 514.594 cv
394.555 514.715 394.355 514.875 394.195 515.07 cv
394.031 515.27 393.906 515.5 393.82 515.762 cv
393.73 516.023 393.68 516.297 393.672 516.582 cv
cp
f
405.156 518.863 mo
405.152 519.227 405.086 519.547 404.957 519.824 cv
404.824 520.105 404.637 520.34 404.395 520.531 cv
404.148 520.727 403.855 520.871 403.52 520.969 cv
403.18 521.066 402.809 521.113 402.406 521.117 cv
402.152 521.113 401.914 521.094 401.691 521.059 cv
401.465 521.016 401.266 520.969 401.086 520.91 cv
400.906 520.852 400.754 520.789 400.629 520.723 cv
400.504 520.66 400.41 520.602 400.355 520.547 cv
400.297 520.496 400.258 520.426 400.234 520.328 cv
400.207 520.238 400.195 520.109 400.195 519.949 cv
400.195 519.852 400.199 519.77 400.211 519.699 cv
400.219 519.633 400.23 519.578 400.25 519.535 cv
400.262 519.496 400.285 519.465 400.313 519.445 cv
400.34 519.43 400.371 519.422 400.41 519.418 cv
400.465 519.422 400.551 519.457 400.664 519.523 cv
400.773 519.598 400.91 519.676 401.078 519.754 cv
401.238 519.84 401.43 519.914 401.656 519.984 cv
401.875 520.055 402.133 520.09 402.43 520.09 cv
402.645 520.09 402.844 520.066 403.023 520.02 cv
403.199 519.973 403.352 519.906 403.48 519.812 cv
403.609 519.727 403.711 519.609 403.781 519.465 cv
403.852 519.328 403.887 519.16 403.887 518.965 cv
403.887 518.77 403.836 518.605 403.734 518.469 cv
403.633 518.336 403.496 518.215 403.332 518.109 cv
403.164 518.008 402.98 517.918 402.773 517.832 cv
402.563 517.754 402.348 517.668 402.129 517.578 cv
401.91 517.492 401.695 517.391 401.484 517.277 cv
401.273 517.168 401.082 517.035 400.918 516.871 cv
400.746 516.715 400.613 516.52 400.516 516.293 cv
400.41 516.07 400.359 515.805 400.363 515.492 cv
400.359 515.219 400.414 514.953 400.523 514.699 cv
400.629 514.449 400.789 514.23 401.004 514.039 cv
401.215 513.852 401.48 513.699 401.801 513.582 cv
402.121 513.469 402.492 513.41 402.922 513.41 cv
403.105 513.41 403.293 513.426 403.48 513.457 cv
403.664 513.488 403.832 513.527 403.988 513.574 cv
404.137 513.621 404.266 513.672 404.375 513.727 cv
404.477 513.781 404.559 513.832 404.617 513.871 cv
404.668 513.918 404.703 513.953 404.727 513.98 cv
404.742 514.012 404.758 514.047 404.766 514.082 cv
404.773 514.125 404.781 514.172 404.789 514.227 cv
404.797 514.285 404.801 514.355 404.801 514.437 cv
404.801 514.527 404.797 514.605 404.789 514.668 cv
404.781 514.738 404.766 514.789 404.75 514.828 cv
404.727 514.871 404.707 514.902 404.684 514.918 cv
404.656 514.937 404.625 514.945 404.598 514.945 cv
404.547 514.945 404.48 514.918 404.395 514.859 cv
404.305 514.805 404.191 514.742 404.051 514.676 cv
403.91 514.613 403.742 514.555 403.555 514.492 cv
403.363 514.437 403.148 514.406 402.906 514.406 cv
402.684 514.406 402.492 514.434 402.328 514.48 cv
402.16 514.535 402.023 514.605 401.918 514.691 cv
401.813 514.785 401.73 514.891 401.68 515.016 cv
401.621 515.141 401.594 515.277 401.598 515.422 cv
401.594 515.625 401.645 515.793 401.75 515.93 cv
401.852 516.07 401.988 516.191 402.156 516.293 cv
402.32 516.398 402.512 516.492 402.727 516.574 cv
402.938 516.66 403.152 516.746 403.375 516.832 cv
403.594 516.922 403.813 517.023 404.031 517.129 cv
404.246 517.238 404.438 517.367 404.605 517.523 cv
404.77 517.68 404.902 517.867 405.004 518.086 cv
405.102 518.305 405.152 518.566 405.156 518.863 cv
cp
f
154.027 11.57 mo
154.023 12.41 153.922 13.16 153.715 13.816 cv
153.508 14.48 153.199 15.039 152.789 15.496 cv
152.379 15.957 151.871 16.309 151.266 16.547 cv
150.66 16.789 149.961 16.906 149.168 16.91 cv
148.379 16.906 147.691 16.805 147.109 16.602 cv
146.523 16.398 146.035 16.086 145.648 15.664 cv
145.258 15.242 144.969 14.707 144.773 14.059 cv
144.578 13.41 144.48 12.641 144.484 11.75 cv
144.48 10.937 144.582 10.207 144.793 9.55103 cv
144.996 8.90198 145.305 8.34802 145.719 7.88702 cv
146.125 7.43402 146.633 7.08197 147.242 6.836 cv
147.844 6.59399 148.547 6.47302 149.352 6.46899 cv
150.113 6.47302 150.789 6.57397 151.375 6.77301 cv
151.957 6.97699 152.445 7.28497 152.84 7.70697 cv
153.23 8.12903 153.527 8.65997 153.727 9.30103 cv
153.926 9.94098 154.023 10.699 154.027 11.57 cv
cp
151.879 11.68 mo
151.875 11.152 151.832 10.672 151.754 10.238 cv
151.668 9.80499 151.527 9.43402 151.328 9.12097 cv
151.125 8.81201 150.859 8.57397 150.527 8.40601 cv
150.195 8.23798 149.781 8.15198 149.285 8.15198 cv
148.777 8.15198 148.355 8.25 148.02 8.43701 cv
147.684 8.62903 147.41 8.87903 147.203 9.19501 cv
146.992 9.51599 146.844 9.88702 146.762 10.309 cv
146.672 10.73 146.629 11.18 146.633 11.648 cv
146.629 12.203 146.672 12.699 146.758 13.137 cv
146.84 13.578 146.98 13.953 147.18 14.262 cv
147.375 14.574 147.641 14.809 147.973 14.973 cv
148.305 15.137 148.723 15.219 149.23 15.219 cv
149.73 15.219 150.148 15.125 150.488 14.937 cv
150.824 14.75 151.098 14.496 151.309 14.176 cv
151.512 13.855 151.66 13.48 151.75 13.051 cv
151.832 12.621 151.875 12.164 151.879 11.68 cv
cp
f
162.027 9.508 mo
162.023 9.53497 162.023 9.56598 162.023 9.60199 cv
162.02 9.64099 162.016 9.67999 162.008 9.72302 cv
162 9.76599 161.988 9.81598 161.977 9.87097 cv
161.961 9.92999 161.945 9.99597 161.926 10.066 cv
159.84 16.355 li
159.813 16.445 159.777 16.52 159.734 16.57 cv
159.688 16.629 159.613 16.672 159.516 16.699 cv
159.41 16.73 159.273 16.746 159.102 16.762 cv
158.926 16.77 158.699 16.777 158.422 16.777 cv
158.145 16.777 157.918 16.77 157.746 16.758 cv
157.57 16.742 157.434 16.723 157.336 16.691 cv
157.234 16.664 157.164 16.621 157.121 16.562 cv
157.074 16.512 157.039 16.441 157.016 16.355 cv
154.93 10.066 li
154.898 9.96503 154.871 9.87097 154.855 9.789 cv
154.832 9.70697 154.824 9.64801 154.824 9.60901 cv
154.82 9.578 154.816 9.54303 154.82 9.508 cv
154.816 9.45697 154.832 9.40997 154.863 9.37097 cv
154.891 9.33197 154.941 9.30103 155.016 9.27301 cv
155.086 9.25 155.184 9.22998 155.313 9.21899 cv
155.438 9.211 155.598 9.20697 155.793 9.203 cv
156.004 9.20697 156.176 9.21503 156.309 9.22302 cv
156.434 9.23798 156.539 9.25403 156.617 9.27698 cv
156.691 9.30103 156.742 9.336 156.777 9.37903 cv
156.805 9.42603 156.832 9.47998 156.855 9.539 cv
158.438 14.641 li
158.484 14.836 li
158.531 14.641 li
160.09 9.539 li
160.102 9.47998 160.125 9.42603 160.16 9.37903 cv
160.191 9.336 160.246 9.30103 160.32 9.27698 cv
160.391 9.25403 160.488 9.23798 160.613 9.22302 cv
160.734 9.21503 160.895 9.20697 161.094 9.203 cv
161.285 9.20697 161.441 9.211 161.563 9.21899 cv
161.684 9.22998 161.777 9.25 161.848 9.27301 cv
161.914 9.30103 161.961 9.33197 161.988 9.37097 cv
162.012 9.40997 162.023 9.45697 162.027 9.508 cv
cp
f
169.504 12.789 mo
169.5 13.027 169.449 13.203 169.344 13.316 cv
169.234 13.434 169.086 13.492 168.906 13.488 cv
164.672 13.488 li
164.668 13.789 164.703 14.059 164.777 14.297 cv
164.844 14.539 164.957 14.742 165.113 14.91 cv
165.266 15.082 165.461 15.211 165.703 15.297 cv
165.941 15.387 166.23 15.43 166.574 15.43 cv
166.914 15.43 167.215 15.406 167.477 15.355 cv
167.734 15.309 167.961 15.254 168.152 15.191 cv
168.34 15.133 168.496 15.078 168.625 15.027 cv
168.746 14.98 168.848 14.957 168.93 14.953 cv
168.973 14.957 169.012 14.965 169.047 14.98 cv
169.074 15 169.102 15.031 169.121 15.078 cv
169.141 15.125 169.152 15.191 169.164 15.277 cv
169.168 15.363 169.172 15.473 169.176 15.602 cv
169.172 15.719 169.172 15.816 169.168 15.895 cv
169.16 15.977 169.152 16.043 169.145 16.098 cv
169.133 16.156 169.117 16.207 169.098 16.242 cv
169.078 16.285 169.051 16.32 169.02 16.355 cv
168.984 16.395 168.891 16.445 168.742 16.504 cv
168.586 16.57 168.395 16.633 168.164 16.687 cv
167.926 16.75 167.656 16.797 167.359 16.844 cv
167.055 16.883 166.734 16.906 166.395 16.91 cv
165.773 16.906 165.23 16.832 164.77 16.676 cv
164.301 16.523 163.914 16.285 163.605 15.969 cv
163.289 15.652 163.055 15.254 162.906 14.77 cv
162.75 14.289 162.676 13.723 162.68 13.066 cv
162.676 12.453 162.754 11.895 162.918 11.398 cv
163.074 10.902 163.309 10.484 163.621 10.137 cv
163.926 9.79303 164.301 9.52698 164.738 9.34399 cv
165.176 9.164 165.668 9.07397 166.223 9.07001 cv
166.801 9.07397 167.301 9.15997 167.715 9.328 cv
168.129 9.50403 168.465 9.742 168.73 10.043 cv
168.992 10.348 169.188 10.707 169.316 11.121 cv
169.438 11.539 169.5 11.988 169.504 12.477 cv
cp
167.602 12.227 mo
167.613 11.676 167.504 11.242 167.27 10.93 cv
167.035 10.617 166.668 10.461 166.176 10.457 cv
165.926 10.461 165.711 10.508 165.527 10.598 cv
165.34 10.695 165.188 10.82 165.066 10.977 cv
164.941 11.137 164.848 11.324 164.785 11.539 cv
164.719 11.754 164.68 11.984 164.672 12.227 cv
cp
f
175.578 10.16 mo
175.578 10.352 175.57 10.504 175.563 10.621 cv
175.547 10.742 175.531 10.836 175.516 10.902 cv
175.492 10.973 175.465 11.02 175.434 11.043 cv
175.395 11.07 175.352 11.082 175.305 11.082 cv
175.258 11.082 175.211 11.074 175.164 11.055 cv
175.109 11.039 175.051 11.02 174.988 10.996 cv
174.918 10.977 174.848 10.957 174.773 10.937 cv
174.691 10.922 174.605 10.914 174.516 10.91 cv
174.402 10.914 174.293 10.934 174.188 10.977 cv
174.078 11.023 173.965 11.094 173.852 11.184 cv
173.73 11.277 173.609 11.402 173.484 11.555 cv
173.355 11.715 173.219 11.906 173.074 12.133 cv
173.074 16.465 li
173.07 16.52 173.055 16.562 173.027 16.602 cv
172.992 16.641 172.938 16.676 172.867 16.699 cv
172.789 16.727 172.691 16.742 172.566 16.758 cv
172.441 16.77 172.281 16.777 172.094 16.777 cv
171.898 16.777 171.742 16.77 171.617 16.758 cv
171.492 16.742 171.391 16.727 171.316 16.699 cv
171.238 16.676 171.184 16.641 171.156 16.602 cv
171.121 16.562 171.105 16.52 171.109 16.465 cv
171.109 9.51599 li
171.105 9.46899 171.121 9.422 171.148 9.37903 cv
171.172 9.34399 171.219 9.31201 171.289 9.28101 cv
171.355 9.258 171.441 9.23798 171.551 9.22302 cv
171.656 9.21503 171.789 9.20697 171.953 9.203 cv
172.117 9.20697 172.254 9.21503 172.363 9.22302 cv
172.469 9.23798 172.555 9.258 172.617 9.28101 cv
172.676 9.31201 172.719 9.34399 172.746 9.37903 cv
172.77 9.422 172.781 9.46899 172.785 9.51599 cv
172.785 10.379 li
172.965 10.121 173.137 9.90997 173.301 9.73798 cv
173.457 9.57397 173.613 9.43701 173.762 9.336 cv
173.906 9.23798 174.051 9.172 174.195 9.12903 cv
174.34 9.09399 174.484 9.07397 174.633 9.07001 cv
174.699 9.07397 174.773 9.078 174.852 9.08197 cv
174.93 9.09399 175.008 9.10498 175.094 9.12097 cv
175.172 9.14099 175.246 9.15997 175.313 9.18402 cv
175.371 9.20697 175.418 9.23401 175.449 9.258 cv
175.477 9.289 175.496 9.31598 175.512 9.34399 cv
175.523 9.37903 175.535 9.422 175.547 9.47302 cv
175.555 9.53101 175.563 9.61298 175.57 9.71899 cv
175.574 9.828 175.578 9.97699 175.578 10.16 cv
cp
f
182.336 16.488 mo
182.332 16.566 182.305 16.621 182.258 16.66 cv
182.203 16.703 182.121 16.73 182.012 16.75 cv
181.895 16.766 181.73 16.777 181.516 16.777 cv
181.277 16.777 181.105 16.766 181.004 16.75 cv
180.895 16.73 180.82 16.703 180.781 16.66 cv
180.734 16.621 180.715 16.566 180.715 16.488 cv
180.715 15.937 li
180.426 16.246 180.098 16.484 179.734 16.652 cv
179.367 16.824 178.961 16.906 178.516 16.91 cv
178.145 16.906 177.805 16.859 177.496 16.766 cv
177.188 16.672 176.922 16.531 176.695 16.336 cv
176.469 16.148 176.293 15.914 176.168 15.633 cv
176.043 15.355 175.98 15.027 175.984 14.648 cv
175.98 14.25 176.059 13.898 176.219 13.594 cv
176.375 13.297 176.613 13.051 176.93 12.855 cv
177.242 12.664 177.633 12.52 178.102 12.422 cv
178.57 12.332 179.113 12.285 179.73 12.281 cv
180.41 12.281 li
180.41 11.859 li
180.41 11.645 180.387 11.453 180.344 11.289 cv
180.297 11.129 180.223 10.992 180.125 10.879 cv
180.02 10.773 179.887 10.691 179.719 10.637 cv
179.547 10.586 179.336 10.562 179.094 10.559 cv
178.762 10.562 178.469 10.598 178.215 10.668 cv
177.953 10.742 177.727 10.824 177.531 10.91 cv
177.332 11.004 177.168 11.082 177.039 11.152 cv
176.902 11.227 176.793 11.266 176.715 11.262 cv
176.652 11.266 176.602 11.246 176.563 11.207 cv
176.516 11.172 176.48 11.121 176.453 11.051 cv
176.422 10.988 176.398 10.902 176.387 10.801 cv
176.367 10.703 176.359 10.594 176.363 10.473 cv
176.359 10.312 176.375 10.187 176.402 10.09 cv
176.426 10 176.473 9.914 176.551 9.836 cv
176.621 9.76202 176.75 9.67999 176.934 9.59003 cv
177.113 9.5 177.324 9.414 177.57 9.336 cv
177.813 9.258 178.082 9.19501 178.371 9.14502 cv
178.66 9.09802 178.957 9.07397 179.266 9.07001 cv
179.809 9.07397 180.273 9.125 180.66 9.22998 cv
181.047 9.34003 181.367 9.50403 181.617 9.72302 cv
181.867 9.94098 182.047 10.227 182.164 10.574 cv
182.273 10.926 182.332 11.34 182.336 11.812 cv
cp
180.41 13.512 mo
179.66 13.512 li
179.344 13.516 179.074 13.539 178.852 13.582 cv
178.625 13.633 178.441 13.703 178.305 13.793 cv
178.16 13.891 178.059 14.004 177.996 14.133 cv
177.93 14.27 177.895 14.418 177.898 14.586 cv
177.895 14.879 177.988 15.109 178.176 15.273 cv
178.359 15.441 178.617 15.523 178.945 15.523 cv
179.219 15.523 179.469 15.453 179.703 15.312 cv
179.93 15.172 180.168 14.969 180.41 14.695 cv
cp
f
186.258 16.465 mo
186.254 16.52 186.238 16.562 186.211 16.602 cv
186.176 16.641 186.121 16.676 186.051 16.699 cv
185.973 16.727 185.875 16.742 185.75 16.758 cv
185.625 16.77 185.465 16.777 185.277 16.777 cv
185.082 16.777 184.926 16.77 184.801 16.758 cv
184.676 16.742 184.574 16.727 184.5 16.699 cv
184.422 16.676 184.367 16.641 184.34 16.602 cv
184.305 16.562 184.289 16.52 184.293 16.465 cv
184.293 6.21899 li
184.289 6.16803 184.305 6.12097 184.34 6.078 cv
184.367 6.039 184.422 6.00403 184.5 5.97302 cv
184.574 5.94501 184.676 5.92603 184.801 5.90601 cv
184.926 5.89502 185.082 5.88702 185.277 5.883 cv
185.465 5.88702 185.625 5.89502 185.75 5.90601 cv
185.875 5.92603 185.973 5.94501 186.051 5.97302 cv
186.121 6.00403 186.176 6.039 186.211 6.078 cv
186.238 6.12097 186.254 6.16803 186.258 6.21899 cv
cp
f
190.234 16.465 mo
190.23 16.52 190.215 16.562 190.188 16.602 cv
190.152 16.641 190.098 16.676 190.027 16.699 cv
189.949 16.727 189.852 16.742 189.727 16.758 cv
189.602 16.77 189.441 16.777 189.254 16.777 cv
189.059 16.777 188.902 16.77 188.777 16.758 cv
188.652 16.742 188.551 16.727 188.477 16.699 cv
188.398 16.676 188.344 16.641 188.316 16.602 cv
188.281 16.562 188.266 16.52 188.27 16.465 cv
188.27 6.21899 li
188.266 6.16803 188.281 6.12097 188.316 6.078 cv
188.344 6.039 188.398 6.00403 188.477 5.97302 cv
188.551 5.94501 188.652 5.92603 188.777 5.90601 cv
188.902 5.89502 189.059 5.88702 189.254 5.883 cv
189.441 5.88702 189.602 5.89502 189.727 5.90601 cv
189.852 5.92603 189.949 5.94501 190.027 5.97302 cv
190.098 6.00403 190.152 6.039 190.188 6.078 cv
190.215 6.12097 190.23 6.16803 190.234 6.21899 cv
cp
f
203.398 16.465 mo
203.398 16.527 203.387 16.574 203.367 16.609 cv
203.348 16.652 203.301 16.684 203.223 16.707 cv
203.145 16.73 203.027 16.746 202.879 16.762 cv
202.723 16.77 202.52 16.777 202.262 16.777 cv
202.043 16.777 201.867 16.77 201.738 16.762 cv
201.609 16.746 201.508 16.73 201.434 16.703 cv
201.355 16.676 201.301 16.641 201.273 16.594 cv
201.238 16.555 201.215 16.5 201.195 16.434 cv
200.289 14.184 li
200.18 13.93 200.074 13.703 199.973 13.504 cv
199.863 13.309 199.75 13.145 199.625 13.012 cv
199.496 12.883 199.348 12.781 199.184 12.711 cv
199.016 12.645 198.824 12.613 198.609 12.609 cv
197.969 12.609 li
197.969 16.449 li
197.965 16.504 197.949 16.551 197.918 16.59 cv
197.883 16.633 197.828 16.668 197.75 16.691 cv
197.672 16.719 197.566 16.738 197.438 16.754 cv
197.305 16.77 197.141 16.777 196.941 16.777 cv
196.742 16.777 196.574 16.77 196.445 16.754 cv
196.309 16.738 196.203 16.719 196.129 16.691 cv
196.047 16.668 195.992 16.633 195.965 16.59 cv
195.93 16.551 195.914 16.504 195.918 16.449 cv
195.918 7.29303 li
195.914 7.06598 195.973 6.90198 196.094 6.797 cv
196.207 6.69897 196.352 6.64801 196.527 6.64502 cv
199.137 6.64502 li
199.398 6.64801 199.617 6.65198 199.793 6.65997 cv
199.961 6.672 200.117 6.68402 200.262 6.69897 cv
200.664 6.758 201.027 6.85901 201.352 6.99597 cv
201.676 7.14099 201.953 7.32397 202.18 7.547 cv
202.406 7.77698 202.578 8.04303 202.699 8.35199 cv
202.816 8.65997 202.875 9.01599 202.879 9.414 cv
202.875 9.75403 202.832 10.062 202.75 10.336 cv
202.66 10.617 202.535 10.863 202.371 11.082 cv
202.203 11.301 201.996 11.492 201.754 11.648 cv
201.508 11.812 201.23 11.941 200.922 12.039 cv
201.07 12.113 201.215 12.203 201.348 12.305 cv
201.48 12.414 201.602 12.539 201.719 12.684 cv
201.832 12.832 201.945 13 202.051 13.187 cv
202.152 13.379 202.254 13.594 202.355 13.832 cv
203.207 15.82 li
203.281 16.02 203.332 16.16 203.359 16.25 cv
203.383 16.344 203.398 16.418 203.398 16.465 cv
cp
200.758 9.625 mo
200.754 9.29303 200.68 9.01202 200.531 8.78101 cv
200.379 8.55499 200.133 8.39502 199.793 8.297 cv
199.688 8.27301 199.57 8.25 199.438 8.23401 cv
199.305 8.21899 199.121 8.211 198.887 8.211 cv
197.969 8.211 li
197.969 11.074 li
199.012 11.074 li
199.301 11.078 199.559 11.043 199.777 10.969 cv
199.996 10.902 200.176 10.801 200.32 10.672 cv
200.465 10.547 200.574 10.395 200.648 10.215 cv
200.719 10.039 200.754 9.84399 200.758 9.625 cv
cp
f
211.379 16.465 mo
211.375 16.52 211.363 16.562 211.34 16.602 cv
211.313 16.641 211.266 16.676 211.203 16.699 cv
211.137 16.727 211.051 16.742 210.945 16.758 cv
210.84 16.77 210.707 16.777 210.547 16.777 cv
210.371 16.777 210.23 16.77 210.129 16.758 cv
210.02 16.742 209.938 16.727 209.875 16.699 cv
209.813 16.676 209.766 16.641 209.742 16.602 cv
209.711 16.562 209.699 16.52 209.703 16.465 cv
209.703 15.664 li
209.316 16.078 208.926 16.391 208.531 16.598 cv
208.129 16.805 207.719 16.906 207.297 16.91 cv
206.816 16.906 206.414 16.832 206.09 16.676 cv
205.766 16.523 205.504 16.309 205.305 16.039 cv
205.102 15.77 204.957 15.457 204.875 15.098 cv
204.785 14.742 204.742 14.301 204.746 13.77 cv
204.746 9.51599 li
204.742 9.46899 204.758 9.422 204.789 9.37903 cv
204.816 9.34399 204.867 9.31201 204.945 9.28101 cv
205.02 9.258 205.121 9.23798 205.25 9.22302 cv
205.375 9.21503 205.531 9.20697 205.723 9.203 cv
205.91 9.20697 206.07 9.21503 206.195 9.22302 cv
206.32 9.23798 206.418 9.258 206.496 9.28101 cv
206.566 9.31201 206.621 9.34399 206.656 9.37903 cv
206.684 9.422 206.699 9.46899 206.703 9.51599 cv
206.703 13.441 li
206.699 13.809 206.723 14.086 206.773 14.277 cv
206.816 14.469 206.887 14.633 206.988 14.77 cv
207.082 14.91 207.207 15.016 207.355 15.09 cv
207.504 15.168 207.676 15.207 207.871 15.203 cv
208.121 15.207 208.371 15.117 208.625 14.93 cv
208.875 14.75 209.145 14.484 209.43 14.137 cv
209.43 9.51599 li
209.43 9.46899 209.441 9.422 209.473 9.37903 cv
209.496 9.34399 209.551 9.31201 209.629 9.28101 cv
209.703 9.258 209.801 9.23798 209.93 9.22302 cv
210.051 9.21503 210.211 9.20697 210.406 9.203 cv
210.598 9.20697 210.754 9.21503 210.879 9.22302 cv
211 9.23798 211.102 9.258 211.176 9.28101 cv
211.246 9.31201 211.297 9.34399 211.332 9.37903 cv
211.359 9.422 211.375 9.46899 211.379 9.51599 cv
cp
f
219.996 16.465 mo
219.992 16.52 219.977 16.562 219.949 16.602 cv
219.914 16.641 219.863 16.676 219.793 16.699 cv
219.719 16.727 219.617 16.742 219.492 16.758 cv
219.363 16.77 219.207 16.777 219.023 16.777 cv
218.828 16.777 218.668 16.77 218.543 16.758 cv
218.414 16.742 218.313 16.727 218.242 16.699 cv
218.164 16.676 218.113 16.641 218.086 16.602 cv
218.051 16.562 218.035 16.52 218.039 16.465 cv
218.039 12.5 li
218.035 12.164 218.012 11.898 217.965 11.703 cv
217.914 11.512 217.84 11.348 217.75 11.211 cv
217.656 11.074 217.539 10.969 217.391 10.891 cv
217.242 10.816 217.066 10.777 216.871 10.777 cv
216.617 10.777 216.367 10.871 216.113 11.051 cv
215.859 11.234 215.594 11.496 215.32 11.844 cv
215.32 16.465 li
215.316 16.52 215.301 16.562 215.273 16.602 cv
215.238 16.641 215.184 16.676 215.113 16.699 cv
215.035 16.727 214.938 16.742 214.813 16.758 cv
214.688 16.77 214.527 16.777 214.34 16.777 cv
214.145 16.777 213.988 16.77 213.863 16.758 cv
213.738 16.742 213.637 16.727 213.563 16.699 cv
213.484 16.676 213.43 16.641 213.402 16.602 cv
213.367 16.562 213.352 16.52 213.355 16.465 cv
213.355 9.51599 li
213.352 9.46899 213.367 9.422 213.395 9.37903 cv
213.418 9.34399 213.465 9.31201 213.535 9.28101 cv
213.602 9.258 213.688 9.23798 213.797 9.22302 cv
213.902 9.21503 214.035 9.20697 214.199 9.203 cv
214.363 9.20697 214.5 9.21503 214.609 9.22302 cv
214.715 9.23798 214.801 9.258 214.863 9.28101 cv
214.922 9.31201 214.965 9.34399 214.992 9.37903 cv
215.016 9.422 215.027 9.46899 215.031 9.51599 cv
215.031 10.316 li
215.414 9.90601 215.805 9.59399 216.203 9.383 cv
216.598 9.17603 217.016 9.07397 217.449 9.07001 cv
217.918 9.07397 218.316 9.15198 218.645 9.30499 cv
218.969 9.46503 219.23 9.67603 219.43 9.94098 cv
219.629 10.211 219.773 10.523 219.863 10.879 cv
219.949 11.238 219.992 11.668 219.996 12.172 cv
cp
f
225.867 15.781 mo
225.867 16.008 225.852 16.184 225.824 16.305 cv
225.793 16.43 225.754 16.516 225.711 16.562 cv
225.66 16.613 225.594 16.656 225.504 16.695 cv
225.41 16.734 225.301 16.766 225.184 16.797 cv
225.059 16.82 224.926 16.844 224.785 16.863 cv
224.641 16.875 224.5 16.883 224.355 16.887 cv
223.965 16.883 223.625 16.832 223.34 16.738 cv
223.055 16.637 222.82 16.488 222.633 16.281 cv
222.445 16.078 222.305 15.82 222.219 15.508 cv
222.125 15.199 222.082 14.828 222.086 14.398 cv
222.086 10.84 li
221.254 10.84 li
221.152 10.844 221.078 10.781 221.027 10.656 cv
220.973 10.535 220.945 10.332 220.949 10.043 cv
220.945 9.89502 220.953 9.76599 220.969 9.664 cv
220.98 9.56201 221 9.47998 221.027 9.41803 cv
221.051 9.35901 221.082 9.31598 221.125 9.289 cv
221.16 9.26599 221.207 9.25403 221.262 9.25 cv
222.086 9.25 li
222.086 7.69897 li
222.082 7.65198 222.098 7.60498 222.129 7.55902 cv
222.156 7.52002 222.207 7.48401 222.285 7.453 cv
222.359 7.42999 222.461 7.40601 222.59 7.39099 cv
222.715 7.37903 222.871 7.375 223.063 7.37097 cv
223.25 7.375 223.41 7.37903 223.539 7.39099 cv
223.664 7.40601 223.766 7.42999 223.84 7.453 cv
223.91 7.48401 223.961 7.52002 223.996 7.55902 cv
224.023 7.60498 224.039 7.65198 224.043 7.69897 cv
224.043 9.25 li
225.555 9.25 li
225.605 9.25403 225.652 9.26599 225.691 9.289 cv
225.73 9.31598 225.762 9.35901 225.789 9.41803 cv
225.813 9.47998 225.832 9.56201 225.848 9.664 cv
225.859 9.76599 225.867 9.89502 225.867 10.043 cv
225.867 10.332 225.84 10.535 225.789 10.656 cv
225.734 10.781 225.66 10.844 225.563 10.84 cv
224.043 10.84 li
224.043 14.105 li
224.039 14.484 224.098 14.77 224.223 14.957 cv
224.34 15.148 224.555 15.242 224.859 15.242 cv
224.961 15.242 225.055 15.234 225.141 15.215 cv
225.223 15.199 225.297 15.18 225.363 15.152 cv
225.426 15.133 225.48 15.109 225.527 15.09 cv
225.57 15.074 225.609 15.066 225.648 15.062 cv
225.676 15.066 225.707 15.074 225.738 15.09 cv
225.766 15.109 225.785 15.148 225.805 15.199 cv
225.816 15.258 225.832 15.332 225.848 15.422 cv
225.859 15.52 225.867 15.637 225.867 15.781 cv
cp
f
229.254 16.465 mo
229.25 16.52 229.234 16.562 229.207 16.602 cv
229.172 16.641 229.117 16.676 229.047 16.699 cv
228.969 16.727 228.871 16.742 228.746 16.758 cv
228.621 16.77 228.461 16.777 228.273 16.777 cv
228.078 16.777 227.922 16.77 227.797 16.758 cv
227.672 16.742 227.57 16.727 227.496 16.699 cv
227.418 16.676 227.363 16.641 227.336 16.602 cv
227.301 16.562 227.285 16.52 227.289 16.465 cv
227.289 9.53101 li
227.285 9.47998 227.301 9.43402 227.336 9.39502 cv
227.363 9.35498 227.418 9.32397 227.496 9.29303 cv
227.57 9.27002 227.672 9.24597 227.797 9.22699 cv
227.922 9.21503 228.078 9.20697 228.273 9.203 cv
228.461 9.20697 228.621 9.21503 228.746 9.22699 cv
228.871 9.24597 228.969 9.27002 229.047 9.29303 cv
229.117 9.32397 229.172 9.35498 229.207 9.39502 cv
229.234 9.43402 229.25 9.47998 229.254 9.53101 cv
cp
229.402 7.15997 mo
229.402 7.55902 229.32 7.83197 229.16 7.97998 cv
228.996 8.133 228.699 8.20697 228.266 8.203 cv
227.82 8.20697 227.52 8.133 227.371 7.98798 cv
227.215 7.84399 227.141 7.58197 227.141 7.19897 cv
227.141 6.80499 227.219 6.53101 227.379 6.37903 cv
227.535 6.22699 227.836 6.14801 228.281 6.14801 cv
228.715 6.14801 229.012 6.22302 229.168 6.37097 cv
229.324 6.52002 229.402 6.78497 229.402 7.15997 cv
cp
f
242.273 16.465 mo
242.27 16.52 242.254 16.562 242.227 16.602 cv
242.191 16.641 242.141 16.676 242.07 16.699 cv
241.996 16.727 241.895 16.742 241.773 16.758 cv
241.648 16.77 241.492 16.777 241.301 16.777 cv
241.102 16.777 240.941 16.77 240.816 16.758 cv
240.691 16.742 240.59 16.727 240.516 16.699 cv
240.438 16.676 240.387 16.641 240.359 16.602 cv
240.332 16.562 240.316 16.52 240.32 16.465 cv
240.32 12.344 li
240.316 12.113 240.297 11.898 240.254 11.703 cv
240.207 11.512 240.137 11.348 240.051 11.211 cv
239.957 11.074 239.844 10.969 239.707 10.891 cv
239.566 10.816 239.402 10.777 239.211 10.777 cv
238.977 10.777 238.738 10.871 238.5 11.051 cv
238.262 11.234 238.004 11.496 237.723 11.844 cv
237.723 16.465 li
237.723 16.52 237.707 16.562 237.676 16.602 cv
237.645 16.641 237.59 16.676 237.516 16.699 cv
237.438 16.727 237.336 16.742 237.215 16.758 cv
237.09 16.77 236.938 16.777 236.75 16.777 cv
236.555 16.777 236.395 16.77 236.273 16.758 cv
236.145 16.742 236.043 16.727 235.973 16.699 cv
235.895 16.676 235.844 16.641 235.813 16.602 cv
235.781 16.562 235.766 16.52 235.766 16.465 cv
235.766 12.344 li
235.766 12.113 235.742 11.898 235.699 11.703 cv
235.656 11.512 235.59 11.348 235.504 11.211 cv
235.41 11.074 235.297 10.969 235.16 10.891 cv
235.016 10.816 234.852 10.777 234.668 10.777 cv
234.426 10.777 234.188 10.871 233.949 11.051 cv
233.711 11.234 233.453 11.496 233.18 11.844 cv
233.18 16.465 li
233.176 16.52 233.16 16.562 233.133 16.602 cv
233.098 16.641 233.043 16.676 232.973 16.699 cv
232.895 16.727 232.797 16.742 232.672 16.758 cv
232.547 16.77 232.387 16.777 232.199 16.777 cv
232.004 16.777 231.848 16.77 231.723 16.758 cv
231.598 16.742 231.496 16.727 231.422 16.699 cv
231.344 16.676 231.289 16.641 231.262 16.602 cv
231.227 16.562 231.211 16.52 231.215 16.465 cv
231.215 9.51599 li
231.211 9.46899 231.227 9.422 231.254 9.37903 cv
231.277 9.34399 231.324 9.31201 231.395 9.28101 cv
231.461 9.258 231.547 9.23798 231.656 9.22302 cv
231.762 9.21503 231.895 9.20697 232.059 9.203 cv
232.223 9.20697 232.359 9.21503 232.469 9.22302 cv
232.574 9.23798 232.66 9.258 232.723 9.28101 cv
232.781 9.31201 232.824 9.34399 232.852 9.37903 cv
232.875 9.422 232.887 9.46899 232.891 9.51599 cv
232.891 10.316 li
233.273 9.90601 233.656 9.59399 234.039 9.383 cv
234.418 9.17603 234.82 9.07397 235.238 9.07001 cv
235.523 9.07397 235.777 9.10199 236.008 9.15997 cv
236.234 9.22302 236.441 9.30902 236.621 9.41803 cv
236.801 9.53101 236.953 9.66803 237.082 9.82001 cv
237.211 9.97699 237.32 10.148 237.41 10.34 cv
237.617 10.117 237.82 9.92603 238.023 9.76599 cv
238.219 9.60498 238.418 9.47302 238.613 9.37097 cv
238.809 9.27002 239.004 9.19501 239.199 9.14502 cv
239.395 9.09802 239.594 9.07397 239.797 9.07001 cv
240.258 9.07397 240.645 9.15198 240.965 9.30499 cv
241.277 9.46503 241.535 9.67603 241.73 9.94098 cv
241.926 10.211 242.063 10.523 242.148 10.879 cv
242.227 11.238 242.27 11.617 242.273 12.016 cv
cp
f
250.613 12.789 mo
250.609 13.027 250.559 13.203 250.453 13.316 cv
250.344 13.434 250.195 13.492 250.016 13.488 cv
245.781 13.488 li
245.777 13.789 245.813 14.059 245.887 14.297 cv
245.953 14.539 246.066 14.742 246.223 14.91 cv
246.375 15.082 246.57 15.211 246.813 15.297 cv
247.051 15.387 247.34 15.43 247.684 15.43 cv
248.023 15.43 248.324 15.406 248.586 15.355 cv
248.844 15.309 249.07 15.254 249.262 15.191 cv
249.449 15.133 249.605 15.078 249.734 15.027 cv
249.855 14.98 249.957 14.957 250.039 14.953 cv
250.082 14.957 250.121 14.965 250.156 14.98 cv
250.184 15 250.211 15.031 250.23 15.078 cv
250.25 15.125 250.262 15.191 250.273 15.277 cv
250.277 15.363 250.281 15.473 250.285 15.602 cv
250.281 15.719 250.281 15.816 250.277 15.895 cv
250.27 15.977 250.262 16.043 250.254 16.098 cv
250.242 16.156 250.227 16.207 250.207 16.242 cv
250.188 16.285 250.16 16.32 250.129 16.355 cv
250.094 16.395 250 16.445 249.852 16.504 cv
249.695 16.57 249.504 16.633 249.273 16.687 cv
249.035 16.75 248.766 16.797 248.469 16.844 cv
248.164 16.883 247.844 16.906 247.504 16.91 cv
246.883 16.906 246.34 16.832 245.879 16.676 cv
245.41 16.523 245.023 16.285 244.715 15.969 cv
244.398 15.652 244.164 15.254 244.016 14.77 cv
243.859 14.289 243.785 13.723 243.789 13.066 cv
243.785 12.453 243.863 11.895 244.027 11.398 cv
244.184 10.902 244.418 10.484 244.73 10.137 cv
245.035 9.79303 245.41 9.52698 245.848 9.34399 cv
246.285 9.164 246.777 9.07397 247.332 9.07001 cv
247.91 9.07397 248.41 9.15997 248.824 9.328 cv
249.238 9.50403 249.574 9.742 249.84 10.043 cv
250.102 10.348 250.297 10.707 250.426 11.121 cv
250.547 11.539 250.609 11.988 250.613 12.477 cv
cp
248.711 12.227 mo
248.723 11.676 248.613 11.242 248.379 10.93 cv
248.145 10.617 247.777 10.461 247.285 10.457 cv
247.035 10.461 246.82 10.508 246.637 10.598 cv
246.449 10.695 246.297 10.82 246.176 10.977 cv
246.051 11.137 245.957 11.324 245.895 11.539 cv
245.828 11.754 245.789 11.984 245.781 12.227 cv
cp
f
257.113 14.5 mo
257.109 14.898 257.035 15.246 256.891 15.547 cv
256.742 15.848 256.535 16.102 256.266 16.301 cv
255.992 16.508 255.672 16.656 255.305 16.758 cv
254.938 16.855 254.535 16.906 254.105 16.91 cv
253.84 16.906 253.594 16.887 253.359 16.852 cv
253.125 16.809 252.914 16.762 252.727 16.703 cv
252.539 16.645 252.383 16.582 252.258 16.52 cv
252.133 16.457 252.039 16.398 251.984 16.344 cv
251.926 16.289 251.883 16.207 251.855 16.09 cv
251.82 15.977 251.805 15.801 251.809 15.57 cv
251.805 15.422 251.813 15.301 251.824 15.207 cv
251.832 15.117 251.848 15.047 251.871 14.988 cv
251.891 14.937 251.914 14.898 251.949 14.879 cv
251.977 14.863 252.016 14.855 252.063 14.852 cv
252.117 14.855 252.203 14.887 252.316 14.949 cv
252.426 15.016 252.563 15.09 252.734 15.164 cv
252.898 15.246 253.094 15.316 253.313 15.383 cv
253.531 15.453 253.781 15.488 254.066 15.484 cv
254.242 15.488 254.398 15.469 254.539 15.43 cv
254.672 15.395 254.793 15.344 254.898 15.273 cv
254.996 15.207 255.07 15.121 255.125 15.016 cv
255.172 14.914 255.199 14.793 255.203 14.656 cv
255.199 14.5 255.152 14.367 255.059 14.258 cv
254.965 14.148 254.836 14.051 254.68 13.965 cv
254.516 13.883 254.336 13.805 254.141 13.73 cv
253.938 13.66 253.734 13.582 253.523 13.488 cv
253.313 13.402 253.105 13.301 252.91 13.184 cv
252.707 13.074 252.527 12.934 252.371 12.766 cv
252.207 12.602 252.082 12.402 251.988 12.164 cv
251.895 11.934 251.848 11.652 251.848 11.32 cv
251.848 10.992 251.91 10.687 252.039 10.406 cv
252.168 10.133 252.355 9.89502 252.602 9.69501 cv
252.844 9.5 253.141 9.34802 253.492 9.23401 cv
253.84 9.12903 254.234 9.07397 254.676 9.07001 cv
254.891 9.07397 255.102 9.09003 255.309 9.117 cv
255.512 9.15198 255.699 9.19098 255.867 9.23401 cv
256.031 9.28497 256.172 9.336 256.289 9.38702 cv
256.402 9.44501 256.484 9.492 256.535 9.52698 cv
256.582 9.57001 256.617 9.60901 256.641 9.64502 cv
256.66 9.68701 256.672 9.73401 256.684 9.78497 cv
256.691 9.84003 256.703 9.90601 256.711 9.98401 cv
256.719 10.07 256.723 10.168 256.723 10.285 cv
256.723 10.426 256.719 10.543 256.711 10.629 cv
256.703 10.723 256.688 10.793 256.672 10.84 cv
256.652 10.895 256.629 10.93 256.602 10.945 cv
256.566 10.969 256.531 10.977 256.492 10.973 cv
256.441 10.977 256.367 10.949 256.273 10.891 cv
256.172 10.84 256.051 10.781 255.902 10.715 cv
255.754 10.656 255.582 10.598 255.387 10.539 cv
255.191 10.488 254.969 10.461 254.723 10.457 cv
254.543 10.461 254.391 10.48 254.262 10.512 cv
254.129 10.551 254.02 10.602 253.941 10.668 cv
253.855 10.738 253.793 10.816 253.754 10.906 cv
253.707 11 253.688 11.098 253.691 11.199 cv
253.688 11.359 253.738 11.496 253.84 11.602 cv
253.938 11.715 254.066 11.809 254.23 11.891 cv
254.391 11.977 254.574 12.055 254.781 12.125 cv
254.984 12.199 255.191 12.281 255.402 12.363 cv
255.609 12.453 255.816 12.551 256.027 12.664 cv
256.23 12.777 256.414 12.918 256.574 13.082 cv
256.734 13.25 256.863 13.449 256.965 13.68 cv
257.059 13.914 257.109 14.187 257.113 14.5 cv
cp
f
273.059 9.5 mo
273.055 9.55902 273.047 9.62903 273.035 9.711 cv
273.016 9.79303 272.988 9.914 272.949 10.066 cv
271.094 16.355 li
271.066 16.445 271.031 16.52 270.992 16.57 cv
270.949 16.629 270.887 16.672 270.801 16.699 cv
270.715 16.73 270.59 16.746 270.434 16.762 cv
270.27 16.77 270.066 16.777 269.816 16.777 cv
269.559 16.777 269.348 16.77 269.191 16.758 cv
269.027 16.742 268.902 16.723 268.813 16.691 cv
268.719 16.664 268.652 16.621 268.613 16.562 cv
268.57 16.512 268.539 16.441 268.52 16.355 cv
267.352 12.133 li
267.336 12.062 li
267.32 12.133 li
266.246 16.355 li
266.223 16.445 266.191 16.52 266.156 16.57 cv
266.113 16.629 266.047 16.672 265.957 16.699 cv
265.859 16.73 265.734 16.746 265.574 16.762 cv
265.414 16.77 265.207 16.777 264.953 16.777 cv
264.691 16.777 264.48 16.77 264.324 16.758 cv
264.164 16.742 264.039 16.723 263.949 16.691 cv
263.855 16.664 263.789 16.621 263.75 16.562 cv
263.707 16.512 263.676 16.441 263.66 16.355 cv
261.82 10.066 li
261.77 9.91803 261.742 9.80103 261.73 9.71503 cv
261.715 9.633 261.707 9.55902 261.711 9.5 cv
261.707 9.44897 261.723 9.40601 261.754 9.36298 cv
261.781 9.328 261.832 9.297 261.91 9.27002 cv
261.984 9.25 262.086 9.22998 262.211 9.21899 cv
262.336 9.211 262.496 9.20697 262.691 9.203 cv
262.898 9.20697 263.066 9.211 263.199 9.21899 cv
263.328 9.22998 263.43 9.25 263.504 9.27301 cv
263.574 9.30103 263.625 9.336 263.656 9.37903 cv
263.684 9.42603 263.707 9.47998 263.723 9.539 cv
265.102 14.641 li
265.117 14.734 li
265.133 14.641 li
266.426 9.539 li
266.438 9.47998 266.465 9.42603 266.5 9.37903 cv
266.531 9.336 266.582 9.30103 266.652 9.27301 cv
266.719 9.25 266.813 9.22998 266.934 9.21899 cv
267.055 9.211 267.211 9.20697 267.406 9.203 cv
267.598 9.20697 267.754 9.21503 267.875 9.22302 cv
267.992 9.23798 268.086 9.25403 268.16 9.27698 cv
268.227 9.30103 268.277 9.33197 268.309 9.37097 cv
268.336 9.40997 268.359 9.45697 268.375 9.508 cv
269.762 14.648 li
269.785 14.734 li
269.801 14.641 li
271.125 9.539 li
271.133 9.47998 271.156 9.42603 271.188 9.37903 cv
271.219 9.336 271.27 9.30103 271.344 9.27301 cv
271.414 9.25 271.512 9.22998 271.637 9.21899 cv
271.758 9.211 271.918 9.20697 272.113 9.203 cv
272.305 9.20697 272.461 9.211 272.586 9.21899 cv
272.707 9.22998 272.805 9.25 272.875 9.27002 cv
272.945 9.297 272.992 9.328 273.02 9.36298 cv
273.043 9.40601 273.055 9.44897 273.059 9.5 cv
cp
f
276.273 16.465 mo
276.27 16.52 276.254 16.562 276.227 16.602 cv
276.191 16.641 276.137 16.676 276.066 16.699 cv
275.988 16.727 275.891 16.742 275.766 16.758 cv
275.641 16.77 275.48 16.777 275.293 16.777 cv
275.098 16.777 274.941 16.77 274.816 16.758 cv
274.691 16.742 274.59 16.727 274.516 16.699 cv
274.438 16.676 274.383 16.641 274.355 16.602 cv
274.32 16.562 274.305 16.52 274.309 16.465 cv
274.309 9.53101 li
274.305 9.47998 274.32 9.43402 274.355 9.39502 cv
274.383 9.35498 274.438 9.32397 274.516 9.29303 cv
274.59 9.27002 274.691 9.24597 274.816 9.22699 cv
274.941 9.21503 275.098 9.20697 275.293 9.203 cv
275.48 9.20697 275.641 9.21503 275.766 9.22699 cv
275.891 9.24597 275.988 9.27002 276.066 9.29303 cv
276.137 9.32397 276.191 9.35498 276.227 9.39502 cv
276.254 9.43402 276.27 9.47998 276.273 9.53101 cv
cp
276.422 7.15997 mo
276.422 7.55902 276.34 7.83197 276.18 7.97998 cv
276.016 8.133 275.719 8.20697 275.285 8.203 cv
274.84 8.20697 274.539 8.133 274.391 7.98798 cv
274.234 7.84399 274.16 7.58197 274.16 7.19897 cv
274.16 6.80499 274.238 6.53101 274.398 6.37903 cv
274.555 6.22699 274.855 6.14801 275.301 6.14801 cv
275.734 6.14801 276.031 6.22302 276.188 6.37097 cv
276.344 6.52002 276.422 6.78497 276.422 7.15997 cv
cp
f
282.352 15.781 mo
282.352 16.008 282.336 16.184 282.309 16.305 cv
282.277 16.43 282.238 16.516 282.195 16.562 cv
282.145 16.613 282.078 16.656 281.988 16.695 cv
281.895 16.734 281.785 16.766 281.668 16.797 cv
281.543 16.82 281.41 16.844 281.27 16.863 cv
281.125 16.875 280.984 16.883 280.84 16.887 cv
280.449 16.883 280.109 16.832 279.824 16.738 cv
279.539 16.637 279.305 16.488 279.117 16.281 cv
278.93 16.078 278.789 15.82 278.703 15.508 cv
278.609 15.199 278.566 14.828 278.57 14.398 cv
278.57 10.84 li
277.738 10.84 li
277.637 10.844 277.563 10.781 277.512 10.656 cv
277.457 10.535 277.43 10.332 277.434 10.043 cv
277.43 9.89502 277.438 9.76599 277.453 9.664 cv
277.465 9.56201 277.484 9.47998 277.512 9.41803 cv
277.535 9.35901 277.566 9.31598 277.609 9.289 cv
277.645 9.26599 277.691 9.25403 277.746 9.25 cv
278.57 9.25 li
278.57 7.69897 li
278.566 7.65198 278.582 7.60498 278.613 7.55902 cv
278.641 7.52002 278.691 7.48401 278.77 7.453 cv
278.844 7.42999 278.945 7.40601 279.074 7.39099 cv
279.199 7.37903 279.355 7.375 279.547 7.37097 cv
279.734 7.375 279.895 7.37903 280.023 7.39099 cv
280.148 7.40601 280.25 7.42999 280.324 7.453 cv
280.395 7.48401 280.445 7.52002 280.48 7.55902 cv
280.508 7.60498 280.523 7.65198 280.527 7.69897 cv
280.527 9.25 li
282.039 9.25 li
282.09 9.25403 282.137 9.26599 282.176 9.289 cv
282.215 9.31598 282.246 9.35901 282.273 9.41803 cv
282.297 9.47998 282.316 9.56201 282.332 9.664 cv
282.344 9.76599 282.352 9.89502 282.352 10.043 cv
282.352 10.332 282.324 10.535 282.273 10.656 cv
282.219 10.781 282.145 10.844 282.047 10.84 cv
280.527 10.84 li
280.527 14.105 li
280.523 14.484 280.582 14.77 280.707 14.957 cv
280.824 15.148 281.039 15.242 281.344 15.242 cv
281.445 15.242 281.539 15.234 281.625 15.215 cv
281.707 15.199 281.781 15.18 281.848 15.152 cv
281.91 15.133 281.965 15.109 282.012 15.09 cv
282.055 15.074 282.094 15.066 282.133 15.062 cv
282.16 15.066 282.191 15.074 282.223 15.09 cv
282.25 15.109 282.27 15.148 282.289 15.199 cv
282.301 15.258 282.316 15.332 282.332 15.422 cv
282.344 15.52 282.352 15.637 282.352 15.781 cv
cp
f
290.414 16.465 mo
290.41 16.52 290.395 16.562 290.367 16.602 cv
290.332 16.641 290.281 16.676 290.211 16.699 cv
290.137 16.727 290.035 16.742 289.91 16.758 cv
289.781 16.77 289.625 16.777 289.441 16.777 cv
289.246 16.777 289.086 16.77 288.961 16.758 cv
288.832 16.742 288.73 16.727 288.66 16.699 cv
288.582 16.676 288.531 16.641 288.504 16.602 cv
288.469 16.562 288.453 16.52 288.457 16.465 cv
288.457 12.5 li
288.453 12.164 288.43 11.898 288.383 11.703 cv
288.332 11.512 288.258 11.348 288.168 11.211 cv
288.074 11.074 287.957 10.969 287.809 10.891 cv
287.66 10.816 287.484 10.777 287.289 10.777 cv
287.035 10.777 286.785 10.871 286.531 11.051 cv
286.277 11.234 286.012 11.496 285.738 11.844 cv
285.738 16.465 li
285.734 16.52 285.719 16.562 285.691 16.602 cv
285.656 16.641 285.602 16.676 285.531 16.699 cv
285.453 16.727 285.355 16.742 285.23 16.758 cv
285.105 16.77 284.945 16.777 284.758 16.777 cv
284.563 16.777 284.406 16.77 284.281 16.758 cv
284.156 16.742 284.055 16.727 283.98 16.699 cv
283.902 16.676 283.848 16.641 283.82 16.602 cv
283.785 16.562 283.77 16.52 283.773 16.465 cv
283.773 6.21899 li
283.77 6.16803 283.785 6.12097 283.82 6.078 cv
283.848 6.039 283.902 6.00403 283.98 5.97302 cv
284.055 5.94501 284.156 5.92603 284.281 5.90601 cv
284.406 5.89502 284.563 5.88702 284.758 5.883 cv
284.945 5.88702 285.105 5.89502 285.23 5.90601 cv
285.355 5.92603 285.453 5.94501 285.531 5.97302 cv
285.602 6.00403 285.656 6.039 285.691 6.078 cv
285.719 6.12097 285.734 6.16803 285.738 6.21899 cv
285.738 10.059 li
286.074 9.72998 286.418 9.48401 286.77 9.31598 cv
287.117 9.15601 287.484 9.07397 287.867 9.07001 cv
288.336 9.07397 288.734 9.15198 289.063 9.30499 cv
289.387 9.46503 289.648 9.67603 289.848 9.94501 cv
290.047 10.215 290.191 10.531 290.281 10.891 cv
290.367 11.254 290.41 11.691 290.414 12.203 cv
cp
f
302.09 15.93 mo
302.086 16.082 302.082 16.207 302.07 16.305 cv
302.055 16.41 302.035 16.492 302.012 16.551 cv
301.988 16.617 301.957 16.664 301.918 16.687 cv
301.879 16.719 301.836 16.73 301.789 16.73 cv
296.723 16.73 li
296.547 16.73 296.402 16.68 296.289 16.578 cv
296.168 16.477 296.109 16.312 296.113 16.082 cv
296.113 7.29303 li
296.109 7.06598 296.168 6.90198 296.289 6.797 cv
296.402 6.69897 296.547 6.64801 296.723 6.64502 cv
301.758 6.64502 li
301.801 6.64801 301.844 6.65997 301.883 6.68402 cv
301.918 6.711 301.949 6.758 301.977 6.82001 cv
302 6.89099 302.016 6.97302 302.031 7.07001 cv
302.039 7.17603 302.047 7.30499 302.051 7.45697 cv
302.047 7.60498 302.039 7.72998 302.031 7.828 cv
302.016 7.93402 302 8.01599 301.977 8.07397 cv
301.949 8.13702 301.918 8.17999 301.883 8.20697 cv
301.844 8.23798 301.801 8.25403 301.758 8.25 cv
298.156 8.25 li
298.156 10.715 li
301.203 10.715 li
301.25 10.719 301.293 10.734 301.332 10.758 cv
301.371 10.789 301.402 10.832 301.43 10.891 cv
301.453 10.953 301.473 11.035 301.488 11.133 cv
301.5 11.234 301.508 11.355 301.508 11.5 cv
301.508 11.652 301.5 11.777 301.488 11.875 cv
301.473 11.977 301.453 12.055 301.43 12.113 cv
301.402 12.176 301.371 12.219 301.332 12.242 cv
301.293 12.27 301.25 12.285 301.203 12.281 cv
298.156 12.281 li
298.156 15.125 li
301.789 15.125 li
301.836 15.125 301.879 15.141 301.918 15.168 cv
301.957 15.199 301.988 15.246 302.012 15.305 cv
302.035 15.371 302.055 15.453 302.07 15.551 cv
302.082 15.656 302.086 15.781 302.09 15.93 cv
cp
f
305.75 16.465 mo
305.746 16.52 305.73 16.562 305.703 16.602 cv
305.668 16.641 305.613 16.676 305.543 16.699 cv
305.465 16.727 305.367 16.742 305.242 16.758 cv
305.117 16.77 304.957 16.777 304.77 16.777 cv
304.574 16.777 304.418 16.77 304.293 16.758 cv
304.168 16.742 304.066 16.727 303.992 16.699 cv
303.914 16.676 303.859 16.641 303.832 16.602 cv
303.797 16.562 303.781 16.52 303.785 16.465 cv
303.785 9.53101 li
303.781 9.47998 303.797 9.43402 303.832 9.39502 cv
303.859 9.35498 303.914 9.32397 303.992 9.29303 cv
304.066 9.27002 304.168 9.24597 304.293 9.22699 cv
304.418 9.21503 304.574 9.20697 304.77 9.203 cv
304.957 9.20697 305.117 9.21503 305.242 9.22699 cv
305.367 9.24597 305.465 9.27002 305.543 9.29303 cv
305.613 9.32397 305.668 9.35498 305.703 9.39502 cv
305.73 9.43402 305.746 9.47998 305.75 9.53101 cv
cp
305.898 7.15997 mo
305.898 7.55902 305.816 7.83197 305.656 7.97998 cv
305.492 8.133 305.195 8.20697 304.762 8.203 cv
304.316 8.20697 304.016 8.133 303.867 7.98798 cv
303.711 7.84399 303.637 7.58197 303.637 7.19897 cv
303.637 6.80499 303.715 6.53101 303.875 6.37903 cv
304.031 6.22699 304.332 6.14801 304.777 6.14801 cv
305.211 6.14801 305.508 6.22302 305.664 6.37097 cv
305.82 6.52002 305.898 6.78497 305.898 7.15997 cv
cp
f
313.977 9.99597 mo
313.973 10.25 313.945 10.434 313.891 10.551 cv
313.832 10.672 313.762 10.73 313.684 10.73 cv
312.863 10.73 li
312.977 10.855 313.059 11 313.109 11.156 cv
313.156 11.316 313.18 11.48 313.184 11.648 cv
313.18 12.059 313.113 12.418 312.98 12.73 cv
312.844 13.047 312.648 13.312 312.398 13.523 cv
312.145 13.742 311.844 13.906 311.488 14.016 cv
311.129 14.133 310.73 14.187 310.301 14.184 cv
310.074 14.187 309.863 14.16 309.66 14.102 cv
309.457 14.051 309.301 13.988 309.191 13.91 cv
309.129 13.98 309.07 14.059 309.023 14.152 cv
308.973 14.246 308.949 14.352 308.953 14.461 cv
308.949 14.617 309.016 14.738 309.148 14.832 cv
309.277 14.93 309.465 14.984 309.707 14.992 cv
311.398 15.055 li
311.793 15.07 312.145 15.129 312.453 15.223 cv
312.762 15.324 313.023 15.457 313.234 15.629 cv
313.445 15.805 313.605 16.016 313.715 16.258 cv
313.824 16.504 313.879 16.777 313.883 17.09 cv
313.879 17.426 313.805 17.75 313.656 18.059 cv
313.508 18.359 313.281 18.621 312.98 18.848 cv
312.676 19.066 312.297 19.246 311.844 19.379 cv
311.387 19.508 310.855 19.57 310.254 19.574 cv
309.656 19.57 309.152 19.523 308.734 19.434 cv
308.316 19.336 307.973 19.207 307.707 19.043 cv
307.438 18.875 307.242 18.676 307.125 18.449 cv
307 18.215 306.941 17.961 306.941 17.687 cv
306.941 17.516 306.961 17.355 307.008 17.199 cv
307.047 17.043 307.113 16.891 307.203 16.75 cv
307.285 16.605 307.391 16.473 307.516 16.34 cv
307.641 16.211 307.781 16.086 307.945 15.965 cv
307.719 15.852 307.547 15.691 307.426 15.48 cv
307.305 15.277 307.246 15.051 307.246 14.805 cv
307.246 14.504 307.313 14.227 307.453 13.969 cv
307.59 13.719 307.773 13.488 308 13.285 cv
307.816 13.105 307.672 12.891 307.563 12.633 cv
307.453 12.383 307.398 12.062 307.402 11.68 cv
307.398 11.277 307.469 10.918 307.613 10.594 cv
307.754 10.277 307.953 10.008 308.211 9.78497 cv
308.465 9.56598 308.77 9.39502 309.121 9.27698 cv
309.473 9.15997 309.863 9.10199 310.293 9.10199 cv
310.512 9.10199 310.719 9.117 310.918 9.14099 cv
311.117 9.172 311.305 9.20697 311.477 9.25 cv
313.684 9.25 li
313.766 9.25403 313.836 9.31201 313.895 9.422 cv
313.945 9.539 313.973 9.72998 313.977 9.99597 cv
cp
311.461 11.641 mo
311.457 11.27 311.355 10.98 311.148 10.77 cv
310.938 10.566 310.645 10.461 310.27 10.457 cv
310.074 10.461 309.902 10.492 309.762 10.555 cv
309.613 10.621 309.492 10.711 309.398 10.82 cv
309.297 10.934 309.227 11.062 309.184 11.211 cv
309.133 11.359 309.109 11.516 309.113 11.672 cv
309.109 12.031 309.215 12.309 309.426 12.512 cv
309.633 12.719 309.922 12.824 310.293 12.82 cv
310.488 12.824 310.656 12.793 310.805 12.727 cv
310.945 12.668 311.066 12.582 311.168 12.469 cv
311.262 12.363 311.336 12.234 311.387 12.09 cv
311.434 11.949 311.457 11.801 311.461 11.641 cv
cp
311.922 17.191 mo
311.922 16.953 311.828 16.777 311.641 16.652 cv
311.453 16.531 311.195 16.461 310.867 16.449 cv
309.473 16.41 li
309.336 16.512 309.227 16.605 309.148 16.695 cv
309.066 16.785 309.004 16.871 308.957 16.957 cv
308.906 17.039 308.871 17.121 308.859 17.199 cv
308.84 17.277 308.832 17.355 308.836 17.441 cv
308.832 17.695 308.965 17.895 309.227 18.031 cv
309.488 18.164 309.859 18.23 310.34 18.234 cv
310.633 18.23 310.879 18.199 311.086 18.145 cv
311.285 18.082 311.449 18.004 311.578 17.906 cv
311.699 17.805 311.789 17.695 311.844 17.574 cv
311.895 17.453 311.922 17.324 311.922 17.191 cv
cp
f
321.918 16.465 mo
321.914 16.52 321.898 16.562 321.871 16.602 cv
321.836 16.641 321.785 16.676 321.715 16.699 cv
321.641 16.727 321.539 16.742 321.414 16.758 cv
321.285 16.77 321.129 16.777 320.945 16.777 cv
320.75 16.777 320.59 16.77 320.465 16.758 cv
320.336 16.742 320.234 16.727 320.164 16.699 cv
320.086 16.676 320.035 16.641 320.008 16.602 cv
319.973 16.562 319.957 16.52 319.961 16.465 cv
319.961 12.5 li
319.957 12.164 319.934 11.898 319.887 11.703 cv
319.836 11.512 319.762 11.348 319.672 11.211 cv
319.578 11.074 319.461 10.969 319.313 10.891 cv
319.164 10.816 318.988 10.777 318.793 10.777 cv
318.539 10.777 318.289 10.871 318.035 11.051 cv
317.781 11.234 317.516 11.496 317.242 11.844 cv
317.242 16.465 li
317.238 16.52 317.223 16.562 317.195 16.602 cv
317.16 16.641 317.105 16.676 317.035 16.699 cv
316.957 16.727 316.859 16.742 316.734 16.758 cv
316.609 16.77 316.449 16.777 316.262 16.777 cv
316.066 16.777 315.91 16.77 315.785 16.758 cv
315.66 16.742 315.559 16.727 315.484 16.699 cv
315.406 16.676 315.352 16.641 315.324 16.602 cv
315.289 16.562 315.273 16.52 315.277 16.465 cv
315.277 6.21899 li
315.273 6.16803 315.289 6.12097 315.324 6.078 cv
315.352 6.039 315.406 6.00403 315.484 5.97302 cv
315.559 5.94501 315.66 5.92603 315.785 5.90601 cv
315.91 5.89502 316.066 5.88702 316.262 5.883 cv
316.449 5.88702 316.609 5.89502 316.734 5.90601 cv
316.859 5.92603 316.957 5.94501 317.035 5.97302 cv
317.105 6.00403 317.16 6.039 317.195 6.078 cv
317.223 6.12097 317.238 6.16803 317.242 6.21899 cv
317.242 10.059 li
317.578 9.72998 317.922 9.48401 318.273 9.31598 cv
318.621 9.15601 318.988 9.07397 319.371 9.07001 cv
319.84 9.07397 320.238 9.15198 320.566 9.30499 cv
320.891 9.46503 321.152 9.67603 321.352 9.94501 cv
321.551 10.215 321.695 10.531 321.785 10.891 cv
321.871 11.254 321.914 11.691 321.918 12.203 cv
cp
f
327.836 15.781 mo
327.836 16.008 327.82 16.184 327.793 16.305 cv
327.762 16.43 327.723 16.516 327.68 16.562 cv
327.629 16.613 327.563 16.656 327.473 16.695 cv
327.379 16.734 327.27 16.766 327.152 16.797 cv
327.027 16.82 326.895 16.844 326.754 16.863 cv
326.609 16.875 326.469 16.883 326.324 16.887 cv
325.934 16.883 325.594 16.832 325.309 16.738 cv
325.023 16.637 324.789 16.488 324.602 16.281 cv
324.414 16.078 324.273 15.82 324.188 15.508 cv
324.094 15.199 324.051 14.828 324.055 14.398 cv
324.055 10.84 li
323.223 10.84 li
323.121 10.844 323.047 10.781 322.996 10.656 cv
322.941 10.535 322.914 10.332 322.918 10.043 cv
322.914 9.89502 322.922 9.76599 322.938 9.664 cv
322.949 9.56201 322.969 9.47998 322.996 9.41803 cv
323.02 9.35901 323.051 9.31598 323.094 9.289 cv
323.129 9.26599 323.176 9.25403 323.23 9.25 cv
324.055 9.25 li
324.055 7.69897 li
324.051 7.65198 324.066 7.60498 324.098 7.55902 cv
324.125 7.52002 324.176 7.48401 324.254 7.453 cv
324.328 7.42999 324.43 7.40601 324.559 7.39099 cv
324.684 7.37903 324.84 7.375 325.031 7.37097 cv
325.219 7.375 325.379 7.37903 325.508 7.39099 cv
325.633 7.40601 325.734 7.42999 325.809 7.453 cv
325.879 7.48401 325.93 7.52002 325.965 7.55902 cv
325.992 7.60498 326.008 7.65198 326.012 7.69897 cv
326.012 9.25 li
327.523 9.25 li
327.574 9.25403 327.621 9.26599 327.66 9.289 cv
327.699 9.31598 327.73 9.35901 327.758 9.41803 cv
327.781 9.47998 327.801 9.56201 327.816 9.664 cv
327.828 9.76599 327.836 9.89502 327.836 10.043 cv
327.836 10.332 327.809 10.535 327.758 10.656 cv
327.703 10.781 327.629 10.844 327.531 10.84 cv
326.012 10.84 li
326.012 14.105 li
326.008 14.484 326.066 14.77 326.191 14.957 cv
326.309 15.148 326.523 15.242 326.828 15.242 cv
326.93 15.242 327.023 15.234 327.109 15.215 cv
327.191 15.199 327.266 15.18 327.332 15.152 cv
327.395 15.133 327.449 15.109 327.496 15.09 cv
327.539 15.074 327.578 15.066 327.617 15.062 cv
327.645 15.066 327.676 15.074 327.707 15.09 cv
327.734 15.109 327.754 15.148 327.773 15.199 cv
327.785 15.258 327.801 15.332 327.816 15.422 cv
327.828 15.52 327.836 15.637 327.836 15.781 cv
cp
f
339.691 7.48798 mo
339.688 7.64502 339.68 7.77301 339.672 7.875 cv
339.656 7.98401 339.637 8.07001 339.613 8.133 cv
339.582 8.19897 339.551 8.24597 339.516 8.27301 cv
339.473 8.30902 339.43 8.32397 339.387 8.32001 cv
336.863 8.32001 li
336.863 16.449 li
336.863 16.504 336.844 16.551 336.813 16.59 cv
336.773 16.633 336.719 16.668 336.645 16.691 cv
336.563 16.719 336.457 16.738 336.328 16.754 cv
336.191 16.77 336.027 16.777 335.832 16.777 cv
335.637 16.777 335.473 16.77 335.34 16.754 cv
335.207 16.738 335.102 16.719 335.023 16.691 cv
334.945 16.668 334.887 16.633 334.855 16.59 cv
334.816 16.551 334.801 16.504 334.805 16.449 cv
334.805 8.32001 li
332.281 8.32001 li
332.227 8.32397 332.18 8.30902 332.148 8.27301 cv
332.109 8.24597 332.078 8.19897 332.055 8.133 cv
332.023 8.07001 332.004 7.98401 331.996 7.875 cv
331.98 7.77301 331.977 7.64502 331.977 7.48798 cv
331.977 7.336 331.98 7.203 331.996 7.09003 cv
332.004 6.98401 332.023 6.89502 332.055 6.828 cv
332.078 6.76599 332.109 6.71899 332.148 6.68701 cv
332.18 6.65997 332.227 6.64801 332.281 6.64502 cv
339.387 6.64502 li
339.43 6.64801 339.473 6.65997 339.516 6.68701 cv
339.551 6.71899 339.582 6.76599 339.613 6.828 cv
339.637 6.89502 339.656 6.98401 339.672 7.09003 cv
339.68 7.203 339.688 7.336 339.691 7.48798 cv
cp
f
347.406 16.465 mo
347.402 16.52 347.387 16.562 347.359 16.602 cv
347.324 16.641 347.273 16.676 347.203 16.699 cv
347.129 16.727 347.027 16.742 346.902 16.758 cv
346.773 16.77 346.617 16.777 346.434 16.777 cv
346.238 16.777 346.078 16.77 345.953 16.758 cv
345.824 16.742 345.723 16.727 345.652 16.699 cv
345.574 16.676 345.523 16.641 345.496 16.602 cv
345.461 16.562 345.445 16.52 345.449 16.465 cv
345.449 12.5 li
345.445 12.164 345.422 11.898 345.375 11.703 cv
345.324 11.512 345.25 11.348 345.16 11.211 cv
345.066 11.074 344.949 10.969 344.801 10.891 cv
344.652 10.816 344.477 10.777 344.281 10.777 cv
344.027 10.777 343.777 10.871 343.523 11.051 cv
343.27 11.234 343.004 11.496 342.73 11.844 cv
342.73 16.465 li
342.727 16.52 342.711 16.562 342.684 16.602 cv
342.648 16.641 342.594 16.676 342.523 16.699 cv
342.445 16.727 342.348 16.742 342.223 16.758 cv
342.098 16.77 341.938 16.777 341.75 16.777 cv
341.555 16.777 341.398 16.77 341.273 16.758 cv
341.148 16.742 341.047 16.727 340.973 16.699 cv
340.895 16.676 340.84 16.641 340.813 16.602 cv
340.777 16.562 340.762 16.52 340.766 16.465 cv
340.766 6.21899 li
340.762 6.16803 340.777 6.12097 340.813 6.078 cv
340.84 6.039 340.895 6.00403 340.973 5.97302 cv
341.047 5.94501 341.148 5.92603 341.273 5.90601 cv
341.398 5.89502 341.555 5.88702 341.75 5.883 cv
341.938 5.88702 342.098 5.89502 342.223 5.90601 cv
342.348 5.92603 342.445 5.94501 342.523 5.97302 cv
342.594 6.00403 342.648 6.039 342.684 6.078 cv
342.711 6.12097 342.727 6.16803 342.73 6.21899 cv
342.73 10.059 li
343.066 9.72998 343.41 9.48401 343.762 9.31598 cv
344.109 9.15601 344.477 9.07397 344.859 9.07001 cv
345.328 9.07397 345.727 9.15198 346.055 9.30499 cv
346.379 9.46503 346.641 9.67603 346.84 9.94501 cv
347.039 10.215 347.184 10.531 347.273 10.891 cv
347.359 11.254 347.402 11.691 347.406 12.203 cv
cp
f
353.758 10.16 mo
353.758 10.352 353.75 10.504 353.742 10.621 cv
353.727 10.742 353.711 10.836 353.695 10.902 cv
353.672 10.973 353.645 11.02 353.613 11.043 cv
353.574 11.07 353.531 11.082 353.484 11.082 cv
353.438 11.082 353.391 11.074 353.344 11.055 cv
353.289 11.039 353.23 11.02 353.168 10.996 cv
353.098 10.977 353.027 10.957 352.953 10.937 cv
352.871 10.922 352.785 10.914 352.695 10.91 cv
352.582 10.914 352.473 10.934 352.367 10.977 cv
352.258 11.023 352.145 11.094 352.031 11.184 cv
351.91 11.277 351.789 11.402 351.664 11.555 cv
351.535 11.715 351.398 11.906 351.254 12.133 cv
351.254 16.465 li
351.25 16.52 351.234 16.562 351.207 16.602 cv
351.172 16.641 351.117 16.676 351.047 16.699 cv
350.969 16.727 350.871 16.742 350.746 16.758 cv
350.621 16.77 350.461 16.777 350.273 16.777 cv
350.078 16.777 349.922 16.77 349.797 16.758 cv
349.672 16.742 349.57 16.727 349.496 16.699 cv
349.418 16.676 349.363 16.641 349.336 16.602 cv
349.301 16.562 349.285 16.52 349.289 16.465 cv
349.289 9.51599 li
349.285 9.46899 349.301 9.422 349.328 9.37903 cv
349.352 9.34399 349.398 9.31201 349.469 9.28101 cv
349.535 9.258 349.621 9.23798 349.73 9.22302 cv
349.836 9.21503 349.969 9.20697 350.133 9.203 cv
350.297 9.20697 350.434 9.21503 350.543 9.22302 cv
350.648 9.23798 350.734 9.258 350.797 9.28101 cv
350.855 9.31201 350.898 9.34399 350.926 9.37903 cv
350.949 9.422 350.961 9.46899 350.965 9.51599 cv
350.965 10.379 li
351.145 10.121 351.316 9.90997 351.48 9.73798 cv
351.637 9.57397 351.793 9.43701 351.941 9.336 cv
352.086 9.23798 352.23 9.172 352.375 9.12903 cv
352.52 9.09399 352.664 9.07397 352.813 9.07001 cv
352.879 9.07397 352.953 9.078 353.031 9.08197 cv
353.109 9.09399 353.188 9.10498 353.273 9.12097 cv
353.352 9.14099 353.426 9.15997 353.492 9.18402 cv
353.551 9.20697 353.598 9.23401 353.629 9.258 cv
353.656 9.289 353.676 9.31598 353.691 9.34399 cv
353.703 9.37903 353.715 9.422 353.727 9.47302 cv
353.734 9.53101 353.742 9.61298 353.75 9.71899 cv
353.754 9.828 353.758 9.97699 353.758 10.16 cv
cp
f
361.23 12.789 mo
361.227 13.027 361.176 13.203 361.07 13.316 cv
360.961 13.434 360.813 13.492 360.633 13.488 cv
356.398 13.488 li
356.395 13.789 356.43 14.059 356.504 14.297 cv
356.57 14.539 356.684 14.742 356.84 14.91 cv
356.992 15.082 357.188 15.211 357.43 15.297 cv
357.668 15.387 357.957 15.43 358.301 15.43 cv
358.641 15.43 358.941 15.406 359.203 15.355 cv
359.461 15.309 359.688 15.254 359.879 15.191 cv
360.066 15.133 360.223 15.078 360.352 15.027 cv
360.473 14.98 360.574 14.957 360.656 14.953 cv
360.699 14.957 360.738 14.965 360.773 14.98 cv
360.801 15 360.828 15.031 360.848 15.078 cv
360.867 15.125 360.879 15.191 360.891 15.277 cv
360.895 15.363 360.898 15.473 360.902 15.602 cv
360.898 15.719 360.898 15.816 360.895 15.895 cv
360.887 15.977 360.879 16.043 360.871 16.098 cv
360.859 16.156 360.844 16.207 360.824 16.242 cv
360.805 16.285 360.777 16.32 360.746 16.355 cv
360.711 16.395 360.617 16.445 360.469 16.504 cv
360.313 16.57 360.121 16.633 359.891 16.687 cv
359.652 16.75 359.383 16.797 359.086 16.844 cv
358.781 16.883 358.461 16.906 358.121 16.91 cv
357.5 16.906 356.957 16.832 356.496 16.676 cv
356.027 16.523 355.641 16.285 355.332 15.969 cv
355.016 15.652 354.781 15.254 354.633 14.77 cv
354.477 14.289 354.402 13.723 354.406 13.066 cv
354.402 12.453 354.48 11.895 354.645 11.398 cv
354.801 10.902 355.035 10.484 355.348 10.137 cv
355.652 9.79303 356.027 9.52698 356.465 9.34399 cv
356.902 9.164 357.395 9.07397 357.949 9.07001 cv
358.527 9.07397 359.027 9.15997 359.441 9.328 cv
359.855 9.50403 360.191 9.742 360.457 10.043 cv
360.719 10.348 360.914 10.707 361.043 11.121 cv
361.164 11.539 361.227 11.988 361.23 12.477 cv
cp
359.328 12.227 mo
359.34 11.676 359.23 11.242 358.996 10.93 cv
358.762 10.617 358.395 10.461 357.902 10.457 cv
357.652 10.461 357.438 10.508 357.254 10.598 cv
357.066 10.695 356.914 10.82 356.793 10.977 cv
356.668 11.137 356.574 11.324 356.512 11.539 cv
356.445 11.754 356.406 11.984 356.398 12.227 cv
cp
f
368.766 16.488 mo
368.762 16.566 368.734 16.621 368.688 16.66 cv
368.633 16.703 368.551 16.73 368.441 16.75 cv
368.324 16.766 368.16 16.777 367.945 16.777 cv
367.707 16.777 367.535 16.766 367.434 16.75 cv
367.324 16.73 367.25 16.703 367.211 16.66 cv
367.164 16.621 367.145 16.566 367.145 16.488 cv
367.145 15.937 li
366.855 16.246 366.527 16.484 366.164 16.652 cv
365.797 16.824 365.391 16.906 364.945 16.91 cv
364.574 16.906 364.234 16.859 363.926 16.766 cv
363.617 16.672 363.352 16.531 363.125 16.336 cv
362.898 16.148 362.723 15.914 362.598 15.633 cv
362.473 15.355 362.41 15.027 362.414 14.648 cv
362.41 14.25 362.488 13.898 362.648 13.594 cv
362.805 13.297 363.043 13.051 363.359 12.855 cv
363.672 12.664 364.063 12.52 364.531 12.422 cv
365 12.332 365.543 12.285 366.16 12.281 cv
366.84 12.281 li
366.84 11.859 li
366.84 11.645 366.816 11.453 366.773 11.289 cv
366.727 11.129 366.652 10.992 366.555 10.879 cv
366.449 10.773 366.316 10.691 366.148 10.637 cv
365.977 10.586 365.766 10.562 365.523 10.559 cv
365.191 10.562 364.898 10.598 364.645 10.668 cv
364.383 10.742 364.156 10.824 363.961 10.91 cv
363.762 11.004 363.598 11.082 363.469 11.152 cv
363.332 11.227 363.223 11.266 363.145 11.262 cv
363.082 11.266 363.031 11.246 362.992 11.207 cv
362.945 11.172 362.91 11.121 362.883 11.051 cv
362.852 10.988 362.828 10.902 362.816 10.801 cv
362.797 10.703 362.789 10.594 362.793 10.473 cv
362.789 10.312 362.805 10.187 362.832 10.09 cv
362.855 10 362.902 9.914 362.98 9.836 cv
363.051 9.76202 363.18 9.67999 363.363 9.59003 cv
363.543 9.5 363.754 9.414 364 9.336 cv
364.242 9.258 364.512 9.19501 364.801 9.14502 cv
365.09 9.09802 365.387 9.07397 365.695 9.07001 cv
366.238 9.07397 366.703 9.125 367.09 9.22998 cv
367.477 9.34003 367.797 9.50403 368.047 9.72302 cv
368.297 9.94098 368.477 10.227 368.594 10.574 cv
368.703 10.926 368.762 11.34 368.766 11.812 cv
cp
366.84 13.512 mo
366.09 13.512 li
365.773 13.516 365.504 13.539 365.281 13.582 cv
365.055 13.633 364.871 13.703 364.734 13.793 cv
364.59 13.891 364.488 14.004 364.426 14.133 cv
364.359 14.27 364.324 14.418 364.328 14.586 cv
364.324 14.879 364.418 15.109 364.605 15.273 cv
364.789 15.441 365.047 15.523 365.375 15.523 cv
365.648 15.523 365.898 15.453 366.133 15.312 cv
366.359 15.172 366.598 14.969 366.84 14.695 cv
cp
f
377.348 16.465 mo
377.344 16.527 377.332 16.574 377.309 16.609 cv
377.281 16.652 377.234 16.684 377.176 16.707 cv
377.109 16.73 377.027 16.746 376.922 16.762 cv
376.816 16.77 376.684 16.777 376.531 16.777 cv
376.359 16.777 376.227 16.77 376.125 16.762 cv
376.02 16.746 375.934 16.73 375.871 16.707 cv
375.805 16.684 375.758 16.652 375.73 16.609 cv
375.699 16.574 375.684 16.527 375.688 16.465 cv
375.688 15.695 li
375.328 16.082 374.953 16.379 374.563 16.59 cv
374.164 16.801 373.73 16.906 373.258 16.91 cv
372.723 16.906 372.273 16.805 371.91 16.602 cv
371.543 16.398 371.246 16.125 371.016 15.773 cv
370.781 15.43 370.613 15.023 370.512 14.555 cv
370.41 14.094 370.359 13.602 370.359 13.082 cv
370.359 12.469 370.422 11.914 370.555 11.418 cv
370.684 10.926 370.879 10.504 371.137 10.156 cv
371.391 9.80902 371.707 9.54303 372.086 9.35199 cv
372.465 9.16803 372.902 9.07397 373.398 9.07001 cv
373.785 9.07397 374.137 9.15198 374.457 9.30902 cv
374.77 9.46899 375.086 9.69897 375.398 10.004 cv
375.398 6.242 li
375.398 6.19098 375.41 6.14502 375.441 6.10199 cv
375.465 6.06201 375.52 6.02698 375.598 5.99597 cv
375.672 5.96899 375.77 5.94897 375.898 5.92999 cv
376.02 5.91803 376.18 5.90997 376.375 5.90601 cv
376.566 5.90997 376.723 5.91803 376.848 5.92999 cv
376.969 5.94897 377.07 5.96899 377.145 5.99597 cv
377.215 6.02698 377.266 6.06201 377.301 6.10199 cv
377.328 6.14502 377.344 6.19098 377.348 6.242 cv
cp
375.398 11.82 mo
375.117 11.469 374.848 11.199 374.594 11.012 cv
374.332 10.824 374.063 10.73 373.785 10.73 cv
373.531 10.73 373.313 10.797 373.129 10.922 cv
372.941 11.055 372.793 11.223 372.684 11.434 cv
372.57 11.645 372.488 11.883 372.434 12.145 cv
372.379 12.41 372.352 12.68 372.352 12.949 cv
372.352 13.246 372.375 13.527 372.422 13.801 cv
372.469 14.078 372.543 14.324 372.652 14.539 cv
372.754 14.754 372.898 14.926 373.078 15.055 cv
373.254 15.187 373.477 15.254 373.746 15.25 cv
373.879 15.254 374.008 15.234 374.141 15.191 cv
374.266 15.156 374.398 15.094 374.531 15 cv
374.664 14.914 374.801 14.797 374.941 14.652 cv
375.082 14.512 375.234 14.336 375.398 14.129 cv
cp
f
384.172 14.5 mo
384.168 14.898 384.094 15.246 383.949 15.547 cv
383.801 15.848 383.594 16.102 383.324 16.301 cv
383.051 16.508 382.73 16.656 382.363 16.758 cv
381.996 16.855 381.594 16.906 381.164 16.91 cv
380.898 16.906 380.652 16.887 380.418 16.852 cv
380.184 16.809 379.973 16.762 379.785 16.703 cv
379.598 16.645 379.441 16.582 379.316 16.52 cv
379.191 16.457 379.098 16.398 379.043 16.344 cv
378.984 16.289 378.941 16.207 378.914 16.09 cv
378.879 15.977 378.863 15.801 378.867 15.57 cv
378.863 15.422 378.871 15.301 378.883 15.207 cv
378.891 15.117 378.906 15.047 378.93 14.988 cv
378.949 14.937 378.973 14.898 379.008 14.879 cv
379.035 14.863 379.074 14.855 379.121 14.852 cv
379.176 14.855 379.262 14.887 379.375 14.949 cv
379.484 15.016 379.621 15.09 379.793 15.164 cv
379.957 15.246 380.152 15.316 380.371 15.383 cv
380.59 15.453 380.84 15.488 381.125 15.484 cv
381.301 15.488 381.457 15.469 381.598 15.43 cv
381.73 15.395 381.852 15.344 381.957 15.273 cv
382.055 15.207 382.129 15.121 382.184 15.016 cv
382.23 14.914 382.258 14.793 382.262 14.656 cv
382.258 14.5 382.211 14.367 382.117 14.258 cv
382.023 14.148 381.895 14.051 381.738 13.965 cv
381.574 13.883 381.395 13.805 381.199 13.73 cv
380.996 13.66 380.793 13.582 380.582 13.488 cv
380.371 13.402 380.164 13.301 379.969 13.184 cv
379.766 13.074 379.586 12.934 379.43 12.766 cv
379.266 12.602 379.141 12.402 379.047 12.164 cv
378.953 11.934 378.906 11.652 378.906 11.32 cv
378.906 10.992 378.969 10.687 379.098 10.406 cv
379.227 10.133 379.414 9.89502 379.66 9.69501 cv
379.902 9.5 380.199 9.34802 380.551 9.23401 cv
380.898 9.12903 381.293 9.07397 381.734 9.07001 cv
381.949 9.07397 382.16 9.09003 382.367 9.117 cv
382.57 9.15198 382.758 9.19098 382.926 9.23401 cv
383.09 9.28497 383.23 9.336 383.348 9.38702 cv
383.461 9.44501 383.543 9.492 383.594 9.52698 cv
383.641 9.57001 383.676 9.60901 383.699 9.64502 cv
383.719 9.68701 383.73 9.73401 383.742 9.78497 cv
383.75 9.84003 383.762 9.90601 383.77 9.98401 cv
383.777 10.07 383.781 10.168 383.781 10.285 cv
383.781 10.426 383.777 10.543 383.77 10.629 cv
383.762 10.723 383.746 10.793 383.73 10.84 cv
383.711 10.895 383.688 10.93 383.66 10.945 cv
383.625 10.969 383.59 10.977 383.551 10.973 cv
383.5 10.977 383.426 10.949 383.332 10.891 cv
383.23 10.84 383.109 10.781 382.961 10.715 cv
382.813 10.656 382.641 10.598 382.445 10.539 cv
382.25 10.488 382.027 10.461 381.781 10.457 cv
381.602 10.461 381.449 10.48 381.32 10.512 cv
381.188 10.551 381.078 10.602 381 10.668 cv
380.914 10.738 380.852 10.816 380.813 10.906 cv
380.766 11 380.746 11.098 380.75 11.199 cv
380.746 11.359 380.797 11.496 380.898 11.602 cv
380.996 11.715 381.125 11.809 381.289 11.891 cv
381.449 11.977 381.633 12.055 381.84 12.125 cv
382.043 12.199 382.25 12.281 382.461 12.363 cv
382.668 12.453 382.875 12.551 383.086 12.664 cv
383.289 12.777 383.473 12.918 383.633 13.082 cv
383.793 13.25 383.922 13.449 384.023 13.68 cv
384.117 13.914 384.168 14.187 384.172 14.5 cv
cp
f
393.004 12.812 mo
393 13.113 392.973 13.324 392.918 13.441 cv
392.859 13.566 392.77 13.625 392.645 13.621 cv
389.402 13.621 li
389.273 13.625 389.18 13.562 389.125 13.437 cv
389.063 13.316 389.035 13.109 389.039 12.812 cv
389.035 12.523 389.063 12.316 389.125 12.195 cv
389.18 12.078 389.273 12.02 389.402 12.016 cv
392.645 12.016 li
392.707 12.02 392.758 12.031 392.805 12.055 cv
392.844 12.082 392.883 12.129 392.918 12.187 cv
392.945 12.254 392.969 12.336 392.984 12.437 cv
392.996 12.543 393 12.668 393.004 12.812 cv
cp
f
405.68 16.465 mo
405.68 16.527 405.668 16.574 405.648 16.609 cv
405.629 16.652 405.582 16.684 405.504 16.707 cv
405.426 16.73 405.309 16.746 405.16 16.762 cv
405.004 16.77 404.801 16.777 404.543 16.777 cv
404.324 16.777 404.148 16.77 404.02 16.762 cv
403.891 16.746 403.789 16.73 403.715 16.703 cv
403.637 16.676 403.582 16.641 403.555 16.594 cv
403.52 16.555 403.496 16.5 403.477 16.434 cv
402.57 14.184 li
402.461 13.93 402.355 13.703 402.254 13.504 cv
402.145 13.309 402.031 13.145 401.906 13.012 cv
401.777 12.883 401.629 12.781 401.465 12.711 cv
401.297 12.645 401.105 12.613 400.891 12.609 cv
400.25 12.609 li
400.25 16.449 li
400.246 16.504 400.23 16.551 400.199 16.59 cv
400.164 16.633 400.109 16.668 400.031 16.691 cv
399.953 16.719 399.848 16.738 399.719 16.754 cv
399.586 16.77 399.422 16.777 399.223 16.777 cv
399.023 16.777 398.855 16.77 398.727 16.754 cv
398.59 16.738 398.484 16.719 398.41 16.691 cv
398.328 16.668 398.273 16.633 398.246 16.59 cv
398.211 16.551 398.195 16.504 398.199 16.449 cv
398.199 7.29303 li
398.195 7.06598 398.254 6.90198 398.375 6.797 cv
398.488 6.69897 398.633 6.64801 398.809 6.64502 cv
401.418 6.64502 li
401.68 6.64801 401.898 6.65198 402.074 6.65997 cv
402.242 6.672 402.398 6.68402 402.543 6.69897 cv
402.945 6.758 403.309 6.85901 403.633 6.99597 cv
403.957 7.14099 404.234 7.32397 404.461 7.547 cv
404.688 7.77698 404.859 8.04303 404.98 8.35199 cv
405.098 8.65997 405.156 9.01599 405.16 9.414 cv
405.156 9.75403 405.113 10.062 405.031 10.336 cv
404.941 10.617 404.816 10.863 404.652 11.082 cv
404.484 11.301 404.277 11.492 404.035 11.648 cv
403.789 11.812 403.512 11.941 403.203 12.039 cv
403.352 12.113 403.496 12.203 403.629 12.305 cv
403.762 12.414 403.883 12.539 404 12.684 cv
404.113 12.832 404.227 13 404.332 13.187 cv
404.434 13.379 404.535 13.594 404.637 13.832 cv
405.488 15.82 li
405.563 16.02 405.613 16.16 405.641 16.25 cv
405.664 16.344 405.68 16.418 405.68 16.465 cv
cp
403.039 9.625 mo
403.035 9.29303 402.961 9.01202 402.813 8.78101 cv
402.66 8.55499 402.414 8.39502 402.074 8.297 cv
401.969 8.27301 401.852 8.25 401.719 8.23401 cv
401.586 8.21899 401.402 8.211 401.168 8.211 cv
400.25 8.211 li
400.25 11.074 li
401.293 11.074 li
401.582 11.078 401.84 11.043 402.059 10.969 cv
402.277 10.902 402.457 10.801 402.602 10.672 cv
402.746 10.547 402.855 10.395 402.93 10.215 cv
403 10.039 403.035 9.84399 403.039 9.625 cv
cp
f
413.266 12.789 mo
413.262 13.027 413.211 13.203 413.105 13.316 cv
412.996 13.434 412.848 13.492 412.668 13.488 cv
408.434 13.488 li
408.43 13.789 408.465 14.059 408.539 14.297 cv
408.605 14.539 408.719 14.742 408.875 14.91 cv
409.027 15.082 409.223 15.211 409.465 15.297 cv
409.703 15.387 409.992 15.43 410.336 15.43 cv
410.676 15.43 410.977 15.406 411.238 15.355 cv
411.496 15.309 411.723 15.254 411.914 15.191 cv
412.102 15.133 412.258 15.078 412.387 15.027 cv
412.508 14.98 412.609 14.957 412.691 14.953 cv
412.734 14.957 412.773 14.965 412.809 14.98 cv
412.836 15 412.863 15.031 412.883 15.078 cv
412.902 15.125 412.914 15.191 412.926 15.277 cv
412.93 15.363 412.934 15.473 412.938 15.602 cv
412.934 15.719 412.934 15.816 412.93 15.895 cv
412.922 15.977 412.914 16.043 412.906 16.098 cv
412.895 16.156 412.879 16.207 412.859 16.242 cv
412.84 16.285 412.813 16.32 412.781 16.355 cv
412.746 16.395 412.652 16.445 412.504 16.504 cv
412.348 16.57 412.156 16.633 411.926 16.687 cv
411.688 16.75 411.418 16.797 411.121 16.844 cv
410.816 16.883 410.496 16.906 410.156 16.91 cv
409.535 16.906 408.992 16.832 408.531 16.676 cv
408.063 16.523 407.676 16.285 407.367 15.969 cv
407.051 15.652 406.816 15.254 406.668 14.77 cv
406.512 14.289 406.438 13.723 406.441 13.066 cv
406.438 12.453 406.516 11.895 406.68 11.398 cv
406.836 10.902 407.07 10.484 407.383 10.137 cv
407.688 9.79303 408.063 9.52698 408.5 9.34399 cv
408.938 9.164 409.43 9.07397 409.984 9.07001 cv
410.563 9.07397 411.063 9.15997 411.477 9.328 cv
411.891 9.50403 412.227 9.742 412.492 10.043 cv
412.754 10.348 412.949 10.707 413.078 11.121 cv
413.199 11.539 413.262 11.988 413.266 12.477 cv
cp
411.363 12.227 mo
411.375 11.676 411.266 11.242 411.031 10.93 cv
410.797 10.617 410.43 10.461 409.938 10.457 cv
409.688 10.461 409.473 10.508 409.289 10.598 cv
409.102 10.695 408.949 10.82 408.828 10.977 cv
408.703 11.137 408.609 11.324 408.547 11.539 cv
408.48 11.754 408.441 11.984 408.434 12.227 cv
cp
f
425.93 16.465 mo
425.926 16.52 425.91 16.562 425.883 16.602 cv
425.848 16.641 425.797 16.676 425.727 16.699 cv
425.652 16.727 425.551 16.742 425.43 16.758 cv
425.305 16.77 425.148 16.777 424.957 16.777 cv
424.758 16.777 424.598 16.77 424.473 16.758 cv
424.348 16.742 424.246 16.727 424.172 16.699 cv
424.094 16.676 424.043 16.641 424.016 16.602 cv
423.988 16.562 423.973 16.52 423.977 16.465 cv
423.977 12.344 li
423.973 12.113 423.953 11.898 423.91 11.703 cv
423.863 11.512 423.793 11.348 423.707 11.211 cv
423.613 11.074 423.5 10.969 423.363 10.891 cv
423.223 10.816 423.059 10.777 422.867 10.777 cv
422.633 10.777 422.395 10.871 422.156 11.051 cv
421.918 11.234 421.66 11.496 421.379 11.844 cv
421.379 16.465 li
421.379 16.52 421.363 16.562 421.332 16.602 cv
421.301 16.641 421.246 16.676 421.172 16.699 cv
421.094 16.727 420.992 16.742 420.871 16.758 cv
420.746 16.77 420.594 16.777 420.406 16.777 cv
420.211 16.777 420.051 16.77 419.93 16.758 cv
419.801 16.742 419.699 16.727 419.629 16.699 cv
419.551 16.676 419.5 16.641 419.469 16.602 cv
419.438 16.562 419.422 16.52 419.422 16.465 cv
419.422 12.344 li
419.422 12.113 419.398 11.898 419.355 11.703 cv
419.313 11.512 419.246 11.348 419.16 11.211 cv
419.066 11.074 418.953 10.969 418.816 10.891 cv
418.672 10.816 418.508 10.777 418.324 10.777 cv
418.082 10.777 417.844 10.871 417.605 11.051 cv
417.367 11.234 417.109 11.496 416.836 11.844 cv
416.836 16.465 li
416.832 16.52 416.816 16.562 416.789 16.602 cv
416.754 16.641 416.699 16.676 416.629 16.699 cv
416.551 16.727 416.453 16.742 416.328 16.758 cv
416.203 16.77 416.043 16.777 415.855 16.777 cv
415.66 16.777 415.504 16.77 415.379 16.758 cv
415.254 16.742 415.152 16.727 415.078 16.699 cv
415 16.676 414.945 16.641 414.918 16.602 cv
414.883 16.562 414.867 16.52 414.871 16.465 cv
414.871 9.51599 li
414.867 9.46899 414.883 9.422 414.91 9.37903 cv
414.934 9.34399 414.98 9.31201 415.051 9.28101 cv
415.117 9.258 415.203 9.23798 415.313 9.22302 cv
415.418 9.21503 415.551 9.20697 415.715 9.203 cv
415.879 9.20697 416.016 9.21503 416.125 9.22302 cv
416.23 9.23798 416.316 9.258 416.379 9.28101 cv
416.438 9.31201 416.48 9.34399 416.508 9.37903 cv
416.531 9.422 416.543 9.46899 416.547 9.51599 cv
416.547 10.316 li
416.93 9.90601 417.313 9.59399 417.695 9.383 cv
418.074 9.17603 418.477 9.07397 418.895 9.07001 cv
419.18 9.07397 419.434 9.10199 419.664 9.15997 cv
419.891 9.22302 420.098 9.30902 420.277 9.41803 cv
420.457 9.53101 420.609 9.66803 420.738 9.82001 cv
420.867 9.97699 420.977 10.148 421.066 10.34 cv
421.273 10.117 421.477 9.92603 421.68 9.76599 cv
421.875 9.60498 422.074 9.47302 422.27 9.37097 cv
422.465 9.27002 422.66 9.19501 422.855 9.14502 cv
423.051 9.09802 423.25 9.07397 423.453 9.07001 cv
423.914 9.07397 424.301 9.15198 424.621 9.30499 cv
424.934 9.46503 425.191 9.67603 425.387 9.94098 cv
425.582 10.211 425.719 10.523 425.805 10.879 cv
425.883 11.238 425.926 11.617 425.93 12.016 cv
cp
f
434.879 12.918 mo
434.875 13.516 434.797 14.059 434.645 14.543 cv
434.484 15.035 434.25 15.453 433.934 15.805 cv
433.617 16.156 433.219 16.43 432.742 16.621 cv
432.262 16.812 431.703 16.906 431.066 16.91 cv
430.445 16.906 429.906 16.824 429.453 16.652 cv
428.992 16.484 428.613 16.234 428.316 15.906 cv
428.012 15.582 427.789 15.18 427.645 14.699 cv
427.5 14.223 427.43 13.676 427.43 13.059 cv
427.43 12.469 427.508 11.93 427.664 11.437 cv
427.82 10.949 428.059 10.527 428.379 10.176 cv
428.695 9.828 429.09 9.55499 429.566 9.35901 cv
430.039 9.16803 430.598 9.07397 431.238 9.07001 cv
431.863 9.07397 432.402 9.15601 432.859 9.32397 cv
433.316 9.49597 433.695 9.74597 433.992 10.07 cv
434.289 10.398 434.512 10.801 434.66 11.277 cv
434.805 11.758 434.875 12.305 434.879 12.918 cv
cp
432.859 12.996 mo
432.855 12.66 432.828 12.344 432.777 12.051 cv
432.719 11.766 432.625 11.516 432.5 11.301 cv
432.367 11.09 432.195 10.922 431.984 10.801 cv
431.766 10.684 431.496 10.625 431.168 10.621 cv
430.879 10.625 430.625 10.68 430.406 10.781 cv
430.188 10.891 430.008 11.047 429.867 11.25 cv
429.727 11.457 429.621 11.703 429.551 11.988 cv
429.48 12.281 429.445 12.609 429.445 12.973 cv
429.445 13.32 429.473 13.637 429.531 13.922 cv
429.586 14.215 429.68 14.465 429.809 14.676 cv
429.934 14.891 430.105 15.055 430.328 15.168 cv
430.543 15.289 430.813 15.348 431.137 15.344 cv
431.43 15.348 431.688 15.293 431.91 15.184 cv
432.125 15.078 432.305 14.926 432.445 14.719 cv
432.586 14.52 432.688 14.273 432.758 13.984 cv
432.82 13.699 432.855 13.371 432.859 12.996 cv
cp
f
440.582 15.781 mo
440.582 16.008 440.566 16.184 440.539 16.305 cv
440.508 16.43 440.469 16.516 440.426 16.562 cv
440.375 16.613 440.309 16.656 440.219 16.695 cv
440.125 16.734 440.016 16.766 439.898 16.797 cv
439.773 16.82 439.641 16.844 439.5 16.863 cv
439.355 16.875 439.215 16.883 439.07 16.887 cv
438.68 16.883 438.34 16.832 438.055 16.738 cv
437.77 16.637 437.535 16.488 437.348 16.281 cv
437.16 16.078 437.02 15.82 436.934 15.508 cv
436.84 15.199 436.797 14.828 436.801 14.398 cv
436.801 10.84 li
435.969 10.84 li
435.867 10.844 435.793 10.781 435.742 10.656 cv
435.688 10.535 435.66 10.332 435.664 10.043 cv
435.66 9.89502 435.668 9.76599 435.684 9.664 cv
435.695 9.56201 435.715 9.47998 435.742 9.41803 cv
435.766 9.35901 435.797 9.31598 435.84 9.289 cv
435.875 9.26599 435.922 9.25403 435.977 9.25 cv
436.801 9.25 li
436.801 7.69897 li
436.797 7.65198 436.813 7.60498 436.844 7.55902 cv
436.871 7.52002 436.922 7.48401 437 7.453 cv
437.074 7.42999 437.176 7.40601 437.305 7.39099 cv
437.43 7.37903 437.586 7.375 437.777 7.37097 cv
437.965 7.375 438.125 7.37903 438.254 7.39099 cv
438.379 7.40601 438.48 7.42999 438.555 7.453 cv
438.625 7.48401 438.676 7.52002 438.711 7.55902 cv
438.738 7.60498 438.754 7.65198 438.758 7.69897 cv
438.758 9.25 li
440.27 9.25 li
440.32 9.25403 440.367 9.26599 440.406 9.289 cv
440.445 9.31598 440.477 9.35901 440.504 9.41803 cv
440.527 9.47998 440.547 9.56201 440.563 9.664 cv
440.574 9.76599 440.582 9.89502 440.582 10.043 cv
440.582 10.332 440.555 10.535 440.504 10.656 cv
440.449 10.781 440.375 10.844 440.277 10.84 cv
438.758 10.84 li
438.758 14.105 li
438.754 14.484 438.813 14.77 438.938 14.957 cv
439.055 15.148 439.27 15.242 439.574 15.242 cv
439.676 15.242 439.77 15.234 439.855 15.215 cv
439.938 15.199 440.012 15.18 440.078 15.152 cv
440.141 15.133 440.195 15.109 440.242 15.09 cv
440.285 15.074 440.324 15.066 440.363 15.062 cv
440.391 15.066 440.422 15.074 440.453 15.09 cv
440.48 15.109 440.5 15.148 440.52 15.199 cv
440.531 15.258 440.547 15.332 440.563 15.422 cv
440.574 15.52 440.582 15.637 440.582 15.781 cv
cp
f
448.168 12.789 mo
448.164 13.027 448.113 13.203 448.008 13.316 cv
447.898 13.434 447.75 13.492 447.57 13.488 cv
443.336 13.488 li
443.332 13.789 443.367 14.059 443.441 14.297 cv
443.508 14.539 443.621 14.742 443.777 14.91 cv
443.93 15.082 444.125 15.211 444.367 15.297 cv
444.605 15.387 444.895 15.43 445.238 15.43 cv
445.578 15.43 445.879 15.406 446.141 15.355 cv
446.398 15.309 446.625 15.254 446.816 15.191 cv
447.004 15.133 447.16 15.078 447.289 15.027 cv
447.41 14.98 447.512 14.957 447.594 14.953 cv
447.637 14.957 447.676 14.965 447.711 14.98 cv
447.738 15 447.766 15.031 447.785 15.078 cv
447.805 15.125 447.816 15.191 447.828 15.277 cv
447.832 15.363 447.836 15.473 447.84 15.602 cv
447.836 15.719 447.836 15.816 447.832 15.895 cv
447.824 15.977 447.816 16.043 447.809 16.098 cv
447.797 16.156 447.781 16.207 447.762 16.242 cv
447.742 16.285 447.715 16.32 447.684 16.355 cv
447.648 16.395 447.555 16.445 447.406 16.504 cv
447.25 16.57 447.059 16.633 446.828 16.687 cv
446.59 16.75 446.32 16.797 446.023 16.844 cv
445.719 16.883 445.398 16.906 445.059 16.91 cv
444.438 16.906 443.895 16.832 443.434 16.676 cv
442.965 16.523 442.578 16.285 442.27 15.969 cv
441.953 15.652 441.719 15.254 441.57 14.77 cv
441.414 14.289 441.34 13.723 441.344 13.066 cv
441.34 12.453 441.418 11.895 441.582 11.398 cv
441.738 10.902 441.973 10.484 442.285 10.137 cv
442.59 9.79303 442.965 9.52698 443.402 9.34399 cv
443.84 9.164 444.332 9.07397 444.887 9.07001 cv
445.465 9.07397 445.965 9.15997 446.379 9.328 cv
446.793 9.50403 447.129 9.742 447.395 10.043 cv
447.656 10.348 447.852 10.707 447.98 11.121 cv
448.102 11.539 448.164 11.988 448.168 12.477 cv
cp
446.266 12.227 mo
446.277 11.676 446.168 11.242 445.934 10.93 cv
445.699 10.617 445.332 10.461 444.84 10.457 cv
444.59 10.461 444.375 10.508 444.191 10.598 cv
444.004 10.695 443.852 10.82 443.73 10.977 cv
443.605 11.137 443.512 11.324 443.449 11.539 cv
443.383 11.754 443.344 11.984 443.336 12.227 cv
cp
f
465.363 16.449 mo
465.359 16.504 465.348 16.551 465.32 16.59 cv
465.289 16.633 465.234 16.668 465.164 16.691 cv
465.086 16.719 464.988 16.738 464.863 16.754 cv
464.738 16.77 464.578 16.777 464.387 16.777 cv
464.199 16.777 464.043 16.77 463.922 16.754 cv
463.793 16.738 463.695 16.719 463.625 16.691 cv
463.551 16.668 463.5 16.633 463.469 16.59 cv
463.438 16.551 463.422 16.504 463.422 16.449 cv
463.422 8.242 li
463.406 8.242 li
460.484 16.441 li
460.461 16.512 460.426 16.566 460.383 16.609 cv
460.332 16.656 460.27 16.691 460.191 16.715 cv
460.109 16.742 460.008 16.758 459.883 16.766 cv
459.758 16.773 459.605 16.777 459.434 16.777 cv
459.254 16.777 459.105 16.77 458.98 16.758 cv
458.855 16.742 458.75 16.723 458.672 16.695 cv
458.586 16.668 458.523 16.633 458.48 16.59 cv
458.43 16.551 458.398 16.504 458.387 16.441 cv
455.566 8.242 li
455.551 8.242 li
455.551 16.449 li
455.547 16.504 455.531 16.551 455.508 16.59 cv
455.477 16.633 455.426 16.668 455.348 16.691 cv
455.27 16.719 455.168 16.738 455.047 16.754 cv
454.922 16.77 454.766 16.777 454.578 16.777 cv
454.387 16.777 454.23 16.77 454.109 16.754 cv
453.98 16.738 453.879 16.719 453.809 16.691 cv
453.73 16.668 453.68 16.633 453.652 16.59 cv
453.621 16.551 453.605 16.504 453.609 16.449 cv
453.609 7.46503 li
453.605 7.203 453.676 7 453.82 6.85498 cv
453.957 6.71899 454.145 6.64801 454.383 6.64502 cv
455.723 6.64502 li
455.961 6.64801 456.164 6.66803 456.336 6.703 cv
456.504 6.74597 456.652 6.80902 456.781 6.89801 cv
456.902 6.992 457.008 7.11298 457.094 7.258 cv
457.176 7.40997 457.246 7.59399 457.313 7.80902 cv
459.496 13.816 li
459.527 13.816 li
461.785 7.82397 li
461.852 7.60498 461.926 7.422 462.008 7.27002 cv
462.086 7.12097 462.18 7 462.289 6.90198 cv
462.395 6.81201 462.52 6.74597 462.664 6.703 cv
462.809 6.66803 462.977 6.64801 463.172 6.64502 cv
464.551 6.64502 li
464.688 6.64801 464.809 6.664 464.914 6.69897 cv
465.012 6.73798 465.094 6.79303 465.164 6.85901 cv
465.227 6.93402 465.277 7.02002 465.313 7.117 cv
465.344 7.22302 465.359 7.34003 465.363 7.46503 cv
cp
f
474.473 12.918 mo
474.469 13.516 474.391 14.059 474.238 14.543 cv
474.078 15.035 473.844 15.453 473.527 15.805 cv
473.211 16.156 472.813 16.43 472.336 16.621 cv
471.855 16.812 471.297 16.906 470.66 16.91 cv
470.039 16.906 469.5 16.824 469.047 16.652 cv
468.586 16.484 468.207 16.234 467.91 15.906 cv
467.605 15.582 467.383 15.18 467.238 14.699 cv
467.094 14.223 467.023 13.676 467.023 13.059 cv
467.023 12.469 467.102 11.93 467.258 11.437 cv
467.414 10.949 467.652 10.527 467.973 10.176 cv
468.289 9.828 468.684 9.55499 469.16 9.35901 cv
469.633 9.16803 470.191 9.07397 470.832 9.07001 cv
471.457 9.07397 471.996 9.15601 472.453 9.32397 cv
472.91 9.49597 473.289 9.74597 473.586 10.07 cv
473.883 10.398 474.105 10.801 474.254 11.277 cv
474.398 11.758 474.469 12.305 474.473 12.918 cv
cp
472.453 12.996 mo
472.449 12.66 472.422 12.344 472.371 12.051 cv
472.313 11.766 472.219 11.516 472.094 11.301 cv
471.961 11.09 471.789 10.922 471.578 10.801 cv
471.359 10.684 471.09 10.625 470.762 10.621 cv
470.473 10.625 470.219 10.68 470 10.781 cv
469.781 10.891 469.602 11.047 469.461 11.25 cv
469.32 11.457 469.215 11.703 469.145 11.988 cv
469.074 12.281 469.039 12.609 469.039 12.973 cv
469.039 13.32 469.066 13.637 469.125 13.922 cv
469.18 14.215 469.273 14.465 469.402 14.676 cv
469.527 14.891 469.699 15.055 469.922 15.168 cv
470.137 15.289 470.406 15.348 470.73 15.344 cv
471.023 15.348 471.281 15.293 471.504 15.184 cv
471.719 15.078 471.898 14.926 472.039 14.719 cv
472.18 14.52 472.281 14.273 472.352 13.984 cv
472.414 13.699 472.449 13.371 472.453 12.996 cv
cp
f
482.621 16.465 mo
482.617 16.527 482.605 16.574 482.582 16.609 cv
482.555 16.652 482.508 16.684 482.449 16.707 cv
482.383 16.73 482.301 16.746 482.195 16.762 cv
482.09 16.77 481.957 16.777 481.805 16.777 cv
481.633 16.777 481.5 16.77 481.398 16.762 cv
481.293 16.746 481.207 16.73 481.145 16.707 cv
481.078 16.684 481.031 16.652 481.004 16.609 cv
480.973 16.574 480.957 16.527 480.961 16.465 cv
480.961 15.695 li
480.602 16.082 480.227 16.379 479.836 16.59 cv
479.438 16.801 479.004 16.906 478.531 16.91 cv
477.996 16.906 477.547 16.805 477.184 16.602 cv
476.816 16.398 476.52 16.125 476.289 15.773 cv
476.055 15.43 475.887 15.023 475.785 14.555 cv
475.684 14.094 475.633 13.602 475.633 13.082 cv
475.633 12.469 475.695 11.914 475.828 11.418 cv
475.957 10.926 476.152 10.504 476.41 10.156 cv
476.664 9.80902 476.98 9.54303 477.359 9.35199 cv
477.738 9.16803 478.176 9.07397 478.672 9.07001 cv
479.059 9.07397 479.41 9.15198 479.73 9.30902 cv
480.043 9.46899 480.359 9.69897 480.672 10.004 cv
480.672 6.242 li
480.672 6.19098 480.684 6.14502 480.715 6.10199 cv
480.738 6.06201 480.793 6.02698 480.871 5.99597 cv
480.945 5.96899 481.043 5.94897 481.172 5.92999 cv
481.293 5.91803 481.453 5.90997 481.648 5.90601 cv
481.84 5.90997 481.996 5.91803 482.121 5.92999 cv
482.242 5.94897 482.344 5.96899 482.418 5.99597 cv
482.488 6.02698 482.539 6.06201 482.574 6.10199 cv
482.602 6.14502 482.617 6.19098 482.621 6.242 cv
cp
480.672 11.82 mo
480.391 11.469 480.121 11.199 479.867 11.012 cv
479.605 10.824 479.336 10.73 479.059 10.73 cv
478.805 10.73 478.586 10.797 478.402 10.922 cv
478.215 11.055 478.066 11.223 477.957 11.434 cv
477.844 11.645 477.762 11.883 477.707 12.145 cv
477.652 12.41 477.625 12.68 477.625 12.949 cv
477.625 13.246 477.648 13.527 477.695 13.801 cv
477.742 14.078 477.816 14.324 477.926 14.539 cv
478.027 14.754 478.172 14.926 478.352 15.055 cv
478.527 15.187 478.75 15.254 479.02 15.25 cv
479.152 15.254 479.281 15.234 479.414 15.191 cv
479.539 15.156 479.672 15.094 479.805 15 cv
479.938 14.914 480.074 14.797 480.215 14.652 cv
480.355 14.512 480.508 14.336 480.672 14.129 cv
cp
f
491.023 12.789 mo
491.02 13.027 490.969 13.203 490.863 13.316 cv
490.754 13.434 490.605 13.492 490.426 13.488 cv
486.191 13.488 li
486.188 13.789 486.223 14.059 486.297 14.297 cv
486.363 14.539 486.477 14.742 486.633 14.91 cv
486.785 15.082 486.98 15.211 487.223 15.297 cv
487.461 15.387 487.75 15.43 488.094 15.43 cv
488.434 15.43 488.734 15.406 488.996 15.355 cv
489.254 15.309 489.48 15.254 489.672 15.191 cv
489.859 15.133 490.016 15.078 490.145 15.027 cv
490.266 14.98 490.367 14.957 490.449 14.953 cv
490.492 14.957 490.531 14.965 490.566 14.98 cv
490.594 15 490.621 15.031 490.641 15.078 cv
490.66 15.125 490.672 15.191 490.684 15.277 cv
490.688 15.363 490.691 15.473 490.695 15.602 cv
490.691 15.719 490.691 15.816 490.688 15.895 cv
490.68 15.977 490.672 16.043 490.664 16.098 cv
490.652 16.156 490.637 16.207 490.617 16.242 cv
490.598 16.285 490.57 16.32 490.539 16.355 cv
490.504 16.395 490.41 16.445 490.262 16.504 cv
490.105 16.57 489.914 16.633 489.684 16.687 cv
489.445 16.75 489.176 16.797 488.879 16.844 cv
488.574 16.883 488.254 16.906 487.914 16.91 cv
487.293 16.906 486.75 16.832 486.289 16.676 cv
485.82 16.523 485.434 16.285 485.125 15.969 cv
484.809 15.652 484.574 15.254 484.426 14.77 cv
484.27 14.289 484.195 13.723 484.199 13.066 cv
484.195 12.453 484.273 11.895 484.438 11.398 cv
484.594 10.902 484.828 10.484 485.141 10.137 cv
485.445 9.79303 485.82 9.52698 486.258 9.34399 cv
486.695 9.164 487.188 9.07397 487.742 9.07001 cv
488.32 9.07397 488.82 9.15997 489.234 9.328 cv
489.648 9.50403 489.984 9.742 490.25 10.043 cv
490.512 10.348 490.707 10.707 490.836 11.121 cv
490.957 11.539 491.02 11.988 491.023 12.477 cv
cp
489.121 12.227 mo
489.133 11.676 489.023 11.242 488.789 10.93 cv
488.555 10.617 488.188 10.461 487.695 10.457 cv
487.445 10.461 487.23 10.508 487.047 10.598 cv
486.859 10.695 486.707 10.82 486.586 10.977 cv
486.461 11.137 486.367 11.324 486.305 11.539 cv
486.238 11.754 486.199 11.984 486.191 12.227 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
