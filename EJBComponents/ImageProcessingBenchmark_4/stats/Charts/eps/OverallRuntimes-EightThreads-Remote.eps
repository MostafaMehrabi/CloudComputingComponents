%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntimes-EightThreads-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 2:29:21 p.m.
%%BoundingBox: 0 0 630 527
%%HiResBoundingBox: 0 0 629.0400 526.6800
%%CropBox: 0 0 629.0400 526.6800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -526.68 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 526.68 li
629.04 526.68 li
629.04 0 li
cp
clp
0 0 mo
629.039 0 li
629.039 526.68 li
0 526.68 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.441 461.641 mo
613.68 461.641 li
61.441 444.961 mo
613.68 444.961 li
61.441 411.602 mo
613.68 411.602 li
61.441 394.922 mo
613.68 394.922 li
61.441 361.559 mo
613.68 361.559 li
61.441 344.879 mo
613.68 344.879 li
61.441 311.52 mo
613.68 311.52 li
61.441 294.84 mo
613.68 294.84 li
61.441 261.48 mo
613.68 261.48 li
61.441 244.801 mo
613.68 244.801 li
61.441 211.441 mo
613.68 211.441 li
61.441 194.762 mo
613.68 194.762 li
61.441 161.398 mo
613.68 161.398 li
61.441 144.719 mo
613.68 144.719 li
61.441 111.359 mo
613.68 111.359 li
61.441 94.68 mo
613.68 94.68 li
61.441 61.32 mo
613.68 61.32 li
61.441 44.641 mo
613.68 44.641 li
.140414 .108034 .108034 0 cmyk
@
61.441 428.281 mo
613.68 428.281 li
61.441 378.238 mo
613.68 378.238 li
61.441 328.199 mo
613.68 328.199 li
61.441 278.16 mo
613.68 278.16 li
61.441 228.121 mo
613.68 228.121 li
61.441 178.078 mo
613.68 178.078 li
61.441 128.039 mo
613.68 128.039 li
61.441 78 mo
613.68 78 li
61.441 27.961 mo
613.68 27.961 li
.328344 .284215 .278569 .000915541 cmyk
@
95.879 27.961 mo
95.879 478.32 li
164.879 27.961 mo
164.879 478.32 li
234 27.961 mo
234 478.32 li
303 27.961 mo
303 478.32 li
372 27.961 mo
372 478.32 li
441.121 27.961 mo
441.121 478.32 li
510.121 27.961 mo
510.121 478.32 li
579.121 27.961 mo
579.121 478.32 li
.178592 .148898 .143923 0 cmyk
@
61.441 27.961 mo
61.441 478.32 li
130.441 27.961 mo
130.441 478.32 li
199.441 27.961 mo
199.441 478.32 li
268.441 27.961 mo
268.441 478.32 li
337.559 27.961 mo
337.559 478.32 li
406.559 27.961 mo
406.559 478.32 li
475.559 27.961 mo
475.559 478.32 li
544.68 27.961 mo
544.68 478.32 li
613.68 27.961 mo
613.68 478.32 li
.328344 .284215 .278569 .000915541 cmyk
@
30.719 468.961 mo
48.36 468.961 li
48.36 486 li
30.719 486 li
cp
0 0 0 0 cmyk
ef
30.719 418.922 mo
48.36 418.922 li
48.36 435.961 li
30.719 435.961 li
cp
ef
30.719 368.879 mo
48.36 368.879 li
48.36 385.922 li
30.719 385.922 li
cp
ef
30.719 318.84 mo
48.36 318.84 li
48.36 336 li
30.719 336 li
cp
ef
30.719 268.801 mo
48.36 268.801 li
48.36 285.961 li
30.719 285.961 li
cp
ef
30.719 218.762 mo
48.36 218.762 li
48.36 235.922 li
30.719 235.922 li
cp
ef
30.719 168.719 mo
48.36 168.719 li
48.36 185.879 li
30.719 185.879 li
cp
ef
23.641 118.68 mo
48.36 118.68 li
48.36 135.84 li
23.641 135.84 li
cp
ef
23.641 68.762 mo
48.36 68.762 li
48.36 85.801 li
23.641 85.801 li
cp
ef
23.641 18.719 mo
48.36 18.719 li
48.36 35.762 li
23.641 35.762 li
cp
ef
.96 lw
61.441 478.32 mo
613.68 478.32 li
.367803 .29575 .300999 .00198367 cmyk
@
61.441 478.32 mo
61.441 482.762 li
130.441 478.32 mo
130.441 482.762 li
199.441 478.32 mo
199.441 482.762 li
268.441 478.32 mo
268.441 482.762 li
337.559 478.32 mo
337.559 482.762 li
406.559 478.32 mo
406.559 482.762 li
475.559 478.32 mo
475.559 482.762 li
544.68 478.32 mo
544.68 482.762 li
613.68 478.32 mo
613.68 482.762 li
@
gsave
61.32 27.961 mo
614.398 27.961 li
614.398 478.922 li
61.32 478.922 li
cp
clp
1 lc
61.441 448.199 mo
130.441 461.641 li
199.441 467.879 li
268.441 471.238 li
337.559 471.602 li
406.559 468.961 li
475.559 472.922 li
544.68 472.922 li
613.68 473.281 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
56.281 443.109 mo
66.238 443.109 li
66.238 453.07 li
56.281 453.07 li
cp
.62768 .285466 0 0 cmyk
@
125.281 456.43 mo
135.238 456.43 li
135.238 466.391 li
125.281 466.391 li
cp
@
194.398 462.789 mo
204.359 462.789 li
204.359 472.75 li
194.398 472.75 li
cp
@
263.398 466.148 mo
273.359 466.148 li
273.359 476.109 li
263.398 476.109 li
cp
@
332.398 466.391 mo
342.359 466.391 li
342.359 476.352 li
332.398 476.352 li
cp
@
401.398 463.75 mo
411.359 463.75 li
411.359 473.711 li
401.398 473.711 li
cp
@
470.52 467.828 mo
480.481 467.828 li
480.481 477.789 li
470.52 477.789 li
cp
@
539.52 467.828 mo
549.481 467.828 li
549.481 477.789 li
539.52 477.789 li
cp
@
608.52 468.07 mo
618.481 468.07 li
618.481 478.031 li
608.52 478.031 li
cp
@
gsave
61.32 27.961 mo
614.398 27.961 li
614.398 478.922 li
61.32 478.922 li
cp
clp
.96 lw
1 lc
61.441 399.84 mo
130.441 440.52 li
199.441 451.199 li
268.441 454.559 li
337.559 464.879 li
406.559 458.879 li
475.559 460.559 li
544.68 462.961 li
613.68 467.281 li
.466651 0 .889799 0 cmyk
@
grestore
56.281 394.75 mo
66.238 394.75 li
66.238 404.711 li
56.281 404.711 li
cp
.466651 0 .889799 0 cmyk
@
125.281 435.43 mo
135.238 435.43 li
135.238 445.391 li
125.281 445.391 li
cp
@
194.398 446.109 mo
204.359 446.109 li
204.359 456.07 li
194.398 456.07 li
cp
@
263.398 449.469 mo
273.359 449.469 li
273.359 459.43 li
263.398 459.43 li
cp
@
332.398 459.789 mo
342.359 459.789 li
342.359 469.75 li
332.398 469.75 li
cp
@
401.398 453.789 mo
411.359 453.789 li
411.359 463.75 li
401.398 463.75 li
cp
@
470.52 455.469 mo
480.481 455.469 li
480.481 465.43 li
470.52 465.43 li
cp
@
539.52 457.75 mo
549.481 457.75 li
549.481 467.711 li
539.52 467.711 li
cp
@
608.52 462.07 mo
618.481 462.07 li
618.481 472.031 li
608.52 472.031 li
cp
@
gsave
61.32 27.961 mo
614.398 27.961 li
614.398 478.922 li
61.32 478.922 li
cp
clp
.96 lw
1 lc
61.441 219.719 mo
130.441 336.48 li
199.441 388.199 li
268.441 408.238 li
337.559 431.281 li
406.559 417.238 li
475.559 419.879 li
544.68 422.281 li
613.68 432.961 li
0 .990631 1 .000396735 cmyk
@
grestore
56.281 214.629 mo
66.238 214.629 li
66.238 224.59 li
56.281 224.59 li
cp
0 .990631 1 .000396735 cmyk
@
125.281 331.391 mo
135.238 331.391 li
135.238 341.352 li
125.281 341.352 li
cp
@
194.398 383.109 mo
204.359 383.109 li
204.359 393.07 li
194.398 393.07 li
cp
@
263.398 403.031 mo
273.359 403.031 li
273.359 412.988 li
263.398 412.988 li
cp
@
332.398 426.07 mo
342.359 426.07 li
342.359 436.031 li
332.398 436.031 li
cp
@
401.398 412.031 mo
411.359 412.031 li
411.359 421.988 li
401.398 421.988 li
cp
@
470.52 414.789 mo
480.481 414.789 li
480.481 424.75 li
470.52 424.75 li
cp
@
539.52 417.07 mo
549.481 417.07 li
549.481 427.031 li
539.52 427.031 li
cp
@
608.52 427.75 mo
618.481 427.75 li
618.481 437.711 li
608.52 437.711 li
cp
@
gsave
61.32 27.961 mo
614.398 27.961 li
614.398 478.922 li
61.32 478.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.441 305.52 mo
130.441 398.879 li
199.441 420.602 li
268.441 429.602 li
337.559 434.52 li
406.559 448.922 li
475.559 447.961 li
544.68 450.602 li
613.68 449.879 li
@
grestore
56.281 300.309 mo
66.238 300.309 li
66.238 310.27 li
56.281 310.27 li
cp
@
125.281 393.789 mo
135.238 393.789 li
135.238 403.75 li
125.281 403.75 li
cp
@
194.398 415.391 mo
204.359 415.391 li
204.359 425.352 li
194.398 425.352 li
cp
@
263.398 424.391 mo
273.359 424.391 li
273.359 434.352 li
263.398 434.352 li
cp
@
332.398 429.43 mo
342.359 429.43 li
342.359 439.391 li
332.398 439.391 li
cp
@
401.398 443.711 mo
411.359 443.711 li
411.359 453.672 li
401.398 453.672 li
cp
@
470.52 442.75 mo
480.481 442.75 li
480.481 452.711 li
470.52 452.711 li
cp
@
539.52 445.391 mo
549.481 445.391 li
549.481 455.352 li
539.52 455.352 li
cp
@
608.52 444.789 mo
618.481 444.789 li
618.481 454.75 li
608.52 454.75 li
cp
@
gsave
61.32 27.961 mo
614.398 27.961 li
614.398 478.922 li
61.32 478.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.441 33.602 mo
130.441 264.48 li
199.441 309.84 li
268.441 340.559 li
337.559 368.16 li
406.559 360.48 li
475.559 374.52 li
544.68 372.84 li
613.68 382.199 li
.62768 .285466 0 0 cmyk
@
grestore
56.281 28.512 mo
66.238 28.512 li
66.238 38.469 li
56.281 38.469 li
cp
.62768 .285466 0 0 cmyk
@
125.281 259.27 mo
135.238 259.27 li
135.238 269.231 li
125.281 269.231 li
cp
@
194.398 304.629 mo
204.359 304.629 li
204.359 314.59 li
194.398 314.59 li
cp
@
263.398 335.352 mo
273.359 335.352 li
273.359 345.309 li
263.398 345.309 li
cp
@
332.398 363.07 mo
342.359 363.07 li
342.359 373.031 li
332.398 373.031 li
cp
@
401.398 355.391 mo
411.359 355.391 li
411.359 365.352 li
401.398 365.352 li
cp
@
470.52 369.43 mo
480.481 369.43 li
480.481 379.391 li
470.52 379.391 li
cp
@
539.52 367.75 mo
549.481 367.75 li
549.481 377.711 li
539.52 377.711 li
cp
@
608.52 377.109 mo
618.481 377.109 li
618.481 387.07 li
608.52 387.07 li
cp
@
gsave
61.32 27.961 mo
614.398 27.961 li
614.398 478.922 li
61.32 478.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.441 172.801 mo
130.441 306.48 li
199.441 350.52 li
268.441 396.238 li
337.559 385.559 li
406.559 401.52 li
475.559 431.281 li
544.68 404.52 li
613.68 434.52 li
.466651 0 .889799 0 cmyk
@
grestore
56.762 168.07 mo
65.762 168.07 li
65.762 177.07 li
56.762 177.07 li
cp
.466651 0 .889799 0 cmyk
@
125.762 301.871 mo
134.762 301.871 li
134.762 310.871 li
125.762 310.871 li
cp
@
194.879 345.789 mo
203.879 345.789 li
203.879 354.789 li
194.879 354.789 li
cp
@
263.879 391.512 mo
272.879 391.512 li
272.879 400.512 li
263.879 400.512 li
cp
@
332.879 380.828 mo
341.879 380.828 li
341.879 389.828 li
332.879 389.828 li
cp
@
401.879 396.91 mo
410.879 396.91 li
410.879 405.91 li
401.879 405.91 li
cp
@
471 426.551 mo
480 426.551 li
480 435.551 li
471 435.551 li
cp
@
540 399.91 mo
549 399.91 li
549 408.91 li
540 408.91 li
cp
@
609 429.91 mo
618 429.91 li
618 438.91 li
609 438.91 li
cp
@
30.68 468.898 mo
48.407 468.898 li
48.407 485.988 li
30.68 485.988 li
cp
0 0 0 0 cmyk
ef
37.328 477.848 mo
37.324 478.531 37.273 479.152 37.168 479.715 cv
37.059 480.277 36.879 480.762 36.633 481.164 cv
36.379 481.57 36.051 481.883 35.652 482.102 cv
35.246 482.324 34.754 482.434 34.168 482.434 cv
33.609 482.434 33.137 482.336 32.758 482.137 cv
32.375 481.941 32.07 481.648 31.836 481.262 cv
31.602 480.875 31.434 480.402 31.34 479.836 cv
31.238 479.273 31.191 478.625 31.191 477.891 cv
31.191 477.219 31.246 476.598 31.355 476.031 cv
31.465 475.469 31.641 474.984 31.891 474.578 cv
32.133 474.176 32.457 473.863 32.863 473.637 cv
33.262 473.418 33.758 473.305 34.348 473.305 cv
34.906 473.305 35.379 473.406 35.762 473.602 cv
36.145 473.805 36.449 474.098 36.684 474.48 cv
36.914 474.871 37.082 475.344 37.18 475.906 cv
37.277 476.469 37.324 477.117 37.328 477.848 cv
cp
36.121 477.93 mo
36.117 477.488 36.102 477.09 36.074 476.738 cv
36.039 476.387 35.992 476.078 35.934 475.809 cv
35.867 475.539 35.789 475.309 35.691 475.113 cv
35.594 474.922 35.477 474.762 35.34 474.633 cv
35.199 474.508 35.039 474.414 34.867 474.355 cv
34.688 474.301 34.492 474.273 34.277 474.27 cv
33.887 474.273 33.57 474.363 33.332 474.547 cv
33.086 474.73 32.895 474.984 32.758 475.301 cv
32.617 475.621 32.523 475.992 32.473 476.422 cv
32.422 476.852 32.398 477.316 32.398 477.809 cv
32.398 478.473 32.43 479.035 32.5 479.496 cv
32.566 479.965 32.676 480.344 32.828 480.633 cv
32.973 480.93 33.164 481.141 33.395 481.27 cv
33.625 481.406 33.906 481.473 34.238 481.469 cv
34.492 481.473 34.715 481.434 34.91 481.348 cv
35.102 481.27 35.27 481.148 35.41 480.992 cv
35.551 480.84 35.664 480.656 35.758 480.441 cv
35.844 480.227 35.918 479.988 35.977 479.727 cv
36.027 479.469 36.066 479.187 36.09 478.883 cv
36.109 478.578 36.117 478.262 36.121 477.93 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.324 481.559 mo
40.324 481.887 40.27 482.102 40.164 482.207 cv
40.055 482.312 39.859 482.363 39.578 482.367 cv
39.301 482.363 39.109 482.312 39.008 482.211 cv
38.898 482.105 38.848 481.895 38.852 481.578 cv
38.848 481.254 38.902 481.039 39.012 480.93 cv
39.117 480.824 39.313 480.77 39.598 480.77 cv
39.871 480.77 40.059 480.824 40.168 480.93 cv
40.27 481.035 40.324 481.246 40.324 481.559 cv
cp
f
47.984 477.848 mo
47.98 478.531 47.93 479.152 47.824 479.715 cv
47.715 480.277 47.535 480.762 47.289 481.164 cv
47.035 481.57 46.707 481.883 46.309 482.102 cv
45.902 482.324 45.41 482.434 44.824 482.434 cv
44.266 482.434 43.793 482.336 43.414 482.137 cv
43.031 481.941 42.727 481.648 42.492 481.262 cv
42.258 480.875 42.09 480.402 41.996 479.836 cv
41.895 479.273 41.848 478.625 41.848 477.891 cv
41.848 477.219 41.902 476.598 42.012 476.031 cv
42.121 475.469 42.297 474.984 42.547 474.578 cv
42.789 474.176 43.113 473.863 43.52 473.637 cv
43.918 473.418 44.414 473.305 45.004 473.305 cv
45.563 473.305 46.035 473.406 46.418 473.602 cv
46.801 473.805 47.105 474.098 47.34 474.48 cv
47.57 474.871 47.738 475.344 47.836 475.906 cv
47.934 476.469 47.98 477.117 47.984 477.848 cv
cp
46.777 477.93 mo
46.773 477.488 46.758 477.09 46.73 476.738 cv
46.695 476.387 46.648 476.078 46.59 475.809 cv
46.523 475.539 46.445 475.309 46.348 475.113 cv
46.25 474.922 46.133 474.762 45.996 474.633 cv
45.855 474.508 45.695 474.414 45.523 474.355 cv
45.344 474.301 45.148 474.273 44.934 474.27 cv
44.543 474.273 44.227 474.363 43.988 474.547 cv
43.742 474.73 43.551 474.984 43.414 475.301 cv
43.273 475.621 43.18 475.992 43.129 476.422 cv
43.078 476.852 43.055 477.316 43.055 477.809 cv
43.055 478.473 43.086 479.035 43.156 479.496 cv
43.223 479.965 43.332 480.344 43.484 480.633 cv
43.629 480.93 43.82 481.141 44.051 481.27 cv
44.281 481.406 44.563 481.473 44.895 481.469 cv
45.148 481.473 45.371 481.434 45.566 481.348 cv
45.758 481.27 45.926 481.148 46.066 480.992 cv
46.207 480.84 46.32 480.656 46.414 480.441 cv
46.5 480.227 46.574 479.988 46.633 479.727 cv
46.684 479.469 46.723 479.187 46.746 478.883 cv
46.766 478.578 46.773 478.262 46.777 477.93 cv
cp
f
30.68 418.871 mo
48.407 418.871 li
48.407 435.961 li
30.68 435.961 li
cp
0 0 0 0 cmyk
ef
37.055 431.797 mo
37.051 431.887 37.043 431.957 37.031 432.016 cv
37.016 432.078 36.996 432.129 36.977 432.16 cv
36.953 432.199 36.93 432.223 36.898 432.238 cv
36.867 432.254 36.836 432.262 36.809 432.262 cv
32.172 432.262 li
32.137 432.262 32.109 432.254 32.082 432.238 cv
32.055 432.223 32.027 432.199 32.004 432.16 cv
31.977 432.129 31.957 432.078 31.945 432.016 cv
31.93 431.957 31.922 431.887 31.926 431.797 cv
31.922 431.719 31.93 431.645 31.945 431.582 cv
31.957 431.523 31.973 431.477 31.996 431.437 cv
32.012 431.402 32.039 431.371 32.07 431.348 cv
32.102 431.328 32.133 431.32 32.172 431.316 cv
34.023 431.316 li
34.023 424.57 li
32.309 425.59 li
32.219 425.641 32.148 425.668 32.102 425.676 cv
32.047 425.684 32.004 425.676 31.973 425.645 cv
31.938 425.617 31.918 425.566 31.906 425.496 cv
31.895 425.43 31.887 425.344 31.891 425.234 cv
31.887 425.16 31.891 425.094 31.902 425.035 cv
31.906 424.984 31.918 424.937 31.934 424.898 cv
31.945 424.863 31.965 424.832 31.988 424.805 cv
32.012 424.777 32.043 424.75 32.09 424.723 cv
34.133 423.41 li
34.148 423.398 34.168 423.387 34.199 423.379 cv
34.223 423.371 34.258 423.363 34.305 423.352 cv
34.344 423.344 34.395 423.336 34.449 423.332 cv
34.504 423.332 34.57 423.332 34.656 423.328 cv
34.762 423.332 34.855 423.336 34.93 423.344 cv
35 423.352 35.055 423.367 35.102 423.383 cv
35.141 423.402 35.168 423.422 35.184 423.445 cv
35.191 423.473 35.199 423.496 35.203 423.52 cv
35.203 431.316 li
36.809 431.316 li
36.844 431.32 36.879 431.328 36.91 431.348 cv
36.941 431.371 36.965 431.402 36.988 431.437 cv
37.004 431.477 37.02 431.523 37.035 431.582 cv
37.043 431.645 37.051 431.719 37.055 431.797 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.324 431.516 mo
40.324 431.844 40.27 432.059 40.164 432.164 cv
40.055 432.27 39.859 432.32 39.578 432.324 cv
39.301 432.32 39.109 432.27 39.008 432.168 cv
38.898 432.062 38.848 431.852 38.852 431.535 cv
38.848 431.211 38.902 430.996 39.012 430.887 cv
39.117 430.781 39.313 430.727 39.598 430.727 cv
39.871 430.727 40.059 430.781 40.168 430.887 cv
40.27 430.992 40.324 431.203 40.324 431.516 cv
cp
f
47.648 429.41 mo
47.648 429.887 47.566 430.309 47.406 430.68 cv
47.246 431.051 47.02 431.363 46.73 431.617 cv
46.434 431.871 46.086 432.066 45.684 432.195 cv
45.277 432.328 44.828 432.391 44.336 432.391 cv
44.059 432.391 43.797 432.371 43.555 432.332 cv
43.305 432.293 43.086 432.246 42.898 432.191 cv
42.703 432.137 42.547 432.082 42.422 432.023 cv
42.297 431.973 42.219 431.93 42.188 431.895 cv
42.152 431.863 42.129 431.832 42.117 431.805 cv
42.102 431.777 42.086 431.746 42.078 431.703 cv
42.063 431.668 42.055 431.617 42.055 431.555 cv
42.047 431.496 42.047 431.426 42.047 431.344 cv
42.047 431.27 42.051 431.199 42.059 431.137 cv
42.066 431.074 42.078 431.023 42.098 430.984 cv
42.113 430.945 42.133 430.918 42.16 430.898 cv
42.184 430.883 42.215 430.875 42.246 430.871 cv
42.293 430.875 42.363 430.902 42.457 430.957 cv
42.551 431.016 42.68 431.078 42.844 431.145 cv
43.008 431.211 43.207 431.273 43.449 431.332 cv
43.684 431.391 43.969 431.418 44.305 431.418 cv
44.605 431.418 44.887 431.383 45.145 431.309 cv
45.398 431.238 45.621 431.125 45.809 430.969 cv
45.992 430.816 46.137 430.621 46.242 430.383 cv
46.348 430.148 46.398 429.859 46.402 429.52 cv
46.398 429.238 46.355 428.988 46.266 428.77 cv
46.176 428.551 46.039 428.371 45.855 428.227 cv
45.668 428.086 45.434 427.98 45.152 427.906 cv
44.867 427.836 44.527 427.797 44.141 427.797 cv
43.855 427.797 43.617 427.812 43.418 427.84 cv
43.215 427.871 43.027 427.887 42.855 427.883 cv
42.727 427.887 42.633 427.855 42.582 427.793 cv
42.523 427.734 42.496 427.621 42.5 427.449 cv
42.5 423.836 li
42.496 423.687 42.531 423.578 42.605 423.5 cv
42.672 423.43 42.773 423.391 42.91 423.391 cv
46.84 423.391 li
46.875 423.391 46.91 423.402 46.945 423.422 cv
46.977 423.445 47.004 423.477 47.031 423.516 cv
47.051 423.559 47.066 423.609 47.082 423.672 cv
47.09 423.738 47.098 423.816 47.102 423.898 cv
47.098 424.066 47.074 424.191 47.035 424.281 cv
46.988 424.375 46.93 424.422 46.852 424.418 cv
43.68 424.418 li
43.68 426.906 li
43.832 426.887 43.988 426.875 44.152 426.867 cv
44.309 426.863 44.496 426.859 44.711 426.859 cv
45.195 426.859 45.621 426.922 45.988 427.043 cv
46.352 427.164 46.656 427.336 46.906 427.555 cv
47.148 427.781 47.336 428.047 47.461 428.359 cv
47.586 428.676 47.648 429.027 47.648 429.41 cv
cp
f
30.68 368.84 mo
48.407 368.84 li
48.407 385.93 li
30.68 385.93 li
cp
0 0 0 0 cmyk
ef
36.965 379.684 mo
36.961 380.094 36.891 380.461 36.75 380.785 cv
36.605 381.113 36.402 381.395 36.141 381.625 cv
35.875 381.859 35.547 382.035 35.16 382.16 cv
34.77 382.285 34.332 382.348 33.848 382.348 cv
33.543 382.348 33.266 382.32 33.012 382.273 cv
32.75 382.227 32.52 382.176 32.324 382.105 cv
32.121 382.043 31.957 381.973 31.824 381.902 cv
31.691 381.832 31.605 381.781 31.574 381.746 cv
31.535 381.719 31.512 381.687 31.496 381.652 cv
31.477 381.621 31.457 381.582 31.445 381.535 cv
31.43 381.492 31.422 381.437 31.414 381.367 cv
31.406 381.305 31.402 381.223 31.406 381.121 cv
31.402 380.961 31.418 380.848 31.453 380.781 cv
31.484 380.719 31.531 380.684 31.594 380.684 cv
31.637 380.684 31.719 380.723 31.844 380.793 cv
31.965 380.871 32.125 380.949 32.32 381.031 cv
32.512 381.117 32.738 381.195 33.004 381.266 cv
33.262 381.34 33.555 381.375 33.875 381.375 cv
34.184 381.375 34.453 381.336 34.691 381.258 cv
34.922 381.18 35.121 381.07 35.281 380.93 cv
35.438 380.789 35.555 380.621 35.637 380.426 cv
35.715 380.23 35.754 380.02 35.758 379.793 cv
35.754 379.543 35.703 379.316 35.605 379.113 cv
35.5 378.914 35.352 378.742 35.16 378.594 cv
34.961 378.449 34.723 378.336 34.438 378.258 cv
34.152 378.18 33.828 378.141 33.465 378.141 cv
32.594 378.141 li
32.551 378.141 32.516 378.133 32.48 378.117 cv
32.445 378.102 32.414 378.074 32.391 378.035 cv
32.363 378 32.344 377.953 32.328 377.895 cv
32.313 377.836 32.305 377.758 32.305 377.66 cv
32.305 377.574 32.309 377.504 32.324 377.445 cv
32.332 377.391 32.352 377.344 32.383 377.309 cv
32.406 377.273 32.438 377.25 32.469 377.23 cv
32.5 377.219 32.535 377.211 32.578 377.207 cv
33.352 377.207 li
33.652 377.211 33.922 377.172 34.164 377.09 cv
34.398 377.016 34.602 376.902 34.773 376.754 cv
34.938 376.609 35.066 376.434 35.156 376.23 cv
35.246 376.027 35.293 375.801 35.293 375.547 cv
35.293 375.367 35.262 375.191 35.203 375.023 cv
35.141 374.859 35.051 374.715 34.934 374.59 cv
34.813 374.465 34.66 374.367 34.48 374.297 cv
34.293 374.227 34.082 374.191 33.84 374.191 cv
33.574 374.191 33.328 374.234 33.109 374.312 cv
32.883 374.395 32.688 374.48 32.516 374.57 cv
32.34 374.664 32.195 374.75 32.082 374.828 cv
31.969 374.91 31.887 374.949 31.844 374.945 cv
31.809 374.949 31.781 374.941 31.758 374.93 cv
31.73 374.918 31.711 374.895 31.695 374.859 cv
31.68 374.828 31.668 374.781 31.66 374.715 cv
31.652 374.656 31.648 374.574 31.652 374.473 cv
31.648 374.406 31.648 374.348 31.656 374.293 cv
31.656 374.242 31.668 374.195 31.684 374.152 cv
31.699 374.117 31.715 374.082 31.734 374.047 cv
31.75 374.02 31.781 373.98 31.824 373.934 cv
31.867 373.891 31.953 373.828 32.09 373.746 cv
32.219 373.664 32.383 373.586 32.578 373.504 cv
32.77 373.426 32.992 373.355 33.25 373.301 cv
33.5 373.246 33.773 373.219 34.07 373.219 cv
34.477 373.219 34.84 373.273 35.152 373.375 cv
35.465 373.484 35.723 373.633 35.934 373.82 cv
36.137 374.016 36.293 374.246 36.398 374.512 cv
36.5 374.781 36.551 375.074 36.555 375.398 cv
36.551 375.68 36.516 375.941 36.445 376.176 cv
36.371 376.418 36.262 376.629 36.121 376.812 cv
35.977 377 35.805 377.156 35.602 377.285 cv
35.395 377.418 35.156 377.512 34.887 377.559 cv
34.887 377.57 li
35.191 377.605 35.473 377.68 35.727 377.801 cv
35.98 377.922 36.199 378.074 36.383 378.258 cv
36.563 378.441 36.703 378.656 36.809 378.898 cv
36.91 379.145 36.961 379.406 36.965 379.684 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.324 381.473 mo
40.324 381.801 40.27 382.016 40.164 382.121 cv
40.055 382.227 39.859 382.277 39.578 382.281 cv
39.301 382.277 39.109 382.227 39.008 382.125 cv
38.898 382.02 38.848 381.809 38.852 381.492 cv
38.848 381.168 38.902 380.953 39.012 380.844 cv
39.117 380.738 39.313 380.684 39.598 380.684 cv
39.871 380.684 40.059 380.738 40.168 380.844 cv
40.27 380.949 40.324 381.16 40.324 381.473 cv
cp
f
47.984 377.762 mo
47.98 378.445 47.93 379.066 47.824 379.629 cv
47.715 380.191 47.535 380.676 47.289 381.078 cv
47.035 381.484 46.707 381.797 46.309 382.016 cv
45.902 382.238 45.41 382.348 44.824 382.348 cv
44.266 382.348 43.793 382.25 43.414 382.051 cv
43.031 381.855 42.727 381.562 42.492 381.176 cv
42.258 380.789 42.09 380.316 41.996 379.75 cv
41.895 379.187 41.848 378.539 41.848 377.805 cv
41.848 377.133 41.902 376.512 42.012 375.945 cv
42.121 375.383 42.297 374.898 42.547 374.492 cv
42.789 374.09 43.113 373.777 43.52 373.551 cv
43.918 373.332 44.414 373.219 45.004 373.219 cv
45.563 373.219 46.035 373.32 46.418 373.516 cv
46.801 373.719 47.105 374.012 47.34 374.395 cv
47.57 374.785 47.738 375.258 47.836 375.82 cv
47.934 376.383 47.98 377.031 47.984 377.762 cv
cp
46.777 377.844 mo
46.773 377.402 46.758 377.004 46.73 376.652 cv
46.695 376.301 46.648 375.992 46.59 375.723 cv
46.523 375.453 46.445 375.223 46.348 375.027 cv
46.25 374.836 46.133 374.676 45.996 374.547 cv
45.855 374.422 45.695 374.328 45.523 374.27 cv
45.344 374.215 45.148 374.187 44.934 374.184 cv
44.543 374.187 44.227 374.277 43.988 374.461 cv
43.742 374.645 43.551 374.898 43.414 375.215 cv
43.273 375.535 43.18 375.906 43.129 376.336 cv
43.078 376.766 43.055 377.23 43.055 377.723 cv
43.055 378.387 43.086 378.949 43.156 379.41 cv
43.223 379.879 43.332 380.258 43.484 380.547 cv
43.629 380.844 43.82 381.055 44.051 381.184 cv
44.281 381.32 44.563 381.387 44.895 381.383 cv
45.148 381.387 45.371 381.348 45.566 381.262 cv
45.758 381.184 45.926 381.062 46.066 380.906 cv
46.207 380.754 46.32 380.57 46.414 380.355 cv
46.5 380.141 46.574 379.902 46.633 379.641 cv
46.684 379.383 46.723 379.102 46.746 378.797 cv
46.766 378.492 46.773 378.176 46.777 377.844 cv
cp
f
30.68 318.801 mo
48.407 318.801 li
48.407 335.891 li
30.68 335.891 li
cp
0 0 0 0 cmyk
ef
37.41 329.656 mo
37.406 329.809 37.383 329.93 37.34 330.016 cv
37.293 330.105 37.23 330.148 37.148 330.145 cv
36.148 330.145 li
36.148 332.008 li
36.148 332.047 36.137 332.078 36.121 332.102 cv
36.098 332.129 36.066 332.148 36.023 332.168 cv
35.973 332.184 35.91 332.195 35.84 332.207 cv
35.762 332.215 35.668 332.219 35.551 332.223 cv
35.434 332.219 35.336 332.215 35.266 332.207 cv
35.188 332.195 35.129 332.184 35.086 332.168 cv
35.039 332.148 35.008 332.129 34.992 332.102 cv
34.973 332.078 34.965 332.047 34.969 332.008 cv
34.969 330.145 li
31.34 330.145 li
31.281 330.148 31.238 330.141 31.203 330.125 cv
31.168 330.113 31.133 330.086 31.105 330.047 cv
31.074 330.012 31.055 329.961 31.043 329.891 cv
31.031 329.824 31.027 329.734 31.027 329.621 cv
31.027 329.539 31.027 329.461 31.035 329.391 cv
31.035 329.32 31.047 329.258 31.063 329.203 cv
31.074 329.148 31.09 329.094 31.117 329.039 cv
31.137 328.984 31.164 328.93 31.199 328.867 cv
34.359 323.48 li
34.379 323.445 34.414 323.414 34.461 323.387 cv
34.504 323.359 34.559 323.336 34.633 323.316 cv
34.699 323.301 34.785 323.289 34.891 323.277 cv
34.992 323.273 35.113 323.27 35.254 323.266 cv
35.402 323.27 35.539 323.273 35.656 323.285 cv
35.77 323.297 35.859 323.312 35.934 323.328 cv
36 323.348 36.055 323.371 36.094 323.402 cv
36.129 323.434 36.148 323.469 36.148 323.508 cv
36.148 329.172 li
37.148 329.172 li
37.223 329.176 37.285 329.215 37.336 329.293 cv
37.383 329.375 37.406 329.496 37.41 329.656 cv
cp
34.969 324.305 mo
34.957 324.305 li
32.105 329.172 li
34.969 329.172 li
cp
.629114 .553033 .543389 .289647 cmyk
f
40.324 331.434 mo
40.324 331.762 40.27 331.977 40.164 332.082 cv
40.055 332.187 39.859 332.238 39.578 332.242 cv
39.301 332.238 39.109 332.187 39.008 332.086 cv
38.898 331.98 38.848 331.77 38.852 331.453 cv
38.848 331.129 38.902 330.914 39.012 330.805 cv
39.117 330.699 39.313 330.645 39.598 330.645 cv
39.871 330.645 40.059 330.699 40.168 330.805 cv
40.27 330.91 40.324 331.121 40.324 331.434 cv
cp
f
47.648 329.328 mo
47.648 329.805 47.566 330.227 47.406 330.598 cv
47.246 330.969 47.02 331.281 46.73 331.535 cv
46.434 331.789 46.086 331.984 45.684 332.113 cv
45.277 332.246 44.828 332.309 44.336 332.309 cv
44.059 332.309 43.797 332.289 43.555 332.25 cv
43.305 332.211 43.086 332.164 42.898 332.109 cv
42.703 332.055 42.547 332 42.422 331.941 cv
42.297 331.891 42.219 331.848 42.188 331.812 cv
42.152 331.781 42.129 331.75 42.117 331.723 cv
42.102 331.695 42.086 331.664 42.078 331.621 cv
42.063 331.586 42.055 331.535 42.055 331.473 cv
42.047 331.414 42.047 331.344 42.047 331.262 cv
42.047 331.187 42.051 331.117 42.059 331.055 cv
42.066 330.992 42.078 330.941 42.098 330.902 cv
42.113 330.863 42.133 330.836 42.16 330.816 cv
42.184 330.801 42.215 330.793 42.246 330.789 cv
42.293 330.793 42.363 330.82 42.457 330.875 cv
42.551 330.934 42.68 330.996 42.844 331.062 cv
43.008 331.129 43.207 331.191 43.449 331.25 cv
43.684 331.309 43.969 331.336 44.305 331.336 cv
44.605 331.336 44.887 331.301 45.145 331.227 cv
45.398 331.156 45.621 331.043 45.809 330.887 cv
45.992 330.734 46.137 330.539 46.242 330.301 cv
46.348 330.066 46.398 329.777 46.402 329.437 cv
46.398 329.156 46.355 328.906 46.266 328.687 cv
46.176 328.469 46.039 328.289 45.855 328.145 cv
45.668 328.004 45.434 327.898 45.152 327.824 cv
44.867 327.754 44.527 327.715 44.141 327.715 cv
43.855 327.715 43.617 327.73 43.418 327.758 cv
43.215 327.789 43.027 327.805 42.855 327.801 cv
42.727 327.805 42.633 327.773 42.582 327.711 cv
42.523 327.652 42.496 327.539 42.5 327.367 cv
42.5 323.754 li
42.496 323.605 42.531 323.496 42.605 323.418 cv
42.672 323.348 42.773 323.309 42.91 323.309 cv
46.84 323.309 li
46.875 323.309 46.91 323.32 46.945 323.34 cv
46.977 323.363 47.004 323.395 47.031 323.434 cv
47.051 323.477 47.066 323.527 47.082 323.59 cv
47.09 323.656 47.098 323.734 47.102 323.816 cv
47.098 323.984 47.074 324.109 47.035 324.199 cv
46.988 324.293 46.93 324.34 46.852 324.336 cv
43.68 324.336 li
43.68 326.824 li
43.832 326.805 43.988 326.793 44.152 326.785 cv
44.309 326.781 44.496 326.777 44.711 326.777 cv
45.195 326.777 45.621 326.84 45.988 326.961 cv
46.352 327.082 46.656 327.254 46.906 327.473 cv
47.148 327.699 47.336 327.965 47.461 328.277 cv
47.586 328.594 47.648 328.945 47.648 329.328 cv
cp
f
30.68 268.77 mo
48.407 268.77 li
48.407 285.86 li
30.68 285.86 li
cp
0 0 0 0 cmyk
ef
37.262 279.27 mo
37.262 279.66 37.199 280.039 37.082 280.398 cv
36.957 280.766 36.773 281.082 36.531 281.355 cv
36.281 281.633 35.969 281.855 35.594 282.02 cv
35.211 282.187 34.766 282.27 34.25 282.27 cv
33.879 282.27 33.551 282.227 33.27 282.133 cv
32.984 282.047 32.738 281.914 32.527 281.742 cv
32.316 281.574 32.141 281.367 32.004 281.121 cv
31.863 280.875 31.75 280.594 31.668 280.277 cv
31.582 279.965 31.523 279.621 31.488 279.242 cv
31.449 278.871 31.43 278.469 31.434 278.035 cv
31.43 277.656 31.449 277.273 31.492 276.883 cv
31.531 276.5 31.605 276.125 31.711 275.758 cv
31.816 275.398 31.961 275.059 32.141 274.742 cv
32.32 274.426 32.547 274.148 32.82 273.914 cv
33.094 273.68 33.418 273.492 33.797 273.352 cv
34.176 273.215 34.617 273.148 35.121 273.145 cv
35.289 273.148 35.461 273.156 35.633 273.176 cv
35.805 273.199 35.965 273.23 36.113 273.262 cv
36.262 273.301 36.383 273.336 36.484 273.375 cv
36.582 273.414 36.648 273.449 36.684 273.473 cv
36.711 273.5 36.734 273.527 36.754 273.555 cv
36.77 273.586 36.785 273.617 36.793 273.652 cv
36.801 273.687 36.805 273.727 36.813 273.77 cv
36.813 273.812 36.816 273.867 36.82 273.93 cv
36.816 274.016 36.816 274.086 36.816 274.141 cv
36.813 274.203 36.801 274.25 36.789 274.285 cv
36.77 274.324 36.75 274.352 36.727 274.367 cv
36.699 274.387 36.668 274.395 36.629 274.395 cv
36.578 274.395 36.508 274.379 36.422 274.348 cv
36.332 274.316 36.227 274.281 36.105 274.238 cv
35.98 274.203 35.832 274.168 35.656 274.133 cv
35.48 274.105 35.277 274.09 35.047 274.086 cv
34.617 274.09 34.25 274.176 33.945 274.348 cv
33.641 274.52 33.391 274.754 33.195 275.047 cv
33 275.34 32.855 275.68 32.766 276.062 cv
32.668 276.453 32.613 276.855 32.605 277.273 cv
32.723 277.207 32.859 277.141 33.008 277.07 cv
33.156 277.004 33.316 276.941 33.492 276.883 cv
33.668 276.832 33.855 276.785 34.051 276.75 cv
34.246 276.719 34.457 276.703 34.684 276.699 cv
35.16 276.703 35.563 276.77 35.895 276.895 cv
36.223 277.027 36.488 277.207 36.695 277.437 cv
36.895 277.668 37.039 277.937 37.129 278.25 cv
37.215 278.562 37.262 278.902 37.262 279.27 cv
cp
36.066 279.379 mo
36.066 279.117 36.039 278.875 35.988 278.656 cv
35.934 278.441 35.844 278.258 35.723 278.102 cv
35.598 277.953 35.434 277.836 35.23 277.754 cv
35.02 277.672 34.766 277.629 34.469 277.629 cv
34.297 277.629 34.129 277.645 33.961 277.676 cv
33.789 277.707 33.625 277.75 33.469 277.797 cv
33.309 277.852 33.16 277.914 33.02 277.984 cv
32.875 278.059 32.742 278.133 32.625 278.211 cv
32.621 278.805 32.66 279.301 32.738 279.695 cv
32.813 280.094 32.922 280.41 33.066 280.648 cv
33.211 280.891 33.391 281.062 33.605 281.164 cv
33.82 281.27 34.07 281.32 34.359 281.316 cv
34.648 281.32 34.902 281.266 35.117 281.152 cv
35.332 281.047 35.508 280.898 35.652 280.711 cv
35.793 280.527 35.898 280.32 35.965 280.09 cv
36.031 279.859 36.066 279.625 36.066 279.379 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.324 281.395 mo
40.324 281.723 40.27 281.937 40.164 282.043 cv
40.055 282.148 39.859 282.199 39.578 282.203 cv
39.301 282.199 39.109 282.148 39.008 282.047 cv
38.898 281.941 38.848 281.73 38.852 281.414 cv
38.848 281.09 38.902 280.875 39.012 280.766 cv
39.117 280.66 39.313 280.605 39.598 280.605 cv
39.871 280.605 40.059 280.66 40.168 280.766 cv
40.27 280.871 40.324 281.082 40.324 281.395 cv
cp
f
47.984 277.684 mo
47.98 278.367 47.93 278.988 47.824 279.551 cv
47.715 280.113 47.535 280.598 47.289 281 cv
47.035 281.406 46.707 281.719 46.309 281.937 cv
45.902 282.16 45.41 282.27 44.824 282.27 cv
44.266 282.27 43.793 282.172 43.414 281.973 cv
43.031 281.777 42.727 281.484 42.492 281.098 cv
42.258 280.711 42.09 280.238 41.996 279.672 cv
41.895 279.109 41.848 278.461 41.848 277.727 cv
41.848 277.055 41.902 276.434 42.012 275.867 cv
42.121 275.305 42.297 274.82 42.547 274.414 cv
42.789 274.012 43.113 273.699 43.52 273.473 cv
43.918 273.254 44.414 273.141 45.004 273.141 cv
45.563 273.141 46.035 273.242 46.418 273.437 cv
46.801 273.641 47.105 273.934 47.34 274.316 cv
47.57 274.707 47.738 275.18 47.836 275.742 cv
47.934 276.305 47.98 276.953 47.984 277.684 cv
cp
46.777 277.766 mo
46.773 277.324 46.758 276.926 46.73 276.574 cv
46.695 276.223 46.648 275.914 46.59 275.645 cv
46.523 275.375 46.445 275.145 46.348 274.949 cv
46.25 274.758 46.133 274.598 45.996 274.469 cv
45.855 274.344 45.695 274.25 45.523 274.191 cv
45.344 274.137 45.148 274.109 44.934 274.105 cv
44.543 274.109 44.227 274.199 43.988 274.383 cv
43.742 274.566 43.551 274.82 43.414 275.137 cv
43.273 275.457 43.18 275.828 43.129 276.258 cv
43.078 276.687 43.055 277.152 43.055 277.645 cv
43.055 278.309 43.086 278.871 43.156 279.332 cv
43.223 279.801 43.332 280.18 43.484 280.469 cv
43.629 280.766 43.82 280.977 44.051 281.105 cv
44.281 281.242 44.563 281.309 44.895 281.305 cv
45.148 281.309 45.371 281.27 45.566 281.184 cv
45.758 281.105 45.926 280.984 46.066 280.828 cv
46.207 280.676 46.32 280.492 46.414 280.277 cv
46.5 280.062 46.574 279.824 46.633 279.562 cv
46.684 279.305 46.723 279.023 46.746 278.719 cv
46.766 278.414 46.773 278.098 46.777 277.766 cv
cp
f
30.68 218.738 mo
48.407 218.738 li
48.407 235.828 li
30.68 235.828 li
cp
0 0 0 0 cmyk
ef
37.164 223.738 mo
37.16 223.824 37.156 223.898 37.152 223.961 cv
37.145 224.031 37.137 224.094 37.125 224.152 cv
37.113 224.219 37.098 224.277 37.078 224.332 cv
37.055 224.391 37.031 224.453 37.008 224.512 cv
33.813 231.875 li
33.785 231.934 33.758 231.977 33.727 232.008 cv
33.691 232.043 33.648 232.07 33.594 232.09 cv
33.539 232.109 33.469 232.121 33.391 232.133 cv
33.305 232.137 33.207 232.141 33.09 232.145 cv
32.934 232.141 32.813 232.133 32.727 232.121 cv
32.641 232.105 32.578 232.09 32.539 232.059 cv
32.5 232.031 32.48 231.992 32.488 231.949 cv
32.488 231.906 32.504 231.855 32.535 231.793 cv
35.895 224.266 li
31.637 224.266 li
31.551 224.27 31.484 224.223 31.441 224.129 cv
31.398 224.039 31.379 223.91 31.379 223.746 cv
31.379 223.66 31.383 223.586 31.395 223.52 cv
31.406 223.457 31.422 223.402 31.445 223.359 cv
31.465 223.316 31.492 223.285 31.527 223.262 cv
31.559 223.242 31.598 223.23 31.637 223.23 cv
36.809 223.23 li
36.867 223.23 36.922 223.238 36.973 223.254 cv
37.02 223.27 37.055 223.297 37.082 223.336 cv
37.105 223.375 37.125 223.43 37.141 223.492 cv
37.152 223.559 37.16 223.641 37.164 223.738 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.324 231.355 mo
40.324 231.684 40.27 231.898 40.164 232.004 cv
40.055 232.109 39.859 232.16 39.578 232.164 cv
39.301 232.16 39.109 232.109 39.008 232.008 cv
38.898 231.902 38.848 231.691 38.852 231.375 cv
38.848 231.051 38.902 230.836 39.012 230.727 cv
39.117 230.621 39.313 230.566 39.598 230.566 cv
39.871 230.566 40.059 230.621 40.168 230.727 cv
40.27 230.832 40.324 231.043 40.324 231.355 cv
cp
f
47.648 229.25 mo
47.648 229.727 47.566 230.148 47.406 230.52 cv
47.246 230.891 47.02 231.203 46.73 231.457 cv
46.434 231.711 46.086 231.906 45.684 232.035 cv
45.277 232.168 44.828 232.23 44.336 232.23 cv
44.059 232.23 43.797 232.211 43.555 232.172 cv
43.305 232.133 43.086 232.086 42.898 232.031 cv
42.703 231.977 42.547 231.922 42.422 231.863 cv
42.297 231.812 42.219 231.77 42.188 231.734 cv
42.152 231.703 42.129 231.672 42.117 231.645 cv
42.102 231.617 42.086 231.586 42.078 231.543 cv
42.063 231.508 42.055 231.457 42.055 231.395 cv
42.047 231.336 42.047 231.266 42.047 231.184 cv
42.047 231.109 42.051 231.039 42.059 230.977 cv
42.066 230.914 42.078 230.863 42.098 230.824 cv
42.113 230.785 42.133 230.758 42.16 230.738 cv
42.184 230.723 42.215 230.715 42.246 230.711 cv
42.293 230.715 42.363 230.742 42.457 230.797 cv
42.551 230.855 42.68 230.918 42.844 230.984 cv
43.008 231.051 43.207 231.113 43.449 231.172 cv
43.684 231.23 43.969 231.258 44.305 231.258 cv
44.605 231.258 44.887 231.223 45.145 231.148 cv
45.398 231.078 45.621 230.965 45.809 230.809 cv
45.992 230.656 46.137 230.461 46.242 230.223 cv
46.348 229.988 46.398 229.699 46.402 229.359 cv
46.398 229.078 46.355 228.828 46.266 228.609 cv
46.176 228.391 46.039 228.211 45.855 228.066 cv
45.668 227.926 45.434 227.82 45.152 227.746 cv
44.867 227.676 44.527 227.637 44.141 227.637 cv
43.855 227.637 43.617 227.652 43.418 227.68 cv
43.215 227.711 43.027 227.727 42.855 227.723 cv
42.727 227.727 42.633 227.695 42.582 227.633 cv
42.523 227.574 42.496 227.461 42.5 227.289 cv
42.5 223.676 li
42.496 223.527 42.531 223.418 42.605 223.34 cv
42.672 223.27 42.773 223.23 42.91 223.23 cv
46.84 223.23 li
46.875 223.23 46.91 223.242 46.945 223.262 cv
46.977 223.285 47.004 223.316 47.031 223.355 cv
47.051 223.398 47.066 223.449 47.082 223.512 cv
47.09 223.578 47.098 223.656 47.102 223.738 cv
47.098 223.906 47.074 224.031 47.035 224.121 cv
46.988 224.215 46.93 224.262 46.852 224.258 cv
43.68 224.258 li
43.68 226.746 li
43.832 226.727 43.988 226.715 44.152 226.707 cv
44.309 226.703 44.496 226.699 44.711 226.699 cv
45.195 226.699 45.621 226.762 45.988 226.883 cv
46.352 227.004 46.656 227.176 46.906 227.395 cv
47.148 227.621 47.336 227.887 47.461 228.199 cv
47.586 228.516 47.648 228.867 47.648 229.25 cv
cp
f
30.68 168.711 mo
48.407 168.711 li
48.407 185.801 li
30.68 185.801 li
cp
0 0 0 0 cmyk
ef
37.102 177.273 mo
37.098 177.66 37.074 178.047 37.031 178.437 cv
36.984 178.832 36.906 179.211 36.801 179.574 cv
36.688 179.937 36.543 180.277 36.359 180.594 cv
36.172 180.914 35.938 181.195 35.66 181.43 cv
35.375 181.672 35.039 181.855 34.656 181.988 cv
34.266 182.121 33.82 182.187 33.313 182.187 cv
33.113 182.187 32.922 182.172 32.738 182.148 cv
32.551 182.121 32.383 182.094 32.238 182.059 cv
32.086 182.023 31.961 181.984 31.863 181.941 cv
31.762 181.902 31.688 181.863 31.645 181.82 cv
31.598 181.781 31.566 181.727 31.547 181.652 cv
31.523 181.582 31.512 181.484 31.516 181.367 cv
31.512 181.266 31.516 181.187 31.523 181.129 cv
31.527 181.07 31.539 181.023 31.555 180.992 cv
31.57 180.961 31.59 180.941 31.613 180.926 cv
31.637 180.918 31.668 180.91 31.707 180.906 cv
31.754 180.91 31.824 180.926 31.918 180.957 cv
32.008 180.992 32.121 181.031 32.266 181.07 cv
32.402 181.113 32.566 181.152 32.754 181.184 cv
32.938 181.223 33.148 181.238 33.387 181.234 cv
33.828 181.238 34.207 181.152 34.527 180.98 cv
34.84 180.809 35.102 180.582 35.305 180.293 cv
35.508 180.008 35.656 179.672 35.758 179.289 cv
35.855 178.91 35.91 178.512 35.922 178.09 cv
35.676 178.234 35.387 178.359 35.051 178.465 cv
34.711 178.578 34.324 178.633 33.887 178.629 cv
33.395 178.633 32.98 178.566 32.645 178.43 cv
32.309 178.297 32.035 178.113 31.832 177.879 cv
31.625 177.648 31.48 177.371 31.395 177.047 cv
31.305 176.73 31.262 176.379 31.262 176 cv
31.262 175.609 31.316 175.238 31.434 174.879 cv
31.543 174.527 31.723 174.215 31.969 173.945 cv
32.207 173.676 32.516 173.461 32.895 173.301 cv
33.266 173.141 33.715 173.059 34.238 173.059 cv
34.605 173.059 34.93 173.105 35.219 173.199 cv
35.5 173.293 35.75 173.43 35.965 173.605 cv
36.172 173.781 36.352 173.992 36.5 174.242 cv
36.645 174.492 36.762 174.773 36.852 175.086 cv
36.938 175.402 37 175.746 37.043 176.113 cv
37.078 176.484 37.098 176.871 37.102 177.273 cv
cp
35.902 177.145 mo
35.902 176.562 35.863 176.07 35.785 175.668 cv
35.707 175.27 35.59 174.945 35.441 174.695 cv
35.289 174.449 35.105 174.27 34.887 174.16 cv
34.664 174.051 34.41 173.996 34.129 173.996 cv
33.824 173.996 33.57 174.051 33.363 174.16 cv
33.152 174.27 32.98 174.414 32.848 174.59 cv
32.711 174.773 32.609 174.977 32.547 175.203 cv
32.48 175.434 32.449 175.672 32.453 175.91 cv
32.449 176.184 32.48 176.43 32.539 176.648 cv
32.594 176.875 32.684 177.062 32.816 177.219 cv
32.941 177.375 33.109 177.496 33.316 177.582 cv
33.52 177.668 33.773 177.711 34.078 177.707 cv
34.418 177.711 34.75 177.66 35.074 177.555 cv
35.391 177.453 35.668 177.316 35.902 177.145 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.324 181.312 mo
40.324 181.641 40.27 181.855 40.164 181.961 cv
40.055 182.066 39.859 182.117 39.578 182.121 cv
39.301 182.117 39.109 182.066 39.008 181.965 cv
38.898 181.859 38.848 181.648 38.852 181.332 cv
38.848 181.008 38.902 180.793 39.012 180.684 cv
39.117 180.578 39.313 180.523 39.598 180.523 cv
39.871 180.523 40.059 180.578 40.168 180.684 cv
40.27 180.789 40.324 181 40.324 181.312 cv
cp
f
47.984 177.602 mo
47.98 178.285 47.93 178.906 47.824 179.469 cv
47.715 180.031 47.535 180.516 47.289 180.918 cv
47.035 181.324 46.707 181.637 46.309 181.855 cv
45.902 182.078 45.41 182.187 44.824 182.187 cv
44.266 182.187 43.793 182.09 43.414 181.891 cv
43.031 181.695 42.727 181.402 42.492 181.016 cv
42.258 180.629 42.09 180.156 41.996 179.59 cv
41.895 179.027 41.848 178.379 41.848 177.645 cv
41.848 176.973 41.902 176.352 42.012 175.785 cv
42.121 175.223 42.297 174.738 42.547 174.332 cv
42.789 173.93 43.113 173.617 43.52 173.391 cv
43.918 173.172 44.414 173.059 45.004 173.059 cv
45.563 173.059 46.035 173.16 46.418 173.355 cv
46.801 173.559 47.105 173.852 47.34 174.234 cv
47.57 174.625 47.738 175.098 47.836 175.66 cv
47.934 176.223 47.98 176.871 47.984 177.602 cv
cp
46.777 177.684 mo
46.773 177.242 46.758 176.844 46.73 176.492 cv
46.695 176.141 46.648 175.832 46.59 175.562 cv
46.523 175.293 46.445 175.062 46.348 174.867 cv
46.25 174.676 46.133 174.516 45.996 174.387 cv
45.855 174.262 45.695 174.168 45.523 174.109 cv
45.344 174.055 45.148 174.027 44.934 174.023 cv
44.543 174.027 44.227 174.117 43.988 174.301 cv
43.742 174.484 43.551 174.738 43.414 175.055 cv
43.273 175.375 43.18 175.746 43.129 176.176 cv
43.078 176.605 43.055 177.07 43.055 177.562 cv
43.055 178.227 43.086 178.789 43.156 179.25 cv
43.223 179.719 43.332 180.098 43.484 180.387 cv
43.629 180.684 43.82 180.895 44.051 181.023 cv
44.281 181.16 44.563 181.227 44.895 181.223 cv
45.148 181.227 45.371 181.187 45.566 181.102 cv
45.758 181.023 45.926 180.902 46.066 180.746 cv
46.207 180.594 46.32 180.41 46.414 180.195 cv
46.5 179.98 46.574 179.742 46.633 179.48 cv
46.684 179.223 46.723 178.941 46.746 178.637 cv
46.766 178.332 46.773 178.016 46.777 177.684 cv
cp
f
23.578 118.68 mo
48.398 118.68 li
48.398 135.77 li
23.578 135.77 li
cp
0 0 0 0 cmyk
ef
29.945 131.555 mo
29.941 131.645 29.934 131.715 29.922 131.773 cv
29.906 131.836 29.887 131.887 29.867 131.918 cv
29.844 131.957 29.82 131.98 29.789 131.996 cv
29.758 132.012 29.727 132.02 29.699 132.02 cv
25.063 132.02 li
25.027 132.02 25 132.012 24.973 131.996 cv
24.945 131.98 24.918 131.957 24.895 131.918 cv
24.867 131.887 24.848 131.836 24.836 131.773 cv
24.82 131.715 24.813 131.645 24.816 131.555 cv
24.813 131.477 24.82 131.402 24.836 131.34 cv
24.848 131.281 24.863 131.234 24.887 131.195 cv
24.902 131.16 24.93 131.129 24.961 131.105 cv
24.992 131.086 25.023 131.078 25.063 131.074 cv
26.914 131.074 li
26.914 124.328 li
25.199 125.348 li
25.109 125.398 25.039 125.426 24.992 125.434 cv
24.938 125.441 24.895 125.434 24.863 125.402 cv
24.828 125.375 24.809 125.324 24.797 125.254 cv
24.785 125.187 24.777 125.102 24.781 124.992 cv
24.777 124.918 24.781 124.852 24.793 124.793 cv
24.797 124.742 24.809 124.695 24.824 124.656 cv
24.836 124.621 24.855 124.59 24.879 124.562 cv
24.902 124.535 24.934 124.508 24.98 124.48 cv
27.023 123.168 li
27.039 123.156 27.059 123.145 27.09 123.137 cv
27.113 123.129 27.148 123.121 27.195 123.109 cv
27.234 123.102 27.285 123.094 27.34 123.09 cv
27.395 123.09 27.461 123.09 27.547 123.086 cv
27.652 123.09 27.746 123.094 27.82 123.102 cv
27.891 123.109 27.945 123.125 27.992 123.141 cv
28.031 123.16 28.059 123.18 28.074 123.203 cv
28.082 123.23 28.09 123.254 28.094 123.277 cv
28.094 131.074 li
29.699 131.074 li
29.734 131.078 29.77 131.086 29.801 131.105 cv
29.832 131.129 29.855 131.16 29.879 131.195 cv
29.895 131.234 29.91 131.281 29.926 131.34 cv
29.934 131.402 29.941 131.477 29.945 131.555 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.336 127.562 mo
37.332 128.246 37.281 128.867 37.176 129.43 cv
37.066 129.992 36.887 130.477 36.641 130.879 cv
36.387 131.285 36.059 131.598 35.66 131.816 cv
35.254 132.039 34.762 132.148 34.176 132.148 cv
33.617 132.148 33.145 132.051 32.766 131.852 cv
32.383 131.656 32.078 131.363 31.844 130.977 cv
31.609 130.59 31.441 130.117 31.348 129.551 cv
31.246 128.988 31.199 128.34 31.199 127.605 cv
31.199 126.934 31.254 126.312 31.363 125.746 cv
31.473 125.184 31.648 124.699 31.898 124.293 cv
32.141 123.891 32.465 123.578 32.871 123.352 cv
33.27 123.133 33.766 123.02 34.355 123.02 cv
34.914 123.02 35.387 123.121 35.77 123.316 cv
36.152 123.52 36.457 123.812 36.691 124.195 cv
36.922 124.586 37.09 125.059 37.188 125.621 cv
37.285 126.184 37.332 126.832 37.336 127.562 cv
cp
36.129 127.645 mo
36.125 127.203 36.109 126.805 36.082 126.453 cv
36.047 126.102 36 125.793 35.941 125.523 cv
35.875 125.254 35.797 125.023 35.699 124.828 cv
35.602 124.637 35.484 124.477 35.348 124.348 cv
35.207 124.223 35.047 124.129 34.875 124.07 cv
34.695 124.016 34.5 123.988 34.285 123.984 cv
33.895 123.988 33.578 124.078 33.34 124.262 cv
33.094 124.445 32.902 124.699 32.766 125.016 cv
32.625 125.336 32.531 125.707 32.48 126.137 cv
32.43 126.566 32.406 127.031 32.406 127.523 cv
32.406 128.187 32.438 128.75 32.508 129.211 cv
32.574 129.68 32.684 130.059 32.836 130.348 cv
32.98 130.645 33.172 130.855 33.402 130.984 cv
33.633 131.121 33.914 131.187 34.246 131.184 cv
34.5 131.187 34.723 131.148 34.918 131.062 cv
35.109 130.984 35.277 130.863 35.418 130.707 cv
35.559 130.555 35.672 130.371 35.766 130.156 cv
35.852 129.941 35.926 129.703 35.984 129.441 cv
36.035 129.184 36.074 128.902 36.098 128.598 cv
36.117 128.293 36.125 127.977 36.129 127.645 cv
cp
f
40.266 131.273 mo
40.266 131.602 40.211 131.816 40.105 131.922 cv
39.996 132.027 39.801 132.078 39.52 132.082 cv
39.242 132.078 39.051 132.027 38.949 131.926 cv
38.84 131.82 38.789 131.609 38.793 131.293 cv
38.789 130.969 38.844 130.754 38.953 130.645 cv
39.059 130.539 39.254 130.484 39.539 130.484 cv
39.813 130.484 40 130.539 40.109 130.645 cv
40.211 130.75 40.266 130.961 40.266 131.273 cv
cp
f
47.629 129.168 mo
47.629 129.645 47.547 130.066 47.387 130.437 cv
47.227 130.809 47 131.121 46.711 131.375 cv
46.414 131.629 46.066 131.824 45.664 131.953 cv
45.258 132.086 44.809 132.148 44.316 132.148 cv
44.039 132.148 43.777 132.129 43.535 132.09 cv
43.285 132.051 43.066 132.004 42.879 131.949 cv
42.684 131.895 42.527 131.84 42.402 131.781 cv
42.277 131.73 42.199 131.687 42.168 131.652 cv
42.133 131.621 42.109 131.59 42.098 131.562 cv
42.082 131.535 42.066 131.504 42.059 131.461 cv
42.043 131.426 42.035 131.375 42.035 131.312 cv
42.027 131.254 42.027 131.184 42.027 131.102 cv
42.027 131.027 42.031 130.957 42.039 130.895 cv
42.047 130.832 42.059 130.781 42.078 130.742 cv
42.094 130.703 42.113 130.676 42.141 130.656 cv
42.164 130.641 42.195 130.633 42.227 130.629 cv
42.273 130.633 42.344 130.66 42.438 130.715 cv
42.531 130.773 42.66 130.836 42.824 130.902 cv
42.988 130.969 43.188 131.031 43.43 131.09 cv
43.664 131.148 43.949 131.176 44.285 131.176 cv
44.586 131.176 44.867 131.141 45.125 131.066 cv
45.379 130.996 45.602 130.883 45.789 130.727 cv
45.973 130.574 46.117 130.379 46.223 130.141 cv
46.328 129.906 46.379 129.617 46.383 129.277 cv
46.379 128.996 46.336 128.746 46.246 128.527 cv
46.156 128.309 46.02 128.129 45.836 127.984 cv
45.648 127.844 45.414 127.738 45.133 127.664 cv
44.848 127.594 44.508 127.555 44.121 127.555 cv
43.836 127.555 43.598 127.57 43.398 127.598 cv
43.195 127.629 43.008 127.645 42.836 127.641 cv
42.707 127.645 42.613 127.613 42.563 127.551 cv
42.504 127.492 42.477 127.379 42.48 127.207 cv
42.48 123.594 li
42.477 123.445 42.512 123.336 42.586 123.258 cv
42.652 123.187 42.754 123.148 42.891 123.148 cv
46.82 123.148 li
46.855 123.148 46.891 123.16 46.926 123.18 cv
46.957 123.203 46.984 123.234 47.012 123.273 cv
47.031 123.316 47.047 123.367 47.063 123.43 cv
47.07 123.496 47.078 123.574 47.082 123.656 cv
47.078 123.824 47.055 123.949 47.016 124.039 cv
46.969 124.133 46.91 124.18 46.832 124.176 cv
43.66 124.176 li
43.66 126.664 li
43.813 126.645 43.969 126.633 44.133 126.625 cv
44.289 126.621 44.477 126.617 44.691 126.617 cv
45.176 126.617 45.602 126.68 45.969 126.801 cv
46.332 126.922 46.637 127.094 46.887 127.312 cv
47.129 127.539 47.316 127.805 47.441 128.117 cv
47.566 128.434 47.629 128.785 47.629 129.168 cv
cp
f
23.578 68.648 mo
48.398 68.648 li
48.398 85.738 li
23.578 85.738 li
cp
0 0 0 0 cmyk
ef
29.945 81.516 mo
29.941 81.605 29.934 81.676 29.922 81.734 cv
29.906 81.797 29.887 81.848 29.867 81.879 cv
29.844 81.918 29.82 81.941 29.789 81.957 cv
29.758 81.973 29.727 81.98 29.699 81.98 cv
25.063 81.98 li
25.027 81.98 25 81.973 24.973 81.957 cv
24.945 81.941 24.918 81.918 24.895 81.879 cv
24.867 81.848 24.848 81.797 24.836 81.734 cv
24.82 81.676 24.813 81.605 24.816 81.516 cv
24.813 81.437 24.82 81.363 24.836 81.301 cv
24.848 81.242 24.863 81.195 24.887 81.156 cv
24.902 81.121 24.93 81.09 24.961 81.066 cv
24.992 81.047 25.023 81.039 25.063 81.035 cv
26.914 81.035 li
26.914 74.289 li
25.199 75.309 li
25.109 75.359 25.039 75.387 24.992 75.395 cv
24.938 75.402 24.895 75.395 24.863 75.363 cv
24.828 75.336 24.809 75.285 24.797 75.215 cv
24.785 75.148 24.777 75.062 24.781 74.953 cv
24.777 74.879 24.781 74.812 24.793 74.754 cv
24.797 74.703 24.809 74.656 24.824 74.617 cv
24.836 74.582 24.855 74.551 24.879 74.523 cv
24.902 74.496 24.934 74.469 24.98 74.441 cv
27.023 73.129 li
27.039 73.117 27.059 73.105 27.09 73.098 cv
27.113 73.09 27.148 73.082 27.195 73.07 cv
27.234 73.062 27.285 73.055 27.34 73.051 cv
27.395 73.051 27.461 73.051 27.547 73.047 cv
27.652 73.051 27.746 73.055 27.82 73.062 cv
27.891 73.07 27.945 73.086 27.992 73.102 cv
28.031 73.121 28.059 73.141 28.074 73.164 cv
28.082 73.191 28.09 73.215 28.094 73.238 cv
28.094 81.035 li
29.699 81.035 li
29.734 81.039 29.77 81.047 29.801 81.066 cv
29.832 81.09 29.855 81.121 29.879 81.156 cv
29.895 81.195 29.91 81.242 29.926 81.301 cv
29.934 81.363 29.941 81.437 29.945 81.516 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.043 81.473 mo
37.039 81.559 37.035 81.633 37.023 81.695 cv
37.012 81.762 36.996 81.816 36.977 81.855 cv
36.953 81.902 36.926 81.934 36.895 81.949 cv
36.859 81.973 36.82 81.98 36.781 81.98 cv
31.879 81.98 li
31.816 81.98 31.758 81.973 31.711 81.957 cv
31.66 81.941 31.621 81.918 31.586 81.879 cv
31.551 81.848 31.523 81.793 31.512 81.723 cv
31.492 81.652 31.484 81.566 31.488 81.465 cv
31.484 81.375 31.488 81.297 31.496 81.227 cv
31.5 81.16 31.516 81.102 31.543 81.047 cv
31.566 80.996 31.598 80.941 31.633 80.887 cv
31.668 80.836 31.711 80.781 31.77 80.719 cv
33.543 78.895 li
33.953 78.477 34.281 78.102 34.531 77.766 cv
34.777 77.437 34.969 77.133 35.102 76.855 cv
35.234 76.582 35.32 76.332 35.367 76.105 cv
35.406 75.883 35.43 75.672 35.43 75.477 cv
35.43 75.281 35.395 75.098 35.328 74.918 cv
35.262 74.746 35.168 74.59 35.043 74.453 cv
34.918 74.324 34.762 74.219 34.574 74.137 cv
34.387 74.062 34.168 74.023 33.922 74.02 cv
33.633 74.023 33.375 74.062 33.148 74.137 cv
32.918 74.219 32.719 74.305 32.547 74.391 cv
32.375 74.484 32.23 74.566 32.113 74.645 cv
31.996 74.723 31.91 74.762 31.859 74.762 cv
31.824 74.762 31.793 74.754 31.77 74.734 cv
31.738 74.719 31.719 74.687 31.703 74.645 cv
31.688 74.605 31.672 74.551 31.664 74.48 cv
31.652 74.414 31.648 74.332 31.652 74.234 cv
31.648 74.168 31.652 74.109 31.66 74.059 cv
31.664 74.008 31.672 73.965 31.684 73.926 cv
31.691 73.891 31.707 73.855 31.727 73.824 cv
31.746 73.793 31.781 73.754 31.84 73.703 cv
31.891 73.656 31.984 73.59 32.121 73.508 cv
32.254 73.426 32.426 73.348 32.629 73.266 cv
32.832 73.187 33.055 73.117 33.301 73.062 cv
33.543 73.008 33.801 72.98 34.074 72.98 cv
34.5 72.98 34.875 73.043 35.199 73.164 cv
35.52 73.285 35.785 73.449 36 73.66 cv
36.211 73.871 36.371 74.117 36.477 74.391 cv
36.582 74.672 36.637 74.969 36.637 75.281 cv
36.637 75.57 36.609 75.852 36.559 76.129 cv
36.508 76.414 36.402 76.719 36.242 77.043 cv
36.078 77.371 35.844 77.734 35.539 78.133 cv
35.23 78.535 34.824 78.996 34.32 79.512 cv
32.914 80.98 li
36.773 80.98 li
36.805 80.984 36.84 80.996 36.879 81.012 cv
36.91 81.035 36.941 81.066 36.969 81.105 cv
36.992 81.148 37.012 81.199 37.023 81.258 cv
37.035 81.324 37.039 81.395 37.043 81.473 cv
cp
f
40.266 81.234 mo
40.266 81.562 40.211 81.777 40.105 81.883 cv
39.996 81.988 39.801 82.039 39.52 82.043 cv
39.242 82.039 39.051 81.988 38.949 81.887 cv
38.84 81.781 38.789 81.57 38.793 81.254 cv
38.789 80.93 38.844 80.715 38.953 80.605 cv
39.059 80.5 39.254 80.445 39.539 80.445 cv
39.813 80.445 40 80.5 40.109 80.605 cv
40.211 80.711 40.266 80.922 40.266 81.234 cv
cp
f
47.965 77.523 mo
47.961 78.207 47.91 78.828 47.805 79.391 cv
47.695 79.953 47.516 80.437 47.27 80.84 cv
47.016 81.246 46.688 81.559 46.289 81.777 cv
45.883 82 45.391 82.109 44.805 82.109 cv
44.246 82.109 43.773 82.012 43.395 81.812 cv
43.012 81.617 42.707 81.324 42.473 80.937 cv
42.238 80.551 42.07 80.078 41.977 79.512 cv
41.875 78.949 41.828 78.301 41.828 77.566 cv
41.828 76.895 41.883 76.273 41.992 75.707 cv
42.102 75.145 42.277 74.66 42.527 74.254 cv
42.77 73.852 43.094 73.539 43.5 73.312 cv
43.898 73.094 44.395 72.98 44.984 72.98 cv
45.543 72.98 46.016 73.082 46.398 73.277 cv
46.781 73.48 47.086 73.773 47.32 74.156 cv
47.551 74.547 47.719 75.02 47.816 75.582 cv
47.914 76.145 47.961 76.793 47.965 77.523 cv
cp
46.758 77.605 mo
46.754 77.164 46.738 76.766 46.711 76.414 cv
46.676 76.062 46.629 75.754 46.57 75.484 cv
46.504 75.215 46.426 74.984 46.328 74.789 cv
46.23 74.598 46.113 74.437 45.977 74.309 cv
45.836 74.184 45.676 74.09 45.504 74.031 cv
45.324 73.977 45.129 73.949 44.914 73.945 cv
44.523 73.949 44.207 74.039 43.969 74.223 cv
43.723 74.406 43.531 74.66 43.395 74.977 cv
43.254 75.297 43.16 75.668 43.109 76.098 cv
43.059 76.527 43.035 76.992 43.035 77.484 cv
43.035 78.148 43.066 78.711 43.137 79.172 cv
43.203 79.641 43.313 80.02 43.465 80.309 cv
43.609 80.605 43.801 80.816 44.031 80.945 cv
44.262 81.082 44.543 81.148 44.875 81.145 cv
45.129 81.148 45.352 81.109 45.547 81.023 cv
45.738 80.945 45.906 80.824 46.047 80.668 cv
46.188 80.516 46.301 80.332 46.395 80.117 cv
46.48 79.902 46.555 79.664 46.613 79.402 cv
46.664 79.145 46.703 78.863 46.727 78.559 cv
46.746 78.254 46.754 77.937 46.758 77.605 cv
cp
f
23.578 18.621 mo
48.398 18.621 li
48.398 35.711 li
23.578 35.711 li
cp
0 0 0 0 cmyk
ef
29.945 31.477 mo
29.941 31.566 29.934 31.637 29.922 31.695 cv
29.906 31.758 29.887 31.809 29.867 31.84 cv
29.844 31.879 29.82 31.902 29.789 31.918 cv
29.758 31.934 29.727 31.941 29.699 31.941 cv
25.063 31.941 li
25.027 31.941 25 31.934 24.973 31.918 cv
24.945 31.902 24.918 31.879 24.895 31.84 cv
24.867 31.809 24.848 31.758 24.836 31.695 cv
24.82 31.637 24.813 31.566 24.816 31.477 cv
24.813 31.398 24.82 31.324 24.836 31.262 cv
24.848 31.203 24.863 31.156 24.887 31.117 cv
24.902 31.082 24.93 31.051 24.961 31.027 cv
24.992 31.008 25.023 31 25.063 30.996 cv
26.914 30.996 li
26.914 24.25 li
25.199 25.27 li
25.109 25.32 25.039 25.348 24.992 25.355 cv
24.938 25.363 24.895 25.355 24.863 25.324 cv
24.828 25.297 24.809 25.246 24.797 25.176 cv
24.785 25.109 24.777 25.023 24.781 24.914 cv
24.777 24.84 24.781 24.773 24.793 24.715 cv
24.797 24.664 24.809 24.617 24.824 24.578 cv
24.836 24.543 24.855 24.512 24.879 24.484 cv
24.902 24.457 24.934 24.43 24.98 24.402 cv
27.023 23.09 li
27.039 23.078 27.059 23.066 27.09 23.059 cv
27.113 23.051 27.148 23.043 27.195 23.031 cv
27.234 23.023 27.285 23.016 27.34 23.012 cv
27.395 23.012 27.461 23.012 27.547 23.008 cv
27.652 23.012 27.746 23.016 27.82 23.023 cv
27.891 23.031 27.945 23.047 27.992 23.062 cv
28.031 23.082 28.059 23.102 28.074 23.125 cv
28.082 23.152 28.09 23.176 28.094 23.199 cv
28.094 30.996 li
29.699 30.996 li
29.734 31 29.77 31.008 29.801 31.027 cv
29.832 31.051 29.855 31.082 29.879 31.117 cv
29.895 31.156 29.91 31.203 29.926 31.262 cv
29.934 31.324 29.941 31.398 29.945 31.477 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
36.973 29.406 mo
36.969 29.816 36.898 30.184 36.758 30.508 cv
36.613 30.836 36.41 31.117 36.148 31.348 cv
35.883 31.582 35.555 31.758 35.168 31.883 cv
34.777 32.008 34.34 32.07 33.855 32.07 cv
33.551 32.07 33.273 32.043 33.02 31.996 cv
32.758 31.949 32.527 31.898 32.332 31.828 cv
32.129 31.766 31.965 31.695 31.832 31.625 cv
31.699 31.555 31.613 31.504 31.582 31.469 cv
31.543 31.441 31.52 31.41 31.504 31.375 cv
31.484 31.344 31.465 31.305 31.453 31.258 cv
31.438 31.215 31.43 31.16 31.422 31.09 cv
31.414 31.027 31.41 30.945 31.414 30.844 cv
31.41 30.684 31.426 30.57 31.461 30.504 cv
31.492 30.441 31.539 30.406 31.602 30.406 cv
31.645 30.406 31.727 30.445 31.852 30.516 cv
31.973 30.594 32.133 30.672 32.328 30.754 cv
32.52 30.84 32.746 30.918 33.012 30.988 cv
33.27 31.062 33.563 31.098 33.883 31.098 cv
34.191 31.098 34.461 31.059 34.699 30.98 cv
34.93 30.902 35.129 30.793 35.289 30.652 cv
35.445 30.512 35.563 30.344 35.645 30.148 cv
35.723 29.953 35.762 29.742 35.766 29.516 cv
35.762 29.266 35.711 29.039 35.613 28.836 cv
35.508 28.637 35.359 28.465 35.168 28.316 cv
34.969 28.172 34.73 28.059 34.445 27.98 cv
34.16 27.902 33.836 27.863 33.473 27.863 cv
32.602 27.863 li
32.559 27.863 32.523 27.855 32.488 27.84 cv
32.453 27.824 32.422 27.797 32.398 27.758 cv
32.371 27.723 32.352 27.676 32.336 27.617 cv
32.32 27.559 32.313 27.48 32.313 27.383 cv
32.313 27.297 32.316 27.227 32.332 27.168 cv
32.34 27.113 32.359 27.066 32.391 27.031 cv
32.414 26.996 32.445 26.973 32.477 26.953 cv
32.508 26.941 32.543 26.934 32.586 26.93 cv
33.359 26.93 li
33.66 26.934 33.93 26.895 34.172 26.812 cv
34.406 26.738 34.609 26.625 34.781 26.477 cv
34.945 26.332 35.074 26.156 35.164 25.953 cv
35.254 25.75 35.301 25.523 35.301 25.27 cv
35.301 25.09 35.27 24.914 35.211 24.746 cv
35.148 24.582 35.059 24.437 34.941 24.312 cv
34.82 24.187 34.668 24.09 34.488 24.02 cv
34.301 23.949 34.09 23.914 33.848 23.914 cv
33.582 23.914 33.336 23.957 33.117 24.035 cv
32.891 24.117 32.695 24.203 32.523 24.293 cv
32.348 24.387 32.203 24.473 32.09 24.551 cv
31.977 24.633 31.895 24.672 31.852 24.668 cv
31.816 24.672 31.789 24.664 31.766 24.652 cv
31.738 24.641 31.719 24.617 31.703 24.582 cv
31.688 24.551 31.676 24.504 31.668 24.437 cv
31.66 24.379 31.656 24.297 31.66 24.195 cv
31.656 24.129 31.656 24.07 31.664 24.016 cv
31.664 23.965 31.676 23.918 31.691 23.875 cv
31.707 23.84 31.723 23.805 31.742 23.77 cv
31.758 23.742 31.789 23.703 31.832 23.656 cv
31.875 23.613 31.961 23.551 32.098 23.469 cv
32.227 23.387 32.391 23.309 32.586 23.227 cv
32.777 23.148 33 23.078 33.258 23.023 cv
33.508 22.969 33.781 22.941 34.078 22.941 cv
34.484 22.941 34.848 22.996 35.16 23.098 cv
35.473 23.207 35.73 23.355 35.941 23.543 cv
36.145 23.738 36.301 23.969 36.406 24.234 cv
36.508 24.504 36.559 24.797 36.563 25.121 cv
36.559 25.402 36.523 25.664 36.453 25.898 cv
36.379 26.141 36.27 26.352 36.129 26.535 cv
35.984 26.723 35.813 26.879 35.609 27.008 cv
35.402 27.141 35.164 27.234 34.895 27.281 cv
34.895 27.293 li
35.199 27.328 35.48 27.402 35.734 27.523 cv
35.988 27.645 36.207 27.797 36.391 27.98 cv
36.57 28.164 36.711 28.379 36.816 28.621 cv
36.918 28.867 36.969 29.129 36.973 29.406 cv
cp
f
40.266 31.195 mo
40.266 31.523 40.211 31.738 40.105 31.844 cv
39.996 31.949 39.801 32 39.52 32.004 cv
39.242 32 39.051 31.949 38.949 31.848 cv
38.84 31.742 38.789 31.531 38.793 31.215 cv
38.789 30.891 38.844 30.676 38.953 30.566 cv
39.059 30.461 39.254 30.406 39.539 30.406 cv
39.813 30.406 40 30.461 40.109 30.566 cv
40.211 30.672 40.266 30.883 40.266 31.195 cv
cp
f
47.629 29.09 mo
47.629 29.566 47.547 29.988 47.387 30.359 cv
47.227 30.73 47 31.043 46.711 31.297 cv
46.414 31.551 46.066 31.746 45.664 31.875 cv
45.258 32.008 44.809 32.07 44.316 32.07 cv
44.039 32.07 43.777 32.051 43.535 32.012 cv
43.285 31.973 43.066 31.926 42.879 31.871 cv
42.684 31.816 42.527 31.762 42.402 31.703 cv
42.277 31.652 42.199 31.609 42.168 31.574 cv
42.133 31.543 42.109 31.512 42.098 31.484 cv
42.082 31.457 42.066 31.426 42.059 31.383 cv
42.043 31.348 42.035 31.297 42.035 31.234 cv
42.027 31.176 42.027 31.105 42.027 31.023 cv
42.027 30.949 42.031 30.879 42.039 30.816 cv
42.047 30.754 42.059 30.703 42.078 30.664 cv
42.094 30.625 42.113 30.598 42.141 30.578 cv
42.164 30.562 42.195 30.555 42.227 30.551 cv
42.273 30.555 42.344 30.582 42.438 30.637 cv
42.531 30.695 42.66 30.758 42.824 30.824 cv
42.988 30.891 43.188 30.953 43.43 31.012 cv
43.664 31.07 43.949 31.098 44.285 31.098 cv
44.586 31.098 44.867 31.062 45.125 30.988 cv
45.379 30.918 45.602 30.805 45.789 30.648 cv
45.973 30.496 46.117 30.301 46.223 30.062 cv
46.328 29.828 46.379 29.539 46.383 29.199 cv
46.379 28.918 46.336 28.668 46.246 28.449 cv
46.156 28.23 46.02 28.051 45.836 27.906 cv
45.648 27.766 45.414 27.66 45.133 27.586 cv
44.848 27.516 44.508 27.477 44.121 27.477 cv
43.836 27.477 43.598 27.492 43.398 27.52 cv
43.195 27.551 43.008 27.566 42.836 27.562 cv
42.707 27.566 42.613 27.535 42.563 27.473 cv
42.504 27.414 42.477 27.301 42.48 27.129 cv
42.48 23.516 li
42.477 23.367 42.512 23.258 42.586 23.18 cv
42.652 23.109 42.754 23.07 42.891 23.07 cv
46.82 23.07 li
46.855 23.07 46.891 23.082 46.926 23.102 cv
46.957 23.125 46.984 23.156 47.012 23.195 cv
47.031 23.238 47.047 23.289 47.063 23.352 cv
47.07 23.418 47.078 23.496 47.082 23.578 cv
47.078 23.746 47.055 23.871 47.016 23.961 cv
46.969 24.055 46.91 24.102 46.832 24.098 cv
43.66 24.098 li
43.66 26.586 li
43.813 26.566 43.969 26.555 44.133 26.547 cv
44.289 26.543 44.477 26.539 44.691 26.539 cv
45.176 26.539 45.602 26.602 45.969 26.723 cv
46.332 26.844 46.637 27.016 46.887 27.234 cv
47.129 27.461 47.316 27.727 47.441 28.039 cv
47.566 28.355 47.629 28.707 47.629 29.09 cv
cp
f
64.215 500.055 mo
64.211 500.145 64.203 500.215 64.191 500.273 cv
64.176 500.336 64.156 500.387 64.137 500.418 cv
64.113 500.457 64.09 500.48 64.059 500.496 cv
64.027 500.512 63.996 500.52 63.969 500.52 cv
59.332 500.52 li
59.297 500.52 59.27 500.512 59.242 500.496 cv
59.215 500.48 59.188 500.457 59.164 500.418 cv
59.137 500.387 59.117 500.336 59.105 500.273 cv
59.09 500.215 59.082 500.145 59.086 500.055 cv
59.082 499.977 59.09 499.902 59.105 499.84 cv
59.117 499.781 59.133 499.734 59.156 499.695 cv
59.172 499.66 59.199 499.629 59.23 499.605 cv
59.262 499.586 59.293 499.578 59.332 499.574 cv
61.184 499.574 li
61.184 492.828 li
59.469 493.848 li
59.379 493.898 59.309 493.926 59.262 493.934 cv
59.207 493.941 59.164 493.934 59.133 493.902 cv
59.098 493.875 59.078 493.824 59.066 493.754 cv
59.055 493.687 59.047 493.602 59.051 493.492 cv
59.047 493.418 59.051 493.352 59.063 493.293 cv
59.066 493.242 59.078 493.195 59.094 493.156 cv
59.105 493.121 59.125 493.09 59.148 493.062 cv
59.172 493.035 59.203 493.008 59.25 492.98 cv
61.293 491.668 li
61.309 491.656 61.328 491.645 61.359 491.637 cv
61.383 491.629 61.418 491.621 61.465 491.609 cv
61.504 491.602 61.555 491.594 61.609 491.59 cv
61.664 491.59 61.73 491.59 61.816 491.586 cv
61.922 491.59 62.016 491.594 62.09 491.602 cv
62.16 491.609 62.215 491.625 62.262 491.641 cv
62.301 491.66 62.328 491.68 62.344 491.703 cv
62.352 491.73 62.359 491.754 62.363 491.777 cv
62.363 499.574 li
63.969 499.574 li
64.004 499.578 64.039 499.586 64.07 499.605 cv
64.102 499.629 64.125 499.66 64.148 499.695 cv
64.164 499.734 64.18 499.781 64.195 499.84 cv
64.203 499.902 64.211 499.977 64.215 500.055 cv
cp
f
133.246 500.012 mo
133.242 500.098 133.238 500.172 133.227 500.234 cv
133.215 500.301 133.199 500.355 133.18 500.395 cv
133.156 500.441 133.129 500.473 133.098 500.488 cv
133.063 500.512 133.023 500.52 132.984 500.52 cv
128.082 500.52 li
128.02 500.52 127.961 500.512 127.914 500.496 cv
127.863 500.48 127.824 500.457 127.789 500.418 cv
127.754 500.387 127.727 500.332 127.715 500.262 cv
127.695 500.191 127.688 500.105 127.691 500.004 cv
127.688 499.914 127.691 499.836 127.699 499.766 cv
127.703 499.699 127.719 499.641 127.746 499.586 cv
127.77 499.535 127.801 499.48 127.836 499.426 cv
127.871 499.375 127.914 499.32 127.973 499.258 cv
129.746 497.434 li
130.156 497.016 130.484 496.641 130.734 496.305 cv
130.98 495.977 131.172 495.672 131.305 495.395 cv
131.438 495.121 131.523 494.871 131.57 494.645 cv
131.609 494.422 131.633 494.211 131.633 494.016 cv
131.633 493.82 131.598 493.637 131.531 493.457 cv
131.465 493.285 131.371 493.129 131.246 492.992 cv
131.121 492.863 130.965 492.758 130.777 492.676 cv
130.59 492.602 130.371 492.562 130.125 492.559 cv
129.836 492.562 129.578 492.602 129.352 492.676 cv
129.121 492.758 128.922 492.844 128.75 492.93 cv
128.578 493.023 128.434 493.105 128.316 493.184 cv
128.199 493.262 128.113 493.301 128.063 493.301 cv
128.027 493.301 127.996 493.293 127.973 493.273 cv
127.941 493.258 127.922 493.227 127.906 493.184 cv
127.891 493.145 127.875 493.09 127.867 493.02 cv
127.855 492.953 127.852 492.871 127.855 492.773 cv
127.852 492.707 127.855 492.648 127.863 492.598 cv
127.867 492.547 127.875 492.504 127.887 492.465 cv
127.895 492.43 127.91 492.395 127.93 492.363 cv
127.949 492.332 127.984 492.293 128.043 492.242 cv
128.094 492.195 128.188 492.129 128.324 492.047 cv
128.457 491.965 128.629 491.887 128.832 491.805 cv
129.035 491.727 129.258 491.656 129.504 491.602 cv
129.746 491.547 130.004 491.52 130.277 491.52 cv
130.703 491.52 131.078 491.582 131.402 491.703 cv
131.723 491.824 131.988 491.988 132.203 492.199 cv
132.414 492.41 132.574 492.656 132.68 492.93 cv
132.785 493.211 132.84 493.508 132.84 493.82 cv
132.84 494.109 132.813 494.391 132.762 494.668 cv
132.711 494.953 132.605 495.258 132.445 495.582 cv
132.281 495.91 132.047 496.273 131.742 496.672 cv
131.434 497.074 131.027 497.535 130.523 498.051 cv
129.117 499.52 li
132.977 499.52 li
133.008 499.523 133.043 499.535 133.082 499.551 cv
133.113 499.574 133.145 499.605 133.172 499.645 cv
133.195 499.687 133.215 499.738 133.227 499.797 cv
133.238 499.863 133.242 499.934 133.246 500.012 cv
cp
f
202.672 497.996 mo
202.668 498.148 202.645 498.27 202.602 498.355 cv
202.555 498.445 202.492 498.488 202.41 498.484 cv
201.41 498.484 li
201.41 500.348 li
201.41 500.387 201.398 500.418 201.383 500.441 cv
201.359 500.469 201.328 500.488 201.285 500.508 cv
201.234 500.523 201.172 500.535 201.102 500.547 cv
201.023 500.555 200.93 500.559 200.813 500.562 cv
200.695 500.559 200.598 500.555 200.527 500.547 cv
200.449 500.535 200.391 500.523 200.348 500.508 cv
200.301 500.488 200.27 500.469 200.254 500.441 cv
200.234 500.418 200.227 500.387 200.23 500.348 cv
200.23 498.484 li
196.602 498.484 li
196.543 498.488 196.5 498.48 196.465 498.465 cv
196.43 498.453 196.395 498.426 196.367 498.387 cv
196.336 498.352 196.316 498.301 196.305 498.23 cv
196.293 498.164 196.289 498.074 196.289 497.961 cv
196.289 497.879 196.289 497.801 196.297 497.73 cv
196.297 497.66 196.309 497.598 196.324 497.543 cv
196.336 497.488 196.352 497.434 196.379 497.379 cv
196.398 497.324 196.426 497.27 196.461 497.207 cv
199.621 491.82 li
199.641 491.785 199.676 491.754 199.723 491.727 cv
199.766 491.699 199.82 491.676 199.895 491.656 cv
199.961 491.641 200.047 491.629 200.152 491.617 cv
200.254 491.613 200.375 491.609 200.516 491.605 cv
200.664 491.609 200.801 491.613 200.918 491.625 cv
201.031 491.637 201.121 491.652 201.195 491.668 cv
201.262 491.687 201.316 491.711 201.355 491.742 cv
201.391 491.773 201.41 491.809 201.41 491.848 cv
201.41 497.512 li
202.41 497.512 li
202.484 497.516 202.547 497.555 202.598 497.633 cv
202.645 497.715 202.668 497.836 202.672 497.996 cv
cp
200.23 492.645 mo
200.219 492.645 li
197.367 497.512 li
200.23 497.512 li
cp
f
271.543 497.648 mo
271.543 498.039 271.48 498.418 271.363 498.777 cv
271.238 499.145 271.055 499.461 270.813 499.734 cv
270.563 500.012 270.25 500.234 269.875 500.398 cv
269.492 500.566 269.047 500.648 268.531 500.648 cv
268.16 500.648 267.832 500.605 267.551 500.512 cv
267.266 500.426 267.02 500.293 266.809 500.121 cv
266.598 499.953 266.422 499.746 266.285 499.5 cv
266.145 499.254 266.031 498.973 265.949 498.656 cv
265.863 498.344 265.805 498 265.77 497.621 cv
265.73 497.25 265.711 496.848 265.715 496.414 cv
265.711 496.035 265.73 495.652 265.773 495.262 cv
265.813 494.879 265.887 494.504 265.992 494.137 cv
266.098 493.777 266.242 493.437 266.422 493.121 cv
266.602 492.805 266.828 492.527 267.102 492.293 cv
267.375 492.059 267.699 491.871 268.078 491.73 cv
268.457 491.594 268.898 491.527 269.402 491.523 cv
269.57 491.527 269.742 491.535 269.914 491.555 cv
270.086 491.578 270.246 491.609 270.395 491.641 cv
270.543 491.68 270.664 491.715 270.766 491.754 cv
270.863 491.793 270.93 491.828 270.965 491.852 cv
270.992 491.879 271.016 491.906 271.035 491.934 cv
271.051 491.965 271.066 491.996 271.074 492.031 cv
271.082 492.066 271.086 492.105 271.094 492.148 cv
271.094 492.191 271.098 492.246 271.102 492.309 cv
271.098 492.395 271.098 492.465 271.098 492.52 cv
271.094 492.582 271.082 492.629 271.07 492.664 cv
271.051 492.703 271.031 492.73 271.008 492.746 cv
270.98 492.766 270.949 492.773 270.91 492.773 cv
270.859 492.773 270.789 492.758 270.703 492.727 cv
270.613 492.695 270.508 492.66 270.387 492.617 cv
270.262 492.582 270.113 492.547 269.938 492.512 cv
269.762 492.484 269.559 492.469 269.328 492.465 cv
268.898 492.469 268.531 492.555 268.227 492.727 cv
267.922 492.898 267.672 493.133 267.477 493.426 cv
267.281 493.719 267.137 494.059 267.047 494.441 cv
266.949 494.832 266.895 495.234 266.887 495.652 cv
267.004 495.586 267.141 495.52 267.289 495.449 cv
267.438 495.383 267.598 495.32 267.773 495.262 cv
267.949 495.211 268.137 495.164 268.332 495.129 cv
268.527 495.098 268.738 495.082 268.965 495.078 cv
269.441 495.082 269.844 495.148 270.176 495.273 cv
270.504 495.406 270.77 495.586 270.977 495.816 cv
271.176 496.047 271.32 496.316 271.41 496.629 cv
271.496 496.941 271.543 497.281 271.543 497.648 cv
cp
270.348 497.758 mo
270.348 497.496 270.32 497.254 270.27 497.035 cv
270.215 496.82 270.125 496.637 270.004 496.48 cv
269.879 496.332 269.715 496.215 269.512 496.133 cv
269.301 496.051 269.047 496.008 268.75 496.008 cv
268.578 496.008 268.41 496.023 268.242 496.055 cv
268.07 496.086 267.906 496.129 267.75 496.176 cv
267.59 496.23 267.441 496.293 267.301 496.363 cv
267.156 496.437 267.023 496.512 266.906 496.59 cv
266.902 497.184 266.941 497.68 267.02 498.074 cv
267.094 498.473 267.203 498.789 267.348 499.027 cv
267.492 499.27 267.672 499.441 267.887 499.543 cv
268.102 499.648 268.352 499.699 268.641 499.695 cv
268.93 499.699 269.184 499.645 269.398 499.531 cv
269.613 499.426 269.789 499.277 269.934 499.09 cv
270.074 498.906 270.18 498.699 270.246 498.469 cv
270.313 498.238 270.348 498.004 270.348 497.758 cv
cp
f
340.57 498.242 mo
340.57 498.629 340.5 498.973 340.363 499.27 cv
340.227 499.574 340.031 499.824 339.773 500.027 cv
339.516 500.234 339.195 500.391 338.816 500.492 cv
338.434 500.598 338 500.648 337.516 500.648 cv
337.055 500.648 336.645 500.602 336.285 500.508 cv
335.922 500.414 335.617 500.273 335.367 500.082 cv
335.117 499.898 334.926 499.668 334.793 499.391 cv
334.66 499.117 334.594 498.805 334.594 498.449 cv
334.594 498.176 334.637 497.918 334.73 497.684 cv
334.816 497.449 334.949 497.234 335.125 497.039 cv
335.293 496.844 335.504 496.66 335.758 496.484 cv
336.008 496.316 336.293 496.152 336.609 495.996 cv
336.336 495.855 336.094 495.707 335.883 495.547 cv
335.672 495.391 335.492 495.219 335.348 495.031 cv
335.199 494.848 335.09 494.652 335.016 494.441 cv
334.938 494.234 334.898 494.004 334.902 493.754 cv
334.898 493.445 334.953 493.152 335.07 492.879 cv
335.18 492.609 335.352 492.375 335.578 492.172 cv
335.805 491.973 336.09 491.812 336.441 491.695 cv
336.785 491.578 337.195 491.52 337.664 491.52 cv
338.109 491.52 338.496 491.574 338.824 491.68 cv
339.152 491.789 339.422 491.934 339.633 492.117 cv
339.844 492.305 340 492.523 340.105 492.773 cv
340.203 493.023 340.254 493.293 340.258 493.582 cv
340.254 493.816 340.215 494.043 340.145 494.254 cv
340.066 494.473 339.957 494.676 339.809 494.863 cv
339.66 495.059 339.48 495.238 339.27 495.402 cv
339.059 495.574 338.816 495.73 338.543 495.871 cv
338.863 496.035 339.148 496.199 339.406 496.367 cv
339.656 496.535 339.871 496.715 340.047 496.91 cv
340.215 497.105 340.344 497.312 340.438 497.527 cv
340.523 497.746 340.57 497.984 340.57 498.242 cv
cp
339.09 493.691 mo
339.086 493.504 339.055 493.328 338.988 493.172 cv
338.922 493.016 338.824 492.883 338.699 492.773 cv
338.57 492.664 338.41 492.582 338.223 492.523 cv
338.027 492.469 337.813 492.441 337.574 492.437 cv
337.078 492.441 336.703 492.551 336.453 492.773 cv
336.195 493 336.07 493.309 336.074 493.691 cv
336.07 493.871 336.102 494.035 336.164 494.187 cv
336.227 494.344 336.32 494.488 336.453 494.625 cv
336.578 494.762 336.742 494.895 336.945 495.023 cv
337.141 495.156 337.379 495.293 337.656 495.434 cv
338.117 495.199 338.473 494.937 338.719 494.645 cv
338.965 494.359 339.086 494.043 339.09 493.691 cv
cp
339.379 498.367 mo
339.375 498.16 339.336 497.969 339.262 497.797 cv
339.18 497.629 339.063 497.469 338.906 497.316 cv
338.75 497.168 338.551 497.023 338.316 496.883 cv
338.078 496.746 337.809 496.602 337.5 496.449 cv
337.211 496.594 336.957 496.734 336.742 496.875 cv
336.523 497.016 336.344 497.164 336.207 497.312 cv
336.066 497.469 335.961 497.625 335.891 497.789 cv
335.816 497.957 335.781 498.141 335.785 498.34 cv
335.781 498.785 335.934 499.129 336.242 499.367 cv
336.543 499.613 336.996 499.734 337.602 499.73 cv
338.184 499.734 338.629 499.613 338.93 499.363 cv
339.227 499.121 339.375 498.789 339.379 498.367 cv
cp
f
405.887 500.055 mo
405.883 500.145 405.875 500.215 405.863 500.273 cv
405.848 500.336 405.828 500.387 405.809 500.418 cv
405.785 500.457 405.762 500.48 405.73 500.496 cv
405.699 500.512 405.668 500.52 405.641 500.52 cv
401.004 500.52 li
400.969 500.52 400.941 500.512 400.914 500.496 cv
400.887 500.48 400.859 500.457 400.836 500.418 cv
400.809 500.387 400.789 500.336 400.777 500.273 cv
400.762 500.215 400.754 500.145 400.758 500.055 cv
400.754 499.977 400.762 499.902 400.777 499.84 cv
400.789 499.781 400.805 499.734 400.828 499.695 cv
400.844 499.66 400.871 499.629 400.902 499.605 cv
400.934 499.586 400.965 499.578 401.004 499.574 cv
402.855 499.574 li
402.855 492.828 li
401.141 493.848 li
401.051 493.898 400.98 493.926 400.934 493.934 cv
400.879 493.941 400.836 493.934 400.805 493.902 cv
400.77 493.875 400.75 493.824 400.738 493.754 cv
400.727 493.687 400.719 493.602 400.723 493.492 cv
400.719 493.418 400.723 493.352 400.734 493.293 cv
400.738 493.242 400.75 493.195 400.766 493.156 cv
400.777 493.121 400.797 493.09 400.82 493.062 cv
400.844 493.035 400.875 493.008 400.922 492.98 cv
402.965 491.668 li
402.98 491.656 403 491.645 403.031 491.637 cv
403.055 491.629 403.09 491.621 403.137 491.609 cv
403.176 491.602 403.227 491.594 403.281 491.59 cv
403.336 491.59 403.402 491.59 403.488 491.586 cv
403.594 491.59 403.688 491.594 403.762 491.602 cv
403.832 491.609 403.887 491.625 403.934 491.641 cv
403.973 491.66 404 491.68 404.016 491.703 cv
404.023 491.73 404.031 491.754 404.035 491.777 cv
404.035 499.574 li
405.641 499.574 li
405.676 499.578 405.711 499.586 405.742 499.605 cv
405.773 499.629 405.797 499.66 405.82 499.695 cv
405.836 499.734 405.852 499.781 405.867 499.84 cv
405.875 499.902 405.883 499.977 405.887 500.055 cv
cp
f
413.238 496.062 mo
413.234 496.746 413.184 497.367 413.078 497.93 cv
412.969 498.492 412.789 498.977 412.543 499.379 cv
412.289 499.785 411.961 500.098 411.563 500.316 cv
411.156 500.539 410.664 500.648 410.078 500.648 cv
409.52 500.648 409.047 500.551 408.668 500.352 cv
408.285 500.156 407.98 499.863 407.746 499.477 cv
407.512 499.09 407.344 498.617 407.25 498.051 cv
407.148 497.488 407.102 496.84 407.102 496.105 cv
407.102 495.434 407.156 494.812 407.266 494.246 cv
407.375 493.684 407.551 493.199 407.801 492.793 cv
408.043 492.391 408.367 492.078 408.773 491.852 cv
409.172 491.633 409.668 491.52 410.258 491.52 cv
410.816 491.52 411.289 491.621 411.672 491.816 cv
412.055 492.02 412.359 492.312 412.594 492.695 cv
412.824 493.086 412.992 493.559 413.09 494.121 cv
413.188 494.684 413.234 495.332 413.238 496.062 cv
cp
412.031 496.145 mo
412.027 495.703 412.012 495.305 411.984 494.953 cv
411.949 494.602 411.902 494.293 411.844 494.023 cv
411.777 493.754 411.699 493.523 411.602 493.328 cv
411.504 493.137 411.387 492.977 411.25 492.848 cv
411.109 492.723 410.949 492.629 410.777 492.57 cv
410.598 492.516 410.402 492.488 410.188 492.484 cv
409.797 492.488 409.48 492.578 409.242 492.762 cv
408.996 492.945 408.805 493.199 408.668 493.516 cv
408.527 493.836 408.434 494.207 408.383 494.637 cv
408.332 495.066 408.309 495.531 408.309 496.023 cv
408.309 496.687 408.34 497.25 408.41 497.711 cv
408.477 498.18 408.586 498.559 408.738 498.848 cv
408.883 499.145 409.074 499.355 409.305 499.484 cv
409.535 499.621 409.816 499.687 410.148 499.684 cv
410.402 499.687 410.625 499.648 410.82 499.562 cv
411.012 499.484 411.18 499.363 411.32 499.207 cv
411.461 499.055 411.574 498.871 411.668 498.656 cv
411.754 498.441 411.828 498.203 411.887 497.941 cv
411.938 497.684 411.977 497.402 412 497.098 cv
412.02 496.793 412.027 496.477 412.031 496.145 cv
cp
f
474.934 500.055 mo
474.93 500.145 474.922 500.215 474.91 500.273 cv
474.895 500.336 474.875 500.387 474.855 500.418 cv
474.832 500.457 474.809 500.48 474.777 500.496 cv
474.746 500.512 474.715 500.52 474.688 500.52 cv
470.051 500.52 li
470.016 500.52 469.988 500.512 469.961 500.496 cv
469.934 500.48 469.906 500.457 469.883 500.418 cv
469.855 500.387 469.836 500.336 469.824 500.273 cv
469.809 500.215 469.801 500.145 469.805 500.055 cv
469.801 499.977 469.809 499.902 469.824 499.84 cv
469.836 499.781 469.852 499.734 469.875 499.695 cv
469.891 499.66 469.918 499.629 469.949 499.605 cv
469.98 499.586 470.012 499.578 470.051 499.574 cv
471.902 499.574 li
471.902 492.828 li
470.188 493.848 li
470.098 493.898 470.027 493.926 469.98 493.934 cv
469.926 493.941 469.883 493.934 469.852 493.902 cv
469.816 493.875 469.797 493.824 469.785 493.754 cv
469.773 493.687 469.766 493.602 469.77 493.492 cv
469.766 493.418 469.77 493.352 469.781 493.293 cv
469.785 493.242 469.797 493.195 469.813 493.156 cv
469.824 493.121 469.844 493.09 469.867 493.062 cv
469.891 493.035 469.922 493.008 469.969 492.98 cv
472.012 491.668 li
472.027 491.656 472.047 491.645 472.078 491.637 cv
472.102 491.629 472.137 491.621 472.184 491.609 cv
472.223 491.602 472.273 491.594 472.328 491.59 cv
472.383 491.59 472.449 491.59 472.535 491.586 cv
472.641 491.59 472.734 491.594 472.809 491.602 cv
472.879 491.609 472.934 491.625 472.98 491.641 cv
473.02 491.66 473.047 491.68 473.063 491.703 cv
473.07 491.73 473.078 491.754 473.082 491.777 cv
473.082 499.574 li
474.688 499.574 li
474.723 499.578 474.758 499.586 474.789 499.605 cv
474.82 499.629 474.844 499.66 474.867 499.695 cv
474.883 499.734 474.898 499.781 474.914 499.84 cv
474.922 499.902 474.93 499.977 474.934 500.055 cv
cp
f
481.996 500.012 mo
481.992 500.098 481.988 500.172 481.977 500.234 cv
481.965 500.301 481.949 500.355 481.93 500.395 cv
481.906 500.441 481.879 500.473 481.848 500.488 cv
481.813 500.512 481.773 500.52 481.734 500.52 cv
476.832 500.52 li
476.77 500.52 476.711 500.512 476.664 500.496 cv
476.613 500.48 476.574 500.457 476.539 500.418 cv
476.504 500.387 476.477 500.332 476.465 500.262 cv
476.445 500.191 476.438 500.105 476.441 500.004 cv
476.438 499.914 476.441 499.836 476.449 499.766 cv
476.453 499.699 476.469 499.641 476.496 499.586 cv
476.52 499.535 476.551 499.48 476.586 499.426 cv
476.621 499.375 476.664 499.32 476.723 499.258 cv
478.496 497.434 li
478.906 497.016 479.234 496.641 479.484 496.305 cv
479.73 495.977 479.922 495.672 480.055 495.395 cv
480.188 495.121 480.273 494.871 480.32 494.645 cv
480.359 494.422 480.383 494.211 480.383 494.016 cv
480.383 493.82 480.348 493.637 480.281 493.457 cv
480.215 493.285 480.121 493.129 479.996 492.992 cv
479.871 492.863 479.715 492.758 479.527 492.676 cv
479.34 492.602 479.121 492.562 478.875 492.559 cv
478.586 492.562 478.328 492.602 478.102 492.676 cv
477.871 492.758 477.672 492.844 477.5 492.93 cv
477.328 493.023 477.184 493.105 477.066 493.184 cv
476.949 493.262 476.863 493.301 476.813 493.301 cv
476.777 493.301 476.746 493.293 476.723 493.273 cv
476.691 493.258 476.672 493.227 476.656 493.184 cv
476.641 493.145 476.625 493.09 476.617 493.02 cv
476.605 492.953 476.602 492.871 476.605 492.773 cv
476.602 492.707 476.605 492.648 476.613 492.598 cv
476.617 492.547 476.625 492.504 476.637 492.465 cv
476.645 492.43 476.66 492.395 476.68 492.363 cv
476.699 492.332 476.734 492.293 476.793 492.242 cv
476.844 492.195 476.938 492.129 477.074 492.047 cv
477.207 491.965 477.379 491.887 477.582 491.805 cv
477.785 491.727 478.008 491.656 478.254 491.602 cv
478.496 491.547 478.754 491.52 479.027 491.52 cv
479.453 491.52 479.828 491.582 480.152 491.703 cv
480.473 491.824 480.738 491.988 480.953 492.199 cv
481.164 492.41 481.324 492.656 481.43 492.93 cv
481.535 493.211 481.59 493.508 481.59 493.82 cv
481.59 494.109 481.563 494.391 481.512 494.668 cv
481.461 494.953 481.355 495.258 481.195 495.582 cv
481.031 495.91 480.797 496.273 480.492 496.672 cv
480.184 497.074 479.777 497.535 479.273 498.051 cv
477.867 499.52 li
481.727 499.52 li
481.758 499.523 481.793 499.535 481.832 499.551 cv
481.863 499.574 481.895 499.605 481.922 499.645 cv
481.945 499.687 481.965 499.738 481.977 499.797 cv
481.988 499.863 481.992 499.934 481.996 500.012 cv
cp
f
543.977 500.055 mo
543.973 500.145 543.965 500.215 543.953 500.273 cv
543.938 500.336 543.918 500.387 543.898 500.418 cv
543.875 500.457 543.852 500.48 543.82 500.496 cv
543.789 500.512 543.758 500.52 543.73 500.52 cv
539.094 500.52 li
539.059 500.52 539.031 500.512 539.004 500.496 cv
538.977 500.48 538.949 500.457 538.926 500.418 cv
538.898 500.387 538.879 500.336 538.867 500.273 cv
538.852 500.215 538.844 500.145 538.848 500.055 cv
538.844 499.977 538.852 499.902 538.867 499.84 cv
538.879 499.781 538.895 499.734 538.918 499.695 cv
538.934 499.66 538.961 499.629 538.992 499.605 cv
539.023 499.586 539.055 499.578 539.094 499.574 cv
540.945 499.574 li
540.945 492.828 li
539.23 493.848 li
539.141 493.898 539.07 493.926 539.023 493.934 cv
538.969 493.941 538.926 493.934 538.895 493.902 cv
538.859 493.875 538.84 493.824 538.828 493.754 cv
538.816 493.687 538.809 493.602 538.813 493.492 cv
538.809 493.418 538.813 493.352 538.824 493.293 cv
538.828 493.242 538.84 493.195 538.855 493.156 cv
538.867 493.121 538.887 493.09 538.91 493.062 cv
538.934 493.035 538.965 493.008 539.012 492.98 cv
541.055 491.668 li
541.07 491.656 541.09 491.645 541.121 491.637 cv
541.145 491.629 541.18 491.621 541.227 491.609 cv
541.266 491.602 541.316 491.594 541.371 491.59 cv
541.426 491.59 541.492 491.59 541.578 491.586 cv
541.684 491.59 541.777 491.594 541.852 491.602 cv
541.922 491.609 541.977 491.625 542.023 491.641 cv
542.063 491.66 542.09 491.68 542.105 491.703 cv
542.113 491.73 542.121 491.754 542.125 491.777 cv
542.125 499.574 li
543.73 499.574 li
543.766 499.578 543.801 499.586 543.832 499.605 cv
543.863 499.629 543.887 499.66 543.91 499.695 cv
543.926 499.734 543.941 499.781 543.957 499.84 cv
543.965 499.902 543.973 499.977 543.977 500.055 cv
cp
f
551.41 497.996 mo
551.406 498.148 551.383 498.27 551.34 498.355 cv
551.293 498.445 551.23 498.488 551.148 498.484 cv
550.148 498.484 li
550.148 500.348 li
550.148 500.387 550.137 500.418 550.121 500.441 cv
550.098 500.469 550.066 500.488 550.023 500.508 cv
549.973 500.523 549.91 500.535 549.84 500.547 cv
549.762 500.555 549.668 500.559 549.551 500.562 cv
549.434 500.559 549.336 500.555 549.266 500.547 cv
549.188 500.535 549.129 500.523 549.086 500.508 cv
549.039 500.488 549.008 500.469 548.992 500.441 cv
548.973 500.418 548.965 500.387 548.969 500.348 cv
548.969 498.484 li
545.34 498.484 li
545.281 498.488 545.238 498.48 545.203 498.465 cv
545.168 498.453 545.133 498.426 545.105 498.387 cv
545.074 498.352 545.055 498.301 545.043 498.23 cv
545.031 498.164 545.027 498.074 545.027 497.961 cv
545.027 497.879 545.027 497.801 545.035 497.73 cv
545.035 497.66 545.047 497.598 545.063 497.543 cv
545.074 497.488 545.09 497.434 545.117 497.379 cv
545.137 497.324 545.164 497.27 545.199 497.207 cv
548.359 491.82 li
548.379 491.785 548.414 491.754 548.461 491.727 cv
548.504 491.699 548.559 491.676 548.633 491.656 cv
548.699 491.641 548.785 491.629 548.891 491.617 cv
548.992 491.613 549.113 491.609 549.254 491.605 cv
549.402 491.609 549.539 491.613 549.656 491.625 cv
549.77 491.637 549.859 491.652 549.934 491.668 cv
550 491.687 550.055 491.711 550.094 491.742 cv
550.129 491.773 550.148 491.809 550.148 491.848 cv
550.148 497.512 li
551.148 497.512 li
551.223 497.516 551.285 497.555 551.336 497.633 cv
551.383 497.715 551.406 497.836 551.41 497.996 cv
cp
548.969 492.645 mo
548.957 492.645 li
546.105 497.512 li
548.969 497.512 li
cp
f
613.004 500.055 mo
613 500.145 612.992 500.215 612.98 500.273 cv
612.965 500.336 612.945 500.387 612.926 500.418 cv
612.902 500.457 612.879 500.48 612.848 500.496 cv
612.816 500.512 612.785 500.52 612.758 500.52 cv
608.121 500.52 li
608.086 500.52 608.059 500.512 608.031 500.496 cv
608.004 500.48 607.977 500.457 607.953 500.418 cv
607.926 500.387 607.906 500.336 607.895 500.273 cv
607.879 500.215 607.871 500.145 607.875 500.055 cv
607.871 499.977 607.879 499.902 607.895 499.84 cv
607.906 499.781 607.922 499.734 607.945 499.695 cv
607.961 499.66 607.988 499.629 608.02 499.605 cv
608.051 499.586 608.082 499.578 608.121 499.574 cv
609.973 499.574 li
609.973 492.828 li
608.258 493.848 li
608.168 493.898 608.098 493.926 608.051 493.934 cv
607.996 493.941 607.953 493.934 607.922 493.902 cv
607.887 493.875 607.867 493.824 607.855 493.754 cv
607.844 493.687 607.836 493.602 607.84 493.492 cv
607.836 493.418 607.84 493.352 607.852 493.293 cv
607.855 493.242 607.867 493.195 607.883 493.156 cv
607.895 493.121 607.914 493.09 607.938 493.062 cv
607.961 493.035 607.992 493.008 608.039 492.98 cv
610.082 491.668 li
610.098 491.656 610.117 491.645 610.148 491.637 cv
610.172 491.629 610.207 491.621 610.254 491.609 cv
610.293 491.602 610.344 491.594 610.398 491.59 cv
610.453 491.59 610.52 491.59 610.605 491.586 cv
610.711 491.59 610.805 491.594 610.879 491.602 cv
610.949 491.609 611.004 491.625 611.051 491.641 cv
611.09 491.66 611.117 491.68 611.133 491.703 cv
611.141 491.73 611.148 491.754 611.152 491.777 cv
611.152 499.574 li
612.758 499.574 li
612.793 499.578 612.828 499.586 612.859 499.605 cv
612.891 499.629 612.914 499.66 612.938 499.695 cv
612.953 499.734 612.969 499.781 612.984 499.84 cv
612.992 499.902 613 499.977 613.004 500.055 cv
cp
f
620.293 497.648 mo
620.293 498.039 620.23 498.418 620.113 498.777 cv
619.988 499.145 619.805 499.461 619.563 499.734 cv
619.313 500.012 619 500.234 618.625 500.398 cv
618.242 500.566 617.797 500.648 617.281 500.648 cv
616.91 500.648 616.582 500.605 616.301 500.512 cv
616.016 500.426 615.77 500.293 615.559 500.121 cv
615.348 499.953 615.172 499.746 615.035 499.5 cv
614.895 499.254 614.781 498.973 614.699 498.656 cv
614.613 498.344 614.555 498 614.52 497.621 cv
614.48 497.25 614.461 496.848 614.465 496.414 cv
614.461 496.035 614.48 495.652 614.523 495.262 cv
614.563 494.879 614.637 494.504 614.742 494.137 cv
614.848 493.777 614.992 493.437 615.172 493.121 cv
615.352 492.805 615.578 492.527 615.852 492.293 cv
616.125 492.059 616.449 491.871 616.828 491.73 cv
617.207 491.594 617.648 491.527 618.152 491.523 cv
618.32 491.527 618.492 491.535 618.664 491.555 cv
618.836 491.578 618.996 491.609 619.145 491.641 cv
619.293 491.68 619.414 491.715 619.516 491.754 cv
619.613 491.793 619.68 491.828 619.715 491.852 cv
619.742 491.879 619.766 491.906 619.785 491.934 cv
619.801 491.965 619.816 491.996 619.824 492.031 cv
619.832 492.066 619.836 492.105 619.844 492.148 cv
619.844 492.191 619.848 492.246 619.852 492.309 cv
619.848 492.395 619.848 492.465 619.848 492.52 cv
619.844 492.582 619.832 492.629 619.82 492.664 cv
619.801 492.703 619.781 492.73 619.758 492.746 cv
619.73 492.766 619.699 492.773 619.66 492.773 cv
619.609 492.773 619.539 492.758 619.453 492.727 cv
619.363 492.695 619.258 492.66 619.137 492.617 cv
619.012 492.582 618.863 492.547 618.688 492.512 cv
618.512 492.484 618.309 492.469 618.078 492.465 cv
617.648 492.469 617.281 492.555 616.977 492.727 cv
616.672 492.898 616.422 493.133 616.227 493.426 cv
616.031 493.719 615.887 494.059 615.797 494.441 cv
615.699 494.832 615.645 495.234 615.637 495.652 cv
615.754 495.586 615.891 495.52 616.039 495.449 cv
616.188 495.383 616.348 495.32 616.523 495.262 cv
616.699 495.211 616.887 495.164 617.082 495.129 cv
617.277 495.098 617.488 495.082 617.715 495.078 cv
618.191 495.082 618.594 495.148 618.926 495.273 cv
619.254 495.406 619.52 495.586 619.727 495.816 cv
619.926 496.047 620.07 496.316 620.16 496.629 cv
620.246 496.941 620.293 497.281 620.293 497.648 cv
cp
619.098 497.758 mo
619.098 497.496 619.07 497.254 619.02 497.035 cv
618.965 496.82 618.875 496.637 618.754 496.48 cv
618.629 496.332 618.465 496.215 618.262 496.133 cv
618.051 496.051 617.797 496.008 617.5 496.008 cv
617.328 496.008 617.16 496.023 616.992 496.055 cv
616.82 496.086 616.656 496.129 616.5 496.176 cv
616.34 496.23 616.191 496.293 616.051 496.363 cv
615.906 496.437 615.773 496.512 615.656 496.59 cv
615.652 497.184 615.691 497.68 615.77 498.074 cv
615.844 498.473 615.953 498.789 616.098 499.027 cv
616.242 499.27 616.422 499.441 616.637 499.543 cv
616.852 499.648 617.102 499.699 617.391 499.695 cv
617.68 499.699 617.934 499.645 618.148 499.531 cv
618.363 499.426 618.539 499.277 618.684 499.09 cv
618.824 498.906 618.93 498.699 618.996 498.469 cv
619.063 498.238 619.098 498.004 619.098 497.758 cv
cp
f
16.957 304.652 mo
17 304.656 17.035 304.664 17.066 304.676 cv
17.098 304.695 17.125 304.73 17.145 304.777 cv
17.164 304.832 17.176 304.902 17.191 304.996 cv
17.199 305.09 17.207 305.215 17.207 305.371 cv
17.207 305.508 17.199 305.621 17.191 305.703 cv
17.176 305.789 17.164 305.855 17.141 305.906 cv
17.121 305.961 17.086 306 17.043 306.027 cv
17.004 306.059 16.953 306.086 16.887 306.102 cv
14.512 307.031 li
14.242 307.145 13.996 307.258 13.766 307.371 cv
13.543 307.488 13.348 307.625 13.184 307.785 cv
13.023 307.949 12.895 308.141 12.801 308.355 cv
12.711 308.578 12.668 308.84 12.664 309.141 cv
12.664 310.039 li
16.957 310.039 li
17 310.043 17.035 310.055 17.066 310.074 cv
17.098 310.102 17.125 310.137 17.141 310.184 cv
17.16 310.234 17.172 310.301 17.188 310.387 cv
17.199 310.473 17.207 310.582 17.207 310.707 cv
17.207 310.84 17.199 310.945 17.188 311.031 cv
17.172 311.117 17.16 311.187 17.141 311.238 cv
17.125 311.293 17.098 311.328 17.066 311.348 cv
17.035 311.371 17 311.383 16.957 311.379 cv
7.621 311.379 li
7.418 311.383 7.277 311.328 7.195 311.219 cv
7.117 311.113 7.078 311 7.074 310.879 cv
7.074 308.738 li
7.078 308.488 7.082 308.273 7.094 308.102 cv
7.109 307.934 7.125 307.781 7.137 307.645 cv
7.207 307.258 7.313 306.914 7.457 306.613 cv
7.605 306.316 7.793 306.066 8.012 305.863 cv
8.238 305.66 8.492 305.508 8.781 305.406 cv
9.07 305.305 9.391 305.254 9.734 305.254 cv
10.074 305.254 10.375 305.301 10.641 305.391 cv
10.91 305.484 11.148 305.617 11.352 305.785 cv
11.563 305.957 11.738 306.16 11.887 306.398 cv
12.035 306.641 12.164 306.91 12.266 307.203 cv
12.344 307.039 12.434 306.887 12.543 306.75 cv
12.656 306.617 12.793 306.492 12.945 306.371 cv
13.105 306.258 13.285 306.145 13.484 306.039 cv
13.688 305.937 13.914 305.836 14.168 305.727 cv
16.387 304.824 li
16.574 304.754 16.707 304.707 16.781 304.684 cv
16.859 304.668 16.918 304.656 16.957 304.652 cv
cp
9.875 306.672 mo
9.484 306.672 9.148 306.762 8.875 306.937 cv
8.602 307.117 8.406 307.414 8.285 307.824 cv
8.25 307.957 8.223 308.102 8.207 308.266 cv
8.191 308.43 8.184 308.645 8.184 308.906 cv
8.184 310.039 li
11.582 310.039 li
11.582 308.73 li
11.582 308.379 11.539 308.074 11.453 307.812 cv
11.367 307.559 11.25 307.344 11.094 307.172 cv
10.945 307.004 10.762 306.879 10.551 306.793 cv
10.344 306.715 10.121 306.672 9.875 306.672 cv
cp
f
16.965 296.855 mo
17.012 296.859 17.047 296.867 17.07 296.883 cv
17.102 296.902 17.125 296.937 17.145 296.98 cv
17.164 297.027 17.176 297.086 17.191 297.16 cv
17.199 297.238 17.207 297.332 17.207 297.437 cv
17.207 297.562 17.199 297.66 17.191 297.73 cv
17.176 297.809 17.164 297.867 17.145 297.91 cv
17.125 297.957 17.102 297.988 17.07 298 cv
17.047 298.02 17.012 298.027 16.965 298.023 cv
16.039 298.023 li
16.484 298.426 16.805 298.82 17.004 299.207 cv
17.207 299.602 17.305 299.996 17.309 300.391 cv
17.305 300.863 17.23 301.258 17.074 301.574 cv
16.922 301.895 16.711 302.152 16.441 302.348 cv
16.176 302.551 15.863 302.691 15.504 302.773 cv
15.148 302.863 14.715 302.906 14.207 302.902 cv
9.953 302.902 li
9.914 302.906 9.879 302.898 9.848 302.875 cv
9.82 302.859 9.797 302.824 9.77 302.77 cv
9.75 302.723 9.734 302.652 9.723 302.566 cv
9.719 302.484 9.715 302.383 9.711 302.254 cv
9.715 302.133 9.719 302.027 9.723 301.941 cv
9.734 301.859 9.75 301.793 9.77 301.746 cv
9.797 301.699 9.82 301.664 9.848 301.641 cv
9.879 301.621 9.914 301.613 9.953 301.609 cv
14.035 301.609 li
14.449 301.613 14.777 301.582 15.023 301.52 cv
15.27 301.461 15.48 301.371 15.652 301.246 cv
15.832 301.129 15.965 300.973 16.059 300.781 cv
16.156 300.598 16.207 300.379 16.203 300.129 cv
16.207 299.809 16.09 299.488 15.859 299.164 cv
15.633 298.848 15.297 298.508 14.852 298.148 cv
9.953 298.148 li
9.914 298.148 9.879 298.141 9.848 298.121 cv
9.82 298.105 9.797 298.07 9.77 298.016 cv
9.75 297.965 9.734 297.898 9.723 297.816 cv
9.719 297.738 9.715 297.633 9.711 297.5 cv
9.715 297.379 9.719 297.273 9.723 297.187 cv
9.734 297.105 9.75 297.043 9.77 296.996 cv
9.797 296.953 9.82 296.918 9.848 296.891 cv
9.879 296.871 9.914 296.859 9.953 296.855 cv
cp
f
16.965 288.445 mo
17.012 288.445 17.047 288.457 17.07 288.477 cv
17.102 288.5 17.125 288.535 17.145 288.578 cv
17.164 288.629 17.176 288.691 17.191 288.773 cv
17.199 288.855 17.207 288.961 17.207 289.082 cv
17.207 289.215 17.199 289.32 17.191 289.402 cv
17.176 289.488 17.164 289.555 17.145 289.598 cv
17.125 289.648 17.102 289.68 17.07 289.699 cv
17.047 289.723 17.012 289.734 16.965 289.73 cv
12.859 289.73 li
12.461 289.734 12.141 289.766 11.895 289.824 cv
11.652 289.891 11.441 289.98 11.262 290.098 cv
11.086 290.215 10.949 290.371 10.855 290.559 cv
10.762 290.754 10.715 290.973 10.715 291.219 cv
10.715 291.543 10.832 291.867 11.059 292.187 cv
11.293 292.512 11.625 292.848 12.063 293.199 cv
16.965 293.199 li
17.012 293.203 17.047 293.215 17.07 293.23 cv
17.102 293.254 17.125 293.285 17.145 293.332 cv
17.164 293.379 17.176 293.445 17.191 293.523 cv
17.199 293.609 17.207 293.715 17.207 293.844 cv
17.207 293.973 17.199 294.078 17.191 294.156 cv
17.176 294.242 17.164 294.309 17.145 294.355 cv
17.125 294.41 17.102 294.441 17.07 294.457 cv
17.047 294.477 17.012 294.488 16.965 294.484 cv
9.953 294.484 li
9.914 294.488 9.879 294.48 9.848 294.461 cv
9.82 294.449 9.797 294.418 9.77 294.367 cv
9.75 294.324 9.734 294.262 9.723 294.187 cv
9.719 294.117 9.715 294.023 9.711 293.898 cv
9.715 293.789 9.719 293.691 9.723 293.613 cv
9.734 293.539 9.75 293.48 9.77 293.437 cv
9.797 293.398 9.82 293.371 9.848 293.352 cv
9.879 293.336 9.914 293.328 9.953 293.324 cv
10.879 293.324 li
10.438 292.934 10.117 292.539 9.91 292.145 cv
9.707 291.754 9.602 291.355 9.602 290.953 cv
9.602 290.484 9.684 290.094 9.84 289.773 cv
10.004 289.457 10.215 289.195 10.477 288.996 cv
10.742 288.801 11.051 288.66 11.406 288.574 cv
11.762 288.488 12.191 288.445 12.688 288.445 cv
cp
f
16.449 282.566 mo
16.605 282.566 16.723 282.578 16.809 282.598 cv
16.898 282.621 16.965 282.652 17.004 282.691 cv
17.047 282.734 17.086 282.797 17.121 282.879 cv
17.156 282.965 17.184 283.059 17.211 283.164 cv
17.23 283.273 17.25 283.387 17.27 283.504 cv
17.281 283.621 17.289 283.742 17.293 283.859 cv
17.289 284.227 17.242 284.539 17.148 284.797 cv
17.055 285.059 16.91 285.27 16.711 285.434 cv
16.52 285.602 16.273 285.723 15.973 285.797 cv
15.676 285.875 15.324 285.914 14.914 285.91 cv
10.816 285.91 li
10.816 286.891 li
10.82 286.969 10.777 287.031 10.691 287.078 cv
10.609 287.125 10.477 287.148 10.285 287.148 cv
10.191 287.148 10.109 287.145 10.039 287.129 cv
9.977 287.121 9.918 287.102 9.871 287.078 cv
9.828 287.059 9.797 287.031 9.777 286.996 cv
9.762 286.965 9.754 286.93 9.75 286.883 cv
9.75 285.91 li
8.082 285.91 li
8.051 285.914 8.016 285.902 7.98 285.883 cv
7.953 285.867 7.926 285.836 7.898 285.781 cv
7.879 285.734 7.863 285.668 7.848 285.582 cv
7.84 285.504 7.832 285.398 7.832 285.27 cv
7.832 285.141 7.84 285.035 7.848 284.953 cv
7.863 284.871 7.879 284.805 7.898 284.758 cv
7.926 284.711 7.953 284.68 7.98 284.656 cv
8.016 284.641 8.051 284.629 8.082 284.625 cv
9.75 284.625 li
9.75 282.824 li
9.754 282.785 9.762 282.75 9.777 282.715 cv
9.797 282.687 9.828 282.66 9.871 282.633 cv
9.918 282.613 9.977 282.598 10.039 282.582 cv
10.109 282.574 10.191 282.566 10.285 282.566 cv
10.477 282.566 10.609 282.59 10.691 282.637 cv
10.777 282.684 10.82 282.746 10.816 282.824 cv
10.816 284.625 li
14.73 284.625 li
15.215 284.629 15.578 284.559 15.824 284.41 cv
16.074 284.27 16.199 284.012 16.195 283.641 cv
16.199 283.527 16.188 283.422 16.16 283.324 cv
16.141 283.234 16.117 283.152 16.086 283.074 cv
16.063 283.004 16.035 282.941 16.012 282.887 cv
15.988 282.84 15.977 282.793 15.977 282.746 cv
15.977 282.723 15.984 282.695 15.996 282.672 cv
16.012 282.648 16.035 282.633 16.07 282.617 cv
16.109 282.609 16.16 282.598 16.219 282.582 cv
16.285 282.574 16.363 282.566 16.449 282.566 cv
cp
f
16.965 279.551 mo
17.012 279.555 17.047 279.566 17.07 279.582 cv
17.102 279.605 17.125 279.637 17.145 279.684 cv
17.164 279.73 17.176 279.797 17.191 279.875 cv
17.199 279.961 17.207 280.066 17.207 280.195 cv
17.207 280.324 17.199 280.43 17.191 280.508 cv
17.176 280.594 17.164 280.66 17.145 280.707 cv
17.125 280.762 17.102 280.793 17.07 280.809 cv
17.047 280.828 17.012 280.84 16.965 280.836 cv
9.953 280.836 li
9.918 280.84 9.887 280.828 9.852 280.809 cv
9.824 280.793 9.797 280.762 9.773 280.707 cv
9.754 280.66 9.738 280.594 9.727 280.508 cv
9.719 280.43 9.715 280.324 9.711 280.195 cv
9.715 280.066 9.719 279.961 9.727 279.875 cv
9.738 279.797 9.754 279.73 9.773 279.684 cv
9.797 279.637 9.824 279.605 9.852 279.582 cv
9.887 279.566 9.918 279.555 9.953 279.551 cv
cp
7.582 279.402 mo
7.887 279.402 8.094 279.461 8.199 279.574 cv
8.313 279.687 8.367 279.898 8.363 280.203 cv
8.367 280.508 8.313 280.715 8.203 280.824 cv
8.098 280.941 7.895 280.996 7.598 280.992 cv
7.297 280.996 7.094 280.937 6.984 280.82 cv
6.879 280.707 6.824 280.496 6.82 280.187 cv
6.824 279.887 6.879 279.684 6.98 279.57 cv
7.09 279.461 7.289 279.402 7.582 279.402 cv
cp
f
16.965 266.73 mo
17.012 266.734 17.047 266.742 17.07 266.762 cv
17.102 266.785 17.125 266.82 17.145 266.863 cv
17.164 266.914 17.176 266.98 17.191 267.059 cv
17.199 267.145 17.207 267.246 17.207 267.371 cv
17.207 267.504 17.199 267.613 17.191 267.691 cv
17.176 267.777 17.164 267.844 17.145 267.891 cv
17.125 267.945 17.102 267.98 17.07 267.996 cv
17.047 268.02 17.012 268.027 16.965 268.027 cv
12.703 268.027 li
12.41 268.027 12.141 268.055 11.895 268.105 cv
11.652 268.16 11.441 268.242 11.262 268.355 cv
11.086 268.469 10.949 268.613 10.855 268.789 cv
10.762 268.969 10.715 269.18 10.715 269.414 cv
10.715 269.711 10.832 270.008 11.059 270.305 cv
11.293 270.609 11.625 270.937 12.063 271.293 cv
16.965 271.293 li
17.012 271.297 17.047 271.309 17.07 271.324 cv
17.102 271.348 17.125 271.379 17.145 271.426 cv
17.164 271.477 17.176 271.543 17.191 271.625 cv
17.199 271.711 17.207 271.816 17.207 271.937 cv
17.207 272.059 17.199 272.16 17.191 272.246 cv
17.176 272.332 17.164 272.402 17.145 272.449 cv
17.125 272.504 17.102 272.535 17.07 272.551 cv
17.047 272.57 17.012 272.582 16.965 272.578 cv
12.703 272.578 li
12.41 272.582 12.141 272.609 11.895 272.664 cv
11.652 272.723 11.441 272.809 11.262 272.922 cv
11.086 273.035 10.949 273.18 10.855 273.352 cv
10.762 273.531 10.715 273.738 10.715 273.973 cv
10.715 274.273 10.832 274.57 11.059 274.871 cv
11.293 275.172 11.625 275.5 12.063 275.852 cv
16.965 275.852 li
17.012 275.855 17.047 275.867 17.07 275.883 cv
17.102 275.906 17.125 275.937 17.145 275.984 cv
17.164 276.031 17.176 276.098 17.191 276.176 cv
17.199 276.262 17.207 276.367 17.207 276.496 cv
17.207 276.625 17.199 276.73 17.191 276.809 cv
17.176 276.895 17.164 276.961 17.145 277.008 cv
17.125 277.062 17.102 277.094 17.07 277.109 cv
17.047 277.129 17.012 277.141 16.965 277.137 cv
9.953 277.137 li
9.914 277.141 9.879 277.133 9.848 277.113 cv
9.82 277.102 9.797 277.07 9.77 277.02 cv
9.75 276.977 9.734 276.914 9.723 276.84 cv
9.719 276.77 9.715 276.676 9.711 276.551 cv
9.715 276.441 9.719 276.344 9.723 276.266 cv
9.734 276.191 9.75 276.133 9.77 276.09 cv
9.797 276.051 9.82 276.023 9.848 276.004 cv
9.879 275.988 9.914 275.98 9.953 275.977 cv
10.879 275.977 li
10.438 275.586 10.117 275.203 9.91 274.828 cv
9.707 274.461 9.602 274.082 9.602 273.699 cv
9.602 273.41 9.637 273.152 9.703 272.918 cv
9.773 272.691 9.867 272.484 9.988 272.305 cv
10.109 272.129 10.254 271.98 10.422 271.852 cv
10.594 271.73 10.785 271.625 10.988 271.539 cv
10.738 271.309 10.523 271.086 10.344 270.875 cv
10.172 270.664 10.027 270.461 9.914 270.266 cv
9.809 270.07 9.73 269.883 9.676 269.699 cv
9.629 269.516 9.602 269.328 9.602 269.141 cv
9.602 268.687 9.684 268.309 9.84 268.004 cv
10.004 267.699 10.215 267.453 10.477 267.258 cv
10.742 267.07 11.051 266.934 11.406 266.852 cv
11.762 266.773 12.137 266.734 12.531 266.73 cv
cp
f
13.156 258.398 mo
13.359 258.402 13.5 258.453 13.586 258.551 cv
13.672 258.656 13.715 258.773 13.715 258.898 cv
13.715 263.516 li
14.105 263.52 14.457 263.48 14.77 263.398 cv
15.082 263.324 15.352 263.191 15.57 263.008 cv
15.797 262.828 15.969 262.594 16.086 262.297 cv
16.211 262.008 16.27 261.648 16.266 261.223 cv
16.27 260.891 16.242 260.594 16.184 260.332 cv
16.133 260.07 16.07 259.844 16 259.652 cv
15.934 259.465 15.875 259.309 15.816 259.184 cv
15.766 259.062 15.738 258.969 15.734 258.906 cv
15.738 258.871 15.746 258.84 15.762 258.809 cv
15.781 258.781 15.809 258.758 15.844 258.738 cv
15.883 258.727 15.934 258.715 15.996 258.703 cv
16.063 258.699 16.141 258.695 16.234 258.691 cv
16.305 258.695 16.363 258.699 16.41 258.699 cv
16.457 258.707 16.5 258.711 16.539 258.719 cv
16.578 258.727 16.613 258.742 16.645 258.758 cv
16.676 258.781 16.707 258.805 16.734 258.828 cv
16.766 258.859 16.813 258.941 16.875 259.082 cv
16.941 259.223 17.004 259.406 17.066 259.629 cv
17.129 259.855 17.184 260.113 17.234 260.406 cv
17.281 260.699 17.305 261.012 17.309 261.344 cv
17.305 261.922 17.227 262.43 17.066 262.859 cv
16.906 263.297 16.668 263.66 16.352 263.953 cv
16.035 264.254 15.641 264.477 15.16 264.625 cv
14.684 264.773 14.125 264.848 13.488 264.848 cv
12.891 264.848 12.352 264.773 11.867 264.617 cv
11.391 264.465 10.98 264.238 10.645 263.941 cv
10.309 263.648 10.051 263.293 9.871 262.879 cv
9.691 262.465 9.602 262 9.602 261.484 cv
9.602 260.934 9.691 260.465 9.867 260.078 cv
10.047 259.691 10.285 259.375 10.582 259.121 cv
10.883 258.875 11.234 258.691 11.633 258.574 cv
12.039 258.461 12.469 258.402 12.922 258.398 cv
cp
12.773 259.691 mo
12.098 259.676 11.566 259.828 11.184 260.145 cv
10.801 260.461 10.609 260.93 10.605 261.547 cv
10.609 261.871 10.668 262.152 10.785 262.391 cv
10.906 262.633 11.066 262.832 11.262 262.992 cv
11.461 263.156 11.691 263.281 11.953 263.367 cv
12.215 263.457 12.488 263.508 12.773 263.516 cv
cp
f
6.422 250.223 mo
7.469 250.719 8.539 251.086 9.637 251.328 cv
10.738 251.57 11.844 251.691 12.953 251.691 cv
14.07 251.691 15.18 251.57 16.273 251.32 cv
17.371 251.078 18.441 250.715 19.496 250.238 cv
19.555 250.215 19.609 250.203 19.656 250.195 cv
19.699 250.195 19.734 250.211 19.766 250.246 cv
19.793 250.285 19.813 250.34 19.828 250.414 cv
19.836 250.492 19.844 250.598 19.848 250.723 cv
19.844 250.82 19.84 250.898 19.84 250.965 cv
19.832 251.035 19.824 251.094 19.809 251.141 cv
19.793 251.191 19.773 251.234 19.754 251.262 cv
19.73 251.297 19.707 251.32 19.684 251.332 cv
19.152 251.613 18.617 251.859 18.074 252.07 cv
17.531 252.289 16.98 252.469 16.422 252.609 cv
15.859 252.758 15.293 252.867 14.719 252.937 cv
14.145 253.016 13.563 253.051 12.977 253.047 cv
12.391 253.051 11.813 253.012 11.238 252.926 cv
10.668 252.848 10.102 252.73 9.535 252.582 cv
8.973 252.434 8.418 252.254 7.871 252.043 cv
7.328 251.832 6.785 251.594 6.25 251.324 cv
6.23 251.32 6.215 251.305 6.195 251.281 cv
6.184 251.258 6.168 251.227 6.148 251.184 cv
6.137 251.145 6.125 251.086 6.113 251.012 cv
6.109 250.941 6.105 250.848 6.102 250.73 cv
6.105 250.613 6.113 250.52 6.125 250.441 cv
6.145 250.371 6.164 250.312 6.188 250.27 cv
6.215 250.23 6.25 250.207 6.289 250.199 cv
6.336 250.195 6.379 250.203 6.422 250.223 cv
cp
f
16.957 236.941 mo
17 236.941 17.035 236.953 17.066 236.973 cv
17.098 236.996 17.125 237.035 17.141 237.086 cv
17.16 237.141 17.172 237.207 17.188 237.289 cv
17.199 237.375 17.207 237.484 17.207 237.613 cv
17.207 237.742 17.199 237.848 17.188 237.934 cv
17.172 238.023 17.16 238.094 17.141 238.145 cv
17.125 238.195 17.098 238.23 17.066 238.25 cv
17.035 238.273 17 238.285 16.957 238.281 cv
8.176 238.281 li
8.176 238.297 li
16.996 241.852 li
17.035 241.867 17.066 241.891 17.09 241.918 cv
17.117 241.949 17.141 241.992 17.156 242.043 cv
17.176 242.102 17.188 242.164 17.195 242.238 cv
17.203 242.312 17.207 242.402 17.207 242.504 cv
17.207 242.617 17.199 242.711 17.191 242.785 cv
17.176 242.867 17.164 242.934 17.148 242.98 cv
17.133 243.035 17.113 243.074 17.082 243.102 cv
17.059 243.133 17.027 243.152 16.996 243.16 cv
8.176 246.559 li
8.176 246.566 li
16.957 246.566 li
17 246.57 17.035 246.578 17.066 246.598 cv
17.098 246.621 17.125 246.66 17.141 246.711 cv
17.16 246.766 17.172 246.836 17.188 246.918 cv
17.199 247.008 17.207 247.117 17.207 247.246 cv
17.207 247.379 17.199 247.484 17.188 247.57 cv
17.172 247.656 17.16 247.727 17.141 247.773 cv
17.125 247.828 17.098 247.863 17.066 247.879 cv
17.035 247.902 17 247.91 16.957 247.906 cv
7.684 247.906 li
7.469 247.91 7.313 247.852 7.215 247.734 cv
7.125 247.617 7.078 247.488 7.074 247.344 cv
7.074 246.52 li
7.078 246.355 7.094 246.207 7.121 246.078 cv
7.156 245.953 7.203 245.844 7.27 245.746 cv
7.34 245.652 7.426 245.57 7.527 245.508 cv
7.633 245.445 7.758 245.391 7.895 245.344 cv
15.195 242.457 li
15.195 242.418 li
7.918 239.418 li
7.766 239.363 7.633 239.301 7.52 239.23 cv
7.414 239.164 7.324 239.086 7.258 239.004 cv
7.195 238.922 7.148 238.832 7.117 238.73 cv
7.09 238.633 7.078 238.516 7.074 238.383 cv
7.074 237.52 li
7.078 237.441 7.09 237.363 7.109 237.293 cv
7.137 237.223 7.172 237.164 7.219 237.113 cv
7.27 237.062 7.332 237.02 7.406 236.988 cv
7.484 236.957 7.578 236.941 7.684 236.941 cv
cp
f
16.965 233.125 mo
17.012 233.129 17.047 233.141 17.07 233.156 cv
17.102 233.18 17.125 233.211 17.145 233.258 cv
17.164 233.305 17.176 233.371 17.191 233.449 cv
17.199 233.535 17.207 233.641 17.207 233.77 cv
17.207 233.898 17.199 234.004 17.191 234.082 cv
17.176 234.168 17.164 234.234 17.145 234.281 cv
17.125 234.336 17.102 234.367 17.07 234.383 cv
17.047 234.402 17.012 234.414 16.965 234.41 cv
9.953 234.41 li
9.918 234.414 9.887 234.402 9.852 234.383 cv
9.824 234.367 9.797 234.336 9.773 234.281 cv
9.754 234.234 9.738 234.168 9.727 234.082 cv
9.719 234.004 9.715 233.898 9.711 233.77 cv
9.715 233.641 9.719 233.535 9.727 233.449 cv
9.738 233.371 9.754 233.305 9.773 233.258 cv
9.797 233.211 9.824 233.18 9.852 233.156 cv
9.887 233.141 9.918 233.129 9.953 233.125 cv
cp
7.582 232.977 mo
7.887 232.977 8.094 233.035 8.199 233.148 cv
8.313 233.262 8.367 233.473 8.363 233.777 cv
8.367 234.082 8.313 234.289 8.203 234.398 cv
8.098 234.516 7.895 234.57 7.598 234.566 cv
7.297 234.57 7.094 234.512 6.984 234.395 cv
6.879 234.281 6.824 234.07 6.82 233.762 cv
6.824 233.461 6.879 233.258 6.98 233.145 cv
7.09 233.035 7.289 232.977 7.582 232.977 cv
cp
f
16.965 224.699 mo
17.012 224.699 17.047 224.711 17.07 224.73 cv
17.102 224.754 17.125 224.789 17.145 224.832 cv
17.164 224.883 17.176 224.945 17.191 225.027 cv
17.199 225.109 17.207 225.215 17.207 225.336 cv
17.207 225.469 17.199 225.574 17.191 225.656 cv
17.176 225.742 17.164 225.809 17.145 225.852 cv
17.125 225.902 17.102 225.934 17.07 225.953 cv
17.047 225.977 17.012 225.988 16.965 225.984 cv
12.859 225.984 li
12.461 225.988 12.141 226.02 11.895 226.078 cv
11.652 226.145 11.441 226.234 11.262 226.352 cv
11.086 226.469 10.949 226.625 10.855 226.812 cv
10.762 227.008 10.715 227.227 10.715 227.473 cv
10.715 227.797 10.832 228.121 11.059 228.441 cv
11.293 228.766 11.625 229.102 12.063 229.453 cv
16.965 229.453 li
17.012 229.457 17.047 229.469 17.07 229.484 cv
17.102 229.508 17.125 229.539 17.145 229.586 cv
17.164 229.633 17.176 229.699 17.191 229.777 cv
17.199 229.863 17.207 229.969 17.207 230.098 cv
17.207 230.227 17.199 230.332 17.191 230.41 cv
17.176 230.496 17.164 230.562 17.145 230.609 cv
17.125 230.664 17.102 230.695 17.07 230.711 cv
17.047 230.73 17.012 230.742 16.965 230.738 cv
9.953 230.738 li
9.914 230.742 9.879 230.734 9.848 230.715 cv
9.82 230.703 9.797 230.672 9.77 230.621 cv
9.75 230.578 9.734 230.516 9.723 230.441 cv
9.719 230.371 9.715 230.277 9.711 230.152 cv
9.715 230.043 9.719 229.945 9.723 229.867 cv
9.734 229.793 9.75 229.734 9.77 229.691 cv
9.797 229.652 9.82 229.625 9.848 229.605 cv
9.879 229.59 9.914 229.582 9.953 229.578 cv
10.879 229.578 li
10.438 229.187 10.117 228.793 9.91 228.398 cv
9.707 228.008 9.602 227.609 9.602 227.207 cv
9.602 226.738 9.684 226.348 9.84 226.027 cv
10.004 225.711 10.215 225.449 10.477 225.25 cv
10.742 225.055 11.051 224.914 11.406 224.828 cv
11.762 224.742 12.191 224.699 12.688 224.699 cv
cp
f
16.965 216.305 mo
17.012 216.309 17.047 216.316 17.07 216.332 cv
17.102 216.352 17.125 216.387 17.145 216.43 cv
17.164 216.477 17.176 216.535 17.191 216.609 cv
17.199 216.687 17.207 216.781 17.207 216.887 cv
17.207 217.012 17.199 217.109 17.191 217.18 cv
17.176 217.258 17.164 217.316 17.145 217.359 cv
17.125 217.406 17.102 217.437 17.07 217.449 cv
17.047 217.469 17.012 217.477 16.965 217.473 cv
16.039 217.473 li
16.484 217.875 16.805 218.27 17.004 218.656 cv
17.207 219.051 17.305 219.445 17.309 219.84 cv
17.305 220.312 17.23 220.707 17.074 221.023 cv
16.922 221.344 16.711 221.602 16.441 221.797 cv
16.176 222 15.863 222.141 15.504 222.223 cv
15.148 222.312 14.715 222.355 14.207 222.352 cv
9.953 222.352 li
9.914 222.355 9.879 222.348 9.848 222.324 cv
9.82 222.309 9.797 222.273 9.77 222.219 cv
9.75 222.172 9.734 222.102 9.723 222.016 cv
9.719 221.934 9.715 221.832 9.711 221.703 cv
9.715 221.582 9.719 221.477 9.723 221.391 cv
9.734 221.309 9.75 221.242 9.77 221.195 cv
9.797 221.148 9.82 221.113 9.848 221.09 cv
9.879 221.07 9.914 221.062 9.953 221.059 cv
14.035 221.059 li
14.449 221.062 14.777 221.031 15.023 220.969 cv
15.27 220.91 15.48 220.82 15.652 220.695 cv
15.832 220.578 15.965 220.422 16.059 220.23 cv
16.156 220.047 16.207 219.828 16.203 219.578 cv
16.207 219.258 16.09 218.937 15.859 218.613 cv
15.633 218.297 15.297 217.957 14.852 217.598 cv
9.953 217.598 li
9.914 217.598 9.879 217.59 9.848 217.57 cv
9.82 217.555 9.797 217.52 9.77 217.465 cv
9.75 217.414 9.734 217.348 9.723 217.266 cv
9.719 217.187 9.715 217.082 9.711 216.949 cv
9.715 216.828 9.719 216.723 9.723 216.637 cv
9.734 216.555 9.75 216.492 9.77 216.445 cv
9.797 216.402 9.82 216.367 9.848 216.34 cv
9.879 216.32 9.914 216.309 9.953 216.305 cv
cp
f
16.449 210.285 mo
16.605 210.285 16.723 210.297 16.809 210.316 cv
16.898 210.34 16.965 210.371 17.004 210.41 cv
17.047 210.453 17.086 210.516 17.121 210.598 cv
17.156 210.684 17.184 210.777 17.211 210.883 cv
17.23 210.992 17.25 211.105 17.27 211.223 cv
17.281 211.34 17.289 211.461 17.293 211.578 cv
17.289 211.945 17.242 212.258 17.148 212.516 cv
17.055 212.777 16.91 212.988 16.711 213.152 cv
16.52 213.32 16.273 213.441 15.973 213.516 cv
15.676 213.594 15.324 213.633 14.914 213.629 cv
10.816 213.629 li
10.816 214.609 li
10.82 214.687 10.777 214.75 10.691 214.797 cv
10.609 214.844 10.477 214.867 10.285 214.867 cv
10.191 214.867 10.109 214.863 10.039 214.848 cv
9.977 214.84 9.918 214.82 9.871 214.797 cv
9.828 214.777 9.797 214.75 9.777 214.715 cv
9.762 214.684 9.754 214.648 9.75 214.602 cv
9.75 213.629 li
8.082 213.629 li
8.051 213.633 8.016 213.621 7.98 213.602 cv
7.953 213.586 7.926 213.555 7.898 213.5 cv
7.879 213.453 7.863 213.387 7.848 213.301 cv
7.84 213.223 7.832 213.117 7.832 212.988 cv
7.832 212.859 7.84 212.754 7.848 212.672 cv
7.863 212.59 7.879 212.523 7.898 212.477 cv
7.926 212.43 7.953 212.398 7.98 212.375 cv
8.016 212.359 8.051 212.348 8.082 212.344 cv
9.75 212.344 li
9.75 210.543 li
9.754 210.504 9.762 210.469 9.777 210.434 cv
9.797 210.406 9.828 210.379 9.871 210.352 cv
9.918 210.332 9.977 210.316 10.039 210.301 cv
10.109 210.293 10.191 210.285 10.285 210.285 cv
10.477 210.285 10.609 210.309 10.691 210.355 cv
10.777 210.402 10.82 210.465 10.816 210.543 cv
10.816 212.344 li
14.73 212.344 li
15.215 212.348 15.578 212.277 15.824 212.129 cv
16.074 211.988 16.199 211.73 16.195 211.359 cv
16.199 211.246 16.188 211.141 16.16 211.043 cv
16.141 210.953 16.117 210.871 16.086 210.793 cv
16.063 210.723 16.035 210.66 16.012 210.605 cv
15.988 210.559 15.977 210.512 15.977 210.465 cv
15.977 210.441 15.984 210.414 15.996 210.391 cv
16.012 210.367 16.035 210.352 16.07 210.336 cv
16.109 210.328 16.16 210.316 16.219 210.301 cv
16.285 210.293 16.363 210.285 16.449 210.285 cv
cp
f
13.156 202.602 mo
13.359 202.605 13.5 202.656 13.586 202.754 cv
13.672 202.859 13.715 202.977 13.715 203.102 cv
13.715 207.719 li
14.105 207.723 14.457 207.684 14.77 207.602 cv
15.082 207.527 15.352 207.395 15.57 207.211 cv
15.797 207.031 15.969 206.797 16.086 206.5 cv
16.211 206.211 16.27 205.852 16.266 205.426 cv
16.27 205.094 16.242 204.797 16.184 204.535 cv
16.133 204.273 16.07 204.047 16 203.855 cv
15.934 203.668 15.875 203.512 15.816 203.387 cv
15.766 203.266 15.738 203.172 15.734 203.109 cv
15.738 203.074 15.746 203.043 15.762 203.012 cv
15.781 202.984 15.809 202.961 15.844 202.941 cv
15.883 202.93 15.934 202.918 15.996 202.906 cv
16.063 202.902 16.141 202.898 16.234 202.895 cv
16.305 202.898 16.363 202.902 16.41 202.902 cv
16.457 202.91 16.5 202.914 16.539 202.922 cv
16.578 202.93 16.613 202.945 16.645 202.961 cv
16.676 202.984 16.707 203.008 16.734 203.031 cv
16.766 203.062 16.813 203.145 16.875 203.285 cv
16.941 203.426 17.004 203.609 17.066 203.832 cv
17.129 204.059 17.184 204.316 17.234 204.609 cv
17.281 204.902 17.305 205.215 17.309 205.547 cv
17.305 206.125 17.227 206.633 17.066 207.062 cv
16.906 207.5 16.668 207.863 16.352 208.156 cv
16.035 208.457 15.641 208.68 15.16 208.828 cv
14.684 208.977 14.125 209.051 13.488 209.051 cv
12.891 209.051 12.352 208.977 11.867 208.82 cv
11.391 208.668 10.98 208.441 10.645 208.145 cv
10.309 207.852 10.051 207.496 9.871 207.082 cv
9.691 206.668 9.602 206.203 9.602 205.687 cv
9.602 205.137 9.691 204.668 9.867 204.281 cv
10.047 203.895 10.285 203.578 10.582 203.324 cv
10.883 203.078 11.234 202.895 11.633 202.777 cv
12.039 202.664 12.469 202.605 12.922 202.602 cv
cp
12.773 203.895 mo
12.098 203.879 11.566 204.031 11.184 204.348 cv
10.801 204.664 10.609 205.133 10.605 205.75 cv
10.609 206.074 10.668 206.355 10.785 206.594 cv
10.906 206.836 11.066 207.035 11.262 207.195 cv
11.461 207.359 11.691 207.484 11.953 207.57 cv
12.215 207.66 12.488 207.711 12.773 207.719 cv
cp
f
15.055 196.316 mo
15.418 196.32 15.738 196.387 16.016 196.516 cv
16.297 196.648 16.531 196.836 16.723 197.078 cv
16.918 197.324 17.063 197.617 17.16 197.953 cv
17.258 198.293 17.305 198.664 17.309 199.066 cv
17.305 199.32 17.285 199.559 17.25 199.781 cv
17.207 200.008 17.16 200.207 17.102 200.387 cv
17.043 200.566 16.98 200.719 16.914 200.844 cv
16.852 200.969 16.793 201.062 16.738 201.117 cv
16.688 201.176 16.617 201.215 16.52 201.238 cv
16.43 201.266 16.301 201.277 16.141 201.277 cv
16.043 201.277 15.961 201.273 15.891 201.262 cv
15.824 201.254 15.77 201.242 15.727 201.223 cv
15.688 201.211 15.656 201.187 15.637 201.16 cv
15.621 201.133 15.613 201.102 15.609 201.062 cv
15.613 201.008 15.648 200.922 15.715 200.809 cv
15.789 200.699 15.867 200.562 15.945 200.395 cv
16.031 200.234 16.105 200.043 16.176 199.816 cv
16.246 199.598 16.281 199.34 16.281 199.043 cv
16.281 198.828 16.258 198.629 16.211 198.449 cv
16.164 198.273 16.098 198.121 16.004 197.992 cv
15.918 197.863 15.801 197.762 15.656 197.691 cv
15.52 197.621 15.352 197.586 15.156 197.586 cv
14.961 197.586 14.797 197.637 14.66 197.738 cv
14.527 197.84 14.406 197.977 14.301 198.141 cv
14.199 198.309 14.109 198.492 14.023 198.699 cv
13.945 198.91 13.859 199.125 13.77 199.344 cv
13.684 199.562 13.582 199.777 13.469 199.988 cv
13.359 200.199 13.227 200.391 13.063 200.555 cv
12.906 200.727 12.711 200.859 12.484 200.957 cv
12.262 201.062 11.996 201.113 11.684 201.109 cv
11.41 201.113 11.145 201.059 10.891 200.949 cv
10.641 200.844 10.422 200.684 10.23 200.469 cv
10.043 200.258 9.891 199.992 9.773 199.672 cv
9.66 199.352 9.602 198.98 9.602 198.551 cv
9.602 198.367 9.617 198.18 9.648 197.992 cv
9.68 197.809 9.719 197.641 9.766 197.484 cv
9.813 197.336 9.863 197.207 9.918 197.098 cv
9.973 196.996 10.023 196.914 10.063 196.855 cv
10.109 196.805 10.145 196.77 10.172 196.746 cv
10.203 196.73 10.238 196.715 10.273 196.707 cv
10.316 196.699 10.363 196.691 10.418 196.684 cv
10.477 196.676 10.547 196.672 10.629 196.672 cv
10.719 196.672 10.797 196.676 10.859 196.684 cv
10.93 196.691 10.98 196.707 11.02 196.723 cv
11.063 196.746 11.094 196.766 11.109 196.789 cv
11.129 196.816 11.137 196.848 11.137 196.875 cv
11.137 196.926 11.109 196.992 11.051 197.078 cv
10.996 197.168 10.934 197.281 10.867 197.422 cv
10.805 197.562 10.746 197.73 10.684 197.918 cv
10.629 198.109 10.598 198.324 10.598 198.566 cv
10.598 198.789 10.625 198.98 10.672 199.145 cv
10.727 199.312 10.797 199.449 10.883 199.555 cv
10.977 199.66 11.082 199.742 11.207 199.793 cv
11.332 199.852 11.469 199.879 11.613 199.875 cv
11.816 199.879 11.984 199.828 12.121 199.723 cv
12.262 199.621 12.383 199.484 12.484 199.316 cv
12.59 199.152 12.684 198.961 12.766 198.746 cv
12.852 198.535 12.938 198.32 13.023 198.098 cv
13.113 197.879 13.215 197.66 13.32 197.441 cv
13.43 197.227 13.559 197.035 13.715 196.867 cv
13.871 196.703 14.059 196.57 14.277 196.469 cv
14.496 196.371 14.758 196.32 15.055 196.316 cv
cp
f
12.977 191.871 mo
13.563 191.871 14.145 191.91 14.719 191.98 cv
15.293 192.059 15.859 192.168 16.422 192.309 cv
16.98 192.457 17.531 192.633 18.074 192.844 cv
18.617 193.055 19.152 193.301 19.684 193.578 cv
19.707 193.598 19.73 193.621 19.754 193.648 cv
19.773 193.684 19.793 193.723 19.809 193.77 cv
19.824 193.82 19.832 193.879 19.84 193.945 cv
19.84 194.016 19.844 194.098 19.848 194.187 cv
19.844 194.324 19.836 194.43 19.828 194.504 cv
19.813 194.582 19.793 194.637 19.766 194.668 cv
19.734 194.703 19.699 194.719 19.656 194.715 cv
19.609 194.715 19.555 194.699 19.496 194.672 cv
18.445 194.195 17.375 193.836 16.277 193.59 cv
15.18 193.348 14.07 193.227 12.953 193.223 cv
11.844 193.227 10.738 193.348 9.637 193.59 cv
8.539 193.836 7.469 194.203 6.422 194.687 cv
6.379 194.711 6.336 194.719 6.289 194.711 cv
6.25 194.711 6.215 194.687 6.188 194.641 cv
6.164 194.602 6.145 194.543 6.125 194.469 cv
6.113 194.398 6.105 194.301 6.102 194.18 cv
6.105 194.07 6.109 193.98 6.113 193.906 cv
6.125 193.836 6.137 193.777 6.148 193.73 cv
6.168 193.687 6.184 193.656 6.195 193.633 cv
6.215 193.617 6.23 193.602 6.25 193.586 cv
7.316 193.055 8.414 192.633 9.535 192.328 cv
10.664 192.023 11.809 191.871 12.977 191.871 cv
cp
f
265.57 520.414 mo
265.566 520.52 265.551 520.609 265.516 520.68 cv
265.48 520.758 265.434 520.816 265.379 520.859 cv
265.32 520.91 265.258 520.945 265.191 520.961 cv
265.117 520.984 265.047 520.992 264.984 520.992 cv
264.539 520.992 li
264.398 520.992 264.277 520.98 264.172 520.949 cv
264.066 520.926 263.969 520.871 263.875 520.793 cv
263.781 520.719 263.688 520.617 263.594 520.484 cv
263.5 520.355 263.398 520.191 263.293 519.988 cv
260.219 514.25 li
260.055 513.957 259.891 513.648 259.73 513.32 cv
259.563 513 259.41 512.684 259.273 512.375 cv
259.258 512.375 li
259.266 512.75 259.273 513.133 259.281 513.52 cv
259.285 513.91 259.285 514.297 259.289 514.68 cv
259.289 520.766 li
259.285 520.805 259.273 520.84 259.254 520.871 cv
259.23 520.906 259.195 520.934 259.145 520.949 cv
259.09 520.969 259.02 520.98 258.938 520.996 cv
258.852 521.008 258.746 521.016 258.617 521.016 cv
258.48 521.016 258.371 521.008 258.289 520.996 cv
258.203 520.98 258.137 520.969 258.09 520.949 cv
258.039 520.934 258.004 520.906 257.98 520.871 cv
257.957 520.84 257.945 520.805 257.949 520.766 cv
257.949 511.461 li
257.945 511.254 258.004 511.105 258.125 511.016 cv
258.242 510.93 258.371 510.887 258.512 510.883 cv
259.172 510.883 li
259.324 510.887 259.457 510.898 259.563 510.922 cv
259.664 510.949 259.758 510.992 259.844 511.051 cv
259.926 511.113 260.004 511.195 260.086 511.301 cv
260.16 511.41 260.242 511.547 260.328 511.703 cv
262.695 516.129 li
262.84 516.402 262.98 516.668 263.117 516.922 cv
263.25 517.18 263.379 517.434 263.508 517.68 cv
263.629 517.934 263.754 518.18 263.879 518.418 cv
264 518.66 264.121 518.902 264.246 519.145 cv
264.254 519.145 li
264.242 518.738 264.234 518.309 264.234 517.863 cv
264.227 517.418 264.227 516.992 264.23 516.582 cv
264.23 511.109 li
264.227 511.074 264.238 511.039 264.262 511.008 cv
264.285 510.977 264.32 510.949 264.375 510.926 cv
264.422 510.902 264.492 510.887 264.578 510.875 cv
264.664 510.867 264.773 510.863 264.914 510.859 cv
265.031 510.863 265.137 510.867 265.227 510.875 cv
265.313 510.887 265.379 510.902 265.43 510.926 cv
265.477 510.949 265.512 510.977 265.535 511.008 cv
265.555 511.039 265.566 511.074 265.57 511.109 cv
cp
f
274.121 520.773 mo
274.117 520.82 274.109 520.855 274.094 520.879 cv
274.074 520.91 274.039 520.934 273.996 520.953 cv
273.949 520.973 273.891 520.984 273.816 521 cv
273.738 521.008 273.645 521.016 273.539 521.016 cv
273.414 521.016 273.316 521.008 273.246 521 cv
273.168 520.984 273.109 520.973 273.066 520.953 cv
273.02 520.934 272.988 520.91 272.977 520.879 cv
272.957 520.855 272.949 520.82 272.953 520.773 cv
272.953 519.848 li
272.551 520.293 272.156 520.613 271.77 520.812 cv
271.375 521.016 270.98 521.113 270.586 521.117 cv
270.113 521.113 269.719 521.039 269.402 520.883 cv
269.082 520.73 268.824 520.52 268.629 520.25 cv
268.426 519.984 268.285 519.672 268.203 519.312 cv
268.113 518.957 268.07 518.523 268.074 518.016 cv
268.074 513.762 li
268.07 513.723 268.078 513.687 268.102 513.656 cv
268.117 513.629 268.152 513.605 268.207 513.578 cv
268.254 513.559 268.324 513.543 268.41 513.531 cv
268.492 513.527 268.594 513.523 268.723 513.52 cv
268.844 513.523 268.949 513.527 269.035 513.531 cv
269.117 513.543 269.184 513.559 269.23 513.578 cv
269.277 513.605 269.313 513.629 269.336 513.656 cv
269.355 513.687 269.363 513.723 269.367 513.762 cv
269.367 517.844 li
269.363 518.258 269.395 518.586 269.457 518.832 cv
269.516 519.078 269.605 519.289 269.73 519.461 cv
269.848 519.641 270.004 519.773 270.195 519.867 cv
270.379 519.965 270.598 520.016 270.848 520.012 cv
271.168 520.016 271.488 519.898 271.813 519.668 cv
272.129 519.441 272.469 519.105 272.828 518.66 cv
272.828 513.762 li
272.828 513.723 272.836 513.687 272.855 513.656 cv
272.871 513.629 272.906 513.605 272.961 513.578 cv
273.012 513.559 273.078 513.543 273.16 513.531 cv
273.238 513.527 273.344 513.523 273.477 513.52 cv
273.598 513.523 273.703 513.527 273.789 513.531 cv
273.871 513.543 273.934 513.559 273.98 513.578 cv
274.023 513.605 274.059 513.629 274.086 513.656 cv
274.105 513.687 274.117 513.723 274.121 513.762 cv
cp
f
286.898 520.773 mo
286.895 520.82 286.887 520.855 286.867 520.879 cv
286.844 520.91 286.809 520.934 286.766 520.953 cv
286.715 520.973 286.648 520.984 286.57 521 cv
286.484 521.008 286.383 521.016 286.258 521.016 cv
286.125 521.016 286.016 521.008 285.938 521 cv
285.852 520.984 285.785 520.973 285.738 520.953 cv
285.684 520.934 285.648 520.91 285.633 520.879 cv
285.609 520.855 285.602 520.82 285.602 520.773 cv
285.602 516.512 li
285.602 516.219 285.574 515.949 285.523 515.703 cv
285.469 515.461 285.387 515.25 285.273 515.07 cv
285.16 514.895 285.016 514.758 284.84 514.664 cv
284.66 514.57 284.449 514.523 284.215 514.523 cv
283.918 514.523 283.621 514.641 283.324 514.867 cv
283.02 515.102 282.691 515.434 282.336 515.871 cv
282.336 520.773 li
282.332 520.82 282.32 520.855 282.305 520.879 cv
282.281 520.91 282.25 520.934 282.203 520.953 cv
282.152 520.973 282.086 520.984 282.004 521 cv
281.918 521.008 281.813 521.016 281.691 521.016 cv
281.57 521.016 281.469 521.008 281.383 521 cv
281.297 520.984 281.227 520.973 281.18 520.953 cv
281.125 520.934 281.094 520.91 281.078 520.879 cv
281.059 520.855 281.047 520.82 281.051 520.773 cv
281.051 516.512 li
281.047 516.219 281.02 515.949 280.965 515.703 cv
280.906 515.461 280.82 515.25 280.707 515.07 cv
280.594 514.895 280.449 514.758 280.277 514.664 cv
280.098 514.57 279.891 514.523 279.656 514.523 cv
279.355 514.523 279.059 514.641 278.758 514.867 cv
278.457 515.102 278.129 515.434 277.777 515.871 cv
277.777 520.773 li
277.773 520.82 277.762 520.855 277.746 520.879 cv
277.723 520.91 277.691 520.934 277.645 520.953 cv
277.598 520.973 277.531 520.984 277.453 521 cv
277.367 521.008 277.262 521.016 277.133 521.016 cv
277.004 521.016 276.898 521.008 276.82 521 cv
276.734 520.984 276.668 520.973 276.621 520.953 cv
276.566 520.934 276.535 520.91 276.52 520.879 cv
276.5 520.855 276.488 520.82 276.492 520.773 cv
276.492 513.762 li
276.488 513.723 276.496 513.687 276.516 513.656 cv
276.527 513.629 276.559 513.605 276.609 513.578 cv
276.652 513.559 276.715 513.543 276.789 513.531 cv
276.859 513.527 276.953 513.523 277.078 513.52 cv
277.188 513.523 277.285 513.527 277.363 513.531 cv
277.438 513.543 277.496 513.559 277.539 513.578 cv
277.578 513.605 277.605 513.629 277.625 513.656 cv
277.641 513.687 277.648 513.723 277.652 513.762 cv
277.652 514.687 li
278.043 514.246 278.426 513.926 278.801 513.719 cv
279.168 513.516 279.547 513.41 279.93 513.41 cv
280.219 513.41 280.477 513.445 280.711 513.512 cv
280.938 513.582 281.145 513.676 281.324 513.797 cv
281.5 513.918 281.648 514.062 281.777 514.23 cv
281.898 514.402 282.004 514.594 282.09 514.797 cv
282.32 514.547 282.543 514.332 282.754 514.152 cv
282.965 513.98 283.168 513.836 283.363 513.723 cv
283.559 513.617 283.746 513.539 283.93 513.484 cv
284.113 513.437 284.301 513.41 284.488 513.41 cv
284.941 513.41 285.32 513.492 285.625 513.648 cv
285.93 513.812 286.176 514.023 286.371 514.285 cv
286.559 514.551 286.695 514.859 286.777 515.215 cv
286.855 515.57 286.895 515.945 286.898 516.34 cv
cp
f
295.695 517.172 mo
295.691 517.781 295.625 518.332 295.496 518.816 cv
295.359 519.305 295.164 519.719 294.91 520.059 cv
294.652 520.402 294.336 520.664 293.965 520.844 cv
293.59 521.027 293.164 521.113 292.68 521.117 cv
292.453 521.113 292.246 521.094 292.059 521.051 cv
291.871 521.004 291.684 520.934 291.504 520.836 cv
291.316 520.738 291.137 520.613 290.957 520.461 cv
290.773 520.312 290.582 520.133 290.383 519.918 cv
290.383 520.773 li
290.383 520.82 290.371 520.855 290.352 520.883 cv
290.328 520.918 290.293 520.941 290.25 520.957 cv
290.199 520.973 290.141 520.984 290.074 521 cv
290 521.008 289.91 521.016 289.805 521.016 cv
289.695 521.016 289.609 521.008 289.539 521 cv
289.465 520.984 289.402 520.973 289.359 520.957 cv
289.309 520.941 289.277 520.918 289.266 520.883 cv
289.246 520.855 289.238 520.82 289.242 520.773 cv
289.242 510.363 li
289.238 510.324 289.25 510.289 289.27 510.254 cv
289.285 510.227 289.316 510.199 289.371 510.176 cv
289.418 510.156 289.484 510.141 289.57 510.129 cv
289.648 510.121 289.754 510.117 289.883 510.113 cv
290.012 510.117 290.117 510.121 290.203 510.129 cv
290.281 510.141 290.348 510.156 290.395 510.176 cv
290.441 510.199 290.473 510.227 290.496 510.254 cv
290.512 510.289 290.523 510.324 290.527 510.363 cv
290.527 514.562 li
290.734 514.352 290.938 514.172 291.133 514.027 cv
291.328 513.883 291.516 513.766 291.703 513.672 cv
291.887 513.586 292.074 513.52 292.266 513.473 cv
292.449 513.434 292.648 513.41 292.859 513.41 cv
293.363 513.41 293.797 513.512 294.164 513.715 cv
294.523 513.918 294.816 514.191 295.043 514.527 cv
295.266 514.871 295.434 515.27 295.539 515.727 cv
295.641 516.184 295.691 516.664 295.695 517.172 cv
cp
294.363 517.32 mo
294.359 516.965 294.332 516.617 294.281 516.277 cv
294.223 515.941 294.129 515.645 293.992 515.383 cv
293.855 515.125 293.676 514.914 293.453 514.754 cv
293.227 514.598 292.945 514.52 292.613 514.516 cv
292.445 514.52 292.281 514.543 292.121 514.586 cv
291.957 514.637 291.793 514.715 291.625 514.82 cv
291.457 514.934 291.281 515.074 291.105 515.242 cv
290.922 515.418 290.73 515.633 290.527 515.887 cv
290.527 518.684 li
290.883 519.117 291.223 519.449 291.547 519.672 cv
291.871 519.902 292.207 520.016 292.559 520.012 cv
292.879 520.016 293.156 519.937 293.391 519.777 cv
293.617 519.625 293.805 519.418 293.949 519.156 cv
294.094 518.902 294.199 518.613 294.266 518.293 cv
294.328 517.977 294.359 517.652 294.363 517.32 cv
cp
f
303.605 516.965 mo
303.602 517.168 303.551 517.309 303.453 517.395 cv
303.348 517.48 303.23 517.523 303.105 517.523 cv
298.488 517.523 li
298.484 517.914 298.523 518.266 298.605 518.578 cv
298.68 518.891 298.813 519.16 298.996 519.379 cv
299.176 519.605 299.41 519.777 299.707 519.895 cv
299.996 520.02 300.355 520.078 300.781 520.074 cv
301.113 520.078 301.41 520.051 301.672 519.992 cv
301.934 519.941 302.16 519.879 302.352 519.809 cv
302.539 519.742 302.695 519.684 302.82 519.625 cv
302.941 519.574 303.035 519.547 303.098 519.543 cv
303.133 519.547 303.164 519.555 303.195 519.57 cv
303.223 519.59 303.246 519.617 303.266 519.652 cv
303.277 519.691 303.289 519.742 303.301 519.805 cv
303.305 519.871 303.309 519.949 303.313 520.043 cv
303.309 520.113 303.305 520.172 303.305 520.219 cv
303.297 520.266 303.293 520.309 303.285 520.348 cv
303.277 520.387 303.262 520.422 303.246 520.453 cv
303.223 520.484 303.199 520.516 303.176 520.543 cv
303.145 520.574 303.063 520.621 302.922 520.684 cv
302.781 520.75 302.598 520.812 302.375 520.875 cv
302.148 520.937 301.891 520.992 301.598 521.043 cv
301.305 521.09 300.992 521.113 300.66 521.117 cv
300.082 521.113 299.574 521.035 299.145 520.875 cv
298.707 520.715 298.344 520.477 298.051 520.16 cv
297.75 519.844 297.527 519.449 297.379 518.969 cv
297.23 518.492 297.156 517.934 297.156 517.297 cv
297.156 516.699 297.23 516.16 297.387 515.676 cv
297.539 515.199 297.766 514.789 298.063 514.453 cv
298.355 514.117 298.711 513.859 299.125 513.68 cv
299.539 513.5 300.004 513.41 300.52 513.41 cv
301.07 513.41 301.539 513.5 301.926 513.676 cv
302.313 513.855 302.629 514.094 302.883 514.391 cv
303.129 514.691 303.313 515.043 303.43 515.441 cv
303.543 515.848 303.602 516.277 303.605 516.73 cv
cp
302.313 516.582 mo
302.328 515.906 302.176 515.375 301.859 514.992 cv
301.543 514.609 301.074 514.418 300.457 514.414 cv
300.133 514.418 299.852 514.477 299.613 514.594 cv
299.371 514.715 299.172 514.875 299.012 515.07 cv
298.848 515.27 298.723 515.5 298.637 515.762 cv
298.547 516.023 298.496 516.297 298.488 516.582 cv
cp
f
309.672 514.219 mo
309.668 514.336 309.668 514.434 309.664 514.508 cv
309.656 514.59 309.645 514.652 309.633 514.691 cv
309.613 514.738 309.594 514.77 309.574 514.793 cv
309.547 514.816 309.516 514.828 309.477 514.828 cv
309.434 514.828 309.383 514.816 309.324 514.793 cv
309.262 514.77 309.191 514.746 309.121 514.723 cv
309.043 514.699 308.961 514.68 308.867 514.656 cv
308.773 514.641 308.672 514.629 308.563 514.625 cv
308.43 514.629 308.301 514.656 308.18 514.703 cv
308.055 514.758 307.926 514.844 307.789 514.961 cv
307.648 515.086 307.504 515.242 307.355 515.437 cv
307.203 515.633 307.035 515.875 306.855 516.16 cv
306.855 520.773 li
306.852 520.82 306.84 520.855 306.824 520.879 cv
306.801 520.91 306.77 520.934 306.723 520.953 cv
306.676 520.973 306.609 520.984 306.531 521 cv
306.445 521.008 306.34 521.016 306.211 521.016 cv
306.082 521.016 305.977 521.008 305.898 521 cv
305.813 520.984 305.746 520.973 305.699 520.953 cv
305.645 520.934 305.613 520.91 305.598 520.879 cv
305.578 520.855 305.566 520.82 305.57 520.773 cv
305.57 513.762 li
305.566 513.723 305.574 513.687 305.594 513.656 cv
305.605 513.629 305.637 513.605 305.688 513.578 cv
305.73 513.559 305.793 513.543 305.867 513.531 cv
305.938 513.527 306.031 513.523 306.156 513.52 cv
306.266 513.523 306.363 513.527 306.441 513.531 cv
306.516 513.543 306.574 513.559 306.617 513.578 cv
306.656 513.605 306.684 513.629 306.703 513.656 cv
306.719 513.687 306.727 513.723 306.73 513.762 cv
306.73 514.781 li
306.918 514.5 307.102 514.273 307.273 514.098 cv
307.441 513.922 307.602 513.781 307.754 513.68 cv
307.902 513.578 308.051 513.508 308.199 513.469 cv
308.348 513.43 308.496 513.41 308.648 513.41 cv
308.715 513.41 308.793 513.414 308.879 513.422 cv
308.965 513.43 309.055 513.445 309.148 513.465 cv
309.242 513.488 309.324 513.512 309.402 513.535 cv
309.473 513.562 309.527 513.59 309.563 513.613 cv
309.59 513.645 309.609 513.668 309.625 513.687 cv
309.633 513.715 309.645 513.746 309.652 513.777 cv
309.66 513.816 309.664 513.867 309.668 513.937 cv
309.668 514.008 309.668 514.102 309.672 514.219 cv
cp
f
321.43 517.187 mo
321.426 517.766 321.352 518.293 321.203 518.77 cv
321.051 519.254 320.824 519.668 320.527 520.012 cv
320.227 520.363 319.852 520.633 319.406 520.824 cv
318.953 521.02 318.434 521.113 317.844 521.117 cv
317.266 521.113 316.762 521.031 316.336 520.859 cv
315.906 520.691 315.551 520.441 315.266 520.113 cv
314.977 519.785 314.762 519.391 314.625 518.922 cv
314.484 518.457 314.418 517.926 314.418 517.328 cv
314.418 516.762 314.488 516.234 314.637 515.754 cv
314.781 515.273 315.008 514.859 315.309 514.508 cv
315.605 514.16 315.977 513.891 316.426 513.699 cv
316.871 513.508 317.395 513.41 317.992 513.41 cv
318.57 513.41 319.07 513.496 319.5 513.668 cv
319.926 513.84 320.285 514.09 320.57 514.418 cv
320.855 514.746 321.07 515.145 321.215 515.609 cv
321.355 516.078 321.426 516.605 321.43 517.187 cv
cp
320.098 517.273 mo
320.094 516.898 320.059 516.539 319.992 516.199 cv
319.918 515.863 319.801 515.57 319.641 515.312 cv
319.477 515.062 319.258 514.859 318.98 514.707 cv
318.699 514.562 318.352 514.488 317.941 514.484 cv
317.555 514.488 317.227 514.555 316.953 514.687 cv
316.676 514.824 316.449 515.016 316.273 515.262 cv
316.094 515.508 315.961 515.801 315.879 516.137 cv
315.789 516.477 315.746 516.844 315.75 517.242 cv
315.746 517.629 315.781 517.992 315.855 518.328 cv
315.922 518.668 316.039 518.961 316.207 519.211 cv
316.371 519.465 316.594 519.668 316.871 519.812 cv
317.148 519.965 317.496 520.039 317.91 520.035 cv
318.285 520.039 318.613 519.969 318.895 519.832 cv
319.172 519.699 319.398 519.512 319.578 519.262 cv
319.754 519.02 319.883 518.727 319.969 518.391 cv
320.051 518.055 320.094 517.684 320.098 517.273 cv
cp
f
327.16 510.875 mo
327.156 510.977 327.152 511.055 327.145 511.113 cv
327.133 511.176 327.121 511.227 327.109 511.258 cv
327.094 511.297 327.078 511.32 327.059 511.332 cv
327.035 511.348 327.008 511.355 326.98 511.352 cv
326.941 511.355 326.895 511.344 326.844 511.316 cv
326.785 511.297 326.719 511.27 326.645 511.238 cv
326.563 511.211 326.473 511.184 326.367 511.16 cv
326.258 511.137 326.133 511.125 326 511.125 cv
325.805 511.125 325.641 511.156 325.508 511.219 cv
325.367 511.281 325.258 511.379 325.18 511.512 cv
325.094 511.645 325.035 511.816 325 512.027 cv
324.961 512.238 324.941 512.496 324.945 512.793 cv
324.945 513.559 li
326.512 513.559 li
326.551 513.562 326.586 513.57 326.617 513.586 cv
326.645 513.605 326.672 513.637 326.695 513.68 cv
326.719 513.727 326.734 513.785 326.75 513.848 cv
326.758 513.918 326.766 514 326.77 514.094 cv
326.766 514.285 326.742 514.418 326.699 514.5 cv
326.648 514.586 326.586 514.629 326.512 514.625 cv
324.945 514.625 li
324.945 520.773 li
324.941 520.82 324.934 520.855 324.914 520.879 cv
324.891 520.91 324.855 520.934 324.809 520.953 cv
324.758 520.973 324.691 520.984 324.609 521 cv
324.523 521.008 324.418 521.016 324.301 521.016 cv
324.172 521.016 324.07 521.008 323.988 521 cv
323.902 520.984 323.836 520.973 323.789 520.953 cv
323.738 520.934 323.703 520.91 323.684 520.879 cv
323.66 520.855 323.648 520.82 323.652 520.773 cv
323.652 514.625 li
322.664 514.625 li
322.578 514.629 322.516 514.586 322.477 514.5 cv
322.434 514.418 322.41 514.285 322.414 514.094 cv
322.41 514 322.418 513.918 322.43 513.848 cv
322.438 513.785 322.453 513.727 322.477 513.68 cv
322.496 513.637 322.52 513.605 322.555 513.586 cv
322.582 513.57 322.621 513.562 322.664 513.559 cv
323.652 513.559 li
323.652 512.832 li
323.648 512.348 323.695 511.93 323.789 511.574 cv
323.879 511.227 324.016 510.937 324.203 510.715 cv
324.387 510.492 324.621 510.328 324.91 510.219 cv
325.191 510.113 325.527 510.059 325.914 510.059 cv
326.09 510.059 326.266 510.078 326.441 510.109 cv
326.609 510.148 326.742 510.184 326.84 510.219 cv
326.93 510.262 326.992 510.297 327.027 510.324 cv
327.055 510.359 327.082 510.398 327.105 510.445 cv
327.125 510.496 327.137 510.559 327.148 510.625 cv
327.152 510.699 327.156 510.781 327.16 510.875 cv
cp
f
337.359 518.141 mo
337.355 518.613 337.27 519.035 337.098 519.402 cv
336.922 519.777 336.68 520.09 336.371 520.344 cv
336.063 520.602 335.699 520.793 335.281 520.922 cv
334.859 521.051 334.41 521.113 333.93 521.117 cv
333.59 521.113 333.273 521.086 332.988 521.031 cv
332.699 520.973 332.445 520.906 332.219 520.82 cv
331.992 520.742 331.801 520.656 331.648 520.562 cv
331.492 520.477 331.387 520.398 331.328 520.336 cv
331.27 520.273 331.227 520.195 331.199 520.102 cv
331.168 520.008 331.152 519.879 331.156 519.715 cv
331.152 519.602 331.156 519.508 331.172 519.43 cv
331.18 519.355 331.195 519.293 331.219 519.246 cv
331.234 519.199 331.262 519.168 331.297 519.148 cv
331.324 519.133 331.359 519.125 331.402 519.121 cv
331.473 519.125 331.574 519.168 331.711 519.254 cv
331.84 519.344 332.012 519.441 332.223 519.543 cv
332.43 519.652 332.68 519.75 332.973 519.836 cv
333.266 519.93 333.605 519.973 333.992 519.973 cv
334.281 519.973 334.547 519.934 334.789 519.855 cv
335.027 519.777 335.234 519.668 335.414 519.523 cv
335.586 519.383 335.723 519.207 335.816 518.996 cv
335.91 518.789 335.957 518.555 335.957 518.289 cv
335.957 518.008 335.891 517.762 335.762 517.555 cv
335.629 517.355 335.457 517.18 335.246 517.023 cv
335.031 516.875 334.789 516.734 334.516 516.602 cv
334.242 516.477 333.961 516.344 333.68 516.211 cv
333.391 516.078 333.113 515.934 332.844 515.77 cv
332.574 515.613 332.332 515.422 332.121 515.203 cv
331.902 514.984 331.73 514.73 331.602 514.434 cv
331.465 514.145 331.398 513.793 331.402 513.379 cv
331.398 512.961 331.477 512.586 331.633 512.254 cv
331.785 511.926 331.996 511.648 332.273 511.422 cv
332.543 511.203 332.867 511.031 333.246 510.914 cv
333.621 510.797 334.031 510.738 334.469 510.738 cv
334.688 510.738 334.91 510.758 335.141 510.797 cv
335.363 510.836 335.574 510.887 335.777 510.949 cv
335.973 511.016 336.152 511.09 336.313 511.168 cv
336.465 511.25 336.566 511.316 336.621 511.363 cv
336.668 511.418 336.703 511.457 336.719 511.48 cv
336.734 511.512 336.746 511.547 336.758 511.59 cv
336.766 511.637 336.773 511.691 336.781 511.75 cv
336.785 511.816 336.789 511.895 336.789 511.992 cv
336.789 512.086 336.785 512.172 336.777 512.242 cv
336.77 512.32 336.758 512.379 336.742 512.426 cv
336.727 512.473 336.703 512.508 336.676 512.531 cv
336.645 512.555 336.613 512.566 336.578 512.566 cv
336.52 512.566 336.43 512.531 336.309 512.461 cv
336.184 512.391 336.031 512.309 335.859 512.215 cv
335.68 512.125 335.473 512.043 335.234 511.965 cv
334.988 511.891 334.719 511.852 334.422 511.852 cv
334.141 511.852 333.895 511.891 333.688 511.965 cv
333.477 512.043 333.305 512.145 333.172 512.266 cv
333.035 512.391 332.934 512.535 332.867 512.707 cv
332.801 512.879 332.77 513.062 332.77 513.254 cv
332.77 513.539 332.832 513.781 332.961 513.98 cv
333.09 514.184 333.262 514.363 333.48 514.516 cv
333.691 514.676 333.938 514.816 334.215 514.945 cv
334.488 515.078 334.77 515.211 335.059 515.34 cv
335.344 515.473 335.625 515.617 335.898 515.773 cv
336.172 515.934 336.418 516.121 336.637 516.336 cv
336.852 516.555 337.023 516.809 337.16 517.102 cv
337.289 517.395 337.355 517.742 337.359 518.141 cv
cp
f
345.125 520.773 mo
345.121 520.82 345.113 520.855 345.098 520.879 cv
345.078 520.91 345.043 520.934 345 520.953 cv
344.953 520.973 344.895 520.984 344.82 521 cv
344.742 521.008 344.648 521.016 344.543 521.016 cv
344.418 521.016 344.32 521.008 344.25 521 cv
344.172 520.984 344.113 520.973 344.07 520.953 cv
344.023 520.934 343.992 520.91 343.98 520.879 cv
343.961 520.855 343.953 520.82 343.957 520.773 cv
343.957 519.848 li
343.555 520.293 343.16 520.613 342.773 520.812 cv
342.379 521.016 341.984 521.113 341.59 521.117 cv
341.117 521.113 340.723 521.039 340.406 520.883 cv
340.086 520.73 339.828 520.52 339.633 520.25 cv
339.43 519.984 339.289 519.672 339.207 519.312 cv
339.117 518.957 339.074 518.523 339.078 518.016 cv
339.078 513.762 li
339.074 513.723 339.082 513.687 339.105 513.656 cv
339.121 513.629 339.156 513.605 339.211 513.578 cv
339.258 513.559 339.328 513.543 339.414 513.531 cv
339.496 513.527 339.598 513.523 339.727 513.52 cv
339.848 513.523 339.953 513.527 340.039 513.531 cv
340.121 513.543 340.188 513.559 340.234 513.578 cv
340.281 513.605 340.316 513.629 340.34 513.656 cv
340.359 513.687 340.367 513.723 340.371 513.762 cv
340.371 517.844 li
340.367 518.258 340.398 518.586 340.461 518.832 cv
340.52 519.078 340.609 519.289 340.734 519.461 cv
340.852 519.641 341.008 519.773 341.199 519.867 cv
341.383 519.965 341.602 520.016 341.852 520.012 cv
342.172 520.016 342.492 519.898 342.816 519.668 cv
343.133 519.441 343.473 519.105 343.832 518.66 cv
343.832 513.762 li
343.832 513.723 343.84 513.687 343.859 513.656 cv
343.875 513.629 343.91 513.605 343.965 513.578 cv
344.016 513.559 344.082 513.543 344.164 513.531 cv
344.242 513.527 344.348 513.523 344.48 513.52 cv
344.602 513.523 344.707 513.527 344.793 513.531 cv
344.875 513.543 344.938 513.559 344.984 513.578 cv
345.027 513.605 345.063 513.629 345.09 513.656 cv
345.109 513.687 345.121 513.723 345.125 513.762 cv
cp
f
353.98 517.172 mo
353.977 517.781 353.91 518.332 353.781 518.816 cv
353.645 519.305 353.449 519.719 353.195 520.059 cv
352.938 520.402 352.621 520.664 352.25 520.844 cv
351.875 521.027 351.449 521.113 350.965 521.117 cv
350.738 521.113 350.531 521.094 350.344 521.051 cv
350.156 521.004 349.969 520.934 349.789 520.836 cv
349.602 520.738 349.422 520.613 349.242 520.461 cv
349.059 520.312 348.867 520.133 348.668 519.918 cv
348.668 520.773 li
348.668 520.82 348.656 520.855 348.637 520.883 cv
348.613 520.918 348.578 520.941 348.535 520.957 cv
348.484 520.973 348.426 520.984 348.359 521 cv
348.285 521.008 348.195 521.016 348.09 521.016 cv
347.98 521.016 347.895 521.008 347.824 521 cv
347.75 520.984 347.688 520.973 347.645 520.957 cv
347.594 520.941 347.563 520.918 347.551 520.883 cv
347.531 520.855 347.523 520.82 347.527 520.773 cv
347.527 510.363 li
347.523 510.324 347.535 510.289 347.555 510.254 cv
347.57 510.227 347.602 510.199 347.656 510.176 cv
347.703 510.156 347.77 510.141 347.855 510.129 cv
347.934 510.121 348.039 510.117 348.168 510.113 cv
348.297 510.117 348.402 510.121 348.488 510.129 cv
348.566 510.141 348.633 510.156 348.68 510.176 cv
348.727 510.199 348.758 510.227 348.781 510.254 cv
348.797 510.289 348.809 510.324 348.813 510.363 cv
348.813 514.562 li
349.02 514.352 349.223 514.172 349.418 514.027 cv
349.613 513.883 349.801 513.766 349.988 513.672 cv
350.172 513.586 350.359 513.52 350.551 513.473 cv
350.734 513.434 350.934 513.41 351.145 513.41 cv
351.648 513.41 352.082 513.512 352.449 513.715 cv
352.809 513.918 353.102 514.191 353.328 514.527 cv
353.551 514.871 353.719 515.27 353.824 515.727 cv
353.926 516.184 353.977 516.664 353.98 517.172 cv
cp
352.648 517.32 mo
352.645 516.965 352.617 516.617 352.566 516.277 cv
352.508 515.941 352.414 515.645 352.277 515.383 cv
352.141 515.125 351.961 514.914 351.738 514.754 cv
351.512 514.598 351.23 514.52 350.898 514.516 cv
350.73 514.52 350.566 514.543 350.406 514.586 cv
350.242 514.637 350.078 514.715 349.91 514.82 cv
349.742 514.934 349.566 515.074 349.391 515.242 cv
349.207 515.418 349.016 515.633 348.813 515.887 cv
348.813 518.684 li
349.168 519.117 349.508 519.449 349.832 519.672 cv
350.156 519.902 350.492 520.016 350.844 520.012 cv
351.164 520.016 351.441 519.937 351.676 519.777 cv
351.902 519.625 352.09 519.418 352.234 519.156 cv
352.379 518.902 352.484 518.613 352.551 518.293 cv
352.613 517.977 352.645 517.652 352.648 517.32 cv
cp
f
359.137 517.035 mo
359.137 517.238 359.113 517.375 359.066 517.453 cv
359.02 517.531 358.949 517.57 358.863 517.57 cv
355.605 517.57 li
355.512 517.57 355.445 517.531 355.398 517.449 cv
355.352 517.371 355.328 517.234 355.328 517.035 cv
355.328 516.84 355.352 516.699 355.398 516.621 cv
355.445 516.543 355.512 516.504 355.605 516.504 cv
358.863 516.504 li
358.902 516.504 358.941 516.512 358.977 516.527 cv
359.008 516.543 359.035 516.574 359.063 516.617 cv
359.082 516.664 359.102 516.719 359.117 516.785 cv
359.129 516.855 359.137 516.941 359.137 517.035 cv
cp
f
362.391 520.766 mo
362.387 520.809 362.379 520.844 362.359 520.875 cv
362.336 520.906 362.297 520.934 362.25 520.949 cv
362.195 520.969 362.129 520.98 362.043 520.996 cv
361.957 521.008 361.848 521.016 361.723 521.016 cv
361.594 521.016 361.488 521.008 361.402 520.996 cv
361.313 520.98 361.242 520.969 361.191 520.949 cv
361.137 520.934 361.102 520.906 361.082 520.875 cv
361.059 520.844 361.047 520.809 361.051 520.766 cv
361.051 511.086 li
361.047 511.047 361.059 511.012 361.086 510.977 cv
361.105 510.949 361.145 510.922 361.203 510.902 cv
361.254 510.887 361.324 510.871 361.414 510.855 cv
361.496 510.844 361.598 510.84 361.723 510.836 cv
361.848 510.84 361.957 510.844 362.043 510.855 cv
362.129 510.871 362.195 510.887 362.25 510.902 cv
362.297 510.922 362.336 510.949 362.359 510.977 cv
362.379 511.012 362.387 511.047 362.391 511.086 cv
cp
f
375.379 520.773 mo
375.375 520.82 375.367 520.855 375.348 520.879 cv
375.324 520.91 375.289 520.934 375.246 520.953 cv
375.195 520.973 375.129 520.984 375.051 521 cv
374.965 521.008 374.863 521.016 374.738 521.016 cv
374.605 521.016 374.496 521.008 374.418 521 cv
374.332 520.984 374.266 520.973 374.219 520.953 cv
374.164 520.934 374.129 520.91 374.113 520.879 cv
374.09 520.855 374.082 520.82 374.082 520.773 cv
374.082 516.512 li
374.082 516.219 374.055 515.949 374.004 515.703 cv
373.949 515.461 373.867 515.25 373.754 515.07 cv
373.641 514.895 373.496 514.758 373.32 514.664 cv
373.141 514.57 372.93 514.523 372.695 514.523 cv
372.398 514.523 372.102 514.641 371.805 514.867 cv
371.5 515.102 371.172 515.434 370.816 515.871 cv
370.816 520.773 li
370.813 520.82 370.801 520.855 370.785 520.879 cv
370.762 520.91 370.73 520.934 370.684 520.953 cv
370.633 520.973 370.566 520.984 370.484 521 cv
370.398 521.008 370.293 521.016 370.172 521.016 cv
370.051 521.016 369.949 521.008 369.863 521 cv
369.777 520.984 369.707 520.973 369.66 520.953 cv
369.605 520.934 369.574 520.91 369.559 520.879 cv
369.539 520.855 369.527 520.82 369.531 520.773 cv
369.531 516.512 li
369.527 516.219 369.5 515.949 369.445 515.703 cv
369.387 515.461 369.301 515.25 369.188 515.07 cv
369.074 514.895 368.93 514.758 368.758 514.664 cv
368.578 514.57 368.371 514.523 368.137 514.523 cv
367.836 514.523 367.539 514.641 367.238 514.867 cv
366.938 515.102 366.609 515.434 366.258 515.871 cv
366.258 520.773 li
366.254 520.82 366.242 520.855 366.227 520.879 cv
366.203 520.91 366.172 520.934 366.125 520.953 cv
366.078 520.973 366.012 520.984 365.934 521 cv
365.848 521.008 365.742 521.016 365.613 521.016 cv
365.484 521.016 365.379 521.008 365.301 521 cv
365.215 520.984 365.148 520.973 365.102 520.953 cv
365.047 520.934 365.016 520.91 365 520.879 cv
364.98 520.855 364.969 520.82 364.973 520.773 cv
364.973 513.762 li
364.969 513.723 364.977 513.687 364.996 513.656 cv
365.008 513.629 365.039 513.605 365.09 513.578 cv
365.133 513.559 365.195 513.543 365.27 513.531 cv
365.34 513.527 365.434 513.523 365.559 513.52 cv
365.668 513.523 365.766 513.527 365.844 513.531 cv
365.918 513.543 365.977 513.559 366.02 513.578 cv
366.059 513.605 366.086 513.629 366.105 513.656 cv
366.121 513.687 366.129 513.723 366.133 513.762 cv
366.133 514.687 li
366.523 514.246 366.906 513.926 367.281 513.719 cv
367.648 513.516 368.027 513.41 368.41 513.41 cv
368.699 513.41 368.957 513.445 369.191 513.512 cv
369.418 513.582 369.625 513.676 369.805 513.797 cv
369.98 513.918 370.129 514.062 370.258 514.23 cv
370.379 514.402 370.484 514.594 370.57 514.797 cv
370.801 514.547 371.023 514.332 371.234 514.152 cv
371.445 513.98 371.648 513.836 371.844 513.723 cv
372.039 513.617 372.227 513.539 372.41 513.484 cv
372.594 513.437 372.781 513.41 372.969 513.41 cv
373.422 513.41 373.801 513.492 374.105 513.648 cv
374.41 513.812 374.656 514.023 374.852 514.285 cv
375.039 514.551 375.176 514.859 375.258 515.215 cv
375.336 515.57 375.375 515.945 375.379 516.34 cv
cp
f
383.008 520.781 mo
383.004 520.844 382.984 520.891 382.945 520.922 cv
382.902 520.953 382.844 520.977 382.773 520.992 cv
382.695 521.008 382.59 521.016 382.453 521.016 cv
382.316 521.016 382.207 521.008 382.129 520.992 cv
382.043 520.977 381.984 520.953 381.953 520.922 cv
381.914 520.891 381.898 520.844 381.902 520.781 cv
381.902 520.082 li
381.594 520.41 381.25 520.664 380.875 520.844 cv
380.496 521.027 380.098 521.113 379.68 521.117 cv
379.305 521.113 378.973 521.066 378.676 520.973 cv
378.379 520.875 378.125 520.738 377.914 520.555 cv
377.703 520.375 377.539 520.152 377.422 519.887 cv
377.305 519.625 377.246 519.324 377.25 518.98 cv
377.246 518.59 377.324 518.246 377.488 517.953 cv
377.645 517.664 377.879 517.422 378.184 517.23 cv
378.484 517.039 378.852 516.895 379.289 516.797 cv
379.723 516.703 380.215 516.656 380.762 516.652 cv
381.73 516.652 li
381.73 516.105 li
381.727 515.836 381.699 515.598 381.645 515.391 cv
381.586 515.184 381.492 515.012 381.367 514.871 cv
381.234 514.734 381.07 514.629 380.871 514.559 cv
380.664 514.488 380.414 514.453 380.125 514.453 cv
379.805 514.453 379.52 514.492 379.27 514.566 cv
379.012 514.645 378.793 514.727 378.605 514.816 cv
378.418 514.91 378.258 514.996 378.133 515.066 cv
378 515.145 377.906 515.18 377.848 515.18 cv
377.805 515.18 377.77 515.172 377.738 515.148 cv
377.707 515.133 377.68 515.102 377.656 515.055 cv
377.633 515.016 377.613 514.961 377.605 514.895 cv
377.59 514.832 377.586 514.762 377.59 514.68 cv
377.586 514.555 377.594 514.449 377.617 514.371 cv
377.633 514.297 377.68 514.227 377.75 514.156 cv
377.82 514.09 377.941 514.012 378.113 513.922 cv
378.285 513.832 378.48 513.75 378.703 513.672 cv
378.926 513.602 379.172 513.539 379.438 513.484 cv
379.703 513.437 379.969 513.41 380.242 513.41 cv
380.742 513.41 381.172 513.469 381.523 513.582 cv
381.875 513.699 382.16 513.867 382.383 514.086 cv
382.598 514.309 382.758 514.582 382.859 514.906 cv
382.957 515.238 383.004 515.621 383.008 516.051 cv
cp
381.73 517.578 mo
380.629 517.578 li
380.273 517.582 379.969 517.613 379.711 517.668 cv
379.449 517.73 379.234 517.816 379.063 517.934 cv
378.891 518.051 378.766 518.191 378.688 518.355 cv
378.605 518.52 378.563 518.707 378.566 518.918 cv
378.563 519.285 378.68 519.578 378.91 519.789 cv
379.141 520.008 379.465 520.113 379.883 520.113 cv
380.219 520.113 380.531 520.027 380.82 519.855 cv
381.109 519.684 381.41 519.422 381.73 519.066 cv
cp
f
391.227 514.078 mo
391.223 514.262 391.199 514.395 391.152 514.473 cv
391.102 514.555 391.039 514.594 390.965 514.594 cv
389.957 514.594 li
390.137 514.781 390.266 514.988 390.34 515.215 cv
390.41 515.441 390.445 515.676 390.449 515.918 cv
390.445 516.324 390.379 516.684 390.254 516.996 cv
390.121 517.309 389.938 517.574 389.695 517.785 cv
389.453 518.004 389.164 518.168 388.836 518.281 cv
388.5 518.398 388.133 518.457 387.73 518.453 cv
387.441 518.457 387.168 518.418 386.914 518.34 cv
386.652 518.266 386.457 518.172 386.32 518.055 cv
386.227 518.152 386.148 518.258 386.09 518.375 cv
386.027 518.496 385.996 518.633 386 518.785 cv
385.996 518.969 386.082 519.121 386.254 519.238 cv
386.422 519.363 386.645 519.426 386.926 519.434 cv
388.758 519.512 li
389.105 519.523 389.422 519.57 389.715 519.656 cv
390.004 519.742 390.258 519.867 390.473 520.023 cv
390.684 520.184 390.852 520.375 390.973 520.605 cv
391.09 520.84 391.148 521.109 391.152 521.414 cv
391.148 521.734 391.082 522.039 390.949 522.332 cv
390.813 522.621 390.605 522.875 390.328 523.098 cv
390.047 523.316 389.691 523.492 389.262 523.621 cv
388.832 523.746 388.324 523.809 387.738 523.812 cv
387.168 523.809 386.684 523.762 386.289 523.668 cv
385.891 523.57 385.566 523.437 385.313 523.273 cv
385.059 523.105 384.875 522.91 384.762 522.68 cv
384.645 522.445 384.586 522.191 384.59 521.926 cv
384.586 521.754 384.605 521.59 384.652 521.43 cv
384.691 521.266 384.754 521.113 384.84 520.969 cv
384.922 520.824 385.031 520.687 385.16 520.551 cv
385.285 520.422 385.43 520.289 385.602 520.16 cv
385.344 520.031 385.156 519.867 385.035 519.668 cv
384.914 519.473 384.855 519.262 384.855 519.027 cv
384.855 518.715 384.918 518.43 385.047 518.18 cv
385.176 517.93 385.336 517.707 385.531 517.508 cv
385.367 517.316 385.242 517.102 385.148 516.859 cv
385.055 516.621 385.008 516.328 385.008 515.98 cv
385.008 515.586 385.074 515.227 385.211 514.906 cv
385.344 514.59 385.531 514.324 385.773 514.105 cv
386.012 513.891 386.297 513.723 386.633 513.602 cv
386.965 513.488 387.332 513.43 387.73 513.426 cv
387.941 513.43 388.141 513.441 388.324 513.461 cv
388.508 513.488 388.68 513.52 388.844 513.559 cv
390.965 513.559 li
391.051 513.562 391.117 513.605 391.16 513.687 cv
391.203 513.777 391.223 513.906 391.227 514.078 cv
cp
389.219 515.926 mo
389.215 515.453 389.082 515.082 388.824 514.809 cv
388.559 514.543 388.188 514.406 387.707 514.406 cv
387.453 514.406 387.234 514.449 387.055 514.531 cv
386.867 514.617 386.715 514.73 386.594 514.875 cv
386.473 515.023 386.383 515.191 386.324 515.379 cv
386.262 515.566 386.23 515.766 386.234 515.973 cv
386.23 516.437 386.363 516.801 386.625 517.066 cv
386.887 517.332 387.254 517.465 387.73 517.461 cv
387.98 517.465 388.199 517.426 388.391 517.34 cv
388.574 517.262 388.73 517.148 388.855 517.008 cv
388.977 516.867 389.066 516.703 389.129 516.512 cv
389.184 516.328 389.215 516.133 389.219 515.926 cv
cp
389.863 521.484 mo
389.859 521.18 389.734 520.949 389.492 520.785 cv
389.242 520.625 388.91 520.535 388.492 520.523 cv
386.676 520.461 li
386.508 520.594 386.371 520.719 386.27 520.832 cv
386.16 520.949 386.078 521.059 386.016 521.168 cv
385.953 521.273 385.91 521.379 385.887 521.484 cv
385.863 521.586 385.852 521.691 385.852 521.801 cv
385.852 522.137 386.02 522.391 386.363 522.57 cv
386.703 522.742 387.184 522.832 387.801 522.832 cv
388.188 522.832 388.512 522.793 388.777 522.719 cv
389.035 522.641 389.246 522.539 389.41 522.418 cv
389.566 522.289 389.684 522.148 389.758 521.988 cv
389.824 521.828 389.859 521.66 389.863 521.484 cv
cp
f
398.789 516.965 mo
398.785 517.168 398.734 517.309 398.637 517.395 cv
398.531 517.48 398.414 517.523 398.289 517.523 cv
393.672 517.523 li
393.668 517.914 393.707 518.266 393.789 518.578 cv
393.863 518.891 393.996 519.16 394.18 519.379 cv
394.359 519.605 394.594 519.777 394.891 519.895 cv
395.18 520.02 395.539 520.078 395.965 520.074 cv
396.297 520.078 396.594 520.051 396.855 519.992 cv
397.117 519.941 397.344 519.879 397.535 519.809 cv
397.723 519.742 397.879 519.684 398.004 519.625 cv
398.125 519.574 398.219 519.547 398.281 519.543 cv
398.316 519.547 398.348 519.555 398.379 519.57 cv
398.406 519.59 398.43 519.617 398.449 519.652 cv
398.461 519.691 398.473 519.742 398.484 519.805 cv
398.488 519.871 398.492 519.949 398.496 520.043 cv
398.492 520.113 398.488 520.172 398.488 520.219 cv
398.48 520.266 398.477 520.309 398.469 520.348 cv
398.461 520.387 398.445 520.422 398.43 520.453 cv
398.406 520.484 398.383 520.516 398.359 520.543 cv
398.328 520.574 398.246 520.621 398.105 520.684 cv
397.965 520.75 397.781 520.812 397.559 520.875 cv
397.332 520.937 397.074 520.992 396.781 521.043 cv
396.488 521.09 396.176 521.113 395.844 521.117 cv
395.266 521.113 394.758 521.035 394.328 520.875 cv
393.891 520.715 393.527 520.477 393.234 520.16 cv
392.934 519.844 392.711 519.449 392.563 518.969 cv
392.414 518.492 392.34 517.934 392.34 517.297 cv
392.34 516.699 392.414 516.16 392.57 515.676 cv
392.723 515.199 392.949 514.789 393.246 514.453 cv
393.539 514.117 393.895 513.859 394.309 513.68 cv
394.723 513.5 395.188 513.41 395.703 513.41 cv
396.254 513.41 396.723 513.5 397.109 513.676 cv
397.496 513.855 397.813 514.094 398.066 514.391 cv
398.313 514.691 398.496 515.043 398.613 515.441 cv
398.727 515.848 398.785 516.277 398.789 516.73 cv
cp
397.496 516.582 mo
397.512 515.906 397.359 515.375 397.043 514.992 cv
396.727 514.609 396.258 514.418 395.641 514.414 cv
395.316 514.418 395.035 514.477 394.797 514.594 cv
394.555 514.715 394.355 514.875 394.195 515.07 cv
394.031 515.27 393.906 515.5 393.82 515.762 cv
393.73 516.023 393.68 516.297 393.672 516.582 cv
cp
f
405.156 518.863 mo
405.152 519.227 405.086 519.547 404.957 519.824 cv
404.824 520.105 404.637 520.34 404.395 520.531 cv
404.148 520.727 403.855 520.871 403.52 520.969 cv
403.18 521.066 402.809 521.113 402.406 521.117 cv
402.152 521.113 401.914 521.094 401.691 521.059 cv
401.465 521.016 401.266 520.969 401.086 520.91 cv
400.906 520.852 400.754 520.789 400.629 520.723 cv
400.504 520.66 400.41 520.602 400.355 520.547 cv
400.297 520.496 400.258 520.426 400.234 520.328 cv
400.207 520.238 400.195 520.109 400.195 519.949 cv
400.195 519.852 400.199 519.77 400.211 519.699 cv
400.219 519.633 400.23 519.578 400.25 519.535 cv
400.262 519.496 400.285 519.465 400.313 519.445 cv
400.34 519.43 400.371 519.422 400.41 519.418 cv
400.465 519.422 400.551 519.457 400.664 519.523 cv
400.773 519.598 400.91 519.676 401.078 519.754 cv
401.238 519.84 401.43 519.914 401.656 519.984 cv
401.875 520.055 402.133 520.09 402.43 520.09 cv
402.645 520.09 402.844 520.066 403.023 520.02 cv
403.199 519.973 403.352 519.906 403.48 519.812 cv
403.609 519.727 403.711 519.609 403.781 519.465 cv
403.852 519.328 403.887 519.16 403.887 518.965 cv
403.887 518.77 403.836 518.605 403.734 518.469 cv
403.633 518.336 403.496 518.215 403.332 518.109 cv
403.164 518.008 402.98 517.918 402.773 517.832 cv
402.563 517.754 402.348 517.668 402.129 517.578 cv
401.91 517.492 401.695 517.391 401.484 517.277 cv
401.273 517.168 401.082 517.035 400.918 516.871 cv
400.746 516.715 400.613 516.52 400.516 516.293 cv
400.41 516.07 400.359 515.805 400.363 515.492 cv
400.359 515.219 400.414 514.953 400.523 514.699 cv
400.629 514.449 400.789 514.23 401.004 514.039 cv
401.215 513.852 401.48 513.699 401.801 513.582 cv
402.121 513.469 402.492 513.41 402.922 513.41 cv
403.105 513.41 403.293 513.426 403.48 513.457 cv
403.664 513.488 403.832 513.527 403.988 513.574 cv
404.137 513.621 404.266 513.672 404.375 513.727 cv
404.477 513.781 404.559 513.832 404.617 513.871 cv
404.668 513.918 404.703 513.953 404.727 513.98 cv
404.742 514.012 404.758 514.047 404.766 514.082 cv
404.773 514.125 404.781 514.172 404.789 514.227 cv
404.797 514.285 404.801 514.355 404.801 514.437 cv
404.801 514.527 404.797 514.605 404.789 514.668 cv
404.781 514.738 404.766 514.789 404.75 514.828 cv
404.727 514.871 404.707 514.902 404.684 514.918 cv
404.656 514.937 404.625 514.945 404.598 514.945 cv
404.547 514.945 404.48 514.918 404.395 514.859 cv
404.305 514.805 404.191 514.742 404.051 514.676 cv
403.91 514.613 403.742 514.555 403.555 514.492 cv
403.363 514.437 403.148 514.406 402.906 514.406 cv
402.684 514.406 402.492 514.434 402.328 514.48 cv
402.16 514.535 402.023 514.605 401.918 514.691 cv
401.813 514.785 401.73 514.891 401.68 515.016 cv
401.621 515.141 401.594 515.277 401.598 515.422 cv
401.594 515.625 401.645 515.793 401.75 515.93 cv
401.852 516.07 401.988 516.191 402.156 516.293 cv
402.32 516.398 402.512 516.492 402.727 516.574 cv
402.938 516.66 403.152 516.746 403.375 516.832 cv
403.594 516.922 403.813 517.023 404.031 517.129 cv
404.246 517.238 404.438 517.367 404.605 517.523 cv
404.77 517.68 404.902 517.867 405.004 518.086 cv
405.102 518.305 405.152 518.566 405.156 518.863 cv
cp
f
154.027 11.57 mo
154.023 12.41 153.922 13.16 153.715 13.816 cv
153.508 14.48 153.199 15.039 152.789 15.496 cv
152.379 15.957 151.871 16.309 151.266 16.547 cv
150.66 16.789 149.961 16.906 149.168 16.91 cv
148.379 16.906 147.691 16.805 147.109 16.602 cv
146.523 16.398 146.035 16.086 145.648 15.664 cv
145.258 15.242 144.969 14.707 144.773 14.059 cv
144.578 13.41 144.48 12.641 144.484 11.75 cv
144.48 10.937 144.582 10.207 144.793 9.55103 cv
144.996 8.90198 145.305 8.34802 145.719 7.88702 cv
146.125 7.43402 146.633 7.08197 147.242 6.836 cv
147.844 6.59399 148.547 6.47302 149.352 6.46899 cv
150.113 6.47302 150.789 6.57397 151.375 6.77301 cv
151.957 6.97699 152.445 7.28497 152.84 7.70697 cv
153.23 8.12903 153.527 8.65997 153.727 9.30103 cv
153.926 9.94098 154.023 10.699 154.027 11.57 cv
cp
151.879 11.68 mo
151.875 11.152 151.832 10.672 151.754 10.238 cv
151.668 9.80499 151.527 9.43402 151.328 9.12097 cv
151.125 8.81201 150.859 8.57397 150.527 8.40601 cv
150.195 8.23798 149.781 8.15198 149.285 8.15198 cv
148.777 8.15198 148.355 8.25 148.02 8.43701 cv
147.684 8.62903 147.41 8.87903 147.203 9.19501 cv
146.992 9.51599 146.844 9.88702 146.762 10.309 cv
146.672 10.73 146.629 11.18 146.633 11.648 cv
146.629 12.203 146.672 12.699 146.758 13.137 cv
146.84 13.578 146.98 13.953 147.18 14.262 cv
147.375 14.574 147.641 14.809 147.973 14.973 cv
148.305 15.137 148.723 15.219 149.23 15.219 cv
149.73 15.219 150.148 15.125 150.488 14.937 cv
150.824 14.75 151.098 14.496 151.309 14.176 cv
151.512 13.855 151.66 13.48 151.75 13.051 cv
151.832 12.621 151.875 12.164 151.879 11.68 cv
cp
f
162.027 9.508 mo
162.023 9.53497 162.023 9.56598 162.023 9.60199 cv
162.02 9.64099 162.016 9.67999 162.008 9.72302 cv
162 9.76599 161.988 9.81598 161.977 9.87097 cv
161.961 9.92999 161.945 9.99597 161.926 10.066 cv
159.84 16.355 li
159.813 16.445 159.777 16.52 159.734 16.57 cv
159.688 16.629 159.613 16.672 159.516 16.699 cv
159.41 16.73 159.273 16.746 159.102 16.762 cv
158.926 16.77 158.699 16.777 158.422 16.777 cv
158.145 16.777 157.918 16.77 157.746 16.758 cv
157.57 16.742 157.434 16.723 157.336 16.691 cv
157.234 16.664 157.164 16.621 157.121 16.562 cv
157.074 16.512 157.039 16.441 157.016 16.355 cv
154.93 10.066 li
154.898 9.96503 154.871 9.87097 154.855 9.789 cv
154.832 9.70697 154.824 9.64801 154.824 9.60901 cv
154.82 9.578 154.816 9.54303 154.82 9.508 cv
154.816 9.45697 154.832 9.40997 154.863 9.37097 cv
154.891 9.33197 154.941 9.30103 155.016 9.27301 cv
155.086 9.25 155.184 9.22998 155.313 9.21899 cv
155.438 9.211 155.598 9.20697 155.793 9.203 cv
156.004 9.20697 156.176 9.21503 156.309 9.22302 cv
156.434 9.23798 156.539 9.25403 156.617 9.27698 cv
156.691 9.30103 156.742 9.336 156.777 9.37903 cv
156.805 9.42603 156.832 9.47998 156.855 9.539 cv
158.438 14.641 li
158.484 14.836 li
158.531 14.641 li
160.09 9.539 li
160.102 9.47998 160.125 9.42603 160.16 9.37903 cv
160.191 9.336 160.246 9.30103 160.32 9.27698 cv
160.391 9.25403 160.488 9.23798 160.613 9.22302 cv
160.734 9.21503 160.895 9.20697 161.094 9.203 cv
161.285 9.20697 161.441 9.211 161.563 9.21899 cv
161.684 9.22998 161.777 9.25 161.848 9.27301 cv
161.914 9.30103 161.961 9.33197 161.988 9.37097 cv
162.012 9.40997 162.023 9.45697 162.027 9.508 cv
cp
f
169.504 12.789 mo
169.5 13.027 169.449 13.203 169.344 13.316 cv
169.234 13.434 169.086 13.492 168.906 13.488 cv
164.672 13.488 li
164.668 13.789 164.703 14.059 164.777 14.297 cv
164.844 14.539 164.957 14.742 165.113 14.91 cv
165.266 15.082 165.461 15.211 165.703 15.297 cv
165.941 15.387 166.23 15.43 166.574 15.43 cv
166.914 15.43 167.215 15.406 167.477 15.355 cv
167.734 15.309 167.961 15.254 168.152 15.191 cv
168.34 15.133 168.496 15.078 168.625 15.027 cv
168.746 14.98 168.848 14.957 168.93 14.953 cv
168.973 14.957 169.012 14.965 169.047 14.98 cv
169.074 15 169.102 15.031 169.121 15.078 cv
169.141 15.125 169.152 15.191 169.164 15.277 cv
169.168 15.363 169.172 15.473 169.176 15.602 cv
169.172 15.719 169.172 15.816 169.168 15.895 cv
169.16 15.977 169.152 16.043 169.145 16.098 cv
169.133 16.156 169.117 16.207 169.098 16.242 cv
169.078 16.285 169.051 16.32 169.02 16.355 cv
168.984 16.395 168.891 16.445 168.742 16.504 cv
168.586 16.57 168.395 16.633 168.164 16.687 cv
167.926 16.75 167.656 16.797 167.359 16.844 cv
167.055 16.883 166.734 16.906 166.395 16.91 cv
165.773 16.906 165.23 16.832 164.77 16.676 cv
164.301 16.523 163.914 16.285 163.605 15.969 cv
163.289 15.652 163.055 15.254 162.906 14.77 cv
162.75 14.289 162.676 13.723 162.68 13.066 cv
162.676 12.453 162.754 11.895 162.918 11.398 cv
163.074 10.902 163.309 10.484 163.621 10.137 cv
163.926 9.79303 164.301 9.52698 164.738 9.34399 cv
165.176 9.164 165.668 9.07397 166.223 9.07001 cv
166.801 9.07397 167.301 9.15997 167.715 9.328 cv
168.129 9.50403 168.465 9.742 168.73 10.043 cv
168.992 10.348 169.188 10.707 169.316 11.121 cv
169.438 11.539 169.5 11.988 169.504 12.477 cv
cp
167.602 12.227 mo
167.613 11.676 167.504 11.242 167.27 10.93 cv
167.035 10.617 166.668 10.461 166.176 10.457 cv
165.926 10.461 165.711 10.508 165.527 10.598 cv
165.34 10.695 165.188 10.82 165.066 10.977 cv
164.941 11.137 164.848 11.324 164.785 11.539 cv
164.719 11.754 164.68 11.984 164.672 12.227 cv
cp
f
175.578 10.16 mo
175.578 10.352 175.57 10.504 175.563 10.621 cv
175.547 10.742 175.531 10.836 175.516 10.902 cv
175.492 10.973 175.465 11.02 175.434 11.043 cv
175.395 11.07 175.352 11.082 175.305 11.082 cv
175.258 11.082 175.211 11.074 175.164 11.055 cv
175.109 11.039 175.051 11.02 174.988 10.996 cv
174.918 10.977 174.848 10.957 174.773 10.937 cv
174.691 10.922 174.605 10.914 174.516 10.91 cv
174.402 10.914 174.293 10.934 174.188 10.977 cv
174.078 11.023 173.965 11.094 173.852 11.184 cv
173.73 11.277 173.609 11.402 173.484 11.555 cv
173.355 11.715 173.219 11.906 173.074 12.133 cv
173.074 16.465 li
173.07 16.52 173.055 16.562 173.027 16.602 cv
172.992 16.641 172.938 16.676 172.867 16.699 cv
172.789 16.727 172.691 16.742 172.566 16.758 cv
172.441 16.77 172.281 16.777 172.094 16.777 cv
171.898 16.777 171.742 16.77 171.617 16.758 cv
171.492 16.742 171.391 16.727 171.316 16.699 cv
171.238 16.676 171.184 16.641 171.156 16.602 cv
171.121 16.562 171.105 16.52 171.109 16.465 cv
171.109 9.51599 li
171.105 9.46899 171.121 9.422 171.148 9.37903 cv
171.172 9.34399 171.219 9.31201 171.289 9.28101 cv
171.355 9.258 171.441 9.23798 171.551 9.22302 cv
171.656 9.21503 171.789 9.20697 171.953 9.203 cv
172.117 9.20697 172.254 9.21503 172.363 9.22302 cv
172.469 9.23798 172.555 9.258 172.617 9.28101 cv
172.676 9.31201 172.719 9.34399 172.746 9.37903 cv
172.77 9.422 172.781 9.46899 172.785 9.51599 cv
172.785 10.379 li
172.965 10.121 173.137 9.90997 173.301 9.73798 cv
173.457 9.57397 173.613 9.43701 173.762 9.336 cv
173.906 9.23798 174.051 9.172 174.195 9.12903 cv
174.34 9.09399 174.484 9.07397 174.633 9.07001 cv
174.699 9.07397 174.773 9.078 174.852 9.08197 cv
174.93 9.09399 175.008 9.10498 175.094 9.12097 cv
175.172 9.14099 175.246 9.15997 175.313 9.18402 cv
175.371 9.20697 175.418 9.23401 175.449 9.258 cv
175.477 9.289 175.496 9.31598 175.512 9.34399 cv
175.523 9.37903 175.535 9.422 175.547 9.47302 cv
175.555 9.53101 175.563 9.61298 175.57 9.71899 cv
175.574 9.828 175.578 9.97699 175.578 10.16 cv
cp
f
182.336 16.488 mo
182.332 16.566 182.305 16.621 182.258 16.66 cv
182.203 16.703 182.121 16.73 182.012 16.75 cv
181.895 16.766 181.73 16.777 181.516 16.777 cv
181.277 16.777 181.105 16.766 181.004 16.75 cv
180.895 16.73 180.82 16.703 180.781 16.66 cv
180.734 16.621 180.715 16.566 180.715 16.488 cv
180.715 15.937 li
180.426 16.246 180.098 16.484 179.734 16.652 cv
179.367 16.824 178.961 16.906 178.516 16.91 cv
178.145 16.906 177.805 16.859 177.496 16.766 cv
177.188 16.672 176.922 16.531 176.695 16.336 cv
176.469 16.148 176.293 15.914 176.168 15.633 cv
176.043 15.355 175.98 15.027 175.984 14.648 cv
175.98 14.25 176.059 13.898 176.219 13.594 cv
176.375 13.297 176.613 13.051 176.93 12.855 cv
177.242 12.664 177.633 12.52 178.102 12.422 cv
178.57 12.332 179.113 12.285 179.73 12.281 cv
180.41 12.281 li
180.41 11.859 li
180.41 11.645 180.387 11.453 180.344 11.289 cv
180.297 11.129 180.223 10.992 180.125 10.879 cv
180.02 10.773 179.887 10.691 179.719 10.637 cv
179.547 10.586 179.336 10.562 179.094 10.559 cv
178.762 10.562 178.469 10.598 178.215 10.668 cv
177.953 10.742 177.727 10.824 177.531 10.91 cv
177.332 11.004 177.168 11.082 177.039 11.152 cv
176.902 11.227 176.793 11.266 176.715 11.262 cv
176.652 11.266 176.602 11.246 176.563 11.207 cv
176.516 11.172 176.48 11.121 176.453 11.051 cv
176.422 10.988 176.398 10.902 176.387 10.801 cv
176.367 10.703 176.359 10.594 176.363 10.473 cv
176.359 10.312 176.375 10.187 176.402 10.09 cv
176.426 10 176.473 9.914 176.551 9.836 cv
176.621 9.76202 176.75 9.67999 176.934 9.59003 cv
177.113 9.5 177.324 9.414 177.57 9.336 cv
177.813 9.258 178.082 9.19501 178.371 9.14502 cv
178.66 9.09802 178.957 9.07397 179.266 9.07001 cv
179.809 9.07397 180.273 9.125 180.66 9.22998 cv
181.047 9.34003 181.367 9.50403 181.617 9.72302 cv
181.867 9.94098 182.047 10.227 182.164 10.574 cv
182.273 10.926 182.332 11.34 182.336 11.812 cv
cp
180.41 13.512 mo
179.66 13.512 li
179.344 13.516 179.074 13.539 178.852 13.582 cv
178.625 13.633 178.441 13.703 178.305 13.793 cv
178.16 13.891 178.059 14.004 177.996 14.133 cv
177.93 14.27 177.895 14.418 177.898 14.586 cv
177.895 14.879 177.988 15.109 178.176 15.273 cv
178.359 15.441 178.617 15.523 178.945 15.523 cv
179.219 15.523 179.469 15.453 179.703 15.312 cv
179.93 15.172 180.168 14.969 180.41 14.695 cv
cp
f
186.258 16.465 mo
186.254 16.52 186.238 16.562 186.211 16.602 cv
186.176 16.641 186.121 16.676 186.051 16.699 cv
185.973 16.727 185.875 16.742 185.75 16.758 cv
185.625 16.77 185.465 16.777 185.277 16.777 cv
185.082 16.777 184.926 16.77 184.801 16.758 cv
184.676 16.742 184.574 16.727 184.5 16.699 cv
184.422 16.676 184.367 16.641 184.34 16.602 cv
184.305 16.562 184.289 16.52 184.293 16.465 cv
184.293 6.21899 li
184.289 6.16803 184.305 6.12097 184.34 6.078 cv
184.367 6.039 184.422 6.00403 184.5 5.97302 cv
184.574 5.94501 184.676 5.92603 184.801 5.90601 cv
184.926 5.89502 185.082 5.88702 185.277 5.883 cv
185.465 5.88702 185.625 5.89502 185.75 5.90601 cv
185.875 5.92603 185.973 5.94501 186.051 5.97302 cv
186.121 6.00403 186.176 6.039 186.211 6.078 cv
186.238 6.12097 186.254 6.16803 186.258 6.21899 cv
cp
f
190.234 16.465 mo
190.23 16.52 190.215 16.562 190.188 16.602 cv
190.152 16.641 190.098 16.676 190.027 16.699 cv
189.949 16.727 189.852 16.742 189.727 16.758 cv
189.602 16.77 189.441 16.777 189.254 16.777 cv
189.059 16.777 188.902 16.77 188.777 16.758 cv
188.652 16.742 188.551 16.727 188.477 16.699 cv
188.398 16.676 188.344 16.641 188.316 16.602 cv
188.281 16.562 188.266 16.52 188.27 16.465 cv
188.27 6.21899 li
188.266 6.16803 188.281 6.12097 188.316 6.078 cv
188.344 6.039 188.398 6.00403 188.477 5.97302 cv
188.551 5.94501 188.652 5.92603 188.777 5.90601 cv
188.902 5.89502 189.059 5.88702 189.254 5.883 cv
189.441 5.88702 189.602 5.89502 189.727 5.90601 cv
189.852 5.92603 189.949 5.94501 190.027 5.97302 cv
190.098 6.00403 190.152 6.039 190.188 6.078 cv
190.215 6.12097 190.23 6.16803 190.234 6.21899 cv
cp
f
203.398 16.465 mo
203.398 16.527 203.387 16.574 203.367 16.609 cv
203.348 16.652 203.301 16.684 203.223 16.707 cv
203.145 16.73 203.027 16.746 202.879 16.762 cv
202.723 16.77 202.52 16.777 202.262 16.777 cv
202.043 16.777 201.867 16.77 201.738 16.762 cv
201.609 16.746 201.508 16.73 201.434 16.703 cv
201.355 16.676 201.301 16.641 201.273 16.594 cv
201.238 16.555 201.215 16.5 201.195 16.434 cv
200.289 14.184 li
200.18 13.93 200.074 13.703 199.973 13.504 cv
199.863 13.309 199.75 13.145 199.625 13.012 cv
199.496 12.883 199.348 12.781 199.184 12.711 cv
199.016 12.645 198.824 12.613 198.609 12.609 cv
197.969 12.609 li
197.969 16.449 li
197.965 16.504 197.949 16.551 197.918 16.59 cv
197.883 16.633 197.828 16.668 197.75 16.691 cv
197.672 16.719 197.566 16.738 197.438 16.754 cv
197.305 16.77 197.141 16.777 196.941 16.777 cv
196.742 16.777 196.574 16.77 196.445 16.754 cv
196.309 16.738 196.203 16.719 196.129 16.691 cv
196.047 16.668 195.992 16.633 195.965 16.59 cv
195.93 16.551 195.914 16.504 195.918 16.449 cv
195.918 7.29303 li
195.914 7.06598 195.973 6.90198 196.094 6.797 cv
196.207 6.69897 196.352 6.64801 196.527 6.64502 cv
199.137 6.64502 li
199.398 6.64801 199.617 6.65198 199.793 6.65997 cv
199.961 6.672 200.117 6.68402 200.262 6.69897 cv
200.664 6.758 201.027 6.85901 201.352 6.99597 cv
201.676 7.14099 201.953 7.32397 202.18 7.547 cv
202.406 7.77698 202.578 8.04303 202.699 8.35199 cv
202.816 8.65997 202.875 9.01599 202.879 9.414 cv
202.875 9.75403 202.832 10.062 202.75 10.336 cv
202.66 10.617 202.535 10.863 202.371 11.082 cv
202.203 11.301 201.996 11.492 201.754 11.648 cv
201.508 11.812 201.23 11.941 200.922 12.039 cv
201.07 12.113 201.215 12.203 201.348 12.305 cv
201.48 12.414 201.602 12.539 201.719 12.684 cv
201.832 12.832 201.945 13 202.051 13.187 cv
202.152 13.379 202.254 13.594 202.355 13.832 cv
203.207 15.82 li
203.281 16.02 203.332 16.16 203.359 16.25 cv
203.383 16.344 203.398 16.418 203.398 16.465 cv
cp
200.758 9.625 mo
200.754 9.29303 200.68 9.01202 200.531 8.78101 cv
200.379 8.55499 200.133 8.39502 199.793 8.297 cv
199.688 8.27301 199.57 8.25 199.438 8.23401 cv
199.305 8.21899 199.121 8.211 198.887 8.211 cv
197.969 8.211 li
197.969 11.074 li
199.012 11.074 li
199.301 11.078 199.559 11.043 199.777 10.969 cv
199.996 10.902 200.176 10.801 200.32 10.672 cv
200.465 10.547 200.574 10.395 200.648 10.215 cv
200.719 10.039 200.754 9.84399 200.758 9.625 cv
cp
f
211.379 16.465 mo
211.375 16.52 211.363 16.562 211.34 16.602 cv
211.313 16.641 211.266 16.676 211.203 16.699 cv
211.137 16.727 211.051 16.742 210.945 16.758 cv
210.84 16.77 210.707 16.777 210.547 16.777 cv
210.371 16.777 210.23 16.77 210.129 16.758 cv
210.02 16.742 209.938 16.727 209.875 16.699 cv
209.813 16.676 209.766 16.641 209.742 16.602 cv
209.711 16.562 209.699 16.52 209.703 16.465 cv
209.703 15.664 li
209.316 16.078 208.926 16.391 208.531 16.598 cv
208.129 16.805 207.719 16.906 207.297 16.91 cv
206.816 16.906 206.414 16.832 206.09 16.676 cv
205.766 16.523 205.504 16.309 205.305 16.039 cv
205.102 15.77 204.957 15.457 204.875 15.098 cv
204.785 14.742 204.742 14.301 204.746 13.77 cv
204.746 9.51599 li
204.742 9.46899 204.758 9.422 204.789 9.37903 cv
204.816 9.34399 204.867 9.31201 204.945 9.28101 cv
205.02 9.258 205.121 9.23798 205.25 9.22302 cv
205.375 9.21503 205.531 9.20697 205.723 9.203 cv
205.91 9.20697 206.07 9.21503 206.195 9.22302 cv
206.32 9.23798 206.418 9.258 206.496 9.28101 cv
206.566 9.31201 206.621 9.34399 206.656 9.37903 cv
206.684 9.422 206.699 9.46899 206.703 9.51599 cv
206.703 13.441 li
206.699 13.809 206.723 14.086 206.773 14.277 cv
206.816 14.469 206.887 14.633 206.988 14.77 cv
207.082 14.91 207.207 15.016 207.355 15.09 cv
207.504 15.168 207.676 15.207 207.871 15.203 cv
208.121 15.207 208.371 15.117 208.625 14.93 cv
208.875 14.75 209.145 14.484 209.43 14.137 cv
209.43 9.51599 li
209.43 9.46899 209.441 9.422 209.473 9.37903 cv
209.496 9.34399 209.551 9.31201 209.629 9.28101 cv
209.703 9.258 209.801 9.23798 209.93 9.22302 cv
210.051 9.21503 210.211 9.20697 210.406 9.203 cv
210.598 9.20697 210.754 9.21503 210.879 9.22302 cv
211 9.23798 211.102 9.258 211.176 9.28101 cv
211.246 9.31201 211.297 9.34399 211.332 9.37903 cv
211.359 9.422 211.375 9.46899 211.379 9.51599 cv
cp
f
219.996 16.465 mo
219.992 16.52 219.977 16.562 219.949 16.602 cv
219.914 16.641 219.863 16.676 219.793 16.699 cv
219.719 16.727 219.617 16.742 219.492 16.758 cv
219.363 16.77 219.207 16.777 219.023 16.777 cv
218.828 16.777 218.668 16.77 218.543 16.758 cv
218.414 16.742 218.313 16.727 218.242 16.699 cv
218.164 16.676 218.113 16.641 218.086 16.602 cv
218.051 16.562 218.035 16.52 218.039 16.465 cv
218.039 12.5 li
218.035 12.164 218.012 11.898 217.965 11.703 cv
217.914 11.512 217.84 11.348 217.75 11.211 cv
217.656 11.074 217.539 10.969 217.391 10.891 cv
217.242 10.816 217.066 10.777 216.871 10.777 cv
216.617 10.777 216.367 10.871 216.113 11.051 cv
215.859 11.234 215.594 11.496 215.32 11.844 cv
215.32 16.465 li
215.316 16.52 215.301 16.562 215.273 16.602 cv
215.238 16.641 215.184 16.676 215.113 16.699 cv
215.035 16.727 214.938 16.742 214.813 16.758 cv
214.688 16.77 214.527 16.777 214.34 16.777 cv
214.145 16.777 213.988 16.77 213.863 16.758 cv
213.738 16.742 213.637 16.727 213.563 16.699 cv
213.484 16.676 213.43 16.641 213.402 16.602 cv
213.367 16.562 213.352 16.52 213.355 16.465 cv
213.355 9.51599 li
213.352 9.46899 213.367 9.422 213.395 9.37903 cv
213.418 9.34399 213.465 9.31201 213.535 9.28101 cv
213.602 9.258 213.688 9.23798 213.797 9.22302 cv
213.902 9.21503 214.035 9.20697 214.199 9.203 cv
214.363 9.20697 214.5 9.21503 214.609 9.22302 cv
214.715 9.23798 214.801 9.258 214.863 9.28101 cv
214.922 9.31201 214.965 9.34399 214.992 9.37903 cv
215.016 9.422 215.027 9.46899 215.031 9.51599 cv
215.031 10.316 li
215.414 9.90601 215.805 9.59399 216.203 9.383 cv
216.598 9.17603 217.016 9.07397 217.449 9.07001 cv
217.918 9.07397 218.316 9.15198 218.645 9.30499 cv
218.969 9.46503 219.23 9.67603 219.43 9.94098 cv
219.629 10.211 219.773 10.523 219.863 10.879 cv
219.949 11.238 219.992 11.668 219.996 12.172 cv
cp
f
225.867 15.781 mo
225.867 16.008 225.852 16.184 225.824 16.305 cv
225.793 16.43 225.754 16.516 225.711 16.562 cv
225.66 16.613 225.594 16.656 225.504 16.695 cv
225.41 16.734 225.301 16.766 225.184 16.797 cv
225.059 16.82 224.926 16.844 224.785 16.863 cv
224.641 16.875 224.5 16.883 224.355 16.887 cv
223.965 16.883 223.625 16.832 223.34 16.738 cv
223.055 16.637 222.82 16.488 222.633 16.281 cv
222.445 16.078 222.305 15.82 222.219 15.508 cv
222.125 15.199 222.082 14.828 222.086 14.398 cv
222.086 10.84 li
221.254 10.84 li
221.152 10.844 221.078 10.781 221.027 10.656 cv
220.973 10.535 220.945 10.332 220.949 10.043 cv
220.945 9.89502 220.953 9.76599 220.969 9.664 cv
220.98 9.56201 221 9.47998 221.027 9.41803 cv
221.051 9.35901 221.082 9.31598 221.125 9.289 cv
221.16 9.26599 221.207 9.25403 221.262 9.25 cv
222.086 9.25 li
222.086 7.69897 li
222.082 7.65198 222.098 7.60498 222.129 7.55902 cv
222.156 7.52002 222.207 7.48401 222.285 7.453 cv
222.359 7.42999 222.461 7.40601 222.59 7.39099 cv
222.715 7.37903 222.871 7.375 223.063 7.37097 cv
223.25 7.375 223.41 7.37903 223.539 7.39099 cv
223.664 7.40601 223.766 7.42999 223.84 7.453 cv
223.91 7.48401 223.961 7.52002 223.996 7.55902 cv
224.023 7.60498 224.039 7.65198 224.043 7.69897 cv
224.043 9.25 li
225.555 9.25 li
225.605 9.25403 225.652 9.26599 225.691 9.289 cv
225.73 9.31598 225.762 9.35901 225.789 9.41803 cv
225.813 9.47998 225.832 9.56201 225.848 9.664 cv
225.859 9.76599 225.867 9.89502 225.867 10.043 cv
225.867 10.332 225.84 10.535 225.789 10.656 cv
225.734 10.781 225.66 10.844 225.563 10.84 cv
224.043 10.84 li
224.043 14.105 li
224.039 14.484 224.098 14.77 224.223 14.957 cv
224.34 15.148 224.555 15.242 224.859 15.242 cv
224.961 15.242 225.055 15.234 225.141 15.215 cv
225.223 15.199 225.297 15.18 225.363 15.152 cv
225.426 15.133 225.48 15.109 225.527 15.09 cv
225.57 15.074 225.609 15.066 225.648 15.062 cv
225.676 15.066 225.707 15.074 225.738 15.09 cv
225.766 15.109 225.785 15.148 225.805 15.199 cv
225.816 15.258 225.832 15.332 225.848 15.422 cv
225.859 15.52 225.867 15.637 225.867 15.781 cv
cp
f
229.254 16.465 mo
229.25 16.52 229.234 16.562 229.207 16.602 cv
229.172 16.641 229.117 16.676 229.047 16.699 cv
228.969 16.727 228.871 16.742 228.746 16.758 cv
228.621 16.77 228.461 16.777 228.273 16.777 cv
228.078 16.777 227.922 16.77 227.797 16.758 cv
227.672 16.742 227.57 16.727 227.496 16.699 cv
227.418 16.676 227.363 16.641 227.336 16.602 cv
227.301 16.562 227.285 16.52 227.289 16.465 cv
227.289 9.53101 li
227.285 9.47998 227.301 9.43402 227.336 9.39502 cv
227.363 9.35498 227.418 9.32397 227.496 9.29303 cv
227.57 9.27002 227.672 9.24597 227.797 9.22699 cv
227.922 9.21503 228.078 9.20697 228.273 9.203 cv
228.461 9.20697 228.621 9.21503 228.746 9.22699 cv
228.871 9.24597 228.969 9.27002 229.047 9.29303 cv
229.117 9.32397 229.172 9.35498 229.207 9.39502 cv
229.234 9.43402 229.25 9.47998 229.254 9.53101 cv
cp
229.402 7.15997 mo
229.402 7.55902 229.32 7.83197 229.16 7.97998 cv
228.996 8.133 228.699 8.20697 228.266 8.203 cv
227.82 8.20697 227.52 8.133 227.371 7.98798 cv
227.215 7.84399 227.141 7.58197 227.141 7.19897 cv
227.141 6.80499 227.219 6.53101 227.379 6.37903 cv
227.535 6.22699 227.836 6.14801 228.281 6.14801 cv
228.715 6.14801 229.012 6.22302 229.168 6.37097 cv
229.324 6.52002 229.402 6.78497 229.402 7.15997 cv
cp
f
242.273 16.465 mo
242.27 16.52 242.254 16.562 242.227 16.602 cv
242.191 16.641 242.141 16.676 242.07 16.699 cv
241.996 16.727 241.895 16.742 241.773 16.758 cv
241.648 16.77 241.492 16.777 241.301 16.777 cv
241.102 16.777 240.941 16.77 240.816 16.758 cv
240.691 16.742 240.59 16.727 240.516 16.699 cv
240.438 16.676 240.387 16.641 240.359 16.602 cv
240.332 16.562 240.316 16.52 240.32 16.465 cv
240.32 12.344 li
240.316 12.113 240.297 11.898 240.254 11.703 cv
240.207 11.512 240.137 11.348 240.051 11.211 cv
239.957 11.074 239.844 10.969 239.707 10.891 cv
239.566 10.816 239.402 10.777 239.211 10.777 cv
238.977 10.777 238.738 10.871 238.5 11.051 cv
238.262 11.234 238.004 11.496 237.723 11.844 cv
237.723 16.465 li
237.723 16.52 237.707 16.562 237.676 16.602 cv
237.645 16.641 237.59 16.676 237.516 16.699 cv
237.438 16.727 237.336 16.742 237.215 16.758 cv
237.09 16.77 236.938 16.777 236.75 16.777 cv
236.555 16.777 236.395 16.77 236.273 16.758 cv
236.145 16.742 236.043 16.727 235.973 16.699 cv
235.895 16.676 235.844 16.641 235.813 16.602 cv
235.781 16.562 235.766 16.52 235.766 16.465 cv
235.766 12.344 li
235.766 12.113 235.742 11.898 235.699 11.703 cv
235.656 11.512 235.59 11.348 235.504 11.211 cv
235.41 11.074 235.297 10.969 235.16 10.891 cv
235.016 10.816 234.852 10.777 234.668 10.777 cv
234.426 10.777 234.188 10.871 233.949 11.051 cv
233.711 11.234 233.453 11.496 233.18 11.844 cv
233.18 16.465 li
233.176 16.52 233.16 16.562 233.133 16.602 cv
233.098 16.641 233.043 16.676 232.973 16.699 cv
232.895 16.727 232.797 16.742 232.672 16.758 cv
232.547 16.77 232.387 16.777 232.199 16.777 cv
232.004 16.777 231.848 16.77 231.723 16.758 cv
231.598 16.742 231.496 16.727 231.422 16.699 cv
231.344 16.676 231.289 16.641 231.262 16.602 cv
231.227 16.562 231.211 16.52 231.215 16.465 cv
231.215 9.51599 li
231.211 9.46899 231.227 9.422 231.254 9.37903 cv
231.277 9.34399 231.324 9.31201 231.395 9.28101 cv
231.461 9.258 231.547 9.23798 231.656 9.22302 cv
231.762 9.21503 231.895 9.20697 232.059 9.203 cv
232.223 9.20697 232.359 9.21503 232.469 9.22302 cv
232.574 9.23798 232.66 9.258 232.723 9.28101 cv
232.781 9.31201 232.824 9.34399 232.852 9.37903 cv
232.875 9.422 232.887 9.46899 232.891 9.51599 cv
232.891 10.316 li
233.273 9.90601 233.656 9.59399 234.039 9.383 cv
234.418 9.17603 234.82 9.07397 235.238 9.07001 cv
235.523 9.07397 235.777 9.10199 236.008 9.15997 cv
236.234 9.22302 236.441 9.30902 236.621 9.41803 cv
236.801 9.53101 236.953 9.66803 237.082 9.82001 cv
237.211 9.97699 237.32 10.148 237.41 10.34 cv
237.617 10.117 237.82 9.92603 238.023 9.76599 cv
238.219 9.60498 238.418 9.47302 238.613 9.37097 cv
238.809 9.27002 239.004 9.19501 239.199 9.14502 cv
239.395 9.09802 239.594 9.07397 239.797 9.07001 cv
240.258 9.07397 240.645 9.15198 240.965 9.30499 cv
241.277 9.46503 241.535 9.67603 241.73 9.94098 cv
241.926 10.211 242.063 10.523 242.148 10.879 cv
242.227 11.238 242.27 11.617 242.273 12.016 cv
cp
f
250.613 12.789 mo
250.609 13.027 250.559 13.203 250.453 13.316 cv
250.344 13.434 250.195 13.492 250.016 13.488 cv
245.781 13.488 li
245.777 13.789 245.813 14.059 245.887 14.297 cv
245.953 14.539 246.066 14.742 246.223 14.91 cv
246.375 15.082 246.57 15.211 246.813 15.297 cv
247.051 15.387 247.34 15.43 247.684 15.43 cv
248.023 15.43 248.324 15.406 248.586 15.355 cv
248.844 15.309 249.07 15.254 249.262 15.191 cv
249.449 15.133 249.605 15.078 249.734 15.027 cv
249.855 14.98 249.957 14.957 250.039 14.953 cv
250.082 14.957 250.121 14.965 250.156 14.98 cv
250.184 15 250.211 15.031 250.23 15.078 cv
250.25 15.125 250.262 15.191 250.273 15.277 cv
250.277 15.363 250.281 15.473 250.285 15.602 cv
250.281 15.719 250.281 15.816 250.277 15.895 cv
250.27 15.977 250.262 16.043 250.254 16.098 cv
250.242 16.156 250.227 16.207 250.207 16.242 cv
250.188 16.285 250.16 16.32 250.129 16.355 cv
250.094 16.395 250 16.445 249.852 16.504 cv
249.695 16.57 249.504 16.633 249.273 16.687 cv
249.035 16.75 248.766 16.797 248.469 16.844 cv
248.164 16.883 247.844 16.906 247.504 16.91 cv
246.883 16.906 246.34 16.832 245.879 16.676 cv
245.41 16.523 245.023 16.285 244.715 15.969 cv
244.398 15.652 244.164 15.254 244.016 14.77 cv
243.859 14.289 243.785 13.723 243.789 13.066 cv
243.785 12.453 243.863 11.895 244.027 11.398 cv
244.184 10.902 244.418 10.484 244.73 10.137 cv
245.035 9.79303 245.41 9.52698 245.848 9.34399 cv
246.285 9.164 246.777 9.07397 247.332 9.07001 cv
247.91 9.07397 248.41 9.15997 248.824 9.328 cv
249.238 9.50403 249.574 9.742 249.84 10.043 cv
250.102 10.348 250.297 10.707 250.426 11.121 cv
250.547 11.539 250.609 11.988 250.613 12.477 cv
cp
248.711 12.227 mo
248.723 11.676 248.613 11.242 248.379 10.93 cv
248.145 10.617 247.777 10.461 247.285 10.457 cv
247.035 10.461 246.82 10.508 246.637 10.598 cv
246.449 10.695 246.297 10.82 246.176 10.977 cv
246.051 11.137 245.957 11.324 245.895 11.539 cv
245.828 11.754 245.789 11.984 245.781 12.227 cv
cp
f
257.113 14.5 mo
257.109 14.898 257.035 15.246 256.891 15.547 cv
256.742 15.848 256.535 16.102 256.266 16.301 cv
255.992 16.508 255.672 16.656 255.305 16.758 cv
254.938 16.855 254.535 16.906 254.105 16.91 cv
253.84 16.906 253.594 16.887 253.359 16.852 cv
253.125 16.809 252.914 16.762 252.727 16.703 cv
252.539 16.645 252.383 16.582 252.258 16.52 cv
252.133 16.457 252.039 16.398 251.984 16.344 cv
251.926 16.289 251.883 16.207 251.855 16.09 cv
251.82 15.977 251.805 15.801 251.809 15.57 cv
251.805 15.422 251.813 15.301 251.824 15.207 cv
251.832 15.117 251.848 15.047 251.871 14.988 cv
251.891 14.937 251.914 14.898 251.949 14.879 cv
251.977 14.863 252.016 14.855 252.063 14.852 cv
252.117 14.855 252.203 14.887 252.316 14.949 cv
252.426 15.016 252.563 15.09 252.734 15.164 cv
252.898 15.246 253.094 15.316 253.313 15.383 cv
253.531 15.453 253.781 15.488 254.066 15.484 cv
254.242 15.488 254.398 15.469 254.539 15.43 cv
254.672 15.395 254.793 15.344 254.898 15.273 cv
254.996 15.207 255.07 15.121 255.125 15.016 cv
255.172 14.914 255.199 14.793 255.203 14.656 cv
255.199 14.5 255.152 14.367 255.059 14.258 cv
254.965 14.148 254.836 14.051 254.68 13.965 cv
254.516 13.883 254.336 13.805 254.141 13.73 cv
253.938 13.66 253.734 13.582 253.523 13.488 cv
253.313 13.402 253.105 13.301 252.91 13.184 cv
252.707 13.074 252.527 12.934 252.371 12.766 cv
252.207 12.602 252.082 12.402 251.988 12.164 cv
251.895 11.934 251.848 11.652 251.848 11.32 cv
251.848 10.992 251.91 10.687 252.039 10.406 cv
252.168 10.133 252.355 9.89502 252.602 9.69501 cv
252.844 9.5 253.141 9.34802 253.492 9.23401 cv
253.84 9.12903 254.234 9.07397 254.676 9.07001 cv
254.891 9.07397 255.102 9.09003 255.309 9.117 cv
255.512 9.15198 255.699 9.19098 255.867 9.23401 cv
256.031 9.28497 256.172 9.336 256.289 9.38702 cv
256.402 9.44501 256.484 9.492 256.535 9.52698 cv
256.582 9.57001 256.617 9.60901 256.641 9.64502 cv
256.66 9.68701 256.672 9.73401 256.684 9.78497 cv
256.691 9.84003 256.703 9.90601 256.711 9.98401 cv
256.719 10.07 256.723 10.168 256.723 10.285 cv
256.723 10.426 256.719 10.543 256.711 10.629 cv
256.703 10.723 256.688 10.793 256.672 10.84 cv
256.652 10.895 256.629 10.93 256.602 10.945 cv
256.566 10.969 256.531 10.977 256.492 10.973 cv
256.441 10.977 256.367 10.949 256.273 10.891 cv
256.172 10.84 256.051 10.781 255.902 10.715 cv
255.754 10.656 255.582 10.598 255.387 10.539 cv
255.191 10.488 254.969 10.461 254.723 10.457 cv
254.543 10.461 254.391 10.48 254.262 10.512 cv
254.129 10.551 254.02 10.602 253.941 10.668 cv
253.855 10.738 253.793 10.816 253.754 10.906 cv
253.707 11 253.688 11.098 253.691 11.199 cv
253.688 11.359 253.738 11.496 253.84 11.602 cv
253.938 11.715 254.066 11.809 254.23 11.891 cv
254.391 11.977 254.574 12.055 254.781 12.125 cv
254.984 12.199 255.191 12.281 255.402 12.363 cv
255.609 12.453 255.816 12.551 256.027 12.664 cv
256.23 12.777 256.414 12.918 256.574 13.082 cv
256.734 13.25 256.863 13.449 256.965 13.68 cv
257.059 13.914 257.109 14.187 257.113 14.5 cv
cp
f
273.059 9.5 mo
273.055 9.55902 273.047 9.62903 273.035 9.711 cv
273.016 9.79303 272.988 9.914 272.949 10.066 cv
271.094 16.355 li
271.066 16.445 271.031 16.52 270.992 16.57 cv
270.949 16.629 270.887 16.672 270.801 16.699 cv
270.715 16.73 270.59 16.746 270.434 16.762 cv
270.27 16.77 270.066 16.777 269.816 16.777 cv
269.559 16.777 269.348 16.77 269.191 16.758 cv
269.027 16.742 268.902 16.723 268.813 16.691 cv
268.719 16.664 268.652 16.621 268.613 16.562 cv
268.57 16.512 268.539 16.441 268.52 16.355 cv
267.352 12.133 li
267.336 12.062 li
267.32 12.133 li
266.246 16.355 li
266.223 16.445 266.191 16.52 266.156 16.57 cv
266.113 16.629 266.047 16.672 265.957 16.699 cv
265.859 16.73 265.734 16.746 265.574 16.762 cv
265.414 16.77 265.207 16.777 264.953 16.777 cv
264.691 16.777 264.48 16.77 264.324 16.758 cv
264.164 16.742 264.039 16.723 263.949 16.691 cv
263.855 16.664 263.789 16.621 263.75 16.562 cv
263.707 16.512 263.676 16.441 263.66 16.355 cv
261.82 10.066 li
261.77 9.91803 261.742 9.80103 261.73 9.71503 cv
261.715 9.633 261.707 9.55902 261.711 9.5 cv
261.707 9.44897 261.723 9.40601 261.754 9.36298 cv
261.781 9.328 261.832 9.297 261.91 9.27002 cv
261.984 9.25 262.086 9.22998 262.211 9.21899 cv
262.336 9.211 262.496 9.20697 262.691 9.203 cv
262.898 9.20697 263.066 9.211 263.199 9.21899 cv
263.328 9.22998 263.43 9.25 263.504 9.27301 cv
263.574 9.30103 263.625 9.336 263.656 9.37903 cv
263.684 9.42603 263.707 9.47998 263.723 9.539 cv
265.102 14.641 li
265.117 14.734 li
265.133 14.641 li
266.426 9.539 li
266.438 9.47998 266.465 9.42603 266.5 9.37903 cv
266.531 9.336 266.582 9.30103 266.652 9.27301 cv
266.719 9.25 266.813 9.22998 266.934 9.21899 cv
267.055 9.211 267.211 9.20697 267.406 9.203 cv
267.598 9.20697 267.754 9.21503 267.875 9.22302 cv
267.992 9.23798 268.086 9.25403 268.16 9.27698 cv
268.227 9.30103 268.277 9.33197 268.309 9.37097 cv
268.336 9.40997 268.359 9.45697 268.375 9.508 cv
269.762 14.648 li
269.785 14.734 li
269.801 14.641 li
271.125 9.539 li
271.133 9.47998 271.156 9.42603 271.188 9.37903 cv
271.219 9.336 271.27 9.30103 271.344 9.27301 cv
271.414 9.25 271.512 9.22998 271.637 9.21899 cv
271.758 9.211 271.918 9.20697 272.113 9.203 cv
272.305 9.20697 272.461 9.211 272.586 9.21899 cv
272.707 9.22998 272.805 9.25 272.875 9.27002 cv
272.945 9.297 272.992 9.328 273.02 9.36298 cv
273.043 9.40601 273.055 9.44897 273.059 9.5 cv
cp
f
276.273 16.465 mo
276.27 16.52 276.254 16.562 276.227 16.602 cv
276.191 16.641 276.137 16.676 276.066 16.699 cv
275.988 16.727 275.891 16.742 275.766 16.758 cv
275.641 16.77 275.48 16.777 275.293 16.777 cv
275.098 16.777 274.941 16.77 274.816 16.758 cv
274.691 16.742 274.59 16.727 274.516 16.699 cv
274.438 16.676 274.383 16.641 274.355 16.602 cv
274.32 16.562 274.305 16.52 274.309 16.465 cv
274.309 9.53101 li
274.305 9.47998 274.32 9.43402 274.355 9.39502 cv
274.383 9.35498 274.438 9.32397 274.516 9.29303 cv
274.59 9.27002 274.691 9.24597 274.816 9.22699 cv
274.941 9.21503 275.098 9.20697 275.293 9.203 cv
275.48 9.20697 275.641 9.21503 275.766 9.22699 cv
275.891 9.24597 275.988 9.27002 276.066 9.29303 cv
276.137 9.32397 276.191 9.35498 276.227 9.39502 cv
276.254 9.43402 276.27 9.47998 276.273 9.53101 cv
cp
276.422 7.15997 mo
276.422 7.55902 276.34 7.83197 276.18 7.97998 cv
276.016 8.133 275.719 8.20697 275.285 8.203 cv
274.84 8.20697 274.539 8.133 274.391 7.98798 cv
274.234 7.84399 274.16 7.58197 274.16 7.19897 cv
274.16 6.80499 274.238 6.53101 274.398 6.37903 cv
274.555 6.22699 274.855 6.14801 275.301 6.14801 cv
275.734 6.14801 276.031 6.22302 276.188 6.37097 cv
276.344 6.52002 276.422 6.78497 276.422 7.15997 cv
cp
f
282.352 15.781 mo
282.352 16.008 282.336 16.184 282.309 16.305 cv
282.277 16.43 282.238 16.516 282.195 16.562 cv
282.145 16.613 282.078 16.656 281.988 16.695 cv
281.895 16.734 281.785 16.766 281.668 16.797 cv
281.543 16.82 281.41 16.844 281.27 16.863 cv
281.125 16.875 280.984 16.883 280.84 16.887 cv
280.449 16.883 280.109 16.832 279.824 16.738 cv
279.539 16.637 279.305 16.488 279.117 16.281 cv
278.93 16.078 278.789 15.82 278.703 15.508 cv
278.609 15.199 278.566 14.828 278.57 14.398 cv
278.57 10.84 li
277.738 10.84 li
277.637 10.844 277.563 10.781 277.512 10.656 cv
277.457 10.535 277.43 10.332 277.434 10.043 cv
277.43 9.89502 277.438 9.76599 277.453 9.664 cv
277.465 9.56201 277.484 9.47998 277.512 9.41803 cv
277.535 9.35901 277.566 9.31598 277.609 9.289 cv
277.645 9.26599 277.691 9.25403 277.746 9.25 cv
278.57 9.25 li
278.57 7.69897 li
278.566 7.65198 278.582 7.60498 278.613 7.55902 cv
278.641 7.52002 278.691 7.48401 278.77 7.453 cv
278.844 7.42999 278.945 7.40601 279.074 7.39099 cv
279.199 7.37903 279.355 7.375 279.547 7.37097 cv
279.734 7.375 279.895 7.37903 280.023 7.39099 cv
280.148 7.40601 280.25 7.42999 280.324 7.453 cv
280.395 7.48401 280.445 7.52002 280.48 7.55902 cv
280.508 7.60498 280.523 7.65198 280.527 7.69897 cv
280.527 9.25 li
282.039 9.25 li
282.09 9.25403 282.137 9.26599 282.176 9.289 cv
282.215 9.31598 282.246 9.35901 282.273 9.41803 cv
282.297 9.47998 282.316 9.56201 282.332 9.664 cv
282.344 9.76599 282.352 9.89502 282.352 10.043 cv
282.352 10.332 282.324 10.535 282.273 10.656 cv
282.219 10.781 282.145 10.844 282.047 10.84 cv
280.527 10.84 li
280.527 14.105 li
280.523 14.484 280.582 14.77 280.707 14.957 cv
280.824 15.148 281.039 15.242 281.344 15.242 cv
281.445 15.242 281.539 15.234 281.625 15.215 cv
281.707 15.199 281.781 15.18 281.848 15.152 cv
281.91 15.133 281.965 15.109 282.012 15.09 cv
282.055 15.074 282.094 15.066 282.133 15.062 cv
282.16 15.066 282.191 15.074 282.223 15.09 cv
282.25 15.109 282.27 15.148 282.289 15.199 cv
282.301 15.258 282.316 15.332 282.332 15.422 cv
282.344 15.52 282.352 15.637 282.352 15.781 cv
cp
f
290.414 16.465 mo
290.41 16.52 290.395 16.562 290.367 16.602 cv
290.332 16.641 290.281 16.676 290.211 16.699 cv
290.137 16.727 290.035 16.742 289.91 16.758 cv
289.781 16.77 289.625 16.777 289.441 16.777 cv
289.246 16.777 289.086 16.77 288.961 16.758 cv
288.832 16.742 288.73 16.727 288.66 16.699 cv
288.582 16.676 288.531 16.641 288.504 16.602 cv
288.469 16.562 288.453 16.52 288.457 16.465 cv
288.457 12.5 li
288.453 12.164 288.43 11.898 288.383 11.703 cv
288.332 11.512 288.258 11.348 288.168 11.211 cv
288.074 11.074 287.957 10.969 287.809 10.891 cv
287.66 10.816 287.484 10.777 287.289 10.777 cv
287.035 10.777 286.785 10.871 286.531 11.051 cv
286.277 11.234 286.012 11.496 285.738 11.844 cv
285.738 16.465 li
285.734 16.52 285.719 16.562 285.691 16.602 cv
285.656 16.641 285.602 16.676 285.531 16.699 cv
285.453 16.727 285.355 16.742 285.23 16.758 cv
285.105 16.77 284.945 16.777 284.758 16.777 cv
284.563 16.777 284.406 16.77 284.281 16.758 cv
284.156 16.742 284.055 16.727 283.98 16.699 cv
283.902 16.676 283.848 16.641 283.82 16.602 cv
283.785 16.562 283.77 16.52 283.773 16.465 cv
283.773 6.21899 li
283.77 6.16803 283.785 6.12097 283.82 6.078 cv
283.848 6.039 283.902 6.00403 283.98 5.97302 cv
284.055 5.94501 284.156 5.92603 284.281 5.90601 cv
284.406 5.89502 284.563 5.88702 284.758 5.883 cv
284.945 5.88702 285.105 5.89502 285.23 5.90601 cv
285.355 5.92603 285.453 5.94501 285.531 5.97302 cv
285.602 6.00403 285.656 6.039 285.691 6.078 cv
285.719 6.12097 285.734 6.16803 285.738 6.21899 cv
285.738 10.059 li
286.074 9.72998 286.418 9.48401 286.77 9.31598 cv
287.117 9.15601 287.484 9.07397 287.867 9.07001 cv
288.336 9.07397 288.734 9.15198 289.063 9.30499 cv
289.387 9.46503 289.648 9.67603 289.848 9.94501 cv
290.047 10.215 290.191 10.531 290.281 10.891 cv
290.367 11.254 290.41 11.691 290.414 12.203 cv
cp
f
302.09 15.93 mo
302.086 16.082 302.082 16.207 302.07 16.305 cv
302.055 16.41 302.035 16.492 302.012 16.551 cv
301.988 16.617 301.957 16.664 301.918 16.687 cv
301.879 16.719 301.836 16.73 301.789 16.73 cv
296.723 16.73 li
296.547 16.73 296.402 16.68 296.289 16.578 cv
296.168 16.477 296.109 16.312 296.113 16.082 cv
296.113 7.29303 li
296.109 7.06598 296.168 6.90198 296.289 6.797 cv
296.402 6.69897 296.547 6.64801 296.723 6.64502 cv
301.758 6.64502 li
301.801 6.64801 301.844 6.65997 301.883 6.68402 cv
301.918 6.711 301.949 6.758 301.977 6.82001 cv
302 6.89099 302.016 6.97302 302.031 7.07001 cv
302.039 7.17603 302.047 7.30499 302.051 7.45697 cv
302.047 7.60498 302.039 7.72998 302.031 7.828 cv
302.016 7.93402 302 8.01599 301.977 8.07397 cv
301.949 8.13702 301.918 8.17999 301.883 8.20697 cv
301.844 8.23798 301.801 8.25403 301.758 8.25 cv
298.156 8.25 li
298.156 10.715 li
301.203 10.715 li
301.25 10.719 301.293 10.734 301.332 10.758 cv
301.371 10.789 301.402 10.832 301.43 10.891 cv
301.453 10.953 301.473 11.035 301.488 11.133 cv
301.5 11.234 301.508 11.355 301.508 11.5 cv
301.508 11.652 301.5 11.777 301.488 11.875 cv
301.473 11.977 301.453 12.055 301.43 12.113 cv
301.402 12.176 301.371 12.219 301.332 12.242 cv
301.293 12.27 301.25 12.285 301.203 12.281 cv
298.156 12.281 li
298.156 15.125 li
301.789 15.125 li
301.836 15.125 301.879 15.141 301.918 15.168 cv
301.957 15.199 301.988 15.246 302.012 15.305 cv
302.035 15.371 302.055 15.453 302.07 15.551 cv
302.082 15.656 302.086 15.781 302.09 15.93 cv
cp
f
305.75 16.465 mo
305.746 16.52 305.73 16.562 305.703 16.602 cv
305.668 16.641 305.613 16.676 305.543 16.699 cv
305.465 16.727 305.367 16.742 305.242 16.758 cv
305.117 16.77 304.957 16.777 304.77 16.777 cv
304.574 16.777 304.418 16.77 304.293 16.758 cv
304.168 16.742 304.066 16.727 303.992 16.699 cv
303.914 16.676 303.859 16.641 303.832 16.602 cv
303.797 16.562 303.781 16.52 303.785 16.465 cv
303.785 9.53101 li
303.781 9.47998 303.797 9.43402 303.832 9.39502 cv
303.859 9.35498 303.914 9.32397 303.992 9.29303 cv
304.066 9.27002 304.168 9.24597 304.293 9.22699 cv
304.418 9.21503 304.574 9.20697 304.77 9.203 cv
304.957 9.20697 305.117 9.21503 305.242 9.22699 cv
305.367 9.24597 305.465 9.27002 305.543 9.29303 cv
305.613 9.32397 305.668 9.35498 305.703 9.39502 cv
305.73 9.43402 305.746 9.47998 305.75 9.53101 cv
cp
305.898 7.15997 mo
305.898 7.55902 305.816 7.83197 305.656 7.97998 cv
305.492 8.133 305.195 8.20697 304.762 8.203 cv
304.316 8.20697 304.016 8.133 303.867 7.98798 cv
303.711 7.84399 303.637 7.58197 303.637 7.19897 cv
303.637 6.80499 303.715 6.53101 303.875 6.37903 cv
304.031 6.22699 304.332 6.14801 304.777 6.14801 cv
305.211 6.14801 305.508 6.22302 305.664 6.37097 cv
305.82 6.52002 305.898 6.78497 305.898 7.15997 cv
cp
f
313.977 9.99597 mo
313.973 10.25 313.945 10.434 313.891 10.551 cv
313.832 10.672 313.762 10.73 313.684 10.73 cv
312.863 10.73 li
312.977 10.855 313.059 11 313.109 11.156 cv
313.156 11.316 313.18 11.48 313.184 11.648 cv
313.18 12.059 313.113 12.418 312.98 12.73 cv
312.844 13.047 312.648 13.312 312.398 13.523 cv
312.145 13.742 311.844 13.906 311.488 14.016 cv
311.129 14.133 310.73 14.187 310.301 14.184 cv
310.074 14.187 309.863 14.16 309.66 14.102 cv
309.457 14.051 309.301 13.988 309.191 13.91 cv
309.129 13.98 309.07 14.059 309.023 14.152 cv
308.973 14.246 308.949 14.352 308.953 14.461 cv
308.949 14.617 309.016 14.738 309.148 14.832 cv
309.277 14.93 309.465 14.984 309.707 14.992 cv
311.398 15.055 li
311.793 15.07 312.145 15.129 312.453 15.223 cv
312.762 15.324 313.023 15.457 313.234 15.629 cv
313.445 15.805 313.605 16.016 313.715 16.258 cv
313.824 16.504 313.879 16.777 313.883 17.09 cv
313.879 17.426 313.805 17.75 313.656 18.059 cv
313.508 18.359 313.281 18.621 312.98 18.848 cv
312.676 19.066 312.297 19.246 311.844 19.379 cv
311.387 19.508 310.855 19.57 310.254 19.574 cv
309.656 19.57 309.152 19.523 308.734 19.434 cv
308.316 19.336 307.973 19.207 307.707 19.043 cv
307.438 18.875 307.242 18.676 307.125 18.449 cv
307 18.215 306.941 17.961 306.941 17.687 cv
306.941 17.516 306.961 17.355 307.008 17.199 cv
307.047 17.043 307.113 16.891 307.203 16.75 cv
307.285 16.605 307.391 16.473 307.516 16.34 cv
307.641 16.211 307.781 16.086 307.945 15.965 cv
307.719 15.852 307.547 15.691 307.426 15.48 cv
307.305 15.277 307.246 15.051 307.246 14.805 cv
307.246 14.504 307.313 14.227 307.453 13.969 cv
307.59 13.719 307.773 13.488 308 13.285 cv
307.816 13.105 307.672 12.891 307.563 12.633 cv
307.453 12.383 307.398 12.062 307.402 11.68 cv
307.398 11.277 307.469 10.918 307.613 10.594 cv
307.754 10.277 307.953 10.008 308.211 9.78497 cv
308.465 9.56598 308.77 9.39502 309.121 9.27698 cv
309.473 9.15997 309.863 9.10199 310.293 9.10199 cv
310.512 9.10199 310.719 9.117 310.918 9.14099 cv
311.117 9.172 311.305 9.20697 311.477 9.25 cv
313.684 9.25 li
313.766 9.25403 313.836 9.31201 313.895 9.422 cv
313.945 9.539 313.973 9.72998 313.977 9.99597 cv
cp
311.461 11.641 mo
311.457 11.27 311.355 10.98 311.148 10.77 cv
310.938 10.566 310.645 10.461 310.27 10.457 cv
310.074 10.461 309.902 10.492 309.762 10.555 cv
309.613 10.621 309.492 10.711 309.398 10.82 cv
309.297 10.934 309.227 11.062 309.184 11.211 cv
309.133 11.359 309.109 11.516 309.113 11.672 cv
309.109 12.031 309.215 12.309 309.426 12.512 cv
309.633 12.719 309.922 12.824 310.293 12.82 cv
310.488 12.824 310.656 12.793 310.805 12.727 cv
310.945 12.668 311.066 12.582 311.168 12.469 cv
311.262 12.363 311.336 12.234 311.387 12.09 cv
311.434 11.949 311.457 11.801 311.461 11.641 cv
cp
311.922 17.191 mo
311.922 16.953 311.828 16.777 311.641 16.652 cv
311.453 16.531 311.195 16.461 310.867 16.449 cv
309.473 16.41 li
309.336 16.512 309.227 16.605 309.148 16.695 cv
309.066 16.785 309.004 16.871 308.957 16.957 cv
308.906 17.039 308.871 17.121 308.859 17.199 cv
308.84 17.277 308.832 17.355 308.836 17.441 cv
308.832 17.695 308.965 17.895 309.227 18.031 cv
309.488 18.164 309.859 18.23 310.34 18.234 cv
310.633 18.23 310.879 18.199 311.086 18.145 cv
311.285 18.082 311.449 18.004 311.578 17.906 cv
311.699 17.805 311.789 17.695 311.844 17.574 cv
311.895 17.453 311.922 17.324 311.922 17.191 cv
cp
f
321.918 16.465 mo
321.914 16.52 321.898 16.562 321.871 16.602 cv
321.836 16.641 321.785 16.676 321.715 16.699 cv
321.641 16.727 321.539 16.742 321.414 16.758 cv
321.285 16.77 321.129 16.777 320.945 16.777 cv
320.75 16.777 320.59 16.77 320.465 16.758 cv
320.336 16.742 320.234 16.727 320.164 16.699 cv
320.086 16.676 320.035 16.641 320.008 16.602 cv
319.973 16.562 319.957 16.52 319.961 16.465 cv
319.961 12.5 li
319.957 12.164 319.934 11.898 319.887 11.703 cv
319.836 11.512 319.762 11.348 319.672 11.211 cv
319.578 11.074 319.461 10.969 319.313 10.891 cv
319.164 10.816 318.988 10.777 318.793 10.777 cv
318.539 10.777 318.289 10.871 318.035 11.051 cv
317.781 11.234 317.516 11.496 317.242 11.844 cv
317.242 16.465 li
317.238 16.52 317.223 16.562 317.195 16.602 cv
317.16 16.641 317.105 16.676 317.035 16.699 cv
316.957 16.727 316.859 16.742 316.734 16.758 cv
316.609 16.77 316.449 16.777 316.262 16.777 cv
316.066 16.777 315.91 16.77 315.785 16.758 cv
315.66 16.742 315.559 16.727 315.484 16.699 cv
315.406 16.676 315.352 16.641 315.324 16.602 cv
315.289 16.562 315.273 16.52 315.277 16.465 cv
315.277 6.21899 li
315.273 6.16803 315.289 6.12097 315.324 6.078 cv
315.352 6.039 315.406 6.00403 315.484 5.97302 cv
315.559 5.94501 315.66 5.92603 315.785 5.90601 cv
315.91 5.89502 316.066 5.88702 316.262 5.883 cv
316.449 5.88702 316.609 5.89502 316.734 5.90601 cv
316.859 5.92603 316.957 5.94501 317.035 5.97302 cv
317.105 6.00403 317.16 6.039 317.195 6.078 cv
317.223 6.12097 317.238 6.16803 317.242 6.21899 cv
317.242 10.059 li
317.578 9.72998 317.922 9.48401 318.273 9.31598 cv
318.621 9.15601 318.988 9.07397 319.371 9.07001 cv
319.84 9.07397 320.238 9.15198 320.566 9.30499 cv
320.891 9.46503 321.152 9.67603 321.352 9.94501 cv
321.551 10.215 321.695 10.531 321.785 10.891 cv
321.871 11.254 321.914 11.691 321.918 12.203 cv
cp
f
327.836 15.781 mo
327.836 16.008 327.82 16.184 327.793 16.305 cv
327.762 16.43 327.723 16.516 327.68 16.562 cv
327.629 16.613 327.563 16.656 327.473 16.695 cv
327.379 16.734 327.27 16.766 327.152 16.797 cv
327.027 16.82 326.895 16.844 326.754 16.863 cv
326.609 16.875 326.469 16.883 326.324 16.887 cv
325.934 16.883 325.594 16.832 325.309 16.738 cv
325.023 16.637 324.789 16.488 324.602 16.281 cv
324.414 16.078 324.273 15.82 324.188 15.508 cv
324.094 15.199 324.051 14.828 324.055 14.398 cv
324.055 10.84 li
323.223 10.84 li
323.121 10.844 323.047 10.781 322.996 10.656 cv
322.941 10.535 322.914 10.332 322.918 10.043 cv
322.914 9.89502 322.922 9.76599 322.938 9.664 cv
322.949 9.56201 322.969 9.47998 322.996 9.41803 cv
323.02 9.35901 323.051 9.31598 323.094 9.289 cv
323.129 9.26599 323.176 9.25403 323.23 9.25 cv
324.055 9.25 li
324.055 7.69897 li
324.051 7.65198 324.066 7.60498 324.098 7.55902 cv
324.125 7.52002 324.176 7.48401 324.254 7.453 cv
324.328 7.42999 324.43 7.40601 324.559 7.39099 cv
324.684 7.37903 324.84 7.375 325.031 7.37097 cv
325.219 7.375 325.379 7.37903 325.508 7.39099 cv
325.633 7.40601 325.734 7.42999 325.809 7.453 cv
325.879 7.48401 325.93 7.52002 325.965 7.55902 cv
325.992 7.60498 326.008 7.65198 326.012 7.69897 cv
326.012 9.25 li
327.523 9.25 li
327.574 9.25403 327.621 9.26599 327.66 9.289 cv
327.699 9.31598 327.73 9.35901 327.758 9.41803 cv
327.781 9.47998 327.801 9.56201 327.816 9.664 cv
327.828 9.76599 327.836 9.89502 327.836 10.043 cv
327.836 10.332 327.809 10.535 327.758 10.656 cv
327.703 10.781 327.629 10.844 327.531 10.84 cv
326.012 10.84 li
326.012 14.105 li
326.008 14.484 326.066 14.77 326.191 14.957 cv
326.309 15.148 326.523 15.242 326.828 15.242 cv
326.93 15.242 327.023 15.234 327.109 15.215 cv
327.191 15.199 327.266 15.18 327.332 15.152 cv
327.395 15.133 327.449 15.109 327.496 15.09 cv
327.539 15.074 327.578 15.066 327.617 15.062 cv
327.645 15.066 327.676 15.074 327.707 15.09 cv
327.734 15.109 327.754 15.148 327.773 15.199 cv
327.785 15.258 327.801 15.332 327.816 15.422 cv
327.828 15.52 327.836 15.637 327.836 15.781 cv
cp
f
339.691 7.48798 mo
339.688 7.64502 339.68 7.77301 339.672 7.875 cv
339.656 7.98401 339.637 8.07001 339.613 8.133 cv
339.582 8.19897 339.551 8.24597 339.516 8.27301 cv
339.473 8.30902 339.43 8.32397 339.387 8.32001 cv
336.863 8.32001 li
336.863 16.449 li
336.863 16.504 336.844 16.551 336.813 16.59 cv
336.773 16.633 336.719 16.668 336.645 16.691 cv
336.563 16.719 336.457 16.738 336.328 16.754 cv
336.191 16.77 336.027 16.777 335.832 16.777 cv
335.637 16.777 335.473 16.77 335.34 16.754 cv
335.207 16.738 335.102 16.719 335.023 16.691 cv
334.945 16.668 334.887 16.633 334.855 16.59 cv
334.816 16.551 334.801 16.504 334.805 16.449 cv
334.805 8.32001 li
332.281 8.32001 li
332.227 8.32397 332.18 8.30902 332.148 8.27301 cv
332.109 8.24597 332.078 8.19897 332.055 8.133 cv
332.023 8.07001 332.004 7.98401 331.996 7.875 cv
331.98 7.77301 331.977 7.64502 331.977 7.48798 cv
331.977 7.336 331.98 7.203 331.996 7.09003 cv
332.004 6.98401 332.023 6.89502 332.055 6.828 cv
332.078 6.76599 332.109 6.71899 332.148 6.68701 cv
332.18 6.65997 332.227 6.64801 332.281 6.64502 cv
339.387 6.64502 li
339.43 6.64801 339.473 6.65997 339.516 6.68701 cv
339.551 6.71899 339.582 6.76599 339.613 6.828 cv
339.637 6.89502 339.656 6.98401 339.672 7.09003 cv
339.68 7.203 339.688 7.336 339.691 7.48798 cv
cp
f
347.406 16.465 mo
347.402 16.52 347.387 16.562 347.359 16.602 cv
347.324 16.641 347.273 16.676 347.203 16.699 cv
347.129 16.727 347.027 16.742 346.902 16.758 cv
346.773 16.77 346.617 16.777 346.434 16.777 cv
346.238 16.777 346.078 16.77 345.953 16.758 cv
345.824 16.742 345.723 16.727 345.652 16.699 cv
345.574 16.676 345.523 16.641 345.496 16.602 cv
345.461 16.562 345.445 16.52 345.449 16.465 cv
345.449 12.5 li
345.445 12.164 345.422 11.898 345.375 11.703 cv
345.324 11.512 345.25 11.348 345.16 11.211 cv
345.066 11.074 344.949 10.969 344.801 10.891 cv
344.652 10.816 344.477 10.777 344.281 10.777 cv
344.027 10.777 343.777 10.871 343.523 11.051 cv
343.27 11.234 343.004 11.496 342.73 11.844 cv
342.73 16.465 li
342.727 16.52 342.711 16.562 342.684 16.602 cv
342.648 16.641 342.594 16.676 342.523 16.699 cv
342.445 16.727 342.348 16.742 342.223 16.758 cv
342.098 16.77 341.938 16.777 341.75 16.777 cv
341.555 16.777 341.398 16.77 341.273 16.758 cv
341.148 16.742 341.047 16.727 340.973 16.699 cv
340.895 16.676 340.84 16.641 340.813 16.602 cv
340.777 16.562 340.762 16.52 340.766 16.465 cv
340.766 6.21899 li
340.762 6.16803 340.777 6.12097 340.813 6.078 cv
340.84 6.039 340.895 6.00403 340.973 5.97302 cv
341.047 5.94501 341.148 5.92603 341.273 5.90601 cv
341.398 5.89502 341.555 5.88702 341.75 5.883 cv
341.938 5.88702 342.098 5.89502 342.223 5.90601 cv
342.348 5.92603 342.445 5.94501 342.523 5.97302 cv
342.594 6.00403 342.648 6.039 342.684 6.078 cv
342.711 6.12097 342.727 6.16803 342.73 6.21899 cv
342.73 10.059 li
343.066 9.72998 343.41 9.48401 343.762 9.31598 cv
344.109 9.15601 344.477 9.07397 344.859 9.07001 cv
345.328 9.07397 345.727 9.15198 346.055 9.30499 cv
346.379 9.46503 346.641 9.67603 346.84 9.94501 cv
347.039 10.215 347.184 10.531 347.273 10.891 cv
347.359 11.254 347.402 11.691 347.406 12.203 cv
cp
f
353.758 10.16 mo
353.758 10.352 353.75 10.504 353.742 10.621 cv
353.727 10.742 353.711 10.836 353.695 10.902 cv
353.672 10.973 353.645 11.02 353.613 11.043 cv
353.574 11.07 353.531 11.082 353.484 11.082 cv
353.438 11.082 353.391 11.074 353.344 11.055 cv
353.289 11.039 353.23 11.02 353.168 10.996 cv
353.098 10.977 353.027 10.957 352.953 10.937 cv
352.871 10.922 352.785 10.914 352.695 10.91 cv
352.582 10.914 352.473 10.934 352.367 10.977 cv
352.258 11.023 352.145 11.094 352.031 11.184 cv
351.91 11.277 351.789 11.402 351.664 11.555 cv
351.535 11.715 351.398 11.906 351.254 12.133 cv
351.254 16.465 li
351.25 16.52 351.234 16.562 351.207 16.602 cv
351.172 16.641 351.117 16.676 351.047 16.699 cv
350.969 16.727 350.871 16.742 350.746 16.758 cv
350.621 16.77 350.461 16.777 350.273 16.777 cv
350.078 16.777 349.922 16.77 349.797 16.758 cv
349.672 16.742 349.57 16.727 349.496 16.699 cv
349.418 16.676 349.363 16.641 349.336 16.602 cv
349.301 16.562 349.285 16.52 349.289 16.465 cv
349.289 9.51599 li
349.285 9.46899 349.301 9.422 349.328 9.37903 cv
349.352 9.34399 349.398 9.31201 349.469 9.28101 cv
349.535 9.258 349.621 9.23798 349.73 9.22302 cv
349.836 9.21503 349.969 9.20697 350.133 9.203 cv
350.297 9.20697 350.434 9.21503 350.543 9.22302 cv
350.648 9.23798 350.734 9.258 350.797 9.28101 cv
350.855 9.31201 350.898 9.34399 350.926 9.37903 cv
350.949 9.422 350.961 9.46899 350.965 9.51599 cv
350.965 10.379 li
351.145 10.121 351.316 9.90997 351.48 9.73798 cv
351.637 9.57397 351.793 9.43701 351.941 9.336 cv
352.086 9.23798 352.23 9.172 352.375 9.12903 cv
352.52 9.09399 352.664 9.07397 352.813 9.07001 cv
352.879 9.07397 352.953 9.078 353.031 9.08197 cv
353.109 9.09399 353.188 9.10498 353.273 9.12097 cv
353.352 9.14099 353.426 9.15997 353.492 9.18402 cv
353.551 9.20697 353.598 9.23401 353.629 9.258 cv
353.656 9.289 353.676 9.31598 353.691 9.34399 cv
353.703 9.37903 353.715 9.422 353.727 9.47302 cv
353.734 9.53101 353.742 9.61298 353.75 9.71899 cv
353.754 9.828 353.758 9.97699 353.758 10.16 cv
cp
f
361.23 12.789 mo
361.227 13.027 361.176 13.203 361.07 13.316 cv
360.961 13.434 360.813 13.492 360.633 13.488 cv
356.398 13.488 li
356.395 13.789 356.43 14.059 356.504 14.297 cv
356.57 14.539 356.684 14.742 356.84 14.91 cv
356.992 15.082 357.188 15.211 357.43 15.297 cv
357.668 15.387 357.957 15.43 358.301 15.43 cv
358.641 15.43 358.941 15.406 359.203 15.355 cv
359.461 15.309 359.688 15.254 359.879 15.191 cv
360.066 15.133 360.223 15.078 360.352 15.027 cv
360.473 14.98 360.574 14.957 360.656 14.953 cv
360.699 14.957 360.738 14.965 360.773 14.98 cv
360.801 15 360.828 15.031 360.848 15.078 cv
360.867 15.125 360.879 15.191 360.891 15.277 cv
360.895 15.363 360.898 15.473 360.902 15.602 cv
360.898 15.719 360.898 15.816 360.895 15.895 cv
360.887 15.977 360.879 16.043 360.871 16.098 cv
360.859 16.156 360.844 16.207 360.824 16.242 cv
360.805 16.285 360.777 16.32 360.746 16.355 cv
360.711 16.395 360.617 16.445 360.469 16.504 cv
360.313 16.57 360.121 16.633 359.891 16.687 cv
359.652 16.75 359.383 16.797 359.086 16.844 cv
358.781 16.883 358.461 16.906 358.121 16.91 cv
357.5 16.906 356.957 16.832 356.496 16.676 cv
356.027 16.523 355.641 16.285 355.332 15.969 cv
355.016 15.652 354.781 15.254 354.633 14.77 cv
354.477 14.289 354.402 13.723 354.406 13.066 cv
354.402 12.453 354.48 11.895 354.645 11.398 cv
354.801 10.902 355.035 10.484 355.348 10.137 cv
355.652 9.79303 356.027 9.52698 356.465 9.34399 cv
356.902 9.164 357.395 9.07397 357.949 9.07001 cv
358.527 9.07397 359.027 9.15997 359.441 9.328 cv
359.855 9.50403 360.191 9.742 360.457 10.043 cv
360.719 10.348 360.914 10.707 361.043 11.121 cv
361.164 11.539 361.227 11.988 361.23 12.477 cv
cp
359.328 12.227 mo
359.34 11.676 359.23 11.242 358.996 10.93 cv
358.762 10.617 358.395 10.461 357.902 10.457 cv
357.652 10.461 357.438 10.508 357.254 10.598 cv
357.066 10.695 356.914 10.82 356.793 10.977 cv
356.668 11.137 356.574 11.324 356.512 11.539 cv
356.445 11.754 356.406 11.984 356.398 12.227 cv
cp
f
368.766 16.488 mo
368.762 16.566 368.734 16.621 368.688 16.66 cv
368.633 16.703 368.551 16.73 368.441 16.75 cv
368.324 16.766 368.16 16.777 367.945 16.777 cv
367.707 16.777 367.535 16.766 367.434 16.75 cv
367.324 16.73 367.25 16.703 367.211 16.66 cv
367.164 16.621 367.145 16.566 367.145 16.488 cv
367.145 15.937 li
366.855 16.246 366.527 16.484 366.164 16.652 cv
365.797 16.824 365.391 16.906 364.945 16.91 cv
364.574 16.906 364.234 16.859 363.926 16.766 cv
363.617 16.672 363.352 16.531 363.125 16.336 cv
362.898 16.148 362.723 15.914 362.598 15.633 cv
362.473 15.355 362.41 15.027 362.414 14.648 cv
362.41 14.25 362.488 13.898 362.648 13.594 cv
362.805 13.297 363.043 13.051 363.359 12.855 cv
363.672 12.664 364.063 12.52 364.531 12.422 cv
365 12.332 365.543 12.285 366.16 12.281 cv
366.84 12.281 li
366.84 11.859 li
366.84 11.645 366.816 11.453 366.773 11.289 cv
366.727 11.129 366.652 10.992 366.555 10.879 cv
366.449 10.773 366.316 10.691 366.148 10.637 cv
365.977 10.586 365.766 10.562 365.523 10.559 cv
365.191 10.562 364.898 10.598 364.645 10.668 cv
364.383 10.742 364.156 10.824 363.961 10.91 cv
363.762 11.004 363.598 11.082 363.469 11.152 cv
363.332 11.227 363.223 11.266 363.145 11.262 cv
363.082 11.266 363.031 11.246 362.992 11.207 cv
362.945 11.172 362.91 11.121 362.883 11.051 cv
362.852 10.988 362.828 10.902 362.816 10.801 cv
362.797 10.703 362.789 10.594 362.793 10.473 cv
362.789 10.312 362.805 10.187 362.832 10.09 cv
362.855 10 362.902 9.914 362.98 9.836 cv
363.051 9.76202 363.18 9.67999 363.363 9.59003 cv
363.543 9.5 363.754 9.414 364 9.336 cv
364.242 9.258 364.512 9.19501 364.801 9.14502 cv
365.09 9.09802 365.387 9.07397 365.695 9.07001 cv
366.238 9.07397 366.703 9.125 367.09 9.22998 cv
367.477 9.34003 367.797 9.50403 368.047 9.72302 cv
368.297 9.94098 368.477 10.227 368.594 10.574 cv
368.703 10.926 368.762 11.34 368.766 11.812 cv
cp
366.84 13.512 mo
366.09 13.512 li
365.773 13.516 365.504 13.539 365.281 13.582 cv
365.055 13.633 364.871 13.703 364.734 13.793 cv
364.59 13.891 364.488 14.004 364.426 14.133 cv
364.359 14.27 364.324 14.418 364.328 14.586 cv
364.324 14.879 364.418 15.109 364.605 15.273 cv
364.789 15.441 365.047 15.523 365.375 15.523 cv
365.648 15.523 365.898 15.453 366.133 15.312 cv
366.359 15.172 366.598 14.969 366.84 14.695 cv
cp
f
377.348 16.465 mo
377.344 16.527 377.332 16.574 377.309 16.609 cv
377.281 16.652 377.234 16.684 377.176 16.707 cv
377.109 16.73 377.027 16.746 376.922 16.762 cv
376.816 16.77 376.684 16.777 376.531 16.777 cv
376.359 16.777 376.227 16.77 376.125 16.762 cv
376.02 16.746 375.934 16.73 375.871 16.707 cv
375.805 16.684 375.758 16.652 375.73 16.609 cv
375.699 16.574 375.684 16.527 375.688 16.465 cv
375.688 15.695 li
375.328 16.082 374.953 16.379 374.563 16.59 cv
374.164 16.801 373.73 16.906 373.258 16.91 cv
372.723 16.906 372.273 16.805 371.91 16.602 cv
371.543 16.398 371.246 16.125 371.016 15.773 cv
370.781 15.43 370.613 15.023 370.512 14.555 cv
370.41 14.094 370.359 13.602 370.359 13.082 cv
370.359 12.469 370.422 11.914 370.555 11.418 cv
370.684 10.926 370.879 10.504 371.137 10.156 cv
371.391 9.80902 371.707 9.54303 372.086 9.35199 cv
372.465 9.16803 372.902 9.07397 373.398 9.07001 cv
373.785 9.07397 374.137 9.15198 374.457 9.30902 cv
374.77 9.46899 375.086 9.69897 375.398 10.004 cv
375.398 6.242 li
375.398 6.19098 375.41 6.14502 375.441 6.10199 cv
375.465 6.06201 375.52 6.02698 375.598 5.99597 cv
375.672 5.96899 375.77 5.94897 375.898 5.92999 cv
376.02 5.91803 376.18 5.90997 376.375 5.90601 cv
376.566 5.90997 376.723 5.91803 376.848 5.92999 cv
376.969 5.94897 377.07 5.96899 377.145 5.99597 cv
377.215 6.02698 377.266 6.06201 377.301 6.10199 cv
377.328 6.14502 377.344 6.19098 377.348 6.242 cv
cp
375.398 11.82 mo
375.117 11.469 374.848 11.199 374.594 11.012 cv
374.332 10.824 374.063 10.73 373.785 10.73 cv
373.531 10.73 373.313 10.797 373.129 10.922 cv
372.941 11.055 372.793 11.223 372.684 11.434 cv
372.57 11.645 372.488 11.883 372.434 12.145 cv
372.379 12.41 372.352 12.68 372.352 12.949 cv
372.352 13.246 372.375 13.527 372.422 13.801 cv
372.469 14.078 372.543 14.324 372.652 14.539 cv
372.754 14.754 372.898 14.926 373.078 15.055 cv
373.254 15.187 373.477 15.254 373.746 15.25 cv
373.879 15.254 374.008 15.234 374.141 15.191 cv
374.266 15.156 374.398 15.094 374.531 15 cv
374.664 14.914 374.801 14.797 374.941 14.652 cv
375.082 14.512 375.234 14.336 375.398 14.129 cv
cp
f
384.172 14.5 mo
384.168 14.898 384.094 15.246 383.949 15.547 cv
383.801 15.848 383.594 16.102 383.324 16.301 cv
383.051 16.508 382.73 16.656 382.363 16.758 cv
381.996 16.855 381.594 16.906 381.164 16.91 cv
380.898 16.906 380.652 16.887 380.418 16.852 cv
380.184 16.809 379.973 16.762 379.785 16.703 cv
379.598 16.645 379.441 16.582 379.316 16.52 cv
379.191 16.457 379.098 16.398 379.043 16.344 cv
378.984 16.289 378.941 16.207 378.914 16.09 cv
378.879 15.977 378.863 15.801 378.867 15.57 cv
378.863 15.422 378.871 15.301 378.883 15.207 cv
378.891 15.117 378.906 15.047 378.93 14.988 cv
378.949 14.937 378.973 14.898 379.008 14.879 cv
379.035 14.863 379.074 14.855 379.121 14.852 cv
379.176 14.855 379.262 14.887 379.375 14.949 cv
379.484 15.016 379.621 15.09 379.793 15.164 cv
379.957 15.246 380.152 15.316 380.371 15.383 cv
380.59 15.453 380.84 15.488 381.125 15.484 cv
381.301 15.488 381.457 15.469 381.598 15.43 cv
381.73 15.395 381.852 15.344 381.957 15.273 cv
382.055 15.207 382.129 15.121 382.184 15.016 cv
382.23 14.914 382.258 14.793 382.262 14.656 cv
382.258 14.5 382.211 14.367 382.117 14.258 cv
382.023 14.148 381.895 14.051 381.738 13.965 cv
381.574 13.883 381.395 13.805 381.199 13.73 cv
380.996 13.66 380.793 13.582 380.582 13.488 cv
380.371 13.402 380.164 13.301 379.969 13.184 cv
379.766 13.074 379.586 12.934 379.43 12.766 cv
379.266 12.602 379.141 12.402 379.047 12.164 cv
378.953 11.934 378.906 11.652 378.906 11.32 cv
378.906 10.992 378.969 10.687 379.098 10.406 cv
379.227 10.133 379.414 9.89502 379.66 9.69501 cv
379.902 9.5 380.199 9.34802 380.551 9.23401 cv
380.898 9.12903 381.293 9.07397 381.734 9.07001 cv
381.949 9.07397 382.16 9.09003 382.367 9.117 cv
382.57 9.15198 382.758 9.19098 382.926 9.23401 cv
383.09 9.28497 383.23 9.336 383.348 9.38702 cv
383.461 9.44501 383.543 9.492 383.594 9.52698 cv
383.641 9.57001 383.676 9.60901 383.699 9.64502 cv
383.719 9.68701 383.73 9.73401 383.742 9.78497 cv
383.75 9.84003 383.762 9.90601 383.77 9.98401 cv
383.777 10.07 383.781 10.168 383.781 10.285 cv
383.781 10.426 383.777 10.543 383.77 10.629 cv
383.762 10.723 383.746 10.793 383.73 10.84 cv
383.711 10.895 383.688 10.93 383.66 10.945 cv
383.625 10.969 383.59 10.977 383.551 10.973 cv
383.5 10.977 383.426 10.949 383.332 10.891 cv
383.23 10.84 383.109 10.781 382.961 10.715 cv
382.813 10.656 382.641 10.598 382.445 10.539 cv
382.25 10.488 382.027 10.461 381.781 10.457 cv
381.602 10.461 381.449 10.48 381.32 10.512 cv
381.188 10.551 381.078 10.602 381 10.668 cv
380.914 10.738 380.852 10.816 380.813 10.906 cv
380.766 11 380.746 11.098 380.75 11.199 cv
380.746 11.359 380.797 11.496 380.898 11.602 cv
380.996 11.715 381.125 11.809 381.289 11.891 cv
381.449 11.977 381.633 12.055 381.84 12.125 cv
382.043 12.199 382.25 12.281 382.461 12.363 cv
382.668 12.453 382.875 12.551 383.086 12.664 cv
383.289 12.777 383.473 12.918 383.633 13.082 cv
383.793 13.25 383.922 13.449 384.023 13.68 cv
384.117 13.914 384.168 14.187 384.172 14.5 cv
cp
f
393.004 12.812 mo
393 13.113 392.973 13.324 392.918 13.441 cv
392.859 13.566 392.77 13.625 392.645 13.621 cv
389.402 13.621 li
389.273 13.625 389.18 13.562 389.125 13.437 cv
389.063 13.316 389.035 13.109 389.039 12.812 cv
389.035 12.523 389.063 12.316 389.125 12.195 cv
389.18 12.078 389.273 12.02 389.402 12.016 cv
392.645 12.016 li
392.707 12.02 392.758 12.031 392.805 12.055 cv
392.844 12.082 392.883 12.129 392.918 12.187 cv
392.945 12.254 392.969 12.336 392.984 12.437 cv
392.996 12.543 393 12.668 393.004 12.812 cv
cp
f
405.68 16.465 mo
405.68 16.527 405.668 16.574 405.648 16.609 cv
405.629 16.652 405.582 16.684 405.504 16.707 cv
405.426 16.73 405.309 16.746 405.16 16.762 cv
405.004 16.77 404.801 16.777 404.543 16.777 cv
404.324 16.777 404.148 16.77 404.02 16.762 cv
403.891 16.746 403.789 16.73 403.715 16.703 cv
403.637 16.676 403.582 16.641 403.555 16.594 cv
403.52 16.555 403.496 16.5 403.477 16.434 cv
402.57 14.184 li
402.461 13.93 402.355 13.703 402.254 13.504 cv
402.145 13.309 402.031 13.145 401.906 13.012 cv
401.777 12.883 401.629 12.781 401.465 12.711 cv
401.297 12.645 401.105 12.613 400.891 12.609 cv
400.25 12.609 li
400.25 16.449 li
400.246 16.504 400.23 16.551 400.199 16.59 cv
400.164 16.633 400.109 16.668 400.031 16.691 cv
399.953 16.719 399.848 16.738 399.719 16.754 cv
399.586 16.77 399.422 16.777 399.223 16.777 cv
399.023 16.777 398.855 16.77 398.727 16.754 cv
398.59 16.738 398.484 16.719 398.41 16.691 cv
398.328 16.668 398.273 16.633 398.246 16.59 cv
398.211 16.551 398.195 16.504 398.199 16.449 cv
398.199 7.29303 li
398.195 7.06598 398.254 6.90198 398.375 6.797 cv
398.488 6.69897 398.633 6.64801 398.809 6.64502 cv
401.418 6.64502 li
401.68 6.64801 401.898 6.65198 402.074 6.65997 cv
402.242 6.672 402.398 6.68402 402.543 6.69897 cv
402.945 6.758 403.309 6.85901 403.633 6.99597 cv
403.957 7.14099 404.234 7.32397 404.461 7.547 cv
404.688 7.77698 404.859 8.04303 404.98 8.35199 cv
405.098 8.65997 405.156 9.01599 405.16 9.414 cv
405.156 9.75403 405.113 10.062 405.031 10.336 cv
404.941 10.617 404.816 10.863 404.652 11.082 cv
404.484 11.301 404.277 11.492 404.035 11.648 cv
403.789 11.812 403.512 11.941 403.203 12.039 cv
403.352 12.113 403.496 12.203 403.629 12.305 cv
403.762 12.414 403.883 12.539 404 12.684 cv
404.113 12.832 404.227 13 404.332 13.187 cv
404.434 13.379 404.535 13.594 404.637 13.832 cv
405.488 15.82 li
405.563 16.02 405.613 16.16 405.641 16.25 cv
405.664 16.344 405.68 16.418 405.68 16.465 cv
cp
403.039 9.625 mo
403.035 9.29303 402.961 9.01202 402.813 8.78101 cv
402.66 8.55499 402.414 8.39502 402.074 8.297 cv
401.969 8.27301 401.852 8.25 401.719 8.23401 cv
401.586 8.21899 401.402 8.211 401.168 8.211 cv
400.25 8.211 li
400.25 11.074 li
401.293 11.074 li
401.582 11.078 401.84 11.043 402.059 10.969 cv
402.277 10.902 402.457 10.801 402.602 10.672 cv
402.746 10.547 402.855 10.395 402.93 10.215 cv
403 10.039 403.035 9.84399 403.039 9.625 cv
cp
f
413.266 12.789 mo
413.262 13.027 413.211 13.203 413.105 13.316 cv
412.996 13.434 412.848 13.492 412.668 13.488 cv
408.434 13.488 li
408.43 13.789 408.465 14.059 408.539 14.297 cv
408.605 14.539 408.719 14.742 408.875 14.91 cv
409.027 15.082 409.223 15.211 409.465 15.297 cv
409.703 15.387 409.992 15.43 410.336 15.43 cv
410.676 15.43 410.977 15.406 411.238 15.355 cv
411.496 15.309 411.723 15.254 411.914 15.191 cv
412.102 15.133 412.258 15.078 412.387 15.027 cv
412.508 14.98 412.609 14.957 412.691 14.953 cv
412.734 14.957 412.773 14.965 412.809 14.98 cv
412.836 15 412.863 15.031 412.883 15.078 cv
412.902 15.125 412.914 15.191 412.926 15.277 cv
412.93 15.363 412.934 15.473 412.938 15.602 cv
412.934 15.719 412.934 15.816 412.93 15.895 cv
412.922 15.977 412.914 16.043 412.906 16.098 cv
412.895 16.156 412.879 16.207 412.859 16.242 cv
412.84 16.285 412.813 16.32 412.781 16.355 cv
412.746 16.395 412.652 16.445 412.504 16.504 cv
412.348 16.57 412.156 16.633 411.926 16.687 cv
411.688 16.75 411.418 16.797 411.121 16.844 cv
410.816 16.883 410.496 16.906 410.156 16.91 cv
409.535 16.906 408.992 16.832 408.531 16.676 cv
408.063 16.523 407.676 16.285 407.367 15.969 cv
407.051 15.652 406.816 15.254 406.668 14.77 cv
406.512 14.289 406.438 13.723 406.441 13.066 cv
406.438 12.453 406.516 11.895 406.68 11.398 cv
406.836 10.902 407.07 10.484 407.383 10.137 cv
407.688 9.79303 408.063 9.52698 408.5 9.34399 cv
408.938 9.164 409.43 9.07397 409.984 9.07001 cv
410.563 9.07397 411.063 9.15997 411.477 9.328 cv
411.891 9.50403 412.227 9.742 412.492 10.043 cv
412.754 10.348 412.949 10.707 413.078 11.121 cv
413.199 11.539 413.262 11.988 413.266 12.477 cv
cp
411.363 12.227 mo
411.375 11.676 411.266 11.242 411.031 10.93 cv
410.797 10.617 410.43 10.461 409.938 10.457 cv
409.688 10.461 409.473 10.508 409.289 10.598 cv
409.102 10.695 408.949 10.82 408.828 10.977 cv
408.703 11.137 408.609 11.324 408.547 11.539 cv
408.48 11.754 408.441 11.984 408.434 12.227 cv
cp
f
425.93 16.465 mo
425.926 16.52 425.91 16.562 425.883 16.602 cv
425.848 16.641 425.797 16.676 425.727 16.699 cv
425.652 16.727 425.551 16.742 425.43 16.758 cv
425.305 16.77 425.148 16.777 424.957 16.777 cv
424.758 16.777 424.598 16.77 424.473 16.758 cv
424.348 16.742 424.246 16.727 424.172 16.699 cv
424.094 16.676 424.043 16.641 424.016 16.602 cv
423.988 16.562 423.973 16.52 423.977 16.465 cv
423.977 12.344 li
423.973 12.113 423.953 11.898 423.91 11.703 cv
423.863 11.512 423.793 11.348 423.707 11.211 cv
423.613 11.074 423.5 10.969 423.363 10.891 cv
423.223 10.816 423.059 10.777 422.867 10.777 cv
422.633 10.777 422.395 10.871 422.156 11.051 cv
421.918 11.234 421.66 11.496 421.379 11.844 cv
421.379 16.465 li
421.379 16.52 421.363 16.562 421.332 16.602 cv
421.301 16.641 421.246 16.676 421.172 16.699 cv
421.094 16.727 420.992 16.742 420.871 16.758 cv
420.746 16.77 420.594 16.777 420.406 16.777 cv
420.211 16.777 420.051 16.77 419.93 16.758 cv
419.801 16.742 419.699 16.727 419.629 16.699 cv
419.551 16.676 419.5 16.641 419.469 16.602 cv
419.438 16.562 419.422 16.52 419.422 16.465 cv
419.422 12.344 li
419.422 12.113 419.398 11.898 419.355 11.703 cv
419.313 11.512 419.246 11.348 419.16 11.211 cv
419.066 11.074 418.953 10.969 418.816 10.891 cv
418.672 10.816 418.508 10.777 418.324 10.777 cv
418.082 10.777 417.844 10.871 417.605 11.051 cv
417.367 11.234 417.109 11.496 416.836 11.844 cv
416.836 16.465 li
416.832 16.52 416.816 16.562 416.789 16.602 cv
416.754 16.641 416.699 16.676 416.629 16.699 cv
416.551 16.727 416.453 16.742 416.328 16.758 cv
416.203 16.77 416.043 16.777 415.855 16.777 cv
415.66 16.777 415.504 16.77 415.379 16.758 cv
415.254 16.742 415.152 16.727 415.078 16.699 cv
415 16.676 414.945 16.641 414.918 16.602 cv
414.883 16.562 414.867 16.52 414.871 16.465 cv
414.871 9.51599 li
414.867 9.46899 414.883 9.422 414.91 9.37903 cv
414.934 9.34399 414.98 9.31201 415.051 9.28101 cv
415.117 9.258 415.203 9.23798 415.313 9.22302 cv
415.418 9.21503 415.551 9.20697 415.715 9.203 cv
415.879 9.20697 416.016 9.21503 416.125 9.22302 cv
416.23 9.23798 416.316 9.258 416.379 9.28101 cv
416.438 9.31201 416.48 9.34399 416.508 9.37903 cv
416.531 9.422 416.543 9.46899 416.547 9.51599 cv
416.547 10.316 li
416.93 9.90601 417.313 9.59399 417.695 9.383 cv
418.074 9.17603 418.477 9.07397 418.895 9.07001 cv
419.18 9.07397 419.434 9.10199 419.664 9.15997 cv
419.891 9.22302 420.098 9.30902 420.277 9.41803 cv
420.457 9.53101 420.609 9.66803 420.738 9.82001 cv
420.867 9.97699 420.977 10.148 421.066 10.34 cv
421.273 10.117 421.477 9.92603 421.68 9.76599 cv
421.875 9.60498 422.074 9.47302 422.27 9.37097 cv
422.465 9.27002 422.66 9.19501 422.855 9.14502 cv
423.051 9.09802 423.25 9.07397 423.453 9.07001 cv
423.914 9.07397 424.301 9.15198 424.621 9.30499 cv
424.934 9.46503 425.191 9.67603 425.387 9.94098 cv
425.582 10.211 425.719 10.523 425.805 10.879 cv
425.883 11.238 425.926 11.617 425.93 12.016 cv
cp
f
434.879 12.918 mo
434.875 13.516 434.797 14.059 434.645 14.543 cv
434.484 15.035 434.25 15.453 433.934 15.805 cv
433.617 16.156 433.219 16.43 432.742 16.621 cv
432.262 16.812 431.703 16.906 431.066 16.91 cv
430.445 16.906 429.906 16.824 429.453 16.652 cv
428.992 16.484 428.613 16.234 428.316 15.906 cv
428.012 15.582 427.789 15.18 427.645 14.699 cv
427.5 14.223 427.43 13.676 427.43 13.059 cv
427.43 12.469 427.508 11.93 427.664 11.437 cv
427.82 10.949 428.059 10.527 428.379 10.176 cv
428.695 9.828 429.09 9.55499 429.566 9.35901 cv
430.039 9.16803 430.598 9.07397 431.238 9.07001 cv
431.863 9.07397 432.402 9.15601 432.859 9.32397 cv
433.316 9.49597 433.695 9.74597 433.992 10.07 cv
434.289 10.398 434.512 10.801 434.66 11.277 cv
434.805 11.758 434.875 12.305 434.879 12.918 cv
cp
432.859 12.996 mo
432.855 12.66 432.828 12.344 432.777 12.051 cv
432.719 11.766 432.625 11.516 432.5 11.301 cv
432.367 11.09 432.195 10.922 431.984 10.801 cv
431.766 10.684 431.496 10.625 431.168 10.621 cv
430.879 10.625 430.625 10.68 430.406 10.781 cv
430.188 10.891 430.008 11.047 429.867 11.25 cv
429.727 11.457 429.621 11.703 429.551 11.988 cv
429.48 12.281 429.445 12.609 429.445 12.973 cv
429.445 13.32 429.473 13.637 429.531 13.922 cv
429.586 14.215 429.68 14.465 429.809 14.676 cv
429.934 14.891 430.105 15.055 430.328 15.168 cv
430.543 15.289 430.813 15.348 431.137 15.344 cv
431.43 15.348 431.688 15.293 431.91 15.184 cv
432.125 15.078 432.305 14.926 432.445 14.719 cv
432.586 14.52 432.688 14.273 432.758 13.984 cv
432.82 13.699 432.855 13.371 432.859 12.996 cv
cp
f
440.582 15.781 mo
440.582 16.008 440.566 16.184 440.539 16.305 cv
440.508 16.43 440.469 16.516 440.426 16.562 cv
440.375 16.613 440.309 16.656 440.219 16.695 cv
440.125 16.734 440.016 16.766 439.898 16.797 cv
439.773 16.82 439.641 16.844 439.5 16.863 cv
439.355 16.875 439.215 16.883 439.07 16.887 cv
438.68 16.883 438.34 16.832 438.055 16.738 cv
437.77 16.637 437.535 16.488 437.348 16.281 cv
437.16 16.078 437.02 15.82 436.934 15.508 cv
436.84 15.199 436.797 14.828 436.801 14.398 cv
436.801 10.84 li
435.969 10.84 li
435.867 10.844 435.793 10.781 435.742 10.656 cv
435.688 10.535 435.66 10.332 435.664 10.043 cv
435.66 9.89502 435.668 9.76599 435.684 9.664 cv
435.695 9.56201 435.715 9.47998 435.742 9.41803 cv
435.766 9.35901 435.797 9.31598 435.84 9.289 cv
435.875 9.26599 435.922 9.25403 435.977 9.25 cv
436.801 9.25 li
436.801 7.69897 li
436.797 7.65198 436.813 7.60498 436.844 7.55902 cv
436.871 7.52002 436.922 7.48401 437 7.453 cv
437.074 7.42999 437.176 7.40601 437.305 7.39099 cv
437.43 7.37903 437.586 7.375 437.777 7.37097 cv
437.965 7.375 438.125 7.37903 438.254 7.39099 cv
438.379 7.40601 438.48 7.42999 438.555 7.453 cv
438.625 7.48401 438.676 7.52002 438.711 7.55902 cv
438.738 7.60498 438.754 7.65198 438.758 7.69897 cv
438.758 9.25 li
440.27 9.25 li
440.32 9.25403 440.367 9.26599 440.406 9.289 cv
440.445 9.31598 440.477 9.35901 440.504 9.41803 cv
440.527 9.47998 440.547 9.56201 440.563 9.664 cv
440.574 9.76599 440.582 9.89502 440.582 10.043 cv
440.582 10.332 440.555 10.535 440.504 10.656 cv
440.449 10.781 440.375 10.844 440.277 10.84 cv
438.758 10.84 li
438.758 14.105 li
438.754 14.484 438.813 14.77 438.938 14.957 cv
439.055 15.148 439.27 15.242 439.574 15.242 cv
439.676 15.242 439.77 15.234 439.855 15.215 cv
439.938 15.199 440.012 15.18 440.078 15.152 cv
440.141 15.133 440.195 15.109 440.242 15.09 cv
440.285 15.074 440.324 15.066 440.363 15.062 cv
440.391 15.066 440.422 15.074 440.453 15.09 cv
440.48 15.109 440.5 15.148 440.52 15.199 cv
440.531 15.258 440.547 15.332 440.563 15.422 cv
440.574 15.52 440.582 15.637 440.582 15.781 cv
cp
f
448.168 12.789 mo
448.164 13.027 448.113 13.203 448.008 13.316 cv
447.898 13.434 447.75 13.492 447.57 13.488 cv
443.336 13.488 li
443.332 13.789 443.367 14.059 443.441 14.297 cv
443.508 14.539 443.621 14.742 443.777 14.91 cv
443.93 15.082 444.125 15.211 444.367 15.297 cv
444.605 15.387 444.895 15.43 445.238 15.43 cv
445.578 15.43 445.879 15.406 446.141 15.355 cv
446.398 15.309 446.625 15.254 446.816 15.191 cv
447.004 15.133 447.16 15.078 447.289 15.027 cv
447.41 14.98 447.512 14.957 447.594 14.953 cv
447.637 14.957 447.676 14.965 447.711 14.98 cv
447.738 15 447.766 15.031 447.785 15.078 cv
447.805 15.125 447.816 15.191 447.828 15.277 cv
447.832 15.363 447.836 15.473 447.84 15.602 cv
447.836 15.719 447.836 15.816 447.832 15.895 cv
447.824 15.977 447.816 16.043 447.809 16.098 cv
447.797 16.156 447.781 16.207 447.762 16.242 cv
447.742 16.285 447.715 16.32 447.684 16.355 cv
447.648 16.395 447.555 16.445 447.406 16.504 cv
447.25 16.57 447.059 16.633 446.828 16.687 cv
446.59 16.75 446.32 16.797 446.023 16.844 cv
445.719 16.883 445.398 16.906 445.059 16.91 cv
444.438 16.906 443.895 16.832 443.434 16.676 cv
442.965 16.523 442.578 16.285 442.27 15.969 cv
441.953 15.652 441.719 15.254 441.57 14.77 cv
441.414 14.289 441.34 13.723 441.344 13.066 cv
441.34 12.453 441.418 11.895 441.582 11.398 cv
441.738 10.902 441.973 10.484 442.285 10.137 cv
442.59 9.79303 442.965 9.52698 443.402 9.34399 cv
443.84 9.164 444.332 9.07397 444.887 9.07001 cv
445.465 9.07397 445.965 9.15997 446.379 9.328 cv
446.793 9.50403 447.129 9.742 447.395 10.043 cv
447.656 10.348 447.852 10.707 447.98 11.121 cv
448.102 11.539 448.164 11.988 448.168 12.477 cv
cp
446.266 12.227 mo
446.277 11.676 446.168 11.242 445.934 10.93 cv
445.699 10.617 445.332 10.461 444.84 10.457 cv
444.59 10.461 444.375 10.508 444.191 10.598 cv
444.004 10.695 443.852 10.82 443.73 10.977 cv
443.605 11.137 443.512 11.324 443.449 11.539 cv
443.383 11.754 443.344 11.984 443.336 12.227 cv
cp
f
465.363 16.449 mo
465.359 16.504 465.348 16.551 465.32 16.59 cv
465.289 16.633 465.234 16.668 465.164 16.691 cv
465.086 16.719 464.988 16.738 464.863 16.754 cv
464.738 16.77 464.578 16.777 464.387 16.777 cv
464.199 16.777 464.043 16.77 463.922 16.754 cv
463.793 16.738 463.695 16.719 463.625 16.691 cv
463.551 16.668 463.5 16.633 463.469 16.59 cv
463.438 16.551 463.422 16.504 463.422 16.449 cv
463.422 8.242 li
463.406 8.242 li
460.484 16.441 li
460.461 16.512 460.426 16.566 460.383 16.609 cv
460.332 16.656 460.27 16.691 460.191 16.715 cv
460.109 16.742 460.008 16.758 459.883 16.766 cv
459.758 16.773 459.605 16.777 459.434 16.777 cv
459.254 16.777 459.105 16.77 458.98 16.758 cv
458.855 16.742 458.75 16.723 458.672 16.695 cv
458.586 16.668 458.523 16.633 458.48 16.59 cv
458.43 16.551 458.398 16.504 458.387 16.441 cv
455.566 8.242 li
455.551 8.242 li
455.551 16.449 li
455.547 16.504 455.531 16.551 455.508 16.59 cv
455.477 16.633 455.426 16.668 455.348 16.691 cv
455.27 16.719 455.168 16.738 455.047 16.754 cv
454.922 16.77 454.766 16.777 454.578 16.777 cv
454.387 16.777 454.23 16.77 454.109 16.754 cv
453.98 16.738 453.879 16.719 453.809 16.691 cv
453.73 16.668 453.68 16.633 453.652 16.59 cv
453.621 16.551 453.605 16.504 453.609 16.449 cv
453.609 7.46503 li
453.605 7.203 453.676 7 453.82 6.85498 cv
453.957 6.71899 454.145 6.64801 454.383 6.64502 cv
455.723 6.64502 li
455.961 6.64801 456.164 6.66803 456.336 6.703 cv
456.504 6.74597 456.652 6.80902 456.781 6.89801 cv
456.902 6.992 457.008 7.11298 457.094 7.258 cv
457.176 7.40997 457.246 7.59399 457.313 7.80902 cv
459.496 13.816 li
459.527 13.816 li
461.785 7.82397 li
461.852 7.60498 461.926 7.422 462.008 7.27002 cv
462.086 7.12097 462.18 7 462.289 6.90198 cv
462.395 6.81201 462.52 6.74597 462.664 6.703 cv
462.809 6.66803 462.977 6.64801 463.172 6.64502 cv
464.551 6.64502 li
464.688 6.64801 464.809 6.664 464.914 6.69897 cv
465.012 6.73798 465.094 6.79303 465.164 6.85901 cv
465.227 6.93402 465.277 7.02002 465.313 7.117 cv
465.344 7.22302 465.359 7.34003 465.363 7.46503 cv
cp
f
474.473 12.918 mo
474.469 13.516 474.391 14.059 474.238 14.543 cv
474.078 15.035 473.844 15.453 473.527 15.805 cv
473.211 16.156 472.813 16.43 472.336 16.621 cv
471.855 16.812 471.297 16.906 470.66 16.91 cv
470.039 16.906 469.5 16.824 469.047 16.652 cv
468.586 16.484 468.207 16.234 467.91 15.906 cv
467.605 15.582 467.383 15.18 467.238 14.699 cv
467.094 14.223 467.023 13.676 467.023 13.059 cv
467.023 12.469 467.102 11.93 467.258 11.437 cv
467.414 10.949 467.652 10.527 467.973 10.176 cv
468.289 9.828 468.684 9.55499 469.16 9.35901 cv
469.633 9.16803 470.191 9.07397 470.832 9.07001 cv
471.457 9.07397 471.996 9.15601 472.453 9.32397 cv
472.91 9.49597 473.289 9.74597 473.586 10.07 cv
473.883 10.398 474.105 10.801 474.254 11.277 cv
474.398 11.758 474.469 12.305 474.473 12.918 cv
cp
472.453 12.996 mo
472.449 12.66 472.422 12.344 472.371 12.051 cv
472.313 11.766 472.219 11.516 472.094 11.301 cv
471.961 11.09 471.789 10.922 471.578 10.801 cv
471.359 10.684 471.09 10.625 470.762 10.621 cv
470.473 10.625 470.219 10.68 470 10.781 cv
469.781 10.891 469.602 11.047 469.461 11.25 cv
469.32 11.457 469.215 11.703 469.145 11.988 cv
469.074 12.281 469.039 12.609 469.039 12.973 cv
469.039 13.32 469.066 13.637 469.125 13.922 cv
469.18 14.215 469.273 14.465 469.402 14.676 cv
469.527 14.891 469.699 15.055 469.922 15.168 cv
470.137 15.289 470.406 15.348 470.73 15.344 cv
471.023 15.348 471.281 15.293 471.504 15.184 cv
471.719 15.078 471.898 14.926 472.039 14.719 cv
472.18 14.52 472.281 14.273 472.352 13.984 cv
472.414 13.699 472.449 13.371 472.453 12.996 cv
cp
f
482.621 16.465 mo
482.617 16.527 482.605 16.574 482.582 16.609 cv
482.555 16.652 482.508 16.684 482.449 16.707 cv
482.383 16.73 482.301 16.746 482.195 16.762 cv
482.09 16.77 481.957 16.777 481.805 16.777 cv
481.633 16.777 481.5 16.77 481.398 16.762 cv
481.293 16.746 481.207 16.73 481.145 16.707 cv
481.078 16.684 481.031 16.652 481.004 16.609 cv
480.973 16.574 480.957 16.527 480.961 16.465 cv
480.961 15.695 li
480.602 16.082 480.227 16.379 479.836 16.59 cv
479.438 16.801 479.004 16.906 478.531 16.91 cv
477.996 16.906 477.547 16.805 477.184 16.602 cv
476.816 16.398 476.52 16.125 476.289 15.773 cv
476.055 15.43 475.887 15.023 475.785 14.555 cv
475.684 14.094 475.633 13.602 475.633 13.082 cv
475.633 12.469 475.695 11.914 475.828 11.418 cv
475.957 10.926 476.152 10.504 476.41 10.156 cv
476.664 9.80902 476.98 9.54303 477.359 9.35199 cv
477.738 9.16803 478.176 9.07397 478.672 9.07001 cv
479.059 9.07397 479.41 9.15198 479.73 9.30902 cv
480.043 9.46899 480.359 9.69897 480.672 10.004 cv
480.672 6.242 li
480.672 6.19098 480.684 6.14502 480.715 6.10199 cv
480.738 6.06201 480.793 6.02698 480.871 5.99597 cv
480.945 5.96899 481.043 5.94897 481.172 5.92999 cv
481.293 5.91803 481.453 5.90997 481.648 5.90601 cv
481.84 5.90997 481.996 5.91803 482.121 5.92999 cv
482.242 5.94897 482.344 5.96899 482.418 5.99597 cv
482.488 6.02698 482.539 6.06201 482.574 6.10199 cv
482.602 6.14502 482.617 6.19098 482.621 6.242 cv
cp
480.672 11.82 mo
480.391 11.469 480.121 11.199 479.867 11.012 cv
479.605 10.824 479.336 10.73 479.059 10.73 cv
478.805 10.73 478.586 10.797 478.402 10.922 cv
478.215 11.055 478.066 11.223 477.957 11.434 cv
477.844 11.645 477.762 11.883 477.707 12.145 cv
477.652 12.41 477.625 12.68 477.625 12.949 cv
477.625 13.246 477.648 13.527 477.695 13.801 cv
477.742 14.078 477.816 14.324 477.926 14.539 cv
478.027 14.754 478.172 14.926 478.352 15.055 cv
478.527 15.187 478.75 15.254 479.02 15.25 cv
479.152 15.254 479.281 15.234 479.414 15.191 cv
479.539 15.156 479.672 15.094 479.805 15 cv
479.938 14.914 480.074 14.797 480.215 14.652 cv
480.355 14.512 480.508 14.336 480.672 14.129 cv
cp
f
491.023 12.789 mo
491.02 13.027 490.969 13.203 490.863 13.316 cv
490.754 13.434 490.605 13.492 490.426 13.488 cv
486.191 13.488 li
486.188 13.789 486.223 14.059 486.297 14.297 cv
486.363 14.539 486.477 14.742 486.633 14.91 cv
486.785 15.082 486.98 15.211 487.223 15.297 cv
487.461 15.387 487.75 15.43 488.094 15.43 cv
488.434 15.43 488.734 15.406 488.996 15.355 cv
489.254 15.309 489.48 15.254 489.672 15.191 cv
489.859 15.133 490.016 15.078 490.145 15.027 cv
490.266 14.98 490.367 14.957 490.449 14.953 cv
490.492 14.957 490.531 14.965 490.566 14.98 cv
490.594 15 490.621 15.031 490.641 15.078 cv
490.66 15.125 490.672 15.191 490.684 15.277 cv
490.688 15.363 490.691 15.473 490.695 15.602 cv
490.691 15.719 490.691 15.816 490.688 15.895 cv
490.68 15.977 490.672 16.043 490.664 16.098 cv
490.652 16.156 490.637 16.207 490.617 16.242 cv
490.598 16.285 490.57 16.32 490.539 16.355 cv
490.504 16.395 490.41 16.445 490.262 16.504 cv
490.105 16.57 489.914 16.633 489.684 16.687 cv
489.445 16.75 489.176 16.797 488.879 16.844 cv
488.574 16.883 488.254 16.906 487.914 16.91 cv
487.293 16.906 486.75 16.832 486.289 16.676 cv
485.82 16.523 485.434 16.285 485.125 15.969 cv
484.809 15.652 484.574 15.254 484.426 14.77 cv
484.27 14.289 484.195 13.723 484.199 13.066 cv
484.195 12.453 484.273 11.895 484.438 11.398 cv
484.594 10.902 484.828 10.484 485.141 10.137 cv
485.445 9.79303 485.82 9.52698 486.258 9.34399 cv
486.695 9.164 487.188 9.07397 487.742 9.07001 cv
488.32 9.07397 488.82 9.15997 489.234 9.328 cv
489.648 9.50403 489.984 9.742 490.25 10.043 cv
490.512 10.348 490.707 10.707 490.836 11.121 cv
490.957 11.539 491.02 11.988 491.023 12.477 cv
cp
489.121 12.227 mo
489.133 11.676 489.023 11.242 488.789 10.93 cv
488.555 10.617 488.188 10.461 487.695 10.457 cv
487.445 10.461 487.23 10.508 487.047 10.598 cv
486.859 10.695 486.707 10.82 486.586 10.977 cv
486.461 11.137 486.367 11.324 486.305 11.539 cv
486.238 11.754 486.199 11.984 486.191 12.227 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
