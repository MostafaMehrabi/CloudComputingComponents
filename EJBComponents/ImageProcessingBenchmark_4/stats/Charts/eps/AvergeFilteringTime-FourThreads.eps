%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AvergeFilteringTime-FourThreads.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: mehra
%%CreationDate: 12/8/2018, 12:25:51 PM
%%BoundingBox: 0 0 642 554
%%HiResBoundingBox: 0 0 641.7601 553.6800
%%CropBox: 0 0 641.7601 553.6800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -553.68 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 553.68 li
641.76 553.68 li
641.76 0 li
cp
clp
0 0 mo
641.762 0 li
641.762 553.68 li
0 553.68 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
43.801 506.281 mo
626.039 506.281 li
43.801 496.441 mo
626.039 496.441 li
43.801 486.719 mo
626.039 486.719 li
43.801 477 mo
626.039 477 li
43.801 457.441 mo
626.039 457.441 li
43.801 447.602 mo
626.039 447.602 li
43.801 437.879 mo
626.039 437.879 li
43.801 428.039 mo
626.039 428.039 li
43.801 408.48 mo
626.039 408.48 li
43.801 398.762 mo
626.039 398.762 li
43.801 388.922 mo
626.039 388.922 li
43.801 379.199 mo
626.039 379.199 li
43.801 359.641 mo
626.039 359.641 li
43.801 349.801 mo
626.039 349.801 li
43.801 340.078 mo
626.039 340.078 li
43.801 330.238 mo
626.039 330.238 li
43.801 310.801 mo
626.039 310.801 li
43.801 300.961 mo
626.039 300.961 li
43.801 291.238 mo
626.039 291.238 li
43.801 281.398 mo
626.039 281.398 li
43.801 261.84 mo
626.039 261.84 li
43.801 252.121 mo
626.039 252.121 li
43.801 242.281 mo
626.039 242.281 li
43.801 232.559 mo
626.039 232.559 li
43.801 213 mo
626.039 213 li
43.801 203.16 mo
626.039 203.16 li
43.801 193.441 mo
626.039 193.441 li
43.801 183.602 mo
626.039 183.602 li
43.801 164.16 mo
626.039 164.16 li
43.801 154.32 mo
626.039 154.32 li
43.801 144.602 mo
626.039 144.602 li
43.801 134.762 mo
626.039 134.762 li
43.801 115.199 mo
626.039 115.199 li
43.801 105.48 mo
626.039 105.48 li
43.801 95.641 mo
626.039 95.641 li
43.801 85.922 mo
626.039 85.922 li
43.801 66.359 mo
626.039 66.359 li
43.801 56.52 mo
626.039 56.52 li
43.801 46.801 mo
626.039 46.801 li
43.801 36.961 mo
626.039 36.961 li
.140414 .108034 .108034 0 cmyk
@
43.801 467.16 mo
626.039 467.16 li
43.801 418.32 mo
626.039 418.32 li
43.801 369.359 mo
626.039 369.359 li
43.801 320.52 mo
626.039 320.52 li
43.801 271.68 mo
626.039 271.68 li
43.801 222.719 mo
626.039 222.719 li
43.801 173.879 mo
626.039 173.879 li
43.801 125.039 mo
626.039 125.039 li
43.801 76.078 mo
626.039 76.078 li
43.801 27.238 mo
626.039 27.238 li
.328344 .284215 .278569 .000915541 cmyk
@
80.16 27.238 mo
80.16 516 li
153 27.238 mo
153 516 li
225.719 27.238 mo
225.719 516 li
298.559 27.238 mo
298.559 516 li
371.281 27.238 mo
371.281 516 li
444.121 27.238 mo
444.121 516 li
516.961 27.238 mo
516.961 516 li
589.68 27.238 mo
589.68 516 li
.178592 .148898 .143923 0 cmyk
@
43.801 27.238 mo
43.801 516 li
116.52 27.238 mo
116.52 516 li
189.359 27.238 mo
189.359 516 li
262.199 27.238 mo
262.199 516 li
334.922 27.238 mo
334.922 516 li
407.762 27.238 mo
407.762 516 li
480.48 27.238 mo
480.48 516 li
553.32 27.238 mo
553.32 516 li
626.039 27.238 mo
626.039 516 li
.328344 .284215 .278569 .000915541 cmyk
@
26.52 508.078 mo
32.641 508.078 li
32.641 522.719 li
26.52 522.719 li
cp
0 0 0 0 cmyk
ef
26.52 459.121 mo
32.641 459.121 li
32.641 473.879 li
26.52 473.879 li
cp
ef
26.52 410.281 mo
32.641 410.281 li
32.641 424.922 li
26.52 424.922 li
cp
ef
26.52 361.441 mo
32.641 361.441 li
32.641 376.078 li
26.52 376.078 li
cp
ef
26.52 312.48 mo
32.641 312.48 li
32.641 327.238 li
26.52 327.238 li
cp
ef
26.52 263.641 mo
32.641 263.641 li
32.641 278.282 li
26.52 278.282 li
cp
ef
26.52 214.801 mo
32.641 214.801 li
32.641 229.442 li
26.52 229.442 li
cp
ef
26.52 165.84 mo
32.641 165.84 li
32.641 180.602 li
26.52 180.602 li
cp
ef
26.52 117 mo
32.641 117 li
32.641 131.641 li
26.52 131.641 li
cp
ef
26.52 68.16 mo
32.641 68.16 li
32.641 82.801 li
26.52 82.801 li
cp
ef
20.52 19.199 mo
32.641 19.199 li
32.641 33.84 li
20.52 33.84 li
cp
ef
.96 lw
43.801 516 mo
626.039 516 li
.367803 .29575 .300999 .00198367 cmyk
@
43.801 516 mo
43.801 519.84 li
116.52 516 mo
116.52 519.84 li
189.359 516 mo
189.359 519.84 li
262.199 516 mo
262.199 519.84 li
334.922 516 mo
334.922 519.84 li
407.762 516 mo
407.762 519.84 li
480.48 516 mo
480.48 519.84 li
553.32 516 mo
553.32 519.84 li
626.039 516 mo
626.039 519.84 li
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
1 lc
43.801 499.441 mo
116.52 507.602 li
189.359 511.68 li
262.199 512.281 li
334.922 513.719 li
407.762 513.961 li
480.48 514.199 li
553.32 514.32 li
626.039 514.559 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
48.691 504.531 mo
38.609 494.449 li
38.609 504.531 mo
48.691 494.449 li
.62768 .285466 0 0 cmyk
@
121.531 512.57 mo
111.449 502.488 li
111.449 512.57 mo
121.531 502.488 li
@
194.371 516.77 mo
184.289 506.691 li
184.289 516.77 mo
194.371 506.691 li
@
267.09 517.25 mo
257.012 507.172 li
257.012 517.25 mo
267.09 507.172 li
@
339.93 518.809 mo
329.852 508.73 li
329.852 518.809 mo
339.93 508.73 li
@
412.648 519.051 mo
402.57 508.969 li
402.57 519.051 mo
412.648 508.969 li
@
485.488 519.172 mo
475.41 509.09 li
475.41 519.172 mo
485.488 509.09 li
@
558.211 519.41 mo
548.129 509.328 li
548.129 519.41 mo
558.211 509.328 li
@
631.051 519.531 mo
620.969 509.449 li
620.969 519.531 mo
631.051 509.449 li
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
43.801 487.801 mo
116.52 501.961 li
189.359 508.922 li
262.199 511.32 li
334.922 512.398 li
407.762 513.121 li
480.48 513.719 li
553.32 513.961 li
626.039 514.199 li
@
grestore
38.609 482.691 mo
48.57 482.691 li
48.57 492.648 li
38.609 492.648 li
cp
@
111.449 496.852 mo
121.41 496.852 li
121.41 506.809 li
111.449 506.809 li
cp
@
184.289 503.93 mo
194.25 503.93 li
194.25 513.891 li
184.289 513.891 li
cp
@
257.012 506.211 mo
266.969 506.211 li
266.969 516.172 li
257.012 516.172 li
cp
@
329.852 507.41 mo
339.809 507.41 li
339.809 517.371 li
329.852 517.371 li
cp
@
402.57 508.129 mo
412.531 508.129 li
412.531 518.09 li
402.57 518.09 li
cp
@
475.41 508.609 mo
485.371 508.609 li
485.371 518.57 li
475.41 518.57 li
cp
@
548.129 508.969 mo
558.09 508.969 li
558.09 518.93 li
548.129 518.93 li
cp
@
620.969 509.211 mo
630.93 509.211 li
630.93 519.172 li
620.969 519.172 li
cp
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
43.801 472.922 mo
116.52 494.039 li
189.359 504.84 li
262.199 507.719 li
334.922 510.602 li
407.762 510.121 li
480.48 512.281 li
553.32 511.68 li
626.039 513.121 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
48.691 477.891 mo
38.609 467.809 li
38.609 477.891 mo
48.691 467.809 li
.0319219 .621851 .911223 .000427253 cmyk
@
121.531 499.129 mo
111.449 489.051 li
111.449 499.129 mo
121.531 489.051 li
@
194.371 509.809 mo
184.289 499.73 li
184.289 509.809 mo
194.371 499.73 li
@
267.09 512.809 mo
257.012 502.73 li
257.012 512.809 mo
267.09 502.73 li
@
339.93 515.57 mo
329.852 505.488 li
329.852 515.57 mo
339.93 505.488 li
@
412.648 515.09 mo
402.57 505.012 li
402.57 515.09 mo
412.648 505.012 li
@
485.488 517.371 mo
475.41 507.289 li
475.41 517.371 mo
485.488 507.289 li
@
558.211 516.77 mo
548.129 506.691 li
548.129 516.77 mo
558.211 506.691 li
@
631.051 518.09 mo
620.969 508.012 li
620.969 518.09 mo
631.051 508.012 li
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
43.801 441.84 mo
116.52 478.922 li
189.359 497.281 li
262.199 503.641 li
334.922 506.641 li
407.762 508.441 li
480.48 509.762 li
553.32 510.602 li
626.039 511.32 li
@
grestore
38.609 436.73 mo
48.57 436.73 li
48.57 446.691 li
38.609 446.691 li
cp
@
111.449 473.809 mo
121.41 473.809 li
121.41 483.77 li
111.449 483.77 li
cp
@
184.289 492.289 mo
194.25 492.289 li
194.25 502.25 li
184.289 502.25 li
cp
@
257.012 498.531 mo
266.969 498.531 li
266.969 508.488 li
257.012 508.488 li
cp
@
329.852 501.648 mo
339.809 501.648 li
339.809 511.609 li
329.852 511.609 li
cp
@
402.57 503.449 mo
412.531 503.449 li
412.531 513.41 li
402.57 513.41 li
cp
@
475.41 504.648 mo
485.371 504.648 li
485.371 514.609 li
475.41 514.609 li
cp
@
548.129 505.609 mo
558.09 505.609 li
558.09 515.57 li
548.129 515.57 li
cp
@
620.969 506.211 mo
630.93 506.211 li
630.93 516.172 li
620.969 516.172 li
cp
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
43.801 372.121 mo
116.52 442.922 li
189.359 478.922 li
262.199 485.52 li
334.922 495.961 li
407.762 499.078 li
480.48 500.398 li
553.32 504.84 li
626.039 505.199 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
48.691 377.09 mo
38.609 367.012 li
38.609 377.09 mo
48.691 367.012 li
.619135 .109529 .981689 .00570687 cmyk
@
121.531 448.012 mo
111.449 437.93 li
111.449 448.012 mo
121.531 437.93 li
@
194.371 483.891 mo
184.289 473.809 li
184.289 483.891 mo
194.371 473.809 li
@
267.09 490.609 mo
257.012 480.531 li
257.012 490.609 mo
267.09 480.531 li
@
339.93 500.93 mo
329.852 490.852 li
329.852 500.93 mo
339.93 490.852 li
@
412.648 504.051 mo
402.57 493.969 li
402.57 504.051 mo
412.648 493.969 li
@
485.488 505.371 mo
475.41 495.289 li
475.41 505.371 mo
485.488 495.289 li
@
558.211 509.809 mo
548.129 499.73 li
548.129 509.809 mo
558.211 499.73 li
@
631.051 510.172 mo
620.969 500.09 li
620.969 510.172 mo
631.051 500.09 li
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
43.801 266.52 mo
116.52 391.441 li
189.359 453.48 li
262.199 474.238 li
334.922 484.559 li
407.762 490.922 li
480.48 495.121 li
553.32 498 li
626.039 500.398 li
@
grestore
38.609 261.41 mo
48.57 261.41 li
48.57 271.371 li
38.609 271.371 li
cp
@
111.449 386.449 mo
121.41 386.449 li
121.41 396.41 li
111.449 396.41 li
cp
@
184.289 448.371 mo
194.25 448.371 li
194.25 458.328 li
184.289 458.328 li
cp
@
257.012 469.25 mo
266.969 469.25 li
266.969 479.211 li
257.012 479.211 li
cp
@
329.852 479.57 mo
339.809 479.57 li
339.809 489.531 li
329.852 489.531 li
cp
@
402.57 485.809 mo
412.531 485.809 li
412.531 495.77 li
402.57 495.77 li
cp
@
475.41 490.129 mo
485.371 490.129 li
485.371 500.09 li
475.41 500.09 li
cp
@
548.129 493.012 mo
558.09 493.012 li
558.09 502.969 li
548.129 502.969 li
cp
@
620.969 495.289 mo
630.93 495.289 li
630.93 505.25 li
620.969 505.25 li
cp
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
43.801 422.762 mo
116.52 468.719 li
189.359 491.879 li
262.199 496.199 li
334.922 504.121 li
407.762 505.078 li
480.48 507.961 li
553.32 505.68 li
626.039 509.52 li
0 .990631 1 .000396735 cmyk
@
grestore
48.691 427.73 mo
38.609 417.648 li
38.609 427.73 mo
48.691 417.648 li
0 .990631 1 .000396735 cmyk
@
121.531 473.691 mo
111.449 463.609 li
111.449 473.691 mo
121.531 463.609 li
@
194.371 496.969 mo
184.289 486.891 li
184.289 496.969 mo
194.371 486.891 li
@
267.09 501.289 mo
257.012 491.211 li
257.012 501.289 mo
267.09 491.211 li
@
339.93 509.09 mo
329.852 499.012 li
329.852 509.09 mo
339.93 499.012 li
@
412.648 510.051 mo
402.57 499.969 li
402.57 510.051 mo
412.648 499.969 li
@
485.488 512.93 mo
475.41 502.852 li
475.41 512.93 mo
485.488 502.852 li
@
558.211 510.648 mo
548.129 500.57 li
548.129 510.648 mo
558.211 500.57 li
@
631.051 514.609 mo
620.969 504.531 li
620.969 514.609 mo
631.051 504.531 li
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
43.801 354.84 mo
116.52 435.238 li
189.359 475.559 li
262.199 489 li
334.922 495.719 li
407.762 499.559 li
480.48 502.559 li
553.32 504.359 li
626.039 505.68 li
@
grestore
38.609 349.852 mo
48.57 349.852 li
48.57 359.809 li
38.609 359.809 li
cp
@
111.449 430.25 mo
121.41 430.25 li
121.41 440.211 li
111.449 440.211 li
cp
@
184.289 470.57 mo
194.25 470.57 li
194.25 480.531 li
184.289 480.531 li
cp
@
257.012 483.891 mo
266.969 483.891 li
266.969 493.852 li
257.012 493.852 li
cp
@
329.852 490.73 mo
339.809 490.73 li
339.809 500.691 li
329.852 500.691 li
cp
@
402.57 494.57 mo
412.531 494.57 li
412.531 504.531 li
402.57 504.531 li
cp
@
475.41 497.449 mo
485.371 497.449 li
485.371 507.41 li
475.41 507.41 li
cp
@
548.129 499.25 mo
558.09 499.25 li
558.09 509.211 li
548.129 509.211 li
cp
@
620.969 500.691 mo
630.93 500.691 li
630.93 510.648 li
620.969 510.648 li
cp
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
43.801 262.559 mo
116.52 387.602 li
189.359 450.719 li
262.199 466.078 li
334.922 478.32 li
407.762 476.879 li
480.48 487.199 li
553.32 491.762 li
626.039 492.84 li
.62768 .285466 0 0 cmyk
@
grestore
48.691 267.648 mo
38.609 257.57 li
38.609 267.648 mo
48.691 257.57 li
.62768 .285466 0 0 cmyk
@
121.531 392.57 mo
111.449 382.488 li
111.449 392.57 mo
121.531 382.488 li
@
194.371 455.691 mo
184.289 445.609 li
184.289 455.691 mo
194.371 445.609 li
@
267.09 471.172 mo
257.012 461.09 li
257.012 471.172 mo
267.09 461.09 li
@
339.93 483.289 mo
329.852 473.211 li
329.852 483.289 mo
339.93 473.211 li
@
412.648 481.852 mo
402.57 471.77 li
402.57 481.852 mo
412.648 471.77 li
@
485.488 492.172 mo
475.41 482.09 li
475.41 492.172 mo
485.488 482.09 li
@
558.211 496.852 mo
548.129 486.77 li
548.129 496.852 mo
558.211 486.77 li
@
631.051 497.809 mo
620.969 487.73 li
620.969 497.809 mo
631.051 487.73 li
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
43.801 77.16 mo
116.52 295.078 li
189.359 405.359 li
262.199 442.078 li
334.922 460.801 li
407.762 471.48 li
480.48 479.16 li
553.32 484.32 li
626.039 488.52 li
@
grestore
38.609 72.172 mo
48.57 72.172 li
48.57 82.129 li
38.609 82.129 li
cp
@
111.449 290.09 mo
121.41 290.09 li
121.41 300.051 li
111.449 300.051 li
cp
@
184.289 400.371 mo
194.25 400.371 li
194.25 410.328 li
184.289 410.328 li
cp
@
257.012 437.09 mo
266.969 437.09 li
266.969 447.051 li
257.012 447.051 li
cp
@
329.852 455.809 mo
339.809 455.809 li
339.809 465.77 li
329.852 465.77 li
cp
@
402.57 466.488 mo
412.531 466.488 li
412.531 476.449 li
402.57 476.449 li
cp
@
475.41 474.051 mo
485.371 474.051 li
485.371 484.012 li
475.41 484.012 li
cp
@
548.129 479.328 mo
558.09 479.328 li
558.09 489.289 li
548.129 489.289 li
cp
@
620.969 483.41 mo
630.93 483.41 li
630.93 493.371 li
620.969 493.371 li
cp
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
43.801 320.039 mo
116.52 416.398 li
189.359 465.238 li
262.199 477.48 li
334.922 486.238 li
407.762 487.078 li
480.48 492.719 li
553.32 499.199 li
626.039 498.84 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
48.691 325.012 mo
38.609 314.93 li
38.609 325.012 mo
48.691 314.93 li
.0319219 .621851 .911223 .000427253 cmyk
@
121.531 421.488 mo
111.449 411.41 li
111.449 421.488 mo
121.531 411.41 li
@
194.371 470.328 mo
184.289 460.25 li
184.289 470.328 mo
194.371 460.25 li
@
267.09 482.449 mo
257.012 472.371 li
257.012 482.449 mo
267.09 472.371 li
@
339.93 491.211 mo
329.852 481.129 li
329.852 491.211 mo
339.93 481.129 li
@
412.648 492.172 mo
402.57 482.09 li
402.57 492.172 mo
412.648 482.09 li
@
485.488 497.691 mo
475.41 487.609 li
475.41 497.691 mo
485.488 487.609 li
@
558.211 504.289 mo
548.129 494.211 li
548.129 504.289 mo
558.211 494.211 li
@
631.051 503.809 mo
620.969 493.73 li
620.969 503.809 mo
631.051 493.73 li
@
gsave
43.68 27.238 mo
626.762 27.238 li
626.762 516.718 li
43.68 516.718 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
43.801 176.281 mo
116.52 345.121 li
189.359 430.559 li
262.199 458.879 li
334.922 473.16 li
407.762 481.32 li
480.48 487.32 li
553.32 491.16 li
626.039 494.52 li
@
grestore
38.609 171.289 mo
48.57 171.289 li
48.57 181.25 li
38.609 181.25 li
cp
@
111.449 340.129 mo
121.41 340.129 li
121.41 350.09 li
111.449 350.09 li
cp
@
184.289 425.449 mo
194.25 425.449 li
194.25 435.41 li
184.289 435.41 li
cp
@
257.012 453.891 mo
266.969 453.891 li
266.969 463.852 li
257.012 463.852 li
cp
@
329.852 468.051 mo
339.809 468.051 li
339.809 478.012 li
329.852 478.012 li
cp
@
402.57 476.211 mo
412.531 476.211 li
412.531 486.172 li
402.57 486.172 li
cp
@
475.41 482.328 mo
485.371 482.328 li
485.371 492.289 li
475.41 492.289 li
cp
@
548.129 486.172 mo
558.09 486.172 li
558.09 496.129 li
548.129 496.129 li
cp
@
620.969 489.41 mo
630.93 489.41 li
630.93 499.371 li
620.969 499.371 li
cp
@
26.551 508.109 mo
32.629 508.109 li
32.629 522.761 li
26.551 522.761 li
cp
0 0 0 0 cmyk
ef
32.234 515.793 mo
32.23 516.375 32.184 516.906 32.098 517.387 cv
32.004 517.871 31.852 518.285 31.641 518.629 cv
31.422 518.973 31.145 519.242 30.805 519.43 cv
30.457 519.617 30.035 519.707 29.535 519.711 cv
29.059 519.707 28.656 519.625 28.332 519.457 cv
28.004 519.289 27.742 519.039 27.543 518.707 cv
27.34 518.379 27.195 517.973 27.117 517.488 cv
27.031 517.008 26.992 516.453 26.992 515.828 cv
26.992 515.25 27.039 514.723 27.133 514.238 cv
27.227 513.762 27.379 513.348 27.59 512.996 cv
27.801 512.652 28.078 512.383 28.422 512.191 cv
28.766 512.004 29.188 511.91 29.688 511.906 cv
30.164 511.91 30.566 511.996 30.895 512.164 cv
31.223 512.336 31.484 512.586 31.684 512.914 cv
31.883 513.246 32.023 513.652 32.109 514.133 cv
32.188 514.617 32.23 515.168 32.234 515.793 cv
cp
31.203 515.863 mo
31.199 515.488 31.188 515.148 31.164 514.844 cv
31.137 514.543 31.094 514.277 31.043 514.047 cv
30.988 513.82 30.922 513.625 30.836 513.453 cv
30.75 513.289 30.648 513.152 30.535 513.043 cv
30.414 512.941 30.281 512.863 30.133 512.809 cv
29.984 512.762 29.816 512.734 29.629 512.734 cv
29.297 512.734 29.027 512.812 28.82 512.969 cv
28.609 513.125 28.445 513.34 28.328 513.613 cv
28.211 513.887 28.129 514.207 28.086 514.574 cv
28.043 514.941 28.023 515.336 28.023 515.758 cv
28.023 516.328 28.051 516.812 28.109 517.203 cv
28.168 517.602 28.262 517.922 28.387 518.172 cv
28.512 518.422 28.672 518.605 28.875 518.719 cv
29.07 518.832 29.313 518.887 29.594 518.887 cv
29.813 518.887 30.004 518.852 30.172 518.781 cv
30.336 518.711 30.477 518.613 30.598 518.48 cv
30.715 518.352 30.816 518.191 30.895 518.008 cv
30.973 517.828 31.035 517.625 31.082 517.398 cv
31.129 517.176 31.16 516.937 31.176 516.676 cv
31.191 516.418 31.199 516.145 31.203 515.863 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 459.23 mo
32.629 459.23 li
32.629 473.878 li
26.551 473.878 li
cp
0 0 0 0 cmyk
ef
32 470.312 mo
31.996 470.387 31.992 470.449 31.984 470.5 cv
31.973 470.555 31.957 470.598 31.938 470.625 cv
31.914 470.66 31.891 470.684 31.867 470.691 cv
31.844 470.707 31.816 470.711 31.789 470.711 cv
27.828 470.711 li
27.801 470.711 27.777 470.707 27.754 470.691 cv
27.73 470.684 27.707 470.66 27.688 470.625 cv
27.664 470.598 27.648 470.555 27.637 470.5 cv
27.621 470.449 27.613 470.387 27.617 470.312 cv
27.613 470.242 27.621 470.184 27.637 470.133 cv
27.648 470.082 27.66 470.039 27.68 470.004 cv
27.695 469.973 27.719 469.949 27.742 469.93 cv
27.766 469.914 27.793 469.902 27.828 469.902 cv
29.414 469.902 li
29.414 464.137 li
27.945 465.008 li
27.871 465.055 27.813 465.078 27.77 465.082 cv
27.723 465.094 27.688 465.086 27.66 465.055 cv
27.629 465.031 27.609 464.988 27.602 464.93 cv
27.594 464.871 27.59 464.797 27.59 464.703 cv
27.59 464.641 27.59 464.582 27.598 464.535 cv
27.602 464.488 27.613 464.449 27.625 464.418 cv
27.633 464.387 27.648 464.359 27.672 464.336 cv
27.695 464.312 27.723 464.289 27.758 464.266 cv
29.508 463.148 li
29.52 463.137 29.539 463.125 29.566 463.117 cv
29.586 463.109 29.617 463.102 29.652 463.094 cv
29.684 463.086 29.723 463.082 29.773 463.082 cv
29.816 463.082 29.875 463.082 29.953 463.078 cv
30.043 463.082 30.121 463.086 30.188 463.09 cv
30.246 463.102 30.297 463.113 30.332 463.121 cv
30.363 463.137 30.387 463.152 30.402 463.172 cv
30.414 463.195 30.418 463.219 30.422 463.242 cv
30.422 469.902 li
31.789 469.902 li
31.816 469.902 31.848 469.914 31.879 469.93 cv
31.906 469.949 31.926 469.973 31.945 470.004 cv
31.961 470.039 31.977 470.082 31.984 470.133 cv
31.992 470.184 31.996 470.242 32 470.312 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 410.352 mo
32.629 410.352 li
32.629 425 li
26.551 425 li
cp
0 0 0 0 cmyk
ef
31.984 421.387 mo
31.984 421.457 31.977 421.52 31.969 421.574 cv
31.953 421.629 31.941 421.676 31.926 421.711 cv
31.91 421.75 31.887 421.777 31.855 421.793 cv
31.824 421.812 31.793 421.82 31.762 421.82 cv
27.57 421.82 li
27.516 421.82 27.469 421.816 27.43 421.801 cv
27.387 421.793 27.352 421.77 27.324 421.734 cv
27.293 421.707 27.27 421.66 27.258 421.598 cv
27.242 421.539 27.238 421.469 27.238 421.383 cv
27.238 421.309 27.238 421.238 27.246 421.176 cv
27.25 421.117 27.266 421.066 27.285 421.02 cv
27.305 420.977 27.328 420.934 27.359 420.887 cv
27.387 420.848 27.426 420.797 27.48 420.742 cv
28.996 419.184 li
29.344 418.824 29.621 418.504 29.836 418.219 cv
30.047 417.934 30.211 417.672 30.328 417.437 cv
30.438 417.203 30.516 416.992 30.555 416.801 cv
30.59 416.609 30.605 416.43 30.609 416.258 cv
30.605 416.094 30.578 415.934 30.523 415.781 cv
30.465 415.633 30.383 415.5 30.277 415.387 cv
30.168 415.277 30.035 415.187 29.875 415.117 cv
29.711 415.051 29.523 415.02 29.32 415.016 cv
29.07 415.02 28.852 415.051 28.656 415.117 cv
28.461 415.187 28.289 415.262 28.141 415.336 cv
27.992 415.418 27.867 415.488 27.773 415.551 cv
27.672 415.617 27.602 415.652 27.555 415.648 cv
27.523 415.652 27.496 415.645 27.477 415.625 cv
27.453 415.613 27.434 415.586 27.422 415.551 cv
27.406 415.52 27.398 415.473 27.391 415.41 cv
27.383 415.352 27.379 415.281 27.379 415.199 cv
27.379 415.141 27.379 415.09 27.383 415.047 cv
27.387 415.008 27.395 414.973 27.406 414.937 cv
27.414 414.91 27.426 414.879 27.445 414.848 cv
27.457 414.82 27.488 414.789 27.539 414.746 cv
27.582 414.707 27.664 414.648 27.781 414.578 cv
27.895 414.508 28.039 414.441 28.215 414.371 cv
28.387 414.305 28.578 414.246 28.789 414.195 cv
28.996 414.152 29.215 414.129 29.445 414.125 cv
29.813 414.129 30.133 414.18 30.41 414.281 cv
30.684 414.387 30.914 414.527 31.094 414.707 cv
31.273 414.887 31.41 415.098 31.504 415.336 cv
31.594 415.574 31.637 415.828 31.641 416.094 cv
31.637 416.344 31.617 416.586 31.574 416.82 cv
31.527 417.062 31.434 417.32 31.301 417.598 cv
31.16 417.879 30.961 418.191 30.699 418.531 cv
30.438 418.875 30.09 419.266 29.656 419.711 cv
28.457 420.965 li
31.758 420.965 li
31.785 420.965 31.816 420.977 31.848 420.992 cv
31.875 421.012 31.898 421.035 31.922 421.07 cv
31.938 421.109 31.953 421.156 31.969 421.203 cv
31.977 421.258 31.984 421.316 31.984 421.387 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 361.469 mo
32.629 361.469 li
32.629 376.121 li
26.551 376.121 li
cp
0 0 0 0 cmyk
ef
31.926 370.773 mo
31.926 371.121 31.863 371.437 31.742 371.715 cv
31.621 371.996 31.449 372.234 31.223 372.434 cv
30.996 372.633 30.715 372.785 30.383 372.891 cv
30.051 372.996 29.676 373.047 29.258 373.051 cv
29.004 373.047 28.766 373.027 28.547 372.988 cv
28.324 372.949 28.129 372.902 27.961 372.848 cv
27.785 372.793 27.645 372.734 27.531 372.672 cv
27.414 372.609 27.34 372.566 27.316 372.539 cv
27.285 372.512 27.266 372.484 27.25 372.457 cv
27.234 372.43 27.219 372.395 27.207 372.355 cv
27.195 372.316 27.188 372.27 27.18 372.215 cv
27.172 372.16 27.168 372.09 27.172 372.004 cv
27.168 371.863 27.184 371.766 27.215 371.711 cv
27.242 371.656 27.281 371.629 27.336 371.629 cv
27.371 371.629 27.441 371.66 27.547 371.723 cv
27.652 371.785 27.789 371.855 27.957 371.926 cv
28.121 372.004 28.316 372.07 28.539 372.129 cv
28.762 372.195 29.008 372.227 29.285 372.223 cv
29.543 372.227 29.777 372.191 29.98 372.121 cv
30.18 372.055 30.348 371.961 30.484 371.84 cv
30.621 371.723 30.723 371.582 30.793 371.41 cv
30.859 371.246 30.895 371.062 30.895 370.867 cv
30.895 370.652 30.848 370.461 30.762 370.285 cv
30.672 370.117 30.547 369.969 30.383 369.84 cv
30.215 369.719 30.008 369.621 29.766 369.555 cv
29.516 369.492 29.238 369.461 28.934 369.457 cv
28.191 369.457 li
28.156 369.461 28.125 369.453 28.094 369.437 cv
28.063 369.422 28.035 369.398 28.016 369.367 cv
27.992 369.336 27.973 369.297 27.961 369.246 cv
27.945 369.195 27.941 369.129 27.941 369.043 cv
27.941 368.973 27.945 368.91 27.957 368.859 cv
27.969 368.812 27.984 368.773 28.008 368.742 cv
28.023 368.715 28.051 368.695 28.082 368.68 cv
28.109 368.672 28.141 368.664 28.176 368.66 cv
28.836 368.66 li
29.094 368.664 29.324 368.629 29.531 368.559 cv
29.734 368.492 29.91 368.398 30.051 368.27 cv
30.191 368.148 30.301 368 30.379 367.824 cv
30.457 367.652 30.496 367.457 30.496 367.238 cv
30.496 367.086 30.469 366.937 30.418 366.793 cv
30.367 366.652 30.293 366.527 30.191 366.422 cv
30.09 366.316 29.957 366.234 29.801 366.172 cv
29.637 366.117 29.457 366.086 29.254 366.082 cv
29.027 366.086 28.816 366.121 28.629 366.184 cv
28.434 366.254 28.266 366.324 28.121 366.402 cv
27.969 366.48 27.848 366.555 27.754 366.621 cv
27.656 366.691 27.586 366.727 27.547 366.723 cv
27.52 366.727 27.496 366.723 27.477 366.711 cv
27.453 366.703 27.434 366.684 27.422 366.652 cv
27.406 366.625 27.398 366.582 27.391 366.527 cv
27.383 366.477 27.379 366.406 27.383 366.32 cv
27.379 366.262 27.383 366.211 27.391 366.164 cv
27.395 366.121 27.402 366.082 27.414 366.047 cv
27.422 366.016 27.434 365.984 27.453 365.957 cv
27.465 365.934 27.492 365.902 27.531 365.863 cv
27.57 365.824 27.645 365.77 27.758 365.699 cv
27.871 365.629 28.012 365.562 28.18 365.492 cv
28.344 365.426 28.535 365.367 28.754 365.316 cv
28.969 365.273 29.203 365.25 29.453 365.246 cv
29.805 365.25 30.113 365.293 30.379 365.383 cv
30.645 365.477 30.863 365.605 31.043 365.766 cv
31.219 365.934 31.352 366.129 31.441 366.355 cv
31.527 366.582 31.574 366.836 31.574 367.113 cv
31.574 367.352 31.543 367.574 31.48 367.777 cv
31.418 367.984 31.324 368.164 31.203 368.32 cv
31.082 368.48 30.934 368.617 30.758 368.727 cv
30.582 368.844 30.379 368.918 30.148 368.957 cv
30.148 368.969 li
30.41 369 30.648 369.066 30.867 369.168 cv
31.082 369.27 31.27 369.398 31.43 369.555 cv
31.582 369.711 31.703 369.895 31.793 370.105 cv
31.879 370.316 31.926 370.539 31.926 370.773 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 312.578 mo
32.629 312.578 li
32.629 327.23 li
26.551 327.23 li
cp
0 0 0 0 cmyk
ef
32.305 321.895 mo
32.301 322.027 32.281 322.129 32.246 322.199 cv
32.203 322.273 32.148 322.312 32.086 322.309 cv
31.227 322.309 li
31.227 323.902 li
31.223 323.937 31.215 323.965 31.203 323.984 cv
31.184 324.008 31.156 324.023 31.117 324.039 cv
31.078 324.055 31.023 324.066 30.961 324.074 cv
30.895 324.082 30.813 324.086 30.715 324.086 cv
30.613 324.086 30.535 324.082 30.473 324.074 cv
30.41 324.066 30.359 324.055 30.32 324.039 cv
30.281 324.023 30.254 324.008 30.238 323.984 cv
30.223 323.965 30.215 323.937 30.219 323.902 cv
30.219 322.309 li
27.117 322.309 li
27.07 322.312 27.035 322.305 27.004 322.293 cv
26.973 322.285 26.941 322.266 26.918 322.23 cv
26.887 322.203 26.871 322.156 26.863 322.094 cv
26.855 322.035 26.852 321.961 26.852 321.863 cv
26.852 321.793 26.852 321.727 26.855 321.668 cv
26.859 321.609 26.867 321.555 26.879 321.508 cv
26.891 321.461 26.906 321.414 26.926 321.367 cv
26.945 321.32 26.969 321.273 26.996 321.223 cv
29.699 316.613 li
29.719 316.586 29.746 316.559 29.785 316.531 cv
29.82 316.512 29.871 316.492 29.934 316.473 cv
29.992 316.461 30.063 316.449 30.152 316.441 cv
30.238 316.437 30.344 316.434 30.465 316.434 cv
30.594 316.434 30.707 316.441 30.805 316.449 cv
30.902 316.465 30.98 316.477 31.043 316.488 cv
31.098 316.508 31.145 316.527 31.18 316.551 cv
31.207 316.574 31.223 316.605 31.227 316.637 cv
31.227 321.48 li
32.086 321.48 li
32.148 321.484 32.203 321.52 32.242 321.582 cv
32.281 321.652 32.301 321.754 32.305 321.895 cv
cp
30.219 317.316 mo
30.211 317.316 li
27.773 321.48 li
30.219 321.48 li
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 263.699 mo
32.629 263.699 li
32.629 278.351 li
26.551 278.351 li
cp
0 0 0 0 cmyk
ef
31.949 272.723 mo
31.949 273.129 31.879 273.492 31.742 273.809 cv
31.605 274.125 31.414 274.391 31.164 274.609 cv
30.914 274.828 30.613 274.992 30.27 275.102 cv
29.918 275.211 29.535 275.266 29.117 275.27 cv
28.879 275.266 28.656 275.25 28.449 275.219 cv
28.234 275.187 28.047 275.148 27.887 275.102 cv
27.719 275.055 27.586 275.008 27.484 274.957 cv
27.379 274.914 27.309 274.875 27.281 274.844 cv
27.25 274.816 27.23 274.793 27.219 274.766 cv
27.207 274.746 27.195 274.719 27.188 274.684 cv
27.172 274.652 27.168 274.609 27.168 274.559 cv
27.164 274.508 27.16 274.445 27.164 274.375 cv
27.16 274.312 27.164 274.254 27.172 274.199 cv
27.176 274.145 27.188 274.102 27.203 274.07 cv
27.219 274.039 27.234 274.016 27.258 273.996 cv
27.273 273.984 27.301 273.977 27.332 273.973 cv
27.371 273.977 27.43 274 27.512 274.047 cv
27.594 274.094 27.703 274.148 27.844 274.203 cv
27.98 274.262 28.152 274.312 28.359 274.363 cv
28.563 274.418 28.809 274.445 29.09 274.441 cv
29.352 274.445 29.59 274.414 29.813 274.348 cv
30.027 274.289 30.215 274.191 30.375 274.055 cv
30.531 273.926 30.656 273.758 30.746 273.555 cv
30.836 273.352 30.883 273.105 30.883 272.816 cv
30.883 272.574 30.844 272.363 30.77 272.176 cv
30.691 271.992 30.574 271.836 30.418 271.711 cv
30.258 271.59 30.059 271.5 29.816 271.437 cv
29.574 271.383 29.285 271.352 28.949 271.348 cv
28.711 271.352 28.504 271.363 28.336 271.383 cv
28.16 271.41 28 271.422 27.852 271.418 cv
27.738 271.422 27.66 271.395 27.617 271.34 cv
27.566 271.289 27.543 271.191 27.547 271.047 cv
27.547 267.957 li
27.543 267.832 27.574 267.734 27.637 267.672 cv
27.699 267.609 27.785 267.578 27.898 267.578 cv
31.258 267.578 li
31.289 267.578 31.316 267.59 31.348 267.605 cv
31.371 267.625 31.398 267.648 31.422 267.684 cv
31.441 267.723 31.453 267.77 31.465 267.82 cv
31.473 267.879 31.48 267.941 31.48 268.012 cv
31.48 268.152 31.461 268.262 31.422 268.34 cv
31.383 268.418 31.328 268.457 31.266 268.457 cv
28.555 268.457 li
28.555 270.582 li
28.684 270.566 28.82 270.555 28.961 270.551 cv
29.098 270.547 29.254 270.543 29.438 270.543 cv
29.852 270.543 30.219 270.598 30.531 270.699 cv
30.844 270.809 31.102 270.953 31.313 271.141 cv
31.52 271.328 31.68 271.559 31.789 271.828 cv
31.895 272.098 31.949 272.395 31.949 272.723 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 214.82 mo
32.629 214.82 li
32.629 229.468 li
26.551 229.468 li
cp
0 0 0 0 cmyk
ef
32.18 223.816 mo
32.176 224.148 32.125 224.469 32.027 224.781 cv
31.922 225.094 31.766 225.367 31.559 225.602 cv
31.344 225.836 31.078 226.027 30.754 226.168 cv
30.426 226.309 30.043 226.375 29.605 226.379 cv
29.289 226.375 29.008 226.34 28.77 226.262 cv
28.523 226.187 28.313 226.074 28.137 225.93 cv
27.953 225.789 27.805 225.613 27.688 225.398 cv
27.566 225.191 27.469 224.949 27.398 224.676 cv
27.32 224.406 27.27 224.113 27.242 223.789 cv
27.207 223.473 27.191 223.129 27.195 222.762 cv
27.191 222.437 27.211 222.109 27.25 221.777 cv
27.285 221.445 27.348 221.125 27.438 220.816 cv
27.523 220.508 27.645 220.219 27.801 219.945 cv
27.957 219.676 28.148 219.437 28.383 219.234 cv
28.613 219.035 28.895 218.875 29.219 218.758 cv
29.539 218.641 29.914 218.582 30.352 218.582 cv
30.492 218.582 30.641 218.594 30.789 218.609 cv
30.938 218.633 31.074 218.656 31.199 218.68 cv
31.324 218.711 31.43 218.742 31.516 218.777 cv
31.602 218.812 31.656 218.84 31.684 218.863 cv
31.711 218.887 31.73 218.91 31.746 218.934 cv
31.754 218.957 31.766 218.984 31.777 219.016 cv
31.781 219.047 31.789 219.082 31.797 219.113 cv
31.801 219.152 31.801 219.195 31.805 219.25 cv
31.801 219.32 31.801 219.383 31.801 219.434 cv
31.797 219.484 31.789 219.523 31.777 219.555 cv
31.762 219.586 31.742 219.609 31.723 219.625 cv
31.699 219.641 31.672 219.648 31.641 219.648 cv
31.594 219.648 31.535 219.637 31.461 219.609 cv
31.387 219.582 31.297 219.551 31.191 219.516 cv
31.086 219.484 30.957 219.453 30.809 219.426 cv
30.656 219.402 30.484 219.391 30.285 219.387 cv
29.922 219.391 29.609 219.465 29.348 219.609 cv
29.082 219.762 28.867 219.961 28.703 220.207 cv
28.539 220.461 28.414 220.75 28.336 221.078 cv
28.254 221.406 28.211 221.75 28.199 222.109 cv
28.301 222.051 28.414 221.992 28.543 221.934 cv
28.668 221.879 28.805 221.828 28.957 221.777 cv
29.105 221.734 29.266 221.695 29.434 221.664 cv
29.602 221.633 29.781 221.617 29.977 221.617 cv
30.383 221.617 30.73 221.676 31.012 221.785 cv
31.293 221.898 31.52 222.051 31.691 222.246 cv
31.863 222.445 31.988 222.68 32.066 222.945 cv
32.141 223.219 32.176 223.508 32.18 223.816 cv
cp
31.156 223.91 mo
31.152 223.684 31.129 223.477 31.09 223.289 cv
31.043 223.105 30.969 222.949 30.863 222.82 cv
30.758 222.691 30.617 222.59 30.441 222.52 cv
30.266 222.449 30.051 222.414 29.793 222.414 cv
29.648 222.414 29.504 222.43 29.359 222.453 cv
29.211 222.48 29.07 222.516 28.938 222.559 cv
28.805 222.605 28.676 222.656 28.551 222.719 cv
28.426 222.781 28.313 222.848 28.219 222.91 cv
28.215 223.418 28.246 223.84 28.313 224.18 cv
28.375 224.52 28.469 224.793 28.594 224.996 cv
28.715 225.203 28.871 225.348 29.055 225.434 cv
29.234 225.523 29.449 225.566 29.699 225.566 cv
29.949 225.566 30.164 225.52 30.348 225.426 cv
30.531 225.332 30.684 225.207 30.805 225.047 cv
30.926 224.891 31.016 224.715 31.07 224.516 cv
31.125 224.32 31.152 224.117 31.156 223.91 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 165.941 mo
32.629 165.941 li
32.629 180.589 li
26.551 180.589 li
cp
0 0 0 0 cmyk
ef
32.094 170.23 mo
32.09 170.301 32.086 170.367 32.086 170.422 cv
32.078 170.48 32.07 170.535 32.063 170.586 cv
32.047 170.641 32.035 170.691 32.02 170.738 cv
32.004 170.789 31.984 170.84 31.961 170.895 cv
29.23 177.184 li
29.211 177.234 29.184 177.273 29.156 177.301 cv
29.125 177.332 29.09 177.355 29.043 177.371 cv
28.996 177.387 28.938 177.395 28.871 177.402 cv
28.797 177.41 28.711 177.414 28.617 177.414 cv
28.477 177.414 28.375 177.406 28.305 177.395 cv
28.23 177.383 28.176 177.367 28.145 177.34 cv
28.109 177.316 28.094 177.285 28.098 177.246 cv
28.102 177.211 28.117 177.168 28.141 177.113 cv
31.012 170.684 li
27.375 170.684 li
27.297 170.687 27.242 170.648 27.203 170.566 cv
27.164 170.492 27.145 170.383 27.148 170.238 cv
27.145 170.164 27.148 170.098 27.164 170.043 cv
27.172 169.988 27.188 169.945 27.207 169.906 cv
27.227 169.871 27.25 169.844 27.277 169.824 cv
27.305 169.809 27.336 169.797 27.375 169.797 cv
31.789 169.797 li
31.844 169.797 31.891 169.805 31.934 169.816 cv
31.973 169.828 32.004 169.852 32.027 169.887 cv
32.047 169.922 32.066 169.965 32.078 170.02 cv
32.086 170.074 32.09 170.145 32.094 170.23 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 117.059 mo
32.629 117.059 li
32.629 131.711 li
26.551 131.711 li
cp
0 0 0 0 cmyk
ef
32.16 126.555 mo
32.16 126.883 32.102 127.176 31.984 127.43 cv
31.867 127.687 31.695 127.902 31.477 128.078 cv
31.254 128.258 30.984 128.391 30.66 128.477 cv
30.332 128.562 29.961 128.605 29.547 128.609 cv
29.156 128.605 28.805 128.566 28.496 128.488 cv
28.188 128.41 27.926 128.289 27.711 128.125 cv
27.496 127.965 27.332 127.77 27.219 127.531 cv
27.105 127.301 27.051 127.031 27.051 126.73 cv
27.051 126.496 27.09 126.277 27.168 126.074 cv
27.246 125.875 27.355 125.691 27.504 125.523 cv
27.648 125.359 27.832 125.203 28.047 125.055 cv
28.258 124.906 28.5 124.766 28.773 124.633 cv
28.539 124.516 28.332 124.391 28.152 124.25 cv
27.973 124.117 27.82 123.969 27.695 123.809 cv
27.57 123.652 27.473 123.484 27.41 123.301 cv
27.34 123.125 27.309 122.93 27.313 122.719 cv
27.309 122.457 27.355 122.207 27.457 121.973 cv
27.551 121.738 27.695 121.535 27.891 121.363 cv
28.078 121.191 28.324 121.059 28.629 120.957 cv
28.926 120.859 29.277 120.809 29.676 120.805 cv
30.059 120.809 30.387 120.855 30.668 120.945 cv
30.941 121.039 31.172 121.164 31.359 121.32 cv
31.539 121.48 31.676 121.664 31.762 121.879 cv
31.848 122.098 31.891 122.328 31.891 122.57 cv
31.891 122.77 31.855 122.961 31.793 123.145 cv
31.723 123.332 31.629 123.508 31.508 123.668 cv
31.379 123.836 31.227 123.988 31.047 124.129 cv
30.867 124.27 30.66 124.402 30.426 124.527 cv
30.703 124.668 30.949 124.809 31.168 124.949 cv
31.383 125.094 31.563 125.25 31.711 125.414 cv
31.852 125.582 31.965 125.758 32.043 125.941 cv
32.121 126.129 32.16 126.332 32.16 126.555 cv
cp
30.895 122.664 mo
30.895 122.5 30.863 122.352 30.809 122.219 cv
30.75 122.086 30.668 121.973 30.563 121.879 cv
30.449 121.785 30.313 121.715 30.152 121.668 cv
29.988 121.621 29.805 121.598 29.602 121.594 cv
29.176 121.598 28.855 121.691 28.641 121.879 cv
28.422 122.07 28.316 122.332 28.316 122.664 cv
28.316 122.816 28.34 122.961 28.395 123.09 cv
28.445 123.223 28.527 123.344 28.641 123.461 cv
28.75 123.578 28.891 123.695 29.063 123.805 cv
29.23 123.918 29.434 124.031 29.672 124.152 cv
30.063 123.949 30.367 123.727 30.578 123.48 cv
30.789 123.234 30.895 122.961 30.895 122.664 cv
cp
31.141 126.66 mo
31.141 126.48 31.105 126.32 31.039 126.172 cv
30.973 126.031 30.871 125.895 30.738 125.762 cv
30.602 125.637 30.434 125.512 30.234 125.391 cv
30.031 125.273 29.801 125.148 29.535 125.02 cv
29.285 125.145 29.066 125.266 28.887 125.383 cv
28.699 125.504 28.547 125.629 28.43 125.758 cv
28.305 125.891 28.215 126.027 28.16 126.168 cv
28.098 126.309 28.07 126.465 28.07 126.637 cv
28.07 127.016 28.199 127.309 28.461 127.516 cv
28.719 127.727 29.105 127.832 29.625 127.828 cv
30.121 127.832 30.5 127.727 30.758 127.516 cv
31.012 127.305 31.141 127.02 31.141 126.66 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
26.551 68.18 mo
32.629 68.18 li
32.629 82.828 li
26.551 82.828 li
cp
0 0 0 0 cmyk
ef
32.055 75.512 mo
32.055 75.844 32.035 76.176 31.996 76.512 cv
31.957 76.852 31.891 77.176 31.797 77.484 cv
31.703 77.797 31.574 78.09 31.418 78.359 cv
31.254 78.633 31.055 78.867 30.816 79.07 cv
30.574 79.273 30.289 79.434 29.961 79.551 cv
29.629 79.664 29.246 79.719 28.809 79.723 cv
28.637 79.719 28.473 79.707 28.316 79.687 cv
28.156 79.664 28.012 79.641 27.887 79.609 cv
27.758 79.578 27.652 79.547 27.566 79.512 cv
27.48 79.477 27.418 79.441 27.379 79.406 cv
27.34 79.371 27.309 79.324 27.293 79.262 cv
27.273 79.203 27.266 79.121 27.27 79.016 cv
27.266 78.934 27.27 78.863 27.277 78.812 cv
27.281 78.762 27.289 78.723 27.301 78.695 cv
27.313 78.668 27.328 78.648 27.352 78.637 cv
27.371 78.629 27.398 78.625 27.434 78.621 cv
27.473 78.625 27.535 78.641 27.613 78.668 cv
27.691 78.699 27.789 78.73 27.91 78.766 cv
28.027 78.801 28.168 78.836 28.332 78.863 cv
28.492 78.895 28.672 78.906 28.871 78.906 cv
29.25 78.906 29.574 78.836 29.848 78.687 cv
30.117 78.543 30.34 78.344 30.516 78.098 cv
30.684 77.852 30.813 77.566 30.902 77.238 cv
30.984 76.914 31.031 76.57 31.043 76.211 cv
30.832 76.332 30.586 76.441 30.297 76.531 cv
30.008 76.629 29.676 76.676 29.301 76.672 cv
28.879 76.676 28.523 76.617 28.234 76.5 cv
27.945 76.387 27.715 76.23 27.543 76.031 cv
27.367 75.832 27.238 75.594 27.164 75.32 cv
27.086 75.047 27.051 74.746 27.051 74.418 cv
27.051 74.082 27.098 73.766 27.195 73.461 cv
27.293 73.16 27.445 72.891 27.656 72.66 cv
27.859 72.43 28.125 72.246 28.449 72.109 cv
28.766 71.973 29.148 71.906 29.602 71.902 cv
29.914 71.906 30.195 71.945 30.441 72.023 cv
30.684 72.105 30.895 72.219 31.078 72.367 cv
31.254 72.52 31.406 72.703 31.535 72.914 cv
31.66 73.129 31.762 73.371 31.84 73.641 cv
31.91 73.91 31.965 74.203 32.004 74.516 cv
32.035 74.836 32.055 75.168 32.055 75.512 cv
cp
31.027 75.398 mo
31.023 74.902 30.988 74.48 30.926 74.137 cv
30.855 73.793 30.758 73.516 30.633 73.305 cv
30.5 73.094 30.344 72.941 30.156 72.848 cv
29.969 72.754 29.75 72.707 29.508 72.703 cv
29.25 72.707 29.035 72.754 28.855 72.844 cv
28.676 72.937 28.527 73.062 28.41 73.215 cv
28.293 73.371 28.207 73.543 28.156 73.738 cv
28.098 73.934 28.07 74.137 28.074 74.344 cv
28.07 74.574 28.094 74.785 28.145 74.977 cv
28.191 75.172 28.27 75.336 28.383 75.465 cv
28.492 75.602 28.637 75.703 28.813 75.773 cv
28.988 75.848 29.207 75.883 29.465 75.883 cv
29.758 75.883 30.039 75.84 30.316 75.75 cv
30.586 75.664 30.824 75.547 31.027 75.398 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
20.469 19.301 mo
32.629 19.301 li
32.629 33.949 li
20.469 33.949 li
cp
0 0 0 0 cmyk
ef
25.93 30.301 mo
25.926 30.375 25.922 30.437 25.914 30.488 cv
25.902 30.543 25.887 30.586 25.867 30.613 cv
25.844 30.648 25.82 30.672 25.797 30.68 cv
25.773 30.695 25.746 30.699 25.719 30.699 cv
21.758 30.699 li
21.73 30.699 21.707 30.695 21.684 30.68 cv
21.66 30.672 21.637 30.648 21.617 30.613 cv
21.594 30.586 21.578 30.543 21.566 30.488 cv
21.551 30.437 21.543 30.375 21.547 30.301 cv
21.543 30.23 21.551 30.172 21.566 30.121 cv
21.578 30.07 21.59 30.027 21.609 29.992 cv
21.625 29.961 21.648 29.937 21.672 29.918 cv
21.695 29.902 21.723 29.891 21.758 29.891 cv
23.344 29.891 li
23.344 24.125 li
21.875 24.996 li
21.801 25.043 21.742 25.066 21.699 25.07 cv
21.652 25.082 21.617 25.074 21.59 25.043 cv
21.559 25.02 21.539 24.977 21.531 24.918 cv
21.523 24.859 21.52 24.785 21.52 24.691 cv
21.52 24.629 21.52 24.57 21.527 24.523 cv
21.531 24.477 21.543 24.437 21.555 24.406 cv
21.563 24.375 21.578 24.348 21.602 24.324 cv
21.625 24.301 21.652 24.277 21.688 24.254 cv
23.438 23.137 li
23.449 23.125 23.469 23.113 23.496 23.105 cv
23.516 23.098 23.547 23.09 23.582 23.082 cv
23.613 23.074 23.652 23.07 23.703 23.07 cv
23.746 23.07 23.805 23.07 23.883 23.066 cv
23.973 23.07 24.051 23.074 24.117 23.078 cv
24.176 23.09 24.227 23.102 24.262 23.109 cv
24.293 23.125 24.316 23.141 24.332 23.16 cv
24.344 23.184 24.348 23.207 24.352 23.23 cv
24.352 29.891 li
25.719 29.891 li
25.746 29.891 25.777 29.902 25.809 29.918 cv
25.836 29.937 25.855 29.961 25.875 29.992 cv
25.891 30.027 25.906 30.07 25.914 30.121 cv
25.922 30.172 25.926 30.23 25.93 30.301 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
32.285 26.891 mo
32.281 27.473 32.234 28.004 32.148 28.484 cv
32.055 28.969 31.902 29.383 31.691 29.727 cv
31.473 30.07 31.195 30.34 30.855 30.527 cv
30.508 30.715 30.086 30.805 29.586 30.809 cv
29.109 30.805 28.707 30.723 28.383 30.555 cv
28.055 30.387 27.793 30.137 27.594 29.805 cv
27.391 29.477 27.246 29.07 27.168 28.586 cv
27.082 28.105 27.043 27.551 27.043 26.926 cv
27.043 26.348 27.09 25.82 27.184 25.336 cv
27.277 24.859 27.43 24.445 27.641 24.094 cv
27.852 23.75 28.129 23.48 28.473 23.289 cv
28.816 23.102 29.238 23.008 29.738 23.004 cv
30.215 23.008 30.617 23.094 30.945 23.262 cv
31.273 23.434 31.535 23.684 31.734 24.012 cv
31.934 24.344 32.074 24.75 32.16 25.23 cv
32.238 25.715 32.281 26.266 32.285 26.891 cv
cp
31.254 26.961 mo
31.25 26.586 31.238 26.246 31.215 25.941 cv
31.188 25.641 31.145 25.375 31.094 25.145 cv
31.039 24.918 30.973 24.723 30.887 24.551 cv
30.801 24.387 30.699 24.25 30.586 24.141 cv
30.465 24.039 30.332 23.961 30.184 23.906 cv
30.035 23.859 29.867 23.832 29.68 23.832 cv
29.348 23.832 29.078 23.91 28.871 24.066 cv
28.66 24.223 28.496 24.437 28.379 24.711 cv
28.262 24.984 28.18 25.305 28.137 25.672 cv
28.094 26.039 28.074 26.434 28.074 26.855 cv
28.074 27.426 28.102 27.91 28.16 28.301 cv
28.219 28.699 28.313 29.02 28.438 29.27 cv
28.563 29.52 28.723 29.703 28.926 29.816 cv
29.121 29.93 29.363 29.984 29.645 29.984 cv
29.863 29.984 30.055 29.949 30.223 29.879 cv
30.387 29.809 30.527 29.711 30.648 29.578 cv
30.766 29.449 30.867 29.289 30.945 29.105 cv
31.023 28.926 31.086 28.723 31.133 28.496 cv
31.18 28.273 31.211 28.035 31.227 27.773 cv
31.242 27.516 31.25 27.242 31.254 26.961 cv
cp
f
46.18 534.824 mo
46.176 534.898 46.172 534.961 46.164 535.012 cv
46.152 535.066 46.137 535.109 46.117 535.137 cv
46.094 535.172 46.07 535.195 46.047 535.203 cv
46.023 535.219 45.996 535.223 45.969 535.223 cv
42.008 535.223 li
41.98 535.223 41.957 535.219 41.934 535.203 cv
41.91 535.195 41.887 535.172 41.867 535.137 cv
41.844 535.109 41.828 535.066 41.816 535.012 cv
41.801 534.961 41.793 534.898 41.797 534.824 cv
41.793 534.754 41.801 534.695 41.816 534.645 cv
41.828 534.594 41.84 534.551 41.859 534.516 cv
41.875 534.484 41.898 534.461 41.922 534.441 cv
41.945 534.426 41.973 534.414 42.008 534.414 cv
43.594 534.414 li
43.594 528.648 li
42.125 529.52 li
42.051 529.566 41.992 529.59 41.949 529.594 cv
41.902 529.605 41.867 529.598 41.84 529.566 cv
41.809 529.543 41.789 529.5 41.781 529.441 cv
41.773 529.383 41.77 529.309 41.77 529.215 cv
41.77 529.152 41.77 529.094 41.777 529.047 cv
41.781 529 41.793 528.961 41.805 528.93 cv
41.813 528.898 41.828 528.871 41.852 528.848 cv
41.875 528.824 41.902 528.801 41.938 528.777 cv
43.688 527.66 li
43.699 527.648 43.719 527.637 43.746 527.629 cv
43.766 527.621 43.797 527.613 43.832 527.605 cv
43.863 527.598 43.902 527.594 43.953 527.594 cv
43.996 527.594 44.055 527.594 44.133 527.59 cv
44.223 527.594 44.301 527.598 44.367 527.602 cv
44.426 527.613 44.477 527.625 44.512 527.633 cv
44.543 527.648 44.566 527.664 44.582 527.684 cv
44.594 527.707 44.598 527.73 44.602 527.754 cv
44.602 534.414 li
45.969 534.414 li
45.996 534.414 46.027 534.426 46.059 534.441 cv
46.086 534.461 46.105 534.484 46.125 534.516 cv
46.141 534.551 46.156 534.594 46.164 534.645 cv
46.172 534.695 46.176 534.754 46.18 534.824 cv
cp
f
118.953 534.789 mo
118.953 534.859 118.945 534.922 118.938 534.977 cv
118.922 535.031 118.91 535.078 118.895 535.113 cv
118.879 535.152 118.855 535.18 118.824 535.195 cv
118.793 535.215 118.762 535.223 118.73 535.223 cv
114.539 535.223 li
114.484 535.223 114.438 535.219 114.398 535.203 cv
114.355 535.195 114.32 535.172 114.293 535.137 cv
114.262 535.109 114.238 535.062 114.227 535 cv
114.211 534.941 114.207 534.871 114.207 534.785 cv
114.207 534.711 114.207 534.641 114.215 534.578 cv
114.219 534.52 114.234 534.469 114.254 534.422 cv
114.273 534.379 114.297 534.336 114.328 534.289 cv
114.355 534.25 114.395 534.199 114.449 534.145 cv
115.965 532.586 li
116.313 532.227 116.59 531.906 116.805 531.621 cv
117.016 531.336 117.18 531.074 117.297 530.84 cv
117.406 530.605 117.484 530.395 117.523 530.203 cv
117.559 530.012 117.574 529.832 117.578 529.66 cv
117.574 529.496 117.547 529.336 117.492 529.184 cv
117.434 529.035 117.352 528.902 117.246 528.789 cv
117.137 528.68 117.004 528.59 116.844 528.52 cv
116.68 528.453 116.492 528.422 116.289 528.418 cv
116.039 528.422 115.82 528.453 115.625 528.52 cv
115.43 528.59 115.258 528.664 115.109 528.738 cv
114.961 528.82 114.836 528.891 114.742 528.953 cv
114.641 529.02 114.57 529.055 114.523 529.051 cv
114.492 529.055 114.465 529.047 114.445 529.027 cv
114.422 529.016 114.402 528.988 114.391 528.953 cv
114.375 528.922 114.367 528.875 114.359 528.812 cv
114.352 528.754 114.348 528.684 114.348 528.602 cv
114.348 528.543 114.348 528.492 114.352 528.449 cv
114.355 528.41 114.363 528.375 114.375 528.34 cv
114.383 528.312 114.395 528.281 114.414 528.25 cv
114.426 528.223 114.457 528.191 114.508 528.148 cv
114.551 528.109 114.633 528.051 114.75 527.98 cv
114.863 527.91 115.008 527.844 115.184 527.773 cv
115.355 527.707 115.547 527.648 115.758 527.598 cv
115.965 527.555 116.184 527.531 116.414 527.527 cv
116.781 527.531 117.102 527.582 117.379 527.684 cv
117.652 527.789 117.883 527.93 118.063 528.109 cv
118.242 528.289 118.379 528.5 118.473 528.738 cv
118.563 528.977 118.605 529.23 118.609 529.496 cv
118.605 529.746 118.586 529.988 118.543 530.223 cv
118.496 530.465 118.402 530.723 118.27 531 cv
118.129 531.281 117.93 531.594 117.668 531.934 cv
117.406 532.277 117.059 532.668 116.625 533.113 cv
115.426 534.367 li
118.727 534.367 li
118.754 534.367 118.785 534.379 118.816 534.395 cv
118.844 534.414 118.867 534.437 118.891 534.473 cv
118.906 534.512 118.922 534.559 118.938 534.605 cv
118.945 534.66 118.953 534.719 118.953 534.789 cv
cp
f
192.074 533.066 mo
192.07 533.199 192.051 533.301 192.016 533.371 cv
191.973 533.445 191.918 533.484 191.855 533.48 cv
190.996 533.48 li
190.996 535.074 li
190.992 535.109 190.984 535.137 190.973 535.156 cv
190.953 535.18 190.926 535.195 190.887 535.211 cv
190.848 535.227 190.793 535.238 190.73 535.246 cv
190.664 535.254 190.582 535.258 190.484 535.258 cv
190.383 535.258 190.305 535.254 190.242 535.246 cv
190.18 535.238 190.129 535.227 190.09 535.211 cv
190.051 535.195 190.023 535.18 190.008 535.156 cv
189.992 535.137 189.984 535.109 189.988 535.074 cv
189.988 533.48 li
186.887 533.48 li
186.84 533.484 186.805 533.477 186.773 533.465 cv
186.742 533.457 186.711 533.437 186.688 533.402 cv
186.656 533.375 186.641 533.328 186.633 533.266 cv
186.625 533.207 186.621 533.133 186.621 533.035 cv
186.621 532.965 186.621 532.898 186.625 532.84 cv
186.629 532.781 186.637 532.727 186.648 532.68 cv
186.66 532.633 186.676 532.586 186.695 532.539 cv
186.715 532.492 186.738 532.445 186.766 532.395 cv
189.469 527.785 li
189.488 527.758 189.516 527.73 189.555 527.703 cv
189.59 527.684 189.641 527.664 189.703 527.645 cv
189.762 527.633 189.832 527.621 189.922 527.613 cv
190.008 527.609 190.113 527.605 190.234 527.605 cv
190.363 527.605 190.477 527.613 190.574 527.621 cv
190.672 527.637 190.75 527.648 190.813 527.66 cv
190.867 527.68 190.914 527.699 190.949 527.723 cv
190.977 527.746 190.992 527.777 190.996 527.809 cv
190.996 532.652 li
191.855 532.652 li
191.918 532.656 191.973 532.691 192.012 532.754 cv
192.051 532.824 192.07 532.926 192.074 533.066 cv
cp
189.988 528.488 mo
189.98 528.488 li
187.543 532.652 li
189.988 532.652 li
cp
f
264.738 532.77 mo
264.734 533.102 264.684 533.422 264.586 533.734 cv
264.48 534.047 264.324 534.32 264.117 534.555 cv
263.902 534.789 263.637 534.98 263.313 535.121 cv
262.984 535.262 262.602 535.328 262.164 535.332 cv
261.848 535.328 261.566 535.293 261.328 535.215 cv
261.082 535.141 260.871 535.027 260.695 534.883 cv
260.512 534.742 260.363 534.566 260.246 534.352 cv
260.125 534.145 260.027 533.902 259.957 533.629 cv
259.879 533.359 259.828 533.066 259.801 532.742 cv
259.766 532.426 259.75 532.082 259.754 531.715 cv
259.75 531.391 259.77 531.062 259.809 530.73 cv
259.844 530.398 259.906 530.078 259.996 529.77 cv
260.082 529.461 260.203 529.172 260.359 528.898 cv
260.516 528.629 260.707 528.391 260.941 528.187 cv
261.172 527.988 261.453 527.828 261.777 527.711 cv
262.098 527.594 262.473 527.535 262.91 527.535 cv
263.051 527.535 263.199 527.547 263.348 527.562 cv
263.496 527.586 263.633 527.609 263.758 527.633 cv
263.883 527.664 263.988 527.695 264.074 527.73 cv
264.16 527.766 264.215 527.793 264.242 527.816 cv
264.27 527.84 264.289 527.863 264.305 527.887 cv
264.313 527.91 264.324 527.937 264.336 527.969 cv
264.34 528 264.348 528.035 264.355 528.066 cv
264.359 528.105 264.359 528.148 264.363 528.203 cv
264.359 528.273 264.359 528.336 264.359 528.387 cv
264.355 528.437 264.348 528.477 264.336 528.508 cv
264.32 528.539 264.301 528.562 264.281 528.578 cv
264.258 528.594 264.23 528.602 264.199 528.602 cv
264.152 528.602 264.094 528.59 264.02 528.562 cv
263.945 528.535 263.855 528.504 263.75 528.469 cv
263.645 528.437 263.516 528.406 263.367 528.379 cv
263.215 528.355 263.043 528.344 262.844 528.34 cv
262.48 528.344 262.168 528.418 261.906 528.562 cv
261.641 528.715 261.426 528.914 261.262 529.16 cv
261.098 529.414 260.973 529.703 260.895 530.031 cv
260.813 530.359 260.77 530.703 260.758 531.062 cv
260.859 531.004 260.973 530.945 261.102 530.887 cv
261.227 530.832 261.363 530.781 261.516 530.73 cv
261.664 530.687 261.824 530.648 261.992 530.617 cv
262.16 530.586 262.34 530.57 262.535 530.57 cv
262.941 530.57 263.289 530.629 263.57 530.738 cv
263.852 530.852 264.078 531.004 264.25 531.199 cv
264.422 531.398 264.547 531.633 264.625 531.898 cv
264.699 532.172 264.734 532.461 264.738 532.77 cv
cp
263.715 532.863 mo
263.711 532.637 263.688 532.43 263.648 532.242 cv
263.602 532.059 263.527 531.902 263.422 531.773 cv
263.316 531.645 263.176 531.543 263 531.473 cv
262.824 531.402 262.609 531.367 262.352 531.367 cv
262.207 531.367 262.063 531.383 261.918 531.406 cv
261.77 531.434 261.629 531.469 261.496 531.512 cv
261.363 531.559 261.234 531.609 261.109 531.672 cv
260.984 531.734 260.871 531.801 260.777 531.863 cv
260.773 532.371 260.805 532.793 260.871 533.133 cv
260.934 533.473 261.027 533.746 261.152 533.949 cv
261.273 534.156 261.43 534.301 261.613 534.387 cv
261.793 534.477 262.008 534.52 262.258 534.52 cv
262.508 534.52 262.723 534.473 262.906 534.379 cv
263.09 534.285 263.242 534.16 263.363 534 cv
263.484 533.844 263.574 533.668 263.629 533.469 cv
263.684 533.273 263.711 533.07 263.715 532.863 cv
cp
f
337.512 533.277 mo
337.512 533.605 337.453 533.898 337.336 534.152 cv
337.219 534.41 337.047 534.625 336.828 534.801 cv
336.605 534.98 336.336 535.113 336.012 535.199 cv
335.684 535.285 335.313 535.328 334.898 535.332 cv
334.508 535.328 334.156 535.289 333.848 535.211 cv
333.539 535.133 333.277 535.012 333.063 534.848 cv
332.848 534.687 332.684 534.492 332.57 534.254 cv
332.457 534.023 332.402 533.754 332.402 533.453 cv
332.402 533.219 332.441 533 332.52 532.797 cv
332.598 532.598 332.707 532.414 332.855 532.246 cv
333 532.082 333.184 531.926 333.398 531.777 cv
333.609 531.629 333.852 531.488 334.125 531.355 cv
333.891 531.238 333.684 531.113 333.504 530.973 cv
333.324 530.84 333.172 530.691 333.047 530.531 cv
332.922 530.375 332.824 530.207 332.762 530.023 cv
332.691 529.848 332.66 529.652 332.664 529.441 cv
332.66 529.18 332.707 528.93 332.809 528.695 cv
332.902 528.461 333.047 528.258 333.242 528.086 cv
333.43 527.914 333.676 527.781 333.98 527.68 cv
334.277 527.582 334.629 527.531 335.027 527.527 cv
335.41 527.531 335.738 527.578 336.02 527.668 cv
336.293 527.762 336.523 527.887 336.711 528.043 cv
336.891 528.203 337.027 528.387 337.113 528.602 cv
337.199 528.82 337.242 529.051 337.242 529.293 cv
337.242 529.492 337.207 529.684 337.145 529.867 cv
337.074 530.055 336.98 530.23 336.859 530.391 cv
336.73 530.559 336.578 530.711 336.398 530.852 cv
336.219 530.992 336.012 531.125 335.777 531.25 cv
336.055 531.391 336.301 531.531 336.52 531.672 cv
336.734 531.816 336.914 531.973 337.063 532.137 cv
337.203 532.305 337.316 532.48 337.395 532.664 cv
337.473 532.852 337.512 533.055 337.512 533.277 cv
cp
336.246 529.387 mo
336.246 529.223 336.215 529.074 336.16 528.941 cv
336.102 528.809 336.02 528.695 335.914 528.602 cv
335.801 528.508 335.664 528.437 335.504 528.391 cv
335.34 528.344 335.156 528.32 334.953 528.316 cv
334.527 528.32 334.207 528.414 333.992 528.602 cv
333.773 528.793 333.668 529.055 333.668 529.387 cv
333.668 529.539 333.691 529.684 333.746 529.812 cv
333.797 529.945 333.879 530.066 333.992 530.184 cv
334.102 530.301 334.242 530.418 334.414 530.527 cv
334.582 530.641 334.785 530.754 335.023 530.875 cv
335.414 530.672 335.719 530.449 335.93 530.203 cv
336.141 529.957 336.246 529.684 336.246 529.387 cv
cp
336.492 533.383 mo
336.492 533.203 336.457 533.043 336.391 532.895 cv
336.324 532.754 336.223 532.617 336.09 532.484 cv
335.953 532.359 335.785 532.234 335.586 532.113 cv
335.383 531.996 335.152 531.871 334.887 531.742 cv
334.637 531.867 334.418 531.988 334.238 532.105 cv
334.051 532.227 333.898 532.352 333.781 532.48 cv
333.656 532.613 333.566 532.75 333.512 532.891 cv
333.449 533.031 333.422 533.187 333.422 533.359 cv
333.422 533.738 333.551 534.031 333.813 534.238 cv
334.07 534.449 334.457 534.555 334.977 534.551 cv
335.473 534.555 335.852 534.449 336.109 534.238 cv
336.363 534.027 336.492 533.742 336.492 533.383 cv
cp
f
407.121 534.824 mo
407.117 534.898 407.113 534.961 407.105 535.012 cv
407.094 535.066 407.078 535.109 407.059 535.137 cv
407.035 535.172 407.012 535.195 406.988 535.203 cv
406.965 535.219 406.938 535.223 406.91 535.223 cv
402.949 535.223 li
402.922 535.223 402.898 535.219 402.875 535.203 cv
402.852 535.195 402.828 535.172 402.809 535.137 cv
402.785 535.109 402.77 535.066 402.758 535.012 cv
402.742 534.961 402.734 534.898 402.738 534.824 cv
402.734 534.754 402.742 534.695 402.758 534.645 cv
402.77 534.594 402.781 534.551 402.801 534.516 cv
402.816 534.484 402.84 534.461 402.863 534.441 cv
402.887 534.426 402.914 534.414 402.949 534.414 cv
404.535 534.414 li
404.535 528.648 li
403.066 529.52 li
402.992 529.566 402.934 529.59 402.891 529.594 cv
402.844 529.605 402.809 529.598 402.781 529.566 cv
402.75 529.543 402.73 529.5 402.723 529.441 cv
402.715 529.383 402.711 529.309 402.711 529.215 cv
402.711 529.152 402.711 529.094 402.719 529.047 cv
402.723 529 402.734 528.961 402.746 528.93 cv
402.754 528.898 402.77 528.871 402.793 528.848 cv
402.816 528.824 402.844 528.801 402.879 528.777 cv
404.629 527.66 li
404.641 527.648 404.66 527.637 404.688 527.629 cv
404.707 527.621 404.738 527.613 404.773 527.605 cv
404.805 527.598 404.844 527.594 404.895 527.594 cv
404.938 527.594 404.996 527.594 405.074 527.59 cv
405.164 527.594 405.242 527.598 405.309 527.602 cv
405.367 527.613 405.418 527.625 405.453 527.633 cv
405.484 527.648 405.508 527.664 405.523 527.684 cv
405.535 527.707 405.539 527.73 405.543 527.754 cv
405.543 534.414 li
406.91 534.414 li
406.938 534.414 406.969 534.426 407 534.441 cv
407.027 534.461 407.047 534.484 407.066 534.516 cv
407.082 534.551 407.098 534.594 407.105 534.645 cv
407.113 534.695 407.117 534.754 407.121 534.824 cv
cp
f
413.473 531.414 mo
413.469 531.996 413.422 532.527 413.336 533.008 cv
413.242 533.492 413.09 533.906 412.879 534.25 cv
412.66 534.594 412.383 534.863 412.043 535.051 cv
411.695 535.238 411.273 535.328 410.773 535.332 cv
410.297 535.328 409.895 535.246 409.57 535.078 cv
409.242 534.91 408.98 534.66 408.781 534.328 cv
408.578 534 408.434 533.594 408.355 533.109 cv
408.27 532.629 408.23 532.074 408.23 531.449 cv
408.23 530.871 408.277 530.344 408.371 529.859 cv
408.465 529.383 408.617 528.969 408.828 528.617 cv
409.039 528.273 409.316 528.004 409.66 527.812 cv
410.004 527.625 410.426 527.531 410.926 527.527 cv
411.402 527.531 411.805 527.617 412.133 527.785 cv
412.461 527.957 412.723 528.207 412.922 528.535 cv
413.121 528.867 413.262 529.273 413.348 529.754 cv
413.426 530.238 413.469 530.789 413.473 531.414 cv
cp
412.441 531.484 mo
412.438 531.109 412.426 530.77 412.402 530.465 cv
412.375 530.164 412.332 529.898 412.281 529.668 cv
412.227 529.441 412.16 529.246 412.074 529.074 cv
411.988 528.91 411.887 528.773 411.773 528.664 cv
411.652 528.562 411.52 528.484 411.371 528.43 cv
411.223 528.383 411.055 528.355 410.867 528.355 cv
410.535 528.355 410.266 528.434 410.059 528.59 cv
409.848 528.746 409.684 528.961 409.566 529.234 cv
409.449 529.508 409.367 529.828 409.324 530.195 cv
409.281 530.562 409.262 530.957 409.262 531.379 cv
409.262 531.949 409.289 532.434 409.348 532.824 cv
409.406 533.223 409.5 533.543 409.625 533.793 cv
409.75 534.043 409.91 534.227 410.113 534.34 cv
410.309 534.453 410.551 534.508 410.832 534.508 cv
411.051 534.508 411.242 534.473 411.41 534.402 cv
411.574 534.332 411.715 534.234 411.836 534.102 cv
411.953 533.973 412.055 533.812 412.133 533.629 cv
412.211 533.449 412.273 533.246 412.32 533.02 cv
412.367 532.797 412.398 532.559 412.414 532.297 cv
412.43 532.039 412.438 531.766 412.441 531.484 cv
cp
f
479.91 534.824 mo
479.906 534.898 479.902 534.961 479.895 535.012 cv
479.883 535.066 479.867 535.109 479.848 535.137 cv
479.824 535.172 479.801 535.195 479.777 535.203 cv
479.754 535.219 479.727 535.223 479.699 535.223 cv
475.738 535.223 li
475.711 535.223 475.688 535.219 475.664 535.203 cv
475.641 535.195 475.617 535.172 475.598 535.137 cv
475.574 535.109 475.559 535.066 475.547 535.012 cv
475.531 534.961 475.523 534.898 475.527 534.824 cv
475.523 534.754 475.531 534.695 475.547 534.645 cv
475.559 534.594 475.57 534.551 475.59 534.516 cv
475.605 534.484 475.629 534.461 475.652 534.441 cv
475.676 534.426 475.703 534.414 475.738 534.414 cv
477.324 534.414 li
477.324 528.648 li
475.855 529.52 li
475.781 529.566 475.723 529.59 475.68 529.594 cv
475.633 529.605 475.598 529.598 475.57 529.566 cv
475.539 529.543 475.52 529.5 475.512 529.441 cv
475.504 529.383 475.5 529.309 475.5 529.215 cv
475.5 529.152 475.5 529.094 475.508 529.047 cv
475.512 529 475.523 528.961 475.535 528.93 cv
475.543 528.898 475.559 528.871 475.582 528.848 cv
475.605 528.824 475.633 528.801 475.668 528.777 cv
477.418 527.66 li
477.43 527.648 477.449 527.637 477.477 527.629 cv
477.496 527.621 477.527 527.613 477.563 527.605 cv
477.594 527.598 477.633 527.594 477.684 527.594 cv
477.727 527.594 477.785 527.594 477.863 527.59 cv
477.953 527.594 478.031 527.598 478.098 527.602 cv
478.156 527.613 478.207 527.625 478.242 527.633 cv
478.273 527.648 478.297 527.664 478.313 527.684 cv
478.324 527.707 478.328 527.73 478.332 527.754 cv
478.332 534.414 li
479.699 534.414 li
479.727 534.414 479.758 534.426 479.789 534.441 cv
479.816 534.461 479.836 534.484 479.855 534.516 cv
479.871 534.551 479.887 534.594 479.895 534.645 cv
479.902 534.695 479.906 534.754 479.91 534.824 cv
cp
f
486.016 534.789 mo
486.016 534.859 486.008 534.922 486 534.977 cv
485.984 535.031 485.973 535.078 485.957 535.113 cv
485.941 535.152 485.918 535.18 485.887 535.195 cv
485.855 535.215 485.824 535.223 485.793 535.223 cv
481.602 535.223 li
481.547 535.223 481.5 535.219 481.461 535.203 cv
481.418 535.195 481.383 535.172 481.355 535.137 cv
481.324 535.109 481.301 535.062 481.289 535 cv
481.273 534.941 481.27 534.871 481.27 534.785 cv
481.27 534.711 481.27 534.641 481.277 534.578 cv
481.281 534.52 481.297 534.469 481.316 534.422 cv
481.336 534.379 481.359 534.336 481.391 534.289 cv
481.418 534.25 481.457 534.199 481.512 534.145 cv
483.027 532.586 li
483.375 532.227 483.652 531.906 483.867 531.621 cv
484.078 531.336 484.242 531.074 484.359 530.84 cv
484.469 530.605 484.547 530.395 484.586 530.203 cv
484.621 530.012 484.637 529.832 484.641 529.66 cv
484.637 529.496 484.609 529.336 484.555 529.184 cv
484.496 529.035 484.414 528.902 484.309 528.789 cv
484.199 528.68 484.066 528.59 483.906 528.52 cv
483.742 528.453 483.555 528.422 483.352 528.418 cv
483.102 528.422 482.883 528.453 482.688 528.52 cv
482.492 528.59 482.32 528.664 482.172 528.738 cv
482.023 528.82 481.898 528.891 481.805 528.953 cv
481.703 529.02 481.633 529.055 481.586 529.051 cv
481.555 529.055 481.527 529.047 481.508 529.027 cv
481.484 529.016 481.465 528.988 481.453 528.953 cv
481.438 528.922 481.43 528.875 481.422 528.812 cv
481.414 528.754 481.41 528.684 481.41 528.602 cv
481.41 528.543 481.41 528.492 481.414 528.449 cv
481.418 528.41 481.426 528.375 481.438 528.34 cv
481.445 528.312 481.457 528.281 481.477 528.25 cv
481.488 528.223 481.52 528.191 481.57 528.148 cv
481.613 528.109 481.695 528.051 481.813 527.98 cv
481.926 527.91 482.07 527.844 482.246 527.773 cv
482.418 527.707 482.609 527.648 482.82 527.598 cv
483.027 527.555 483.246 527.531 483.477 527.527 cv
483.844 527.531 484.164 527.582 484.441 527.684 cv
484.715 527.789 484.945 527.93 485.125 528.109 cv
485.305 528.289 485.441 528.5 485.535 528.738 cv
485.625 528.977 485.668 529.23 485.672 529.496 cv
485.668 529.746 485.648 529.988 485.605 530.223 cv
485.559 530.465 485.465 530.723 485.332 531 cv
485.191 531.281 484.992 531.594 484.73 531.934 cv
484.469 532.277 484.121 532.668 483.688 533.113 cv
482.488 534.367 li
485.789 534.367 li
485.816 534.367 485.848 534.379 485.879 534.395 cv
485.906 534.414 485.93 534.437 485.953 534.473 cv
485.969 534.512 485.984 534.559 486 534.605 cv
486.008 534.66 486.016 534.719 486.016 534.789 cv
cp
f
552.699 534.824 mo
552.695 534.898 552.691 534.961 552.684 535.012 cv
552.672 535.066 552.656 535.109 552.637 535.137 cv
552.613 535.172 552.59 535.195 552.566 535.203 cv
552.543 535.219 552.516 535.223 552.488 535.223 cv
548.527 535.223 li
548.5 535.223 548.477 535.219 548.453 535.203 cv
548.43 535.195 548.406 535.172 548.387 535.137 cv
548.363 535.109 548.348 535.066 548.336 535.012 cv
548.32 534.961 548.313 534.898 548.316 534.824 cv
548.313 534.754 548.32 534.695 548.336 534.645 cv
548.348 534.594 548.359 534.551 548.379 534.516 cv
548.395 534.484 548.418 534.461 548.441 534.441 cv
548.465 534.426 548.492 534.414 548.527 534.414 cv
550.113 534.414 li
550.113 528.648 li
548.645 529.52 li
548.57 529.566 548.512 529.59 548.469 529.594 cv
548.422 529.605 548.387 529.598 548.359 529.566 cv
548.328 529.543 548.309 529.5 548.301 529.441 cv
548.293 529.383 548.289 529.309 548.289 529.215 cv
548.289 529.152 548.289 529.094 548.297 529.047 cv
548.301 529 548.313 528.961 548.324 528.93 cv
548.332 528.898 548.348 528.871 548.371 528.848 cv
548.395 528.824 548.422 528.801 548.457 528.777 cv
550.207 527.66 li
550.219 527.648 550.238 527.637 550.266 527.629 cv
550.285 527.621 550.316 527.613 550.352 527.605 cv
550.383 527.598 550.422 527.594 550.473 527.594 cv
550.516 527.594 550.574 527.594 550.652 527.59 cv
550.742 527.594 550.82 527.598 550.887 527.602 cv
550.945 527.613 550.996 527.625 551.031 527.633 cv
551.063 527.648 551.086 527.664 551.102 527.684 cv
551.113 527.707 551.117 527.73 551.121 527.754 cv
551.121 534.414 li
552.488 534.414 li
552.516 534.414 552.547 534.426 552.578 534.441 cv
552.605 534.461 552.625 534.484 552.645 534.516 cv
552.66 534.551 552.676 534.594 552.684 534.645 cv
552.691 534.695 552.695 534.754 552.699 534.824 cv
cp
f
559.125 533.066 mo
559.121 533.199 559.102 533.301 559.066 533.371 cv
559.023 533.445 558.969 533.484 558.906 533.48 cv
558.047 533.48 li
558.047 535.074 li
558.043 535.109 558.035 535.137 558.023 535.156 cv
558.004 535.18 557.977 535.195 557.938 535.211 cv
557.898 535.227 557.844 535.238 557.781 535.246 cv
557.715 535.254 557.633 535.258 557.535 535.258 cv
557.434 535.258 557.355 535.254 557.293 535.246 cv
557.23 535.238 557.18 535.227 557.141 535.211 cv
557.102 535.195 557.074 535.18 557.059 535.156 cv
557.043 535.137 557.035 535.109 557.039 535.074 cv
557.039 533.48 li
553.938 533.48 li
553.891 533.484 553.855 533.477 553.824 533.465 cv
553.793 533.457 553.762 533.437 553.738 533.402 cv
553.707 533.375 553.691 533.328 553.684 533.266 cv
553.676 533.207 553.672 533.133 553.672 533.035 cv
553.672 532.965 553.672 532.898 553.676 532.84 cv
553.68 532.781 553.688 532.727 553.699 532.68 cv
553.711 532.633 553.727 532.586 553.746 532.539 cv
553.766 532.492 553.789 532.445 553.816 532.395 cv
556.52 527.785 li
556.539 527.758 556.566 527.73 556.605 527.703 cv
556.641 527.684 556.691 527.664 556.754 527.645 cv
556.813 527.633 556.883 527.621 556.973 527.613 cv
557.059 527.609 557.164 527.605 557.285 527.605 cv
557.414 527.605 557.527 527.613 557.625 527.621 cv
557.723 527.637 557.801 527.648 557.863 527.66 cv
557.918 527.68 557.965 527.699 558 527.723 cv
558.027 527.746 558.043 527.777 558.047 527.809 cv
558.047 532.652 li
558.906 532.652 li
558.969 532.656 559.023 532.691 559.063 532.754 cv
559.102 532.824 559.121 532.926 559.125 533.066 cv
cp
557.039 528.488 mo
557.031 528.488 li
554.594 532.652 li
557.039 532.652 li
cp
f
625.488 534.824 mo
625.484 534.898 625.48 534.961 625.473 535.012 cv
625.461 535.066 625.445 535.109 625.426 535.137 cv
625.402 535.172 625.379 535.195 625.355 535.203 cv
625.332 535.219 625.305 535.223 625.277 535.223 cv
621.316 535.223 li
621.289 535.223 621.266 535.219 621.242 535.203 cv
621.219 535.195 621.195 535.172 621.176 535.137 cv
621.152 535.109 621.137 535.066 621.125 535.012 cv
621.109 534.961 621.102 534.898 621.105 534.824 cv
621.102 534.754 621.109 534.695 621.125 534.645 cv
621.137 534.594 621.148 534.551 621.168 534.516 cv
621.184 534.484 621.207 534.461 621.23 534.441 cv
621.254 534.426 621.281 534.414 621.316 534.414 cv
622.902 534.414 li
622.902 528.648 li
621.434 529.52 li
621.359 529.566 621.301 529.59 621.258 529.594 cv
621.211 529.605 621.176 529.598 621.148 529.566 cv
621.117 529.543 621.098 529.5 621.09 529.441 cv
621.082 529.383 621.078 529.309 621.078 529.215 cv
621.078 529.152 621.078 529.094 621.086 529.047 cv
621.09 529 621.102 528.961 621.113 528.93 cv
621.121 528.898 621.137 528.871 621.16 528.848 cv
621.184 528.824 621.211 528.801 621.246 528.777 cv
622.996 527.66 li
623.008 527.648 623.027 527.637 623.055 527.629 cv
623.074 527.621 623.105 527.613 623.141 527.605 cv
623.172 527.598 623.211 527.594 623.262 527.594 cv
623.305 527.594 623.363 527.594 623.441 527.59 cv
623.531 527.594 623.609 527.598 623.676 527.602 cv
623.734 527.613 623.785 527.625 623.82 527.633 cv
623.852 527.648 623.875 527.664 623.891 527.684 cv
623.902 527.707 623.906 527.73 623.91 527.754 cv
623.91 534.414 li
625.277 534.414 li
625.305 534.414 625.336 534.426 625.367 534.441 cv
625.395 534.461 625.414 534.484 625.434 534.516 cv
625.449 534.551 625.465 534.594 625.473 534.645 cv
625.48 534.695 625.484 534.754 625.488 534.824 cv
cp
f
631.789 532.77 mo
631.785 533.102 631.734 533.422 631.637 533.734 cv
631.531 534.047 631.375 534.32 631.168 534.555 cv
630.953 534.789 630.688 534.98 630.363 535.121 cv
630.035 535.262 629.652 535.328 629.215 535.332 cv
628.898 535.328 628.617 535.293 628.379 535.215 cv
628.133 535.141 627.922 535.027 627.746 534.883 cv
627.563 534.742 627.414 534.566 627.297 534.352 cv
627.176 534.145 627.078 533.902 627.008 533.629 cv
626.93 533.359 626.879 533.066 626.852 532.742 cv
626.816 532.426 626.801 532.082 626.805 531.715 cv
626.801 531.391 626.82 531.062 626.859 530.73 cv
626.895 530.398 626.957 530.078 627.047 529.77 cv
627.133 529.461 627.254 529.172 627.41 528.898 cv
627.566 528.629 627.758 528.391 627.992 528.187 cv
628.223 527.988 628.504 527.828 628.828 527.711 cv
629.148 527.594 629.523 527.535 629.961 527.535 cv
630.102 527.535 630.25 527.547 630.398 527.562 cv
630.547 527.586 630.684 527.609 630.809 527.633 cv
630.934 527.664 631.039 527.695 631.125 527.73 cv
631.211 527.766 631.266 527.793 631.293 527.816 cv
631.32 527.84 631.34 527.863 631.355 527.887 cv
631.363 527.91 631.375 527.937 631.387 527.969 cv
631.391 528 631.398 528.035 631.406 528.066 cv
631.41 528.105 631.41 528.148 631.414 528.203 cv
631.41 528.273 631.41 528.336 631.41 528.387 cv
631.406 528.437 631.398 528.477 631.387 528.508 cv
631.371 528.539 631.352 528.562 631.332 528.578 cv
631.309 528.594 631.281 528.602 631.25 528.602 cv
631.203 528.602 631.145 528.59 631.07 528.562 cv
630.996 528.535 630.906 528.504 630.801 528.469 cv
630.695 528.437 630.566 528.406 630.418 528.379 cv
630.266 528.355 630.094 528.344 629.895 528.34 cv
629.531 528.344 629.219 528.418 628.957 528.562 cv
628.691 528.715 628.477 528.914 628.313 529.16 cv
628.148 529.414 628.023 529.703 627.945 530.031 cv
627.863 530.359 627.82 530.703 627.809 531.062 cv
627.91 531.004 628.023 530.945 628.152 530.887 cv
628.277 530.832 628.414 530.781 628.566 530.73 cv
628.715 530.687 628.875 530.648 629.043 530.617 cv
629.211 530.586 629.391 530.57 629.586 530.57 cv
629.992 530.57 630.34 530.629 630.621 530.738 cv
630.902 530.852 631.129 531.004 631.301 531.199 cv
631.473 531.398 631.598 531.633 631.676 531.898 cv
631.75 532.172 631.785 532.461 631.789 532.77 cv
cp
630.766 532.863 mo
630.762 532.637 630.738 532.43 630.699 532.242 cv
630.652 532.059 630.578 531.902 630.473 531.773 cv
630.367 531.645 630.227 531.543 630.051 531.473 cv
629.875 531.402 629.66 531.367 629.402 531.367 cv
629.258 531.367 629.113 531.383 628.969 531.406 cv
628.82 531.434 628.68 531.469 628.547 531.512 cv
628.414 531.559 628.285 531.609 628.16 531.672 cv
628.035 531.734 627.922 531.801 627.828 531.863 cv
627.824 532.371 627.855 532.793 627.922 533.133 cv
627.984 533.473 628.078 533.746 628.203 533.949 cv
628.324 534.156 628.48 534.301 628.664 534.387 cv
628.844 534.477 629.059 534.52 629.309 534.52 cv
629.559 534.52 629.773 534.473 629.957 534.379 cv
630.141 534.285 630.293 534.16 630.414 534 cv
630.535 533.844 630.625 533.668 630.68 533.469 cv
630.734 533.273 630.762 533.07 630.766 532.863 cv
cp
f
7.633 295.77 mo
7.734 295.773 7.82 295.777 7.891 295.785 cv
7.965 295.797 8.023 295.812 8.066 295.836 cv
8.113 295.859 8.145 295.891 8.164 295.922 cv
8.188 295.961 8.199 295.996 8.195 296.035 cv
8.195 298.871 li
16.938 298.871 li
16.98 298.871 17.016 298.883 17.047 298.902 cv
17.078 298.926 17.105 298.961 17.121 299.012 cv
17.141 299.066 17.152 299.137 17.168 299.219 cv
17.18 299.309 17.188 299.414 17.188 299.539 cv
17.188 299.664 17.18 299.773 17.168 299.859 cv
17.152 299.953 17.141 300.023 17.121 300.07 cv
17.105 300.125 17.078 300.16 17.047 300.18 cv
17.016 300.203 16.98 300.215 16.938 300.211 cv
8.195 300.211 li
8.195 303.047 li
8.199 303.094 8.188 303.129 8.164 303.16 cv
8.145 303.195 8.113 303.223 8.066 303.242 cv
8.023 303.266 7.965 303.285 7.891 303.293 cv
7.82 303.309 7.734 303.312 7.633 303.312 cv
7.535 303.312 7.449 303.309 7.371 303.293 cv
7.301 303.285 7.238 303.266 7.188 303.242 cv
7.145 303.223 7.109 303.195 7.086 303.16 cv
7.066 303.129 7.059 303.094 7.055 303.047 cv
7.055 296.035 li
7.059 295.996 7.066 295.961 7.086 295.922 cv
7.109 295.891 7.145 295.859 7.188 295.836 cv
7.238 295.812 7.301 295.797 7.371 295.785 cv
7.449 295.777 7.535 295.773 7.633 295.77 cv
cp
f
16.945 293.18 mo
16.992 293.184 17.027 293.195 17.051 293.211 cv
17.082 293.234 17.105 293.266 17.125 293.312 cv
17.145 293.359 17.156 293.426 17.172 293.504 cv
17.18 293.59 17.188 293.695 17.188 293.824 cv
17.188 293.953 17.18 294.059 17.172 294.137 cv
17.156 294.223 17.145 294.289 17.125 294.336 cv
17.105 294.391 17.082 294.422 17.051 294.437 cv
17.027 294.457 16.992 294.469 16.945 294.465 cv
9.934 294.465 li
9.898 294.469 9.867 294.457 9.832 294.437 cv
9.805 294.422 9.777 294.391 9.754 294.336 cv
9.734 294.289 9.719 294.223 9.707 294.137 cv
9.699 294.059 9.695 293.953 9.691 293.824 cv
9.695 293.695 9.699 293.59 9.707 293.504 cv
9.719 293.426 9.734 293.359 9.754 293.312 cv
9.777 293.266 9.805 293.234 9.832 293.211 cv
9.867 293.195 9.898 293.184 9.934 293.18 cv
cp
7.563 293.031 mo
7.867 293.031 8.074 293.09 8.18 293.203 cv
8.293 293.316 8.348 293.527 8.344 293.832 cv
8.348 294.137 8.293 294.344 8.184 294.453 cv
8.078 294.57 7.875 294.625 7.578 294.621 cv
7.277 294.625 7.074 294.566 6.965 294.449 cv
6.859 294.336 6.805 294.125 6.801 293.816 cv
6.805 293.516 6.859 293.312 6.961 293.199 cv
7.07 293.09 7.27 293.031 7.563 293.031 cv
cp
f
16.945 280.324 mo
16.992 280.328 17.027 280.336 17.051 280.355 cv
17.082 280.379 17.105 280.414 17.125 280.457 cv
17.145 280.508 17.156 280.574 17.172 280.652 cv
17.18 280.738 17.188 280.84 17.188 280.965 cv
17.188 281.098 17.18 281.207 17.172 281.285 cv
17.156 281.371 17.145 281.437 17.125 281.484 cv
17.105 281.539 17.082 281.574 17.051 281.59 cv
17.027 281.613 16.992 281.621 16.945 281.621 cv
12.684 281.621 li
12.391 281.621 12.121 281.648 11.875 281.699 cv
11.633 281.754 11.422 281.836 11.242 281.949 cv
11.066 282.062 10.93 282.207 10.836 282.383 cv
10.742 282.562 10.695 282.773 10.695 283.008 cv
10.695 283.305 10.813 283.602 11.039 283.898 cv
11.273 284.203 11.605 284.531 12.043 284.887 cv
16.945 284.887 li
16.992 284.891 17.027 284.902 17.051 284.918 cv
17.082 284.941 17.105 284.973 17.125 285.02 cv
17.145 285.07 17.156 285.137 17.172 285.219 cv
17.18 285.305 17.188 285.41 17.188 285.531 cv
17.188 285.652 17.18 285.754 17.172 285.84 cv
17.156 285.926 17.145 285.996 17.125 286.043 cv
17.105 286.098 17.082 286.129 17.051 286.145 cv
17.027 286.164 16.992 286.176 16.945 286.172 cv
12.684 286.172 li
12.391 286.176 12.121 286.203 11.875 286.258 cv
11.633 286.316 11.422 286.402 11.242 286.516 cv
11.066 286.629 10.93 286.773 10.836 286.945 cv
10.742 287.125 10.695 287.332 10.695 287.566 cv
10.695 287.867 10.813 288.164 11.039 288.465 cv
11.273 288.766 11.605 289.094 12.043 289.445 cv
16.945 289.445 li
16.992 289.449 17.027 289.461 17.051 289.477 cv
17.082 289.5 17.105 289.531 17.125 289.578 cv
17.145 289.625 17.156 289.691 17.172 289.77 cv
17.18 289.855 17.188 289.961 17.188 290.09 cv
17.188 290.219 17.18 290.324 17.172 290.402 cv
17.156 290.488 17.145 290.555 17.125 290.602 cv
17.105 290.656 17.082 290.687 17.051 290.703 cv
17.027 290.723 16.992 290.734 16.945 290.73 cv
9.934 290.73 li
9.895 290.734 9.859 290.727 9.828 290.707 cv
9.801 290.695 9.777 290.664 9.75 290.613 cv
9.73 290.57 9.715 290.508 9.703 290.434 cv
9.699 290.363 9.695 290.27 9.691 290.145 cv
9.695 290.035 9.699 289.937 9.703 289.859 cv
9.715 289.785 9.73 289.727 9.75 289.684 cv
9.777 289.645 9.801 289.617 9.828 289.598 cv
9.859 289.582 9.895 289.574 9.934 289.57 cv
10.859 289.57 li
10.418 289.18 10.098 288.797 9.891 288.422 cv
9.688 288.055 9.582 287.676 9.582 287.293 cv
9.582 287.004 9.617 286.746 9.684 286.512 cv
9.754 286.285 9.848 286.078 9.969 285.898 cv
10.09 285.723 10.234 285.574 10.402 285.445 cv
10.574 285.324 10.766 285.219 10.969 285.133 cv
10.719 284.902 10.504 284.68 10.324 284.469 cv
10.152 284.258 10.008 284.055 9.895 283.859 cv
9.789 283.664 9.711 283.477 9.656 283.293 cv
9.609 283.109 9.582 282.922 9.582 282.734 cv
9.582 282.281 9.664 281.902 9.82 281.598 cv
9.984 281.293 10.195 281.047 10.457 280.852 cv
10.723 280.664 11.031 280.527 11.387 280.445 cv
11.742 280.367 12.117 280.328 12.512 280.324 cv
cp
f
13.137 271.996 mo
13.34 272 13.48 272.051 13.566 272.148 cv
13.652 272.254 13.695 272.371 13.695 272.496 cv
13.695 277.113 li
14.086 277.117 14.438 277.078 14.75 276.996 cv
15.063 276.922 15.332 276.789 15.551 276.605 cv
15.777 276.426 15.949 276.191 16.066 275.895 cv
16.191 275.605 16.25 275.246 16.246 274.82 cv
16.25 274.488 16.223 274.191 16.164 273.93 cv
16.113 273.668 16.051 273.441 15.98 273.25 cv
15.914 273.062 15.855 272.906 15.797 272.781 cv
15.746 272.66 15.719 272.566 15.715 272.504 cv
15.719 272.469 15.727 272.437 15.742 272.406 cv
15.762 272.379 15.789 272.355 15.824 272.336 cv
15.863 272.324 15.914 272.312 15.977 272.301 cv
16.043 272.297 16.121 272.293 16.215 272.289 cv
16.285 272.293 16.344 272.297 16.391 272.297 cv
16.438 272.305 16.48 272.309 16.52 272.316 cv
16.559 272.324 16.594 272.34 16.625 272.355 cv
16.656 272.379 16.688 272.402 16.715 272.426 cv
16.746 272.457 16.793 272.539 16.855 272.68 cv
16.922 272.82 16.984 273.004 17.047 273.227 cv
17.109 273.453 17.164 273.711 17.215 274.004 cv
17.262 274.297 17.285 274.609 17.289 274.941 cv
17.285 275.52 17.207 276.027 17.047 276.457 cv
16.887 276.895 16.648 277.258 16.332 277.551 cv
16.016 277.852 15.621 278.074 15.141 278.223 cv
14.664 278.371 14.105 278.445 13.469 278.445 cv
12.871 278.445 12.332 278.371 11.848 278.215 cv
11.371 278.062 10.961 277.836 10.625 277.539 cv
10.289 277.246 10.031 276.891 9.852 276.477 cv
9.672 276.062 9.582 275.598 9.582 275.082 cv
9.582 274.531 9.672 274.062 9.848 273.676 cv
10.027 273.289 10.266 272.973 10.563 272.719 cv
10.863 272.473 11.215 272.289 11.613 272.172 cv
12.02 272.059 12.449 272 12.902 271.996 cv
cp
12.754 273.289 mo
12.078 273.273 11.547 273.426 11.164 273.742 cv
10.781 274.059 10.59 274.527 10.586 275.145 cv
10.59 275.469 10.648 275.75 10.766 275.988 cv
10.887 276.23 11.047 276.43 11.242 276.59 cv
11.441 276.754 11.672 276.879 11.934 276.965 cv
12.195 277.055 12.469 277.105 12.754 277.113 cv
cp
f
6.402 263.82 mo
7.449 264.316 8.52 264.684 9.617 264.926 cv
10.719 265.168 11.824 265.289 12.934 265.289 cv
14.051 265.289 15.16 265.168 16.254 264.918 cv
17.352 264.676 18.422 264.312 19.477 263.836 cv
19.535 263.812 19.59 263.801 19.637 263.793 cv
19.68 263.793 19.715 263.809 19.746 263.844 cv
19.773 263.883 19.793 263.937 19.809 264.012 cv
19.816 264.09 19.824 264.195 19.828 264.32 cv
19.824 264.418 19.82 264.496 19.82 264.562 cv
19.813 264.633 19.805 264.691 19.789 264.738 cv
19.773 264.789 19.754 264.832 19.734 264.859 cv
19.711 264.895 19.688 264.918 19.664 264.93 cv
19.133 265.211 18.598 265.457 18.055 265.668 cv
17.512 265.887 16.961 266.066 16.402 266.207 cv
15.84 266.355 15.273 266.465 14.699 266.535 cv
14.125 266.613 13.543 266.648 12.957 266.645 cv
12.371 266.648 11.793 266.609 11.219 266.523 cv
10.648 266.445 10.082 266.328 9.516 266.18 cv
8.953 266.031 8.398 265.852 7.852 265.641 cv
7.309 265.43 6.766 265.191 6.23 264.922 cv
6.211 264.918 6.195 264.902 6.176 264.879 cv
6.164 264.855 6.148 264.824 6.129 264.781 cv
6.117 264.742 6.105 264.684 6.094 264.609 cv
6.09 264.539 6.086 264.445 6.082 264.328 cv
6.086 264.211 6.094 264.117 6.105 264.039 cv
6.125 263.969 6.145 263.91 6.168 263.867 cv
6.195 263.828 6.23 263.805 6.27 263.797 cv
6.316 263.793 6.359 263.801 6.402 263.82 cv
cp
f
16.938 250.539 mo
16.98 250.539 17.016 250.551 17.047 250.57 cv
17.078 250.594 17.105 250.633 17.121 250.684 cv
17.141 250.738 17.152 250.805 17.168 250.887 cv
17.18 250.973 17.188 251.082 17.188 251.211 cv
17.188 251.34 17.18 251.445 17.168 251.531 cv
17.152 251.621 17.141 251.691 17.121 251.742 cv
17.105 251.793 17.078 251.828 17.047 251.848 cv
17.016 251.871 16.98 251.883 16.938 251.879 cv
8.156 251.879 li
8.156 251.895 li
16.977 255.449 li
17.016 255.465 17.047 255.488 17.07 255.516 cv
17.098 255.547 17.121 255.59 17.137 255.641 cv
17.156 255.699 17.168 255.762 17.176 255.836 cv
17.184 255.91 17.188 256 17.188 256.102 cv
17.188 256.215 17.18 256.309 17.172 256.383 cv
17.156 256.465 17.145 256.531 17.129 256.578 cv
17.113 256.633 17.094 256.672 17.063 256.699 cv
17.039 256.73 17.008 256.75 16.977 256.758 cv
8.156 260.156 li
8.156 260.164 li
16.938 260.164 li
16.98 260.168 17.016 260.176 17.047 260.195 cv
17.078 260.219 17.105 260.258 17.121 260.309 cv
17.141 260.363 17.152 260.434 17.168 260.516 cv
17.18 260.605 17.188 260.715 17.188 260.844 cv
17.188 260.977 17.18 261.082 17.168 261.168 cv
17.152 261.254 17.141 261.324 17.121 261.371 cv
17.105 261.426 17.078 261.461 17.047 261.477 cv
17.016 261.5 16.98 261.508 16.938 261.504 cv
7.664 261.504 li
7.449 261.508 7.293 261.449 7.195 261.332 cv
7.105 261.215 7.059 261.086 7.055 260.941 cv
7.055 260.117 li
7.059 259.953 7.074 259.805 7.102 259.676 cv
7.137 259.551 7.184 259.441 7.25 259.344 cv
7.32 259.25 7.406 259.168 7.508 259.105 cv
7.613 259.043 7.738 258.988 7.875 258.941 cv
15.176 256.055 li
15.176 256.016 li
7.898 253.016 li
7.746 252.961 7.613 252.898 7.5 252.828 cv
7.395 252.762 7.305 252.684 7.238 252.602 cv
7.176 252.52 7.129 252.43 7.098 252.328 cv
7.07 252.23 7.059 252.113 7.055 251.98 cv
7.055 251.117 li
7.059 251.039 7.07 250.961 7.09 250.891 cv
7.117 250.82 7.152 250.762 7.199 250.711 cv
7.25 250.66 7.313 250.617 7.387 250.586 cv
7.465 250.555 7.559 250.539 7.664 250.539 cv
cp
f
16.945 246.723 mo
16.992 246.727 17.027 246.738 17.051 246.754 cv
17.082 246.777 17.105 246.809 17.125 246.855 cv
17.145 246.902 17.156 246.969 17.172 247.047 cv
17.18 247.133 17.188 247.238 17.188 247.367 cv
17.188 247.496 17.18 247.602 17.172 247.68 cv
17.156 247.766 17.145 247.832 17.125 247.879 cv
17.105 247.934 17.082 247.965 17.051 247.98 cv
17.027 248 16.992 248.012 16.945 248.008 cv
9.934 248.008 li
9.898 248.012 9.867 248 9.832 247.98 cv
9.805 247.965 9.777 247.934 9.754 247.879 cv
9.734 247.832 9.719 247.766 9.707 247.68 cv
9.699 247.602 9.695 247.496 9.691 247.367 cv
9.695 247.238 9.699 247.133 9.707 247.047 cv
9.719 246.969 9.734 246.902 9.754 246.855 cv
9.777 246.809 9.805 246.777 9.832 246.754 cv
9.867 246.738 9.898 246.727 9.934 246.723 cv
cp
7.563 246.574 mo
7.867 246.574 8.074 246.633 8.18 246.746 cv
8.293 246.859 8.348 247.07 8.344 247.375 cv
8.348 247.68 8.293 247.887 8.184 247.996 cv
8.078 248.113 7.875 248.168 7.578 248.164 cv
7.277 248.168 7.074 248.109 6.965 247.992 cv
6.859 247.879 6.805 247.668 6.801 247.359 cv
6.805 247.059 6.859 246.855 6.961 246.742 cv
7.07 246.633 7.27 246.574 7.563 246.574 cv
cp
f
16.945 238.297 mo
16.992 238.297 17.027 238.309 17.051 238.328 cv
17.082 238.352 17.105 238.387 17.125 238.43 cv
17.145 238.48 17.156 238.543 17.172 238.625 cv
17.18 238.707 17.188 238.812 17.188 238.934 cv
17.188 239.066 17.18 239.172 17.172 239.254 cv
17.156 239.34 17.145 239.406 17.125 239.449 cv
17.105 239.5 17.082 239.531 17.051 239.551 cv
17.027 239.574 16.992 239.586 16.945 239.582 cv
12.84 239.582 li
12.441 239.586 12.121 239.617 11.875 239.676 cv
11.633 239.742 11.422 239.832 11.242 239.949 cv
11.066 240.066 10.93 240.223 10.836 240.41 cv
10.742 240.605 10.695 240.824 10.695 241.07 cv
10.695 241.395 10.813 241.719 11.039 242.039 cv
11.273 242.363 11.605 242.699 12.043 243.051 cv
16.945 243.051 li
16.992 243.055 17.027 243.066 17.051 243.082 cv
17.082 243.105 17.105 243.137 17.125 243.184 cv
17.145 243.23 17.156 243.297 17.172 243.375 cv
17.18 243.461 17.188 243.566 17.188 243.695 cv
17.188 243.824 17.18 243.93 17.172 244.008 cv
17.156 244.094 17.145 244.16 17.125 244.207 cv
17.105 244.262 17.082 244.293 17.051 244.309 cv
17.027 244.328 16.992 244.34 16.945 244.336 cv
9.934 244.336 li
9.895 244.34 9.859 244.332 9.828 244.312 cv
9.801 244.301 9.777 244.27 9.75 244.219 cv
9.73 244.176 9.715 244.113 9.703 244.039 cv
9.699 243.969 9.695 243.875 9.691 243.75 cv
9.695 243.641 9.699 243.543 9.703 243.465 cv
9.715 243.391 9.73 243.332 9.75 243.289 cv
9.777 243.25 9.801 243.223 9.828 243.203 cv
9.859 243.187 9.895 243.18 9.934 243.176 cv
10.859 243.176 li
10.418 242.785 10.098 242.391 9.891 241.996 cv
9.688 241.605 9.582 241.207 9.582 240.805 cv
9.582 240.336 9.664 239.945 9.82 239.625 cv
9.984 239.309 10.195 239.047 10.457 238.848 cv
10.723 238.652 11.031 238.512 11.387 238.426 cv
11.742 238.34 12.172 238.297 12.668 238.297 cv
cp
f
16.945 229.902 mo
16.992 229.906 17.027 229.914 17.051 229.93 cv
17.082 229.949 17.105 229.984 17.125 230.027 cv
17.145 230.074 17.156 230.133 17.172 230.207 cv
17.18 230.285 17.188 230.379 17.188 230.484 cv
17.188 230.609 17.18 230.707 17.172 230.777 cv
17.156 230.855 17.145 230.914 17.125 230.957 cv
17.105 231.004 17.082 231.035 17.051 231.047 cv
17.027 231.066 16.992 231.074 16.945 231.07 cv
16.02 231.07 li
16.465 231.473 16.785 231.867 16.984 232.254 cv
17.188 232.648 17.285 233.043 17.289 233.437 cv
17.285 233.91 17.211 234.305 17.055 234.621 cv
16.902 234.941 16.691 235.199 16.422 235.395 cv
16.156 235.598 15.844 235.738 15.484 235.82 cv
15.129 235.91 14.695 235.953 14.188 235.949 cv
9.934 235.949 li
9.895 235.953 9.859 235.945 9.828 235.922 cv
9.801 235.906 9.777 235.871 9.75 235.816 cv
9.73 235.77 9.715 235.699 9.703 235.613 cv
9.699 235.531 9.695 235.43 9.691 235.301 cv
9.695 235.18 9.699 235.074 9.703 234.988 cv
9.715 234.906 9.73 234.84 9.75 234.793 cv
9.777 234.746 9.801 234.711 9.828 234.687 cv
9.859 234.668 9.895 234.66 9.934 234.656 cv
14.016 234.656 li
14.43 234.66 14.758 234.629 15.004 234.566 cv
15.25 234.508 15.461 234.418 15.633 234.293 cv
15.813 234.176 15.945 234.02 16.039 233.828 cv
16.137 233.645 16.188 233.426 16.184 233.176 cv
16.188 232.855 16.07 232.535 15.84 232.211 cv
15.613 231.895 15.277 231.555 14.832 231.195 cv
9.934 231.195 li
9.895 231.195 9.859 231.187 9.828 231.168 cv
9.801 231.152 9.777 231.117 9.75 231.062 cv
9.73 231.012 9.715 230.945 9.703 230.863 cv
9.699 230.785 9.695 230.68 9.691 230.547 cv
9.695 230.426 9.699 230.32 9.703 230.234 cv
9.715 230.152 9.73 230.09 9.75 230.043 cv
9.777 230 9.801 229.965 9.828 229.937 cv
9.859 229.918 9.895 229.906 9.934 229.902 cv
cp
f
16.43 223.883 mo
16.586 223.883 16.703 223.895 16.789 223.914 cv
16.879 223.937 16.945 223.969 16.984 224.008 cv
17.027 224.051 17.066 224.113 17.102 224.195 cv
17.137 224.281 17.164 224.375 17.191 224.48 cv
17.211 224.59 17.23 224.703 17.25 224.82 cv
17.262 224.937 17.27 225.059 17.273 225.176 cv
17.27 225.543 17.223 225.855 17.129 226.113 cv
17.035 226.375 16.891 226.586 16.691 226.75 cv
16.5 226.918 16.254 227.039 15.953 227.113 cv
15.656 227.191 15.305 227.23 14.895 227.227 cv
10.797 227.227 li
10.797 228.207 li
10.801 228.285 10.758 228.348 10.672 228.395 cv
10.59 228.441 10.457 228.465 10.266 228.465 cv
10.172 228.465 10.09 228.461 10.02 228.445 cv
9.957 228.437 9.898 228.418 9.852 228.395 cv
9.809 228.375 9.777 228.348 9.758 228.312 cv
9.742 228.281 9.734 228.246 9.73 228.199 cv
9.73 227.227 li
8.063 227.227 li
8.031 227.23 7.996 227.219 7.961 227.199 cv
7.934 227.184 7.906 227.152 7.879 227.098 cv
7.859 227.051 7.844 226.984 7.828 226.898 cv
7.82 226.82 7.813 226.715 7.813 226.586 cv
7.813 226.457 7.82 226.352 7.828 226.27 cv
7.844 226.187 7.859 226.121 7.879 226.074 cv
7.906 226.027 7.934 225.996 7.961 225.973 cv
7.996 225.957 8.031 225.945 8.063 225.941 cv
9.73 225.941 li
9.73 224.141 li
9.734 224.102 9.742 224.066 9.758 224.031 cv
9.777 224.004 9.809 223.977 9.852 223.949 cv
9.898 223.93 9.957 223.914 10.02 223.898 cv
10.09 223.891 10.172 223.883 10.266 223.883 cv
10.457 223.883 10.59 223.906 10.672 223.953 cv
10.758 224 10.801 224.062 10.797 224.141 cv
10.797 225.941 li
14.711 225.941 li
15.195 225.945 15.559 225.875 15.805 225.727 cv
16.055 225.586 16.18 225.328 16.176 224.957 cv
16.18 224.844 16.168 224.738 16.141 224.641 cv
16.121 224.551 16.098 224.469 16.066 224.391 cv
16.043 224.32 16.016 224.258 15.992 224.203 cv
15.969 224.156 15.957 224.109 15.957 224.062 cv
15.957 224.039 15.965 224.012 15.977 223.988 cv
15.992 223.965 16.016 223.949 16.051 223.934 cv
16.09 223.926 16.141 223.914 16.199 223.898 cv
16.266 223.891 16.344 223.883 16.43 223.883 cv
cp
f
13.137 216.199 mo
13.34 216.203 13.48 216.254 13.566 216.352 cv
13.652 216.457 13.695 216.574 13.695 216.699 cv
13.695 221.316 li
14.086 221.32 14.438 221.281 14.75 221.199 cv
15.063 221.125 15.332 220.992 15.551 220.809 cv
15.777 220.629 15.949 220.395 16.066 220.098 cv
16.191 219.809 16.25 219.449 16.246 219.023 cv
16.25 218.691 16.223 218.395 16.164 218.133 cv
16.113 217.871 16.051 217.645 15.98 217.453 cv
15.914 217.266 15.855 217.109 15.797 216.984 cv
15.746 216.863 15.719 216.77 15.715 216.707 cv
15.719 216.672 15.727 216.641 15.742 216.609 cv
15.762 216.582 15.789 216.559 15.824 216.539 cv
15.863 216.527 15.914 216.516 15.977 216.504 cv
16.043 216.5 16.121 216.496 16.215 216.492 cv
16.285 216.496 16.344 216.5 16.391 216.5 cv
16.438 216.508 16.48 216.512 16.52 216.52 cv
16.559 216.527 16.594 216.543 16.625 216.559 cv
16.656 216.582 16.688 216.605 16.715 216.629 cv
16.746 216.66 16.793 216.742 16.855 216.883 cv
16.922 217.023 16.984 217.207 17.047 217.43 cv
17.109 217.656 17.164 217.914 17.215 218.207 cv
17.262 218.5 17.285 218.812 17.289 219.145 cv
17.285 219.723 17.207 220.23 17.047 220.66 cv
16.887 221.098 16.648 221.461 16.332 221.754 cv
16.016 222.055 15.621 222.277 15.141 222.426 cv
14.664 222.574 14.105 222.648 13.469 222.648 cv
12.871 222.648 12.332 222.574 11.848 222.418 cv
11.371 222.266 10.961 222.039 10.625 221.742 cv
10.289 221.449 10.031 221.094 9.852 220.68 cv
9.672 220.266 9.582 219.801 9.582 219.285 cv
9.582 218.734 9.672 218.266 9.848 217.879 cv
10.027 217.492 10.266 217.176 10.563 216.922 cv
10.863 216.676 11.215 216.492 11.613 216.375 cv
12.02 216.262 12.449 216.203 12.902 216.199 cv
cp
12.754 217.492 mo
12.078 217.477 11.547 217.629 11.164 217.945 cv
10.781 218.262 10.59 218.73 10.586 219.348 cv
10.59 219.672 10.648 219.953 10.766 220.191 cv
10.887 220.434 11.047 220.633 11.242 220.793 cv
11.441 220.957 11.672 221.082 11.934 221.168 cv
12.195 221.258 12.469 221.309 12.754 221.316 cv
cp
f
15.035 209.914 mo
15.398 209.918 15.719 209.984 15.996 210.113 cv
16.277 210.246 16.512 210.434 16.703 210.676 cv
16.898 210.922 17.043 211.215 17.141 211.551 cv
17.238 211.891 17.285 212.262 17.289 212.664 cv
17.285 212.918 17.266 213.156 17.23 213.379 cv
17.188 213.605 17.141 213.805 17.082 213.984 cv
17.023 214.164 16.961 214.316 16.895 214.441 cv
16.832 214.566 16.773 214.66 16.719 214.715 cv
16.668 214.773 16.598 214.812 16.5 214.836 cv
16.41 214.863 16.281 214.875 16.121 214.875 cv
16.023 214.875 15.941 214.871 15.871 214.859 cv
15.805 214.852 15.75 214.84 15.707 214.82 cv
15.668 214.809 15.637 214.785 15.617 214.758 cv
15.602 214.73 15.594 214.699 15.59 214.66 cv
15.594 214.605 15.629 214.52 15.695 214.406 cv
15.77 214.297 15.848 214.16 15.926 213.992 cv
16.012 213.832 16.086 213.641 16.156 213.414 cv
16.227 213.195 16.262 212.937 16.262 212.641 cv
16.262 212.426 16.238 212.227 16.191 212.047 cv
16.145 211.871 16.078 211.719 15.984 211.59 cv
15.898 211.461 15.781 211.359 15.637 211.289 cv
15.5 211.219 15.332 211.184 15.137 211.184 cv
14.941 211.184 14.777 211.234 14.641 211.336 cv
14.508 211.437 14.387 211.574 14.281 211.738 cv
14.18 211.906 14.09 212.09 14.004 212.297 cv
13.926 212.508 13.84 212.723 13.75 212.941 cv
13.664 213.16 13.563 213.375 13.449 213.586 cv
13.34 213.797 13.207 213.988 13.043 214.152 cv
12.887 214.324 12.691 214.457 12.465 214.555 cv
12.242 214.66 11.977 214.711 11.664 214.707 cv
11.391 214.711 11.125 214.656 10.871 214.547 cv
10.621 214.441 10.402 214.281 10.211 214.066 cv
10.023 213.855 9.871 213.59 9.754 213.27 cv
9.641 212.949 9.582 212.578 9.582 212.148 cv
9.582 211.965 9.598 211.777 9.629 211.59 cv
9.66 211.406 9.699 211.238 9.746 211.082 cv
9.793 210.934 9.844 210.805 9.898 210.695 cv
9.953 210.594 10.004 210.512 10.043 210.453 cv
10.09 210.402 10.125 210.367 10.152 210.344 cv
10.184 210.328 10.219 210.312 10.254 210.305 cv
10.297 210.297 10.344 210.289 10.398 210.281 cv
10.457 210.273 10.527 210.27 10.609 210.27 cv
10.699 210.27 10.777 210.273 10.84 210.281 cv
10.91 210.289 10.961 210.305 11 210.32 cv
11.043 210.344 11.074 210.363 11.09 210.387 cv
11.109 210.414 11.117 210.445 11.117 210.473 cv
11.117 210.523 11.09 210.59 11.031 210.676 cv
10.977 210.766 10.914 210.879 10.848 211.02 cv
10.785 211.16 10.727 211.328 10.664 211.516 cv
10.609 211.707 10.578 211.922 10.578 212.164 cv
10.578 212.387 10.605 212.578 10.652 212.742 cv
10.707 212.91 10.777 213.047 10.863 213.152 cv
10.957 213.258 11.063 213.34 11.188 213.391 cv
11.313 213.449 11.449 213.477 11.594 213.473 cv
11.797 213.477 11.965 213.426 12.102 213.32 cv
12.242 213.219 12.363 213.082 12.465 212.914 cv
12.57 212.75 12.664 212.559 12.746 212.344 cv
12.832 212.133 12.918 211.918 13.004 211.695 cv
13.094 211.477 13.195 211.258 13.301 211.039 cv
13.41 210.824 13.539 210.633 13.695 210.465 cv
13.852 210.301 14.039 210.168 14.258 210.066 cv
14.477 209.969 14.738 209.918 15.035 209.914 cv
cp
f
12.957 205.469 mo
13.543 205.469 14.125 205.508 14.699 205.578 cv
15.273 205.656 15.84 205.766 16.402 205.906 cv
16.961 206.055 17.512 206.23 18.055 206.441 cv
18.598 206.652 19.133 206.898 19.664 207.176 cv
19.688 207.195 19.711 207.219 19.734 207.246 cv
19.754 207.281 19.773 207.32 19.789 207.367 cv
19.805 207.418 19.813 207.477 19.82 207.543 cv
19.82 207.613 19.824 207.695 19.828 207.785 cv
19.824 207.922 19.816 208.027 19.809 208.102 cv
19.793 208.18 19.773 208.234 19.746 208.266 cv
19.715 208.301 19.68 208.316 19.637 208.312 cv
19.59 208.312 19.535 208.297 19.477 208.27 cv
18.426 207.793 17.355 207.434 16.258 207.187 cv
15.16 206.945 14.051 206.824 12.934 206.82 cv
11.824 206.824 10.719 206.945 9.617 207.187 cv
8.52 207.434 7.449 207.801 6.402 208.285 cv
6.359 208.309 6.316 208.316 6.27 208.309 cv
6.23 208.309 6.195 208.285 6.168 208.238 cv
6.145 208.199 6.125 208.141 6.105 208.066 cv
6.094 207.996 6.086 207.898 6.082 207.777 cv
6.086 207.668 6.09 207.578 6.094 207.504 cv
6.105 207.434 6.117 207.375 6.129 207.328 cv
6.148 207.285 6.164 207.254 6.176 207.23 cv
6.195 207.215 6.211 207.199 6.23 207.184 cv
7.297 206.652 8.395 206.23 9.516 205.926 cv
10.645 205.621 11.789 205.469 12.957 205.469 cv
cp
f
261.34 547.461 mo
261.336 547.566 261.32 547.656 261.285 547.727 cv
261.25 547.805 261.203 547.863 261.148 547.906 cv
261.09 547.957 261.027 547.992 260.961 548.008 cv
260.887 548.031 260.816 548.039 260.754 548.039 cv
260.309 548.039 li
260.168 548.039 260.047 548.027 259.941 547.996 cv
259.836 547.973 259.738 547.918 259.645 547.84 cv
259.551 547.766 259.457 547.664 259.363 547.531 cv
259.27 547.402 259.168 547.238 259.063 547.035 cv
255.988 541.297 li
255.824 541.004 255.66 540.695 255.5 540.367 cv
255.332 540.047 255.18 539.73 255.043 539.422 cv
255.027 539.422 li
255.035 539.797 255.043 540.18 255.051 540.566 cv
255.055 540.957 255.055 541.344 255.059 541.727 cv
255.059 547.812 li
255.055 547.852 255.043 547.887 255.023 547.918 cv
255 547.953 254.965 547.98 254.914 547.996 cv
254.859 548.016 254.789 548.027 254.707 548.043 cv
254.621 548.055 254.516 548.062 254.387 548.062 cv
254.25 548.062 254.141 548.055 254.059 548.043 cv
253.973 548.027 253.906 548.016 253.859 547.996 cv
253.809 547.98 253.773 547.953 253.75 547.918 cv
253.727 547.887 253.715 547.852 253.719 547.812 cv
253.719 538.508 li
253.715 538.301 253.773 538.152 253.895 538.062 cv
254.012 537.977 254.141 537.934 254.281 537.93 cv
254.941 537.93 li
255.094 537.934 255.227 537.945 255.332 537.969 cv
255.434 537.996 255.527 538.039 255.613 538.098 cv
255.695 538.16 255.773 538.242 255.855 538.348 cv
255.93 538.457 256.012 538.594 256.098 538.75 cv
258.465 543.176 li
258.609 543.449 258.75 543.715 258.887 543.969 cv
259.02 544.227 259.148 544.48 259.277 544.727 cv
259.398 544.98 259.523 545.227 259.648 545.465 cv
259.77 545.707 259.891 545.949 260.016 546.191 cv
260.023 546.191 li
260.012 545.785 260.004 545.355 260.004 544.91 cv
259.996 544.465 259.996 544.039 260 543.629 cv
260 538.156 li
259.996 538.121 260.008 538.086 260.031 538.055 cv
260.055 538.023 260.09 537.996 260.145 537.973 cv
260.191 537.949 260.262 537.934 260.348 537.922 cv
260.434 537.914 260.543 537.91 260.684 537.906 cv
260.801 537.91 260.906 537.914 260.996 537.922 cv
261.082 537.934 261.148 537.949 261.199 537.973 cv
261.246 537.996 261.281 538.023 261.305 538.055 cv
261.324 538.086 261.336 538.121 261.34 538.156 cv
cp
f
269.891 547.82 mo
269.887 547.867 269.879 547.902 269.863 547.926 cv
269.844 547.957 269.809 547.98 269.766 548 cv
269.719 548.02 269.66 548.031 269.586 548.047 cv
269.508 548.055 269.414 548.062 269.309 548.062 cv
269.184 548.062 269.086 548.055 269.016 548.047 cv
268.938 548.031 268.879 548.02 268.836 548 cv
268.789 547.98 268.758 547.957 268.746 547.926 cv
268.727 547.902 268.719 547.867 268.723 547.82 cv
268.723 546.895 li
268.32 547.34 267.926 547.66 267.539 547.859 cv
267.145 548.062 266.75 548.16 266.355 548.164 cv
265.883 548.16 265.488 548.086 265.172 547.93 cv
264.852 547.777 264.594 547.566 264.398 547.297 cv
264.195 547.031 264.055 546.719 263.973 546.359 cv
263.883 546.004 263.84 545.57 263.844 545.062 cv
263.844 540.809 li
263.84 540.77 263.848 540.734 263.871 540.703 cv
263.887 540.676 263.922 540.652 263.977 540.625 cv
264.023 540.605 264.094 540.59 264.18 540.578 cv
264.262 540.574 264.363 540.57 264.492 540.566 cv
264.613 540.57 264.719 540.574 264.805 540.578 cv
264.887 540.59 264.953 540.605 265 540.625 cv
265.047 540.652 265.082 540.676 265.105 540.703 cv
265.125 540.734 265.133 540.77 265.137 540.809 cv
265.137 544.891 li
265.133 545.305 265.164 545.633 265.227 545.879 cv
265.285 546.125 265.375 546.336 265.5 546.508 cv
265.617 546.687 265.773 546.82 265.965 546.914 cv
266.148 547.012 266.367 547.062 266.617 547.059 cv
266.938 547.062 267.258 546.945 267.582 546.715 cv
267.898 546.488 268.238 546.152 268.598 545.707 cv
268.598 540.809 li
268.598 540.77 268.605 540.734 268.625 540.703 cv
268.641 540.676 268.676 540.652 268.73 540.625 cv
268.781 540.605 268.848 540.59 268.93 540.578 cv
269.008 540.574 269.113 540.57 269.246 540.566 cv
269.367 540.57 269.473 540.574 269.559 540.578 cv
269.641 540.59 269.703 540.605 269.75 540.625 cv
269.793 540.652 269.828 540.676 269.855 540.703 cv
269.875 540.734 269.887 540.77 269.891 540.809 cv
cp
f
282.668 547.82 mo
282.664 547.867 282.656 547.902 282.637 547.926 cv
282.613 547.957 282.578 547.98 282.535 548 cv
282.484 548.02 282.418 548.031 282.34 548.047 cv
282.254 548.055 282.152 548.062 282.027 548.062 cv
281.895 548.062 281.785 548.055 281.707 548.047 cv
281.621 548.031 281.555 548.02 281.508 548 cv
281.453 547.98 281.418 547.957 281.402 547.926 cv
281.379 547.902 281.371 547.867 281.371 547.82 cv
281.371 543.559 li
281.371 543.266 281.344 542.996 281.293 542.75 cv
281.238 542.508 281.156 542.297 281.043 542.117 cv
280.93 541.941 280.785 541.805 280.609 541.711 cv
280.43 541.617 280.219 541.57 279.984 541.57 cv
279.688 541.57 279.391 541.687 279.094 541.914 cv
278.789 542.148 278.461 542.48 278.105 542.918 cv
278.105 547.82 li
278.102 547.867 278.09 547.902 278.074 547.926 cv
278.051 547.957 278.02 547.98 277.973 548 cv
277.922 548.02 277.855 548.031 277.773 548.047 cv
277.688 548.055 277.582 548.062 277.461 548.062 cv
277.34 548.062 277.238 548.055 277.152 548.047 cv
277.066 548.031 276.996 548.02 276.949 548 cv
276.895 547.98 276.863 547.957 276.848 547.926 cv
276.828 547.902 276.816 547.867 276.82 547.82 cv
276.82 543.559 li
276.816 543.266 276.789 542.996 276.734 542.75 cv
276.676 542.508 276.59 542.297 276.477 542.117 cv
276.363 541.941 276.219 541.805 276.047 541.711 cv
275.867 541.617 275.66 541.57 275.426 541.57 cv
275.125 541.57 274.828 541.687 274.527 541.914 cv
274.227 542.148 273.898 542.48 273.547 542.918 cv
273.547 547.82 li
273.543 547.867 273.531 547.902 273.516 547.926 cv
273.492 547.957 273.461 547.98 273.414 548 cv
273.367 548.02 273.301 548.031 273.223 548.047 cv
273.137 548.055 273.031 548.062 272.902 548.062 cv
272.773 548.062 272.668 548.055 272.59 548.047 cv
272.504 548.031 272.438 548.02 272.391 548 cv
272.336 547.98 272.305 547.957 272.289 547.926 cv
272.27 547.902 272.258 547.867 272.262 547.82 cv
272.262 540.809 li
272.258 540.77 272.266 540.734 272.285 540.703 cv
272.297 540.676 272.328 540.652 272.379 540.625 cv
272.422 540.605 272.484 540.59 272.559 540.578 cv
272.629 540.574 272.723 540.57 272.848 540.566 cv
272.957 540.57 273.055 540.574 273.133 540.578 cv
273.207 540.59 273.266 540.605 273.309 540.625 cv
273.348 540.652 273.375 540.676 273.395 540.703 cv
273.41 540.734 273.418 540.77 273.422 540.809 cv
273.422 541.734 li
273.813 541.293 274.195 540.973 274.57 540.766 cv
274.938 540.562 275.316 540.457 275.699 540.457 cv
275.988 540.457 276.246 540.492 276.48 540.559 cv
276.707 540.629 276.914 540.723 277.094 540.844 cv
277.27 540.965 277.418 541.109 277.547 541.277 cv
277.668 541.449 277.773 541.641 277.859 541.844 cv
278.09 541.594 278.313 541.379 278.523 541.199 cv
278.734 541.027 278.938 540.883 279.133 540.77 cv
279.328 540.664 279.516 540.586 279.699 540.531 cv
279.883 540.484 280.07 540.457 280.258 540.457 cv
280.711 540.457 281.09 540.539 281.395 540.695 cv
281.699 540.859 281.945 541.07 282.141 541.332 cv
282.328 541.598 282.465 541.906 282.547 542.262 cv
282.625 542.617 282.664 542.992 282.668 543.387 cv
cp
f
291.465 544.219 mo
291.461 544.828 291.395 545.379 291.266 545.863 cv
291.129 546.352 290.934 546.766 290.68 547.105 cv
290.422 547.449 290.105 547.711 289.734 547.891 cv
289.359 548.074 288.934 548.16 288.449 548.164 cv
288.223 548.16 288.016 548.141 287.828 548.098 cv
287.641 548.051 287.453 547.98 287.273 547.883 cv
287.086 547.785 286.906 547.66 286.727 547.508 cv
286.543 547.359 286.352 547.18 286.152 546.965 cv
286.152 547.82 li
286.152 547.867 286.141 547.902 286.121 547.93 cv
286.098 547.965 286.063 547.988 286.02 548.004 cv
285.969 548.02 285.91 548.031 285.844 548.047 cv
285.77 548.055 285.68 548.062 285.574 548.062 cv
285.465 548.062 285.379 548.055 285.309 548.047 cv
285.234 548.031 285.172 548.02 285.129 548.004 cv
285.078 547.988 285.047 547.965 285.035 547.93 cv
285.016 547.902 285.008 547.867 285.012 547.82 cv
285.012 537.41 li
285.008 537.371 285.02 537.336 285.039 537.301 cv
285.055 537.273 285.086 537.246 285.141 537.223 cv
285.188 537.203 285.254 537.187 285.34 537.176 cv
285.418 537.168 285.523 537.164 285.652 537.16 cv
285.781 537.164 285.887 537.168 285.973 537.176 cv
286.051 537.187 286.117 537.203 286.164 537.223 cv
286.211 537.246 286.242 537.273 286.266 537.301 cv
286.281 537.336 286.293 537.371 286.297 537.41 cv
286.297 541.609 li
286.504 541.398 286.707 541.219 286.902 541.074 cv
287.098 540.93 287.285 540.812 287.473 540.719 cv
287.656 540.633 287.844 540.566 288.035 540.52 cv
288.219 540.48 288.418 540.457 288.629 540.457 cv
289.133 540.457 289.566 540.559 289.934 540.762 cv
290.293 540.965 290.586 541.238 290.813 541.574 cv
291.035 541.918 291.203 542.316 291.309 542.773 cv
291.41 543.23 291.461 543.711 291.465 544.219 cv
cp
290.133 544.367 mo
290.129 544.012 290.102 543.664 290.051 543.324 cv
289.992 542.988 289.898 542.691 289.762 542.43 cv
289.625 542.172 289.445 541.961 289.223 541.801 cv
288.996 541.645 288.715 541.566 288.383 541.562 cv
288.215 541.566 288.051 541.59 287.891 541.633 cv
287.727 541.684 287.563 541.762 287.395 541.867 cv
287.227 541.98 287.051 542.121 286.875 542.289 cv
286.691 542.465 286.5 542.68 286.297 542.934 cv
286.297 545.73 li
286.652 546.164 286.992 546.496 287.316 546.719 cv
287.641 546.949 287.977 547.062 288.328 547.059 cv
288.648 547.062 288.926 546.984 289.16 546.824 cv
289.387 546.672 289.574 546.465 289.719 546.203 cv
289.863 545.949 289.969 545.66 290.035 545.34 cv
290.098 545.023 290.129 544.699 290.133 544.367 cv
cp
f
299.375 544.012 mo
299.371 544.215 299.32 544.355 299.223 544.441 cv
299.117 544.527 299 544.57 298.875 544.57 cv
294.258 544.57 li
294.254 544.961 294.293 545.312 294.375 545.625 cv
294.449 545.937 294.582 546.207 294.766 546.426 cv
294.945 546.652 295.18 546.824 295.477 546.941 cv
295.766 547.066 296.125 547.125 296.551 547.121 cv
296.883 547.125 297.18 547.098 297.441 547.039 cv
297.703 546.988 297.93 546.926 298.121 546.855 cv
298.309 546.789 298.465 546.73 298.59 546.672 cv
298.711 546.621 298.805 546.594 298.867 546.59 cv
298.902 546.594 298.934 546.602 298.965 546.617 cv
298.992 546.637 299.016 546.664 299.035 546.699 cv
299.047 546.738 299.059 546.789 299.07 546.852 cv
299.074 546.918 299.078 546.996 299.082 547.09 cv
299.078 547.16 299.074 547.219 299.074 547.266 cv
299.066 547.312 299.063 547.355 299.055 547.395 cv
299.047 547.434 299.031 547.469 299.016 547.5 cv
298.992 547.531 298.969 547.562 298.945 547.59 cv
298.914 547.621 298.832 547.668 298.691 547.73 cv
298.551 547.797 298.367 547.859 298.145 547.922 cv
297.918 547.984 297.66 548.039 297.367 548.09 cv
297.074 548.137 296.762 548.16 296.43 548.164 cv
295.852 548.16 295.344 548.082 294.914 547.922 cv
294.477 547.762 294.113 547.523 293.82 547.207 cv
293.52 546.891 293.297 546.496 293.148 546.016 cv
293 545.539 292.926 544.98 292.926 544.344 cv
292.926 543.746 293 543.207 293.156 542.723 cv
293.309 542.246 293.535 541.836 293.832 541.5 cv
294.125 541.164 294.48 540.906 294.895 540.727 cv
295.309 540.547 295.773 540.457 296.289 540.457 cv
296.84 540.457 297.309 540.547 297.695 540.723 cv
298.082 540.902 298.398 541.141 298.652 541.437 cv
298.898 541.738 299.082 542.09 299.199 542.488 cv
299.313 542.895 299.371 543.324 299.375 543.777 cv
cp
298.082 543.629 mo
298.098 542.953 297.945 542.422 297.629 542.039 cv
297.313 541.656 296.844 541.465 296.227 541.461 cv
295.902 541.465 295.621 541.523 295.383 541.641 cv
295.141 541.762 294.941 541.922 294.781 542.117 cv
294.617 542.316 294.492 542.547 294.406 542.809 cv
294.316 543.07 294.266 543.344 294.258 543.629 cv
cp
f
305.441 541.266 mo
305.438 541.383 305.438 541.48 305.434 541.555 cv
305.426 541.637 305.414 541.699 305.402 541.738 cv
305.383 541.785 305.363 541.816 305.344 541.84 cv
305.316 541.863 305.285 541.875 305.246 541.875 cv
305.203 541.875 305.152 541.863 305.094 541.84 cv
305.031 541.816 304.961 541.793 304.891 541.77 cv
304.813 541.746 304.73 541.727 304.637 541.703 cv
304.543 541.687 304.441 541.676 304.332 541.672 cv
304.199 541.676 304.07 541.703 303.949 541.75 cv
303.824 541.805 303.695 541.891 303.559 542.008 cv
303.418 542.133 303.273 542.289 303.125 542.484 cv
302.973 542.68 302.805 542.922 302.625 543.207 cv
302.625 547.82 li
302.621 547.867 302.609 547.902 302.594 547.926 cv
302.57 547.957 302.539 547.98 302.492 548 cv
302.445 548.02 302.379 548.031 302.301 548.047 cv
302.215 548.055 302.109 548.062 301.98 548.062 cv
301.852 548.062 301.746 548.055 301.668 548.047 cv
301.582 548.031 301.516 548.02 301.469 548 cv
301.414 547.98 301.383 547.957 301.367 547.926 cv
301.348 547.902 301.336 547.867 301.34 547.82 cv
301.34 540.809 li
301.336 540.77 301.344 540.734 301.363 540.703 cv
301.375 540.676 301.406 540.652 301.457 540.625 cv
301.5 540.605 301.563 540.59 301.637 540.578 cv
301.707 540.574 301.801 540.57 301.926 540.566 cv
302.035 540.57 302.133 540.574 302.211 540.578 cv
302.285 540.59 302.344 540.605 302.387 540.625 cv
302.426 540.652 302.453 540.676 302.473 540.703 cv
302.488 540.734 302.496 540.77 302.5 540.809 cv
302.5 541.828 li
302.688 541.547 302.871 541.32 303.043 541.145 cv
303.211 540.969 303.371 540.828 303.523 540.727 cv
303.672 540.625 303.82 540.555 303.969 540.516 cv
304.117 540.477 304.266 540.457 304.418 540.457 cv
304.484 540.457 304.563 540.461 304.648 540.469 cv
304.734 540.477 304.824 540.492 304.918 540.512 cv
305.012 540.535 305.094 540.559 305.172 540.582 cv
305.242 540.609 305.297 540.637 305.332 540.66 cv
305.359 540.691 305.379 540.715 305.395 540.734 cv
305.402 540.762 305.414 540.793 305.422 540.824 cv
305.43 540.863 305.434 540.914 305.438 540.984 cv
305.438 541.055 305.438 541.148 305.441 541.266 cv
cp
f
317.199 544.234 mo
317.195 544.812 317.121 545.34 316.973 545.816 cv
316.82 546.301 316.594 546.715 316.297 547.059 cv
315.996 547.41 315.621 547.68 315.176 547.871 cv
314.723 548.066 314.203 548.16 313.613 548.164 cv
313.035 548.16 312.531 548.078 312.105 547.906 cv
311.676 547.738 311.32 547.488 311.035 547.16 cv
310.746 546.832 310.531 546.437 310.395 545.969 cv
310.254 545.504 310.188 544.973 310.188 544.375 cv
310.188 543.809 310.258 543.281 310.406 542.801 cv
310.551 542.32 310.777 541.906 311.078 541.555 cv
311.375 541.207 311.746 540.937 312.195 540.746 cv
312.641 540.555 313.164 540.457 313.762 540.457 cv
314.34 540.457 314.84 540.543 315.27 540.715 cv
315.695 540.887 316.055 541.137 316.34 541.465 cv
316.625 541.793 316.84 542.191 316.984 542.656 cv
317.125 543.125 317.195 543.652 317.199 544.234 cv
cp
315.867 544.32 mo
315.863 543.945 315.828 543.586 315.762 543.246 cv
315.688 542.91 315.57 542.617 315.41 542.359 cv
315.246 542.109 315.027 541.906 314.75 541.754 cv
314.469 541.609 314.121 541.535 313.711 541.531 cv
313.324 541.535 312.996 541.602 312.723 541.734 cv
312.445 541.871 312.219 542.062 312.043 542.309 cv
311.863 542.555 311.73 542.848 311.648 543.184 cv
311.559 543.523 311.516 543.891 311.52 544.289 cv
311.516 544.676 311.551 545.039 311.625 545.375 cv
311.691 545.715 311.809 546.008 311.977 546.258 cv
312.141 546.512 312.363 546.715 312.641 546.859 cv
312.918 547.012 313.266 547.086 313.68 547.082 cv
314.055 547.086 314.383 547.016 314.664 546.879 cv
314.941 546.746 315.168 546.559 315.348 546.309 cv
315.523 546.066 315.652 545.773 315.738 545.437 cv
315.82 545.102 315.863 544.73 315.867 544.32 cv
cp
f
322.93 537.922 mo
322.926 538.023 322.922 538.102 322.914 538.16 cv
322.902 538.223 322.891 538.273 322.879 538.305 cv
322.863 538.344 322.848 538.367 322.828 538.379 cv
322.805 538.395 322.777 538.402 322.75 538.398 cv
322.711 538.402 322.664 538.391 322.613 538.363 cv
322.555 538.344 322.488 538.316 322.414 538.285 cv
322.332 538.258 322.242 538.23 322.137 538.207 cv
322.027 538.184 321.902 538.172 321.77 538.172 cv
321.574 538.172 321.41 538.203 321.277 538.266 cv
321.137 538.328 321.027 538.426 320.949 538.559 cv
320.863 538.691 320.805 538.863 320.77 539.074 cv
320.73 539.285 320.711 539.543 320.715 539.84 cv
320.715 540.605 li
322.281 540.605 li
322.32 540.609 322.355 540.617 322.387 540.633 cv
322.414 540.652 322.441 540.684 322.465 540.727 cv
322.488 540.773 322.504 540.832 322.52 540.895 cv
322.527 540.965 322.535 541.047 322.539 541.141 cv
322.535 541.332 322.512 541.465 322.469 541.547 cv
322.418 541.633 322.355 541.676 322.281 541.672 cv
320.715 541.672 li
320.715 547.82 li
320.711 547.867 320.703 547.902 320.684 547.926 cv
320.66 547.957 320.625 547.98 320.578 548 cv
320.527 548.02 320.461 548.031 320.379 548.047 cv
320.293 548.055 320.188 548.062 320.07 548.062 cv
319.941 548.062 319.84 548.055 319.758 548.047 cv
319.672 548.031 319.605 548.02 319.559 548 cv
319.508 547.98 319.473 547.957 319.453 547.926 cv
319.43 547.902 319.418 547.867 319.422 547.82 cv
319.422 541.672 li
318.434 541.672 li
318.348 541.676 318.285 541.633 318.246 541.547 cv
318.203 541.465 318.18 541.332 318.184 541.141 cv
318.18 541.047 318.188 540.965 318.199 540.895 cv
318.207 540.832 318.223 540.773 318.246 540.727 cv
318.266 540.684 318.289 540.652 318.324 540.633 cv
318.352 540.617 318.391 540.609 318.434 540.605 cv
319.422 540.605 li
319.422 539.879 li
319.418 539.395 319.465 538.977 319.559 538.621 cv
319.648 538.273 319.785 537.984 319.973 537.762 cv
320.156 537.539 320.391 537.375 320.68 537.266 cv
320.961 537.16 321.297 537.105 321.684 537.105 cv
321.859 537.105 322.035 537.125 322.211 537.156 cv
322.379 537.195 322.512 537.23 322.609 537.266 cv
322.699 537.309 322.762 537.344 322.797 537.371 cv
322.824 537.406 322.852 537.445 322.875 537.492 cv
322.895 537.543 322.906 537.605 322.918 537.672 cv
322.922 537.746 322.926 537.828 322.93 537.922 cv
cp
f
333.129 545.187 mo
333.125 545.66 333.039 546.082 332.867 546.449 cv
332.691 546.824 332.449 547.137 332.141 547.391 cv
331.832 547.648 331.469 547.84 331.051 547.969 cv
330.629 548.098 330.18 548.16 329.699 548.164 cv
329.359 548.16 329.043 548.133 328.758 548.078 cv
328.469 548.02 328.215 547.953 327.988 547.867 cv
327.762 547.789 327.57 547.703 327.418 547.609 cv
327.262 547.523 327.156 547.445 327.098 547.383 cv
327.039 547.32 326.996 547.242 326.969 547.148 cv
326.938 547.055 326.922 546.926 326.926 546.762 cv
326.922 546.648 326.926 546.555 326.941 546.477 cv
326.949 546.402 326.965 546.34 326.988 546.293 cv
327.004 546.246 327.031 546.215 327.066 546.195 cv
327.094 546.18 327.129 546.172 327.172 546.168 cv
327.242 546.172 327.344 546.215 327.48 546.301 cv
327.609 546.391 327.781 546.488 327.992 546.59 cv
328.199 546.699 328.449 546.797 328.742 546.883 cv
329.035 546.977 329.375 547.02 329.762 547.02 cv
330.051 547.02 330.316 546.98 330.559 546.902 cv
330.797 546.824 331.004 546.715 331.184 546.57 cv
331.355 546.43 331.492 546.254 331.586 546.043 cv
331.68 545.836 331.727 545.602 331.727 545.336 cv
331.727 545.055 331.66 544.809 331.531 544.602 cv
331.398 544.402 331.227 544.227 331.016 544.07 cv
330.801 543.922 330.559 543.781 330.285 543.648 cv
330.012 543.523 329.73 543.391 329.449 543.258 cv
329.16 543.125 328.883 542.98 328.613 542.816 cv
328.344 542.66 328.102 542.469 327.891 542.25 cv
327.672 542.031 327.5 541.777 327.371 541.48 cv
327.234 541.191 327.168 540.84 327.172 540.426 cv
327.168 540.008 327.246 539.633 327.402 539.301 cv
327.555 538.973 327.766 538.695 328.043 538.469 cv
328.313 538.25 328.637 538.078 329.016 537.961 cv
329.391 537.844 329.801 537.785 330.238 537.785 cv
330.457 537.785 330.68 537.805 330.91 537.844 cv
331.133 537.883 331.344 537.934 331.547 537.996 cv
331.742 538.062 331.922 538.137 332.082 538.215 cv
332.234 538.297 332.336 538.363 332.391 538.41 cv
332.438 538.465 332.473 538.504 332.488 538.527 cv
332.504 538.559 332.516 538.594 332.527 538.637 cv
332.535 538.684 332.543 538.738 332.551 538.797 cv
332.555 538.863 332.559 538.941 332.559 539.039 cv
332.559 539.133 332.555 539.219 332.547 539.289 cv
332.539 539.367 332.527 539.426 332.512 539.473 cv
332.496 539.52 332.473 539.555 332.445 539.578 cv
332.414 539.602 332.383 539.613 332.348 539.613 cv
332.289 539.613 332.199 539.578 332.078 539.508 cv
331.953 539.437 331.801 539.355 331.629 539.262 cv
331.449 539.172 331.242 539.09 331.004 539.012 cv
330.758 538.937 330.488 538.898 330.191 538.898 cv
329.91 538.898 329.664 538.937 329.457 539.012 cv
329.246 539.09 329.074 539.191 328.941 539.312 cv
328.805 539.437 328.703 539.582 328.637 539.754 cv
328.57 539.926 328.539 540.109 328.539 540.301 cv
328.539 540.586 328.602 540.828 328.73 541.027 cv
328.859 541.23 329.031 541.41 329.25 541.562 cv
329.461 541.723 329.707 541.863 329.984 541.992 cv
330.258 542.125 330.539 542.258 330.828 542.387 cv
331.113 542.52 331.395 542.664 331.668 542.82 cv
331.941 542.98 332.188 543.168 332.406 543.383 cv
332.621 543.602 332.793 543.855 332.93 544.148 cv
333.059 544.441 333.125 544.789 333.129 545.187 cv
cp
f
340.895 547.82 mo
340.891 547.867 340.883 547.902 340.867 547.926 cv
340.848 547.957 340.813 547.98 340.77 548 cv
340.723 548.02 340.664 548.031 340.59 548.047 cv
340.512 548.055 340.418 548.062 340.313 548.062 cv
340.188 548.062 340.09 548.055 340.02 548.047 cv
339.941 548.031 339.883 548.02 339.84 548 cv
339.793 547.98 339.762 547.957 339.75 547.926 cv
339.73 547.902 339.723 547.867 339.727 547.82 cv
339.727 546.895 li
339.324 547.34 338.93 547.66 338.543 547.859 cv
338.148 548.062 337.754 548.16 337.359 548.164 cv
336.887 548.16 336.492 548.086 336.176 547.93 cv
335.855 547.777 335.598 547.566 335.402 547.297 cv
335.199 547.031 335.059 546.719 334.977 546.359 cv
334.887 546.004 334.844 545.57 334.848 545.062 cv
334.848 540.809 li
334.844 540.77 334.852 540.734 334.875 540.703 cv
334.891 540.676 334.926 540.652 334.98 540.625 cv
335.027 540.605 335.098 540.59 335.184 540.578 cv
335.266 540.574 335.367 540.57 335.496 540.566 cv
335.617 540.57 335.723 540.574 335.809 540.578 cv
335.891 540.59 335.957 540.605 336.004 540.625 cv
336.051 540.652 336.086 540.676 336.109 540.703 cv
336.129 540.734 336.137 540.77 336.141 540.809 cv
336.141 544.891 li
336.137 545.305 336.168 545.633 336.23 545.879 cv
336.289 546.125 336.379 546.336 336.504 546.508 cv
336.621 546.687 336.777 546.82 336.969 546.914 cv
337.152 547.012 337.371 547.062 337.621 547.059 cv
337.941 547.062 338.262 546.945 338.586 546.715 cv
338.902 546.488 339.242 546.152 339.602 545.707 cv
339.602 540.809 li
339.602 540.77 339.609 540.734 339.629 540.703 cv
339.645 540.676 339.68 540.652 339.734 540.625 cv
339.785 540.605 339.852 540.59 339.934 540.578 cv
340.012 540.574 340.117 540.57 340.25 540.566 cv
340.371 540.57 340.477 540.574 340.563 540.578 cv
340.645 540.59 340.707 540.605 340.754 540.625 cv
340.797 540.652 340.832 540.676 340.859 540.703 cv
340.879 540.734 340.891 540.77 340.895 540.809 cv
cp
f
349.75 544.219 mo
349.746 544.828 349.68 545.379 349.551 545.863 cv
349.414 546.352 349.219 546.766 348.965 547.105 cv
348.707 547.449 348.391 547.711 348.02 547.891 cv
347.645 548.074 347.219 548.16 346.734 548.164 cv
346.508 548.16 346.301 548.141 346.113 548.098 cv
345.926 548.051 345.738 547.98 345.559 547.883 cv
345.371 547.785 345.191 547.66 345.012 547.508 cv
344.828 547.359 344.637 547.18 344.438 546.965 cv
344.438 547.82 li
344.438 547.867 344.426 547.902 344.406 547.93 cv
344.383 547.965 344.348 547.988 344.305 548.004 cv
344.254 548.02 344.195 548.031 344.129 548.047 cv
344.055 548.055 343.965 548.062 343.859 548.062 cv
343.75 548.062 343.664 548.055 343.594 548.047 cv
343.52 548.031 343.457 548.02 343.414 548.004 cv
343.363 547.988 343.332 547.965 343.32 547.93 cv
343.301 547.902 343.293 547.867 343.297 547.82 cv
343.297 537.41 li
343.293 537.371 343.305 537.336 343.324 537.301 cv
343.34 537.273 343.371 537.246 343.426 537.223 cv
343.473 537.203 343.539 537.187 343.625 537.176 cv
343.703 537.168 343.809 537.164 343.938 537.16 cv
344.066 537.164 344.172 537.168 344.258 537.176 cv
344.336 537.187 344.402 537.203 344.449 537.223 cv
344.496 537.246 344.527 537.273 344.551 537.301 cv
344.566 537.336 344.578 537.371 344.582 537.41 cv
344.582 541.609 li
344.789 541.398 344.992 541.219 345.188 541.074 cv
345.383 540.93 345.57 540.812 345.758 540.719 cv
345.941 540.633 346.129 540.566 346.32 540.52 cv
346.504 540.48 346.703 540.457 346.914 540.457 cv
347.418 540.457 347.852 540.559 348.219 540.762 cv
348.578 540.965 348.871 541.238 349.098 541.574 cv
349.32 541.918 349.488 542.316 349.594 542.773 cv
349.695 543.23 349.746 543.711 349.75 544.219 cv
cp
348.418 544.367 mo
348.414 544.012 348.387 543.664 348.336 543.324 cv
348.277 542.988 348.184 542.691 348.047 542.43 cv
347.91 542.172 347.73 541.961 347.508 541.801 cv
347.281 541.645 347 541.566 346.668 541.562 cv
346.5 541.566 346.336 541.59 346.176 541.633 cv
346.012 541.684 345.848 541.762 345.68 541.867 cv
345.512 541.98 345.336 542.121 345.16 542.289 cv
344.977 542.465 344.785 542.68 344.582 542.934 cv
344.582 545.73 li
344.938 546.164 345.277 546.496 345.602 546.719 cv
345.926 546.949 346.262 547.062 346.613 547.059 cv
346.934 547.062 347.211 546.984 347.445 546.824 cv
347.672 546.672 347.859 546.465 348.004 546.203 cv
348.148 545.949 348.254 545.66 348.32 545.34 cv
348.383 545.023 348.414 544.699 348.418 544.367 cv
cp
f
354.887 544.082 mo
354.887 544.285 354.863 544.422 354.816 544.5 cv
354.77 544.578 354.699 544.617 354.613 544.617 cv
351.355 544.617 li
351.262 544.617 351.195 544.578 351.148 544.496 cv
351.102 544.418 351.078 544.281 351.078 544.082 cv
351.078 543.887 351.102 543.746 351.148 543.668 cv
351.195 543.59 351.262 543.551 351.355 543.551 cv
354.613 543.551 li
354.652 543.551 354.691 543.559 354.727 543.574 cv
354.758 543.59 354.785 543.621 354.813 543.664 cv
354.832 543.711 354.852 543.766 354.867 543.832 cv
354.879 543.902 354.887 543.988 354.887 544.082 cv
cp
f
358.141 547.812 mo
358.137 547.855 358.129 547.891 358.109 547.922 cv
358.086 547.953 358.047 547.98 358 547.996 cv
357.945 548.016 357.879 548.027 357.793 548.043 cv
357.707 548.055 357.598 548.062 357.473 548.062 cv
357.344 548.062 357.238 548.055 357.152 548.043 cv
357.063 548.027 356.992 548.016 356.941 547.996 cv
356.887 547.98 356.852 547.953 356.832 547.922 cv
356.809 547.891 356.797 547.855 356.801 547.812 cv
356.801 538.133 li
356.797 538.094 356.809 538.059 356.836 538.023 cv
356.855 537.996 356.895 537.969 356.953 537.949 cv
357.004 537.934 357.074 537.918 357.164 537.902 cv
357.246 537.891 357.348 537.887 357.473 537.883 cv
357.598 537.887 357.707 537.891 357.793 537.902 cv
357.879 537.918 357.945 537.934 358 537.949 cv
358.047 537.969 358.086 537.996 358.109 538.023 cv
358.129 538.059 358.137 538.094 358.141 538.133 cv
cp
f
371.129 547.82 mo
371.125 547.867 371.117 547.902 371.098 547.926 cv
371.074 547.957 371.039 547.98 370.996 548 cv
370.945 548.02 370.879 548.031 370.801 548.047 cv
370.715 548.055 370.613 548.062 370.488 548.062 cv
370.355 548.062 370.246 548.055 370.168 548.047 cv
370.082 548.031 370.016 548.02 369.969 548 cv
369.914 547.98 369.879 547.957 369.863 547.926 cv
369.84 547.902 369.832 547.867 369.832 547.82 cv
369.832 543.559 li
369.832 543.266 369.805 542.996 369.754 542.75 cv
369.699 542.508 369.617 542.297 369.504 542.117 cv
369.391 541.941 369.246 541.805 369.07 541.711 cv
368.891 541.617 368.68 541.57 368.445 541.57 cv
368.148 541.57 367.852 541.687 367.555 541.914 cv
367.25 542.148 366.922 542.48 366.566 542.918 cv
366.566 547.82 li
366.563 547.867 366.551 547.902 366.535 547.926 cv
366.512 547.957 366.48 547.98 366.434 548 cv
366.383 548.02 366.316 548.031 366.234 548.047 cv
366.148 548.055 366.043 548.062 365.922 548.062 cv
365.801 548.062 365.699 548.055 365.613 548.047 cv
365.527 548.031 365.457 548.02 365.41 548 cv
365.355 547.98 365.324 547.957 365.309 547.926 cv
365.289 547.902 365.277 547.867 365.281 547.82 cv
365.281 543.559 li
365.277 543.266 365.25 542.996 365.195 542.75 cv
365.137 542.508 365.051 542.297 364.938 542.117 cv
364.824 541.941 364.68 541.805 364.508 541.711 cv
364.328 541.617 364.121 541.57 363.887 541.57 cv
363.586 541.57 363.289 541.687 362.988 541.914 cv
362.688 542.148 362.359 542.48 362.008 542.918 cv
362.008 547.82 li
362.004 547.867 361.992 547.902 361.977 547.926 cv
361.953 547.957 361.922 547.98 361.875 548 cv
361.828 548.02 361.762 548.031 361.684 548.047 cv
361.598 548.055 361.492 548.062 361.363 548.062 cv
361.234 548.062 361.129 548.055 361.051 548.047 cv
360.965 548.031 360.898 548.02 360.852 548 cv
360.797 547.98 360.766 547.957 360.75 547.926 cv
360.73 547.902 360.719 547.867 360.723 547.82 cv
360.723 540.809 li
360.719 540.77 360.727 540.734 360.746 540.703 cv
360.758 540.676 360.789 540.652 360.84 540.625 cv
360.883 540.605 360.945 540.59 361.02 540.578 cv
361.09 540.574 361.184 540.57 361.309 540.566 cv
361.418 540.57 361.516 540.574 361.594 540.578 cv
361.668 540.59 361.727 540.605 361.77 540.625 cv
361.809 540.652 361.836 540.676 361.855 540.703 cv
361.871 540.734 361.879 540.77 361.883 540.809 cv
361.883 541.734 li
362.273 541.293 362.656 540.973 363.031 540.766 cv
363.398 540.562 363.777 540.457 364.16 540.457 cv
364.449 540.457 364.707 540.492 364.941 540.559 cv
365.168 540.629 365.375 540.723 365.555 540.844 cv
365.73 540.965 365.879 541.109 366.008 541.277 cv
366.129 541.449 366.234 541.641 366.32 541.844 cv
366.551 541.594 366.773 541.379 366.984 541.199 cv
367.195 541.027 367.398 540.883 367.594 540.77 cv
367.789 540.664 367.977 540.586 368.16 540.531 cv
368.344 540.484 368.531 540.457 368.719 540.457 cv
369.172 540.457 369.551 540.539 369.855 540.695 cv
370.16 540.859 370.406 541.07 370.602 541.332 cv
370.789 541.598 370.926 541.906 371.008 542.262 cv
371.086 542.617 371.125 542.992 371.129 543.387 cv
cp
f
378.758 547.828 mo
378.754 547.891 378.734 547.937 378.695 547.969 cv
378.652 548 378.594 548.023 378.523 548.039 cv
378.445 548.055 378.34 548.062 378.203 548.062 cv
378.066 548.062 377.957 548.055 377.879 548.039 cv
377.793 548.023 377.734 548 377.703 547.969 cv
377.664 547.937 377.648 547.891 377.652 547.828 cv
377.652 547.129 li
377.344 547.457 377 547.711 376.625 547.891 cv
376.246 548.074 375.848 548.16 375.43 548.164 cv
375.055 548.16 374.723 548.113 374.426 548.02 cv
374.129 547.922 373.875 547.785 373.664 547.602 cv
373.453 547.422 373.289 547.199 373.172 546.934 cv
373.055 546.672 372.996 546.371 373 546.027 cv
372.996 545.637 373.074 545.293 373.238 545 cv
373.395 544.711 373.629 544.469 373.934 544.277 cv
374.234 544.086 374.602 543.941 375.039 543.844 cv
375.473 543.75 375.965 543.703 376.512 543.699 cv
377.48 543.699 li
377.48 543.152 li
377.477 542.883 377.449 542.645 377.395 542.437 cv
377.336 542.23 377.242 542.059 377.117 541.918 cv
376.984 541.781 376.82 541.676 376.621 541.605 cv
376.414 541.535 376.164 541.5 375.875 541.5 cv
375.555 541.5 375.27 541.539 375.02 541.613 cv
374.762 541.691 374.543 541.773 374.355 541.863 cv
374.168 541.957 374.008 542.043 373.883 542.113 cv
373.75 542.191 373.656 542.227 373.598 542.227 cv
373.555 542.227 373.52 542.219 373.488 542.195 cv
373.457 542.18 373.43 542.148 373.406 542.102 cv
373.383 542.062 373.363 542.008 373.355 541.941 cv
373.34 541.879 373.336 541.809 373.34 541.727 cv
373.336 541.602 373.344 541.496 373.367 541.418 cv
373.383 541.344 373.43 541.273 373.5 541.203 cv
373.57 541.137 373.691 541.059 373.863 540.969 cv
374.035 540.879 374.23 540.797 374.453 540.719 cv
374.676 540.648 374.922 540.586 375.188 540.531 cv
375.453 540.484 375.719 540.457 375.992 540.457 cv
376.492 540.457 376.922 540.516 377.273 540.629 cv
377.625 540.746 377.91 540.914 378.133 541.133 cv
378.348 541.355 378.508 541.629 378.609 541.953 cv
378.707 542.285 378.754 542.668 378.758 543.098 cv
cp
377.48 544.625 mo
376.379 544.625 li
376.023 544.629 375.719 544.66 375.461 544.715 cv
375.199 544.777 374.984 544.863 374.813 544.98 cv
374.641 545.098 374.516 545.238 374.438 545.402 cv
374.355 545.566 374.313 545.754 374.316 545.965 cv
374.313 546.332 374.43 546.625 374.66 546.836 cv
374.891 547.055 375.215 547.16 375.633 547.16 cv
375.969 547.16 376.281 547.074 376.57 546.902 cv
376.859 546.73 377.16 546.469 377.48 546.113 cv
cp
f
386.977 541.125 mo
386.973 541.309 386.949 541.441 386.902 541.52 cv
386.852 541.602 386.789 541.641 386.715 541.641 cv
385.707 541.641 li
385.887 541.828 386.016 542.035 386.09 542.262 cv
386.16 542.488 386.195 542.723 386.199 542.965 cv
386.195 543.371 386.129 543.73 386.004 544.043 cv
385.871 544.355 385.688 544.621 385.445 544.832 cv
385.203 545.051 384.914 545.215 384.586 545.328 cv
384.25 545.445 383.883 545.504 383.48 545.5 cv
383.191 545.504 382.918 545.465 382.664 545.387 cv
382.402 545.312 382.207 545.219 382.07 545.102 cv
381.977 545.199 381.898 545.305 381.84 545.422 cv
381.777 545.543 381.746 545.68 381.75 545.832 cv
381.746 546.016 381.832 546.168 382.004 546.285 cv
382.172 546.41 382.395 546.473 382.676 546.48 cv
384.508 546.559 li
384.855 546.57 385.172 546.617 385.465 546.703 cv
385.754 546.789 386.008 546.914 386.223 547.07 cv
386.434 547.23 386.602 547.422 386.723 547.652 cv
386.84 547.887 386.898 548.156 386.902 548.461 cv
386.898 548.781 386.832 549.086 386.699 549.379 cv
386.563 549.668 386.355 549.922 386.078 550.145 cv
385.797 550.363 385.441 550.539 385.012 550.668 cv
384.582 550.793 384.074 550.855 383.488 550.859 cv
382.918 550.855 382.434 550.809 382.039 550.715 cv
381.641 550.617 381.316 550.484 381.063 550.32 cv
380.809 550.152 380.625 549.957 380.512 549.727 cv
380.395 549.492 380.336 549.238 380.34 548.973 cv
380.336 548.801 380.355 548.637 380.402 548.477 cv
380.441 548.312 380.504 548.16 380.59 548.016 cv
380.672 547.871 380.781 547.734 380.91 547.598 cv
381.035 547.469 381.18 547.336 381.352 547.207 cv
381.094 547.078 380.906 546.914 380.785 546.715 cv
380.664 546.52 380.605 546.309 380.605 546.074 cv
380.605 545.762 380.668 545.477 380.797 545.227 cv
380.926 544.977 381.086 544.754 381.281 544.555 cv
381.117 544.363 380.992 544.148 380.898 543.906 cv
380.805 543.668 380.758 543.375 380.758 543.027 cv
380.758 542.633 380.824 542.273 380.961 541.953 cv
381.094 541.637 381.281 541.371 381.523 541.152 cv
381.762 540.937 382.047 540.77 382.383 540.648 cv
382.715 540.535 383.082 540.477 383.48 540.473 cv
383.691 540.477 383.891 540.488 384.074 540.508 cv
384.258 540.535 384.43 540.566 384.594 540.605 cv
386.715 540.605 li
386.801 540.609 386.867 540.652 386.91 540.734 cv
386.953 540.824 386.973 540.953 386.977 541.125 cv
cp
384.969 542.973 mo
384.965 542.5 384.832 542.129 384.574 541.855 cv
384.309 541.59 383.938 541.453 383.457 541.453 cv
383.203 541.453 382.984 541.496 382.805 541.578 cv
382.617 541.664 382.465 541.777 382.344 541.922 cv
382.223 542.07 382.133 542.238 382.074 542.426 cv
382.012 542.613 381.98 542.812 381.984 543.02 cv
381.98 543.484 382.113 543.848 382.375 544.113 cv
382.637 544.379 383.004 544.512 383.48 544.508 cv
383.73 544.512 383.949 544.473 384.141 544.387 cv
384.324 544.309 384.48 544.195 384.605 544.055 cv
384.727 543.914 384.816 543.75 384.879 543.559 cv
384.934 543.375 384.965 543.18 384.969 542.973 cv
cp
385.613 548.531 mo
385.609 548.227 385.484 547.996 385.242 547.832 cv
384.992 547.672 384.66 547.582 384.242 547.57 cv
382.426 547.508 li
382.258 547.641 382.121 547.766 382.02 547.879 cv
381.91 547.996 381.828 548.105 381.766 548.215 cv
381.703 548.32 381.66 548.426 381.637 548.531 cv
381.613 548.633 381.602 548.738 381.602 548.848 cv
381.602 549.184 381.77 549.437 382.113 549.617 cv
382.453 549.789 382.934 549.879 383.551 549.879 cv
383.938 549.879 384.262 549.84 384.527 549.766 cv
384.785 549.687 384.996 549.586 385.16 549.465 cv
385.316 549.336 385.434 549.195 385.508 549.035 cv
385.574 548.875 385.609 548.707 385.613 548.531 cv
cp
f
394.539 544.012 mo
394.535 544.215 394.484 544.355 394.387 544.441 cv
394.281 544.527 394.164 544.57 394.039 544.57 cv
389.422 544.57 li
389.418 544.961 389.457 545.312 389.539 545.625 cv
389.613 545.937 389.746 546.207 389.93 546.426 cv
390.109 546.652 390.344 546.824 390.641 546.941 cv
390.93 547.066 391.289 547.125 391.715 547.121 cv
392.047 547.125 392.344 547.098 392.605 547.039 cv
392.867 546.988 393.094 546.926 393.285 546.855 cv
393.473 546.789 393.629 546.73 393.754 546.672 cv
393.875 546.621 393.969 546.594 394.031 546.59 cv
394.066 546.594 394.098 546.602 394.129 546.617 cv
394.156 546.637 394.18 546.664 394.199 546.699 cv
394.211 546.738 394.223 546.789 394.234 546.852 cv
394.238 546.918 394.242 546.996 394.246 547.09 cv
394.242 547.16 394.238 547.219 394.238 547.266 cv
394.23 547.312 394.227 547.355 394.219 547.395 cv
394.211 547.434 394.195 547.469 394.18 547.5 cv
394.156 547.531 394.133 547.562 394.109 547.59 cv
394.078 547.621 393.996 547.668 393.855 547.73 cv
393.715 547.797 393.531 547.859 393.309 547.922 cv
393.082 547.984 392.824 548.039 392.531 548.09 cv
392.238 548.137 391.926 548.16 391.594 548.164 cv
391.016 548.16 390.508 548.082 390.078 547.922 cv
389.641 547.762 389.277 547.523 388.984 547.207 cv
388.684 546.891 388.461 546.496 388.313 546.016 cv
388.164 545.539 388.09 544.98 388.09 544.344 cv
388.09 543.746 388.164 543.207 388.32 542.723 cv
388.473 542.246 388.699 541.836 388.996 541.5 cv
389.289 541.164 389.645 540.906 390.059 540.727 cv
390.473 540.547 390.938 540.457 391.453 540.457 cv
392.004 540.457 392.473 540.547 392.859 540.723 cv
393.246 540.902 393.563 541.141 393.816 541.437 cv
394.063 541.738 394.246 542.09 394.363 542.488 cv
394.477 542.895 394.535 543.324 394.539 543.777 cv
cp
393.246 543.629 mo
393.262 542.953 393.109 542.422 392.793 542.039 cv
392.477 541.656 392.008 541.465 391.391 541.461 cv
391.066 541.465 390.785 541.523 390.547 541.641 cv
390.305 541.762 390.105 541.922 389.945 542.117 cv
389.781 542.316 389.656 542.547 389.57 542.809 cv
389.48 543.07 389.43 543.344 389.422 543.629 cv
cp
f
400.906 545.91 mo
400.902 546.273 400.836 546.594 400.707 546.871 cv
400.574 547.152 400.387 547.387 400.145 547.578 cv
399.898 547.773 399.605 547.918 399.27 548.016 cv
398.93 548.113 398.559 548.16 398.156 548.164 cv
397.902 548.16 397.664 548.141 397.441 548.105 cv
397.215 548.062 397.016 548.016 396.836 547.957 cv
396.656 547.898 396.504 547.836 396.379 547.77 cv
396.254 547.707 396.16 547.648 396.105 547.594 cv
396.047 547.543 396.008 547.473 395.984 547.375 cv
395.957 547.285 395.945 547.156 395.945 546.996 cv
395.945 546.898 395.949 546.816 395.961 546.746 cv
395.969 546.68 395.98 546.625 396 546.582 cv
396.012 546.543 396.035 546.512 396.063 546.492 cv
396.09 546.477 396.121 546.469 396.16 546.465 cv
396.215 546.469 396.301 546.504 396.414 546.57 cv
396.523 546.645 396.66 546.723 396.828 546.801 cv
396.988 546.887 397.18 546.961 397.406 547.031 cv
397.625 547.102 397.883 547.137 398.18 547.137 cv
398.395 547.137 398.594 547.113 398.773 547.066 cv
398.949 547.02 399.102 546.953 399.23 546.859 cv
399.359 546.773 399.461 546.656 399.531 546.512 cv
399.602 546.375 399.637 546.207 399.637 546.012 cv
399.637 545.816 399.586 545.652 399.484 545.516 cv
399.383 545.383 399.246 545.262 399.082 545.156 cv
398.914 545.055 398.73 544.965 398.523 544.879 cv
398.313 544.801 398.098 544.715 397.879 544.625 cv
397.66 544.539 397.445 544.437 397.234 544.324 cv
397.023 544.215 396.832 544.082 396.668 543.918 cv
396.496 543.762 396.363 543.566 396.266 543.34 cv
396.16 543.117 396.109 542.852 396.113 542.539 cv
396.109 542.266 396.164 542 396.273 541.746 cv
396.379 541.496 396.539 541.277 396.754 541.086 cv
396.965 540.898 397.23 540.746 397.551 540.629 cv
397.871 540.516 398.242 540.457 398.672 540.457 cv
398.855 540.457 399.043 540.473 399.23 540.504 cv
399.414 540.535 399.582 540.574 399.738 540.621 cv
399.887 540.668 400.016 540.719 400.125 540.773 cv
400.227 540.828 400.309 540.879 400.367 540.918 cv
400.418 540.965 400.453 541 400.477 541.027 cv
400.492 541.059 400.508 541.094 400.516 541.129 cv
400.523 541.172 400.531 541.219 400.539 541.273 cv
400.547 541.332 400.551 541.402 400.551 541.484 cv
400.551 541.574 400.547 541.652 400.539 541.715 cv
400.531 541.785 400.516 541.836 400.5 541.875 cv
400.477 541.918 400.457 541.949 400.434 541.965 cv
400.406 541.984 400.375 541.992 400.348 541.992 cv
400.297 541.992 400.23 541.965 400.145 541.906 cv
400.055 541.852 399.941 541.789 399.801 541.723 cv
399.66 541.66 399.492 541.602 399.305 541.539 cv
399.113 541.484 398.898 541.453 398.656 541.453 cv
398.434 541.453 398.242 541.48 398.078 541.527 cv
397.91 541.582 397.773 541.652 397.668 541.738 cv
397.563 541.832 397.48 541.937 397.43 542.062 cv
397.371 542.187 397.344 542.324 397.348 542.469 cv
397.344 542.672 397.395 542.84 397.5 542.977 cv
397.602 543.117 397.738 543.238 397.906 543.34 cv
398.07 543.445 398.262 543.539 398.477 543.621 cv
398.688 543.707 398.902 543.793 399.125 543.879 cv
399.344 543.969 399.563 544.07 399.781 544.176 cv
399.996 544.285 400.188 544.414 400.355 544.57 cv
400.52 544.727 400.652 544.914 400.754 545.133 cv
400.852 545.352 400.902 545.613 400.906 545.91 cv
cp
f
168.551 16.035 mo
168.609 16.227 168.648 16.375 168.668 16.48 cv
168.68 16.594 168.66 16.676 168.605 16.727 cv
168.547 16.781 168.445 16.812 168.301 16.828 cv
168.152 16.84 167.953 16.848 167.703 16.848 cv
167.434 16.848 167.227 16.844 167.082 16.836 cv
166.93 16.828 166.816 16.812 166.742 16.789 cv
166.66 16.766 166.605 16.734 166.578 16.691 cv
166.543 16.652 166.516 16.598 166.5 16.527 cv
165.824 14.5 li
162.035 14.5 li
161.398 16.473 li
161.375 16.547 161.348 16.609 161.316 16.656 cv
161.281 16.707 161.227 16.746 161.152 16.773 cv
161.074 16.801 160.969 16.816 160.832 16.832 cv
160.691 16.84 160.508 16.848 160.289 16.848 cv
160.047 16.848 159.863 16.84 159.73 16.824 cv
159.594 16.809 159.5 16.773 159.449 16.711 cv
159.395 16.656 159.375 16.57 159.395 16.457 cv
159.406 16.352 159.445 16.207 159.512 16.02 cv
162.621 7.07397 li
162.648 6.98798 162.688 6.91803 162.73 6.85901 cv
162.77 6.80902 162.836 6.76599 162.93 6.73401 cv
163.02 6.70697 163.145 6.69098 163.305 6.67999 cv
163.465 6.67603 163.676 6.672 163.945 6.66803 cv
164.25 6.672 164.496 6.67603 164.676 6.67999 cv
164.855 6.69098 164.996 6.70697 165.102 6.73401 cv
165.199 6.76599 165.273 6.80902 165.32 6.86298 cv
165.363 6.922 165.398 7 165.434 7.09802 cv
cp
163.922 8.64099 mo
163.914 8.64099 li
162.488 12.926 li
165.348 12.926 li
cp
f
175.922 9.578 mo
175.918 9.60498 175.918 9.63702 175.918 9.672 cv
175.914 9.711 175.91 9.75 175.902 9.79303 cv
175.895 9.836 175.883 9.88702 175.871 9.94098 cv
175.855 10 175.84 10.066 175.82 10.137 cv
173.734 16.426 li
173.707 16.516 173.672 16.59 173.629 16.641 cv
173.582 16.699 173.508 16.742 173.41 16.77 cv
173.305 16.801 173.168 16.816 172.996 16.832 cv
172.82 16.84 172.594 16.848 172.316 16.848 cv
172.039 16.848 171.813 16.84 171.641 16.828 cv
171.465 16.812 171.328 16.793 171.23 16.762 cv
171.129 16.734 171.059 16.691 171.016 16.633 cv
170.969 16.582 170.934 16.512 170.91 16.426 cv
168.824 10.137 li
168.793 10.035 168.766 9.94098 168.75 9.85901 cv
168.727 9.77698 168.719 9.71899 168.719 9.67999 cv
168.715 9.64801 168.711 9.61298 168.715 9.578 cv
168.711 9.52698 168.727 9.47998 168.758 9.44098 cv
168.785 9.40198 168.836 9.37097 168.91 9.34399 cv
168.98 9.32001 169.078 9.30103 169.207 9.289 cv
169.332 9.28101 169.492 9.27698 169.688 9.27301 cv
169.898 9.27698 170.07 9.28497 170.203 9.29303 cv
170.328 9.30902 170.434 9.32397 170.512 9.34802 cv
170.586 9.37097 170.637 9.40601 170.672 9.44897 cv
170.699 9.49597 170.727 9.55103 170.75 9.60901 cv
172.332 14.711 li
172.379 14.906 li
172.426 14.711 li
173.984 9.60901 li
173.996 9.55103 174.02 9.49597 174.055 9.44897 cv
174.086 9.40601 174.141 9.37097 174.215 9.34802 cv
174.285 9.32397 174.383 9.30902 174.508 9.29303 cv
174.629 9.28497 174.789 9.27698 174.988 9.27301 cv
175.18 9.27698 175.336 9.28101 175.457 9.289 cv
175.578 9.30103 175.672 9.32001 175.742 9.34399 cv
175.809 9.37097 175.855 9.40198 175.883 9.44098 cv
175.906 9.47998 175.918 9.52698 175.922 9.578 cv
cp
f
183.383 12.859 mo
183.379 13.098 183.328 13.273 183.223 13.387 cv
183.113 13.504 182.965 13.562 182.785 13.559 cv
178.551 13.559 li
178.547 13.859 178.582 14.129 178.656 14.367 cv
178.723 14.609 178.836 14.812 178.992 14.98 cv
179.145 15.152 179.34 15.281 179.582 15.367 cv
179.82 15.457 180.109 15.5 180.453 15.5 cv
180.793 15.5 181.094 15.477 181.355 15.426 cv
181.613 15.379 181.84 15.324 182.031 15.262 cv
182.219 15.203 182.375 15.148 182.504 15.098 cv
182.625 15.051 182.727 15.027 182.809 15.023 cv
182.852 15.027 182.891 15.035 182.926 15.051 cv
182.953 15.07 182.98 15.102 183 15.148 cv
183.02 15.195 183.031 15.262 183.043 15.348 cv
183.047 15.434 183.051 15.543 183.055 15.672 cv
183.051 15.789 183.051 15.887 183.047 15.965 cv
183.039 16.047 183.031 16.113 183.023 16.168 cv
183.012 16.227 182.996 16.277 182.977 16.312 cv
182.957 16.355 182.93 16.391 182.898 16.426 cv
182.863 16.465 182.77 16.516 182.621 16.574 cv
182.465 16.641 182.273 16.703 182.043 16.758 cv
181.805 16.82 181.535 16.867 181.238 16.914 cv
180.934 16.953 180.613 16.977 180.273 16.98 cv
179.652 16.977 179.109 16.902 178.648 16.746 cv
178.18 16.594 177.793 16.355 177.484 16.039 cv
177.168 15.723 176.934 15.324 176.785 14.84 cv
176.629 14.359 176.555 13.793 176.559 13.137 cv
176.555 12.523 176.633 11.965 176.797 11.469 cv
176.953 10.973 177.188 10.555 177.5 10.207 cv
177.805 9.86298 178.18 9.59802 178.617 9.414 cv
179.055 9.23401 179.547 9.14502 180.102 9.14099 cv
180.68 9.14502 181.18 9.22998 181.594 9.39801 cv
182.008 9.57397 182.344 9.81201 182.609 10.113 cv
182.871 10.418 183.066 10.777 183.195 11.191 cv
183.316 11.609 183.379 12.059 183.383 12.547 cv
cp
181.48 12.297 mo
181.492 11.746 181.383 11.312 181.148 11 cv
180.914 10.687 180.547 10.531 180.055 10.527 cv
179.805 10.531 179.59 10.578 179.406 10.668 cv
179.219 10.766 179.066 10.891 178.945 11.047 cv
178.82 11.207 178.727 11.395 178.664 11.609 cv
178.598 11.824 178.559 12.055 178.551 12.297 cv
cp
f
189.457 10.23 mo
189.457 10.422 189.449 10.574 189.441 10.691 cv
189.426 10.812 189.41 10.906 189.395 10.973 cv
189.371 11.043 189.344 11.09 189.313 11.113 cv
189.273 11.141 189.23 11.152 189.184 11.152 cv
189.137 11.152 189.09 11.145 189.043 11.125 cv
188.988 11.109 188.93 11.09 188.867 11.066 cv
188.797 11.047 188.727 11.027 188.652 11.008 cv
188.57 10.992 188.484 10.984 188.395 10.98 cv
188.281 10.984 188.172 11.004 188.066 11.047 cv
187.957 11.094 187.844 11.164 187.73 11.254 cv
187.609 11.348 187.488 11.473 187.363 11.625 cv
187.234 11.785 187.098 11.977 186.953 12.203 cv
186.953 16.535 li
186.949 16.59 186.934 16.633 186.906 16.672 cv
186.871 16.711 186.816 16.746 186.746 16.77 cv
186.668 16.797 186.57 16.812 186.445 16.828 cv
186.32 16.84 186.16 16.848 185.973 16.848 cv
185.777 16.848 185.621 16.84 185.496 16.828 cv
185.371 16.812 185.27 16.797 185.195 16.77 cv
185.117 16.746 185.063 16.711 185.035 16.672 cv
185 16.633 184.984 16.59 184.988 16.535 cv
184.988 9.586 li
184.984 9.539 185 9.492 185.027 9.44897 cv
185.051 9.414 185.098 9.383 185.168 9.35199 cv
185.234 9.328 185.32 9.30902 185.43 9.29303 cv
185.535 9.28497 185.668 9.27698 185.832 9.27301 cv
185.996 9.27698 186.133 9.28497 186.242 9.29303 cv
186.348 9.30902 186.434 9.328 186.496 9.35199 cv
186.555 9.383 186.598 9.414 186.625 9.44897 cv
186.648 9.492 186.66 9.539 186.664 9.586 cv
186.664 10.449 li
186.844 10.191 187.016 9.97998 187.18 9.80902 cv
187.336 9.64502 187.492 9.508 187.641 9.40601 cv
187.785 9.30902 187.93 9.242 188.074 9.19897 cv
188.219 9.164 188.363 9.14502 188.512 9.14099 cv
188.578 9.14502 188.652 9.14801 188.73 9.15198 cv
188.809 9.164 188.887 9.17603 188.973 9.19098 cv
189.051 9.211 189.125 9.22998 189.191 9.25403 cv
189.25 9.27698 189.297 9.30499 189.328 9.328 cv
189.355 9.35901 189.375 9.38702 189.391 9.414 cv
189.402 9.44897 189.414 9.492 189.426 9.54303 cv
189.434 9.60199 189.441 9.68402 189.449 9.789 cv
189.453 9.89801 189.457 10.047 189.457 10.23 cv
cp
f
196.211 16.559 mo
196.207 16.637 196.18 16.691 196.133 16.73 cv
196.078 16.773 195.996 16.801 195.887 16.82 cv
195.77 16.836 195.605 16.848 195.391 16.848 cv
195.152 16.848 194.98 16.836 194.879 16.82 cv
194.77 16.801 194.695 16.773 194.656 16.73 cv
194.609 16.691 194.59 16.637 194.59 16.559 cv
194.59 16.008 li
194.301 16.316 193.973 16.555 193.609 16.723 cv
193.242 16.895 192.836 16.977 192.391 16.98 cv
192.02 16.977 191.68 16.93 191.371 16.836 cv
191.063 16.742 190.797 16.602 190.57 16.406 cv
190.344 16.219 190.168 15.984 190.043 15.703 cv
189.918 15.426 189.855 15.098 189.859 14.719 cv
189.855 14.32 189.934 13.969 190.094 13.664 cv
190.25 13.367 190.488 13.121 190.805 12.926 cv
191.117 12.734 191.508 12.59 191.977 12.492 cv
192.445 12.402 192.988 12.355 193.605 12.352 cv
194.285 12.352 li
194.285 11.93 li
194.285 11.715 194.262 11.523 194.219 11.359 cv
194.172 11.199 194.098 11.062 194 10.949 cv
193.895 10.844 193.762 10.762 193.594 10.707 cv
193.422 10.656 193.211 10.633 192.969 10.629 cv
192.637 10.633 192.344 10.668 192.09 10.738 cv
191.828 10.812 191.602 10.895 191.406 10.98 cv
191.207 11.074 191.043 11.152 190.914 11.223 cv
190.777 11.297 190.668 11.336 190.59 11.332 cv
190.527 11.336 190.477 11.316 190.438 11.277 cv
190.391 11.242 190.355 11.191 190.328 11.121 cv
190.297 11.059 190.273 10.973 190.262 10.871 cv
190.242 10.773 190.234 10.664 190.238 10.543 cv
190.234 10.383 190.25 10.258 190.277 10.16 cv
190.301 10.07 190.348 9.98401 190.426 9.90601 cv
190.496 9.83197 190.625 9.75 190.809 9.65997 cv
190.988 9.57001 191.199 9.48401 191.445 9.40601 cv
191.688 9.328 191.957 9.26599 192.246 9.21503 cv
192.535 9.16803 192.832 9.14502 193.141 9.14099 cv
193.684 9.14502 194.148 9.19501 194.535 9.30103 cv
194.922 9.40997 195.242 9.57397 195.492 9.79303 cv
195.742 10.012 195.922 10.297 196.039 10.645 cv
196.148 10.996 196.207 11.41 196.211 11.883 cv
cp
194.285 13.582 mo
193.535 13.582 li
193.219 13.586 192.949 13.609 192.727 13.652 cv
192.5 13.703 192.316 13.773 192.18 13.863 cv
192.035 13.961 191.934 14.074 191.871 14.203 cv
191.805 14.34 191.77 14.488 191.773 14.656 cv
191.77 14.949 191.863 15.18 192.051 15.344 cv
192.234 15.512 192.492 15.594 192.82 15.594 cv
193.094 15.594 193.344 15.523 193.578 15.383 cv
193.805 15.242 194.043 15.039 194.285 14.766 cv
cp
f
204.438 10.066 mo
204.434 10.32 204.406 10.504 204.352 10.621 cv
204.293 10.742 204.223 10.801 204.145 10.801 cv
203.324 10.801 li
203.438 10.926 203.52 11.07 203.57 11.227 cv
203.617 11.387 203.641 11.551 203.645 11.719 cv
203.641 12.129 203.574 12.488 203.441 12.801 cv
203.305 13.117 203.109 13.383 202.859 13.594 cv
202.605 13.812 202.305 13.977 201.949 14.086 cv
201.59 14.203 201.191 14.258 200.762 14.254 cv
200.535 14.258 200.324 14.23 200.121 14.172 cv
199.918 14.121 199.762 14.059 199.652 13.98 cv
199.59 14.051 199.531 14.129 199.484 14.223 cv
199.434 14.316 199.41 14.422 199.414 14.531 cv
199.41 14.687 199.477 14.809 199.609 14.902 cv
199.738 15 199.926 15.055 200.168 15.062 cv
201.859 15.125 li
202.254 15.141 202.605 15.199 202.914 15.293 cv
203.223 15.395 203.484 15.527 203.695 15.699 cv
203.906 15.875 204.066 16.086 204.176 16.328 cv
204.285 16.574 204.34 16.848 204.344 17.16 cv
204.34 17.496 204.266 17.82 204.117 18.129 cv
203.969 18.43 203.742 18.691 203.441 18.918 cv
203.137 19.137 202.758 19.316 202.305 19.449 cv
201.848 19.578 201.316 19.641 200.715 19.645 cv
200.117 19.641 199.613 19.594 199.195 19.504 cv
198.777 19.406 198.434 19.277 198.168 19.113 cv
197.898 18.945 197.703 18.746 197.586 18.52 cv
197.461 18.285 197.402 18.031 197.402 17.758 cv
197.402 17.586 197.422 17.426 197.469 17.27 cv
197.508 17.113 197.574 16.961 197.664 16.82 cv
197.746 16.676 197.852 16.543 197.977 16.41 cv
198.102 16.281 198.242 16.156 198.406 16.035 cv
198.18 15.922 198.008 15.762 197.887 15.551 cv
197.766 15.348 197.707 15.121 197.707 14.875 cv
197.707 14.574 197.773 14.297 197.914 14.039 cv
198.051 13.789 198.234 13.559 198.461 13.355 cv
198.277 13.176 198.133 12.961 198.023 12.703 cv
197.914 12.453 197.859 12.133 197.863 11.75 cv
197.859 11.348 197.93 10.988 198.074 10.664 cv
198.215 10.348 198.414 10.078 198.672 9.85498 cv
198.926 9.63702 199.23 9.46503 199.582 9.34802 cv
199.934 9.22998 200.324 9.172 200.754 9.172 cv
200.973 9.172 201.18 9.18701 201.379 9.211 cv
201.578 9.242 201.766 9.27698 201.938 9.32001 cv
204.145 9.32001 li
204.227 9.32397 204.297 9.383 204.355 9.492 cv
204.406 9.60901 204.434 9.80103 204.438 10.066 cv
cp
201.922 11.711 mo
201.918 11.34 201.816 11.051 201.609 10.84 cv
201.398 10.637 201.105 10.531 200.73 10.527 cv
200.535 10.531 200.363 10.562 200.223 10.625 cv
200.074 10.691 199.953 10.781 199.859 10.891 cv
199.758 11.004 199.688 11.133 199.645 11.281 cv
199.594 11.43 199.57 11.586 199.574 11.742 cv
199.57 12.102 199.676 12.379 199.887 12.582 cv
200.094 12.789 200.383 12.895 200.754 12.891 cv
200.949 12.895 201.117 12.863 201.266 12.797 cv
201.406 12.738 201.527 12.652 201.629 12.539 cv
201.723 12.434 201.797 12.305 201.848 12.16 cv
201.895 12.02 201.918 11.871 201.922 11.711 cv
cp
202.383 17.262 mo
202.383 17.023 202.289 16.848 202.102 16.723 cv
201.914 16.602 201.656 16.531 201.328 16.52 cv
199.934 16.48 li
199.797 16.582 199.688 16.676 199.609 16.766 cv
199.527 16.855 199.465 16.941 199.418 17.027 cv
199.367 17.109 199.332 17.191 199.32 17.27 cv
199.301 17.348 199.293 17.426 199.297 17.512 cv
199.293 17.766 199.426 17.965 199.688 18.102 cv
199.949 18.234 200.32 18.301 200.801 18.305 cv
201.094 18.301 201.34 18.27 201.547 18.215 cv
201.746 18.152 201.91 18.074 202.039 17.977 cv
202.16 17.875 202.25 17.766 202.305 17.645 cv
202.355 17.523 202.383 17.395 202.383 17.262 cv
cp
f
212.063 12.859 mo
212.059 13.098 212.008 13.273 211.902 13.387 cv
211.793 13.504 211.645 13.562 211.465 13.559 cv
207.23 13.559 li
207.227 13.859 207.262 14.129 207.336 14.367 cv
207.402 14.609 207.516 14.812 207.672 14.98 cv
207.824 15.152 208.02 15.281 208.262 15.367 cv
208.5 15.457 208.789 15.5 209.133 15.5 cv
209.473 15.5 209.773 15.477 210.035 15.426 cv
210.293 15.379 210.52 15.324 210.711 15.262 cv
210.898 15.203 211.055 15.148 211.184 15.098 cv
211.305 15.051 211.406 15.027 211.488 15.023 cv
211.531 15.027 211.57 15.035 211.605 15.051 cv
211.633 15.07 211.66 15.102 211.68 15.148 cv
211.699 15.195 211.711 15.262 211.723 15.348 cv
211.727 15.434 211.73 15.543 211.734 15.672 cv
211.73 15.789 211.73 15.887 211.727 15.965 cv
211.719 16.047 211.711 16.113 211.703 16.168 cv
211.691 16.227 211.676 16.277 211.656 16.312 cv
211.637 16.355 211.609 16.391 211.578 16.426 cv
211.543 16.465 211.449 16.516 211.301 16.574 cv
211.145 16.641 210.953 16.703 210.723 16.758 cv
210.484 16.82 210.215 16.867 209.918 16.914 cv
209.613 16.953 209.293 16.977 208.953 16.98 cv
208.332 16.977 207.789 16.902 207.328 16.746 cv
206.859 16.594 206.473 16.355 206.164 16.039 cv
205.848 15.723 205.613 15.324 205.465 14.84 cv
205.309 14.359 205.234 13.793 205.238 13.137 cv
205.234 12.523 205.313 11.965 205.477 11.469 cv
205.633 10.973 205.867 10.555 206.18 10.207 cv
206.484 9.86298 206.859 9.59802 207.297 9.414 cv
207.734 9.23401 208.227 9.14502 208.781 9.14099 cv
209.359 9.14502 209.859 9.22998 210.273 9.39801 cv
210.688 9.57397 211.023 9.81201 211.289 10.113 cv
211.551 10.418 211.746 10.777 211.875 11.191 cv
211.996 11.609 212.059 12.059 212.063 12.547 cv
cp
210.16 12.297 mo
210.172 11.746 210.063 11.312 209.828 11 cv
209.594 10.687 209.227 10.531 208.734 10.527 cv
208.484 10.531 208.27 10.578 208.086 10.668 cv
207.898 10.766 207.746 10.891 207.625 11.047 cv
207.5 11.207 207.406 11.395 207.344 11.609 cv
207.277 11.824 207.238 12.055 207.23 12.297 cv
cp
f
223.051 7.55902 mo
223.047 7.71899 223.043 7.84802 223.031 7.953 cv
223.016 8.06201 222.992 8.14801 222.969 8.20697 cv
222.938 8.27002 222.906 8.31598 222.871 8.34399 cv
222.832 8.37903 222.789 8.39502 222.746 8.39099 cv
219.449 8.39099 li
219.449 11.105 li
222.543 11.105 li
222.586 11.105 222.629 11.121 222.668 11.145 cv
222.703 11.176 222.734 11.219 222.766 11.277 cv
222.793 11.34 222.813 11.422 222.828 11.523 cv
222.836 11.629 222.844 11.758 222.848 11.914 cv
222.844 12.07 222.836 12.203 222.828 12.305 cv
222.813 12.414 222.793 12.5 222.766 12.562 cv
222.734 12.633 222.703 12.68 222.668 12.707 cv
222.629 12.738 222.586 12.754 222.543 12.75 cv
219.449 12.75 li
219.449 16.504 li
219.445 16.562 219.43 16.613 219.402 16.652 cv
219.367 16.699 219.313 16.734 219.234 16.758 cv
219.152 16.789 219.047 16.809 218.918 16.824 cv
218.785 16.84 218.617 16.848 218.422 16.848 cv
218.219 16.848 218.055 16.84 217.926 16.824 cv
217.789 16.809 217.684 16.789 217.609 16.758 cv
217.527 16.734 217.473 16.699 217.441 16.652 cv
217.406 16.613 217.387 16.562 217.391 16.504 cv
217.391 7.36298 li
217.387 7.13702 217.445 6.97302 217.566 6.867 cv
217.68 6.77002 217.824 6.71899 218 6.71503 cv
222.746 6.71503 li
222.789 6.71899 222.832 6.72998 222.871 6.758 cv
222.906 6.789 222.938 6.836 222.969 6.89801 cv
222.992 6.96503 223.016 7.05499 223.031 7.15997 cv
223.043 7.27301 223.047 7.40601 223.051 7.55902 cv
cp
f
226.566 16.535 mo
226.563 16.59 226.547 16.633 226.52 16.672 cv
226.484 16.711 226.43 16.746 226.359 16.77 cv
226.281 16.797 226.184 16.812 226.059 16.828 cv
225.934 16.84 225.773 16.848 225.586 16.848 cv
225.391 16.848 225.234 16.84 225.109 16.828 cv
224.984 16.812 224.883 16.797 224.809 16.77 cv
224.73 16.746 224.676 16.711 224.648 16.672 cv
224.613 16.633 224.598 16.59 224.602 16.535 cv
224.602 9.60199 li
224.598 9.55103 224.613 9.50403 224.648 9.46503 cv
224.676 9.42603 224.73 9.39502 224.809 9.36298 cv
224.883 9.34003 224.984 9.31598 225.109 9.297 cv
225.234 9.28497 225.391 9.27698 225.586 9.27301 cv
225.773 9.27698 225.934 9.28497 226.059 9.297 cv
226.184 9.31598 226.281 9.34003 226.359 9.36298 cv
226.43 9.39502 226.484 9.42603 226.52 9.46503 cv
226.547 9.50403 226.563 9.55103 226.566 9.60199 cv
cp
226.715 7.22998 mo
226.715 7.62903 226.633 7.90198 226.473 8.05103 cv
226.309 8.203 226.012 8.27698 225.578 8.27301 cv
225.133 8.27698 224.832 8.203 224.684 8.05902 cv
224.527 7.914 224.453 7.65198 224.453 7.27002 cv
224.453 6.875 224.531 6.60199 224.691 6.44897 cv
224.848 6.297 225.148 6.21899 225.594 6.21899 cv
226.027 6.21899 226.324 6.29303 226.48 6.44098 cv
226.637 6.59003 226.715 6.85498 226.715 7.22998 cv
cp
f
230.492 16.535 mo
230.488 16.59 230.473 16.633 230.445 16.672 cv
230.41 16.711 230.355 16.746 230.285 16.77 cv
230.207 16.797 230.109 16.812 229.984 16.828 cv
229.859 16.84 229.699 16.848 229.512 16.848 cv
229.316 16.848 229.16 16.84 229.035 16.828 cv
228.91 16.812 228.809 16.797 228.734 16.77 cv
228.656 16.746 228.602 16.711 228.574 16.672 cv
228.539 16.633 228.523 16.59 228.527 16.535 cv
228.527 6.289 li
228.523 6.23798 228.539 6.19098 228.574 6.14801 cv
228.602 6.10901 228.656 6.07397 228.734 6.04303 cv
228.809 6.01599 228.91 5.99597 229.035 5.97699 cv
229.16 5.96503 229.316 5.95697 229.512 5.953 cv
229.699 5.95697 229.859 5.96503 229.984 5.97699 cv
230.109 5.99597 230.207 6.01599 230.285 6.04303 cv
230.355 6.07397 230.41 6.10901 230.445 6.14801 cv
230.473 6.19098 230.488 6.23798 230.492 6.289 cv
cp
f
236.617 15.852 mo
236.617 16.078 236.602 16.254 236.574 16.375 cv
236.543 16.5 236.504 16.586 236.461 16.633 cv
236.41 16.684 236.344 16.727 236.254 16.766 cv
236.16 16.805 236.051 16.836 235.934 16.867 cv
235.809 16.891 235.676 16.914 235.535 16.934 cv
235.391 16.945 235.25 16.953 235.105 16.957 cv
234.715 16.953 234.375 16.902 234.09 16.809 cv
233.805 16.707 233.57 16.559 233.383 16.352 cv
233.195 16.148 233.055 15.891 232.969 15.578 cv
232.875 15.27 232.832 14.898 232.836 14.469 cv
232.836 10.91 li
232.004 10.91 li
231.902 10.914 231.828 10.852 231.777 10.727 cv
231.723 10.605 231.695 10.402 231.699 10.113 cv
231.695 9.96503 231.703 9.836 231.719 9.73401 cv
231.73 9.633 231.75 9.55103 231.777 9.48798 cv
231.801 9.42999 231.832 9.38702 231.875 9.35901 cv
231.91 9.336 231.957 9.32397 232.012 9.32001 cv
232.836 9.32001 li
232.836 7.77002 li
232.832 7.72302 232.848 7.67603 232.879 7.62903 cv
232.906 7.59003 232.957 7.55499 233.035 7.52301 cv
233.109 7.5 233.211 7.47699 233.34 7.461 cv
233.465 7.44897 233.621 7.44501 233.813 7.44098 cv
234 7.44501 234.16 7.44897 234.289 7.461 cv
234.414 7.47699 234.516 7.5 234.59 7.52301 cv
234.66 7.55499 234.711 7.59003 234.746 7.62903 cv
234.773 7.67603 234.789 7.72302 234.793 7.77002 cv
234.793 9.32001 li
236.305 9.32001 li
236.355 9.32397 236.402 9.336 236.441 9.35901 cv
236.48 9.38702 236.512 9.42999 236.539 9.48798 cv
236.563 9.55103 236.582 9.633 236.598 9.73401 cv
236.609 9.836 236.617 9.96503 236.617 10.113 cv
236.617 10.402 236.59 10.605 236.539 10.727 cv
236.484 10.852 236.41 10.914 236.313 10.91 cv
234.793 10.91 li
234.793 14.176 li
234.789 14.555 234.848 14.84 234.973 15.027 cv
235.09 15.219 235.305 15.312 235.609 15.312 cv
235.711 15.312 235.805 15.305 235.891 15.285 cv
235.973 15.27 236.047 15.25 236.113 15.223 cv
236.176 15.203 236.23 15.18 236.277 15.16 cv
236.32 15.145 236.359 15.137 236.398 15.133 cv
236.426 15.137 236.457 15.145 236.488 15.16 cv
236.516 15.18 236.535 15.219 236.555 15.27 cv
236.566 15.328 236.582 15.402 236.598 15.492 cv
236.609 15.59 236.617 15.707 236.617 15.852 cv
cp
f
244.207 12.859 mo
244.203 13.098 244.152 13.273 244.047 13.387 cv
243.938 13.504 243.789 13.562 243.609 13.559 cv
239.375 13.559 li
239.371 13.859 239.406 14.129 239.48 14.367 cv
239.547 14.609 239.66 14.812 239.816 14.98 cv
239.969 15.152 240.164 15.281 240.406 15.367 cv
240.645 15.457 240.934 15.5 241.277 15.5 cv
241.617 15.5 241.918 15.477 242.18 15.426 cv
242.438 15.379 242.664 15.324 242.855 15.262 cv
243.043 15.203 243.199 15.148 243.328 15.098 cv
243.449 15.051 243.551 15.027 243.633 15.023 cv
243.676 15.027 243.715 15.035 243.75 15.051 cv
243.777 15.07 243.805 15.102 243.824 15.148 cv
243.844 15.195 243.855 15.262 243.867 15.348 cv
243.871 15.434 243.875 15.543 243.879 15.672 cv
243.875 15.789 243.875 15.887 243.871 15.965 cv
243.863 16.047 243.855 16.113 243.848 16.168 cv
243.836 16.227 243.82 16.277 243.801 16.312 cv
243.781 16.355 243.754 16.391 243.723 16.426 cv
243.688 16.465 243.594 16.516 243.445 16.574 cv
243.289 16.641 243.098 16.703 242.867 16.758 cv
242.629 16.82 242.359 16.867 242.063 16.914 cv
241.758 16.953 241.438 16.977 241.098 16.98 cv
240.477 16.977 239.934 16.902 239.473 16.746 cv
239.004 16.594 238.617 16.355 238.309 16.039 cv
237.992 15.723 237.758 15.324 237.609 14.84 cv
237.453 14.359 237.379 13.793 237.383 13.137 cv
237.379 12.523 237.457 11.965 237.621 11.469 cv
237.777 10.973 238.012 10.555 238.324 10.207 cv
238.629 9.86298 239.004 9.59802 239.441 9.414 cv
239.879 9.23401 240.371 9.14502 240.926 9.14099 cv
241.504 9.14502 242.004 9.22998 242.418 9.39801 cv
242.832 9.57397 243.168 9.81201 243.434 10.113 cv
243.695 10.418 243.891 10.777 244.02 11.191 cv
244.141 11.609 244.203 12.059 244.207 12.547 cv
cp
242.305 12.297 mo
242.316 11.746 242.207 11.312 241.973 11 cv
241.738 10.687 241.371 10.531 240.879 10.527 cv
240.629 10.531 240.414 10.578 240.23 10.668 cv
240.043 10.766 239.891 10.891 239.77 11.047 cv
239.645 11.207 239.551 11.395 239.488 11.609 cv
239.422 11.824 239.383 12.055 239.375 12.297 cv
cp
f
250.281 10.23 mo
250.281 10.422 250.273 10.574 250.266 10.691 cv
250.25 10.812 250.234 10.906 250.219 10.973 cv
250.195 11.043 250.168 11.09 250.137 11.113 cv
250.098 11.141 250.055 11.152 250.008 11.152 cv
249.961 11.152 249.914 11.145 249.867 11.125 cv
249.813 11.109 249.754 11.09 249.691 11.066 cv
249.621 11.047 249.551 11.027 249.477 11.008 cv
249.395 10.992 249.309 10.984 249.219 10.98 cv
249.105 10.984 248.996 11.004 248.891 11.047 cv
248.781 11.094 248.668 11.164 248.555 11.254 cv
248.434 11.348 248.313 11.473 248.188 11.625 cv
248.059 11.785 247.922 11.977 247.777 12.203 cv
247.777 16.535 li
247.773 16.59 247.758 16.633 247.73 16.672 cv
247.695 16.711 247.641 16.746 247.57 16.77 cv
247.492 16.797 247.395 16.812 247.27 16.828 cv
247.145 16.84 246.984 16.848 246.797 16.848 cv
246.602 16.848 246.445 16.84 246.32 16.828 cv
246.195 16.812 246.094 16.797 246.02 16.77 cv
245.941 16.746 245.887 16.711 245.859 16.672 cv
245.824 16.633 245.809 16.59 245.813 16.535 cv
245.813 9.586 li
245.809 9.539 245.824 9.492 245.852 9.44897 cv
245.875 9.414 245.922 9.383 245.992 9.35199 cv
246.059 9.328 246.145 9.30902 246.254 9.29303 cv
246.359 9.28497 246.492 9.27698 246.656 9.27301 cv
246.82 9.27698 246.957 9.28497 247.066 9.29303 cv
247.172 9.30902 247.258 9.328 247.32 9.35199 cv
247.379 9.383 247.422 9.414 247.449 9.44897 cv
247.473 9.492 247.484 9.539 247.488 9.586 cv
247.488 10.449 li
247.668 10.191 247.84 9.97998 248.004 9.80902 cv
248.16 9.64502 248.316 9.508 248.465 9.40601 cv
248.609 9.30902 248.754 9.242 248.898 9.19897 cv
249.043 9.164 249.188 9.14502 249.336 9.14099 cv
249.402 9.14502 249.477 9.14801 249.555 9.15198 cv
249.633 9.164 249.711 9.17603 249.797 9.19098 cv
249.875 9.211 249.949 9.22998 250.016 9.25403 cv
250.074 9.27698 250.121 9.30499 250.152 9.328 cv
250.18 9.35901 250.199 9.38702 250.215 9.414 cv
250.227 9.44897 250.238 9.492 250.25 9.54303 cv
250.258 9.60199 250.266 9.68402 250.273 9.789 cv
250.277 9.89801 250.281 10.047 250.281 10.23 cv
cp
f
253.441 16.535 mo
253.438 16.59 253.422 16.633 253.395 16.672 cv
253.359 16.711 253.305 16.746 253.234 16.77 cv
253.156 16.797 253.059 16.812 252.934 16.828 cv
252.809 16.84 252.648 16.848 252.461 16.848 cv
252.266 16.848 252.109 16.84 251.984 16.828 cv
251.859 16.812 251.758 16.797 251.684 16.77 cv
251.605 16.746 251.551 16.711 251.523 16.672 cv
251.488 16.633 251.473 16.59 251.477 16.535 cv
251.477 9.60199 li
251.473 9.55103 251.488 9.50403 251.523 9.46503 cv
251.551 9.42603 251.605 9.39502 251.684 9.36298 cv
251.758 9.34003 251.859 9.31598 251.984 9.297 cv
252.109 9.28497 252.266 9.27698 252.461 9.27301 cv
252.648 9.27698 252.809 9.28497 252.934 9.297 cv
253.059 9.31598 253.156 9.34003 253.234 9.36298 cv
253.305 9.39502 253.359 9.42603 253.395 9.46503 cv
253.422 9.50403 253.438 9.55103 253.441 9.60199 cv
cp
253.59 7.22998 mo
253.59 7.62903 253.508 7.90198 253.348 8.05103 cv
253.184 8.203 252.887 8.27698 252.453 8.27301 cv
252.008 8.27698 251.707 8.203 251.559 8.05902 cv
251.402 7.914 251.328 7.65198 251.328 7.27002 cv
251.328 6.875 251.406 6.60199 251.566 6.44897 cv
251.723 6.297 252.023 6.21899 252.469 6.21899 cv
252.902 6.21899 253.199 6.29303 253.355 6.44098 cv
253.512 6.59003 253.59 6.85498 253.59 7.22998 cv
cp
f
262.043 16.535 mo
262.039 16.59 262.023 16.633 261.996 16.672 cv
261.961 16.711 261.91 16.746 261.84 16.77 cv
261.766 16.797 261.664 16.812 261.539 16.828 cv
261.41 16.84 261.254 16.848 261.07 16.848 cv
260.875 16.848 260.715 16.84 260.59 16.828 cv
260.461 16.812 260.359 16.797 260.289 16.77 cv
260.211 16.746 260.16 16.711 260.133 16.672 cv
260.098 16.633 260.082 16.59 260.086 16.535 cv
260.086 12.57 li
260.082 12.234 260.059 11.969 260.012 11.773 cv
259.961 11.582 259.887 11.418 259.797 11.281 cv
259.703 11.145 259.586 11.039 259.438 10.961 cv
259.289 10.887 259.113 10.848 258.918 10.848 cv
258.664 10.848 258.414 10.941 258.16 11.121 cv
257.906 11.305 257.641 11.566 257.367 11.914 cv
257.367 16.535 li
257.363 16.59 257.348 16.633 257.32 16.672 cv
257.285 16.711 257.23 16.746 257.16 16.77 cv
257.082 16.797 256.984 16.812 256.859 16.828 cv
256.734 16.84 256.574 16.848 256.387 16.848 cv
256.191 16.848 256.035 16.84 255.91 16.828 cv
255.785 16.812 255.684 16.797 255.609 16.77 cv
255.531 16.746 255.477 16.711 255.449 16.672 cv
255.414 16.633 255.398 16.59 255.402 16.535 cv
255.402 9.586 li
255.398 9.539 255.414 9.492 255.441 9.44897 cv
255.465 9.414 255.512 9.383 255.582 9.35199 cv
255.648 9.328 255.734 9.30902 255.844 9.29303 cv
255.949 9.28497 256.082 9.27698 256.246 9.27301 cv
256.41 9.27698 256.547 9.28497 256.656 9.29303 cv
256.762 9.30902 256.848 9.328 256.91 9.35199 cv
256.969 9.383 257.012 9.414 257.039 9.44897 cv
257.063 9.492 257.074 9.539 257.078 9.586 cv
257.078 10.387 li
257.461 9.97699 257.852 9.664 258.25 9.453 cv
258.645 9.24597 259.063 9.14502 259.496 9.14099 cv
259.965 9.14502 260.363 9.22302 260.691 9.375 cv
261.016 9.53497 261.277 9.74597 261.477 10.012 cv
261.676 10.281 261.82 10.594 261.91 10.949 cv
261.996 11.309 262.039 11.738 262.043 12.242 cv
cp
f
270.238 10.066 mo
270.234 10.32 270.207 10.504 270.152 10.621 cv
270.094 10.742 270.023 10.801 269.945 10.801 cv
269.125 10.801 li
269.238 10.926 269.32 11.07 269.371 11.227 cv
269.418 11.387 269.441 11.551 269.445 11.719 cv
269.441 12.129 269.375 12.488 269.242 12.801 cv
269.105 13.117 268.91 13.383 268.66 13.594 cv
268.406 13.812 268.105 13.977 267.75 14.086 cv
267.391 14.203 266.992 14.258 266.563 14.254 cv
266.336 14.258 266.125 14.23 265.922 14.172 cv
265.719 14.121 265.563 14.059 265.453 13.98 cv
265.391 14.051 265.332 14.129 265.285 14.223 cv
265.234 14.316 265.211 14.422 265.215 14.531 cv
265.211 14.687 265.277 14.809 265.41 14.902 cv
265.539 15 265.727 15.055 265.969 15.062 cv
267.66 15.125 li
268.055 15.141 268.406 15.199 268.715 15.293 cv
269.023 15.395 269.285 15.527 269.496 15.699 cv
269.707 15.875 269.867 16.086 269.977 16.328 cv
270.086 16.574 270.141 16.848 270.145 17.16 cv
270.141 17.496 270.066 17.82 269.918 18.129 cv
269.77 18.43 269.543 18.691 269.242 18.918 cv
268.938 19.137 268.559 19.316 268.105 19.449 cv
267.648 19.578 267.117 19.641 266.516 19.645 cv
265.918 19.641 265.414 19.594 264.996 19.504 cv
264.578 19.406 264.234 19.277 263.969 19.113 cv
263.699 18.945 263.504 18.746 263.387 18.52 cv
263.262 18.285 263.203 18.031 263.203 17.758 cv
263.203 17.586 263.223 17.426 263.27 17.27 cv
263.309 17.113 263.375 16.961 263.465 16.82 cv
263.547 16.676 263.652 16.543 263.777 16.41 cv
263.902 16.281 264.043 16.156 264.207 16.035 cv
263.98 15.922 263.809 15.762 263.688 15.551 cv
263.566 15.348 263.508 15.121 263.508 14.875 cv
263.508 14.574 263.574 14.297 263.715 14.039 cv
263.852 13.789 264.035 13.559 264.262 13.355 cv
264.078 13.176 263.934 12.961 263.824 12.703 cv
263.715 12.453 263.66 12.133 263.664 11.75 cv
263.66 11.348 263.73 10.988 263.875 10.664 cv
264.016 10.348 264.215 10.078 264.473 9.85498 cv
264.727 9.63702 265.031 9.46503 265.383 9.34802 cv
265.734 9.22998 266.125 9.172 266.555 9.172 cv
266.773 9.172 266.98 9.18701 267.18 9.211 cv
267.379 9.242 267.566 9.27698 267.738 9.32001 cv
269.945 9.32001 li
270.027 9.32397 270.098 9.383 270.156 9.492 cv
270.207 9.60901 270.234 9.80103 270.238 10.066 cv
cp
267.723 11.711 mo
267.719 11.34 267.617 11.051 267.41 10.84 cv
267.199 10.637 266.906 10.531 266.531 10.527 cv
266.336 10.531 266.164 10.562 266.023 10.625 cv
265.875 10.691 265.754 10.781 265.66 10.891 cv
265.559 11.004 265.488 11.133 265.445 11.281 cv
265.395 11.43 265.371 11.586 265.375 11.742 cv
265.371 12.102 265.477 12.379 265.688 12.582 cv
265.895 12.789 266.184 12.895 266.555 12.891 cv
266.75 12.895 266.918 12.863 267.066 12.797 cv
267.207 12.738 267.328 12.652 267.43 12.539 cv
267.523 12.434 267.598 12.305 267.648 12.16 cv
267.695 12.02 267.719 11.871 267.723 11.711 cv
cp
268.184 17.262 mo
268.184 17.023 268.09 16.848 267.902 16.723 cv
267.715 16.602 267.457 16.531 267.129 16.52 cv
265.734 16.48 li
265.598 16.582 265.488 16.676 265.41 16.766 cv
265.328 16.855 265.266 16.941 265.219 17.027 cv
265.168 17.109 265.133 17.191 265.121 17.27 cv
265.102 17.348 265.094 17.426 265.098 17.512 cv
265.094 17.766 265.227 17.965 265.488 18.102 cv
265.75 18.234 266.121 18.301 266.602 18.305 cv
266.895 18.301 267.141 18.27 267.348 18.215 cv
267.547 18.152 267.711 18.074 267.84 17.977 cv
267.961 17.875 268.051 17.766 268.105 17.645 cv
268.156 17.523 268.184 17.395 268.184 17.262 cv
cp
f
282.039 7.55902 mo
282.035 7.71503 282.027 7.84399 282.02 7.94501 cv
282.004 8.05499 281.984 8.14099 281.961 8.203 cv
281.93 8.27002 281.898 8.31598 281.863 8.34399 cv
281.82 8.37903 281.777 8.39502 281.734 8.39099 cv
279.211 8.39099 li
279.211 16.52 li
279.211 16.574 279.191 16.621 279.16 16.66 cv
279.121 16.703 279.066 16.738 278.992 16.762 cv
278.91 16.789 278.805 16.809 278.676 16.824 cv
278.539 16.84 278.375 16.848 278.18 16.848 cv
277.984 16.848 277.82 16.84 277.688 16.824 cv
277.555 16.809 277.449 16.789 277.371 16.762 cv
277.293 16.738 277.234 16.703 277.203 16.66 cv
277.164 16.621 277.148 16.574 277.152 16.52 cv
277.152 8.39099 li
274.629 8.39099 li
274.574 8.39502 274.527 8.37903 274.496 8.34399 cv
274.457 8.31598 274.426 8.27002 274.402 8.203 cv
274.371 8.14099 274.352 8.05499 274.344 7.94501 cv
274.328 7.84399 274.324 7.71503 274.324 7.55902 cv
274.324 7.40601 274.328 7.27301 274.344 7.15997 cv
274.352 7.05499 274.371 6.96503 274.402 6.89801 cv
274.426 6.836 274.457 6.789 274.496 6.758 cv
274.527 6.72998 274.574 6.71899 274.629 6.71503 cv
281.734 6.71503 li
281.777 6.71899 281.82 6.72998 281.863 6.758 cv
281.898 6.789 281.93 6.836 281.961 6.89801 cv
281.984 6.96503 282.004 7.05499 282.02 7.15997 cv
282.027 7.27301 282.035 7.40601 282.039 7.55902 cv
cp
f
285.074 16.535 mo
285.07 16.59 285.055 16.633 285.027 16.672 cv
284.992 16.711 284.938 16.746 284.867 16.77 cv
284.789 16.797 284.691 16.812 284.566 16.828 cv
284.441 16.84 284.281 16.848 284.094 16.848 cv
283.898 16.848 283.742 16.84 283.617 16.828 cv
283.492 16.812 283.391 16.797 283.316 16.77 cv
283.238 16.746 283.184 16.711 283.156 16.672 cv
283.121 16.633 283.105 16.59 283.109 16.535 cv
283.109 9.60199 li
283.105 9.55103 283.121 9.50403 283.156 9.46503 cv
283.184 9.42603 283.238 9.39502 283.316 9.36298 cv
283.391 9.34003 283.492 9.31598 283.617 9.297 cv
283.742 9.28497 283.898 9.27698 284.094 9.27301 cv
284.281 9.27698 284.441 9.28497 284.566 9.297 cv
284.691 9.31598 284.789 9.34003 284.867 9.36298 cv
284.938 9.39502 284.992 9.42603 285.027 9.46503 cv
285.055 9.50403 285.07 9.55103 285.074 9.60199 cv
cp
285.223 7.22998 mo
285.223 7.62903 285.141 7.90198 284.98 8.05103 cv
284.816 8.203 284.52 8.27698 284.086 8.27301 cv
283.641 8.27698 283.34 8.203 283.191 8.05902 cv
283.035 7.914 282.961 7.65198 282.961 7.27002 cv
282.961 6.875 283.039 6.60199 283.199 6.44897 cv
283.355 6.297 283.656 6.21899 284.102 6.21899 cv
284.535 6.21899 284.832 6.29303 284.988 6.44098 cv
285.145 6.59003 285.223 6.85498 285.223 7.22998 cv
cp
f
298.129 16.535 mo
298.125 16.59 298.109 16.633 298.082 16.672 cv
298.047 16.711 297.996 16.746 297.926 16.77 cv
297.852 16.797 297.75 16.812 297.629 16.828 cv
297.504 16.84 297.348 16.848 297.156 16.848 cv
296.957 16.848 296.797 16.84 296.672 16.828 cv
296.547 16.812 296.445 16.797 296.371 16.77 cv
296.293 16.746 296.242 16.711 296.215 16.672 cv
296.188 16.633 296.172 16.59 296.176 16.535 cv
296.176 12.414 li
296.172 12.184 296.152 11.969 296.109 11.773 cv
296.063 11.582 295.992 11.418 295.906 11.281 cv
295.813 11.145 295.699 11.039 295.563 10.961 cv
295.422 10.887 295.258 10.848 295.066 10.848 cv
294.832 10.848 294.594 10.941 294.355 11.121 cv
294.117 11.305 293.859 11.566 293.578 11.914 cv
293.578 16.535 li
293.578 16.59 293.563 16.633 293.531 16.672 cv
293.5 16.711 293.445 16.746 293.371 16.77 cv
293.293 16.797 293.191 16.812 293.07 16.828 cv
292.945 16.84 292.793 16.848 292.605 16.848 cv
292.41 16.848 292.25 16.84 292.129 16.828 cv
292 16.812 291.898 16.797 291.828 16.77 cv
291.75 16.746 291.699 16.711 291.668 16.672 cv
291.637 16.633 291.621 16.59 291.621 16.535 cv
291.621 12.414 li
291.621 12.184 291.598 11.969 291.555 11.773 cv
291.512 11.582 291.445 11.418 291.359 11.281 cv
291.266 11.145 291.152 11.039 291.016 10.961 cv
290.871 10.887 290.707 10.848 290.523 10.848 cv
290.281 10.848 290.043 10.941 289.805 11.121 cv
289.566 11.305 289.309 11.566 289.035 11.914 cv
289.035 16.535 li
289.031 16.59 289.016 16.633 288.988 16.672 cv
288.953 16.711 288.898 16.746 288.828 16.77 cv
288.75 16.797 288.652 16.812 288.527 16.828 cv
288.402 16.84 288.242 16.848 288.055 16.848 cv
287.859 16.848 287.703 16.84 287.578 16.828 cv
287.453 16.812 287.352 16.797 287.277 16.77 cv
287.199 16.746 287.145 16.711 287.117 16.672 cv
287.082 16.633 287.066 16.59 287.07 16.535 cv
287.07 9.586 li
287.066 9.539 287.082 9.492 287.109 9.44897 cv
287.133 9.414 287.18 9.383 287.25 9.35199 cv
287.316 9.328 287.402 9.30902 287.512 9.29303 cv
287.617 9.28497 287.75 9.27698 287.914 9.27301 cv
288.078 9.27698 288.215 9.28497 288.324 9.29303 cv
288.43 9.30902 288.516 9.328 288.578 9.35199 cv
288.637 9.383 288.68 9.414 288.707 9.44897 cv
288.73 9.492 288.742 9.539 288.746 9.586 cv
288.746 10.387 li
289.129 9.97699 289.512 9.664 289.895 9.453 cv
290.273 9.24597 290.676 9.14502 291.094 9.14099 cv
291.379 9.14502 291.633 9.172 291.863 9.22998 cv
292.09 9.29303 292.297 9.37903 292.477 9.48798 cv
292.656 9.60199 292.809 9.73798 292.938 9.89099 cv
293.066 10.047 293.176 10.219 293.266 10.41 cv
293.473 10.187 293.676 9.99597 293.879 9.836 cv
294.074 9.67603 294.273 9.54303 294.469 9.44098 cv
294.664 9.34003 294.859 9.26599 295.055 9.21503 cv
295.25 9.16803 295.449 9.14502 295.652 9.14099 cv
296.113 9.14502 296.5 9.22302 296.82 9.375 cv
297.133 9.53497 297.391 9.74597 297.586 10.012 cv
297.781 10.281 297.918 10.594 298.004 10.949 cv
298.082 11.309 298.125 11.687 298.129 12.086 cv
cp
f
306.465 12.859 mo
306.461 13.098 306.41 13.273 306.305 13.387 cv
306.195 13.504 306.047 13.562 305.867 13.559 cv
301.633 13.559 li
301.629 13.859 301.664 14.129 301.738 14.367 cv
301.805 14.609 301.918 14.812 302.074 14.98 cv
302.227 15.152 302.422 15.281 302.664 15.367 cv
302.902 15.457 303.191 15.5 303.535 15.5 cv
303.875 15.5 304.176 15.477 304.438 15.426 cv
304.695 15.379 304.922 15.324 305.113 15.262 cv
305.301 15.203 305.457 15.148 305.586 15.098 cv
305.707 15.051 305.809 15.027 305.891 15.023 cv
305.934 15.027 305.973 15.035 306.008 15.051 cv
306.035 15.07 306.063 15.102 306.082 15.148 cv
306.102 15.195 306.113 15.262 306.125 15.348 cv
306.129 15.434 306.133 15.543 306.137 15.672 cv
306.133 15.789 306.133 15.887 306.129 15.965 cv
306.121 16.047 306.113 16.113 306.105 16.168 cv
306.094 16.227 306.078 16.277 306.059 16.312 cv
306.039 16.355 306.012 16.391 305.98 16.426 cv
305.945 16.465 305.852 16.516 305.703 16.574 cv
305.547 16.641 305.355 16.703 305.125 16.758 cv
304.887 16.82 304.617 16.867 304.32 16.914 cv
304.016 16.953 303.695 16.977 303.355 16.98 cv
302.734 16.977 302.191 16.902 301.73 16.746 cv
301.262 16.594 300.875 16.355 300.566 16.039 cv
300.25 15.723 300.016 15.324 299.867 14.84 cv
299.711 14.359 299.637 13.793 299.641 13.137 cv
299.637 12.523 299.715 11.965 299.879 11.469 cv
300.035 10.973 300.27 10.555 300.582 10.207 cv
300.887 9.86298 301.262 9.59802 301.699 9.414 cv
302.137 9.23401 302.629 9.14502 303.184 9.14099 cv
303.762 9.14502 304.262 9.22998 304.676 9.39801 cv
305.09 9.57397 305.426 9.81201 305.691 10.113 cv
305.953 10.418 306.148 10.777 306.277 11.191 cv
306.398 11.609 306.461 12.059 306.465 12.547 cv
cp
304.563 12.297 mo
304.574 11.746 304.465 11.312 304.23 11 cv
303.996 10.687 303.629 10.531 303.137 10.527 cv
302.887 10.531 302.672 10.578 302.488 10.668 cv
302.301 10.766 302.148 10.891 302.027 11.047 cv
301.902 11.207 301.809 11.395 301.746 11.609 cv
301.68 11.824 301.641 12.055 301.633 12.297 cv
cp
f
312.965 14.57 mo
312.961 14.969 312.887 15.316 312.742 15.617 cv
312.594 15.918 312.387 16.172 312.117 16.371 cv
311.844 16.578 311.523 16.727 311.156 16.828 cv
310.789 16.926 310.387 16.977 309.957 16.98 cv
309.691 16.977 309.445 16.957 309.211 16.922 cv
308.977 16.879 308.766 16.832 308.578 16.773 cv
308.391 16.715 308.234 16.652 308.109 16.59 cv
307.984 16.527 307.891 16.469 307.836 16.414 cv
307.777 16.359 307.734 16.277 307.707 16.16 cv
307.672 16.047 307.656 15.871 307.66 15.641 cv
307.656 15.492 307.664 15.371 307.676 15.277 cv
307.684 15.187 307.699 15.117 307.723 15.059 cv
307.742 15.008 307.766 14.969 307.801 14.949 cv
307.828 14.934 307.867 14.926 307.914 14.922 cv
307.969 14.926 308.055 14.957 308.168 15.02 cv
308.277 15.086 308.414 15.16 308.586 15.234 cv
308.75 15.316 308.945 15.387 309.164 15.453 cv
309.383 15.523 309.633 15.559 309.918 15.555 cv
310.094 15.559 310.25 15.539 310.391 15.5 cv
310.523 15.465 310.645 15.414 310.75 15.344 cv
310.848 15.277 310.922 15.191 310.977 15.086 cv
311.023 14.984 311.051 14.863 311.055 14.727 cv
311.051 14.57 311.004 14.437 310.91 14.328 cv
310.816 14.219 310.688 14.121 310.531 14.035 cv
310.367 13.953 310.188 13.875 309.992 13.801 cv
309.789 13.73 309.586 13.652 309.375 13.559 cv
309.164 13.473 308.957 13.371 308.762 13.254 cv
308.559 13.145 308.379 13.004 308.223 12.836 cv
308.059 12.672 307.934 12.473 307.84 12.234 cv
307.746 12.004 307.699 11.723 307.699 11.391 cv
307.699 11.062 307.762 10.758 307.891 10.477 cv
308.02 10.203 308.207 9.96503 308.453 9.76599 cv
308.695 9.57001 308.992 9.41803 309.344 9.30499 cv
309.691 9.19897 310.086 9.14502 310.527 9.14099 cv
310.742 9.14502 310.953 9.15997 311.16 9.18701 cv
311.363 9.22302 311.551 9.26202 311.719 9.30499 cv
311.883 9.35498 312.023 9.40601 312.141 9.45697 cv
312.254 9.51599 312.336 9.56201 312.387 9.59802 cv
312.434 9.64099 312.469 9.67999 312.492 9.71503 cv
312.512 9.758 312.523 9.80499 312.535 9.85498 cv
312.543 9.90997 312.555 9.97699 312.563 10.055 cv
312.57 10.141 312.574 10.238 312.574 10.355 cv
312.574 10.496 312.57 10.613 312.563 10.699 cv
312.555 10.793 312.539 10.863 312.523 10.91 cv
312.504 10.965 312.48 11 312.453 11.016 cv
312.418 11.039 312.383 11.047 312.344 11.043 cv
312.293 11.047 312.219 11.02 312.125 10.961 cv
312.023 10.91 311.902 10.852 311.754 10.785 cv
311.605 10.727 311.434 10.668 311.238 10.609 cv
311.043 10.559 310.82 10.531 310.574 10.527 cv
310.395 10.531 310.242 10.551 310.113 10.582 cv
309.98 10.621 309.871 10.672 309.793 10.738 cv
309.707 10.809 309.645 10.887 309.605 10.977 cv
309.559 11.07 309.539 11.168 309.543 11.27 cv
309.539 11.43 309.59 11.566 309.691 11.672 cv
309.789 11.785 309.918 11.879 310.082 11.961 cv
310.242 12.047 310.426 12.125 310.633 12.195 cv
310.836 12.27 311.043 12.352 311.254 12.434 cv
311.461 12.523 311.668 12.621 311.879 12.734 cv
312.082 12.848 312.266 12.988 312.426 13.152 cv
312.586 13.32 312.715 13.52 312.816 13.75 cv
312.91 13.984 312.961 14.258 312.965 14.57 cv
cp
f
325.156 12.988 mo
325.152 13.586 325.074 14.129 324.922 14.613 cv
324.762 15.105 324.527 15.523 324.211 15.875 cv
323.895 16.227 323.496 16.5 323.02 16.691 cv
322.539 16.883 321.98 16.977 321.344 16.98 cv
320.723 16.977 320.184 16.895 319.73 16.723 cv
319.27 16.555 318.891 16.305 318.594 15.977 cv
318.289 15.652 318.066 15.25 317.922 14.77 cv
317.777 14.293 317.707 13.746 317.707 13.129 cv
317.707 12.539 317.785 12 317.941 11.508 cv
318.098 11.02 318.336 10.598 318.656 10.246 cv
318.973 9.89801 319.367 9.625 319.844 9.42999 cv
320.316 9.23798 320.875 9.14502 321.516 9.14099 cv
322.141 9.14502 322.68 9.22699 323.137 9.39502 cv
323.594 9.56598 323.973 9.81598 324.27 10.141 cv
324.566 10.469 324.789 10.871 324.938 11.348 cv
325.082 11.828 325.152 12.375 325.156 12.988 cv
cp
323.137 13.066 mo
323.133 12.73 323.105 12.414 323.055 12.121 cv
322.996 11.836 322.902 11.586 322.777 11.371 cv
322.645 11.16 322.473 10.992 322.262 10.871 cv
322.043 10.754 321.773 10.695 321.445 10.691 cv
321.156 10.695 320.902 10.75 320.684 10.852 cv
320.465 10.961 320.285 11.117 320.145 11.32 cv
320.004 11.527 319.898 11.773 319.828 12.059 cv
319.758 12.352 319.723 12.68 319.723 13.043 cv
319.723 13.391 319.75 13.707 319.809 13.992 cv
319.863 14.285 319.957 14.535 320.086 14.746 cv
320.211 14.961 320.383 15.125 320.605 15.238 cv
320.82 15.359 321.09 15.418 321.414 15.414 cv
321.707 15.418 321.965 15.363 322.188 15.254 cv
322.402 15.148 322.582 14.996 322.723 14.789 cv
322.863 14.59 322.965 14.344 323.035 14.055 cv
323.098 13.77 323.133 13.441 323.137 13.066 cv
cp
f
330.941 6.93402 mo
330.938 7.086 330.934 7.20697 330.926 7.297 cv
330.914 7.39099 330.898 7.461 330.879 7.508 cv
330.855 7.55902 330.832 7.59399 330.809 7.60901 cv
330.781 7.62903 330.754 7.63702 330.723 7.63702 cv
330.684 7.63702 330.641 7.62903 330.602 7.60901 cv
330.555 7.59399 330.5 7.57397 330.438 7.55103 cv
330.367 7.53101 330.293 7.51202 330.207 7.492 cv
330.117 7.47699 330.012 7.46899 329.895 7.46503 cv
329.75 7.46899 329.629 7.48798 329.531 7.53101 cv
329.43 7.578 329.348 7.64801 329.281 7.742 cv
329.211 7.84003 329.16 7.96503 329.133 8.117 cv
329.098 8.27002 329.082 8.45697 329.086 8.67999 cv
329.086 9.32001 li
330.355 9.32001 li
330.398 9.32397 330.441 9.336 330.484 9.35901 cv
330.52 9.38702 330.555 9.42999 330.582 9.48798 cv
330.605 9.55103 330.625 9.633 330.641 9.73401 cv
330.652 9.836 330.656 9.96503 330.66 10.113 cv
330.656 10.402 330.633 10.605 330.582 10.727 cv
330.527 10.852 330.449 10.914 330.355 10.91 cv
329.086 10.91 li
329.086 16.535 li
329.082 16.59 329.066 16.633 329.039 16.672 cv
329.004 16.711 328.953 16.746 328.883 16.77 cv
328.809 16.797 328.707 16.812 328.578 16.828 cv
328.445 16.84 328.285 16.848 328.102 16.848 cv
327.914 16.848 327.758 16.84 327.633 16.828 cv
327.504 16.812 327.402 16.797 327.328 16.77 cv
327.25 16.746 327.199 16.711 327.172 16.672 cv
327.141 16.633 327.125 16.59 327.129 16.535 cv
327.129 10.91 li
326.258 10.91 li
326.156 10.914 326.082 10.852 326.035 10.727 cv
325.984 10.605 325.957 10.402 325.961 10.113 cv
325.957 9.96503 325.965 9.836 325.98 9.73401 cv
325.992 9.633 326.012 9.55103 326.035 9.48798 cv
326.059 9.42999 326.09 9.38702 326.129 9.35901 cv
326.168 9.336 326.211 9.32397 326.266 9.32001 cv
327.129 9.32001 li
327.129 8.73401 li
327.125 8.26599 327.172 7.85199 327.27 7.492 cv
327.359 7.13702 327.508 6.84003 327.711 6.60498 cv
327.91 6.37097 328.164 6.19501 328.473 6.07001 cv
328.781 5.953 329.145 5.89099 329.57 5.89099 cv
329.766 5.89099 329.957 5.90997 330.145 5.94098 cv
330.324 5.97998 330.469 6.01599 330.574 6.05103 cv
330.676 6.09399 330.746 6.12903 330.785 6.15997 cv
330.82 6.19501 330.852 6.24597 330.875 6.30902 cv
330.898 6.375 330.914 6.45697 330.926 6.55902 cv
330.934 6.65997 330.938 6.78497 330.941 6.93402 cv
cp
f
341.488 13.777 mo
341.484 14.309 341.387 14.773 341.191 15.172 cv
340.992 15.574 340.727 15.91 340.391 16.176 cv
340.051 16.445 339.652 16.645 339.203 16.777 cv
338.75 16.91 338.27 16.977 337.758 16.98 cv
337.406 16.977 337.082 16.949 336.785 16.895 cv
336.484 16.836 336.223 16.77 335.996 16.687 cv
335.766 16.609 335.574 16.523 335.422 16.434 cv
335.27 16.348 335.16 16.27 335.094 16.199 cv
335.023 16.133 334.973 16.035 334.949 15.91 cv
334.918 15.785 334.906 15.602 334.906 15.359 cv
334.906 15.199 334.91 15.066 334.922 14.953 cv
334.93 14.848 334.945 14.758 334.973 14.687 cv
334.992 14.621 335.023 14.574 335.066 14.543 cv
335.102 14.52 335.148 14.504 335.199 14.5 cv
335.27 14.504 335.371 14.547 335.508 14.629 cv
335.637 14.719 335.809 14.812 336.02 14.914 cv
336.227 15.02 336.473 15.117 336.762 15.199 cv
337.047 15.289 337.383 15.332 337.766 15.328 cv
338.016 15.332 338.238 15.301 338.434 15.238 cv
338.629 15.18 338.797 15.094 338.938 14.984 cv
339.074 14.875 339.18 14.742 339.254 14.582 cv
339.324 14.422 339.359 14.242 339.363 14.043 cv
339.359 13.816 339.297 13.621 339.176 13.453 cv
339.047 13.293 338.883 13.148 338.688 13.02 cv
338.484 12.895 338.258 12.773 338.004 12.66 cv
337.75 12.551 337.488 12.434 337.219 12.305 cv
336.945 12.184 336.684 12.039 336.43 11.879 cv
336.176 11.723 335.949 11.535 335.75 11.312 cv
335.547 11.094 335.383 10.832 335.262 10.527 cv
335.137 10.227 335.074 9.867 335.078 9.44501 cv
335.074 8.96503 335.164 8.539 335.344 8.172 cv
335.52 7.80902 335.762 7.50403 336.07 7.258 cv
336.371 7.02002 336.73 6.84003 337.145 6.71899 cv
337.559 6.60199 337.996 6.54303 338.457 6.539 cv
338.695 6.54303 338.934 6.55902 339.176 6.59399 cv
339.414 6.633 339.637 6.68402 339.844 6.742 cv
340.051 6.80499 340.234 6.875 340.398 6.94897 cv
340.555 7.03101 340.664 7.09399 340.719 7.14502 cv
340.77 7.19897 340.805 7.24597 340.824 7.27698 cv
340.84 7.31598 340.855 7.36298 340.871 7.422 cv
340.883 7.48401 340.891 7.55902 340.898 7.64801 cv
340.902 7.742 340.906 7.85498 340.906 7.98798 cv
340.906 8.14099 340.902 8.27002 340.895 8.37097 cv
340.887 8.47699 340.871 8.56201 340.855 8.625 cv
340.832 8.69501 340.809 8.742 340.777 8.77301 cv
340.742 8.80499 340.695 8.82001 340.641 8.82001 cv
340.582 8.82001 340.492 8.78497 340.367 8.711 cv
340.242 8.64099 340.086 8.56201 339.906 8.47302 cv
339.723 8.39099 339.516 8.31201 339.277 8.242 cv
339.035 8.17603 338.77 8.14099 338.488 8.13702 cv
338.262 8.14099 338.07 8.16803 337.906 8.21899 cv
337.738 8.27301 337.598 8.34802 337.488 8.44098 cv
337.375 8.539 337.293 8.65601 337.238 8.789 cv
337.184 8.92999 337.156 9.07001 337.156 9.21899 cv
337.156 9.44501 337.215 9.64099 337.34 9.80103 cv
337.457 9.96503 337.621 10.109 337.832 10.234 cv
338.035 10.363 338.27 10.484 338.527 10.594 cv
338.785 10.711 339.051 10.828 339.324 10.949 cv
339.594 11.078 339.855 11.219 340.117 11.375 cv
340.375 11.531 340.609 11.723 340.813 11.941 cv
341.016 12.168 341.176 12.426 341.301 12.723 cv
341.422 13.02 341.484 13.371 341.488 13.777 cv
cp
f
349.539 16.535 mo
349.535 16.59 349.523 16.633 349.5 16.672 cv
349.473 16.711 349.426 16.746 349.363 16.77 cv
349.297 16.797 349.211 16.812 349.105 16.828 cv
349 16.84 348.867 16.848 348.707 16.848 cv
348.531 16.848 348.391 16.84 348.289 16.828 cv
348.18 16.812 348.098 16.797 348.035 16.77 cv
347.973 16.746 347.926 16.711 347.902 16.672 cv
347.871 16.633 347.859 16.59 347.863 16.535 cv
347.863 15.734 li
347.477 16.148 347.086 16.461 346.691 16.668 cv
346.289 16.875 345.879 16.977 345.457 16.98 cv
344.977 16.977 344.574 16.902 344.25 16.746 cv
343.926 16.594 343.664 16.379 343.465 16.109 cv
343.262 15.84 343.117 15.527 343.035 15.168 cv
342.945 14.812 342.902 14.371 342.906 13.84 cv
342.906 9.586 li
342.902 9.539 342.918 9.492 342.949 9.44897 cv
342.977 9.414 343.027 9.383 343.105 9.35199 cv
343.18 9.328 343.281 9.30902 343.41 9.29303 cv
343.535 9.28497 343.691 9.27698 343.883 9.27301 cv
344.07 9.27698 344.23 9.28497 344.355 9.29303 cv
344.48 9.30902 344.578 9.328 344.656 9.35199 cv
344.727 9.383 344.781 9.414 344.816 9.44897 cv
344.844 9.492 344.859 9.539 344.863 9.586 cv
344.863 13.512 li
344.859 13.879 344.883 14.156 344.934 14.348 cv
344.977 14.539 345.047 14.703 345.148 14.84 cv
345.242 14.98 345.367 15.086 345.516 15.16 cv
345.664 15.238 345.836 15.277 346.031 15.273 cv
346.281 15.277 346.531 15.187 346.785 15 cv
347.035 14.82 347.305 14.555 347.59 14.207 cv
347.59 9.586 li
347.59 9.539 347.602 9.492 347.633 9.44897 cv
347.656 9.414 347.711 9.383 347.789 9.35199 cv
347.863 9.328 347.961 9.30902 348.09 9.29303 cv
348.211 9.28497 348.371 9.27698 348.566 9.27301 cv
348.758 9.27698 348.914 9.28497 349.039 9.29303 cv
349.16 9.30902 349.262 9.328 349.336 9.35199 cv
349.406 9.383 349.457 9.414 349.492 9.44897 cv
349.52 9.492 349.535 9.539 349.539 9.586 cv
cp
f
358.469 12.965 mo
358.469 13.586 358.398 14.145 358.266 14.637 cv
358.125 15.133 357.93 15.551 357.68 15.898 cv
357.422 16.246 357.109 16.516 356.742 16.699 cv
356.367 16.887 355.945 16.977 355.477 16.98 cv
355.238 16.977 355.02 16.953 354.82 16.914 cv
354.613 16.867 354.422 16.801 354.238 16.699 cv
354.055 16.605 353.871 16.48 353.695 16.324 cv
353.512 16.176 353.328 15.992 353.145 15.781 cv
353.145 16.535 li
353.141 16.598 353.129 16.645 353.102 16.68 cv
353.07 16.723 353.023 16.754 352.961 16.777 cv
352.895 16.801 352.805 16.816 352.699 16.832 cv
352.59 16.84 352.461 16.848 352.305 16.848 cv
352.141 16.848 352.004 16.84 351.902 16.832 cv
351.793 16.816 351.707 16.801 351.645 16.777 cv
351.574 16.754 351.531 16.723 351.508 16.68 cv
351.48 16.645 351.465 16.598 351.469 16.535 cv
351.469 6.289 li
351.465 6.23798 351.48 6.19098 351.516 6.14801 cv
351.543 6.10901 351.598 6.07397 351.676 6.04303 cv
351.75 6.01599 351.852 5.99597 351.977 5.97699 cv
352.102 5.96503 352.258 5.95697 352.453 5.953 cv
352.641 5.95697 352.801 5.96503 352.926 5.97699 cv
353.051 5.99597 353.148 6.01599 353.227 6.04303 cv
353.297 6.07397 353.352 6.10901 353.387 6.14801 cv
353.414 6.19098 353.43 6.23798 353.434 6.289 cv
353.434 10.129 li
353.609 9.953 353.785 9.80499 353.965 9.67999 cv
354.137 9.55902 354.313 9.453 354.492 9.37097 cv
354.664 9.29303 354.848 9.23401 355.039 9.19501 cv
355.223 9.15997 355.422 9.14502 355.633 9.14099 cv
356.145 9.14502 356.578 9.24597 356.941 9.44897 cv
357.297 9.65601 357.59 9.93402 357.816 10.281 cv
358.039 10.629 358.203 11.035 358.313 11.5 cv
358.414 11.965 358.469 12.453 358.469 12.965 cv
cp
356.434 13.105 mo
356.43 12.812 356.406 12.527 356.367 12.25 cv
356.32 11.977 356.246 11.734 356.137 11.52 cv
356.027 11.309 355.883 11.137 355.711 11.008 cv
355.535 10.883 355.316 10.82 355.055 10.816 cv
354.922 10.82 354.797 10.836 354.672 10.871 cv
354.547 10.91 354.418 10.973 354.285 11.059 cv
354.152 11.148 354.016 11.266 353.879 11.402 cv
353.734 11.543 353.586 11.715 353.434 11.922 cv
353.434 14.23 li
353.707 14.586 353.969 14.855 354.223 15.035 cv
354.473 15.223 354.738 15.312 355.016 15.312 cv
355.27 15.312 355.484 15.25 355.664 15.117 cv
355.836 14.992 355.984 14.824 356.102 14.613 cv
356.219 14.41 356.301 14.172 356.355 13.902 cv
356.402 13.641 356.43 13.375 356.434 13.105 cv
cp
f
363.566 12.883 mo
363.563 13.184 363.535 13.395 363.48 13.512 cv
363.422 13.637 363.332 13.695 363.207 13.691 cv
359.965 13.691 li
359.836 13.695 359.742 13.633 359.688 13.508 cv
359.625 13.387 359.598 13.18 359.602 12.883 cv
359.598 12.594 359.625 12.387 359.688 12.266 cv
359.742 12.148 359.836 12.09 359.965 12.086 cv
363.207 12.086 li
363.27 12.09 363.32 12.102 363.367 12.125 cv
363.406 12.152 363.445 12.199 363.48 12.258 cv
363.508 12.324 363.531 12.406 363.547 12.508 cv
363.559 12.613 363.563 12.738 363.566 12.883 cv
cp
f
367.215 16.52 mo
367.211 16.574 367.195 16.621 367.164 16.66 cv
367.129 16.703 367.07 16.738 366.996 16.762 cv
366.914 16.789 366.813 16.809 366.684 16.824 cv
366.551 16.84 366.383 16.848 366.188 16.848 cv
365.984 16.848 365.82 16.84 365.691 16.824 cv
365.555 16.809 365.449 16.789 365.375 16.762 cv
365.293 16.738 365.238 16.703 365.207 16.66 cv
365.172 16.621 365.152 16.574 365.156 16.52 cv
365.156 6.99597 li
365.152 6.94897 365.172 6.90198 365.207 6.85498 cv
365.238 6.81598 365.293 6.78101 365.379 6.75403 cv
365.457 6.72998 365.563 6.711 365.695 6.69098 cv
365.82 6.67999 365.984 6.672 366.188 6.66803 cv
366.383 6.672 366.551 6.67999 366.684 6.69098 cv
366.813 6.711 366.914 6.72998 366.996 6.75403 cv
367.07 6.78101 367.129 6.81598 367.164 6.85498 cv
367.195 6.90198 367.211 6.94897 367.215 6.99597 cv
cp
f
380.297 16.535 mo
380.293 16.59 380.277 16.633 380.25 16.672 cv
380.215 16.711 380.164 16.746 380.094 16.77 cv
380.02 16.797 379.918 16.812 379.797 16.828 cv
379.672 16.84 379.516 16.848 379.324 16.848 cv
379.125 16.848 378.965 16.84 378.84 16.828 cv
378.715 16.812 378.613 16.797 378.539 16.77 cv
378.461 16.746 378.41 16.711 378.383 16.672 cv
378.355 16.633 378.34 16.59 378.344 16.535 cv
378.344 12.414 li
378.34 12.184 378.32 11.969 378.277 11.773 cv
378.23 11.582 378.16 11.418 378.074 11.281 cv
377.98 11.145 377.867 11.039 377.73 10.961 cv
377.59 10.887 377.426 10.848 377.234 10.848 cv
377 10.848 376.762 10.941 376.523 11.121 cv
376.285 11.305 376.027 11.566 375.746 11.914 cv
375.746 16.535 li
375.746 16.59 375.73 16.633 375.699 16.672 cv
375.668 16.711 375.613 16.746 375.539 16.77 cv
375.461 16.797 375.359 16.812 375.238 16.828 cv
375.113 16.84 374.961 16.848 374.773 16.848 cv
374.578 16.848 374.418 16.84 374.297 16.828 cv
374.168 16.812 374.066 16.797 373.996 16.77 cv
373.918 16.746 373.867 16.711 373.836 16.672 cv
373.805 16.633 373.789 16.59 373.789 16.535 cv
373.789 12.414 li
373.789 12.184 373.766 11.969 373.723 11.773 cv
373.68 11.582 373.613 11.418 373.527 11.281 cv
373.434 11.145 373.32 11.039 373.184 10.961 cv
373.039 10.887 372.875 10.848 372.691 10.848 cv
372.449 10.848 372.211 10.941 371.973 11.121 cv
371.734 11.305 371.477 11.566 371.203 11.914 cv
371.203 16.535 li
371.199 16.59 371.184 16.633 371.156 16.672 cv
371.121 16.711 371.066 16.746 370.996 16.77 cv
370.918 16.797 370.82 16.812 370.695 16.828 cv
370.57 16.84 370.41 16.848 370.223 16.848 cv
370.027 16.848 369.871 16.84 369.746 16.828 cv
369.621 16.812 369.52 16.797 369.445 16.77 cv
369.367 16.746 369.313 16.711 369.285 16.672 cv
369.25 16.633 369.234 16.59 369.238 16.535 cv
369.238 9.586 li
369.234 9.539 369.25 9.492 369.277 9.44897 cv
369.301 9.414 369.348 9.383 369.418 9.35199 cv
369.484 9.328 369.57 9.30902 369.68 9.29303 cv
369.785 9.28497 369.918 9.27698 370.082 9.27301 cv
370.246 9.27698 370.383 9.28497 370.492 9.29303 cv
370.598 9.30902 370.684 9.328 370.746 9.35199 cv
370.805 9.383 370.848 9.414 370.875 9.44897 cv
370.898 9.492 370.91 9.539 370.914 9.586 cv
370.914 10.387 li
371.297 9.97699 371.68 9.664 372.063 9.453 cv
372.441 9.24597 372.844 9.14502 373.262 9.14099 cv
373.547 9.14502 373.801 9.172 374.031 9.22998 cv
374.258 9.29303 374.465 9.37903 374.645 9.48798 cv
374.824 9.60199 374.977 9.73798 375.105 9.89099 cv
375.234 10.047 375.344 10.219 375.434 10.41 cv
375.641 10.187 375.844 9.99597 376.047 9.836 cv
376.242 9.67603 376.441 9.54303 376.637 9.44098 cv
376.832 9.34003 377.027 9.26599 377.223 9.21503 cv
377.418 9.16803 377.617 9.14502 377.82 9.14099 cv
378.281 9.14502 378.668 9.22302 378.988 9.375 cv
379.301 9.53497 379.559 9.74597 379.754 10.012 cv
379.949 10.281 380.086 10.594 380.172 10.949 cv
380.25 11.309 380.293 11.687 380.297 12.086 cv
cp
f
388.141 16.559 mo
388.137 16.637 388.109 16.691 388.063 16.73 cv
388.008 16.773 387.926 16.801 387.816 16.82 cv
387.699 16.836 387.535 16.848 387.32 16.848 cv
387.082 16.848 386.91 16.836 386.809 16.82 cv
386.699 16.801 386.625 16.773 386.586 16.73 cv
386.539 16.691 386.52 16.637 386.52 16.559 cv
386.52 16.008 li
386.23 16.316 385.902 16.555 385.539 16.723 cv
385.172 16.895 384.766 16.977 384.32 16.98 cv
383.949 16.977 383.609 16.93 383.301 16.836 cv
382.992 16.742 382.727 16.602 382.5 16.406 cv
382.273 16.219 382.098 15.984 381.973 15.703 cv
381.848 15.426 381.785 15.098 381.789 14.719 cv
381.785 14.32 381.863 13.969 382.023 13.664 cv
382.18 13.367 382.418 13.121 382.734 12.926 cv
383.047 12.734 383.438 12.59 383.906 12.492 cv
384.375 12.402 384.918 12.355 385.535 12.352 cv
386.215 12.352 li
386.215 11.93 li
386.215 11.715 386.191 11.523 386.148 11.359 cv
386.102 11.199 386.027 11.062 385.93 10.949 cv
385.824 10.844 385.691 10.762 385.523 10.707 cv
385.352 10.656 385.141 10.633 384.898 10.629 cv
384.566 10.633 384.273 10.668 384.02 10.738 cv
383.758 10.812 383.531 10.895 383.336 10.98 cv
383.137 11.074 382.973 11.152 382.844 11.223 cv
382.707 11.297 382.598 11.336 382.52 11.332 cv
382.457 11.336 382.406 11.316 382.367 11.277 cv
382.32 11.242 382.285 11.191 382.258 11.121 cv
382.227 11.059 382.203 10.973 382.191 10.871 cv
382.172 10.773 382.164 10.664 382.168 10.543 cv
382.164 10.383 382.18 10.258 382.207 10.16 cv
382.23 10.07 382.277 9.98401 382.355 9.90601 cv
382.426 9.83197 382.555 9.75 382.738 9.65997 cv
382.918 9.57001 383.129 9.48401 383.375 9.40601 cv
383.617 9.328 383.887 9.26599 384.176 9.21503 cv
384.465 9.16803 384.762 9.14502 385.07 9.14099 cv
385.613 9.14502 386.078 9.19501 386.465 9.30103 cv
386.852 9.40997 387.172 9.57397 387.422 9.79303 cv
387.672 10.012 387.852 10.297 387.969 10.645 cv
388.078 10.996 388.137 11.41 388.141 11.883 cv
cp
386.215 13.582 mo
385.465 13.582 li
385.148 13.586 384.879 13.609 384.656 13.652 cv
384.43 13.703 384.246 13.773 384.109 13.863 cv
383.965 13.961 383.863 14.074 383.801 14.203 cv
383.734 14.34 383.699 14.488 383.703 14.656 cv
383.699 14.949 383.793 15.18 383.98 15.344 cv
384.164 15.512 384.422 15.594 384.75 15.594 cv
385.023 15.594 385.273 15.523 385.508 15.383 cv
385.734 15.242 385.973 15.039 386.215 14.766 cv
cp
f
396.363 10.066 mo
396.359 10.32 396.332 10.504 396.277 10.621 cv
396.219 10.742 396.148 10.801 396.07 10.801 cv
395.25 10.801 li
395.363 10.926 395.445 11.07 395.496 11.227 cv
395.543 11.387 395.566 11.551 395.57 11.719 cv
395.566 12.129 395.5 12.488 395.367 12.801 cv
395.23 13.117 395.035 13.383 394.785 13.594 cv
394.531 13.812 394.23 13.977 393.875 14.086 cv
393.516 14.203 393.117 14.258 392.688 14.254 cv
392.461 14.258 392.25 14.23 392.047 14.172 cv
391.844 14.121 391.688 14.059 391.578 13.98 cv
391.516 14.051 391.457 14.129 391.41 14.223 cv
391.359 14.316 391.336 14.422 391.34 14.531 cv
391.336 14.687 391.402 14.809 391.535 14.902 cv
391.664 15 391.852 15.055 392.094 15.062 cv
393.785 15.125 li
394.18 15.141 394.531 15.199 394.84 15.293 cv
395.148 15.395 395.41 15.527 395.621 15.699 cv
395.832 15.875 395.992 16.086 396.102 16.328 cv
396.211 16.574 396.266 16.848 396.27 17.16 cv
396.266 17.496 396.191 17.82 396.043 18.129 cv
395.895 18.43 395.668 18.691 395.367 18.918 cv
395.063 19.137 394.684 19.316 394.23 19.449 cv
393.773 19.578 393.242 19.641 392.641 19.645 cv
392.043 19.641 391.539 19.594 391.121 19.504 cv
390.703 19.406 390.359 19.277 390.094 19.113 cv
389.824 18.945 389.629 18.746 389.512 18.52 cv
389.387 18.285 389.328 18.031 389.328 17.758 cv
389.328 17.586 389.348 17.426 389.395 17.27 cv
389.434 17.113 389.5 16.961 389.59 16.82 cv
389.672 16.676 389.777 16.543 389.902 16.41 cv
390.027 16.281 390.168 16.156 390.332 16.035 cv
390.105 15.922 389.934 15.762 389.813 15.551 cv
389.691 15.348 389.633 15.121 389.633 14.875 cv
389.633 14.574 389.699 14.297 389.84 14.039 cv
389.977 13.789 390.16 13.559 390.387 13.355 cv
390.203 13.176 390.059 12.961 389.949 12.703 cv
389.84 12.453 389.785 12.133 389.789 11.75 cv
389.785 11.348 389.855 10.988 390 10.664 cv
390.141 10.348 390.34 10.078 390.598 9.85498 cv
390.852 9.63702 391.156 9.46503 391.508 9.34802 cv
391.859 9.22998 392.25 9.172 392.68 9.172 cv
392.898 9.172 393.105 9.18701 393.305 9.211 cv
393.504 9.242 393.691 9.27698 393.863 9.32001 cv
396.07 9.32001 li
396.152 9.32397 396.223 9.383 396.281 9.492 cv
396.332 9.60901 396.359 9.80103 396.363 10.066 cv
cp
393.848 11.711 mo
393.844 11.34 393.742 11.051 393.535 10.84 cv
393.324 10.637 393.031 10.531 392.656 10.527 cv
392.461 10.531 392.289 10.562 392.148 10.625 cv
392 10.691 391.879 10.781 391.785 10.891 cv
391.684 11.004 391.613 11.133 391.57 11.281 cv
391.52 11.43 391.496 11.586 391.5 11.742 cv
391.496 12.102 391.602 12.379 391.813 12.582 cv
392.02 12.789 392.309 12.895 392.68 12.891 cv
392.875 12.895 393.043 12.863 393.191 12.797 cv
393.332 12.738 393.453 12.652 393.555 12.539 cv
393.648 12.434 393.723 12.305 393.773 12.16 cv
393.82 12.02 393.844 11.871 393.848 11.711 cv
cp
394.309 17.262 mo
394.309 17.023 394.215 16.848 394.027 16.723 cv
393.84 16.602 393.582 16.531 393.254 16.52 cv
391.859 16.48 li
391.723 16.582 391.613 16.676 391.535 16.766 cv
391.453 16.855 391.391 16.941 391.344 17.027 cv
391.293 17.109 391.258 17.191 391.246 17.27 cv
391.227 17.348 391.219 17.426 391.223 17.512 cv
391.219 17.766 391.352 17.965 391.613 18.102 cv
391.875 18.234 392.246 18.301 392.727 18.305 cv
393.02 18.301 393.266 18.27 393.473 18.215 cv
393.672 18.152 393.836 18.074 393.965 17.977 cv
394.086 17.875 394.176 17.766 394.23 17.645 cv
394.281 17.523 394.309 17.395 394.309 17.262 cv
cp
f
403.973 12.859 mo
403.969 13.098 403.918 13.273 403.813 13.387 cv
403.703 13.504 403.555 13.562 403.375 13.559 cv
399.141 13.559 li
399.137 13.859 399.172 14.129 399.246 14.367 cv
399.313 14.609 399.426 14.812 399.582 14.98 cv
399.734 15.152 399.93 15.281 400.172 15.367 cv
400.41 15.457 400.699 15.5 401.043 15.5 cv
401.383 15.5 401.684 15.477 401.945 15.426 cv
402.203 15.379 402.43 15.324 402.621 15.262 cv
402.809 15.203 402.965 15.148 403.094 15.098 cv
403.215 15.051 403.316 15.027 403.398 15.023 cv
403.441 15.027 403.48 15.035 403.516 15.051 cv
403.543 15.07 403.57 15.102 403.59 15.148 cv
403.609 15.195 403.621 15.262 403.633 15.348 cv
403.637 15.434 403.641 15.543 403.645 15.672 cv
403.641 15.789 403.641 15.887 403.637 15.965 cv
403.629 16.047 403.621 16.113 403.613 16.168 cv
403.602 16.227 403.586 16.277 403.566 16.312 cv
403.547 16.355 403.52 16.391 403.488 16.426 cv
403.453 16.465 403.359 16.516 403.211 16.574 cv
403.055 16.641 402.863 16.703 402.633 16.758 cv
402.395 16.82 402.125 16.867 401.828 16.914 cv
401.523 16.953 401.203 16.977 400.863 16.98 cv
400.242 16.977 399.699 16.902 399.238 16.746 cv
398.77 16.594 398.383 16.355 398.074 16.039 cv
397.758 15.723 397.523 15.324 397.375 14.84 cv
397.219 14.359 397.145 13.793 397.148 13.137 cv
397.145 12.523 397.223 11.965 397.387 11.469 cv
397.543 10.973 397.777 10.555 398.09 10.207 cv
398.395 9.86298 398.77 9.59802 399.207 9.414 cv
399.645 9.23401 400.137 9.14502 400.691 9.14099 cv
401.27 9.14502 401.77 9.22998 402.184 9.39801 cv
402.598 9.57397 402.934 9.81201 403.199 10.113 cv
403.461 10.418 403.656 10.777 403.785 11.191 cv
403.906 11.609 403.969 12.059 403.973 12.547 cv
cp
402.07 12.297 mo
402.082 11.746 401.973 11.312 401.738 11 cv
401.504 10.687 401.137 10.531 400.645 10.527 cv
400.395 10.531 400.18 10.578 399.996 10.668 cv
399.809 10.766 399.656 10.891 399.535 11.047 cv
399.41 11.207 399.316 11.395 399.254 11.609 cv
399.188 11.824 399.148 12.055 399.141 12.297 cv
cp
f
410.473 14.57 mo
410.469 14.969 410.395 15.316 410.25 15.617 cv
410.102 15.918 409.895 16.172 409.625 16.371 cv
409.352 16.578 409.031 16.727 408.664 16.828 cv
408.297 16.926 407.895 16.977 407.465 16.98 cv
407.199 16.977 406.953 16.957 406.719 16.922 cv
406.484 16.879 406.273 16.832 406.086 16.773 cv
405.898 16.715 405.742 16.652 405.617 16.59 cv
405.492 16.527 405.398 16.469 405.344 16.414 cv
405.285 16.359 405.242 16.277 405.215 16.16 cv
405.18 16.047 405.164 15.871 405.168 15.641 cv
405.164 15.492 405.172 15.371 405.184 15.277 cv
405.191 15.187 405.207 15.117 405.23 15.059 cv
405.25 15.008 405.273 14.969 405.309 14.949 cv
405.336 14.934 405.375 14.926 405.422 14.922 cv
405.477 14.926 405.563 14.957 405.676 15.02 cv
405.785 15.086 405.922 15.16 406.094 15.234 cv
406.258 15.316 406.453 15.387 406.672 15.453 cv
406.891 15.523 407.141 15.559 407.426 15.555 cv
407.602 15.559 407.758 15.539 407.898 15.5 cv
408.031 15.465 408.152 15.414 408.258 15.344 cv
408.355 15.277 408.43 15.191 408.484 15.086 cv
408.531 14.984 408.559 14.863 408.563 14.727 cv
408.559 14.57 408.512 14.437 408.418 14.328 cv
408.324 14.219 408.195 14.121 408.039 14.035 cv
407.875 13.953 407.695 13.875 407.5 13.801 cv
407.297 13.73 407.094 13.652 406.883 13.559 cv
406.672 13.473 406.465 13.371 406.27 13.254 cv
406.066 13.145 405.887 13.004 405.73 12.836 cv
405.566 12.672 405.441 12.473 405.348 12.234 cv
405.254 12.004 405.207 11.723 405.207 11.391 cv
405.207 11.062 405.27 10.758 405.398 10.477 cv
405.527 10.203 405.715 9.96503 405.961 9.76599 cv
406.203 9.57001 406.5 9.41803 406.852 9.30499 cv
407.199 9.19897 407.594 9.14502 408.035 9.14099 cv
408.25 9.14502 408.461 9.15997 408.668 9.18701 cv
408.871 9.22302 409.059 9.26202 409.227 9.30499 cv
409.391 9.35498 409.531 9.40601 409.648 9.45697 cv
409.762 9.51599 409.844 9.56201 409.895 9.59802 cv
409.941 9.64099 409.977 9.67999 410 9.71503 cv
410.02 9.758 410.031 9.80499 410.043 9.85498 cv
410.051 9.90997 410.063 9.97699 410.07 10.055 cv
410.078 10.141 410.082 10.238 410.082 10.355 cv
410.082 10.496 410.078 10.613 410.07 10.699 cv
410.063 10.793 410.047 10.863 410.031 10.91 cv
410.012 10.965 409.988 11 409.961 11.016 cv
409.926 11.039 409.891 11.047 409.852 11.043 cv
409.801 11.047 409.727 11.02 409.633 10.961 cv
409.531 10.91 409.41 10.852 409.262 10.785 cv
409.113 10.727 408.941 10.668 408.746 10.609 cv
408.551 10.559 408.328 10.531 408.082 10.527 cv
407.902 10.531 407.75 10.551 407.621 10.582 cv
407.488 10.621 407.379 10.672 407.301 10.738 cv
407.215 10.809 407.152 10.887 407.113 10.977 cv
407.066 11.07 407.047 11.168 407.051 11.27 cv
407.047 11.43 407.098 11.566 407.199 11.672 cv
407.297 11.785 407.426 11.879 407.59 11.961 cv
407.75 12.047 407.934 12.125 408.141 12.195 cv
408.344 12.27 408.551 12.352 408.762 12.434 cv
408.969 12.523 409.176 12.621 409.387 12.734 cv
409.59 12.848 409.773 12.988 409.934 13.152 cv
410.094 13.32 410.223 13.52 410.324 13.75 cv
410.418 13.984 410.469 14.258 410.473 14.57 cv
cp
f
419.266 12.883 mo
419.262 13.184 419.234 13.395 419.18 13.512 cv
419.121 13.637 419.031 13.695 418.906 13.691 cv
415.664 13.691 li
415.535 13.695 415.441 13.633 415.387 13.508 cv
415.324 13.387 415.297 13.18 415.301 12.883 cv
415.297 12.594 415.324 12.387 415.387 12.266 cv
415.441 12.148 415.535 12.09 415.664 12.086 cv
418.906 12.086 li
418.969 12.09 419.02 12.102 419.066 12.125 cv
419.105 12.152 419.145 12.199 419.18 12.258 cv
419.207 12.324 419.23 12.406 419.246 12.508 cv
419.258 12.613 419.262 12.738 419.266 12.883 cv
cp
f
431.121 13.902 mo
431.117 14.172 431.09 14.375 431.039 14.508 cv
430.98 14.648 430.906 14.715 430.816 14.711 cv
429.922 14.711 li
429.922 16.535 li
429.922 16.59 429.906 16.633 429.875 16.672 cv
429.844 16.711 429.789 16.746 429.711 16.77 cv
429.633 16.797 429.531 16.812 429.406 16.828 cv
429.281 16.84 429.117 16.848 428.922 16.848 cv
428.734 16.848 428.578 16.84 428.453 16.828 cv
428.32 16.812 428.219 16.797 428.148 16.77 cv
428.07 16.746 428.02 16.711 427.992 16.672 cv
427.961 16.633 427.945 16.59 427.949 16.535 cv
427.949 14.711 li
424.094 14.711 li
424.016 14.715 423.953 14.707 423.898 14.684 cv
423.84 14.668 423.789 14.625 423.754 14.562 cv
423.711 14.5 423.684 14.406 423.668 14.281 cv
423.648 14.16 423.641 14 423.641 13.793 cv
423.641 13.629 423.645 13.484 423.652 13.359 cv
423.66 13.242 423.672 13.133 423.691 13.031 cv
423.707 12.937 423.734 12.844 423.77 12.75 cv
423.801 12.664 423.844 12.57 423.898 12.469 cv
427.031 6.94098 li
427.055 6.89801 427.098 6.85901 427.164 6.82001 cv
427.223 6.789 427.309 6.758 427.422 6.73401 cv
427.531 6.711 427.676 6.69501 427.848 6.68402 cv
428.02 6.67603 428.227 6.672 428.473 6.66803 cv
428.734 6.672 428.961 6.67603 429.148 6.68701 cv
429.336 6.703 429.484 6.72699 429.598 6.75 cv
429.707 6.78101 429.789 6.81598 429.844 6.85498 cv
429.895 6.90198 429.922 6.94897 429.922 7.00403 cv
429.922 13.074 li
430.816 13.074 li
430.898 13.074 430.969 13.141 431.031 13.266 cv
431.086 13.398 431.117 13.609 431.121 13.902 cv
cp
427.949 8.43701 mo
427.934 8.43701 li
425.277 13.074 li
427.949 13.074 li
cp
f
442.914 7.55902 mo
442.91 7.71503 442.902 7.84399 442.895 7.94501 cv
442.879 8.05499 442.859 8.14099 442.836 8.203 cv
442.805 8.27002 442.773 8.31598 442.738 8.34399 cv
442.695 8.37903 442.652 8.39502 442.609 8.39099 cv
440.086 8.39099 li
440.086 16.52 li
440.086 16.574 440.066 16.621 440.035 16.66 cv
439.996 16.703 439.941 16.738 439.867 16.762 cv
439.785 16.789 439.68 16.809 439.551 16.824 cv
439.414 16.84 439.25 16.848 439.055 16.848 cv
438.859 16.848 438.695 16.84 438.563 16.824 cv
438.43 16.809 438.324 16.789 438.246 16.762 cv
438.168 16.738 438.109 16.703 438.078 16.66 cv
438.039 16.621 438.023 16.574 438.027 16.52 cv
438.027 8.39099 li
435.504 8.39099 li
435.449 8.39502 435.402 8.37903 435.371 8.34399 cv
435.332 8.31598 435.301 8.27002 435.277 8.203 cv
435.246 8.14099 435.227 8.05499 435.219 7.94501 cv
435.203 7.84399 435.199 7.71503 435.199 7.55902 cv
435.199 7.40601 435.203 7.27301 435.219 7.15997 cv
435.227 7.05499 435.246 6.96503 435.277 6.89801 cv
435.301 6.836 435.332 6.789 435.371 6.758 cv
435.402 6.72998 435.449 6.71899 435.504 6.71503 cv
442.609 6.71503 li
442.652 6.71899 442.695 6.72998 442.738 6.758 cv
442.773 6.789 442.805 6.836 442.836 6.89801 cv
442.859 6.96503 442.879 7.05499 442.895 7.15997 cv
442.902 7.27301 442.91 7.40601 442.914 7.55902 cv
cp
f
450.629 16.535 mo
450.625 16.59 450.609 16.633 450.582 16.672 cv
450.547 16.711 450.496 16.746 450.426 16.77 cv
450.352 16.797 450.25 16.812 450.125 16.828 cv
449.996 16.84 449.84 16.848 449.656 16.848 cv
449.461 16.848 449.301 16.84 449.176 16.828 cv
449.047 16.812 448.945 16.797 448.875 16.77 cv
448.797 16.746 448.746 16.711 448.719 16.672 cv
448.684 16.633 448.668 16.59 448.672 16.535 cv
448.672 12.57 li
448.668 12.234 448.645 11.969 448.598 11.773 cv
448.547 11.582 448.473 11.418 448.383 11.281 cv
448.289 11.145 448.172 11.039 448.023 10.961 cv
447.875 10.887 447.699 10.848 447.504 10.848 cv
447.25 10.848 447 10.941 446.746 11.121 cv
446.492 11.305 446.227 11.566 445.953 11.914 cv
445.953 16.535 li
445.949 16.59 445.934 16.633 445.906 16.672 cv
445.871 16.711 445.816 16.746 445.746 16.77 cv
445.668 16.797 445.57 16.812 445.445 16.828 cv
445.32 16.84 445.16 16.848 444.973 16.848 cv
444.777 16.848 444.621 16.84 444.496 16.828 cv
444.371 16.812 444.27 16.797 444.195 16.77 cv
444.117 16.746 444.063 16.711 444.035 16.672 cv
444 16.633 443.984 16.59 443.988 16.535 cv
443.988 6.289 li
443.984 6.23798 444 6.19098 444.035 6.14801 cv
444.063 6.10901 444.117 6.07397 444.195 6.04303 cv
444.27 6.01599 444.371 5.99597 444.496 5.97699 cv
444.621 5.96503 444.777 5.95697 444.973 5.953 cv
445.16 5.95697 445.32 5.96503 445.445 5.97699 cv
445.57 5.99597 445.668 6.01599 445.746 6.04303 cv
445.816 6.07397 445.871 6.10901 445.906 6.14801 cv
445.934 6.19098 445.949 6.23798 445.953 6.289 cv
445.953 10.129 li
446.289 9.80103 446.633 9.55499 446.984 9.38702 cv
447.332 9.22699 447.699 9.14502 448.082 9.14099 cv
448.551 9.14502 448.949 9.22302 449.277 9.375 cv
449.602 9.53497 449.863 9.74597 450.063 10.016 cv
450.262 10.285 450.406 10.602 450.496 10.961 cv
450.582 11.324 450.625 11.762 450.629 12.273 cv
cp
f
457.027 10.23 mo
457.027 10.422 457.02 10.574 457.012 10.691 cv
456.996 10.812 456.98 10.906 456.965 10.973 cv
456.941 11.043 456.914 11.09 456.883 11.113 cv
456.844 11.141 456.801 11.152 456.754 11.152 cv
456.707 11.152 456.66 11.145 456.613 11.125 cv
456.559 11.109 456.5 11.09 456.438 11.066 cv
456.367 11.047 456.297 11.027 456.223 11.008 cv
456.141 10.992 456.055 10.984 455.965 10.98 cv
455.852 10.984 455.742 11.004 455.637 11.047 cv
455.527 11.094 455.414 11.164 455.301 11.254 cv
455.18 11.348 455.059 11.473 454.934 11.625 cv
454.805 11.785 454.668 11.977 454.523 12.203 cv
454.523 16.535 li
454.52 16.59 454.504 16.633 454.477 16.672 cv
454.441 16.711 454.387 16.746 454.316 16.77 cv
454.238 16.797 454.141 16.812 454.016 16.828 cv
453.891 16.84 453.73 16.848 453.543 16.848 cv
453.348 16.848 453.191 16.84 453.066 16.828 cv
452.941 16.812 452.84 16.797 452.766 16.77 cv
452.688 16.746 452.633 16.711 452.605 16.672 cv
452.57 16.633 452.555 16.59 452.559 16.535 cv
452.559 9.586 li
452.555 9.539 452.57 9.492 452.598 9.44897 cv
452.621 9.414 452.668 9.383 452.738 9.35199 cv
452.805 9.328 452.891 9.30902 453 9.29303 cv
453.105 9.28497 453.238 9.27698 453.402 9.27301 cv
453.566 9.27698 453.703 9.28497 453.813 9.29303 cv
453.918 9.30902 454.004 9.328 454.066 9.35199 cv
454.125 9.383 454.168 9.414 454.195 9.44897 cv
454.219 9.492 454.23 9.539 454.234 9.586 cv
454.234 10.449 li
454.414 10.191 454.586 9.97998 454.75 9.80902 cv
454.906 9.64502 455.063 9.508 455.211 9.40601 cv
455.355 9.30902 455.5 9.242 455.645 9.19897 cv
455.789 9.164 455.934 9.14502 456.082 9.14099 cv
456.148 9.14502 456.223 9.14801 456.301 9.15198 cv
456.379 9.164 456.457 9.17603 456.543 9.19098 cv
456.621 9.211 456.695 9.22998 456.762 9.25403 cv
456.82 9.27698 456.867 9.30499 456.898 9.328 cv
456.926 9.35901 456.945 9.38702 456.961 9.414 cv
456.973 9.44897 456.984 9.492 456.996 9.54303 cv
457.004 9.60199 457.012 9.68402 457.02 9.789 cv
457.023 9.89801 457.027 10.047 457.027 10.23 cv
cp
f
464.469 12.859 mo
464.465 13.098 464.414 13.273 464.309 13.387 cv
464.199 13.504 464.051 13.562 463.871 13.559 cv
459.637 13.559 li
459.633 13.859 459.668 14.129 459.742 14.367 cv
459.809 14.609 459.922 14.812 460.078 14.98 cv
460.23 15.152 460.426 15.281 460.668 15.367 cv
460.906 15.457 461.195 15.5 461.539 15.5 cv
461.879 15.5 462.18 15.477 462.441 15.426 cv
462.699 15.379 462.926 15.324 463.117 15.262 cv
463.305 15.203 463.461 15.148 463.59 15.098 cv
463.711 15.051 463.813 15.027 463.895 15.023 cv
463.938 15.027 463.977 15.035 464.012 15.051 cv
464.039 15.07 464.066 15.102 464.086 15.148 cv
464.105 15.195 464.117 15.262 464.129 15.348 cv
464.133 15.434 464.137 15.543 464.141 15.672 cv
464.137 15.789 464.137 15.887 464.133 15.965 cv
464.125 16.047 464.117 16.113 464.109 16.168 cv
464.098 16.227 464.082 16.277 464.063 16.312 cv
464.043 16.355 464.016 16.391 463.984 16.426 cv
463.949 16.465 463.855 16.516 463.707 16.574 cv
463.551 16.641 463.359 16.703 463.129 16.758 cv
462.891 16.82 462.621 16.867 462.324 16.914 cv
462.02 16.953 461.699 16.977 461.359 16.98 cv
460.738 16.977 460.195 16.902 459.734 16.746 cv
459.266 16.594 458.879 16.355 458.57 16.039 cv
458.254 15.723 458.02 15.324 457.871 14.84 cv
457.715 14.359 457.641 13.793 457.645 13.137 cv
457.641 12.523 457.719 11.965 457.883 11.469 cv
458.039 10.973 458.273 10.555 458.586 10.207 cv
458.891 9.86298 459.266 9.59802 459.703 9.414 cv
460.141 9.23401 460.633 9.14502 461.188 9.14099 cv
461.766 9.14502 462.266 9.22998 462.68 9.39801 cv
463.094 9.57397 463.43 9.81201 463.695 10.113 cv
463.957 10.418 464.152 10.777 464.281 11.191 cv
464.402 11.609 464.465 12.059 464.469 12.547 cv
cp
462.566 12.297 mo
462.578 11.746 462.469 11.312 462.234 11 cv
462 10.687 461.633 10.531 461.141 10.527 cv
460.891 10.531 460.676 10.578 460.492 10.668 cv
460.305 10.766 460.152 10.891 460.031 11.047 cv
459.906 11.207 459.813 11.395 459.75 11.609 cv
459.684 11.824 459.645 12.055 459.637 12.297 cv
cp
f
472 16.559 mo
471.996 16.637 471.969 16.691 471.922 16.73 cv
471.867 16.773 471.785 16.801 471.676 16.82 cv
471.559 16.836 471.395 16.848 471.18 16.848 cv
470.941 16.848 470.77 16.836 470.668 16.82 cv
470.559 16.801 470.484 16.773 470.445 16.73 cv
470.398 16.691 470.379 16.637 470.379 16.559 cv
470.379 16.008 li
470.09 16.316 469.762 16.555 469.398 16.723 cv
469.031 16.895 468.625 16.977 468.18 16.98 cv
467.809 16.977 467.469 16.93 467.16 16.836 cv
466.852 16.742 466.586 16.602 466.359 16.406 cv
466.133 16.219 465.957 15.984 465.832 15.703 cv
465.707 15.426 465.645 15.098 465.648 14.719 cv
465.645 14.32 465.723 13.969 465.883 13.664 cv
466.039 13.367 466.277 13.121 466.594 12.926 cv
466.906 12.734 467.297 12.59 467.766 12.492 cv
468.234 12.402 468.777 12.355 469.395 12.352 cv
470.074 12.352 li
470.074 11.93 li
470.074 11.715 470.051 11.523 470.008 11.359 cv
469.961 11.199 469.887 11.062 469.789 10.949 cv
469.684 10.844 469.551 10.762 469.383 10.707 cv
469.211 10.656 469 10.633 468.758 10.629 cv
468.426 10.633 468.133 10.668 467.879 10.738 cv
467.617 10.812 467.391 10.895 467.195 10.98 cv
466.996 11.074 466.832 11.152 466.703 11.223 cv
466.566 11.297 466.457 11.336 466.379 11.332 cv
466.316 11.336 466.266 11.316 466.227 11.277 cv
466.18 11.242 466.145 11.191 466.117 11.121 cv
466.086 11.059 466.063 10.973 466.051 10.871 cv
466.031 10.773 466.023 10.664 466.027 10.543 cv
466.023 10.383 466.039 10.258 466.066 10.16 cv
466.09 10.07 466.137 9.98401 466.215 9.90601 cv
466.285 9.83197 466.414 9.75 466.598 9.65997 cv
466.777 9.57001 466.988 9.48401 467.234 9.40601 cv
467.477 9.328 467.746 9.26599 468.035 9.21503 cv
468.324 9.16803 468.621 9.14502 468.93 9.14099 cv
469.473 9.14502 469.938 9.19501 470.324 9.30103 cv
470.711 9.40997 471.031 9.57397 471.281 9.79303 cv
471.531 10.012 471.711 10.297 471.828 10.645 cv
471.938 10.996 471.996 11.41 472 11.883 cv
cp
470.074 13.582 mo
469.324 13.582 li
469.008 13.586 468.738 13.609 468.516 13.652 cv
468.289 13.703 468.105 13.773 467.969 13.863 cv
467.824 13.961 467.723 14.074 467.66 14.203 cv
467.594 14.34 467.559 14.488 467.563 14.656 cv
467.559 14.949 467.652 15.18 467.84 15.344 cv
468.023 15.512 468.281 15.594 468.609 15.594 cv
468.883 15.594 469.133 15.523 469.367 15.383 cv
469.594 15.242 469.832 15.039 470.074 14.766 cv
cp
f
480.586 16.535 mo
480.582 16.598 480.57 16.645 480.547 16.68 cv
480.52 16.723 480.473 16.754 480.414 16.777 cv
480.348 16.801 480.266 16.816 480.16 16.832 cv
480.055 16.84 479.922 16.848 479.77 16.848 cv
479.598 16.848 479.465 16.84 479.363 16.832 cv
479.258 16.816 479.172 16.801 479.109 16.777 cv
479.043 16.754 478.996 16.723 478.969 16.68 cv
478.938 16.645 478.922 16.598 478.926 16.535 cv
478.926 15.766 li
478.566 16.152 478.191 16.449 477.801 16.66 cv
477.402 16.871 476.969 16.977 476.496 16.98 cv
475.961 16.977 475.512 16.875 475.148 16.672 cv
474.781 16.469 474.484 16.195 474.254 15.844 cv
474.02 15.5 473.852 15.094 473.75 14.625 cv
473.648 14.164 473.598 13.672 473.598 13.152 cv
473.598 12.539 473.66 11.984 473.793 11.488 cv
473.922 10.996 474.117 10.574 474.375 10.227 cv
474.629 9.87903 474.945 9.61298 475.324 9.422 cv
475.703 9.23798 476.141 9.14502 476.637 9.14099 cv
477.023 9.14502 477.375 9.22302 477.695 9.37903 cv
478.008 9.539 478.324 9.77002 478.637 10.074 cv
478.637 6.31201 li
478.637 6.26202 478.648 6.21503 478.68 6.172 cv
478.703 6.133 478.758 6.09802 478.836 6.06598 cv
478.91 6.039 479.008 6.02002 479.137 6 cv
479.258 5.98798 479.418 5.97998 479.613 5.97699 cv
479.805 5.97998 479.961 5.98798 480.086 6 cv
480.207 6.02002 480.309 6.039 480.383 6.06598 cv
480.453 6.09802 480.504 6.133 480.539 6.172 cv
480.566 6.21503 480.582 6.26202 480.586 6.31201 cv
cp
478.637 11.891 mo
478.355 11.539 478.086 11.27 477.832 11.082 cv
477.57 10.895 477.301 10.801 477.023 10.801 cv
476.77 10.801 476.551 10.867 476.367 10.992 cv
476.18 11.125 476.031 11.293 475.922 11.504 cv
475.809 11.715 475.727 11.953 475.672 12.215 cv
475.617 12.48 475.59 12.75 475.59 13.02 cv
475.59 13.316 475.613 13.598 475.66 13.871 cv
475.707 14.148 475.781 14.395 475.891 14.609 cv
475.992 14.824 476.137 14.996 476.316 15.125 cv
476.492 15.258 476.715 15.324 476.984 15.32 cv
477.117 15.324 477.246 15.305 477.379 15.262 cv
477.504 15.227 477.637 15.164 477.77 15.07 cv
477.902 14.984 478.039 14.867 478.18 14.723 cv
478.32 14.582 478.473 14.406 478.637 14.199 cv
cp
f
487.41 14.57 mo
487.406 14.969 487.332 15.316 487.188 15.617 cv
487.039 15.918 486.832 16.172 486.563 16.371 cv
486.289 16.578 485.969 16.727 485.602 16.828 cv
485.234 16.926 484.832 16.977 484.402 16.98 cv
484.137 16.977 483.891 16.957 483.656 16.922 cv
483.422 16.879 483.211 16.832 483.023 16.773 cv
482.836 16.715 482.68 16.652 482.555 16.59 cv
482.43 16.527 482.336 16.469 482.281 16.414 cv
482.223 16.359 482.18 16.277 482.152 16.16 cv
482.117 16.047 482.102 15.871 482.105 15.641 cv
482.102 15.492 482.109 15.371 482.121 15.277 cv
482.129 15.187 482.145 15.117 482.168 15.059 cv
482.188 15.008 482.211 14.969 482.246 14.949 cv
482.273 14.934 482.313 14.926 482.359 14.922 cv
482.414 14.926 482.5 14.957 482.613 15.02 cv
482.723 15.086 482.859 15.16 483.031 15.234 cv
483.195 15.316 483.391 15.387 483.609 15.453 cv
483.828 15.523 484.078 15.559 484.363 15.555 cv
484.539 15.559 484.695 15.539 484.836 15.5 cv
484.969 15.465 485.09 15.414 485.195 15.344 cv
485.293 15.277 485.367 15.191 485.422 15.086 cv
485.469 14.984 485.496 14.863 485.5 14.727 cv
485.496 14.57 485.449 14.437 485.355 14.328 cv
485.262 14.219 485.133 14.121 484.977 14.035 cv
484.813 13.953 484.633 13.875 484.438 13.801 cv
484.234 13.73 484.031 13.652 483.82 13.559 cv
483.609 13.473 483.402 13.371 483.207 13.254 cv
483.004 13.145 482.824 13.004 482.668 12.836 cv
482.504 12.672 482.379 12.473 482.285 12.234 cv
482.191 12.004 482.145 11.723 482.145 11.391 cv
482.145 11.062 482.207 10.758 482.336 10.477 cv
482.465 10.203 482.652 9.96503 482.898 9.76599 cv
483.141 9.57001 483.438 9.41803 483.789 9.30499 cv
484.137 9.19897 484.531 9.14502 484.973 9.14099 cv
485.188 9.14502 485.398 9.15997 485.605 9.18701 cv
485.809 9.22302 485.996 9.26202 486.164 9.30499 cv
486.328 9.35498 486.469 9.40601 486.586 9.45697 cv
486.699 9.51599 486.781 9.56201 486.832 9.59802 cv
486.879 9.64099 486.914 9.67999 486.938 9.71503 cv
486.957 9.758 486.969 9.80499 486.98 9.85498 cv
486.988 9.90997 487 9.97699 487.008 10.055 cv
487.016 10.141 487.02 10.238 487.02 10.355 cv
487.02 10.496 487.016 10.613 487.008 10.699 cv
487 10.793 486.984 10.863 486.969 10.91 cv
486.949 10.965 486.926 11 486.898 11.016 cv
486.863 11.039 486.828 11.047 486.789 11.043 cv
486.738 11.047 486.664 11.02 486.57 10.961 cv
486.469 10.91 486.348 10.852 486.199 10.785 cv
486.051 10.727 485.879 10.668 485.684 10.609 cv
485.488 10.559 485.266 10.531 485.02 10.527 cv
484.84 10.531 484.688 10.551 484.559 10.582 cv
484.426 10.621 484.316 10.672 484.238 10.738 cv
484.152 10.809 484.09 10.887 484.051 10.977 cv
484.004 11.07 483.984 11.168 483.988 11.27 cv
483.984 11.43 484.035 11.566 484.137 11.672 cv
484.234 11.785 484.363 11.879 484.527 11.961 cv
484.688 12.047 484.871 12.125 485.078 12.195 cv
485.281 12.27 485.488 12.352 485.699 12.434 cv
485.906 12.523 486.113 12.621 486.324 12.734 cv
486.527 12.848 486.711 12.988 486.871 13.152 cv
487.031 13.32 487.16 13.52 487.262 13.75 cv
487.355 13.984 487.406 14.258 487.41 14.57 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
