%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AvergeFilteringTime-FourThreads.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 2:36:03 p.m.
%%BoundingBox: 0 0 674 527
%%HiResBoundingBox: 0 0 673.8000 526.5600
%%CropBox: 0 0 673.8000 526.5600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -526.56 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 526.56 li
673.8 526.56 li
673.8 0 li
cp
clp
gsave
0 526.56 mo
674 526.56 li
674 -.440002 li
0 -.440002 li
cp
clp
0 0 mo
673.801 0 li
673.801 526.559 li
0 526.559 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
48.238 457.801 mo
657.238 457.801 li
48.238 412.32 mo
657.238 412.32 li
48.238 366.719 mo
657.238 366.719 li
48.238 321.238 mo
657.238 321.238 li
48.238 275.641 mo
657.238 275.641 li
48.238 230.16 mo
657.238 230.16 li
48.238 184.559 mo
657.238 184.559 li
48.238 139.078 mo
657.238 139.078 li
48.238 93.48 mo
657.238 93.48 li
48.238 48 mo
657.238 48 li
.140414 .108034 .108034 0 cmyk
@
48.238 435 mo
657.238 435 li
48.238 389.52 mo
657.238 389.52 li
48.238 343.922 mo
657.238 343.922 li
48.238 298.441 mo
657.238 298.441 li
48.238 252.84 mo
657.238 252.84 li
48.238 207.359 mo
657.238 207.359 li
48.238 161.762 mo
657.238 161.762 li
48.238 116.281 mo
657.238 116.281 li
48.238 70.68 mo
657.238 70.68 li
48.238 25.199 mo
657.238 25.199 li
.328344 .284215 .278569 .000915541 cmyk
@
86.281 25.199 mo
86.281 480.602 li
162.48 25.199 mo
162.48 480.602 li
238.559 25.199 mo
238.559 480.602 li
314.641 25.199 mo
314.641 480.602 li
390.84 25.199 mo
390.84 480.602 li
466.922 25.199 mo
466.922 480.602 li
543.121 25.199 mo
543.121 480.602 li
619.199 25.199 mo
619.199 480.602 li
.178592 .148898 .143923 0 cmyk
@
48.238 25.199 mo
48.238 480.602 li
124.441 25.199 mo
124.441 480.602 li
200.52 25.199 mo
200.52 480.602 li
276.602 25.199 mo
276.602 480.602 li
352.801 25.199 mo
352.801 480.602 li
428.879 25.199 mo
428.879 480.602 li
504.961 25.199 mo
504.961 480.602 li
581.16 25.199 mo
581.16 480.602 li
657.238 25.199 mo
657.238 480.602 li
.328344 .284215 .278569 .000915541 cmyk
@
28.199 471.238 mo
35.281 471.238 li
35.281 488.398 li
28.199 488.398 li
cp
0 0 0 0 cmyk
ef
28.199 425.762 mo
35.281 425.762 li
35.281 442.801 li
28.199 442.801 li
cp
ef
28.199 380.16 mo
35.281 380.16 li
35.281 397.32 li
28.199 397.32 li
cp
ef
28.199 334.68 mo
35.281 334.68 li
35.281 351.719 li
28.199 351.719 li
cp
ef
28.199 289.078 mo
35.281 289.078 li
35.281 306.238 li
28.199 306.238 li
cp
ef
28.199 243.602 mo
35.281 243.602 li
35.281 260.641 li
28.199 260.641 li
cp
ef
28.199 198 mo
35.281 198 li
35.281 215.16 li
28.199 215.16 li
cp
ef
28.199 152.52 mo
35.281 152.52 li
35.281 169.559 li
28.199 169.559 li
cp
ef
28.199 106.922 mo
35.281 106.922 li
35.281 124.078 li
28.199 124.078 li
cp
ef
28.199 61.441 mo
35.281 61.441 li
35.281 78.48 li
28.199 78.48 li
cp
ef
21.121 15.84 mo
35.281 15.84 li
35.281 33 li
21.121 33 li
cp
ef
.96 lw
48.238 480.602 mo
657.238 480.602 li
.367803 .29575 .300999 .00198367 cmyk
@
48.238 480.602 mo
48.238 485.039 li
124.441 480.602 mo
124.441 485.039 li
200.52 480.602 mo
200.52 485.039 li
276.602 480.602 mo
276.602 485.039 li
352.801 480.602 mo
352.801 485.039 li
428.879 480.602 mo
428.879 485.039 li
504.961 480.602 mo
504.961 485.039 li
581.16 480.602 mo
581.16 485.039 li
657.238 480.602 mo
657.238 485.039 li
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
1 lc
48.238 465.121 mo
124.441 472.68 li
200.52 476.52 li
276.602 477 li
352.801 478.441 li
428.879 478.68 li
504.961 478.801 li
581.16 479.039 li
657.238 479.16 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
53.281 470.191 mo
43.199 460.109 li
43.199 470.191 mo
53.281 460.109 li
.62768 .285466 0 0 cmyk
@
129.359 477.75 mo
119.281 467.672 li
119.281 477.75 mo
129.359 467.672 li
@
205.441 481.469 mo
195.359 471.391 li
195.359 481.469 mo
205.441 471.391 li
@
281.641 482.07 mo
271.559 471.988 li
271.559 482.07 mo
281.641 471.988 li
@
357.719 483.391 mo
347.641 473.309 li
347.641 483.391 mo
357.719 473.309 li
@
433.922 483.629 mo
423.84 473.551 li
423.84 483.629 mo
433.922 473.551 li
@
510 483.871 mo
499.922 473.789 li
499.922 483.871 mo
510 473.789 li
@
586.078 483.988 mo
576 473.91 li
576 483.988 mo
586.078 473.91 li
@
662.281 484.23 mo
652.199 474.148 li
652.199 484.23 mo
662.281 474.148 li
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
48.238 454.199 mo
124.441 467.398 li
200.52 474 li
276.602 476.16 li
352.801 477.238 li
428.879 477.961 li
504.961 478.32 li
581.16 478.68 li
657.238 478.801 li
@
grestore
43.199 449.191 mo
53.16 449.191 li
53.16 459.148 li
43.199 459.148 li
cp
@
119.281 462.391 mo
129.238 462.391 li
129.238 472.352 li
119.281 472.352 li
cp
@
195.359 468.871 mo
205.32 468.871 li
205.32 478.828 li
195.359 478.828 li
cp
@
271.559 471.031 mo
281.52 471.031 li
281.52 480.988 li
271.559 480.988 li
cp
@
347.641 472.109 mo
357.602 472.109 li
357.602 482.07 li
347.641 482.07 li
cp
@
423.84 472.828 mo
433.801 472.828 li
433.801 482.789 li
423.84 482.789 li
cp
@
499.922 473.309 mo
509.879 473.309 li
509.879 483.27 li
499.922 483.27 li
cp
@
576 473.672 mo
585.961 473.672 li
585.961 483.629 li
576 483.629 li
cp
@
652.199 473.789 mo
662.16 473.789 li
662.16 483.75 li
652.199 483.75 li
cp
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
48.238 440.398 mo
124.441 460.078 li
200.52 470.16 li
276.602 472.801 li
352.801 475.441 li
428.879 474.961 li
504.961 477.121 li
581.16 476.52 li
657.238 477.84 li
.466651 0 .889799 0 cmyk
@
grestore
53.281 445.352 mo
43.199 435.27 li
43.199 445.352 mo
53.281 435.27 li
.466651 0 .889799 0 cmyk
@
129.359 465.148 mo
119.281 455.07 li
119.281 465.148 mo
129.359 455.07 li
@
205.441 475.109 mo
195.359 465.031 li
195.359 475.109 mo
205.441 465.031 li
@
281.641 477.871 mo
271.559 467.789 li
271.559 477.871 mo
281.641 467.789 li
@
357.719 480.512 mo
347.641 470.43 li
347.641 480.512 mo
357.719 470.43 li
@
433.922 480.031 mo
423.84 469.949 li
423.84 480.031 mo
433.922 469.949 li
@
510 482.07 mo
499.922 471.988 li
499.922 482.07 mo
510 471.988 li
@
586.078 481.59 mo
576 471.512 li
576 481.59 mo
586.078 471.512 li
@
662.281 482.789 mo
652.199 472.711 li
652.199 482.789 mo
662.281 472.711 li
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
48.238 411.48 mo
124.441 445.922 li
200.52 463.078 li
276.602 468.961 li
352.801 471.84 li
428.879 473.52 li
504.961 474.719 li
581.16 475.559 li
657.238 476.16 li
@
grestore
43.199 406.352 mo
53.16 406.352 li
53.16 416.309 li
43.199 416.309 li
cp
@
119.281 440.91 mo
129.238 440.91 li
129.238 450.871 li
119.281 450.871 li
cp
@
195.359 458.07 mo
205.32 458.07 li
205.32 468.031 li
195.359 468.031 li
cp
@
271.559 463.949 mo
281.52 463.949 li
281.52 473.91 li
271.559 473.91 li
cp
@
347.641 466.828 mo
357.602 466.828 li
357.602 476.789 li
347.641 476.789 li
cp
@
423.84 468.512 mo
433.801 468.512 li
433.801 478.469 li
423.84 478.469 li
cp
@
499.922 469.59 mo
509.879 469.59 li
509.879 479.551 li
499.922 479.551 li
cp
@
576 470.43 mo
585.961 470.43 li
585.961 480.391 li
576 480.391 li
cp
@
652.199 471.031 mo
662.16 471.031 li
662.16 480.988 li
652.199 480.988 li
cp
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
48.238 346.441 mo
124.441 412.441 li
200.52 445.922 li
276.602 452.16 li
352.801 461.879 li
428.879 464.762 li
504.961 465.961 li
581.16 470.16 li
657.238 470.398 li
0 .990631 1 .000396735 cmyk
@
grestore
53.281 351.512 mo
43.199 341.43 li
43.199 351.512 mo
53.281 341.43 li
0 .990631 1 .000396735 cmyk
@
129.359 417.512 mo
119.281 407.43 li
119.281 417.512 mo
129.359 407.43 li
@
205.441 450.988 mo
195.359 440.91 li
195.359 450.988 mo
205.441 440.91 li
@
281.641 457.109 mo
271.559 447.031 li
271.559 457.109 mo
281.641 447.031 li
@
357.719 466.828 mo
347.641 456.75 li
347.641 466.828 mo
357.719 456.75 li
@
433.922 469.828 mo
423.84 459.75 li
423.84 469.828 mo
433.922 459.75 li
@
510 471.031 mo
499.922 460.949 li
499.922 471.031 mo
510 460.949 li
@
586.078 475.109 mo
576 465.031 li
576 475.109 mo
586.078 465.031 li
@
662.281 475.469 mo
652.199 465.391 li
652.199 475.469 mo
662.281 465.391 li
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
48.238 248.16 mo
124.441 364.559 li
200.52 422.281 li
276.602 441.602 li
352.801 451.32 li
428.879 457.078 li
504.961 461.039 li
581.16 463.801 li
657.238 465.961 li
@
grestore
43.199 243.031 mo
53.16 243.031 li
53.16 252.988 li
43.199 252.988 li
cp
@
119.281 359.43 mo
129.238 359.43 li
129.238 369.391 li
119.281 369.391 li
cp
@
195.359 417.148 mo
205.32 417.148 li
205.32 427.109 li
195.359 427.109 li
cp
@
271.559 436.59 mo
281.52 436.59 li
281.52 446.551 li
271.559 446.551 li
cp
@
347.641 446.191 mo
357.602 446.191 li
357.602 456.148 li
347.641 456.148 li
cp
@
423.84 452.07 mo
433.801 452.07 li
433.801 462.031 li
423.84 462.031 li
cp
@
499.922 456.031 mo
509.879 456.031 li
509.879 465.988 li
499.922 465.988 li
cp
@
576 458.789 mo
585.961 458.789 li
585.961 468.75 li
576 468.75 li
cp
@
652.199 460.949 mo
662.16 460.949 li
662.16 470.91 li
652.199 470.91 li
cp
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
48.238 393.602 mo
124.441 436.441 li
200.52 458.039 li
276.602 462.121 li
352.801 469.441 li
428.879 470.281 li
504.961 473.039 li
581.16 470.879 li
657.238 474.48 li
.62768 .285466 0 0 cmyk
@
grestore
53.281 398.672 mo
43.199 388.59 li
43.199 398.672 mo
53.281 388.59 li
.62768 .285466 0 0 cmyk
@
129.359 441.391 mo
119.281 431.309 li
119.281 441.391 mo
129.359 431.309 li
@
205.441 463.109 mo
195.359 453.031 li
195.359 463.109 mo
205.441 453.031 li
@
281.641 467.07 mo
271.559 456.988 li
271.559 467.07 mo
281.641 456.988 li
@
357.719 474.391 mo
347.641 464.309 li
347.641 474.391 mo
357.719 464.309 li
@
433.922 475.352 mo
423.84 465.27 li
423.84 475.352 mo
433.922 465.27 li
@
510 477.988 mo
499.922 467.91 li
499.922 477.988 mo
510 467.91 li
@
586.078 475.828 mo
576 465.75 li
576 475.828 mo
586.078 465.75 li
@
662.281 479.551 mo
652.199 469.469 li
652.199 479.551 mo
662.281 469.469 li
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
48.238 330.48 mo
124.441 405.359 li
200.52 442.922 li
276.602 455.398 li
352.801 461.641 li
428.879 465.238 li
504.961 468 li
581.16 469.68 li
657.238 471 li
@
grestore
43.199 325.352 mo
53.16 325.352 li
53.16 335.309 li
43.199 335.309 li
cp
@
119.281 400.23 mo
129.238 400.23 li
129.238 410.191 li
119.281 410.191 li
cp
@
195.359 437.789 mo
205.32 437.789 li
205.32 447.75 li
195.359 447.75 li
cp
@
271.559 450.27 mo
281.52 450.27 li
281.52 460.231 li
271.559 460.231 li
cp
@
347.641 456.629 mo
357.602 456.629 li
357.602 466.59 li
347.641 466.59 li
cp
@
423.84 460.23 mo
433.801 460.23 li
433.801 470.191 li
423.84 470.191 li
cp
@
499.922 462.988 mo
509.879 462.988 li
509.879 472.949 li
499.922 472.949 li
cp
@
576 464.551 mo
585.961 464.551 li
585.961 474.512 li
576 474.512 li
cp
@
652.199 465.871 mo
662.16 465.871 li
662.16 475.828 li
652.199 475.828 li
cp
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
48.238 244.441 mo
124.441 360.84 li
200.52 419.641 li
276.602 434.039 li
352.801 445.32 li
428.879 444 li
504.961 453.719 li
581.16 458.039 li
657.238 458.879 li
.466651 0 .889799 0 cmyk
@
grestore
53.281 249.391 mo
43.199 239.309 li
43.199 249.391 mo
53.281 239.309 li
.466651 0 .889799 0 cmyk
@
129.359 365.91 mo
119.281 355.828 li
119.281 365.91 mo
129.359 355.828 li
@
205.441 424.711 mo
195.359 414.629 li
195.359 424.711 mo
205.441 414.629 li
@
281.641 438.988 mo
271.559 428.91 li
271.559 438.988 mo
281.641 428.91 li
@
357.719 450.391 mo
347.641 440.309 li
347.641 450.391 mo
357.719 440.309 li
@
433.922 449.07 mo
423.84 438.988 li
423.84 449.07 mo
433.922 438.988 li
@
510 458.672 mo
499.922 448.59 li
499.922 458.672 mo
510 448.59 li
@
586.078 462.988 mo
576 452.91 li
576 462.988 mo
586.078 452.91 li
@
662.281 463.949 mo
652.199 453.871 li
652.199 463.949 mo
662.281 453.871 li
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
48.238 71.762 mo
124.441 274.801 li
200.52 377.52 li
276.602 411.719 li
352.801 429.121 li
428.879 439.078 li
504.961 446.16 li
581.16 451.078 li
657.238 454.922 li
@
grestore
43.199 66.629 mo
53.16 66.629 li
53.16 76.59 li
43.199 76.59 li
cp
@
119.281 269.672 mo
129.238 269.672 li
129.238 279.629 li
119.281 279.629 li
cp
@
195.359 372.391 mo
205.32 372.391 li
205.32 382.352 li
195.359 382.352 li
cp
@
271.559 406.59 mo
281.52 406.59 li
281.52 416.551 li
271.559 416.551 li
cp
@
347.641 424.109 mo
357.602 424.109 li
357.602 434.07 li
347.641 434.07 li
cp
@
423.84 434.07 mo
433.801 434.07 li
433.801 444.031 li
423.84 444.031 li
cp
@
499.922 441.148 mo
509.879 441.148 li
509.879 451.109 li
499.922 451.109 li
cp
@
576 445.949 mo
585.961 445.949 li
585.961 455.91 li
576 455.91 li
cp
@
652.199 449.789 mo
662.16 449.789 li
662.16 459.75 li
652.199 459.75 li
cp
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
48.238 297.961 mo
124.441 387.719 li
200.52 433.32 li
276.602 444.602 li
352.801 452.762 li
428.879 453.602 li
504.961 458.879 li
581.16 464.879 li
657.238 464.52 li
0 .990631 1 .000396735 cmyk
@
grestore
53.281 303.031 mo
43.199 292.949 li
43.199 303.031 mo
53.281 292.949 li
0 .990631 1 .000396735 cmyk
@
129.359 392.789 mo
119.281 382.711 li
119.281 392.789 mo
129.359 382.711 li
@
205.441 438.27 mo
195.359 428.191 li
195.359 438.27 mo
205.441 428.191 li
@
281.641 449.672 mo
271.559 439.59 li
271.559 449.672 mo
281.641 439.59 li
@
357.719 457.828 mo
347.641 447.75 li
347.641 457.828 mo
357.719 447.75 li
@
433.922 458.672 mo
423.84 448.59 li
423.84 458.672 mo
433.922 448.59 li
@
510 463.828 mo
499.922 453.75 li
499.922 463.828 mo
510 453.75 li
@
586.078 469.949 mo
576 459.871 li
576 469.949 mo
586.078 459.871 li
@
662.281 469.469 mo
652.199 459.391 li
652.199 469.469 mo
662.281 459.391 li
@
gsave
48.238 25.199 mo
657.961 25.199 li
657.961 481.32 li
48.238 481.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
48.238 164.039 mo
124.441 321.359 li
200.52 400.922 li
276.602 427.32 li
352.801 440.641 li
428.879 448.199 li
504.961 453.84 li
581.16 457.441 li
657.238 460.441 li
@
grestore
43.199 159.031 mo
53.16 159.031 li
53.16 168.988 li
43.199 168.988 li
cp
@
119.281 316.352 mo
129.238 316.352 li
129.238 326.309 li
119.281 326.309 li
cp
@
195.359 395.789 mo
205.32 395.789 li
205.32 405.75 li
195.359 405.75 li
cp
@
271.559 422.309 mo
281.52 422.309 li
281.52 432.27 li
271.559 432.27 li
cp
@
347.641 435.512 mo
357.602 435.512 li
357.602 445.469 li
347.641 445.469 li
cp
@
423.84 443.07 mo
433.801 443.07 li
433.801 453.031 li
423.84 453.031 li
cp
@
499.922 448.711 mo
509.879 448.711 li
509.879 458.672 li
499.922 458.672 li
cp
@
576 452.43 mo
585.961 452.43 li
585.961 462.391 li
576 462.391 li
cp
@
652.199 455.43 mo
662.16 455.43 li
662.16 465.391 li
652.199 465.391 li
cp
@
28.172 471.289 mo
35.266 471.289 li
35.266 488.379 li
28.172 488.379 li
cp
0 0 0 0 cmyk
ef
34.805 480.246 mo
34.801 480.93 34.75 481.551 34.645 482.113 cv
34.535 482.676 34.355 483.16 34.109 483.562 cv
33.855 483.969 33.527 484.281 33.129 484.5 cv
32.723 484.723 32.23 484.832 31.645 484.832 cv
31.086 484.832 30.613 484.734 30.234 484.535 cv
29.852 484.34 29.547 484.047 29.313 483.66 cv
29.078 483.273 28.91 482.801 28.816 482.234 cv
28.715 481.672 28.668 481.023 28.668 480.289 cv
28.668 479.617 28.723 478.996 28.832 478.43 cv
28.941 477.867 29.117 477.383 29.367 476.977 cv
29.609 476.574 29.934 476.262 30.34 476.035 cv
30.738 475.816 31.234 475.703 31.824 475.703 cv
32.383 475.703 32.855 475.805 33.238 476 cv
33.621 476.203 33.926 476.496 34.16 476.879 cv
34.391 477.27 34.559 477.742 34.656 478.305 cv
34.754 478.867 34.801 479.516 34.805 480.246 cv
cp
33.598 480.328 mo
33.594 479.887 33.578 479.488 33.551 479.137 cv
33.516 478.785 33.469 478.477 33.41 478.207 cv
33.344 477.937 33.266 477.707 33.168 477.512 cv
33.07 477.32 32.953 477.16 32.816 477.031 cv
32.676 476.906 32.516 476.812 32.344 476.754 cv
32.164 476.699 31.969 476.672 31.754 476.668 cv
31.363 476.672 31.047 476.762 30.809 476.945 cv
30.563 477.129 30.371 477.383 30.234 477.699 cv
30.094 478.02 30 478.391 29.949 478.82 cv
29.898 479.25 29.875 479.715 29.875 480.207 cv
29.875 480.871 29.906 481.434 29.977 481.895 cv
30.043 482.363 30.152 482.742 30.305 483.031 cv
30.449 483.328 30.641 483.539 30.871 483.668 cv
31.102 483.805 31.383 483.871 31.715 483.867 cv
31.969 483.871 32.191 483.832 32.387 483.746 cv
32.578 483.668 32.746 483.547 32.887 483.391 cv
33.027 483.238 33.141 483.055 33.234 482.84 cv
33.32 482.625 33.395 482.387 33.453 482.125 cv
33.504 481.867 33.543 481.586 33.566 481.281 cv
33.586 480.977 33.594 480.66 33.598 480.328 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 425.75 mo
35.266 425.75 li
35.266 442.84 li
28.172 442.84 li
cp
0 0 0 0 cmyk
ef
34.531 438.684 mo
34.527 438.773 34.52 438.844 34.508 438.902 cv
34.492 438.965 34.473 439.016 34.453 439.047 cv
34.43 439.086 34.406 439.109 34.375 439.125 cv
34.344 439.141 34.313 439.148 34.285 439.148 cv
29.648 439.148 li
29.613 439.148 29.586 439.141 29.559 439.125 cv
29.531 439.109 29.504 439.086 29.48 439.047 cv
29.453 439.016 29.434 438.965 29.422 438.902 cv
29.406 438.844 29.398 438.773 29.402 438.684 cv
29.398 438.605 29.406 438.531 29.422 438.469 cv
29.434 438.41 29.449 438.363 29.473 438.324 cv
29.488 438.289 29.516 438.258 29.547 438.234 cv
29.578 438.215 29.609 438.207 29.648 438.203 cv
31.5 438.203 li
31.5 431.457 li
29.785 432.477 li
29.695 432.527 29.625 432.555 29.578 432.562 cv
29.523 432.57 29.48 432.562 29.449 432.531 cv
29.414 432.504 29.395 432.453 29.383 432.383 cv
29.371 432.316 29.363 432.23 29.367 432.121 cv
29.363 432.047 29.367 431.98 29.379 431.922 cv
29.383 431.871 29.395 431.824 29.41 431.785 cv
29.422 431.75 29.441 431.719 29.465 431.691 cv
29.488 431.664 29.52 431.637 29.566 431.609 cv
31.609 430.297 li
31.625 430.285 31.645 430.273 31.676 430.266 cv
31.699 430.258 31.734 430.25 31.781 430.238 cv
31.82 430.23 31.871 430.223 31.926 430.219 cv
31.98 430.219 32.047 430.219 32.133 430.215 cv
32.238 430.219 32.332 430.223 32.406 430.23 cv
32.477 430.238 32.531 430.254 32.578 430.27 cv
32.617 430.289 32.645 430.309 32.66 430.332 cv
32.668 430.359 32.676 430.383 32.68 430.406 cv
32.68 438.203 li
34.285 438.203 li
34.32 438.207 34.355 438.215 34.387 438.234 cv
34.418 438.258 34.441 438.289 34.465 438.324 cv
34.48 438.363 34.496 438.41 34.512 438.469 cv
34.52 438.531 34.527 438.605 34.531 438.684 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 380.211 mo
35.266 380.211 li
35.266 397.301 li
28.172 397.301 li
cp
0 0 0 0 cmyk
ef
34.512 393.094 mo
34.508 393.18 34.504 393.254 34.492 393.316 cv
34.48 393.383 34.465 393.437 34.445 393.477 cv
34.422 393.523 34.395 393.555 34.363 393.57 cv
34.328 393.594 34.289 393.602 34.25 393.602 cv
29.348 393.602 li
29.285 393.602 29.227 393.594 29.18 393.578 cv
29.129 393.562 29.09 393.539 29.055 393.5 cv
29.02 393.469 28.992 393.414 28.98 393.344 cv
28.961 393.273 28.953 393.187 28.957 393.086 cv
28.953 392.996 28.957 392.918 28.965 392.848 cv
28.969 392.781 28.984 392.723 29.012 392.668 cv
29.035 392.617 29.066 392.562 29.102 392.508 cv
29.137 392.457 29.18 392.402 29.238 392.34 cv
31.012 390.516 li
31.422 390.098 31.75 389.723 32 389.387 cv
32.246 389.059 32.438 388.754 32.57 388.477 cv
32.703 388.203 32.789 387.953 32.836 387.727 cv
32.875 387.504 32.898 387.293 32.898 387.098 cv
32.898 386.902 32.863 386.719 32.797 386.539 cv
32.73 386.367 32.637 386.211 32.512 386.074 cv
32.387 385.945 32.23 385.84 32.043 385.758 cv
31.855 385.684 31.637 385.645 31.391 385.641 cv
31.102 385.645 30.844 385.684 30.617 385.758 cv
30.387 385.84 30.188 385.926 30.016 386.012 cv
29.844 386.105 29.699 386.187 29.582 386.266 cv
29.465 386.344 29.379 386.383 29.328 386.383 cv
29.293 386.383 29.262 386.375 29.238 386.355 cv
29.207 386.34 29.188 386.309 29.172 386.266 cv
29.156 386.227 29.141 386.172 29.133 386.102 cv
29.121 386.035 29.117 385.953 29.121 385.855 cv
29.117 385.789 29.121 385.73 29.129 385.68 cv
29.133 385.629 29.141 385.586 29.152 385.547 cv
29.16 385.512 29.176 385.477 29.195 385.445 cv
29.215 385.414 29.25 385.375 29.309 385.324 cv
29.359 385.277 29.453 385.211 29.59 385.129 cv
29.723 385.047 29.895 384.969 30.098 384.887 cv
30.301 384.809 30.523 384.738 30.77 384.684 cv
31.012 384.629 31.27 384.602 31.543 384.602 cv
31.969 384.602 32.344 384.664 32.668 384.785 cv
32.988 384.906 33.254 385.07 33.469 385.281 cv
33.68 385.492 33.84 385.738 33.945 386.012 cv
34.051 386.293 34.105 386.59 34.105 386.902 cv
34.105 387.191 34.078 387.473 34.027 387.75 cv
33.977 388.035 33.871 388.34 33.711 388.664 cv
33.547 388.992 33.313 389.355 33.008 389.754 cv
32.699 390.156 32.293 390.617 31.789 391.133 cv
30.383 392.602 li
34.242 392.602 li
34.273 392.605 34.309 392.617 34.348 392.633 cv
34.379 392.656 34.41 392.687 34.438 392.727 cv
34.461 392.77 34.48 392.82 34.492 392.879 cv
34.504 392.945 34.508 393.016 34.512 393.094 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 334.672 mo
35.266 334.672 li
35.266 351.762 li
28.172 351.762 li
cp
0 0 0 0 cmyk
ef
34.441 345.535 mo
34.438 345.945 34.367 346.312 34.227 346.637 cv
34.082 346.965 33.879 347.246 33.617 347.477 cv
33.352 347.711 33.023 347.887 32.637 348.012 cv
32.246 348.137 31.809 348.199 31.324 348.199 cv
31.02 348.199 30.742 348.172 30.488 348.125 cv
30.227 348.078 29.996 348.027 29.801 347.957 cv
29.598 347.895 29.434 347.824 29.301 347.754 cv
29.168 347.684 29.082 347.633 29.051 347.598 cv
29.012 347.57 28.988 347.539 28.973 347.504 cv
28.953 347.473 28.934 347.434 28.922 347.387 cv
28.906 347.344 28.898 347.289 28.891 347.219 cv
28.883 347.156 28.879 347.074 28.883 346.973 cv
28.879 346.812 28.895 346.699 28.93 346.633 cv
28.961 346.57 29.008 346.535 29.07 346.535 cv
29.113 346.535 29.195 346.574 29.32 346.645 cv
29.441 346.723 29.602 346.801 29.797 346.883 cv
29.988 346.969 30.215 347.047 30.48 347.117 cv
30.738 347.191 31.031 347.227 31.352 347.227 cv
31.66 347.227 31.93 347.187 32.168 347.109 cv
32.398 347.031 32.598 346.922 32.758 346.781 cv
32.914 346.641 33.031 346.473 33.113 346.277 cv
33.191 346.082 33.23 345.871 33.234 345.645 cv
33.23 345.395 33.18 345.168 33.082 344.965 cv
32.977 344.766 32.828 344.594 32.637 344.445 cv
32.438 344.301 32.199 344.187 31.914 344.109 cv
31.629 344.031 31.305 343.992 30.941 343.992 cv
30.07 343.992 li
30.027 343.992 29.992 343.984 29.957 343.969 cv
29.922 343.953 29.891 343.926 29.867 343.887 cv
29.84 343.852 29.82 343.805 29.805 343.746 cv
29.789 343.687 29.781 343.609 29.781 343.512 cv
29.781 343.426 29.785 343.355 29.801 343.297 cv
29.809 343.242 29.828 343.195 29.859 343.16 cv
29.883 343.125 29.914 343.102 29.945 343.082 cv
29.977 343.07 30.012 343.062 30.055 343.059 cv
30.828 343.059 li
31.129 343.062 31.398 343.023 31.641 342.941 cv
31.875 342.867 32.078 342.754 32.25 342.605 cv
32.414 342.461 32.543 342.285 32.633 342.082 cv
32.723 341.879 32.77 341.652 32.77 341.398 cv
32.77 341.219 32.738 341.043 32.68 340.875 cv
32.617 340.711 32.527 340.566 32.41 340.441 cv
32.289 340.316 32.137 340.219 31.957 340.148 cv
31.77 340.078 31.559 340.043 31.316 340.043 cv
31.051 340.043 30.805 340.086 30.586 340.164 cv
30.359 340.246 30.164 340.332 29.992 340.422 cv
29.816 340.516 29.672 340.602 29.559 340.68 cv
29.445 340.762 29.363 340.801 29.32 340.797 cv
29.285 340.801 29.258 340.793 29.234 340.781 cv
29.207 340.77 29.188 340.746 29.172 340.711 cv
29.156 340.68 29.145 340.633 29.137 340.566 cv
29.129 340.508 29.125 340.426 29.129 340.324 cv
29.125 340.258 29.125 340.199 29.133 340.145 cv
29.133 340.094 29.145 340.047 29.16 340.004 cv
29.176 339.969 29.191 339.934 29.211 339.898 cv
29.227 339.871 29.258 339.832 29.301 339.785 cv
29.344 339.742 29.43 339.68 29.566 339.598 cv
29.695 339.516 29.859 339.437 30.055 339.355 cv
30.246 339.277 30.469 339.207 30.727 339.152 cv
30.977 339.098 31.25 339.07 31.547 339.07 cv
31.953 339.07 32.316 339.125 32.629 339.227 cv
32.941 339.336 33.199 339.484 33.41 339.672 cv
33.613 339.867 33.77 340.098 33.875 340.363 cv
33.977 340.633 34.027 340.926 34.031 341.25 cv
34.027 341.531 33.992 341.793 33.922 342.027 cv
33.848 342.27 33.738 342.48 33.598 342.664 cv
33.453 342.852 33.281 343.008 33.078 343.137 cv
32.871 343.27 32.633 343.363 32.363 343.41 cv
32.363 343.422 li
32.668 343.457 32.949 343.531 33.203 343.652 cv
33.457 343.773 33.676 343.926 33.859 344.109 cv
34.039 344.293 34.18 344.508 34.285 344.75 cv
34.387 344.996 34.438 345.258 34.441 345.535 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 289.141 mo
35.266 289.141 li
35.266 306.231 li
28.172 306.231 li
cp
0 0 0 0 cmyk
ef
34.887 299.996 mo
34.883 300.148 34.859 300.27 34.816 300.355 cv
34.77 300.445 34.707 300.488 34.625 300.484 cv
33.625 300.484 li
33.625 302.348 li
33.625 302.387 33.613 302.418 33.598 302.441 cv
33.574 302.469 33.543 302.488 33.5 302.508 cv
33.449 302.523 33.387 302.535 33.316 302.547 cv
33.238 302.555 33.145 302.559 33.027 302.562 cv
32.91 302.559 32.813 302.555 32.742 302.547 cv
32.664 302.535 32.605 302.523 32.563 302.508 cv
32.516 302.488 32.484 302.469 32.469 302.441 cv
32.449 302.418 32.441 302.387 32.445 302.348 cv
32.445 300.484 li
28.816 300.484 li
28.758 300.488 28.715 300.48 28.68 300.465 cv
28.645 300.453 28.609 300.426 28.582 300.387 cv
28.551 300.352 28.531 300.301 28.52 300.23 cv
28.508 300.164 28.504 300.074 28.504 299.961 cv
28.504 299.879 28.504 299.801 28.512 299.73 cv
28.512 299.66 28.523 299.598 28.539 299.543 cv
28.551 299.488 28.566 299.434 28.594 299.379 cv
28.613 299.324 28.641 299.27 28.676 299.207 cv
31.836 293.82 li
31.855 293.785 31.891 293.754 31.938 293.727 cv
31.98 293.699 32.035 293.676 32.109 293.656 cv
32.176 293.641 32.262 293.629 32.367 293.617 cv
32.469 293.613 32.59 293.609 32.73 293.605 cv
32.879 293.609 33.016 293.613 33.133 293.625 cv
33.246 293.637 33.336 293.652 33.41 293.668 cv
33.477 293.687 33.531 293.711 33.57 293.742 cv
33.605 293.773 33.625 293.809 33.625 293.848 cv
33.625 299.512 li
34.625 299.512 li
34.699 299.516 34.762 299.555 34.813 299.633 cv
34.859 299.715 34.883 299.836 34.887 299.996 cv
cp
32.445 294.645 mo
32.434 294.645 li
29.582 299.512 li
32.445 299.512 li
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 243.602 mo
35.266 243.602 li
35.266 260.692 li
28.172 260.692 li
cp
0 0 0 0 cmyk
ef
34.469 254.117 mo
34.469 254.594 34.387 255.016 34.227 255.387 cv
34.066 255.758 33.84 256.07 33.551 256.324 cv
33.254 256.578 32.906 256.773 32.504 256.902 cv
32.098 257.035 31.648 257.098 31.156 257.098 cv
30.879 257.098 30.617 257.078 30.375 257.039 cv
30.125 257 29.906 256.953 29.719 256.898 cv
29.523 256.844 29.367 256.789 29.242 256.73 cv
29.117 256.68 29.039 256.637 29.008 256.602 cv
28.973 256.57 28.949 256.539 28.938 256.512 cv
28.922 256.484 28.906 256.453 28.898 256.41 cv
28.883 256.375 28.875 256.324 28.875 256.262 cv
28.867 256.203 28.867 256.133 28.867 256.051 cv
28.867 255.977 28.871 255.906 28.879 255.844 cv
28.887 255.781 28.898 255.73 28.918 255.691 cv
28.934 255.652 28.953 255.625 28.98 255.605 cv
29.004 255.59 29.035 255.582 29.066 255.578 cv
29.113 255.582 29.184 255.609 29.277 255.664 cv
29.371 255.723 29.5 255.785 29.664 255.852 cv
29.828 255.918 30.027 255.98 30.27 256.039 cv
30.504 256.098 30.789 256.125 31.125 256.125 cv
31.426 256.125 31.707 256.09 31.965 256.016 cv
32.219 255.945 32.441 255.832 32.629 255.676 cv
32.813 255.523 32.957 255.328 33.063 255.09 cv
33.168 254.855 33.219 254.566 33.223 254.227 cv
33.219 253.945 33.176 253.695 33.086 253.477 cv
32.996 253.258 32.859 253.078 32.676 252.934 cv
32.488 252.793 32.254 252.687 31.973 252.613 cv
31.688 252.543 31.348 252.504 30.961 252.504 cv
30.676 252.504 30.438 252.52 30.238 252.547 cv
30.035 252.578 29.848 252.594 29.676 252.59 cv
29.547 252.594 29.453 252.562 29.402 252.5 cv
29.344 252.441 29.316 252.328 29.32 252.156 cv
29.32 248.543 li
29.316 248.395 29.352 248.285 29.426 248.207 cv
29.492 248.137 29.594 248.098 29.73 248.098 cv
33.66 248.098 li
33.695 248.098 33.73 248.109 33.766 248.129 cv
33.797 248.152 33.824 248.184 33.852 248.223 cv
33.871 248.266 33.887 248.316 33.902 248.379 cv
33.91 248.445 33.918 248.523 33.922 248.605 cv
33.918 248.773 33.895 248.898 33.855 248.988 cv
33.809 249.082 33.75 249.129 33.672 249.125 cv
30.5 249.125 li
30.5 251.613 li
30.652 251.594 30.809 251.582 30.973 251.574 cv
31.129 251.57 31.316 251.566 31.531 251.566 cv
32.016 251.566 32.441 251.629 32.809 251.75 cv
33.172 251.871 33.477 252.043 33.727 252.262 cv
33.969 252.488 34.156 252.754 34.281 253.066 cv
34.406 253.383 34.469 253.734 34.469 254.117 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 198.059 mo
35.266 198.059 li
35.266 215.149 li
28.172 215.149 li
cp
0 0 0 0 cmyk
ef
34.738 208.551 mo
34.738 208.941 34.676 209.32 34.559 209.68 cv
34.434 210.047 34.25 210.363 34.008 210.637 cv
33.758 210.914 33.445 211.137 33.07 211.301 cv
32.688 211.469 32.242 211.551 31.727 211.551 cv
31.355 211.551 31.027 211.508 30.746 211.414 cv
30.461 211.328 30.215 211.195 30.004 211.023 cv
29.793 210.855 29.617 210.648 29.48 210.402 cv
29.34 210.156 29.227 209.875 29.145 209.559 cv
29.059 209.246 29 208.902 28.965 208.523 cv
28.926 208.152 28.906 207.75 28.91 207.316 cv
28.906 206.937 28.926 206.555 28.969 206.164 cv
29.008 205.781 29.082 205.406 29.188 205.039 cv
29.293 204.68 29.438 204.34 29.617 204.023 cv
29.797 203.707 30.023 203.43 30.297 203.195 cv
30.57 202.961 30.895 202.773 31.273 202.633 cv
31.652 202.496 32.094 202.43 32.598 202.426 cv
32.766 202.43 32.938 202.437 33.109 202.457 cv
33.281 202.48 33.441 202.512 33.59 202.543 cv
33.738 202.582 33.859 202.617 33.961 202.656 cv
34.059 202.695 34.125 202.73 34.16 202.754 cv
34.188 202.781 34.211 202.809 34.23 202.836 cv
34.246 202.867 34.262 202.898 34.27 202.934 cv
34.277 202.969 34.281 203.008 34.289 203.051 cv
34.289 203.094 34.293 203.148 34.297 203.211 cv
34.293 203.297 34.293 203.367 34.293 203.422 cv
34.289 203.484 34.277 203.531 34.266 203.566 cv
34.246 203.605 34.227 203.633 34.203 203.648 cv
34.176 203.668 34.145 203.676 34.105 203.676 cv
34.055 203.676 33.984 203.66 33.898 203.629 cv
33.809 203.598 33.703 203.562 33.582 203.52 cv
33.457 203.484 33.309 203.449 33.133 203.414 cv
32.957 203.387 32.754 203.371 32.523 203.367 cv
32.094 203.371 31.727 203.457 31.422 203.629 cv
31.117 203.801 30.867 204.035 30.672 204.328 cv
30.477 204.621 30.332 204.961 30.242 205.344 cv
30.145 205.734 30.09 206.137 30.082 206.555 cv
30.199 206.488 30.336 206.422 30.484 206.352 cv
30.633 206.285 30.793 206.223 30.969 206.164 cv
31.145 206.113 31.332 206.066 31.527 206.031 cv
31.723 206 31.934 205.984 32.16 205.98 cv
32.637 205.984 33.039 206.051 33.371 206.176 cv
33.699 206.309 33.965 206.488 34.172 206.719 cv
34.371 206.949 34.516 207.219 34.605 207.531 cv
34.691 207.844 34.738 208.184 34.738 208.551 cv
cp
33.543 208.66 mo
33.543 208.398 33.516 208.156 33.465 207.937 cv
33.41 207.723 33.32 207.539 33.199 207.383 cv
33.074 207.234 32.91 207.117 32.707 207.035 cv
32.496 206.953 32.242 206.91 31.945 206.91 cv
31.773 206.91 31.605 206.926 31.438 206.957 cv
31.266 206.988 31.102 207.031 30.945 207.078 cv
30.785 207.133 30.637 207.195 30.496 207.266 cv
30.352 207.34 30.219 207.414 30.102 207.492 cv
30.098 208.086 30.137 208.582 30.215 208.977 cv
30.289 209.375 30.398 209.691 30.543 209.93 cv
30.688 210.172 30.867 210.344 31.082 210.445 cv
31.297 210.551 31.547 210.602 31.836 210.598 cv
32.125 210.602 32.379 210.547 32.594 210.434 cv
32.809 210.328 32.984 210.18 33.129 209.992 cv
33.27 209.809 33.375 209.602 33.441 209.371 cv
33.508 209.141 33.543 208.906 33.543 208.66 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 152.52 mo
35.266 152.52 li
35.266 169.61 li
28.172 169.61 li
cp
0 0 0 0 cmyk
ef
34.641 157.527 mo
34.637 157.613 34.633 157.687 34.629 157.75 cv
34.621 157.82 34.613 157.883 34.602 157.941 cv
34.59 158.008 34.574 158.066 34.555 158.121 cv
34.531 158.18 34.508 158.242 34.484 158.301 cv
31.289 165.664 li
31.262 165.723 31.234 165.766 31.203 165.797 cv
31.168 165.832 31.125 165.859 31.07 165.879 cv
31.016 165.898 30.945 165.91 30.867 165.922 cv
30.781 165.926 30.684 165.93 30.566 165.934 cv
30.41 165.93 30.289 165.922 30.203 165.91 cv
30.117 165.895 30.055 165.879 30.016 165.848 cv
29.977 165.82 29.957 165.781 29.965 165.738 cv
29.965 165.695 29.98 165.645 30.012 165.582 cv
33.371 158.055 li
29.113 158.055 li
29.027 158.059 28.961 158.012 28.918 157.918 cv
28.875 157.828 28.855 157.699 28.855 157.535 cv
28.855 157.449 28.859 157.375 28.871 157.309 cv
28.883 157.246 28.898 157.191 28.922 157.148 cv
28.941 157.105 28.969 157.074 29.004 157.051 cv
29.035 157.031 29.074 157.02 29.113 157.02 cv
34.285 157.02 li
34.344 157.02 34.398 157.027 34.449 157.043 cv
34.496 157.059 34.531 157.086 34.559 157.125 cv
34.582 157.164 34.602 157.219 34.617 157.281 cv
34.629 157.348 34.637 157.43 34.641 157.527 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 106.98 mo
35.266 106.98 li
35.266 124.07 li
28.172 124.07 li
cp
0 0 0 0 cmyk
ef
34.715 118.062 mo
34.715 118.449 34.645 118.793 34.508 119.09 cv
34.371 119.395 34.176 119.645 33.918 119.848 cv
33.66 120.055 33.34 120.211 32.961 120.312 cv
32.578 120.418 32.145 120.469 31.66 120.469 cv
31.199 120.469 30.789 120.422 30.43 120.328 cv
30.066 120.234 29.762 120.094 29.512 119.902 cv
29.262 119.719 29.07 119.488 28.938 119.211 cv
28.805 118.937 28.738 118.625 28.738 118.27 cv
28.738 117.996 28.781 117.738 28.875 117.504 cv
28.961 117.27 29.094 117.055 29.27 116.859 cv
29.438 116.664 29.648 116.48 29.902 116.305 cv
30.152 116.137 30.438 115.973 30.754 115.816 cv
30.48 115.676 30.238 115.527 30.027 115.367 cv
29.816 115.211 29.637 115.039 29.492 114.852 cv
29.344 114.668 29.234 114.473 29.16 114.262 cv
29.082 114.055 29.043 113.824 29.047 113.574 cv
29.043 113.266 29.098 112.973 29.215 112.699 cv
29.324 112.43 29.496 112.195 29.723 111.992 cv
29.949 111.793 30.234 111.633 30.586 111.516 cv
30.93 111.398 31.34 111.34 31.809 111.34 cv
32.254 111.34 32.641 111.395 32.969 111.5 cv
33.297 111.609 33.566 111.754 33.777 111.937 cv
33.988 112.125 34.145 112.344 34.25 112.594 cv
34.348 112.844 34.398 113.113 34.402 113.402 cv
34.398 113.637 34.359 113.863 34.289 114.074 cv
34.211 114.293 34.102 114.496 33.953 114.684 cv
33.805 114.879 33.625 115.059 33.414 115.223 cv
33.203 115.395 32.961 115.551 32.688 115.691 cv
33.008 115.855 33.293 116.02 33.551 116.187 cv
33.801 116.355 34.016 116.535 34.191 116.73 cv
34.359 116.926 34.488 117.133 34.582 117.348 cv
34.668 117.566 34.715 117.805 34.715 118.062 cv
cp
33.234 113.512 mo
33.23 113.324 33.199 113.148 33.133 112.992 cv
33.066 112.836 32.969 112.703 32.844 112.594 cv
32.715 112.484 32.555 112.402 32.367 112.344 cv
32.172 112.289 31.957 112.262 31.719 112.258 cv
31.223 112.262 30.848 112.371 30.598 112.594 cv
30.34 112.82 30.215 113.129 30.219 113.512 cv
30.215 113.691 30.246 113.855 30.309 114.008 cv
30.371 114.164 30.465 114.309 30.598 114.445 cv
30.723 114.582 30.887 114.715 31.09 114.844 cv
31.285 114.977 31.523 115.113 31.801 115.254 cv
32.262 115.02 32.617 114.758 32.863 114.465 cv
33.109 114.18 33.23 113.863 33.234 113.512 cv
cp
33.523 118.187 mo
33.52 117.98 33.48 117.789 33.406 117.617 cv
33.324 117.449 33.207 117.289 33.051 117.137 cv
32.895 116.988 32.695 116.844 32.461 116.703 cv
32.223 116.566 31.953 116.422 31.645 116.27 cv
31.355 116.414 31.102 116.555 30.887 116.695 cv
30.668 116.836 30.488 116.984 30.352 117.133 cv
30.211 117.289 30.105 117.445 30.035 117.609 cv
29.961 117.777 29.926 117.961 29.93 118.16 cv
29.926 118.605 30.078 118.949 30.387 119.187 cv
30.688 119.434 31.141 119.555 31.746 119.551 cv
32.328 119.555 32.773 119.434 33.074 119.184 cv
33.371 118.941 33.52 118.609 33.523 118.187 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
28.172 61.441 mo
35.266 61.441 li
35.266 78.531 li
28.172 78.531 li
cp
0 0 0 0 cmyk
ef
34.578 69.996 mo
34.574 70.383 34.551 70.77 34.508 71.16 cv
34.461 71.555 34.383 71.934 34.277 72.297 cv
34.164 72.66 34.02 73 33.836 73.316 cv
33.648 73.637 33.414 73.918 33.137 74.152 cv
32.852 74.395 32.516 74.578 32.133 74.711 cv
31.742 74.844 31.297 74.91 30.789 74.91 cv
30.59 74.91 30.398 74.895 30.215 74.871 cv
30.027 74.844 29.859 74.816 29.715 74.781 cv
29.563 74.746 29.438 74.707 29.34 74.664 cv
29.238 74.625 29.164 74.586 29.121 74.543 cv
29.074 74.504 29.043 74.449 29.023 74.375 cv
29 74.305 28.988 74.207 28.992 74.09 cv
28.988 73.988 28.992 73.91 29 73.852 cv
29.004 73.793 29.016 73.746 29.031 73.715 cv
29.047 73.684 29.066 73.664 29.09 73.648 cv
29.113 73.641 29.145 73.633 29.184 73.629 cv
29.23 73.633 29.301 73.648 29.395 73.68 cv
29.484 73.715 29.598 73.754 29.742 73.793 cv
29.879 73.836 30.043 73.875 30.23 73.906 cv
30.414 73.945 30.625 73.961 30.863 73.957 cv
31.305 73.961 31.684 73.875 32.004 73.703 cv
32.316 73.531 32.578 73.305 32.781 73.016 cv
32.984 72.73 33.133 72.395 33.234 72.012 cv
33.332 71.633 33.387 71.234 33.398 70.812 cv
33.152 70.957 32.863 71.082 32.527 71.187 cv
32.188 71.301 31.801 71.355 31.363 71.352 cv
30.871 71.355 30.457 71.289 30.121 71.152 cv
29.785 71.02 29.512 70.836 29.309 70.602 cv
29.102 70.371 28.957 70.094 28.871 69.77 cv
28.781 69.453 28.738 69.102 28.738 68.723 cv
28.738 68.332 28.793 67.961 28.91 67.602 cv
29.02 67.25 29.199 66.937 29.445 66.668 cv
29.684 66.398 29.992 66.184 30.371 66.023 cv
30.742 65.863 31.191 65.781 31.715 65.781 cv
32.082 65.781 32.406 65.828 32.695 65.922 cv
32.977 66.016 33.227 66.152 33.441 66.328 cv
33.648 66.504 33.828 66.715 33.977 66.965 cv
34.121 67.215 34.238 67.496 34.328 67.809 cv
34.414 68.125 34.477 68.469 34.52 68.836 cv
34.555 69.207 34.574 69.594 34.578 69.996 cv
cp
33.379 69.867 mo
33.379 69.285 33.34 68.793 33.262 68.391 cv
33.184 67.992 33.066 67.668 32.918 67.418 cv
32.766 67.172 32.582 66.992 32.363 66.883 cv
32.141 66.773 31.887 66.719 31.605 66.719 cv
31.301 66.719 31.047 66.773 30.84 66.883 cv
30.629 66.992 30.457 67.137 30.324 67.312 cv
30.188 67.496 30.086 67.699 30.023 67.926 cv
29.957 68.156 29.926 68.395 29.93 68.633 cv
29.926 68.906 29.957 69.152 30.016 69.371 cv
30.07 69.598 30.16 69.785 30.293 69.941 cv
30.418 70.098 30.586 70.219 30.793 70.305 cv
30.996 70.391 31.25 70.434 31.555 70.43 cv
31.895 70.434 32.227 70.383 32.551 70.277 cv
32.867 70.176 33.145 70.039 33.379 69.867 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
21.078 15.91 mo
35.266 15.91 li
35.266 33 li
21.078 33 li
cp
0 0 0 0 cmyk
ef
27.453 28.766 mo
27.449 28.855 27.441 28.926 27.43 28.984 cv
27.414 29.047 27.395 29.098 27.375 29.129 cv
27.352 29.168 27.328 29.191 27.297 29.207 cv
27.266 29.223 27.234 29.23 27.207 29.23 cv
22.57 29.23 li
22.535 29.23 22.508 29.223 22.48 29.207 cv
22.453 29.191 22.426 29.168 22.402 29.129 cv
22.375 29.098 22.355 29.047 22.344 28.984 cv
22.328 28.926 22.32 28.855 22.324 28.766 cv
22.32 28.687 22.328 28.613 22.344 28.551 cv
22.355 28.492 22.371 28.445 22.395 28.406 cv
22.41 28.371 22.438 28.34 22.469 28.316 cv
22.5 28.297 22.531 28.289 22.57 28.285 cv
24.422 28.285 li
24.422 21.539 li
22.707 22.559 li
22.617 22.609 22.547 22.637 22.5 22.645 cv
22.445 22.652 22.402 22.645 22.371 22.613 cv
22.336 22.586 22.316 22.535 22.305 22.465 cv
22.293 22.398 22.285 22.312 22.289 22.203 cv
22.285 22.129 22.289 22.062 22.301 22.004 cv
22.305 21.953 22.316 21.906 22.332 21.867 cv
22.344 21.832 22.363 21.801 22.387 21.773 cv
22.41 21.746 22.441 21.719 22.488 21.691 cv
24.531 20.379 li
24.547 20.367 24.566 20.355 24.598 20.348 cv
24.621 20.34 24.656 20.332 24.703 20.32 cv
24.742 20.312 24.793 20.305 24.848 20.301 cv
24.902 20.301 24.969 20.301 25.055 20.297 cv
25.16 20.301 25.254 20.305 25.328 20.312 cv
25.398 20.32 25.453 20.336 25.5 20.352 cv
25.539 20.371 25.566 20.391 25.582 20.414 cv
25.59 20.441 25.598 20.465 25.602 20.488 cv
25.602 28.285 li
27.207 28.285 li
27.242 28.289 27.277 28.297 27.309 28.316 cv
27.34 28.34 27.363 28.371 27.387 28.406 cv
27.402 28.445 27.418 28.492 27.434 28.551 cv
27.441 28.613 27.449 28.687 27.453 28.766 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
34.805 24.773 mo
34.801 25.457 34.75 26.078 34.645 26.641 cv
34.535 27.203 34.355 27.687 34.109 28.09 cv
33.855 28.496 33.527 28.809 33.129 29.027 cv
32.723 29.25 32.23 29.359 31.645 29.359 cv
31.086 29.359 30.613 29.262 30.234 29.062 cv
29.852 28.867 29.547 28.574 29.313 28.187 cv
29.078 27.801 28.91 27.328 28.816 26.762 cv
28.715 26.199 28.668 25.551 28.668 24.816 cv
28.668 24.145 28.723 23.523 28.832 22.957 cv
28.941 22.395 29.117 21.91 29.367 21.504 cv
29.609 21.102 29.934 20.789 30.34 20.562 cv
30.738 20.344 31.234 20.23 31.824 20.23 cv
32.383 20.23 32.855 20.332 33.238 20.527 cv
33.621 20.73 33.926 21.023 34.16 21.406 cv
34.391 21.797 34.559 22.27 34.656 22.832 cv
34.754 23.395 34.801 24.043 34.805 24.773 cv
cp
33.598 24.855 mo
33.594 24.414 33.578 24.016 33.551 23.664 cv
33.516 23.312 33.469 23.004 33.41 22.734 cv
33.344 22.465 33.266 22.234 33.168 22.039 cv
33.07 21.848 32.953 21.687 32.816 21.559 cv
32.676 21.434 32.516 21.34 32.344 21.281 cv
32.164 21.227 31.969 21.199 31.754 21.195 cv
31.363 21.199 31.047 21.289 30.809 21.473 cv
30.563 21.656 30.371 21.91 30.234 22.227 cv
30.094 22.547 30 22.918 29.949 23.348 cv
29.898 23.777 29.875 24.242 29.875 24.734 cv
29.875 25.398 29.906 25.961 29.977 26.422 cv
30.043 26.891 30.152 27.27 30.305 27.559 cv
30.449 27.855 30.641 28.066 30.871 28.195 cv
31.102 28.332 31.383 28.398 31.715 28.395 cv
31.969 28.398 32.191 28.359 32.387 28.273 cv
32.578 28.195 32.746 28.074 32.887 27.918 cv
33.027 27.766 33.141 27.582 33.234 27.367 cv
33.32 27.152 33.395 26.914 33.453 26.652 cv
33.504 26.395 33.543 26.113 33.566 25.809 cv
33.586 25.504 33.594 25.187 33.598 24.855 cv
cp
f
51.066 502.457 mo
51.063 502.547 51.055 502.617 51.043 502.676 cv
51.027 502.738 51.008 502.789 50.988 502.82 cv
50.965 502.859 50.941 502.883 50.91 502.898 cv
50.879 502.914 50.848 502.922 50.82 502.922 cv
46.184 502.922 li
46.148 502.922 46.121 502.914 46.094 502.898 cv
46.066 502.883 46.039 502.859 46.016 502.82 cv
45.988 502.789 45.969 502.738 45.957 502.676 cv
45.941 502.617 45.934 502.547 45.938 502.457 cv
45.934 502.379 45.941 502.305 45.957 502.242 cv
45.969 502.184 45.984 502.137 46.008 502.098 cv
46.023 502.062 46.051 502.031 46.082 502.008 cv
46.113 501.988 46.145 501.98 46.184 501.977 cv
48.035 501.977 li
48.035 495.23 li
46.32 496.25 li
46.23 496.301 46.16 496.328 46.113 496.336 cv
46.059 496.344 46.016 496.336 45.984 496.305 cv
45.949 496.277 45.93 496.227 45.918 496.156 cv
45.906 496.09 45.898 496.004 45.902 495.895 cv
45.898 495.82 45.902 495.754 45.914 495.695 cv
45.918 495.645 45.93 495.598 45.945 495.559 cv
45.957 495.523 45.977 495.492 46 495.465 cv
46.023 495.437 46.055 495.41 46.102 495.383 cv
48.145 494.07 li
48.16 494.059 48.18 494.047 48.211 494.039 cv
48.234 494.031 48.27 494.023 48.316 494.012 cv
48.355 494.004 48.406 493.996 48.461 493.992 cv
48.516 493.992 48.582 493.992 48.668 493.988 cv
48.773 493.992 48.867 493.996 48.941 494.004 cv
49.012 494.012 49.066 494.027 49.113 494.043 cv
49.152 494.062 49.18 494.082 49.195 494.105 cv
49.203 494.133 49.211 494.156 49.215 494.18 cv
49.215 501.977 li
50.82 501.977 li
50.855 501.98 50.891 501.988 50.922 502.008 cv
50.953 502.031 50.977 502.062 51 502.098 cv
51.016 502.137 51.031 502.184 51.047 502.242 cv
51.055 502.305 51.063 502.379 51.066 502.457 cv
cp
f
127.195 502.414 mo
127.191 502.5 127.188 502.574 127.176 502.637 cv
127.164 502.703 127.148 502.758 127.129 502.797 cv
127.105 502.844 127.078 502.875 127.047 502.891 cv
127.012 502.914 126.973 502.922 126.934 502.922 cv
122.031 502.922 li
121.969 502.922 121.91 502.914 121.863 502.898 cv
121.813 502.883 121.773 502.859 121.738 502.82 cv
121.703 502.789 121.676 502.734 121.664 502.664 cv
121.645 502.594 121.637 502.508 121.641 502.406 cv
121.637 502.316 121.641 502.238 121.648 502.168 cv
121.652 502.102 121.668 502.043 121.695 501.988 cv
121.719 501.937 121.75 501.883 121.785 501.828 cv
121.82 501.777 121.863 501.723 121.922 501.66 cv
123.695 499.836 li
124.105 499.418 124.434 499.043 124.684 498.707 cv
124.93 498.379 125.121 498.074 125.254 497.797 cv
125.387 497.523 125.473 497.273 125.52 497.047 cv
125.559 496.824 125.582 496.613 125.582 496.418 cv
125.582 496.223 125.547 496.039 125.48 495.859 cv
125.414 495.687 125.32 495.531 125.195 495.395 cv
125.07 495.266 124.914 495.16 124.727 495.078 cv
124.539 495.004 124.32 494.965 124.074 494.961 cv
123.785 494.965 123.527 495.004 123.301 495.078 cv
123.07 495.16 122.871 495.246 122.699 495.332 cv
122.527 495.426 122.383 495.508 122.266 495.586 cv
122.148 495.664 122.063 495.703 122.012 495.703 cv
121.977 495.703 121.945 495.695 121.922 495.676 cv
121.891 495.66 121.871 495.629 121.855 495.586 cv
121.84 495.547 121.824 495.492 121.816 495.422 cv
121.805 495.355 121.801 495.273 121.805 495.176 cv
121.801 495.109 121.805 495.051 121.813 495 cv
121.816 494.949 121.824 494.906 121.836 494.867 cv
121.844 494.832 121.859 494.797 121.879 494.766 cv
121.898 494.734 121.934 494.695 121.992 494.645 cv
122.043 494.598 122.137 494.531 122.273 494.449 cv
122.406 494.367 122.578 494.289 122.781 494.207 cv
122.984 494.129 123.207 494.059 123.453 494.004 cv
123.695 493.949 123.953 493.922 124.227 493.922 cv
124.652 493.922 125.027 493.984 125.352 494.105 cv
125.672 494.227 125.938 494.391 126.152 494.602 cv
126.363 494.812 126.523 495.059 126.629 495.332 cv
126.734 495.613 126.789 495.91 126.789 496.223 cv
126.789 496.512 126.762 496.793 126.711 497.07 cv
126.66 497.355 126.555 497.66 126.395 497.984 cv
126.23 498.312 125.996 498.676 125.691 499.074 cv
125.383 499.477 124.977 499.937 124.473 500.453 cv
123.066 501.922 li
126.926 501.922 li
126.957 501.926 126.992 501.937 127.031 501.953 cv
127.063 501.977 127.094 502.008 127.121 502.047 cv
127.145 502.09 127.164 502.141 127.176 502.199 cv
127.188 502.266 127.191 502.336 127.195 502.414 cv
cp
f
203.699 500.398 mo
203.695 500.551 203.672 500.672 203.629 500.758 cv
203.582 500.848 203.52 500.891 203.438 500.887 cv
202.438 500.887 li
202.438 502.75 li
202.438 502.789 202.426 502.82 202.41 502.844 cv
202.387 502.871 202.355 502.891 202.313 502.91 cv
202.262 502.926 202.199 502.937 202.129 502.949 cv
202.051 502.957 201.957 502.961 201.84 502.965 cv
201.723 502.961 201.625 502.957 201.555 502.949 cv
201.477 502.937 201.418 502.926 201.375 502.91 cv
201.328 502.891 201.297 502.871 201.281 502.844 cv
201.262 502.82 201.254 502.789 201.258 502.75 cv
201.258 500.887 li
197.629 500.887 li
197.57 500.891 197.527 500.883 197.492 500.867 cv
197.457 500.855 197.422 500.828 197.395 500.789 cv
197.363 500.754 197.344 500.703 197.332 500.633 cv
197.32 500.566 197.316 500.477 197.316 500.363 cv
197.316 500.281 197.316 500.203 197.324 500.133 cv
197.324 500.062 197.336 500 197.352 499.945 cv
197.363 499.891 197.379 499.836 197.406 499.781 cv
197.426 499.727 197.453 499.672 197.488 499.609 cv
200.648 494.223 li
200.668 494.187 200.703 494.156 200.75 494.129 cv
200.793 494.102 200.848 494.078 200.922 494.059 cv
200.988 494.043 201.074 494.031 201.18 494.02 cv
201.281 494.016 201.402 494.012 201.543 494.008 cv
201.691 494.012 201.828 494.016 201.945 494.027 cv
202.059 494.039 202.148 494.055 202.223 494.07 cv
202.289 494.09 202.344 494.113 202.383 494.145 cv
202.418 494.176 202.438 494.211 202.438 494.25 cv
202.438 499.914 li
203.438 499.914 li
203.512 499.918 203.574 499.957 203.625 500.035 cv
203.672 500.117 203.695 500.238 203.699 500.398 cv
cp
201.258 495.047 mo
201.246 495.047 li
198.395 499.914 li
201.258 499.914 li
cp
f
279.684 500.051 mo
279.684 500.441 279.621 500.82 279.504 501.18 cv
279.379 501.547 279.195 501.863 278.953 502.137 cv
278.703 502.414 278.391 502.637 278.016 502.801 cv
277.633 502.969 277.188 503.051 276.672 503.051 cv
276.301 503.051 275.973 503.008 275.691 502.914 cv
275.406 502.828 275.16 502.695 274.949 502.523 cv
274.738 502.355 274.563 502.148 274.426 501.902 cv
274.285 501.656 274.172 501.375 274.09 501.059 cv
274.004 500.746 273.945 500.402 273.91 500.023 cv
273.871 499.652 273.852 499.25 273.855 498.816 cv
273.852 498.437 273.871 498.055 273.914 497.664 cv
273.953 497.281 274.027 496.906 274.133 496.539 cv
274.238 496.18 274.383 495.84 274.563 495.523 cv
274.742 495.207 274.969 494.93 275.242 494.695 cv
275.516 494.461 275.84 494.273 276.219 494.133 cv
276.598 493.996 277.039 493.93 277.543 493.926 cv
277.711 493.93 277.883 493.937 278.055 493.957 cv
278.227 493.98 278.387 494.012 278.535 494.043 cv
278.684 494.082 278.805 494.117 278.906 494.156 cv
279.004 494.195 279.07 494.23 279.105 494.254 cv
279.133 494.281 279.156 494.309 279.176 494.336 cv
279.191 494.367 279.207 494.398 279.215 494.434 cv
279.223 494.469 279.227 494.508 279.234 494.551 cv
279.234 494.594 279.238 494.648 279.242 494.711 cv
279.238 494.797 279.238 494.867 279.238 494.922 cv
279.234 494.984 279.223 495.031 279.211 495.066 cv
279.191 495.105 279.172 495.133 279.148 495.148 cv
279.121 495.168 279.09 495.176 279.051 495.176 cv
279 495.176 278.93 495.16 278.844 495.129 cv
278.754 495.098 278.648 495.062 278.527 495.02 cv
278.402 494.984 278.254 494.949 278.078 494.914 cv
277.902 494.887 277.699 494.871 277.469 494.867 cv
277.039 494.871 276.672 494.957 276.367 495.129 cv
276.063 495.301 275.813 495.535 275.617 495.828 cv
275.422 496.121 275.277 496.461 275.188 496.844 cv
275.09 497.234 275.035 497.637 275.027 498.055 cv
275.145 497.988 275.281 497.922 275.43 497.852 cv
275.578 497.785 275.738 497.723 275.914 497.664 cv
276.09 497.613 276.277 497.566 276.473 497.531 cv
276.668 497.5 276.879 497.484 277.105 497.48 cv
277.582 497.484 277.984 497.551 278.316 497.676 cv
278.645 497.809 278.91 497.988 279.117 498.219 cv
279.316 498.449 279.461 498.719 279.551 499.031 cv
279.637 499.344 279.684 499.684 279.684 500.051 cv
cp
278.488 500.16 mo
278.488 499.898 278.461 499.656 278.41 499.437 cv
278.355 499.223 278.266 499.039 278.145 498.883 cv
278.02 498.734 277.855 498.617 277.652 498.535 cv
277.441 498.453 277.188 498.41 276.891 498.41 cv
276.719 498.41 276.551 498.426 276.383 498.457 cv
276.211 498.488 276.047 498.531 275.891 498.578 cv
275.73 498.633 275.582 498.695 275.441 498.766 cv
275.297 498.84 275.164 498.914 275.047 498.992 cv
275.043 499.586 275.082 500.082 275.16 500.477 cv
275.234 500.875 275.344 501.191 275.488 501.43 cv
275.633 501.672 275.813 501.844 276.027 501.945 cv
276.242 502.051 276.492 502.102 276.781 502.098 cv
277.07 502.102 277.324 502.047 277.539 501.934 cv
277.754 501.828 277.93 501.68 278.074 501.492 cv
278.215 501.309 278.32 501.102 278.387 500.871 cv
278.453 500.641 278.488 500.406 278.488 500.16 cv
cp
f
355.809 500.645 mo
355.809 501.031 355.738 501.375 355.602 501.672 cv
355.465 501.977 355.27 502.227 355.012 502.43 cv
354.754 502.637 354.434 502.793 354.055 502.895 cv
353.672 503 353.238 503.051 352.754 503.051 cv
352.293 503.051 351.883 503.004 351.523 502.91 cv
351.16 502.816 350.855 502.676 350.605 502.484 cv
350.355 502.301 350.164 502.07 350.031 501.793 cv
349.898 501.52 349.832 501.207 349.832 500.852 cv
349.832 500.578 349.875 500.32 349.969 500.086 cv
350.055 499.852 350.188 499.637 350.363 499.441 cv
350.531 499.246 350.742 499.062 350.996 498.887 cv
351.246 498.719 351.531 498.555 351.848 498.398 cv
351.574 498.258 351.332 498.109 351.121 497.949 cv
350.91 497.793 350.73 497.621 350.586 497.434 cv
350.438 497.25 350.328 497.055 350.254 496.844 cv
350.176 496.637 350.137 496.406 350.141 496.156 cv
350.137 495.848 350.191 495.555 350.309 495.281 cv
350.418 495.012 350.59 494.777 350.816 494.574 cv
351.043 494.375 351.328 494.215 351.68 494.098 cv
352.023 493.98 352.434 493.922 352.902 493.922 cv
353.348 493.922 353.734 493.977 354.063 494.082 cv
354.391 494.191 354.66 494.336 354.871 494.52 cv
355.082 494.707 355.238 494.926 355.344 495.176 cv
355.441 495.426 355.492 495.695 355.496 495.984 cv
355.492 496.219 355.453 496.445 355.383 496.656 cv
355.305 496.875 355.195 497.078 355.047 497.266 cv
354.898 497.461 354.719 497.641 354.508 497.805 cv
354.297 497.977 354.055 498.133 353.781 498.273 cv
354.102 498.437 354.387 498.602 354.645 498.77 cv
354.895 498.937 355.109 499.117 355.285 499.312 cv
355.453 499.508 355.582 499.715 355.676 499.93 cv
355.762 500.148 355.809 500.387 355.809 500.645 cv
cp
354.328 496.094 mo
354.324 495.906 354.293 495.73 354.227 495.574 cv
354.16 495.418 354.063 495.285 353.938 495.176 cv
353.809 495.066 353.648 494.984 353.461 494.926 cv
353.266 494.871 353.051 494.844 352.813 494.84 cv
352.316 494.844 351.941 494.953 351.691 495.176 cv
351.434 495.402 351.309 495.711 351.313 496.094 cv
351.309 496.273 351.34 496.437 351.402 496.59 cv
351.465 496.746 351.559 496.891 351.691 497.027 cv
351.816 497.164 351.98 497.297 352.184 497.426 cv
352.379 497.559 352.617 497.695 352.895 497.836 cv
353.355 497.602 353.711 497.34 353.957 497.047 cv
354.203 496.762 354.324 496.445 354.328 496.094 cv
cp
354.617 500.77 mo
354.613 500.562 354.574 500.371 354.5 500.199 cv
354.418 500.031 354.301 499.871 354.145 499.719 cv
353.988 499.57 353.789 499.426 353.555 499.285 cv
353.316 499.148 353.047 499.004 352.738 498.852 cv
352.449 498.996 352.195 499.137 351.98 499.277 cv
351.762 499.418 351.582 499.566 351.445 499.715 cv
351.305 499.871 351.199 500.027 351.129 500.191 cv
351.055 500.359 351.02 500.543 351.023 500.742 cv
351.02 501.187 351.172 501.531 351.48 501.77 cv
351.781 502.016 352.234 502.137 352.84 502.133 cv
353.422 502.137 353.867 502.016 354.168 501.766 cv
354.465 501.523 354.613 501.191 354.617 500.77 cv
cp
f
428.207 502.457 mo
428.203 502.547 428.195 502.617 428.184 502.676 cv
428.168 502.738 428.148 502.789 428.129 502.82 cv
428.105 502.859 428.082 502.883 428.051 502.898 cv
428.02 502.914 427.988 502.922 427.961 502.922 cv
423.324 502.922 li
423.289 502.922 423.262 502.914 423.234 502.898 cv
423.207 502.883 423.18 502.859 423.156 502.82 cv
423.129 502.789 423.109 502.738 423.098 502.676 cv
423.082 502.617 423.074 502.547 423.078 502.457 cv
423.074 502.379 423.082 502.305 423.098 502.242 cv
423.109 502.184 423.125 502.137 423.148 502.098 cv
423.164 502.062 423.191 502.031 423.223 502.008 cv
423.254 501.988 423.285 501.98 423.324 501.977 cv
425.176 501.977 li
425.176 495.23 li
423.461 496.25 li
423.371 496.301 423.301 496.328 423.254 496.336 cv
423.199 496.344 423.156 496.336 423.125 496.305 cv
423.09 496.277 423.07 496.227 423.059 496.156 cv
423.047 496.09 423.039 496.004 423.043 495.895 cv
423.039 495.82 423.043 495.754 423.055 495.695 cv
423.059 495.645 423.07 495.598 423.086 495.559 cv
423.098 495.523 423.117 495.492 423.141 495.465 cv
423.164 495.437 423.195 495.41 423.242 495.383 cv
425.285 494.07 li
425.301 494.059 425.32 494.047 425.352 494.039 cv
425.375 494.031 425.41 494.023 425.457 494.012 cv
425.496 494.004 425.547 493.996 425.602 493.992 cv
425.656 493.992 425.723 493.992 425.809 493.988 cv
425.914 493.992 426.008 493.996 426.082 494.004 cv
426.152 494.012 426.207 494.027 426.254 494.043 cv
426.293 494.062 426.32 494.082 426.336 494.105 cv
426.344 494.133 426.352 494.156 426.355 494.18 cv
426.355 501.977 li
427.961 501.977 li
427.996 501.98 428.031 501.988 428.063 502.008 cv
428.094 502.031 428.117 502.062 428.141 502.098 cv
428.156 502.137 428.172 502.184 428.188 502.242 cv
428.195 502.305 428.203 502.379 428.207 502.457 cv
cp
f
435.559 498.465 mo
435.555 499.148 435.504 499.77 435.398 500.332 cv
435.289 500.895 435.109 501.379 434.863 501.781 cv
434.609 502.187 434.281 502.5 433.883 502.719 cv
433.477 502.941 432.984 503.051 432.398 503.051 cv
431.84 503.051 431.367 502.953 430.988 502.754 cv
430.605 502.559 430.301 502.266 430.066 501.879 cv
429.832 501.492 429.664 501.02 429.57 500.453 cv
429.469 499.891 429.422 499.242 429.422 498.508 cv
429.422 497.836 429.477 497.215 429.586 496.648 cv
429.695 496.086 429.871 495.602 430.121 495.195 cv
430.363 494.793 430.688 494.48 431.094 494.254 cv
431.492 494.035 431.988 493.922 432.578 493.922 cv
433.137 493.922 433.609 494.023 433.992 494.219 cv
434.375 494.422 434.68 494.715 434.914 495.098 cv
435.145 495.488 435.313 495.961 435.41 496.523 cv
435.508 497.086 435.555 497.734 435.559 498.465 cv
cp
434.352 498.547 mo
434.348 498.105 434.332 497.707 434.305 497.355 cv
434.27 497.004 434.223 496.695 434.164 496.426 cv
434.098 496.156 434.02 495.926 433.922 495.73 cv
433.824 495.539 433.707 495.379 433.57 495.25 cv
433.43 495.125 433.27 495.031 433.098 494.973 cv
432.918 494.918 432.723 494.891 432.508 494.887 cv
432.117 494.891 431.801 494.98 431.563 495.164 cv
431.316 495.348 431.125 495.602 430.988 495.918 cv
430.848 496.238 430.754 496.609 430.703 497.039 cv
430.652 497.469 430.629 497.934 430.629 498.426 cv
430.629 499.09 430.66 499.652 430.73 500.113 cv
430.797 500.582 430.906 500.961 431.059 501.25 cv
431.203 501.547 431.395 501.758 431.625 501.887 cv
431.855 502.023 432.137 502.09 432.469 502.086 cv
432.723 502.09 432.945 502.051 433.141 501.965 cv
433.332 501.887 433.5 501.766 433.641 501.609 cv
433.781 501.457 433.895 501.273 433.988 501.059 cv
434.074 500.844 434.148 500.605 434.207 500.344 cv
434.258 500.086 434.297 499.805 434.32 499.5 cv
434.34 499.195 434.348 498.879 434.352 498.547 cv
cp
f
504.336 502.457 mo
504.332 502.547 504.324 502.617 504.313 502.676 cv
504.297 502.738 504.277 502.789 504.258 502.82 cv
504.234 502.859 504.211 502.883 504.18 502.898 cv
504.148 502.914 504.117 502.922 504.09 502.922 cv
499.453 502.922 li
499.418 502.922 499.391 502.914 499.363 502.898 cv
499.336 502.883 499.309 502.859 499.285 502.82 cv
499.258 502.789 499.238 502.738 499.227 502.676 cv
499.211 502.617 499.203 502.547 499.207 502.457 cv
499.203 502.379 499.211 502.305 499.227 502.242 cv
499.238 502.184 499.254 502.137 499.277 502.098 cv
499.293 502.062 499.32 502.031 499.352 502.008 cv
499.383 501.988 499.414 501.98 499.453 501.977 cv
501.305 501.977 li
501.305 495.23 li
499.59 496.25 li
499.5 496.301 499.43 496.328 499.383 496.336 cv
499.328 496.344 499.285 496.336 499.254 496.305 cv
499.219 496.277 499.199 496.227 499.188 496.156 cv
499.176 496.09 499.168 496.004 499.172 495.895 cv
499.168 495.82 499.172 495.754 499.184 495.695 cv
499.188 495.645 499.199 495.598 499.215 495.559 cv
499.227 495.523 499.246 495.492 499.27 495.465 cv
499.293 495.437 499.324 495.41 499.371 495.383 cv
501.414 494.07 li
501.43 494.059 501.449 494.047 501.48 494.039 cv
501.504 494.031 501.539 494.023 501.586 494.012 cv
501.625 494.004 501.676 493.996 501.73 493.992 cv
501.785 493.992 501.852 493.992 501.938 493.988 cv
502.043 493.992 502.137 493.996 502.211 494.004 cv
502.281 494.012 502.336 494.027 502.383 494.043 cv
502.422 494.062 502.449 494.082 502.465 494.105 cv
502.473 494.133 502.48 494.156 502.484 494.18 cv
502.484 501.977 li
504.09 501.977 li
504.125 501.98 504.16 501.988 504.191 502.008 cv
504.223 502.031 504.246 502.062 504.27 502.098 cv
504.285 502.137 504.301 502.184 504.316 502.242 cv
504.324 502.305 504.332 502.379 504.336 502.457 cv
cp
f
511.395 502.414 mo
511.391 502.5 511.387 502.574 511.375 502.637 cv
511.363 502.703 511.348 502.758 511.328 502.797 cv
511.305 502.844 511.277 502.875 511.246 502.891 cv
511.211 502.914 511.172 502.922 511.133 502.922 cv
506.23 502.922 li
506.168 502.922 506.109 502.914 506.063 502.898 cv
506.012 502.883 505.973 502.859 505.938 502.82 cv
505.902 502.789 505.875 502.734 505.863 502.664 cv
505.844 502.594 505.836 502.508 505.84 502.406 cv
505.836 502.316 505.84 502.238 505.848 502.168 cv
505.852 502.102 505.867 502.043 505.895 501.988 cv
505.918 501.937 505.949 501.883 505.984 501.828 cv
506.02 501.777 506.063 501.723 506.121 501.66 cv
507.895 499.836 li
508.305 499.418 508.633 499.043 508.883 498.707 cv
509.129 498.379 509.32 498.074 509.453 497.797 cv
509.586 497.523 509.672 497.273 509.719 497.047 cv
509.758 496.824 509.781 496.613 509.781 496.418 cv
509.781 496.223 509.746 496.039 509.68 495.859 cv
509.613 495.687 509.52 495.531 509.395 495.395 cv
509.27 495.266 509.113 495.16 508.926 495.078 cv
508.738 495.004 508.52 494.965 508.273 494.961 cv
507.984 494.965 507.727 495.004 507.5 495.078 cv
507.27 495.16 507.07 495.246 506.898 495.332 cv
506.727 495.426 506.582 495.508 506.465 495.586 cv
506.348 495.664 506.262 495.703 506.211 495.703 cv
506.176 495.703 506.145 495.695 506.121 495.676 cv
506.09 495.66 506.07 495.629 506.055 495.586 cv
506.039 495.547 506.023 495.492 506.016 495.422 cv
506.004 495.355 506 495.273 506.004 495.176 cv
506 495.109 506.004 495.051 506.012 495 cv
506.016 494.949 506.023 494.906 506.035 494.867 cv
506.043 494.832 506.059 494.797 506.078 494.766 cv
506.098 494.734 506.133 494.695 506.191 494.645 cv
506.242 494.598 506.336 494.531 506.473 494.449 cv
506.605 494.367 506.777 494.289 506.98 494.207 cv
507.184 494.129 507.406 494.059 507.652 494.004 cv
507.895 493.949 508.152 493.922 508.426 493.922 cv
508.852 493.922 509.227 493.984 509.551 494.105 cv
509.871 494.227 510.137 494.391 510.352 494.602 cv
510.563 494.812 510.723 495.059 510.828 495.332 cv
510.934 495.613 510.988 495.91 510.988 496.223 cv
510.988 496.512 510.961 496.793 510.91 497.07 cv
510.859 497.355 510.754 497.66 510.594 497.984 cv
510.43 498.312 510.195 498.676 509.891 499.074 cv
509.582 499.477 509.176 499.937 508.672 500.453 cv
507.266 501.922 li
511.125 501.922 li
511.156 501.926 511.191 501.937 511.23 501.953 cv
511.262 501.977 511.293 502.008 511.32 502.047 cv
511.344 502.09 511.363 502.141 511.375 502.199 cv
511.387 502.266 511.391 502.336 511.395 502.414 cv
cp
f
580.484 502.457 mo
580.48 502.547 580.473 502.617 580.461 502.676 cv
580.445 502.738 580.426 502.789 580.406 502.82 cv
580.383 502.859 580.359 502.883 580.328 502.898 cv
580.297 502.914 580.266 502.922 580.238 502.922 cv
575.602 502.922 li
575.566 502.922 575.539 502.914 575.512 502.898 cv
575.484 502.883 575.457 502.859 575.434 502.82 cv
575.406 502.789 575.387 502.738 575.375 502.676 cv
575.359 502.617 575.352 502.547 575.355 502.457 cv
575.352 502.379 575.359 502.305 575.375 502.242 cv
575.387 502.184 575.402 502.137 575.426 502.098 cv
575.441 502.062 575.469 502.031 575.5 502.008 cv
575.531 501.988 575.563 501.98 575.602 501.977 cv
577.453 501.977 li
577.453 495.23 li
575.738 496.25 li
575.648 496.301 575.578 496.328 575.531 496.336 cv
575.477 496.344 575.434 496.336 575.402 496.305 cv
575.367 496.277 575.348 496.227 575.336 496.156 cv
575.324 496.09 575.316 496.004 575.32 495.895 cv
575.316 495.82 575.32 495.754 575.332 495.695 cv
575.336 495.645 575.348 495.598 575.363 495.559 cv
575.375 495.523 575.395 495.492 575.418 495.465 cv
575.441 495.437 575.473 495.41 575.52 495.383 cv
577.563 494.07 li
577.578 494.059 577.598 494.047 577.629 494.039 cv
577.652 494.031 577.688 494.023 577.734 494.012 cv
577.773 494.004 577.824 493.996 577.879 493.992 cv
577.934 493.992 578 493.992 578.086 493.988 cv
578.191 493.992 578.285 493.996 578.359 494.004 cv
578.43 494.012 578.484 494.027 578.531 494.043 cv
578.57 494.062 578.598 494.082 578.613 494.105 cv
578.621 494.133 578.629 494.156 578.633 494.18 cv
578.633 501.977 li
580.238 501.977 li
580.273 501.98 580.309 501.988 580.34 502.008 cv
580.371 502.031 580.395 502.062 580.418 502.098 cv
580.434 502.137 580.449 502.184 580.465 502.242 cv
580.473 502.305 580.48 502.379 580.484 502.457 cv
cp
f
587.922 500.398 mo
587.918 500.551 587.895 500.672 587.852 500.758 cv
587.805 500.848 587.742 500.891 587.66 500.887 cv
586.66 500.887 li
586.66 502.75 li
586.66 502.789 586.648 502.82 586.633 502.844 cv
586.609 502.871 586.578 502.891 586.535 502.91 cv
586.484 502.926 586.422 502.937 586.352 502.949 cv
586.273 502.957 586.18 502.961 586.063 502.965 cv
585.945 502.961 585.848 502.957 585.777 502.949 cv
585.699 502.937 585.641 502.926 585.598 502.91 cv
585.551 502.891 585.52 502.871 585.504 502.844 cv
585.484 502.82 585.477 502.789 585.48 502.75 cv
585.48 500.887 li
581.852 500.887 li
581.793 500.891 581.75 500.883 581.715 500.867 cv
581.68 500.855 581.645 500.828 581.617 500.789 cv
581.586 500.754 581.566 500.703 581.555 500.633 cv
581.543 500.566 581.539 500.477 581.539 500.363 cv
581.539 500.281 581.539 500.203 581.547 500.133 cv
581.547 500.062 581.559 500 581.574 499.945 cv
581.586 499.891 581.602 499.836 581.629 499.781 cv
581.648 499.727 581.676 499.672 581.711 499.609 cv
584.871 494.223 li
584.891 494.187 584.926 494.156 584.973 494.129 cv
585.016 494.102 585.07 494.078 585.145 494.059 cv
585.211 494.043 585.297 494.031 585.402 494.02 cv
585.504 494.016 585.625 494.012 585.766 494.008 cv
585.914 494.012 586.051 494.016 586.168 494.027 cv
586.281 494.039 586.371 494.055 586.445 494.07 cv
586.512 494.09 586.566 494.113 586.605 494.145 cv
586.641 494.176 586.66 494.211 586.66 494.25 cv
586.66 499.914 li
587.66 499.914 li
587.734 499.918 587.797 499.957 587.848 500.035 cv
587.895 500.117 587.918 500.238 587.922 500.398 cv
cp
585.48 495.047 mo
585.469 495.047 li
582.617 499.914 li
585.48 499.914 li
cp
f
656.617 502.457 mo
656.613 502.547 656.605 502.617 656.594 502.676 cv
656.578 502.738 656.559 502.789 656.539 502.82 cv
656.516 502.859 656.492 502.883 656.461 502.898 cv
656.43 502.914 656.398 502.922 656.371 502.922 cv
651.734 502.922 li
651.699 502.922 651.672 502.914 651.645 502.898 cv
651.617 502.883 651.59 502.859 651.566 502.82 cv
651.539 502.789 651.52 502.738 651.508 502.676 cv
651.492 502.617 651.484 502.547 651.488 502.457 cv
651.484 502.379 651.492 502.305 651.508 502.242 cv
651.52 502.184 651.535 502.137 651.559 502.098 cv
651.574 502.062 651.602 502.031 651.633 502.008 cv
651.664 501.988 651.695 501.98 651.734 501.977 cv
653.586 501.977 li
653.586 495.23 li
651.871 496.25 li
651.781 496.301 651.711 496.328 651.664 496.336 cv
651.609 496.344 651.566 496.336 651.535 496.305 cv
651.5 496.277 651.48 496.227 651.469 496.156 cv
651.457 496.09 651.449 496.004 651.453 495.895 cv
651.449 495.82 651.453 495.754 651.465 495.695 cv
651.469 495.645 651.48 495.598 651.496 495.559 cv
651.508 495.523 651.527 495.492 651.551 495.465 cv
651.574 495.437 651.605 495.41 651.652 495.383 cv
653.695 494.07 li
653.711 494.059 653.73 494.047 653.762 494.039 cv
653.785 494.031 653.82 494.023 653.867 494.012 cv
653.906 494.004 653.957 493.996 654.012 493.992 cv
654.066 493.992 654.133 493.992 654.219 493.988 cv
654.324 493.992 654.418 493.996 654.492 494.004 cv
654.563 494.012 654.617 494.027 654.664 494.043 cv
654.703 494.062 654.73 494.082 654.746 494.105 cv
654.754 494.133 654.762 494.156 654.766 494.18 cv
654.766 501.977 li
656.371 501.977 li
656.406 501.98 656.441 501.988 656.473 502.008 cv
656.504 502.031 656.527 502.062 656.551 502.098 cv
656.566 502.137 656.582 502.184 656.598 502.242 cv
656.605 502.305 656.613 502.379 656.617 502.457 cv
cp
f
663.902 500.051 mo
663.902 500.441 663.84 500.82 663.723 501.18 cv
663.598 501.547 663.414 501.863 663.172 502.137 cv
662.922 502.414 662.609 502.637 662.234 502.801 cv
661.852 502.969 661.406 503.051 660.891 503.051 cv
660.52 503.051 660.191 503.008 659.91 502.914 cv
659.625 502.828 659.379 502.695 659.168 502.523 cv
658.957 502.355 658.781 502.148 658.645 501.902 cv
658.504 501.656 658.391 501.375 658.309 501.059 cv
658.223 500.746 658.164 500.402 658.129 500.023 cv
658.09 499.652 658.07 499.25 658.074 498.816 cv
658.07 498.437 658.09 498.055 658.133 497.664 cv
658.172 497.281 658.246 496.906 658.352 496.539 cv
658.457 496.18 658.602 495.84 658.781 495.523 cv
658.961 495.207 659.188 494.93 659.461 494.695 cv
659.734 494.461 660.059 494.273 660.438 494.133 cv
660.816 493.996 661.258 493.93 661.762 493.926 cv
661.93 493.93 662.102 493.937 662.273 493.957 cv
662.445 493.98 662.605 494.012 662.754 494.043 cv
662.902 494.082 663.023 494.117 663.125 494.156 cv
663.223 494.195 663.289 494.23 663.324 494.254 cv
663.352 494.281 663.375 494.309 663.395 494.336 cv
663.41 494.367 663.426 494.398 663.434 494.434 cv
663.441 494.469 663.445 494.508 663.453 494.551 cv
663.453 494.594 663.457 494.648 663.461 494.711 cv
663.457 494.797 663.457 494.867 663.457 494.922 cv
663.453 494.984 663.441 495.031 663.43 495.066 cv
663.41 495.105 663.391 495.133 663.367 495.148 cv
663.34 495.168 663.309 495.176 663.27 495.176 cv
663.219 495.176 663.148 495.16 663.063 495.129 cv
662.973 495.098 662.867 495.062 662.746 495.02 cv
662.621 494.984 662.473 494.949 662.297 494.914 cv
662.121 494.887 661.918 494.871 661.688 494.867 cv
661.258 494.871 660.891 494.957 660.586 495.129 cv
660.281 495.301 660.031 495.535 659.836 495.828 cv
659.641 496.121 659.496 496.461 659.406 496.844 cv
659.309 497.234 659.254 497.637 659.246 498.055 cv
659.363 497.988 659.5 497.922 659.648 497.852 cv
659.797 497.785 659.957 497.723 660.133 497.664 cv
660.309 497.613 660.496 497.566 660.691 497.531 cv
660.887 497.5 661.098 497.484 661.324 497.48 cv
661.801 497.484 662.203 497.551 662.535 497.676 cv
662.863 497.809 663.129 497.988 663.336 498.219 cv
663.535 498.449 663.68 498.719 663.77 499.031 cv
663.855 499.344 663.902 499.684 663.902 500.051 cv
cp
662.707 500.16 mo
662.707 499.898 662.68 499.656 662.629 499.437 cv
662.574 499.223 662.484 499.039 662.363 498.883 cv
662.238 498.734 662.074 498.617 661.871 498.535 cv
661.66 498.453 661.406 498.41 661.109 498.41 cv
660.938 498.41 660.77 498.426 660.602 498.457 cv
660.43 498.488 660.266 498.531 660.109 498.578 cv
659.949 498.633 659.801 498.695 659.66 498.766 cv
659.516 498.84 659.383 498.914 659.266 498.992 cv
659.262 499.586 659.301 500.082 659.379 500.477 cv
659.453 500.875 659.563 501.191 659.707 501.43 cv
659.852 501.672 660.031 501.844 660.246 501.945 cv
660.461 502.051 660.711 502.102 661 502.098 cv
661.289 502.102 661.543 502.047 661.758 501.934 cv
661.973 501.828 662.148 501.68 662.293 501.492 cv
662.434 501.309 662.539 501.102 662.605 500.871 cv
662.672 500.641 662.707 500.406 662.707 500.16 cv
cp
f
7.676 276.98 mo
7.777 276.984 7.863 276.988 7.934 276.996 cv
8.008 277.008 8.066 277.023 8.109 277.047 cv
8.156 277.07 8.188 277.102 8.207 277.133 cv
8.23 277.172 8.242 277.207 8.238 277.246 cv
8.238 280.082 li
16.98 280.082 li
17.023 280.082 17.059 280.094 17.09 280.113 cv
17.121 280.137 17.148 280.172 17.164 280.223 cv
17.184 280.277 17.195 280.348 17.211 280.43 cv
17.223 280.52 17.23 280.625 17.23 280.75 cv
17.23 280.875 17.223 280.984 17.211 281.07 cv
17.195 281.164 17.184 281.234 17.164 281.281 cv
17.148 281.336 17.121 281.371 17.09 281.391 cv
17.059 281.414 17.023 281.426 16.98 281.422 cv
8.238 281.422 li
8.238 284.258 li
8.242 284.305 8.23 284.34 8.207 284.371 cv
8.188 284.406 8.156 284.434 8.109 284.453 cv
8.066 284.477 8.008 284.496 7.934 284.504 cv
7.863 284.52 7.777 284.523 7.676 284.523 cv
7.578 284.523 7.492 284.52 7.414 284.504 cv
7.344 284.496 7.281 284.477 7.23 284.453 cv
7.188 284.434 7.152 284.406 7.129 284.371 cv
7.109 284.34 7.102 284.305 7.098 284.258 cv
7.098 277.246 li
7.102 277.207 7.109 277.172 7.129 277.133 cv
7.152 277.102 7.188 277.07 7.23 277.047 cv
7.281 277.023 7.344 277.008 7.414 276.996 cv
7.492 276.988 7.578 276.984 7.676 276.98 cv
cp
f
16.988 274.391 mo
17.035 274.395 17.07 274.406 17.094 274.422 cv
17.125 274.445 17.148 274.477 17.168 274.523 cv
17.188 274.57 17.199 274.637 17.215 274.715 cv
17.223 274.801 17.23 274.906 17.23 275.035 cv
17.23 275.164 17.223 275.27 17.215 275.348 cv
17.199 275.434 17.188 275.5 17.168 275.547 cv
17.148 275.602 17.125 275.633 17.094 275.648 cv
17.07 275.668 17.035 275.68 16.988 275.676 cv
9.977 275.676 li
9.941 275.68 9.91 275.668 9.875 275.648 cv
9.848 275.633 9.82 275.602 9.797 275.547 cv
9.777 275.5 9.762 275.434 9.75 275.348 cv
9.742 275.27 9.738 275.164 9.734 275.035 cv
9.738 274.906 9.742 274.801 9.75 274.715 cv
9.762 274.637 9.777 274.57 9.797 274.523 cv
9.82 274.477 9.848 274.445 9.875 274.422 cv
9.91 274.406 9.941 274.395 9.977 274.391 cv
cp
7.605 274.242 mo
7.91 274.242 8.117 274.301 8.223 274.414 cv
8.336 274.527 8.391 274.738 8.387 275.043 cv
8.391 275.348 8.336 275.555 8.227 275.664 cv
8.121 275.781 7.918 275.836 7.621 275.832 cv
7.32 275.836 7.117 275.777 7.008 275.66 cv
6.902 275.547 6.848 275.336 6.844 275.027 cv
6.848 274.727 6.902 274.523 7.004 274.41 cv
7.113 274.301 7.313 274.242 7.605 274.242 cv
cp
f
16.988 261.535 mo
17.035 261.539 17.07 261.547 17.094 261.566 cv
17.125 261.59 17.148 261.625 17.168 261.668 cv
17.188 261.719 17.199 261.785 17.215 261.863 cv
17.223 261.949 17.23 262.051 17.23 262.176 cv
17.23 262.309 17.223 262.418 17.215 262.496 cv
17.199 262.582 17.188 262.648 17.168 262.695 cv
17.148 262.75 17.125 262.785 17.094 262.801 cv
17.07 262.824 17.035 262.832 16.988 262.832 cv
12.727 262.832 li
12.434 262.832 12.164 262.859 11.918 262.91 cv
11.676 262.965 11.465 263.047 11.285 263.16 cv
11.109 263.273 10.973 263.418 10.879 263.594 cv
10.785 263.773 10.738 263.984 10.738 264.219 cv
10.738 264.516 10.855 264.812 11.082 265.109 cv
11.316 265.414 11.648 265.742 12.086 266.098 cv
16.988 266.098 li
17.035 266.102 17.07 266.113 17.094 266.129 cv
17.125 266.152 17.148 266.184 17.168 266.23 cv
17.188 266.281 17.199 266.348 17.215 266.43 cv
17.223 266.516 17.23 266.621 17.23 266.742 cv
17.23 266.863 17.223 266.965 17.215 267.051 cv
17.199 267.137 17.188 267.207 17.168 267.254 cv
17.148 267.309 17.125 267.34 17.094 267.355 cv
17.07 267.375 17.035 267.387 16.988 267.383 cv
12.727 267.383 li
12.434 267.387 12.164 267.414 11.918 267.469 cv
11.676 267.527 11.465 267.613 11.285 267.727 cv
11.109 267.84 10.973 267.984 10.879 268.156 cv
10.785 268.336 10.738 268.543 10.738 268.777 cv
10.738 269.078 10.855 269.375 11.082 269.676 cv
11.316 269.977 11.648 270.305 12.086 270.656 cv
16.988 270.656 li
17.035 270.66 17.07 270.672 17.094 270.687 cv
17.125 270.711 17.148 270.742 17.168 270.789 cv
17.188 270.836 17.199 270.902 17.215 270.98 cv
17.223 271.066 17.23 271.172 17.23 271.301 cv
17.23 271.43 17.223 271.535 17.215 271.613 cv
17.199 271.699 17.188 271.766 17.168 271.812 cv
17.148 271.867 17.125 271.898 17.094 271.914 cv
17.07 271.934 17.035 271.945 16.988 271.941 cv
9.977 271.941 li
9.938 271.945 9.902 271.937 9.871 271.918 cv
9.844 271.906 9.82 271.875 9.793 271.824 cv
9.773 271.781 9.758 271.719 9.746 271.645 cv
9.742 271.574 9.738 271.48 9.734 271.355 cv
9.738 271.246 9.742 271.148 9.746 271.07 cv
9.758 270.996 9.773 270.937 9.793 270.895 cv
9.82 270.855 9.844 270.828 9.871 270.809 cv
9.902 270.793 9.938 270.785 9.977 270.781 cv
10.902 270.781 li
10.461 270.391 10.141 270.008 9.934 269.633 cv
9.73 269.266 9.625 268.887 9.625 268.504 cv
9.625 268.215 9.66 267.957 9.727 267.723 cv
9.797 267.496 9.891 267.289 10.012 267.109 cv
10.133 266.934 10.277 266.785 10.445 266.656 cv
10.617 266.535 10.809 266.43 11.012 266.344 cv
10.762 266.113 10.547 265.891 10.367 265.68 cv
10.195 265.469 10.051 265.266 9.938 265.07 cv
9.832 264.875 9.754 264.687 9.699 264.504 cv
9.652 264.32 9.625 264.133 9.625 263.945 cv
9.625 263.492 9.707 263.113 9.863 262.809 cv
10.027 262.504 10.238 262.258 10.5 262.062 cv
10.766 261.875 11.074 261.738 11.43 261.656 cv
11.785 261.578 12.16 261.539 12.555 261.535 cv
cp
f
13.18 253.203 mo
13.383 253.207 13.523 253.258 13.609 253.355 cv
13.695 253.461 13.738 253.578 13.738 253.703 cv
13.738 258.32 li
14.129 258.324 14.48 258.285 14.793 258.203 cv
15.105 258.129 15.375 257.996 15.594 257.812 cv
15.82 257.633 15.992 257.398 16.109 257.102 cv
16.234 256.812 16.293 256.453 16.289 256.027 cv
16.293 255.695 16.266 255.398 16.207 255.137 cv
16.156 254.875 16.094 254.648 16.023 254.457 cv
15.957 254.27 15.898 254.113 15.84 253.988 cv
15.789 253.867 15.762 253.773 15.758 253.711 cv
15.762 253.676 15.77 253.645 15.785 253.613 cv
15.805 253.586 15.832 253.562 15.867 253.543 cv
15.906 253.531 15.957 253.52 16.02 253.508 cv
16.086 253.504 16.164 253.5 16.258 253.496 cv
16.328 253.5 16.387 253.504 16.434 253.504 cv
16.48 253.512 16.523 253.516 16.563 253.523 cv
16.602 253.531 16.637 253.547 16.668 253.562 cv
16.699 253.586 16.73 253.609 16.758 253.633 cv
16.789 253.664 16.836 253.746 16.898 253.887 cv
16.965 254.027 17.027 254.211 17.09 254.434 cv
17.152 254.66 17.207 254.918 17.258 255.211 cv
17.305 255.504 17.328 255.816 17.332 256.148 cv
17.328 256.727 17.25 257.234 17.09 257.664 cv
16.93 258.102 16.691 258.465 16.375 258.758 cv
16.059 259.059 15.664 259.281 15.184 259.43 cv
14.707 259.578 14.148 259.652 13.512 259.652 cv
12.914 259.652 12.375 259.578 11.891 259.422 cv
11.414 259.27 11.004 259.043 10.668 258.746 cv
10.332 258.453 10.074 258.098 9.895 257.684 cv
9.715 257.27 9.625 256.805 9.625 256.289 cv
9.625 255.738 9.715 255.27 9.891 254.883 cv
10.07 254.496 10.309 254.18 10.605 253.926 cv
10.906 253.68 11.258 253.496 11.656 253.379 cv
12.063 253.266 12.492 253.207 12.945 253.203 cv
cp
12.797 254.496 mo
12.121 254.48 11.59 254.633 11.207 254.949 cv
10.824 255.266 10.633 255.734 10.629 256.352 cv
10.633 256.676 10.691 256.957 10.809 257.195 cv
10.93 257.437 11.09 257.637 11.285 257.797 cv
11.484 257.961 11.715 258.086 11.977 258.172 cv
12.238 258.262 12.512 258.312 12.797 258.32 cv
cp
f
6.445 245.031 mo
7.492 245.527 8.563 245.895 9.66 246.137 cv
10.762 246.379 11.867 246.5 12.977 246.5 cv
14.094 246.5 15.203 246.379 16.297 246.129 cv
17.395 245.887 18.465 245.523 19.52 245.047 cv
19.578 245.023 19.633 245.012 19.68 245.004 cv
19.723 245.004 19.758 245.02 19.789 245.055 cv
19.816 245.094 19.836 245.148 19.852 245.223 cv
19.859 245.301 19.867 245.406 19.871 245.531 cv
19.867 245.629 19.863 245.707 19.863 245.773 cv
19.855 245.844 19.848 245.902 19.832 245.949 cv
19.816 246 19.797 246.043 19.777 246.07 cv
19.754 246.105 19.73 246.129 19.707 246.141 cv
19.176 246.422 18.641 246.668 18.098 246.879 cv
17.555 247.098 17.004 247.277 16.445 247.418 cv
15.883 247.566 15.316 247.676 14.742 247.746 cv
14.168 247.824 13.586 247.859 13 247.855 cv
12.414 247.859 11.836 247.82 11.262 247.734 cv
10.691 247.656 10.125 247.539 9.559 247.391 cv
8.996 247.242 8.441 247.062 7.895 246.852 cv
7.352 246.641 6.809 246.402 6.273 246.133 cv
6.254 246.129 6.238 246.113 6.219 246.09 cv
6.207 246.066 6.191 246.035 6.172 245.992 cv
6.16 245.953 6.148 245.895 6.137 245.82 cv
6.133 245.75 6.129 245.656 6.125 245.539 cv
6.129 245.422 6.137 245.328 6.148 245.25 cv
6.168 245.18 6.188 245.121 6.211 245.078 cv
6.238 245.039 6.273 245.016 6.313 245.008 cv
6.359 245.004 6.402 245.012 6.445 245.031 cv
cp
f
16.98 231.75 mo
17.023 231.75 17.059 231.762 17.09 231.781 cv
17.121 231.805 17.148 231.844 17.164 231.895 cv
17.184 231.949 17.195 232.016 17.211 232.098 cv
17.223 232.184 17.23 232.293 17.23 232.422 cv
17.23 232.551 17.223 232.656 17.211 232.742 cv
17.195 232.832 17.184 232.902 17.164 232.953 cv
17.148 233.004 17.121 233.039 17.09 233.059 cv
17.059 233.082 17.023 233.094 16.98 233.09 cv
8.199 233.09 li
8.199 233.105 li
17.02 236.66 li
17.059 236.676 17.09 236.699 17.113 236.727 cv
17.141 236.758 17.164 236.801 17.18 236.852 cv
17.199 236.91 17.211 236.973 17.219 237.047 cv
17.227 237.121 17.23 237.211 17.23 237.312 cv
17.23 237.426 17.223 237.52 17.215 237.594 cv
17.199 237.676 17.188 237.742 17.172 237.789 cv
17.156 237.844 17.137 237.883 17.105 237.91 cv
17.082 237.941 17.051 237.961 17.02 237.969 cv
8.199 241.367 li
8.199 241.375 li
16.98 241.375 li
17.023 241.379 17.059 241.387 17.09 241.406 cv
17.121 241.43 17.148 241.469 17.164 241.52 cv
17.184 241.574 17.195 241.645 17.211 241.727 cv
17.223 241.816 17.23 241.926 17.23 242.055 cv
17.23 242.187 17.223 242.293 17.211 242.379 cv
17.195 242.465 17.184 242.535 17.164 242.582 cv
17.148 242.637 17.121 242.672 17.09 242.687 cv
17.059 242.711 17.023 242.719 16.98 242.715 cv
7.707 242.715 li
7.492 242.719 7.336 242.66 7.238 242.543 cv
7.148 242.426 7.102 242.297 7.098 242.152 cv
7.098 241.328 li
7.102 241.164 7.117 241.016 7.145 240.887 cv
7.18 240.762 7.227 240.652 7.293 240.555 cv
7.363 240.461 7.449 240.379 7.551 240.316 cv
7.656 240.254 7.781 240.199 7.918 240.152 cv
15.219 237.266 li
15.219 237.227 li
7.941 234.227 li
7.789 234.172 7.656 234.109 7.543 234.039 cv
7.438 233.973 7.348 233.895 7.281 233.812 cv
7.219 233.73 7.172 233.641 7.141 233.539 cv
7.113 233.441 7.102 233.324 7.098 233.191 cv
7.098 232.328 li
7.102 232.25 7.113 232.172 7.133 232.102 cv
7.16 232.031 7.195 231.973 7.242 231.922 cv
7.293 231.871 7.355 231.828 7.43 231.797 cv
7.508 231.766 7.602 231.75 7.707 231.75 cv
cp
f
16.988 227.93 mo
17.035 227.934 17.07 227.945 17.094 227.961 cv
17.125 227.984 17.148 228.016 17.168 228.062 cv
17.188 228.109 17.199 228.176 17.215 228.254 cv
17.223 228.34 17.23 228.445 17.23 228.574 cv
17.23 228.703 17.223 228.809 17.215 228.887 cv
17.199 228.973 17.188 229.039 17.168 229.086 cv
17.148 229.141 17.125 229.172 17.094 229.187 cv
17.07 229.207 17.035 229.219 16.988 229.215 cv
9.977 229.215 li
9.941 229.219 9.91 229.207 9.875 229.187 cv
9.848 229.172 9.82 229.141 9.797 229.086 cv
9.777 229.039 9.762 228.973 9.75 228.887 cv
9.742 228.809 9.738 228.703 9.734 228.574 cv
9.738 228.445 9.742 228.34 9.75 228.254 cv
9.762 228.176 9.777 228.109 9.797 228.062 cv
9.82 228.016 9.848 227.984 9.875 227.961 cv
9.91 227.945 9.941 227.934 9.977 227.93 cv
cp
7.605 227.781 mo
7.91 227.781 8.117 227.84 8.223 227.953 cv
8.336 228.066 8.391 228.277 8.387 228.582 cv
8.391 228.887 8.336 229.094 8.227 229.203 cv
8.121 229.32 7.918 229.375 7.621 229.371 cv
7.32 229.375 7.117 229.316 7.008 229.199 cv
6.902 229.086 6.848 228.875 6.844 228.566 cv
6.848 228.266 6.902 228.062 7.004 227.949 cv
7.113 227.84 7.313 227.781 7.605 227.781 cv
cp
f
16.988 219.508 mo
17.035 219.508 17.07 219.52 17.094 219.539 cv
17.125 219.562 17.148 219.598 17.168 219.641 cv
17.188 219.691 17.199 219.754 17.215 219.836 cv
17.223 219.918 17.23 220.023 17.23 220.145 cv
17.23 220.277 17.223 220.383 17.215 220.465 cv
17.199 220.551 17.188 220.617 17.168 220.66 cv
17.148 220.711 17.125 220.742 17.094 220.762 cv
17.07 220.785 17.035 220.797 16.988 220.793 cv
12.883 220.793 li
12.484 220.797 12.164 220.828 11.918 220.887 cv
11.676 220.953 11.465 221.043 11.285 221.16 cv
11.109 221.277 10.973 221.434 10.879 221.621 cv
10.785 221.816 10.738 222.035 10.738 222.281 cv
10.738 222.605 10.855 222.93 11.082 223.25 cv
11.316 223.574 11.648 223.91 12.086 224.262 cv
16.988 224.262 li
17.035 224.266 17.07 224.277 17.094 224.293 cv
17.125 224.316 17.148 224.348 17.168 224.395 cv
17.188 224.441 17.199 224.508 17.215 224.586 cv
17.223 224.672 17.23 224.777 17.23 224.906 cv
17.23 225.035 17.223 225.141 17.215 225.219 cv
17.199 225.305 17.188 225.371 17.168 225.418 cv
17.148 225.473 17.125 225.504 17.094 225.52 cv
17.07 225.539 17.035 225.551 16.988 225.547 cv
9.977 225.547 li
9.938 225.551 9.902 225.543 9.871 225.523 cv
9.844 225.512 9.82 225.48 9.793 225.43 cv
9.773 225.387 9.758 225.324 9.746 225.25 cv
9.742 225.18 9.738 225.086 9.734 224.961 cv
9.738 224.852 9.742 224.754 9.746 224.676 cv
9.758 224.602 9.773 224.543 9.793 224.5 cv
9.82 224.461 9.844 224.434 9.871 224.414 cv
9.902 224.398 9.938 224.391 9.977 224.387 cv
10.902 224.387 li
10.461 223.996 10.141 223.602 9.934 223.207 cv
9.73 222.816 9.625 222.418 9.625 222.016 cv
9.625 221.547 9.707 221.156 9.863 220.836 cv
10.027 220.52 10.238 220.258 10.5 220.059 cv
10.766 219.863 11.074 219.723 11.43 219.637 cv
11.785 219.551 12.215 219.508 12.711 219.508 cv
cp
f
16.988 211.109 mo
17.035 211.113 17.07 211.121 17.094 211.137 cv
17.125 211.156 17.148 211.191 17.168 211.234 cv
17.188 211.281 17.199 211.34 17.215 211.414 cv
17.223 211.492 17.23 211.586 17.23 211.691 cv
17.23 211.816 17.223 211.914 17.215 211.984 cv
17.199 212.062 17.188 212.121 17.168 212.164 cv
17.148 212.211 17.125 212.242 17.094 212.254 cv
17.07 212.273 17.035 212.281 16.988 212.277 cv
16.063 212.277 li
16.508 212.68 16.828 213.074 17.027 213.461 cv
17.23 213.855 17.328 214.25 17.332 214.645 cv
17.328 215.117 17.254 215.512 17.098 215.828 cv
16.945 216.148 16.734 216.406 16.465 216.602 cv
16.199 216.805 15.887 216.945 15.527 217.027 cv
15.172 217.117 14.738 217.16 14.23 217.156 cv
9.977 217.156 li
9.938 217.16 9.902 217.152 9.871 217.129 cv
9.844 217.113 9.82 217.078 9.793 217.023 cv
9.773 216.977 9.758 216.906 9.746 216.82 cv
9.742 216.738 9.738 216.637 9.734 216.508 cv
9.738 216.387 9.742 216.281 9.746 216.195 cv
9.758 216.113 9.773 216.047 9.793 216 cv
9.82 215.953 9.844 215.918 9.871 215.895 cv
9.902 215.875 9.938 215.867 9.977 215.863 cv
14.059 215.863 li
14.473 215.867 14.801 215.836 15.047 215.773 cv
15.293 215.715 15.504 215.625 15.676 215.5 cv
15.855 215.383 15.988 215.227 16.082 215.035 cv
16.18 214.852 16.23 214.633 16.227 214.383 cv
16.23 214.062 16.113 213.742 15.883 213.418 cv
15.656 213.102 15.32 212.762 14.875 212.402 cv
9.977 212.402 li
9.938 212.402 9.902 212.395 9.871 212.375 cv
9.844 212.359 9.82 212.324 9.793 212.27 cv
9.773 212.219 9.758 212.152 9.746 212.07 cv
9.742 211.992 9.738 211.887 9.734 211.754 cv
9.738 211.633 9.742 211.527 9.746 211.441 cv
9.758 211.359 9.773 211.297 9.793 211.25 cv
9.82 211.207 9.844 211.172 9.871 211.145 cv
9.902 211.125 9.938 211.113 9.977 211.109 cv
cp
f
16.473 205.09 mo
16.629 205.09 16.746 205.102 16.832 205.121 cv
16.922 205.145 16.988 205.176 17.027 205.215 cv
17.07 205.258 17.109 205.32 17.145 205.402 cv
17.18 205.488 17.207 205.582 17.234 205.687 cv
17.254 205.797 17.273 205.91 17.293 206.027 cv
17.305 206.145 17.313 206.266 17.316 206.383 cv
17.313 206.75 17.266 207.062 17.172 207.32 cv
17.078 207.582 16.934 207.793 16.734 207.957 cv
16.543 208.125 16.297 208.246 15.996 208.32 cv
15.699 208.398 15.348 208.437 14.938 208.434 cv
10.84 208.434 li
10.84 209.414 li
10.844 209.492 10.801 209.555 10.715 209.602 cv
10.633 209.648 10.5 209.672 10.309 209.672 cv
10.215 209.672 10.133 209.668 10.063 209.652 cv
10 209.645 9.941 209.625 9.895 209.602 cv
9.852 209.582 9.82 209.555 9.801 209.52 cv
9.785 209.488 9.777 209.453 9.773 209.406 cv
9.773 208.434 li
8.105 208.434 li
8.074 208.437 8.039 208.426 8.004 208.406 cv
7.977 208.391 7.949 208.359 7.922 208.305 cv
7.902 208.258 7.887 208.191 7.871 208.105 cv
7.863 208.027 7.855 207.922 7.855 207.793 cv
7.855 207.664 7.863 207.559 7.871 207.477 cv
7.887 207.395 7.902 207.328 7.922 207.281 cv
7.949 207.234 7.977 207.203 8.004 207.18 cv
8.039 207.164 8.074 207.152 8.105 207.148 cv
9.773 207.148 li
9.773 205.348 li
9.777 205.309 9.785 205.273 9.801 205.238 cv
9.82 205.211 9.852 205.184 9.895 205.156 cv
9.941 205.137 10 205.121 10.063 205.105 cv
10.133 205.098 10.215 205.09 10.309 205.09 cv
10.5 205.09 10.633 205.113 10.715 205.16 cv
10.801 205.207 10.844 205.27 10.84 205.348 cv
10.84 207.148 li
14.754 207.148 li
15.238 207.152 15.602 207.082 15.848 206.934 cv
16.098 206.793 16.223 206.535 16.219 206.164 cv
16.223 206.051 16.211 205.945 16.184 205.848 cv
16.164 205.758 16.141 205.676 16.109 205.598 cv
16.086 205.527 16.059 205.465 16.035 205.41 cv
16.012 205.363 16 205.316 16 205.27 cv
16 205.246 16.008 205.219 16.02 205.195 cv
16.035 205.172 16.059 205.156 16.094 205.141 cv
16.133 205.133 16.184 205.121 16.242 205.105 cv
16.309 205.098 16.387 205.09 16.473 205.09 cv
cp
f
13.18 197.41 mo
13.383 197.414 13.523 197.465 13.609 197.562 cv
13.695 197.668 13.738 197.785 13.738 197.91 cv
13.738 202.527 li
14.129 202.531 14.48 202.492 14.793 202.41 cv
15.105 202.336 15.375 202.203 15.594 202.02 cv
15.82 201.84 15.992 201.605 16.109 201.309 cv
16.234 201.02 16.293 200.66 16.289 200.234 cv
16.293 199.902 16.266 199.605 16.207 199.344 cv
16.156 199.082 16.094 198.855 16.023 198.664 cv
15.957 198.477 15.898 198.32 15.84 198.195 cv
15.789 198.074 15.762 197.98 15.758 197.918 cv
15.762 197.883 15.77 197.852 15.785 197.82 cv
15.805 197.793 15.832 197.77 15.867 197.75 cv
15.906 197.738 15.957 197.727 16.02 197.715 cv
16.086 197.711 16.164 197.707 16.258 197.703 cv
16.328 197.707 16.387 197.711 16.434 197.711 cv
16.48 197.719 16.523 197.723 16.563 197.73 cv
16.602 197.738 16.637 197.754 16.668 197.77 cv
16.699 197.793 16.73 197.816 16.758 197.84 cv
16.789 197.871 16.836 197.953 16.898 198.094 cv
16.965 198.234 17.027 198.418 17.09 198.641 cv
17.152 198.867 17.207 199.125 17.258 199.418 cv
17.305 199.711 17.328 200.023 17.332 200.355 cv
17.328 200.934 17.25 201.441 17.09 201.871 cv
16.93 202.309 16.691 202.672 16.375 202.965 cv
16.059 203.266 15.664 203.488 15.184 203.637 cv
14.707 203.785 14.148 203.859 13.512 203.859 cv
12.914 203.859 12.375 203.785 11.891 203.629 cv
11.414 203.477 11.004 203.25 10.668 202.953 cv
10.332 202.66 10.074 202.305 9.895 201.891 cv
9.715 201.477 9.625 201.012 9.625 200.496 cv
9.625 199.945 9.715 199.477 9.891 199.09 cv
10.07 198.703 10.309 198.387 10.605 198.133 cv
10.906 197.887 11.258 197.703 11.656 197.586 cv
12.063 197.473 12.492 197.414 12.945 197.41 cv
cp
12.797 198.703 mo
12.121 198.687 11.59 198.84 11.207 199.156 cv
10.824 199.473 10.633 199.941 10.629 200.559 cv
10.633 200.883 10.691 201.164 10.809 201.402 cv
10.93 201.645 11.09 201.844 11.285 202.004 cv
11.484 202.168 11.715 202.293 11.977 202.379 cv
12.238 202.469 12.512 202.52 12.797 202.527 cv
cp
f
15.078 191.121 mo
15.441 191.125 15.762 191.191 16.039 191.32 cv
16.32 191.453 16.555 191.641 16.746 191.883 cv
16.941 192.129 17.086 192.422 17.184 192.758 cv
17.281 193.098 17.328 193.469 17.332 193.871 cv
17.328 194.125 17.309 194.363 17.273 194.586 cv
17.23 194.812 17.184 195.012 17.125 195.191 cv
17.066 195.371 17.004 195.523 16.938 195.648 cv
16.875 195.773 16.816 195.867 16.762 195.922 cv
16.711 195.98 16.641 196.02 16.543 196.043 cv
16.453 196.07 16.324 196.082 16.164 196.082 cv
16.066 196.082 15.984 196.078 15.914 196.066 cv
15.848 196.059 15.793 196.047 15.75 196.027 cv
15.711 196.016 15.68 195.992 15.66 195.965 cv
15.645 195.937 15.637 195.906 15.633 195.867 cv
15.637 195.812 15.672 195.727 15.738 195.613 cv
15.813 195.504 15.891 195.367 15.969 195.199 cv
16.055 195.039 16.129 194.848 16.199 194.621 cv
16.27 194.402 16.305 194.145 16.305 193.848 cv
16.305 193.633 16.281 193.434 16.234 193.254 cv
16.188 193.078 16.121 192.926 16.027 192.797 cv
15.941 192.668 15.824 192.566 15.68 192.496 cv
15.543 192.426 15.375 192.391 15.18 192.391 cv
14.984 192.391 14.82 192.441 14.684 192.543 cv
14.551 192.645 14.43 192.781 14.324 192.945 cv
14.223 193.113 14.133 193.297 14.047 193.504 cv
13.969 193.715 13.883 193.93 13.793 194.148 cv
13.707 194.367 13.605 194.582 13.492 194.793 cv
13.383 195.004 13.25 195.195 13.086 195.359 cv
12.93 195.531 12.734 195.664 12.508 195.762 cv
12.285 195.867 12.02 195.918 11.707 195.914 cv
11.434 195.918 11.168 195.863 10.914 195.754 cv
10.664 195.648 10.445 195.488 10.254 195.273 cv
10.066 195.062 9.914 194.797 9.797 194.477 cv
9.684 194.156 9.625 193.785 9.625 193.355 cv
9.625 193.172 9.641 192.984 9.672 192.797 cv
9.703 192.613 9.742 192.445 9.789 192.289 cv
9.836 192.141 9.887 192.012 9.941 191.902 cv
9.996 191.801 10.047 191.719 10.086 191.66 cv
10.133 191.609 10.168 191.574 10.195 191.551 cv
10.227 191.535 10.262 191.52 10.297 191.512 cv
10.34 191.504 10.387 191.496 10.441 191.488 cv
10.5 191.48 10.57 191.477 10.652 191.477 cv
10.742 191.477 10.82 191.48 10.883 191.488 cv
10.953 191.496 11.004 191.512 11.043 191.527 cv
11.086 191.551 11.117 191.57 11.133 191.594 cv
11.152 191.621 11.16 191.652 11.16 191.68 cv
11.16 191.73 11.133 191.797 11.074 191.883 cv
11.02 191.973 10.957 192.086 10.891 192.227 cv
10.828 192.367 10.77 192.535 10.707 192.723 cv
10.652 192.914 10.621 193.129 10.621 193.371 cv
10.621 193.594 10.648 193.785 10.695 193.949 cv
10.75 194.117 10.82 194.254 10.906 194.359 cv
11 194.465 11.105 194.547 11.23 194.598 cv
11.355 194.656 11.492 194.684 11.637 194.68 cv
11.84 194.684 12.008 194.633 12.145 194.527 cv
12.285 194.426 12.406 194.289 12.508 194.121 cv
12.613 193.957 12.707 193.766 12.789 193.551 cv
12.875 193.34 12.961 193.125 13.047 192.902 cv
13.137 192.684 13.238 192.465 13.344 192.246 cv
13.453 192.031 13.582 191.84 13.738 191.672 cv
13.895 191.508 14.082 191.375 14.301 191.273 cv
14.52 191.176 14.781 191.125 15.078 191.121 cv
cp
f
13 186.68 mo
13.586 186.68 14.168 186.719 14.742 186.789 cv
15.316 186.867 15.883 186.977 16.445 187.117 cv
17.004 187.266 17.555 187.441 18.098 187.652 cv
18.641 187.863 19.176 188.109 19.707 188.387 cv
19.73 188.406 19.754 188.43 19.777 188.457 cv
19.797 188.492 19.816 188.531 19.832 188.578 cv
19.848 188.629 19.855 188.687 19.863 188.754 cv
19.863 188.824 19.867 188.906 19.871 188.996 cv
19.867 189.133 19.859 189.238 19.852 189.312 cv
19.836 189.391 19.816 189.445 19.789 189.477 cv
19.758 189.512 19.723 189.527 19.68 189.523 cv
19.633 189.523 19.578 189.508 19.52 189.48 cv
18.469 189.004 17.398 188.645 16.301 188.398 cv
15.203 188.156 14.094 188.035 12.977 188.031 cv
11.867 188.035 10.762 188.156 9.66 188.398 cv
8.563 188.645 7.492 189.012 6.445 189.496 cv
6.402 189.52 6.359 189.527 6.313 189.52 cv
6.273 189.52 6.238 189.496 6.211 189.449 cv
6.188 189.41 6.168 189.352 6.148 189.277 cv
6.137 189.207 6.129 189.109 6.125 188.988 cv
6.129 188.879 6.133 188.789 6.137 188.715 cv
6.148 188.645 6.16 188.586 6.172 188.539 cv
6.191 188.496 6.207 188.465 6.219 188.441 cv
6.238 188.426 6.254 188.41 6.273 188.395 cv
7.34 187.863 8.438 187.441 9.559 187.137 cv
10.688 186.832 11.832 186.68 13 186.68 cv
cp
f
288.441 520.34 mo
288.438 520.445 288.422 520.535 288.387 520.605 cv
288.352 520.684 288.305 520.742 288.25 520.785 cv
288.191 520.836 288.129 520.871 288.063 520.887 cv
287.988 520.91 287.918 520.918 287.855 520.918 cv
287.41 520.918 li
287.27 520.918 287.148 520.906 287.043 520.875 cv
286.938 520.852 286.84 520.797 286.746 520.719 cv
286.652 520.645 286.559 520.543 286.465 520.41 cv
286.371 520.281 286.27 520.117 286.164 519.914 cv
283.09 514.176 li
282.926 513.883 282.762 513.574 282.602 513.246 cv
282.434 512.926 282.281 512.609 282.145 512.301 cv
282.129 512.301 li
282.137 512.676 282.145 513.059 282.152 513.445 cv
282.156 513.836 282.156 514.223 282.16 514.605 cv
282.16 520.691 li
282.156 520.73 282.145 520.766 282.125 520.797 cv
282.102 520.832 282.066 520.859 282.016 520.875 cv
281.961 520.895 281.891 520.906 281.809 520.922 cv
281.723 520.934 281.617 520.941 281.488 520.941 cv
281.352 520.941 281.242 520.934 281.16 520.922 cv
281.074 520.906 281.008 520.895 280.961 520.875 cv
280.91 520.859 280.875 520.832 280.852 520.797 cv
280.828 520.766 280.816 520.73 280.82 520.691 cv
280.82 511.387 li
280.816 511.18 280.875 511.031 280.996 510.941 cv
281.113 510.855 281.242 510.812 281.383 510.809 cv
282.043 510.809 li
282.195 510.812 282.328 510.824 282.434 510.848 cv
282.535 510.875 282.629 510.918 282.715 510.977 cv
282.797 511.039 282.875 511.121 282.957 511.227 cv
283.031 511.336 283.113 511.473 283.199 511.629 cv
285.566 516.055 li
285.711 516.328 285.852 516.594 285.988 516.848 cv
286.121 517.105 286.25 517.359 286.379 517.605 cv
286.5 517.859 286.625 518.105 286.75 518.344 cv
286.871 518.586 286.992 518.828 287.117 519.07 cv
287.125 519.07 li
287.113 518.664 287.105 518.234 287.105 517.789 cv
287.098 517.344 287.098 516.918 287.102 516.508 cv
287.102 511.035 li
287.098 511 287.109 510.965 287.133 510.934 cv
287.156 510.902 287.191 510.875 287.246 510.852 cv
287.293 510.828 287.363 510.812 287.449 510.801 cv
287.535 510.793 287.645 510.789 287.785 510.785 cv
287.902 510.789 288.008 510.793 288.098 510.801 cv
288.184 510.812 288.25 510.828 288.301 510.852 cv
288.348 510.875 288.383 510.902 288.406 510.934 cv
288.426 510.965 288.438 511 288.441 511.035 cv
cp
f
296.988 520.699 mo
296.984 520.746 296.977 520.781 296.961 520.805 cv
296.941 520.836 296.906 520.859 296.863 520.879 cv
296.816 520.898 296.758 520.91 296.684 520.926 cv
296.605 520.934 296.512 520.941 296.406 520.941 cv
296.281 520.941 296.184 520.934 296.113 520.926 cv
296.035 520.91 295.977 520.898 295.934 520.879 cv
295.887 520.859 295.855 520.836 295.844 520.805 cv
295.824 520.781 295.816 520.746 295.82 520.699 cv
295.82 519.773 li
295.418 520.219 295.023 520.539 294.637 520.738 cv
294.242 520.941 293.848 521.039 293.453 521.043 cv
292.98 521.039 292.586 520.965 292.27 520.809 cv
291.949 520.656 291.691 520.445 291.496 520.176 cv
291.293 519.91 291.152 519.598 291.07 519.238 cv
290.98 518.883 290.938 518.449 290.941 517.941 cv
290.941 513.687 li
290.938 513.648 290.945 513.613 290.969 513.582 cv
290.984 513.555 291.02 513.531 291.074 513.504 cv
291.121 513.484 291.191 513.469 291.277 513.457 cv
291.359 513.453 291.461 513.449 291.59 513.445 cv
291.711 513.449 291.816 513.453 291.902 513.457 cv
291.984 513.469 292.051 513.484 292.098 513.504 cv
292.145 513.531 292.18 513.555 292.203 513.582 cv
292.223 513.613 292.23 513.648 292.234 513.687 cv
292.234 517.77 li
292.23 518.184 292.262 518.512 292.324 518.758 cv
292.383 519.004 292.473 519.215 292.598 519.387 cv
292.715 519.566 292.871 519.699 293.063 519.793 cv
293.246 519.891 293.465 519.941 293.715 519.937 cv
294.035 519.941 294.355 519.824 294.68 519.594 cv
294.996 519.367 295.336 519.031 295.695 518.586 cv
295.695 513.687 li
295.695 513.648 295.703 513.613 295.723 513.582 cv
295.738 513.555 295.773 513.531 295.828 513.504 cv
295.879 513.484 295.945 513.469 296.027 513.457 cv
296.105 513.453 296.211 513.449 296.344 513.445 cv
296.465 513.449 296.57 513.453 296.656 513.457 cv
296.738 513.469 296.801 513.484 296.848 513.504 cv
296.891 513.531 296.926 513.555 296.953 513.582 cv
296.973 513.613 296.984 513.648 296.988 513.687 cv
cp
f
309.766 520.699 mo
309.762 520.746 309.754 520.781 309.734 520.805 cv
309.711 520.836 309.676 520.859 309.633 520.879 cv
309.582 520.898 309.516 520.91 309.438 520.926 cv
309.352 520.934 309.25 520.941 309.125 520.941 cv
308.992 520.941 308.883 520.934 308.805 520.926 cv
308.719 520.91 308.652 520.898 308.605 520.879 cv
308.551 520.859 308.516 520.836 308.5 520.805 cv
308.477 520.781 308.469 520.746 308.469 520.699 cv
308.469 516.437 li
308.469 516.145 308.441 515.875 308.391 515.629 cv
308.336 515.387 308.254 515.176 308.141 514.996 cv
308.027 514.82 307.883 514.684 307.707 514.59 cv
307.527 514.496 307.316 514.449 307.082 514.449 cv
306.785 514.449 306.488 514.566 306.191 514.793 cv
305.887 515.027 305.559 515.359 305.203 515.797 cv
305.203 520.699 li
305.199 520.746 305.188 520.781 305.172 520.805 cv
305.148 520.836 305.117 520.859 305.07 520.879 cv
305.02 520.898 304.953 520.91 304.871 520.926 cv
304.785 520.934 304.68 520.941 304.559 520.941 cv
304.438 520.941 304.336 520.934 304.25 520.926 cv
304.164 520.91 304.094 520.898 304.047 520.879 cv
303.992 520.859 303.961 520.836 303.945 520.805 cv
303.926 520.781 303.914 520.746 303.918 520.699 cv
303.918 516.437 li
303.914 516.145 303.887 515.875 303.832 515.629 cv
303.773 515.387 303.688 515.176 303.574 514.996 cv
303.461 514.82 303.316 514.684 303.145 514.59 cv
302.965 514.496 302.758 514.449 302.523 514.449 cv
302.223 514.449 301.926 514.566 301.625 514.793 cv
301.324 515.027 300.996 515.359 300.645 515.797 cv
300.645 520.699 li
300.641 520.746 300.629 520.781 300.613 520.805 cv
300.59 520.836 300.559 520.859 300.512 520.879 cv
300.465 520.898 300.398 520.91 300.32 520.926 cv
300.234 520.934 300.129 520.941 300 520.941 cv
299.871 520.941 299.766 520.934 299.688 520.926 cv
299.602 520.91 299.535 520.898 299.488 520.879 cv
299.434 520.859 299.402 520.836 299.387 520.805 cv
299.367 520.781 299.355 520.746 299.359 520.699 cv
299.359 513.687 li
299.355 513.648 299.363 513.613 299.383 513.582 cv
299.395 513.555 299.426 513.531 299.477 513.504 cv
299.52 513.484 299.582 513.469 299.656 513.457 cv
299.727 513.453 299.82 513.449 299.945 513.445 cv
300.055 513.449 300.152 513.453 300.23 513.457 cv
300.305 513.469 300.363 513.484 300.406 513.504 cv
300.445 513.531 300.473 513.555 300.492 513.582 cv
300.508 513.613 300.516 513.648 300.52 513.687 cv
300.52 514.613 li
300.91 514.172 301.293 513.852 301.668 513.645 cv
302.035 513.441 302.414 513.336 302.797 513.336 cv
303.086 513.336 303.344 513.371 303.578 513.437 cv
303.805 513.508 304.012 513.602 304.191 513.723 cv
304.367 513.844 304.516 513.988 304.645 514.156 cv
304.766 514.328 304.871 514.52 304.957 514.723 cv
305.188 514.473 305.41 514.258 305.621 514.078 cv
305.832 513.906 306.035 513.762 306.23 513.648 cv
306.426 513.543 306.613 513.465 306.797 513.41 cv
306.98 513.363 307.168 513.336 307.355 513.336 cv
307.809 513.336 308.188 513.418 308.492 513.574 cv
308.797 513.738 309.043 513.949 309.238 514.211 cv
309.426 514.477 309.563 514.785 309.645 515.141 cv
309.723 515.496 309.762 515.871 309.766 516.266 cv
cp
f
318.566 517.098 mo
318.563 517.707 318.496 518.258 318.367 518.742 cv
318.23 519.23 318.035 519.645 317.781 519.984 cv
317.523 520.328 317.207 520.59 316.836 520.77 cv
316.461 520.953 316.035 521.039 315.551 521.043 cv
315.324 521.039 315.117 521.02 314.93 520.977 cv
314.742 520.93 314.555 520.859 314.375 520.762 cv
314.188 520.664 314.008 520.539 313.828 520.387 cv
313.645 520.238 313.453 520.059 313.254 519.844 cv
313.254 520.699 li
313.254 520.746 313.242 520.781 313.223 520.809 cv
313.199 520.844 313.164 520.867 313.121 520.883 cv
313.07 520.898 313.012 520.91 312.945 520.926 cv
312.871 520.934 312.781 520.941 312.676 520.941 cv
312.566 520.941 312.48 520.934 312.41 520.926 cv
312.336 520.91 312.273 520.898 312.23 520.883 cv
312.18 520.867 312.148 520.844 312.137 520.809 cv
312.117 520.781 312.109 520.746 312.113 520.699 cv
312.113 510.289 li
312.109 510.25 312.121 510.215 312.141 510.18 cv
312.156 510.152 312.188 510.125 312.242 510.102 cv
312.289 510.082 312.355 510.066 312.441 510.055 cv
312.52 510.047 312.625 510.043 312.754 510.039 cv
312.883 510.043 312.988 510.047 313.074 510.055 cv
313.152 510.066 313.219 510.082 313.266 510.102 cv
313.313 510.125 313.344 510.152 313.367 510.18 cv
313.383 510.215 313.395 510.25 313.398 510.289 cv
313.398 514.488 li
313.605 514.277 313.809 514.098 314.004 513.953 cv
314.199 513.809 314.387 513.691 314.574 513.598 cv
314.758 513.512 314.945 513.445 315.137 513.398 cv
315.32 513.359 315.52 513.336 315.73 513.336 cv
316.234 513.336 316.668 513.437 317.035 513.641 cv
317.395 513.844 317.688 514.117 317.914 514.453 cv
318.137 514.797 318.305 515.195 318.41 515.652 cv
318.512 516.109 318.563 516.59 318.566 517.098 cv
cp
317.234 517.246 mo
317.23 516.891 317.203 516.543 317.152 516.203 cv
317.094 515.867 317 515.57 316.863 515.309 cv
316.727 515.051 316.547 514.84 316.324 514.68 cv
316.098 514.523 315.816 514.445 315.484 514.441 cv
315.316 514.445 315.152 514.469 314.992 514.512 cv
314.828 514.562 314.664 514.641 314.496 514.746 cv
314.328 514.859 314.152 515 313.977 515.168 cv
313.793 515.344 313.602 515.559 313.398 515.812 cv
313.398 518.609 li
313.754 519.043 314.094 519.375 314.418 519.598 cv
314.742 519.828 315.078 519.941 315.43 519.937 cv
315.75 519.941 316.027 519.863 316.262 519.703 cv
316.488 519.551 316.676 519.344 316.82 519.082 cv
316.965 518.828 317.07 518.539 317.137 518.219 cv
317.199 517.902 317.23 517.578 317.234 517.246 cv
cp
f
326.477 516.891 mo
326.473 517.094 326.422 517.234 326.324 517.32 cv
326.219 517.406 326.102 517.449 325.977 517.449 cv
321.359 517.449 li
321.355 517.84 321.395 518.191 321.477 518.504 cv
321.551 518.816 321.684 519.086 321.867 519.305 cv
322.047 519.531 322.281 519.703 322.578 519.82 cv
322.867 519.945 323.227 520.004 323.652 520 cv
323.984 520.004 324.281 519.977 324.543 519.918 cv
324.805 519.867 325.031 519.805 325.223 519.734 cv
325.41 519.668 325.566 519.609 325.691 519.551 cv
325.813 519.5 325.906 519.473 325.969 519.469 cv
326.004 519.473 326.035 519.48 326.066 519.496 cv
326.094 519.516 326.117 519.543 326.137 519.578 cv
326.148 519.617 326.16 519.668 326.172 519.73 cv
326.176 519.797 326.18 519.875 326.184 519.969 cv
326.18 520.039 326.176 520.098 326.176 520.145 cv
326.168 520.191 326.164 520.234 326.156 520.273 cv
326.148 520.312 326.133 520.348 326.117 520.379 cv
326.094 520.41 326.07 520.441 326.047 520.469 cv
326.016 520.5 325.934 520.547 325.793 520.609 cv
325.652 520.676 325.469 520.738 325.246 520.801 cv
325.02 520.863 324.762 520.918 324.469 520.969 cv
324.176 521.016 323.863 521.039 323.531 521.043 cv
322.953 521.039 322.445 520.961 322.016 520.801 cv
321.578 520.641 321.215 520.402 320.922 520.086 cv
320.621 519.77 320.398 519.375 320.25 518.895 cv
320.102 518.418 320.027 517.859 320.027 517.223 cv
320.027 516.625 320.102 516.086 320.258 515.602 cv
320.41 515.125 320.637 514.715 320.934 514.379 cv
321.227 514.043 321.582 513.785 321.996 513.605 cv
322.41 513.426 322.875 513.336 323.391 513.336 cv
323.941 513.336 324.41 513.426 324.797 513.602 cv
325.184 513.781 325.5 514.02 325.754 514.316 cv
326 514.617 326.184 514.969 326.301 515.367 cv
326.414 515.773 326.473 516.203 326.477 516.656 cv
cp
325.184 516.508 mo
325.199 515.832 325.047 515.301 324.73 514.918 cv
324.414 514.535 323.945 514.344 323.328 514.34 cv
323.004 514.344 322.723 514.402 322.484 514.52 cv
322.242 514.641 322.043 514.801 321.883 514.996 cv
321.719 515.195 321.594 515.426 321.508 515.687 cv
321.418 515.949 321.367 516.223 321.359 516.508 cv
cp
f
332.543 514.145 mo
332.539 514.262 332.539 514.359 332.535 514.434 cv
332.527 514.516 332.516 514.578 332.504 514.617 cv
332.484 514.664 332.465 514.695 332.445 514.719 cv
332.418 514.742 332.387 514.754 332.348 514.754 cv
332.305 514.754 332.254 514.742 332.195 514.719 cv
332.133 514.695 332.063 514.672 331.992 514.648 cv
331.914 514.625 331.832 514.605 331.738 514.582 cv
331.645 514.566 331.543 514.555 331.434 514.551 cv
331.301 514.555 331.172 514.582 331.051 514.629 cv
330.926 514.684 330.797 514.77 330.66 514.887 cv
330.52 515.012 330.375 515.168 330.227 515.363 cv
330.074 515.559 329.906 515.801 329.727 516.086 cv
329.727 520.699 li
329.723 520.746 329.711 520.781 329.695 520.805 cv
329.672 520.836 329.641 520.859 329.594 520.879 cv
329.547 520.898 329.48 520.91 329.402 520.926 cv
329.316 520.934 329.211 520.941 329.082 520.941 cv
328.953 520.941 328.848 520.934 328.77 520.926 cv
328.684 520.91 328.617 520.898 328.57 520.879 cv
328.516 520.859 328.484 520.836 328.469 520.805 cv
328.449 520.781 328.438 520.746 328.441 520.699 cv
328.441 513.687 li
328.438 513.648 328.445 513.613 328.465 513.582 cv
328.477 513.555 328.508 513.531 328.559 513.504 cv
328.602 513.484 328.664 513.469 328.738 513.457 cv
328.809 513.453 328.902 513.449 329.027 513.445 cv
329.137 513.449 329.234 513.453 329.313 513.457 cv
329.387 513.469 329.445 513.484 329.488 513.504 cv
329.527 513.531 329.555 513.555 329.574 513.582 cv
329.59 513.613 329.598 513.648 329.602 513.687 cv
329.602 514.707 li
329.789 514.426 329.973 514.199 330.145 514.023 cv
330.313 513.848 330.473 513.707 330.625 513.605 cv
330.773 513.504 330.922 513.434 331.07 513.395 cv
331.219 513.355 331.367 513.336 331.52 513.336 cv
331.586 513.336 331.664 513.34 331.75 513.348 cv
331.836 513.355 331.926 513.371 332.02 513.391 cv
332.113 513.414 332.195 513.437 332.273 513.461 cv
332.344 513.488 332.398 513.516 332.434 513.539 cv
332.461 513.57 332.48 513.594 332.496 513.613 cv
332.504 513.641 332.516 513.672 332.523 513.703 cv
332.531 513.742 332.535 513.793 332.539 513.863 cv
332.539 513.934 332.539 514.027 332.543 514.145 cv
cp
f
344.301 517.113 mo
344.297 517.691 344.223 518.219 344.074 518.695 cv
343.922 519.18 343.695 519.594 343.398 519.937 cv
343.098 520.289 342.723 520.559 342.277 520.75 cv
341.824 520.945 341.305 521.039 340.715 521.043 cv
340.137 521.039 339.633 520.957 339.207 520.785 cv
338.777 520.617 338.422 520.367 338.137 520.039 cv
337.848 519.711 337.633 519.316 337.496 518.848 cv
337.355 518.383 337.289 517.852 337.289 517.254 cv
337.289 516.687 337.359 516.16 337.508 515.68 cv
337.652 515.199 337.879 514.785 338.18 514.434 cv
338.477 514.086 338.848 513.816 339.297 513.625 cv
339.742 513.434 340.266 513.336 340.863 513.336 cv
341.441 513.336 341.941 513.422 342.371 513.594 cv
342.797 513.766 343.156 514.016 343.441 514.344 cv
343.727 514.672 343.941 515.07 344.086 515.535 cv
344.227 516.004 344.297 516.531 344.301 517.113 cv
cp
342.969 517.199 mo
342.965 516.824 342.93 516.465 342.863 516.125 cv
342.789 515.789 342.672 515.496 342.512 515.238 cv
342.348 514.988 342.129 514.785 341.852 514.633 cv
341.57 514.488 341.223 514.414 340.813 514.41 cv
340.426 514.414 340.098 514.48 339.824 514.613 cv
339.547 514.75 339.32 514.941 339.145 515.187 cv
338.965 515.434 338.832 515.727 338.75 516.062 cv
338.66 516.402 338.617 516.77 338.621 517.168 cv
338.617 517.555 338.652 517.918 338.727 518.254 cv
338.793 518.594 338.91 518.887 339.078 519.137 cv
339.242 519.391 339.465 519.594 339.742 519.738 cv
340.02 519.891 340.367 519.965 340.781 519.961 cv
341.156 519.965 341.484 519.895 341.766 519.758 cv
342.043 519.625 342.27 519.437 342.449 519.187 cv
342.625 518.945 342.754 518.652 342.84 518.316 cv
342.922 517.98 342.965 517.609 342.969 517.199 cv
cp
f
350.031 510.801 mo
350.027 510.902 350.023 510.98 350.016 511.039 cv
350.004 511.102 349.992 511.152 349.98 511.184 cv
349.965 511.223 349.949 511.246 349.93 511.258 cv
349.906 511.273 349.879 511.281 349.852 511.277 cv
349.813 511.281 349.766 511.27 349.715 511.242 cv
349.656 511.223 349.59 511.195 349.516 511.164 cv
349.434 511.137 349.344 511.109 349.238 511.086 cv
349.129 511.062 349.004 511.051 348.871 511.051 cv
348.676 511.051 348.512 511.082 348.379 511.145 cv
348.238 511.207 348.129 511.305 348.051 511.437 cv
347.965 511.57 347.906 511.742 347.871 511.953 cv
347.832 512.164 347.813 512.422 347.816 512.719 cv
347.816 513.484 li
349.383 513.484 li
349.422 513.488 349.457 513.496 349.488 513.512 cv
349.516 513.531 349.543 513.562 349.566 513.605 cv
349.59 513.652 349.605 513.711 349.621 513.773 cv
349.629 513.844 349.637 513.926 349.641 514.02 cv
349.637 514.211 349.613 514.344 349.57 514.426 cv
349.52 514.512 349.457 514.555 349.383 514.551 cv
347.816 514.551 li
347.816 520.699 li
347.813 520.746 347.805 520.781 347.785 520.805 cv
347.762 520.836 347.727 520.859 347.68 520.879 cv
347.629 520.898 347.563 520.91 347.48 520.926 cv
347.395 520.934 347.289 520.941 347.172 520.941 cv
347.043 520.941 346.941 520.934 346.859 520.926 cv
346.773 520.91 346.707 520.898 346.66 520.879 cv
346.609 520.859 346.574 520.836 346.555 520.805 cv
346.531 520.781 346.52 520.746 346.523 520.699 cv
346.523 514.551 li
345.535 514.551 li
345.449 514.555 345.387 514.512 345.348 514.426 cv
345.305 514.344 345.281 514.211 345.285 514.02 cv
345.281 513.926 345.289 513.844 345.301 513.773 cv
345.309 513.711 345.324 513.652 345.348 513.605 cv
345.367 513.562 345.391 513.531 345.426 513.512 cv
345.453 513.496 345.492 513.488 345.535 513.484 cv
346.523 513.484 li
346.523 512.758 li
346.52 512.273 346.566 511.855 346.66 511.5 cv
346.75 511.152 346.887 510.863 347.074 510.641 cv
347.258 510.418 347.492 510.254 347.781 510.145 cv
348.063 510.039 348.398 509.984 348.785 509.984 cv
348.961 509.984 349.137 510.004 349.313 510.035 cv
349.48 510.074 349.613 510.109 349.711 510.145 cv
349.801 510.187 349.863 510.223 349.898 510.25 cv
349.926 510.285 349.953 510.324 349.977 510.371 cv
349.996 510.422 350.008 510.484 350.02 510.551 cv
350.023 510.625 350.027 510.707 350.031 510.801 cv
cp
f
360.227 518.066 mo
360.223 518.539 360.137 518.961 359.965 519.328 cv
359.789 519.703 359.547 520.016 359.238 520.27 cv
358.93 520.527 358.566 520.719 358.148 520.848 cv
357.727 520.977 357.277 521.039 356.797 521.043 cv
356.457 521.039 356.141 521.012 355.855 520.957 cv
355.566 520.898 355.313 520.832 355.086 520.746 cv
354.859 520.668 354.668 520.582 354.516 520.488 cv
354.359 520.402 354.254 520.324 354.195 520.262 cv
354.137 520.199 354.094 520.121 354.066 520.027 cv
354.035 519.934 354.02 519.805 354.023 519.641 cv
354.02 519.527 354.023 519.434 354.039 519.355 cv
354.047 519.281 354.063 519.219 354.086 519.172 cv
354.102 519.125 354.129 519.094 354.164 519.074 cv
354.191 519.059 354.227 519.051 354.27 519.047 cv
354.34 519.051 354.441 519.094 354.578 519.18 cv
354.707 519.27 354.879 519.367 355.09 519.469 cv
355.297 519.578 355.547 519.676 355.84 519.762 cv
356.133 519.855 356.473 519.898 356.859 519.898 cv
357.148 519.898 357.414 519.859 357.656 519.781 cv
357.895 519.703 358.102 519.594 358.281 519.449 cv
358.453 519.309 358.59 519.133 358.684 518.922 cv
358.777 518.715 358.824 518.48 358.824 518.215 cv
358.824 517.934 358.758 517.687 358.629 517.48 cv
358.496 517.281 358.324 517.105 358.113 516.949 cv
357.898 516.801 357.656 516.66 357.383 516.527 cv
357.109 516.402 356.828 516.27 356.547 516.137 cv
356.258 516.004 355.98 515.859 355.711 515.695 cv
355.441 515.539 355.199 515.348 354.988 515.129 cv
354.77 514.91 354.598 514.656 354.469 514.359 cv
354.332 514.07 354.266 513.719 354.27 513.305 cv
354.266 512.887 354.344 512.512 354.5 512.18 cv
354.652 511.852 354.863 511.574 355.141 511.348 cv
355.41 511.129 355.734 510.957 356.113 510.84 cv
356.488 510.723 356.898 510.664 357.336 510.664 cv
357.555 510.664 357.777 510.684 358.008 510.723 cv
358.23 510.762 358.441 510.812 358.645 510.875 cv
358.84 510.941 359.02 511.016 359.18 511.094 cv
359.332 511.176 359.434 511.242 359.488 511.289 cv
359.535 511.344 359.57 511.383 359.586 511.406 cv
359.602 511.437 359.613 511.473 359.625 511.516 cv
359.633 511.562 359.641 511.617 359.648 511.676 cv
359.652 511.742 359.656 511.82 359.656 511.918 cv
359.656 512.012 359.652 512.098 359.645 512.168 cv
359.637 512.246 359.625 512.305 359.609 512.352 cv
359.594 512.398 359.57 512.434 359.543 512.457 cv
359.512 512.48 359.48 512.492 359.445 512.492 cv
359.387 512.492 359.297 512.457 359.176 512.387 cv
359.051 512.316 358.898 512.234 358.727 512.141 cv
358.547 512.051 358.34 511.969 358.102 511.891 cv
357.855 511.816 357.586 511.777 357.289 511.777 cv
357.008 511.777 356.762 511.816 356.555 511.891 cv
356.344 511.969 356.172 512.07 356.039 512.191 cv
355.902 512.316 355.801 512.461 355.734 512.633 cv
355.668 512.805 355.637 512.988 355.637 513.18 cv
355.637 513.465 355.699 513.707 355.828 513.906 cv
355.957 514.109 356.129 514.289 356.348 514.441 cv
356.559 514.602 356.805 514.742 357.082 514.871 cv
357.355 515.004 357.637 515.137 357.926 515.266 cv
358.211 515.398 358.492 515.543 358.766 515.699 cv
359.039 515.859 359.285 516.047 359.504 516.262 cv
359.719 516.48 359.891 516.734 360.027 517.027 cv
360.156 517.32 360.223 517.668 360.227 518.066 cv
cp
f
367.996 520.699 mo
367.992 520.746 367.984 520.781 367.969 520.805 cv
367.949 520.836 367.914 520.859 367.871 520.879 cv
367.824 520.898 367.766 520.91 367.691 520.926 cv
367.613 520.934 367.52 520.941 367.414 520.941 cv
367.289 520.941 367.191 520.934 367.121 520.926 cv
367.043 520.91 366.984 520.898 366.941 520.879 cv
366.895 520.859 366.863 520.836 366.852 520.805 cv
366.832 520.781 366.824 520.746 366.828 520.699 cv
366.828 519.773 li
366.426 520.219 366.031 520.539 365.645 520.738 cv
365.25 520.941 364.855 521.039 364.461 521.043 cv
363.988 521.039 363.594 520.965 363.277 520.809 cv
362.957 520.656 362.699 520.445 362.504 520.176 cv
362.301 519.91 362.16 519.598 362.078 519.238 cv
361.988 518.883 361.945 518.449 361.949 517.941 cv
361.949 513.687 li
361.945 513.648 361.953 513.613 361.977 513.582 cv
361.992 513.555 362.027 513.531 362.082 513.504 cv
362.129 513.484 362.199 513.469 362.285 513.457 cv
362.367 513.453 362.469 513.449 362.598 513.445 cv
362.719 513.449 362.824 513.453 362.91 513.457 cv
362.992 513.469 363.059 513.484 363.105 513.504 cv
363.152 513.531 363.188 513.555 363.211 513.582 cv
363.23 513.613 363.238 513.648 363.242 513.687 cv
363.242 517.77 li
363.238 518.184 363.27 518.512 363.332 518.758 cv
363.391 519.004 363.48 519.215 363.605 519.387 cv
363.723 519.566 363.879 519.699 364.07 519.793 cv
364.254 519.891 364.473 519.941 364.723 519.937 cv
365.043 519.941 365.363 519.824 365.688 519.594 cv
366.004 519.367 366.344 519.031 366.703 518.586 cv
366.703 513.687 li
366.703 513.648 366.711 513.613 366.73 513.582 cv
366.746 513.555 366.781 513.531 366.836 513.504 cv
366.887 513.484 366.953 513.469 367.035 513.457 cv
367.113 513.453 367.219 513.449 367.352 513.445 cv
367.473 513.449 367.578 513.453 367.664 513.457 cv
367.746 513.469 367.809 513.484 367.855 513.504 cv
367.898 513.531 367.934 513.555 367.961 513.582 cv
367.98 513.613 367.992 513.648 367.996 513.687 cv
cp
f
376.852 517.098 mo
376.848 517.707 376.781 518.258 376.652 518.742 cv
376.516 519.23 376.32 519.645 376.066 519.984 cv
375.809 520.328 375.492 520.59 375.121 520.77 cv
374.746 520.953 374.32 521.039 373.836 521.043 cv
373.609 521.039 373.402 521.02 373.215 520.977 cv
373.027 520.93 372.84 520.859 372.66 520.762 cv
372.473 520.664 372.293 520.539 372.113 520.387 cv
371.93 520.238 371.738 520.059 371.539 519.844 cv
371.539 520.699 li
371.539 520.746 371.527 520.781 371.508 520.809 cv
371.484 520.844 371.449 520.867 371.406 520.883 cv
371.355 520.898 371.297 520.91 371.23 520.926 cv
371.156 520.934 371.066 520.941 370.961 520.941 cv
370.852 520.941 370.766 520.934 370.695 520.926 cv
370.621 520.91 370.559 520.898 370.516 520.883 cv
370.465 520.867 370.434 520.844 370.422 520.809 cv
370.402 520.781 370.395 520.746 370.398 520.699 cv
370.398 510.289 li
370.395 510.25 370.406 510.215 370.426 510.18 cv
370.441 510.152 370.473 510.125 370.527 510.102 cv
370.574 510.082 370.641 510.066 370.727 510.055 cv
370.805 510.047 370.91 510.043 371.039 510.039 cv
371.168 510.043 371.273 510.047 371.359 510.055 cv
371.438 510.066 371.504 510.082 371.551 510.102 cv
371.598 510.125 371.629 510.152 371.652 510.18 cv
371.668 510.215 371.68 510.25 371.684 510.289 cv
371.684 514.488 li
371.891 514.277 372.094 514.098 372.289 513.953 cv
372.484 513.809 372.672 513.691 372.859 513.598 cv
373.043 513.512 373.23 513.445 373.422 513.398 cv
373.605 513.359 373.805 513.336 374.016 513.336 cv
374.52 513.336 374.953 513.437 375.32 513.641 cv
375.68 513.844 375.973 514.117 376.199 514.453 cv
376.422 514.797 376.59 515.195 376.695 515.652 cv
376.797 516.109 376.848 516.59 376.852 517.098 cv
cp
375.52 517.246 mo
375.516 516.891 375.488 516.543 375.438 516.203 cv
375.379 515.867 375.285 515.57 375.148 515.309 cv
375.012 515.051 374.832 514.84 374.609 514.68 cv
374.383 514.523 374.102 514.445 373.77 514.441 cv
373.602 514.445 373.438 514.469 373.277 514.512 cv
373.113 514.562 372.949 514.641 372.781 514.746 cv
372.613 514.859 372.438 515 372.262 515.168 cv
372.078 515.344 371.887 515.559 371.684 515.812 cv
371.684 518.609 li
372.039 519.043 372.379 519.375 372.703 519.598 cv
373.027 519.828 373.363 519.941 373.715 519.937 cv
374.035 519.941 374.313 519.863 374.547 519.703 cv
374.773 519.551 374.961 519.344 375.105 519.082 cv
375.25 518.828 375.355 518.539 375.422 518.219 cv
375.484 517.902 375.516 517.578 375.52 517.246 cv
cp
f
382.008 516.961 mo
382.008 517.164 381.984 517.301 381.938 517.379 cv
381.891 517.457 381.82 517.496 381.734 517.496 cv
378.477 517.496 li
378.383 517.496 378.316 517.457 378.27 517.375 cv
378.223 517.297 378.199 517.16 378.199 516.961 cv
378.199 516.766 378.223 516.625 378.27 516.547 cv
378.316 516.469 378.383 516.43 378.477 516.43 cv
381.734 516.43 li
381.773 516.43 381.813 516.437 381.848 516.453 cv
381.879 516.469 381.906 516.5 381.934 516.543 cv
381.953 516.59 381.973 516.645 381.988 516.711 cv
382 516.781 382.008 516.867 382.008 516.961 cv
cp
f
385.258 520.691 mo
385.254 520.734 385.246 520.77 385.227 520.801 cv
385.203 520.832 385.164 520.859 385.117 520.875 cv
385.063 520.895 384.996 520.906 384.91 520.922 cv
384.824 520.934 384.715 520.941 384.59 520.941 cv
384.461 520.941 384.355 520.934 384.27 520.922 cv
384.18 520.906 384.109 520.895 384.059 520.875 cv
384.004 520.859 383.969 520.832 383.949 520.801 cv
383.926 520.77 383.914 520.734 383.918 520.691 cv
383.918 511.012 li
383.914 510.973 383.926 510.937 383.953 510.902 cv
383.973 510.875 384.012 510.848 384.07 510.828 cv
384.121 510.812 384.191 510.797 384.281 510.781 cv
384.363 510.77 384.465 510.766 384.59 510.762 cv
384.715 510.766 384.824 510.77 384.91 510.781 cv
384.996 510.797 385.063 510.812 385.117 510.828 cv
385.164 510.848 385.203 510.875 385.227 510.902 cv
385.246 510.937 385.254 510.973 385.258 511.012 cv
cp
f
398.246 520.699 mo
398.242 520.746 398.234 520.781 398.215 520.805 cv
398.191 520.836 398.156 520.859 398.113 520.879 cv
398.063 520.898 397.996 520.91 397.918 520.926 cv
397.832 520.934 397.73 520.941 397.605 520.941 cv
397.473 520.941 397.363 520.934 397.285 520.926 cv
397.199 520.91 397.133 520.898 397.086 520.879 cv
397.031 520.859 396.996 520.836 396.98 520.805 cv
396.957 520.781 396.949 520.746 396.949 520.699 cv
396.949 516.437 li
396.949 516.145 396.922 515.875 396.871 515.629 cv
396.816 515.387 396.734 515.176 396.621 514.996 cv
396.508 514.82 396.363 514.684 396.188 514.59 cv
396.008 514.496 395.797 514.449 395.563 514.449 cv
395.266 514.449 394.969 514.566 394.672 514.793 cv
394.367 515.027 394.039 515.359 393.684 515.797 cv
393.684 520.699 li
393.68 520.746 393.668 520.781 393.652 520.805 cv
393.629 520.836 393.598 520.859 393.551 520.879 cv
393.5 520.898 393.434 520.91 393.352 520.926 cv
393.266 520.934 393.16 520.941 393.039 520.941 cv
392.918 520.941 392.816 520.934 392.73 520.926 cv
392.645 520.91 392.574 520.898 392.527 520.879 cv
392.473 520.859 392.441 520.836 392.426 520.805 cv
392.406 520.781 392.395 520.746 392.398 520.699 cv
392.398 516.437 li
392.395 516.145 392.367 515.875 392.313 515.629 cv
392.254 515.387 392.168 515.176 392.055 514.996 cv
391.941 514.82 391.797 514.684 391.625 514.59 cv
391.445 514.496 391.238 514.449 391.004 514.449 cv
390.703 514.449 390.406 514.566 390.105 514.793 cv
389.805 515.027 389.477 515.359 389.125 515.797 cv
389.125 520.699 li
389.121 520.746 389.109 520.781 389.094 520.805 cv
389.07 520.836 389.039 520.859 388.992 520.879 cv
388.945 520.898 388.879 520.91 388.801 520.926 cv
388.715 520.934 388.609 520.941 388.48 520.941 cv
388.352 520.941 388.246 520.934 388.168 520.926 cv
388.082 520.91 388.016 520.898 387.969 520.879 cv
387.914 520.859 387.883 520.836 387.867 520.805 cv
387.848 520.781 387.836 520.746 387.84 520.699 cv
387.84 513.687 li
387.836 513.648 387.844 513.613 387.863 513.582 cv
387.875 513.555 387.906 513.531 387.957 513.504 cv
388 513.484 388.063 513.469 388.137 513.457 cv
388.207 513.453 388.301 513.449 388.426 513.445 cv
388.535 513.449 388.633 513.453 388.711 513.457 cv
388.785 513.469 388.844 513.484 388.887 513.504 cv
388.926 513.531 388.953 513.555 388.973 513.582 cv
388.988 513.613 388.996 513.648 389 513.687 cv
389 514.613 li
389.391 514.172 389.773 513.852 390.148 513.645 cv
390.516 513.441 390.895 513.336 391.277 513.336 cv
391.566 513.336 391.824 513.371 392.059 513.437 cv
392.285 513.508 392.492 513.602 392.672 513.723 cv
392.848 513.844 392.996 513.988 393.125 514.156 cv
393.246 514.328 393.352 514.52 393.438 514.723 cv
393.668 514.473 393.891 514.258 394.102 514.078 cv
394.313 513.906 394.516 513.762 394.711 513.648 cv
394.906 513.543 395.094 513.465 395.277 513.41 cv
395.461 513.363 395.648 513.336 395.836 513.336 cv
396.289 513.336 396.668 513.418 396.973 513.574 cv
397.277 513.738 397.523 513.949 397.719 514.211 cv
397.906 514.477 398.043 514.785 398.125 515.141 cv
398.203 515.496 398.242 515.871 398.246 516.266 cv
cp
f
405.879 520.707 mo
405.875 520.77 405.855 520.816 405.816 520.848 cv
405.773 520.879 405.715 520.902 405.645 520.918 cv
405.566 520.934 405.461 520.941 405.324 520.941 cv
405.188 520.941 405.078 520.934 405 520.918 cv
404.914 520.902 404.855 520.879 404.824 520.848 cv
404.785 520.816 404.77 520.77 404.773 520.707 cv
404.773 520.008 li
404.465 520.336 404.121 520.59 403.746 520.77 cv
403.367 520.953 402.969 521.039 402.551 521.043 cv
402.176 521.039 401.844 520.992 401.547 520.898 cv
401.25 520.801 400.996 520.664 400.785 520.48 cv
400.574 520.301 400.41 520.078 400.293 519.812 cv
400.176 519.551 400.117 519.25 400.121 518.906 cv
400.117 518.516 400.195 518.172 400.359 517.879 cv
400.516 517.59 400.75 517.348 401.055 517.156 cv
401.355 516.965 401.723 516.82 402.16 516.723 cv
402.594 516.629 403.086 516.582 403.633 516.578 cv
404.602 516.578 li
404.602 516.031 li
404.598 515.762 404.57 515.523 404.516 515.316 cv
404.457 515.109 404.363 514.937 404.238 514.797 cv
404.105 514.66 403.941 514.555 403.742 514.484 cv
403.535 514.414 403.285 514.379 402.996 514.379 cv
402.676 514.379 402.391 514.418 402.141 514.492 cv
401.883 514.57 401.664 514.652 401.477 514.742 cv
401.289 514.836 401.129 514.922 401.004 514.992 cv
400.871 515.07 400.777 515.105 400.719 515.105 cv
400.676 515.105 400.641 515.098 400.609 515.074 cv
400.578 515.059 400.551 515.027 400.527 514.98 cv
400.504 514.941 400.484 514.887 400.477 514.82 cv
400.461 514.758 400.457 514.687 400.461 514.605 cv
400.457 514.48 400.465 514.375 400.488 514.297 cv
400.504 514.223 400.551 514.152 400.621 514.082 cv
400.691 514.016 400.813 513.937 400.984 513.848 cv
401.156 513.758 401.352 513.676 401.574 513.598 cv
401.797 513.527 402.043 513.465 402.309 513.41 cv
402.574 513.363 402.84 513.336 403.113 513.336 cv
403.613 513.336 404.043 513.395 404.395 513.508 cv
404.746 513.625 405.031 513.793 405.254 514.012 cv
405.469 514.234 405.629 514.508 405.73 514.832 cv
405.828 515.164 405.875 515.547 405.879 515.977 cv
cp
404.602 517.504 mo
403.5 517.504 li
403.145 517.508 402.84 517.539 402.582 517.594 cv
402.32 517.656 402.105 517.742 401.934 517.859 cv
401.762 517.977 401.637 518.117 401.559 518.281 cv
401.477 518.445 401.434 518.633 401.438 518.844 cv
401.434 519.211 401.551 519.504 401.781 519.715 cv
402.012 519.934 402.336 520.039 402.754 520.039 cv
403.09 520.039 403.402 519.953 403.691 519.781 cv
403.98 519.609 404.281 519.348 404.602 518.992 cv
cp
f
414.098 514.004 mo
414.094 514.187 414.07 514.32 414.023 514.398 cv
413.973 514.48 413.91 514.52 413.836 514.52 cv
412.828 514.52 li
413.008 514.707 413.137 514.914 413.211 515.141 cv
413.281 515.367 413.316 515.602 413.32 515.844 cv
413.316 516.25 413.25 516.609 413.125 516.922 cv
412.992 517.234 412.809 517.5 412.566 517.711 cv
412.324 517.93 412.035 518.094 411.707 518.207 cv
411.371 518.324 411.004 518.383 410.602 518.379 cv
410.313 518.383 410.039 518.344 409.785 518.266 cv
409.523 518.191 409.328 518.098 409.191 517.98 cv
409.098 518.078 409.02 518.184 408.961 518.301 cv
408.898 518.422 408.867 518.559 408.871 518.711 cv
408.867 518.895 408.953 519.047 409.125 519.164 cv
409.293 519.289 409.516 519.352 409.797 519.359 cv
411.629 519.437 li
411.977 519.449 412.293 519.496 412.586 519.582 cv
412.875 519.668 413.129 519.793 413.344 519.949 cv
413.555 520.109 413.723 520.301 413.844 520.531 cv
413.961 520.766 414.02 521.035 414.023 521.34 cv
414.02 521.66 413.953 521.965 413.82 522.258 cv
413.684 522.547 413.477 522.801 413.199 523.023 cv
412.918 523.242 412.563 523.418 412.133 523.547 cv
411.703 523.672 411.195 523.734 410.609 523.738 cv
410.039 523.734 409.555 523.687 409.16 523.594 cv
408.762 523.496 408.438 523.363 408.184 523.199 cv
407.93 523.031 407.746 522.836 407.633 522.605 cv
407.516 522.371 407.457 522.117 407.461 521.852 cv
407.457 521.68 407.477 521.516 407.523 521.355 cv
407.563 521.191 407.625 521.039 407.711 520.895 cv
407.793 520.75 407.902 520.613 408.031 520.477 cv
408.156 520.348 408.301 520.215 408.473 520.086 cv
408.215 519.957 408.027 519.793 407.906 519.594 cv
407.785 519.398 407.727 519.187 407.727 518.953 cv
407.727 518.641 407.789 518.355 407.918 518.105 cv
408.047 517.855 408.207 517.633 408.402 517.434 cv
408.238 517.242 408.113 517.027 408.02 516.785 cv
407.926 516.547 407.879 516.254 407.879 515.906 cv
407.879 515.512 407.945 515.152 408.082 514.832 cv
408.215 514.516 408.402 514.25 408.645 514.031 cv
408.883 513.816 409.168 513.648 409.504 513.527 cv
409.836 513.414 410.203 513.355 410.602 513.352 cv
410.813 513.355 411.012 513.367 411.195 513.387 cv
411.379 513.414 411.551 513.445 411.715 513.484 cv
413.836 513.484 li
413.922 513.488 413.988 513.531 414.031 513.613 cv
414.074 513.703 414.094 513.832 414.098 514.004 cv
cp
412.09 515.852 mo
412.086 515.379 411.953 515.008 411.695 514.734 cv
411.43 514.469 411.059 514.332 410.578 514.332 cv
410.324 514.332 410.105 514.375 409.926 514.457 cv
409.738 514.543 409.586 514.656 409.465 514.801 cv
409.344 514.949 409.254 515.117 409.195 515.305 cv
409.133 515.492 409.102 515.691 409.105 515.898 cv
409.102 516.363 409.234 516.727 409.496 516.992 cv
409.758 517.258 410.125 517.391 410.602 517.387 cv
410.852 517.391 411.07 517.352 411.262 517.266 cv
411.445 517.187 411.602 517.074 411.727 516.934 cv
411.848 516.793 411.938 516.629 412 516.437 cv
412.055 516.254 412.086 516.059 412.09 515.852 cv
cp
412.734 521.41 mo
412.73 521.105 412.605 520.875 412.363 520.711 cv
412.113 520.551 411.781 520.461 411.363 520.449 cv
409.547 520.387 li
409.379 520.52 409.242 520.645 409.141 520.758 cv
409.031 520.875 408.949 520.984 408.887 521.094 cv
408.824 521.199 408.781 521.305 408.758 521.41 cv
408.734 521.512 408.723 521.617 408.723 521.727 cv
408.723 522.062 408.891 522.316 409.234 522.496 cv
409.574 522.668 410.055 522.758 410.672 522.758 cv
411.059 522.758 411.383 522.719 411.648 522.645 cv
411.906 522.566 412.117 522.465 412.281 522.344 cv
412.438 522.215 412.555 522.074 412.629 521.914 cv
412.695 521.754 412.73 521.586 412.734 521.41 cv
cp
f
421.66 516.891 mo
421.656 517.094 421.605 517.234 421.508 517.32 cv
421.402 517.406 421.285 517.449 421.16 517.449 cv
416.543 517.449 li
416.539 517.84 416.578 518.191 416.66 518.504 cv
416.734 518.816 416.867 519.086 417.051 519.305 cv
417.23 519.531 417.465 519.703 417.762 519.82 cv
418.051 519.945 418.41 520.004 418.836 520 cv
419.168 520.004 419.465 519.977 419.727 519.918 cv
419.988 519.867 420.215 519.805 420.406 519.734 cv
420.594 519.668 420.75 519.609 420.875 519.551 cv
420.996 519.5 421.09 519.473 421.152 519.469 cv
421.188 519.473 421.219 519.48 421.25 519.496 cv
421.277 519.516 421.301 519.543 421.32 519.578 cv
421.332 519.617 421.344 519.668 421.355 519.73 cv
421.359 519.797 421.363 519.875 421.367 519.969 cv
421.363 520.039 421.359 520.098 421.359 520.145 cv
421.352 520.191 421.348 520.234 421.34 520.273 cv
421.332 520.312 421.316 520.348 421.301 520.379 cv
421.277 520.41 421.254 520.441 421.23 520.469 cv
421.199 520.5 421.117 520.547 420.977 520.609 cv
420.836 520.676 420.652 520.738 420.43 520.801 cv
420.203 520.863 419.945 520.918 419.652 520.969 cv
419.359 521.016 419.047 521.039 418.715 521.043 cv
418.137 521.039 417.629 520.961 417.199 520.801 cv
416.762 520.641 416.398 520.402 416.105 520.086 cv
415.805 519.77 415.582 519.375 415.434 518.895 cv
415.285 518.418 415.211 517.859 415.211 517.223 cv
415.211 516.625 415.285 516.086 415.441 515.602 cv
415.594 515.125 415.82 514.715 416.117 514.379 cv
416.41 514.043 416.766 513.785 417.18 513.605 cv
417.594 513.426 418.059 513.336 418.574 513.336 cv
419.125 513.336 419.594 513.426 419.98 513.602 cv
420.367 513.781 420.684 514.02 420.938 514.316 cv
421.184 514.617 421.367 514.969 421.484 515.367 cv
421.598 515.773 421.656 516.203 421.66 516.656 cv
cp
420.367 516.508 mo
420.383 515.832 420.23 515.301 419.914 514.918 cv
419.598 514.535 419.129 514.344 418.512 514.34 cv
418.188 514.344 417.906 514.402 417.668 514.52 cv
417.426 514.641 417.227 514.801 417.066 514.996 cv
416.902 515.195 416.777 515.426 416.691 515.687 cv
416.602 515.949 416.551 516.223 416.543 516.508 cv
cp
f
428.027 518.789 mo
428.023 519.152 427.957 519.473 427.828 519.75 cv
427.695 520.031 427.508 520.266 427.266 520.457 cv
427.02 520.652 426.727 520.797 426.391 520.895 cv
426.051 520.992 425.68 521.039 425.277 521.043 cv
425.023 521.039 424.785 521.02 424.563 520.984 cv
424.336 520.941 424.137 520.895 423.957 520.836 cv
423.777 520.777 423.625 520.715 423.5 520.648 cv
423.375 520.586 423.281 520.527 423.227 520.473 cv
423.168 520.422 423.129 520.352 423.105 520.254 cv
423.078 520.164 423.066 520.035 423.066 519.875 cv
423.066 519.777 423.07 519.695 423.082 519.625 cv
423.09 519.559 423.102 519.504 423.121 519.461 cv
423.133 519.422 423.156 519.391 423.184 519.371 cv
423.211 519.355 423.242 519.348 423.281 519.344 cv
423.336 519.348 423.422 519.383 423.535 519.449 cv
423.645 519.523 423.781 519.602 423.949 519.68 cv
424.109 519.766 424.301 519.84 424.527 519.91 cv
424.746 519.98 425.004 520.016 425.301 520.016 cv
425.516 520.016 425.715 519.992 425.895 519.945 cv
426.07 519.898 426.223 519.832 426.352 519.738 cv
426.48 519.652 426.582 519.535 426.652 519.391 cv
426.723 519.254 426.758 519.086 426.758 518.891 cv
426.758 518.695 426.707 518.531 426.605 518.395 cv
426.504 518.262 426.367 518.141 426.203 518.035 cv
426.035 517.934 425.852 517.844 425.645 517.758 cv
425.434 517.68 425.219 517.594 425 517.504 cv
424.781 517.418 424.566 517.316 424.355 517.203 cv
424.145 517.094 423.953 516.961 423.789 516.797 cv
423.617 516.641 423.484 516.445 423.387 516.219 cv
423.281 515.996 423.23 515.73 423.234 515.418 cv
423.23 515.145 423.285 514.879 423.395 514.625 cv
423.5 514.375 423.66 514.156 423.875 513.965 cv
424.086 513.777 424.352 513.625 424.672 513.508 cv
424.992 513.395 425.363 513.336 425.793 513.336 cv
425.977 513.336 426.164 513.352 426.352 513.383 cv
426.535 513.414 426.703 513.453 426.859 513.5 cv
427.008 513.547 427.137 513.598 427.246 513.652 cv
427.348 513.707 427.43 513.758 427.488 513.797 cv
427.539 513.844 427.574 513.879 427.598 513.906 cv
427.613 513.937 427.629 513.973 427.637 514.008 cv
427.645 514.051 427.652 514.098 427.66 514.152 cv
427.668 514.211 427.672 514.281 427.672 514.363 cv
427.672 514.453 427.668 514.531 427.66 514.594 cv
427.652 514.664 427.637 514.715 427.621 514.754 cv
427.598 514.797 427.578 514.828 427.555 514.844 cv
427.527 514.863 427.496 514.871 427.469 514.871 cv
427.418 514.871 427.352 514.844 427.266 514.785 cv
427.176 514.73 427.063 514.668 426.922 514.602 cv
426.781 514.539 426.613 514.48 426.426 514.418 cv
426.234 514.363 426.02 514.332 425.777 514.332 cv
425.555 514.332 425.363 514.359 425.199 514.406 cv
425.031 514.461 424.895 514.531 424.789 514.617 cv
424.684 514.711 424.602 514.816 424.551 514.941 cv
424.492 515.066 424.465 515.203 424.469 515.348 cv
424.465 515.551 424.516 515.719 424.621 515.855 cv
424.723 515.996 424.859 516.117 425.027 516.219 cv
425.191 516.324 425.383 516.418 425.598 516.5 cv
425.809 516.586 426.023 516.672 426.246 516.758 cv
426.465 516.848 426.684 516.949 426.902 517.055 cv
427.117 517.164 427.309 517.293 427.477 517.449 cv
427.641 517.605 427.773 517.793 427.875 518.012 cv
427.973 518.23 428.023 518.492 428.027 518.789 cv
cp
f
195.02 16.016 mo
195.078 16.207 195.117 16.355 195.137 16.461 cv
195.148 16.574 195.129 16.656 195.074 16.707 cv
195.016 16.762 194.914 16.793 194.77 16.809 cv
194.621 16.82 194.422 16.828 194.172 16.828 cv
193.902 16.828 193.695 16.824 193.551 16.816 cv
193.398 16.809 193.285 16.793 193.211 16.77 cv
193.129 16.746 193.074 16.715 193.047 16.672 cv
193.012 16.633 192.984 16.578 192.969 16.508 cv
192.293 14.48 li
188.504 14.48 li
187.867 16.453 li
187.844 16.527 187.816 16.59 187.785 16.637 cv
187.75 16.687 187.695 16.727 187.621 16.754 cv
187.543 16.781 187.438 16.797 187.301 16.812 cv
187.16 16.82 186.977 16.828 186.758 16.828 cv
186.516 16.828 186.332 16.82 186.199 16.805 cv
186.063 16.789 185.969 16.754 185.918 16.691 cv
185.863 16.637 185.844 16.551 185.863 16.437 cv
185.875 16.332 185.914 16.187 185.98 16 cv
189.09 7.05499 li
189.117 6.96899 189.156 6.89801 189.199 6.84003 cv
189.238 6.789 189.305 6.74597 189.398 6.71503 cv
189.488 6.68701 189.613 6.672 189.773 6.65997 cv
189.934 6.65601 190.145 6.65198 190.414 6.64801 cv
190.719 6.65198 190.965 6.65601 191.145 6.65997 cv
191.324 6.672 191.465 6.68701 191.57 6.71503 cv
191.668 6.74597 191.742 6.789 191.789 6.84399 cv
191.832 6.90198 191.867 6.97998 191.902 7.078 cv
cp
190.391 8.62097 mo
190.383 8.62097 li
188.957 12.906 li
191.816 12.906 li
cp
f
202.391 9.55902 mo
202.387 9.586 202.387 9.617 202.387 9.65198 cv
202.383 9.69098 202.379 9.72998 202.371 9.77301 cv
202.363 9.81598 202.352 9.867 202.34 9.922 cv
202.324 9.97998 202.309 10.047 202.289 10.117 cv
200.203 16.406 li
200.176 16.496 200.141 16.57 200.098 16.621 cv
200.051 16.68 199.977 16.723 199.879 16.75 cv
199.773 16.781 199.637 16.797 199.465 16.812 cv
199.289 16.82 199.063 16.828 198.785 16.828 cv
198.508 16.828 198.281 16.82 198.109 16.809 cv
197.934 16.793 197.797 16.773 197.699 16.742 cv
197.598 16.715 197.527 16.672 197.484 16.613 cv
197.438 16.562 197.402 16.492 197.379 16.406 cv
195.293 10.117 li
195.262 10.016 195.234 9.922 195.219 9.84003 cv
195.195 9.758 195.188 9.69897 195.188 9.65997 cv
195.184 9.62903 195.18 9.59399 195.184 9.55902 cv
195.18 9.508 195.195 9.461 195.227 9.422 cv
195.254 9.383 195.305 9.35199 195.379 9.32397 cv
195.449 9.30103 195.547 9.28101 195.676 9.27002 cv
195.801 9.26202 195.961 9.258 196.156 9.25403 cv
196.367 9.258 196.539 9.26599 196.672 9.27301 cv
196.797 9.289 196.902 9.30499 196.98 9.328 cv
197.055 9.35199 197.105 9.38702 197.141 9.42999 cv
197.168 9.47699 197.195 9.53101 197.219 9.59003 cv
198.801 14.691 li
198.848 14.887 li
198.895 14.691 li
200.453 9.59003 li
200.465 9.53101 200.488 9.47699 200.523 9.42999 cv
200.555 9.38702 200.609 9.35199 200.684 9.328 cv
200.754 9.30499 200.852 9.289 200.977 9.27301 cv
201.098 9.26599 201.258 9.258 201.457 9.25403 cv
201.648 9.258 201.805 9.26202 201.926 9.27002 cv
202.047 9.28101 202.141 9.30103 202.211 9.32397 cv
202.277 9.35199 202.324 9.383 202.352 9.422 cv
202.375 9.461 202.387 9.508 202.391 9.55902 cv
cp
f
209.852 12.84 mo
209.848 13.078 209.797 13.254 209.691 13.367 cv
209.582 13.484 209.434 13.543 209.254 13.539 cv
205.02 13.539 li
205.016 13.84 205.051 14.109 205.125 14.348 cv
205.191 14.59 205.305 14.793 205.461 14.961 cv
205.613 15.133 205.809 15.262 206.051 15.348 cv
206.289 15.437 206.578 15.48 206.922 15.48 cv
207.262 15.48 207.563 15.457 207.824 15.406 cv
208.082 15.359 208.309 15.305 208.5 15.242 cv
208.688 15.184 208.844 15.129 208.973 15.078 cv
209.094 15.031 209.195 15.008 209.277 15.004 cv
209.32 15.008 209.359 15.016 209.395 15.031 cv
209.422 15.051 209.449 15.082 209.469 15.129 cv
209.488 15.176 209.5 15.242 209.512 15.328 cv
209.516 15.414 209.52 15.523 209.523 15.652 cv
209.52 15.77 209.52 15.867 209.516 15.945 cv
209.508 16.027 209.5 16.094 209.492 16.148 cv
209.48 16.207 209.465 16.258 209.445 16.293 cv
209.426 16.336 209.398 16.371 209.367 16.406 cv
209.332 16.445 209.238 16.496 209.09 16.555 cv
208.934 16.621 208.742 16.684 208.512 16.738 cv
208.273 16.801 208.004 16.848 207.707 16.895 cv
207.402 16.934 207.082 16.957 206.742 16.961 cv
206.121 16.957 205.578 16.883 205.117 16.727 cv
204.648 16.574 204.262 16.336 203.953 16.02 cv
203.637 15.703 203.402 15.305 203.254 14.82 cv
203.098 14.34 203.023 13.773 203.027 13.117 cv
203.023 12.504 203.102 11.945 203.266 11.449 cv
203.422 10.953 203.656 10.535 203.969 10.187 cv
204.273 9.84399 204.648 9.578 205.086 9.39502 cv
205.523 9.21503 206.016 9.125 206.57 9.12097 cv
207.148 9.125 207.648 9.211 208.063 9.37903 cv
208.477 9.55499 208.813 9.79303 209.078 10.094 cv
209.34 10.398 209.535 10.758 209.664 11.172 cv
209.785 11.59 209.848 12.039 209.852 12.527 cv
cp
207.949 12.277 mo
207.961 11.727 207.852 11.293 207.617 10.98 cv
207.383 10.668 207.016 10.512 206.523 10.508 cv
206.273 10.512 206.059 10.559 205.875 10.648 cv
205.688 10.746 205.535 10.871 205.414 11.027 cv
205.289 11.187 205.195 11.375 205.133 11.59 cv
205.066 11.805 205.027 12.035 205.02 12.277 cv
cp
f
215.926 10.211 mo
215.926 10.402 215.918 10.555 215.91 10.672 cv
215.895 10.793 215.879 10.887 215.863 10.953 cv
215.84 11.023 215.813 11.07 215.781 11.094 cv
215.742 11.121 215.699 11.133 215.652 11.133 cv
215.605 11.133 215.559 11.125 215.512 11.105 cv
215.457 11.09 215.398 11.07 215.336 11.047 cv
215.266 11.027 215.195 11.008 215.121 10.988 cv
215.039 10.973 214.953 10.965 214.863 10.961 cv
214.75 10.965 214.641 10.984 214.535 11.027 cv
214.426 11.074 214.313 11.145 214.199 11.234 cv
214.078 11.328 213.957 11.453 213.832 11.605 cv
213.703 11.766 213.566 11.957 213.422 12.184 cv
213.422 16.516 li
213.418 16.57 213.402 16.613 213.375 16.652 cv
213.34 16.691 213.285 16.727 213.215 16.75 cv
213.137 16.777 213.039 16.793 212.914 16.809 cv
212.789 16.82 212.629 16.828 212.441 16.828 cv
212.246 16.828 212.09 16.82 211.965 16.809 cv
211.84 16.793 211.738 16.777 211.664 16.75 cv
211.586 16.727 211.531 16.691 211.504 16.652 cv
211.469 16.613 211.453 16.57 211.457 16.516 cv
211.457 9.56598 li
211.453 9.52002 211.469 9.47302 211.496 9.42999 cv
211.52 9.39502 211.566 9.36298 211.637 9.33197 cv
211.703 9.30902 211.789 9.289 211.898 9.27301 cv
212.004 9.26599 212.137 9.258 212.301 9.25403 cv
212.465 9.258 212.602 9.26599 212.711 9.27301 cv
212.816 9.289 212.902 9.30902 212.965 9.33197 cv
213.023 9.36298 213.066 9.39502 213.094 9.42999 cv
213.117 9.47302 213.129 9.52002 213.133 9.56598 cv
213.133 10.43 li
213.313 10.172 213.484 9.961 213.648 9.789 cv
213.805 9.625 213.961 9.48798 214.109 9.38702 cv
214.254 9.289 214.398 9.22302 214.543 9.17999 cv
214.688 9.14502 214.832 9.125 214.98 9.12097 cv
215.047 9.125 215.121 9.12903 215.199 9.133 cv
215.277 9.14502 215.355 9.15601 215.441 9.172 cv
215.52 9.19098 215.594 9.211 215.66 9.23401 cv
215.719 9.258 215.766 9.28497 215.797 9.30902 cv
215.824 9.34003 215.844 9.367 215.859 9.39502 cv
215.871 9.42999 215.883 9.47302 215.895 9.52301 cv
215.902 9.58197 215.91 9.664 215.918 9.77002 cv
215.922 9.87903 215.926 10.027 215.926 10.211 cv
cp
f
222.684 16.539 mo
222.68 16.617 222.652 16.672 222.605 16.711 cv
222.551 16.754 222.469 16.781 222.359 16.801 cv
222.242 16.816 222.078 16.828 221.863 16.828 cv
221.625 16.828 221.453 16.816 221.352 16.801 cv
221.242 16.781 221.168 16.754 221.129 16.711 cv
221.082 16.672 221.063 16.617 221.063 16.539 cv
221.063 15.988 li
220.773 16.297 220.445 16.535 220.082 16.703 cv
219.715 16.875 219.309 16.957 218.863 16.961 cv
218.492 16.957 218.152 16.91 217.844 16.816 cv
217.535 16.723 217.27 16.582 217.043 16.387 cv
216.816 16.199 216.641 15.965 216.516 15.684 cv
216.391 15.406 216.328 15.078 216.332 14.699 cv
216.328 14.301 216.406 13.949 216.566 13.645 cv
216.723 13.348 216.961 13.102 217.277 12.906 cv
217.59 12.715 217.98 12.57 218.449 12.473 cv
218.918 12.383 219.461 12.336 220.078 12.332 cv
220.758 12.332 li
220.758 11.91 li
220.758 11.695 220.734 11.504 220.691 11.34 cv
220.645 11.18 220.57 11.043 220.473 10.93 cv
220.367 10.824 220.234 10.742 220.066 10.687 cv
219.895 10.637 219.684 10.613 219.441 10.609 cv
219.109 10.613 218.816 10.648 218.563 10.719 cv
218.301 10.793 218.074 10.875 217.879 10.961 cv
217.68 11.055 217.516 11.133 217.387 11.203 cv
217.25 11.277 217.141 11.316 217.063 11.312 cv
217 11.316 216.949 11.297 216.91 11.258 cv
216.863 11.223 216.828 11.172 216.801 11.102 cv
216.77 11.039 216.746 10.953 216.734 10.852 cv
216.715 10.754 216.707 10.645 216.711 10.523 cv
216.707 10.363 216.723 10.238 216.75 10.141 cv
216.773 10.051 216.82 9.96503 216.898 9.88702 cv
216.969 9.81201 217.098 9.72998 217.281 9.64099 cv
217.461 9.55103 217.672 9.46503 217.918 9.38702 cv
218.16 9.30902 218.43 9.24597 218.719 9.19501 cv
219.008 9.14801 219.305 9.125 219.613 9.12097 cv
220.156 9.125 220.621 9.17603 221.008 9.28101 cv
221.395 9.39099 221.715 9.55499 221.965 9.77301 cv
222.215 9.992 222.395 10.277 222.512 10.625 cv
222.621 10.977 222.68 11.391 222.684 11.863 cv
cp
220.758 13.562 mo
220.008 13.562 li
219.691 13.566 219.422 13.59 219.199 13.633 cv
218.973 13.684 218.789 13.754 218.652 13.844 cv
218.508 13.941 218.406 14.055 218.344 14.184 cv
218.277 14.32 218.242 14.469 218.246 14.637 cv
218.242 14.93 218.336 15.16 218.523 15.324 cv
218.707 15.492 218.965 15.574 219.293 15.574 cv
219.566 15.574 219.816 15.504 220.051 15.363 cv
220.277 15.223 220.516 15.02 220.758 14.746 cv
cp
f
230.906 10.047 mo
230.902 10.301 230.875 10.484 230.82 10.602 cv
230.762 10.723 230.691 10.781 230.613 10.781 cv
229.793 10.781 li
229.906 10.906 229.988 11.051 230.039 11.207 cv
230.086 11.367 230.109 11.531 230.113 11.699 cv
230.109 12.109 230.043 12.469 229.91 12.781 cv
229.773 13.098 229.578 13.363 229.328 13.574 cv
229.074 13.793 228.773 13.957 228.418 14.066 cv
228.059 14.184 227.66 14.238 227.23 14.234 cv
227.004 14.238 226.793 14.211 226.59 14.152 cv
226.387 14.102 226.23 14.039 226.121 13.961 cv
226.059 14.031 226 14.109 225.953 14.203 cv
225.902 14.297 225.879 14.402 225.883 14.512 cv
225.879 14.668 225.945 14.789 226.078 14.883 cv
226.207 14.98 226.395 15.035 226.637 15.043 cv
228.328 15.105 li
228.723 15.121 229.074 15.18 229.383 15.273 cv
229.691 15.375 229.953 15.508 230.164 15.68 cv
230.375 15.855 230.535 16.066 230.645 16.309 cv
230.754 16.555 230.809 16.828 230.813 17.141 cv
230.809 17.477 230.734 17.801 230.586 18.109 cv
230.438 18.41 230.211 18.672 229.91 18.898 cv
229.605 19.117 229.227 19.297 228.773 19.43 cv
228.316 19.559 227.785 19.621 227.184 19.625 cv
226.586 19.621 226.082 19.574 225.664 19.484 cv
225.246 19.387 224.902 19.258 224.637 19.094 cv
224.367 18.926 224.172 18.727 224.055 18.5 cv
223.93 18.266 223.871 18.012 223.871 17.738 cv
223.871 17.566 223.891 17.406 223.938 17.25 cv
223.977 17.094 224.043 16.941 224.133 16.801 cv
224.215 16.656 224.32 16.523 224.445 16.391 cv
224.57 16.262 224.711 16.137 224.875 16.016 cv
224.648 15.902 224.477 15.742 224.355 15.531 cv
224.234 15.328 224.176 15.102 224.176 14.855 cv
224.176 14.555 224.242 14.277 224.383 14.02 cv
224.52 13.77 224.703 13.539 224.93 13.336 cv
224.746 13.156 224.602 12.941 224.492 12.684 cv
224.383 12.434 224.328 12.113 224.332 11.73 cv
224.328 11.328 224.398 10.969 224.543 10.645 cv
224.684 10.328 224.883 10.059 225.141 9.836 cv
225.395 9.617 225.699 9.44501 226.051 9.328 cv
226.402 9.211 226.793 9.15198 227.223 9.15198 cv
227.441 9.15198 227.648 9.16803 227.848 9.19098 cv
228.047 9.22302 228.234 9.258 228.406 9.30103 cv
230.613 9.30103 li
230.695 9.30499 230.766 9.36298 230.824 9.47302 cv
230.875 9.59003 230.902 9.78101 230.906 10.047 cv
cp
228.391 11.691 mo
228.387 11.32 228.285 11.031 228.078 10.82 cv
227.867 10.617 227.574 10.512 227.199 10.508 cv
227.004 10.512 226.832 10.543 226.691 10.605 cv
226.543 10.672 226.422 10.762 226.328 10.871 cv
226.227 10.984 226.156 11.113 226.113 11.262 cv
226.063 11.41 226.039 11.566 226.043 11.723 cv
226.039 12.082 226.145 12.359 226.355 12.562 cv
226.563 12.77 226.852 12.875 227.223 12.871 cv
227.418 12.875 227.586 12.844 227.734 12.777 cv
227.875 12.719 227.996 12.633 228.098 12.52 cv
228.191 12.414 228.266 12.285 228.316 12.141 cv
228.363 12 228.387 11.852 228.391 11.691 cv
cp
228.852 17.242 mo
228.852 17.004 228.758 16.828 228.57 16.703 cv
228.383 16.582 228.125 16.512 227.797 16.5 cv
226.402 16.461 li
226.266 16.562 226.156 16.656 226.078 16.746 cv
225.996 16.836 225.934 16.922 225.887 17.008 cv
225.836 17.09 225.801 17.172 225.789 17.25 cv
225.77 17.328 225.762 17.406 225.766 17.492 cv
225.762 17.746 225.895 17.945 226.156 18.082 cv
226.418 18.215 226.789 18.281 227.27 18.285 cv
227.563 18.281 227.809 18.25 228.016 18.195 cv
228.215 18.133 228.379 18.055 228.508 17.957 cv
228.629 17.855 228.719 17.746 228.773 17.625 cv
228.824 17.504 228.852 17.375 228.852 17.242 cv
cp
f
238.531 12.84 mo
238.527 13.078 238.477 13.254 238.371 13.367 cv
238.262 13.484 238.113 13.543 237.934 13.539 cv
233.699 13.539 li
233.695 13.84 233.73 14.109 233.805 14.348 cv
233.871 14.59 233.984 14.793 234.141 14.961 cv
234.293 15.133 234.488 15.262 234.73 15.348 cv
234.969 15.437 235.258 15.48 235.602 15.48 cv
235.941 15.48 236.242 15.457 236.504 15.406 cv
236.762 15.359 236.988 15.305 237.18 15.242 cv
237.367 15.184 237.523 15.129 237.652 15.078 cv
237.773 15.031 237.875 15.008 237.957 15.004 cv
238 15.008 238.039 15.016 238.074 15.031 cv
238.102 15.051 238.129 15.082 238.148 15.129 cv
238.168 15.176 238.18 15.242 238.191 15.328 cv
238.195 15.414 238.199 15.523 238.203 15.652 cv
238.199 15.77 238.199 15.867 238.195 15.945 cv
238.188 16.027 238.18 16.094 238.172 16.148 cv
238.16 16.207 238.145 16.258 238.125 16.293 cv
238.105 16.336 238.078 16.371 238.047 16.406 cv
238.012 16.445 237.918 16.496 237.77 16.555 cv
237.613 16.621 237.422 16.684 237.191 16.738 cv
236.953 16.801 236.684 16.848 236.387 16.895 cv
236.082 16.934 235.762 16.957 235.422 16.961 cv
234.801 16.957 234.258 16.883 233.797 16.727 cv
233.328 16.574 232.941 16.336 232.633 16.02 cv
232.316 15.703 232.082 15.305 231.934 14.82 cv
231.777 14.34 231.703 13.773 231.707 13.117 cv
231.703 12.504 231.781 11.945 231.945 11.449 cv
232.102 10.953 232.336 10.535 232.648 10.187 cv
232.953 9.84399 233.328 9.578 233.766 9.39502 cv
234.203 9.21503 234.695 9.125 235.25 9.12097 cv
235.828 9.125 236.328 9.211 236.742 9.37903 cv
237.156 9.55499 237.492 9.79303 237.758 10.094 cv
238.02 10.398 238.215 10.758 238.344 11.172 cv
238.465 11.59 238.527 12.039 238.531 12.527 cv
cp
236.629 12.277 mo
236.641 11.727 236.531 11.293 236.297 10.98 cv
236.063 10.668 235.695 10.512 235.203 10.508 cv
234.953 10.512 234.738 10.559 234.555 10.648 cv
234.367 10.746 234.215 10.871 234.094 11.027 cv
233.969 11.187 233.875 11.375 233.813 11.59 cv
233.746 11.805 233.707 12.035 233.699 12.277 cv
cp
f
249.523 7.539 mo
249.52 7.69897 249.516 7.828 249.504 7.93402 cv
249.488 8.04303 249.465 8.12903 249.441 8.18701 cv
249.41 8.25 249.379 8.297 249.344 8.32397 cv
249.305 8.35901 249.262 8.375 249.219 8.37097 cv
245.922 8.37097 li
245.922 11.086 li
249.016 11.086 li
249.059 11.086 249.102 11.102 249.141 11.125 cv
249.176 11.156 249.207 11.199 249.238 11.258 cv
249.266 11.32 249.285 11.402 249.301 11.504 cv
249.309 11.609 249.316 11.738 249.32 11.895 cv
249.316 12.051 249.309 12.184 249.301 12.285 cv
249.285 12.395 249.266 12.48 249.238 12.543 cv
249.207 12.613 249.176 12.66 249.141 12.687 cv
249.102 12.719 249.059 12.734 249.016 12.73 cv
245.922 12.73 li
245.922 16.484 li
245.918 16.543 245.902 16.594 245.875 16.633 cv
245.84 16.68 245.785 16.715 245.707 16.738 cv
245.625 16.77 245.52 16.789 245.391 16.805 cv
245.258 16.82 245.09 16.828 244.895 16.828 cv
244.691 16.828 244.527 16.82 244.398 16.805 cv
244.262 16.789 244.156 16.77 244.082 16.738 cv
244 16.715 243.945 16.68 243.914 16.633 cv
243.879 16.594 243.859 16.543 243.863 16.484 cv
243.863 7.34399 li
243.859 7.117 243.918 6.953 244.039 6.84802 cv
244.152 6.75 244.297 6.69897 244.473 6.69501 cv
249.219 6.69501 li
249.262 6.69897 249.305 6.711 249.344 6.73798 cv
249.379 6.77002 249.41 6.81598 249.441 6.87903 cv
249.465 6.94501 249.488 7.03497 249.504 7.14099 cv
249.516 7.25403 249.52 7.38702 249.523 7.539 cv
cp
f
253.035 16.516 mo
253.031 16.57 253.016 16.613 252.988 16.652 cv
252.953 16.691 252.898 16.727 252.828 16.75 cv
252.75 16.777 252.652 16.793 252.527 16.809 cv
252.402 16.82 252.242 16.828 252.055 16.828 cv
251.859 16.828 251.703 16.82 251.578 16.809 cv
251.453 16.793 251.352 16.777 251.277 16.75 cv
251.199 16.727 251.145 16.691 251.117 16.652 cv
251.082 16.613 251.066 16.57 251.07 16.516 cv
251.07 9.58197 li
251.066 9.53101 251.082 9.48401 251.117 9.44501 cv
251.145 9.40601 251.199 9.375 251.277 9.34399 cv
251.352 9.32001 251.453 9.297 251.578 9.27698 cv
251.703 9.26599 251.859 9.258 252.055 9.25403 cv
252.242 9.258 252.402 9.26599 252.527 9.27698 cv
252.652 9.297 252.75 9.32001 252.828 9.34399 cv
252.898 9.375 252.953 9.40601 252.988 9.44501 cv
253.016 9.48401 253.031 9.53101 253.035 9.58197 cv
cp
253.184 7.211 mo
253.184 7.60901 253.102 7.883 252.941 8.03101 cv
252.777 8.18402 252.48 8.258 252.047 8.25403 cv
251.602 8.258 251.301 8.18402 251.152 8.039 cv
250.996 7.89502 250.922 7.633 250.922 7.25 cv
250.922 6.85498 251 6.58197 251.16 6.42999 cv
251.316 6.27698 251.617 6.19897 252.063 6.19897 cv
252.496 6.19897 252.793 6.27301 252.949 6.422 cv
253.105 6.57001 253.184 6.836 253.184 7.211 cv
cp
f
256.961 16.516 mo
256.957 16.57 256.941 16.613 256.914 16.652 cv
256.879 16.691 256.824 16.727 256.754 16.75 cv
256.676 16.777 256.578 16.793 256.453 16.809 cv
256.328 16.82 256.168 16.828 255.98 16.828 cv
255.785 16.828 255.629 16.82 255.504 16.809 cv
255.379 16.793 255.277 16.777 255.203 16.75 cv
255.125 16.727 255.07 16.691 255.043 16.652 cv
255.008 16.613 254.992 16.57 254.996 16.516 cv
254.996 6.27002 li
254.992 6.21899 255.008 6.172 255.043 6.12903 cv
255.07 6.09003 255.125 6.05499 255.203 6.02301 cv
255.277 5.99597 255.379 5.97699 255.504 5.95697 cv
255.629 5.94501 255.785 5.93701 255.98 5.93402 cv
256.168 5.93701 256.328 5.94501 256.453 5.95697 cv
256.578 5.97699 256.676 5.99597 256.754 6.02301 cv
256.824 6.05499 256.879 6.09003 256.914 6.12903 cv
256.941 6.172 256.957 6.21899 256.961 6.27002 cv
cp
f
263.09 15.832 mo
263.09 16.059 263.074 16.234 263.047 16.355 cv
263.016 16.48 262.977 16.566 262.934 16.613 cv
262.883 16.664 262.816 16.707 262.727 16.746 cv
262.633 16.785 262.523 16.816 262.406 16.848 cv
262.281 16.871 262.148 16.895 262.008 16.914 cv
261.863 16.926 261.723 16.934 261.578 16.937 cv
261.188 16.934 260.848 16.883 260.563 16.789 cv
260.277 16.687 260.043 16.539 259.855 16.332 cv
259.668 16.129 259.527 15.871 259.441 15.559 cv
259.348 15.25 259.305 14.879 259.309 14.449 cv
259.309 10.891 li
258.477 10.891 li
258.375 10.895 258.301 10.832 258.25 10.707 cv
258.195 10.586 258.168 10.383 258.172 10.094 cv
258.168 9.94501 258.176 9.81598 258.191 9.71503 cv
258.203 9.61298 258.223 9.53101 258.25 9.46899 cv
258.273 9.40997 258.305 9.367 258.348 9.34003 cv
258.383 9.31598 258.43 9.30499 258.484 9.30103 cv
259.309 9.30103 li
259.309 7.75 li
259.305 7.703 259.32 7.65601 259.352 7.60901 cv
259.379 7.57001 259.43 7.53497 259.508 7.50403 cv
259.582 7.47998 259.684 7.45697 259.813 7.44098 cv
259.938 7.42999 260.094 7.42603 260.285 7.422 cv
260.473 7.42603 260.633 7.42999 260.762 7.44098 cv
260.887 7.45697 260.988 7.47998 261.063 7.50403 cv
261.133 7.53497 261.184 7.57001 261.219 7.60901 cv
261.246 7.65601 261.262 7.703 261.266 7.75 cv
261.266 9.30103 li
262.777 9.30103 li
262.828 9.30499 262.875 9.31598 262.914 9.34003 cv
262.953 9.367 262.984 9.40997 263.012 9.46899 cv
263.035 9.53101 263.055 9.61298 263.07 9.71503 cv
263.082 9.81598 263.09 9.94501 263.09 10.094 cv
263.09 10.383 263.063 10.586 263.012 10.707 cv
262.957 10.832 262.883 10.895 262.785 10.891 cv
261.266 10.891 li
261.266 14.156 li
261.262 14.535 261.32 14.82 261.445 15.008 cv
261.563 15.199 261.777 15.293 262.082 15.293 cv
262.184 15.293 262.277 15.285 262.363 15.266 cv
262.445 15.25 262.52 15.23 262.586 15.203 cv
262.648 15.184 262.703 15.16 262.75 15.141 cv
262.793 15.125 262.832 15.117 262.871 15.113 cv
262.898 15.117 262.93 15.125 262.961 15.141 cv
262.988 15.16 263.008 15.199 263.027 15.25 cv
263.039 15.309 263.055 15.383 263.07 15.473 cv
263.082 15.57 263.09 15.687 263.09 15.832 cv
cp
f
270.676 12.84 mo
270.672 13.078 270.621 13.254 270.516 13.367 cv
270.406 13.484 270.258 13.543 270.078 13.539 cv
265.844 13.539 li
265.84 13.84 265.875 14.109 265.949 14.348 cv
266.016 14.59 266.129 14.793 266.285 14.961 cv
266.438 15.133 266.633 15.262 266.875 15.348 cv
267.113 15.437 267.402 15.48 267.746 15.48 cv
268.086 15.48 268.387 15.457 268.648 15.406 cv
268.906 15.359 269.133 15.305 269.324 15.242 cv
269.512 15.184 269.668 15.129 269.797 15.078 cv
269.918 15.031 270.02 15.008 270.102 15.004 cv
270.145 15.008 270.184 15.016 270.219 15.031 cv
270.246 15.051 270.273 15.082 270.293 15.129 cv
270.313 15.176 270.324 15.242 270.336 15.328 cv
270.34 15.414 270.344 15.523 270.348 15.652 cv
270.344 15.77 270.344 15.867 270.34 15.945 cv
270.332 16.027 270.324 16.094 270.316 16.148 cv
270.305 16.207 270.289 16.258 270.27 16.293 cv
270.25 16.336 270.223 16.371 270.191 16.406 cv
270.156 16.445 270.063 16.496 269.914 16.555 cv
269.758 16.621 269.566 16.684 269.336 16.738 cv
269.098 16.801 268.828 16.848 268.531 16.895 cv
268.227 16.934 267.906 16.957 267.566 16.961 cv
266.945 16.957 266.402 16.883 265.941 16.727 cv
265.473 16.574 265.086 16.336 264.777 16.02 cv
264.461 15.703 264.227 15.305 264.078 14.82 cv
263.922 14.34 263.848 13.773 263.852 13.117 cv
263.848 12.504 263.926 11.945 264.09 11.449 cv
264.246 10.953 264.48 10.535 264.793 10.187 cv
265.098 9.84399 265.473 9.578 265.91 9.39502 cv
266.348 9.21503 266.84 9.125 267.395 9.12097 cv
267.973 9.125 268.473 9.211 268.887 9.37903 cv
269.301 9.55499 269.637 9.79303 269.902 10.094 cv
270.164 10.398 270.359 10.758 270.488 11.172 cv
270.609 11.59 270.672 12.039 270.676 12.527 cv
cp
268.773 12.277 mo
268.785 11.727 268.676 11.293 268.441 10.98 cv
268.207 10.668 267.84 10.512 267.348 10.508 cv
267.098 10.512 266.883 10.559 266.699 10.648 cv
266.512 10.746 266.359 10.871 266.238 11.027 cv
266.113 11.187 266.02 11.375 265.957 11.59 cv
265.891 11.805 265.852 12.035 265.844 12.277 cv
cp
f
276.75 10.211 mo
276.75 10.402 276.742 10.555 276.734 10.672 cv
276.719 10.793 276.703 10.887 276.688 10.953 cv
276.664 11.023 276.637 11.07 276.605 11.094 cv
276.566 11.121 276.523 11.133 276.477 11.133 cv
276.43 11.133 276.383 11.125 276.336 11.105 cv
276.281 11.09 276.223 11.07 276.16 11.047 cv
276.09 11.027 276.02 11.008 275.945 10.988 cv
275.863 10.973 275.777 10.965 275.688 10.961 cv
275.574 10.965 275.465 10.984 275.359 11.027 cv
275.25 11.074 275.137 11.145 275.023 11.234 cv
274.902 11.328 274.781 11.453 274.656 11.605 cv
274.527 11.766 274.391 11.957 274.246 12.184 cv
274.246 16.516 li
274.242 16.57 274.227 16.613 274.199 16.652 cv
274.164 16.691 274.109 16.727 274.039 16.75 cv
273.961 16.777 273.863 16.793 273.738 16.809 cv
273.613 16.82 273.453 16.828 273.266 16.828 cv
273.07 16.828 272.914 16.82 272.789 16.809 cv
272.664 16.793 272.563 16.777 272.488 16.75 cv
272.41 16.727 272.355 16.691 272.328 16.652 cv
272.293 16.613 272.277 16.57 272.281 16.516 cv
272.281 9.56598 li
272.277 9.52002 272.293 9.47302 272.32 9.42999 cv
272.344 9.39502 272.391 9.36298 272.461 9.33197 cv
272.527 9.30902 272.613 9.289 272.723 9.27301 cv
272.828 9.26599 272.961 9.258 273.125 9.25403 cv
273.289 9.258 273.426 9.26599 273.535 9.27301 cv
273.641 9.289 273.727 9.30902 273.789 9.33197 cv
273.848 9.36298 273.891 9.39502 273.918 9.42999 cv
273.941 9.47302 273.953 9.52002 273.957 9.56598 cv
273.957 10.43 li
274.137 10.172 274.309 9.961 274.473 9.789 cv
274.629 9.625 274.785 9.48798 274.934 9.38702 cv
275.078 9.289 275.223 9.22302 275.367 9.17999 cv
275.512 9.14502 275.656 9.125 275.805 9.12097 cv
275.871 9.125 275.945 9.12903 276.023 9.133 cv
276.102 9.14502 276.18 9.15601 276.266 9.172 cv
276.344 9.19098 276.418 9.211 276.484 9.23401 cv
276.543 9.258 276.59 9.28497 276.621 9.30902 cv
276.648 9.34003 276.668 9.367 276.684 9.39502 cv
276.695 9.42999 276.707 9.47302 276.719 9.52301 cv
276.727 9.58197 276.734 9.664 276.742 9.77002 cv
276.746 9.87903 276.75 10.027 276.75 10.211 cv
cp
f
279.914 16.516 mo
279.91 16.57 279.895 16.613 279.867 16.652 cv
279.832 16.691 279.777 16.727 279.707 16.75 cv
279.629 16.777 279.531 16.793 279.406 16.809 cv
279.281 16.82 279.121 16.828 278.934 16.828 cv
278.738 16.828 278.582 16.82 278.457 16.809 cv
278.332 16.793 278.23 16.777 278.156 16.75 cv
278.078 16.727 278.023 16.691 277.996 16.652 cv
277.961 16.613 277.945 16.57 277.949 16.516 cv
277.949 9.58197 li
277.945 9.53101 277.961 9.48401 277.996 9.44501 cv
278.023 9.40601 278.078 9.375 278.156 9.34399 cv
278.23 9.32001 278.332 9.297 278.457 9.27698 cv
278.582 9.26599 278.738 9.258 278.934 9.25403 cv
279.121 9.258 279.281 9.26599 279.406 9.27698 cv
279.531 9.297 279.629 9.32001 279.707 9.34399 cv
279.777 9.375 279.832 9.40601 279.867 9.44501 cv
279.895 9.48401 279.91 9.53101 279.914 9.58197 cv
cp
280.063 7.211 mo
280.063 7.60901 279.98 7.883 279.82 8.03101 cv
279.656 8.18402 279.359 8.258 278.926 8.25403 cv
278.48 8.258 278.18 8.18402 278.031 8.039 cv
277.875 7.89502 277.801 7.633 277.801 7.25 cv
277.801 6.85498 277.879 6.58197 278.039 6.42999 cv
278.195 6.27698 278.496 6.19897 278.941 6.19897 cv
279.375 6.19897 279.672 6.27301 279.828 6.422 cv
279.984 6.57001 280.063 6.836 280.063 7.211 cv
cp
f
288.516 16.516 mo
288.512 16.57 288.496 16.613 288.469 16.652 cv
288.434 16.691 288.383 16.727 288.313 16.75 cv
288.238 16.777 288.137 16.793 288.012 16.809 cv
287.883 16.82 287.727 16.828 287.543 16.828 cv
287.348 16.828 287.188 16.82 287.063 16.809 cv
286.934 16.793 286.832 16.777 286.762 16.75 cv
286.684 16.727 286.633 16.691 286.605 16.652 cv
286.57 16.613 286.555 16.57 286.559 16.516 cv
286.559 12.551 li
286.555 12.215 286.531 11.949 286.484 11.754 cv
286.434 11.562 286.359 11.398 286.27 11.262 cv
286.176 11.125 286.059 11.02 285.91 10.941 cv
285.762 10.867 285.586 10.828 285.391 10.828 cv
285.137 10.828 284.887 10.922 284.633 11.102 cv
284.379 11.285 284.113 11.547 283.84 11.895 cv
283.84 16.516 li
283.836 16.57 283.82 16.613 283.793 16.652 cv
283.758 16.691 283.703 16.727 283.633 16.75 cv
283.555 16.777 283.457 16.793 283.332 16.809 cv
283.207 16.82 283.047 16.828 282.859 16.828 cv
282.664 16.828 282.508 16.82 282.383 16.809 cv
282.258 16.793 282.156 16.777 282.082 16.75 cv
282.004 16.727 281.949 16.691 281.922 16.652 cv
281.887 16.613 281.871 16.57 281.875 16.516 cv
281.875 9.56598 li
281.871 9.52002 281.887 9.47302 281.914 9.42999 cv
281.938 9.39502 281.984 9.36298 282.055 9.33197 cv
282.121 9.30902 282.207 9.289 282.316 9.27301 cv
282.422 9.26599 282.555 9.258 282.719 9.25403 cv
282.883 9.258 283.02 9.26599 283.129 9.27301 cv
283.234 9.289 283.32 9.30902 283.383 9.33197 cv
283.441 9.36298 283.484 9.39502 283.512 9.42999 cv
283.535 9.47302 283.547 9.52002 283.551 9.56598 cv
283.551 10.367 li
283.934 9.95697 284.324 9.64502 284.723 9.43402 cv
285.117 9.22699 285.535 9.125 285.969 9.12097 cv
286.438 9.125 286.836 9.203 287.164 9.35498 cv
287.488 9.51599 287.75 9.72699 287.949 9.992 cv
288.148 10.262 288.293 10.574 288.383 10.93 cv
288.469 11.289 288.512 11.719 288.516 12.223 cv
cp
f
296.711 10.047 mo
296.707 10.301 296.68 10.484 296.625 10.602 cv
296.566 10.723 296.496 10.781 296.418 10.781 cv
295.598 10.781 li
295.711 10.906 295.793 11.051 295.844 11.207 cv
295.891 11.367 295.914 11.531 295.918 11.699 cv
295.914 12.109 295.848 12.469 295.715 12.781 cv
295.578 13.098 295.383 13.363 295.133 13.574 cv
294.879 13.793 294.578 13.957 294.223 14.066 cv
293.863 14.184 293.465 14.238 293.035 14.234 cv
292.809 14.238 292.598 14.211 292.395 14.152 cv
292.191 14.102 292.035 14.039 291.926 13.961 cv
291.863 14.031 291.805 14.109 291.758 14.203 cv
291.707 14.297 291.684 14.402 291.688 14.512 cv
291.684 14.668 291.75 14.789 291.883 14.883 cv
292.012 14.98 292.199 15.035 292.441 15.043 cv
294.133 15.105 li
294.527 15.121 294.879 15.18 295.188 15.273 cv
295.496 15.375 295.758 15.508 295.969 15.68 cv
296.18 15.855 296.34 16.066 296.449 16.309 cv
296.559 16.555 296.613 16.828 296.617 17.141 cv
296.613 17.477 296.539 17.801 296.391 18.109 cv
296.242 18.41 296.016 18.672 295.715 18.898 cv
295.41 19.117 295.031 19.297 294.578 19.43 cv
294.121 19.559 293.59 19.621 292.988 19.625 cv
292.391 19.621 291.887 19.574 291.469 19.484 cv
291.051 19.387 290.707 19.258 290.441 19.094 cv
290.172 18.926 289.977 18.727 289.859 18.5 cv
289.734 18.266 289.676 18.012 289.676 17.738 cv
289.676 17.566 289.695 17.406 289.742 17.25 cv
289.781 17.094 289.848 16.941 289.938 16.801 cv
290.02 16.656 290.125 16.523 290.25 16.391 cv
290.375 16.262 290.516 16.137 290.68 16.016 cv
290.453 15.902 290.281 15.742 290.16 15.531 cv
290.039 15.328 289.98 15.102 289.98 14.855 cv
289.98 14.555 290.047 14.277 290.188 14.02 cv
290.324 13.77 290.508 13.539 290.734 13.336 cv
290.551 13.156 290.406 12.941 290.297 12.684 cv
290.188 12.434 290.133 12.113 290.137 11.73 cv
290.133 11.328 290.203 10.969 290.348 10.645 cv
290.488 10.328 290.688 10.059 290.945 9.836 cv
291.199 9.617 291.504 9.44501 291.855 9.328 cv
292.207 9.211 292.598 9.15198 293.027 9.15198 cv
293.246 9.15198 293.453 9.16803 293.652 9.19098 cv
293.852 9.22302 294.039 9.258 294.211 9.30103 cv
296.418 9.30103 li
296.5 9.30499 296.57 9.36298 296.629 9.47302 cv
296.68 9.59003 296.707 9.78101 296.711 10.047 cv
cp
294.195 11.691 mo
294.191 11.32 294.09 11.031 293.883 10.82 cv
293.672 10.617 293.379 10.512 293.004 10.508 cv
292.809 10.512 292.637 10.543 292.496 10.605 cv
292.348 10.672 292.227 10.762 292.133 10.871 cv
292.031 10.984 291.961 11.113 291.918 11.262 cv
291.867 11.41 291.844 11.566 291.848 11.723 cv
291.844 12.082 291.949 12.359 292.16 12.562 cv
292.367 12.77 292.656 12.875 293.027 12.871 cv
293.223 12.875 293.391 12.844 293.539 12.777 cv
293.68 12.719 293.801 12.633 293.902 12.52 cv
293.996 12.414 294.07 12.285 294.121 12.141 cv
294.168 12 294.191 11.852 294.195 11.691 cv
cp
294.656 17.242 mo
294.656 17.004 294.563 16.828 294.375 16.703 cv
294.188 16.582 293.93 16.512 293.602 16.5 cv
292.207 16.461 li
292.07 16.562 291.961 16.656 291.883 16.746 cv
291.801 16.836 291.738 16.922 291.691 17.008 cv
291.641 17.09 291.605 17.172 291.594 17.25 cv
291.574 17.328 291.566 17.406 291.57 17.492 cv
291.566 17.746 291.699 17.945 291.961 18.082 cv
292.223 18.215 292.594 18.281 293.074 18.285 cv
293.367 18.281 293.613 18.25 293.82 18.195 cv
294.02 18.133 294.184 18.055 294.313 17.957 cv
294.434 17.855 294.523 17.746 294.578 17.625 cv
294.629 17.504 294.656 17.375 294.656 17.242 cv
cp
f
308.508 7.539 mo
308.504 7.69501 308.496 7.82397 308.488 7.92603 cv
308.473 8.03497 308.453 8.12097 308.43 8.18402 cv
308.398 8.25 308.367 8.297 308.332 8.32397 cv
308.289 8.35901 308.246 8.375 308.203 8.37097 cv
305.68 8.37097 li
305.68 16.5 li
305.68 16.555 305.66 16.602 305.629 16.641 cv
305.59 16.684 305.535 16.719 305.461 16.742 cv
305.379 16.77 305.273 16.789 305.145 16.805 cv
305.008 16.82 304.844 16.828 304.648 16.828 cv
304.453 16.828 304.289 16.82 304.156 16.805 cv
304.023 16.789 303.918 16.77 303.84 16.742 cv
303.762 16.719 303.703 16.684 303.672 16.641 cv
303.633 16.602 303.617 16.555 303.621 16.5 cv
303.621 8.37097 li
301.098 8.37097 li
301.043 8.375 300.996 8.35901 300.965 8.32397 cv
300.926 8.297 300.895 8.25 300.871 8.18402 cv
300.84 8.12097 300.82 8.03497 300.813 7.92603 cv
300.797 7.82397 300.793 7.69501 300.793 7.539 cv
300.793 7.38702 300.797 7.25403 300.813 7.14099 cv
300.82 7.03497 300.84 6.94501 300.871 6.87903 cv
300.895 6.81598 300.926 6.77002 300.965 6.73798 cv
300.996 6.711 301.043 6.69897 301.098 6.69501 cv
308.203 6.69501 li
308.246 6.69897 308.289 6.711 308.332 6.73798 cv
308.367 6.77002 308.398 6.81598 308.43 6.87903 cv
308.453 6.94501 308.473 7.03497 308.488 7.14099 cv
308.496 7.25403 308.504 7.38702 308.508 7.539 cv
cp
f
311.547 16.516 mo
311.543 16.57 311.527 16.613 311.5 16.652 cv
311.465 16.691 311.41 16.727 311.34 16.75 cv
311.262 16.777 311.164 16.793 311.039 16.809 cv
310.914 16.82 310.754 16.828 310.566 16.828 cv
310.371 16.828 310.215 16.82 310.09 16.809 cv
309.965 16.793 309.863 16.777 309.789 16.75 cv
309.711 16.727 309.656 16.691 309.629 16.652 cv
309.594 16.613 309.578 16.57 309.582 16.516 cv
309.582 9.58197 li
309.578 9.53101 309.594 9.48401 309.629 9.44501 cv
309.656 9.40601 309.711 9.375 309.789 9.34399 cv
309.863 9.32001 309.965 9.297 310.09 9.27698 cv
310.215 9.26599 310.371 9.258 310.566 9.25403 cv
310.754 9.258 310.914 9.26599 311.039 9.27698 cv
311.164 9.297 311.262 9.32001 311.34 9.34399 cv
311.41 9.375 311.465 9.40601 311.5 9.44501 cv
311.527 9.48401 311.543 9.53101 311.547 9.58197 cv
cp
311.695 7.211 mo
311.695 7.60901 311.613 7.883 311.453 8.03101 cv
311.289 8.18402 310.992 8.258 310.559 8.25403 cv
310.113 8.258 309.813 8.18402 309.664 8.039 cv
309.508 7.89502 309.434 7.633 309.434 7.25 cv
309.434 6.85498 309.512 6.58197 309.672 6.42999 cv
309.828 6.27698 310.129 6.19897 310.574 6.19897 cv
311.008 6.19897 311.305 6.27301 311.461 6.422 cv
311.617 6.57001 311.695 6.836 311.695 7.211 cv
cp
f
324.598 16.516 mo
324.594 16.57 324.578 16.613 324.551 16.652 cv
324.516 16.691 324.465 16.727 324.395 16.75 cv
324.32 16.777 324.219 16.793 324.098 16.809 cv
323.973 16.82 323.816 16.828 323.625 16.828 cv
323.426 16.828 323.266 16.82 323.141 16.809 cv
323.016 16.793 322.914 16.777 322.84 16.75 cv
322.762 16.727 322.711 16.691 322.684 16.652 cv
322.656 16.613 322.641 16.57 322.645 16.516 cv
322.645 12.395 li
322.641 12.164 322.621 11.949 322.578 11.754 cv
322.531 11.562 322.461 11.398 322.375 11.262 cv
322.281 11.125 322.168 11.02 322.031 10.941 cv
321.891 10.867 321.727 10.828 321.535 10.828 cv
321.301 10.828 321.063 10.922 320.824 11.102 cv
320.586 11.285 320.328 11.547 320.047 11.895 cv
320.047 16.516 li
320.047 16.57 320.031 16.613 320 16.652 cv
319.969 16.691 319.914 16.727 319.84 16.75 cv
319.762 16.777 319.66 16.793 319.539 16.809 cv
319.414 16.82 319.262 16.828 319.074 16.828 cv
318.879 16.828 318.719 16.82 318.598 16.809 cv
318.469 16.793 318.367 16.777 318.297 16.75 cv
318.219 16.727 318.168 16.691 318.137 16.652 cv
318.105 16.613 318.09 16.57 318.09 16.516 cv
318.09 12.395 li
318.09 12.164 318.066 11.949 318.023 11.754 cv
317.98 11.562 317.914 11.398 317.828 11.262 cv
317.734 11.125 317.621 11.02 317.484 10.941 cv
317.34 10.867 317.176 10.828 316.992 10.828 cv
316.75 10.828 316.512 10.922 316.273 11.102 cv
316.035 11.285 315.777 11.547 315.504 11.895 cv
315.504 16.516 li
315.5 16.57 315.484 16.613 315.457 16.652 cv
315.422 16.691 315.367 16.727 315.297 16.75 cv
315.219 16.777 315.121 16.793 314.996 16.809 cv
314.871 16.82 314.711 16.828 314.523 16.828 cv
314.328 16.828 314.172 16.82 314.047 16.809 cv
313.922 16.793 313.82 16.777 313.746 16.75 cv
313.668 16.727 313.613 16.691 313.586 16.652 cv
313.551 16.613 313.535 16.57 313.539 16.516 cv
313.539 9.56598 li
313.535 9.52002 313.551 9.47302 313.578 9.42999 cv
313.602 9.39502 313.648 9.36298 313.719 9.33197 cv
313.785 9.30902 313.871 9.289 313.98 9.27301 cv
314.086 9.26599 314.219 9.258 314.383 9.25403 cv
314.547 9.258 314.684 9.26599 314.793 9.27301 cv
314.898 9.289 314.984 9.30902 315.047 9.33197 cv
315.105 9.36298 315.148 9.39502 315.176 9.42999 cv
315.199 9.47302 315.211 9.52002 315.215 9.56598 cv
315.215 10.367 li
315.598 9.95697 315.98 9.64502 316.363 9.43402 cv
316.742 9.22699 317.145 9.125 317.563 9.12097 cv
317.848 9.125 318.102 9.15198 318.332 9.211 cv
318.559 9.27301 318.766 9.35901 318.945 9.46899 cv
319.125 9.58197 319.277 9.71899 319.406 9.87097 cv
319.535 10.027 319.645 10.199 319.734 10.391 cv
319.941 10.168 320.145 9.97699 320.348 9.81598 cv
320.543 9.65601 320.742 9.52301 320.938 9.422 cv
321.133 9.32001 321.328 9.24597 321.523 9.19501 cv
321.719 9.14801 321.918 9.125 322.121 9.12097 cv
322.582 9.125 322.969 9.203 323.289 9.35498 cv
323.602 9.51599 323.859 9.72699 324.055 9.992 cv
324.25 10.262 324.387 10.574 324.473 10.93 cv
324.551 11.289 324.594 11.668 324.598 12.066 cv
cp
f
332.938 12.84 mo
332.934 13.078 332.883 13.254 332.777 13.367 cv
332.668 13.484 332.52 13.543 332.34 13.539 cv
328.105 13.539 li
328.102 13.84 328.137 14.109 328.211 14.348 cv
328.277 14.59 328.391 14.793 328.547 14.961 cv
328.699 15.133 328.895 15.262 329.137 15.348 cv
329.375 15.437 329.664 15.48 330.008 15.48 cv
330.348 15.48 330.648 15.457 330.91 15.406 cv
331.168 15.359 331.395 15.305 331.586 15.242 cv
331.773 15.184 331.93 15.129 332.059 15.078 cv
332.18 15.031 332.281 15.008 332.363 15.004 cv
332.406 15.008 332.445 15.016 332.48 15.031 cv
332.508 15.051 332.535 15.082 332.555 15.129 cv
332.574 15.176 332.586 15.242 332.598 15.328 cv
332.602 15.414 332.605 15.523 332.609 15.652 cv
332.605 15.77 332.605 15.867 332.602 15.945 cv
332.594 16.027 332.586 16.094 332.578 16.148 cv
332.566 16.207 332.551 16.258 332.531 16.293 cv
332.512 16.336 332.484 16.371 332.453 16.406 cv
332.418 16.445 332.324 16.496 332.176 16.555 cv
332.02 16.621 331.828 16.684 331.598 16.738 cv
331.359 16.801 331.09 16.848 330.793 16.895 cv
330.488 16.934 330.168 16.957 329.828 16.961 cv
329.207 16.957 328.664 16.883 328.203 16.727 cv
327.734 16.574 327.348 16.336 327.039 16.02 cv
326.723 15.703 326.488 15.305 326.34 14.82 cv
326.184 14.34 326.109 13.773 326.113 13.117 cv
326.109 12.504 326.188 11.945 326.352 11.449 cv
326.508 10.953 326.742 10.535 327.055 10.187 cv
327.359 9.84399 327.734 9.578 328.172 9.39502 cv
328.609 9.21503 329.102 9.125 329.656 9.12097 cv
330.234 9.125 330.734 9.211 331.148 9.37903 cv
331.563 9.55499 331.898 9.79303 332.164 10.094 cv
332.426 10.398 332.621 10.758 332.75 11.172 cv
332.871 11.59 332.934 12.039 332.938 12.527 cv
cp
331.035 12.277 mo
331.047 11.727 330.938 11.293 330.703 10.98 cv
330.469 10.668 330.102 10.512 329.609 10.508 cv
329.359 10.512 329.145 10.559 328.961 10.648 cv
328.773 10.746 328.621 10.871 328.5 11.027 cv
328.375 11.187 328.281 11.375 328.219 11.59 cv
328.152 11.805 328.113 12.035 328.105 12.277 cv
cp
f
339.438 14.551 mo
339.434 14.949 339.359 15.297 339.215 15.598 cv
339.066 15.898 338.859 16.152 338.59 16.352 cv
338.316 16.559 337.996 16.707 337.629 16.809 cv
337.262 16.906 336.859 16.957 336.43 16.961 cv
336.164 16.957 335.918 16.937 335.684 16.902 cv
335.449 16.859 335.238 16.812 335.051 16.754 cv
334.863 16.695 334.707 16.633 334.582 16.57 cv
334.457 16.508 334.363 16.449 334.309 16.395 cv
334.25 16.34 334.207 16.258 334.18 16.141 cv
334.145 16.027 334.129 15.852 334.133 15.621 cv
334.129 15.473 334.137 15.352 334.148 15.258 cv
334.156 15.168 334.172 15.098 334.195 15.039 cv
334.215 14.988 334.238 14.949 334.273 14.93 cv
334.301 14.914 334.34 14.906 334.387 14.902 cv
334.441 14.906 334.527 14.937 334.641 15 cv
334.75 15.066 334.887 15.141 335.059 15.215 cv
335.223 15.297 335.418 15.367 335.637 15.434 cv
335.855 15.504 336.105 15.539 336.391 15.535 cv
336.566 15.539 336.723 15.52 336.863 15.48 cv
336.996 15.445 337.117 15.395 337.223 15.324 cv
337.32 15.258 337.395 15.172 337.449 15.066 cv
337.496 14.965 337.523 14.844 337.527 14.707 cv
337.523 14.551 337.477 14.418 337.383 14.309 cv
337.289 14.199 337.16 14.102 337.004 14.016 cv
336.84 13.934 336.66 13.855 336.465 13.781 cv
336.262 13.711 336.059 13.633 335.848 13.539 cv
335.637 13.453 335.43 13.352 335.234 13.234 cv
335.031 13.125 334.852 12.984 334.695 12.816 cv
334.531 12.652 334.406 12.453 334.313 12.215 cv
334.219 11.984 334.172 11.703 334.172 11.371 cv
334.172 11.043 334.234 10.738 334.363 10.457 cv
334.492 10.184 334.68 9.94501 334.926 9.74597 cv
335.168 9.55103 335.465 9.39801 335.816 9.28497 cv
336.164 9.17999 336.559 9.125 337 9.12097 cv
337.215 9.125 337.426 9.14099 337.633 9.16803 cv
337.836 9.203 338.023 9.242 338.191 9.28497 cv
338.355 9.336 338.496 9.38702 338.613 9.43701 cv
338.727 9.49597 338.809 9.54303 338.859 9.578 cv
338.906 9.62097 338.941 9.65997 338.965 9.69501 cv
338.984 9.73798 338.996 9.78497 339.008 9.836 cv
339.016 9.89099 339.027 9.95697 339.035 10.035 cv
339.043 10.121 339.047 10.219 339.047 10.336 cv
339.047 10.477 339.043 10.594 339.035 10.68 cv
339.027 10.773 339.012 10.844 338.996 10.891 cv
338.977 10.945 338.953 10.98 338.926 10.996 cv
338.891 11.02 338.855 11.027 338.816 11.023 cv
338.766 11.027 338.691 11 338.598 10.941 cv
338.496 10.891 338.375 10.832 338.227 10.766 cv
338.078 10.707 337.906 10.648 337.711 10.59 cv
337.516 10.539 337.293 10.512 337.047 10.508 cv
336.867 10.512 336.715 10.531 336.586 10.562 cv
336.453 10.602 336.344 10.652 336.266 10.719 cv
336.18 10.789 336.117 10.867 336.078 10.957 cv
336.031 11.051 336.012 11.148 336.016 11.25 cv
336.012 11.41 336.063 11.547 336.164 11.652 cv
336.262 11.766 336.391 11.859 336.555 11.941 cv
336.715 12.027 336.898 12.105 337.105 12.176 cv
337.309 12.25 337.516 12.332 337.727 12.414 cv
337.934 12.504 338.141 12.602 338.352 12.715 cv
338.555 12.828 338.738 12.969 338.898 13.133 cv
339.059 13.301 339.188 13.5 339.289 13.73 cv
339.383 13.965 339.434 14.238 339.438 14.551 cv
cp
f
351.629 12.969 mo
351.625 13.566 351.547 14.109 351.395 14.594 cv
351.234 15.086 351 15.504 350.684 15.855 cv
350.367 16.207 349.969 16.48 349.492 16.672 cv
349.012 16.863 348.453 16.957 347.816 16.961 cv
347.195 16.957 346.656 16.875 346.203 16.703 cv
345.742 16.535 345.363 16.285 345.066 15.957 cv
344.762 15.633 344.539 15.23 344.395 14.75 cv
344.25 14.273 344.18 13.727 344.18 13.109 cv
344.18 12.52 344.258 11.98 344.414 11.488 cv
344.57 11 344.809 10.578 345.129 10.227 cv
345.445 9.87903 345.84 9.60498 346.316 9.40997 cv
346.789 9.21899 347.348 9.125 347.988 9.12097 cv
348.613 9.125 349.152 9.20697 349.609 9.375 cv
350.066 9.547 350.445 9.797 350.742 10.121 cv
351.039 10.449 351.262 10.852 351.41 11.328 cv
351.555 11.809 351.625 12.355 351.629 12.969 cv
cp
349.609 13.047 mo
349.605 12.711 349.578 12.395 349.527 12.102 cv
349.469 11.816 349.375 11.566 349.25 11.352 cv
349.117 11.141 348.945 10.973 348.734 10.852 cv
348.516 10.734 348.246 10.676 347.918 10.672 cv
347.629 10.676 347.375 10.73 347.156 10.832 cv
346.938 10.941 346.758 11.098 346.617 11.301 cv
346.477 11.508 346.371 11.754 346.301 12.039 cv
346.23 12.332 346.195 12.66 346.195 13.023 cv
346.195 13.371 346.223 13.687 346.281 13.973 cv
346.336 14.266 346.43 14.516 346.559 14.727 cv
346.684 14.941 346.855 15.105 347.078 15.219 cv
347.293 15.34 347.563 15.398 347.887 15.395 cv
348.18 15.398 348.438 15.344 348.66 15.234 cv
348.875 15.129 349.055 14.977 349.195 14.77 cv
349.336 14.57 349.438 14.324 349.508 14.035 cv
349.57 13.75 349.605 13.422 349.609 13.047 cv
cp
f
357.41 6.914 mo
357.406 7.06598 357.402 7.18701 357.395 7.27698 cv
357.383 7.37097 357.367 7.44098 357.348 7.48798 cv
357.324 7.539 357.301 7.57397 357.277 7.59003 cv
357.25 7.60901 357.223 7.617 357.191 7.617 cv
357.152 7.617 357.109 7.60901 357.07 7.59003 cv
357.023 7.57397 356.969 7.55499 356.906 7.53101 cv
356.836 7.51202 356.762 7.492 356.676 7.47302 cv
356.586 7.45697 356.48 7.44897 356.363 7.44501 cv
356.219 7.44897 356.098 7.46899 356 7.51202 cv
355.898 7.55902 355.816 7.62903 355.75 7.72302 cv
355.68 7.82001 355.629 7.94501 355.602 8.09802 cv
355.566 8.25 355.551 8.43701 355.555 8.65997 cv
355.555 9.30103 li
356.824 9.30103 li
356.867 9.30499 356.91 9.31598 356.953 9.34003 cv
356.988 9.367 357.023 9.40997 357.051 9.46899 cv
357.074 9.53101 357.094 9.61298 357.109 9.71503 cv
357.121 9.81598 357.125 9.94501 357.129 10.094 cv
357.125 10.383 357.102 10.586 357.051 10.707 cv
356.996 10.832 356.918 10.895 356.824 10.891 cv
355.555 10.891 li
355.555 16.516 li
355.551 16.57 355.535 16.613 355.508 16.652 cv
355.473 16.691 355.422 16.727 355.352 16.75 cv
355.277 16.777 355.176 16.793 355.047 16.809 cv
354.914 16.82 354.754 16.828 354.57 16.828 cv
354.383 16.828 354.227 16.82 354.102 16.809 cv
353.973 16.793 353.871 16.777 353.797 16.75 cv
353.719 16.727 353.668 16.691 353.641 16.652 cv
353.609 16.613 353.594 16.57 353.598 16.516 cv
353.598 10.891 li
352.727 10.891 li
352.625 10.895 352.551 10.832 352.504 10.707 cv
352.453 10.586 352.426 10.383 352.43 10.094 cv
352.426 9.94501 352.434 9.81598 352.449 9.71503 cv
352.461 9.61298 352.48 9.53101 352.504 9.46899 cv
352.527 9.40997 352.559 9.367 352.598 9.34003 cv
352.637 9.31598 352.68 9.30499 352.734 9.30103 cv
353.598 9.30103 li
353.598 8.71503 li
353.594 8.24597 353.641 7.83197 353.738 7.47302 cv
353.828 7.117 353.977 6.82001 354.18 6.586 cv
354.379 6.35199 354.633 6.17603 354.941 6.05103 cv
355.25 5.93402 355.613 5.87097 356.039 5.87097 cv
356.234 5.87097 356.426 5.89099 356.613 5.922 cv
356.793 5.961 356.938 5.99597 357.043 6.03101 cv
357.145 6.07397 357.215 6.10901 357.254 6.14099 cv
357.289 6.17603 357.32 6.22699 357.344 6.289 cv
357.367 6.35498 357.383 6.43701 357.395 6.539 cv
357.402 6.64099 357.406 6.76599 357.41 6.914 cv
cp
f
367.961 13.758 mo
367.957 14.289 367.859 14.754 367.664 15.152 cv
367.465 15.555 367.199 15.891 366.863 16.156 cv
366.523 16.426 366.125 16.625 365.676 16.758 cv
365.223 16.891 364.742 16.957 364.23 16.961 cv
363.879 16.957 363.555 16.93 363.258 16.875 cv
362.957 16.816 362.695 16.75 362.469 16.668 cv
362.238 16.59 362.047 16.504 361.895 16.414 cv
361.742 16.328 361.633 16.25 361.566 16.18 cv
361.496 16.113 361.445 16.016 361.422 15.891 cv
361.391 15.766 361.379 15.582 361.379 15.34 cv
361.379 15.18 361.383 15.047 361.395 14.934 cv
361.402 14.828 361.418 14.738 361.445 14.668 cv
361.465 14.602 361.496 14.555 361.539 14.523 cv
361.574 14.5 361.621 14.484 361.672 14.48 cv
361.742 14.484 361.844 14.527 361.98 14.609 cv
362.109 14.699 362.281 14.793 362.492 14.895 cv
362.699 15 362.945 15.098 363.234 15.18 cv
363.52 15.27 363.855 15.312 364.238 15.309 cv
364.488 15.312 364.711 15.281 364.906 15.219 cv
365.102 15.16 365.27 15.074 365.41 14.965 cv
365.547 14.855 365.652 14.723 365.727 14.562 cv
365.797 14.402 365.832 14.223 365.836 14.023 cv
365.832 13.797 365.77 13.602 365.648 13.434 cv
365.52 13.273 365.355 13.129 365.16 13 cv
364.957 12.875 364.73 12.754 364.477 12.641 cv
364.223 12.531 363.961 12.414 363.691 12.285 cv
363.418 12.164 363.156 12.02 362.902 11.859 cv
362.648 11.703 362.422 11.516 362.223 11.293 cv
362.02 11.074 361.855 10.812 361.734 10.508 cv
361.609 10.207 361.547 9.84802 361.551 9.42603 cv
361.547 8.94501 361.637 8.52002 361.816 8.15198 cv
361.992 7.789 362.234 7.48401 362.543 7.23798 cv
362.844 7 363.203 6.82001 363.617 6.69897 cv
364.031 6.58197 364.469 6.52301 364.93 6.52002 cv
365.168 6.52301 365.406 6.539 365.648 6.57397 cv
365.887 6.61298 366.109 6.664 366.316 6.72302 cv
366.523 6.78497 366.707 6.85498 366.871 6.92999 cv
367.027 7.01202 367.137 7.07397 367.191 7.125 cv
367.242 7.17999 367.277 7.22699 367.297 7.258 cv
367.313 7.297 367.328 7.34399 367.344 7.40198 cv
367.355 7.46503 367.363 7.539 367.371 7.62903 cv
367.375 7.72302 367.379 7.836 367.379 7.96899 cv
367.379 8.12097 367.375 8.25 367.367 8.35199 cv
367.359 8.45697 367.344 8.54303 367.328 8.60498 cv
367.305 8.67603 367.281 8.72302 367.25 8.75403 cv
367.215 8.78497 367.168 8.80103 367.113 8.80103 cv
367.055 8.80103 366.965 8.76599 366.84 8.69098 cv
366.715 8.62097 366.559 8.54303 366.379 8.453 cv
366.195 8.37097 365.988 8.29303 365.75 8.22302 cv
365.508 8.15601 365.242 8.12097 364.961 8.117 cv
364.734 8.12097 364.543 8.14801 364.379 8.19897 cv
364.211 8.25403 364.07 8.328 363.961 8.422 cv
363.848 8.52002 363.766 8.63702 363.711 8.77002 cv
363.656 8.90997 363.629 9.05103 363.629 9.19897 cv
363.629 9.42603 363.688 9.62097 363.813 9.78101 cv
363.93 9.94501 364.094 10.09 364.305 10.215 cv
364.508 10.344 364.742 10.465 365 10.574 cv
365.258 10.691 365.523 10.809 365.797 10.93 cv
366.066 11.059 366.328 11.199 366.59 11.355 cv
366.848 11.512 367.082 11.703 367.285 11.922 cv
367.488 12.148 367.648 12.406 367.773 12.703 cv
367.895 13 367.957 13.352 367.961 13.758 cv
cp
f
376.008 16.516 mo
376.004 16.57 375.992 16.613 375.969 16.652 cv
375.941 16.691 375.895 16.727 375.832 16.75 cv
375.766 16.777 375.68 16.793 375.574 16.809 cv
375.469 16.82 375.336 16.828 375.176 16.828 cv
375 16.828 374.859 16.82 374.758 16.809 cv
374.648 16.793 374.566 16.777 374.504 16.75 cv
374.441 16.727 374.395 16.691 374.371 16.652 cv
374.34 16.613 374.328 16.57 374.332 16.516 cv
374.332 15.715 li
373.945 16.129 373.555 16.441 373.16 16.648 cv
372.758 16.855 372.348 16.957 371.926 16.961 cv
371.445 16.957 371.043 16.883 370.719 16.727 cv
370.395 16.574 370.133 16.359 369.934 16.09 cv
369.73 15.82 369.586 15.508 369.504 15.148 cv
369.414 14.793 369.371 14.352 369.375 13.82 cv
369.375 9.56598 li
369.371 9.52002 369.387 9.47302 369.418 9.42999 cv
369.445 9.39502 369.496 9.36298 369.574 9.33197 cv
369.648 9.30902 369.75 9.289 369.879 9.27301 cv
370.004 9.26599 370.16 9.258 370.352 9.25403 cv
370.539 9.258 370.699 9.26599 370.824 9.27301 cv
370.949 9.289 371.047 9.30902 371.125 9.33197 cv
371.195 9.36298 371.25 9.39502 371.285 9.42999 cv
371.313 9.47302 371.328 9.52002 371.332 9.56598 cv
371.332 13.492 li
371.328 13.859 371.352 14.137 371.402 14.328 cv
371.445 14.52 371.516 14.684 371.617 14.82 cv
371.711 14.961 371.836 15.066 371.984 15.141 cv
372.133 15.219 372.305 15.258 372.5 15.254 cv
372.75 15.258 373 15.168 373.254 14.98 cv
373.504 14.801 373.773 14.535 374.059 14.187 cv
374.059 9.56598 li
374.059 9.52002 374.07 9.47302 374.102 9.42999 cv
374.125 9.39502 374.18 9.36298 374.258 9.33197 cv
374.332 9.30902 374.43 9.289 374.559 9.27301 cv
374.68 9.26599 374.84 9.258 375.035 9.25403 cv
375.227 9.258 375.383 9.26599 375.508 9.27301 cv
375.629 9.289 375.73 9.30902 375.805 9.33197 cv
375.875 9.36298 375.926 9.39502 375.961 9.42999 cv
375.988 9.47302 376.004 9.52002 376.008 9.56598 cv
cp
f
384.938 12.945 mo
384.938 13.566 384.867 14.125 384.734 14.617 cv
384.594 15.113 384.398 15.531 384.148 15.879 cv
383.891 16.227 383.578 16.496 383.211 16.68 cv
382.836 16.867 382.414 16.957 381.945 16.961 cv
381.707 16.957 381.488 16.934 381.289 16.895 cv
381.082 16.848 380.891 16.781 380.707 16.68 cv
380.523 16.586 380.34 16.461 380.164 16.305 cv
379.98 16.156 379.797 15.973 379.613 15.762 cv
379.613 16.516 li
379.609 16.578 379.598 16.625 379.57 16.66 cv
379.539 16.703 379.492 16.734 379.43 16.758 cv
379.363 16.781 379.273 16.797 379.168 16.812 cv
379.059 16.82 378.93 16.828 378.773 16.828 cv
378.609 16.828 378.473 16.82 378.371 16.812 cv
378.262 16.797 378.176 16.781 378.113 16.758 cv
378.043 16.734 378 16.703 377.977 16.66 cv
377.949 16.625 377.934 16.578 377.938 16.516 cv
377.938 6.27002 li
377.934 6.21899 377.949 6.172 377.984 6.12903 cv
378.012 6.09003 378.066 6.05499 378.145 6.02301 cv
378.219 5.99597 378.32 5.97699 378.445 5.95697 cv
378.57 5.94501 378.727 5.93701 378.922 5.93402 cv
379.109 5.93701 379.27 5.94501 379.395 5.95697 cv
379.52 5.97699 379.617 5.99597 379.695 6.02301 cv
379.766 6.05499 379.82 6.09003 379.855 6.12903 cv
379.883 6.172 379.898 6.21899 379.902 6.27002 cv
379.902 10.109 li
380.078 9.93402 380.254 9.78497 380.434 9.65997 cv
380.605 9.539 380.781 9.43402 380.961 9.35199 cv
381.133 9.27301 381.316 9.21503 381.508 9.17603 cv
381.691 9.14099 381.891 9.125 382.102 9.12097 cv
382.613 9.125 383.047 9.22699 383.41 9.42999 cv
383.766 9.63702 384.059 9.914 384.285 10.262 cv
384.508 10.609 384.672 11.016 384.781 11.48 cv
384.883 11.945 384.938 12.434 384.938 12.945 cv
cp
382.902 13.086 mo
382.898 12.793 382.875 12.508 382.836 12.23 cv
382.789 11.957 382.715 11.715 382.605 11.5 cv
382.496 11.289 382.352 11.117 382.18 10.988 cv
382.004 10.863 381.785 10.801 381.523 10.797 cv
381.391 10.801 381.266 10.816 381.141 10.852 cv
381.016 10.891 380.887 10.953 380.754 11.039 cv
380.621 11.129 380.484 11.246 380.348 11.383 cv
380.203 11.523 380.055 11.695 379.902 11.902 cv
379.902 14.211 li
380.176 14.566 380.438 14.836 380.691 15.016 cv
380.941 15.203 381.207 15.293 381.484 15.293 cv
381.738 15.293 381.953 15.23 382.133 15.098 cv
382.305 14.973 382.453 14.805 382.57 14.594 cv
382.688 14.391 382.77 14.152 382.824 13.883 cv
382.871 13.621 382.898 13.355 382.902 13.086 cv
cp
f
390.035 12.863 mo
390.031 13.164 390.004 13.375 389.949 13.492 cv
389.891 13.617 389.801 13.676 389.676 13.672 cv
386.434 13.672 li
386.305 13.676 386.211 13.613 386.156 13.488 cv
386.094 13.367 386.066 13.16 386.07 12.863 cv
386.066 12.574 386.094 12.367 386.156 12.246 cv
386.211 12.129 386.305 12.07 386.434 12.066 cv
389.676 12.066 li
389.738 12.07 389.789 12.082 389.836 12.105 cv
389.875 12.133 389.914 12.18 389.949 12.238 cv
389.977 12.305 390 12.387 390.016 12.488 cv
390.027 12.594 390.031 12.719 390.035 12.863 cv
cp
f
393.688 16.5 mo
393.684 16.555 393.668 16.602 393.637 16.641 cv
393.602 16.684 393.543 16.719 393.469 16.742 cv
393.387 16.77 393.285 16.789 393.156 16.805 cv
393.023 16.82 392.855 16.828 392.66 16.828 cv
392.457 16.828 392.293 16.82 392.164 16.805 cv
392.027 16.789 391.922 16.77 391.848 16.742 cv
391.766 16.719 391.711 16.684 391.68 16.641 cv
391.645 16.602 391.625 16.555 391.629 16.5 cv
391.629 6.97699 li
391.625 6.92999 391.645 6.883 391.68 6.836 cv
391.711 6.797 391.766 6.76202 391.852 6.73401 cv
391.93 6.711 392.035 6.69098 392.168 6.672 cv
392.293 6.65997 392.457 6.65198 392.66 6.64801 cv
392.855 6.65198 393.023 6.65997 393.156 6.672 cv
393.285 6.69098 393.387 6.711 393.469 6.73401 cv
393.543 6.76202 393.602 6.797 393.637 6.836 cv
393.668 6.883 393.684 6.92999 393.688 6.97699 cv
cp
f
406.766 16.516 mo
406.762 16.57 406.746 16.613 406.719 16.652 cv
406.684 16.691 406.633 16.727 406.563 16.75 cv
406.488 16.777 406.387 16.793 406.266 16.809 cv
406.141 16.82 405.984 16.828 405.793 16.828 cv
405.594 16.828 405.434 16.82 405.309 16.809 cv
405.184 16.793 405.082 16.777 405.008 16.75 cv
404.93 16.727 404.879 16.691 404.852 16.652 cv
404.824 16.613 404.809 16.57 404.813 16.516 cv
404.813 12.395 li
404.809 12.164 404.789 11.949 404.746 11.754 cv
404.699 11.562 404.629 11.398 404.543 11.262 cv
404.449 11.125 404.336 11.02 404.199 10.941 cv
404.059 10.867 403.895 10.828 403.703 10.828 cv
403.469 10.828 403.23 10.922 402.992 11.102 cv
402.754 11.285 402.496 11.547 402.215 11.895 cv
402.215 16.516 li
402.215 16.57 402.199 16.613 402.168 16.652 cv
402.137 16.691 402.082 16.727 402.008 16.75 cv
401.93 16.777 401.828 16.793 401.707 16.809 cv
401.582 16.82 401.43 16.828 401.242 16.828 cv
401.047 16.828 400.887 16.82 400.766 16.809 cv
400.637 16.793 400.535 16.777 400.465 16.75 cv
400.387 16.727 400.336 16.691 400.305 16.652 cv
400.273 16.613 400.258 16.57 400.258 16.516 cv
400.258 12.395 li
400.258 12.164 400.234 11.949 400.191 11.754 cv
400.148 11.562 400.082 11.398 399.996 11.262 cv
399.902 11.125 399.789 11.02 399.652 10.941 cv
399.508 10.867 399.344 10.828 399.16 10.828 cv
398.918 10.828 398.68 10.922 398.441 11.102 cv
398.203 11.285 397.945 11.547 397.672 11.895 cv
397.672 16.516 li
397.668 16.57 397.652 16.613 397.625 16.652 cv
397.59 16.691 397.535 16.727 397.465 16.75 cv
397.387 16.777 397.289 16.793 397.164 16.809 cv
397.039 16.82 396.879 16.828 396.691 16.828 cv
396.496 16.828 396.34 16.82 396.215 16.809 cv
396.09 16.793 395.988 16.777 395.914 16.75 cv
395.836 16.727 395.781 16.691 395.754 16.652 cv
395.719 16.613 395.703 16.57 395.707 16.516 cv
395.707 9.56598 li
395.703 9.52002 395.719 9.47302 395.746 9.42999 cv
395.77 9.39502 395.816 9.36298 395.887 9.33197 cv
395.953 9.30902 396.039 9.289 396.148 9.27301 cv
396.254 9.26599 396.387 9.258 396.551 9.25403 cv
396.715 9.258 396.852 9.26599 396.961 9.27301 cv
397.066 9.289 397.152 9.30902 397.215 9.33197 cv
397.273 9.36298 397.316 9.39502 397.344 9.42999 cv
397.367 9.47302 397.379 9.52002 397.383 9.56598 cv
397.383 10.367 li
397.766 9.95697 398.148 9.64502 398.531 9.43402 cv
398.91 9.22699 399.313 9.125 399.73 9.12097 cv
400.016 9.125 400.27 9.15198 400.5 9.211 cv
400.727 9.27301 400.934 9.35901 401.113 9.46899 cv
401.293 9.58197 401.445 9.71899 401.574 9.87097 cv
401.703 10.027 401.813 10.199 401.902 10.391 cv
402.109 10.168 402.313 9.97699 402.516 9.81598 cv
402.711 9.65601 402.91 9.52301 403.105 9.422 cv
403.301 9.32001 403.496 9.24597 403.691 9.19501 cv
403.887 9.14801 404.086 9.125 404.289 9.12097 cv
404.75 9.125 405.137 9.203 405.457 9.35498 cv
405.77 9.51599 406.027 9.72699 406.223 9.992 cv
406.418 10.262 406.555 10.574 406.641 10.93 cv
406.719 11.289 406.762 11.668 406.766 12.066 cv
cp
f
414.609 16.539 mo
414.605 16.617 414.578 16.672 414.531 16.711 cv
414.477 16.754 414.395 16.781 414.285 16.801 cv
414.168 16.816 414.004 16.828 413.789 16.828 cv
413.551 16.828 413.379 16.816 413.277 16.801 cv
413.168 16.781 413.094 16.754 413.055 16.711 cv
413.008 16.672 412.988 16.617 412.988 16.539 cv
412.988 15.988 li
412.699 16.297 412.371 16.535 412.008 16.703 cv
411.641 16.875 411.234 16.957 410.789 16.961 cv
410.418 16.957 410.078 16.91 409.77 16.816 cv
409.461 16.723 409.195 16.582 408.969 16.387 cv
408.742 16.199 408.566 15.965 408.441 15.684 cv
408.316 15.406 408.254 15.078 408.258 14.699 cv
408.254 14.301 408.332 13.949 408.492 13.645 cv
408.648 13.348 408.887 13.102 409.203 12.906 cv
409.516 12.715 409.906 12.57 410.375 12.473 cv
410.844 12.383 411.387 12.336 412.004 12.332 cv
412.684 12.332 li
412.684 11.91 li
412.684 11.695 412.66 11.504 412.617 11.34 cv
412.57 11.18 412.496 11.043 412.398 10.93 cv
412.293 10.824 412.16 10.742 411.992 10.687 cv
411.82 10.637 411.609 10.613 411.367 10.609 cv
411.035 10.613 410.742 10.648 410.488 10.719 cv
410.227 10.793 410 10.875 409.805 10.961 cv
409.605 11.055 409.441 11.133 409.313 11.203 cv
409.176 11.277 409.066 11.316 408.988 11.312 cv
408.926 11.316 408.875 11.297 408.836 11.258 cv
408.789 11.223 408.754 11.172 408.727 11.102 cv
408.695 11.039 408.672 10.953 408.66 10.852 cv
408.641 10.754 408.633 10.645 408.637 10.523 cv
408.633 10.363 408.648 10.238 408.676 10.141 cv
408.699 10.051 408.746 9.96503 408.824 9.88702 cv
408.895 9.81201 409.023 9.72998 409.207 9.64099 cv
409.387 9.55103 409.598 9.46503 409.844 9.38702 cv
410.086 9.30902 410.355 9.24597 410.645 9.19501 cv
410.934 9.14801 411.23 9.125 411.539 9.12097 cv
412.082 9.125 412.547 9.17603 412.934 9.28101 cv
413.32 9.39099 413.641 9.55499 413.891 9.77301 cv
414.141 9.992 414.32 10.277 414.438 10.625 cv
414.547 10.977 414.605 11.391 414.609 11.863 cv
cp
412.684 13.562 mo
411.934 13.562 li
411.617 13.566 411.348 13.59 411.125 13.633 cv
410.898 13.684 410.715 13.754 410.578 13.844 cv
410.434 13.941 410.332 14.055 410.27 14.184 cv
410.203 14.32 410.168 14.469 410.172 14.637 cv
410.168 14.93 410.262 15.16 410.449 15.324 cv
410.633 15.492 410.891 15.574 411.219 15.574 cv
411.492 15.574 411.742 15.504 411.977 15.363 cv
412.203 15.223 412.441 15.02 412.684 14.746 cv
cp
f
422.832 10.047 mo
422.828 10.301 422.801 10.484 422.746 10.602 cv
422.688 10.723 422.617 10.781 422.539 10.781 cv
421.719 10.781 li
421.832 10.906 421.914 11.051 421.965 11.207 cv
422.012 11.367 422.035 11.531 422.039 11.699 cv
422.035 12.109 421.969 12.469 421.836 12.781 cv
421.699 13.098 421.504 13.363 421.254 13.574 cv
421 13.793 420.699 13.957 420.344 14.066 cv
419.984 14.184 419.586 14.238 419.156 14.234 cv
418.93 14.238 418.719 14.211 418.516 14.152 cv
418.313 14.102 418.156 14.039 418.047 13.961 cv
417.984 14.031 417.926 14.109 417.879 14.203 cv
417.828 14.297 417.805 14.402 417.809 14.512 cv
417.805 14.668 417.871 14.789 418.004 14.883 cv
418.133 14.98 418.32 15.035 418.563 15.043 cv
420.254 15.105 li
420.648 15.121 421 15.18 421.309 15.273 cv
421.617 15.375 421.879 15.508 422.09 15.68 cv
422.301 15.855 422.461 16.066 422.57 16.309 cv
422.68 16.555 422.734 16.828 422.738 17.141 cv
422.734 17.477 422.66 17.801 422.512 18.109 cv
422.363 18.41 422.137 18.672 421.836 18.898 cv
421.531 19.117 421.152 19.297 420.699 19.43 cv
420.242 19.559 419.711 19.621 419.109 19.625 cv
418.512 19.621 418.008 19.574 417.59 19.484 cv
417.172 19.387 416.828 19.258 416.563 19.094 cv
416.293 18.926 416.098 18.727 415.98 18.5 cv
415.855 18.266 415.797 18.012 415.797 17.738 cv
415.797 17.566 415.816 17.406 415.863 17.25 cv
415.902 17.094 415.969 16.941 416.059 16.801 cv
416.141 16.656 416.246 16.523 416.371 16.391 cv
416.496 16.262 416.637 16.137 416.801 16.016 cv
416.574 15.902 416.402 15.742 416.281 15.531 cv
416.16 15.328 416.102 15.102 416.102 14.855 cv
416.102 14.555 416.168 14.277 416.309 14.02 cv
416.445 13.77 416.629 13.539 416.855 13.336 cv
416.672 13.156 416.527 12.941 416.418 12.684 cv
416.309 12.434 416.254 12.113 416.258 11.73 cv
416.254 11.328 416.324 10.969 416.469 10.645 cv
416.609 10.328 416.809 10.059 417.066 9.836 cv
417.32 9.617 417.625 9.44501 417.977 9.328 cv
418.328 9.211 418.719 9.15198 419.148 9.15198 cv
419.367 9.15198 419.574 9.16803 419.773 9.19098 cv
419.973 9.22302 420.16 9.258 420.332 9.30103 cv
422.539 9.30103 li
422.621 9.30499 422.691 9.36298 422.75 9.47302 cv
422.801 9.59003 422.828 9.78101 422.832 10.047 cv
cp
420.316 11.691 mo
420.313 11.32 420.211 11.031 420.004 10.82 cv
419.793 10.617 419.5 10.512 419.125 10.508 cv
418.93 10.512 418.758 10.543 418.617 10.605 cv
418.469 10.672 418.348 10.762 418.254 10.871 cv
418.152 10.984 418.082 11.113 418.039 11.262 cv
417.988 11.41 417.965 11.566 417.969 11.723 cv
417.965 12.082 418.07 12.359 418.281 12.562 cv
418.488 12.77 418.777 12.875 419.148 12.871 cv
419.344 12.875 419.512 12.844 419.66 12.777 cv
419.801 12.719 419.922 12.633 420.023 12.52 cv
420.117 12.414 420.191 12.285 420.242 12.141 cv
420.289 12 420.313 11.852 420.316 11.691 cv
cp
420.777 17.242 mo
420.777 17.004 420.684 16.828 420.496 16.703 cv
420.309 16.582 420.051 16.512 419.723 16.5 cv
418.328 16.461 li
418.191 16.562 418.082 16.656 418.004 16.746 cv
417.922 16.836 417.859 16.922 417.813 17.008 cv
417.762 17.09 417.727 17.172 417.715 17.25 cv
417.695 17.328 417.688 17.406 417.691 17.492 cv
417.688 17.746 417.82 17.945 418.082 18.082 cv
418.344 18.215 418.715 18.281 419.195 18.285 cv
419.488 18.281 419.734 18.25 419.941 18.195 cv
420.141 18.133 420.305 18.055 420.434 17.957 cv
420.555 17.855 420.645 17.746 420.699 17.625 cv
420.75 17.504 420.777 17.375 420.777 17.242 cv
cp
f
430.441 12.84 mo
430.438 13.078 430.387 13.254 430.281 13.367 cv
430.172 13.484 430.023 13.543 429.844 13.539 cv
425.609 13.539 li
425.605 13.84 425.641 14.109 425.715 14.348 cv
425.781 14.59 425.895 14.793 426.051 14.961 cv
426.203 15.133 426.398 15.262 426.641 15.348 cv
426.879 15.437 427.168 15.48 427.512 15.48 cv
427.852 15.48 428.152 15.457 428.414 15.406 cv
428.672 15.359 428.898 15.305 429.09 15.242 cv
429.277 15.184 429.434 15.129 429.563 15.078 cv
429.684 15.031 429.785 15.008 429.867 15.004 cv
429.91 15.008 429.949 15.016 429.984 15.031 cv
430.012 15.051 430.039 15.082 430.059 15.129 cv
430.078 15.176 430.09 15.242 430.102 15.328 cv
430.105 15.414 430.109 15.523 430.113 15.652 cv
430.109 15.77 430.109 15.867 430.105 15.945 cv
430.098 16.027 430.09 16.094 430.082 16.148 cv
430.07 16.207 430.055 16.258 430.035 16.293 cv
430.016 16.336 429.988 16.371 429.957 16.406 cv
429.922 16.445 429.828 16.496 429.68 16.555 cv
429.523 16.621 429.332 16.684 429.102 16.738 cv
428.863 16.801 428.594 16.848 428.297 16.895 cv
427.992 16.934 427.672 16.957 427.332 16.961 cv
426.711 16.957 426.168 16.883 425.707 16.727 cv
425.238 16.574 424.852 16.336 424.543 16.02 cv
424.227 15.703 423.992 15.305 423.844 14.82 cv
423.688 14.34 423.613 13.773 423.617 13.117 cv
423.613 12.504 423.691 11.945 423.855 11.449 cv
424.012 10.953 424.246 10.535 424.559 10.187 cv
424.863 9.84399 425.238 9.578 425.676 9.39502 cv
426.113 9.21503 426.605 9.125 427.16 9.12097 cv
427.738 9.125 428.238 9.211 428.652 9.37903 cv
429.066 9.55499 429.402 9.79303 429.668 10.094 cv
429.93 10.398 430.125 10.758 430.254 11.172 cv
430.375 11.59 430.438 12.039 430.441 12.527 cv
cp
428.539 12.277 mo
428.551 11.727 428.441 11.293 428.207 10.98 cv
427.973 10.668 427.605 10.512 427.113 10.508 cv
426.863 10.512 426.648 10.559 426.465 10.648 cv
426.277 10.746 426.125 10.871 426.004 11.027 cv
425.879 11.187 425.785 11.375 425.723 11.59 cv
425.656 11.805 425.617 12.035 425.609 12.277 cv
cp
f
436.945 14.551 mo
436.941 14.949 436.867 15.297 436.723 15.598 cv
436.574 15.898 436.367 16.152 436.098 16.352 cv
435.824 16.559 435.504 16.707 435.137 16.809 cv
434.77 16.906 434.367 16.957 433.938 16.961 cv
433.672 16.957 433.426 16.937 433.191 16.902 cv
432.957 16.859 432.746 16.812 432.559 16.754 cv
432.371 16.695 432.215 16.633 432.09 16.57 cv
431.965 16.508 431.871 16.449 431.816 16.395 cv
431.758 16.34 431.715 16.258 431.688 16.141 cv
431.652 16.027 431.637 15.852 431.641 15.621 cv
431.637 15.473 431.645 15.352 431.656 15.258 cv
431.664 15.168 431.68 15.098 431.703 15.039 cv
431.723 14.988 431.746 14.949 431.781 14.93 cv
431.809 14.914 431.848 14.906 431.895 14.902 cv
431.949 14.906 432.035 14.937 432.148 15 cv
432.258 15.066 432.395 15.141 432.566 15.215 cv
432.73 15.297 432.926 15.367 433.145 15.434 cv
433.363 15.504 433.613 15.539 433.898 15.535 cv
434.074 15.539 434.23 15.52 434.371 15.48 cv
434.504 15.445 434.625 15.395 434.73 15.324 cv
434.828 15.258 434.902 15.172 434.957 15.066 cv
435.004 14.965 435.031 14.844 435.035 14.707 cv
435.031 14.551 434.984 14.418 434.891 14.309 cv
434.797 14.199 434.668 14.102 434.512 14.016 cv
434.348 13.934 434.168 13.855 433.973 13.781 cv
433.77 13.711 433.566 13.633 433.355 13.539 cv
433.145 13.453 432.938 13.352 432.742 13.234 cv
432.539 13.125 432.359 12.984 432.203 12.816 cv
432.039 12.652 431.914 12.453 431.82 12.215 cv
431.727 11.984 431.68 11.703 431.68 11.371 cv
431.68 11.043 431.742 10.738 431.871 10.457 cv
432 10.184 432.188 9.94501 432.434 9.74597 cv
432.676 9.55103 432.973 9.39801 433.324 9.28497 cv
433.672 9.17999 434.066 9.125 434.508 9.12097 cv
434.723 9.125 434.934 9.14099 435.141 9.16803 cv
435.344 9.203 435.531 9.242 435.699 9.28497 cv
435.863 9.336 436.004 9.38702 436.121 9.43701 cv
436.234 9.49597 436.316 9.54303 436.367 9.578 cv
436.414 9.62097 436.449 9.65997 436.473 9.69501 cv
436.492 9.73798 436.504 9.78497 436.516 9.836 cv
436.523 9.89099 436.535 9.95697 436.543 10.035 cv
436.551 10.121 436.555 10.219 436.555 10.336 cv
436.555 10.477 436.551 10.594 436.543 10.68 cv
436.535 10.773 436.52 10.844 436.504 10.891 cv
436.484 10.945 436.461 10.98 436.434 10.996 cv
436.398 11.02 436.363 11.027 436.324 11.023 cv
436.273 11.027 436.199 11 436.105 10.941 cv
436.004 10.891 435.883 10.832 435.734 10.766 cv
435.586 10.707 435.414 10.648 435.219 10.59 cv
435.023 10.539 434.801 10.512 434.555 10.508 cv
434.375 10.512 434.223 10.531 434.094 10.562 cv
433.961 10.602 433.852 10.652 433.773 10.719 cv
433.688 10.789 433.625 10.867 433.586 10.957 cv
433.539 11.051 433.52 11.148 433.523 11.25 cv
433.52 11.41 433.57 11.547 433.672 11.652 cv
433.77 11.766 433.898 11.859 434.063 11.941 cv
434.223 12.027 434.406 12.105 434.613 12.176 cv
434.816 12.25 435.023 12.332 435.234 12.414 cv
435.441 12.504 435.648 12.602 435.859 12.715 cv
436.063 12.828 436.246 12.969 436.406 13.133 cv
436.566 13.301 436.695 13.5 436.797 13.73 cv
436.891 13.965 436.941 14.238 436.945 14.551 cv
cp
f
445.715 12.863 mo
445.711 13.164 445.684 13.375 445.629 13.492 cv
445.57 13.617 445.48 13.676 445.355 13.672 cv
442.113 13.672 li
441.984 13.676 441.891 13.613 441.836 13.488 cv
441.773 13.367 441.746 13.16 441.75 12.863 cv
441.746 12.574 441.773 12.367 441.836 12.246 cv
441.891 12.129 441.984 12.07 442.113 12.066 cv
445.355 12.066 li
445.418 12.07 445.469 12.082 445.516 12.105 cv
445.555 12.133 445.594 12.18 445.629 12.238 cv
445.656 12.305 445.68 12.387 445.695 12.488 cv
445.707 12.594 445.711 12.719 445.715 12.863 cv
cp
f
457.57 13.883 mo
457.566 14.152 457.539 14.355 457.488 14.488 cv
457.43 14.629 457.355 14.695 457.266 14.691 cv
456.371 14.691 li
456.371 16.516 li
456.371 16.57 456.355 16.613 456.324 16.652 cv
456.293 16.691 456.238 16.727 456.16 16.75 cv
456.082 16.777 455.98 16.793 455.855 16.809 cv
455.73 16.82 455.566 16.828 455.371 16.828 cv
455.184 16.828 455.027 16.82 454.902 16.809 cv
454.77 16.793 454.668 16.777 454.598 16.75 cv
454.52 16.727 454.469 16.691 454.441 16.652 cv
454.41 16.613 454.395 16.57 454.398 16.516 cv
454.398 14.691 li
450.543 14.691 li
450.465 14.695 450.402 14.687 450.348 14.664 cv
450.289 14.648 450.238 14.605 450.203 14.543 cv
450.16 14.48 450.133 14.387 450.117 14.262 cv
450.098 14.141 450.09 13.98 450.09 13.773 cv
450.09 13.609 450.094 13.465 450.102 13.34 cv
450.109 13.223 450.121 13.113 450.141 13.012 cv
450.156 12.918 450.184 12.824 450.219 12.73 cv
450.25 12.645 450.293 12.551 450.348 12.449 cv
453.48 6.922 li
453.504 6.87903 453.547 6.84003 453.613 6.80103 cv
453.672 6.77002 453.758 6.73798 453.871 6.71503 cv
453.98 6.69098 454.125 6.67603 454.297 6.664 cv
454.469 6.65601 454.676 6.65198 454.922 6.64801 cv
455.184 6.65198 455.41 6.65601 455.598 6.66803 cv
455.785 6.68402 455.934 6.70697 456.047 6.72998 cv
456.156 6.76202 456.238 6.797 456.293 6.836 cv
456.344 6.883 456.371 6.92999 456.371 6.98401 cv
456.371 13.055 li
457.266 13.055 li
457.348 13.055 457.418 13.121 457.48 13.246 cv
457.535 13.379 457.566 13.59 457.57 13.883 cv
cp
454.398 8.41803 mo
454.383 8.41803 li
451.727 13.055 li
454.398 13.055 li
cp
f
469.363 7.539 mo
469.359 7.69501 469.352 7.82397 469.344 7.92603 cv
469.328 8.03497 469.309 8.12097 469.285 8.18402 cv
469.254 8.25 469.223 8.297 469.188 8.32397 cv
469.145 8.35901 469.102 8.375 469.059 8.37097 cv
466.535 8.37097 li
466.535 16.5 li
466.535 16.555 466.516 16.602 466.484 16.641 cv
466.445 16.684 466.391 16.719 466.316 16.742 cv
466.234 16.77 466.129 16.789 466 16.805 cv
465.863 16.82 465.699 16.828 465.504 16.828 cv
465.309 16.828 465.145 16.82 465.012 16.805 cv
464.879 16.789 464.773 16.77 464.695 16.742 cv
464.617 16.719 464.559 16.684 464.527 16.641 cv
464.488 16.602 464.473 16.555 464.477 16.5 cv
464.477 8.37097 li
461.953 8.37097 li
461.898 8.375 461.852 8.35901 461.82 8.32397 cv
461.781 8.297 461.75 8.25 461.727 8.18402 cv
461.695 8.12097 461.676 8.03497 461.668 7.92603 cv
461.652 7.82397 461.648 7.69501 461.648 7.539 cv
461.648 7.38702 461.652 7.25403 461.668 7.14099 cv
461.676 7.03497 461.695 6.94501 461.727 6.87903 cv
461.75 6.81598 461.781 6.77002 461.82 6.73798 cv
461.852 6.711 461.898 6.69897 461.953 6.69501 cv
469.059 6.69501 li
469.102 6.69897 469.145 6.711 469.188 6.73798 cv
469.223 6.77002 469.254 6.81598 469.285 6.87903 cv
469.309 6.94501 469.328 7.03497 469.344 7.14099 cv
469.352 7.25403 469.359 7.38702 469.363 7.539 cv
cp
f
477.078 16.516 mo
477.074 16.57 477.059 16.613 477.031 16.652 cv
476.996 16.691 476.945 16.727 476.875 16.75 cv
476.801 16.777 476.699 16.793 476.574 16.809 cv
476.445 16.82 476.289 16.828 476.105 16.828 cv
475.91 16.828 475.75 16.82 475.625 16.809 cv
475.496 16.793 475.395 16.777 475.324 16.75 cv
475.246 16.727 475.195 16.691 475.168 16.652 cv
475.133 16.613 475.117 16.57 475.121 16.516 cv
475.121 12.551 li
475.117 12.215 475.094 11.949 475.047 11.754 cv
474.996 11.562 474.922 11.398 474.832 11.262 cv
474.738 11.125 474.621 11.02 474.473 10.941 cv
474.324 10.867 474.148 10.828 473.953 10.828 cv
473.699 10.828 473.449 10.922 473.195 11.102 cv
472.941 11.285 472.676 11.547 472.402 11.895 cv
472.402 16.516 li
472.398 16.57 472.383 16.613 472.355 16.652 cv
472.32 16.691 472.266 16.727 472.195 16.75 cv
472.117 16.777 472.02 16.793 471.895 16.809 cv
471.77 16.82 471.609 16.828 471.422 16.828 cv
471.227 16.828 471.07 16.82 470.945 16.809 cv
470.82 16.793 470.719 16.777 470.645 16.75 cv
470.566 16.727 470.512 16.691 470.484 16.652 cv
470.449 16.613 470.434 16.57 470.438 16.516 cv
470.438 6.27002 li
470.434 6.21899 470.449 6.172 470.484 6.12903 cv
470.512 6.09003 470.566 6.05499 470.645 6.02301 cv
470.719 5.99597 470.82 5.97699 470.945 5.95697 cv
471.07 5.94501 471.227 5.93701 471.422 5.93402 cv
471.609 5.93701 471.77 5.94501 471.895 5.95697 cv
472.02 5.97699 472.117 5.99597 472.195 6.02301 cv
472.266 6.05499 472.32 6.09003 472.355 6.12903 cv
472.383 6.172 472.398 6.21899 472.402 6.27002 cv
472.402 10.109 li
472.738 9.78101 473.082 9.53497 473.434 9.367 cv
473.781 9.20697 474.148 9.125 474.531 9.12097 cv
475 9.125 475.398 9.203 475.727 9.35498 cv
476.051 9.51599 476.313 9.72699 476.512 9.99597 cv
476.711 10.266 476.855 10.582 476.945 10.941 cv
477.031 11.305 477.074 11.742 477.078 12.254 cv
cp
f
483.477 10.211 mo
483.477 10.402 483.469 10.555 483.461 10.672 cv
483.445 10.793 483.43 10.887 483.414 10.953 cv
483.391 11.023 483.363 11.07 483.332 11.094 cv
483.293 11.121 483.25 11.133 483.203 11.133 cv
483.156 11.133 483.109 11.125 483.063 11.105 cv
483.008 11.09 482.949 11.07 482.887 11.047 cv
482.816 11.027 482.746 11.008 482.672 10.988 cv
482.59 10.973 482.504 10.965 482.414 10.961 cv
482.301 10.965 482.191 10.984 482.086 11.027 cv
481.977 11.074 481.863 11.145 481.75 11.234 cv
481.629 11.328 481.508 11.453 481.383 11.605 cv
481.254 11.766 481.117 11.957 480.973 12.184 cv
480.973 16.516 li
480.969 16.57 480.953 16.613 480.926 16.652 cv
480.891 16.691 480.836 16.727 480.766 16.75 cv
480.688 16.777 480.59 16.793 480.465 16.809 cv
480.34 16.82 480.18 16.828 479.992 16.828 cv
479.797 16.828 479.641 16.82 479.516 16.809 cv
479.391 16.793 479.289 16.777 479.215 16.75 cv
479.137 16.727 479.082 16.691 479.055 16.652 cv
479.02 16.613 479.004 16.57 479.008 16.516 cv
479.008 9.56598 li
479.004 9.52002 479.02 9.47302 479.047 9.42999 cv
479.07 9.39502 479.117 9.36298 479.188 9.33197 cv
479.254 9.30902 479.34 9.289 479.449 9.27301 cv
479.555 9.26599 479.688 9.258 479.852 9.25403 cv
480.016 9.258 480.152 9.26599 480.262 9.27301 cv
480.367 9.289 480.453 9.30902 480.516 9.33197 cv
480.574 9.36298 480.617 9.39502 480.645 9.42999 cv
480.668 9.47302 480.68 9.52002 480.684 9.56598 cv
480.684 10.43 li
480.863 10.172 481.035 9.961 481.199 9.789 cv
481.355 9.625 481.512 9.48798 481.66 9.38702 cv
481.805 9.289 481.949 9.22302 482.094 9.17999 cv
482.238 9.14502 482.383 9.125 482.531 9.12097 cv
482.598 9.125 482.672 9.12903 482.75 9.133 cv
482.828 9.14502 482.906 9.15601 482.992 9.172 cv
483.07 9.19098 483.145 9.211 483.211 9.23401 cv
483.27 9.258 483.316 9.28497 483.348 9.30902 cv
483.375 9.34003 483.395 9.367 483.41 9.39502 cv
483.422 9.42999 483.434 9.47302 483.445 9.52301 cv
483.453 9.58197 483.461 9.664 483.469 9.77002 cv
483.473 9.87903 483.477 10.027 483.477 10.211 cv
cp
f
490.918 12.84 mo
490.914 13.078 490.863 13.254 490.758 13.367 cv
490.648 13.484 490.5 13.543 490.32 13.539 cv
486.086 13.539 li
486.082 13.84 486.117 14.109 486.191 14.348 cv
486.258 14.59 486.371 14.793 486.527 14.961 cv
486.68 15.133 486.875 15.262 487.117 15.348 cv
487.355 15.437 487.645 15.48 487.988 15.48 cv
488.328 15.48 488.629 15.457 488.891 15.406 cv
489.148 15.359 489.375 15.305 489.566 15.242 cv
489.754 15.184 489.91 15.129 490.039 15.078 cv
490.16 15.031 490.262 15.008 490.344 15.004 cv
490.387 15.008 490.426 15.016 490.461 15.031 cv
490.488 15.051 490.516 15.082 490.535 15.129 cv
490.555 15.176 490.566 15.242 490.578 15.328 cv
490.582 15.414 490.586 15.523 490.59 15.652 cv
490.586 15.77 490.586 15.867 490.582 15.945 cv
490.574 16.027 490.566 16.094 490.559 16.148 cv
490.547 16.207 490.531 16.258 490.512 16.293 cv
490.492 16.336 490.465 16.371 490.434 16.406 cv
490.398 16.445 490.305 16.496 490.156 16.555 cv
490 16.621 489.809 16.684 489.578 16.738 cv
489.34 16.801 489.07 16.848 488.773 16.895 cv
488.469 16.934 488.148 16.957 487.809 16.961 cv
487.188 16.957 486.645 16.883 486.184 16.727 cv
485.715 16.574 485.328 16.336 485.02 16.02 cv
484.703 15.703 484.469 15.305 484.32 14.82 cv
484.164 14.34 484.09 13.773 484.094 13.117 cv
484.09 12.504 484.168 11.945 484.332 11.449 cv
484.488 10.953 484.723 10.535 485.035 10.187 cv
485.34 9.84399 485.715 9.578 486.152 9.39502 cv
486.59 9.21503 487.082 9.125 487.637 9.12097 cv
488.215 9.125 488.715 9.211 489.129 9.37903 cv
489.543 9.55499 489.879 9.79303 490.145 10.094 cv
490.406 10.398 490.602 10.758 490.73 11.172 cv
490.852 11.59 490.914 12.039 490.918 12.527 cv
cp
489.016 12.277 mo
489.027 11.727 488.918 11.293 488.684 10.98 cv
488.449 10.668 488.082 10.512 487.59 10.508 cv
487.34 10.512 487.125 10.559 486.941 10.648 cv
486.754 10.746 486.602 10.871 486.48 11.027 cv
486.355 11.187 486.262 11.375 486.199 11.59 cv
486.133 11.805 486.094 12.035 486.086 12.277 cv
cp
f
498.453 16.539 mo
498.449 16.617 498.422 16.672 498.375 16.711 cv
498.32 16.754 498.238 16.781 498.129 16.801 cv
498.012 16.816 497.848 16.828 497.633 16.828 cv
497.395 16.828 497.223 16.816 497.121 16.801 cv
497.012 16.781 496.938 16.754 496.898 16.711 cv
496.852 16.672 496.832 16.617 496.832 16.539 cv
496.832 15.988 li
496.543 16.297 496.215 16.535 495.852 16.703 cv
495.484 16.875 495.078 16.957 494.633 16.961 cv
494.262 16.957 493.922 16.91 493.613 16.816 cv
493.305 16.723 493.039 16.582 492.813 16.387 cv
492.586 16.199 492.41 15.965 492.285 15.684 cv
492.16 15.406 492.098 15.078 492.102 14.699 cv
492.098 14.301 492.176 13.949 492.336 13.645 cv
492.492 13.348 492.73 13.102 493.047 12.906 cv
493.359 12.715 493.75 12.57 494.219 12.473 cv
494.688 12.383 495.23 12.336 495.848 12.332 cv
496.527 12.332 li
496.527 11.91 li
496.527 11.695 496.504 11.504 496.461 11.34 cv
496.414 11.18 496.34 11.043 496.242 10.93 cv
496.137 10.824 496.004 10.742 495.836 10.687 cv
495.664 10.637 495.453 10.613 495.211 10.609 cv
494.879 10.613 494.586 10.648 494.332 10.719 cv
494.07 10.793 493.844 10.875 493.648 10.961 cv
493.449 11.055 493.285 11.133 493.156 11.203 cv
493.02 11.277 492.91 11.316 492.832 11.312 cv
492.77 11.316 492.719 11.297 492.68 11.258 cv
492.633 11.223 492.598 11.172 492.57 11.102 cv
492.539 11.039 492.516 10.953 492.504 10.852 cv
492.484 10.754 492.477 10.645 492.48 10.523 cv
492.477 10.363 492.492 10.238 492.52 10.141 cv
492.543 10.051 492.59 9.96503 492.668 9.88702 cv
492.738 9.81201 492.867 9.72998 493.051 9.64099 cv
493.23 9.55103 493.441 9.46503 493.688 9.38702 cv
493.93 9.30902 494.199 9.24597 494.488 9.19501 cv
494.777 9.14801 495.074 9.125 495.383 9.12097 cv
495.926 9.125 496.391 9.17603 496.777 9.28101 cv
497.164 9.39099 497.484 9.55499 497.734 9.77301 cv
497.984 9.992 498.164 10.277 498.281 10.625 cv
498.391 10.977 498.449 11.391 498.453 11.863 cv
cp
496.527 13.562 mo
495.777 13.562 li
495.461 13.566 495.191 13.59 494.969 13.633 cv
494.742 13.684 494.559 13.754 494.422 13.844 cv
494.277 13.941 494.176 14.055 494.113 14.184 cv
494.047 14.32 494.012 14.469 494.016 14.637 cv
494.012 14.93 494.105 15.16 494.293 15.324 cv
494.477 15.492 494.734 15.574 495.063 15.574 cv
495.336 15.574 495.586 15.504 495.82 15.363 cv
496.047 15.223 496.285 15.02 496.527 14.746 cv
cp
f
507.035 16.516 mo
507.031 16.578 507.02 16.625 506.996 16.66 cv
506.969 16.703 506.922 16.734 506.863 16.758 cv
506.797 16.781 506.715 16.797 506.609 16.812 cv
506.504 16.82 506.371 16.828 506.219 16.828 cv
506.047 16.828 505.914 16.82 505.813 16.812 cv
505.707 16.797 505.621 16.781 505.559 16.758 cv
505.492 16.734 505.445 16.703 505.418 16.66 cv
505.387 16.625 505.371 16.578 505.375 16.516 cv
505.375 15.746 li
505.016 16.133 504.641 16.43 504.25 16.641 cv
503.852 16.852 503.418 16.957 502.945 16.961 cv
502.41 16.957 501.961 16.855 501.598 16.652 cv
501.23 16.449 500.934 16.176 500.703 15.824 cv
500.469 15.48 500.301 15.074 500.199 14.605 cv
500.098 14.145 500.047 13.652 500.047 13.133 cv
500.047 12.52 500.109 11.965 500.242 11.469 cv
500.371 10.977 500.566 10.555 500.824 10.207 cv
501.078 9.85901 501.395 9.59399 501.773 9.40198 cv
502.152 9.21899 502.59 9.125 503.086 9.12097 cv
503.473 9.125 503.824 9.203 504.145 9.35901 cv
504.457 9.52002 504.773 9.75 505.086 10.055 cv
505.086 6.29303 li
505.086 6.242 505.098 6.19501 505.129 6.15198 cv
505.152 6.11298 505.207 6.078 505.285 6.047 cv
505.359 6.02002 505.457 6 505.586 5.97998 cv
505.707 5.96899 505.867 5.961 506.063 5.95697 cv
506.254 5.961 506.41 5.96899 506.535 5.97998 cv
506.656 6 506.758 6.02002 506.832 6.047 cv
506.902 6.078 506.953 6.11298 506.988 6.15198 cv
507.016 6.19501 507.031 6.242 507.035 6.29303 cv
cp
505.086 11.871 mo
504.805 11.52 504.535 11.25 504.281 11.062 cv
504.02 10.875 503.75 10.781 503.473 10.781 cv
503.219 10.781 503 10.848 502.816 10.973 cv
502.629 11.105 502.48 11.273 502.371 11.484 cv
502.258 11.695 502.176 11.934 502.121 12.195 cv
502.066 12.461 502.039 12.73 502.039 13 cv
502.039 13.297 502.063 13.578 502.109 13.852 cv
502.156 14.129 502.23 14.375 502.34 14.59 cv
502.441 14.805 502.586 14.977 502.766 15.105 cv
502.941 15.238 503.164 15.305 503.434 15.301 cv
503.566 15.305 503.695 15.285 503.828 15.242 cv
503.953 15.207 504.086 15.145 504.219 15.051 cv
504.352 14.965 504.488 14.848 504.629 14.703 cv
504.77 14.562 504.922 14.387 505.086 14.18 cv
cp
f
513.859 14.551 mo
513.855 14.949 513.781 15.297 513.637 15.598 cv
513.488 15.898 513.281 16.152 513.012 16.352 cv
512.738 16.559 512.418 16.707 512.051 16.809 cv
511.684 16.906 511.281 16.957 510.852 16.961 cv
510.586 16.957 510.34 16.937 510.105 16.902 cv
509.871 16.859 509.66 16.812 509.473 16.754 cv
509.285 16.695 509.129 16.633 509.004 16.57 cv
508.879 16.508 508.785 16.449 508.73 16.395 cv
508.672 16.34 508.629 16.258 508.602 16.141 cv
508.566 16.027 508.551 15.852 508.555 15.621 cv
508.551 15.473 508.559 15.352 508.57 15.258 cv
508.578 15.168 508.594 15.098 508.617 15.039 cv
508.637 14.988 508.66 14.949 508.695 14.93 cv
508.723 14.914 508.762 14.906 508.809 14.902 cv
508.863 14.906 508.949 14.937 509.063 15 cv
509.172 15.066 509.309 15.141 509.48 15.215 cv
509.645 15.297 509.84 15.367 510.059 15.434 cv
510.277 15.504 510.527 15.539 510.813 15.535 cv
510.988 15.539 511.145 15.52 511.285 15.48 cv
511.418 15.445 511.539 15.395 511.645 15.324 cv
511.742 15.258 511.816 15.172 511.871 15.066 cv
511.918 14.965 511.945 14.844 511.949 14.707 cv
511.945 14.551 511.898 14.418 511.805 14.309 cv
511.711 14.199 511.582 14.102 511.426 14.016 cv
511.262 13.934 511.082 13.855 510.887 13.781 cv
510.684 13.711 510.48 13.633 510.27 13.539 cv
510.059 13.453 509.852 13.352 509.656 13.234 cv
509.453 13.125 509.273 12.984 509.117 12.816 cv
508.953 12.652 508.828 12.453 508.734 12.215 cv
508.641 11.984 508.594 11.703 508.594 11.371 cv
508.594 11.043 508.656 10.738 508.785 10.457 cv
508.914 10.184 509.102 9.94501 509.348 9.74597 cv
509.59 9.55103 509.887 9.39801 510.238 9.28497 cv
510.586 9.17999 510.98 9.125 511.422 9.12097 cv
511.637 9.125 511.848 9.14099 512.055 9.16803 cv
512.258 9.203 512.445 9.242 512.613 9.28497 cv
512.777 9.336 512.918 9.38702 513.035 9.43701 cv
513.148 9.49597 513.23 9.54303 513.281 9.578 cv
513.328 9.62097 513.363 9.65997 513.387 9.69501 cv
513.406 9.73798 513.418 9.78497 513.43 9.836 cv
513.438 9.89099 513.449 9.95697 513.457 10.035 cv
513.465 10.121 513.469 10.219 513.469 10.336 cv
513.469 10.477 513.465 10.594 513.457 10.68 cv
513.449 10.773 513.434 10.844 513.418 10.891 cv
513.398 10.945 513.375 10.98 513.348 10.996 cv
513.313 11.02 513.277 11.027 513.238 11.023 cv
513.188 11.027 513.113 11 513.02 10.941 cv
512.918 10.891 512.797 10.832 512.648 10.766 cv
512.5 10.707 512.328 10.648 512.133 10.59 cv
511.938 10.539 511.715 10.512 511.469 10.508 cv
511.289 10.512 511.137 10.531 511.008 10.562 cv
510.875 10.602 510.766 10.652 510.688 10.719 cv
510.602 10.789 510.539 10.867 510.5 10.957 cv
510.453 11.051 510.434 11.148 510.438 11.25 cv
510.434 11.41 510.484 11.547 510.586 11.652 cv
510.684 11.766 510.813 11.859 510.977 11.941 cv
511.137 12.027 511.32 12.105 511.527 12.176 cv
511.73 12.25 511.938 12.332 512.148 12.414 cv
512.355 12.504 512.563 12.602 512.773 12.715 cv
512.977 12.828 513.16 12.969 513.32 13.133 cv
513.48 13.301 513.609 13.5 513.711 13.73 cv
513.805 13.965 513.855 14.238 513.859 14.551 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
