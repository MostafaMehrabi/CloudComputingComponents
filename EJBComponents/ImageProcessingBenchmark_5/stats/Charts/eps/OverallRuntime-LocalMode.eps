%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntime-LocalMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:41:47 p.m.
%%BoundingBox: 0 0 680 540
%%HiResBoundingBox: 0 0 679.2001 539.4001
%%CropBox: 0 0 679.2001 539.4001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -539.4 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 539.4 li
679.2 539.4 li
679.2 0 li
cp
clp
gsave
0 539.4 mo
680 539.4 li
680 -.599976 li
0 -.599976 li
cp
clp
0 0 mo
679.199 0 li
679.199 539.398 li
0 539.398 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
69.121 468.84 mo
662.52 468.84 li
69.121 422.641 mo
662.52 422.641 li
69.121 376.559 mo
662.52 376.559 li
69.121 330.359 mo
662.52 330.359 li
69.121 284.281 mo
662.52 284.281 li
69.121 238.199 mo
662.52 238.199 li
69.121 192 mo
662.52 192 li
69.121 145.922 mo
662.52 145.922 li
69.121 99.719 mo
662.52 99.719 li
69.121 53.641 mo
662.52 53.641 li
.135805 .104005 .108583 0 cmyk
@
69.121 445.68 mo
662.52 445.68 li
69.121 399.602 mo
662.52 399.602 li
69.121 353.52 mo
662.52 353.52 li
69.121 307.32 mo
662.52 307.32 li
69.121 261.238 mo
662.52 261.238 li
69.121 215.039 mo
662.52 215.039 li
69.121 168.961 mo
662.52 168.961 li
69.121 122.879 mo
662.52 122.879 li
69.121 76.68 mo
662.52 76.68 li
69.121 30.602 mo
662.52 30.602 li
.326574 .281529 .277562 0 cmyk
@
106.199 30.602 mo
106.199 491.879 li
180.359 30.602 mo
180.359 491.879 li
254.52 30.602 mo
254.52 491.879 li
328.68 30.602 mo
328.68 491.879 li
402.961 30.602 mo
402.961 491.879 li
477.121 30.602 mo
477.121 491.879 li
551.281 30.602 mo
551.281 491.879 li
625.441 30.602 mo
625.441 491.879 li
.175235 .144778 .143648 0 cmyk
@
69.121 30.602 mo
69.121 491.879 li
143.281 30.602 mo
143.281 491.879 li
217.441 30.602 mo
217.441 491.879 li
291.602 30.602 mo
291.602 491.879 li
365.762 30.602 mo
365.762 491.879 li
440.039 30.602 mo
440.039 491.879 li
514.199 30.602 mo
514.199 491.879 li
588.359 30.602 mo
588.359 491.879 li
662.52 30.602 mo
662.52 491.879 li
.326574 .281529 .277562 0 cmyk
@
35.281 482.52 mo
56.16 482.52 li
56.16 499.559 li
35.281 499.559 li
cp
0 0 0 0 cmyk
ef
35.281 436.441 mo
56.16 436.441 li
56.16 453.48 li
35.281 453.48 li
cp
ef
35.281 390.238 mo
56.16 390.238 li
56.16 407.398 li
35.281 407.398 li
cp
ef
35.281 344.16 mo
56.16 344.16 li
56.16 361.199 li
35.281 361.199 li
cp
ef
28.078 297.961 mo
56.16 297.961 li
56.16 315.121 li
28.078 315.121 li
cp
ef
28.078 251.879 mo
56.16 251.879 li
56.16 268.922 li
28.078 268.922 li
cp
ef
28.078 205.801 mo
56.16 205.801 li
56.16 222.84 li
28.078 222.84 li
cp
ef
28.078 159.602 mo
56.16 159.602 li
56.16 176.762 li
28.078 176.762 li
cp
ef
28.078 113.52 mo
56.16 113.52 li
56.16 130.559 li
28.078 130.559 li
cp
ef
28.078 67.32 mo
56.16 67.32 li
56.16 84.48 li
28.078 84.48 li
cp
ef
28.078 21.238 mo
56.16 21.238 li
56.16 38.398 li
28.078 38.398 li
cp
ef
.96 lw
69.121 491.879 mo
662.52 491.879 li
.369879 .299321 .304356 .000976577 cmyk
@
69.121 491.879 mo
69.121 496.32 li
143.281 491.879 mo
143.281 496.32 li
217.441 491.879 mo
217.441 496.32 li
291.602 491.879 mo
291.602 496.32 li
365.762 491.879 mo
365.762 496.32 li
440.039 491.879 mo
440.039 496.32 li
514.199 491.879 mo
514.199 496.32 li
588.359 491.879 mo
588.359 496.32 li
662.52 491.879 mo
662.52 496.32 li
@
gsave
69 30.48 mo
663.238 30.48 li
663.238 492.48 li
69 492.48 li
cp
clp
1 lc
69.121 113.398 mo
143.281 45.359 li
217.441 30.602 li
291.602 114 li
365.762 104.16 li
440.039 103.441 li
514.199 103.801 li
588.359 102.84 li
662.52 102.84 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
74.012 118.41 mo
63.93 108.328 li
63.93 118.41 mo
74.012 108.328 li
.62829 .284672 0 0 cmyk
@
148.289 50.25 mo
138.211 40.172 li
138.211 50.25 mo
148.289 40.172 li
@
222.449 35.488 mo
212.371 25.41 li
212.371 35.488 mo
222.449 25.41 li
@
296.609 118.891 mo
286.531 108.809 li
286.531 118.891 mo
296.609 108.809 li
@
370.77 109.172 mo
360.691 99.09 li
360.691 109.172 mo
370.77 99.09 li
@
444.93 108.449 mo
434.852 98.371 li
434.852 108.449 mo
444.93 98.371 li
@
519.09 108.809 mo
509.012 98.73 li
509.012 108.809 mo
519.09 98.73 li
@
593.25 107.852 mo
583.172 97.77 li
583.172 107.852 mo
593.25 97.77 li
@
667.531 107.852 mo
657.449 97.77 li
657.449 107.852 mo
667.531 97.77 li
@
gsave
69 30.48 mo
663.238 30.48 li
663.238 492.48 li
69 492.48 li
cp
clp
.96 lw
1 lc
69.121 255.121 mo
143.281 269.281 li
217.441 266.52 li
291.602 334.441 li
365.762 296.281 li
440.039 296.039 li
514.199 295.68 li
588.359 296.039 li
662.52 295.68 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
74.012 260.012 mo
63.93 249.93 li
63.93 260.012 mo
74.012 249.93 li
.0321965 .622736 .922606 .000579843 cmyk
@
148.289 274.289 mo
138.211 264.211 li
138.211 274.289 mo
148.289 264.211 li
@
222.449 271.531 mo
212.371 261.449 li
212.371 271.531 mo
222.449 261.449 li
@
296.609 339.449 mo
286.531 329.371 li
286.531 339.449 mo
296.609 329.371 li
@
370.77 301.172 mo
360.691 291.09 li
360.691 301.172 mo
370.77 291.09 li
@
444.93 301.051 mo
434.852 290.969 li
434.852 301.051 mo
444.93 290.969 li
@
519.09 300.691 mo
509.012 290.609 li
509.012 300.691 mo
519.09 290.609 li
@
593.25 301.051 mo
583.172 290.969 li
583.172 301.051 mo
593.25 290.969 li
@
667.531 300.691 mo
657.449 290.609 li
657.449 300.691 mo
667.531 290.609 li
@
gsave
69 30.48 mo
663.238 30.48 li
663.238 492.48 li
69 492.48 li
cp
clp
.96 lw
1 lc
69.121 290.762 mo
143.281 308.039 li
217.441 344.281 li
291.602 384.238 li
365.762 327.48 li
440.039 325.559 li
514.199 334.801 li
588.359 329.281 li
662.52 332.281 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
74.012 295.648 mo
63.93 285.57 li
63.93 295.648 mo
74.012 285.57 li
.621118 .109194 .980743 .0040589 cmyk
@
148.289 313.051 mo
138.211 302.969 li
138.211 313.051 mo
148.289 302.969 li
@
222.449 349.172 mo
212.371 339.09 li
212.371 349.172 mo
222.449 339.09 li
@
296.609 389.25 mo
286.531 379.172 li
286.531 389.25 mo
296.609 379.172 li
@
370.77 332.371 mo
360.691 322.289 li
360.691 332.371 mo
370.77 322.289 li
@
444.93 330.57 mo
434.852 320.488 li
434.852 330.57 mo
444.93 320.488 li
@
519.09 339.809 mo
509.012 329.73 li
509.012 339.809 mo
519.09 329.73 li
@
593.25 334.289 mo
583.172 324.211 li
583.172 334.289 mo
593.25 324.211 li
@
667.531 337.172 mo
657.449 327.09 li
657.449 337.172 mo
667.531 327.09 li
@
gsave
69 30.48 mo
663.238 30.48 li
663.238 492.48 li
69 492.48 li
cp
clp
.96 lw
1 lc
69.121 290.52 mo
143.281 356.281 li
217.441 400.32 li
291.602 367.68 li
365.762 371.879 li
440.039 362.52 li
514.199 370.801 li
588.359 365.398 li
662.52 369.121 li
0 .993988 1 0 cmyk
@
grestore
74.012 295.531 mo
63.93 285.449 li
63.93 295.531 mo
74.012 285.449 li
0 .993988 1 0 cmyk
@
148.289 361.172 mo
138.211 351.09 li
138.211 361.172 mo
148.289 351.09 li
@
222.449 405.328 mo
212.371 395.25 li
212.371 405.328 mo
222.449 395.25 li
@
296.609 372.57 mo
286.531 362.488 li
286.531 372.57 mo
296.609 362.488 li
@
370.77 376.891 mo
360.691 366.809 li
360.691 376.891 mo
370.77 366.809 li
@
444.93 367.41 mo
434.852 357.328 li
434.852 367.41 mo
444.93 357.328 li
@
519.09 375.809 mo
509.012 365.73 li
509.012 375.809 mo
519.09 365.73 li
@
593.25 370.41 mo
583.172 360.328 li
583.172 370.41 mo
593.25 360.328 li
@
667.531 374.129 mo
657.449 364.051 li
657.449 374.129 mo
667.531 364.051 li
@
gsave
69 30.48 mo
663.238 30.48 li
663.238 492.48 li
69 492.48 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
69.121 289.199 mo
143.281 381.121 li
217.441 400.32 li
291.602 369.48 li
365.762 368.641 li
440.039 371.398 li
514.199 364.922 li
588.359 372.238 li
662.52 366.359 li
.62829 .284672 0 0 cmyk
@
grestore
73.531 293.73 mo
64.41 284.609 li
64.41 293.73 mo
73.531 284.609 li
.62829 .284672 0 0 cmyk
@
147.809 385.648 mo
138.691 376.531 li
138.691 385.648 mo
147.809 376.531 li
@
221.969 404.852 mo
212.852 395.73 li
212.852 404.852 mo
221.969 395.73 li
@
296.129 374.012 mo
287.012 364.891 li
287.012 374.012 mo
296.129 364.891 li
@
370.289 373.051 mo
361.172 363.93 li
361.172 373.051 mo
370.289 363.93 li
@
444.449 375.809 mo
435.328 366.691 li
435.328 375.809 mo
444.449 366.691 li
@
518.609 369.328 mo
509.488 360.211 li
509.488 369.328 mo
518.609 360.211 li
@
592.77 376.77 mo
583.648 367.648 li
583.648 376.77 mo
592.77 367.648 li
@
667.051 370.891 mo
657.93 361.77 li
657.93 370.891 mo
667.051 361.77 li
@
gsave
69 30.48 mo
663.238 30.48 li
663.238 492.48 li
69 492.48 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
69.121 290.16 mo
143.281 356.641 li
217.441 407.879 li
291.602 399.961 li
365.762 371.762 li
440.039 372.84 li
514.199 375 li
588.359 367.68 li
662.52 394.801 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
74.012 295.172 mo
63.93 285.09 li
63.93 295.172 mo
74.012 285.09 li
.0321965 .622736 .922606 .000579843 cmyk
@
148.289 361.531 mo
138.211 351.449 li
138.211 361.531 mo
148.289 351.449 li
@
222.449 412.891 mo
212.371 402.809 li
212.371 412.891 mo
222.449 402.809 li
@
296.609 404.852 mo
286.531 394.77 li
286.531 404.852 mo
296.609 394.77 li
@
370.77 376.648 mo
360.691 366.57 li
360.691 376.648 mo
370.77 366.57 li
@
444.93 377.73 mo
434.852 367.648 li
434.852 377.73 mo
444.93 367.648 li
@
519.09 380.012 mo
509.012 369.93 li
509.012 380.012 mo
519.09 369.93 li
@
593.25 372.57 mo
583.172 362.488 li
583.172 372.57 mo
593.25 362.488 li
@
667.531 399.691 mo
657.449 389.609 li
657.449 399.691 mo
667.531 389.609 li
@
gsave
69 30.48 mo
663.238 30.48 li
663.238 492.48 li
69 492.48 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
69.121 290.16 mo
143.281 356.641 li
217.441 400.922 li
291.602 391.68 li
365.762 367.078 li
440.039 369.121 li
514.199 376.922 li
588.359 371.762 li
662.52 388.559 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
74.012 295.172 mo
63.93 285.09 li
63.93 295.172 mo
74.012 285.09 li
.621118 .109194 .980743 .0040589 cmyk
@
148.289 361.531 mo
138.211 351.449 li
138.211 361.531 mo
148.289 351.449 li
@
222.449 405.809 mo
212.371 395.73 li
212.371 405.809 mo
222.449 395.73 li
@
296.609 396.57 mo
286.531 386.488 li
286.531 396.57 mo
296.609 386.488 li
@
370.77 372.09 mo
360.691 362.012 li
360.691 372.09 mo
370.77 362.012 li
@
444.93 374.129 mo
434.852 364.051 li
434.852 374.129 mo
444.93 364.051 li
@
519.09 381.809 mo
509.012 371.73 li
509.012 381.809 mo
519.09 371.73 li
@
593.25 376.648 mo
583.172 366.57 li
583.172 376.648 mo
593.25 366.57 li
@
667.531 393.449 mo
657.449 383.371 li
657.449 393.449 mo
667.531 383.371 li
@
gsave
69 30.48 mo
663.238 30.48 li
663.238 492.48 li
69 492.48 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
69.121 289.801 mo
143.281 356.641 li
217.441 410.16 li
291.602 388.559 li
365.762 375.961 li
440.039 367.32 li
514.199 374.16 li
588.359 372.602 li
662.52 391.32 li
0 .993988 1 0 cmyk
@
grestore
74.012 294.809 mo
63.93 284.73 li
63.93 294.809 mo
74.012 284.73 li
0 .993988 1 0 cmyk
@
148.289 361.531 mo
138.211 351.449 li
138.211 361.531 mo
148.289 351.449 li
@
222.449 415.051 mo
212.371 404.969 li
212.371 415.051 mo
222.449 404.969 li
@
296.609 393.449 mo
286.531 383.371 li
286.531 393.449 mo
296.609 383.371 li
@
370.77 380.969 mo
360.691 370.891 li
360.691 380.969 mo
370.77 370.891 li
@
444.93 372.211 mo
434.852 362.129 li
434.852 372.211 mo
444.93 362.129 li
@
519.09 379.051 mo
509.012 368.969 li
509.012 379.051 mo
519.09 368.969 li
@
593.25 377.609 mo
583.172 367.531 li
583.172 377.609 mo
593.25 367.531 li
@
667.531 396.211 mo
657.449 386.129 li
657.449 396.211 mo
667.531 386.129 li
@
35.199 482.496 mo
56.09 482.496 li
56.09 499.586 li
35.199 499.586 li
cp
0 0 0 0 cmyk
ef
41.836 491.453 mo
41.832 492.137 41.781 492.758 41.676 493.32 cv
41.566 493.883 41.387 494.367 41.141 494.77 cv
40.887 495.176 40.559 495.488 40.16 495.707 cv
39.754 495.93 39.262 496.039 38.676 496.039 cv
38.117 496.039 37.645 495.941 37.266 495.742 cv
36.883 495.547 36.578 495.254 36.344 494.867 cv
36.109 494.48 35.941 494.008 35.848 493.441 cv
35.746 492.879 35.699 492.23 35.699 491.496 cv
35.699 490.824 35.754 490.203 35.863 489.637 cv
35.973 489.074 36.148 488.59 36.398 488.184 cv
36.641 487.781 36.965 487.469 37.371 487.242 cv
37.77 487.023 38.266 486.91 38.855 486.91 cv
39.414 486.91 39.887 487.012 40.27 487.207 cv
40.652 487.41 40.957 487.703 41.191 488.086 cv
41.422 488.477 41.59 488.949 41.688 489.512 cv
41.785 490.074 41.832 490.723 41.836 491.453 cv
cp
40.629 491.535 mo
40.625 491.094 40.609 490.695 40.582 490.344 cv
40.547 489.992 40.5 489.684 40.441 489.414 cv
40.375 489.145 40.297 488.914 40.199 488.719 cv
40.102 488.527 39.984 488.367 39.848 488.238 cv
39.707 488.113 39.547 488.02 39.375 487.961 cv
39.195 487.906 39 487.879 38.785 487.875 cv
38.395 487.879 38.078 487.969 37.84 488.152 cv
37.594 488.336 37.402 488.59 37.266 488.906 cv
37.125 489.227 37.031 489.598 36.98 490.027 cv
36.93 490.457 36.906 490.922 36.906 491.414 cv
36.906 492.078 36.938 492.641 37.008 493.102 cv
37.074 493.57 37.184 493.949 37.336 494.238 cv
37.48 494.535 37.672 494.746 37.902 494.875 cv
38.133 495.012 38.414 495.078 38.746 495.074 cv
39 495.078 39.223 495.039 39.418 494.953 cv
39.609 494.875 39.777 494.754 39.918 494.598 cv
40.059 494.445 40.172 494.262 40.266 494.047 cv
40.352 493.832 40.426 493.594 40.484 493.332 cv
40.535 493.074 40.574 492.793 40.598 492.488 cv
40.617 492.184 40.625 491.867 40.629 491.535 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.836 495.164 mo
44.836 495.492 44.781 495.707 44.676 495.812 cv
44.566 495.918 44.371 495.969 44.09 495.973 cv
43.813 495.969 43.621 495.918 43.52 495.816 cv
43.41 495.711 43.359 495.5 43.363 495.184 cv
43.359 494.859 43.414 494.645 43.523 494.535 cv
43.629 494.43 43.824 494.375 44.109 494.375 cv
44.383 494.375 44.57 494.43 44.68 494.535 cv
44.781 494.641 44.836 494.852 44.836 495.164 cv
cp
f
52.492 491.453 mo
52.488 492.137 52.438 492.758 52.332 493.32 cv
52.223 493.883 52.043 494.367 51.797 494.77 cv
51.543 495.176 51.215 495.488 50.816 495.707 cv
50.41 495.93 49.918 496.039 49.332 496.039 cv
48.773 496.039 48.301 495.941 47.922 495.742 cv
47.539 495.547 47.234 495.254 47 494.867 cv
46.766 494.48 46.598 494.008 46.504 493.441 cv
46.402 492.879 46.355 492.23 46.355 491.496 cv
46.355 490.824 46.41 490.203 46.52 489.637 cv
46.629 489.074 46.805 488.59 47.055 488.184 cv
47.297 487.781 47.621 487.469 48.027 487.242 cv
48.426 487.023 48.922 486.91 49.512 486.91 cv
50.07 486.91 50.543 487.012 50.926 487.207 cv
51.309 487.41 51.613 487.703 51.848 488.086 cv
52.078 488.477 52.246 488.949 52.344 489.512 cv
52.441 490.074 52.488 490.723 52.492 491.453 cv
cp
51.285 491.535 mo
51.281 491.094 51.266 490.695 51.238 490.344 cv
51.203 489.992 51.156 489.684 51.098 489.414 cv
51.031 489.145 50.953 488.914 50.855 488.719 cv
50.758 488.527 50.641 488.367 50.504 488.238 cv
50.363 488.113 50.203 488.02 50.031 487.961 cv
49.852 487.906 49.656 487.879 49.441 487.875 cv
49.051 487.879 48.734 487.969 48.496 488.152 cv
48.25 488.336 48.059 488.59 47.922 488.906 cv
47.781 489.227 47.688 489.598 47.637 490.027 cv
47.586 490.457 47.563 490.922 47.563 491.414 cv
47.563 492.078 47.594 492.641 47.664 493.102 cv
47.73 493.57 47.84 493.949 47.992 494.238 cv
48.137 494.535 48.328 494.746 48.559 494.875 cv
48.789 495.012 49.07 495.078 49.402 495.074 cv
49.656 495.078 49.879 495.039 50.074 494.953 cv
50.266 494.875 50.434 494.754 50.574 494.598 cv
50.715 494.445 50.828 494.262 50.922 494.047 cv
51.008 493.832 51.082 493.594 51.141 493.332 cv
51.191 493.074 51.23 492.793 51.254 492.488 cv
51.273 492.184 51.281 491.867 51.285 491.535 cv
cp
f
35.199 436.371 mo
56.09 436.371 li
56.09 453.461 li
35.199 453.461 li
cp
0 0 0 0 cmyk
ef
41.543 449.273 mo
41.539 449.359 41.535 449.434 41.523 449.496 cv
41.512 449.562 41.496 449.617 41.477 449.656 cv
41.453 449.703 41.426 449.734 41.395 449.75 cv
41.359 449.773 41.32 449.781 41.281 449.781 cv
36.379 449.781 li
36.316 449.781 36.258 449.773 36.211 449.758 cv
36.16 449.742 36.121 449.719 36.086 449.68 cv
36.051 449.648 36.023 449.594 36.012 449.523 cv
35.992 449.453 35.984 449.367 35.988 449.266 cv
35.984 449.176 35.988 449.098 35.996 449.027 cv
36 448.961 36.016 448.902 36.043 448.848 cv
36.066 448.797 36.098 448.742 36.133 448.687 cv
36.168 448.637 36.211 448.582 36.27 448.52 cv
38.043 446.695 li
38.453 446.277 38.781 445.902 39.031 445.566 cv
39.277 445.238 39.469 444.934 39.602 444.656 cv
39.734 444.383 39.82 444.133 39.867 443.906 cv
39.906 443.684 39.93 443.473 39.93 443.277 cv
39.93 443.082 39.895 442.898 39.828 442.719 cv
39.762 442.547 39.668 442.391 39.543 442.254 cv
39.418 442.125 39.262 442.02 39.074 441.937 cv
38.887 441.863 38.668 441.824 38.422 441.82 cv
38.133 441.824 37.875 441.863 37.648 441.937 cv
37.418 442.02 37.219 442.105 37.047 442.191 cv
36.875 442.285 36.73 442.367 36.613 442.445 cv
36.496 442.523 36.41 442.562 36.359 442.562 cv
36.324 442.562 36.293 442.555 36.27 442.535 cv
36.238 442.52 36.219 442.488 36.203 442.445 cv
36.188 442.406 36.172 442.352 36.164 442.281 cv
36.152 442.215 36.148 442.133 36.152 442.035 cv
36.148 441.969 36.152 441.91 36.16 441.859 cv
36.164 441.809 36.172 441.766 36.184 441.727 cv
36.191 441.691 36.207 441.656 36.227 441.625 cv
36.246 441.594 36.281 441.555 36.34 441.504 cv
36.391 441.457 36.484 441.391 36.621 441.309 cv
36.754 441.227 36.926 441.148 37.129 441.066 cv
37.332 440.988 37.555 440.918 37.801 440.863 cv
38.043 440.809 38.301 440.781 38.574 440.781 cv
39 440.781 39.375 440.844 39.699 440.965 cv
40.02 441.086 40.285 441.25 40.5 441.461 cv
40.711 441.672 40.871 441.918 40.977 442.191 cv
41.082 442.473 41.137 442.77 41.137 443.082 cv
41.137 443.371 41.109 443.652 41.059 443.93 cv
41.008 444.215 40.902 444.52 40.742 444.844 cv
40.578 445.172 40.344 445.535 40.039 445.934 cv
39.73 446.336 39.324 446.797 38.82 447.312 cv
37.414 448.781 li
41.273 448.781 li
41.305 448.785 41.34 448.797 41.379 448.812 cv
41.41 448.836 41.441 448.867 41.469 448.906 cv
41.492 448.949 41.512 449 41.523 449.059 cv
41.535 449.125 41.539 449.195 41.543 449.273 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.836 449.035 mo
44.836 449.363 44.781 449.578 44.676 449.684 cv
44.566 449.789 44.371 449.84 44.09 449.844 cv
43.813 449.84 43.621 449.789 43.52 449.687 cv
43.41 449.582 43.359 449.371 43.363 449.055 cv
43.359 448.73 43.414 448.516 43.523 448.406 cv
43.629 448.301 43.824 448.246 44.109 448.246 cv
44.383 448.246 44.57 448.301 44.68 448.406 cv
44.781 448.512 44.836 448.723 44.836 449.035 cv
cp
f
52.156 446.93 mo
52.156 447.406 52.074 447.828 51.914 448.199 cv
51.754 448.57 51.527 448.883 51.238 449.137 cv
50.941 449.391 50.594 449.586 50.191 449.715 cv
49.785 449.848 49.336 449.91 48.844 449.91 cv
48.566 449.91 48.305 449.891 48.063 449.852 cv
47.813 449.812 47.594 449.766 47.406 449.711 cv
47.211 449.656 47.055 449.602 46.93 449.543 cv
46.805 449.492 46.727 449.449 46.695 449.414 cv
46.66 449.383 46.637 449.352 46.625 449.324 cv
46.609 449.297 46.594 449.266 46.586 449.223 cv
46.57 449.187 46.563 449.137 46.563 449.074 cv
46.555 449.016 46.555 448.945 46.555 448.863 cv
46.555 448.789 46.559 448.719 46.566 448.656 cv
46.574 448.594 46.586 448.543 46.605 448.504 cv
46.621 448.465 46.641 448.437 46.668 448.418 cv
46.691 448.402 46.723 448.395 46.754 448.391 cv
46.801 448.395 46.871 448.422 46.965 448.477 cv
47.059 448.535 47.188 448.598 47.352 448.664 cv
47.516 448.73 47.715 448.793 47.957 448.852 cv
48.191 448.91 48.477 448.937 48.813 448.937 cv
49.113 448.937 49.395 448.902 49.652 448.828 cv
49.906 448.758 50.129 448.645 50.316 448.488 cv
50.5 448.336 50.645 448.141 50.75 447.902 cv
50.855 447.668 50.906 447.379 50.91 447.039 cv
50.906 446.758 50.863 446.508 50.773 446.289 cv
50.684 446.07 50.547 445.891 50.363 445.746 cv
50.176 445.605 49.941 445.5 49.66 445.426 cv
49.375 445.355 49.035 445.316 48.648 445.316 cv
48.363 445.316 48.125 445.332 47.926 445.359 cv
47.723 445.391 47.535 445.406 47.363 445.402 cv
47.234 445.406 47.141 445.375 47.09 445.312 cv
47.031 445.254 47.004 445.141 47.008 444.969 cv
47.008 441.355 li
47.004 441.207 47.039 441.098 47.113 441.02 cv
47.18 440.949 47.281 440.91 47.418 440.91 cv
51.348 440.91 li
51.383 440.91 51.418 440.922 51.453 440.941 cv
51.484 440.965 51.512 440.996 51.539 441.035 cv
51.559 441.078 51.574 441.129 51.59 441.191 cv
51.598 441.258 51.605 441.336 51.609 441.418 cv
51.605 441.586 51.582 441.711 51.543 441.801 cv
51.496 441.895 51.438 441.941 51.359 441.937 cv
48.188 441.937 li
48.188 444.426 li
48.34 444.406 48.496 444.395 48.66 444.387 cv
48.816 444.383 49.004 444.379 49.219 444.379 cv
49.703 444.379 50.129 444.441 50.496 444.562 cv
50.859 444.684 51.164 444.855 51.414 445.074 cv
51.656 445.301 51.844 445.566 51.969 445.879 cv
52.094 446.195 52.156 446.547 52.156 446.93 cv
cp
f
35.199 390.238 mo
56.09 390.238 li
56.09 407.328 li
35.199 407.328 li
cp
0 0 0 0 cmyk
ef
41.5 400.777 mo
41.5 401.254 41.418 401.676 41.258 402.047 cv
41.098 402.418 40.871 402.73 40.582 402.984 cv
40.285 403.238 39.938 403.434 39.535 403.562 cv
39.129 403.695 38.68 403.758 38.188 403.758 cv
37.91 403.758 37.648 403.738 37.406 403.699 cv
37.156 403.66 36.938 403.613 36.75 403.559 cv
36.555 403.504 36.398 403.449 36.273 403.391 cv
36.148 403.34 36.07 403.297 36.039 403.262 cv
36.004 403.23 35.98 403.199 35.969 403.172 cv
35.953 403.145 35.938 403.113 35.93 403.07 cv
35.914 403.035 35.906 402.984 35.906 402.922 cv
35.898 402.863 35.898 402.793 35.898 402.711 cv
35.898 402.637 35.902 402.566 35.91 402.504 cv
35.918 402.441 35.93 402.391 35.949 402.352 cv
35.965 402.312 35.984 402.285 36.012 402.266 cv
36.035 402.25 36.066 402.242 36.098 402.238 cv
36.145 402.242 36.215 402.27 36.309 402.324 cv
36.402 402.383 36.531 402.445 36.695 402.512 cv
36.859 402.578 37.059 402.641 37.301 402.699 cv
37.535 402.758 37.82 402.785 38.156 402.785 cv
38.457 402.785 38.738 402.75 38.996 402.676 cv
39.25 402.605 39.473 402.492 39.66 402.336 cv
39.844 402.184 39.988 401.988 40.094 401.75 cv
40.199 401.516 40.25 401.227 40.254 400.887 cv
40.25 400.605 40.207 400.355 40.117 400.137 cv
40.027 399.918 39.891 399.738 39.707 399.594 cv
39.52 399.453 39.285 399.348 39.004 399.273 cv
38.719 399.203 38.379 399.164 37.992 399.164 cv
37.707 399.164 37.469 399.18 37.27 399.207 cv
37.066 399.238 36.879 399.254 36.707 399.25 cv
36.578 399.254 36.484 399.223 36.434 399.16 cv
36.375 399.102 36.348 398.988 36.352 398.816 cv
36.352 395.203 li
36.348 395.055 36.383 394.945 36.457 394.867 cv
36.523 394.797 36.625 394.758 36.762 394.758 cv
40.691 394.758 li
40.727 394.758 40.762 394.77 40.797 394.789 cv
40.828 394.812 40.855 394.844 40.883 394.883 cv
40.902 394.926 40.918 394.977 40.934 395.039 cv
40.941 395.105 40.949 395.184 40.953 395.266 cv
40.949 395.434 40.926 395.559 40.887 395.648 cv
40.84 395.742 40.781 395.789 40.703 395.785 cv
37.531 395.785 li
37.531 398.273 li
37.684 398.254 37.84 398.242 38.004 398.234 cv
38.16 398.23 38.348 398.227 38.563 398.227 cv
39.047 398.227 39.473 398.289 39.84 398.41 cv
40.203 398.531 40.508 398.703 40.758 398.922 cv
41 399.148 41.188 399.414 41.313 399.727 cv
41.438 400.043 41.5 400.395 41.5 400.777 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.836 402.883 mo
44.836 403.211 44.781 403.426 44.676 403.531 cv
44.566 403.637 44.371 403.687 44.09 403.691 cv
43.813 403.687 43.621 403.637 43.52 403.535 cv
43.41 403.43 43.359 403.219 43.363 402.902 cv
43.359 402.578 43.414 402.363 43.523 402.254 cv
43.629 402.148 43.824 402.094 44.109 402.094 cv
44.383 402.094 44.57 402.148 44.68 402.254 cv
44.781 402.359 44.836 402.57 44.836 402.883 cv
cp
f
52.492 399.172 mo
52.488 399.855 52.438 400.477 52.332 401.039 cv
52.223 401.602 52.043 402.086 51.797 402.488 cv
51.543 402.895 51.215 403.207 50.816 403.426 cv
50.41 403.648 49.918 403.758 49.332 403.758 cv
48.773 403.758 48.301 403.66 47.922 403.461 cv
47.539 403.266 47.234 402.973 47 402.586 cv
46.766 402.199 46.598 401.727 46.504 401.16 cv
46.402 400.598 46.355 399.949 46.355 399.215 cv
46.355 398.543 46.41 397.922 46.52 397.355 cv
46.629 396.793 46.805 396.309 47.055 395.902 cv
47.297 395.5 47.621 395.187 48.027 394.961 cv
48.426 394.742 48.922 394.629 49.512 394.629 cv
50.07 394.629 50.543 394.73 50.926 394.926 cv
51.309 395.129 51.613 395.422 51.848 395.805 cv
52.078 396.195 52.246 396.668 52.344 397.23 cv
52.441 397.793 52.488 398.441 52.492 399.172 cv
cp
51.285 399.254 mo
51.281 398.812 51.266 398.414 51.238 398.062 cv
51.203 397.711 51.156 397.402 51.098 397.133 cv
51.031 396.863 50.953 396.633 50.855 396.437 cv
50.758 396.246 50.641 396.086 50.504 395.957 cv
50.363 395.832 50.203 395.738 50.031 395.68 cv
49.852 395.625 49.656 395.598 49.441 395.594 cv
49.051 395.598 48.734 395.687 48.496 395.871 cv
48.25 396.055 48.059 396.309 47.922 396.625 cv
47.781 396.945 47.688 397.316 47.637 397.746 cv
47.586 398.176 47.563 398.641 47.563 399.133 cv
47.563 399.797 47.594 400.359 47.664 400.82 cv
47.73 401.289 47.84 401.668 47.992 401.957 cv
48.137 402.254 48.328 402.465 48.559 402.594 cv
48.789 402.73 49.07 402.797 49.402 402.793 cv
49.656 402.797 49.879 402.758 50.074 402.672 cv
50.266 402.594 50.434 402.473 50.574 402.316 cv
50.715 402.164 50.828 401.98 50.922 401.766 cv
51.008 401.551 51.082 401.312 51.141 401.051 cv
51.191 400.793 51.23 400.512 51.254 400.207 cv
51.273 399.902 51.281 399.586 51.285 399.254 cv
cp
f
35.199 344.109 mo
56.09 344.109 li
56.09 361.199 li
35.199 361.199 li
cp
0 0 0 0 cmyk
ef
41.672 349.137 mo
41.668 349.223 41.664 349.297 41.66 349.359 cv
41.652 349.43 41.645 349.492 41.633 349.551 cv
41.621 349.617 41.605 349.676 41.586 349.73 cv
41.563 349.789 41.539 349.852 41.516 349.91 cv
38.32 357.273 li
38.293 357.332 38.266 357.375 38.234 357.406 cv
38.199 357.441 38.156 357.469 38.102 357.488 cv
38.047 357.508 37.977 357.52 37.898 357.531 cv
37.813 357.535 37.715 357.539 37.598 357.543 cv
37.441 357.539 37.32 357.531 37.234 357.52 cv
37.148 357.504 37.086 357.488 37.047 357.457 cv
37.008 357.43 36.988 357.391 36.996 357.348 cv
36.996 357.305 37.012 357.254 37.043 357.191 cv
40.402 349.664 li
36.145 349.664 li
36.059 349.668 35.992 349.621 35.949 349.527 cv
35.906 349.437 35.887 349.309 35.887 349.145 cv
35.887 349.059 35.891 348.984 35.902 348.918 cv
35.914 348.855 35.93 348.801 35.953 348.758 cv
35.973 348.715 36 348.684 36.035 348.66 cv
36.066 348.641 36.105 348.629 36.145 348.629 cv
41.316 348.629 li
41.375 348.629 41.43 348.637 41.48 348.652 cv
41.527 348.668 41.563 348.695 41.59 348.734 cv
41.613 348.773 41.633 348.828 41.648 348.891 cv
41.66 348.957 41.668 349.039 41.672 349.137 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.836 356.754 mo
44.836 357.082 44.781 357.297 44.676 357.402 cv
44.566 357.508 44.371 357.559 44.09 357.562 cv
43.813 357.559 43.621 357.508 43.52 357.406 cv
43.41 357.301 43.359 357.09 43.363 356.773 cv
43.359 356.449 43.414 356.234 43.523 356.125 cv
43.629 356.02 43.824 355.965 44.109 355.965 cv
44.383 355.965 44.57 356.02 44.68 356.125 cv
44.781 356.23 44.836 356.441 44.836 356.754 cv
cp
f
52.156 354.648 mo
52.156 355.125 52.074 355.547 51.914 355.918 cv
51.754 356.289 51.527 356.602 51.238 356.855 cv
50.941 357.109 50.594 357.305 50.191 357.434 cv
49.785 357.566 49.336 357.629 48.844 357.629 cv
48.566 357.629 48.305 357.609 48.063 357.57 cv
47.813 357.531 47.594 357.484 47.406 357.43 cv
47.211 357.375 47.055 357.32 46.93 357.262 cv
46.805 357.211 46.727 357.168 46.695 357.133 cv
46.66 357.102 46.637 357.07 46.625 357.043 cv
46.609 357.016 46.594 356.984 46.586 356.941 cv
46.57 356.906 46.563 356.855 46.563 356.793 cv
46.555 356.734 46.555 356.664 46.555 356.582 cv
46.555 356.508 46.559 356.437 46.566 356.375 cv
46.574 356.312 46.586 356.262 46.605 356.223 cv
46.621 356.184 46.641 356.156 46.668 356.137 cv
46.691 356.121 46.723 356.113 46.754 356.109 cv
46.801 356.113 46.871 356.141 46.965 356.195 cv
47.059 356.254 47.188 356.316 47.352 356.383 cv
47.516 356.449 47.715 356.512 47.957 356.57 cv
48.191 356.629 48.477 356.656 48.813 356.656 cv
49.113 356.656 49.395 356.621 49.652 356.547 cv
49.906 356.477 50.129 356.363 50.316 356.207 cv
50.5 356.055 50.645 355.859 50.75 355.621 cv
50.855 355.387 50.906 355.098 50.91 354.758 cv
50.906 354.477 50.863 354.227 50.773 354.008 cv
50.684 353.789 50.547 353.609 50.363 353.465 cv
50.176 353.324 49.941 353.219 49.66 353.145 cv
49.375 353.074 49.035 353.035 48.648 353.035 cv
48.363 353.035 48.125 353.051 47.926 353.078 cv
47.723 353.109 47.535 353.125 47.363 353.121 cv
47.234 353.125 47.141 353.094 47.09 353.031 cv
47.031 352.973 47.004 352.859 47.008 352.687 cv
47.008 349.074 li
47.004 348.926 47.039 348.816 47.113 348.738 cv
47.18 348.668 47.281 348.629 47.418 348.629 cv
51.348 348.629 li
51.383 348.629 51.418 348.641 51.453 348.66 cv
51.484 348.684 51.512 348.715 51.539 348.754 cv
51.559 348.797 51.574 348.848 51.59 348.91 cv
51.598 348.977 51.605 349.055 51.609 349.137 cv
51.605 349.305 51.582 349.43 51.543 349.52 cv
51.496 349.613 51.438 349.66 51.359 349.656 cv
48.188 349.656 li
48.188 352.145 li
48.34 352.125 48.496 352.113 48.66 352.105 cv
48.816 352.102 49.004 352.098 49.219 352.098 cv
49.703 352.098 50.129 352.16 50.496 352.281 cv
50.859 352.402 51.164 352.574 51.414 352.793 cv
51.656 353.02 51.844 353.285 51.969 353.598 cv
52.094 353.914 52.156 354.266 52.156 354.648 cv
cp
f
28.105 297.988 mo
56.089 297.988 li
56.089 315.078 li
28.105 315.078 li
cp
0 0 0 0 cmyk
ef
34.484 310.914 mo
34.48 311.004 34.473 311.074 34.461 311.133 cv
34.445 311.195 34.426 311.246 34.406 311.277 cv
34.383 311.316 34.359 311.34 34.328 311.355 cv
34.297 311.371 34.266 311.379 34.238 311.379 cv
29.602 311.379 li
29.566 311.379 29.539 311.371 29.512 311.355 cv
29.484 311.34 29.457 311.316 29.434 311.277 cv
29.406 311.246 29.387 311.195 29.375 311.133 cv
29.359 311.074 29.352 311.004 29.355 310.914 cv
29.352 310.836 29.359 310.762 29.375 310.699 cv
29.387 310.641 29.402 310.594 29.426 310.555 cv
29.441 310.52 29.469 310.488 29.5 310.465 cv
29.531 310.445 29.563 310.437 29.602 310.434 cv
31.453 310.434 li
31.453 303.687 li
29.738 304.707 li
29.648 304.758 29.578 304.785 29.531 304.793 cv
29.477 304.801 29.434 304.793 29.402 304.762 cv
29.367 304.734 29.348 304.684 29.336 304.613 cv
29.324 304.547 29.316 304.461 29.32 304.352 cv
29.316 304.277 29.32 304.211 29.332 304.152 cv
29.336 304.102 29.348 304.055 29.363 304.016 cv
29.375 303.98 29.395 303.949 29.418 303.922 cv
29.441 303.895 29.473 303.867 29.52 303.84 cv
31.563 302.527 li
31.578 302.516 31.598 302.504 31.629 302.496 cv
31.652 302.488 31.688 302.48 31.734 302.469 cv
31.773 302.461 31.824 302.453 31.879 302.449 cv
31.934 302.449 32 302.449 32.086 302.445 cv
32.191 302.449 32.285 302.453 32.359 302.461 cv
32.43 302.469 32.484 302.484 32.531 302.5 cv
32.57 302.52 32.598 302.539 32.613 302.562 cv
32.621 302.59 32.629 302.613 32.633 302.637 cv
32.633 310.434 li
34.238 310.434 li
34.273 310.437 34.309 310.445 34.34 310.465 cv
34.371 310.488 34.395 310.52 34.418 310.555 cv
34.434 310.594 34.449 310.641 34.465 310.699 cv
34.473 310.762 34.48 310.836 34.484 310.914 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.875 306.922 mo
41.871 307.605 41.82 308.227 41.715 308.789 cv
41.605 309.352 41.426 309.836 41.18 310.238 cv
40.926 310.645 40.598 310.957 40.199 311.176 cv
39.793 311.398 39.301 311.508 38.715 311.508 cv
38.156 311.508 37.684 311.41 37.305 311.211 cv
36.922 311.016 36.617 310.723 36.383 310.336 cv
36.148 309.949 35.98 309.477 35.887 308.91 cv
35.785 308.348 35.738 307.699 35.738 306.965 cv
35.738 306.293 35.793 305.672 35.902 305.105 cv
36.012 304.543 36.188 304.059 36.438 303.652 cv
36.68 303.25 37.004 302.937 37.41 302.711 cv
37.809 302.492 38.305 302.379 38.895 302.379 cv
39.453 302.379 39.926 302.48 40.309 302.676 cv
40.691 302.879 40.996 303.172 41.23 303.555 cv
41.461 303.945 41.629 304.418 41.727 304.98 cv
41.824 305.543 41.871 306.191 41.875 306.922 cv
cp
40.668 307.004 mo
40.664 306.562 40.648 306.164 40.621 305.812 cv
40.586 305.461 40.539 305.152 40.48 304.883 cv
40.414 304.613 40.336 304.383 40.238 304.187 cv
40.141 303.996 40.023 303.836 39.887 303.707 cv
39.746 303.582 39.586 303.488 39.414 303.43 cv
39.234 303.375 39.039 303.348 38.824 303.344 cv
38.434 303.348 38.117 303.437 37.879 303.621 cv
37.633 303.805 37.441 304.059 37.305 304.375 cv
37.164 304.695 37.07 305.066 37.02 305.496 cv
36.969 305.926 36.945 306.391 36.945 306.883 cv
36.945 307.547 36.977 308.109 37.047 308.57 cv
37.113 309.039 37.223 309.418 37.375 309.707 cv
37.52 310.004 37.711 310.215 37.941 310.344 cv
38.172 310.48 38.453 310.547 38.785 310.543 cv
39.039 310.547 39.262 310.508 39.457 310.422 cv
39.648 310.344 39.816 310.223 39.957 310.066 cv
40.098 309.914 40.211 309.73 40.305 309.516 cv
40.391 309.301 40.465 309.062 40.523 308.801 cv
40.574 308.543 40.613 308.262 40.637 307.957 cv
40.656 307.652 40.664 307.336 40.668 307.004 cv
cp
f
44.801 310.633 mo
44.801 310.961 44.746 311.176 44.641 311.281 cv
44.531 311.387 44.336 311.437 44.055 311.441 cv
43.777 311.437 43.586 311.387 43.484 311.285 cv
43.375 311.18 43.324 310.969 43.328 310.652 cv
43.324 310.328 43.379 310.113 43.488 310.004 cv
43.594 309.898 43.789 309.844 44.074 309.844 cv
44.348 309.844 44.535 309.898 44.645 310.004 cv
44.746 310.109 44.801 310.32 44.801 310.633 cv
cp
f
52.504 306.922 mo
52.5 307.605 52.449 308.227 52.344 308.789 cv
52.234 309.352 52.055 309.836 51.809 310.238 cv
51.555 310.645 51.227 310.957 50.828 311.176 cv
50.422 311.398 49.93 311.508 49.344 311.508 cv
48.785 311.508 48.313 311.41 47.934 311.211 cv
47.551 311.016 47.246 310.723 47.012 310.336 cv
46.777 309.949 46.609 309.477 46.516 308.91 cv
46.414 308.348 46.367 307.699 46.367 306.965 cv
46.367 306.293 46.422 305.672 46.531 305.105 cv
46.641 304.543 46.816 304.059 47.066 303.652 cv
47.309 303.25 47.633 302.937 48.039 302.711 cv
48.438 302.492 48.934 302.379 49.523 302.379 cv
50.082 302.379 50.555 302.48 50.938 302.676 cv
51.32 302.879 51.625 303.172 51.859 303.555 cv
52.09 303.945 52.258 304.418 52.355 304.98 cv
52.453 305.543 52.5 306.191 52.504 306.922 cv
cp
51.297 307.004 mo
51.293 306.562 51.277 306.164 51.25 305.812 cv
51.215 305.461 51.168 305.152 51.109 304.883 cv
51.043 304.613 50.965 304.383 50.867 304.187 cv
50.77 303.996 50.652 303.836 50.516 303.707 cv
50.375 303.582 50.215 303.488 50.043 303.43 cv
49.863 303.375 49.668 303.348 49.453 303.344 cv
49.063 303.348 48.746 303.437 48.508 303.621 cv
48.262 303.805 48.07 304.059 47.934 304.375 cv
47.793 304.695 47.699 305.066 47.648 305.496 cv
47.598 305.926 47.574 306.391 47.574 306.883 cv
47.574 307.547 47.605 308.109 47.676 308.57 cv
47.742 309.039 47.852 309.418 48.004 309.707 cv
48.148 310.004 48.34 310.215 48.57 310.344 cv
48.801 310.48 49.082 310.547 49.414 310.543 cv
49.668 310.547 49.891 310.508 50.086 310.422 cv
50.277 310.344 50.445 310.223 50.586 310.066 cv
50.727 309.914 50.84 309.73 50.934 309.516 cv
51.02 309.301 51.094 309.062 51.152 308.801 cv
51.203 308.543 51.242 308.262 51.266 307.957 cv
51.285 307.652 51.293 307.336 51.297 307.004 cv
cp
f
28.105 251.859 mo
56.089 251.859 li
56.089 268.949 li
28.105 268.949 li
cp
0 0 0 0 cmyk
ef
34.484 264.754 mo
34.48 264.844 34.473 264.914 34.461 264.973 cv
34.445 265.035 34.426 265.086 34.406 265.117 cv
34.383 265.156 34.359 265.18 34.328 265.195 cv
34.297 265.211 34.266 265.219 34.238 265.219 cv
29.602 265.219 li
29.566 265.219 29.539 265.211 29.512 265.195 cv
29.484 265.18 29.457 265.156 29.434 265.117 cv
29.406 265.086 29.387 265.035 29.375 264.973 cv
29.359 264.914 29.352 264.844 29.355 264.754 cv
29.352 264.676 29.359 264.602 29.375 264.539 cv
29.387 264.48 29.402 264.434 29.426 264.395 cv
29.441 264.359 29.469 264.328 29.5 264.305 cv
29.531 264.285 29.563 264.277 29.602 264.273 cv
31.453 264.273 li
31.453 257.527 li
29.738 258.547 li
29.648 258.598 29.578 258.625 29.531 258.633 cv
29.477 258.641 29.434 258.633 29.402 258.602 cv
29.367 258.574 29.348 258.523 29.336 258.453 cv
29.324 258.387 29.316 258.301 29.32 258.191 cv
29.316 258.117 29.32 258.051 29.332 257.992 cv
29.336 257.941 29.348 257.895 29.363 257.855 cv
29.375 257.82 29.395 257.789 29.418 257.762 cv
29.441 257.734 29.473 257.707 29.52 257.68 cv
31.563 256.367 li
31.578 256.355 31.598 256.344 31.629 256.336 cv
31.652 256.328 31.688 256.32 31.734 256.309 cv
31.773 256.301 31.824 256.293 31.879 256.289 cv
31.934 256.289 32 256.289 32.086 256.285 cv
32.191 256.289 32.285 256.293 32.359 256.301 cv
32.43 256.309 32.484 256.324 32.531 256.34 cv
32.57 256.359 32.598 256.379 32.613 256.402 cv
32.621 256.43 32.629 256.453 32.633 256.477 cv
32.633 264.273 li
34.238 264.273 li
34.273 264.277 34.309 264.285 34.34 264.305 cv
34.371 264.328 34.395 264.359 34.418 264.395 cv
34.434 264.434 34.449 264.48 34.465 264.539 cv
34.473 264.602 34.48 264.676 34.484 264.754 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.582 264.711 mo
41.578 264.797 41.574 264.871 41.563 264.934 cv
41.551 265 41.535 265.055 41.516 265.094 cv
41.492 265.141 41.465 265.172 41.434 265.187 cv
41.398 265.211 41.359 265.219 41.32 265.219 cv
36.418 265.219 li
36.355 265.219 36.297 265.211 36.25 265.195 cv
36.199 265.18 36.16 265.156 36.125 265.117 cv
36.09 265.086 36.063 265.031 36.051 264.961 cv
36.031 264.891 36.023 264.805 36.027 264.703 cv
36.023 264.613 36.027 264.535 36.035 264.465 cv
36.039 264.398 36.055 264.34 36.082 264.285 cv
36.105 264.234 36.137 264.18 36.172 264.125 cv
36.207 264.074 36.25 264.02 36.309 263.957 cv
38.082 262.133 li
38.492 261.715 38.82 261.34 39.07 261.004 cv
39.316 260.676 39.508 260.371 39.641 260.094 cv
39.773 259.82 39.859 259.57 39.906 259.344 cv
39.945 259.121 39.969 258.91 39.969 258.715 cv
39.969 258.52 39.934 258.336 39.867 258.156 cv
39.801 257.984 39.707 257.828 39.582 257.691 cv
39.457 257.562 39.301 257.457 39.113 257.375 cv
38.926 257.301 38.707 257.262 38.461 257.258 cv
38.172 257.262 37.914 257.301 37.688 257.375 cv
37.457 257.457 37.258 257.543 37.086 257.629 cv
36.914 257.723 36.77 257.805 36.652 257.883 cv
36.535 257.961 36.449 258 36.398 258 cv
36.363 258 36.332 257.992 36.309 257.973 cv
36.277 257.957 36.258 257.926 36.242 257.883 cv
36.227 257.844 36.211 257.789 36.203 257.719 cv
36.191 257.652 36.188 257.57 36.191 257.473 cv
36.188 257.406 36.191 257.348 36.199 257.297 cv
36.203 257.246 36.211 257.203 36.223 257.164 cv
36.23 257.129 36.246 257.094 36.266 257.062 cv
36.285 257.031 36.32 256.992 36.379 256.941 cv
36.43 256.895 36.523 256.828 36.66 256.746 cv
36.793 256.664 36.965 256.586 37.168 256.504 cv
37.371 256.426 37.594 256.355 37.84 256.301 cv
38.082 256.246 38.34 256.219 38.613 256.219 cv
39.039 256.219 39.414 256.281 39.738 256.402 cv
40.059 256.523 40.324 256.687 40.539 256.898 cv
40.75 257.109 40.91 257.355 41.016 257.629 cv
41.121 257.91 41.176 258.207 41.176 258.52 cv
41.176 258.809 41.148 259.09 41.098 259.367 cv
41.047 259.652 40.941 259.957 40.781 260.281 cv
40.617 260.609 40.383 260.973 40.078 261.371 cv
39.77 261.773 39.363 262.234 38.859 262.75 cv
37.453 264.219 li
41.313 264.219 li
41.344 264.223 41.379 264.234 41.418 264.25 cv
41.449 264.273 41.48 264.305 41.508 264.344 cv
41.531 264.387 41.551 264.437 41.563 264.496 cv
41.574 264.562 41.578 264.633 41.582 264.711 cv
cp
f
44.801 264.473 mo
44.801 264.801 44.746 265.016 44.641 265.121 cv
44.531 265.227 44.336 265.277 44.055 265.281 cv
43.777 265.277 43.586 265.227 43.484 265.125 cv
43.375 265.02 43.324 264.809 43.328 264.492 cv
43.324 264.168 43.379 263.953 43.488 263.844 cv
43.594 263.738 43.789 263.684 44.074 263.684 cv
44.348 263.684 44.535 263.738 44.645 263.844 cv
44.746 263.949 44.801 264.16 44.801 264.473 cv
cp
f
52.168 262.367 mo
52.168 262.844 52.086 263.266 51.926 263.637 cv
51.766 264.008 51.539 264.32 51.25 264.574 cv
50.953 264.828 50.605 265.023 50.203 265.152 cv
49.797 265.285 49.348 265.348 48.855 265.348 cv
48.578 265.348 48.316 265.328 48.074 265.289 cv
47.824 265.25 47.605 265.203 47.418 265.148 cv
47.223 265.094 47.066 265.039 46.941 264.98 cv
46.816 264.93 46.738 264.887 46.707 264.852 cv
46.672 264.82 46.648 264.789 46.637 264.762 cv
46.621 264.734 46.605 264.703 46.598 264.66 cv
46.582 264.625 46.574 264.574 46.574 264.512 cv
46.566 264.453 46.566 264.383 46.566 264.301 cv
46.566 264.227 46.57 264.156 46.578 264.094 cv
46.586 264.031 46.598 263.98 46.617 263.941 cv
46.633 263.902 46.652 263.875 46.68 263.855 cv
46.703 263.84 46.734 263.832 46.766 263.828 cv
46.813 263.832 46.883 263.859 46.977 263.914 cv
47.07 263.973 47.199 264.035 47.363 264.102 cv
47.527 264.168 47.727 264.23 47.969 264.289 cv
48.203 264.348 48.488 264.375 48.824 264.375 cv
49.125 264.375 49.406 264.34 49.664 264.266 cv
49.918 264.195 50.141 264.082 50.328 263.926 cv
50.512 263.773 50.656 263.578 50.762 263.34 cv
50.867 263.105 50.918 262.816 50.922 262.477 cv
50.918 262.195 50.875 261.945 50.785 261.727 cv
50.695 261.508 50.559 261.328 50.375 261.184 cv
50.188 261.043 49.953 260.937 49.672 260.863 cv
49.387 260.793 49.047 260.754 48.66 260.754 cv
48.375 260.754 48.137 260.77 47.938 260.797 cv
47.734 260.828 47.547 260.844 47.375 260.84 cv
47.246 260.844 47.152 260.812 47.102 260.75 cv
47.043 260.691 47.016 260.578 47.02 260.406 cv
47.02 256.793 li
47.016 256.645 47.051 256.535 47.125 256.457 cv
47.191 256.387 47.293 256.348 47.43 256.348 cv
51.359 256.348 li
51.395 256.348 51.43 256.359 51.465 256.379 cv
51.496 256.402 51.523 256.434 51.551 256.473 cv
51.57 256.516 51.586 256.566 51.602 256.629 cv
51.609 256.695 51.617 256.773 51.621 256.855 cv
51.617 257.023 51.594 257.148 51.555 257.238 cv
51.508 257.332 51.449 257.379 51.371 257.375 cv
48.199 257.375 li
48.199 259.863 li
48.352 259.844 48.508 259.832 48.672 259.824 cv
48.828 259.82 49.016 259.816 49.23 259.816 cv
49.715 259.816 50.141 259.879 50.508 260 cv
50.871 260.121 51.176 260.293 51.426 260.512 cv
51.668 260.738 51.855 261.004 51.98 261.316 cv
52.105 261.633 52.168 261.984 52.168 262.367 cv
cp
f
28.105 205.73 mo
56.089 205.73 li
56.089 222.82 li
28.105 222.82 li
cp
0 0 0 0 cmyk
ef
34.484 218.637 mo
34.48 218.727 34.473 218.797 34.461 218.855 cv
34.445 218.918 34.426 218.969 34.406 219 cv
34.383 219.039 34.359 219.062 34.328 219.078 cv
34.297 219.094 34.266 219.102 34.238 219.102 cv
29.602 219.102 li
29.566 219.102 29.539 219.094 29.512 219.078 cv
29.484 219.062 29.457 219.039 29.434 219 cv
29.406 218.969 29.387 218.918 29.375 218.855 cv
29.359 218.797 29.352 218.727 29.355 218.637 cv
29.352 218.559 29.359 218.484 29.375 218.422 cv
29.387 218.363 29.402 218.316 29.426 218.277 cv
29.441 218.242 29.469 218.211 29.5 218.187 cv
29.531 218.168 29.563 218.16 29.602 218.156 cv
31.453 218.156 li
31.453 211.41 li
29.738 212.43 li
29.648 212.48 29.578 212.508 29.531 212.516 cv
29.477 212.523 29.434 212.516 29.402 212.484 cv
29.367 212.457 29.348 212.406 29.336 212.336 cv
29.324 212.27 29.316 212.184 29.32 212.074 cv
29.316 212 29.32 211.934 29.332 211.875 cv
29.336 211.824 29.348 211.777 29.363 211.738 cv
29.375 211.703 29.395 211.672 29.418 211.645 cv
29.441 211.617 29.473 211.59 29.52 211.562 cv
31.563 210.25 li
31.578 210.238 31.598 210.227 31.629 210.219 cv
31.652 210.211 31.688 210.203 31.734 210.191 cv
31.773 210.184 31.824 210.176 31.879 210.172 cv
31.934 210.172 32 210.172 32.086 210.168 cv
32.191 210.172 32.285 210.176 32.359 210.184 cv
32.43 210.191 32.484 210.207 32.531 210.223 cv
32.57 210.242 32.598 210.262 32.613 210.285 cv
32.621 210.312 32.629 210.336 32.633 210.359 cv
32.633 218.156 li
34.238 218.156 li
34.273 218.16 34.309 218.168 34.34 218.187 cv
34.371 218.211 34.395 218.242 34.418 218.277 cv
34.434 218.316 34.449 218.363 34.465 218.422 cv
34.473 218.484 34.48 218.559 34.484 218.637 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.539 216.25 mo
41.539 216.727 41.457 217.148 41.297 217.52 cv
41.137 217.891 40.91 218.203 40.621 218.457 cv
40.324 218.711 39.977 218.906 39.574 219.035 cv
39.168 219.168 38.719 219.23 38.227 219.23 cv
37.949 219.23 37.688 219.211 37.445 219.172 cv
37.195 219.133 36.977 219.086 36.789 219.031 cv
36.594 218.977 36.438 218.922 36.313 218.863 cv
36.188 218.812 36.109 218.77 36.078 218.734 cv
36.043 218.703 36.02 218.672 36.008 218.645 cv
35.992 218.617 35.977 218.586 35.969 218.543 cv
35.953 218.508 35.945 218.457 35.945 218.395 cv
35.938 218.336 35.938 218.266 35.938 218.184 cv
35.938 218.109 35.941 218.039 35.949 217.977 cv
35.957 217.914 35.969 217.863 35.988 217.824 cv
36.004 217.785 36.023 217.758 36.051 217.738 cv
36.074 217.723 36.105 217.715 36.137 217.711 cv
36.184 217.715 36.254 217.742 36.348 217.797 cv
36.441 217.855 36.57 217.918 36.734 217.984 cv
36.898 218.051 37.098 218.113 37.34 218.172 cv
37.574 218.23 37.859 218.258 38.195 218.258 cv
38.496 218.258 38.777 218.223 39.035 218.148 cv
39.289 218.078 39.512 217.965 39.699 217.809 cv
39.883 217.656 40.027 217.461 40.133 217.223 cv
40.238 216.988 40.289 216.699 40.293 216.359 cv
40.289 216.078 40.246 215.828 40.156 215.609 cv
40.066 215.391 39.93 215.211 39.746 215.066 cv
39.559 214.926 39.324 214.82 39.043 214.746 cv
38.758 214.676 38.418 214.637 38.031 214.637 cv
37.746 214.637 37.508 214.652 37.309 214.68 cv
37.105 214.711 36.918 214.727 36.746 214.723 cv
36.617 214.727 36.523 214.695 36.473 214.633 cv
36.414 214.574 36.387 214.461 36.391 214.289 cv
36.391 210.676 li
36.387 210.527 36.422 210.418 36.496 210.34 cv
36.563 210.27 36.664 210.23 36.801 210.23 cv
40.73 210.23 li
40.766 210.23 40.801 210.242 40.836 210.262 cv
40.867 210.285 40.895 210.316 40.922 210.355 cv
40.941 210.398 40.957 210.449 40.973 210.512 cv
40.98 210.578 40.988 210.656 40.992 210.738 cv
40.988 210.906 40.965 211.031 40.926 211.121 cv
40.879 211.215 40.82 211.262 40.742 211.258 cv
37.57 211.258 li
37.57 213.746 li
37.723 213.727 37.879 213.715 38.043 213.707 cv
38.199 213.703 38.387 213.699 38.602 213.699 cv
39.086 213.699 39.512 213.762 39.879 213.883 cv
40.242 214.004 40.547 214.176 40.797 214.395 cv
41.039 214.621 41.227 214.887 41.352 215.199 cv
41.477 215.516 41.539 215.867 41.539 216.25 cv
cp
f
44.801 218.355 mo
44.801 218.684 44.746 218.898 44.641 219.004 cv
44.531 219.109 44.336 219.16 44.055 219.164 cv
43.777 219.16 43.586 219.109 43.484 219.008 cv
43.375 218.902 43.324 218.691 43.328 218.375 cv
43.324 218.051 43.379 217.836 43.488 217.727 cv
43.594 217.621 43.789 217.566 44.074 217.566 cv
44.348 217.566 44.535 217.621 44.645 217.727 cv
44.746 217.832 44.801 218.043 44.801 218.355 cv
cp
f
52.504 214.645 mo
52.5 215.328 52.449 215.949 52.344 216.512 cv
52.234 217.074 52.055 217.559 51.809 217.961 cv
51.555 218.367 51.227 218.68 50.828 218.898 cv
50.422 219.121 49.93 219.23 49.344 219.23 cv
48.785 219.23 48.313 219.133 47.934 218.934 cv
47.551 218.738 47.246 218.445 47.012 218.059 cv
46.777 217.672 46.609 217.199 46.516 216.633 cv
46.414 216.07 46.367 215.422 46.367 214.687 cv
46.367 214.016 46.422 213.395 46.531 212.828 cv
46.641 212.266 46.816 211.781 47.066 211.375 cv
47.309 210.973 47.633 210.66 48.039 210.434 cv
48.438 210.215 48.934 210.102 49.523 210.102 cv
50.082 210.102 50.555 210.203 50.938 210.398 cv
51.32 210.602 51.625 210.895 51.859 211.277 cv
52.09 211.668 52.258 212.141 52.355 212.703 cv
52.453 213.266 52.5 213.914 52.504 214.645 cv
cp
51.297 214.727 mo
51.293 214.285 51.277 213.887 51.25 213.535 cv
51.215 213.184 51.168 212.875 51.109 212.605 cv
51.043 212.336 50.965 212.105 50.867 211.91 cv
50.77 211.719 50.652 211.559 50.516 211.43 cv
50.375 211.305 50.215 211.211 50.043 211.152 cv
49.863 211.098 49.668 211.07 49.453 211.066 cv
49.063 211.07 48.746 211.16 48.508 211.344 cv
48.262 211.527 48.07 211.781 47.934 212.098 cv
47.793 212.418 47.699 212.789 47.648 213.219 cv
47.598 213.648 47.574 214.113 47.574 214.605 cv
47.574 215.27 47.605 215.832 47.676 216.293 cv
47.742 216.762 47.852 217.141 48.004 217.43 cv
48.148 217.727 48.34 217.937 48.57 218.066 cv
48.801 218.203 49.082 218.27 49.414 218.266 cv
49.668 218.27 49.891 218.23 50.086 218.145 cv
50.277 218.066 50.445 217.945 50.586 217.789 cv
50.727 217.637 50.84 217.453 50.934 217.238 cv
51.02 217.023 51.094 216.785 51.152 216.523 cv
51.203 216.266 51.242 215.984 51.266 215.68 cv
51.285 215.375 51.293 215.059 51.297 214.727 cv
cp
f
28.105 159.602 mo
56.089 159.602 li
56.089 176.692 li
28.105 176.692 li
cp
0 0 0 0 cmyk
ef
34.484 172.504 mo
34.48 172.594 34.473 172.664 34.461 172.723 cv
34.445 172.785 34.426 172.836 34.406 172.867 cv
34.383 172.906 34.359 172.93 34.328 172.945 cv
34.297 172.961 34.266 172.969 34.238 172.969 cv
29.602 172.969 li
29.566 172.969 29.539 172.961 29.512 172.945 cv
29.484 172.93 29.457 172.906 29.434 172.867 cv
29.406 172.836 29.387 172.785 29.375 172.723 cv
29.359 172.664 29.352 172.594 29.355 172.504 cv
29.352 172.426 29.359 172.352 29.375 172.289 cv
29.387 172.23 29.402 172.184 29.426 172.145 cv
29.441 172.109 29.469 172.078 29.5 172.055 cv
29.531 172.035 29.563 172.027 29.602 172.023 cv
31.453 172.023 li
31.453 165.277 li
29.738 166.297 li
29.648 166.348 29.578 166.375 29.531 166.383 cv
29.477 166.391 29.434 166.383 29.402 166.352 cv
29.367 166.324 29.348 166.273 29.336 166.203 cv
29.324 166.137 29.316 166.051 29.32 165.941 cv
29.316 165.867 29.32 165.801 29.332 165.742 cv
29.336 165.691 29.348 165.645 29.363 165.605 cv
29.375 165.57 29.395 165.539 29.418 165.512 cv
29.441 165.484 29.473 165.457 29.52 165.43 cv
31.563 164.117 li
31.578 164.105 31.598 164.094 31.629 164.086 cv
31.652 164.078 31.688 164.07 31.734 164.059 cv
31.773 164.051 31.824 164.043 31.879 164.039 cv
31.934 164.039 32 164.039 32.086 164.035 cv
32.191 164.039 32.285 164.043 32.359 164.051 cv
32.43 164.059 32.484 164.074 32.531 164.09 cv
32.57 164.109 32.598 164.129 32.613 164.152 cv
32.621 164.18 32.629 164.203 32.633 164.227 cv
32.633 172.023 li
34.238 172.023 li
34.273 172.027 34.309 172.035 34.34 172.055 cv
34.371 172.078 34.395 172.109 34.418 172.145 cv
34.434 172.184 34.449 172.23 34.465 172.289 cv
34.473 172.352 34.48 172.426 34.484 172.504 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.711 164.605 mo
41.707 164.691 41.703 164.766 41.699 164.828 cv
41.691 164.898 41.684 164.961 41.672 165.02 cv
41.66 165.086 41.645 165.145 41.625 165.199 cv
41.602 165.258 41.578 165.32 41.555 165.379 cv
38.359 172.742 li
38.332 172.801 38.305 172.844 38.273 172.875 cv
38.238 172.91 38.195 172.937 38.141 172.957 cv
38.086 172.977 38.016 172.988 37.938 173 cv
37.852 173.004 37.754 173.008 37.637 173.012 cv
37.48 173.008 37.359 173 37.273 172.988 cv
37.188 172.973 37.125 172.957 37.086 172.926 cv
37.047 172.898 37.027 172.859 37.035 172.816 cv
37.035 172.773 37.051 172.723 37.082 172.66 cv
40.441 165.133 li
36.184 165.133 li
36.098 165.137 36.031 165.09 35.988 164.996 cv
35.945 164.906 35.926 164.777 35.926 164.613 cv
35.926 164.527 35.93 164.453 35.941 164.387 cv
35.953 164.324 35.969 164.27 35.992 164.227 cv
36.012 164.184 36.039 164.152 36.074 164.129 cv
36.105 164.109 36.145 164.098 36.184 164.098 cv
41.355 164.098 li
41.414 164.098 41.469 164.105 41.52 164.121 cv
41.566 164.137 41.602 164.164 41.629 164.203 cv
41.652 164.242 41.672 164.297 41.688 164.359 cv
41.699 164.426 41.707 164.508 41.711 164.605 cv
cp
f
44.801 172.223 mo
44.801 172.551 44.746 172.766 44.641 172.871 cv
44.531 172.977 44.336 173.027 44.055 173.031 cv
43.777 173.027 43.586 172.977 43.484 172.875 cv
43.375 172.77 43.324 172.559 43.328 172.242 cv
43.324 171.918 43.379 171.703 43.488 171.594 cv
43.594 171.488 43.789 171.434 44.074 171.434 cv
44.348 171.434 44.535 171.488 44.645 171.594 cv
44.746 171.699 44.801 171.91 44.801 172.223 cv
cp
f
52.168 170.117 mo
52.168 170.594 52.086 171.016 51.926 171.387 cv
51.766 171.758 51.539 172.07 51.25 172.324 cv
50.953 172.578 50.605 172.773 50.203 172.902 cv
49.797 173.035 49.348 173.098 48.855 173.098 cv
48.578 173.098 48.316 173.078 48.074 173.039 cv
47.824 173 47.605 172.953 47.418 172.898 cv
47.223 172.844 47.066 172.789 46.941 172.73 cv
46.816 172.68 46.738 172.637 46.707 172.602 cv
46.672 172.57 46.648 172.539 46.637 172.512 cv
46.621 172.484 46.605 172.453 46.598 172.41 cv
46.582 172.375 46.574 172.324 46.574 172.262 cv
46.566 172.203 46.566 172.133 46.566 172.051 cv
46.566 171.977 46.57 171.906 46.578 171.844 cv
46.586 171.781 46.598 171.73 46.617 171.691 cv
46.633 171.652 46.652 171.625 46.68 171.605 cv
46.703 171.59 46.734 171.582 46.766 171.578 cv
46.813 171.582 46.883 171.609 46.977 171.664 cv
47.07 171.723 47.199 171.785 47.363 171.852 cv
47.527 171.918 47.727 171.98 47.969 172.039 cv
48.203 172.098 48.488 172.125 48.824 172.125 cv
49.125 172.125 49.406 172.09 49.664 172.016 cv
49.918 171.945 50.141 171.832 50.328 171.676 cv
50.512 171.523 50.656 171.328 50.762 171.09 cv
50.867 170.855 50.918 170.566 50.922 170.227 cv
50.918 169.945 50.875 169.695 50.785 169.477 cv
50.695 169.258 50.559 169.078 50.375 168.934 cv
50.188 168.793 49.953 168.687 49.672 168.613 cv
49.387 168.543 49.047 168.504 48.66 168.504 cv
48.375 168.504 48.137 168.52 47.938 168.547 cv
47.734 168.578 47.547 168.594 47.375 168.59 cv
47.246 168.594 47.152 168.562 47.102 168.5 cv
47.043 168.441 47.016 168.328 47.02 168.156 cv
47.02 164.543 li
47.016 164.395 47.051 164.285 47.125 164.207 cv
47.191 164.137 47.293 164.098 47.43 164.098 cv
51.359 164.098 li
51.395 164.098 51.43 164.109 51.465 164.129 cv
51.496 164.152 51.523 164.184 51.551 164.223 cv
51.57 164.266 51.586 164.316 51.602 164.379 cv
51.609 164.445 51.617 164.523 51.621 164.605 cv
51.617 164.773 51.594 164.898 51.555 164.988 cv
51.508 165.082 51.449 165.129 51.371 165.125 cv
48.199 165.125 li
48.199 167.613 li
48.352 167.594 48.508 167.582 48.672 167.574 cv
48.828 167.57 49.016 167.566 49.23 167.566 cv
49.715 167.566 50.141 167.629 50.508 167.75 cv
50.871 167.871 51.176 168.043 51.426 168.262 cv
51.668 168.488 51.855 168.754 51.98 169.066 cv
52.105 169.383 52.168 169.734 52.168 170.117 cv
cp
f
28.105 113.48 mo
56.089 113.48 li
56.089 130.57 li
28.105 130.57 li
cp
0 0 0 0 cmyk
ef
34.465 126.312 mo
34.461 126.398 34.457 126.473 34.445 126.535 cv
34.434 126.602 34.418 126.656 34.398 126.695 cv
34.375 126.742 34.348 126.773 34.316 126.789 cv
34.281 126.812 34.242 126.82 34.203 126.82 cv
29.301 126.82 li
29.238 126.82 29.18 126.812 29.133 126.797 cv
29.082 126.781 29.043 126.758 29.008 126.719 cv
28.973 126.687 28.945 126.633 28.934 126.562 cv
28.914 126.492 28.906 126.406 28.91 126.305 cv
28.906 126.215 28.91 126.137 28.918 126.066 cv
28.922 126 28.938 125.941 28.965 125.887 cv
28.988 125.836 29.02 125.781 29.055 125.727 cv
29.09 125.676 29.133 125.621 29.191 125.559 cv
30.965 123.734 li
31.375 123.316 31.703 122.941 31.953 122.605 cv
32.199 122.277 32.391 121.973 32.523 121.695 cv
32.656 121.422 32.742 121.172 32.789 120.945 cv
32.828 120.723 32.852 120.512 32.852 120.316 cv
32.852 120.121 32.816 119.937 32.75 119.758 cv
32.684 119.586 32.59 119.43 32.465 119.293 cv
32.34 119.164 32.184 119.059 31.996 118.977 cv
31.809 118.902 31.59 118.863 31.344 118.859 cv
31.055 118.863 30.797 118.902 30.57 118.977 cv
30.34 119.059 30.141 119.145 29.969 119.23 cv
29.797 119.324 29.652 119.406 29.535 119.484 cv
29.418 119.562 29.332 119.602 29.281 119.602 cv
29.246 119.602 29.215 119.594 29.191 119.574 cv
29.16 119.559 29.141 119.527 29.125 119.484 cv
29.109 119.445 29.094 119.391 29.086 119.32 cv
29.074 119.254 29.07 119.172 29.074 119.074 cv
29.07 119.008 29.074 118.949 29.082 118.898 cv
29.086 118.848 29.094 118.805 29.105 118.766 cv
29.113 118.73 29.129 118.695 29.148 118.664 cv
29.168 118.633 29.203 118.594 29.262 118.543 cv
29.313 118.496 29.406 118.43 29.543 118.348 cv
29.676 118.266 29.848 118.187 30.051 118.105 cv
30.254 118.027 30.477 117.957 30.723 117.902 cv
30.965 117.848 31.223 117.82 31.496 117.82 cv
31.922 117.82 32.297 117.883 32.621 118.004 cv
32.941 118.125 33.207 118.289 33.422 118.5 cv
33.633 118.711 33.793 118.957 33.898 119.23 cv
34.004 119.512 34.059 119.809 34.059 120.121 cv
34.059 120.41 34.031 120.691 33.98 120.969 cv
33.93 121.254 33.824 121.559 33.664 121.883 cv
33.5 122.211 33.266 122.574 32.961 122.973 cv
32.652 123.375 32.246 123.836 31.742 124.352 cv
30.336 125.82 li
34.195 125.82 li
34.227 125.824 34.262 125.836 34.301 125.852 cv
34.332 125.875 34.363 125.906 34.391 125.945 cv
34.414 125.988 34.434 126.039 34.445 126.098 cv
34.457 126.164 34.461 126.234 34.465 126.312 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.875 122.363 mo
41.871 123.047 41.82 123.668 41.715 124.23 cv
41.605 124.793 41.426 125.277 41.18 125.68 cv
40.926 126.086 40.598 126.398 40.199 126.617 cv
39.793 126.84 39.301 126.949 38.715 126.949 cv
38.156 126.949 37.684 126.852 37.305 126.652 cv
36.922 126.457 36.617 126.164 36.383 125.777 cv
36.148 125.391 35.98 124.918 35.887 124.352 cv
35.785 123.789 35.738 123.141 35.738 122.406 cv
35.738 121.734 35.793 121.113 35.902 120.547 cv
36.012 119.984 36.188 119.5 36.438 119.094 cv
36.68 118.691 37.004 118.379 37.41 118.152 cv
37.809 117.934 38.305 117.82 38.895 117.82 cv
39.453 117.82 39.926 117.922 40.309 118.117 cv
40.691 118.32 40.996 118.613 41.23 118.996 cv
41.461 119.387 41.629 119.859 41.727 120.422 cv
41.824 120.984 41.871 121.633 41.875 122.363 cv
cp
40.668 122.445 mo
40.664 122.004 40.648 121.605 40.621 121.254 cv
40.586 120.902 40.539 120.594 40.48 120.324 cv
40.414 120.055 40.336 119.824 40.238 119.629 cv
40.141 119.437 40.023 119.277 39.887 119.148 cv
39.746 119.023 39.586 118.93 39.414 118.871 cv
39.234 118.816 39.039 118.789 38.824 118.785 cv
38.434 118.789 38.117 118.879 37.879 119.062 cv
37.633 119.246 37.441 119.5 37.305 119.816 cv
37.164 120.137 37.07 120.508 37.02 120.937 cv
36.969 121.367 36.945 121.832 36.945 122.324 cv
36.945 122.988 36.977 123.551 37.047 124.012 cv
37.113 124.48 37.223 124.859 37.375 125.148 cv
37.52 125.445 37.711 125.656 37.941 125.785 cv
38.172 125.922 38.453 125.988 38.785 125.984 cv
39.039 125.988 39.262 125.949 39.457 125.863 cv
39.648 125.785 39.816 125.664 39.957 125.508 cv
40.098 125.355 40.211 125.172 40.305 124.957 cv
40.391 124.742 40.465 124.504 40.523 124.242 cv
40.574 123.984 40.613 123.703 40.637 123.398 cv
40.656 123.094 40.664 122.777 40.668 122.445 cv
cp
f
44.801 126.074 mo
44.801 126.402 44.746 126.617 44.641 126.723 cv
44.531 126.828 44.336 126.879 44.055 126.883 cv
43.777 126.879 43.586 126.828 43.484 126.727 cv
43.375 126.621 43.324 126.41 43.328 126.094 cv
43.324 125.77 43.379 125.555 43.488 125.445 cv
43.594 125.34 43.789 125.285 44.074 125.285 cv
44.348 125.285 44.535 125.34 44.645 125.445 cv
44.746 125.551 44.801 125.762 44.801 126.074 cv
cp
f
52.504 122.363 mo
52.5 123.047 52.449 123.668 52.344 124.23 cv
52.234 124.793 52.055 125.277 51.809 125.68 cv
51.555 126.086 51.227 126.398 50.828 126.617 cv
50.422 126.84 49.93 126.949 49.344 126.949 cv
48.785 126.949 48.313 126.852 47.934 126.652 cv
47.551 126.457 47.246 126.164 47.012 125.777 cv
46.777 125.391 46.609 124.918 46.516 124.352 cv
46.414 123.789 46.367 123.141 46.367 122.406 cv
46.367 121.734 46.422 121.113 46.531 120.547 cv
46.641 119.984 46.816 119.5 47.066 119.094 cv
47.309 118.691 47.633 118.379 48.039 118.152 cv
48.438 117.934 48.934 117.82 49.523 117.82 cv
50.082 117.82 50.555 117.922 50.938 118.117 cv
51.32 118.32 51.625 118.613 51.859 118.996 cv
52.09 119.387 52.258 119.859 52.355 120.422 cv
52.453 120.984 52.5 121.633 52.504 122.363 cv
cp
51.297 122.445 mo
51.293 122.004 51.277 121.605 51.25 121.254 cv
51.215 120.902 51.168 120.594 51.109 120.324 cv
51.043 120.055 50.965 119.824 50.867 119.629 cv
50.77 119.437 50.652 119.277 50.516 119.148 cv
50.375 119.023 50.215 118.93 50.043 118.871 cv
49.863 118.816 49.668 118.789 49.453 118.785 cv
49.063 118.789 48.746 118.879 48.508 119.062 cv
48.262 119.246 48.07 119.5 47.934 119.816 cv
47.793 120.137 47.699 120.508 47.648 120.937 cv
47.598 121.367 47.574 121.832 47.574 122.324 cv
47.574 122.988 47.605 123.551 47.676 124.012 cv
47.742 124.48 47.852 124.859 48.004 125.148 cv
48.148 125.445 48.34 125.656 48.57 125.785 cv
48.801 125.922 49.082 125.988 49.414 125.984 cv
49.668 125.988 49.891 125.949 50.086 125.863 cv
50.277 125.785 50.445 125.664 50.586 125.508 cv
50.727 125.355 50.84 125.172 50.934 124.957 cv
51.02 124.742 51.094 124.504 51.152 124.242 cv
51.203 123.984 51.242 123.703 51.266 123.398 cv
51.285 123.094 51.293 122.777 51.297 122.445 cv
cp
f
28.105 67.352 mo
56.089 67.352 li
56.089 84.442 li
28.105 84.442 li
cp
0 0 0 0 cmyk
ef
34.465 80.184 mo
34.461 80.27 34.457 80.344 34.445 80.406 cv
34.434 80.473 34.418 80.527 34.398 80.566 cv
34.375 80.613 34.348 80.645 34.316 80.66 cv
34.281 80.684 34.242 80.691 34.203 80.691 cv
29.301 80.691 li
29.238 80.691 29.18 80.684 29.133 80.668 cv
29.082 80.652 29.043 80.629 29.008 80.59 cv
28.973 80.559 28.945 80.504 28.934 80.434 cv
28.914 80.363 28.906 80.277 28.91 80.176 cv
28.906 80.086 28.91 80.008 28.918 79.937 cv
28.922 79.871 28.938 79.812 28.965 79.758 cv
28.988 79.707 29.02 79.652 29.055 79.598 cv
29.09 79.547 29.133 79.492 29.191 79.43 cv
30.965 77.605 li
31.375 77.187 31.703 76.812 31.953 76.477 cv
32.199 76.148 32.391 75.844 32.523 75.566 cv
32.656 75.293 32.742 75.043 32.789 74.816 cv
32.828 74.594 32.852 74.383 32.852 74.187 cv
32.852 73.992 32.816 73.809 32.75 73.629 cv
32.684 73.457 32.59 73.301 32.465 73.164 cv
32.34 73.035 32.184 72.93 31.996 72.848 cv
31.809 72.773 31.59 72.734 31.344 72.73 cv
31.055 72.734 30.797 72.773 30.57 72.848 cv
30.34 72.93 30.141 73.016 29.969 73.102 cv
29.797 73.195 29.652 73.277 29.535 73.355 cv
29.418 73.434 29.332 73.473 29.281 73.473 cv
29.246 73.473 29.215 73.465 29.191 73.445 cv
29.16 73.43 29.141 73.398 29.125 73.355 cv
29.109 73.316 29.094 73.262 29.086 73.191 cv
29.074 73.125 29.07 73.043 29.074 72.945 cv
29.07 72.879 29.074 72.82 29.082 72.77 cv
29.086 72.719 29.094 72.676 29.105 72.637 cv
29.113 72.602 29.129 72.566 29.148 72.535 cv
29.168 72.504 29.203 72.465 29.262 72.414 cv
29.313 72.367 29.406 72.301 29.543 72.219 cv
29.676 72.137 29.848 72.059 30.051 71.977 cv
30.254 71.898 30.477 71.828 30.723 71.773 cv
30.965 71.719 31.223 71.691 31.496 71.691 cv
31.922 71.691 32.297 71.754 32.621 71.875 cv
32.941 71.996 33.207 72.16 33.422 72.371 cv
33.633 72.582 33.793 72.828 33.898 73.102 cv
34.004 73.383 34.059 73.68 34.059 73.992 cv
34.059 74.281 34.031 74.562 33.98 74.84 cv
33.93 75.125 33.824 75.43 33.664 75.754 cv
33.5 76.082 33.266 76.445 32.961 76.844 cv
32.652 77.246 32.246 77.707 31.742 78.223 cv
30.336 79.691 li
34.195 79.691 li
34.227 79.695 34.262 79.707 34.301 79.723 cv
34.332 79.746 34.363 79.777 34.391 79.816 cv
34.414 79.859 34.434 79.91 34.445 79.969 cv
34.457 80.035 34.461 80.105 34.465 80.184 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.582 80.184 mo
41.578 80.27 41.574 80.344 41.563 80.406 cv
41.551 80.473 41.535 80.527 41.516 80.566 cv
41.492 80.613 41.465 80.645 41.434 80.66 cv
41.398 80.684 41.359 80.691 41.32 80.691 cv
36.418 80.691 li
36.355 80.691 36.297 80.684 36.25 80.668 cv
36.199 80.652 36.16 80.629 36.125 80.59 cv
36.09 80.559 36.063 80.504 36.051 80.434 cv
36.031 80.363 36.023 80.277 36.027 80.176 cv
36.023 80.086 36.027 80.008 36.035 79.937 cv
36.039 79.871 36.055 79.812 36.082 79.758 cv
36.105 79.707 36.137 79.652 36.172 79.598 cv
36.207 79.547 36.25 79.492 36.309 79.43 cv
38.082 77.605 li
38.492 77.187 38.82 76.812 39.07 76.477 cv
39.316 76.148 39.508 75.844 39.641 75.566 cv
39.773 75.293 39.859 75.043 39.906 74.816 cv
39.945 74.594 39.969 74.383 39.969 74.187 cv
39.969 73.992 39.934 73.809 39.867 73.629 cv
39.801 73.457 39.707 73.301 39.582 73.164 cv
39.457 73.035 39.301 72.93 39.113 72.848 cv
38.926 72.773 38.707 72.734 38.461 72.73 cv
38.172 72.734 37.914 72.773 37.688 72.848 cv
37.457 72.93 37.258 73.016 37.086 73.102 cv
36.914 73.195 36.77 73.277 36.652 73.355 cv
36.535 73.434 36.449 73.473 36.398 73.473 cv
36.363 73.473 36.332 73.465 36.309 73.445 cv
36.277 73.43 36.258 73.398 36.242 73.355 cv
36.227 73.316 36.211 73.262 36.203 73.191 cv
36.191 73.125 36.188 73.043 36.191 72.945 cv
36.188 72.879 36.191 72.82 36.199 72.77 cv
36.203 72.719 36.211 72.676 36.223 72.637 cv
36.23 72.602 36.246 72.566 36.266 72.535 cv
36.285 72.504 36.32 72.465 36.379 72.414 cv
36.43 72.367 36.523 72.301 36.66 72.219 cv
36.793 72.137 36.965 72.059 37.168 71.977 cv
37.371 71.898 37.594 71.828 37.84 71.773 cv
38.082 71.719 38.34 71.691 38.613 71.691 cv
39.039 71.691 39.414 71.754 39.738 71.875 cv
40.059 71.996 40.324 72.16 40.539 72.371 cv
40.75 72.582 40.91 72.828 41.016 73.102 cv
41.121 73.383 41.176 73.68 41.176 73.992 cv
41.176 74.281 41.148 74.562 41.098 74.84 cv
41.047 75.125 40.941 75.43 40.781 75.754 cv
40.617 76.082 40.383 76.445 40.078 76.844 cv
39.77 77.246 39.363 77.707 38.859 78.223 cv
37.453 79.691 li
41.313 79.691 li
41.344 79.695 41.379 79.707 41.418 79.723 cv
41.449 79.746 41.48 79.777 41.508 79.816 cv
41.531 79.859 41.551 79.91 41.563 79.969 cv
41.574 80.035 41.578 80.105 41.582 80.184 cv
cp
f
44.801 79.945 mo
44.801 80.273 44.746 80.488 44.641 80.594 cv
44.531 80.699 44.336 80.75 44.055 80.754 cv
43.777 80.75 43.586 80.699 43.484 80.598 cv
43.375 80.492 43.324 80.281 43.328 79.965 cv
43.324 79.641 43.379 79.426 43.488 79.316 cv
43.594 79.211 43.789 79.156 44.074 79.156 cv
44.348 79.156 44.535 79.211 44.645 79.316 cv
44.746 79.422 44.801 79.633 44.801 79.945 cv
cp
f
52.168 77.84 mo
52.168 78.316 52.086 78.738 51.926 79.109 cv
51.766 79.48 51.539 79.793 51.25 80.047 cv
50.953 80.301 50.605 80.496 50.203 80.625 cv
49.797 80.758 49.348 80.82 48.855 80.82 cv
48.578 80.82 48.316 80.801 48.074 80.762 cv
47.824 80.723 47.605 80.676 47.418 80.621 cv
47.223 80.566 47.066 80.512 46.941 80.453 cv
46.816 80.402 46.738 80.359 46.707 80.324 cv
46.672 80.293 46.648 80.262 46.637 80.234 cv
46.621 80.207 46.605 80.176 46.598 80.133 cv
46.582 80.098 46.574 80.047 46.574 79.984 cv
46.566 79.926 46.566 79.855 46.566 79.773 cv
46.566 79.699 46.57 79.629 46.578 79.566 cv
46.586 79.504 46.598 79.453 46.617 79.414 cv
46.633 79.375 46.652 79.348 46.68 79.328 cv
46.703 79.312 46.734 79.305 46.766 79.301 cv
46.813 79.305 46.883 79.332 46.977 79.387 cv
47.07 79.445 47.199 79.508 47.363 79.574 cv
47.527 79.641 47.727 79.703 47.969 79.762 cv
48.203 79.82 48.488 79.848 48.824 79.848 cv
49.125 79.848 49.406 79.812 49.664 79.738 cv
49.918 79.668 50.141 79.555 50.328 79.398 cv
50.512 79.246 50.656 79.051 50.762 78.812 cv
50.867 78.578 50.918 78.289 50.922 77.949 cv
50.918 77.668 50.875 77.418 50.785 77.199 cv
50.695 76.98 50.559 76.801 50.375 76.656 cv
50.188 76.516 49.953 76.41 49.672 76.336 cv
49.387 76.266 49.047 76.227 48.66 76.227 cv
48.375 76.227 48.137 76.242 47.938 76.27 cv
47.734 76.301 47.547 76.316 47.375 76.312 cv
47.246 76.316 47.152 76.285 47.102 76.223 cv
47.043 76.164 47.016 76.051 47.02 75.879 cv
47.02 72.266 li
47.016 72.117 47.051 72.008 47.125 71.93 cv
47.191 71.859 47.293 71.82 47.43 71.82 cv
51.359 71.82 li
51.395 71.82 51.43 71.832 51.465 71.852 cv
51.496 71.875 51.523 71.906 51.551 71.945 cv
51.57 71.988 51.586 72.039 51.602 72.102 cv
51.609 72.168 51.617 72.246 51.621 72.328 cv
51.617 72.496 51.594 72.621 51.555 72.711 cv
51.508 72.805 51.449 72.852 51.371 72.848 cv
48.199 72.848 li
48.199 75.336 li
48.352 75.316 48.508 75.305 48.672 75.297 cv
48.828 75.293 49.016 75.289 49.23 75.289 cv
49.715 75.289 50.141 75.352 50.508 75.473 cv
50.871 75.594 51.176 75.766 51.426 75.984 cv
51.668 76.211 51.855 76.477 51.98 76.789 cv
52.105 77.105 52.168 77.457 52.168 77.84 cv
cp
f
28.105 21.219 mo
56.089 21.219 li
56.089 38.309 li
28.105 38.309 li
cp
0 0 0 0 cmyk
ef
34.465 34.051 mo
34.461 34.137 34.457 34.211 34.445 34.273 cv
34.434 34.34 34.418 34.395 34.398 34.434 cv
34.375 34.48 34.348 34.512 34.316 34.527 cv
34.281 34.551 34.242 34.559 34.203 34.559 cv
29.301 34.559 li
29.238 34.559 29.18 34.551 29.133 34.535 cv
29.082 34.52 29.043 34.496 29.008 34.457 cv
28.973 34.426 28.945 34.371 28.934 34.301 cv
28.914 34.23 28.906 34.145 28.91 34.043 cv
28.906 33.953 28.91 33.875 28.918 33.805 cv
28.922 33.738 28.938 33.68 28.965 33.625 cv
28.988 33.574 29.02 33.52 29.055 33.465 cv
29.09 33.414 29.133 33.359 29.191 33.297 cv
30.965 31.473 li
31.375 31.055 31.703 30.68 31.953 30.344 cv
32.199 30.016 32.391 29.711 32.523 29.434 cv
32.656 29.16 32.742 28.91 32.789 28.684 cv
32.828 28.461 32.852 28.25 32.852 28.055 cv
32.852 27.859 32.816 27.676 32.75 27.496 cv
32.684 27.324 32.59 27.168 32.465 27.031 cv
32.34 26.902 32.184 26.797 31.996 26.715 cv
31.809 26.641 31.59 26.602 31.344 26.598 cv
31.055 26.602 30.797 26.641 30.57 26.715 cv
30.34 26.797 30.141 26.883 29.969 26.969 cv
29.797 27.062 29.652 27.145 29.535 27.223 cv
29.418 27.301 29.332 27.34 29.281 27.34 cv
29.246 27.34 29.215 27.332 29.191 27.312 cv
29.16 27.297 29.141 27.266 29.125 27.223 cv
29.109 27.184 29.094 27.129 29.086 27.059 cv
29.074 26.992 29.07 26.91 29.074 26.812 cv
29.07 26.746 29.074 26.687 29.082 26.637 cv
29.086 26.586 29.094 26.543 29.105 26.504 cv
29.113 26.469 29.129 26.434 29.148 26.402 cv
29.168 26.371 29.203 26.332 29.262 26.281 cv
29.313 26.234 29.406 26.168 29.543 26.086 cv
29.676 26.004 29.848 25.926 30.051 25.844 cv
30.254 25.766 30.477 25.695 30.723 25.641 cv
30.965 25.586 31.223 25.559 31.496 25.559 cv
31.922 25.559 32.297 25.621 32.621 25.742 cv
32.941 25.863 33.207 26.027 33.422 26.238 cv
33.633 26.449 33.793 26.695 33.898 26.969 cv
34.004 27.25 34.059 27.547 34.059 27.859 cv
34.059 28.148 34.031 28.43 33.98 28.707 cv
33.93 28.992 33.824 29.297 33.664 29.621 cv
33.5 29.949 33.266 30.312 32.961 30.711 cv
32.652 31.113 32.246 31.574 31.742 32.09 cv
30.336 33.559 li
34.195 33.559 li
34.227 33.562 34.262 33.574 34.301 33.59 cv
34.332 33.613 34.363 33.645 34.391 33.684 cv
34.414 33.727 34.434 33.777 34.445 33.836 cv
34.457 33.902 34.461 33.973 34.465 34.051 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.539 31.707 mo
41.539 32.184 41.457 32.605 41.297 32.977 cv
41.137 33.348 40.91 33.66 40.621 33.914 cv
40.324 34.168 39.977 34.363 39.574 34.492 cv
39.168 34.625 38.719 34.687 38.227 34.687 cv
37.949 34.687 37.688 34.668 37.445 34.629 cv
37.195 34.59 36.977 34.543 36.789 34.488 cv
36.594 34.434 36.438 34.379 36.313 34.32 cv
36.188 34.27 36.109 34.227 36.078 34.191 cv
36.043 34.16 36.02 34.129 36.008 34.102 cv
35.992 34.074 35.977 34.043 35.969 34 cv
35.953 33.965 35.945 33.914 35.945 33.852 cv
35.938 33.793 35.938 33.723 35.938 33.641 cv
35.938 33.566 35.941 33.496 35.949 33.434 cv
35.957 33.371 35.969 33.32 35.988 33.281 cv
36.004 33.242 36.023 33.215 36.051 33.195 cv
36.074 33.18 36.105 33.172 36.137 33.168 cv
36.184 33.172 36.254 33.199 36.348 33.254 cv
36.441 33.312 36.57 33.375 36.734 33.441 cv
36.898 33.508 37.098 33.57 37.34 33.629 cv
37.574 33.687 37.859 33.715 38.195 33.715 cv
38.496 33.715 38.777 33.68 39.035 33.605 cv
39.289 33.535 39.512 33.422 39.699 33.266 cv
39.883 33.113 40.027 32.918 40.133 32.68 cv
40.238 32.445 40.289 32.156 40.293 31.816 cv
40.289 31.535 40.246 31.285 40.156 31.066 cv
40.066 30.848 39.93 30.668 39.746 30.523 cv
39.559 30.383 39.324 30.277 39.043 30.203 cv
38.758 30.133 38.418 30.094 38.031 30.094 cv
37.746 30.094 37.508 30.109 37.309 30.137 cv
37.105 30.168 36.918 30.184 36.746 30.18 cv
36.617 30.184 36.523 30.152 36.473 30.09 cv
36.414 30.031 36.387 29.918 36.391 29.746 cv
36.391 26.133 li
36.387 25.984 36.422 25.875 36.496 25.797 cv
36.563 25.727 36.664 25.687 36.801 25.687 cv
40.73 25.687 li
40.766 25.687 40.801 25.699 40.836 25.719 cv
40.867 25.742 40.895 25.773 40.922 25.812 cv
40.941 25.855 40.957 25.906 40.973 25.969 cv
40.98 26.035 40.988 26.113 40.992 26.195 cv
40.988 26.363 40.965 26.488 40.926 26.578 cv
40.879 26.672 40.82 26.719 40.742 26.715 cv
37.57 26.715 li
37.57 29.203 li
37.723 29.184 37.879 29.172 38.043 29.164 cv
38.199 29.16 38.387 29.156 38.602 29.156 cv
39.086 29.156 39.512 29.219 39.879 29.34 cv
40.242 29.461 40.547 29.633 40.797 29.852 cv
41.039 30.078 41.227 30.344 41.352 30.656 cv
41.477 30.973 41.539 31.324 41.539 31.707 cv
cp
f
44.801 33.812 mo
44.801 34.141 44.746 34.355 44.641 34.461 cv
44.531 34.566 44.336 34.617 44.055 34.621 cv
43.777 34.617 43.586 34.566 43.484 34.465 cv
43.375 34.359 43.324 34.148 43.328 33.832 cv
43.324 33.508 43.379 33.293 43.488 33.184 cv
43.594 33.078 43.789 33.023 44.074 33.023 cv
44.348 33.023 44.535 33.078 44.645 33.184 cv
44.746 33.289 44.801 33.5 44.801 33.812 cv
cp
f
52.504 30.102 mo
52.5 30.785 52.449 31.406 52.344 31.969 cv
52.234 32.531 52.055 33.016 51.809 33.418 cv
51.555 33.824 51.227 34.137 50.828 34.355 cv
50.422 34.578 49.93 34.687 49.344 34.687 cv
48.785 34.687 48.313 34.59 47.934 34.391 cv
47.551 34.195 47.246 33.902 47.012 33.516 cv
46.777 33.129 46.609 32.656 46.516 32.09 cv
46.414 31.527 46.367 30.879 46.367 30.145 cv
46.367 29.473 46.422 28.852 46.531 28.285 cv
46.641 27.723 46.816 27.238 47.066 26.832 cv
47.309 26.43 47.633 26.117 48.039 25.891 cv
48.438 25.672 48.934 25.559 49.523 25.559 cv
50.082 25.559 50.555 25.66 50.938 25.855 cv
51.32 26.059 51.625 26.352 51.859 26.734 cv
52.09 27.125 52.258 27.598 52.355 28.16 cv
52.453 28.723 52.5 29.371 52.504 30.102 cv
cp
51.297 30.184 mo
51.293 29.742 51.277 29.344 51.25 28.992 cv
51.215 28.641 51.168 28.332 51.109 28.062 cv
51.043 27.793 50.965 27.562 50.867 27.367 cv
50.77 27.176 50.652 27.016 50.516 26.887 cv
50.375 26.762 50.215 26.668 50.043 26.609 cv
49.863 26.555 49.668 26.527 49.453 26.523 cv
49.063 26.527 48.746 26.617 48.508 26.801 cv
48.262 26.984 48.07 27.238 47.934 27.555 cv
47.793 27.875 47.699 28.246 47.648 28.676 cv
47.598 29.105 47.574 29.57 47.574 30.062 cv
47.574 30.727 47.605 31.289 47.676 31.75 cv
47.742 32.219 47.852 32.598 48.004 32.887 cv
48.148 33.184 48.34 33.395 48.57 33.523 cv
48.801 33.66 49.082 33.727 49.414 33.723 cv
49.668 33.727 49.891 33.687 50.086 33.602 cv
50.277 33.523 50.445 33.402 50.586 33.246 cv
50.727 33.094 50.84 32.91 50.934 32.695 cv
51.02 32.48 51.094 32.242 51.152 31.98 cv
51.203 31.723 51.242 31.441 51.266 31.137 cv
51.285 30.832 51.293 30.516 51.297 30.184 cv
cp
f
71.895 513.664 mo
71.891 513.754 71.883 513.824 71.871 513.883 cv
71.855 513.945 71.836 513.996 71.816 514.027 cv
71.793 514.066 71.77 514.09 71.738 514.105 cv
71.707 514.121 71.676 514.129 71.648 514.129 cv
67.012 514.129 li
66.977 514.129 66.949 514.121 66.922 514.105 cv
66.895 514.09 66.867 514.066 66.844 514.027 cv
66.816 513.996 66.797 513.945 66.785 513.883 cv
66.77 513.824 66.762 513.754 66.766 513.664 cv
66.762 513.586 66.77 513.512 66.785 513.449 cv
66.797 513.391 66.813 513.344 66.836 513.305 cv
66.852 513.27 66.879 513.238 66.91 513.215 cv
66.941 513.195 66.973 513.187 67.012 513.184 cv
68.863 513.184 li
68.863 506.437 li
67.148 507.457 li
67.059 507.508 66.988 507.535 66.941 507.543 cv
66.887 507.551 66.844 507.543 66.813 507.512 cv
66.777 507.484 66.758 507.434 66.746 507.363 cv
66.734 507.297 66.727 507.211 66.73 507.102 cv
66.727 507.027 66.73 506.961 66.742 506.902 cv
66.746 506.852 66.758 506.805 66.773 506.766 cv
66.785 506.73 66.805 506.699 66.828 506.672 cv
66.852 506.645 66.883 506.617 66.93 506.59 cv
68.973 505.277 li
68.988 505.266 69.008 505.254 69.039 505.246 cv
69.063 505.238 69.098 505.23 69.145 505.219 cv
69.184 505.211 69.234 505.203 69.289 505.199 cv
69.344 505.199 69.41 505.199 69.496 505.195 cv
69.602 505.199 69.695 505.203 69.77 505.211 cv
69.84 505.219 69.895 505.234 69.941 505.25 cv
69.98 505.27 70.008 505.289 70.023 505.312 cv
70.031 505.34 70.039 505.363 70.043 505.387 cv
70.043 513.184 li
71.648 513.184 li
71.684 513.187 71.719 513.195 71.75 513.215 cv
71.781 513.238 71.805 513.27 71.828 513.305 cv
71.844 513.344 71.859 513.391 71.875 513.449 cv
71.883 513.512 71.891 513.586 71.895 513.664 cv
cp
f
146.066 513.621 mo
146.063 513.707 146.059 513.781 146.047 513.844 cv
146.035 513.91 146.02 513.965 146 514.004 cv
145.977 514.051 145.949 514.082 145.918 514.098 cv
145.883 514.121 145.844 514.129 145.805 514.129 cv
140.902 514.129 li
140.84 514.129 140.781 514.121 140.734 514.105 cv
140.684 514.09 140.645 514.066 140.609 514.027 cv
140.574 513.996 140.547 513.941 140.535 513.871 cv
140.516 513.801 140.508 513.715 140.512 513.613 cv
140.508 513.523 140.512 513.445 140.52 513.375 cv
140.523 513.309 140.539 513.25 140.566 513.195 cv
140.59 513.145 140.621 513.09 140.656 513.035 cv
140.691 512.984 140.734 512.93 140.793 512.867 cv
142.566 511.043 li
142.977 510.625 143.305 510.25 143.555 509.914 cv
143.801 509.586 143.992 509.281 144.125 509.004 cv
144.258 508.73 144.344 508.48 144.391 508.254 cv
144.43 508.031 144.453 507.82 144.453 507.625 cv
144.453 507.43 144.418 507.246 144.352 507.066 cv
144.285 506.895 144.191 506.738 144.066 506.602 cv
143.941 506.473 143.785 506.367 143.598 506.285 cv
143.41 506.211 143.191 506.172 142.945 506.168 cv
142.656 506.172 142.398 506.211 142.172 506.285 cv
141.941 506.367 141.742 506.453 141.57 506.539 cv
141.398 506.633 141.254 506.715 141.137 506.793 cv
141.02 506.871 140.934 506.91 140.883 506.91 cv
140.848 506.91 140.816 506.902 140.793 506.883 cv
140.762 506.867 140.742 506.836 140.727 506.793 cv
140.711 506.754 140.695 506.699 140.688 506.629 cv
140.676 506.562 140.672 506.48 140.676 506.383 cv
140.672 506.316 140.676 506.258 140.684 506.207 cv
140.688 506.156 140.695 506.113 140.707 506.074 cv
140.715 506.039 140.73 506.004 140.75 505.973 cv
140.77 505.941 140.805 505.902 140.863 505.852 cv
140.914 505.805 141.008 505.738 141.145 505.656 cv
141.277 505.574 141.449 505.496 141.652 505.414 cv
141.855 505.336 142.078 505.266 142.324 505.211 cv
142.566 505.156 142.824 505.129 143.098 505.129 cv
143.523 505.129 143.898 505.191 144.223 505.312 cv
144.543 505.434 144.809 505.598 145.023 505.809 cv
145.234 506.02 145.395 506.266 145.5 506.539 cv
145.605 506.82 145.66 507.117 145.66 507.43 cv
145.66 507.719 145.633 508 145.582 508.277 cv
145.531 508.562 145.426 508.867 145.266 509.191 cv
145.102 509.52 144.867 509.883 144.563 510.281 cv
144.254 510.684 143.848 511.145 143.344 511.66 cv
141.938 513.129 li
145.797 513.129 li
145.828 513.133 145.863 513.145 145.902 513.16 cv
145.934 513.184 145.965 513.215 145.992 513.254 cv
146.016 513.297 146.035 513.348 146.047 513.406 cv
146.059 513.473 146.063 513.543 146.066 513.621 cv
cp
f
220.621 511.605 mo
220.617 511.758 220.594 511.879 220.551 511.965 cv
220.504 512.055 220.441 512.098 220.359 512.094 cv
219.359 512.094 li
219.359 513.957 li
219.359 513.996 219.348 514.027 219.332 514.051 cv
219.309 514.078 219.277 514.098 219.234 514.117 cv
219.184 514.133 219.121 514.145 219.051 514.156 cv
218.973 514.164 218.879 514.168 218.762 514.172 cv
218.645 514.168 218.547 514.164 218.477 514.156 cv
218.398 514.145 218.34 514.133 218.297 514.117 cv
218.25 514.098 218.219 514.078 218.203 514.051 cv
218.184 514.027 218.176 513.996 218.18 513.957 cv
218.18 512.094 li
214.551 512.094 li
214.492 512.098 214.449 512.09 214.414 512.074 cv
214.379 512.062 214.344 512.035 214.316 511.996 cv
214.285 511.961 214.266 511.91 214.254 511.84 cv
214.242 511.773 214.238 511.684 214.238 511.57 cv
214.238 511.488 214.238 511.41 214.246 511.34 cv
214.246 511.27 214.258 511.207 214.273 511.152 cv
214.285 511.098 214.301 511.043 214.328 510.988 cv
214.348 510.934 214.375 510.879 214.41 510.816 cv
217.57 505.43 li
217.59 505.395 217.625 505.363 217.672 505.336 cv
217.715 505.309 217.77 505.285 217.844 505.266 cv
217.91 505.25 217.996 505.238 218.102 505.227 cv
218.203 505.223 218.324 505.219 218.465 505.215 cv
218.613 505.219 218.75 505.223 218.867 505.234 cv
218.98 505.246 219.07 505.262 219.145 505.277 cv
219.211 505.297 219.266 505.32 219.305 505.352 cv
219.34 505.383 219.359 505.418 219.359 505.457 cv
219.359 511.121 li
220.359 511.121 li
220.434 511.125 220.496 511.164 220.547 511.242 cv
220.594 511.324 220.617 511.445 220.621 511.605 cv
cp
218.18 506.254 mo
218.168 506.254 li
215.316 511.121 li
218.18 511.121 li
cp
f
294.684 511.258 mo
294.684 511.648 294.621 512.027 294.504 512.387 cv
294.379 512.754 294.195 513.07 293.953 513.344 cv
293.703 513.621 293.391 513.844 293.016 514.008 cv
292.633 514.176 292.188 514.258 291.672 514.258 cv
291.301 514.258 290.973 514.215 290.691 514.121 cv
290.406 514.035 290.16 513.902 289.949 513.73 cv
289.738 513.562 289.563 513.355 289.426 513.109 cv
289.285 512.863 289.172 512.582 289.09 512.266 cv
289.004 511.953 288.945 511.609 288.91 511.23 cv
288.871 510.859 288.852 510.457 288.855 510.023 cv
288.852 509.645 288.871 509.262 288.914 508.871 cv
288.953 508.488 289.027 508.113 289.133 507.746 cv
289.238 507.387 289.383 507.047 289.563 506.73 cv
289.742 506.414 289.969 506.137 290.242 505.902 cv
290.516 505.668 290.84 505.48 291.219 505.34 cv
291.598 505.203 292.039 505.137 292.543 505.133 cv
292.711 505.137 292.883 505.145 293.055 505.164 cv
293.227 505.187 293.387 505.219 293.535 505.25 cv
293.684 505.289 293.805 505.324 293.906 505.363 cv
294.004 505.402 294.07 505.437 294.105 505.461 cv
294.133 505.488 294.156 505.516 294.176 505.543 cv
294.191 505.574 294.207 505.605 294.215 505.641 cv
294.223 505.676 294.227 505.715 294.234 505.758 cv
294.234 505.801 294.238 505.855 294.242 505.918 cv
294.238 506.004 294.238 506.074 294.238 506.129 cv
294.234 506.191 294.223 506.238 294.211 506.273 cv
294.191 506.312 294.172 506.34 294.148 506.355 cv
294.121 506.375 294.09 506.383 294.051 506.383 cv
294 506.383 293.93 506.367 293.844 506.336 cv
293.754 506.305 293.648 506.27 293.527 506.227 cv
293.402 506.191 293.254 506.156 293.078 506.121 cv
292.902 506.094 292.699 506.078 292.469 506.074 cv
292.039 506.078 291.672 506.164 291.367 506.336 cv
291.063 506.508 290.813 506.742 290.617 507.035 cv
290.422 507.328 290.277 507.668 290.188 508.051 cv
290.09 508.441 290.035 508.844 290.027 509.262 cv
290.145 509.195 290.281 509.129 290.43 509.059 cv
290.578 508.992 290.738 508.93 290.914 508.871 cv
291.09 508.82 291.277 508.773 291.473 508.738 cv
291.668 508.707 291.879 508.691 292.105 508.687 cv
292.582 508.691 292.984 508.758 293.316 508.883 cv
293.645 509.016 293.91 509.195 294.117 509.426 cv
294.316 509.656 294.461 509.926 294.551 510.238 cv
294.637 510.551 294.684 510.891 294.684 511.258 cv
cp
293.488 511.367 mo
293.488 511.105 293.461 510.863 293.41 510.645 cv
293.355 510.43 293.266 510.246 293.145 510.09 cv
293.02 509.941 292.855 509.824 292.652 509.742 cv
292.441 509.66 292.188 509.617 291.891 509.617 cv
291.719 509.617 291.551 509.633 291.383 509.664 cv
291.211 509.695 291.047 509.738 290.891 509.785 cv
290.73 509.84 290.582 509.902 290.441 509.973 cv
290.297 510.047 290.164 510.121 290.047 510.199 cv
290.043 510.793 290.082 511.289 290.16 511.684 cv
290.234 512.082 290.344 512.398 290.488 512.637 cv
290.633 512.879 290.813 513.051 291.027 513.152 cv
291.242 513.258 291.492 513.309 291.781 513.305 cv
292.07 513.309 292.324 513.254 292.539 513.141 cv
292.754 513.035 292.93 512.887 293.074 512.699 cv
293.215 512.516 293.32 512.309 293.387 512.078 cv
293.453 511.848 293.488 511.613 293.488 511.367 cv
cp
f
368.84 511.852 mo
368.84 512.238 368.77 512.582 368.633 512.879 cv
368.496 513.184 368.301 513.434 368.043 513.637 cv
367.785 513.844 367.465 514 367.086 514.102 cv
366.703 514.207 366.27 514.258 365.785 514.258 cv
365.324 514.258 364.914 514.211 364.555 514.117 cv
364.191 514.023 363.887 513.883 363.637 513.691 cv
363.387 513.508 363.195 513.277 363.063 513 cv
362.93 512.727 362.863 512.414 362.863 512.059 cv
362.863 511.785 362.906 511.527 363 511.293 cv
363.086 511.059 363.219 510.844 363.395 510.648 cv
363.563 510.453 363.773 510.27 364.027 510.094 cv
364.277 509.926 364.563 509.762 364.879 509.605 cv
364.605 509.465 364.363 509.316 364.152 509.156 cv
363.941 509 363.762 508.828 363.617 508.641 cv
363.469 508.457 363.359 508.262 363.285 508.051 cv
363.207 507.844 363.168 507.613 363.172 507.363 cv
363.168 507.055 363.223 506.762 363.34 506.488 cv
363.449 506.219 363.621 505.984 363.848 505.781 cv
364.074 505.582 364.359 505.422 364.711 505.305 cv
365.055 505.187 365.465 505.129 365.934 505.129 cv
366.379 505.129 366.766 505.184 367.094 505.289 cv
367.422 505.398 367.691 505.543 367.902 505.727 cv
368.113 505.914 368.27 506.133 368.375 506.383 cv
368.473 506.633 368.523 506.902 368.527 507.191 cv
368.523 507.426 368.484 507.652 368.414 507.863 cv
368.336 508.082 368.227 508.285 368.078 508.473 cv
367.93 508.668 367.75 508.848 367.539 509.012 cv
367.328 509.184 367.086 509.34 366.813 509.48 cv
367.133 509.645 367.418 509.809 367.676 509.977 cv
367.926 510.145 368.141 510.324 368.316 510.52 cv
368.484 510.715 368.613 510.922 368.707 511.137 cv
368.793 511.355 368.84 511.594 368.84 511.852 cv
cp
367.359 507.301 mo
367.355 507.113 367.324 506.937 367.258 506.781 cv
367.191 506.625 367.094 506.492 366.969 506.383 cv
366.84 506.273 366.68 506.191 366.492 506.133 cv
366.297 506.078 366.082 506.051 365.844 506.047 cv
365.348 506.051 364.973 506.16 364.723 506.383 cv
364.465 506.609 364.34 506.918 364.344 507.301 cv
364.34 507.48 364.371 507.645 364.434 507.797 cv
364.496 507.953 364.59 508.098 364.723 508.234 cv
364.848 508.371 365.012 508.504 365.215 508.633 cv
365.41 508.766 365.648 508.902 365.926 509.043 cv
366.387 508.809 366.742 508.547 366.988 508.254 cv
367.234 507.969 367.355 507.652 367.359 507.301 cv
cp
367.648 511.977 mo
367.645 511.77 367.605 511.578 367.531 511.406 cv
367.449 511.238 367.332 511.078 367.176 510.926 cv
367.02 510.777 366.82 510.633 366.586 510.492 cv
366.348 510.355 366.078 510.211 365.77 510.059 cv
365.48 510.203 365.227 510.344 365.012 510.484 cv
364.793 510.625 364.613 510.773 364.477 510.922 cv
364.336 511.078 364.23 511.234 364.16 511.398 cv
364.086 511.566 364.051 511.75 364.055 511.949 cv
364.051 512.395 364.203 512.738 364.512 512.977 cv
364.813 513.223 365.266 513.344 365.871 513.34 cv
366.453 513.344 366.898 513.223 367.199 512.973 cv
367.496 512.73 367.645 512.398 367.648 511.977 cv
cp
f
439.297 513.664 mo
439.293 513.754 439.285 513.824 439.273 513.883 cv
439.258 513.945 439.238 513.996 439.219 514.027 cv
439.195 514.066 439.172 514.09 439.141 514.105 cv
439.109 514.121 439.078 514.129 439.051 514.129 cv
434.414 514.129 li
434.379 514.129 434.352 514.121 434.324 514.105 cv
434.297 514.09 434.27 514.066 434.246 514.027 cv
434.219 513.996 434.199 513.945 434.188 513.883 cv
434.172 513.824 434.164 513.754 434.168 513.664 cv
434.164 513.586 434.172 513.512 434.188 513.449 cv
434.199 513.391 434.215 513.344 434.238 513.305 cv
434.254 513.27 434.281 513.238 434.313 513.215 cv
434.344 513.195 434.375 513.187 434.414 513.184 cv
436.266 513.184 li
436.266 506.437 li
434.551 507.457 li
434.461 507.508 434.391 507.535 434.344 507.543 cv
434.289 507.551 434.246 507.543 434.215 507.512 cv
434.18 507.484 434.16 507.434 434.148 507.363 cv
434.137 507.297 434.129 507.211 434.133 507.102 cv
434.129 507.027 434.133 506.961 434.145 506.902 cv
434.148 506.852 434.16 506.805 434.176 506.766 cv
434.188 506.73 434.207 506.699 434.23 506.672 cv
434.254 506.645 434.285 506.617 434.332 506.59 cv
436.375 505.277 li
436.391 505.266 436.41 505.254 436.441 505.246 cv
436.465 505.238 436.5 505.23 436.547 505.219 cv
436.586 505.211 436.637 505.203 436.691 505.199 cv
436.746 505.199 436.813 505.199 436.898 505.195 cv
437.004 505.199 437.098 505.203 437.172 505.211 cv
437.242 505.219 437.297 505.234 437.344 505.25 cv
437.383 505.27 437.41 505.289 437.426 505.312 cv
437.434 505.34 437.441 505.363 437.445 505.387 cv
437.445 513.184 li
439.051 513.184 li
439.086 513.187 439.121 513.195 439.152 513.215 cv
439.184 513.238 439.207 513.27 439.23 513.305 cv
439.246 513.344 439.262 513.391 439.277 513.449 cv
439.285 513.512 439.293 513.586 439.297 513.664 cv
cp
f
446.648 509.672 mo
446.645 510.355 446.594 510.977 446.488 511.539 cv
446.379 512.102 446.199 512.586 445.953 512.988 cv
445.699 513.395 445.371 513.707 444.973 513.926 cv
444.566 514.148 444.074 514.258 443.488 514.258 cv
442.93 514.258 442.457 514.16 442.078 513.961 cv
441.695 513.766 441.391 513.473 441.156 513.086 cv
440.922 512.699 440.754 512.227 440.66 511.66 cv
440.559 511.098 440.512 510.449 440.512 509.715 cv
440.512 509.043 440.566 508.422 440.676 507.855 cv
440.785 507.293 440.961 506.809 441.211 506.402 cv
441.453 506 441.777 505.687 442.184 505.461 cv
442.582 505.242 443.078 505.129 443.668 505.129 cv
444.227 505.129 444.699 505.23 445.082 505.426 cv
445.465 505.629 445.77 505.922 446.004 506.305 cv
446.234 506.695 446.402 507.168 446.5 507.73 cv
446.598 508.293 446.645 508.941 446.648 509.672 cv
cp
445.441 509.754 mo
445.438 509.312 445.422 508.914 445.395 508.562 cv
445.359 508.211 445.313 507.902 445.254 507.633 cv
445.188 507.363 445.109 507.133 445.012 506.937 cv
444.914 506.746 444.797 506.586 444.66 506.457 cv
444.52 506.332 444.359 506.238 444.188 506.18 cv
444.008 506.125 443.813 506.098 443.598 506.094 cv
443.207 506.098 442.891 506.187 442.652 506.371 cv
442.406 506.555 442.215 506.809 442.078 507.125 cv
441.938 507.445 441.844 507.816 441.793 508.246 cv
441.742 508.676 441.719 509.141 441.719 509.633 cv
441.719 510.297 441.75 510.859 441.82 511.32 cv
441.887 511.789 441.996 512.168 442.148 512.457 cv
442.293 512.754 442.484 512.965 442.715 513.094 cv
442.945 513.23 443.227 513.297 443.559 513.293 cv
443.813 513.297 444.035 513.258 444.23 513.172 cv
444.422 513.094 444.59 512.973 444.73 512.816 cv
444.871 512.664 444.984 512.48 445.078 512.266 cv
445.164 512.051 445.238 511.812 445.297 511.551 cv
445.348 511.293 445.387 511.012 445.41 510.707 cv
445.43 510.402 445.438 510.086 445.441 509.754 cv
cp
f
513.477 513.664 mo
513.473 513.754 513.465 513.824 513.453 513.883 cv
513.438 513.945 513.418 513.996 513.398 514.027 cv
513.375 514.066 513.352 514.09 513.32 514.105 cv
513.289 514.121 513.258 514.129 513.23 514.129 cv
508.594 514.129 li
508.559 514.129 508.531 514.121 508.504 514.105 cv
508.477 514.09 508.449 514.066 508.426 514.027 cv
508.398 513.996 508.379 513.945 508.367 513.883 cv
508.352 513.824 508.344 513.754 508.348 513.664 cv
508.344 513.586 508.352 513.512 508.367 513.449 cv
508.379 513.391 508.395 513.344 508.418 513.305 cv
508.434 513.27 508.461 513.238 508.492 513.215 cv
508.523 513.195 508.555 513.187 508.594 513.184 cv
510.445 513.184 li
510.445 506.437 li
508.73 507.457 li
508.641 507.508 508.57 507.535 508.523 507.543 cv
508.469 507.551 508.426 507.543 508.395 507.512 cv
508.359 507.484 508.34 507.434 508.328 507.363 cv
508.316 507.297 508.309 507.211 508.313 507.102 cv
508.309 507.027 508.313 506.961 508.324 506.902 cv
508.328 506.852 508.34 506.805 508.355 506.766 cv
508.367 506.73 508.387 506.699 508.41 506.672 cv
508.434 506.645 508.465 506.617 508.512 506.59 cv
510.555 505.277 li
510.57 505.266 510.59 505.254 510.621 505.246 cv
510.645 505.238 510.68 505.23 510.727 505.219 cv
510.766 505.211 510.816 505.203 510.871 505.199 cv
510.926 505.199 510.992 505.199 511.078 505.195 cv
511.184 505.199 511.277 505.203 511.352 505.211 cv
511.422 505.219 511.477 505.234 511.523 505.25 cv
511.563 505.27 511.59 505.289 511.605 505.312 cv
511.613 505.34 511.621 505.363 511.625 505.387 cv
511.625 513.184 li
513.23 513.184 li
513.266 513.187 513.301 513.195 513.332 513.215 cv
513.363 513.238 513.387 513.27 513.41 513.305 cv
513.426 513.344 513.441 513.391 513.457 513.449 cv
513.465 513.512 513.473 513.586 513.477 513.664 cv
cp
f
520.535 513.621 mo
520.531 513.707 520.527 513.781 520.516 513.844 cv
520.504 513.91 520.488 513.965 520.469 514.004 cv
520.445 514.051 520.418 514.082 520.387 514.098 cv
520.352 514.121 520.313 514.129 520.273 514.129 cv
515.371 514.129 li
515.309 514.129 515.25 514.121 515.203 514.105 cv
515.152 514.09 515.113 514.066 515.078 514.027 cv
515.043 513.996 515.016 513.941 515.004 513.871 cv
514.984 513.801 514.977 513.715 514.98 513.613 cv
514.977 513.523 514.98 513.445 514.988 513.375 cv
514.992 513.309 515.008 513.25 515.035 513.195 cv
515.059 513.145 515.09 513.09 515.125 513.035 cv
515.16 512.984 515.203 512.93 515.262 512.867 cv
517.035 511.043 li
517.445 510.625 517.773 510.25 518.023 509.914 cv
518.27 509.586 518.461 509.281 518.594 509.004 cv
518.727 508.73 518.813 508.48 518.859 508.254 cv
518.898 508.031 518.922 507.82 518.922 507.625 cv
518.922 507.43 518.887 507.246 518.82 507.066 cv
518.754 506.895 518.66 506.738 518.535 506.602 cv
518.41 506.473 518.254 506.367 518.066 506.285 cv
517.879 506.211 517.66 506.172 517.414 506.168 cv
517.125 506.172 516.867 506.211 516.641 506.285 cv
516.41 506.367 516.211 506.453 516.039 506.539 cv
515.867 506.633 515.723 506.715 515.605 506.793 cv
515.488 506.871 515.402 506.91 515.352 506.91 cv
515.316 506.91 515.285 506.902 515.262 506.883 cv
515.23 506.867 515.211 506.836 515.195 506.793 cv
515.18 506.754 515.164 506.699 515.156 506.629 cv
515.145 506.562 515.141 506.48 515.145 506.383 cv
515.141 506.316 515.145 506.258 515.152 506.207 cv
515.156 506.156 515.164 506.113 515.176 506.074 cv
515.184 506.039 515.199 506.004 515.219 505.973 cv
515.238 505.941 515.273 505.902 515.332 505.852 cv
515.383 505.805 515.477 505.738 515.613 505.656 cv
515.746 505.574 515.918 505.496 516.121 505.414 cv
516.324 505.336 516.547 505.266 516.793 505.211 cv
517.035 505.156 517.293 505.129 517.566 505.129 cv
517.992 505.129 518.367 505.191 518.691 505.312 cv
519.012 505.434 519.277 505.598 519.492 505.809 cv
519.703 506.02 519.863 506.266 519.969 506.539 cv
520.074 506.82 520.129 507.117 520.129 507.43 cv
520.129 507.719 520.102 508 520.051 508.277 cv
520 508.562 519.895 508.867 519.734 509.191 cv
519.57 509.52 519.336 509.883 519.031 510.281 cv
518.723 510.684 518.316 511.145 517.813 511.66 cv
516.406 513.129 li
520.266 513.129 li
520.297 513.133 520.332 513.145 520.371 513.16 cv
520.402 513.184 520.434 513.215 520.461 513.254 cv
520.484 513.297 520.504 513.348 520.516 513.406 cv
520.527 513.473 520.531 513.543 520.535 513.621 cv
cp
f
587.656 513.664 mo
587.652 513.754 587.645 513.824 587.633 513.883 cv
587.617 513.945 587.598 513.996 587.578 514.027 cv
587.555 514.066 587.531 514.09 587.5 514.105 cv
587.469 514.121 587.438 514.129 587.41 514.129 cv
582.773 514.129 li
582.738 514.129 582.711 514.121 582.684 514.105 cv
582.656 514.09 582.629 514.066 582.605 514.027 cv
582.578 513.996 582.559 513.945 582.547 513.883 cv
582.531 513.824 582.523 513.754 582.527 513.664 cv
582.523 513.586 582.531 513.512 582.547 513.449 cv
582.559 513.391 582.574 513.344 582.598 513.305 cv
582.613 513.27 582.641 513.238 582.672 513.215 cv
582.703 513.195 582.734 513.187 582.773 513.184 cv
584.625 513.184 li
584.625 506.437 li
582.91 507.457 li
582.82 507.508 582.75 507.535 582.703 507.543 cv
582.648 507.551 582.605 507.543 582.574 507.512 cv
582.539 507.484 582.52 507.434 582.508 507.363 cv
582.496 507.297 582.488 507.211 582.492 507.102 cv
582.488 507.027 582.492 506.961 582.504 506.902 cv
582.508 506.852 582.52 506.805 582.535 506.766 cv
582.547 506.73 582.566 506.699 582.59 506.672 cv
582.613 506.645 582.645 506.617 582.691 506.59 cv
584.734 505.277 li
584.75 505.266 584.77 505.254 584.801 505.246 cv
584.824 505.238 584.859 505.23 584.906 505.219 cv
584.945 505.211 584.996 505.203 585.051 505.199 cv
585.105 505.199 585.172 505.199 585.258 505.195 cv
585.363 505.199 585.457 505.203 585.531 505.211 cv
585.602 505.219 585.656 505.234 585.703 505.25 cv
585.742 505.27 585.77 505.289 585.785 505.312 cv
585.793 505.34 585.801 505.363 585.805 505.387 cv
585.805 513.184 li
587.41 513.184 li
587.445 513.187 587.48 513.195 587.512 513.215 cv
587.543 513.238 587.566 513.27 587.59 513.305 cv
587.605 513.344 587.621 513.391 587.637 513.449 cv
587.645 513.512 587.652 513.586 587.656 513.664 cv
cp
f
595.09 511.605 mo
595.086 511.758 595.063 511.879 595.02 511.965 cv
594.973 512.055 594.91 512.098 594.828 512.094 cv
593.828 512.094 li
593.828 513.957 li
593.828 513.996 593.816 514.027 593.801 514.051 cv
593.777 514.078 593.746 514.098 593.703 514.117 cv
593.652 514.133 593.59 514.145 593.52 514.156 cv
593.441 514.164 593.348 514.168 593.23 514.172 cv
593.113 514.168 593.016 514.164 592.945 514.156 cv
592.867 514.145 592.809 514.133 592.766 514.117 cv
592.719 514.098 592.688 514.078 592.672 514.051 cv
592.652 514.027 592.645 513.996 592.648 513.957 cv
592.648 512.094 li
589.02 512.094 li
588.961 512.098 588.918 512.09 588.883 512.074 cv
588.848 512.062 588.813 512.035 588.785 511.996 cv
588.754 511.961 588.734 511.91 588.723 511.84 cv
588.711 511.773 588.707 511.684 588.707 511.57 cv
588.707 511.488 588.707 511.41 588.715 511.34 cv
588.715 511.27 588.727 511.207 588.742 511.152 cv
588.754 511.098 588.77 511.043 588.797 510.988 cv
588.816 510.934 588.844 510.879 588.879 510.816 cv
592.039 505.43 li
592.059 505.395 592.094 505.363 592.141 505.336 cv
592.184 505.309 592.238 505.285 592.313 505.266 cv
592.379 505.25 592.465 505.238 592.57 505.227 cv
592.672 505.223 592.793 505.219 592.934 505.215 cv
593.082 505.219 593.219 505.223 593.336 505.234 cv
593.449 505.246 593.539 505.262 593.613 505.277 cv
593.68 505.297 593.734 505.32 593.773 505.352 cv
593.809 505.383 593.828 505.418 593.828 505.457 cv
593.828 511.121 li
594.828 511.121 li
594.902 511.125 594.965 511.164 595.016 511.242 cv
595.063 511.324 595.086 511.445 595.09 511.605 cv
cp
592.648 506.254 mo
592.637 506.254 li
589.785 511.121 li
592.648 511.121 li
cp
f
661.844 513.664 mo
661.84 513.754 661.832 513.824 661.82 513.883 cv
661.805 513.945 661.785 513.996 661.766 514.027 cv
661.742 514.066 661.719 514.09 661.688 514.105 cv
661.656 514.121 661.625 514.129 661.598 514.129 cv
656.961 514.129 li
656.926 514.129 656.898 514.121 656.871 514.105 cv
656.844 514.09 656.816 514.066 656.793 514.027 cv
656.766 513.996 656.746 513.945 656.734 513.883 cv
656.719 513.824 656.711 513.754 656.715 513.664 cv
656.711 513.586 656.719 513.512 656.734 513.449 cv
656.746 513.391 656.762 513.344 656.785 513.305 cv
656.801 513.27 656.828 513.238 656.859 513.215 cv
656.891 513.195 656.922 513.187 656.961 513.184 cv
658.813 513.184 li
658.813 506.437 li
657.098 507.457 li
657.008 507.508 656.938 507.535 656.891 507.543 cv
656.836 507.551 656.793 507.543 656.762 507.512 cv
656.727 507.484 656.707 507.434 656.695 507.363 cv
656.684 507.297 656.676 507.211 656.68 507.102 cv
656.676 507.027 656.68 506.961 656.691 506.902 cv
656.695 506.852 656.707 506.805 656.723 506.766 cv
656.734 506.73 656.754 506.699 656.777 506.672 cv
656.801 506.645 656.832 506.617 656.879 506.59 cv
658.922 505.277 li
658.938 505.266 658.957 505.254 658.988 505.246 cv
659.012 505.238 659.047 505.23 659.094 505.219 cv
659.133 505.211 659.184 505.203 659.238 505.199 cv
659.293 505.199 659.359 505.199 659.445 505.195 cv
659.551 505.199 659.645 505.203 659.719 505.211 cv
659.789 505.219 659.844 505.234 659.891 505.25 cv
659.93 505.27 659.957 505.289 659.973 505.312 cv
659.98 505.34 659.988 505.363 659.992 505.387 cv
659.992 513.184 li
661.598 513.184 li
661.633 513.187 661.668 513.195 661.699 513.215 cv
661.73 513.238 661.754 513.27 661.777 513.305 cv
661.793 513.344 661.809 513.391 661.824 513.449 cv
661.832 513.512 661.84 513.586 661.844 513.664 cv
cp
f
669.133 511.258 mo
669.133 511.648 669.07 512.027 668.953 512.387 cv
668.828 512.754 668.645 513.07 668.402 513.344 cv
668.152 513.621 667.84 513.844 667.465 514.008 cv
667.082 514.176 666.637 514.258 666.121 514.258 cv
665.75 514.258 665.422 514.215 665.141 514.121 cv
664.855 514.035 664.609 513.902 664.398 513.73 cv
664.188 513.562 664.012 513.355 663.875 513.109 cv
663.734 512.863 663.621 512.582 663.539 512.266 cv
663.453 511.953 663.395 511.609 663.359 511.23 cv
663.32 510.859 663.301 510.457 663.305 510.023 cv
663.301 509.645 663.32 509.262 663.363 508.871 cv
663.402 508.488 663.477 508.113 663.582 507.746 cv
663.688 507.387 663.832 507.047 664.012 506.73 cv
664.191 506.414 664.418 506.137 664.691 505.902 cv
664.965 505.668 665.289 505.48 665.668 505.34 cv
666.047 505.203 666.488 505.137 666.992 505.133 cv
667.16 505.137 667.332 505.145 667.504 505.164 cv
667.676 505.187 667.836 505.219 667.984 505.25 cv
668.133 505.289 668.254 505.324 668.355 505.363 cv
668.453 505.402 668.52 505.437 668.555 505.461 cv
668.582 505.488 668.605 505.516 668.625 505.543 cv
668.641 505.574 668.656 505.605 668.664 505.641 cv
668.672 505.676 668.676 505.715 668.684 505.758 cv
668.684 505.801 668.688 505.855 668.691 505.918 cv
668.688 506.004 668.688 506.074 668.688 506.129 cv
668.684 506.191 668.672 506.238 668.66 506.273 cv
668.641 506.312 668.621 506.34 668.598 506.355 cv
668.57 506.375 668.539 506.383 668.5 506.383 cv
668.449 506.383 668.379 506.367 668.293 506.336 cv
668.203 506.305 668.098 506.27 667.977 506.227 cv
667.852 506.191 667.703 506.156 667.527 506.121 cv
667.352 506.094 667.148 506.078 666.918 506.074 cv
666.488 506.078 666.121 506.164 665.816 506.336 cv
665.512 506.508 665.262 506.742 665.066 507.035 cv
664.871 507.328 664.727 507.668 664.637 508.051 cv
664.539 508.441 664.484 508.844 664.477 509.262 cv
664.594 509.195 664.73 509.129 664.879 509.059 cv
665.027 508.992 665.188 508.93 665.363 508.871 cv
665.539 508.82 665.727 508.773 665.922 508.738 cv
666.117 508.707 666.328 508.691 666.555 508.687 cv
667.031 508.691 667.434 508.758 667.766 508.883 cv
668.094 509.016 668.359 509.195 668.566 509.426 cv
668.766 509.656 668.91 509.926 669 510.238 cv
669.086 510.551 669.133 510.891 669.133 511.258 cv
cp
667.938 511.367 mo
667.938 511.105 667.91 510.863 667.859 510.645 cv
667.805 510.43 667.715 510.246 667.594 510.09 cv
667.469 509.941 667.305 509.824 667.102 509.742 cv
666.891 509.66 666.637 509.617 666.34 509.617 cv
666.168 509.617 666 509.633 665.832 509.664 cv
665.66 509.695 665.496 509.738 665.34 509.785 cv
665.18 509.84 665.031 509.902 664.891 509.973 cv
664.746 510.047 664.613 510.121 664.496 510.199 cv
664.492 510.793 664.531 511.289 664.609 511.684 cv
664.684 512.082 664.793 512.398 664.938 512.637 cv
665.082 512.879 665.262 513.051 665.477 513.152 cv
665.691 513.258 665.941 513.309 666.23 513.305 cv
666.52 513.309 666.773 513.254 666.988 513.141 cv
667.203 513.035 667.379 512.887 667.523 512.699 cv
667.664 512.516 667.77 512.309 667.836 512.078 cv
667.902 511.848 667.938 511.613 667.938 511.367 cv
cp
f
16.789 323.473 mo
16.832 323.477 16.867 323.484 16.898 323.496 cv
16.93 323.516 16.957 323.551 16.977 323.598 cv
16.996 323.652 17.008 323.723 17.023 323.816 cv
17.031 323.91 17.039 324.035 17.039 324.191 cv
17.039 324.328 17.031 324.441 17.023 324.523 cv
17.008 324.609 16.996 324.676 16.973 324.727 cv
16.953 324.781 16.918 324.82 16.875 324.848 cv
16.836 324.879 16.785 324.906 16.719 324.922 cv
14.344 325.852 li
14.074 325.965 13.828 326.078 13.598 326.191 cv
13.375 326.309 13.18 326.445 13.016 326.605 cv
12.855 326.77 12.727 326.961 12.633 327.176 cv
12.543 327.398 12.5 327.66 12.496 327.961 cv
12.496 328.859 li
16.789 328.859 li
16.832 328.863 16.867 328.875 16.898 328.895 cv
16.93 328.922 16.957 328.957 16.973 329.004 cv
16.992 329.055 17.004 329.121 17.02 329.207 cv
17.031 329.293 17.039 329.402 17.039 329.527 cv
17.039 329.66 17.031 329.766 17.02 329.852 cv
17.004 329.937 16.992 330.008 16.973 330.059 cv
16.957 330.113 16.93 330.148 16.898 330.168 cv
16.867 330.191 16.832 330.203 16.789 330.199 cv
7.453 330.199 li
7.25 330.203 7.109 330.148 7.027 330.039 cv
6.949 329.934 6.91 329.82 6.906 329.699 cv
6.906 327.559 li
6.91 327.309 6.914 327.094 6.926 326.922 cv
6.941 326.754 6.957 326.602 6.969 326.465 cv
7.039 326.078 7.145 325.734 7.289 325.434 cv
7.438 325.137 7.625 324.887 7.844 324.684 cv
8.07 324.48 8.324 324.328 8.613 324.227 cv
8.902 324.125 9.223 324.074 9.566 324.074 cv
9.906 324.074 10.207 324.121 10.473 324.211 cv
10.742 324.305 10.98 324.437 11.184 324.605 cv
11.395 324.777 11.57 324.98 11.719 325.219 cv
11.867 325.461 11.996 325.73 12.098 326.023 cv
12.176 325.859 12.266 325.707 12.375 325.57 cv
12.488 325.437 12.625 325.312 12.777 325.191 cv
12.938 325.078 13.117 324.965 13.316 324.859 cv
13.52 324.758 13.746 324.656 14 324.547 cv
16.219 323.645 li
16.406 323.574 16.539 323.527 16.613 323.504 cv
16.691 323.488 16.75 323.477 16.789 323.473 cv
cp
9.707 325.492 mo
9.316 325.492 8.98 325.582 8.707 325.758 cv
8.434 325.937 8.238 326.234 8.117 326.645 cv
8.082 326.777 8.055 326.922 8.039 327.086 cv
8.023 327.25 8.016 327.465 8.016 327.727 cv
8.016 328.859 li
11.414 328.859 li
11.414 327.551 li
11.414 327.199 11.371 326.895 11.285 326.633 cv
11.199 326.379 11.082 326.164 10.926 325.992 cv
10.777 325.824 10.594 325.699 10.383 325.613 cv
10.176 325.535 9.953 325.492 9.707 325.492 cv
cp
f
16.797 315.676 mo
16.844 315.68 16.879 315.687 16.902 315.703 cv
16.934 315.723 16.957 315.758 16.977 315.801 cv
16.996 315.848 17.008 315.906 17.023 315.98 cv
17.031 316.059 17.039 316.152 17.039 316.258 cv
17.039 316.383 17.031 316.48 17.023 316.551 cv
17.008 316.629 16.996 316.687 16.977 316.73 cv
16.957 316.777 16.934 316.809 16.902 316.82 cv
16.879 316.84 16.844 316.848 16.797 316.844 cv
15.871 316.844 li
16.316 317.246 16.637 317.641 16.836 318.027 cv
17.039 318.422 17.137 318.816 17.141 319.211 cv
17.137 319.684 17.063 320.078 16.906 320.395 cv
16.754 320.715 16.543 320.973 16.273 321.168 cv
16.008 321.371 15.695 321.512 15.336 321.594 cv
14.98 321.684 14.547 321.727 14.039 321.723 cv
9.785 321.723 li
9.746 321.727 9.711 321.719 9.68 321.695 cv
9.652 321.68 9.629 321.645 9.602 321.59 cv
9.582 321.543 9.566 321.473 9.555 321.387 cv
9.551 321.305 9.547 321.203 9.543 321.074 cv
9.547 320.953 9.551 320.848 9.555 320.762 cv
9.566 320.68 9.582 320.613 9.602 320.566 cv
9.629 320.52 9.652 320.484 9.68 320.461 cv
9.711 320.441 9.746 320.434 9.785 320.43 cv
13.867 320.43 li
14.281 320.434 14.609 320.402 14.855 320.34 cv
15.102 320.281 15.313 320.191 15.484 320.066 cv
15.664 319.949 15.797 319.793 15.891 319.602 cv
15.988 319.418 16.039 319.199 16.035 318.949 cv
16.039 318.629 15.922 318.309 15.691 317.984 cv
15.465 317.668 15.129 317.328 14.684 316.969 cv
9.785 316.969 li
9.746 316.969 9.711 316.961 9.68 316.941 cv
9.652 316.926 9.629 316.891 9.602 316.836 cv
9.582 316.785 9.566 316.719 9.555 316.637 cv
9.551 316.559 9.547 316.453 9.543 316.32 cv
9.547 316.199 9.551 316.094 9.555 316.008 cv
9.566 315.926 9.582 315.863 9.602 315.816 cv
9.629 315.773 9.652 315.738 9.68 315.711 cv
9.711 315.691 9.746 315.68 9.785 315.676 cv
cp
f
16.797 307.266 mo
16.844 307.266 16.879 307.277 16.902 307.297 cv
16.934 307.32 16.957 307.355 16.977 307.398 cv
16.996 307.449 17.008 307.512 17.023 307.594 cv
17.031 307.676 17.039 307.781 17.039 307.902 cv
17.039 308.035 17.031 308.141 17.023 308.223 cv
17.008 308.309 16.996 308.375 16.977 308.418 cv
16.957 308.469 16.934 308.5 16.902 308.52 cv
16.879 308.543 16.844 308.555 16.797 308.551 cv
12.691 308.551 li
12.293 308.555 11.973 308.586 11.727 308.645 cv
11.484 308.711 11.273 308.801 11.094 308.918 cv
10.918 309.035 10.781 309.191 10.688 309.379 cv
10.594 309.574 10.547 309.793 10.547 310.039 cv
10.547 310.363 10.664 310.687 10.891 311.008 cv
11.125 311.332 11.457 311.668 11.895 312.02 cv
16.797 312.02 li
16.844 312.023 16.879 312.035 16.902 312.051 cv
16.934 312.074 16.957 312.105 16.977 312.152 cv
16.996 312.199 17.008 312.266 17.023 312.344 cv
17.031 312.43 17.039 312.535 17.039 312.664 cv
17.039 312.793 17.031 312.898 17.023 312.977 cv
17.008 313.062 16.996 313.129 16.977 313.176 cv
16.957 313.23 16.934 313.262 16.902 313.277 cv
16.879 313.297 16.844 313.309 16.797 313.305 cv
9.785 313.305 li
9.746 313.309 9.711 313.301 9.68 313.281 cv
9.652 313.27 9.629 313.238 9.602 313.187 cv
9.582 313.145 9.566 313.082 9.555 313.008 cv
9.551 312.937 9.547 312.844 9.543 312.719 cv
9.547 312.609 9.551 312.512 9.555 312.434 cv
9.566 312.359 9.582 312.301 9.602 312.258 cv
9.629 312.219 9.652 312.191 9.68 312.172 cv
9.711 312.156 9.746 312.148 9.785 312.145 cv
10.711 312.145 li
10.27 311.754 9.949 311.359 9.742 310.965 cv
9.539 310.574 9.434 310.176 9.434 309.773 cv
9.434 309.305 9.516 308.914 9.672 308.594 cv
9.836 308.277 10.047 308.016 10.309 307.816 cv
10.574 307.621 10.883 307.48 11.238 307.395 cv
11.594 307.309 12.023 307.266 12.52 307.266 cv
cp
f
16.281 301.387 mo
16.438 301.387 16.555 301.398 16.641 301.418 cv
16.73 301.441 16.797 301.473 16.836 301.512 cv
16.879 301.555 16.918 301.617 16.953 301.699 cv
16.988 301.785 17.016 301.879 17.043 301.984 cv
17.063 302.094 17.082 302.207 17.102 302.324 cv
17.113 302.441 17.121 302.562 17.125 302.68 cv
17.121 303.047 17.074 303.359 16.98 303.617 cv
16.887 303.879 16.742 304.09 16.543 304.254 cv
16.352 304.422 16.105 304.543 15.805 304.617 cv
15.508 304.695 15.156 304.734 14.746 304.73 cv
10.648 304.73 li
10.648 305.711 li
10.652 305.789 10.609 305.852 10.523 305.898 cv
10.441 305.945 10.309 305.969 10.117 305.969 cv
10.023 305.969 9.941 305.965 9.871 305.949 cv
9.809 305.941 9.75 305.922 9.703 305.898 cv
9.66 305.879 9.629 305.852 9.609 305.816 cv
9.594 305.785 9.586 305.75 9.582 305.703 cv
9.582 304.73 li
7.914 304.73 li
7.883 304.734 7.848 304.723 7.813 304.703 cv
7.785 304.687 7.758 304.656 7.73 304.602 cv
7.711 304.555 7.695 304.488 7.68 304.402 cv
7.672 304.324 7.664 304.219 7.664 304.09 cv
7.664 303.961 7.672 303.855 7.68 303.773 cv
7.695 303.691 7.711 303.625 7.73 303.578 cv
7.758 303.531 7.785 303.5 7.813 303.477 cv
7.848 303.461 7.883 303.449 7.914 303.445 cv
9.582 303.445 li
9.582 301.645 li
9.586 301.605 9.594 301.57 9.609 301.535 cv
9.629 301.508 9.66 301.48 9.703 301.453 cv
9.75 301.434 9.809 301.418 9.871 301.402 cv
9.941 301.395 10.023 301.387 10.117 301.387 cv
10.309 301.387 10.441 301.41 10.523 301.457 cv
10.609 301.504 10.652 301.566 10.648 301.645 cv
10.648 303.445 li
14.563 303.445 li
15.047 303.449 15.41 303.379 15.656 303.23 cv
15.906 303.09 16.031 302.832 16.027 302.461 cv
16.031 302.348 16.02 302.242 15.992 302.145 cv
15.973 302.055 15.949 301.973 15.918 301.895 cv
15.895 301.824 15.867 301.762 15.844 301.707 cv
15.82 301.66 15.809 301.613 15.809 301.566 cv
15.809 301.543 15.816 301.516 15.828 301.492 cv
15.844 301.469 15.867 301.453 15.902 301.437 cv
15.941 301.43 15.992 301.418 16.051 301.402 cv
16.117 301.395 16.195 301.387 16.281 301.387 cv
cp
f
16.797 298.371 mo
16.844 298.375 16.879 298.387 16.902 298.402 cv
16.934 298.426 16.957 298.457 16.977 298.504 cv
16.996 298.551 17.008 298.617 17.023 298.695 cv
17.031 298.781 17.039 298.887 17.039 299.016 cv
17.039 299.145 17.031 299.25 17.023 299.328 cv
17.008 299.414 16.996 299.48 16.977 299.527 cv
16.957 299.582 16.934 299.613 16.902 299.629 cv
16.879 299.648 16.844 299.66 16.797 299.656 cv
9.785 299.656 li
9.75 299.66 9.719 299.648 9.684 299.629 cv
9.656 299.613 9.629 299.582 9.605 299.527 cv
9.586 299.48 9.57 299.414 9.559 299.328 cv
9.551 299.25 9.547 299.145 9.543 299.016 cv
9.547 298.887 9.551 298.781 9.559 298.695 cv
9.57 298.617 9.586 298.551 9.605 298.504 cv
9.629 298.457 9.656 298.426 9.684 298.402 cv
9.719 298.387 9.75 298.375 9.785 298.371 cv
cp
7.414 298.223 mo
7.719 298.223 7.926 298.281 8.031 298.395 cv
8.145 298.508 8.199 298.719 8.195 299.023 cv
8.199 299.328 8.145 299.535 8.035 299.645 cv
7.93 299.762 7.727 299.816 7.43 299.812 cv
7.129 299.816 6.926 299.758 6.816 299.641 cv
6.711 299.527 6.656 299.316 6.652 299.008 cv
6.656 298.707 6.711 298.504 6.813 298.391 cv
6.922 298.281 7.121 298.223 7.414 298.223 cv
cp
f
16.797 285.547 mo
16.844 285.551 16.879 285.559 16.902 285.578 cv
16.934 285.602 16.957 285.637 16.977 285.68 cv
16.996 285.73 17.008 285.797 17.023 285.875 cv
17.031 285.961 17.039 286.062 17.039 286.187 cv
17.039 286.32 17.031 286.43 17.023 286.508 cv
17.008 286.594 16.996 286.66 16.977 286.707 cv
16.957 286.762 16.934 286.797 16.902 286.812 cv
16.879 286.836 16.844 286.844 16.797 286.844 cv
12.535 286.844 li
12.242 286.844 11.973 286.871 11.727 286.922 cv
11.484 286.977 11.273 287.059 11.094 287.172 cv
10.918 287.285 10.781 287.43 10.688 287.605 cv
10.594 287.785 10.547 287.996 10.547 288.23 cv
10.547 288.527 10.664 288.824 10.891 289.121 cv
11.125 289.426 11.457 289.754 11.895 290.109 cv
16.797 290.109 li
16.844 290.113 16.879 290.125 16.902 290.141 cv
16.934 290.164 16.957 290.195 16.977 290.242 cv
16.996 290.293 17.008 290.359 17.023 290.441 cv
17.031 290.527 17.039 290.633 17.039 290.754 cv
17.039 290.875 17.031 290.977 17.023 291.062 cv
17.008 291.148 16.996 291.219 16.977 291.266 cv
16.957 291.32 16.934 291.352 16.902 291.367 cv
16.879 291.387 16.844 291.398 16.797 291.395 cv
12.535 291.395 li
12.242 291.398 11.973 291.426 11.727 291.48 cv
11.484 291.539 11.273 291.625 11.094 291.738 cv
10.918 291.852 10.781 291.996 10.688 292.168 cv
10.594 292.348 10.547 292.555 10.547 292.789 cv
10.547 293.09 10.664 293.387 10.891 293.687 cv
11.125 293.988 11.457 294.316 11.895 294.668 cv
16.797 294.668 li
16.844 294.672 16.879 294.684 16.902 294.699 cv
16.934 294.723 16.957 294.754 16.977 294.801 cv
16.996 294.848 17.008 294.914 17.023 294.992 cv
17.031 295.078 17.039 295.184 17.039 295.312 cv
17.039 295.441 17.031 295.547 17.023 295.625 cv
17.008 295.711 16.996 295.777 16.977 295.824 cv
16.957 295.879 16.934 295.91 16.902 295.926 cv
16.879 295.945 16.844 295.957 16.797 295.953 cv
9.785 295.953 li
9.746 295.957 9.711 295.949 9.68 295.93 cv
9.652 295.918 9.629 295.887 9.602 295.836 cv
9.582 295.793 9.566 295.73 9.555 295.656 cv
9.551 295.586 9.547 295.492 9.543 295.367 cv
9.547 295.258 9.551 295.16 9.555 295.082 cv
9.566 295.008 9.582 294.949 9.602 294.906 cv
9.629 294.867 9.652 294.84 9.68 294.82 cv
9.711 294.805 9.746 294.797 9.785 294.793 cv
10.711 294.793 li
10.27 294.402 9.949 294.02 9.742 293.645 cv
9.539 293.277 9.434 292.898 9.434 292.516 cv
9.434 292.227 9.469 291.969 9.535 291.734 cv
9.605 291.508 9.699 291.301 9.82 291.121 cv
9.941 290.945 10.086 290.797 10.254 290.668 cv
10.426 290.547 10.617 290.441 10.82 290.355 cv
10.57 290.125 10.355 289.902 10.176 289.691 cv
10.004 289.48 9.859 289.277 9.746 289.082 cv
9.641 288.887 9.563 288.699 9.508 288.516 cv
9.461 288.332 9.434 288.145 9.434 287.957 cv
9.434 287.504 9.516 287.125 9.672 286.82 cv
9.836 286.516 10.047 286.27 10.309 286.074 cv
10.574 285.887 10.883 285.75 11.238 285.668 cv
11.594 285.59 11.969 285.551 12.363 285.547 cv
cp
f
12.988 277.219 mo
13.191 277.223 13.332 277.273 13.418 277.371 cv
13.504 277.477 13.547 277.594 13.547 277.719 cv
13.547 282.336 li
13.938 282.34 14.289 282.301 14.602 282.219 cv
14.914 282.145 15.184 282.012 15.402 281.828 cv
15.629 281.648 15.801 281.414 15.918 281.117 cv
16.043 280.828 16.102 280.469 16.098 280.043 cv
16.102 279.711 16.074 279.414 16.016 279.152 cv
15.965 278.891 15.902 278.664 15.832 278.473 cv
15.766 278.285 15.707 278.129 15.648 278.004 cv
15.598 277.883 15.57 277.789 15.566 277.727 cv
15.57 277.691 15.578 277.66 15.594 277.629 cv
15.613 277.602 15.641 277.578 15.676 277.559 cv
15.715 277.547 15.766 277.535 15.828 277.523 cv
15.895 277.52 15.973 277.516 16.066 277.512 cv
16.137 277.516 16.195 277.52 16.242 277.52 cv
16.289 277.527 16.332 277.531 16.371 277.539 cv
16.41 277.547 16.445 277.562 16.477 277.578 cv
16.508 277.602 16.539 277.625 16.566 277.648 cv
16.598 277.68 16.645 277.762 16.707 277.902 cv
16.773 278.043 16.836 278.227 16.898 278.449 cv
16.961 278.676 17.016 278.934 17.066 279.227 cv
17.113 279.52 17.137 279.832 17.141 280.164 cv
17.137 280.742 17.059 281.25 16.898 281.68 cv
16.738 282.117 16.5 282.48 16.184 282.773 cv
15.867 283.074 15.473 283.297 14.992 283.445 cv
14.516 283.594 13.957 283.668 13.32 283.668 cv
12.723 283.668 12.184 283.594 11.699 283.437 cv
11.223 283.285 10.813 283.059 10.477 282.762 cv
10.141 282.469 9.883 282.113 9.703 281.699 cv
9.523 281.285 9.434 280.82 9.434 280.305 cv
9.434 279.754 9.523 279.285 9.699 278.898 cv
9.879 278.512 10.117 278.195 10.414 277.941 cv
10.715 277.695 11.066 277.512 11.465 277.395 cv
11.871 277.281 12.301 277.223 12.754 277.219 cv
cp
12.605 278.512 mo
11.93 278.496 11.398 278.648 11.016 278.965 cv
10.633 279.281 10.441 279.75 10.438 280.367 cv
10.441 280.691 10.5 280.973 10.617 281.211 cv
10.738 281.453 10.898 281.652 11.094 281.812 cv
11.293 281.977 11.523 282.102 11.785 282.187 cv
12.047 282.277 12.32 282.328 12.605 282.336 cv
cp
f
6.254 269.043 mo
7.301 269.539 8.371 269.906 9.469 270.148 cv
10.57 270.391 11.676 270.512 12.785 270.512 cv
13.902 270.512 15.012 270.391 16.105 270.141 cv
17.203 269.898 18.273 269.535 19.328 269.059 cv
19.387 269.035 19.441 269.023 19.488 269.016 cv
19.531 269.016 19.566 269.031 19.598 269.066 cv
19.625 269.105 19.645 269.16 19.66 269.234 cv
19.668 269.312 19.676 269.418 19.68 269.543 cv
19.676 269.641 19.672 269.719 19.672 269.785 cv
19.664 269.855 19.656 269.914 19.641 269.961 cv
19.625 270.012 19.605 270.055 19.586 270.082 cv
19.563 270.117 19.539 270.141 19.516 270.152 cv
18.984 270.434 18.449 270.68 17.906 270.891 cv
17.363 271.109 16.813 271.289 16.254 271.43 cv
15.691 271.578 15.125 271.687 14.551 271.758 cv
13.977 271.836 13.395 271.871 12.809 271.867 cv
12.223 271.871 11.645 271.832 11.07 271.746 cv
10.5 271.668 9.934 271.551 9.367 271.402 cv
8.805 271.254 8.25 271.074 7.703 270.863 cv
7.16 270.652 6.617 270.414 6.082 270.145 cv
6.063 270.141 6.047 270.125 6.027 270.102 cv
6.016 270.078 6 270.047 5.98 270.004 cv
5.969 269.965 5.957 269.906 5.945 269.832 cv
5.941 269.762 5.938 269.668 5.934 269.551 cv
5.938 269.434 5.945 269.34 5.957 269.262 cv
5.977 269.191 5.996 269.133 6.02 269.09 cv
6.047 269.051 6.082 269.027 6.121 269.02 cv
6.168 269.016 6.211 269.023 6.254 269.043 cv
cp
f
16.789 255.762 mo
16.832 255.762 16.867 255.773 16.898 255.793 cv
16.93 255.816 16.957 255.855 16.973 255.906 cv
16.992 255.961 17.004 256.027 17.02 256.109 cv
17.031 256.195 17.039 256.305 17.039 256.434 cv
17.039 256.562 17.031 256.668 17.02 256.754 cv
17.004 256.844 16.992 256.914 16.973 256.965 cv
16.957 257.016 16.93 257.051 16.898 257.07 cv
16.867 257.094 16.832 257.105 16.789 257.102 cv
8.008 257.102 li
8.008 257.117 li
16.828 260.672 li
16.867 260.687 16.898 260.711 16.922 260.738 cv
16.949 260.77 16.973 260.812 16.988 260.863 cv
17.008 260.922 17.02 260.984 17.027 261.059 cv
17.035 261.133 17.039 261.223 17.039 261.324 cv
17.039 261.437 17.031 261.531 17.023 261.605 cv
17.008 261.687 16.996 261.754 16.98 261.801 cv
16.965 261.855 16.945 261.895 16.914 261.922 cv
16.891 261.953 16.859 261.973 16.828 261.98 cv
8.008 265.379 li
8.008 265.387 li
16.789 265.387 li
16.832 265.391 16.867 265.398 16.898 265.418 cv
16.93 265.441 16.957 265.48 16.973 265.531 cv
16.992 265.586 17.004 265.656 17.02 265.738 cv
17.031 265.828 17.039 265.937 17.039 266.066 cv
17.039 266.199 17.031 266.305 17.02 266.391 cv
17.004 266.477 16.992 266.547 16.973 266.594 cv
16.957 266.648 16.93 266.684 16.898 266.699 cv
16.867 266.723 16.832 266.73 16.789 266.727 cv
7.516 266.727 li
7.301 266.73 7.145 266.672 7.047 266.555 cv
6.957 266.437 6.91 266.309 6.906 266.164 cv
6.906 265.34 li
6.91 265.176 6.926 265.027 6.953 264.898 cv
6.988 264.773 7.035 264.664 7.102 264.566 cv
7.172 264.473 7.258 264.391 7.359 264.328 cv
7.465 264.266 7.59 264.211 7.727 264.164 cv
15.027 261.277 li
15.027 261.238 li
7.75 258.238 li
7.598 258.184 7.465 258.121 7.352 258.051 cv
7.246 257.984 7.156 257.906 7.09 257.824 cv
7.027 257.742 6.98 257.652 6.949 257.551 cv
6.922 257.453 6.91 257.336 6.906 257.203 cv
6.906 256.34 li
6.91 256.262 6.922 256.184 6.941 256.113 cv
6.969 256.043 7.004 255.984 7.051 255.934 cv
7.102 255.883 7.164 255.84 7.238 255.809 cv
7.316 255.777 7.41 255.762 7.516 255.762 cv
cp
f
16.797 251.945 mo
16.844 251.949 16.879 251.961 16.902 251.977 cv
16.934 252 16.957 252.031 16.977 252.078 cv
16.996 252.125 17.008 252.191 17.023 252.27 cv
17.031 252.355 17.039 252.461 17.039 252.59 cv
17.039 252.719 17.031 252.824 17.023 252.902 cv
17.008 252.988 16.996 253.055 16.977 253.102 cv
16.957 253.156 16.934 253.187 16.902 253.203 cv
16.879 253.223 16.844 253.234 16.797 253.23 cv
9.785 253.23 li
9.75 253.234 9.719 253.223 9.684 253.203 cv
9.656 253.187 9.629 253.156 9.605 253.102 cv
9.586 253.055 9.57 252.988 9.559 252.902 cv
9.551 252.824 9.547 252.719 9.543 252.59 cv
9.547 252.461 9.551 252.355 9.559 252.27 cv
9.57 252.191 9.586 252.125 9.605 252.078 cv
9.629 252.031 9.656 252 9.684 251.977 cv
9.719 251.961 9.75 251.949 9.785 251.945 cv
cp
7.414 251.797 mo
7.719 251.797 7.926 251.855 8.031 251.969 cv
8.145 252.082 8.199 252.293 8.195 252.598 cv
8.199 252.902 8.145 253.109 8.035 253.219 cv
7.93 253.336 7.727 253.391 7.43 253.387 cv
7.129 253.391 6.926 253.332 6.816 253.215 cv
6.711 253.102 6.656 252.891 6.652 252.582 cv
6.656 252.281 6.711 252.078 6.813 251.965 cv
6.922 251.855 7.121 251.797 7.414 251.797 cv
cp
f
16.797 243.52 mo
16.844 243.52 16.879 243.531 16.902 243.551 cv
16.934 243.574 16.957 243.609 16.977 243.652 cv
16.996 243.703 17.008 243.766 17.023 243.848 cv
17.031 243.93 17.039 244.035 17.039 244.156 cv
17.039 244.289 17.031 244.395 17.023 244.477 cv
17.008 244.562 16.996 244.629 16.977 244.672 cv
16.957 244.723 16.934 244.754 16.902 244.773 cv
16.879 244.797 16.844 244.809 16.797 244.805 cv
12.691 244.805 li
12.293 244.809 11.973 244.84 11.727 244.898 cv
11.484 244.965 11.273 245.055 11.094 245.172 cv
10.918 245.289 10.781 245.445 10.688 245.633 cv
10.594 245.828 10.547 246.047 10.547 246.293 cv
10.547 246.617 10.664 246.941 10.891 247.262 cv
11.125 247.586 11.457 247.922 11.895 248.273 cv
16.797 248.273 li
16.844 248.277 16.879 248.289 16.902 248.305 cv
16.934 248.328 16.957 248.359 16.977 248.406 cv
16.996 248.453 17.008 248.52 17.023 248.598 cv
17.031 248.684 17.039 248.789 17.039 248.918 cv
17.039 249.047 17.031 249.152 17.023 249.23 cv
17.008 249.316 16.996 249.383 16.977 249.43 cv
16.957 249.484 16.934 249.516 16.902 249.531 cv
16.879 249.551 16.844 249.562 16.797 249.559 cv
9.785 249.559 li
9.746 249.562 9.711 249.555 9.68 249.535 cv
9.652 249.523 9.629 249.492 9.602 249.441 cv
9.582 249.398 9.566 249.336 9.555 249.262 cv
9.551 249.191 9.547 249.098 9.543 248.973 cv
9.547 248.863 9.551 248.766 9.555 248.687 cv
9.566 248.613 9.582 248.555 9.602 248.512 cv
9.629 248.473 9.652 248.445 9.68 248.426 cv
9.711 248.41 9.746 248.402 9.785 248.398 cv
10.711 248.398 li
10.27 248.008 9.949 247.613 9.742 247.219 cv
9.539 246.828 9.434 246.43 9.434 246.027 cv
9.434 245.559 9.516 245.168 9.672 244.848 cv
9.836 244.531 10.047 244.27 10.309 244.07 cv
10.574 243.875 10.883 243.734 11.238 243.648 cv
11.594 243.562 12.023 243.52 12.52 243.52 cv
cp
f
16.797 235.125 mo
16.844 235.129 16.879 235.137 16.902 235.152 cv
16.934 235.172 16.957 235.207 16.977 235.25 cv
16.996 235.297 17.008 235.355 17.023 235.43 cv
17.031 235.508 17.039 235.602 17.039 235.707 cv
17.039 235.832 17.031 235.93 17.023 236 cv
17.008 236.078 16.996 236.137 16.977 236.18 cv
16.957 236.227 16.934 236.258 16.902 236.27 cv
16.879 236.289 16.844 236.297 16.797 236.293 cv
15.871 236.293 li
16.316 236.695 16.637 237.09 16.836 237.477 cv
17.039 237.871 17.137 238.266 17.141 238.66 cv
17.137 239.133 17.063 239.527 16.906 239.844 cv
16.754 240.164 16.543 240.422 16.273 240.617 cv
16.008 240.82 15.695 240.961 15.336 241.043 cv
14.98 241.133 14.547 241.176 14.039 241.172 cv
9.785 241.172 li
9.746 241.176 9.711 241.168 9.68 241.145 cv
9.652 241.129 9.629 241.094 9.602 241.039 cv
9.582 240.992 9.566 240.922 9.555 240.836 cv
9.551 240.754 9.547 240.652 9.543 240.523 cv
9.547 240.402 9.551 240.297 9.555 240.211 cv
9.566 240.129 9.582 240.062 9.602 240.016 cv
9.629 239.969 9.652 239.934 9.68 239.91 cv
9.711 239.891 9.746 239.883 9.785 239.879 cv
13.867 239.879 li
14.281 239.883 14.609 239.852 14.855 239.789 cv
15.102 239.73 15.313 239.641 15.484 239.516 cv
15.664 239.398 15.797 239.242 15.891 239.051 cv
15.988 238.867 16.039 238.648 16.035 238.398 cv
16.039 238.078 15.922 237.758 15.691 237.434 cv
15.465 237.117 15.129 236.777 14.684 236.418 cv
9.785 236.418 li
9.746 236.418 9.711 236.41 9.68 236.391 cv
9.652 236.375 9.629 236.34 9.602 236.285 cv
9.582 236.234 9.566 236.168 9.555 236.086 cv
9.551 236.008 9.547 235.902 9.543 235.77 cv
9.547 235.648 9.551 235.543 9.555 235.457 cv
9.566 235.375 9.582 235.312 9.602 235.266 cv
9.629 235.223 9.652 235.187 9.68 235.16 cv
9.711 235.141 9.746 235.129 9.785 235.125 cv
cp
f
16.281 229.105 mo
16.438 229.105 16.555 229.117 16.641 229.137 cv
16.73 229.16 16.797 229.191 16.836 229.23 cv
16.879 229.273 16.918 229.336 16.953 229.418 cv
16.988 229.504 17.016 229.598 17.043 229.703 cv
17.063 229.812 17.082 229.926 17.102 230.043 cv
17.113 230.16 17.121 230.281 17.125 230.398 cv
17.121 230.766 17.074 231.078 16.98 231.336 cv
16.887 231.598 16.742 231.809 16.543 231.973 cv
16.352 232.141 16.105 232.262 15.805 232.336 cv
15.508 232.414 15.156 232.453 14.746 232.449 cv
10.648 232.449 li
10.648 233.43 li
10.652 233.508 10.609 233.57 10.523 233.617 cv
10.441 233.664 10.309 233.687 10.117 233.687 cv
10.023 233.687 9.941 233.684 9.871 233.668 cv
9.809 233.66 9.75 233.641 9.703 233.617 cv
9.66 233.598 9.629 233.57 9.609 233.535 cv
9.594 233.504 9.586 233.469 9.582 233.422 cv
9.582 232.449 li
7.914 232.449 li
7.883 232.453 7.848 232.441 7.813 232.422 cv
7.785 232.406 7.758 232.375 7.73 232.32 cv
7.711 232.273 7.695 232.207 7.68 232.121 cv
7.672 232.043 7.664 231.937 7.664 231.809 cv
7.664 231.68 7.672 231.574 7.68 231.492 cv
7.695 231.41 7.711 231.344 7.73 231.297 cv
7.758 231.25 7.785 231.219 7.813 231.195 cv
7.848 231.18 7.883 231.168 7.914 231.164 cv
9.582 231.164 li
9.582 229.363 li
9.586 229.324 9.594 229.289 9.609 229.254 cv
9.629 229.227 9.66 229.199 9.703 229.172 cv
9.75 229.152 9.809 229.137 9.871 229.121 cv
9.941 229.113 10.023 229.105 10.117 229.105 cv
10.309 229.105 10.441 229.129 10.523 229.176 cv
10.609 229.223 10.652 229.285 10.648 229.363 cv
10.648 231.164 li
14.563 231.164 li
15.047 231.168 15.41 231.098 15.656 230.949 cv
15.906 230.809 16.031 230.551 16.027 230.18 cv
16.031 230.066 16.02 229.961 15.992 229.863 cv
15.973 229.773 15.949 229.691 15.918 229.613 cv
15.895 229.543 15.867 229.48 15.844 229.426 cv
15.82 229.379 15.809 229.332 15.809 229.285 cv
15.809 229.262 15.816 229.234 15.828 229.211 cv
15.844 229.187 15.867 229.172 15.902 229.156 cv
15.941 229.148 15.992 229.137 16.051 229.121 cv
16.117 229.113 16.195 229.105 16.281 229.105 cv
cp
f
12.988 221.422 mo
13.191 221.426 13.332 221.477 13.418 221.574 cv
13.504 221.68 13.547 221.797 13.547 221.922 cv
13.547 226.539 li
13.938 226.543 14.289 226.504 14.602 226.422 cv
14.914 226.348 15.184 226.215 15.402 226.031 cv
15.629 225.852 15.801 225.617 15.918 225.32 cv
16.043 225.031 16.102 224.672 16.098 224.246 cv
16.102 223.914 16.074 223.617 16.016 223.355 cv
15.965 223.094 15.902 222.867 15.832 222.676 cv
15.766 222.488 15.707 222.332 15.648 222.207 cv
15.598 222.086 15.57 221.992 15.566 221.93 cv
15.57 221.895 15.578 221.863 15.594 221.832 cv
15.613 221.805 15.641 221.781 15.676 221.762 cv
15.715 221.75 15.766 221.738 15.828 221.727 cv
15.895 221.723 15.973 221.719 16.066 221.715 cv
16.137 221.719 16.195 221.723 16.242 221.723 cv
16.289 221.73 16.332 221.734 16.371 221.742 cv
16.41 221.75 16.445 221.766 16.477 221.781 cv
16.508 221.805 16.539 221.828 16.566 221.852 cv
16.598 221.883 16.645 221.965 16.707 222.105 cv
16.773 222.246 16.836 222.43 16.898 222.652 cv
16.961 222.879 17.016 223.137 17.066 223.43 cv
17.113 223.723 17.137 224.035 17.141 224.367 cv
17.137 224.945 17.059 225.453 16.898 225.883 cv
16.738 226.32 16.5 226.684 16.184 226.977 cv
15.867 227.277 15.473 227.5 14.992 227.648 cv
14.516 227.797 13.957 227.871 13.32 227.871 cv
12.723 227.871 12.184 227.797 11.699 227.641 cv
11.223 227.488 10.813 227.262 10.477 226.965 cv
10.141 226.672 9.883 226.316 9.703 225.902 cv
9.523 225.488 9.434 225.023 9.434 224.508 cv
9.434 223.957 9.523 223.488 9.699 223.102 cv
9.879 222.715 10.117 222.398 10.414 222.145 cv
10.715 221.898 11.066 221.715 11.465 221.598 cv
11.871 221.484 12.301 221.426 12.754 221.422 cv
cp
12.605 222.715 mo
11.93 222.699 11.398 222.852 11.016 223.168 cv
10.633 223.484 10.441 223.953 10.438 224.57 cv
10.441 224.895 10.5 225.176 10.617 225.414 cv
10.738 225.656 10.898 225.855 11.094 226.016 cv
11.293 226.18 11.523 226.305 11.785 226.391 cv
12.047 226.48 12.32 226.531 12.605 226.539 cv
cp
f
14.887 215.137 mo
15.25 215.141 15.57 215.207 15.848 215.336 cv
16.129 215.469 16.363 215.656 16.555 215.898 cv
16.75 216.145 16.895 216.437 16.992 216.773 cv
17.09 217.113 17.137 217.484 17.141 217.887 cv
17.137 218.141 17.117 218.379 17.082 218.602 cv
17.039 218.828 16.992 219.027 16.934 219.207 cv
16.875 219.387 16.813 219.539 16.746 219.664 cv
16.684 219.789 16.625 219.883 16.57 219.937 cv
16.52 219.996 16.449 220.035 16.352 220.059 cv
16.262 220.086 16.133 220.098 15.973 220.098 cv
15.875 220.098 15.793 220.094 15.723 220.082 cv
15.656 220.074 15.602 220.062 15.559 220.043 cv
15.52 220.031 15.488 220.008 15.469 219.98 cv
15.453 219.953 15.445 219.922 15.441 219.883 cv
15.445 219.828 15.48 219.742 15.547 219.629 cv
15.621 219.52 15.699 219.383 15.777 219.215 cv
15.863 219.055 15.938 218.863 16.008 218.637 cv
16.078 218.418 16.113 218.16 16.113 217.863 cv
16.113 217.648 16.09 217.449 16.043 217.27 cv
15.996 217.094 15.93 216.941 15.836 216.812 cv
15.75 216.684 15.633 216.582 15.488 216.512 cv
15.352 216.441 15.184 216.406 14.988 216.406 cv
14.793 216.406 14.629 216.457 14.492 216.559 cv
14.359 216.66 14.238 216.797 14.133 216.961 cv
14.031 217.129 13.941 217.312 13.855 217.52 cv
13.777 217.73 13.691 217.945 13.602 218.164 cv
13.516 218.383 13.414 218.598 13.301 218.809 cv
13.191 219.02 13.059 219.211 12.895 219.375 cv
12.738 219.547 12.543 219.68 12.316 219.777 cv
12.094 219.883 11.828 219.934 11.516 219.93 cv
11.242 219.934 10.977 219.879 10.723 219.77 cv
10.473 219.664 10.254 219.504 10.063 219.289 cv
9.875 219.078 9.723 218.812 9.605 218.492 cv
9.492 218.172 9.434 217.801 9.434 217.371 cv
9.434 217.187 9.449 217 9.48 216.812 cv
9.512 216.629 9.551 216.461 9.598 216.305 cv
9.645 216.156 9.695 216.027 9.75 215.918 cv
9.805 215.816 9.855 215.734 9.895 215.676 cv
9.941 215.625 9.977 215.59 10.004 215.566 cv
10.035 215.551 10.07 215.535 10.105 215.527 cv
10.148 215.52 10.195 215.512 10.25 215.504 cv
10.309 215.496 10.379 215.492 10.461 215.492 cv
10.551 215.492 10.629 215.496 10.691 215.504 cv
10.762 215.512 10.813 215.527 10.852 215.543 cv
10.895 215.566 10.926 215.586 10.941 215.609 cv
10.961 215.637 10.969 215.668 10.969 215.695 cv
10.969 215.746 10.941 215.812 10.883 215.898 cv
10.828 215.988 10.766 216.102 10.699 216.242 cv
10.637 216.383 10.578 216.551 10.516 216.738 cv
10.461 216.93 10.43 217.145 10.43 217.387 cv
10.43 217.609 10.457 217.801 10.504 217.965 cv
10.559 218.133 10.629 218.27 10.715 218.375 cv
10.809 218.48 10.914 218.562 11.039 218.613 cv
11.164 218.672 11.301 218.699 11.445 218.695 cv
11.648 218.699 11.816 218.648 11.953 218.543 cv
12.094 218.441 12.215 218.305 12.316 218.137 cv
12.422 217.973 12.516 217.781 12.598 217.566 cv
12.684 217.355 12.77 217.141 12.855 216.918 cv
12.945 216.699 13.047 216.48 13.152 216.262 cv
13.262 216.047 13.391 215.855 13.547 215.687 cv
13.703 215.523 13.891 215.391 14.109 215.289 cv
14.328 215.191 14.59 215.141 14.887 215.137 cv
cp
f
12.809 210.691 mo
13.395 210.691 13.977 210.73 14.551 210.801 cv
15.125 210.879 15.691 210.988 16.254 211.129 cv
16.813 211.277 17.363 211.453 17.906 211.664 cv
18.449 211.875 18.984 212.121 19.516 212.398 cv
19.539 212.418 19.563 212.441 19.586 212.469 cv
19.605 212.504 19.625 212.543 19.641 212.59 cv
19.656 212.641 19.664 212.699 19.672 212.766 cv
19.672 212.836 19.676 212.918 19.68 213.008 cv
19.676 213.145 19.668 213.25 19.66 213.324 cv
19.645 213.402 19.625 213.457 19.598 213.488 cv
19.566 213.523 19.531 213.539 19.488 213.535 cv
19.441 213.535 19.387 213.52 19.328 213.492 cv
18.277 213.016 17.207 212.656 16.109 212.41 cv
15.012 212.168 13.902 212.047 12.785 212.043 cv
11.676 212.047 10.57 212.168 9.469 212.41 cv
8.371 212.656 7.301 213.023 6.254 213.508 cv
6.211 213.531 6.168 213.539 6.121 213.531 cv
6.082 213.531 6.047 213.508 6.02 213.461 cv
5.996 213.422 5.977 213.363 5.957 213.289 cv
5.945 213.219 5.938 213.121 5.934 213 cv
5.938 212.891 5.941 212.801 5.945 212.727 cv
5.957 212.656 5.969 212.598 5.98 212.551 cv
6 212.508 6.016 212.477 6.027 212.453 cv
6.047 212.437 6.063 212.422 6.082 212.406 cv
7.148 211.875 8.246 211.453 9.367 211.148 cv
10.496 210.844 11.641 210.691 12.809 210.691 cv
cp
f
280.59 533.18 mo
280.586 533.285 280.57 533.375 280.535 533.445 cv
280.5 533.523 280.453 533.582 280.398 533.625 cv
280.34 533.676 280.277 533.711 280.211 533.727 cv
280.137 533.75 280.066 533.758 280.004 533.758 cv
279.559 533.758 li
279.418 533.758 279.297 533.746 279.191 533.715 cv
279.086 533.691 278.988 533.637 278.895 533.559 cv
278.801 533.484 278.707 533.383 278.613 533.25 cv
278.52 533.121 278.418 532.957 278.313 532.754 cv
275.238 527.016 li
275.074 526.723 274.91 526.414 274.75 526.086 cv
274.582 525.766 274.43 525.449 274.293 525.141 cv
274.277 525.141 li
274.285 525.516 274.293 525.898 274.301 526.285 cv
274.305 526.676 274.305 527.062 274.309 527.445 cv
274.309 533.531 li
274.305 533.57 274.293 533.605 274.273 533.637 cv
274.25 533.672 274.215 533.699 274.164 533.715 cv
274.109 533.734 274.039 533.746 273.957 533.762 cv
273.871 533.773 273.766 533.781 273.637 533.781 cv
273.5 533.781 273.391 533.773 273.309 533.762 cv
273.223 533.746 273.156 533.734 273.109 533.715 cv
273.059 533.699 273.023 533.672 273 533.637 cv
272.977 533.605 272.965 533.57 272.969 533.531 cv
272.969 524.227 li
272.965 524.02 273.023 523.871 273.145 523.781 cv
273.262 523.695 273.391 523.652 273.531 523.648 cv
274.191 523.648 li
274.344 523.652 274.477 523.664 274.582 523.687 cv
274.684 523.715 274.777 523.758 274.863 523.816 cv
274.945 523.879 275.023 523.961 275.105 524.066 cv
275.18 524.176 275.262 524.312 275.348 524.469 cv
277.715 528.895 li
277.859 529.168 278 529.434 278.137 529.687 cv
278.27 529.945 278.398 530.199 278.527 530.445 cv
278.648 530.699 278.773 530.945 278.898 531.184 cv
279.02 531.426 279.141 531.668 279.266 531.91 cv
279.273 531.91 li
279.262 531.504 279.254 531.074 279.254 530.629 cv
279.246 530.184 279.246 529.758 279.25 529.348 cv
279.25 523.875 li
279.246 523.84 279.258 523.805 279.281 523.773 cv
279.305 523.742 279.34 523.715 279.395 523.691 cv
279.441 523.668 279.512 523.652 279.598 523.641 cv
279.684 523.633 279.793 523.629 279.934 523.625 cv
280.051 523.629 280.156 523.633 280.246 523.641 cv
280.332 523.652 280.398 523.668 280.449 523.691 cv
280.496 523.715 280.531 523.742 280.555 523.773 cv
280.574 523.805 280.586 523.84 280.59 523.875 cv
cp
f
289.141 533.539 mo
289.137 533.586 289.129 533.621 289.113 533.645 cv
289.094 533.676 289.059 533.699 289.016 533.719 cv
288.969 533.738 288.91 533.75 288.836 533.766 cv
288.758 533.773 288.664 533.781 288.559 533.781 cv
288.434 533.781 288.336 533.773 288.266 533.766 cv
288.188 533.75 288.129 533.738 288.086 533.719 cv
288.039 533.699 288.008 533.676 287.996 533.645 cv
287.977 533.621 287.969 533.586 287.973 533.539 cv
287.973 532.613 li
287.57 533.059 287.176 533.379 286.789 533.578 cv
286.395 533.781 286 533.879 285.605 533.883 cv
285.133 533.879 284.738 533.805 284.422 533.648 cv
284.102 533.496 283.844 533.285 283.648 533.016 cv
283.445 532.75 283.305 532.437 283.223 532.078 cv
283.133 531.723 283.09 531.289 283.094 530.781 cv
283.094 526.527 li
283.09 526.488 283.098 526.453 283.121 526.422 cv
283.137 526.395 283.172 526.371 283.227 526.344 cv
283.273 526.324 283.344 526.309 283.43 526.297 cv
283.512 526.293 283.613 526.289 283.742 526.285 cv
283.863 526.289 283.969 526.293 284.055 526.297 cv
284.137 526.309 284.203 526.324 284.25 526.344 cv
284.297 526.371 284.332 526.395 284.355 526.422 cv
284.375 526.453 284.383 526.488 284.387 526.527 cv
284.387 530.609 li
284.383 531.023 284.414 531.352 284.477 531.598 cv
284.535 531.844 284.625 532.055 284.75 532.227 cv
284.867 532.406 285.023 532.539 285.215 532.633 cv
285.398 532.73 285.617 532.781 285.867 532.777 cv
286.188 532.781 286.508 532.664 286.832 532.434 cv
287.148 532.207 287.488 531.871 287.848 531.426 cv
287.848 526.527 li
287.848 526.488 287.855 526.453 287.875 526.422 cv
287.891 526.395 287.926 526.371 287.98 526.344 cv
288.031 526.324 288.098 526.309 288.18 526.297 cv
288.258 526.293 288.363 526.289 288.496 526.285 cv
288.617 526.289 288.723 526.293 288.809 526.297 cv
288.891 526.309 288.953 526.324 289 526.344 cv
289.043 526.371 289.078 526.395 289.105 526.422 cv
289.125 526.453 289.137 526.488 289.141 526.527 cv
cp
f
301.918 533.539 mo
301.914 533.586 301.906 533.621 301.887 533.645 cv
301.863 533.676 301.828 533.699 301.785 533.719 cv
301.734 533.738 301.668 533.75 301.59 533.766 cv
301.504 533.773 301.402 533.781 301.277 533.781 cv
301.145 533.781 301.035 533.773 300.957 533.766 cv
300.871 533.75 300.805 533.738 300.758 533.719 cv
300.703 533.699 300.668 533.676 300.652 533.645 cv
300.629 533.621 300.621 533.586 300.621 533.539 cv
300.621 529.277 li
300.621 528.984 300.594 528.715 300.543 528.469 cv
300.488 528.227 300.406 528.016 300.293 527.836 cv
300.18 527.66 300.035 527.523 299.859 527.43 cv
299.68 527.336 299.469 527.289 299.234 527.289 cv
298.938 527.289 298.641 527.406 298.344 527.633 cv
298.039 527.867 297.711 528.199 297.355 528.637 cv
297.355 533.539 li
297.352 533.586 297.34 533.621 297.324 533.645 cv
297.301 533.676 297.27 533.699 297.223 533.719 cv
297.172 533.738 297.105 533.75 297.023 533.766 cv
296.938 533.773 296.832 533.781 296.711 533.781 cv
296.59 533.781 296.488 533.773 296.402 533.766 cv
296.316 533.75 296.246 533.738 296.199 533.719 cv
296.145 533.699 296.113 533.676 296.098 533.645 cv
296.078 533.621 296.066 533.586 296.07 533.539 cv
296.07 529.277 li
296.066 528.984 296.039 528.715 295.984 528.469 cv
295.926 528.227 295.84 528.016 295.727 527.836 cv
295.613 527.66 295.469 527.523 295.297 527.43 cv
295.117 527.336 294.91 527.289 294.676 527.289 cv
294.375 527.289 294.078 527.406 293.777 527.633 cv
293.477 527.867 293.148 528.199 292.797 528.637 cv
292.797 533.539 li
292.793 533.586 292.781 533.621 292.766 533.645 cv
292.742 533.676 292.711 533.699 292.664 533.719 cv
292.617 533.738 292.551 533.75 292.473 533.766 cv
292.387 533.773 292.281 533.781 292.152 533.781 cv
292.023 533.781 291.918 533.773 291.84 533.766 cv
291.754 533.75 291.688 533.738 291.641 533.719 cv
291.586 533.699 291.555 533.676 291.539 533.645 cv
291.52 533.621 291.508 533.586 291.512 533.539 cv
291.512 526.527 li
291.508 526.488 291.516 526.453 291.535 526.422 cv
291.547 526.395 291.578 526.371 291.629 526.344 cv
291.672 526.324 291.734 526.309 291.809 526.297 cv
291.879 526.293 291.973 526.289 292.098 526.285 cv
292.207 526.289 292.305 526.293 292.383 526.297 cv
292.457 526.309 292.516 526.324 292.559 526.344 cv
292.598 526.371 292.625 526.395 292.645 526.422 cv
292.66 526.453 292.668 526.488 292.672 526.527 cv
292.672 527.453 li
293.063 527.012 293.445 526.691 293.82 526.484 cv
294.188 526.281 294.566 526.176 294.949 526.176 cv
295.238 526.176 295.496 526.211 295.73 526.277 cv
295.957 526.348 296.164 526.441 296.344 526.562 cv
296.52 526.684 296.668 526.828 296.797 526.996 cv
296.918 527.168 297.023 527.359 297.109 527.562 cv
297.34 527.312 297.563 527.098 297.773 526.918 cv
297.984 526.746 298.188 526.602 298.383 526.488 cv
298.578 526.383 298.766 526.305 298.949 526.25 cv
299.133 526.203 299.32 526.176 299.508 526.176 cv
299.961 526.176 300.34 526.258 300.645 526.414 cv
300.949 526.578 301.195 526.789 301.391 527.051 cv
301.578 527.316 301.715 527.625 301.797 527.98 cv
301.875 528.336 301.914 528.711 301.918 529.105 cv
cp
f
310.715 529.937 mo
310.711 530.547 310.645 531.098 310.516 531.582 cv
310.379 532.07 310.184 532.484 309.93 532.824 cv
309.672 533.168 309.355 533.43 308.984 533.609 cv
308.609 533.793 308.184 533.879 307.699 533.883 cv
307.473 533.879 307.266 533.859 307.078 533.816 cv
306.891 533.77 306.703 533.699 306.523 533.602 cv
306.336 533.504 306.156 533.379 305.977 533.227 cv
305.793 533.078 305.602 532.898 305.402 532.684 cv
305.402 533.539 li
305.402 533.586 305.391 533.621 305.371 533.648 cv
305.348 533.684 305.313 533.707 305.27 533.723 cv
305.219 533.738 305.16 533.75 305.094 533.766 cv
305.02 533.773 304.93 533.781 304.824 533.781 cv
304.715 533.781 304.629 533.773 304.559 533.766 cv
304.484 533.75 304.422 533.738 304.379 533.723 cv
304.328 533.707 304.297 533.684 304.285 533.648 cv
304.266 533.621 304.258 533.586 304.262 533.539 cv
304.262 523.129 li
304.258 523.09 304.27 523.055 304.289 523.02 cv
304.305 522.992 304.336 522.965 304.391 522.941 cv
304.438 522.922 304.504 522.906 304.59 522.895 cv
304.668 522.887 304.773 522.883 304.902 522.879 cv
305.031 522.883 305.137 522.887 305.223 522.895 cv
305.301 522.906 305.367 522.922 305.414 522.941 cv
305.461 522.965 305.492 522.992 305.516 523.02 cv
305.531 523.055 305.543 523.09 305.547 523.129 cv
305.547 527.328 li
305.754 527.117 305.957 526.937 306.152 526.793 cv
306.348 526.648 306.535 526.531 306.723 526.437 cv
306.906 526.352 307.094 526.285 307.285 526.238 cv
307.469 526.199 307.668 526.176 307.879 526.176 cv
308.383 526.176 308.816 526.277 309.184 526.48 cv
309.543 526.684 309.836 526.957 310.063 527.293 cv
310.285 527.637 310.453 528.035 310.559 528.492 cv
310.66 528.949 310.711 529.43 310.715 529.937 cv
cp
309.383 530.086 mo
309.379 529.73 309.352 529.383 309.301 529.043 cv
309.242 528.707 309.148 528.41 309.012 528.148 cv
308.875 527.891 308.695 527.68 308.473 527.52 cv
308.246 527.363 307.965 527.285 307.633 527.281 cv
307.465 527.285 307.301 527.309 307.141 527.352 cv
306.977 527.402 306.813 527.48 306.645 527.586 cv
306.477 527.699 306.301 527.84 306.125 528.008 cv
305.941 528.184 305.75 528.398 305.547 528.652 cv
305.547 531.449 li
305.902 531.883 306.242 532.215 306.566 532.437 cv
306.891 532.668 307.227 532.781 307.578 532.777 cv
307.898 532.781 308.176 532.703 308.41 532.543 cv
308.637 532.391 308.824 532.184 308.969 531.922 cv
309.113 531.668 309.219 531.379 309.285 531.059 cv
309.348 530.742 309.379 530.418 309.383 530.086 cv
cp
f
318.625 529.73 mo
318.621 529.934 318.57 530.074 318.473 530.16 cv
318.367 530.246 318.25 530.289 318.125 530.289 cv
313.508 530.289 li
313.504 530.68 313.543 531.031 313.625 531.344 cv
313.699 531.656 313.832 531.926 314.016 532.145 cv
314.195 532.371 314.43 532.543 314.727 532.66 cv
315.016 532.785 315.375 532.844 315.801 532.84 cv
316.133 532.844 316.43 532.816 316.691 532.758 cv
316.953 532.707 317.18 532.645 317.371 532.574 cv
317.559 532.508 317.715 532.449 317.84 532.391 cv
317.961 532.34 318.055 532.312 318.117 532.309 cv
318.152 532.312 318.184 532.32 318.215 532.336 cv
318.242 532.355 318.266 532.383 318.285 532.418 cv
318.297 532.457 318.309 532.508 318.32 532.57 cv
318.324 532.637 318.328 532.715 318.332 532.809 cv
318.328 532.879 318.324 532.937 318.324 532.984 cv
318.316 533.031 318.313 533.074 318.305 533.113 cv
318.297 533.152 318.281 533.187 318.266 533.219 cv
318.242 533.25 318.219 533.281 318.195 533.309 cv
318.164 533.34 318.082 533.387 317.941 533.449 cv
317.801 533.516 317.617 533.578 317.395 533.641 cv
317.168 533.703 316.91 533.758 316.617 533.809 cv
316.324 533.855 316.012 533.879 315.68 533.883 cv
315.102 533.879 314.594 533.801 314.164 533.641 cv
313.727 533.48 313.363 533.242 313.07 532.926 cv
312.77 532.609 312.547 532.215 312.398 531.734 cv
312.25 531.258 312.176 530.699 312.176 530.062 cv
312.176 529.465 312.25 528.926 312.406 528.441 cv
312.559 527.965 312.785 527.555 313.082 527.219 cv
313.375 526.883 313.73 526.625 314.145 526.445 cv
314.559 526.266 315.023 526.176 315.539 526.176 cv
316.09 526.176 316.559 526.266 316.945 526.441 cv
317.332 526.621 317.648 526.859 317.902 527.156 cv
318.148 527.457 318.332 527.809 318.449 528.207 cv
318.563 528.613 318.621 529.043 318.625 529.496 cv
cp
317.332 529.348 mo
317.348 528.672 317.195 528.141 316.879 527.758 cv
316.563 527.375 316.094 527.184 315.477 527.18 cv
315.152 527.184 314.871 527.242 314.633 527.359 cv
314.391 527.48 314.191 527.641 314.031 527.836 cv
313.867 528.035 313.742 528.266 313.656 528.527 cv
313.566 528.789 313.516 529.062 313.508 529.348 cv
cp
f
324.691 526.984 mo
324.688 527.102 324.688 527.199 324.684 527.273 cv
324.676 527.355 324.664 527.418 324.652 527.457 cv
324.633 527.504 324.613 527.535 324.594 527.559 cv
324.566 527.582 324.535 527.594 324.496 527.594 cv
324.453 527.594 324.402 527.582 324.344 527.559 cv
324.281 527.535 324.211 527.512 324.141 527.488 cv
324.063 527.465 323.98 527.445 323.887 527.422 cv
323.793 527.406 323.691 527.395 323.582 527.391 cv
323.449 527.395 323.32 527.422 323.199 527.469 cv
323.074 527.523 322.945 527.609 322.809 527.727 cv
322.668 527.852 322.523 528.008 322.375 528.203 cv
322.223 528.398 322.055 528.641 321.875 528.926 cv
321.875 533.539 li
321.871 533.586 321.859 533.621 321.844 533.645 cv
321.82 533.676 321.789 533.699 321.742 533.719 cv
321.695 533.738 321.629 533.75 321.551 533.766 cv
321.465 533.773 321.359 533.781 321.23 533.781 cv
321.102 533.781 320.996 533.773 320.918 533.766 cv
320.832 533.75 320.766 533.738 320.719 533.719 cv
320.664 533.699 320.633 533.676 320.617 533.645 cv
320.598 533.621 320.586 533.586 320.59 533.539 cv
320.59 526.527 li
320.586 526.488 320.594 526.453 320.613 526.422 cv
320.625 526.395 320.656 526.371 320.707 526.344 cv
320.75 526.324 320.813 526.309 320.887 526.297 cv
320.957 526.293 321.051 526.289 321.176 526.285 cv
321.285 526.289 321.383 526.293 321.461 526.297 cv
321.535 526.309 321.594 526.324 321.637 526.344 cv
321.676 526.371 321.703 526.395 321.723 526.422 cv
321.738 526.453 321.746 526.488 321.75 526.527 cv
321.75 527.547 li
321.938 527.266 322.121 527.039 322.293 526.863 cv
322.461 526.687 322.621 526.547 322.773 526.445 cv
322.922 526.344 323.07 526.273 323.219 526.234 cv
323.367 526.195 323.516 526.176 323.668 526.176 cv
323.734 526.176 323.813 526.18 323.898 526.187 cv
323.984 526.195 324.074 526.211 324.168 526.23 cv
324.262 526.254 324.344 526.277 324.422 526.301 cv
324.492 526.328 324.547 526.355 324.582 526.379 cv
324.609 526.41 324.629 526.434 324.645 526.453 cv
324.652 526.48 324.664 526.512 324.672 526.543 cv
324.68 526.582 324.684 526.633 324.688 526.703 cv
324.688 526.773 324.688 526.867 324.691 526.984 cv
cp
f
336.449 529.953 mo
336.445 530.531 336.371 531.059 336.223 531.535 cv
336.07 532.02 335.844 532.434 335.547 532.777 cv
335.246 533.129 334.871 533.398 334.426 533.59 cv
333.973 533.785 333.453 533.879 332.863 533.883 cv
332.285 533.879 331.781 533.797 331.355 533.625 cv
330.926 533.457 330.57 533.207 330.285 532.879 cv
329.996 532.551 329.781 532.156 329.645 531.687 cv
329.504 531.223 329.438 530.691 329.438 530.094 cv
329.438 529.527 329.508 529 329.656 528.52 cv
329.801 528.039 330.027 527.625 330.328 527.273 cv
330.625 526.926 330.996 526.656 331.445 526.465 cv
331.891 526.273 332.414 526.176 333.012 526.176 cv
333.59 526.176 334.09 526.262 334.52 526.434 cv
334.945 526.605 335.305 526.855 335.59 527.184 cv
335.875 527.512 336.09 527.91 336.234 528.375 cv
336.375 528.844 336.445 529.371 336.449 529.953 cv
cp
335.117 530.039 mo
335.113 529.664 335.078 529.305 335.012 528.965 cv
334.938 528.629 334.82 528.336 334.66 528.078 cv
334.496 527.828 334.277 527.625 334 527.473 cv
333.719 527.328 333.371 527.254 332.961 527.25 cv
332.574 527.254 332.246 527.32 331.973 527.453 cv
331.695 527.59 331.469 527.781 331.293 528.027 cv
331.113 528.273 330.98 528.566 330.898 528.902 cv
330.809 529.242 330.766 529.609 330.77 530.008 cv
330.766 530.395 330.801 530.758 330.875 531.094 cv
330.941 531.434 331.059 531.727 331.227 531.977 cv
331.391 532.23 331.613 532.434 331.891 532.578 cv
332.168 532.73 332.516 532.805 332.93 532.801 cv
333.305 532.805 333.633 532.734 333.914 532.598 cv
334.191 532.465 334.418 532.277 334.598 532.027 cv
334.773 531.785 334.902 531.492 334.988 531.156 cv
335.07 530.82 335.113 530.449 335.117 530.039 cv
cp
f
342.18 523.641 mo
342.176 523.742 342.172 523.82 342.164 523.879 cv
342.152 523.941 342.141 523.992 342.129 524.023 cv
342.113 524.062 342.098 524.086 342.078 524.098 cv
342.055 524.113 342.027 524.121 342 524.117 cv
341.961 524.121 341.914 524.109 341.863 524.082 cv
341.805 524.062 341.738 524.035 341.664 524.004 cv
341.582 523.977 341.492 523.949 341.387 523.926 cv
341.277 523.902 341.152 523.891 341.02 523.891 cv
340.824 523.891 340.66 523.922 340.527 523.984 cv
340.387 524.047 340.277 524.145 340.199 524.277 cv
340.113 524.41 340.055 524.582 340.02 524.793 cv
339.98 525.004 339.961 525.262 339.965 525.559 cv
339.965 526.324 li
341.531 526.324 li
341.57 526.328 341.605 526.336 341.637 526.352 cv
341.664 526.371 341.691 526.402 341.715 526.445 cv
341.738 526.492 341.754 526.551 341.77 526.613 cv
341.777 526.684 341.785 526.766 341.789 526.859 cv
341.785 527.051 341.762 527.184 341.719 527.266 cv
341.668 527.352 341.605 527.395 341.531 527.391 cv
339.965 527.391 li
339.965 533.539 li
339.961 533.586 339.953 533.621 339.934 533.645 cv
339.91 533.676 339.875 533.699 339.828 533.719 cv
339.777 533.738 339.711 533.75 339.629 533.766 cv
339.543 533.773 339.438 533.781 339.32 533.781 cv
339.191 533.781 339.09 533.773 339.008 533.766 cv
338.922 533.75 338.855 533.738 338.809 533.719 cv
338.758 533.699 338.723 533.676 338.703 533.645 cv
338.68 533.621 338.668 533.586 338.672 533.539 cv
338.672 527.391 li
337.684 527.391 li
337.598 527.395 337.535 527.352 337.496 527.266 cv
337.453 527.184 337.43 527.051 337.434 526.859 cv
337.43 526.766 337.438 526.684 337.449 526.613 cv
337.457 526.551 337.473 526.492 337.496 526.445 cv
337.516 526.402 337.539 526.371 337.574 526.352 cv
337.602 526.336 337.641 526.328 337.684 526.324 cv
338.672 526.324 li
338.672 525.598 li
338.668 525.113 338.715 524.695 338.809 524.34 cv
338.898 523.992 339.035 523.703 339.223 523.48 cv
339.406 523.258 339.641 523.094 339.93 522.984 cv
340.211 522.879 340.547 522.824 340.934 522.824 cv
341.109 522.824 341.285 522.844 341.461 522.875 cv
341.629 522.914 341.762 522.949 341.859 522.984 cv
341.949 523.027 342.012 523.062 342.047 523.09 cv
342.074 523.125 342.102 523.164 342.125 523.211 cv
342.145 523.262 342.156 523.324 342.168 523.391 cv
342.172 523.465 342.176 523.547 342.18 523.641 cv
cp
f
352.379 530.906 mo
352.375 531.379 352.289 531.801 352.117 532.168 cv
351.941 532.543 351.699 532.855 351.391 533.109 cv
351.082 533.367 350.719 533.559 350.301 533.687 cv
349.879 533.816 349.43 533.879 348.949 533.883 cv
348.609 533.879 348.293 533.852 348.008 533.797 cv
347.719 533.738 347.465 533.672 347.238 533.586 cv
347.012 533.508 346.82 533.422 346.668 533.328 cv
346.512 533.242 346.406 533.164 346.348 533.102 cv
346.289 533.039 346.246 532.961 346.219 532.867 cv
346.188 532.773 346.172 532.645 346.176 532.48 cv
346.172 532.367 346.176 532.273 346.191 532.195 cv
346.199 532.121 346.215 532.059 346.238 532.012 cv
346.254 531.965 346.281 531.934 346.316 531.914 cv
346.344 531.898 346.379 531.891 346.422 531.887 cv
346.492 531.891 346.594 531.934 346.73 532.02 cv
346.859 532.109 347.031 532.207 347.242 532.309 cv
347.449 532.418 347.699 532.516 347.992 532.602 cv
348.285 532.695 348.625 532.738 349.012 532.738 cv
349.301 532.738 349.566 532.699 349.809 532.621 cv
350.047 532.543 350.254 532.434 350.434 532.289 cv
350.605 532.148 350.742 531.973 350.836 531.762 cv
350.93 531.555 350.977 531.32 350.977 531.055 cv
350.977 530.773 350.91 530.527 350.781 530.32 cv
350.648 530.121 350.477 529.945 350.266 529.789 cv
350.051 529.641 349.809 529.5 349.535 529.367 cv
349.262 529.242 348.98 529.109 348.699 528.977 cv
348.41 528.844 348.133 528.699 347.863 528.535 cv
347.594 528.379 347.352 528.187 347.141 527.969 cv
346.922 527.75 346.75 527.496 346.621 527.199 cv
346.484 526.91 346.418 526.559 346.422 526.145 cv
346.418 525.727 346.496 525.352 346.652 525.02 cv
346.805 524.691 347.016 524.414 347.293 524.187 cv
347.563 523.969 347.887 523.797 348.266 523.68 cv
348.641 523.562 349.051 523.504 349.488 523.504 cv
349.707 523.504 349.93 523.523 350.16 523.562 cv
350.383 523.602 350.594 523.652 350.797 523.715 cv
350.992 523.781 351.172 523.855 351.332 523.934 cv
351.484 524.016 351.586 524.082 351.641 524.129 cv
351.688 524.184 351.723 524.223 351.738 524.246 cv
351.754 524.277 351.766 524.312 351.777 524.355 cv
351.785 524.402 351.793 524.457 351.801 524.516 cv
351.805 524.582 351.809 524.66 351.809 524.758 cv
351.809 524.852 351.805 524.937 351.797 525.008 cv
351.789 525.086 351.777 525.145 351.762 525.191 cv
351.746 525.238 351.723 525.273 351.695 525.297 cv
351.664 525.32 351.633 525.332 351.598 525.332 cv
351.539 525.332 351.449 525.297 351.328 525.227 cv
351.203 525.156 351.051 525.074 350.879 524.98 cv
350.699 524.891 350.492 524.809 350.254 524.73 cv
350.008 524.656 349.738 524.617 349.441 524.617 cv
349.16 524.617 348.914 524.656 348.707 524.73 cv
348.496 524.809 348.324 524.91 348.191 525.031 cv
348.055 525.156 347.953 525.301 347.887 525.473 cv
347.82 525.645 347.789 525.828 347.789 526.02 cv
347.789 526.305 347.852 526.547 347.98 526.746 cv
348.109 526.949 348.281 527.129 348.5 527.281 cv
348.711 527.441 348.957 527.582 349.234 527.711 cv
349.508 527.844 349.789 527.977 350.078 528.105 cv
350.363 528.238 350.645 528.383 350.918 528.539 cv
351.191 528.699 351.438 528.887 351.656 529.102 cv
351.871 529.32 352.043 529.574 352.18 529.867 cv
352.309 530.16 352.375 530.508 352.379 530.906 cv
cp
f
360.145 533.539 mo
360.141 533.586 360.133 533.621 360.117 533.645 cv
360.098 533.676 360.063 533.699 360.02 533.719 cv
359.973 533.738 359.914 533.75 359.84 533.766 cv
359.762 533.773 359.668 533.781 359.563 533.781 cv
359.438 533.781 359.34 533.773 359.27 533.766 cv
359.191 533.75 359.133 533.738 359.09 533.719 cv
359.043 533.699 359.012 533.676 359 533.645 cv
358.98 533.621 358.973 533.586 358.977 533.539 cv
358.977 532.613 li
358.574 533.059 358.18 533.379 357.793 533.578 cv
357.398 533.781 357.004 533.879 356.609 533.883 cv
356.137 533.879 355.742 533.805 355.426 533.648 cv
355.105 533.496 354.848 533.285 354.652 533.016 cv
354.449 532.75 354.309 532.437 354.227 532.078 cv
354.137 531.723 354.094 531.289 354.098 530.781 cv
354.098 526.527 li
354.094 526.488 354.102 526.453 354.125 526.422 cv
354.141 526.395 354.176 526.371 354.23 526.344 cv
354.277 526.324 354.348 526.309 354.434 526.297 cv
354.516 526.293 354.617 526.289 354.746 526.285 cv
354.867 526.289 354.973 526.293 355.059 526.297 cv
355.141 526.309 355.207 526.324 355.254 526.344 cv
355.301 526.371 355.336 526.395 355.359 526.422 cv
355.379 526.453 355.387 526.488 355.391 526.527 cv
355.391 530.609 li
355.387 531.023 355.418 531.352 355.48 531.598 cv
355.539 531.844 355.629 532.055 355.754 532.227 cv
355.871 532.406 356.027 532.539 356.219 532.633 cv
356.402 532.73 356.621 532.781 356.871 532.777 cv
357.191 532.781 357.512 532.664 357.836 532.434 cv
358.152 532.207 358.492 531.871 358.852 531.426 cv
358.852 526.527 li
358.852 526.488 358.859 526.453 358.879 526.422 cv
358.895 526.395 358.93 526.371 358.984 526.344 cv
359.035 526.324 359.102 526.309 359.184 526.297 cv
359.262 526.293 359.367 526.289 359.5 526.285 cv
359.621 526.289 359.727 526.293 359.813 526.297 cv
359.895 526.309 359.957 526.324 360.004 526.344 cv
360.047 526.371 360.082 526.395 360.109 526.422 cv
360.129 526.453 360.141 526.488 360.145 526.527 cv
cp
f
369 529.937 mo
368.996 530.547 368.93 531.098 368.801 531.582 cv
368.664 532.07 368.469 532.484 368.215 532.824 cv
367.957 533.168 367.641 533.43 367.27 533.609 cv
366.895 533.793 366.469 533.879 365.984 533.883 cv
365.758 533.879 365.551 533.859 365.363 533.816 cv
365.176 533.77 364.988 533.699 364.809 533.602 cv
364.621 533.504 364.441 533.379 364.262 533.227 cv
364.078 533.078 363.887 532.898 363.688 532.684 cv
363.688 533.539 li
363.688 533.586 363.676 533.621 363.656 533.648 cv
363.633 533.684 363.598 533.707 363.555 533.723 cv
363.504 533.738 363.445 533.75 363.379 533.766 cv
363.305 533.773 363.215 533.781 363.109 533.781 cv
363 533.781 362.914 533.773 362.844 533.766 cv
362.77 533.75 362.707 533.738 362.664 533.723 cv
362.613 533.707 362.582 533.684 362.57 533.648 cv
362.551 533.621 362.543 533.586 362.547 533.539 cv
362.547 523.129 li
362.543 523.09 362.555 523.055 362.574 523.02 cv
362.59 522.992 362.621 522.965 362.676 522.941 cv
362.723 522.922 362.789 522.906 362.875 522.895 cv
362.953 522.887 363.059 522.883 363.188 522.879 cv
363.316 522.883 363.422 522.887 363.508 522.895 cv
363.586 522.906 363.652 522.922 363.699 522.941 cv
363.746 522.965 363.777 522.992 363.801 523.02 cv
363.816 523.055 363.828 523.09 363.832 523.129 cv
363.832 527.328 li
364.039 527.117 364.242 526.937 364.438 526.793 cv
364.633 526.648 364.82 526.531 365.008 526.437 cv
365.191 526.352 365.379 526.285 365.57 526.238 cv
365.754 526.199 365.953 526.176 366.164 526.176 cv
366.668 526.176 367.102 526.277 367.469 526.48 cv
367.828 526.684 368.121 526.957 368.348 527.293 cv
368.57 527.637 368.738 528.035 368.844 528.492 cv
368.945 528.949 368.996 529.43 369 529.937 cv
cp
367.668 530.086 mo
367.664 529.73 367.637 529.383 367.586 529.043 cv
367.527 528.707 367.434 528.41 367.297 528.148 cv
367.16 527.891 366.98 527.68 366.758 527.52 cv
366.531 527.363 366.25 527.285 365.918 527.281 cv
365.75 527.285 365.586 527.309 365.426 527.352 cv
365.262 527.402 365.098 527.48 364.93 527.586 cv
364.762 527.699 364.586 527.84 364.41 528.008 cv
364.227 528.184 364.035 528.398 363.832 528.652 cv
363.832 531.449 li
364.188 531.883 364.527 532.215 364.852 532.437 cv
365.176 532.668 365.512 532.781 365.863 532.777 cv
366.184 532.781 366.461 532.703 366.695 532.543 cv
366.922 532.391 367.109 532.184 367.254 531.922 cv
367.398 531.668 367.504 531.379 367.57 531.059 cv
367.633 530.742 367.664 530.418 367.668 530.086 cv
cp
f
374.137 529.801 mo
374.137 530.004 374.113 530.141 374.066 530.219 cv
374.02 530.297 373.949 530.336 373.863 530.336 cv
370.605 530.336 li
370.512 530.336 370.445 530.297 370.398 530.215 cv
370.352 530.137 370.328 530 370.328 529.801 cv
370.328 529.605 370.352 529.465 370.398 529.387 cv
370.445 529.309 370.512 529.27 370.605 529.27 cv
373.863 529.27 li
373.902 529.27 373.941 529.277 373.977 529.293 cv
374.008 529.309 374.035 529.34 374.063 529.383 cv
374.082 529.43 374.102 529.484 374.117 529.551 cv
374.129 529.621 374.137 529.707 374.137 529.801 cv
cp
f
377.391 533.531 mo
377.387 533.574 377.379 533.609 377.359 533.641 cv
377.336 533.672 377.297 533.699 377.25 533.715 cv
377.195 533.734 377.129 533.746 377.043 533.762 cv
376.957 533.773 376.848 533.781 376.723 533.781 cv
376.594 533.781 376.488 533.773 376.402 533.762 cv
376.313 533.746 376.242 533.734 376.191 533.715 cv
376.137 533.699 376.102 533.672 376.082 533.641 cv
376.059 533.609 376.047 533.574 376.051 533.531 cv
376.051 523.852 li
376.047 523.812 376.059 523.777 376.086 523.742 cv
376.105 523.715 376.145 523.687 376.203 523.668 cv
376.254 523.652 376.324 523.637 376.414 523.621 cv
376.496 523.609 376.598 523.605 376.723 523.602 cv
376.848 523.605 376.957 523.609 377.043 523.621 cv
377.129 523.637 377.195 523.652 377.25 523.668 cv
377.297 523.687 377.336 523.715 377.359 523.742 cv
377.379 523.777 377.387 523.812 377.391 523.852 cv
cp
f
390.379 533.539 mo
390.375 533.586 390.367 533.621 390.348 533.645 cv
390.324 533.676 390.289 533.699 390.246 533.719 cv
390.195 533.738 390.129 533.75 390.051 533.766 cv
389.965 533.773 389.863 533.781 389.738 533.781 cv
389.605 533.781 389.496 533.773 389.418 533.766 cv
389.332 533.75 389.266 533.738 389.219 533.719 cv
389.164 533.699 389.129 533.676 389.113 533.645 cv
389.09 533.621 389.082 533.586 389.082 533.539 cv
389.082 529.277 li
389.082 528.984 389.055 528.715 389.004 528.469 cv
388.949 528.227 388.867 528.016 388.754 527.836 cv
388.641 527.66 388.496 527.523 388.32 527.43 cv
388.141 527.336 387.93 527.289 387.695 527.289 cv
387.398 527.289 387.102 527.406 386.805 527.633 cv
386.5 527.867 386.172 528.199 385.816 528.637 cv
385.816 533.539 li
385.813 533.586 385.801 533.621 385.785 533.645 cv
385.762 533.676 385.73 533.699 385.684 533.719 cv
385.633 533.738 385.566 533.75 385.484 533.766 cv
385.398 533.773 385.293 533.781 385.172 533.781 cv
385.051 533.781 384.949 533.773 384.863 533.766 cv
384.777 533.75 384.707 533.738 384.66 533.719 cv
384.605 533.699 384.574 533.676 384.559 533.645 cv
384.539 533.621 384.527 533.586 384.531 533.539 cv
384.531 529.277 li
384.527 528.984 384.5 528.715 384.445 528.469 cv
384.387 528.227 384.301 528.016 384.188 527.836 cv
384.074 527.66 383.93 527.523 383.758 527.43 cv
383.578 527.336 383.371 527.289 383.137 527.289 cv
382.836 527.289 382.539 527.406 382.238 527.633 cv
381.938 527.867 381.609 528.199 381.258 528.637 cv
381.258 533.539 li
381.254 533.586 381.242 533.621 381.227 533.645 cv
381.203 533.676 381.172 533.699 381.125 533.719 cv
381.078 533.738 381.012 533.75 380.934 533.766 cv
380.848 533.773 380.742 533.781 380.613 533.781 cv
380.484 533.781 380.379 533.773 380.301 533.766 cv
380.215 533.75 380.148 533.738 380.102 533.719 cv
380.047 533.699 380.016 533.676 380 533.645 cv
379.98 533.621 379.969 533.586 379.973 533.539 cv
379.973 526.527 li
379.969 526.488 379.977 526.453 379.996 526.422 cv
380.008 526.395 380.039 526.371 380.09 526.344 cv
380.133 526.324 380.195 526.309 380.27 526.297 cv
380.34 526.293 380.434 526.289 380.559 526.285 cv
380.668 526.289 380.766 526.293 380.844 526.297 cv
380.918 526.309 380.977 526.324 381.02 526.344 cv
381.059 526.371 381.086 526.395 381.105 526.422 cv
381.121 526.453 381.129 526.488 381.133 526.527 cv
381.133 527.453 li
381.523 527.012 381.906 526.691 382.281 526.484 cv
382.648 526.281 383.027 526.176 383.41 526.176 cv
383.699 526.176 383.957 526.211 384.191 526.277 cv
384.418 526.348 384.625 526.441 384.805 526.562 cv
384.98 526.684 385.129 526.828 385.258 526.996 cv
385.379 527.168 385.484 527.359 385.57 527.562 cv
385.801 527.312 386.023 527.098 386.234 526.918 cv
386.445 526.746 386.648 526.602 386.844 526.488 cv
387.039 526.383 387.227 526.305 387.41 526.25 cv
387.594 526.203 387.781 526.176 387.969 526.176 cv
388.422 526.176 388.801 526.258 389.105 526.414 cv
389.41 526.578 389.656 526.789 389.852 527.051 cv
390.039 527.316 390.176 527.625 390.258 527.98 cv
390.336 528.336 390.375 528.711 390.379 529.105 cv
cp
f
398.008 533.547 mo
398.004 533.609 397.984 533.656 397.945 533.687 cv
397.902 533.719 397.844 533.742 397.773 533.758 cv
397.695 533.773 397.59 533.781 397.453 533.781 cv
397.316 533.781 397.207 533.773 397.129 533.758 cv
397.043 533.742 396.984 533.719 396.953 533.687 cv
396.914 533.656 396.898 533.609 396.902 533.547 cv
396.902 532.848 li
396.594 533.176 396.25 533.43 395.875 533.609 cv
395.496 533.793 395.098 533.879 394.68 533.883 cv
394.305 533.879 393.973 533.832 393.676 533.738 cv
393.379 533.641 393.125 533.504 392.914 533.32 cv
392.703 533.141 392.539 532.918 392.422 532.652 cv
392.305 532.391 392.246 532.09 392.25 531.746 cv
392.246 531.355 392.324 531.012 392.488 530.719 cv
392.645 530.43 392.879 530.187 393.184 529.996 cv
393.484 529.805 393.852 529.66 394.289 529.562 cv
394.723 529.469 395.215 529.422 395.762 529.418 cv
396.73 529.418 li
396.73 528.871 li
396.727 528.602 396.699 528.363 396.645 528.156 cv
396.586 527.949 396.492 527.777 396.367 527.637 cv
396.234 527.5 396.07 527.395 395.871 527.324 cv
395.664 527.254 395.414 527.219 395.125 527.219 cv
394.805 527.219 394.52 527.258 394.27 527.332 cv
394.012 527.41 393.793 527.492 393.605 527.582 cv
393.418 527.676 393.258 527.762 393.133 527.832 cv
393 527.91 392.906 527.945 392.848 527.945 cv
392.805 527.945 392.77 527.937 392.738 527.914 cv
392.707 527.898 392.68 527.867 392.656 527.82 cv
392.633 527.781 392.613 527.727 392.605 527.66 cv
392.59 527.598 392.586 527.527 392.59 527.445 cv
392.586 527.32 392.594 527.215 392.617 527.137 cv
392.633 527.062 392.68 526.992 392.75 526.922 cv
392.82 526.855 392.941 526.777 393.113 526.687 cv
393.285 526.598 393.48 526.516 393.703 526.437 cv
393.926 526.367 394.172 526.305 394.438 526.25 cv
394.703 526.203 394.969 526.176 395.242 526.176 cv
395.742 526.176 396.172 526.234 396.523 526.348 cv
396.875 526.465 397.16 526.633 397.383 526.852 cv
397.598 527.074 397.758 527.348 397.859 527.672 cv
397.957 528.004 398.004 528.387 398.008 528.816 cv
cp
396.73 530.344 mo
395.629 530.344 li
395.273 530.348 394.969 530.379 394.711 530.434 cv
394.449 530.496 394.234 530.582 394.063 530.699 cv
393.891 530.816 393.766 530.957 393.688 531.121 cv
393.605 531.285 393.563 531.473 393.566 531.684 cv
393.563 532.051 393.68 532.344 393.91 532.555 cv
394.141 532.773 394.465 532.879 394.883 532.879 cv
395.219 532.879 395.531 532.793 395.82 532.621 cv
396.109 532.449 396.41 532.187 396.73 531.832 cv
cp
f
406.227 526.844 mo
406.223 527.027 406.199 527.16 406.152 527.238 cv
406.102 527.32 406.039 527.359 405.965 527.359 cv
404.957 527.359 li
405.137 527.547 405.266 527.754 405.34 527.98 cv
405.41 528.207 405.445 528.441 405.449 528.684 cv
405.445 529.09 405.379 529.449 405.254 529.762 cv
405.121 530.074 404.938 530.34 404.695 530.551 cv
404.453 530.77 404.164 530.934 403.836 531.047 cv
403.5 531.164 403.133 531.223 402.73 531.219 cv
402.441 531.223 402.168 531.184 401.914 531.105 cv
401.652 531.031 401.457 530.937 401.32 530.82 cv
401.227 530.918 401.148 531.023 401.09 531.141 cv
401.027 531.262 400.996 531.398 401 531.551 cv
400.996 531.734 401.082 531.887 401.254 532.004 cv
401.422 532.129 401.645 532.191 401.926 532.199 cv
403.758 532.277 li
404.105 532.289 404.422 532.336 404.715 532.422 cv
405.004 532.508 405.258 532.633 405.473 532.789 cv
405.684 532.949 405.852 533.141 405.973 533.371 cv
406.09 533.605 406.148 533.875 406.152 534.18 cv
406.148 534.5 406.082 534.805 405.949 535.098 cv
405.813 535.387 405.605 535.641 405.328 535.863 cv
405.047 536.082 404.691 536.258 404.262 536.387 cv
403.832 536.512 403.324 536.574 402.738 536.578 cv
402.168 536.574 401.684 536.527 401.289 536.434 cv
400.891 536.336 400.566 536.203 400.313 536.039 cv
400.059 535.871 399.875 535.676 399.762 535.445 cv
399.645 535.211 399.586 534.957 399.59 534.691 cv
399.586 534.52 399.605 534.355 399.652 534.195 cv
399.691 534.031 399.754 533.879 399.84 533.734 cv
399.922 533.59 400.031 533.453 400.16 533.316 cv
400.285 533.187 400.43 533.055 400.602 532.926 cv
400.344 532.797 400.156 532.633 400.035 532.434 cv
399.914 532.238 399.855 532.027 399.855 531.793 cv
399.855 531.48 399.918 531.195 400.047 530.945 cv
400.176 530.695 400.336 530.473 400.531 530.273 cv
400.367 530.082 400.242 529.867 400.148 529.625 cv
400.055 529.387 400.008 529.094 400.008 528.746 cv
400.008 528.352 400.074 527.992 400.211 527.672 cv
400.344 527.355 400.531 527.09 400.773 526.871 cv
401.012 526.656 401.297 526.488 401.633 526.367 cv
401.965 526.254 402.332 526.195 402.73 526.191 cv
402.941 526.195 403.141 526.207 403.324 526.227 cv
403.508 526.254 403.68 526.285 403.844 526.324 cv
405.965 526.324 li
406.051 526.328 406.117 526.371 406.16 526.453 cv
406.203 526.543 406.223 526.672 406.227 526.844 cv
cp
404.219 528.691 mo
404.215 528.219 404.082 527.848 403.824 527.574 cv
403.559 527.309 403.188 527.172 402.707 527.172 cv
402.453 527.172 402.234 527.215 402.055 527.297 cv
401.867 527.383 401.715 527.496 401.594 527.641 cv
401.473 527.789 401.383 527.957 401.324 528.145 cv
401.262 528.332 401.23 528.531 401.234 528.738 cv
401.23 529.203 401.363 529.566 401.625 529.832 cv
401.887 530.098 402.254 530.23 402.73 530.227 cv
402.98 530.23 403.199 530.191 403.391 530.105 cv
403.574 530.027 403.73 529.914 403.855 529.773 cv
403.977 529.633 404.066 529.469 404.129 529.277 cv
404.184 529.094 404.215 528.898 404.219 528.691 cv
cp
404.863 534.25 mo
404.859 533.945 404.734 533.715 404.492 533.551 cv
404.242 533.391 403.91 533.301 403.492 533.289 cv
401.676 533.227 li
401.508 533.359 401.371 533.484 401.27 533.598 cv
401.16 533.715 401.078 533.824 401.016 533.934 cv
400.953 534.039 400.91 534.145 400.887 534.25 cv
400.863 534.352 400.852 534.457 400.852 534.566 cv
400.852 534.902 401.02 535.156 401.363 535.336 cv
401.703 535.508 402.184 535.598 402.801 535.598 cv
403.188 535.598 403.512 535.559 403.777 535.484 cv
404.035 535.406 404.246 535.305 404.41 535.184 cv
404.566 535.055 404.684 534.914 404.758 534.754 cv
404.824 534.594 404.859 534.426 404.863 534.25 cv
cp
f
413.789 529.73 mo
413.785 529.934 413.734 530.074 413.637 530.16 cv
413.531 530.246 413.414 530.289 413.289 530.289 cv
408.672 530.289 li
408.668 530.68 408.707 531.031 408.789 531.344 cv
408.863 531.656 408.996 531.926 409.18 532.145 cv
409.359 532.371 409.594 532.543 409.891 532.66 cv
410.18 532.785 410.539 532.844 410.965 532.84 cv
411.297 532.844 411.594 532.816 411.855 532.758 cv
412.117 532.707 412.344 532.645 412.535 532.574 cv
412.723 532.508 412.879 532.449 413.004 532.391 cv
413.125 532.34 413.219 532.312 413.281 532.309 cv
413.316 532.312 413.348 532.32 413.379 532.336 cv
413.406 532.355 413.43 532.383 413.449 532.418 cv
413.461 532.457 413.473 532.508 413.484 532.57 cv
413.488 532.637 413.492 532.715 413.496 532.809 cv
413.492 532.879 413.488 532.937 413.488 532.984 cv
413.48 533.031 413.477 533.074 413.469 533.113 cv
413.461 533.152 413.445 533.187 413.43 533.219 cv
413.406 533.25 413.383 533.281 413.359 533.309 cv
413.328 533.34 413.246 533.387 413.105 533.449 cv
412.965 533.516 412.781 533.578 412.559 533.641 cv
412.332 533.703 412.074 533.758 411.781 533.809 cv
411.488 533.855 411.176 533.879 410.844 533.883 cv
410.266 533.879 409.758 533.801 409.328 533.641 cv
408.891 533.48 408.527 533.242 408.234 532.926 cv
407.934 532.609 407.711 532.215 407.563 531.734 cv
407.414 531.258 407.34 530.699 407.34 530.062 cv
407.34 529.465 407.414 528.926 407.57 528.441 cv
407.723 527.965 407.949 527.555 408.246 527.219 cv
408.539 526.883 408.895 526.625 409.309 526.445 cv
409.723 526.266 410.188 526.176 410.703 526.176 cv
411.254 526.176 411.723 526.266 412.109 526.441 cv
412.496 526.621 412.813 526.859 413.066 527.156 cv
413.313 527.457 413.496 527.809 413.613 528.207 cv
413.727 528.613 413.785 529.043 413.789 529.496 cv
cp
412.496 529.348 mo
412.512 528.672 412.359 528.141 412.043 527.758 cv
411.727 527.375 411.258 527.184 410.641 527.18 cv
410.316 527.184 410.035 527.242 409.797 527.359 cv
409.555 527.48 409.355 527.641 409.195 527.836 cv
409.031 528.035 408.906 528.266 408.82 528.527 cv
408.73 528.789 408.68 529.062 408.672 529.348 cv
cp
f
420.156 531.629 mo
420.152 531.992 420.086 532.312 419.957 532.59 cv
419.824 532.871 419.637 533.105 419.395 533.297 cv
419.148 533.492 418.855 533.637 418.52 533.734 cv
418.18 533.832 417.809 533.879 417.406 533.883 cv
417.152 533.879 416.914 533.859 416.691 533.824 cv
416.465 533.781 416.266 533.734 416.086 533.676 cv
415.906 533.617 415.754 533.555 415.629 533.488 cv
415.504 533.426 415.41 533.367 415.355 533.312 cv
415.297 533.262 415.258 533.191 415.234 533.094 cv
415.207 533.004 415.195 532.875 415.195 532.715 cv
415.195 532.617 415.199 532.535 415.211 532.465 cv
415.219 532.398 415.23 532.344 415.25 532.301 cv
415.262 532.262 415.285 532.23 415.313 532.211 cv
415.34 532.195 415.371 532.187 415.41 532.184 cv
415.465 532.187 415.551 532.223 415.664 532.289 cv
415.773 532.363 415.91 532.441 416.078 532.52 cv
416.238 532.605 416.43 532.68 416.656 532.75 cv
416.875 532.82 417.133 532.855 417.43 532.855 cv
417.645 532.855 417.844 532.832 418.023 532.785 cv
418.199 532.738 418.352 532.672 418.48 532.578 cv
418.609 532.492 418.711 532.375 418.781 532.23 cv
418.852 532.094 418.887 531.926 418.887 531.73 cv
418.887 531.535 418.836 531.371 418.734 531.234 cv
418.633 531.102 418.496 530.98 418.332 530.875 cv
418.164 530.773 417.98 530.684 417.773 530.598 cv
417.563 530.52 417.348 530.434 417.129 530.344 cv
416.91 530.258 416.695 530.156 416.484 530.043 cv
416.273 529.934 416.082 529.801 415.918 529.637 cv
415.746 529.48 415.613 529.285 415.516 529.059 cv
415.41 528.836 415.359 528.57 415.363 528.258 cv
415.359 527.984 415.414 527.719 415.523 527.465 cv
415.629 527.215 415.789 526.996 416.004 526.805 cv
416.215 526.617 416.48 526.465 416.801 526.348 cv
417.121 526.234 417.492 526.176 417.922 526.176 cv
418.105 526.176 418.293 526.191 418.48 526.223 cv
418.664 526.254 418.832 526.293 418.988 526.34 cv
419.137 526.387 419.266 526.437 419.375 526.492 cv
419.477 526.547 419.559 526.598 419.617 526.637 cv
419.668 526.684 419.703 526.719 419.727 526.746 cv
419.742 526.777 419.758 526.812 419.766 526.848 cv
419.773 526.891 419.781 526.937 419.789 526.992 cv
419.797 527.051 419.801 527.121 419.801 527.203 cv
419.801 527.293 419.797 527.371 419.789 527.434 cv
419.781 527.504 419.766 527.555 419.75 527.594 cv
419.727 527.637 419.707 527.668 419.684 527.684 cv
419.656 527.703 419.625 527.711 419.598 527.711 cv
419.547 527.711 419.48 527.684 419.395 527.625 cv
419.305 527.57 419.191 527.508 419.051 527.441 cv
418.91 527.379 418.742 527.32 418.555 527.258 cv
418.363 527.203 418.148 527.172 417.906 527.172 cv
417.684 527.172 417.492 527.199 417.328 527.246 cv
417.16 527.301 417.023 527.371 416.918 527.457 cv
416.813 527.551 416.73 527.656 416.68 527.781 cv
416.621 527.906 416.594 528.043 416.598 528.187 cv
416.594 528.391 416.645 528.559 416.75 528.695 cv
416.852 528.836 416.988 528.957 417.156 529.059 cv
417.32 529.164 417.512 529.258 417.727 529.34 cv
417.938 529.426 418.152 529.512 418.375 529.598 cv
418.594 529.687 418.813 529.789 419.031 529.895 cv
419.246 530.004 419.438 530.133 419.605 530.289 cv
419.77 530.445 419.902 530.633 420.004 530.852 cv
420.102 531.07 420.152 531.332 420.156 531.629 cv
cp
f
255.738 11.57 mo
255.734 12.41 255.633 13.16 255.426 13.816 cv
255.219 14.48 254.91 15.039 254.5 15.496 cv
254.09 15.957 253.582 16.309 252.977 16.547 cv
252.371 16.789 251.672 16.906 250.879 16.91 cv
250.09 16.906 249.402 16.805 248.82 16.602 cv
248.234 16.398 247.746 16.086 247.359 15.664 cv
246.969 15.242 246.68 14.707 246.484 14.059 cv
246.289 13.41 246.191 12.641 246.195 11.75 cv
246.191 10.937 246.293 10.207 246.504 9.55103 cv
246.707 8.90198 247.016 8.34802 247.43 7.88702 cv
247.836 7.43402 248.344 7.08197 248.953 6.836 cv
249.555 6.59399 250.258 6.47302 251.063 6.46899 cv
251.824 6.47302 252.5 6.57397 253.086 6.77301 cv
253.668 6.97699 254.156 7.28497 254.551 7.70697 cv
254.941 8.12903 255.238 8.65997 255.438 9.30103 cv
255.637 9.94098 255.734 10.699 255.738 11.57 cv
cp
253.59 11.68 mo
253.586 11.152 253.543 10.672 253.465 10.238 cv
253.379 9.80499 253.238 9.43402 253.039 9.12097 cv
252.836 8.81201 252.57 8.57397 252.238 8.40601 cv
251.906 8.23798 251.492 8.15198 250.996 8.15198 cv
250.488 8.15198 250.066 8.25 249.73 8.43701 cv
249.395 8.62903 249.121 8.87903 248.914 9.19501 cv
248.703 9.51599 248.555 9.88702 248.473 10.309 cv
248.383 10.73 248.34 11.18 248.344 11.648 cv
248.34 12.203 248.383 12.699 248.469 13.137 cv
248.551 13.578 248.691 13.953 248.891 14.262 cv
249.086 14.574 249.352 14.809 249.684 14.973 cv
250.016 15.137 250.434 15.219 250.941 15.219 cv
251.441 15.219 251.859 15.125 252.199 14.937 cv
252.535 14.75 252.809 14.496 253.02 14.176 cv
253.223 13.855 253.371 13.48 253.461 13.051 cv
253.543 12.621 253.586 12.164 253.59 11.68 cv
cp
f
263.738 9.508 mo
263.734 9.53497 263.734 9.56598 263.734 9.60199 cv
263.73 9.64099 263.727 9.67999 263.719 9.72302 cv
263.711 9.76599 263.699 9.81598 263.688 9.87097 cv
263.672 9.92999 263.656 9.99597 263.637 10.066 cv
261.551 16.355 li
261.523 16.445 261.488 16.52 261.445 16.57 cv
261.398 16.629 261.324 16.672 261.227 16.699 cv
261.121 16.73 260.984 16.746 260.813 16.762 cv
260.637 16.77 260.41 16.777 260.133 16.777 cv
259.855 16.777 259.629 16.77 259.457 16.758 cv
259.281 16.742 259.145 16.723 259.047 16.691 cv
258.945 16.664 258.875 16.621 258.832 16.562 cv
258.785 16.512 258.75 16.441 258.727 16.355 cv
256.641 10.066 li
256.609 9.96503 256.582 9.87097 256.566 9.789 cv
256.543 9.70697 256.535 9.64801 256.535 9.60901 cv
256.531 9.578 256.527 9.54303 256.531 9.508 cv
256.527 9.45697 256.543 9.40997 256.574 9.37097 cv
256.602 9.33197 256.652 9.30103 256.727 9.27301 cv
256.797 9.25 256.895 9.22998 257.023 9.21899 cv
257.148 9.211 257.309 9.20697 257.504 9.203 cv
257.715 9.20697 257.887 9.21503 258.02 9.22302 cv
258.145 9.23798 258.25 9.25403 258.328 9.27698 cv
258.402 9.30103 258.453 9.336 258.488 9.37903 cv
258.516 9.42603 258.543 9.47998 258.566 9.539 cv
260.148 14.641 li
260.195 14.836 li
260.242 14.641 li
261.801 9.539 li
261.813 9.47998 261.836 9.42603 261.871 9.37903 cv
261.902 9.336 261.957 9.30103 262.031 9.27698 cv
262.102 9.25403 262.199 9.23798 262.324 9.22302 cv
262.445 9.21503 262.605 9.20697 262.805 9.203 cv
262.996 9.20697 263.152 9.211 263.273 9.21899 cv
263.395 9.22998 263.488 9.25 263.559 9.27301 cv
263.625 9.30103 263.672 9.33197 263.699 9.37097 cv
263.723 9.40997 263.734 9.45697 263.738 9.508 cv
cp
f
271.215 12.789 mo
271.211 13.027 271.16 13.203 271.055 13.316 cv
270.945 13.434 270.797 13.492 270.617 13.488 cv
266.383 13.488 li
266.379 13.789 266.414 14.059 266.488 14.297 cv
266.555 14.539 266.668 14.742 266.824 14.91 cv
266.977 15.082 267.172 15.211 267.414 15.297 cv
267.652 15.387 267.941 15.43 268.285 15.43 cv
268.625 15.43 268.926 15.406 269.188 15.355 cv
269.445 15.309 269.672 15.254 269.863 15.191 cv
270.051 15.133 270.207 15.078 270.336 15.027 cv
270.457 14.98 270.559 14.957 270.641 14.953 cv
270.684 14.957 270.723 14.965 270.758 14.98 cv
270.785 15 270.813 15.031 270.832 15.078 cv
270.852 15.125 270.863 15.191 270.875 15.277 cv
270.879 15.363 270.883 15.473 270.887 15.602 cv
270.883 15.719 270.883 15.816 270.879 15.895 cv
270.871 15.977 270.863 16.043 270.855 16.098 cv
270.844 16.156 270.828 16.207 270.809 16.242 cv
270.789 16.285 270.762 16.32 270.73 16.355 cv
270.695 16.395 270.602 16.445 270.453 16.504 cv
270.297 16.57 270.105 16.633 269.875 16.687 cv
269.637 16.75 269.367 16.797 269.07 16.844 cv
268.766 16.883 268.445 16.906 268.105 16.91 cv
267.484 16.906 266.941 16.832 266.48 16.676 cv
266.012 16.523 265.625 16.285 265.316 15.969 cv
265 15.652 264.766 15.254 264.617 14.77 cv
264.461 14.289 264.387 13.723 264.391 13.066 cv
264.387 12.453 264.465 11.895 264.629 11.398 cv
264.785 10.902 265.02 10.484 265.332 10.137 cv
265.637 9.79303 266.012 9.52698 266.449 9.34399 cv
266.887 9.164 267.379 9.07397 267.934 9.07001 cv
268.512 9.07397 269.012 9.15997 269.426 9.328 cv
269.84 9.50403 270.176 9.742 270.441 10.043 cv
270.703 10.348 270.898 10.707 271.027 11.121 cv
271.148 11.539 271.211 11.988 271.215 12.477 cv
cp
269.313 12.227 mo
269.324 11.676 269.215 11.242 268.98 10.93 cv
268.746 10.617 268.379 10.461 267.887 10.457 cv
267.637 10.461 267.422 10.508 267.238 10.598 cv
267.051 10.695 266.898 10.82 266.777 10.977 cv
266.652 11.137 266.559 11.324 266.496 11.539 cv
266.43 11.754 266.391 11.984 266.383 12.227 cv
cp
f
277.289 10.16 mo
277.289 10.352 277.281 10.504 277.273 10.621 cv
277.258 10.742 277.242 10.836 277.227 10.902 cv
277.203 10.973 277.176 11.02 277.145 11.043 cv
277.105 11.07 277.063 11.082 277.016 11.082 cv
276.969 11.082 276.922 11.074 276.875 11.055 cv
276.82 11.039 276.762 11.02 276.699 10.996 cv
276.629 10.977 276.559 10.957 276.484 10.937 cv
276.402 10.922 276.316 10.914 276.227 10.91 cv
276.113 10.914 276.004 10.934 275.898 10.977 cv
275.789 11.023 275.676 11.094 275.563 11.184 cv
275.441 11.277 275.32 11.402 275.195 11.555 cv
275.066 11.715 274.93 11.906 274.785 12.133 cv
274.785 16.465 li
274.781 16.52 274.766 16.562 274.738 16.602 cv
274.703 16.641 274.648 16.676 274.578 16.699 cv
274.5 16.727 274.402 16.742 274.277 16.758 cv
274.152 16.77 273.992 16.777 273.805 16.777 cv
273.609 16.777 273.453 16.77 273.328 16.758 cv
273.203 16.742 273.102 16.727 273.027 16.699 cv
272.949 16.676 272.895 16.641 272.867 16.602 cv
272.832 16.562 272.816 16.52 272.82 16.465 cv
272.82 9.51599 li
272.816 9.46899 272.832 9.422 272.859 9.37903 cv
272.883 9.34399 272.93 9.31201 273 9.28101 cv
273.066 9.258 273.152 9.23798 273.262 9.22302 cv
273.367 9.21503 273.5 9.20697 273.664 9.203 cv
273.828 9.20697 273.965 9.21503 274.074 9.22302 cv
274.18 9.23798 274.266 9.258 274.328 9.28101 cv
274.387 9.31201 274.43 9.34399 274.457 9.37903 cv
274.48 9.422 274.492 9.46899 274.496 9.51599 cv
274.496 10.379 li
274.676 10.121 274.848 9.90997 275.012 9.73798 cv
275.168 9.57397 275.324 9.43701 275.473 9.336 cv
275.617 9.23798 275.762 9.172 275.906 9.12903 cv
276.051 9.09399 276.195 9.07397 276.344 9.07001 cv
276.41 9.07397 276.484 9.078 276.563 9.08197 cv
276.641 9.09399 276.719 9.10498 276.805 9.12097 cv
276.883 9.14099 276.957 9.15997 277.023 9.18402 cv
277.082 9.20697 277.129 9.23401 277.16 9.258 cv
277.188 9.289 277.207 9.31598 277.223 9.34399 cv
277.234 9.37903 277.246 9.422 277.258 9.47302 cv
277.266 9.53101 277.273 9.61298 277.281 9.71899 cv
277.285 9.828 277.289 9.97699 277.289 10.16 cv
cp
f
284.047 16.488 mo
284.043 16.566 284.016 16.621 283.969 16.66 cv
283.914 16.703 283.832 16.73 283.723 16.75 cv
283.605 16.766 283.441 16.777 283.227 16.777 cv
282.988 16.777 282.816 16.766 282.715 16.75 cv
282.605 16.73 282.531 16.703 282.492 16.66 cv
282.445 16.621 282.426 16.566 282.426 16.488 cv
282.426 15.937 li
282.137 16.246 281.809 16.484 281.445 16.652 cv
281.078 16.824 280.672 16.906 280.227 16.91 cv
279.855 16.906 279.516 16.859 279.207 16.766 cv
278.898 16.672 278.633 16.531 278.406 16.336 cv
278.18 16.148 278.004 15.914 277.879 15.633 cv
277.754 15.355 277.691 15.027 277.695 14.648 cv
277.691 14.25 277.77 13.898 277.93 13.594 cv
278.086 13.297 278.324 13.051 278.641 12.855 cv
278.953 12.664 279.344 12.52 279.813 12.422 cv
280.281 12.332 280.824 12.285 281.441 12.281 cv
282.121 12.281 li
282.121 11.859 li
282.121 11.645 282.098 11.453 282.055 11.289 cv
282.008 11.129 281.934 10.992 281.836 10.879 cv
281.73 10.773 281.598 10.691 281.43 10.637 cv
281.258 10.586 281.047 10.562 280.805 10.559 cv
280.473 10.562 280.18 10.598 279.926 10.668 cv
279.664 10.742 279.438 10.824 279.242 10.91 cv
279.043 11.004 278.879 11.082 278.75 11.152 cv
278.613 11.227 278.504 11.266 278.426 11.262 cv
278.363 11.266 278.313 11.246 278.273 11.207 cv
278.227 11.172 278.191 11.121 278.164 11.051 cv
278.133 10.988 278.109 10.902 278.098 10.801 cv
278.078 10.703 278.07 10.594 278.074 10.473 cv
278.07 10.312 278.086 10.187 278.113 10.09 cv
278.137 10 278.184 9.914 278.262 9.836 cv
278.332 9.76202 278.461 9.67999 278.645 9.59003 cv
278.824 9.5 279.035 9.414 279.281 9.336 cv
279.523 9.258 279.793 9.19501 280.082 9.14502 cv
280.371 9.09802 280.668 9.07397 280.977 9.07001 cv
281.52 9.07397 281.984 9.125 282.371 9.22998 cv
282.758 9.34003 283.078 9.50403 283.328 9.72302 cv
283.578 9.94098 283.758 10.227 283.875 10.574 cv
283.984 10.926 284.043 11.34 284.047 11.812 cv
cp
282.121 13.512 mo
281.371 13.512 li
281.055 13.516 280.785 13.539 280.563 13.582 cv
280.336 13.633 280.152 13.703 280.016 13.793 cv
279.871 13.891 279.77 14.004 279.707 14.133 cv
279.641 14.27 279.605 14.418 279.609 14.586 cv
279.605 14.879 279.699 15.109 279.887 15.273 cv
280.07 15.441 280.328 15.523 280.656 15.523 cv
280.93 15.523 281.18 15.453 281.414 15.312 cv
281.641 15.172 281.879 14.969 282.121 14.695 cv
cp
f
287.969 16.465 mo
287.965 16.52 287.949 16.562 287.922 16.602 cv
287.887 16.641 287.832 16.676 287.762 16.699 cv
287.684 16.727 287.586 16.742 287.461 16.758 cv
287.336 16.77 287.176 16.777 286.988 16.777 cv
286.793 16.777 286.637 16.77 286.512 16.758 cv
286.387 16.742 286.285 16.727 286.211 16.699 cv
286.133 16.676 286.078 16.641 286.051 16.602 cv
286.016 16.562 286 16.52 286.004 16.465 cv
286.004 6.21899 li
286 6.16803 286.016 6.12097 286.051 6.078 cv
286.078 6.039 286.133 6.00403 286.211 5.97302 cv
286.285 5.94501 286.387 5.92603 286.512 5.90601 cv
286.637 5.89502 286.793 5.88702 286.988 5.883 cv
287.176 5.88702 287.336 5.89502 287.461 5.90601 cv
287.586 5.92603 287.684 5.94501 287.762 5.97302 cv
287.832 6.00403 287.887 6.039 287.922 6.078 cv
287.949 6.12097 287.965 6.16803 287.969 6.21899 cv
cp
f
291.941 16.465 mo
291.938 16.52 291.922 16.562 291.895 16.602 cv
291.859 16.641 291.805 16.676 291.734 16.699 cv
291.656 16.727 291.559 16.742 291.434 16.758 cv
291.309 16.77 291.148 16.777 290.961 16.777 cv
290.766 16.777 290.609 16.77 290.484 16.758 cv
290.359 16.742 290.258 16.727 290.184 16.699 cv
290.105 16.676 290.051 16.641 290.023 16.602 cv
289.988 16.562 289.973 16.52 289.977 16.465 cv
289.977 6.21899 li
289.973 6.16803 289.988 6.12097 290.023 6.078 cv
290.051 6.039 290.105 6.00403 290.184 5.97302 cv
290.258 5.94501 290.359 5.92603 290.484 5.90601 cv
290.609 5.89502 290.766 5.88702 290.961 5.883 cv
291.148 5.88702 291.309 5.89502 291.434 5.90601 cv
291.559 5.92603 291.656 5.94501 291.734 5.97302 cv
291.805 6.00403 291.859 6.039 291.895 6.078 cv
291.922 6.12097 291.938 6.16803 291.941 6.21899 cv
cp
f
305.109 16.465 mo
305.109 16.527 305.098 16.574 305.078 16.609 cv
305.059 16.652 305.012 16.684 304.934 16.707 cv
304.855 16.73 304.738 16.746 304.59 16.762 cv
304.434 16.77 304.23 16.777 303.973 16.777 cv
303.754 16.777 303.578 16.77 303.449 16.762 cv
303.32 16.746 303.219 16.73 303.145 16.703 cv
303.066 16.676 303.012 16.641 302.984 16.594 cv
302.949 16.555 302.926 16.5 302.906 16.434 cv
302 14.184 li
301.891 13.93 301.785 13.703 301.684 13.504 cv
301.574 13.309 301.461 13.145 301.336 13.012 cv
301.207 12.883 301.059 12.781 300.895 12.711 cv
300.727 12.645 300.535 12.613 300.32 12.609 cv
299.68 12.609 li
299.68 16.449 li
299.676 16.504 299.66 16.551 299.629 16.59 cv
299.594 16.633 299.539 16.668 299.461 16.691 cv
299.383 16.719 299.277 16.738 299.148 16.754 cv
299.016 16.77 298.852 16.777 298.652 16.777 cv
298.453 16.777 298.285 16.77 298.156 16.754 cv
298.02 16.738 297.914 16.719 297.84 16.691 cv
297.758 16.668 297.703 16.633 297.676 16.59 cv
297.641 16.551 297.625 16.504 297.629 16.449 cv
297.629 7.29303 li
297.625 7.06598 297.684 6.90198 297.805 6.797 cv
297.918 6.69897 298.063 6.64801 298.238 6.64502 cv
300.848 6.64502 li
301.109 6.64801 301.328 6.65198 301.504 6.65997 cv
301.672 6.672 301.828 6.68402 301.973 6.69897 cv
302.375 6.758 302.738 6.85901 303.063 6.99597 cv
303.387 7.14099 303.664 7.32397 303.891 7.547 cv
304.117 7.77698 304.289 8.04303 304.41 8.35199 cv
304.527 8.65997 304.586 9.01599 304.59 9.414 cv
304.586 9.75403 304.543 10.062 304.461 10.336 cv
304.371 10.617 304.246 10.863 304.082 11.082 cv
303.914 11.301 303.707 11.492 303.465 11.648 cv
303.219 11.812 302.941 11.941 302.633 12.039 cv
302.781 12.113 302.926 12.203 303.059 12.305 cv
303.191 12.414 303.313 12.539 303.43 12.684 cv
303.543 12.832 303.656 13 303.762 13.187 cv
303.863 13.379 303.965 13.594 304.066 13.832 cv
304.918 15.82 li
304.992 16.02 305.043 16.16 305.07 16.25 cv
305.094 16.344 305.109 16.418 305.109 16.465 cv
cp
302.469 9.625 mo
302.465 9.29303 302.391 9.01202 302.242 8.78101 cv
302.09 8.55499 301.844 8.39502 301.504 8.297 cv
301.398 8.27301 301.281 8.25 301.148 8.23401 cv
301.016 8.21899 300.832 8.211 300.598 8.211 cv
299.68 8.211 li
299.68 11.074 li
300.723 11.074 li
301.012 11.078 301.27 11.043 301.488 10.969 cv
301.707 10.902 301.887 10.801 302.031 10.672 cv
302.176 10.547 302.285 10.395 302.359 10.215 cv
302.43 10.039 302.465 9.84399 302.469 9.625 cv
cp
f
313.09 16.465 mo
313.086 16.52 313.074 16.562 313.051 16.602 cv
313.023 16.641 312.977 16.676 312.914 16.699 cv
312.848 16.727 312.762 16.742 312.656 16.758 cv
312.551 16.77 312.418 16.777 312.258 16.777 cv
312.082 16.777 311.941 16.77 311.84 16.758 cv
311.73 16.742 311.648 16.727 311.586 16.699 cv
311.523 16.676 311.477 16.641 311.453 16.602 cv
311.422 16.562 311.41 16.52 311.414 16.465 cv
311.414 15.664 li
311.027 16.078 310.637 16.391 310.242 16.598 cv
309.84 16.805 309.43 16.906 309.008 16.91 cv
308.527 16.906 308.125 16.832 307.801 16.676 cv
307.477 16.523 307.215 16.309 307.016 16.039 cv
306.813 15.77 306.668 15.457 306.586 15.098 cv
306.496 14.742 306.453 14.301 306.457 13.77 cv
306.457 9.51599 li
306.453 9.46899 306.469 9.422 306.5 9.37903 cv
306.527 9.34399 306.578 9.31201 306.656 9.28101 cv
306.73 9.258 306.832 9.23798 306.961 9.22302 cv
307.086 9.21503 307.242 9.20697 307.434 9.203 cv
307.621 9.20697 307.781 9.21503 307.906 9.22302 cv
308.031 9.23798 308.129 9.258 308.207 9.28101 cv
308.277 9.31201 308.332 9.34399 308.367 9.37903 cv
308.395 9.422 308.41 9.46899 308.414 9.51599 cv
308.414 13.441 li
308.41 13.809 308.434 14.086 308.484 14.277 cv
308.527 14.469 308.598 14.633 308.699 14.77 cv
308.793 14.91 308.918 15.016 309.066 15.09 cv
309.215 15.168 309.387 15.207 309.582 15.203 cv
309.832 15.207 310.082 15.117 310.336 14.93 cv
310.586 14.75 310.855 14.484 311.141 14.137 cv
311.141 9.51599 li
311.141 9.46899 311.152 9.422 311.184 9.37903 cv
311.207 9.34399 311.262 9.31201 311.34 9.28101 cv
311.414 9.258 311.512 9.23798 311.641 9.22302 cv
311.762 9.21503 311.922 9.20697 312.117 9.203 cv
312.309 9.20697 312.465 9.21503 312.59 9.22302 cv
312.711 9.23798 312.813 9.258 312.887 9.28101 cv
312.957 9.31201 313.008 9.34399 313.043 9.37903 cv
313.07 9.422 313.086 9.46899 313.09 9.51599 cv
cp
f
321.707 16.465 mo
321.703 16.52 321.688 16.562 321.66 16.602 cv
321.625 16.641 321.574 16.676 321.504 16.699 cv
321.43 16.727 321.328 16.742 321.203 16.758 cv
321.074 16.77 320.918 16.777 320.734 16.777 cv
320.539 16.777 320.379 16.77 320.254 16.758 cv
320.125 16.742 320.023 16.727 319.953 16.699 cv
319.875 16.676 319.824 16.641 319.797 16.602 cv
319.762 16.562 319.746 16.52 319.75 16.465 cv
319.75 12.5 li
319.746 12.164 319.723 11.898 319.676 11.703 cv
319.625 11.512 319.551 11.348 319.461 11.211 cv
319.367 11.074 319.25 10.969 319.102 10.891 cv
318.953 10.816 318.777 10.777 318.582 10.777 cv
318.328 10.777 318.078 10.871 317.824 11.051 cv
317.57 11.234 317.305 11.496 317.031 11.844 cv
317.031 16.465 li
317.027 16.52 317.012 16.562 316.984 16.602 cv
316.949 16.641 316.895 16.676 316.824 16.699 cv
316.746 16.727 316.648 16.742 316.523 16.758 cv
316.398 16.77 316.238 16.777 316.051 16.777 cv
315.855 16.777 315.699 16.77 315.574 16.758 cv
315.449 16.742 315.348 16.727 315.273 16.699 cv
315.195 16.676 315.141 16.641 315.113 16.602 cv
315.078 16.562 315.063 16.52 315.066 16.465 cv
315.066 9.51599 li
315.063 9.46899 315.078 9.422 315.105 9.37903 cv
315.129 9.34399 315.176 9.31201 315.246 9.28101 cv
315.313 9.258 315.398 9.23798 315.508 9.22302 cv
315.613 9.21503 315.746 9.20697 315.91 9.203 cv
316.074 9.20697 316.211 9.21503 316.32 9.22302 cv
316.426 9.23798 316.512 9.258 316.574 9.28101 cv
316.633 9.31201 316.676 9.34399 316.703 9.37903 cv
316.727 9.422 316.738 9.46899 316.742 9.51599 cv
316.742 10.316 li
317.125 9.90601 317.516 9.59399 317.914 9.383 cv
318.309 9.17603 318.727 9.07397 319.16 9.07001 cv
319.629 9.07397 320.027 9.15198 320.355 9.30499 cv
320.68 9.46503 320.941 9.67603 321.141 9.94098 cv
321.34 10.211 321.484 10.523 321.574 10.879 cv
321.66 11.238 321.703 11.668 321.707 12.172 cv
cp
f
327.578 15.781 mo
327.578 16.008 327.563 16.184 327.535 16.305 cv
327.504 16.43 327.465 16.516 327.422 16.562 cv
327.371 16.613 327.305 16.656 327.215 16.695 cv
327.121 16.734 327.012 16.766 326.895 16.797 cv
326.77 16.82 326.637 16.844 326.496 16.863 cv
326.352 16.875 326.211 16.883 326.066 16.887 cv
325.676 16.883 325.336 16.832 325.051 16.738 cv
324.766 16.637 324.531 16.488 324.344 16.281 cv
324.156 16.078 324.016 15.82 323.93 15.508 cv
323.836 15.199 323.793 14.828 323.797 14.398 cv
323.797 10.84 li
322.965 10.84 li
322.863 10.844 322.789 10.781 322.738 10.656 cv
322.684 10.535 322.656 10.332 322.66 10.043 cv
322.656 9.89502 322.664 9.76599 322.68 9.664 cv
322.691 9.56201 322.711 9.47998 322.738 9.41803 cv
322.762 9.35901 322.793 9.31598 322.836 9.289 cv
322.871 9.26599 322.918 9.25403 322.973 9.25 cv
323.797 9.25 li
323.797 7.69897 li
323.793 7.65198 323.809 7.60498 323.84 7.55902 cv
323.867 7.52002 323.918 7.48401 323.996 7.453 cv
324.07 7.42999 324.172 7.40601 324.301 7.39099 cv
324.426 7.37903 324.582 7.375 324.773 7.37097 cv
324.961 7.375 325.121 7.37903 325.25 7.39099 cv
325.375 7.40601 325.477 7.42999 325.551 7.453 cv
325.621 7.48401 325.672 7.52002 325.707 7.55902 cv
325.734 7.60498 325.75 7.65198 325.754 7.69897 cv
325.754 9.25 li
327.266 9.25 li
327.316 9.25403 327.363 9.26599 327.402 9.289 cv
327.441 9.31598 327.473 9.35901 327.5 9.41803 cv
327.523 9.47998 327.543 9.56201 327.559 9.664 cv
327.57 9.76599 327.578 9.89502 327.578 10.043 cv
327.578 10.332 327.551 10.535 327.5 10.656 cv
327.445 10.781 327.371 10.844 327.273 10.84 cv
325.754 10.84 li
325.754 14.105 li
325.75 14.484 325.809 14.77 325.934 14.957 cv
326.051 15.148 326.266 15.242 326.57 15.242 cv
326.672 15.242 326.766 15.234 326.852 15.215 cv
326.934 15.199 327.008 15.18 327.074 15.152 cv
327.137 15.133 327.191 15.109 327.238 15.09 cv
327.281 15.074 327.32 15.066 327.359 15.062 cv
327.387 15.066 327.418 15.074 327.449 15.09 cv
327.477 15.109 327.496 15.148 327.516 15.199 cv
327.527 15.258 327.543 15.332 327.559 15.422 cv
327.57 15.52 327.578 15.637 327.578 15.781 cv
cp
f
330.965 16.465 mo
330.961 16.52 330.945 16.562 330.918 16.602 cv
330.883 16.641 330.828 16.676 330.758 16.699 cv
330.68 16.727 330.582 16.742 330.457 16.758 cv
330.332 16.77 330.172 16.777 329.984 16.777 cv
329.789 16.777 329.633 16.77 329.508 16.758 cv
329.383 16.742 329.281 16.727 329.207 16.699 cv
329.129 16.676 329.074 16.641 329.047 16.602 cv
329.012 16.562 328.996 16.52 329 16.465 cv
329 9.53101 li
328.996 9.47998 329.012 9.43402 329.047 9.39502 cv
329.074 9.35498 329.129 9.32397 329.207 9.29303 cv
329.281 9.27002 329.383 9.24597 329.508 9.22699 cv
329.633 9.21503 329.789 9.20697 329.984 9.203 cv
330.172 9.20697 330.332 9.21503 330.457 9.22699 cv
330.582 9.24597 330.68 9.27002 330.758 9.29303 cv
330.828 9.32397 330.883 9.35498 330.918 9.39502 cv
330.945 9.43402 330.961 9.47998 330.965 9.53101 cv
cp
331.113 7.15997 mo
331.113 7.55902 331.031 7.83197 330.871 7.97998 cv
330.707 8.133 330.41 8.20697 329.977 8.203 cv
329.531 8.20697 329.23 8.133 329.082 7.98798 cv
328.926 7.84399 328.852 7.58197 328.852 7.19897 cv
328.852 6.80499 328.93 6.53101 329.09 6.37903 cv
329.246 6.22699 329.547 6.14801 329.992 6.14801 cv
330.426 6.14801 330.723 6.22302 330.879 6.37097 cv
331.035 6.52002 331.113 6.78497 331.113 7.15997 cv
cp
f
343.984 16.465 mo
343.98 16.52 343.965 16.562 343.938 16.602 cv
343.902 16.641 343.852 16.676 343.781 16.699 cv
343.707 16.727 343.605 16.742 343.484 16.758 cv
343.359 16.77 343.203 16.777 343.012 16.777 cv
342.813 16.777 342.652 16.77 342.527 16.758 cv
342.402 16.742 342.301 16.727 342.227 16.699 cv
342.148 16.676 342.098 16.641 342.07 16.602 cv
342.043 16.562 342.027 16.52 342.031 16.465 cv
342.031 12.344 li
342.027 12.113 342.008 11.898 341.965 11.703 cv
341.918 11.512 341.848 11.348 341.762 11.211 cv
341.668 11.074 341.555 10.969 341.418 10.891 cv
341.277 10.816 341.113 10.777 340.922 10.777 cv
340.688 10.777 340.449 10.871 340.211 11.051 cv
339.973 11.234 339.715 11.496 339.434 11.844 cv
339.434 16.465 li
339.434 16.52 339.418 16.562 339.387 16.602 cv
339.355 16.641 339.301 16.676 339.227 16.699 cv
339.148 16.727 339.047 16.742 338.926 16.758 cv
338.801 16.77 338.648 16.777 338.461 16.777 cv
338.266 16.777 338.105 16.77 337.984 16.758 cv
337.855 16.742 337.754 16.727 337.684 16.699 cv
337.605 16.676 337.555 16.641 337.523 16.602 cv
337.492 16.562 337.477 16.52 337.477 16.465 cv
337.477 12.344 li
337.477 12.113 337.453 11.898 337.41 11.703 cv
337.367 11.512 337.301 11.348 337.215 11.211 cv
337.121 11.074 337.008 10.969 336.871 10.891 cv
336.727 10.816 336.563 10.777 336.379 10.777 cv
336.137 10.777 335.898 10.871 335.66 11.051 cv
335.422 11.234 335.164 11.496 334.891 11.844 cv
334.891 16.465 li
334.887 16.52 334.871 16.562 334.844 16.602 cv
334.809 16.641 334.754 16.676 334.684 16.699 cv
334.605 16.727 334.508 16.742 334.383 16.758 cv
334.258 16.77 334.098 16.777 333.91 16.777 cv
333.715 16.777 333.559 16.77 333.434 16.758 cv
333.309 16.742 333.207 16.727 333.133 16.699 cv
333.055 16.676 333 16.641 332.973 16.602 cv
332.938 16.562 332.922 16.52 332.926 16.465 cv
332.926 9.51599 li
332.922 9.46899 332.938 9.422 332.965 9.37903 cv
332.988 9.34399 333.035 9.31201 333.105 9.28101 cv
333.172 9.258 333.258 9.23798 333.367 9.22302 cv
333.473 9.21503 333.605 9.20697 333.77 9.203 cv
333.934 9.20697 334.07 9.21503 334.18 9.22302 cv
334.285 9.23798 334.371 9.258 334.434 9.28101 cv
334.492 9.31201 334.535 9.34399 334.563 9.37903 cv
334.586 9.422 334.598 9.46899 334.602 9.51599 cv
334.602 10.316 li
334.984 9.90601 335.367 9.59399 335.75 9.383 cv
336.129 9.17603 336.531 9.07397 336.949 9.07001 cv
337.234 9.07397 337.488 9.10199 337.719 9.15997 cv
337.945 9.22302 338.152 9.30902 338.332 9.41803 cv
338.512 9.53101 338.664 9.66803 338.793 9.82001 cv
338.922 9.97699 339.031 10.148 339.121 10.34 cv
339.328 10.117 339.531 9.92603 339.734 9.76599 cv
339.93 9.60498 340.129 9.47302 340.324 9.37097 cv
340.52 9.27002 340.715 9.19501 340.91 9.14502 cv
341.105 9.09802 341.305 9.07397 341.508 9.07001 cv
341.969 9.07397 342.355 9.15198 342.676 9.30499 cv
342.988 9.46503 343.246 9.67603 343.441 9.94098 cv
343.637 10.211 343.773 10.523 343.859 10.879 cv
343.938 11.238 343.98 11.617 343.984 12.016 cv
cp
f
352.324 12.789 mo
352.32 13.027 352.27 13.203 352.164 13.316 cv
352.055 13.434 351.906 13.492 351.727 13.488 cv
347.492 13.488 li
347.488 13.789 347.523 14.059 347.598 14.297 cv
347.664 14.539 347.777 14.742 347.934 14.91 cv
348.086 15.082 348.281 15.211 348.523 15.297 cv
348.762 15.387 349.051 15.43 349.395 15.43 cv
349.734 15.43 350.035 15.406 350.297 15.355 cv
350.555 15.309 350.781 15.254 350.973 15.191 cv
351.16 15.133 351.316 15.078 351.445 15.027 cv
351.566 14.98 351.668 14.957 351.75 14.953 cv
351.793 14.957 351.832 14.965 351.867 14.98 cv
351.895 15 351.922 15.031 351.941 15.078 cv
351.961 15.125 351.973 15.191 351.984 15.277 cv
351.988 15.363 351.992 15.473 351.996 15.602 cv
351.992 15.719 351.992 15.816 351.988 15.895 cv
351.98 15.977 351.973 16.043 351.965 16.098 cv
351.953 16.156 351.938 16.207 351.918 16.242 cv
351.898 16.285 351.871 16.32 351.84 16.355 cv
351.805 16.395 351.711 16.445 351.563 16.504 cv
351.406 16.57 351.215 16.633 350.984 16.687 cv
350.746 16.75 350.477 16.797 350.18 16.844 cv
349.875 16.883 349.555 16.906 349.215 16.91 cv
348.594 16.906 348.051 16.832 347.59 16.676 cv
347.121 16.523 346.734 16.285 346.426 15.969 cv
346.109 15.652 345.875 15.254 345.727 14.77 cv
345.57 14.289 345.496 13.723 345.5 13.066 cv
345.496 12.453 345.574 11.895 345.738 11.398 cv
345.895 10.902 346.129 10.484 346.441 10.137 cv
346.746 9.79303 347.121 9.52698 347.559 9.34399 cv
347.996 9.164 348.488 9.07397 349.043 9.07001 cv
349.621 9.07397 350.121 9.15997 350.535 9.328 cv
350.949 9.50403 351.285 9.742 351.551 10.043 cv
351.813 10.348 352.008 10.707 352.137 11.121 cv
352.258 11.539 352.32 11.988 352.324 12.477 cv
cp
350.422 12.227 mo
350.434 11.676 350.324 11.242 350.09 10.93 cv
349.855 10.617 349.488 10.461 348.996 10.457 cv
348.746 10.461 348.531 10.508 348.348 10.598 cv
348.16 10.695 348.008 10.82 347.887 10.977 cv
347.762 11.137 347.668 11.324 347.605 11.539 cv
347.539 11.754 347.5 11.984 347.492 12.227 cv
cp
f
358.824 14.5 mo
358.82 14.898 358.746 15.246 358.602 15.547 cv
358.453 15.848 358.246 16.102 357.977 16.301 cv
357.703 16.508 357.383 16.656 357.016 16.758 cv
356.648 16.855 356.246 16.906 355.816 16.91 cv
355.551 16.906 355.305 16.887 355.07 16.852 cv
354.836 16.809 354.625 16.762 354.438 16.703 cv
354.25 16.645 354.094 16.582 353.969 16.52 cv
353.844 16.457 353.75 16.398 353.695 16.344 cv
353.637 16.289 353.594 16.207 353.566 16.09 cv
353.531 15.977 353.516 15.801 353.52 15.57 cv
353.516 15.422 353.523 15.301 353.535 15.207 cv
353.543 15.117 353.559 15.047 353.582 14.988 cv
353.602 14.937 353.625 14.898 353.66 14.879 cv
353.688 14.863 353.727 14.855 353.773 14.852 cv
353.828 14.855 353.914 14.887 354.027 14.949 cv
354.137 15.016 354.273 15.09 354.445 15.164 cv
354.609 15.246 354.805 15.316 355.023 15.383 cv
355.242 15.453 355.492 15.488 355.777 15.484 cv
355.953 15.488 356.109 15.469 356.25 15.43 cv
356.383 15.395 356.504 15.344 356.609 15.273 cv
356.707 15.207 356.781 15.121 356.836 15.016 cv
356.883 14.914 356.91 14.793 356.914 14.656 cv
356.91 14.5 356.863 14.367 356.77 14.258 cv
356.676 14.148 356.547 14.051 356.391 13.965 cv
356.227 13.883 356.047 13.805 355.852 13.73 cv
355.648 13.66 355.445 13.582 355.234 13.488 cv
355.023 13.402 354.816 13.301 354.621 13.184 cv
354.418 13.074 354.238 12.934 354.082 12.766 cv
353.918 12.602 353.793 12.402 353.699 12.164 cv
353.605 11.934 353.559 11.652 353.559 11.32 cv
353.559 10.992 353.621 10.687 353.75 10.406 cv
353.879 10.133 354.066 9.89502 354.313 9.69501 cv
354.555 9.5 354.852 9.34802 355.203 9.23401 cv
355.551 9.12903 355.945 9.07397 356.387 9.07001 cv
356.602 9.07397 356.813 9.09003 357.02 9.117 cv
357.223 9.15198 357.41 9.19098 357.578 9.23401 cv
357.742 9.28497 357.883 9.336 358 9.38702 cv
358.113 9.44501 358.195 9.492 358.246 9.52698 cv
358.293 9.57001 358.328 9.60901 358.352 9.64502 cv
358.371 9.68701 358.383 9.73401 358.395 9.78497 cv
358.402 9.84003 358.414 9.90601 358.422 9.98401 cv
358.43 10.07 358.434 10.168 358.434 10.285 cv
358.434 10.426 358.43 10.543 358.422 10.629 cv
358.414 10.723 358.398 10.793 358.383 10.84 cv
358.363 10.895 358.34 10.93 358.313 10.945 cv
358.277 10.969 358.242 10.977 358.203 10.973 cv
358.152 10.977 358.078 10.949 357.984 10.891 cv
357.883 10.84 357.762 10.781 357.613 10.715 cv
357.465 10.656 357.293 10.598 357.098 10.539 cv
356.902 10.488 356.68 10.461 356.434 10.457 cv
356.254 10.461 356.102 10.48 355.973 10.512 cv
355.84 10.551 355.73 10.602 355.652 10.668 cv
355.566 10.738 355.504 10.816 355.465 10.906 cv
355.418 11 355.398 11.098 355.402 11.199 cv
355.398 11.359 355.449 11.496 355.551 11.602 cv
355.648 11.715 355.777 11.809 355.941 11.891 cv
356.102 11.977 356.285 12.055 356.492 12.125 cv
356.695 12.199 356.902 12.281 357.113 12.363 cv
357.32 12.453 357.527 12.551 357.738 12.664 cv
357.941 12.777 358.125 12.918 358.285 13.082 cv
358.445 13.25 358.574 13.449 358.676 13.68 cv
358.77 13.914 358.82 14.187 358.824 14.5 cv
cp
f
367.617 12.812 mo
367.613 13.113 367.586 13.324 367.531 13.441 cv
367.473 13.566 367.383 13.625 367.258 13.621 cv
364.016 13.621 li
363.887 13.625 363.793 13.562 363.738 13.437 cv
363.676 13.316 363.648 13.109 363.652 12.812 cv
363.648 12.523 363.676 12.316 363.738 12.195 cv
363.793 12.078 363.887 12.02 364.016 12.016 cv
367.258 12.016 li
367.32 12.02 367.371 12.031 367.418 12.055 cv
367.457 12.082 367.496 12.129 367.531 12.187 cv
367.559 12.254 367.582 12.336 367.598 12.437 cv
367.609 12.543 367.613 12.668 367.617 12.812 cv
cp
f
378.352 15.875 mo
378.348 16.031 378.344 16.164 378.332 16.266 cv
378.316 16.375 378.297 16.461 378.273 16.531 cv
378.246 16.602 378.211 16.652 378.176 16.684 cv
378.133 16.715 378.09 16.73 378.039 16.73 cv
373.418 16.73 li
373.242 16.73 373.098 16.68 372.984 16.578 cv
372.863 16.477 372.805 16.312 372.809 16.082 cv
372.809 6.92603 li
372.805 6.87903 372.824 6.83197 372.859 6.78497 cv
372.891 6.74597 372.945 6.711 373.027 6.68402 cv
373.102 6.65997 373.207 6.64099 373.344 6.62097 cv
373.473 6.60901 373.637 6.60199 373.84 6.59802 cv
374.035 6.60199 374.203 6.60901 374.336 6.62097 cv
374.465 6.64099 374.566 6.65997 374.648 6.68402 cv
374.723 6.711 374.781 6.74597 374.816 6.78497 cv
374.848 6.83197 374.863 6.87903 374.867 6.92603 cv
374.867 15.039 li
378.039 15.039 li
378.09 15.043 378.133 15.059 378.176 15.082 cv
378.211 15.113 378.246 15.16 378.273 15.223 cv
378.297 15.293 378.316 15.379 378.332 15.48 cv
378.344 15.59 378.348 15.719 378.352 15.875 cv
cp
f
386.473 12.918 mo
386.469 13.516 386.391 14.059 386.238 14.543 cv
386.078 15.035 385.844 15.453 385.527 15.805 cv
385.211 16.156 384.813 16.43 384.336 16.621 cv
383.855 16.812 383.297 16.906 382.66 16.91 cv
382.039 16.906 381.5 16.824 381.047 16.652 cv
380.586 16.484 380.207 16.234 379.91 15.906 cv
379.605 15.582 379.383 15.18 379.238 14.699 cv
379.094 14.223 379.023 13.676 379.023 13.059 cv
379.023 12.469 379.102 11.93 379.258 11.437 cv
379.414 10.949 379.652 10.527 379.973 10.176 cv
380.289 9.828 380.684 9.55499 381.16 9.35901 cv
381.633 9.16803 382.191 9.07397 382.832 9.07001 cv
383.457 9.07397 383.996 9.15601 384.453 9.32397 cv
384.91 9.49597 385.289 9.74597 385.586 10.07 cv
385.883 10.398 386.105 10.801 386.254 11.277 cv
386.398 11.758 386.469 12.305 386.473 12.918 cv
cp
384.453 12.996 mo
384.449 12.66 384.422 12.344 384.371 12.051 cv
384.313 11.766 384.219 11.516 384.094 11.301 cv
383.961 11.09 383.789 10.922 383.578 10.801 cv
383.359 10.684 383.09 10.625 382.762 10.621 cv
382.473 10.625 382.219 10.68 382 10.781 cv
381.781 10.891 381.602 11.047 381.461 11.25 cv
381.32 11.457 381.215 11.703 381.145 11.988 cv
381.074 12.281 381.039 12.609 381.039 12.973 cv
381.039 13.32 381.066 13.637 381.125 13.922 cv
381.18 14.215 381.273 14.465 381.402 14.676 cv
381.527 14.891 381.699 15.055 381.922 15.168 cv
382.137 15.289 382.406 15.348 382.73 15.344 cv
383.023 15.348 383.281 15.293 383.504 15.184 cv
383.719 15.078 383.898 14.926 384.039 14.719 cv
384.18 14.52 384.281 14.273 384.352 13.984 cv
384.414 13.699 384.449 13.371 384.453 12.996 cv
cp
f
393.289 15.359 mo
393.285 15.496 393.281 15.609 393.277 15.699 cv
393.266 15.793 393.258 15.871 393.246 15.93 cv
393.23 15.992 393.215 16.043 393.199 16.078 cv
393.18 16.121 393.137 16.168 393.078 16.227 cv
393.012 16.289 392.906 16.363 392.758 16.445 cv
392.605 16.535 392.434 16.613 392.242 16.676 cv
392.051 16.746 391.844 16.797 391.617 16.84 cv
391.391 16.879 391.156 16.898 390.922 16.902 cv
390.383 16.898 389.91 16.82 389.496 16.652 cv
389.082 16.488 388.734 16.242 388.457 15.918 cv
388.172 15.594 387.961 15.199 387.82 14.73 cv
387.68 14.266 387.609 13.727 387.609 13.121 cv
387.609 12.426 387.695 11.828 387.867 11.32 cv
388.039 10.816 388.281 10.395 388.598 10.062 cv
388.906 9.72998 389.273 9.48401 389.703 9.32001 cv
390.125 9.15997 390.594 9.078 391.105 9.078 cv
391.313 9.078 391.516 9.09802 391.719 9.133 cv
391.914 9.172 392.102 9.22302 392.277 9.28101 cv
392.449 9.34802 392.605 9.41803 392.746 9.492 cv
392.883 9.57397 392.98 9.64099 393.039 9.69501 cv
393.094 9.75403 393.133 9.80103 393.16 9.836 cv
393.18 9.87903 393.199 9.92999 393.215 9.98798 cv
393.227 10.055 393.238 10.133 393.246 10.219 cv
393.254 10.312 393.258 10.422 393.258 10.551 cv
393.258 10.855 393.23 11.066 393.18 11.187 cv
393.125 11.309 393.059 11.371 392.977 11.367 cv
392.887 11.371 392.793 11.336 392.695 11.262 cv
392.594 11.191 392.477 11.109 392.344 11.02 cv
392.211 10.934 392.051 10.852 391.863 10.777 cv
391.676 10.707 391.449 10.672 391.191 10.668 cv
390.68 10.672 390.293 10.867 390.023 11.258 cv
389.75 11.648 389.613 12.223 389.617 12.98 cv
389.613 13.355 389.648 13.687 389.719 13.973 cv
389.785 14.258 389.883 14.496 390.02 14.687 cv
390.148 14.883 390.316 15.027 390.52 15.121 cv
390.719 15.219 390.949 15.266 391.215 15.266 cv
391.48 15.266 391.715 15.227 391.914 15.145 cv
392.105 15.066 392.273 14.977 392.422 14.875 cv
392.563 14.777 392.688 14.687 392.789 14.605 cv
392.887 14.527 392.969 14.488 393.039 14.484 cv
393.082 14.488 393.121 14.5 393.156 14.523 cv
393.184 14.551 393.207 14.598 393.23 14.668 cv
393.246 14.738 393.262 14.828 393.273 14.937 cv
393.281 15.047 393.285 15.187 393.289 15.359 cv
cp
f
400.578 16.488 mo
400.574 16.566 400.547 16.621 400.5 16.66 cv
400.445 16.703 400.363 16.73 400.254 16.75 cv
400.137 16.766 399.973 16.777 399.758 16.777 cv
399.52 16.777 399.348 16.766 399.246 16.75 cv
399.137 16.73 399.063 16.703 399.023 16.66 cv
398.977 16.621 398.957 16.566 398.957 16.488 cv
398.957 15.937 li
398.668 16.246 398.34 16.484 397.977 16.652 cv
397.609 16.824 397.203 16.906 396.758 16.91 cv
396.387 16.906 396.047 16.859 395.738 16.766 cv
395.43 16.672 395.164 16.531 394.938 16.336 cv
394.711 16.148 394.535 15.914 394.41 15.633 cv
394.285 15.355 394.223 15.027 394.227 14.648 cv
394.223 14.25 394.301 13.898 394.461 13.594 cv
394.617 13.297 394.855 13.051 395.172 12.855 cv
395.484 12.664 395.875 12.52 396.344 12.422 cv
396.813 12.332 397.355 12.285 397.973 12.281 cv
398.652 12.281 li
398.652 11.859 li
398.652 11.645 398.629 11.453 398.586 11.289 cv
398.539 11.129 398.465 10.992 398.367 10.879 cv
398.262 10.773 398.129 10.691 397.961 10.637 cv
397.789 10.586 397.578 10.562 397.336 10.559 cv
397.004 10.562 396.711 10.598 396.457 10.668 cv
396.195 10.742 395.969 10.824 395.773 10.91 cv
395.574 11.004 395.41 11.082 395.281 11.152 cv
395.145 11.227 395.035 11.266 394.957 11.262 cv
394.895 11.266 394.844 11.246 394.805 11.207 cv
394.758 11.172 394.723 11.121 394.695 11.051 cv
394.664 10.988 394.641 10.902 394.629 10.801 cv
394.609 10.703 394.602 10.594 394.605 10.473 cv
394.602 10.312 394.617 10.187 394.645 10.09 cv
394.668 10 394.715 9.914 394.793 9.836 cv
394.863 9.76202 394.992 9.67999 395.176 9.59003 cv
395.355 9.5 395.566 9.414 395.813 9.336 cv
396.055 9.258 396.324 9.19501 396.613 9.14502 cv
396.902 9.09802 397.199 9.07397 397.508 9.07001 cv
398.051 9.07397 398.516 9.125 398.902 9.22998 cv
399.289 9.34003 399.609 9.50403 399.859 9.72302 cv
400.109 9.94098 400.289 10.227 400.406 10.574 cv
400.516 10.926 400.574 11.34 400.578 11.812 cv
cp
398.652 13.512 mo
397.902 13.512 li
397.586 13.516 397.316 13.539 397.094 13.582 cv
396.867 13.633 396.684 13.703 396.547 13.793 cv
396.402 13.891 396.301 14.004 396.238 14.133 cv
396.172 14.27 396.137 14.418 396.141 14.586 cv
396.137 14.879 396.23 15.109 396.418 15.273 cv
396.602 15.441 396.859 15.523 397.188 15.523 cv
397.461 15.523 397.711 15.453 397.945 15.312 cv
398.172 15.172 398.41 14.969 398.652 14.695 cv
cp
f
404.5 16.465 mo
404.496 16.52 404.48 16.562 404.453 16.602 cv
404.418 16.641 404.363 16.676 404.293 16.699 cv
404.215 16.727 404.117 16.742 403.992 16.758 cv
403.867 16.77 403.707 16.777 403.52 16.777 cv
403.324 16.777 403.168 16.77 403.043 16.758 cv
402.918 16.742 402.816 16.727 402.742 16.699 cv
402.664 16.676 402.609 16.641 402.582 16.602 cv
402.547 16.562 402.531 16.52 402.535 16.465 cv
402.535 6.21899 li
402.531 6.16803 402.547 6.12097 402.582 6.078 cv
402.609 6.039 402.664 6.00403 402.742 5.97302 cv
402.816 5.94501 402.918 5.92603 403.043 5.90601 cv
403.168 5.89502 403.324 5.88702 403.52 5.883 cv
403.707 5.88702 403.867 5.89502 403.992 5.90601 cv
404.117 5.92603 404.215 5.94501 404.293 5.97302 cv
404.363 6.00403 404.418 6.039 404.453 6.078 cv
404.48 6.12097 404.496 6.16803 404.5 6.21899 cv
cp
f
421.988 16.449 mo
421.984 16.504 421.973 16.551 421.945 16.59 cv
421.914 16.633 421.859 16.668 421.789 16.691 cv
421.711 16.719 421.613 16.738 421.488 16.754 cv
421.363 16.77 421.203 16.777 421.012 16.777 cv
420.824 16.777 420.668 16.77 420.547 16.754 cv
420.418 16.738 420.32 16.719 420.25 16.691 cv
420.176 16.668 420.125 16.633 420.094 16.59 cv
420.063 16.551 420.047 16.504 420.047 16.449 cv
420.047 8.242 li
420.031 8.242 li
417.109 16.441 li
417.086 16.512 417.051 16.566 417.008 16.609 cv
416.957 16.656 416.895 16.691 416.816 16.715 cv
416.734 16.742 416.633 16.758 416.508 16.766 cv
416.383 16.773 416.23 16.777 416.059 16.777 cv
415.879 16.777 415.73 16.77 415.605 16.758 cv
415.48 16.742 415.375 16.723 415.297 16.695 cv
415.211 16.668 415.148 16.633 415.105 16.59 cv
415.055 16.551 415.023 16.504 415.012 16.441 cv
412.191 8.242 li
412.176 8.242 li
412.176 16.449 li
412.172 16.504 412.156 16.551 412.133 16.59 cv
412.102 16.633 412.051 16.668 411.973 16.691 cv
411.895 16.719 411.793 16.738 411.672 16.754 cv
411.547 16.77 411.391 16.777 411.203 16.777 cv
411.012 16.777 410.855 16.77 410.734 16.754 cv
410.605 16.738 410.504 16.719 410.434 16.691 cv
410.355 16.668 410.305 16.633 410.277 16.59 cv
410.246 16.551 410.23 16.504 410.234 16.449 cv
410.234 7.46503 li
410.23 7.203 410.301 7 410.445 6.85498 cv
410.582 6.71899 410.77 6.64801 411.008 6.64502 cv
412.348 6.64502 li
412.586 6.64801 412.789 6.66803 412.961 6.703 cv
413.129 6.74597 413.277 6.80902 413.406 6.89801 cv
413.527 6.992 413.633 7.11298 413.719 7.258 cv
413.801 7.40997 413.871 7.59399 413.938 7.80902 cv
416.121 13.816 li
416.152 13.816 li
418.41 7.82397 li
418.477 7.60498 418.551 7.422 418.633 7.27002 cv
418.711 7.12097 418.805 7 418.914 6.90198 cv
419.02 6.81201 419.145 6.74597 419.289 6.703 cv
419.434 6.66803 419.602 6.64801 419.797 6.64502 cv
421.176 6.64502 li
421.313 6.64801 421.434 6.664 421.539 6.69897 cv
421.637 6.73798 421.719 6.79303 421.789 6.85901 cv
421.852 6.93402 421.902 7.02002 421.938 7.117 cv
421.969 7.22302 421.984 7.34003 421.988 7.46503 cv
cp
f
431.098 12.918 mo
431.094 13.516 431.016 14.059 430.863 14.543 cv
430.703 15.035 430.469 15.453 430.152 15.805 cv
429.836 16.156 429.438 16.43 428.961 16.621 cv
428.48 16.812 427.922 16.906 427.285 16.91 cv
426.664 16.906 426.125 16.824 425.672 16.652 cv
425.211 16.484 424.832 16.234 424.535 15.906 cv
424.23 15.582 424.008 15.18 423.863 14.699 cv
423.719 14.223 423.648 13.676 423.648 13.059 cv
423.648 12.469 423.727 11.93 423.883 11.437 cv
424.039 10.949 424.277 10.527 424.598 10.176 cv
424.914 9.828 425.309 9.55499 425.785 9.35901 cv
426.258 9.16803 426.816 9.07397 427.457 9.07001 cv
428.082 9.07397 428.621 9.15601 429.078 9.32397 cv
429.535 9.49597 429.914 9.74597 430.211 10.07 cv
430.508 10.398 430.73 10.801 430.879 11.277 cv
431.023 11.758 431.094 12.305 431.098 12.918 cv
cp
429.078 12.996 mo
429.074 12.66 429.047 12.344 428.996 12.051 cv
428.938 11.766 428.844 11.516 428.719 11.301 cv
428.586 11.09 428.414 10.922 428.203 10.801 cv
427.984 10.684 427.715 10.625 427.387 10.621 cv
427.098 10.625 426.844 10.68 426.625 10.781 cv
426.406 10.891 426.227 11.047 426.086 11.25 cv
425.945 11.457 425.84 11.703 425.77 11.988 cv
425.699 12.281 425.664 12.609 425.664 12.973 cv
425.664 13.32 425.691 13.637 425.75 13.922 cv
425.805 14.215 425.898 14.465 426.027 14.676 cv
426.152 14.891 426.324 15.055 426.547 15.168 cv
426.762 15.289 427.031 15.348 427.355 15.344 cv
427.648 15.348 427.906 15.293 428.129 15.184 cv
428.344 15.078 428.523 14.926 428.664 14.719 cv
428.805 14.52 428.906 14.273 428.977 13.984 cv
429.039 13.699 429.074 13.371 429.078 12.996 cv
cp
f
439.246 16.465 mo
439.242 16.527 439.23 16.574 439.207 16.609 cv
439.18 16.652 439.133 16.684 439.074 16.707 cv
439.008 16.73 438.926 16.746 438.82 16.762 cv
438.715 16.77 438.582 16.777 438.43 16.777 cv
438.258 16.777 438.125 16.77 438.023 16.762 cv
437.918 16.746 437.832 16.73 437.77 16.707 cv
437.703 16.684 437.656 16.652 437.629 16.609 cv
437.598 16.574 437.582 16.527 437.586 16.465 cv
437.586 15.695 li
437.227 16.082 436.852 16.379 436.461 16.59 cv
436.063 16.801 435.629 16.906 435.156 16.91 cv
434.621 16.906 434.172 16.805 433.809 16.602 cv
433.441 16.398 433.145 16.125 432.914 15.773 cv
432.68 15.43 432.512 15.023 432.41 14.555 cv
432.309 14.094 432.258 13.602 432.258 13.082 cv
432.258 12.469 432.32 11.914 432.453 11.418 cv
432.582 10.926 432.777 10.504 433.035 10.156 cv
433.289 9.80902 433.605 9.54303 433.984 9.35199 cv
434.363 9.16803 434.801 9.07397 435.297 9.07001 cv
435.684 9.07397 436.035 9.15198 436.355 9.30902 cv
436.668 9.46899 436.984 9.69897 437.297 10.004 cv
437.297 6.242 li
437.297 6.19098 437.309 6.14502 437.34 6.10199 cv
437.363 6.06201 437.418 6.02698 437.496 5.99597 cv
437.57 5.96899 437.668 5.94897 437.797 5.92999 cv
437.918 5.91803 438.078 5.90997 438.273 5.90601 cv
438.465 5.90997 438.621 5.91803 438.746 5.92999 cv
438.867 5.94897 438.969 5.96899 439.043 5.99597 cv
439.113 6.02698 439.164 6.06201 439.199 6.10199 cv
439.227 6.14502 439.242 6.19098 439.246 6.242 cv
cp
437.297 11.82 mo
437.016 11.469 436.746 11.199 436.492 11.012 cv
436.23 10.824 435.961 10.73 435.684 10.73 cv
435.43 10.73 435.211 10.797 435.027 10.922 cv
434.84 11.055 434.691 11.223 434.582 11.434 cv
434.469 11.645 434.387 11.883 434.332 12.145 cv
434.277 12.41 434.25 12.68 434.25 12.949 cv
434.25 13.246 434.273 13.527 434.32 13.801 cv
434.367 14.078 434.441 14.324 434.551 14.539 cv
434.652 14.754 434.797 14.926 434.977 15.055 cv
435.152 15.187 435.375 15.254 435.645 15.25 cv
435.777 15.254 435.906 15.234 436.039 15.191 cv
436.164 15.156 436.297 15.094 436.43 15 cv
436.563 14.914 436.699 14.797 436.84 14.652 cv
436.98 14.512 437.133 14.336 437.297 14.129 cv
cp
f
447.645 12.789 mo
447.641 13.027 447.59 13.203 447.484 13.316 cv
447.375 13.434 447.227 13.492 447.047 13.488 cv
442.813 13.488 li
442.809 13.789 442.844 14.059 442.918 14.297 cv
442.984 14.539 443.098 14.742 443.254 14.91 cv
443.406 15.082 443.602 15.211 443.844 15.297 cv
444.082 15.387 444.371 15.43 444.715 15.43 cv
445.055 15.43 445.355 15.406 445.617 15.355 cv
445.875 15.309 446.102 15.254 446.293 15.191 cv
446.48 15.133 446.637 15.078 446.766 15.027 cv
446.887 14.98 446.988 14.957 447.07 14.953 cv
447.113 14.957 447.152 14.965 447.188 14.98 cv
447.215 15 447.242 15.031 447.262 15.078 cv
447.281 15.125 447.293 15.191 447.305 15.277 cv
447.309 15.363 447.313 15.473 447.316 15.602 cv
447.313 15.719 447.313 15.816 447.309 15.895 cv
447.301 15.977 447.293 16.043 447.285 16.098 cv
447.273 16.156 447.258 16.207 447.238 16.242 cv
447.219 16.285 447.191 16.32 447.16 16.355 cv
447.125 16.395 447.031 16.445 446.883 16.504 cv
446.727 16.57 446.535 16.633 446.305 16.687 cv
446.066 16.75 445.797 16.797 445.5 16.844 cv
445.195 16.883 444.875 16.906 444.535 16.91 cv
443.914 16.906 443.371 16.832 442.91 16.676 cv
442.441 16.523 442.055 16.285 441.746 15.969 cv
441.43 15.652 441.195 15.254 441.047 14.77 cv
440.891 14.289 440.816 13.723 440.82 13.066 cv
440.816 12.453 440.895 11.895 441.059 11.398 cv
441.215 10.902 441.449 10.484 441.762 10.137 cv
442.066 9.79303 442.441 9.52698 442.879 9.34399 cv
443.316 9.164 443.809 9.07397 444.363 9.07001 cv
444.941 9.07397 445.441 9.15997 445.855 9.328 cv
446.27 9.50403 446.605 9.742 446.871 10.043 cv
447.133 10.348 447.328 10.707 447.457 11.121 cv
447.578 11.539 447.641 11.988 447.645 12.477 cv
cp
445.742 12.227 mo
445.754 11.676 445.645 11.242 445.41 10.93 cv
445.176 10.617 444.809 10.461 444.316 10.457 cv
444.066 10.461 443.852 10.508 443.668 10.598 cv
443.48 10.695 443.328 10.82 443.207 10.977 cv
443.082 11.137 442.988 11.324 442.926 11.539 cv
442.859 11.754 442.82 11.984 442.813 12.227 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
