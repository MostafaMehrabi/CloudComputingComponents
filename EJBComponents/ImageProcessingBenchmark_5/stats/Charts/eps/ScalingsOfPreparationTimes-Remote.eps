%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingsOfPreparationTimes-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:44:39 p.m.
%%BoundingBox: 0 0 661 549
%%HiResBoundingBox: 0 0 660.3600 548.6401
%%CropBox: 0 0 660.3600 548.6401
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -548.64 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 548.64 li
660.36 548.64 li
660.36 0 li
cp
clp
gsave
0 548.64 mo
661 548.64 li
661 -.359985 li
0 -.359985 li
cp
clp
0 0 mo
660.359 0 li
660.359 548.641 li
0 548.641 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
33.238 477 mo
644.281 477 li
33.238 454.68 mo
644.281 454.68 li
33.238 432.359 mo
644.281 432.359 li
33.238 410.039 mo
644.281 410.039 li
33.238 387.84 mo
644.281 387.84 li
33.238 365.52 mo
644.281 365.52 li
33.238 343.199 mo
644.281 343.199 li
33.238 320.879 mo
644.281 320.879 li
33.238 298.68 mo
644.281 298.68 li
33.238 276.359 mo
644.281 276.359 li
33.238 254.039 mo
644.281 254.039 li
33.238 231.719 mo
644.281 231.719 li
33.238 209.52 mo
644.281 209.52 li
33.238 187.199 mo
644.281 187.199 li
33.238 164.879 mo
644.281 164.879 li
33.238 142.559 mo
644.281 142.559 li
33.238 120.359 mo
644.281 120.359 li
33.238 98.039 mo
644.281 98.039 li
33.238 75.719 mo
644.281 75.719 li
33.238 53.398 mo
644.281 53.398 li
33.238 31.199 mo
644.281 31.199 li
.326574 .281529 .277562 0 cmyk
@
71.52 31.199 mo
71.52 499.199 li
147.84 31.199 mo
147.84 499.199 li
224.16 31.199 mo
224.16 499.199 li
300.602 31.199 mo
300.602 499.199 li
376.922 31.199 mo
376.922 499.199 li
453.359 31.199 mo
453.359 499.199 li
529.68 31.199 mo
529.68 499.199 li
606 31.199 mo
606 499.199 li
.175235 .144778 .143648 0 cmyk
@
33.238 31.199 mo
33.238 499.199 li
109.68 31.199 mo
109.68 499.199 li
186 31.199 mo
186 499.199 li
262.441 31.199 mo
262.441 499.199 li
338.762 31.199 mo
338.762 499.199 li
415.078 31.199 mo
415.078 499.199 li
491.52 31.199 mo
491.52 499.199 li
567.84 31.199 mo
567.84 499.199 li
644.281 31.199 mo
644.281 499.199 li
.326574 .281529 .277562 0 cmyk
@
13.199 489.961 mo
20.281 489.961 li
20.281 507 li
13.199 507 li
cp
0 0 0 0 cmyk
ef
13.199 467.641 mo
20.281 467.641 li
20.281 484.68 li
13.199 484.68 li
cp
ef
13.199 445.32 mo
20.281 445.32 li
20.281 462.48 li
13.199 462.48 li
cp
ef
13.199 423 mo
20.281 423 li
20.281 440.16 li
13.199 440.16 li
cp
ef
13.199 400.801 mo
20.281 400.801 li
20.281 417.84 li
13.199 417.84 li
cp
ef
13.199 378.48 mo
20.281 378.48 li
20.281 395.519 li
13.199 395.519 li
cp
ef
13.199 356.16 mo
20.281 356.16 li
20.281 373.32 li
13.199 373.32 li
cp
ef
13.199 333.84 mo
20.281 333.84 li
20.281 351 li
13.199 351 li
cp
ef
13.199 311.641 mo
20.281 311.641 li
20.281 328.68 li
13.199 328.68 li
cp
ef
6.121 289.32 mo
20.281 289.32 li
20.281 306.359 li
6.121 306.359 li
cp
ef
6.121 267 mo
20.281 267 li
20.281 284.16 li
6.121 284.16 li
cp
ef
6.121 244.68 mo
20.281 244.68 li
20.281 261.84 li
6.121 261.84 li
cp
ef
6.121 222.48 mo
20.281 222.48 li
20.281 239.519 li
6.121 239.519 li
cp
ef
6.121 200.16 mo
20.281 200.16 li
20.281 217.199 li
6.121 217.199 li
cp
ef
6.121 177.84 mo
20.281 177.84 li
20.281 195 li
6.121 195 li
cp
ef
6.121 155.641 mo
20.281 155.641 li
20.281 172.68 li
6.121 172.68 li
cp
ef
6.121 133.32 mo
20.281 133.32 li
20.281 150.359 li
6.121 150.359 li
cp
ef
6.121 111 mo
20.281 111 li
20.281 128.039 li
6.121 128.039 li
cp
ef
6.121 88.68 mo
20.281 88.68 li
20.281 105.84 li
6.121 105.84 li
cp
ef
6.121 66.48 mo
20.281 66.48 li
20.281 83.519 li
6.121 83.519 li
cp
ef
6.121 44.16 mo
20.281 44.16 li
20.281 61.199 li
6.121 61.199 li
cp
ef
6.121 21.84 mo
20.281 21.84 li
20.281 39 li
6.121 39 li
cp
ef
.96 lw
33.238 499.199 mo
644.281 499.199 li
.369879 .299321 .304356 .000976577 cmyk
@
33.238 499.199 mo
33.238 503.641 li
109.68 499.199 mo
109.68 503.641 li
186 499.199 mo
186 503.641 li
262.441 499.199 mo
262.441 503.641 li
338.762 499.199 mo
338.762 503.641 li
415.078 499.199 mo
415.078 503.641 li
491.52 499.199 mo
491.52 503.641 li
567.84 499.199 mo
567.84 503.641 li
644.281 499.199 mo
644.281 503.641 li
@
gsave
33.238 31.078 mo
644.879 31.078 li
644.879 499.922 li
33.238 499.922 li
cp
clp
1 lc
33.238 499.199 mo
109.68 476.879 li
186 432.48 li
262.441 388.078 li
338.762 343.801 li
415.078 304.441 li
491.52 262.922 li
567.84 231.961 li
644.281 190.68 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
28.141 494.191 mo
38.102 494.191 li
38.102 504.148 li
28.141 504.148 li
cp
.62829 .284672 0 0 cmyk
@
104.461 471.75 mo
114.422 471.75 li
114.422 481.711 li
104.461 481.711 li
cp
@
180.898 427.352 mo
190.859 427.352 li
190.859 437.309 li
180.898 437.309 li
cp
@
257.219 383.07 mo
267.18 383.07 li
267.18 393.031 li
257.219 393.031 li
cp
@
333.66 338.789 mo
343.621 338.789 li
343.621 348.75 li
333.66 348.75 li
cp
@
409.98 299.309 mo
419.941 299.309 li
419.941 309.27 li
409.98 309.27 li
cp
@
486.301 257.91 mo
496.262 257.91 li
496.262 267.871 li
486.301 267.871 li
cp
@
562.738 226.949 mo
572.699 226.949 li
572.699 236.91 li
562.738 236.91 li
cp
@
639.059 185.672 mo
649.02 185.672 li
649.02 195.629 li
639.059 195.629 li
cp
@
gsave
33.238 31.078 mo
644.879 31.078 li
644.879 499.922 li
33.238 499.922 li
cp
clp
.96 lw
1 lc
33.238 499.199 mo
109.68 483.84 li
186 440.039 li
262.441 385.922 li
338.762 343.559 li
415.078 300.238 li
491.52 253.199 li
567.84 207.48 li
644.281 162.121 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
28.141 494.191 mo
38.102 494.191 li
38.102 504.148 li
28.141 504.148 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
104.461 478.711 mo
114.422 478.711 li
114.422 488.672 li
104.461 488.672 li
cp
@
180.898 435.031 mo
190.859 435.031 li
190.859 444.988 li
180.898 444.988 li
cp
@
257.219 380.91 mo
267.18 380.91 li
267.18 390.871 li
257.219 390.871 li
cp
@
333.66 338.43 mo
343.621 338.43 li
343.621 348.391 li
333.66 348.391 li
cp
@
409.98 295.109 mo
419.941 295.109 li
419.941 305.07 li
409.98 305.07 li
cp
@
486.301 248.191 mo
496.262 248.191 li
496.262 258.148 li
486.301 258.148 li
cp
@
562.738 202.352 mo
572.699 202.352 li
572.699 212.309 li
562.738 212.309 li
cp
@
639.059 157.109 mo
649.02 157.109 li
649.02 167.07 li
639.059 167.07 li
cp
@
gsave
33.238 31.078 mo
644.879 31.078 li
644.879 499.922 li
33.238 499.922 li
cp
clp
.96 lw
1 lc
33.238 499.199 mo
109.68 483.719 li
186 432.961 li
262.441 398.398 li
338.762 344.039 li
415.078 250.68 li
491.52 255.961 li
567.84 211.199 li
644.281 166.559 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
28.141 494.191 mo
38.102 494.191 li
38.102 504.148 li
28.141 504.148 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
104.461 478.711 mo
114.422 478.711 li
114.422 488.672 li
104.461 488.672 li
cp
@
180.898 427.949 mo
190.859 427.949 li
190.859 437.91 li
180.898 437.91 li
cp
@
257.219 393.27 mo
267.18 393.27 li
267.18 403.231 li
257.219 403.231 li
cp
@
333.66 338.91 mo
343.621 338.91 li
343.621 348.871 li
333.66 348.871 li
cp
@
409.98 245.551 mo
419.941 245.551 li
419.941 255.512 li
409.98 255.512 li
cp
@
486.301 250.949 mo
496.262 250.949 li
496.262 260.91 li
486.301 260.91 li
cp
@
562.738 206.191 mo
572.699 206.191 li
572.699 216.148 li
562.738 216.148 li
cp
@
639.059 161.551 mo
649.02 161.551 li
649.02 171.512 li
639.059 171.512 li
cp
@
gsave
33.238 31.078 mo
644.879 31.078 li
644.879 499.922 li
33.238 499.922 li
cp
clp
.96 lw
1 lc
33.238 499.199 mo
109.68 483.719 li
186 450.121 li
262.441 385.68 li
338.762 347.281 li
415.078 302.762 li
491.52 258.48 li
567.84 213.48 li
644.281 169.68 li
0 .993988 1 0 cmyk
@
grestore
28.141 494.191 mo
38.102 494.191 li
38.102 504.148 li
28.141 504.148 li
cp
0 .993988 1 0 cmyk
@
104.461 478.59 mo
114.422 478.59 li
114.422 488.551 li
104.461 488.551 li
cp
@
180.898 445.109 mo
190.859 445.109 li
190.859 455.07 li
180.898 455.07 li
cp
@
257.219 380.551 mo
267.18 380.551 li
267.18 390.512 li
257.219 390.512 li
cp
@
333.66 342.148 mo
343.621 342.148 li
343.621 352.109 li
333.66 352.109 li
cp
@
409.98 297.629 mo
419.941 297.629 li
419.941 307.59 li
409.98 307.59 li
cp
@
486.301 253.352 mo
496.262 253.352 li
496.262 263.309 li
486.301 263.309 li
cp
@
562.738 208.352 mo
572.699 208.352 li
572.699 218.309 li
562.738 218.309 li
cp
@
639.059 164.672 mo
649.02 164.672 li
649.02 174.629 li
639.059 174.629 li
cp
@
gsave
33.238 31.078 mo
644.879 31.078 li
644.879 499.922 li
33.238 499.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
33.238 499.199 mo
109.68 485.641 li
186 446.281 li
262.441 407.641 li
338.762 335.879 li
415.078 344.879 li
491.52 303.719 li
567.84 261.48 li
644.281 233.398 li
.62829 .284672 0 0 cmyk
@
grestore
[4 3 ] 0 dsh
28.141 494.191 mo
38.102 494.191 li
38.102 504.148 li
28.141 504.148 li
cp
.62829 .284672 0 0 cmyk
@
104.461 480.512 mo
114.422 480.512 li
114.422 490.469 li
104.461 490.469 li
cp
@
180.898 441.27 mo
190.859 441.27 li
190.859 451.231 li
180.898 451.231 li
cp
@
257.219 402.512 mo
267.18 402.512 li
267.18 412.469 li
257.219 412.469 li
cp
@
333.66 330.871 mo
343.621 330.871 li
343.621 340.828 li
333.66 340.828 li
cp
@
409.98 339.871 mo
419.941 339.871 li
419.941 349.828 li
409.98 349.828 li
cp
@
486.301 298.59 mo
496.262 298.59 li
496.262 308.551 li
486.301 308.551 li
cp
@
562.738 256.469 mo
572.699 256.469 li
572.699 266.43 li
562.738 266.43 li
cp
@
639.059 228.391 mo
649.02 228.391 li
649.02 238.352 li
639.059 238.352 li
cp
@
gsave
33.238 31.078 mo
644.879 31.078 li
644.879 499.922 li
33.238 499.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
33.238 499.199 mo
109.68 485.641 li
186 458.641 li
262.441 449.879 li
338.762 392.039 li
415.078 356.039 li
491.52 343.199 li
567.84 307.078 li
644.281 267.48 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
[] 0 dsh
28.141 494.191 mo
38.102 494.191 li
38.102 504.148 li
28.141 504.148 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
104.461 480.629 mo
114.422 480.629 li
114.422 490.59 li
104.461 490.59 li
cp
@
180.898 453.629 mo
190.859 453.629 li
190.859 463.59 li
180.898 463.59 li
cp
@
257.219 444.871 mo
267.18 444.871 li
267.18 454.828 li
257.219 454.828 li
cp
@
333.66 386.91 mo
343.621 386.91 li
343.621 396.871 li
333.66 396.871 li
cp
@
409.98 351.031 mo
419.941 351.031 li
419.941 360.988 li
409.98 360.988 li
cp
@
486.301 338.07 mo
496.262 338.07 li
496.262 348.031 li
486.301 348.031 li
cp
@
562.738 302.07 mo
572.699 302.07 li
572.699 312.031 li
562.738 312.031 li
cp
@
639.059 262.352 mo
649.02 262.352 li
649.02 272.309 li
639.059 272.309 li
cp
@
gsave
33.238 31.078 mo
644.879 31.078 li
644.879 499.922 li
33.238 499.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
33.238 499.199 mo
109.68 483.719 li
186 446.398 li
262.441 446.16 li
338.762 411.84 li
415.078 376.441 li
491.52 355.922 li
567.84 346.32 li
644.281 309 li
.467353 0 .87747 0 cmyk
@
grestore
28.141 494.191 mo
38.102 494.191 li
38.102 504.148 li
28.141 504.148 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
104.461 478.711 mo
114.422 478.711 li
114.422 488.672 li
104.461 488.672 li
cp
@
180.898 441.391 mo
190.859 441.391 li
190.859 451.352 li
180.898 451.352 li
cp
@
257.219 441.031 mo
267.18 441.031 li
267.18 450.988 li
257.219 450.988 li
cp
@
333.66 406.828 mo
343.621 406.828 li
343.621 416.789 li
333.66 416.789 li
cp
@
409.98 371.43 mo
419.941 371.43 li
419.941 381.391 li
409.98 381.391 li
cp
@
486.301 350.789 mo
496.262 350.789 li
496.262 360.75 li
486.301 360.75 li
cp
@
562.738 341.309 mo
572.699 341.309 li
572.699 351.27 li
562.738 351.27 li
cp
@
639.059 303.871 mo
649.02 303.871 li
649.02 313.828 li
639.059 313.828 li
cp
@
gsave
33.238 31.078 mo
644.879 31.078 li
644.879 499.922 li
33.238 499.922 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
33.238 499.199 mo
109.68 483.84 li
186 446.281 li
262.441 446.039 li
338.762 444.719 li
415.078 395.641 li
491.52 366.121 li
567.84 349.68 li
644.281 346.68 li
0 .993988 1 0 cmyk
@
grestore
28.141 494.191 mo
38.102 494.191 li
38.102 504.148 li
28.141 504.148 li
cp
0 .993988 1 0 cmyk
@
104.461 478.711 mo
114.422 478.711 li
114.422 488.672 li
104.461 488.672 li
cp
@
180.898 441.148 mo
190.859 441.148 li
190.859 451.109 li
180.898 451.109 li
cp
@
257.219 441.031 mo
267.18 441.031 li
267.18 450.988 li
257.219 450.988 li
cp
@
333.66 439.711 mo
343.621 439.711 li
343.621 449.672 li
333.66 449.672 li
cp
@
409.98 390.629 mo
419.941 390.629 li
419.941 400.59 li
409.98 400.59 li
cp
@
486.301 361.109 mo
496.262 361.109 li
496.262 371.07 li
486.301 371.07 li
cp
@
562.738 344.672 mo
572.699 344.672 li
572.699 354.629 li
562.738 354.629 li
cp
@
639.059 341.551 mo
649.02 341.551 li
649.02 351.512 li
639.059 351.512 li
cp
@
13.16 489.945 mo
20.254 489.945 li
20.254 507.035 li
13.16 507.035 li
cp
0 0 0 0 cmyk
ef
19.535 502.887 mo
19.531 502.977 19.523 503.047 19.512 503.105 cv
19.496 503.168 19.477 503.219 19.457 503.25 cv
19.434 503.289 19.41 503.312 19.379 503.328 cv
19.348 503.344 19.316 503.352 19.289 503.352 cv
14.652 503.352 li
14.617 503.352 14.59 503.344 14.563 503.328 cv
14.535 503.312 14.508 503.289 14.484 503.25 cv
14.457 503.219 14.438 503.168 14.426 503.105 cv
14.41 503.047 14.402 502.977 14.406 502.887 cv
14.402 502.809 14.41 502.734 14.426 502.672 cv
14.438 502.613 14.453 502.566 14.477 502.527 cv
14.492 502.492 14.52 502.461 14.551 502.437 cv
14.582 502.418 14.613 502.41 14.652 502.406 cv
16.504 502.406 li
16.504 495.66 li
14.789 496.68 li
14.699 496.73 14.629 496.758 14.582 496.766 cv
14.527 496.773 14.484 496.766 14.453 496.734 cv
14.418 496.707 14.398 496.656 14.387 496.586 cv
14.375 496.52 14.367 496.434 14.371 496.324 cv
14.367 496.25 14.371 496.184 14.383 496.125 cv
14.387 496.074 14.398 496.027 14.414 495.988 cv
14.426 495.953 14.445 495.922 14.469 495.895 cv
14.492 495.867 14.523 495.84 14.57 495.812 cv
16.613 494.5 li
16.629 494.488 16.648 494.477 16.68 494.469 cv
16.703 494.461 16.738 494.453 16.785 494.441 cv
16.824 494.434 16.875 494.426 16.93 494.422 cv
16.984 494.422 17.051 494.422 17.137 494.418 cv
17.242 494.422 17.336 494.426 17.41 494.434 cv
17.48 494.441 17.535 494.457 17.582 494.473 cv
17.621 494.492 17.648 494.512 17.664 494.535 cv
17.672 494.562 17.68 494.586 17.684 494.609 cv
17.684 502.406 li
19.289 502.406 li
19.324 502.41 19.359 502.418 19.391 502.437 cv
19.422 502.461 19.445 502.492 19.469 502.527 cv
19.484 502.566 19.5 502.613 19.516 502.672 cv
19.523 502.734 19.531 502.809 19.535 502.887 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.16 467.656 mo
20.254 467.656 li
20.254 484.746 li
13.16 484.746 li
cp
0 0 0 0 cmyk
ef
19.516 480.547 mo
19.512 480.633 19.508 480.707 19.496 480.77 cv
19.484 480.836 19.469 480.891 19.449 480.93 cv
19.426 480.977 19.398 481.008 19.367 481.023 cv
19.332 481.047 19.293 481.055 19.254 481.055 cv
14.352 481.055 li
14.289 481.055 14.23 481.047 14.184 481.031 cv
14.133 481.016 14.094 480.992 14.059 480.953 cv
14.023 480.922 13.996 480.867 13.984 480.797 cv
13.965 480.727 13.957 480.641 13.961 480.539 cv
13.957 480.449 13.961 480.371 13.969 480.301 cv
13.973 480.234 13.988 480.176 14.016 480.121 cv
14.039 480.07 14.07 480.016 14.105 479.961 cv
14.141 479.91 14.184 479.855 14.242 479.793 cv
16.016 477.969 li
16.426 477.551 16.754 477.176 17.004 476.84 cv
17.25 476.512 17.441 476.207 17.574 475.93 cv
17.707 475.656 17.793 475.406 17.84 475.18 cv
17.879 474.957 17.902 474.746 17.902 474.551 cv
17.902 474.355 17.867 474.172 17.801 473.992 cv
17.734 473.82 17.641 473.664 17.516 473.527 cv
17.391 473.398 17.234 473.293 17.047 473.211 cv
16.859 473.137 16.641 473.098 16.395 473.094 cv
16.105 473.098 15.848 473.137 15.621 473.211 cv
15.391 473.293 15.191 473.379 15.02 473.465 cv
14.848 473.559 14.703 473.641 14.586 473.719 cv
14.469 473.797 14.383 473.836 14.332 473.836 cv
14.297 473.836 14.266 473.828 14.242 473.809 cv
14.211 473.793 14.191 473.762 14.176 473.719 cv
14.16 473.68 14.145 473.625 14.137 473.555 cv
14.125 473.488 14.121 473.406 14.125 473.309 cv
14.121 473.242 14.125 473.184 14.133 473.133 cv
14.137 473.082 14.145 473.039 14.156 473 cv
14.164 472.965 14.18 472.93 14.199 472.898 cv
14.219 472.867 14.254 472.828 14.313 472.777 cv
14.363 472.73 14.457 472.664 14.594 472.582 cv
14.727 472.5 14.898 472.422 15.102 472.34 cv
15.305 472.262 15.527 472.191 15.773 472.137 cv
16.016 472.082 16.273 472.055 16.547 472.055 cv
16.973 472.055 17.348 472.117 17.672 472.238 cv
17.992 472.359 18.258 472.523 18.473 472.734 cv
18.684 472.945 18.844 473.191 18.949 473.465 cv
19.055 473.746 19.109 474.043 19.109 474.355 cv
19.109 474.645 19.082 474.926 19.031 475.203 cv
18.98 475.488 18.875 475.793 18.715 476.117 cv
18.551 476.445 18.316 476.809 18.012 477.207 cv
17.703 477.609 17.297 478.07 16.793 478.586 cv
15.387 480.055 li
19.246 480.055 li
19.277 480.059 19.313 480.07 19.352 480.086 cv
19.383 480.109 19.414 480.141 19.441 480.18 cv
19.465 480.223 19.484 480.273 19.496 480.332 cv
19.508 480.398 19.512 480.469 19.516 480.547 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.16 445.371 mo
20.254 445.371 li
20.254 462.461 li
13.16 462.461 li
cp
0 0 0 0 cmyk
ef
19.445 456.246 mo
19.441 456.656 19.371 457.023 19.23 457.348 cv
19.086 457.676 18.883 457.957 18.621 458.187 cv
18.355 458.422 18.027 458.598 17.641 458.723 cv
17.25 458.848 16.813 458.91 16.328 458.91 cv
16.023 458.91 15.746 458.883 15.492 458.836 cv
15.23 458.789 15 458.738 14.805 458.668 cv
14.602 458.605 14.438 458.535 14.305 458.465 cv
14.172 458.395 14.086 458.344 14.055 458.309 cv
14.016 458.281 13.992 458.25 13.977 458.215 cv
13.957 458.184 13.938 458.145 13.926 458.098 cv
13.91 458.055 13.902 458 13.895 457.93 cv
13.887 457.867 13.883 457.785 13.887 457.684 cv
13.883 457.523 13.898 457.41 13.934 457.344 cv
13.965 457.281 14.012 457.246 14.074 457.246 cv
14.117 457.246 14.199 457.285 14.324 457.355 cv
14.445 457.434 14.605 457.512 14.801 457.594 cv
14.992 457.68 15.219 457.758 15.484 457.828 cv
15.742 457.902 16.035 457.937 16.355 457.937 cv
16.664 457.937 16.934 457.898 17.172 457.82 cv
17.402 457.742 17.602 457.633 17.762 457.492 cv
17.918 457.352 18.035 457.184 18.117 456.988 cv
18.195 456.793 18.234 456.582 18.238 456.355 cv
18.234 456.105 18.184 455.879 18.086 455.676 cv
17.98 455.477 17.832 455.305 17.641 455.156 cv
17.441 455.012 17.203 454.898 16.918 454.82 cv
16.633 454.742 16.309 454.703 15.945 454.703 cv
15.074 454.703 li
15.031 454.703 14.996 454.695 14.961 454.68 cv
14.926 454.664 14.895 454.637 14.871 454.598 cv
14.844 454.562 14.824 454.516 14.809 454.457 cv
14.793 454.398 14.785 454.32 14.785 454.223 cv
14.785 454.137 14.789 454.066 14.805 454.008 cv
14.813 453.953 14.832 453.906 14.863 453.871 cv
14.887 453.836 14.918 453.812 14.949 453.793 cv
14.98 453.781 15.016 453.773 15.059 453.77 cv
15.832 453.77 li
16.133 453.773 16.402 453.734 16.645 453.652 cv
16.879 453.578 17.082 453.465 17.254 453.316 cv
17.418 453.172 17.547 452.996 17.637 452.793 cv
17.727 452.59 17.773 452.363 17.773 452.109 cv
17.773 451.93 17.742 451.754 17.684 451.586 cv
17.621 451.422 17.531 451.277 17.414 451.152 cv
17.293 451.027 17.141 450.93 16.961 450.859 cv
16.773 450.789 16.563 450.754 16.32 450.754 cv
16.055 450.754 15.809 450.797 15.59 450.875 cv
15.363 450.957 15.168 451.043 14.996 451.133 cv
14.82 451.227 14.676 451.312 14.563 451.391 cv
14.449 451.473 14.367 451.512 14.324 451.508 cv
14.289 451.512 14.262 451.504 14.238 451.492 cv
14.211 451.48 14.191 451.457 14.176 451.422 cv
14.16 451.391 14.148 451.344 14.141 451.277 cv
14.133 451.219 14.129 451.137 14.133 451.035 cv
14.129 450.969 14.129 450.91 14.137 450.855 cv
14.137 450.805 14.148 450.758 14.164 450.715 cv
14.18 450.68 14.195 450.645 14.215 450.609 cv
14.23 450.582 14.262 450.543 14.305 450.496 cv
14.348 450.453 14.434 450.391 14.57 450.309 cv
14.699 450.227 14.863 450.148 15.059 450.066 cv
15.25 449.988 15.473 449.918 15.73 449.863 cv
15.98 449.809 16.254 449.781 16.551 449.781 cv
16.957 449.781 17.32 449.836 17.633 449.937 cv
17.945 450.047 18.203 450.195 18.414 450.383 cv
18.617 450.578 18.773 450.809 18.879 451.074 cv
18.98 451.344 19.031 451.637 19.035 451.961 cv
19.031 452.242 18.996 452.504 18.926 452.738 cv
18.852 452.98 18.742 453.191 18.602 453.375 cv
18.457 453.562 18.285 453.719 18.082 453.848 cv
17.875 453.98 17.637 454.074 17.367 454.121 cv
17.367 454.133 li
17.672 454.168 17.953 454.242 18.207 454.363 cv
18.461 454.484 18.68 454.637 18.863 454.82 cv
19.043 455.004 19.184 455.219 19.289 455.461 cv
19.391 455.707 19.441 455.969 19.445 456.246 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.16 423.078 mo
20.254 423.078 li
20.254 440.172 li
13.16 440.172 li
cp
0 0 0 0 cmyk
ef
19.891 433.965 mo
19.887 434.117 19.863 434.238 19.82 434.324 cv
19.773 434.414 19.711 434.457 19.629 434.453 cv
18.629 434.453 li
18.629 436.316 li
18.629 436.355 18.617 436.387 18.602 436.41 cv
18.578 436.437 18.547 436.457 18.504 436.477 cv
18.453 436.492 18.391 436.504 18.32 436.516 cv
18.242 436.523 18.148 436.527 18.031 436.531 cv
17.914 436.527 17.816 436.523 17.746 436.516 cv
17.668 436.504 17.609 436.492 17.566 436.477 cv
17.52 436.457 17.488 436.437 17.473 436.41 cv
17.453 436.387 17.445 436.355 17.449 436.316 cv
17.449 434.453 li
13.82 434.453 li
13.762 434.457 13.719 434.449 13.684 434.434 cv
13.648 434.422 13.613 434.395 13.586 434.355 cv
13.555 434.32 13.535 434.27 13.523 434.199 cv
13.512 434.133 13.508 434.043 13.508 433.93 cv
13.508 433.848 13.508 433.77 13.516 433.699 cv
13.516 433.629 13.527 433.566 13.543 433.512 cv
13.555 433.457 13.57 433.402 13.598 433.348 cv
13.617 433.293 13.645 433.238 13.68 433.176 cv
16.84 427.789 li
16.859 427.754 16.895 427.723 16.941 427.695 cv
16.984 427.668 17.039 427.645 17.113 427.625 cv
17.18 427.609 17.266 427.598 17.371 427.586 cv
17.473 427.582 17.594 427.578 17.734 427.574 cv
17.883 427.578 18.02 427.582 18.137 427.594 cv
18.25 427.605 18.34 427.621 18.414 427.637 cv
18.48 427.656 18.535 427.68 18.574 427.711 cv
18.609 427.742 18.629 427.777 18.629 427.816 cv
18.629 433.48 li
19.629 433.48 li
19.703 433.484 19.766 433.523 19.816 433.602 cv
19.863 433.684 19.887 433.805 19.891 433.965 cv
cp
17.449 428.613 mo
17.438 428.613 li
14.586 433.48 li
17.449 433.48 li
cp
.629236 .549432 .540154 .282963 cmyk
f
13.16 400.789 mo
20.254 400.789 li
20.254 417.879 li
13.16 417.879 li
cp
0 0 0 0 cmyk
ef
19.473 411.34 mo
19.473 411.816 19.391 412.238 19.23 412.609 cv
19.07 412.98 18.844 413.293 18.555 413.547 cv
18.258 413.801 17.91 413.996 17.508 414.125 cv
17.102 414.258 16.652 414.32 16.16 414.32 cv
15.883 414.32 15.621 414.301 15.379 414.262 cv
15.129 414.223 14.91 414.176 14.723 414.121 cv
14.527 414.066 14.371 414.012 14.246 413.953 cv
14.121 413.902 14.043 413.859 14.012 413.824 cv
13.977 413.793 13.953 413.762 13.941 413.734 cv
13.926 413.707 13.91 413.676 13.902 413.633 cv
13.887 413.598 13.879 413.547 13.879 413.484 cv
13.871 413.426 13.871 413.355 13.871 413.273 cv
13.871 413.199 13.875 413.129 13.883 413.066 cv
13.891 413.004 13.902 412.953 13.922 412.914 cv
13.938 412.875 13.957 412.848 13.984 412.828 cv
14.008 412.812 14.039 412.805 14.07 412.801 cv
14.117 412.805 14.188 412.832 14.281 412.887 cv
14.375 412.945 14.504 413.008 14.668 413.074 cv
14.832 413.141 15.031 413.203 15.273 413.262 cv
15.508 413.32 15.793 413.348 16.129 413.348 cv
16.43 413.348 16.711 413.312 16.969 413.238 cv
17.223 413.168 17.445 413.055 17.633 412.898 cv
17.816 412.746 17.961 412.551 18.066 412.312 cv
18.172 412.078 18.223 411.789 18.227 411.449 cv
18.223 411.168 18.18 410.918 18.09 410.699 cv
18 410.48 17.863 410.301 17.68 410.156 cv
17.492 410.016 17.258 409.91 16.977 409.836 cv
16.691 409.766 16.352 409.727 15.965 409.727 cv
15.68 409.727 15.441 409.742 15.242 409.77 cv
15.039 409.801 14.852 409.816 14.68 409.812 cv
14.551 409.816 14.457 409.785 14.406 409.723 cv
14.348 409.664 14.32 409.551 14.324 409.379 cv
14.324 405.766 li
14.32 405.617 14.355 405.508 14.43 405.43 cv
14.496 405.359 14.598 405.32 14.734 405.32 cv
18.664 405.32 li
18.699 405.32 18.734 405.332 18.77 405.352 cv
18.801 405.375 18.828 405.406 18.855 405.445 cv
18.875 405.488 18.891 405.539 18.906 405.602 cv
18.914 405.668 18.922 405.746 18.926 405.828 cv
18.922 405.996 18.898 406.121 18.859 406.211 cv
18.813 406.305 18.754 406.352 18.676 406.348 cv
15.504 406.348 li
15.504 408.836 li
15.656 408.816 15.813 408.805 15.977 408.797 cv
16.133 408.793 16.32 408.789 16.535 408.789 cv
17.02 408.789 17.445 408.852 17.813 408.973 cv
18.176 409.094 18.48 409.266 18.73 409.484 cv
18.973 409.711 19.16 409.977 19.285 410.289 cv
19.41 410.605 19.473 410.957 19.473 411.34 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.16 378.5 mo
20.254 378.5 li
20.254 395.59 li
13.16 395.59 li
cp
0 0 0 0 cmyk
ef
19.742 389.027 mo
19.742 389.418 19.68 389.797 19.563 390.156 cv
19.438 390.523 19.254 390.84 19.012 391.113 cv
18.762 391.391 18.449 391.613 18.074 391.777 cv
17.691 391.945 17.246 392.027 16.73 392.027 cv
16.359 392.027 16.031 391.984 15.75 391.891 cv
15.465 391.805 15.219 391.672 15.008 391.5 cv
14.797 391.332 14.621 391.125 14.484 390.879 cv
14.344 390.633 14.23 390.352 14.148 390.035 cv
14.063 389.723 14.004 389.379 13.969 389 cv
13.93 388.629 13.91 388.227 13.914 387.793 cv
13.91 387.414 13.93 387.031 13.973 386.641 cv
14.012 386.258 14.086 385.883 14.191 385.516 cv
14.297 385.156 14.441 384.816 14.621 384.5 cv
14.801 384.184 15.027 383.906 15.301 383.672 cv
15.574 383.437 15.898 383.25 16.277 383.109 cv
16.656 382.973 17.098 382.906 17.602 382.902 cv
17.77 382.906 17.941 382.914 18.113 382.934 cv
18.285 382.957 18.445 382.988 18.594 383.02 cv
18.742 383.059 18.863 383.094 18.965 383.133 cv
19.063 383.172 19.129 383.207 19.164 383.23 cv
19.191 383.258 19.215 383.285 19.234 383.312 cv
19.25 383.344 19.266 383.375 19.273 383.41 cv
19.281 383.445 19.285 383.484 19.293 383.527 cv
19.293 383.57 19.297 383.625 19.301 383.687 cv
19.297 383.773 19.297 383.844 19.297 383.898 cv
19.293 383.961 19.281 384.008 19.27 384.043 cv
19.25 384.082 19.23 384.109 19.207 384.125 cv
19.18 384.145 19.148 384.152 19.109 384.152 cv
19.059 384.152 18.988 384.137 18.902 384.105 cv
18.813 384.074 18.707 384.039 18.586 383.996 cv
18.461 383.961 18.313 383.926 18.137 383.891 cv
17.961 383.863 17.758 383.848 17.527 383.844 cv
17.098 383.848 16.73 383.934 16.426 384.105 cv
16.121 384.277 15.871 384.512 15.676 384.805 cv
15.48 385.098 15.336 385.437 15.246 385.82 cv
15.148 386.211 15.094 386.613 15.086 387.031 cv
15.203 386.965 15.34 386.898 15.488 386.828 cv
15.637 386.762 15.797 386.699 15.973 386.641 cv
16.148 386.59 16.336 386.543 16.531 386.508 cv
16.727 386.477 16.938 386.461 17.164 386.457 cv
17.641 386.461 18.043 386.527 18.375 386.652 cv
18.703 386.785 18.969 386.965 19.176 387.195 cv
19.375 387.426 19.52 387.695 19.609 388.008 cv
19.695 388.32 19.742 388.66 19.742 389.027 cv
cp
18.547 389.137 mo
18.547 388.875 18.52 388.633 18.469 388.414 cv
18.414 388.199 18.324 388.016 18.203 387.859 cv
18.078 387.711 17.914 387.594 17.711 387.512 cv
17.5 387.43 17.246 387.387 16.949 387.387 cv
16.777 387.387 16.609 387.402 16.441 387.434 cv
16.27 387.465 16.105 387.508 15.949 387.555 cv
15.789 387.609 15.641 387.672 15.5 387.742 cv
15.355 387.816 15.223 387.891 15.105 387.969 cv
15.102 388.562 15.141 389.059 15.219 389.453 cv
15.293 389.852 15.402 390.168 15.547 390.406 cv
15.691 390.648 15.871 390.82 16.086 390.922 cv
16.301 391.027 16.551 391.078 16.84 391.074 cv
17.129 391.078 17.383 391.023 17.598 390.91 cv
17.813 390.805 17.988 390.656 18.133 390.469 cv
18.273 390.285 18.379 390.078 18.445 389.848 cv
18.512 389.617 18.547 389.383 18.547 389.137 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.16 356.211 mo
20.254 356.211 li
20.254 373.301 li
13.16 373.301 li
cp
0 0 0 0 cmyk
ef
19.645 361.238 mo
19.641 361.324 19.637 361.398 19.633 361.461 cv
19.625 361.531 19.617 361.594 19.605 361.652 cv
19.594 361.719 19.578 361.777 19.559 361.832 cv
19.535 361.891 19.512 361.953 19.488 362.012 cv
16.293 369.375 li
16.266 369.434 16.238 369.477 16.207 369.508 cv
16.172 369.543 16.129 369.57 16.074 369.59 cv
16.02 369.609 15.949 369.621 15.871 369.633 cv
15.785 369.637 15.688 369.641 15.57 369.645 cv
15.414 369.641 15.293 369.633 15.207 369.621 cv
15.121 369.605 15.059 369.59 15.02 369.559 cv
14.98 369.531 14.961 369.492 14.969 369.449 cv
14.969 369.406 14.984 369.355 15.016 369.293 cv
18.375 361.766 li
14.117 361.766 li
14.031 361.77 13.965 361.723 13.922 361.629 cv
13.879 361.539 13.859 361.41 13.859 361.246 cv
13.859 361.16 13.863 361.086 13.875 361.02 cv
13.887 360.957 13.902 360.902 13.926 360.859 cv
13.945 360.816 13.973 360.785 14.008 360.762 cv
14.039 360.742 14.078 360.73 14.117 360.73 cv
19.289 360.73 li
19.348 360.73 19.402 360.738 19.453 360.754 cv
19.5 360.77 19.535 360.797 19.563 360.836 cv
19.586 360.875 19.605 360.93 19.621 360.992 cv
19.633 361.059 19.641 361.141 19.645 361.238 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.16 333.922 mo
20.254 333.922 li
20.254 351.012 li
13.16 351.012 li
cp
0 0 0 0 cmyk
ef
19.719 345.023 mo
19.719 345.41 19.648 345.754 19.512 346.051 cv
19.375 346.355 19.18 346.605 18.922 346.809 cv
18.664 347.016 18.344 347.172 17.965 347.273 cv
17.582 347.379 17.148 347.43 16.664 347.43 cv
16.203 347.43 15.793 347.383 15.434 347.289 cv
15.07 347.195 14.766 347.055 14.516 346.863 cv
14.266 346.68 14.074 346.449 13.941 346.172 cv
13.809 345.898 13.742 345.586 13.742 345.23 cv
13.742 344.957 13.785 344.699 13.879 344.465 cv
13.965 344.23 14.098 344.016 14.273 343.82 cv
14.441 343.625 14.652 343.441 14.906 343.266 cv
15.156 343.098 15.441 342.934 15.758 342.777 cv
15.484 342.637 15.242 342.488 15.031 342.328 cv
14.82 342.172 14.641 342 14.496 341.812 cv
14.348 341.629 14.238 341.434 14.164 341.223 cv
14.086 341.016 14.047 340.785 14.051 340.535 cv
14.047 340.227 14.102 339.934 14.219 339.66 cv
14.328 339.391 14.5 339.156 14.727 338.953 cv
14.953 338.754 15.238 338.594 15.59 338.477 cv
15.934 338.359 16.344 338.301 16.813 338.301 cv
17.258 338.301 17.645 338.355 17.973 338.461 cv
18.301 338.57 18.57 338.715 18.781 338.898 cv
18.992 339.086 19.148 339.305 19.254 339.555 cv
19.352 339.805 19.402 340.074 19.406 340.363 cv
19.402 340.598 19.363 340.824 19.293 341.035 cv
19.215 341.254 19.105 341.457 18.957 341.645 cv
18.809 341.84 18.629 342.02 18.418 342.184 cv
18.207 342.355 17.965 342.512 17.691 342.652 cv
18.012 342.816 18.297 342.98 18.555 343.148 cv
18.805 343.316 19.02 343.496 19.195 343.691 cv
19.363 343.887 19.492 344.094 19.586 344.309 cv
19.672 344.527 19.719 344.766 19.719 345.023 cv
cp
18.238 340.473 mo
18.234 340.285 18.203 340.109 18.137 339.953 cv
18.07 339.797 17.973 339.664 17.848 339.555 cv
17.719 339.445 17.559 339.363 17.371 339.305 cv
17.176 339.25 16.961 339.223 16.723 339.219 cv
16.227 339.223 15.852 339.332 15.602 339.555 cv
15.344 339.781 15.219 340.09 15.223 340.473 cv
15.219 340.652 15.25 340.816 15.313 340.969 cv
15.375 341.125 15.469 341.27 15.602 341.406 cv
15.727 341.543 15.891 341.676 16.094 341.805 cv
16.289 341.937 16.527 342.074 16.805 342.215 cv
17.266 341.98 17.621 341.719 17.867 341.426 cv
18.113 341.141 18.234 340.824 18.238 340.473 cv
cp
18.527 345.148 mo
18.523 344.941 18.484 344.75 18.41 344.578 cv
18.328 344.41 18.211 344.25 18.055 344.098 cv
17.898 343.949 17.699 343.805 17.465 343.664 cv
17.227 343.527 16.957 343.383 16.648 343.23 cv
16.359 343.375 16.105 343.516 15.891 343.656 cv
15.672 343.797 15.492 343.945 15.355 344.094 cv
15.215 344.25 15.109 344.406 15.039 344.57 cv
14.965 344.738 14.93 344.922 14.934 345.121 cv
14.93 345.566 15.082 345.91 15.391 346.148 cv
15.691 346.395 16.145 346.516 16.75 346.512 cv
17.332 346.516 17.777 346.395 18.078 346.145 cv
18.375 345.902 18.523 345.57 18.527 345.148 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
13.16 311.629 mo
20.254 311.629 li
20.254 328.719 li
13.16 328.719 li
cp
0 0 0 0 cmyk
ef
19.582 320.227 mo
19.578 320.613 19.555 321 19.512 321.391 cv
19.465 321.785 19.387 322.164 19.281 322.527 cv
19.168 322.891 19.023 323.23 18.84 323.547 cv
18.652 323.867 18.418 324.148 18.141 324.383 cv
17.855 324.625 17.52 324.809 17.137 324.941 cv
16.746 325.074 16.301 325.141 15.793 325.141 cv
15.594 325.141 15.402 325.125 15.219 325.102 cv
15.031 325.074 14.863 325.047 14.719 325.012 cv
14.566 324.977 14.441 324.937 14.344 324.895 cv
14.242 324.855 14.168 324.816 14.125 324.773 cv
14.078 324.734 14.047 324.68 14.027 324.605 cv
14.004 324.535 13.992 324.437 13.996 324.32 cv
13.992 324.219 13.996 324.141 14.004 324.082 cv
14.008 324.023 14.02 323.977 14.035 323.945 cv
14.051 323.914 14.07 323.895 14.094 323.879 cv
14.117 323.871 14.148 323.863 14.188 323.859 cv
14.234 323.863 14.305 323.879 14.398 323.91 cv
14.488 323.945 14.602 323.984 14.746 324.023 cv
14.883 324.066 15.047 324.105 15.234 324.137 cv
15.418 324.176 15.629 324.191 15.867 324.187 cv
16.309 324.191 16.688 324.105 17.008 323.934 cv
17.32 323.762 17.582 323.535 17.785 323.246 cv
17.988 322.961 18.137 322.625 18.238 322.242 cv
18.336 321.863 18.391 321.465 18.402 321.043 cv
18.156 321.187 17.867 321.312 17.531 321.418 cv
17.191 321.531 16.805 321.586 16.367 321.582 cv
15.875 321.586 15.461 321.52 15.125 321.383 cv
14.789 321.25 14.516 321.066 14.313 320.832 cv
14.105 320.602 13.961 320.324 13.875 320 cv
13.785 319.684 13.742 319.332 13.742 318.953 cv
13.742 318.562 13.797 318.191 13.914 317.832 cv
14.023 317.48 14.203 317.168 14.449 316.898 cv
14.688 316.629 14.996 316.414 15.375 316.254 cv
15.746 316.094 16.195 316.012 16.719 316.012 cv
17.086 316.012 17.41 316.059 17.699 316.152 cv
17.98 316.246 18.23 316.383 18.445 316.559 cv
18.652 316.734 18.832 316.945 18.98 317.195 cv
19.125 317.445 19.242 317.727 19.332 318.039 cv
19.418 318.355 19.48 318.699 19.523 319.066 cv
19.559 319.437 19.578 319.824 19.582 320.227 cv
cp
18.383 320.098 mo
18.383 319.516 18.344 319.023 18.266 318.621 cv
18.188 318.223 18.07 317.898 17.922 317.648 cv
17.77 317.402 17.586 317.223 17.367 317.113 cv
17.145 317.004 16.891 316.949 16.609 316.949 cv
16.305 316.949 16.051 317.004 15.844 317.113 cv
15.633 317.223 15.461 317.367 15.328 317.543 cv
15.191 317.727 15.09 317.93 15.027 318.156 cv
14.961 318.387 14.93 318.625 14.934 318.863 cv
14.93 319.137 14.961 319.383 15.02 319.602 cv
15.074 319.828 15.164 320.016 15.297 320.172 cv
15.422 320.328 15.59 320.449 15.797 320.535 cv
16 320.621 16.254 320.664 16.559 320.66 cv
16.898 320.664 17.23 320.613 17.555 320.508 cv
17.871 320.406 18.148 320.27 18.383 320.098 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
6.059 289.352 mo
20.25 289.352 li
20.25 306.442 li
6.059 306.442 li
cp
0 0 0 0 cmyk
ef
12.438 302.27 mo
12.434 302.359 12.426 302.434 12.414 302.492 cv
12.398 302.555 12.379 302.605 12.359 302.637 cv
12.336 302.676 12.313 302.699 12.281 302.715 cv
12.25 302.73 12.219 302.738 12.188 302.738 cv
7.547 302.738 li
7.516 302.738 7.484 302.73 7.457 302.715 cv
7.43 302.699 7.402 302.676 7.379 302.637 cv
7.348 302.605 7.328 302.555 7.32 302.492 cv
7.305 302.434 7.301 302.359 7.301 302.27 cv
7.301 302.191 7.305 302.121 7.32 302.059 cv
7.328 302 7.348 301.953 7.371 301.91 cv
7.391 301.875 7.414 301.844 7.445 301.82 cv
7.473 301.801 7.508 301.789 7.547 301.789 cv
9.402 301.789 li
9.402 295.035 li
7.684 296.055 li
7.594 296.105 7.523 296.133 7.473 296.141 cv
7.418 296.148 7.379 296.141 7.348 296.109 cv
7.316 296.082 7.293 296.031 7.281 295.961 cv
7.27 295.895 7.266 295.809 7.266 295.699 cv
7.266 295.625 7.266 295.559 7.273 295.5 cv
7.277 295.449 7.289 295.402 7.305 295.363 cv
7.316 295.328 7.336 295.297 7.363 295.27 cv
7.387 295.242 7.422 295.215 7.465 295.184 cv
9.512 293.871 li
9.527 293.863 9.551 293.852 9.578 293.84 cv
9.605 293.832 9.641 293.824 9.684 293.812 cv
9.723 293.805 9.77 293.797 9.828 293.793 cv
9.879 293.793 9.949 293.793 10.031 293.789 cv
10.141 293.793 10.23 293.797 10.309 293.805 cv
10.379 293.816 10.438 293.828 10.477 293.844 cv
10.516 293.859 10.543 293.883 10.559 293.906 cv
10.574 293.934 10.582 293.957 10.582 293.984 cv
10.582 301.789 li
12.188 301.789 li
12.223 301.789 12.254 301.801 12.289 301.82 cv
12.32 301.844 12.348 301.875 12.371 301.91 cv
12.387 301.953 12.402 302 12.418 302.059 cv
12.426 302.121 12.434 302.191 12.438 302.27 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.789 298.273 mo
19.785 298.957 19.73 299.582 19.625 300.145 cv
19.516 300.711 19.34 301.195 19.09 301.598 cv
18.84 302.004 18.512 302.316 18.113 302.535 cv
17.707 302.758 17.211 302.867 16.625 302.867 cv
16.063 302.867 15.594 302.77 15.211 302.57 cv
14.828 302.371 14.52 302.078 14.285 301.691 cv
14.051 301.305 13.883 300.828 13.789 300.262 cv
13.688 299.699 13.641 299.051 13.645 298.316 cv
13.641 297.641 13.695 297.02 13.809 296.453 cv
13.914 295.887 14.094 295.402 14.344 294.996 cv
14.59 294.594 14.914 294.277 15.316 294.055 cv
15.719 293.836 16.211 293.727 16.801 293.723 cv
17.359 293.727 17.832 293.828 18.219 294.023 cv
18.598 294.227 18.906 294.52 19.141 294.902 cv
19.371 295.293 19.539 295.766 19.641 296.328 cv
19.738 296.895 19.785 297.543 19.789 298.273 cv
cp
18.582 298.355 mo
18.578 297.914 18.563 297.52 18.531 297.164 cv
18.496 296.812 18.449 296.5 18.391 296.23 cv
18.324 295.961 18.242 295.727 18.148 295.531 cv
18.047 295.336 17.93 295.176 17.797 295.051 cv
17.656 294.926 17.5 294.836 17.324 294.777 cv
17.148 294.723 16.953 294.695 16.734 294.691 cv
16.344 294.695 16.027 294.785 15.785 294.965 cv
15.543 295.148 15.352 295.398 15.211 295.719 cv
15.07 296.039 14.973 296.418 14.926 296.848 cv
14.871 297.281 14.848 297.742 14.852 298.234 cv
14.848 298.902 14.883 299.469 14.953 299.93 cv
15.023 300.398 15.133 300.777 15.281 301.066 cv
15.43 301.363 15.617 301.574 15.852 301.703 cv
16.078 301.84 16.359 301.906 16.691 301.902 cv
16.945 301.906 17.172 301.863 17.367 301.777 cv
17.563 301.695 17.727 301.578 17.867 301.422 cv
18.004 301.27 18.121 301.086 18.215 300.871 cv
18.305 300.656 18.379 300.418 18.438 300.156 cv
18.488 299.898 18.527 299.617 18.551 299.309 cv
18.57 299.008 18.578 298.687 18.582 298.355 cv
cp
f
6.059 267.059 mo
20.25 267.059 li
20.25 284.149 li
6.059 284.149 li
cp
0 0 0 0 cmyk
ef
12.426 279.977 mo
12.422 280.066 12.414 280.137 12.402 280.195 cv
12.387 280.258 12.367 280.309 12.348 280.34 cv
12.324 280.379 12.301 280.402 12.27 280.418 cv
12.238 280.434 12.207 280.441 12.18 280.441 cv
7.543 280.441 li
7.508 280.441 7.48 280.434 7.453 280.418 cv
7.426 280.402 7.398 280.379 7.375 280.34 cv
7.348 280.309 7.328 280.258 7.316 280.195 cv
7.301 280.137 7.293 280.066 7.297 279.977 cv
7.293 279.898 7.301 279.824 7.316 279.762 cv
7.328 279.703 7.344 279.656 7.367 279.617 cv
7.383 279.582 7.41 279.551 7.441 279.527 cv
7.473 279.508 7.504 279.5 7.543 279.496 cv
9.395 279.496 li
9.395 272.75 li
7.68 273.77 li
7.59 273.82 7.52 273.848 7.473 273.855 cv
7.418 273.863 7.375 273.855 7.344 273.824 cv
7.309 273.797 7.289 273.746 7.277 273.676 cv
7.266 273.609 7.258 273.523 7.262 273.414 cv
7.258 273.34 7.262 273.273 7.273 273.215 cv
7.277 273.164 7.289 273.117 7.305 273.078 cv
7.316 273.043 7.336 273.012 7.359 272.984 cv
7.383 272.957 7.414 272.93 7.461 272.902 cv
9.504 271.59 li
9.52 271.578 9.539 271.566 9.57 271.559 cv
9.594 271.551 9.629 271.543 9.676 271.531 cv
9.715 271.523 9.766 271.516 9.82 271.512 cv
9.875 271.512 9.941 271.512 10.027 271.508 cv
10.133 271.512 10.227 271.516 10.301 271.523 cv
10.371 271.531 10.426 271.547 10.473 271.562 cv
10.512 271.582 10.539 271.602 10.555 271.625 cv
10.563 271.652 10.57 271.676 10.574 271.699 cv
10.574 279.496 li
12.18 279.496 li
12.215 279.5 12.25 279.508 12.281 279.527 cv
12.313 279.551 12.336 279.582 12.359 279.617 cv
12.375 279.656 12.391 279.703 12.406 279.762 cv
12.414 279.824 12.422 279.898 12.426 279.977 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.504 279.977 mo
19.5 280.066 19.492 280.137 19.48 280.195 cv
19.465 280.258 19.445 280.309 19.426 280.34 cv
19.402 280.379 19.379 280.402 19.348 280.418 cv
19.316 280.434 19.285 280.441 19.258 280.441 cv
14.621 280.441 li
14.586 280.441 14.559 280.434 14.531 280.418 cv
14.504 280.402 14.477 280.379 14.453 280.34 cv
14.426 280.309 14.406 280.258 14.395 280.195 cv
14.379 280.137 14.371 280.066 14.375 279.977 cv
14.371 279.898 14.379 279.824 14.395 279.762 cv
14.406 279.703 14.422 279.656 14.445 279.617 cv
14.461 279.582 14.488 279.551 14.52 279.527 cv
14.551 279.508 14.582 279.5 14.621 279.496 cv
16.473 279.496 li
16.473 272.75 li
14.758 273.77 li
14.668 273.82 14.598 273.848 14.551 273.855 cv
14.496 273.863 14.453 273.855 14.422 273.824 cv
14.387 273.797 14.367 273.746 14.355 273.676 cv
14.344 273.609 14.336 273.523 14.34 273.414 cv
14.336 273.34 14.34 273.273 14.352 273.215 cv
14.355 273.164 14.367 273.117 14.383 273.078 cv
14.395 273.043 14.414 273.012 14.438 272.984 cv
14.461 272.957 14.492 272.93 14.539 272.902 cv
16.582 271.59 li
16.598 271.578 16.617 271.566 16.648 271.559 cv
16.672 271.551 16.707 271.543 16.754 271.531 cv
16.793 271.523 16.844 271.516 16.898 271.512 cv
16.953 271.512 17.02 271.512 17.105 271.508 cv
17.211 271.512 17.305 271.516 17.379 271.523 cv
17.449 271.531 17.504 271.547 17.551 271.562 cv
17.59 271.582 17.617 271.602 17.633 271.625 cv
17.641 271.652 17.648 271.676 17.652 271.699 cv
17.652 279.496 li
19.258 279.496 li
19.293 279.5 19.328 279.508 19.359 279.527 cv
19.391 279.551 19.414 279.582 19.438 279.617 cv
19.453 279.656 19.469 279.703 19.484 279.762 cv
19.492 279.824 19.5 279.898 19.504 279.977 cv
cp
f
6.059 244.77 mo
20.25 244.77 li
20.25 261.86 li
6.059 261.86 li
cp
0 0 0 0 cmyk
ef
12.426 257.676 mo
12.422 257.766 12.414 257.836 12.402 257.895 cv
12.387 257.957 12.367 258.008 12.348 258.039 cv
12.324 258.078 12.301 258.102 12.27 258.117 cv
12.238 258.133 12.207 258.141 12.18 258.141 cv
7.543 258.141 li
7.508 258.141 7.48 258.133 7.453 258.117 cv
7.426 258.102 7.398 258.078 7.375 258.039 cv
7.348 258.008 7.328 257.957 7.316 257.895 cv
7.301 257.836 7.293 257.766 7.297 257.676 cv
7.293 257.598 7.301 257.523 7.316 257.461 cv
7.328 257.402 7.344 257.355 7.367 257.316 cv
7.383 257.281 7.41 257.25 7.441 257.227 cv
7.473 257.207 7.504 257.199 7.543 257.195 cv
9.395 257.195 li
9.395 250.449 li
7.68 251.469 li
7.59 251.52 7.52 251.547 7.473 251.555 cv
7.418 251.562 7.375 251.555 7.344 251.523 cv
7.309 251.496 7.289 251.445 7.277 251.375 cv
7.266 251.309 7.258 251.223 7.262 251.113 cv
7.258 251.039 7.262 250.973 7.273 250.914 cv
7.277 250.863 7.289 250.816 7.305 250.777 cv
7.316 250.742 7.336 250.711 7.359 250.684 cv
7.383 250.656 7.414 250.629 7.461 250.602 cv
9.504 249.289 li
9.52 249.277 9.539 249.266 9.57 249.258 cv
9.594 249.25 9.629 249.242 9.676 249.23 cv
9.715 249.223 9.766 249.215 9.82 249.211 cv
9.875 249.211 9.941 249.211 10.027 249.207 cv
10.133 249.211 10.227 249.215 10.301 249.223 cv
10.371 249.23 10.426 249.246 10.473 249.262 cv
10.512 249.281 10.539 249.301 10.555 249.324 cv
10.563 249.352 10.57 249.375 10.574 249.398 cv
10.574 257.195 li
12.18 257.195 li
12.215 257.199 12.25 257.207 12.281 257.227 cv
12.313 257.25 12.336 257.281 12.359 257.316 cv
12.375 257.355 12.391 257.402 12.406 257.461 cv
12.414 257.523 12.422 257.598 12.426 257.676 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.484 257.633 mo
19.48 257.719 19.477 257.793 19.465 257.855 cv
19.453 257.922 19.438 257.977 19.418 258.016 cv
19.395 258.062 19.367 258.094 19.336 258.109 cv
19.301 258.133 19.262 258.141 19.223 258.141 cv
14.32 258.141 li
14.258 258.141 14.199 258.133 14.152 258.117 cv
14.102 258.102 14.063 258.078 14.027 258.039 cv
13.992 258.008 13.965 257.953 13.953 257.883 cv
13.934 257.812 13.926 257.727 13.93 257.625 cv
13.926 257.535 13.93 257.457 13.938 257.387 cv
13.941 257.32 13.957 257.262 13.984 257.207 cv
14.008 257.156 14.039 257.102 14.074 257.047 cv
14.109 256.996 14.152 256.941 14.211 256.879 cv
15.984 255.055 li
16.395 254.637 16.723 254.262 16.973 253.926 cv
17.219 253.598 17.41 253.293 17.543 253.016 cv
17.676 252.742 17.762 252.492 17.809 252.266 cv
17.848 252.043 17.871 251.832 17.871 251.637 cv
17.871 251.441 17.836 251.258 17.77 251.078 cv
17.703 250.906 17.609 250.75 17.484 250.613 cv
17.359 250.484 17.203 250.379 17.016 250.297 cv
16.828 250.223 16.609 250.184 16.363 250.18 cv
16.074 250.184 15.816 250.223 15.59 250.297 cv
15.359 250.379 15.16 250.465 14.988 250.551 cv
14.816 250.645 14.672 250.727 14.555 250.805 cv
14.438 250.883 14.352 250.922 14.301 250.922 cv
14.266 250.922 14.234 250.914 14.211 250.895 cv
14.18 250.879 14.16 250.848 14.145 250.805 cv
14.129 250.766 14.113 250.711 14.105 250.641 cv
14.094 250.574 14.09 250.492 14.094 250.395 cv
14.09 250.328 14.094 250.27 14.102 250.219 cv
14.105 250.168 14.113 250.125 14.125 250.086 cv
14.133 250.051 14.148 250.016 14.168 249.984 cv
14.188 249.953 14.223 249.914 14.281 249.863 cv
14.332 249.816 14.426 249.75 14.563 249.668 cv
14.695 249.586 14.867 249.508 15.07 249.426 cv
15.273 249.348 15.496 249.277 15.742 249.223 cv
15.984 249.168 16.242 249.141 16.516 249.141 cv
16.941 249.141 17.316 249.203 17.641 249.324 cv
17.961 249.445 18.227 249.609 18.441 249.82 cv
18.652 250.031 18.813 250.277 18.918 250.551 cv
19.023 250.832 19.078 251.129 19.078 251.441 cv
19.078 251.73 19.051 252.012 19 252.289 cv
18.949 252.574 18.844 252.879 18.684 253.203 cv
18.52 253.531 18.285 253.895 17.98 254.293 cv
17.672 254.695 17.266 255.156 16.762 255.672 cv
15.355 257.141 li
19.215 257.141 li
19.246 257.145 19.281 257.156 19.32 257.172 cv
19.352 257.195 19.383 257.227 19.41 257.266 cv
19.434 257.309 19.453 257.359 19.465 257.418 cv
19.477 257.484 19.48 257.555 19.484 257.633 cv
cp
f
6.059 222.48 mo
20.25 222.48 li
20.25 239.57 li
6.059 239.57 li
cp
0 0 0 0 cmyk
ef
12.426 235.387 mo
12.422 235.477 12.414 235.547 12.402 235.605 cv
12.387 235.668 12.367 235.719 12.348 235.75 cv
12.324 235.789 12.301 235.812 12.27 235.828 cv
12.238 235.844 12.207 235.852 12.18 235.852 cv
7.543 235.852 li
7.508 235.852 7.48 235.844 7.453 235.828 cv
7.426 235.812 7.398 235.789 7.375 235.75 cv
7.348 235.719 7.328 235.668 7.316 235.605 cv
7.301 235.547 7.293 235.477 7.297 235.387 cv
7.293 235.309 7.301 235.234 7.316 235.172 cv
7.328 235.113 7.344 235.066 7.367 235.027 cv
7.383 234.992 7.41 234.961 7.441 234.937 cv
7.473 234.918 7.504 234.91 7.543 234.906 cv
9.395 234.906 li
9.395 228.16 li
7.68 229.18 li
7.59 229.23 7.52 229.258 7.473 229.266 cv
7.418 229.273 7.375 229.266 7.344 229.234 cv
7.309 229.207 7.289 229.156 7.277 229.086 cv
7.266 229.02 7.258 228.934 7.262 228.824 cv
7.258 228.75 7.262 228.684 7.273 228.625 cv
7.277 228.574 7.289 228.527 7.305 228.488 cv
7.316 228.453 7.336 228.422 7.359 228.395 cv
7.383 228.367 7.414 228.34 7.461 228.312 cv
9.504 227 li
9.52 226.988 9.539 226.977 9.57 226.969 cv
9.594 226.961 9.629 226.953 9.676 226.941 cv
9.715 226.934 9.766 226.926 9.82 226.922 cv
9.875 226.922 9.941 226.922 10.027 226.918 cv
10.133 226.922 10.227 226.926 10.301 226.934 cv
10.371 226.941 10.426 226.957 10.473 226.973 cv
10.512 226.992 10.539 227.012 10.555 227.035 cv
10.563 227.062 10.57 227.086 10.574 227.109 cv
10.574 234.906 li
12.18 234.906 li
12.215 234.91 12.25 234.918 12.281 234.937 cv
12.313 234.961 12.336 234.992 12.359 235.027 cv
12.375 235.066 12.391 235.113 12.406 235.172 cv
12.414 235.234 12.422 235.309 12.426 235.387 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.414 233.316 mo
19.41 233.727 19.34 234.094 19.199 234.418 cv
19.055 234.746 18.852 235.027 18.59 235.258 cv
18.324 235.492 17.996 235.668 17.609 235.793 cv
17.219 235.918 16.781 235.98 16.297 235.98 cv
15.992 235.98 15.715 235.953 15.461 235.906 cv
15.199 235.859 14.969 235.809 14.773 235.738 cv
14.57 235.676 14.406 235.605 14.273 235.535 cv
14.141 235.465 14.055 235.414 14.023 235.379 cv
13.984 235.352 13.961 235.32 13.945 235.285 cv
13.926 235.254 13.906 235.215 13.895 235.168 cv
13.879 235.125 13.871 235.07 13.863 235 cv
13.855 234.937 13.852 234.855 13.855 234.754 cv
13.852 234.594 13.867 234.48 13.902 234.414 cv
13.934 234.352 13.98 234.316 14.043 234.316 cv
14.086 234.316 14.168 234.355 14.293 234.426 cv
14.414 234.504 14.574 234.582 14.77 234.664 cv
14.961 234.75 15.188 234.828 15.453 234.898 cv
15.711 234.973 16.004 235.008 16.324 235.008 cv
16.633 235.008 16.902 234.969 17.141 234.891 cv
17.371 234.812 17.57 234.703 17.73 234.562 cv
17.887 234.422 18.004 234.254 18.086 234.059 cv
18.164 233.863 18.203 233.652 18.207 233.426 cv
18.203 233.176 18.152 232.949 18.055 232.746 cv
17.949 232.547 17.801 232.375 17.609 232.227 cv
17.41 232.082 17.172 231.969 16.887 231.891 cv
16.602 231.812 16.277 231.773 15.914 231.773 cv
15.043 231.773 li
15 231.773 14.965 231.766 14.93 231.75 cv
14.895 231.734 14.863 231.707 14.84 231.668 cv
14.813 231.633 14.793 231.586 14.777 231.527 cv
14.762 231.469 14.754 231.391 14.754 231.293 cv
14.754 231.207 14.758 231.137 14.773 231.078 cv
14.781 231.023 14.801 230.977 14.832 230.941 cv
14.855 230.906 14.887 230.883 14.918 230.863 cv
14.949 230.852 14.984 230.844 15.027 230.84 cv
15.801 230.84 li
16.102 230.844 16.371 230.805 16.613 230.723 cv
16.848 230.648 17.051 230.535 17.223 230.387 cv
17.387 230.242 17.516 230.066 17.605 229.863 cv
17.695 229.66 17.742 229.434 17.742 229.18 cv
17.742 229 17.711 228.824 17.652 228.656 cv
17.59 228.492 17.5 228.348 17.383 228.223 cv
17.262 228.098 17.109 228 16.93 227.93 cv
16.742 227.859 16.531 227.824 16.289 227.824 cv
16.023 227.824 15.777 227.867 15.559 227.945 cv
15.332 228.027 15.137 228.113 14.965 228.203 cv
14.789 228.297 14.645 228.383 14.531 228.461 cv
14.418 228.543 14.336 228.582 14.293 228.578 cv
14.258 228.582 14.23 228.574 14.207 228.562 cv
14.18 228.551 14.16 228.527 14.145 228.492 cv
14.129 228.461 14.117 228.414 14.109 228.348 cv
14.102 228.289 14.098 228.207 14.102 228.105 cv
14.098 228.039 14.098 227.98 14.105 227.926 cv
14.105 227.875 14.117 227.828 14.133 227.785 cv
14.148 227.75 14.164 227.715 14.184 227.68 cv
14.199 227.652 14.23 227.613 14.273 227.566 cv
14.316 227.523 14.402 227.461 14.539 227.379 cv
14.668 227.297 14.832 227.219 15.027 227.137 cv
15.219 227.059 15.441 226.988 15.699 226.934 cv
15.949 226.879 16.223 226.852 16.52 226.852 cv
16.926 226.852 17.289 226.906 17.602 227.008 cv
17.914 227.117 18.172 227.266 18.383 227.453 cv
18.586 227.648 18.742 227.879 18.848 228.145 cv
18.949 228.414 19 228.707 19.004 229.031 cv
19 229.312 18.965 229.574 18.895 229.809 cv
18.82 230.051 18.711 230.262 18.57 230.445 cv
18.426 230.633 18.254 230.789 18.051 230.918 cv
17.844 231.051 17.605 231.145 17.336 231.191 cv
17.336 231.203 li
17.641 231.238 17.922 231.312 18.176 231.434 cv
18.43 231.555 18.648 231.707 18.832 231.891 cv
19.012 232.074 19.152 232.289 19.258 232.531 cv
19.359 232.777 19.41 233.039 19.414 233.316 cv
cp
f
6.059 200.191 mo
20.25 200.191 li
20.25 217.281 li
6.059 217.281 li
cp
0 0 0 0 cmyk
ef
12.426 213.086 mo
12.422 213.176 12.414 213.246 12.402 213.305 cv
12.387 213.367 12.367 213.418 12.348 213.449 cv
12.324 213.488 12.301 213.512 12.27 213.527 cv
12.238 213.543 12.207 213.551 12.18 213.551 cv
7.543 213.551 li
7.508 213.551 7.48 213.543 7.453 213.527 cv
7.426 213.512 7.398 213.488 7.375 213.449 cv
7.348 213.418 7.328 213.367 7.316 213.305 cv
7.301 213.246 7.293 213.176 7.297 213.086 cv
7.293 213.008 7.301 212.934 7.316 212.871 cv
7.328 212.812 7.344 212.766 7.367 212.727 cv
7.383 212.691 7.41 212.66 7.441 212.637 cv
7.473 212.617 7.504 212.609 7.543 212.605 cv
9.395 212.605 li
9.395 205.859 li
7.68 206.879 li
7.59 206.93 7.52 206.957 7.473 206.965 cv
7.418 206.973 7.375 206.965 7.344 206.934 cv
7.309 206.906 7.289 206.855 7.277 206.785 cv
7.266 206.719 7.258 206.633 7.262 206.523 cv
7.258 206.449 7.262 206.383 7.273 206.324 cv
7.277 206.273 7.289 206.227 7.305 206.187 cv
7.316 206.152 7.336 206.121 7.359 206.094 cv
7.383 206.066 7.414 206.039 7.461 206.012 cv
9.504 204.699 li
9.52 204.687 9.539 204.676 9.57 204.668 cv
9.594 204.66 9.629 204.652 9.676 204.641 cv
9.715 204.633 9.766 204.625 9.82 204.621 cv
9.875 204.621 9.941 204.621 10.027 204.617 cv
10.133 204.621 10.227 204.625 10.301 204.633 cv
10.371 204.641 10.426 204.656 10.473 204.672 cv
10.512 204.691 10.539 204.711 10.555 204.734 cv
10.563 204.762 10.57 204.785 10.574 204.809 cv
10.574 212.605 li
12.18 212.605 li
12.215 212.609 12.25 212.617 12.281 212.637 cv
12.313 212.66 12.336 212.691 12.359 212.727 cv
12.375 212.766 12.391 212.812 12.406 212.871 cv
12.414 212.934 12.422 213.008 12.426 213.086 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.859 211.027 mo
19.855 211.18 19.832 211.301 19.789 211.387 cv
19.742 211.477 19.68 211.52 19.598 211.516 cv
18.598 211.516 li
18.598 213.379 li
18.598 213.418 18.586 213.449 18.57 213.473 cv
18.547 213.5 18.516 213.52 18.473 213.539 cv
18.422 213.555 18.359 213.566 18.289 213.578 cv
18.211 213.586 18.117 213.59 18 213.594 cv
17.883 213.59 17.785 213.586 17.715 213.578 cv
17.637 213.566 17.578 213.555 17.535 213.539 cv
17.488 213.52 17.457 213.5 17.441 213.473 cv
17.422 213.449 17.414 213.418 17.418 213.379 cv
17.418 211.516 li
13.789 211.516 li
13.73 211.52 13.688 211.512 13.652 211.496 cv
13.617 211.484 13.582 211.457 13.555 211.418 cv
13.523 211.383 13.504 211.332 13.492 211.262 cv
13.48 211.195 13.477 211.105 13.477 210.992 cv
13.477 210.91 13.477 210.832 13.484 210.762 cv
13.484 210.691 13.496 210.629 13.512 210.574 cv
13.523 210.52 13.539 210.465 13.566 210.41 cv
13.586 210.355 13.613 210.301 13.648 210.238 cv
16.809 204.852 li
16.828 204.816 16.863 204.785 16.91 204.758 cv
16.953 204.73 17.008 204.707 17.082 204.687 cv
17.148 204.672 17.234 204.66 17.34 204.648 cv
17.441 204.645 17.563 204.641 17.703 204.637 cv
17.852 204.641 17.988 204.645 18.105 204.656 cv
18.219 204.668 18.309 204.684 18.383 204.699 cv
18.449 204.719 18.504 204.742 18.543 204.773 cv
18.578 204.805 18.598 204.84 18.598 204.879 cv
18.598 210.543 li
19.598 210.543 li
19.672 210.547 19.734 210.586 19.785 210.664 cv
19.832 210.746 19.855 210.867 19.859 211.027 cv
cp
17.418 205.676 mo
17.406 205.676 li
14.555 210.543 li
17.418 210.543 li
cp
f
6.059 177.898 mo
20.25 177.898 li
20.25 194.988 li
6.059 194.988 li
cp
0 0 0 0 cmyk
ef
12.426 190.797 mo
12.422 190.887 12.414 190.957 12.402 191.016 cv
12.387 191.078 12.367 191.129 12.348 191.16 cv
12.324 191.199 12.301 191.223 12.27 191.238 cv
12.238 191.254 12.207 191.262 12.18 191.262 cv
7.543 191.262 li
7.508 191.262 7.48 191.254 7.453 191.238 cv
7.426 191.223 7.398 191.199 7.375 191.16 cv
7.348 191.129 7.328 191.078 7.316 191.016 cv
7.301 190.957 7.293 190.887 7.297 190.797 cv
7.293 190.719 7.301 190.645 7.316 190.582 cv
7.328 190.523 7.344 190.477 7.367 190.437 cv
7.383 190.402 7.41 190.371 7.441 190.348 cv
7.473 190.328 7.504 190.32 7.543 190.316 cv
9.395 190.316 li
9.395 183.57 li
7.68 184.59 li
7.59 184.641 7.52 184.668 7.473 184.676 cv
7.418 184.684 7.375 184.676 7.344 184.645 cv
7.309 184.617 7.289 184.566 7.277 184.496 cv
7.266 184.43 7.258 184.344 7.262 184.234 cv
7.258 184.16 7.262 184.094 7.273 184.035 cv
7.277 183.984 7.289 183.937 7.305 183.898 cv
7.316 183.863 7.336 183.832 7.359 183.805 cv
7.383 183.777 7.414 183.75 7.461 183.723 cv
9.504 182.41 li
9.52 182.398 9.539 182.387 9.57 182.379 cv
9.594 182.371 9.629 182.363 9.676 182.352 cv
9.715 182.344 9.766 182.336 9.82 182.332 cv
9.875 182.332 9.941 182.332 10.027 182.328 cv
10.133 182.332 10.227 182.336 10.301 182.344 cv
10.371 182.352 10.426 182.367 10.473 182.383 cv
10.512 182.402 10.539 182.422 10.555 182.445 cv
10.563 182.473 10.57 182.496 10.574 182.52 cv
10.574 190.316 li
12.18 190.316 li
12.215 190.32 12.25 190.328 12.281 190.348 cv
12.313 190.371 12.336 190.402 12.359 190.437 cv
12.375 190.477 12.391 190.523 12.406 190.582 cv
12.414 190.645 12.422 190.719 12.426 190.797 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.441 188.41 mo
19.441 188.887 19.359 189.309 19.199 189.68 cv
19.039 190.051 18.813 190.363 18.523 190.617 cv
18.227 190.871 17.879 191.066 17.477 191.195 cv
17.07 191.328 16.621 191.391 16.129 191.391 cv
15.852 191.391 15.59 191.371 15.348 191.332 cv
15.098 191.293 14.879 191.246 14.691 191.191 cv
14.496 191.137 14.34 191.082 14.215 191.023 cv
14.09 190.973 14.012 190.93 13.98 190.895 cv
13.945 190.863 13.922 190.832 13.91 190.805 cv
13.895 190.777 13.879 190.746 13.871 190.703 cv
13.855 190.668 13.848 190.617 13.848 190.555 cv
13.84 190.496 13.84 190.426 13.84 190.344 cv
13.84 190.27 13.844 190.199 13.852 190.137 cv
13.859 190.074 13.871 190.023 13.891 189.984 cv
13.906 189.945 13.926 189.918 13.953 189.898 cv
13.977 189.883 14.008 189.875 14.039 189.871 cv
14.086 189.875 14.156 189.902 14.25 189.957 cv
14.344 190.016 14.473 190.078 14.637 190.145 cv
14.801 190.211 15 190.273 15.242 190.332 cv
15.477 190.391 15.762 190.418 16.098 190.418 cv
16.398 190.418 16.68 190.383 16.938 190.309 cv
17.191 190.238 17.414 190.125 17.602 189.969 cv
17.785 189.816 17.93 189.621 18.035 189.383 cv
18.141 189.148 18.191 188.859 18.195 188.52 cv
18.191 188.238 18.148 187.988 18.059 187.77 cv
17.969 187.551 17.832 187.371 17.648 187.227 cv
17.461 187.086 17.227 186.98 16.945 186.906 cv
16.66 186.836 16.32 186.797 15.934 186.797 cv
15.648 186.797 15.41 186.812 15.211 186.84 cv
15.008 186.871 14.82 186.887 14.648 186.883 cv
14.52 186.887 14.426 186.855 14.375 186.793 cv
14.316 186.734 14.289 186.621 14.293 186.449 cv
14.293 182.836 li
14.289 182.687 14.324 182.578 14.398 182.5 cv
14.465 182.43 14.566 182.391 14.703 182.391 cv
18.633 182.391 li
18.668 182.391 18.703 182.402 18.738 182.422 cv
18.77 182.445 18.797 182.477 18.824 182.516 cv
18.844 182.559 18.859 182.609 18.875 182.672 cv
18.883 182.738 18.891 182.816 18.895 182.898 cv
18.891 183.066 18.867 183.191 18.828 183.281 cv
18.781 183.375 18.723 183.422 18.645 183.418 cv
15.473 183.418 li
15.473 185.906 li
15.625 185.887 15.781 185.875 15.945 185.867 cv
16.102 185.863 16.289 185.859 16.504 185.859 cv
16.988 185.859 17.414 185.922 17.781 186.043 cv
18.145 186.164 18.449 186.336 18.699 186.555 cv
18.941 186.781 19.129 187.047 19.254 187.359 cv
19.379 187.676 19.441 188.027 19.441 188.41 cv
cp
f
6.059 155.609 mo
20.25 155.609 li
20.25 172.699 li
6.059 172.699 li
cp
0 0 0 0 cmyk
ef
12.426 168.496 mo
12.422 168.586 12.414 168.656 12.402 168.715 cv
12.387 168.777 12.367 168.828 12.348 168.859 cv
12.324 168.898 12.301 168.922 12.27 168.937 cv
12.238 168.953 12.207 168.961 12.18 168.961 cv
7.543 168.961 li
7.508 168.961 7.48 168.953 7.453 168.937 cv
7.426 168.922 7.398 168.898 7.375 168.859 cv
7.348 168.828 7.328 168.777 7.316 168.715 cv
7.301 168.656 7.293 168.586 7.297 168.496 cv
7.293 168.418 7.301 168.344 7.316 168.281 cv
7.328 168.223 7.344 168.176 7.367 168.137 cv
7.383 168.102 7.41 168.07 7.441 168.047 cv
7.473 168.027 7.504 168.02 7.543 168.016 cv
9.395 168.016 li
9.395 161.27 li
7.68 162.289 li
7.59 162.34 7.52 162.367 7.473 162.375 cv
7.418 162.383 7.375 162.375 7.344 162.344 cv
7.309 162.316 7.289 162.266 7.277 162.195 cv
7.266 162.129 7.258 162.043 7.262 161.934 cv
7.258 161.859 7.262 161.793 7.273 161.734 cv
7.277 161.684 7.289 161.637 7.305 161.598 cv
7.316 161.562 7.336 161.531 7.359 161.504 cv
7.383 161.477 7.414 161.449 7.461 161.422 cv
9.504 160.109 li
9.52 160.098 9.539 160.086 9.57 160.078 cv
9.594 160.07 9.629 160.062 9.676 160.051 cv
9.715 160.043 9.766 160.035 9.82 160.031 cv
9.875 160.031 9.941 160.031 10.027 160.027 cv
10.133 160.031 10.227 160.035 10.301 160.043 cv
10.371 160.051 10.426 160.066 10.473 160.082 cv
10.512 160.102 10.539 160.121 10.555 160.145 cv
10.563 160.172 10.57 160.195 10.574 160.219 cv
10.574 168.016 li
12.18 168.016 li
12.215 168.02 12.25 168.027 12.281 168.047 cv
12.313 168.07 12.336 168.102 12.359 168.137 cv
12.375 168.176 12.391 168.223 12.406 168.281 cv
12.414 168.344 12.422 168.418 12.426 168.496 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.711 166.09 mo
19.711 166.48 19.648 166.859 19.531 167.219 cv
19.406 167.586 19.223 167.902 18.98 168.176 cv
18.73 168.453 18.418 168.676 18.043 168.84 cv
17.66 169.008 17.215 169.09 16.699 169.09 cv
16.328 169.09 16 169.047 15.719 168.953 cv
15.434 168.867 15.188 168.734 14.977 168.562 cv
14.766 168.395 14.59 168.187 14.453 167.941 cv
14.313 167.695 14.199 167.414 14.117 167.098 cv
14.031 166.785 13.973 166.441 13.938 166.062 cv
13.898 165.691 13.879 165.289 13.883 164.855 cv
13.879 164.477 13.898 164.094 13.941 163.703 cv
13.98 163.32 14.055 162.945 14.16 162.578 cv
14.266 162.219 14.41 161.879 14.59 161.562 cv
14.77 161.246 14.996 160.969 15.27 160.734 cv
15.543 160.5 15.867 160.312 16.246 160.172 cv
16.625 160.035 17.066 159.969 17.57 159.965 cv
17.738 159.969 17.91 159.977 18.082 159.996 cv
18.254 160.02 18.414 160.051 18.563 160.082 cv
18.711 160.121 18.832 160.156 18.934 160.195 cv
19.031 160.234 19.098 160.27 19.133 160.293 cv
19.16 160.32 19.184 160.348 19.203 160.375 cv
19.219 160.406 19.234 160.437 19.242 160.473 cv
19.25 160.508 19.254 160.547 19.262 160.59 cv
19.262 160.633 19.266 160.687 19.27 160.75 cv
19.266 160.836 19.266 160.906 19.266 160.961 cv
19.262 161.023 19.25 161.07 19.238 161.105 cv
19.219 161.145 19.199 161.172 19.176 161.187 cv
19.148 161.207 19.117 161.215 19.078 161.215 cv
19.027 161.215 18.957 161.199 18.871 161.168 cv
18.781 161.137 18.676 161.102 18.555 161.059 cv
18.43 161.023 18.281 160.988 18.105 160.953 cv
17.93 160.926 17.727 160.91 17.496 160.906 cv
17.066 160.91 16.699 160.996 16.395 161.168 cv
16.09 161.34 15.84 161.574 15.645 161.867 cv
15.449 162.16 15.305 162.5 15.215 162.883 cv
15.117 163.273 15.063 163.676 15.055 164.094 cv
15.172 164.027 15.309 163.961 15.457 163.891 cv
15.605 163.824 15.766 163.762 15.941 163.703 cv
16.117 163.652 16.305 163.605 16.5 163.57 cv
16.695 163.539 16.906 163.523 17.133 163.52 cv
17.609 163.523 18.012 163.59 18.344 163.715 cv
18.672 163.848 18.938 164.027 19.145 164.258 cv
19.344 164.488 19.488 164.758 19.578 165.07 cv
19.664 165.383 19.711 165.723 19.711 166.09 cv
cp
18.516 166.199 mo
18.516 165.937 18.488 165.695 18.438 165.477 cv
18.383 165.262 18.293 165.078 18.172 164.922 cv
18.047 164.773 17.883 164.656 17.68 164.574 cv
17.469 164.492 17.215 164.449 16.918 164.449 cv
16.746 164.449 16.578 164.465 16.41 164.496 cv
16.238 164.527 16.074 164.57 15.918 164.617 cv
15.758 164.672 15.609 164.734 15.469 164.805 cv
15.324 164.879 15.191 164.953 15.074 165.031 cv
15.07 165.625 15.109 166.121 15.188 166.516 cv
15.262 166.914 15.371 167.23 15.516 167.469 cv
15.66 167.711 15.84 167.883 16.055 167.984 cv
16.27 168.09 16.52 168.141 16.809 168.137 cv
17.098 168.141 17.352 168.086 17.566 167.973 cv
17.781 167.867 17.957 167.719 18.102 167.531 cv
18.242 167.348 18.348 167.141 18.414 166.91 cv
18.48 166.68 18.516 166.445 18.516 166.199 cv
cp
f
6.059 133.32 mo
20.25 133.32 li
20.25 150.41 li
6.059 150.41 li
cp
0 0 0 0 cmyk
ef
12.426 146.195 mo
12.422 146.285 12.414 146.355 12.402 146.414 cv
12.387 146.477 12.367 146.527 12.348 146.559 cv
12.324 146.598 12.301 146.621 12.27 146.637 cv
12.238 146.652 12.207 146.66 12.18 146.66 cv
7.543 146.66 li
7.508 146.66 7.48 146.652 7.453 146.637 cv
7.426 146.621 7.398 146.598 7.375 146.559 cv
7.348 146.527 7.328 146.477 7.316 146.414 cv
7.301 146.355 7.293 146.285 7.297 146.195 cv
7.293 146.117 7.301 146.043 7.316 145.98 cv
7.328 145.922 7.344 145.875 7.367 145.836 cv
7.383 145.801 7.41 145.77 7.441 145.746 cv
7.473 145.727 7.504 145.719 7.543 145.715 cv
9.395 145.715 li
9.395 138.969 li
7.68 139.988 li
7.59 140.039 7.52 140.066 7.473 140.074 cv
7.418 140.082 7.375 140.074 7.344 140.043 cv
7.309 140.016 7.289 139.965 7.277 139.895 cv
7.266 139.828 7.258 139.742 7.262 139.633 cv
7.258 139.559 7.262 139.492 7.273 139.434 cv
7.277 139.383 7.289 139.336 7.305 139.297 cv
7.316 139.262 7.336 139.23 7.359 139.203 cv
7.383 139.176 7.414 139.148 7.461 139.121 cv
9.504 137.809 li
9.52 137.797 9.539 137.785 9.57 137.777 cv
9.594 137.77 9.629 137.762 9.676 137.75 cv
9.715 137.742 9.766 137.734 9.82 137.73 cv
9.875 137.73 9.941 137.73 10.027 137.727 cv
10.133 137.73 10.227 137.734 10.301 137.742 cv
10.371 137.75 10.426 137.766 10.473 137.781 cv
10.512 137.801 10.539 137.82 10.555 137.844 cv
10.563 137.871 10.57 137.895 10.574 137.918 cv
10.574 145.715 li
12.18 145.715 li
12.215 145.719 12.25 145.727 12.281 145.746 cv
12.313 145.77 12.336 145.801 12.359 145.836 cv
12.375 145.875 12.391 145.922 12.406 145.98 cv
12.414 146.043 12.422 146.117 12.426 146.195 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.613 138.297 mo
19.609 138.383 19.605 138.457 19.602 138.52 cv
19.594 138.59 19.586 138.652 19.574 138.711 cv
19.563 138.777 19.547 138.836 19.527 138.891 cv
19.504 138.949 19.48 139.012 19.457 139.07 cv
16.262 146.434 li
16.234 146.492 16.207 146.535 16.176 146.566 cv
16.141 146.602 16.098 146.629 16.043 146.648 cv
15.988 146.668 15.918 146.68 15.84 146.691 cv
15.754 146.695 15.656 146.699 15.539 146.703 cv
15.383 146.699 15.262 146.691 15.176 146.68 cv
15.09 146.664 15.027 146.648 14.988 146.617 cv
14.949 146.59 14.93 146.551 14.938 146.508 cv
14.938 146.465 14.953 146.414 14.984 146.352 cv
18.344 138.824 li
14.086 138.824 li
14 138.828 13.934 138.781 13.891 138.687 cv
13.848 138.598 13.828 138.469 13.828 138.305 cv
13.828 138.219 13.832 138.145 13.844 138.078 cv
13.855 138.016 13.871 137.961 13.895 137.918 cv
13.914 137.875 13.941 137.844 13.977 137.82 cv
14.008 137.801 14.047 137.789 14.086 137.789 cv
19.258 137.789 li
19.316 137.789 19.371 137.797 19.422 137.812 cv
19.469 137.828 19.504 137.855 19.531 137.895 cv
19.555 137.934 19.574 137.988 19.59 138.051 cv
19.602 138.117 19.609 138.199 19.613 138.297 cv
cp
f
6.059 111.039 mo
20.25 111.039 li
20.25 128.129 li
6.059 128.129 li
cp
0 0 0 0 cmyk
ef
12.426 123.926 mo
12.422 124.016 12.414 124.086 12.402 124.145 cv
12.387 124.207 12.367 124.258 12.348 124.289 cv
12.324 124.328 12.301 124.352 12.27 124.367 cv
12.238 124.383 12.207 124.391 12.18 124.391 cv
7.543 124.391 li
7.508 124.391 7.48 124.383 7.453 124.367 cv
7.426 124.352 7.398 124.328 7.375 124.289 cv
7.348 124.258 7.328 124.207 7.316 124.145 cv
7.301 124.086 7.293 124.016 7.297 123.926 cv
7.293 123.848 7.301 123.773 7.316 123.711 cv
7.328 123.652 7.344 123.605 7.367 123.566 cv
7.383 123.531 7.41 123.5 7.441 123.477 cv
7.473 123.457 7.504 123.449 7.543 123.445 cv
9.395 123.445 li
9.395 116.699 li
7.68 117.719 li
7.59 117.77 7.52 117.797 7.473 117.805 cv
7.418 117.812 7.375 117.805 7.344 117.773 cv
7.309 117.746 7.289 117.695 7.277 117.625 cv
7.266 117.559 7.258 117.473 7.262 117.363 cv
7.258 117.289 7.262 117.223 7.273 117.164 cv
7.277 117.113 7.289 117.066 7.305 117.027 cv
7.316 116.992 7.336 116.961 7.359 116.934 cv
7.383 116.906 7.414 116.879 7.461 116.852 cv
9.504 115.539 li
9.52 115.527 9.539 115.516 9.57 115.508 cv
9.594 115.5 9.629 115.492 9.676 115.48 cv
9.715 115.473 9.766 115.465 9.82 115.461 cv
9.875 115.461 9.941 115.461 10.027 115.457 cv
10.133 115.461 10.227 115.465 10.301 115.473 cv
10.371 115.48 10.426 115.496 10.473 115.512 cv
10.512 115.531 10.539 115.551 10.555 115.574 cv
10.563 115.602 10.57 115.625 10.574 115.648 cv
10.574 123.445 li
12.18 123.445 li
12.215 123.449 12.25 123.457 12.281 123.477 cv
12.313 123.5 12.336 123.531 12.359 123.566 cv
12.375 123.605 12.391 123.652 12.406 123.711 cv
12.414 123.773 12.422 123.848 12.426 123.926 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.688 122.113 mo
19.688 122.5 19.617 122.844 19.48 123.141 cv
19.344 123.445 19.148 123.695 18.891 123.898 cv
18.633 124.105 18.313 124.262 17.934 124.363 cv
17.551 124.469 17.117 124.52 16.633 124.52 cv
16.172 124.52 15.762 124.473 15.402 124.379 cv
15.039 124.285 14.734 124.145 14.484 123.953 cv
14.234 123.77 14.043 123.539 13.91 123.262 cv
13.777 122.988 13.711 122.676 13.711 122.32 cv
13.711 122.047 13.754 121.789 13.848 121.555 cv
13.934 121.32 14.066 121.105 14.242 120.91 cv
14.41 120.715 14.621 120.531 14.875 120.355 cv
15.125 120.187 15.41 120.023 15.727 119.867 cv
15.453 119.727 15.211 119.578 15 119.418 cv
14.789 119.262 14.609 119.09 14.465 118.902 cv
14.316 118.719 14.207 118.523 14.133 118.312 cv
14.055 118.105 14.016 117.875 14.02 117.625 cv
14.016 117.316 14.07 117.023 14.188 116.75 cv
14.297 116.48 14.469 116.246 14.695 116.043 cv
14.922 115.844 15.207 115.684 15.559 115.566 cv
15.902 115.449 16.313 115.391 16.781 115.391 cv
17.227 115.391 17.613 115.445 17.941 115.551 cv
18.27 115.66 18.539 115.805 18.75 115.988 cv
18.961 116.176 19.117 116.395 19.223 116.645 cv
19.32 116.895 19.371 117.164 19.375 117.453 cv
19.371 117.687 19.332 117.914 19.262 118.125 cv
19.184 118.344 19.074 118.547 18.926 118.734 cv
18.777 118.93 18.598 119.109 18.387 119.273 cv
18.176 119.445 17.934 119.602 17.66 119.742 cv
17.98 119.906 18.266 120.07 18.523 120.238 cv
18.773 120.406 18.988 120.586 19.164 120.781 cv
19.332 120.977 19.461 121.184 19.555 121.398 cv
19.641 121.617 19.688 121.855 19.688 122.113 cv
cp
18.207 117.562 mo
18.203 117.375 18.172 117.199 18.105 117.043 cv
18.039 116.887 17.941 116.754 17.816 116.645 cv
17.688 116.535 17.527 116.453 17.34 116.395 cv
17.145 116.34 16.93 116.312 16.691 116.309 cv
16.195 116.312 15.82 116.422 15.57 116.645 cv
15.313 116.871 15.188 117.18 15.191 117.562 cv
15.188 117.742 15.219 117.906 15.281 118.059 cv
15.344 118.215 15.438 118.359 15.57 118.496 cv
15.695 118.633 15.859 118.766 16.063 118.895 cv
16.258 119.027 16.496 119.164 16.773 119.305 cv
17.234 119.07 17.59 118.809 17.836 118.516 cv
18.082 118.23 18.203 117.914 18.207 117.562 cv
cp
18.496 122.238 mo
18.492 122.031 18.453 121.84 18.379 121.668 cv
18.297 121.5 18.18 121.34 18.023 121.187 cv
17.867 121.039 17.668 120.895 17.434 120.754 cv
17.195 120.617 16.926 120.473 16.617 120.32 cv
16.328 120.465 16.074 120.605 15.859 120.746 cv
15.641 120.887 15.461 121.035 15.324 121.184 cv
15.184 121.34 15.078 121.496 15.008 121.66 cv
14.934 121.828 14.898 122.012 14.902 122.211 cv
14.898 122.656 15.051 123 15.359 123.238 cv
15.66 123.484 16.113 123.605 16.719 123.602 cv
17.301 123.605 17.746 123.484 18.047 123.234 cv
18.344 122.992 18.492 122.66 18.496 122.238 cv
cp
f
6.059 88.75 mo
20.25 88.75 li
20.25 105.84 li
6.059 105.84 li
cp
0 0 0 0 cmyk
ef
12.426 101.637 mo
12.422 101.727 12.414 101.797 12.402 101.855 cv
12.387 101.918 12.367 101.969 12.348 102 cv
12.324 102.039 12.301 102.062 12.27 102.078 cv
12.238 102.094 12.207 102.102 12.18 102.102 cv
7.543 102.102 li
7.508 102.102 7.48 102.094 7.453 102.078 cv
7.426 102.062 7.398 102.039 7.375 102 cv
7.348 101.969 7.328 101.918 7.316 101.855 cv
7.301 101.797 7.293 101.727 7.297 101.637 cv
7.293 101.559 7.301 101.484 7.316 101.422 cv
7.328 101.363 7.344 101.316 7.367 101.277 cv
7.383 101.242 7.41 101.211 7.441 101.187 cv
7.473 101.168 7.504 101.16 7.543 101.156 cv
9.395 101.156 li
9.395 94.41 li
7.68 95.43 li
7.59 95.48 7.52 95.508 7.473 95.516 cv
7.418 95.523 7.375 95.516 7.344 95.484 cv
7.309 95.457 7.289 95.406 7.277 95.336 cv
7.266 95.27 7.258 95.184 7.262 95.074 cv
7.258 95 7.262 94.934 7.273 94.875 cv
7.277 94.824 7.289 94.777 7.305 94.738 cv
7.316 94.703 7.336 94.672 7.359 94.645 cv
7.383 94.617 7.414 94.59 7.461 94.562 cv
9.504 93.25 li
9.52 93.238 9.539 93.227 9.57 93.219 cv
9.594 93.211 9.629 93.203 9.676 93.191 cv
9.715 93.184 9.766 93.176 9.82 93.172 cv
9.875 93.172 9.941 93.172 10.027 93.168 cv
10.133 93.172 10.227 93.176 10.301 93.184 cv
10.371 93.191 10.426 93.207 10.473 93.223 cv
10.512 93.242 10.539 93.262 10.555 93.285 cv
10.563 93.312 10.57 93.336 10.574 93.359 cv
10.574 101.156 li
12.18 101.156 li
12.215 101.16 12.25 101.168 12.281 101.187 cv
12.313 101.211 12.336 101.242 12.359 101.277 cv
12.375 101.316 12.391 101.363 12.406 101.422 cv
12.414 101.484 12.422 101.559 12.426 101.637 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.551 97.316 mo
19.547 97.703 19.523 98.09 19.48 98.48 cv
19.434 98.875 19.355 99.254 19.25 99.617 cv
19.137 99.98 18.992 100.32 18.809 100.637 cv
18.621 100.957 18.387 101.238 18.109 101.473 cv
17.824 101.715 17.488 101.898 17.105 102.031 cv
16.715 102.164 16.27 102.23 15.762 102.23 cv
15.563 102.23 15.371 102.215 15.188 102.191 cv
15 102.164 14.832 102.137 14.688 102.102 cv
14.535 102.066 14.41 102.027 14.313 101.984 cv
14.211 101.945 14.137 101.906 14.094 101.863 cv
14.047 101.824 14.016 101.77 13.996 101.695 cv
13.973 101.625 13.961 101.527 13.965 101.41 cv
13.961 101.309 13.965 101.23 13.973 101.172 cv
13.977 101.113 13.988 101.066 14.004 101.035 cv
14.02 101.004 14.039 100.984 14.063 100.969 cv
14.086 100.961 14.117 100.953 14.156 100.949 cv
14.203 100.953 14.273 100.969 14.367 101 cv
14.457 101.035 14.57 101.074 14.715 101.113 cv
14.852 101.156 15.016 101.195 15.203 101.227 cv
15.387 101.266 15.598 101.281 15.836 101.277 cv
16.277 101.281 16.656 101.195 16.977 101.023 cv
17.289 100.852 17.551 100.625 17.754 100.336 cv
17.957 100.051 18.105 99.715 18.207 99.332 cv
18.305 98.953 18.359 98.555 18.371 98.133 cv
18.125 98.277 17.836 98.402 17.5 98.508 cv
17.16 98.621 16.773 98.676 16.336 98.672 cv
15.844 98.676 15.43 98.609 15.094 98.473 cv
14.758 98.34 14.484 98.156 14.281 97.922 cv
14.074 97.691 13.93 97.414 13.844 97.09 cv
13.754 96.773 13.711 96.422 13.711 96.043 cv
13.711 95.652 13.766 95.281 13.883 94.922 cv
13.992 94.57 14.172 94.258 14.418 93.988 cv
14.656 93.719 14.965 93.504 15.344 93.344 cv
15.715 93.184 16.164 93.102 16.688 93.102 cv
17.055 93.102 17.379 93.148 17.668 93.242 cv
17.949 93.336 18.199 93.473 18.414 93.648 cv
18.621 93.824 18.801 94.035 18.949 94.285 cv
19.094 94.535 19.211 94.816 19.301 95.129 cv
19.387 95.445 19.449 95.789 19.492 96.156 cv
19.527 96.527 19.547 96.914 19.551 97.316 cv
cp
18.352 97.187 mo
18.352 96.605 18.313 96.113 18.234 95.711 cv
18.156 95.312 18.039 94.988 17.891 94.738 cv
17.738 94.492 17.555 94.312 17.336 94.203 cv
17.113 94.094 16.859 94.039 16.578 94.039 cv
16.273 94.039 16.02 94.094 15.813 94.203 cv
15.602 94.312 15.43 94.457 15.297 94.633 cv
15.16 94.816 15.059 95.02 14.996 95.246 cv
14.93 95.477 14.898 95.715 14.902 95.953 cv
14.898 96.227 14.93 96.473 14.988 96.691 cv
15.043 96.918 15.133 97.105 15.266 97.262 cv
15.391 97.418 15.559 97.539 15.766 97.625 cv
15.969 97.711 16.223 97.754 16.527 97.75 cv
16.867 97.754 17.199 97.703 17.523 97.598 cv
17.84 97.496 18.117 97.359 18.352 97.187 cv
cp
f
6.059 66.461 mo
20.25 66.461 li
20.25 83.551 li
6.059 83.551 li
cp
0 0 0 0 cmyk
ef
12.406 79.293 mo
12.402 79.379 12.398 79.453 12.387 79.516 cv
12.375 79.582 12.359 79.637 12.34 79.676 cv
12.316 79.723 12.289 79.754 12.258 79.77 cv
12.223 79.793 12.184 79.801 12.145 79.801 cv
7.242 79.801 li
7.18 79.801 7.121 79.793 7.074 79.777 cv
7.023 79.762 6.984 79.738 6.949 79.699 cv
6.914 79.668 6.887 79.613 6.875 79.543 cv
6.855 79.473 6.848 79.387 6.852 79.285 cv
6.848 79.195 6.852 79.117 6.859 79.047 cv
6.863 78.98 6.879 78.922 6.906 78.867 cv
6.93 78.816 6.961 78.762 6.996 78.707 cv
7.031 78.656 7.074 78.602 7.133 78.539 cv
8.906 76.715 li
9.316 76.297 9.645 75.922 9.895 75.586 cv
10.141 75.258 10.332 74.953 10.465 74.676 cv
10.598 74.402 10.684 74.152 10.73 73.926 cv
10.77 73.703 10.793 73.492 10.793 73.297 cv
10.793 73.102 10.758 72.918 10.691 72.738 cv
10.625 72.566 10.531 72.41 10.406 72.273 cv
10.281 72.145 10.125 72.039 9.938 71.957 cv
9.75 71.883 9.531 71.844 9.285 71.84 cv
8.996 71.844 8.738 71.883 8.512 71.957 cv
8.281 72.039 8.082 72.125 7.91 72.211 cv
7.738 72.305 7.594 72.387 7.477 72.465 cv
7.359 72.543 7.273 72.582 7.223 72.582 cv
7.188 72.582 7.156 72.574 7.133 72.555 cv
7.102 72.539 7.082 72.508 7.066 72.465 cv
7.051 72.426 7.035 72.371 7.027 72.301 cv
7.016 72.234 7.012 72.152 7.016 72.055 cv
7.012 71.988 7.016 71.93 7.023 71.879 cv
7.027 71.828 7.035 71.785 7.047 71.746 cv
7.055 71.711 7.07 71.676 7.09 71.645 cv
7.109 71.613 7.145 71.574 7.203 71.523 cv
7.254 71.477 7.348 71.41 7.484 71.328 cv
7.617 71.246 7.789 71.168 7.992 71.086 cv
8.195 71.008 8.418 70.937 8.664 70.883 cv
8.906 70.828 9.164 70.801 9.438 70.801 cv
9.863 70.801 10.238 70.863 10.563 70.984 cv
10.883 71.105 11.148 71.27 11.363 71.48 cv
11.574 71.691 11.734 71.937 11.84 72.211 cv
11.945 72.492 12 72.789 12 73.102 cv
12 73.391 11.973 73.672 11.922 73.949 cv
11.871 74.234 11.766 74.539 11.605 74.863 cv
11.441 75.191 11.207 75.555 10.902 75.953 cv
10.594 76.355 10.188 76.816 9.684 77.332 cv
8.277 78.801 li
12.137 78.801 li
12.168 78.805 12.203 78.816 12.242 78.832 cv
12.273 78.855 12.305 78.887 12.332 78.926 cv
12.355 78.969 12.375 79.02 12.387 79.078 cv
12.398 79.145 12.402 79.215 12.406 79.293 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.777 75.344 mo
19.773 76.027 19.723 76.648 19.617 77.211 cv
19.508 77.773 19.328 78.258 19.082 78.66 cv
18.828 79.066 18.5 79.379 18.102 79.598 cv
17.695 79.82 17.203 79.93 16.617 79.93 cv
16.059 79.93 15.586 79.832 15.207 79.633 cv
14.824 79.437 14.52 79.145 14.285 78.758 cv
14.051 78.371 13.883 77.898 13.789 77.332 cv
13.688 76.77 13.641 76.121 13.641 75.387 cv
13.641 74.715 13.695 74.094 13.805 73.527 cv
13.914 72.965 14.09 72.48 14.34 72.074 cv
14.582 71.672 14.906 71.359 15.313 71.133 cv
15.711 70.914 16.207 70.801 16.797 70.801 cv
17.355 70.801 17.828 70.902 18.211 71.098 cv
18.594 71.301 18.898 71.594 19.133 71.977 cv
19.363 72.367 19.531 72.84 19.629 73.402 cv
19.727 73.965 19.773 74.613 19.777 75.344 cv
cp
18.57 75.426 mo
18.566 74.984 18.551 74.586 18.523 74.234 cv
18.488 73.883 18.441 73.574 18.383 73.305 cv
18.316 73.035 18.238 72.805 18.141 72.609 cv
18.043 72.418 17.926 72.258 17.789 72.129 cv
17.648 72.004 17.488 71.91 17.316 71.852 cv
17.137 71.797 16.941 71.77 16.727 71.766 cv
16.336 71.77 16.02 71.859 15.781 72.043 cv
15.535 72.227 15.344 72.48 15.207 72.797 cv
15.066 73.117 14.973 73.488 14.922 73.918 cv
14.871 74.348 14.848 74.812 14.848 75.305 cv
14.848 75.969 14.879 76.531 14.949 76.992 cv
15.016 77.461 15.125 77.84 15.277 78.129 cv
15.422 78.426 15.613 78.637 15.844 78.766 cv
16.074 78.902 16.355 78.969 16.688 78.965 cv
16.941 78.969 17.164 78.93 17.359 78.844 cv
17.551 78.766 17.719 78.645 17.859 78.488 cv
18 78.336 18.113 78.152 18.207 77.937 cv
18.293 77.723 18.367 77.484 18.426 77.223 cv
18.477 76.965 18.516 76.684 18.539 76.379 cv
18.559 76.074 18.566 75.758 18.57 75.426 cv
cp
f
6.059 44.172 mo
20.25 44.172 li
20.25 61.262 li
6.059 61.262 li
cp
0 0 0 0 cmyk
ef
12.406 56.992 mo
12.402 57.078 12.398 57.152 12.387 57.215 cv
12.375 57.281 12.359 57.336 12.34 57.375 cv
12.316 57.422 12.289 57.453 12.258 57.469 cv
12.223 57.492 12.184 57.5 12.145 57.5 cv
7.242 57.5 li
7.18 57.5 7.121 57.492 7.074 57.477 cv
7.023 57.461 6.984 57.437 6.949 57.398 cv
6.914 57.367 6.887 57.312 6.875 57.242 cv
6.855 57.172 6.848 57.086 6.852 56.984 cv
6.848 56.895 6.852 56.816 6.859 56.746 cv
6.863 56.68 6.879 56.621 6.906 56.566 cv
6.93 56.516 6.961 56.461 6.996 56.406 cv
7.031 56.355 7.074 56.301 7.133 56.238 cv
8.906 54.414 li
9.316 53.996 9.645 53.621 9.895 53.285 cv
10.141 52.957 10.332 52.652 10.465 52.375 cv
10.598 52.102 10.684 51.852 10.73 51.625 cv
10.77 51.402 10.793 51.191 10.793 50.996 cv
10.793 50.801 10.758 50.617 10.691 50.437 cv
10.625 50.266 10.531 50.109 10.406 49.973 cv
10.281 49.844 10.125 49.738 9.938 49.656 cv
9.75 49.582 9.531 49.543 9.285 49.539 cv
8.996 49.543 8.738 49.582 8.512 49.656 cv
8.281 49.738 8.082 49.824 7.91 49.91 cv
7.738 50.004 7.594 50.086 7.477 50.164 cv
7.359 50.242 7.273 50.281 7.223 50.281 cv
7.188 50.281 7.156 50.273 7.133 50.254 cv
7.102 50.238 7.082 50.207 7.066 50.164 cv
7.051 50.125 7.035 50.07 7.027 50 cv
7.016 49.934 7.012 49.852 7.016 49.754 cv
7.012 49.687 7.016 49.629 7.023 49.578 cv
7.027 49.527 7.035 49.484 7.047 49.445 cv
7.055 49.41 7.07 49.375 7.09 49.344 cv
7.109 49.312 7.145 49.273 7.203 49.223 cv
7.254 49.176 7.348 49.109 7.484 49.027 cv
7.617 48.945 7.789 48.867 7.992 48.785 cv
8.195 48.707 8.418 48.637 8.664 48.582 cv
8.906 48.527 9.164 48.5 9.438 48.5 cv
9.863 48.5 10.238 48.562 10.563 48.684 cv
10.883 48.805 11.148 48.969 11.363 49.18 cv
11.574 49.391 11.734 49.637 11.84 49.91 cv
11.945 50.191 12 50.488 12 50.801 cv
12 51.09 11.973 51.371 11.922 51.648 cv
11.871 51.934 11.766 52.238 11.605 52.562 cv
11.441 52.891 11.207 53.254 10.902 53.652 cv
10.594 54.055 10.188 54.516 9.684 55.031 cv
8.277 56.5 li
12.137 56.5 li
12.168 56.504 12.203 56.516 12.242 56.531 cv
12.273 56.555 12.305 56.586 12.332 56.625 cv
12.355 56.668 12.375 56.719 12.387 56.777 cv
12.398 56.844 12.402 56.914 12.406 56.992 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.504 57.035 mo
19.5 57.125 19.492 57.195 19.48 57.254 cv
19.465 57.316 19.445 57.367 19.426 57.398 cv
19.402 57.437 19.379 57.461 19.348 57.477 cv
19.316 57.492 19.285 57.5 19.258 57.5 cv
14.621 57.5 li
14.586 57.5 14.559 57.492 14.531 57.477 cv
14.504 57.461 14.477 57.437 14.453 57.398 cv
14.426 57.367 14.406 57.316 14.395 57.254 cv
14.379 57.195 14.371 57.125 14.375 57.035 cv
14.371 56.957 14.379 56.883 14.395 56.82 cv
14.406 56.762 14.422 56.715 14.445 56.676 cv
14.461 56.641 14.488 56.609 14.52 56.586 cv
14.551 56.566 14.582 56.559 14.621 56.555 cv
16.473 56.555 li
16.473 49.809 li
14.758 50.828 li
14.668 50.879 14.598 50.906 14.551 50.914 cv
14.496 50.922 14.453 50.914 14.422 50.883 cv
14.387 50.855 14.367 50.805 14.355 50.734 cv
14.344 50.668 14.336 50.582 14.34 50.473 cv
14.336 50.398 14.34 50.332 14.352 50.273 cv
14.355 50.223 14.367 50.176 14.383 50.137 cv
14.395 50.102 14.414 50.07 14.438 50.043 cv
14.461 50.016 14.492 49.988 14.539 49.961 cv
16.582 48.648 li
16.598 48.637 16.617 48.625 16.648 48.617 cv
16.672 48.609 16.707 48.602 16.754 48.59 cv
16.793 48.582 16.844 48.574 16.898 48.57 cv
16.953 48.57 17.02 48.57 17.105 48.566 cv
17.211 48.57 17.305 48.574 17.379 48.582 cv
17.449 48.59 17.504 48.605 17.551 48.621 cv
17.59 48.641 17.617 48.66 17.633 48.684 cv
17.641 48.711 17.648 48.734 17.652 48.758 cv
17.652 56.555 li
19.258 56.555 li
19.293 56.559 19.328 56.566 19.359 56.586 cv
19.391 56.609 19.414 56.641 19.438 56.676 cv
19.453 56.715 19.469 56.762 19.484 56.82 cv
19.492 56.883 19.5 56.957 19.504 57.035 cv
cp
f
6.059 21.879 mo
20.25 21.879 li
20.25 38.969 li
6.059 38.969 li
cp
0 0 0 0 cmyk
ef
12.406 34.703 mo
12.402 34.789 12.398 34.863 12.387 34.926 cv
12.375 34.992 12.359 35.047 12.34 35.086 cv
12.316 35.133 12.289 35.164 12.258 35.18 cv
12.223 35.203 12.184 35.211 12.145 35.211 cv
7.242 35.211 li
7.18 35.211 7.121 35.203 7.074 35.187 cv
7.023 35.172 6.984 35.148 6.949 35.109 cv
6.914 35.078 6.887 35.023 6.875 34.953 cv
6.855 34.883 6.848 34.797 6.852 34.695 cv
6.848 34.605 6.852 34.527 6.859 34.457 cv
6.863 34.391 6.879 34.332 6.906 34.277 cv
6.93 34.227 6.961 34.172 6.996 34.117 cv
7.031 34.066 7.074 34.012 7.133 33.949 cv
8.906 32.125 li
9.316 31.707 9.645 31.332 9.895 30.996 cv
10.141 30.668 10.332 30.363 10.465 30.086 cv
10.598 29.812 10.684 29.562 10.73 29.336 cv
10.77 29.113 10.793 28.902 10.793 28.707 cv
10.793 28.512 10.758 28.328 10.691 28.148 cv
10.625 27.977 10.531 27.82 10.406 27.684 cv
10.281 27.555 10.125 27.449 9.938 27.367 cv
9.75 27.293 9.531 27.254 9.285 27.25 cv
8.996 27.254 8.738 27.293 8.512 27.367 cv
8.281 27.449 8.082 27.535 7.91 27.621 cv
7.738 27.715 7.594 27.797 7.477 27.875 cv
7.359 27.953 7.273 27.992 7.223 27.992 cv
7.188 27.992 7.156 27.984 7.133 27.965 cv
7.102 27.949 7.082 27.918 7.066 27.875 cv
7.051 27.836 7.035 27.781 7.027 27.711 cv
7.016 27.645 7.012 27.562 7.016 27.465 cv
7.012 27.398 7.016 27.34 7.023 27.289 cv
7.027 27.238 7.035 27.195 7.047 27.156 cv
7.055 27.121 7.07 27.086 7.09 27.055 cv
7.109 27.023 7.145 26.984 7.203 26.934 cv
7.254 26.887 7.348 26.82 7.484 26.738 cv
7.617 26.656 7.789 26.578 7.992 26.496 cv
8.195 26.418 8.418 26.348 8.664 26.293 cv
8.906 26.238 9.164 26.211 9.438 26.211 cv
9.863 26.211 10.238 26.273 10.563 26.395 cv
10.883 26.516 11.148 26.68 11.363 26.891 cv
11.574 27.102 11.734 27.348 11.84 27.621 cv
11.945 27.902 12 28.199 12 28.512 cv
12 28.801 11.973 29.082 11.922 29.359 cv
11.871 29.645 11.766 29.949 11.605 30.273 cv
11.441 30.602 11.207 30.965 10.902 31.363 cv
10.594 31.766 10.188 32.227 9.684 32.742 cv
8.277 34.211 li
12.137 34.211 li
12.168 34.215 12.203 34.227 12.242 34.242 cv
12.273 34.266 12.305 34.297 12.332 34.336 cv
12.355 34.379 12.375 34.43 12.387 34.488 cv
12.398 34.555 12.402 34.625 12.406 34.703 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.484 34.703 mo
19.48 34.789 19.477 34.863 19.465 34.926 cv
19.453 34.992 19.438 35.047 19.418 35.086 cv
19.395 35.133 19.367 35.164 19.336 35.18 cv
19.301 35.203 19.262 35.211 19.223 35.211 cv
14.32 35.211 li
14.258 35.211 14.199 35.203 14.152 35.187 cv
14.102 35.172 14.063 35.148 14.027 35.109 cv
13.992 35.078 13.965 35.023 13.953 34.953 cv
13.934 34.883 13.926 34.797 13.93 34.695 cv
13.926 34.605 13.93 34.527 13.938 34.457 cv
13.941 34.391 13.957 34.332 13.984 34.277 cv
14.008 34.227 14.039 34.172 14.074 34.117 cv
14.109 34.066 14.152 34.012 14.211 33.949 cv
15.984 32.125 li
16.395 31.707 16.723 31.332 16.973 30.996 cv
17.219 30.668 17.41 30.363 17.543 30.086 cv
17.676 29.812 17.762 29.562 17.809 29.336 cv
17.848 29.113 17.871 28.902 17.871 28.707 cv
17.871 28.512 17.836 28.328 17.77 28.148 cv
17.703 27.977 17.609 27.82 17.484 27.684 cv
17.359 27.555 17.203 27.449 17.016 27.367 cv
16.828 27.293 16.609 27.254 16.363 27.25 cv
16.074 27.254 15.816 27.293 15.59 27.367 cv
15.359 27.449 15.16 27.535 14.988 27.621 cv
14.816 27.715 14.672 27.797 14.555 27.875 cv
14.438 27.953 14.352 27.992 14.301 27.992 cv
14.266 27.992 14.234 27.984 14.211 27.965 cv
14.18 27.949 14.16 27.918 14.145 27.875 cv
14.129 27.836 14.113 27.781 14.105 27.711 cv
14.094 27.645 14.09 27.562 14.094 27.465 cv
14.09 27.398 14.094 27.34 14.102 27.289 cv
14.105 27.238 14.113 27.195 14.125 27.156 cv
14.133 27.121 14.148 27.086 14.168 27.055 cv
14.188 27.023 14.223 26.984 14.281 26.934 cv
14.332 26.887 14.426 26.82 14.563 26.738 cv
14.695 26.656 14.867 26.578 15.07 26.496 cv
15.273 26.418 15.496 26.348 15.742 26.293 cv
15.984 26.238 16.242 26.211 16.516 26.211 cv
16.941 26.211 17.316 26.273 17.641 26.395 cv
17.961 26.516 18.227 26.68 18.441 26.891 cv
18.652 27.102 18.813 27.348 18.918 27.621 cv
19.023 27.902 19.078 28.199 19.078 28.512 cv
19.078 28.801 19.051 29.082 19 29.359 cv
18.949 29.645 18.844 29.949 18.684 30.273 cv
18.52 30.602 18.285 30.965 17.98 31.363 cv
17.672 31.766 17.266 32.227 16.762 32.742 cv
15.355 34.211 li
19.215 34.211 li
19.246 34.215 19.281 34.227 19.32 34.242 cv
19.352 34.266 19.383 34.297 19.41 34.336 cv
19.434 34.379 19.453 34.43 19.465 34.488 cv
19.477 34.555 19.48 34.625 19.484 34.703 cv
cp
f
36.066 521.102 mo
36.063 521.191 36.055 521.262 36.043 521.32 cv
36.027 521.383 36.008 521.434 35.988 521.465 cv
35.965 521.504 35.941 521.527 35.91 521.543 cv
35.879 521.559 35.848 521.566 35.82 521.566 cv
31.184 521.566 li
31.148 521.566 31.121 521.559 31.094 521.543 cv
31.066 521.527 31.039 521.504 31.016 521.465 cv
30.988 521.434 30.969 521.383 30.957 521.32 cv
30.941 521.262 30.934 521.191 30.938 521.102 cv
30.934 521.023 30.941 520.949 30.957 520.887 cv
30.969 520.828 30.984 520.781 31.008 520.742 cv
31.023 520.707 31.051 520.676 31.082 520.652 cv
31.113 520.633 31.145 520.625 31.184 520.621 cv
33.035 520.621 li
33.035 513.875 li
31.32 514.895 li
31.23 514.945 31.16 514.973 31.113 514.98 cv
31.059 514.988 31.016 514.98 30.984 514.949 cv
30.949 514.922 30.93 514.871 30.918 514.801 cv
30.906 514.734 30.898 514.648 30.902 514.539 cv
30.898 514.465 30.902 514.398 30.914 514.34 cv
30.918 514.289 30.93 514.242 30.945 514.203 cv
30.957 514.168 30.977 514.137 31 514.109 cv
31.023 514.082 31.055 514.055 31.102 514.027 cv
33.145 512.715 li
33.16 512.703 33.18 512.691 33.211 512.684 cv
33.234 512.676 33.27 512.668 33.316 512.656 cv
33.355 512.648 33.406 512.641 33.461 512.637 cv
33.516 512.637 33.582 512.637 33.668 512.633 cv
33.773 512.637 33.867 512.641 33.941 512.648 cv
34.012 512.656 34.066 512.672 34.113 512.687 cv
34.152 512.707 34.18 512.727 34.195 512.75 cv
34.203 512.777 34.211 512.801 34.215 512.824 cv
34.215 520.621 li
35.82 520.621 li
35.855 520.625 35.891 520.633 35.922 520.652 cv
35.953 520.676 35.977 520.707 36 520.742 cv
36.016 520.781 36.031 520.828 36.047 520.887 cv
36.055 520.949 36.063 521.023 36.066 521.102 cv
cp
f
112.414 521.059 mo
112.41 521.145 112.406 521.219 112.395 521.281 cv
112.383 521.348 112.367 521.402 112.348 521.441 cv
112.324 521.488 112.297 521.52 112.266 521.535 cv
112.23 521.559 112.191 521.566 112.152 521.566 cv
107.25 521.566 li
107.188 521.566 107.129 521.559 107.082 521.543 cv
107.031 521.527 106.992 521.504 106.957 521.465 cv
106.922 521.434 106.895 521.379 106.883 521.309 cv
106.863 521.238 106.855 521.152 106.859 521.051 cv
106.855 520.961 106.859 520.883 106.867 520.812 cv
106.871 520.746 106.887 520.687 106.914 520.633 cv
106.938 520.582 106.969 520.527 107.004 520.473 cv
107.039 520.422 107.082 520.367 107.141 520.305 cv
108.914 518.48 li
109.324 518.062 109.652 517.687 109.902 517.352 cv
110.148 517.023 110.34 516.719 110.473 516.441 cv
110.605 516.168 110.691 515.918 110.738 515.691 cv
110.777 515.469 110.801 515.258 110.801 515.062 cv
110.801 514.867 110.766 514.684 110.699 514.504 cv
110.633 514.332 110.539 514.176 110.414 514.039 cv
110.289 513.91 110.133 513.805 109.945 513.723 cv
109.758 513.648 109.539 513.609 109.293 513.605 cv
109.004 513.609 108.746 513.648 108.52 513.723 cv
108.289 513.805 108.09 513.891 107.918 513.977 cv
107.746 514.07 107.602 514.152 107.484 514.23 cv
107.367 514.309 107.281 514.348 107.23 514.348 cv
107.195 514.348 107.164 514.34 107.141 514.32 cv
107.109 514.305 107.09 514.273 107.074 514.23 cv
107.059 514.191 107.043 514.137 107.035 514.066 cv
107.023 514 107.02 513.918 107.023 513.82 cv
107.02 513.754 107.023 513.695 107.031 513.645 cv
107.035 513.594 107.043 513.551 107.055 513.512 cv
107.063 513.477 107.078 513.441 107.098 513.41 cv
107.117 513.379 107.152 513.34 107.211 513.289 cv
107.262 513.242 107.355 513.176 107.492 513.094 cv
107.625 513.012 107.797 512.934 108 512.852 cv
108.203 512.773 108.426 512.703 108.672 512.648 cv
108.914 512.594 109.172 512.566 109.445 512.566 cv
109.871 512.566 110.246 512.629 110.57 512.75 cv
110.891 512.871 111.156 513.035 111.371 513.246 cv
111.582 513.457 111.742 513.703 111.848 513.977 cv
111.953 514.258 112.008 514.555 112.008 514.867 cv
112.008 515.156 111.98 515.437 111.93 515.715 cv
111.879 516 111.773 516.305 111.613 516.629 cv
111.449 516.957 111.215 517.32 110.91 517.719 cv
110.602 518.121 110.195 518.582 109.691 519.098 cv
108.285 520.566 li
112.145 520.566 li
112.176 520.57 112.211 520.582 112.25 520.598 cv
112.281 520.621 112.313 520.652 112.34 520.691 cv
112.363 520.734 112.383 520.785 112.395 520.844 cv
112.406 520.91 112.41 520.98 112.414 521.059 cv
cp
f
189.18 519.043 mo
189.176 519.195 189.152 519.316 189.109 519.402 cv
189.063 519.492 189 519.535 188.918 519.531 cv
187.918 519.531 li
187.918 521.395 li
187.918 521.434 187.906 521.465 187.891 521.488 cv
187.867 521.516 187.836 521.535 187.793 521.555 cv
187.742 521.57 187.68 521.582 187.609 521.594 cv
187.531 521.602 187.438 521.605 187.32 521.609 cv
187.203 521.605 187.105 521.602 187.035 521.594 cv
186.957 521.582 186.898 521.57 186.855 521.555 cv
186.809 521.535 186.777 521.516 186.762 521.488 cv
186.742 521.465 186.734 521.434 186.738 521.395 cv
186.738 519.531 li
183.109 519.531 li
183.051 519.535 183.008 519.527 182.973 519.512 cv
182.938 519.5 182.902 519.473 182.875 519.434 cv
182.844 519.398 182.824 519.348 182.813 519.277 cv
182.801 519.211 182.797 519.121 182.797 519.008 cv
182.797 518.926 182.797 518.848 182.805 518.777 cv
182.805 518.707 182.816 518.645 182.832 518.59 cv
182.844 518.535 182.859 518.48 182.887 518.426 cv
182.906 518.371 182.934 518.316 182.969 518.254 cv
186.129 512.867 li
186.148 512.832 186.184 512.801 186.23 512.773 cv
186.273 512.746 186.328 512.723 186.402 512.703 cv
186.469 512.687 186.555 512.676 186.66 512.664 cv
186.762 512.66 186.883 512.656 187.023 512.652 cv
187.172 512.656 187.309 512.66 187.426 512.672 cv
187.539 512.684 187.629 512.699 187.703 512.715 cv
187.77 512.734 187.824 512.758 187.863 512.789 cv
187.898 512.82 187.918 512.855 187.918 512.895 cv
187.918 518.559 li
188.918 518.559 li
188.992 518.562 189.055 518.602 189.105 518.68 cv
189.152 518.762 189.176 518.883 189.18 519.043 cv
cp
186.738 513.691 mo
186.727 513.691 li
183.875 518.559 li
186.738 518.559 li
cp
f
265.402 518.695 mo
265.402 519.086 265.34 519.465 265.223 519.824 cv
265.098 520.191 264.914 520.508 264.672 520.781 cv
264.422 521.059 264.109 521.281 263.734 521.445 cv
263.352 521.613 262.906 521.695 262.391 521.695 cv
262.02 521.695 261.691 521.652 261.41 521.559 cv
261.125 521.473 260.879 521.34 260.668 521.168 cv
260.457 521 260.281 520.793 260.145 520.547 cv
260.004 520.301 259.891 520.02 259.809 519.703 cv
259.723 519.391 259.664 519.047 259.629 518.668 cv
259.59 518.297 259.57 517.895 259.574 517.461 cv
259.57 517.082 259.59 516.699 259.633 516.309 cv
259.672 515.926 259.746 515.551 259.852 515.184 cv
259.957 514.824 260.102 514.484 260.281 514.168 cv
260.461 513.852 260.688 513.574 260.961 513.34 cv
261.234 513.105 261.559 512.918 261.938 512.777 cv
262.316 512.641 262.758 512.574 263.262 512.57 cv
263.43 512.574 263.602 512.582 263.773 512.602 cv
263.945 512.625 264.105 512.656 264.254 512.687 cv
264.402 512.727 264.523 512.762 264.625 512.801 cv
264.723 512.84 264.789 512.875 264.824 512.898 cv
264.852 512.926 264.875 512.953 264.895 512.98 cv
264.91 513.012 264.926 513.043 264.934 513.078 cv
264.941 513.113 264.945 513.152 264.953 513.195 cv
264.953 513.238 264.957 513.293 264.961 513.355 cv
264.957 513.441 264.957 513.512 264.957 513.566 cv
264.953 513.629 264.941 513.676 264.93 513.711 cv
264.91 513.75 264.891 513.777 264.867 513.793 cv
264.84 513.812 264.809 513.82 264.77 513.82 cv
264.719 513.82 264.648 513.805 264.563 513.773 cv
264.473 513.742 264.367 513.707 264.246 513.664 cv
264.121 513.629 263.973 513.594 263.797 513.559 cv
263.621 513.531 263.418 513.516 263.188 513.512 cv
262.758 513.516 262.391 513.602 262.086 513.773 cv
261.781 513.945 261.531 514.18 261.336 514.473 cv
261.141 514.766 260.996 515.105 260.906 515.488 cv
260.809 515.879 260.754 516.281 260.746 516.699 cv
260.863 516.633 261 516.566 261.148 516.496 cv
261.297 516.43 261.457 516.367 261.633 516.309 cv
261.809 516.258 261.996 516.211 262.191 516.176 cv
262.387 516.145 262.598 516.129 262.824 516.125 cv
263.301 516.129 263.703 516.195 264.035 516.32 cv
264.363 516.453 264.629 516.633 264.836 516.863 cv
265.035 517.094 265.18 517.363 265.27 517.676 cv
265.355 517.988 265.402 518.328 265.402 518.695 cv
cp
264.207 518.805 mo
264.207 518.543 264.18 518.301 264.129 518.082 cv
264.074 517.867 263.984 517.684 263.863 517.527 cv
263.738 517.379 263.574 517.262 263.371 517.18 cv
263.16 517.098 262.906 517.055 262.609 517.055 cv
262.438 517.055 262.27 517.07 262.102 517.102 cv
261.93 517.133 261.766 517.176 261.609 517.223 cv
261.449 517.277 261.301 517.34 261.16 517.41 cv
261.016 517.484 260.883 517.559 260.766 517.637 cv
260.762 518.23 260.801 518.727 260.879 519.121 cv
260.953 519.52 261.063 519.836 261.207 520.074 cv
261.352 520.316 261.531 520.488 261.746 520.59 cv
261.961 520.695 262.211 520.746 262.5 520.742 cv
262.789 520.746 263.043 520.691 263.258 520.578 cv
263.473 520.473 263.648 520.324 263.793 520.137 cv
263.934 519.953 264.039 519.746 264.105 519.516 cv
264.172 519.285 264.207 519.051 264.207 518.805 cv
cp
f
341.75 519.289 mo
341.75 519.676 341.68 520.02 341.543 520.316 cv
341.406 520.621 341.211 520.871 340.953 521.074 cv
340.695 521.281 340.375 521.437 339.996 521.539 cv
339.613 521.645 339.18 521.695 338.695 521.695 cv
338.234 521.695 337.824 521.648 337.465 521.555 cv
337.102 521.461 336.797 521.32 336.547 521.129 cv
336.297 520.945 336.105 520.715 335.973 520.437 cv
335.84 520.164 335.773 519.852 335.773 519.496 cv
335.773 519.223 335.816 518.965 335.91 518.73 cv
335.996 518.496 336.129 518.281 336.305 518.086 cv
336.473 517.891 336.684 517.707 336.938 517.531 cv
337.188 517.363 337.473 517.199 337.789 517.043 cv
337.516 516.902 337.273 516.754 337.063 516.594 cv
336.852 516.437 336.672 516.266 336.527 516.078 cv
336.379 515.895 336.27 515.699 336.195 515.488 cv
336.117 515.281 336.078 515.051 336.082 514.801 cv
336.078 514.492 336.133 514.199 336.25 513.926 cv
336.359 513.656 336.531 513.422 336.758 513.219 cv
336.984 513.02 337.27 512.859 337.621 512.742 cv
337.965 512.625 338.375 512.566 338.844 512.566 cv
339.289 512.566 339.676 512.621 340.004 512.727 cv
340.332 512.836 340.602 512.98 340.813 513.164 cv
341.023 513.352 341.18 513.57 341.285 513.82 cv
341.383 514.07 341.434 514.34 341.438 514.629 cv
341.434 514.863 341.395 515.09 341.324 515.301 cv
341.246 515.52 341.137 515.723 340.988 515.91 cv
340.84 516.105 340.66 516.285 340.449 516.449 cv
340.238 516.621 339.996 516.777 339.723 516.918 cv
340.043 517.082 340.328 517.246 340.586 517.414 cv
340.836 517.582 341.051 517.762 341.227 517.957 cv
341.395 518.152 341.523 518.359 341.617 518.574 cv
341.703 518.793 341.75 519.031 341.75 519.289 cv
cp
340.27 514.738 mo
340.266 514.551 340.234 514.375 340.168 514.219 cv
340.102 514.062 340.004 513.93 339.879 513.82 cv
339.75 513.711 339.59 513.629 339.402 513.57 cv
339.207 513.516 338.992 513.488 338.754 513.484 cv
338.258 513.488 337.883 513.598 337.633 513.82 cv
337.375 514.047 337.25 514.355 337.254 514.738 cv
337.25 514.918 337.281 515.082 337.344 515.234 cv
337.406 515.391 337.5 515.535 337.633 515.672 cv
337.758 515.809 337.922 515.941 338.125 516.07 cv
338.32 516.203 338.559 516.34 338.836 516.48 cv
339.297 516.246 339.652 515.984 339.898 515.691 cv
340.145 515.406 340.266 515.09 340.27 514.738 cv
cp
340.559 519.414 mo
340.555 519.207 340.516 519.016 340.441 518.844 cv
340.359 518.676 340.242 518.516 340.086 518.363 cv
339.93 518.215 339.73 518.07 339.496 517.93 cv
339.258 517.793 338.988 517.648 338.68 517.496 cv
338.391 517.641 338.137 517.781 337.922 517.922 cv
337.703 518.062 337.523 518.211 337.387 518.359 cv
337.246 518.516 337.141 518.672 337.07 518.836 cv
336.996 519.004 336.961 519.187 336.965 519.387 cv
336.961 519.832 337.113 520.176 337.422 520.414 cv
337.723 520.66 338.176 520.781 338.781 520.777 cv
339.363 520.781 339.809 520.66 340.109 520.41 cv
340.406 520.168 340.555 519.836 340.559 519.414 cv
cp
f
414.406 521.102 mo
414.402 521.191 414.395 521.262 414.383 521.32 cv
414.367 521.383 414.348 521.434 414.328 521.465 cv
414.305 521.504 414.281 521.527 414.25 521.543 cv
414.219 521.559 414.188 521.566 414.16 521.566 cv
409.523 521.566 li
409.488 521.566 409.461 521.559 409.434 521.543 cv
409.406 521.527 409.379 521.504 409.355 521.465 cv
409.328 521.434 409.309 521.383 409.297 521.32 cv
409.281 521.262 409.273 521.191 409.277 521.102 cv
409.273 521.023 409.281 520.949 409.297 520.887 cv
409.309 520.828 409.324 520.781 409.348 520.742 cv
409.363 520.707 409.391 520.676 409.422 520.652 cv
409.453 520.633 409.484 520.625 409.523 520.621 cv
411.375 520.621 li
411.375 513.875 li
409.66 514.895 li
409.57 514.945 409.5 514.973 409.453 514.98 cv
409.398 514.988 409.355 514.98 409.324 514.949 cv
409.289 514.922 409.27 514.871 409.258 514.801 cv
409.246 514.734 409.238 514.648 409.242 514.539 cv
409.238 514.465 409.242 514.398 409.254 514.34 cv
409.258 514.289 409.27 514.242 409.285 514.203 cv
409.297 514.168 409.316 514.137 409.34 514.109 cv
409.363 514.082 409.395 514.055 409.441 514.027 cv
411.484 512.715 li
411.5 512.703 411.52 512.691 411.551 512.684 cv
411.574 512.676 411.609 512.668 411.656 512.656 cv
411.695 512.648 411.746 512.641 411.801 512.637 cv
411.855 512.637 411.922 512.637 412.008 512.633 cv
412.113 512.637 412.207 512.641 412.281 512.648 cv
412.352 512.656 412.406 512.672 412.453 512.687 cv
412.492 512.707 412.52 512.727 412.535 512.75 cv
412.543 512.777 412.551 512.801 412.555 512.824 cv
412.555 520.621 li
414.16 520.621 li
414.195 520.625 414.23 520.633 414.262 520.652 cv
414.293 520.676 414.316 520.707 414.34 520.742 cv
414.355 520.781 414.371 520.828 414.387 520.887 cv
414.395 520.949 414.402 521.023 414.406 521.102 cv
cp
f
421.758 517.109 mo
421.754 517.793 421.703 518.414 421.598 518.977 cv
421.488 519.539 421.309 520.023 421.063 520.426 cv
420.809 520.832 420.48 521.145 420.082 521.363 cv
419.676 521.586 419.184 521.695 418.598 521.695 cv
418.039 521.695 417.566 521.598 417.188 521.398 cv
416.805 521.203 416.5 520.91 416.266 520.523 cv
416.031 520.137 415.863 519.664 415.77 519.098 cv
415.668 518.535 415.621 517.887 415.621 517.152 cv
415.621 516.48 415.676 515.859 415.785 515.293 cv
415.895 514.73 416.07 514.246 416.32 513.84 cv
416.563 513.437 416.887 513.125 417.293 512.898 cv
417.691 512.68 418.188 512.566 418.777 512.566 cv
419.336 512.566 419.809 512.668 420.191 512.863 cv
420.574 513.066 420.879 513.359 421.113 513.742 cv
421.344 514.133 421.512 514.605 421.609 515.168 cv
421.707 515.73 421.754 516.379 421.758 517.109 cv
cp
420.551 517.191 mo
420.547 516.75 420.531 516.352 420.504 516 cv
420.469 515.648 420.422 515.34 420.363 515.07 cv
420.297 514.801 420.219 514.57 420.121 514.375 cv
420.023 514.184 419.906 514.023 419.77 513.895 cv
419.629 513.77 419.469 513.676 419.297 513.617 cv
419.117 513.562 418.922 513.535 418.707 513.531 cv
418.316 513.535 418 513.625 417.762 513.809 cv
417.516 513.992 417.324 514.246 417.188 514.562 cv
417.047 514.883 416.953 515.254 416.902 515.684 cv
416.852 516.113 416.828 516.578 416.828 517.07 cv
416.828 517.734 416.859 518.297 416.93 518.758 cv
416.996 519.227 417.105 519.605 417.258 519.895 cv
417.402 520.191 417.594 520.402 417.824 520.531 cv
418.055 520.668 418.336 520.734 418.668 520.73 cv
418.922 520.734 419.145 520.695 419.34 520.609 cv
419.531 520.531 419.699 520.41 419.84 520.254 cv
419.98 520.102 420.094 519.918 420.188 519.703 cv
420.273 519.488 420.348 519.25 420.406 518.988 cv
420.457 518.73 420.496 518.449 420.52 518.145 cv
420.539 517.84 420.547 517.523 420.551 517.191 cv
cp
f
490.777 521.102 mo
490.773 521.191 490.766 521.262 490.754 521.32 cv
490.738 521.383 490.719 521.434 490.699 521.465 cv
490.676 521.504 490.652 521.527 490.621 521.543 cv
490.59 521.559 490.559 521.566 490.531 521.566 cv
485.895 521.566 li
485.859 521.566 485.832 521.559 485.805 521.543 cv
485.777 521.527 485.75 521.504 485.727 521.465 cv
485.699 521.434 485.68 521.383 485.668 521.32 cv
485.652 521.262 485.645 521.191 485.648 521.102 cv
485.645 521.023 485.652 520.949 485.668 520.887 cv
485.68 520.828 485.695 520.781 485.719 520.742 cv
485.734 520.707 485.762 520.676 485.793 520.652 cv
485.824 520.633 485.855 520.625 485.895 520.621 cv
487.746 520.621 li
487.746 513.875 li
486.031 514.895 li
485.941 514.945 485.871 514.973 485.824 514.98 cv
485.77 514.988 485.727 514.98 485.695 514.949 cv
485.66 514.922 485.641 514.871 485.629 514.801 cv
485.617 514.734 485.609 514.648 485.613 514.539 cv
485.609 514.465 485.613 514.398 485.625 514.34 cv
485.629 514.289 485.641 514.242 485.656 514.203 cv
485.668 514.168 485.688 514.137 485.711 514.109 cv
485.734 514.082 485.766 514.055 485.813 514.027 cv
487.855 512.715 li
487.871 512.703 487.891 512.691 487.922 512.684 cv
487.945 512.676 487.98 512.668 488.027 512.656 cv
488.066 512.648 488.117 512.641 488.172 512.637 cv
488.227 512.637 488.293 512.637 488.379 512.633 cv
488.484 512.637 488.578 512.641 488.652 512.648 cv
488.723 512.656 488.777 512.672 488.824 512.687 cv
488.863 512.707 488.891 512.727 488.906 512.75 cv
488.914 512.777 488.922 512.801 488.926 512.824 cv
488.926 520.621 li
490.531 520.621 li
490.566 520.625 490.602 520.633 490.633 520.652 cv
490.664 520.676 490.688 520.707 490.711 520.742 cv
490.727 520.781 490.742 520.828 490.758 520.887 cv
490.766 520.949 490.773 521.023 490.777 521.102 cv
cp
f
497.836 521.059 mo
497.832 521.145 497.828 521.219 497.816 521.281 cv
497.805 521.348 497.789 521.402 497.77 521.441 cv
497.746 521.488 497.719 521.52 497.688 521.535 cv
497.652 521.559 497.613 521.566 497.574 521.566 cv
492.672 521.566 li
492.609 521.566 492.551 521.559 492.504 521.543 cv
492.453 521.527 492.414 521.504 492.379 521.465 cv
492.344 521.434 492.316 521.379 492.305 521.309 cv
492.285 521.238 492.277 521.152 492.281 521.051 cv
492.277 520.961 492.281 520.883 492.289 520.812 cv
492.293 520.746 492.309 520.687 492.336 520.633 cv
492.359 520.582 492.391 520.527 492.426 520.473 cv
492.461 520.422 492.504 520.367 492.563 520.305 cv
494.336 518.48 li
494.746 518.062 495.074 517.687 495.324 517.352 cv
495.57 517.023 495.762 516.719 495.895 516.441 cv
496.027 516.168 496.113 515.918 496.16 515.691 cv
496.199 515.469 496.223 515.258 496.223 515.062 cv
496.223 514.867 496.188 514.684 496.121 514.504 cv
496.055 514.332 495.961 514.176 495.836 514.039 cv
495.711 513.91 495.555 513.805 495.367 513.723 cv
495.18 513.648 494.961 513.609 494.715 513.605 cv
494.426 513.609 494.168 513.648 493.941 513.723 cv
493.711 513.805 493.512 513.891 493.34 513.977 cv
493.168 514.07 493.023 514.152 492.906 514.23 cv
492.789 514.309 492.703 514.348 492.652 514.348 cv
492.617 514.348 492.586 514.34 492.563 514.32 cv
492.531 514.305 492.512 514.273 492.496 514.23 cv
492.48 514.191 492.465 514.137 492.457 514.066 cv
492.445 514 492.441 513.918 492.445 513.82 cv
492.441 513.754 492.445 513.695 492.453 513.645 cv
492.457 513.594 492.465 513.551 492.477 513.512 cv
492.484 513.477 492.5 513.441 492.52 513.41 cv
492.539 513.379 492.574 513.34 492.633 513.289 cv
492.684 513.242 492.777 513.176 492.914 513.094 cv
493.047 513.012 493.219 512.934 493.422 512.852 cv
493.625 512.773 493.848 512.703 494.094 512.648 cv
494.336 512.594 494.594 512.566 494.867 512.566 cv
495.293 512.566 495.668 512.629 495.992 512.75 cv
496.313 512.871 496.578 513.035 496.793 513.246 cv
497.004 513.457 497.164 513.703 497.27 513.977 cv
497.375 514.258 497.43 514.555 497.43 514.867 cv
497.43 515.156 497.402 515.437 497.352 515.715 cv
497.301 516 497.195 516.305 497.035 516.629 cv
496.871 516.957 496.637 517.32 496.332 517.719 cv
496.023 518.121 495.617 518.582 495.113 519.098 cv
493.707 520.566 li
497.566 520.566 li
497.598 520.57 497.633 520.582 497.672 520.598 cv
497.703 520.621 497.734 520.652 497.762 520.691 cv
497.785 520.734 497.805 520.785 497.816 520.844 cv
497.828 520.91 497.832 520.98 497.836 521.059 cv
cp
f
567.164 521.102 mo
567.16 521.191 567.152 521.262 567.141 521.32 cv
567.125 521.383 567.105 521.434 567.086 521.465 cv
567.063 521.504 567.039 521.527 567.008 521.543 cv
566.977 521.559 566.945 521.566 566.918 521.566 cv
562.281 521.566 li
562.246 521.566 562.219 521.559 562.191 521.543 cv
562.164 521.527 562.137 521.504 562.113 521.465 cv
562.086 521.434 562.066 521.383 562.055 521.32 cv
562.039 521.262 562.031 521.191 562.035 521.102 cv
562.031 521.023 562.039 520.949 562.055 520.887 cv
562.066 520.828 562.082 520.781 562.105 520.742 cv
562.121 520.707 562.148 520.676 562.18 520.652 cv
562.211 520.633 562.242 520.625 562.281 520.621 cv
564.133 520.621 li
564.133 513.875 li
562.418 514.895 li
562.328 514.945 562.258 514.973 562.211 514.98 cv
562.156 514.988 562.113 514.98 562.082 514.949 cv
562.047 514.922 562.027 514.871 562.016 514.801 cv
562.004 514.734 561.996 514.648 562 514.539 cv
561.996 514.465 562 514.398 562.012 514.34 cv
562.016 514.289 562.027 514.242 562.043 514.203 cv
562.055 514.168 562.074 514.137 562.098 514.109 cv
562.121 514.082 562.152 514.055 562.199 514.027 cv
564.242 512.715 li
564.258 512.703 564.277 512.691 564.309 512.684 cv
564.332 512.676 564.367 512.668 564.414 512.656 cv
564.453 512.648 564.504 512.641 564.559 512.637 cv
564.613 512.637 564.68 512.637 564.766 512.633 cv
564.871 512.637 564.965 512.641 565.039 512.648 cv
565.109 512.656 565.164 512.672 565.211 512.687 cv
565.25 512.707 565.277 512.727 565.293 512.75 cv
565.301 512.777 565.309 512.801 565.313 512.824 cv
565.313 520.621 li
566.918 520.621 li
566.953 520.625 566.988 520.633 567.02 520.652 cv
567.051 520.676 567.074 520.707 567.098 520.742 cv
567.113 520.781 567.129 520.828 567.145 520.887 cv
567.152 520.949 567.16 521.023 567.164 521.102 cv
cp
f
574.602 519.043 mo
574.598 519.195 574.574 519.316 574.531 519.402 cv
574.484 519.492 574.422 519.535 574.34 519.531 cv
573.34 519.531 li
573.34 521.395 li
573.34 521.434 573.328 521.465 573.313 521.488 cv
573.289 521.516 573.258 521.535 573.215 521.555 cv
573.164 521.57 573.102 521.582 573.031 521.594 cv
572.953 521.602 572.859 521.605 572.742 521.609 cv
572.625 521.605 572.527 521.602 572.457 521.594 cv
572.379 521.582 572.32 521.57 572.277 521.555 cv
572.23 521.535 572.199 521.516 572.184 521.488 cv
572.164 521.465 572.156 521.434 572.16 521.395 cv
572.16 519.531 li
568.531 519.531 li
568.473 519.535 568.43 519.527 568.395 519.512 cv
568.359 519.5 568.324 519.473 568.297 519.434 cv
568.266 519.398 568.246 519.348 568.234 519.277 cv
568.223 519.211 568.219 519.121 568.219 519.008 cv
568.219 518.926 568.219 518.848 568.227 518.777 cv
568.227 518.707 568.238 518.645 568.254 518.59 cv
568.266 518.535 568.281 518.48 568.309 518.426 cv
568.328 518.371 568.355 518.316 568.391 518.254 cv
571.551 512.867 li
571.57 512.832 571.605 512.801 571.652 512.773 cv
571.695 512.746 571.75 512.723 571.824 512.703 cv
571.891 512.687 571.977 512.676 572.082 512.664 cv
572.184 512.66 572.305 512.656 572.445 512.652 cv
572.594 512.656 572.73 512.66 572.848 512.672 cv
572.961 512.684 573.051 512.699 573.125 512.715 cv
573.191 512.734 573.246 512.758 573.285 512.789 cv
573.32 512.82 573.34 512.855 573.34 512.895 cv
573.34 518.559 li
574.34 518.559 li
574.414 518.562 574.477 518.602 574.527 518.68 cv
574.574 518.762 574.598 518.883 574.602 519.043 cv
cp
572.16 513.691 mo
572.148 513.691 li
569.297 518.559 li
572.16 518.559 li
cp
f
643.535 521.102 mo
643.531 521.191 643.523 521.262 643.512 521.32 cv
643.496 521.383 643.477 521.434 643.457 521.465 cv
643.434 521.504 643.41 521.527 643.379 521.543 cv
643.348 521.559 643.316 521.566 643.289 521.566 cv
638.652 521.566 li
638.617 521.566 638.59 521.559 638.563 521.543 cv
638.535 521.527 638.508 521.504 638.484 521.465 cv
638.457 521.434 638.438 521.383 638.426 521.32 cv
638.41 521.262 638.402 521.191 638.406 521.102 cv
638.402 521.023 638.41 520.949 638.426 520.887 cv
638.438 520.828 638.453 520.781 638.477 520.742 cv
638.492 520.707 638.52 520.676 638.551 520.652 cv
638.582 520.633 638.613 520.625 638.652 520.621 cv
640.504 520.621 li
640.504 513.875 li
638.789 514.895 li
638.699 514.945 638.629 514.973 638.582 514.98 cv
638.527 514.988 638.484 514.98 638.453 514.949 cv
638.418 514.922 638.398 514.871 638.387 514.801 cv
638.375 514.734 638.367 514.648 638.371 514.539 cv
638.367 514.465 638.371 514.398 638.383 514.34 cv
638.387 514.289 638.398 514.242 638.414 514.203 cv
638.426 514.168 638.445 514.137 638.469 514.109 cv
638.492 514.082 638.523 514.055 638.57 514.027 cv
640.613 512.715 li
640.629 512.703 640.648 512.691 640.68 512.684 cv
640.703 512.676 640.738 512.668 640.785 512.656 cv
640.824 512.648 640.875 512.641 640.93 512.637 cv
640.984 512.637 641.051 512.637 641.137 512.633 cv
641.242 512.637 641.336 512.641 641.41 512.648 cv
641.48 512.656 641.535 512.672 641.582 512.687 cv
641.621 512.707 641.648 512.727 641.664 512.75 cv
641.672 512.777 641.68 512.801 641.684 512.824 cv
641.684 520.621 li
643.289 520.621 li
643.324 520.625 643.359 520.633 643.391 520.652 cv
643.422 520.676 643.445 520.707 643.469 520.742 cv
643.484 520.781 643.5 520.828 643.516 520.887 cv
643.523 520.949 643.531 521.023 643.535 521.102 cv
cp
f
650.824 518.695 mo
650.824 519.086 650.762 519.465 650.645 519.824 cv
650.52 520.191 650.336 520.508 650.094 520.781 cv
649.844 521.059 649.531 521.281 649.156 521.445 cv
648.773 521.613 648.328 521.695 647.813 521.695 cv
647.441 521.695 647.113 521.652 646.832 521.559 cv
646.547 521.473 646.301 521.34 646.09 521.168 cv
645.879 521 645.703 520.793 645.566 520.547 cv
645.426 520.301 645.313 520.02 645.23 519.703 cv
645.145 519.391 645.086 519.047 645.051 518.668 cv
645.012 518.297 644.992 517.895 644.996 517.461 cv
644.992 517.082 645.012 516.699 645.055 516.309 cv
645.094 515.926 645.168 515.551 645.273 515.184 cv
645.379 514.824 645.523 514.484 645.703 514.168 cv
645.883 513.852 646.109 513.574 646.383 513.34 cv
646.656 513.105 646.98 512.918 647.359 512.777 cv
647.738 512.641 648.18 512.574 648.684 512.57 cv
648.852 512.574 649.023 512.582 649.195 512.602 cv
649.367 512.625 649.527 512.656 649.676 512.687 cv
649.824 512.727 649.945 512.762 650.047 512.801 cv
650.145 512.84 650.211 512.875 650.246 512.898 cv
650.273 512.926 650.297 512.953 650.316 512.98 cv
650.332 513.012 650.348 513.043 650.355 513.078 cv
650.363 513.113 650.367 513.152 650.375 513.195 cv
650.375 513.238 650.379 513.293 650.383 513.355 cv
650.379 513.441 650.379 513.512 650.379 513.566 cv
650.375 513.629 650.363 513.676 650.352 513.711 cv
650.332 513.75 650.313 513.777 650.289 513.793 cv
650.262 513.812 650.23 513.82 650.191 513.82 cv
650.141 513.82 650.07 513.805 649.984 513.773 cv
649.895 513.742 649.789 513.707 649.668 513.664 cv
649.543 513.629 649.395 513.594 649.219 513.559 cv
649.043 513.531 648.84 513.516 648.609 513.512 cv
648.18 513.516 647.813 513.602 647.508 513.773 cv
647.203 513.945 646.953 514.18 646.758 514.473 cv
646.563 514.766 646.418 515.105 646.328 515.488 cv
646.23 515.879 646.176 516.281 646.168 516.699 cv
646.285 516.633 646.422 516.566 646.57 516.496 cv
646.719 516.43 646.879 516.367 647.055 516.309 cv
647.23 516.258 647.418 516.211 647.613 516.176 cv
647.809 516.145 648.02 516.129 648.246 516.125 cv
648.723 516.129 649.125 516.195 649.457 516.32 cv
649.785 516.453 650.051 516.633 650.258 516.863 cv
650.457 517.094 650.602 517.363 650.691 517.676 cv
650.777 517.988 650.824 518.328 650.824 518.695 cv
cp
649.629 518.805 mo
649.629 518.543 649.602 518.301 649.551 518.082 cv
649.496 517.867 649.406 517.684 649.285 517.527 cv
649.16 517.379 648.996 517.262 648.793 517.18 cv
648.582 517.098 648.328 517.055 648.031 517.055 cv
647.859 517.055 647.691 517.07 647.523 517.102 cv
647.352 517.133 647.188 517.176 647.031 517.223 cv
646.871 517.277 646.723 517.34 646.582 517.41 cv
646.438 517.484 646.305 517.559 646.188 517.637 cv
646.184 518.23 646.223 518.727 646.301 519.121 cv
646.375 519.52 646.484 519.836 646.629 520.074 cv
646.773 520.316 646.953 520.488 647.168 520.59 cv
647.383 520.695 647.633 520.746 647.922 520.742 cv
648.211 520.746 648.465 520.691 648.68 520.578 cv
648.895 520.473 649.07 520.324 649.215 520.137 cv
649.355 519.953 649.461 519.746 649.527 519.516 cv
649.594 519.285 649.629 519.051 649.629 518.805 cv
cp
f
278.223 542.445 mo
278.219 542.551 278.203 542.641 278.168 542.711 cv
278.133 542.789 278.086 542.848 278.031 542.891 cv
277.973 542.941 277.91 542.977 277.844 542.992 cv
277.77 543.016 277.699 543.023 277.637 543.023 cv
277.191 543.023 li
277.051 543.023 276.93 543.012 276.824 542.98 cv
276.719 542.957 276.621 542.902 276.527 542.824 cv
276.434 542.75 276.34 542.648 276.246 542.516 cv
276.152 542.387 276.051 542.223 275.945 542.02 cv
272.871 536.281 li
272.707 535.988 272.543 535.68 272.383 535.352 cv
272.215 535.031 272.063 534.715 271.926 534.406 cv
271.91 534.406 li
271.918 534.781 271.926 535.164 271.934 535.551 cv
271.938 535.941 271.938 536.328 271.941 536.711 cv
271.941 542.797 li
271.938 542.836 271.926 542.871 271.906 542.902 cv
271.883 542.937 271.848 542.965 271.797 542.98 cv
271.742 543 271.672 543.012 271.59 543.027 cv
271.504 543.039 271.398 543.047 271.27 543.047 cv
271.133 543.047 271.023 543.039 270.941 543.027 cv
270.855 543.012 270.789 543 270.742 542.98 cv
270.691 542.965 270.656 542.937 270.633 542.902 cv
270.609 542.871 270.598 542.836 270.602 542.797 cv
270.602 533.492 li
270.598 533.285 270.656 533.137 270.777 533.047 cv
270.895 532.961 271.023 532.918 271.164 532.914 cv
271.824 532.914 li
271.977 532.918 272.109 532.93 272.215 532.953 cv
272.316 532.98 272.41 533.023 272.496 533.082 cv
272.578 533.145 272.656 533.227 272.738 533.332 cv
272.813 533.441 272.895 533.578 272.98 533.734 cv
275.348 538.16 li
275.492 538.434 275.633 538.699 275.77 538.953 cv
275.902 539.211 276.031 539.465 276.16 539.711 cv
276.281 539.965 276.406 540.211 276.531 540.449 cv
276.652 540.691 276.773 540.934 276.898 541.176 cv
276.906 541.176 li
276.895 540.77 276.887 540.34 276.887 539.895 cv
276.879 539.449 276.879 539.023 276.883 538.613 cv
276.883 533.141 li
276.879 533.105 276.891 533.07 276.914 533.039 cv
276.938 533.008 276.973 532.98 277.027 532.957 cv
277.074 532.934 277.145 532.918 277.23 532.906 cv
277.316 532.898 277.426 532.895 277.566 532.891 cv
277.684 532.895 277.789 532.898 277.879 532.906 cv
277.965 532.918 278.031 532.934 278.082 532.957 cv
278.129 532.98 278.164 533.008 278.188 533.039 cv
278.207 533.07 278.219 533.105 278.223 533.141 cv
cp
f
286.77 542.805 mo
286.766 542.852 286.758 542.887 286.742 542.91 cv
286.723 542.941 286.688 542.965 286.645 542.984 cv
286.598 543.004 286.539 543.016 286.465 543.031 cv
286.387 543.039 286.293 543.047 286.188 543.047 cv
286.063 543.047 285.965 543.039 285.895 543.031 cv
285.816 543.016 285.758 543.004 285.715 542.984 cv
285.668 542.965 285.637 542.941 285.625 542.91 cv
285.605 542.887 285.598 542.852 285.602 542.805 cv
285.602 541.879 li
285.199 542.324 284.805 542.645 284.418 542.844 cv
284.023 543.047 283.629 543.145 283.234 543.148 cv
282.762 543.145 282.367 543.07 282.051 542.914 cv
281.73 542.762 281.473 542.551 281.277 542.281 cv
281.074 542.016 280.934 541.703 280.852 541.344 cv
280.762 540.988 280.719 540.555 280.723 540.047 cv
280.723 535.793 li
280.719 535.754 280.727 535.719 280.75 535.687 cv
280.766 535.66 280.801 535.637 280.855 535.609 cv
280.902 535.59 280.973 535.574 281.059 535.562 cv
281.141 535.559 281.242 535.555 281.371 535.551 cv
281.492 535.555 281.598 535.559 281.684 535.562 cv
281.766 535.574 281.832 535.59 281.879 535.609 cv
281.926 535.637 281.961 535.66 281.984 535.687 cv
282.004 535.719 282.012 535.754 282.016 535.793 cv
282.016 539.875 li
282.012 540.289 282.043 540.617 282.105 540.863 cv
282.164 541.109 282.254 541.32 282.379 541.492 cv
282.496 541.672 282.652 541.805 282.844 541.898 cv
283.027 541.996 283.246 542.047 283.496 542.043 cv
283.816 542.047 284.137 541.93 284.461 541.699 cv
284.777 541.473 285.117 541.137 285.477 540.691 cv
285.477 535.793 li
285.477 535.754 285.484 535.719 285.504 535.687 cv
285.52 535.66 285.555 535.637 285.609 535.609 cv
285.66 535.59 285.727 535.574 285.809 535.562 cv
285.887 535.559 285.992 535.555 286.125 535.551 cv
286.246 535.555 286.352 535.559 286.438 535.562 cv
286.52 535.574 286.582 535.59 286.629 535.609 cv
286.672 535.637 286.707 535.66 286.734 535.687 cv
286.754 535.719 286.766 535.754 286.77 535.793 cv
cp
f
299.547 542.805 mo
299.543 542.852 299.535 542.887 299.516 542.91 cv
299.492 542.941 299.457 542.965 299.414 542.984 cv
299.363 543.004 299.297 543.016 299.219 543.031 cv
299.133 543.039 299.031 543.047 298.906 543.047 cv
298.773 543.047 298.664 543.039 298.586 543.031 cv
298.5 543.016 298.434 543.004 298.387 542.984 cv
298.332 542.965 298.297 542.941 298.281 542.91 cv
298.258 542.887 298.25 542.852 298.25 542.805 cv
298.25 538.543 li
298.25 538.25 298.223 537.98 298.172 537.734 cv
298.117 537.492 298.035 537.281 297.922 537.102 cv
297.809 536.926 297.664 536.789 297.488 536.695 cv
297.309 536.602 297.098 536.555 296.863 536.555 cv
296.566 536.555 296.27 536.672 295.973 536.898 cv
295.668 537.133 295.34 537.465 294.984 537.902 cv
294.984 542.805 li
294.98 542.852 294.969 542.887 294.953 542.91 cv
294.93 542.941 294.898 542.965 294.852 542.984 cv
294.801 543.004 294.734 543.016 294.652 543.031 cv
294.566 543.039 294.461 543.047 294.34 543.047 cv
294.219 543.047 294.117 543.039 294.031 543.031 cv
293.945 543.016 293.875 543.004 293.828 542.984 cv
293.773 542.965 293.742 542.941 293.727 542.91 cv
293.707 542.887 293.695 542.852 293.699 542.805 cv
293.699 538.543 li
293.695 538.25 293.668 537.98 293.613 537.734 cv
293.555 537.492 293.469 537.281 293.355 537.102 cv
293.242 536.926 293.098 536.789 292.926 536.695 cv
292.746 536.602 292.539 536.555 292.305 536.555 cv
292.004 536.555 291.707 536.672 291.406 536.898 cv
291.105 537.133 290.777 537.465 290.426 537.902 cv
290.426 542.805 li
290.422 542.852 290.41 542.887 290.395 542.91 cv
290.371 542.941 290.34 542.965 290.293 542.984 cv
290.246 543.004 290.18 543.016 290.102 543.031 cv
290.016 543.039 289.91 543.047 289.781 543.047 cv
289.652 543.047 289.547 543.039 289.469 543.031 cv
289.383 543.016 289.316 543.004 289.27 542.984 cv
289.215 542.965 289.184 542.941 289.168 542.91 cv
289.148 542.887 289.137 542.852 289.141 542.805 cv
289.141 535.793 li
289.137 535.754 289.145 535.719 289.164 535.687 cv
289.176 535.66 289.207 535.637 289.258 535.609 cv
289.301 535.59 289.363 535.574 289.438 535.562 cv
289.508 535.559 289.602 535.555 289.727 535.551 cv
289.836 535.555 289.934 535.559 290.012 535.562 cv
290.086 535.574 290.145 535.59 290.188 535.609 cv
290.227 535.637 290.254 535.66 290.273 535.687 cv
290.289 535.719 290.297 535.754 290.301 535.793 cv
290.301 536.719 li
290.691 536.277 291.074 535.957 291.449 535.75 cv
291.816 535.547 292.195 535.441 292.578 535.441 cv
292.867 535.441 293.125 535.477 293.359 535.543 cv
293.586 535.613 293.793 535.707 293.973 535.828 cv
294.148 535.949 294.297 536.094 294.426 536.262 cv
294.547 536.434 294.652 536.625 294.738 536.828 cv
294.969 536.578 295.191 536.363 295.402 536.184 cv
295.613 536.012 295.816 535.867 296.012 535.754 cv
296.207 535.648 296.395 535.57 296.578 535.516 cv
296.762 535.469 296.949 535.441 297.137 535.441 cv
297.59 535.441 297.969 535.523 298.273 535.68 cv
298.578 535.844 298.824 536.055 299.02 536.316 cv
299.207 536.582 299.344 536.891 299.426 537.246 cv
299.504 537.602 299.543 537.977 299.547 538.371 cv
cp
f
308.348 539.203 mo
308.344 539.812 308.277 540.363 308.148 540.848 cv
308.012 541.336 307.816 541.75 307.563 542.09 cv
307.305 542.434 306.988 542.695 306.617 542.875 cv
306.242 543.059 305.816 543.145 305.332 543.148 cv
305.105 543.145 304.898 543.125 304.711 543.082 cv
304.523 543.035 304.336 542.965 304.156 542.867 cv
303.969 542.77 303.789 542.645 303.609 542.492 cv
303.426 542.344 303.234 542.164 303.035 541.949 cv
303.035 542.805 li
303.035 542.852 303.023 542.887 303.004 542.914 cv
302.98 542.949 302.945 542.973 302.902 542.988 cv
302.852 543.004 302.793 543.016 302.727 543.031 cv
302.652 543.039 302.563 543.047 302.457 543.047 cv
302.348 543.047 302.262 543.039 302.191 543.031 cv
302.117 543.016 302.055 543.004 302.012 542.988 cv
301.961 542.973 301.93 542.949 301.918 542.914 cv
301.898 542.887 301.891 542.852 301.895 542.805 cv
301.895 532.395 li
301.891 532.355 301.902 532.32 301.922 532.285 cv
301.938 532.258 301.969 532.23 302.023 532.207 cv
302.07 532.187 302.137 532.172 302.223 532.16 cv
302.301 532.152 302.406 532.148 302.535 532.145 cv
302.664 532.148 302.77 532.152 302.855 532.16 cv
302.934 532.172 303 532.187 303.047 532.207 cv
303.094 532.23 303.125 532.258 303.148 532.285 cv
303.164 532.32 303.176 532.355 303.18 532.395 cv
303.18 536.594 li
303.387 536.383 303.59 536.203 303.785 536.059 cv
303.98 535.914 304.168 535.797 304.355 535.703 cv
304.539 535.617 304.727 535.551 304.918 535.504 cv
305.102 535.465 305.301 535.441 305.512 535.441 cv
306.016 535.441 306.449 535.543 306.816 535.746 cv
307.176 535.949 307.469 536.223 307.695 536.559 cv
307.918 536.902 308.086 537.301 308.191 537.758 cv
308.293 538.215 308.344 538.695 308.348 539.203 cv
cp
307.016 539.352 mo
307.012 538.996 306.984 538.648 306.934 538.309 cv
306.875 537.973 306.781 537.676 306.645 537.414 cv
306.508 537.156 306.328 536.945 306.105 536.785 cv
305.879 536.629 305.598 536.551 305.266 536.547 cv
305.098 536.551 304.934 536.574 304.773 536.617 cv
304.609 536.668 304.445 536.746 304.277 536.852 cv
304.109 536.965 303.934 537.105 303.758 537.273 cv
303.574 537.449 303.383 537.664 303.18 537.918 cv
303.18 540.715 li
303.535 541.148 303.875 541.48 304.199 541.703 cv
304.523 541.934 304.859 542.047 305.211 542.043 cv
305.531 542.047 305.809 541.969 306.043 541.809 cv
306.27 541.656 306.457 541.449 306.602 541.187 cv
306.746 540.934 306.852 540.645 306.918 540.324 cv
306.98 540.008 307.012 539.684 307.016 539.352 cv
cp
f
316.258 538.996 mo
316.254 539.199 316.203 539.34 316.105 539.426 cv
316 539.512 315.883 539.555 315.758 539.555 cv
311.141 539.555 li
311.137 539.945 311.176 540.297 311.258 540.609 cv
311.332 540.922 311.465 541.191 311.648 541.41 cv
311.828 541.637 312.063 541.809 312.359 541.926 cv
312.648 542.051 313.008 542.109 313.434 542.105 cv
313.766 542.109 314.063 542.082 314.324 542.023 cv
314.586 541.973 314.813 541.91 315.004 541.84 cv
315.191 541.773 315.348 541.715 315.473 541.656 cv
315.594 541.605 315.688 541.578 315.75 541.574 cv
315.785 541.578 315.816 541.586 315.848 541.602 cv
315.875 541.621 315.898 541.648 315.918 541.684 cv
315.93 541.723 315.941 541.773 315.953 541.836 cv
315.957 541.902 315.961 541.98 315.965 542.074 cv
315.961 542.145 315.957 542.203 315.957 542.25 cv
315.949 542.297 315.945 542.34 315.938 542.379 cv
315.93 542.418 315.914 542.453 315.898 542.484 cv
315.875 542.516 315.852 542.547 315.828 542.574 cv
315.797 542.605 315.715 542.652 315.574 542.715 cv
315.434 542.781 315.25 542.844 315.027 542.906 cv
314.801 542.969 314.543 543.023 314.25 543.074 cv
313.957 543.121 313.645 543.145 313.313 543.148 cv
312.734 543.145 312.227 543.066 311.797 542.906 cv
311.359 542.746 310.996 542.508 310.703 542.191 cv
310.402 541.875 310.18 541.48 310.031 541 cv
309.883 540.523 309.809 539.965 309.809 539.328 cv
309.809 538.73 309.883 538.191 310.039 537.707 cv
310.191 537.23 310.418 536.82 310.715 536.484 cv
311.008 536.148 311.363 535.891 311.777 535.711 cv
312.191 535.531 312.656 535.441 313.172 535.441 cv
313.723 535.441 314.191 535.531 314.578 535.707 cv
314.965 535.887 315.281 536.125 315.535 536.422 cv
315.781 536.723 315.965 537.074 316.082 537.473 cv
316.195 537.879 316.254 538.309 316.258 538.762 cv
cp
314.965 538.613 mo
314.98 537.937 314.828 537.406 314.512 537.023 cv
314.195 536.641 313.727 536.449 313.109 536.445 cv
312.785 536.449 312.504 536.508 312.266 536.625 cv
312.023 536.746 311.824 536.906 311.664 537.102 cv
311.5 537.301 311.375 537.531 311.289 537.793 cv
311.199 538.055 311.148 538.328 311.141 538.613 cv
cp
f
322.32 536.25 mo
322.316 536.367 322.316 536.465 322.313 536.539 cv
322.305 536.621 322.293 536.684 322.281 536.723 cv
322.262 536.77 322.242 536.801 322.223 536.824 cv
322.195 536.848 322.164 536.859 322.125 536.859 cv
322.082 536.859 322.031 536.848 321.973 536.824 cv
321.91 536.801 321.84 536.777 321.77 536.754 cv
321.691 536.73 321.609 536.711 321.516 536.687 cv
321.422 536.672 321.32 536.66 321.211 536.656 cv
321.078 536.66 320.949 536.687 320.828 536.734 cv
320.703 536.789 320.574 536.875 320.438 536.992 cv
320.297 537.117 320.152 537.273 320.004 537.469 cv
319.852 537.664 319.684 537.906 319.504 538.191 cv
319.504 542.805 li
319.5 542.852 319.488 542.887 319.473 542.91 cv
319.449 542.941 319.418 542.965 319.371 542.984 cv
319.324 543.004 319.258 543.016 319.18 543.031 cv
319.094 543.039 318.988 543.047 318.859 543.047 cv
318.73 543.047 318.625 543.039 318.547 543.031 cv
318.461 543.016 318.395 543.004 318.348 542.984 cv
318.293 542.965 318.262 542.941 318.246 542.91 cv
318.227 542.887 318.215 542.852 318.219 542.805 cv
318.219 535.793 li
318.215 535.754 318.223 535.719 318.242 535.687 cv
318.254 535.66 318.285 535.637 318.336 535.609 cv
318.379 535.59 318.441 535.574 318.516 535.562 cv
318.586 535.559 318.68 535.555 318.805 535.551 cv
318.914 535.555 319.012 535.559 319.09 535.562 cv
319.164 535.574 319.223 535.59 319.266 535.609 cv
319.305 535.637 319.332 535.66 319.352 535.687 cv
319.367 535.719 319.375 535.754 319.379 535.793 cv
319.379 536.812 li
319.566 536.531 319.75 536.305 319.922 536.129 cv
320.09 535.953 320.25 535.812 320.402 535.711 cv
320.551 535.609 320.699 535.539 320.848 535.5 cv
320.996 535.461 321.145 535.441 321.297 535.441 cv
321.363 535.441 321.441 535.445 321.527 535.453 cv
321.613 535.461 321.703 535.477 321.797 535.496 cv
321.891 535.52 321.973 535.543 322.051 535.566 cv
322.121 535.594 322.176 535.621 322.211 535.645 cv
322.238 535.676 322.258 535.699 322.273 535.719 cv
322.281 535.746 322.293 535.777 322.301 535.809 cv
322.309 535.848 322.313 535.898 322.316 535.969 cv
322.316 536.039 322.316 536.133 322.32 536.25 cv
cp
f
334.078 539.219 mo
334.074 539.797 334 540.324 333.852 540.801 cv
333.699 541.285 333.473 541.699 333.176 542.043 cv
332.875 542.395 332.5 542.664 332.055 542.855 cv
331.602 543.051 331.082 543.145 330.492 543.148 cv
329.914 543.145 329.41 543.062 328.984 542.891 cv
328.555 542.723 328.199 542.473 327.914 542.145 cv
327.625 541.816 327.41 541.422 327.273 540.953 cv
327.133 540.488 327.066 539.957 327.066 539.359 cv
327.066 538.793 327.137 538.266 327.285 537.785 cv
327.43 537.305 327.656 536.891 327.957 536.539 cv
328.254 536.191 328.625 535.922 329.074 535.73 cv
329.52 535.539 330.043 535.441 330.641 535.441 cv
331.219 535.441 331.719 535.527 332.148 535.699 cv
332.574 535.871 332.934 536.121 333.219 536.449 cv
333.504 536.777 333.719 537.176 333.863 537.641 cv
334.004 538.109 334.074 538.637 334.078 539.219 cv
cp
332.746 539.305 mo
332.742 538.93 332.707 538.57 332.641 538.23 cv
332.566 537.895 332.449 537.602 332.289 537.344 cv
332.125 537.094 331.906 536.891 331.629 536.738 cv
331.348 536.594 331 536.52 330.59 536.516 cv
330.203 536.52 329.875 536.586 329.602 536.719 cv
329.324 536.855 329.098 537.047 328.922 537.293 cv
328.742 537.539 328.609 537.832 328.527 538.168 cv
328.438 538.508 328.395 538.875 328.398 539.273 cv
328.395 539.66 328.43 540.023 328.504 540.359 cv
328.57 540.699 328.688 540.992 328.855 541.242 cv
329.02 541.496 329.242 541.699 329.52 541.844 cv
329.797 541.996 330.145 542.07 330.559 542.066 cv
330.934 542.07 331.262 542 331.543 541.863 cv
331.82 541.73 332.047 541.543 332.227 541.293 cv
332.402 541.051 332.531 540.758 332.617 540.422 cv
332.699 540.086 332.742 539.715 332.746 539.305 cv
cp
f
339.813 532.906 mo
339.809 533.008 339.805 533.086 339.797 533.145 cv
339.785 533.207 339.773 533.258 339.762 533.289 cv
339.746 533.328 339.73 533.352 339.711 533.363 cv
339.688 533.379 339.66 533.387 339.633 533.383 cv
339.594 533.387 339.547 533.375 339.496 533.348 cv
339.438 533.328 339.371 533.301 339.297 533.27 cv
339.215 533.242 339.125 533.215 339.02 533.191 cv
338.91 533.168 338.785 533.156 338.652 533.156 cv
338.457 533.156 338.293 533.187 338.16 533.25 cv
338.02 533.312 337.91 533.41 337.832 533.543 cv
337.746 533.676 337.688 533.848 337.652 534.059 cv
337.613 534.27 337.594 534.527 337.598 534.824 cv
337.598 535.59 li
339.164 535.59 li
339.203 535.594 339.238 535.602 339.27 535.617 cv
339.297 535.637 339.324 535.668 339.348 535.711 cv
339.371 535.758 339.387 535.816 339.402 535.879 cv
339.41 535.949 339.418 536.031 339.422 536.125 cv
339.418 536.316 339.395 536.449 339.352 536.531 cv
339.301 536.617 339.238 536.66 339.164 536.656 cv
337.598 536.656 li
337.598 542.805 li
337.594 542.852 337.586 542.887 337.566 542.91 cv
337.543 542.941 337.508 542.965 337.461 542.984 cv
337.41 543.004 337.344 543.016 337.262 543.031 cv
337.176 543.039 337.07 543.047 336.953 543.047 cv
336.824 543.047 336.723 543.039 336.641 543.031 cv
336.555 543.016 336.488 543.004 336.441 542.984 cv
336.391 542.965 336.355 542.941 336.336 542.91 cv
336.313 542.887 336.301 542.852 336.305 542.805 cv
336.305 536.656 li
335.316 536.656 li
335.23 536.66 335.168 536.617 335.129 536.531 cv
335.086 536.449 335.063 536.316 335.066 536.125 cv
335.063 536.031 335.07 535.949 335.082 535.879 cv
335.09 535.816 335.105 535.758 335.129 535.711 cv
335.148 535.668 335.172 535.637 335.207 535.617 cv
335.234 535.602 335.273 535.594 335.316 535.59 cv
336.305 535.59 li
336.305 534.863 li
336.301 534.379 336.348 533.961 336.441 533.605 cv
336.531 533.258 336.668 532.969 336.855 532.746 cv
337.039 532.523 337.273 532.359 337.563 532.25 cv
337.844 532.145 338.18 532.09 338.566 532.09 cv
338.742 532.09 338.918 532.109 339.094 532.141 cv
339.262 532.18 339.395 532.215 339.492 532.25 cv
339.582 532.293 339.645 532.328 339.68 532.355 cv
339.707 532.391 339.734 532.43 339.758 532.477 cv
339.777 532.527 339.789 532.59 339.801 532.656 cv
339.805 532.73 339.809 532.812 339.813 532.906 cv
cp
f
350.008 540.172 mo
350.004 540.645 349.918 541.066 349.746 541.434 cv
349.57 541.809 349.328 542.121 349.02 542.375 cv
348.711 542.633 348.348 542.824 347.93 542.953 cv
347.508 543.082 347.059 543.145 346.578 543.148 cv
346.238 543.145 345.922 543.117 345.637 543.062 cv
345.348 543.004 345.094 542.937 344.867 542.852 cv
344.641 542.773 344.449 542.687 344.297 542.594 cv
344.141 542.508 344.035 542.43 343.977 542.367 cv
343.918 542.305 343.875 542.227 343.848 542.133 cv
343.816 542.039 343.801 541.91 343.805 541.746 cv
343.801 541.633 343.805 541.539 343.82 541.461 cv
343.828 541.387 343.844 541.324 343.867 541.277 cv
343.883 541.23 343.91 541.199 343.945 541.18 cv
343.973 541.164 344.008 541.156 344.051 541.152 cv
344.121 541.156 344.223 541.199 344.359 541.285 cv
344.488 541.375 344.66 541.473 344.871 541.574 cv
345.078 541.684 345.328 541.781 345.621 541.867 cv
345.914 541.961 346.254 542.004 346.641 542.004 cv
346.93 542.004 347.195 541.965 347.438 541.887 cv
347.676 541.809 347.883 541.699 348.063 541.555 cv
348.234 541.414 348.371 541.238 348.465 541.027 cv
348.559 540.82 348.605 540.586 348.605 540.32 cv
348.605 540.039 348.539 539.793 348.41 539.586 cv
348.277 539.387 348.105 539.211 347.895 539.055 cv
347.68 538.906 347.438 538.766 347.164 538.633 cv
346.891 538.508 346.609 538.375 346.328 538.242 cv
346.039 538.109 345.762 537.965 345.492 537.801 cv
345.223 537.645 344.98 537.453 344.77 537.234 cv
344.551 537.016 344.379 536.762 344.25 536.465 cv
344.113 536.176 344.047 535.824 344.051 535.41 cv
344.047 534.992 344.125 534.617 344.281 534.285 cv
344.434 533.957 344.645 533.68 344.922 533.453 cv
345.191 533.234 345.516 533.062 345.895 532.945 cv
346.27 532.828 346.68 532.77 347.117 532.77 cv
347.336 532.77 347.559 532.789 347.789 532.828 cv
348.012 532.867 348.223 532.918 348.426 532.98 cv
348.621 533.047 348.801 533.121 348.961 533.199 cv
349.113 533.281 349.215 533.348 349.27 533.395 cv
349.316 533.449 349.352 533.488 349.367 533.512 cv
349.383 533.543 349.395 533.578 349.406 533.621 cv
349.414 533.668 349.422 533.723 349.43 533.781 cv
349.434 533.848 349.438 533.926 349.438 534.023 cv
349.438 534.117 349.434 534.203 349.426 534.273 cv
349.418 534.352 349.406 534.41 349.391 534.457 cv
349.375 534.504 349.352 534.539 349.324 534.562 cv
349.293 534.586 349.262 534.598 349.227 534.598 cv
349.168 534.598 349.078 534.562 348.957 534.492 cv
348.832 534.422 348.68 534.34 348.508 534.246 cv
348.328 534.156 348.121 534.074 347.883 533.996 cv
347.637 533.922 347.367 533.883 347.07 533.883 cv
346.789 533.883 346.543 533.922 346.336 533.996 cv
346.125 534.074 345.953 534.176 345.82 534.297 cv
345.684 534.422 345.582 534.566 345.516 534.738 cv
345.449 534.91 345.418 535.094 345.418 535.285 cv
345.418 535.57 345.48 535.812 345.609 536.012 cv
345.738 536.215 345.91 536.395 346.129 536.547 cv
346.34 536.707 346.586 536.848 346.863 536.977 cv
347.137 537.109 347.418 537.242 347.707 537.371 cv
347.992 537.504 348.273 537.648 348.547 537.805 cv
348.82 537.965 349.066 538.152 349.285 538.367 cv
349.5 538.586 349.672 538.84 349.809 539.133 cv
349.938 539.426 350.004 539.773 350.008 540.172 cv
cp
f
357.777 542.805 mo
357.773 542.852 357.766 542.887 357.75 542.91 cv
357.73 542.941 357.695 542.965 357.652 542.984 cv
357.605 543.004 357.547 543.016 357.473 543.031 cv
357.395 543.039 357.301 543.047 357.195 543.047 cv
357.07 543.047 356.973 543.039 356.902 543.031 cv
356.824 543.016 356.766 543.004 356.723 542.984 cv
356.676 542.965 356.645 542.941 356.633 542.91 cv
356.613 542.887 356.605 542.852 356.609 542.805 cv
356.609 541.879 li
356.207 542.324 355.813 542.645 355.426 542.844 cv
355.031 543.047 354.637 543.145 354.242 543.148 cv
353.77 543.145 353.375 543.07 353.059 542.914 cv
352.738 542.762 352.48 542.551 352.285 542.281 cv
352.082 542.016 351.941 541.703 351.859 541.344 cv
351.77 540.988 351.727 540.555 351.73 540.047 cv
351.73 535.793 li
351.727 535.754 351.734 535.719 351.758 535.687 cv
351.773 535.66 351.809 535.637 351.863 535.609 cv
351.91 535.59 351.98 535.574 352.066 535.562 cv
352.148 535.559 352.25 535.555 352.379 535.551 cv
352.5 535.555 352.605 535.559 352.691 535.562 cv
352.773 535.574 352.84 535.59 352.887 535.609 cv
352.934 535.637 352.969 535.66 352.992 535.687 cv
353.012 535.719 353.02 535.754 353.023 535.793 cv
353.023 539.875 li
353.02 540.289 353.051 540.617 353.113 540.863 cv
353.172 541.109 353.262 541.32 353.387 541.492 cv
353.504 541.672 353.66 541.805 353.852 541.898 cv
354.035 541.996 354.254 542.047 354.504 542.043 cv
354.824 542.047 355.145 541.93 355.469 541.699 cv
355.785 541.473 356.125 541.137 356.484 540.691 cv
356.484 535.793 li
356.484 535.754 356.492 535.719 356.512 535.687 cv
356.527 535.66 356.563 535.637 356.617 535.609 cv
356.668 535.59 356.734 535.574 356.816 535.562 cv
356.895 535.559 357 535.555 357.133 535.551 cv
357.254 535.555 357.359 535.559 357.445 535.562 cv
357.527 535.574 357.59 535.59 357.637 535.609 cv
357.68 535.637 357.715 535.66 357.742 535.687 cv
357.762 535.719 357.773 535.754 357.777 535.793 cv
cp
f
366.633 539.203 mo
366.629 539.812 366.563 540.363 366.434 540.848 cv
366.297 541.336 366.102 541.75 365.848 542.09 cv
365.59 542.434 365.273 542.695 364.902 542.875 cv
364.527 543.059 364.102 543.145 363.617 543.148 cv
363.391 543.145 363.184 543.125 362.996 543.082 cv
362.809 543.035 362.621 542.965 362.441 542.867 cv
362.254 542.77 362.074 542.645 361.895 542.492 cv
361.711 542.344 361.52 542.164 361.32 541.949 cv
361.32 542.805 li
361.32 542.852 361.309 542.887 361.289 542.914 cv
361.266 542.949 361.23 542.973 361.188 542.988 cv
361.137 543.004 361.078 543.016 361.012 543.031 cv
360.938 543.039 360.848 543.047 360.742 543.047 cv
360.633 543.047 360.547 543.039 360.477 543.031 cv
360.402 543.016 360.34 543.004 360.297 542.988 cv
360.246 542.973 360.215 542.949 360.203 542.914 cv
360.184 542.887 360.176 542.852 360.18 542.805 cv
360.18 532.395 li
360.176 532.355 360.188 532.32 360.207 532.285 cv
360.223 532.258 360.254 532.23 360.309 532.207 cv
360.355 532.187 360.422 532.172 360.508 532.16 cv
360.586 532.152 360.691 532.148 360.82 532.145 cv
360.949 532.148 361.055 532.152 361.141 532.16 cv
361.219 532.172 361.285 532.187 361.332 532.207 cv
361.379 532.23 361.41 532.258 361.434 532.285 cv
361.449 532.32 361.461 532.355 361.465 532.395 cv
361.465 536.594 li
361.672 536.383 361.875 536.203 362.07 536.059 cv
362.266 535.914 362.453 535.797 362.641 535.703 cv
362.824 535.617 363.012 535.551 363.203 535.504 cv
363.387 535.465 363.586 535.441 363.797 535.441 cv
364.301 535.441 364.734 535.543 365.102 535.746 cv
365.461 535.949 365.754 536.223 365.98 536.559 cv
366.203 536.902 366.371 537.301 366.477 537.758 cv
366.578 538.215 366.629 538.695 366.633 539.203 cv
cp
365.301 539.352 mo
365.297 538.996 365.27 538.648 365.219 538.309 cv
365.16 537.973 365.066 537.676 364.93 537.414 cv
364.793 537.156 364.613 536.945 364.391 536.785 cv
364.164 536.629 363.883 536.551 363.551 536.547 cv
363.383 536.551 363.219 536.574 363.059 536.617 cv
362.895 536.668 362.73 536.746 362.563 536.852 cv
362.395 536.965 362.219 537.105 362.043 537.273 cv
361.859 537.449 361.668 537.664 361.465 537.918 cv
361.465 540.715 li
361.82 541.148 362.16 541.48 362.484 541.703 cv
362.809 541.934 363.145 542.047 363.496 542.043 cv
363.816 542.047 364.094 541.969 364.328 541.809 cv
364.555 541.656 364.742 541.449 364.887 541.187 cv
365.031 540.934 365.137 540.645 365.203 540.324 cv
365.266 540.008 365.297 539.684 365.301 539.352 cv
cp
f
371.77 539.066 mo
371.77 539.27 371.746 539.406 371.699 539.484 cv
371.652 539.562 371.582 539.602 371.496 539.602 cv
368.238 539.602 li
368.145 539.602 368.078 539.562 368.031 539.48 cv
367.984 539.402 367.961 539.266 367.961 539.066 cv
367.961 538.871 367.984 538.73 368.031 538.652 cv
368.078 538.574 368.145 538.535 368.238 538.535 cv
371.496 538.535 li
371.535 538.535 371.574 538.543 371.609 538.559 cv
371.641 538.574 371.668 538.605 371.695 538.648 cv
371.715 538.695 371.734 538.75 371.75 538.816 cv
371.762 538.887 371.77 538.973 371.77 539.066 cv
cp
f
375.02 542.797 mo
375.016 542.84 375.008 542.875 374.988 542.906 cv
374.965 542.937 374.926 542.965 374.879 542.98 cv
374.824 543 374.758 543.012 374.672 543.027 cv
374.586 543.039 374.477 543.047 374.352 543.047 cv
374.223 543.047 374.117 543.039 374.031 543.027 cv
373.941 543.012 373.871 543 373.82 542.98 cv
373.766 542.965 373.73 542.937 373.711 542.906 cv
373.688 542.875 373.676 542.84 373.68 542.797 cv
373.68 533.117 li
373.676 533.078 373.688 533.043 373.715 533.008 cv
373.734 532.98 373.773 532.953 373.832 532.934 cv
373.883 532.918 373.953 532.902 374.043 532.887 cv
374.125 532.875 374.227 532.871 374.352 532.867 cv
374.477 532.871 374.586 532.875 374.672 532.887 cv
374.758 532.902 374.824 532.918 374.879 532.934 cv
374.926 532.953 374.965 532.98 374.988 533.008 cv
375.008 533.043 375.016 533.078 375.02 533.117 cv
cp
f
388.008 542.805 mo
388.004 542.852 387.996 542.887 387.977 542.91 cv
387.953 542.941 387.918 542.965 387.875 542.984 cv
387.824 543.004 387.758 543.016 387.68 543.031 cv
387.594 543.039 387.492 543.047 387.367 543.047 cv
387.234 543.047 387.125 543.039 387.047 543.031 cv
386.961 543.016 386.895 543.004 386.848 542.984 cv
386.793 542.965 386.758 542.941 386.742 542.91 cv
386.719 542.887 386.711 542.852 386.711 542.805 cv
386.711 538.543 li
386.711 538.25 386.684 537.98 386.633 537.734 cv
386.578 537.492 386.496 537.281 386.383 537.102 cv
386.27 536.926 386.125 536.789 385.949 536.695 cv
385.77 536.602 385.559 536.555 385.324 536.555 cv
385.027 536.555 384.73 536.672 384.434 536.898 cv
384.129 537.133 383.801 537.465 383.445 537.902 cv
383.445 542.805 li
383.441 542.852 383.43 542.887 383.414 542.91 cv
383.391 542.941 383.359 542.965 383.313 542.984 cv
383.262 543.004 383.195 543.016 383.113 543.031 cv
383.027 543.039 382.922 543.047 382.801 543.047 cv
382.68 543.047 382.578 543.039 382.492 543.031 cv
382.406 543.016 382.336 543.004 382.289 542.984 cv
382.234 542.965 382.203 542.941 382.188 542.91 cv
382.168 542.887 382.156 542.852 382.16 542.805 cv
382.16 538.543 li
382.156 538.25 382.129 537.98 382.074 537.734 cv
382.016 537.492 381.93 537.281 381.816 537.102 cv
381.703 536.926 381.559 536.789 381.387 536.695 cv
381.207 536.602 381 536.555 380.766 536.555 cv
380.465 536.555 380.168 536.672 379.867 536.898 cv
379.566 537.133 379.238 537.465 378.887 537.902 cv
378.887 542.805 li
378.883 542.852 378.871 542.887 378.855 542.91 cv
378.832 542.941 378.801 542.965 378.754 542.984 cv
378.707 543.004 378.641 543.016 378.563 543.031 cv
378.477 543.039 378.371 543.047 378.242 543.047 cv
378.113 543.047 378.008 543.039 377.93 543.031 cv
377.844 543.016 377.777 543.004 377.73 542.984 cv
377.676 542.965 377.645 542.941 377.629 542.91 cv
377.609 542.887 377.598 542.852 377.602 542.805 cv
377.602 535.793 li
377.598 535.754 377.605 535.719 377.625 535.687 cv
377.637 535.66 377.668 535.637 377.719 535.609 cv
377.762 535.59 377.824 535.574 377.898 535.562 cv
377.969 535.559 378.063 535.555 378.188 535.551 cv
378.297 535.555 378.395 535.559 378.473 535.562 cv
378.547 535.574 378.605 535.59 378.648 535.609 cv
378.688 535.637 378.715 535.66 378.734 535.687 cv
378.75 535.719 378.758 535.754 378.762 535.793 cv
378.762 536.719 li
379.152 536.277 379.535 535.957 379.91 535.75 cv
380.277 535.547 380.656 535.441 381.039 535.441 cv
381.328 535.441 381.586 535.477 381.82 535.543 cv
382.047 535.613 382.254 535.707 382.434 535.828 cv
382.609 535.949 382.758 536.094 382.887 536.262 cv
383.008 536.434 383.113 536.625 383.199 536.828 cv
383.43 536.578 383.652 536.363 383.863 536.184 cv
384.074 536.012 384.277 535.867 384.473 535.754 cv
384.668 535.648 384.855 535.57 385.039 535.516 cv
385.223 535.469 385.41 535.441 385.598 535.441 cv
386.051 535.441 386.43 535.523 386.734 535.68 cv
387.039 535.844 387.285 536.055 387.48 536.316 cv
387.668 536.582 387.805 536.891 387.887 537.246 cv
387.965 537.602 388.004 537.977 388.008 538.371 cv
cp
f
395.637 542.812 mo
395.633 542.875 395.613 542.922 395.574 542.953 cv
395.531 542.984 395.473 543.008 395.402 543.023 cv
395.324 543.039 395.219 543.047 395.082 543.047 cv
394.945 543.047 394.836 543.039 394.758 543.023 cv
394.672 543.008 394.613 542.984 394.582 542.953 cv
394.543 542.922 394.527 542.875 394.531 542.812 cv
394.531 542.113 li
394.223 542.441 393.879 542.695 393.504 542.875 cv
393.125 543.059 392.727 543.145 392.309 543.148 cv
391.934 543.145 391.602 543.098 391.305 543.004 cv
391.008 542.906 390.754 542.77 390.543 542.586 cv
390.332 542.406 390.168 542.184 390.051 541.918 cv
389.934 541.656 389.875 541.355 389.879 541.012 cv
389.875 540.621 389.953 540.277 390.117 539.984 cv
390.273 539.695 390.508 539.453 390.813 539.262 cv
391.113 539.07 391.48 538.926 391.918 538.828 cv
392.352 538.734 392.844 538.687 393.391 538.684 cv
394.359 538.684 li
394.359 538.137 li
394.355 537.867 394.328 537.629 394.273 537.422 cv
394.215 537.215 394.121 537.043 393.996 536.902 cv
393.863 536.766 393.699 536.66 393.5 536.59 cv
393.293 536.52 393.043 536.484 392.754 536.484 cv
392.434 536.484 392.148 536.523 391.898 536.598 cv
391.641 536.676 391.422 536.758 391.234 536.848 cv
391.047 536.941 390.887 537.027 390.762 537.098 cv
390.629 537.176 390.535 537.211 390.477 537.211 cv
390.434 537.211 390.398 537.203 390.367 537.18 cv
390.336 537.164 390.309 537.133 390.285 537.086 cv
390.262 537.047 390.242 536.992 390.234 536.926 cv
390.219 536.863 390.215 536.793 390.219 536.711 cv
390.215 536.586 390.223 536.48 390.246 536.402 cv
390.262 536.328 390.309 536.258 390.379 536.187 cv
390.449 536.121 390.57 536.043 390.742 535.953 cv
390.914 535.863 391.109 535.781 391.332 535.703 cv
391.555 535.633 391.801 535.57 392.066 535.516 cv
392.332 535.469 392.598 535.441 392.871 535.441 cv
393.371 535.441 393.801 535.5 394.152 535.613 cv
394.504 535.73 394.789 535.898 395.012 536.117 cv
395.227 536.34 395.387 536.613 395.488 536.937 cv
395.586 537.27 395.633 537.652 395.637 538.082 cv
cp
394.359 539.609 mo
393.258 539.609 li
392.902 539.613 392.598 539.645 392.34 539.699 cv
392.078 539.762 391.863 539.848 391.691 539.965 cv
391.52 540.082 391.395 540.223 391.316 540.387 cv
391.234 540.551 391.191 540.738 391.195 540.949 cv
391.191 541.316 391.309 541.609 391.539 541.82 cv
391.77 542.039 392.094 542.145 392.512 542.145 cv
392.848 542.145 393.16 542.059 393.449 541.887 cv
393.738 541.715 394.039 541.453 394.359 541.098 cv
cp
f
403.859 536.109 mo
403.855 536.293 403.832 536.426 403.785 536.504 cv
403.734 536.586 403.672 536.625 403.598 536.625 cv
402.59 536.625 li
402.77 536.812 402.898 537.02 402.973 537.246 cv
403.043 537.473 403.078 537.707 403.082 537.949 cv
403.078 538.355 403.012 538.715 402.887 539.027 cv
402.754 539.34 402.57 539.605 402.328 539.816 cv
402.086 540.035 401.797 540.199 401.469 540.312 cv
401.133 540.43 400.766 540.488 400.363 540.484 cv
400.074 540.488 399.801 540.449 399.547 540.371 cv
399.285 540.297 399.09 540.203 398.953 540.086 cv
398.859 540.184 398.781 540.289 398.723 540.406 cv
398.66 540.527 398.629 540.664 398.633 540.816 cv
398.629 541 398.715 541.152 398.887 541.27 cv
399.055 541.395 399.277 541.457 399.559 541.465 cv
401.391 541.543 li
401.738 541.555 402.055 541.602 402.348 541.687 cv
402.637 541.773 402.891 541.898 403.105 542.055 cv
403.316 542.215 403.484 542.406 403.605 542.637 cv
403.723 542.871 403.781 543.141 403.785 543.445 cv
403.781 543.766 403.715 544.07 403.582 544.363 cv
403.445 544.652 403.238 544.906 402.961 545.129 cv
402.68 545.348 402.324 545.523 401.895 545.652 cv
401.465 545.777 400.957 545.84 400.371 545.844 cv
399.801 545.84 399.316 545.793 398.922 545.699 cv
398.523 545.602 398.199 545.469 397.945 545.305 cv
397.691 545.137 397.508 544.941 397.395 544.711 cv
397.277 544.477 397.219 544.223 397.223 543.957 cv
397.219 543.785 397.238 543.621 397.285 543.461 cv
397.324 543.297 397.387 543.145 397.473 543 cv
397.555 542.855 397.664 542.719 397.793 542.582 cv
397.918 542.453 398.063 542.32 398.234 542.191 cv
397.977 542.062 397.789 541.898 397.668 541.699 cv
397.547 541.504 397.488 541.293 397.488 541.059 cv
397.488 540.746 397.551 540.461 397.68 540.211 cv
397.809 539.961 397.969 539.738 398.164 539.539 cv
398 539.348 397.875 539.133 397.781 538.891 cv
397.688 538.652 397.641 538.359 397.641 538.012 cv
397.641 537.617 397.707 537.258 397.844 536.937 cv
397.977 536.621 398.164 536.355 398.406 536.137 cv
398.645 535.922 398.93 535.754 399.266 535.633 cv
399.598 535.52 399.965 535.461 400.363 535.457 cv
400.574 535.461 400.773 535.473 400.957 535.492 cv
401.141 535.52 401.313 535.551 401.477 535.59 cv
403.598 535.59 li
403.684 535.594 403.75 535.637 403.793 535.719 cv
403.836 535.809 403.855 535.937 403.859 536.109 cv
cp
401.852 537.957 mo
401.848 537.484 401.715 537.113 401.457 536.84 cv
401.191 536.574 400.82 536.437 400.34 536.437 cv
400.086 536.437 399.867 536.48 399.688 536.562 cv
399.5 536.648 399.348 536.762 399.227 536.906 cv
399.105 537.055 399.016 537.223 398.957 537.41 cv
398.895 537.598 398.863 537.797 398.867 538.004 cv
398.863 538.469 398.996 538.832 399.258 539.098 cv
399.52 539.363 399.887 539.496 400.363 539.492 cv
400.613 539.496 400.832 539.457 401.023 539.371 cv
401.207 539.293 401.363 539.18 401.488 539.039 cv
401.609 538.898 401.699 538.734 401.762 538.543 cv
401.816 538.359 401.848 538.164 401.852 537.957 cv
cp
402.496 543.516 mo
402.492 543.211 402.367 542.98 402.125 542.816 cv
401.875 542.656 401.543 542.566 401.125 542.555 cv
399.309 542.492 li
399.141 542.625 399.004 542.75 398.902 542.863 cv
398.793 542.98 398.711 543.09 398.648 543.199 cv
398.586 543.305 398.543 543.41 398.52 543.516 cv
398.496 543.617 398.484 543.723 398.484 543.832 cv
398.484 544.168 398.652 544.422 398.996 544.602 cv
399.336 544.773 399.816 544.863 400.434 544.863 cv
400.82 544.863 401.145 544.824 401.41 544.75 cv
401.668 544.672 401.879 544.57 402.043 544.449 cv
402.199 544.32 402.316 544.18 402.391 544.02 cv
402.457 543.859 402.492 543.691 402.496 543.516 cv
cp
f
411.418 538.996 mo
411.414 539.199 411.363 539.34 411.266 539.426 cv
411.16 539.512 411.043 539.555 410.918 539.555 cv
406.301 539.555 li
406.297 539.945 406.336 540.297 406.418 540.609 cv
406.492 540.922 406.625 541.191 406.809 541.41 cv
406.988 541.637 407.223 541.809 407.52 541.926 cv
407.809 542.051 408.168 542.109 408.594 542.105 cv
408.926 542.109 409.223 542.082 409.484 542.023 cv
409.746 541.973 409.973 541.91 410.164 541.84 cv
410.352 541.773 410.508 541.715 410.633 541.656 cv
410.754 541.605 410.848 541.578 410.91 541.574 cv
410.945 541.578 410.977 541.586 411.008 541.602 cv
411.035 541.621 411.059 541.648 411.078 541.684 cv
411.09 541.723 411.102 541.773 411.113 541.836 cv
411.117 541.902 411.121 541.98 411.125 542.074 cv
411.121 542.145 411.117 542.203 411.117 542.25 cv
411.109 542.297 411.105 542.34 411.098 542.379 cv
411.09 542.418 411.074 542.453 411.059 542.484 cv
411.035 542.516 411.012 542.547 410.988 542.574 cv
410.957 542.605 410.875 542.652 410.734 542.715 cv
410.594 542.781 410.41 542.844 410.188 542.906 cv
409.961 542.969 409.703 543.023 409.41 543.074 cv
409.117 543.121 408.805 543.145 408.473 543.148 cv
407.895 543.145 407.387 543.066 406.957 542.906 cv
406.52 542.746 406.156 542.508 405.863 542.191 cv
405.563 541.875 405.34 541.48 405.191 541 cv
405.043 540.523 404.969 539.965 404.969 539.328 cv
404.969 538.73 405.043 538.191 405.199 537.707 cv
405.352 537.23 405.578 536.82 405.875 536.484 cv
406.168 536.148 406.523 535.891 406.938 535.711 cv
407.352 535.531 407.816 535.441 408.332 535.441 cv
408.883 535.441 409.352 535.531 409.738 535.707 cv
410.125 535.887 410.441 536.125 410.695 536.422 cv
410.941 536.723 411.125 537.074 411.242 537.473 cv
411.355 537.879 411.414 538.309 411.418 538.762 cv
cp
410.125 538.613 mo
410.141 537.937 409.988 537.406 409.672 537.023 cv
409.355 536.641 408.887 536.449 408.27 536.445 cv
407.945 536.449 407.664 536.508 407.426 536.625 cv
407.184 536.746 406.984 536.906 406.824 537.102 cv
406.66 537.301 406.535 537.531 406.449 537.793 cv
406.359 538.055 406.309 538.328 406.301 538.613 cv
cp
f
417.785 540.895 mo
417.781 541.258 417.715 541.578 417.586 541.855 cv
417.453 542.137 417.266 542.371 417.023 542.562 cv
416.777 542.758 416.484 542.902 416.148 543 cv
415.809 543.098 415.438 543.145 415.035 543.148 cv
414.781 543.145 414.543 543.125 414.32 543.09 cv
414.094 543.047 413.895 543 413.715 542.941 cv
413.535 542.883 413.383 542.82 413.258 542.754 cv
413.133 542.691 413.039 542.633 412.984 542.578 cv
412.926 542.527 412.887 542.457 412.863 542.359 cv
412.836 542.27 412.824 542.141 412.824 541.98 cv
412.824 541.883 412.828 541.801 412.84 541.73 cv
412.848 541.664 412.859 541.609 412.879 541.566 cv
412.891 541.527 412.914 541.496 412.941 541.477 cv
412.969 541.461 413 541.453 413.039 541.449 cv
413.094 541.453 413.18 541.488 413.293 541.555 cv
413.402 541.629 413.539 541.707 413.707 541.785 cv
413.867 541.871 414.059 541.945 414.285 542.016 cv
414.504 542.086 414.762 542.121 415.059 542.121 cv
415.273 542.121 415.473 542.098 415.652 542.051 cv
415.828 542.004 415.98 541.937 416.109 541.844 cv
416.238 541.758 416.34 541.641 416.41 541.496 cv
416.48 541.359 416.516 541.191 416.516 540.996 cv
416.516 540.801 416.465 540.637 416.363 540.5 cv
416.262 540.367 416.125 540.246 415.961 540.141 cv
415.793 540.039 415.609 539.949 415.402 539.863 cv
415.191 539.785 414.977 539.699 414.758 539.609 cv
414.539 539.523 414.324 539.422 414.113 539.309 cv
413.902 539.199 413.711 539.066 413.547 538.902 cv
413.375 538.746 413.242 538.551 413.145 538.324 cv
413.039 538.102 412.988 537.836 412.992 537.523 cv
412.988 537.25 413.043 536.984 413.152 536.73 cv
413.258 536.48 413.418 536.262 413.633 536.07 cv
413.844 535.883 414.109 535.73 414.43 535.613 cv
414.75 535.5 415.121 535.441 415.551 535.441 cv
415.734 535.441 415.922 535.457 416.109 535.488 cv
416.293 535.52 416.461 535.559 416.617 535.605 cv
416.766 535.652 416.895 535.703 417.004 535.758 cv
417.105 535.812 417.188 535.863 417.246 535.902 cv
417.297 535.949 417.332 535.984 417.355 536.012 cv
417.371 536.043 417.387 536.078 417.395 536.113 cv
417.402 536.156 417.41 536.203 417.418 536.258 cv
417.426 536.316 417.43 536.387 417.43 536.469 cv
417.43 536.559 417.426 536.637 417.418 536.699 cv
417.41 536.77 417.395 536.82 417.379 536.859 cv
417.355 536.902 417.336 536.934 417.313 536.949 cv
417.285 536.969 417.254 536.977 417.227 536.977 cv
417.176 536.977 417.109 536.949 417.023 536.891 cv
416.934 536.836 416.82 536.773 416.68 536.707 cv
416.539 536.645 416.371 536.586 416.184 536.523 cv
415.992 536.469 415.777 536.437 415.535 536.437 cv
415.313 536.437 415.121 536.465 414.957 536.512 cv
414.789 536.566 414.652 536.637 414.547 536.723 cv
414.441 536.816 414.359 536.922 414.309 537.047 cv
414.25 537.172 414.223 537.309 414.227 537.453 cv
414.223 537.656 414.273 537.824 414.379 537.961 cv
414.48 538.102 414.617 538.223 414.785 538.324 cv
414.949 538.43 415.141 538.523 415.355 538.605 cv
415.566 538.691 415.781 538.777 416.004 538.863 cv
416.223 538.953 416.441 539.055 416.66 539.16 cv
416.875 539.27 417.066 539.398 417.234 539.555 cv
417.398 539.711 417.531 539.898 417.633 540.117 cv
417.73 540.336 417.781 540.598 417.785 540.895 cv
cp
f
159.164 13.758 mo
159.16 14.289 159.063 14.754 158.867 15.152 cv
158.668 15.555 158.402 15.891 158.066 16.156 cv
157.727 16.426 157.328 16.625 156.879 16.758 cv
156.426 16.891 155.945 16.957 155.434 16.961 cv
155.082 16.957 154.758 16.93 154.461 16.875 cv
154.16 16.816 153.898 16.75 153.672 16.668 cv
153.441 16.59 153.25 16.504 153.098 16.414 cv
152.945 16.328 152.836 16.25 152.77 16.18 cv
152.699 16.113 152.648 16.016 152.625 15.891 cv
152.594 15.766 152.582 15.582 152.582 15.34 cv
152.582 15.18 152.586 15.047 152.598 14.934 cv
152.605 14.828 152.621 14.738 152.648 14.668 cv
152.668 14.602 152.699 14.555 152.742 14.523 cv
152.777 14.5 152.824 14.484 152.875 14.48 cv
152.945 14.484 153.047 14.527 153.184 14.609 cv
153.313 14.699 153.484 14.793 153.695 14.895 cv
153.902 15 154.148 15.098 154.438 15.18 cv
154.723 15.27 155.059 15.312 155.441 15.309 cv
155.691 15.312 155.914 15.281 156.109 15.219 cv
156.305 15.16 156.473 15.074 156.613 14.965 cv
156.75 14.855 156.855 14.723 156.93 14.562 cv
157 14.402 157.035 14.223 157.039 14.023 cv
157.035 13.797 156.973 13.602 156.852 13.434 cv
156.723 13.273 156.559 13.129 156.363 13 cv
156.16 12.875 155.934 12.754 155.68 12.641 cv
155.426 12.531 155.164 12.414 154.895 12.285 cv
154.621 12.164 154.359 12.02 154.105 11.859 cv
153.852 11.703 153.625 11.516 153.426 11.293 cv
153.223 11.074 153.059 10.812 152.938 10.508 cv
152.813 10.207 152.75 9.84802 152.754 9.42603 cv
152.75 8.94501 152.84 8.52002 153.02 8.15198 cv
153.195 7.789 153.438 7.48401 153.746 7.23798 cv
154.047 7 154.406 6.82001 154.82 6.69897 cv
155.234 6.58197 155.672 6.52301 156.133 6.52002 cv
156.371 6.52301 156.609 6.539 156.852 6.57397 cv
157.09 6.61298 157.313 6.664 157.52 6.72302 cv
157.727 6.78497 157.91 6.85498 158.074 6.92999 cv
158.23 7.01202 158.34 7.07397 158.395 7.125 cv
158.445 7.17999 158.48 7.22699 158.5 7.258 cv
158.516 7.297 158.531 7.34399 158.547 7.40198 cv
158.559 7.46503 158.566 7.539 158.574 7.62903 cv
158.578 7.72302 158.582 7.836 158.582 7.96899 cv
158.582 8.12097 158.578 8.25 158.57 8.35199 cv
158.563 8.45697 158.547 8.54303 158.531 8.60498 cv
158.508 8.67603 158.484 8.72302 158.453 8.75403 cv
158.418 8.78497 158.371 8.80103 158.316 8.80103 cv
158.258 8.80103 158.168 8.76599 158.043 8.69098 cv
157.918 8.62097 157.762 8.54303 157.582 8.453 cv
157.398 8.37097 157.191 8.29303 156.953 8.22302 cv
156.711 8.15601 156.445 8.12097 156.164 8.117 cv
155.938 8.12097 155.746 8.14801 155.582 8.19897 cv
155.414 8.25403 155.273 8.328 155.164 8.422 cv
155.051 8.52002 154.969 8.63702 154.914 8.77002 cv
154.859 8.90997 154.832 9.05103 154.832 9.19897 cv
154.832 9.42603 154.891 9.62097 155.016 9.78101 cv
155.133 9.94501 155.297 10.09 155.508 10.215 cv
155.711 10.344 155.945 10.465 156.203 10.574 cv
156.461 10.691 156.727 10.809 157 10.93 cv
157.27 11.059 157.531 11.199 157.793 11.355 cv
158.051 11.512 158.285 11.703 158.488 11.922 cv
158.691 12.148 158.852 12.406 158.977 12.703 cv
159.098 13 159.16 13.352 159.164 13.758 cv
cp
f
165.883 15.41 mo
165.879 15.547 165.875 15.66 165.871 15.75 cv
165.859 15.844 165.852 15.922 165.84 15.98 cv
165.824 16.043 165.809 16.094 165.793 16.129 cv
165.773 16.172 165.73 16.219 165.672 16.277 cv
165.605 16.34 165.5 16.414 165.352 16.496 cv
165.199 16.586 165.027 16.664 164.836 16.727 cv
164.645 16.797 164.438 16.848 164.211 16.891 cv
163.984 16.93 163.75 16.949 163.516 16.953 cv
162.977 16.949 162.504 16.871 162.09 16.703 cv
161.676 16.539 161.328 16.293 161.051 15.969 cv
160.766 15.645 160.555 15.25 160.414 14.781 cv
160.273 14.316 160.203 13.777 160.203 13.172 cv
160.203 12.477 160.289 11.879 160.461 11.371 cv
160.633 10.867 160.875 10.445 161.191 10.113 cv
161.5 9.78101 161.867 9.53497 162.297 9.37097 cv
162.719 9.211 163.188 9.12903 163.699 9.12903 cv
163.906 9.12903 164.109 9.14801 164.313 9.18402 cv
164.508 9.22302 164.695 9.27301 164.871 9.33197 cv
165.043 9.39801 165.199 9.46899 165.34 9.54303 cv
165.477 9.625 165.574 9.69098 165.633 9.74597 cv
165.688 9.80499 165.727 9.85199 165.754 9.88702 cv
165.773 9.92999 165.793 9.97998 165.809 10.039 cv
165.82 10.105 165.832 10.184 165.84 10.27 cv
165.848 10.363 165.852 10.473 165.852 10.602 cv
165.852 10.906 165.824 11.117 165.773 11.238 cv
165.719 11.359 165.652 11.422 165.57 11.418 cv
165.48 11.422 165.387 11.387 165.289 11.312 cv
165.188 11.242 165.07 11.16 164.938 11.07 cv
164.805 10.984 164.645 10.902 164.457 10.828 cv
164.27 10.758 164.043 10.723 163.785 10.719 cv
163.273 10.723 162.887 10.918 162.617 11.309 cv
162.344 11.699 162.207 12.273 162.211 13.031 cv
162.207 13.406 162.242 13.738 162.313 14.023 cv
162.379 14.309 162.477 14.547 162.613 14.738 cv
162.742 14.934 162.91 15.078 163.113 15.172 cv
163.313 15.27 163.543 15.316 163.809 15.316 cv
164.074 15.316 164.309 15.277 164.508 15.195 cv
164.699 15.117 164.867 15.027 165.016 14.926 cv
165.156 14.828 165.281 14.738 165.383 14.656 cv
165.48 14.578 165.563 14.539 165.633 14.535 cv
165.676 14.539 165.715 14.551 165.75 14.574 cv
165.777 14.602 165.801 14.648 165.824 14.719 cv
165.84 14.789 165.855 14.879 165.867 14.988 cv
165.875 15.098 165.879 15.238 165.883 15.41 cv
cp
f
173.152 16.539 mo
173.148 16.617 173.121 16.672 173.074 16.711 cv
173.02 16.754 172.938 16.781 172.828 16.801 cv
172.711 16.816 172.547 16.828 172.332 16.828 cv
172.094 16.828 171.922 16.816 171.82 16.801 cv
171.711 16.781 171.637 16.754 171.598 16.711 cv
171.551 16.672 171.531 16.617 171.531 16.539 cv
171.531 15.988 li
171.242 16.297 170.914 16.535 170.551 16.703 cv
170.184 16.875 169.777 16.957 169.332 16.961 cv
168.961 16.957 168.621 16.91 168.313 16.816 cv
168.004 16.723 167.738 16.582 167.512 16.387 cv
167.285 16.199 167.109 15.965 166.984 15.684 cv
166.859 15.406 166.797 15.078 166.801 14.699 cv
166.797 14.301 166.875 13.949 167.035 13.645 cv
167.191 13.348 167.43 13.102 167.746 12.906 cv
168.059 12.715 168.449 12.57 168.918 12.473 cv
169.387 12.383 169.93 12.336 170.547 12.332 cv
171.227 12.332 li
171.227 11.91 li
171.227 11.695 171.203 11.504 171.16 11.34 cv
171.113 11.18 171.039 11.043 170.941 10.93 cv
170.836 10.824 170.703 10.742 170.535 10.687 cv
170.363 10.637 170.152 10.613 169.91 10.609 cv
169.578 10.613 169.285 10.648 169.031 10.719 cv
168.77 10.793 168.543 10.875 168.348 10.961 cv
168.148 11.055 167.984 11.133 167.855 11.203 cv
167.719 11.277 167.609 11.316 167.531 11.312 cv
167.469 11.316 167.418 11.297 167.379 11.258 cv
167.332 11.223 167.297 11.172 167.27 11.102 cv
167.238 11.039 167.215 10.953 167.203 10.852 cv
167.184 10.754 167.176 10.645 167.18 10.523 cv
167.176 10.363 167.191 10.238 167.219 10.141 cv
167.242 10.051 167.289 9.96503 167.367 9.88702 cv
167.438 9.81201 167.566 9.72998 167.75 9.64099 cv
167.93 9.55103 168.141 9.46503 168.387 9.38702 cv
168.629 9.30902 168.898 9.24597 169.188 9.19501 cv
169.477 9.14801 169.773 9.125 170.082 9.12097 cv
170.625 9.125 171.09 9.17603 171.477 9.28101 cv
171.863 9.39099 172.184 9.55499 172.434 9.77301 cv
172.684 9.992 172.863 10.277 172.98 10.625 cv
173.09 10.977 173.148 11.391 173.152 11.863 cv
cp
171.227 13.562 mo
170.477 13.562 li
170.16 13.566 169.891 13.59 169.668 13.633 cv
169.441 13.684 169.258 13.754 169.121 13.844 cv
168.977 13.941 168.875 14.055 168.813 14.184 cv
168.746 14.32 168.711 14.469 168.715 14.637 cv
168.711 14.93 168.805 15.16 168.992 15.324 cv
169.176 15.492 169.434 15.574 169.762 15.574 cv
170.035 15.574 170.285 15.504 170.52 15.363 cv
170.746 15.223 170.984 15.02 171.227 14.746 cv
cp
f
177.074 16.516 mo
177.07 16.57 177.055 16.613 177.027 16.652 cv
176.992 16.691 176.938 16.727 176.867 16.75 cv
176.789 16.777 176.691 16.793 176.566 16.809 cv
176.441 16.82 176.281 16.828 176.094 16.828 cv
175.898 16.828 175.742 16.82 175.617 16.809 cv
175.492 16.793 175.391 16.777 175.316 16.75 cv
175.238 16.727 175.184 16.691 175.156 16.652 cv
175.121 16.613 175.105 16.57 175.109 16.516 cv
175.109 6.27002 li
175.105 6.21899 175.121 6.172 175.156 6.12903 cv
175.184 6.09003 175.238 6.05499 175.316 6.02301 cv
175.391 5.99597 175.492 5.97699 175.617 5.95697 cv
175.742 5.94501 175.898 5.93701 176.094 5.93402 cv
176.281 5.93701 176.441 5.94501 176.566 5.95697 cv
176.691 5.97699 176.789 5.99597 176.867 6.02301 cv
176.938 6.05499 176.992 6.09003 177.027 6.12903 cv
177.055 6.172 177.07 6.21899 177.074 6.27002 cv
cp
f
181.051 16.516 mo
181.047 16.57 181.031 16.613 181.004 16.652 cv
180.969 16.691 180.914 16.727 180.844 16.75 cv
180.766 16.777 180.668 16.793 180.543 16.809 cv
180.418 16.82 180.258 16.828 180.07 16.828 cv
179.875 16.828 179.719 16.82 179.594 16.809 cv
179.469 16.793 179.367 16.777 179.293 16.75 cv
179.215 16.727 179.16 16.691 179.133 16.652 cv
179.098 16.613 179.082 16.57 179.086 16.516 cv
179.086 9.58197 li
179.082 9.53101 179.098 9.48401 179.133 9.44501 cv
179.16 9.40601 179.215 9.375 179.293 9.34399 cv
179.367 9.32001 179.469 9.297 179.594 9.27698 cv
179.719 9.26599 179.875 9.258 180.07 9.25403 cv
180.258 9.258 180.418 9.26599 180.543 9.27698 cv
180.668 9.297 180.766 9.32001 180.844 9.34399 cv
180.914 9.375 180.969 9.40601 181.004 9.44501 cv
181.031 9.48401 181.047 9.53101 181.051 9.58197 cv
cp
181.199 7.211 mo
181.199 7.60901 181.117 7.883 180.957 8.03101 cv
180.793 8.18402 180.496 8.258 180.063 8.25403 cv
179.617 8.258 179.316 8.18402 179.168 8.039 cv
179.012 7.89502 178.938 7.633 178.938 7.25 cv
178.938 6.85498 179.016 6.58197 179.176 6.42999 cv
179.332 6.27698 179.633 6.19897 180.078 6.19897 cv
180.512 6.19897 180.809 6.27301 180.965 6.422 cv
181.121 6.57001 181.199 6.836 181.199 7.211 cv
cp
f
189.652 16.516 mo
189.648 16.57 189.633 16.613 189.605 16.652 cv
189.57 16.691 189.52 16.727 189.449 16.75 cv
189.375 16.777 189.273 16.793 189.148 16.809 cv
189.02 16.82 188.863 16.828 188.68 16.828 cv
188.484 16.828 188.324 16.82 188.199 16.809 cv
188.07 16.793 187.969 16.777 187.898 16.75 cv
187.82 16.727 187.77 16.691 187.742 16.652 cv
187.707 16.613 187.691 16.57 187.695 16.516 cv
187.695 12.551 li
187.691 12.215 187.668 11.949 187.621 11.754 cv
187.57 11.562 187.496 11.398 187.406 11.262 cv
187.313 11.125 187.195 11.02 187.047 10.941 cv
186.898 10.867 186.723 10.828 186.527 10.828 cv
186.273 10.828 186.023 10.922 185.77 11.102 cv
185.516 11.285 185.25 11.547 184.977 11.895 cv
184.977 16.516 li
184.973 16.57 184.957 16.613 184.93 16.652 cv
184.895 16.691 184.84 16.727 184.77 16.75 cv
184.691 16.777 184.594 16.793 184.469 16.809 cv
184.344 16.82 184.184 16.828 183.996 16.828 cv
183.801 16.828 183.645 16.82 183.52 16.809 cv
183.395 16.793 183.293 16.777 183.219 16.75 cv
183.141 16.727 183.086 16.691 183.059 16.652 cv
183.023 16.613 183.008 16.57 183.012 16.516 cv
183.012 9.56598 li
183.008 9.52002 183.023 9.47302 183.051 9.42999 cv
183.074 9.39502 183.121 9.36298 183.191 9.33197 cv
183.258 9.30902 183.344 9.289 183.453 9.27301 cv
183.559 9.26599 183.691 9.258 183.855 9.25403 cv
184.02 9.258 184.156 9.26599 184.266 9.27301 cv
184.371 9.289 184.457 9.30902 184.52 9.33197 cv
184.578 9.36298 184.621 9.39502 184.648 9.42999 cv
184.672 9.47302 184.684 9.52002 184.688 9.56598 cv
184.688 10.367 li
185.07 9.95697 185.461 9.64502 185.859 9.43402 cv
186.254 9.22699 186.672 9.125 187.105 9.12097 cv
187.574 9.125 187.973 9.203 188.301 9.35498 cv
188.625 9.51599 188.887 9.72699 189.086 9.992 cv
189.285 10.262 189.43 10.574 189.52 10.93 cv
189.605 11.289 189.648 11.719 189.652 12.223 cv
cp
f
197.848 10.047 mo
197.844 10.301 197.816 10.484 197.762 10.602 cv
197.703 10.723 197.633 10.781 197.555 10.781 cv
196.734 10.781 li
196.848 10.906 196.93 11.051 196.98 11.207 cv
197.027 11.367 197.051 11.531 197.055 11.699 cv
197.051 12.109 196.984 12.469 196.852 12.781 cv
196.715 13.098 196.52 13.363 196.27 13.574 cv
196.016 13.793 195.715 13.957 195.359 14.066 cv
195 14.184 194.602 14.238 194.172 14.234 cv
193.945 14.238 193.734 14.211 193.531 14.152 cv
193.328 14.102 193.172 14.039 193.063 13.961 cv
193 14.031 192.941 14.109 192.895 14.203 cv
192.844 14.297 192.82 14.402 192.824 14.512 cv
192.82 14.668 192.887 14.789 193.02 14.883 cv
193.148 14.98 193.336 15.035 193.578 15.043 cv
195.27 15.105 li
195.664 15.121 196.016 15.18 196.324 15.273 cv
196.633 15.375 196.895 15.508 197.105 15.68 cv
197.316 15.855 197.477 16.066 197.586 16.309 cv
197.695 16.555 197.75 16.828 197.754 17.141 cv
197.75 17.477 197.676 17.801 197.527 18.109 cv
197.379 18.41 197.152 18.672 196.852 18.898 cv
196.547 19.117 196.168 19.297 195.715 19.43 cv
195.258 19.559 194.727 19.621 194.125 19.625 cv
193.527 19.621 193.023 19.574 192.605 19.484 cv
192.188 19.387 191.844 19.258 191.578 19.094 cv
191.309 18.926 191.113 18.727 190.996 18.5 cv
190.871 18.266 190.813 18.012 190.813 17.738 cv
190.813 17.566 190.832 17.406 190.879 17.25 cv
190.918 17.094 190.984 16.941 191.074 16.801 cv
191.156 16.656 191.262 16.523 191.387 16.391 cv
191.512 16.262 191.652 16.137 191.816 16.016 cv
191.59 15.902 191.418 15.742 191.297 15.531 cv
191.176 15.328 191.117 15.102 191.117 14.855 cv
191.117 14.555 191.184 14.277 191.324 14.02 cv
191.461 13.77 191.645 13.539 191.871 13.336 cv
191.688 13.156 191.543 12.941 191.434 12.684 cv
191.324 12.434 191.27 12.113 191.273 11.73 cv
191.27 11.328 191.34 10.969 191.484 10.645 cv
191.625 10.328 191.824 10.059 192.082 9.836 cv
192.336 9.617 192.641 9.44501 192.992 9.328 cv
193.344 9.211 193.734 9.15198 194.164 9.15198 cv
194.383 9.15198 194.59 9.16803 194.789 9.19098 cv
194.988 9.22302 195.176 9.258 195.348 9.30103 cv
197.555 9.30103 li
197.637 9.30499 197.707 9.36298 197.766 9.47302 cv
197.816 9.59003 197.844 9.78101 197.848 10.047 cv
cp
195.332 11.691 mo
195.328 11.32 195.227 11.031 195.02 10.82 cv
194.809 10.617 194.516 10.512 194.141 10.508 cv
193.945 10.512 193.773 10.543 193.633 10.605 cv
193.484 10.672 193.363 10.762 193.27 10.871 cv
193.168 10.984 193.098 11.113 193.055 11.262 cv
193.004 11.41 192.98 11.566 192.984 11.723 cv
192.98 12.082 193.086 12.359 193.297 12.562 cv
193.504 12.77 193.793 12.875 194.164 12.871 cv
194.359 12.875 194.527 12.844 194.676 12.777 cv
194.816 12.719 194.938 12.633 195.039 12.52 cv
195.133 12.414 195.207 12.285 195.258 12.141 cv
195.305 12 195.328 11.852 195.332 11.691 cv
cp
195.793 17.242 mo
195.793 17.004 195.699 16.828 195.512 16.703 cv
195.324 16.582 195.066 16.512 194.738 16.5 cv
193.344 16.461 li
193.207 16.562 193.098 16.656 193.02 16.746 cv
192.938 16.836 192.875 16.922 192.828 17.008 cv
192.777 17.09 192.742 17.172 192.73 17.25 cv
192.711 17.328 192.703 17.406 192.707 17.492 cv
192.703 17.746 192.836 17.945 193.098 18.082 cv
193.359 18.215 193.73 18.281 194.211 18.285 cv
194.504 18.281 194.75 18.25 194.957 18.195 cv
195.156 18.133 195.32 18.055 195.449 17.957 cv
195.57 17.855 195.66 17.746 195.715 17.625 cv
195.766 17.504 195.793 17.375 195.793 17.242 cv
cp
f
204.043 14.551 mo
204.039 14.949 203.965 15.297 203.82 15.598 cv
203.672 15.898 203.465 16.152 203.195 16.352 cv
202.922 16.559 202.602 16.707 202.234 16.809 cv
201.867 16.906 201.465 16.957 201.035 16.961 cv
200.77 16.957 200.523 16.937 200.289 16.902 cv
200.055 16.859 199.844 16.812 199.656 16.754 cv
199.469 16.695 199.313 16.633 199.188 16.57 cv
199.063 16.508 198.969 16.449 198.914 16.395 cv
198.855 16.34 198.813 16.258 198.785 16.141 cv
198.75 16.027 198.734 15.852 198.738 15.621 cv
198.734 15.473 198.742 15.352 198.754 15.258 cv
198.762 15.168 198.777 15.098 198.801 15.039 cv
198.82 14.988 198.844 14.949 198.879 14.93 cv
198.906 14.914 198.945 14.906 198.992 14.902 cv
199.047 14.906 199.133 14.937 199.246 15 cv
199.355 15.066 199.492 15.141 199.664 15.215 cv
199.828 15.297 200.023 15.367 200.242 15.434 cv
200.461 15.504 200.711 15.539 200.996 15.535 cv
201.172 15.539 201.328 15.52 201.469 15.48 cv
201.602 15.445 201.723 15.395 201.828 15.324 cv
201.926 15.258 202 15.172 202.055 15.066 cv
202.102 14.965 202.129 14.844 202.133 14.707 cv
202.129 14.551 202.082 14.418 201.988 14.309 cv
201.895 14.199 201.766 14.102 201.609 14.016 cv
201.445 13.934 201.266 13.855 201.07 13.781 cv
200.867 13.711 200.664 13.633 200.453 13.539 cv
200.242 13.453 200.035 13.352 199.84 13.234 cv
199.637 13.125 199.457 12.984 199.301 12.816 cv
199.137 12.652 199.012 12.453 198.918 12.215 cv
198.824 11.984 198.777 11.703 198.777 11.371 cv
198.777 11.043 198.84 10.738 198.969 10.457 cv
199.098 10.184 199.285 9.94501 199.531 9.74597 cv
199.773 9.55103 200.07 9.39801 200.422 9.28497 cv
200.77 9.17999 201.164 9.125 201.605 9.12097 cv
201.82 9.125 202.031 9.14099 202.238 9.16803 cv
202.441 9.203 202.629 9.242 202.797 9.28497 cv
202.961 9.336 203.102 9.38702 203.219 9.43701 cv
203.332 9.49597 203.414 9.54303 203.465 9.578 cv
203.512 9.62097 203.547 9.65997 203.57 9.69501 cv
203.59 9.73798 203.602 9.78497 203.613 9.836 cv
203.621 9.89099 203.633 9.95697 203.641 10.035 cv
203.648 10.121 203.652 10.219 203.652 10.336 cv
203.652 10.477 203.648 10.594 203.641 10.68 cv
203.633 10.773 203.617 10.844 203.602 10.891 cv
203.582 10.945 203.559 10.98 203.531 10.996 cv
203.496 11.02 203.461 11.027 203.422 11.023 cv
203.371 11.027 203.297 11 203.203 10.941 cv
203.102 10.891 202.98 10.832 202.832 10.766 cv
202.684 10.707 202.512 10.648 202.316 10.59 cv
202.121 10.539 201.898 10.512 201.652 10.508 cv
201.473 10.512 201.32 10.531 201.191 10.562 cv
201.059 10.602 200.949 10.652 200.871 10.719 cv
200.785 10.789 200.723 10.867 200.684 10.957 cv
200.637 11.051 200.617 11.148 200.621 11.25 cv
200.617 11.41 200.668 11.547 200.77 11.652 cv
200.867 11.766 200.996 11.859 201.16 11.941 cv
201.32 12.027 201.504 12.105 201.711 12.176 cv
201.914 12.25 202.121 12.332 202.332 12.414 cv
202.539 12.504 202.746 12.602 202.957 12.715 cv
203.16 12.828 203.344 12.969 203.504 13.133 cv
203.664 13.301 203.793 13.5 203.895 13.73 cv
203.988 13.965 204.039 14.238 204.043 14.551 cv
cp
f
216.152 12.969 mo
216.148 13.566 216.07 14.109 215.918 14.594 cv
215.758 15.086 215.523 15.504 215.207 15.855 cv
214.891 16.207 214.492 16.48 214.016 16.672 cv
213.535 16.863 212.977 16.957 212.34 16.961 cv
211.719 16.957 211.18 16.875 210.727 16.703 cv
210.266 16.535 209.887 16.285 209.59 15.957 cv
209.285 15.633 209.063 15.23 208.918 14.75 cv
208.773 14.273 208.703 13.727 208.703 13.109 cv
208.703 12.52 208.781 11.98 208.938 11.488 cv
209.094 11 209.332 10.578 209.652 10.227 cv
209.969 9.87903 210.363 9.60498 210.84 9.40997 cv
211.313 9.21899 211.871 9.125 212.512 9.12097 cv
213.137 9.125 213.676 9.20697 214.133 9.375 cv
214.59 9.547 214.969 9.797 215.266 10.121 cv
215.563 10.449 215.785 10.852 215.934 11.328 cv
216.078 11.809 216.148 12.355 216.152 12.969 cv
cp
214.133 13.047 mo
214.129 12.711 214.102 12.395 214.051 12.102 cv
213.992 11.816 213.898 11.566 213.773 11.352 cv
213.641 11.141 213.469 10.973 213.258 10.852 cv
213.039 10.734 212.77 10.676 212.441 10.672 cv
212.152 10.676 211.898 10.73 211.68 10.832 cv
211.461 10.941 211.281 11.098 211.141 11.301 cv
211 11.508 210.895 11.754 210.824 12.039 cv
210.754 12.332 210.719 12.66 210.719 13.023 cv
210.719 13.371 210.746 13.687 210.805 13.973 cv
210.859 14.266 210.953 14.516 211.082 14.727 cv
211.207 14.941 211.379 15.105 211.602 15.219 cv
211.816 15.34 212.086 15.398 212.41 15.395 cv
212.703 15.398 212.961 15.344 213.184 15.234 cv
213.398 15.129 213.578 14.977 213.719 14.77 cv
213.859 14.57 213.961 14.324 214.031 14.035 cv
214.094 13.75 214.129 13.422 214.133 13.047 cv
cp
f
221.902 6.914 mo
221.898 7.06598 221.895 7.18701 221.887 7.27698 cv
221.875 7.37097 221.859 7.44098 221.84 7.48798 cv
221.816 7.539 221.793 7.57397 221.77 7.59003 cv
221.742 7.60901 221.715 7.617 221.684 7.617 cv
221.645 7.617 221.602 7.60901 221.563 7.59003 cv
221.516 7.57397 221.461 7.55499 221.398 7.53101 cv
221.328 7.51202 221.254 7.492 221.168 7.47302 cv
221.078 7.45697 220.973 7.44897 220.855 7.44501 cv
220.711 7.44897 220.59 7.46899 220.492 7.51202 cv
220.391 7.55902 220.309 7.62903 220.242 7.72302 cv
220.172 7.82001 220.121 7.94501 220.094 8.09802 cv
220.059 8.25 220.043 8.43701 220.047 8.65997 cv
220.047 9.30103 li
221.316 9.30103 li
221.359 9.30499 221.402 9.31598 221.445 9.34003 cv
221.48 9.367 221.516 9.40997 221.543 9.46899 cv
221.566 9.53101 221.586 9.61298 221.602 9.71503 cv
221.613 9.81598 221.617 9.94501 221.621 10.094 cv
221.617 10.383 221.594 10.586 221.543 10.707 cv
221.488 10.832 221.41 10.895 221.316 10.891 cv
220.047 10.891 li
220.047 16.516 li
220.043 16.57 220.027 16.613 220 16.652 cv
219.965 16.691 219.914 16.727 219.844 16.75 cv
219.77 16.777 219.668 16.793 219.539 16.809 cv
219.406 16.82 219.246 16.828 219.063 16.828 cv
218.875 16.828 218.719 16.82 218.594 16.809 cv
218.465 16.793 218.363 16.777 218.289 16.75 cv
218.211 16.727 218.16 16.691 218.133 16.652 cv
218.102 16.613 218.086 16.57 218.09 16.516 cv
218.09 10.891 li
217.219 10.891 li
217.117 10.895 217.043 10.832 216.996 10.707 cv
216.945 10.586 216.918 10.383 216.922 10.094 cv
216.918 9.94501 216.926 9.81598 216.941 9.71503 cv
216.953 9.61298 216.973 9.53101 216.996 9.46899 cv
217.02 9.40997 217.051 9.367 217.09 9.34003 cv
217.129 9.31598 217.172 9.30499 217.227 9.30103 cv
218.09 9.30103 li
218.09 8.71503 li
218.086 8.24597 218.133 7.83197 218.23 7.47302 cv
218.32 7.117 218.469 6.82001 218.672 6.586 cv
218.871 6.35199 219.125 6.17603 219.434 6.05103 cv
219.742 5.93402 220.105 5.87097 220.531 5.87097 cv
220.727 5.87097 220.918 5.89099 221.105 5.922 cv
221.285 5.961 221.43 5.99597 221.535 6.03101 cv
221.637 6.07397 221.707 6.10901 221.746 6.14099 cv
221.781 6.17603 221.813 6.22699 221.836 6.289 cv
221.859 6.35498 221.875 6.43701 221.887 6.539 cv
221.895 6.64099 221.898 6.76599 221.902 6.914 cv
cp
f
230.477 15.832 mo
230.477 16.059 230.461 16.234 230.434 16.355 cv
230.402 16.48 230.363 16.566 230.32 16.613 cv
230.27 16.664 230.203 16.707 230.113 16.746 cv
230.02 16.785 229.91 16.816 229.793 16.848 cv
229.668 16.871 229.535 16.895 229.395 16.914 cv
229.25 16.926 229.109 16.934 228.965 16.937 cv
228.574 16.934 228.234 16.883 227.949 16.789 cv
227.664 16.687 227.43 16.539 227.242 16.332 cv
227.055 16.129 226.914 15.871 226.828 15.559 cv
226.734 15.25 226.691 14.879 226.695 14.449 cv
226.695 10.891 li
225.863 10.891 li
225.762 10.895 225.688 10.832 225.637 10.707 cv
225.582 10.586 225.555 10.383 225.559 10.094 cv
225.555 9.94501 225.563 9.81598 225.578 9.71503 cv
225.59 9.61298 225.609 9.53101 225.637 9.46899 cv
225.66 9.40997 225.691 9.367 225.734 9.34003 cv
225.77 9.31598 225.816 9.30499 225.871 9.30103 cv
226.695 9.30103 li
226.695 7.75 li
226.691 7.703 226.707 7.65601 226.738 7.60901 cv
226.766 7.57001 226.816 7.53497 226.895 7.50403 cv
226.969 7.47998 227.07 7.45697 227.199 7.44098 cv
227.324 7.42999 227.48 7.42603 227.672 7.422 cv
227.859 7.42603 228.02 7.42999 228.148 7.44098 cv
228.273 7.45697 228.375 7.47998 228.449 7.50403 cv
228.52 7.53497 228.57 7.57001 228.605 7.60901 cv
228.633 7.65601 228.648 7.703 228.652 7.75 cv
228.652 9.30103 li
230.164 9.30103 li
230.215 9.30499 230.262 9.31598 230.301 9.34003 cv
230.34 9.367 230.371 9.40997 230.398 9.46899 cv
230.422 9.53101 230.441 9.61298 230.457 9.71503 cv
230.469 9.81598 230.477 9.94501 230.477 10.094 cv
230.477 10.383 230.449 10.586 230.398 10.707 cv
230.344 10.832 230.27 10.895 230.172 10.891 cv
228.652 10.891 li
228.652 14.156 li
228.648 14.535 228.707 14.82 228.832 15.008 cv
228.949 15.199 229.164 15.293 229.469 15.293 cv
229.57 15.293 229.664 15.285 229.75 15.266 cv
229.832 15.25 229.906 15.23 229.973 15.203 cv
230.035 15.184 230.09 15.16 230.137 15.141 cv
230.18 15.125 230.219 15.117 230.258 15.113 cv
230.285 15.117 230.316 15.125 230.348 15.141 cv
230.375 15.16 230.395 15.199 230.414 15.25 cv
230.426 15.309 230.441 15.383 230.457 15.473 cv
230.469 15.57 230.477 15.687 230.477 15.832 cv
cp
f
238.539 16.516 mo
238.535 16.57 238.52 16.613 238.492 16.652 cv
238.457 16.691 238.406 16.727 238.336 16.75 cv
238.262 16.777 238.16 16.793 238.035 16.809 cv
237.906 16.82 237.75 16.828 237.566 16.828 cv
237.371 16.828 237.211 16.82 237.086 16.809 cv
236.957 16.793 236.855 16.777 236.785 16.75 cv
236.707 16.727 236.656 16.691 236.629 16.652 cv
236.594 16.613 236.578 16.57 236.582 16.516 cv
236.582 12.551 li
236.578 12.215 236.555 11.949 236.508 11.754 cv
236.457 11.562 236.383 11.398 236.293 11.262 cv
236.199 11.125 236.082 11.02 235.934 10.941 cv
235.785 10.867 235.609 10.828 235.414 10.828 cv
235.16 10.828 234.91 10.922 234.656 11.102 cv
234.402 11.285 234.137 11.547 233.863 11.895 cv
233.863 16.516 li
233.859 16.57 233.844 16.613 233.816 16.652 cv
233.781 16.691 233.727 16.727 233.656 16.75 cv
233.578 16.777 233.48 16.793 233.355 16.809 cv
233.23 16.82 233.07 16.828 232.883 16.828 cv
232.688 16.828 232.531 16.82 232.406 16.809 cv
232.281 16.793 232.18 16.777 232.105 16.75 cv
232.027 16.727 231.973 16.691 231.945 16.652 cv
231.91 16.613 231.895 16.57 231.898 16.516 cv
231.898 6.27002 li
231.895 6.21899 231.91 6.172 231.945 6.12903 cv
231.973 6.09003 232.027 6.05499 232.105 6.02301 cv
232.18 5.99597 232.281 5.97699 232.406 5.95697 cv
232.531 5.94501 232.688 5.93701 232.883 5.93402 cv
233.07 5.93701 233.23 5.94501 233.355 5.95697 cv
233.48 5.97699 233.578 5.99597 233.656 6.02301 cv
233.727 6.05499 233.781 6.09003 233.816 6.12903 cv
233.844 6.172 233.859 6.21899 233.863 6.27002 cv
233.863 10.109 li
234.199 9.78101 234.543 9.53497 234.895 9.367 cv
235.242 9.20697 235.609 9.125 235.992 9.12097 cv
236.461 9.125 236.859 9.203 237.188 9.35498 cv
237.512 9.51599 237.773 9.72699 237.973 9.99597 cv
238.172 10.266 238.316 10.582 238.406 10.941 cv
238.492 11.305 238.535 11.742 238.539 12.254 cv
cp
f
246.824 12.84 mo
246.82 13.078 246.77 13.254 246.664 13.367 cv
246.555 13.484 246.406 13.543 246.227 13.539 cv
241.992 13.539 li
241.988 13.84 242.023 14.109 242.098 14.348 cv
242.164 14.59 242.277 14.793 242.434 14.961 cv
242.586 15.133 242.781 15.262 243.023 15.348 cv
243.262 15.437 243.551 15.48 243.895 15.48 cv
244.234 15.48 244.535 15.457 244.797 15.406 cv
245.055 15.359 245.281 15.305 245.473 15.242 cv
245.66 15.184 245.816 15.129 245.945 15.078 cv
246.066 15.031 246.168 15.008 246.25 15.004 cv
246.293 15.008 246.332 15.016 246.367 15.031 cv
246.395 15.051 246.422 15.082 246.441 15.129 cv
246.461 15.176 246.473 15.242 246.484 15.328 cv
246.488 15.414 246.492 15.523 246.496 15.652 cv
246.492 15.77 246.492 15.867 246.488 15.945 cv
246.48 16.027 246.473 16.094 246.465 16.148 cv
246.453 16.207 246.438 16.258 246.418 16.293 cv
246.398 16.336 246.371 16.371 246.34 16.406 cv
246.305 16.445 246.211 16.496 246.063 16.555 cv
245.906 16.621 245.715 16.684 245.484 16.738 cv
245.246 16.801 244.977 16.848 244.68 16.895 cv
244.375 16.934 244.055 16.957 243.715 16.961 cv
243.094 16.957 242.551 16.883 242.09 16.727 cv
241.621 16.574 241.234 16.336 240.926 16.02 cv
240.609 15.703 240.375 15.305 240.227 14.82 cv
240.07 14.34 239.996 13.773 240 13.117 cv
239.996 12.504 240.074 11.945 240.238 11.449 cv
240.395 10.953 240.629 10.535 240.941 10.187 cv
241.246 9.84399 241.621 9.578 242.059 9.39502 cv
242.496 9.21503 242.988 9.125 243.543 9.12097 cv
244.121 9.125 244.621 9.211 245.035 9.37903 cv
245.449 9.55499 245.785 9.79303 246.051 10.094 cv
246.313 10.398 246.508 10.758 246.637 11.172 cv
246.758 11.59 246.82 12.039 246.824 12.527 cv
cp
244.922 12.277 mo
244.934 11.727 244.824 11.293 244.59 10.98 cv
244.355 10.668 243.988 10.512 243.496 10.508 cv
243.246 10.512 243.031 10.559 242.848 10.648 cv
242.66 10.746 242.508 10.871 242.387 11.027 cv
242.262 11.187 242.168 11.375 242.105 11.59 cv
242.039 11.805 242 12.035 241.992 12.277 cv
cp
f
259.172 9.76202 mo
259.172 10.328 259.082 10.832 258.906 11.266 cv
258.727 11.703 258.469 12.07 258.133 12.367 cv
257.793 12.672 257.379 12.898 256.891 13.051 cv
256.398 13.207 255.82 13.285 255.156 13.281 cv
254.316 13.281 li
254.316 16.5 li
254.313 16.555 254.297 16.602 254.266 16.641 cv
254.23 16.684 254.176 16.719 254.098 16.742 cv
254.02 16.77 253.914 16.789 253.785 16.805 cv
253.652 16.82 253.488 16.828 253.289 16.828 cv
253.09 16.828 252.922 16.82 252.793 16.805 cv
252.656 16.789 252.551 16.77 252.477 16.742 cv
252.395 16.719 252.34 16.684 252.313 16.641 cv
252.277 16.602 252.262 16.555 252.266 16.5 cv
252.266 7.42999 li
252.262 7.18701 252.328 7.00403 252.457 6.87903 cv
252.582 6.758 252.75 6.69897 252.961 6.69501 cv
255.336 6.69501 li
255.57 6.69897 255.801 6.70697 256.02 6.72302 cv
256.234 6.742 256.492 6.78101 256.793 6.84003 cv
257.094 6.90198 257.398 7.01202 257.711 7.172 cv
258.02 7.336 258.281 7.54303 258.5 7.78497 cv
258.715 8.03497 258.883 8.32397 259 8.65198 cv
259.113 8.98401 259.172 9.35199 259.172 9.76202 cv
cp
257.027 9.90601 mo
257.027 9.55902 256.965 9.26599 256.84 9.03497 cv
256.715 8.80902 256.559 8.64099 256.379 8.52698 cv
256.195 8.422 256.008 8.35199 255.809 8.32001 cv
255.605 8.29303 255.398 8.28101 255.188 8.27698 cv
254.316 8.27698 li
254.316 11.699 li
255.234 11.699 li
255.563 11.703 255.836 11.656 256.059 11.566 cv
256.277 11.48 256.457 11.359 256.598 11.199 cv
256.734 11.043 256.84 10.852 256.918 10.629 cv
256.988 10.41 257.027 10.172 257.027 9.90601 cv
cp
f
265.109 10.211 mo
265.109 10.402 265.102 10.555 265.094 10.672 cv
265.078 10.793 265.063 10.887 265.047 10.953 cv
265.023 11.023 264.996 11.07 264.965 11.094 cv
264.926 11.121 264.883 11.133 264.836 11.133 cv
264.789 11.133 264.742 11.125 264.695 11.105 cv
264.641 11.09 264.582 11.07 264.52 11.047 cv
264.449 11.027 264.379 11.008 264.305 10.988 cv
264.223 10.973 264.137 10.965 264.047 10.961 cv
263.934 10.965 263.824 10.984 263.719 11.027 cv
263.609 11.074 263.496 11.145 263.383 11.234 cv
263.262 11.328 263.141 11.453 263.016 11.605 cv
262.887 11.766 262.75 11.957 262.605 12.184 cv
262.605 16.516 li
262.602 16.57 262.586 16.613 262.559 16.652 cv
262.523 16.691 262.469 16.727 262.398 16.75 cv
262.32 16.777 262.223 16.793 262.098 16.809 cv
261.973 16.82 261.813 16.828 261.625 16.828 cv
261.43 16.828 261.273 16.82 261.148 16.809 cv
261.023 16.793 260.922 16.777 260.848 16.75 cv
260.77 16.727 260.715 16.691 260.688 16.652 cv
260.652 16.613 260.637 16.57 260.641 16.516 cv
260.641 9.56598 li
260.637 9.52002 260.652 9.47302 260.68 9.42999 cv
260.703 9.39502 260.75 9.36298 260.82 9.33197 cv
260.887 9.30902 260.973 9.289 261.082 9.27301 cv
261.188 9.26599 261.32 9.258 261.484 9.25403 cv
261.648 9.258 261.785 9.26599 261.895 9.27301 cv
262 9.289 262.086 9.30902 262.148 9.33197 cv
262.207 9.36298 262.25 9.39502 262.277 9.42999 cv
262.301 9.47302 262.313 9.52002 262.316 9.56598 cv
262.316 10.43 li
262.496 10.172 262.668 9.961 262.832 9.789 cv
262.988 9.625 263.145 9.48798 263.293 9.38702 cv
263.438 9.289 263.582 9.22302 263.727 9.17999 cv
263.871 9.14502 264.016 9.125 264.164 9.12097 cv
264.23 9.125 264.305 9.12903 264.383 9.133 cv
264.461 9.14502 264.539 9.15601 264.625 9.172 cv
264.703 9.19098 264.777 9.211 264.844 9.23401 cv
264.902 9.258 264.949 9.28497 264.98 9.30902 cv
265.008 9.34003 265.027 9.367 265.043 9.39502 cv
265.055 9.42999 265.066 9.47302 265.078 9.52301 cv
265.086 9.58197 265.094 9.664 265.102 9.77002 cv
265.105 9.87903 265.109 10.027 265.109 10.211 cv
cp
f
272.617 12.84 mo
272.613 13.078 272.563 13.254 272.457 13.367 cv
272.348 13.484 272.199 13.543 272.02 13.539 cv
267.785 13.539 li
267.781 13.84 267.816 14.109 267.891 14.348 cv
267.957 14.59 268.07 14.793 268.227 14.961 cv
268.379 15.133 268.574 15.262 268.816 15.348 cv
269.055 15.437 269.344 15.48 269.688 15.48 cv
270.027 15.48 270.328 15.457 270.59 15.406 cv
270.848 15.359 271.074 15.305 271.266 15.242 cv
271.453 15.184 271.609 15.129 271.738 15.078 cv
271.859 15.031 271.961 15.008 272.043 15.004 cv
272.086 15.008 272.125 15.016 272.16 15.031 cv
272.188 15.051 272.215 15.082 272.234 15.129 cv
272.254 15.176 272.266 15.242 272.277 15.328 cv
272.281 15.414 272.285 15.523 272.289 15.652 cv
272.285 15.77 272.285 15.867 272.281 15.945 cv
272.273 16.027 272.266 16.094 272.258 16.148 cv
272.246 16.207 272.23 16.258 272.211 16.293 cv
272.191 16.336 272.164 16.371 272.133 16.406 cv
272.098 16.445 272.004 16.496 271.855 16.555 cv
271.699 16.621 271.508 16.684 271.277 16.738 cv
271.039 16.801 270.77 16.848 270.473 16.895 cv
270.168 16.934 269.848 16.957 269.508 16.961 cv
268.887 16.957 268.344 16.883 267.883 16.727 cv
267.414 16.574 267.027 16.336 266.719 16.02 cv
266.402 15.703 266.168 15.305 266.02 14.82 cv
265.863 14.34 265.789 13.773 265.793 13.117 cv
265.789 12.504 265.867 11.945 266.031 11.449 cv
266.188 10.953 266.422 10.535 266.734 10.187 cv
267.039 9.84399 267.414 9.578 267.852 9.39502 cv
268.289 9.21503 268.781 9.125 269.336 9.12097 cv
269.914 9.125 270.414 9.211 270.828 9.37903 cv
271.242 9.55499 271.578 9.79303 271.844 10.094 cv
272.105 10.398 272.301 10.758 272.43 11.172 cv
272.551 11.59 272.613 12.039 272.617 12.527 cv
cp
270.715 12.277 mo
270.727 11.727 270.617 11.293 270.383 10.98 cv
270.148 10.668 269.781 10.512 269.289 10.508 cv
269.039 10.512 268.824 10.559 268.641 10.648 cv
268.453 10.746 268.301 10.871 268.18 11.027 cv
268.055 11.187 267.961 11.375 267.898 11.59 cv
267.832 11.805 267.793 12.035 267.785 12.277 cv
cp
f
281.223 12.937 mo
281.223 13.559 281.156 14.117 281.023 14.613 cv
280.891 15.109 280.695 15.531 280.441 15.879 cv
280.188 16.227 279.871 16.496 279.492 16.68 cv
279.109 16.867 278.676 16.957 278.191 16.961 cv
277.984 16.957 277.797 16.937 277.633 16.902 cv
277.461 16.859 277.297 16.801 277.141 16.723 cv
276.98 16.645 276.824 16.547 276.672 16.422 cv
276.512 16.305 276.352 16.164 276.188 16 cv
276.188 19.273 li
276.184 19.32 276.168 19.367 276.141 19.414 cv
276.105 19.453 276.051 19.488 275.98 19.52 cv
275.902 19.543 275.805 19.566 275.68 19.586 cv
275.555 19.598 275.395 19.605 275.207 19.609 cv
275.012 19.605 274.855 19.598 274.73 19.586 cv
274.605 19.566 274.504 19.543 274.43 19.52 cv
274.352 19.488 274.297 19.453 274.27 19.414 cv
274.234 19.367 274.219 19.32 274.223 19.273 cv
274.223 9.56598 li
274.219 9.52002 274.234 9.47302 274.262 9.42999 cv
274.285 9.39502 274.328 9.36298 274.398 9.33197 cv
274.461 9.30902 274.547 9.289 274.656 9.27301 cv
274.758 9.26599 274.895 9.258 275.059 9.25403 cv
275.215 9.258 275.344 9.26599 275.449 9.27301 cv
275.555 9.289 275.641 9.30902 275.707 9.33197 cv
275.77 9.36298 275.816 9.39502 275.844 9.42999 cv
275.867 9.47302 275.879 9.52002 275.883 9.56598 cv
275.883 10.383 li
276.082 10.176 276.281 9.99597 276.48 9.836 cv
276.672 9.67999 276.871 9.547 277.074 9.43701 cv
277.277 9.336 277.484 9.25403 277.703 9.19897 cv
277.914 9.14801 278.145 9.125 278.395 9.12097 cv
278.898 9.125 279.332 9.22302 279.695 9.422 cv
280.051 9.625 280.344 9.90198 280.57 10.246 cv
280.793 10.598 280.957 11 281.066 11.461 cv
281.168 11.922 281.223 12.414 281.223 12.937 cv
cp
279.18 13.078 mo
279.176 12.785 279.156 12.504 279.113 12.227 cv
279.066 11.957 278.988 11.715 278.887 11.5 cv
278.777 11.289 278.637 11.117 278.465 10.988 cv
278.289 10.863 278.074 10.801 277.816 10.797 cv
277.684 10.801 277.555 10.82 277.43 10.855 cv
277.301 10.898 277.172 10.961 277.039 11.047 cv
276.906 11.137 276.77 11.25 276.633 11.391 cv
276.488 11.531 276.34 11.707 276.188 11.91 cv
276.188 14.203 li
276.461 14.551 276.723 14.82 276.973 15.008 cv
277.219 15.199 277.48 15.293 277.754 15.293 cv
278.008 15.293 278.223 15.23 278.406 15.098 cv
278.582 14.973 278.73 14.801 278.844 14.59 cv
278.957 14.379 279.039 14.141 279.098 13.875 cv
279.148 13.609 279.176 13.344 279.18 13.078 cv
cp
f
288.719 16.539 mo
288.715 16.617 288.688 16.672 288.641 16.711 cv
288.586 16.754 288.504 16.781 288.395 16.801 cv
288.277 16.816 288.113 16.828 287.898 16.828 cv
287.66 16.828 287.488 16.816 287.387 16.801 cv
287.277 16.781 287.203 16.754 287.164 16.711 cv
287.117 16.672 287.098 16.617 287.098 16.539 cv
287.098 15.988 li
286.809 16.297 286.48 16.535 286.117 16.703 cv
285.75 16.875 285.344 16.957 284.898 16.961 cv
284.527 16.957 284.188 16.91 283.879 16.816 cv
283.57 16.723 283.305 16.582 283.078 16.387 cv
282.852 16.199 282.676 15.965 282.551 15.684 cv
282.426 15.406 282.363 15.078 282.367 14.699 cv
282.363 14.301 282.441 13.949 282.602 13.645 cv
282.758 13.348 282.996 13.102 283.313 12.906 cv
283.625 12.715 284.016 12.57 284.484 12.473 cv
284.953 12.383 285.496 12.336 286.113 12.332 cv
286.793 12.332 li
286.793 11.91 li
286.793 11.695 286.77 11.504 286.727 11.34 cv
286.68 11.18 286.605 11.043 286.508 10.93 cv
286.402 10.824 286.27 10.742 286.102 10.687 cv
285.93 10.637 285.719 10.613 285.477 10.609 cv
285.145 10.613 284.852 10.648 284.598 10.719 cv
284.336 10.793 284.109 10.875 283.914 10.961 cv
283.715 11.055 283.551 11.133 283.422 11.203 cv
283.285 11.277 283.176 11.316 283.098 11.312 cv
283.035 11.316 282.984 11.297 282.945 11.258 cv
282.898 11.223 282.863 11.172 282.836 11.102 cv
282.805 11.039 282.781 10.953 282.77 10.852 cv
282.75 10.754 282.742 10.645 282.746 10.523 cv
282.742 10.363 282.758 10.238 282.785 10.141 cv
282.809 10.051 282.855 9.96503 282.934 9.88702 cv
283.004 9.81201 283.133 9.72998 283.316 9.64099 cv
283.496 9.55103 283.707 9.46503 283.953 9.38702 cv
284.195 9.30902 284.465 9.24597 284.754 9.19501 cv
285.043 9.14801 285.34 9.125 285.648 9.12097 cv
286.191 9.125 286.656 9.17603 287.043 9.28101 cv
287.43 9.39099 287.75 9.55499 288 9.77301 cv
288.25 9.992 288.43 10.277 288.547 10.625 cv
288.656 10.977 288.715 11.391 288.719 11.863 cv
cp
286.793 13.562 mo
286.043 13.562 li
285.727 13.566 285.457 13.59 285.234 13.633 cv
285.008 13.684 284.824 13.754 284.688 13.844 cv
284.543 13.941 284.441 14.055 284.379 14.184 cv
284.313 14.32 284.277 14.469 284.281 14.637 cv
284.277 14.93 284.371 15.16 284.559 15.324 cv
284.742 15.492 285 15.574 285.328 15.574 cv
285.602 15.574 285.852 15.504 286.086 15.363 cv
286.313 15.223 286.551 15.02 286.793 14.746 cv
cp
f
295.145 10.211 mo
295.145 10.402 295.137 10.555 295.129 10.672 cv
295.113 10.793 295.098 10.887 295.082 10.953 cv
295.059 11.023 295.031 11.07 295 11.094 cv
294.961 11.121 294.918 11.133 294.871 11.133 cv
294.824 11.133 294.777 11.125 294.73 11.105 cv
294.676 11.09 294.617 11.07 294.555 11.047 cv
294.484 11.027 294.414 11.008 294.34 10.988 cv
294.258 10.973 294.172 10.965 294.082 10.961 cv
293.969 10.965 293.859 10.984 293.754 11.027 cv
293.645 11.074 293.531 11.145 293.418 11.234 cv
293.297 11.328 293.176 11.453 293.051 11.605 cv
292.922 11.766 292.785 11.957 292.641 12.184 cv
292.641 16.516 li
292.637 16.57 292.621 16.613 292.594 16.652 cv
292.559 16.691 292.504 16.727 292.434 16.75 cv
292.355 16.777 292.258 16.793 292.133 16.809 cv
292.008 16.82 291.848 16.828 291.66 16.828 cv
291.465 16.828 291.309 16.82 291.184 16.809 cv
291.059 16.793 290.957 16.777 290.883 16.75 cv
290.805 16.727 290.75 16.691 290.723 16.652 cv
290.688 16.613 290.672 16.57 290.676 16.516 cv
290.676 9.56598 li
290.672 9.52002 290.688 9.47302 290.715 9.42999 cv
290.738 9.39502 290.785 9.36298 290.855 9.33197 cv
290.922 9.30902 291.008 9.289 291.117 9.27301 cv
291.223 9.26599 291.355 9.258 291.52 9.25403 cv
291.684 9.258 291.82 9.26599 291.93 9.27301 cv
292.035 9.289 292.121 9.30902 292.184 9.33197 cv
292.242 9.36298 292.285 9.39502 292.313 9.42999 cv
292.336 9.47302 292.348 9.52002 292.352 9.56598 cv
292.352 10.43 li
292.531 10.172 292.703 9.961 292.867 9.789 cv
293.023 9.625 293.18 9.48798 293.328 9.38702 cv
293.473 9.289 293.617 9.22302 293.762 9.17999 cv
293.906 9.14502 294.051 9.125 294.199 9.12097 cv
294.266 9.125 294.34 9.12903 294.418 9.133 cv
294.496 9.14502 294.574 9.15601 294.66 9.172 cv
294.738 9.19098 294.813 9.211 294.879 9.23401 cv
294.938 9.258 294.984 9.28497 295.016 9.30902 cv
295.043 9.34003 295.063 9.367 295.078 9.39502 cv
295.09 9.42999 295.102 9.47302 295.113 9.52301 cv
295.121 9.58197 295.129 9.664 295.137 9.77002 cv
295.141 9.87903 295.145 10.027 295.145 10.211 cv
cp
f
301.887 16.539 mo
301.883 16.617 301.855 16.672 301.809 16.711 cv
301.754 16.754 301.672 16.781 301.563 16.801 cv
301.445 16.816 301.281 16.828 301.066 16.828 cv
300.828 16.828 300.656 16.816 300.555 16.801 cv
300.445 16.781 300.371 16.754 300.332 16.711 cv
300.285 16.672 300.266 16.617 300.266 16.539 cv
300.266 15.988 li
299.977 16.297 299.648 16.535 299.285 16.703 cv
298.918 16.875 298.512 16.957 298.066 16.961 cv
297.695 16.957 297.355 16.91 297.047 16.816 cv
296.738 16.723 296.473 16.582 296.246 16.387 cv
296.02 16.199 295.844 15.965 295.719 15.684 cv
295.594 15.406 295.531 15.078 295.535 14.699 cv
295.531 14.301 295.609 13.949 295.77 13.645 cv
295.926 13.348 296.164 13.102 296.48 12.906 cv
296.793 12.715 297.184 12.57 297.652 12.473 cv
298.121 12.383 298.664 12.336 299.281 12.332 cv
299.961 12.332 li
299.961 11.91 li
299.961 11.695 299.938 11.504 299.895 11.34 cv
299.848 11.18 299.773 11.043 299.676 10.93 cv
299.57 10.824 299.438 10.742 299.27 10.687 cv
299.098 10.637 298.887 10.613 298.645 10.609 cv
298.313 10.613 298.02 10.648 297.766 10.719 cv
297.504 10.793 297.277 10.875 297.082 10.961 cv
296.883 11.055 296.719 11.133 296.59 11.203 cv
296.453 11.277 296.344 11.316 296.266 11.312 cv
296.203 11.316 296.152 11.297 296.113 11.258 cv
296.066 11.223 296.031 11.172 296.004 11.102 cv
295.973 11.039 295.949 10.953 295.938 10.852 cv
295.918 10.754 295.91 10.645 295.914 10.523 cv
295.91 10.363 295.926 10.238 295.953 10.141 cv
295.977 10.051 296.023 9.96503 296.102 9.88702 cv
296.172 9.81201 296.301 9.72998 296.484 9.64099 cv
296.664 9.55103 296.875 9.46503 297.121 9.38702 cv
297.363 9.30902 297.633 9.24597 297.922 9.19501 cv
298.211 9.14801 298.508 9.125 298.816 9.12097 cv
299.359 9.125 299.824 9.17603 300.211 9.28101 cv
300.598 9.39099 300.918 9.55499 301.168 9.77301 cv
301.418 9.992 301.598 10.277 301.715 10.625 cv
301.824 10.977 301.883 11.391 301.887 11.863 cv
cp
299.961 13.562 mo
299.211 13.562 li
298.895 13.566 298.625 13.59 298.402 13.633 cv
298.176 13.684 297.992 13.754 297.855 13.844 cv
297.711 13.941 297.609 14.055 297.547 14.184 cv
297.48 14.32 297.445 14.469 297.449 14.637 cv
297.445 14.93 297.539 15.16 297.727 15.324 cv
297.91 15.492 298.168 15.574 298.496 15.574 cv
298.77 15.574 299.02 15.504 299.254 15.363 cv
299.48 15.223 299.719 15.02 299.961 14.746 cv
cp
f
307.883 15.832 mo
307.883 16.059 307.867 16.234 307.84 16.355 cv
307.809 16.48 307.77 16.566 307.727 16.613 cv
307.676 16.664 307.609 16.707 307.52 16.746 cv
307.426 16.785 307.316 16.816 307.199 16.848 cv
307.074 16.871 306.941 16.895 306.801 16.914 cv
306.656 16.926 306.516 16.934 306.371 16.937 cv
305.98 16.934 305.641 16.883 305.355 16.789 cv
305.07 16.687 304.836 16.539 304.648 16.332 cv
304.461 16.129 304.32 15.871 304.234 15.559 cv
304.141 15.25 304.098 14.879 304.102 14.449 cv
304.102 10.891 li
303.27 10.891 li
303.168 10.895 303.094 10.832 303.043 10.707 cv
302.988 10.586 302.961 10.383 302.965 10.094 cv
302.961 9.94501 302.969 9.81598 302.984 9.71503 cv
302.996 9.61298 303.016 9.53101 303.043 9.46899 cv
303.066 9.40997 303.098 9.367 303.141 9.34003 cv
303.176 9.31598 303.223 9.30499 303.277 9.30103 cv
304.102 9.30103 li
304.102 7.75 li
304.098 7.703 304.113 7.65601 304.145 7.60901 cv
304.172 7.57001 304.223 7.53497 304.301 7.50403 cv
304.375 7.47998 304.477 7.45697 304.605 7.44098 cv
304.73 7.42999 304.887 7.42603 305.078 7.422 cv
305.266 7.42603 305.426 7.42999 305.555 7.44098 cv
305.68 7.45697 305.781 7.47998 305.855 7.50403 cv
305.926 7.53497 305.977 7.57001 306.012 7.60901 cv
306.039 7.65601 306.055 7.703 306.059 7.75 cv
306.059 9.30103 li
307.57 9.30103 li
307.621 9.30499 307.668 9.31598 307.707 9.34003 cv
307.746 9.367 307.777 9.40997 307.805 9.46899 cv
307.828 9.53101 307.848 9.61298 307.863 9.71503 cv
307.875 9.81598 307.883 9.94501 307.883 10.094 cv
307.883 10.383 307.855 10.586 307.805 10.707 cv
307.75 10.832 307.676 10.895 307.578 10.891 cv
306.059 10.891 li
306.059 14.156 li
306.055 14.535 306.113 14.82 306.238 15.008 cv
306.355 15.199 306.57 15.293 306.875 15.293 cv
306.977 15.293 307.07 15.285 307.156 15.266 cv
307.238 15.25 307.313 15.23 307.379 15.203 cv
307.441 15.184 307.496 15.16 307.543 15.141 cv
307.586 15.125 307.625 15.117 307.664 15.113 cv
307.691 15.117 307.723 15.125 307.754 15.141 cv
307.781 15.16 307.801 15.199 307.82 15.25 cv
307.832 15.309 307.848 15.383 307.863 15.473 cv
307.875 15.57 307.883 15.687 307.883 15.832 cv
cp
f
311.27 16.516 mo
311.266 16.57 311.25 16.613 311.223 16.652 cv
311.188 16.691 311.133 16.727 311.063 16.75 cv
310.984 16.777 310.887 16.793 310.762 16.809 cv
310.637 16.82 310.477 16.828 310.289 16.828 cv
310.094 16.828 309.938 16.82 309.813 16.809 cv
309.688 16.793 309.586 16.777 309.512 16.75 cv
309.434 16.727 309.379 16.691 309.352 16.652 cv
309.316 16.613 309.301 16.57 309.305 16.516 cv
309.305 9.58197 li
309.301 9.53101 309.316 9.48401 309.352 9.44501 cv
309.379 9.40601 309.434 9.375 309.512 9.34399 cv
309.586 9.32001 309.688 9.297 309.813 9.27698 cv
309.938 9.26599 310.094 9.258 310.289 9.25403 cv
310.477 9.258 310.637 9.26599 310.762 9.27698 cv
310.887 9.297 310.984 9.32001 311.063 9.34399 cv
311.133 9.375 311.188 9.40601 311.223 9.44501 cv
311.25 9.48401 311.266 9.53101 311.27 9.58197 cv
cp
311.418 7.211 mo
311.418 7.60901 311.336 7.883 311.176 8.03101 cv
311.012 8.18402 310.715 8.258 310.281 8.25403 cv
309.836 8.258 309.535 8.18402 309.387 8.039 cv
309.23 7.89502 309.156 7.633 309.156 7.25 cv
309.156 6.85498 309.234 6.58197 309.395 6.42999 cv
309.551 6.27698 309.852 6.19897 310.297 6.19897 cv
310.73 6.19897 311.027 6.27301 311.184 6.422 cv
311.34 6.57001 311.418 6.836 311.418 7.211 cv
cp
f
320.262 12.969 mo
320.258 13.566 320.18 14.109 320.027 14.594 cv
319.867 15.086 319.633 15.504 319.316 15.855 cv
319 16.207 318.602 16.48 318.125 16.672 cv
317.645 16.863 317.086 16.957 316.449 16.961 cv
315.828 16.957 315.289 16.875 314.836 16.703 cv
314.375 16.535 313.996 16.285 313.699 15.957 cv
313.395 15.633 313.172 15.23 313.027 14.75 cv
312.883 14.273 312.813 13.727 312.813 13.109 cv
312.813 12.52 312.891 11.98 313.047 11.488 cv
313.203 11 313.441 10.578 313.762 10.227 cv
314.078 9.87903 314.473 9.60498 314.949 9.40997 cv
315.422 9.21899 315.98 9.125 316.621 9.12097 cv
317.246 9.125 317.785 9.20697 318.242 9.375 cv
318.699 9.547 319.078 9.797 319.375 10.121 cv
319.672 10.449 319.895 10.852 320.043 11.328 cv
320.188 11.809 320.258 12.355 320.262 12.969 cv
cp
318.242 13.047 mo
318.238 12.711 318.211 12.395 318.16 12.102 cv
318.102 11.816 318.008 11.566 317.883 11.352 cv
317.75 11.141 317.578 10.973 317.367 10.852 cv
317.148 10.734 316.879 10.676 316.551 10.672 cv
316.262 10.676 316.008 10.73 315.789 10.832 cv
315.57 10.941 315.391 11.098 315.25 11.301 cv
315.109 11.508 315.004 11.754 314.934 12.039 cv
314.863 12.332 314.828 12.66 314.828 13.023 cv
314.828 13.371 314.855 13.687 314.914 13.973 cv
314.969 14.266 315.063 14.516 315.191 14.727 cv
315.316 14.941 315.488 15.105 315.711 15.219 cv
315.926 15.34 316.195 15.398 316.52 15.395 cv
316.813 15.398 317.07 15.344 317.293 15.234 cv
317.508 15.129 317.688 14.977 317.828 14.77 cv
317.969 14.57 318.07 14.324 318.141 14.035 cv
318.203 13.75 318.238 13.422 318.242 13.047 cv
cp
f
328.504 16.516 mo
328.5 16.57 328.484 16.613 328.457 16.652 cv
328.422 16.691 328.371 16.727 328.301 16.75 cv
328.227 16.777 328.125 16.793 328 16.809 cv
327.871 16.82 327.715 16.828 327.531 16.828 cv
327.336 16.828 327.176 16.82 327.051 16.809 cv
326.922 16.793 326.82 16.777 326.75 16.75 cv
326.672 16.727 326.621 16.691 326.594 16.652 cv
326.559 16.613 326.543 16.57 326.547 16.516 cv
326.547 12.551 li
326.543 12.215 326.52 11.949 326.473 11.754 cv
326.422 11.562 326.348 11.398 326.258 11.262 cv
326.164 11.125 326.047 11.02 325.898 10.941 cv
325.75 10.867 325.574 10.828 325.379 10.828 cv
325.125 10.828 324.875 10.922 324.621 11.102 cv
324.367 11.285 324.102 11.547 323.828 11.895 cv
323.828 16.516 li
323.824 16.57 323.809 16.613 323.781 16.652 cv
323.746 16.691 323.691 16.727 323.621 16.75 cv
323.543 16.777 323.445 16.793 323.32 16.809 cv
323.195 16.82 323.035 16.828 322.848 16.828 cv
322.652 16.828 322.496 16.82 322.371 16.809 cv
322.246 16.793 322.145 16.777 322.07 16.75 cv
321.992 16.727 321.938 16.691 321.91 16.652 cv
321.875 16.613 321.859 16.57 321.863 16.516 cv
321.863 9.56598 li
321.859 9.52002 321.875 9.47302 321.902 9.42999 cv
321.926 9.39502 321.973 9.36298 322.043 9.33197 cv
322.109 9.30902 322.195 9.289 322.305 9.27301 cv
322.41 9.26599 322.543 9.258 322.707 9.25403 cv
322.871 9.258 323.008 9.26599 323.117 9.27301 cv
323.223 9.289 323.309 9.30902 323.371 9.33197 cv
323.43 9.36298 323.473 9.39502 323.5 9.42999 cv
323.523 9.47302 323.535 9.52002 323.539 9.56598 cv
323.539 10.367 li
323.922 9.95697 324.313 9.64502 324.711 9.43402 cv
325.105 9.22699 325.523 9.125 325.957 9.12097 cv
326.426 9.125 326.824 9.203 327.152 9.35498 cv
327.477 9.51599 327.738 9.72699 327.938 9.992 cv
328.137 10.262 328.281 10.574 328.371 10.93 cv
328.457 11.289 328.5 11.719 328.504 12.223 cv
cp
f
337.215 7.539 mo
337.211 7.69501 337.203 7.82397 337.195 7.92603 cv
337.18 8.03497 337.16 8.12097 337.137 8.18402 cv
337.105 8.25 337.074 8.297 337.039 8.32397 cv
336.996 8.35901 336.953 8.375 336.91 8.37097 cv
334.387 8.37097 li
334.387 16.5 li
334.387 16.555 334.367 16.602 334.336 16.641 cv
334.297 16.684 334.242 16.719 334.168 16.742 cv
334.086 16.77 333.98 16.789 333.852 16.805 cv
333.715 16.82 333.551 16.828 333.355 16.828 cv
333.16 16.828 332.996 16.82 332.863 16.805 cv
332.73 16.789 332.625 16.77 332.547 16.742 cv
332.469 16.719 332.41 16.684 332.379 16.641 cv
332.34 16.602 332.324 16.555 332.328 16.5 cv
332.328 8.37097 li
329.805 8.37097 li
329.75 8.375 329.703 8.35901 329.672 8.32397 cv
329.633 8.297 329.602 8.25 329.578 8.18402 cv
329.547 8.12097 329.527 8.03497 329.52 7.92603 cv
329.504 7.82397 329.5 7.69501 329.5 7.539 cv
329.5 7.38702 329.504 7.25403 329.52 7.14099 cv
329.527 7.03497 329.547 6.94501 329.578 6.87903 cv
329.602 6.81598 329.633 6.77002 329.672 6.73798 cv
329.703 6.711 329.75 6.69897 329.805 6.69501 cv
336.91 6.69501 li
336.953 6.69897 336.996 6.711 337.039 6.73798 cv
337.074 6.77002 337.105 6.81598 337.137 6.87903 cv
337.16 6.94501 337.18 7.03497 337.195 7.14099 cv
337.203 7.25403 337.211 7.38702 337.215 7.539 cv
cp
f
340.25 16.516 mo
340.246 16.57 340.23 16.613 340.203 16.652 cv
340.168 16.691 340.113 16.727 340.043 16.75 cv
339.965 16.777 339.867 16.793 339.742 16.809 cv
339.617 16.82 339.457 16.828 339.27 16.828 cv
339.074 16.828 338.918 16.82 338.793 16.809 cv
338.668 16.793 338.566 16.777 338.492 16.75 cv
338.414 16.727 338.359 16.691 338.332 16.652 cv
338.297 16.613 338.281 16.57 338.285 16.516 cv
338.285 9.58197 li
338.281 9.53101 338.297 9.48401 338.332 9.44501 cv
338.359 9.40601 338.414 9.375 338.492 9.34399 cv
338.566 9.32001 338.668 9.297 338.793 9.27698 cv
338.918 9.26599 339.074 9.258 339.27 9.25403 cv
339.457 9.258 339.617 9.26599 339.742 9.27698 cv
339.867 9.297 339.965 9.32001 340.043 9.34399 cv
340.113 9.375 340.168 9.40601 340.203 9.44501 cv
340.23 9.48401 340.246 9.53101 340.25 9.58197 cv
cp
340.398 7.211 mo
340.398 7.60901 340.316 7.883 340.156 8.03101 cv
339.992 8.18402 339.695 8.258 339.262 8.25403 cv
338.816 8.258 338.516 8.18402 338.367 8.039 cv
338.211 7.89502 338.137 7.633 338.137 7.25 cv
338.137 6.85498 338.215 6.58197 338.375 6.42999 cv
338.531 6.27698 338.832 6.19897 339.277 6.19897 cv
339.711 6.19897 340.008 6.27301 340.164 6.422 cv
340.32 6.57001 340.398 6.836 340.398 7.211 cv
cp
f
353.305 16.516 mo
353.301 16.57 353.285 16.613 353.258 16.652 cv
353.223 16.691 353.172 16.727 353.102 16.75 cv
353.027 16.777 352.926 16.793 352.805 16.809 cv
352.68 16.82 352.523 16.828 352.332 16.828 cv
352.133 16.828 351.973 16.82 351.848 16.809 cv
351.723 16.793 351.621 16.777 351.547 16.75 cv
351.469 16.727 351.418 16.691 351.391 16.652 cv
351.363 16.613 351.348 16.57 351.352 16.516 cv
351.352 12.395 li
351.348 12.164 351.328 11.949 351.285 11.754 cv
351.238 11.562 351.168 11.398 351.082 11.262 cv
350.988 11.125 350.875 11.02 350.738 10.941 cv
350.598 10.867 350.434 10.828 350.242 10.828 cv
350.008 10.828 349.77 10.922 349.531 11.102 cv
349.293 11.285 349.035 11.547 348.754 11.895 cv
348.754 16.516 li
348.754 16.57 348.738 16.613 348.707 16.652 cv
348.676 16.691 348.621 16.727 348.547 16.75 cv
348.469 16.777 348.367 16.793 348.246 16.809 cv
348.121 16.82 347.969 16.828 347.781 16.828 cv
347.586 16.828 347.426 16.82 347.305 16.809 cv
347.176 16.793 347.074 16.777 347.004 16.75 cv
346.926 16.727 346.875 16.691 346.844 16.652 cv
346.813 16.613 346.797 16.57 346.797 16.516 cv
346.797 12.395 li
346.797 12.164 346.773 11.949 346.73 11.754 cv
346.688 11.562 346.621 11.398 346.535 11.262 cv
346.441 11.125 346.328 11.02 346.191 10.941 cv
346.047 10.867 345.883 10.828 345.699 10.828 cv
345.457 10.828 345.219 10.922 344.98 11.102 cv
344.742 11.285 344.484 11.547 344.211 11.895 cv
344.211 16.516 li
344.207 16.57 344.191 16.613 344.164 16.652 cv
344.129 16.691 344.074 16.727 344.004 16.75 cv
343.926 16.777 343.828 16.793 343.703 16.809 cv
343.578 16.82 343.418 16.828 343.23 16.828 cv
343.035 16.828 342.879 16.82 342.754 16.809 cv
342.629 16.793 342.527 16.777 342.453 16.75 cv
342.375 16.727 342.32 16.691 342.293 16.652 cv
342.258 16.613 342.242 16.57 342.246 16.516 cv
342.246 9.56598 li
342.242 9.52002 342.258 9.47302 342.285 9.42999 cv
342.309 9.39502 342.355 9.36298 342.426 9.33197 cv
342.492 9.30902 342.578 9.289 342.688 9.27301 cv
342.793 9.26599 342.926 9.258 343.09 9.25403 cv
343.254 9.258 343.391 9.26599 343.5 9.27301 cv
343.605 9.289 343.691 9.30902 343.754 9.33197 cv
343.813 9.36298 343.855 9.39502 343.883 9.42999 cv
343.906 9.47302 343.918 9.52002 343.922 9.56598 cv
343.922 10.367 li
344.305 9.95697 344.688 9.64502 345.07 9.43402 cv
345.449 9.22699 345.852 9.125 346.27 9.12097 cv
346.555 9.125 346.809 9.15198 347.039 9.211 cv
347.266 9.27301 347.473 9.35901 347.652 9.46899 cv
347.832 9.58197 347.984 9.71899 348.113 9.87097 cv
348.242 10.027 348.352 10.199 348.441 10.391 cv
348.648 10.168 348.852 9.97699 349.055 9.81598 cv
349.25 9.65601 349.449 9.52301 349.645 9.422 cv
349.84 9.32001 350.035 9.24597 350.23 9.19501 cv
350.426 9.14801 350.625 9.125 350.828 9.12097 cv
351.289 9.125 351.676 9.203 351.996 9.35498 cv
352.309 9.51599 352.566 9.72699 352.762 9.992 cv
352.957 10.262 353.094 10.574 353.18 10.93 cv
353.258 11.289 353.301 11.668 353.305 12.066 cv
cp
f
361.641 12.84 mo
361.637 13.078 361.586 13.254 361.48 13.367 cv
361.371 13.484 361.223 13.543 361.043 13.539 cv
356.809 13.539 li
356.805 13.84 356.84 14.109 356.914 14.348 cv
356.98 14.59 357.094 14.793 357.25 14.961 cv
357.402 15.133 357.598 15.262 357.84 15.348 cv
358.078 15.437 358.367 15.48 358.711 15.48 cv
359.051 15.48 359.352 15.457 359.613 15.406 cv
359.871 15.359 360.098 15.305 360.289 15.242 cv
360.477 15.184 360.633 15.129 360.762 15.078 cv
360.883 15.031 360.984 15.008 361.066 15.004 cv
361.109 15.008 361.148 15.016 361.184 15.031 cv
361.211 15.051 361.238 15.082 361.258 15.129 cv
361.277 15.176 361.289 15.242 361.301 15.328 cv
361.305 15.414 361.309 15.523 361.313 15.652 cv
361.309 15.77 361.309 15.867 361.305 15.945 cv
361.297 16.027 361.289 16.094 361.281 16.148 cv
361.27 16.207 361.254 16.258 361.234 16.293 cv
361.215 16.336 361.188 16.371 361.156 16.406 cv
361.121 16.445 361.027 16.496 360.879 16.555 cv
360.723 16.621 360.531 16.684 360.301 16.738 cv
360.063 16.801 359.793 16.848 359.496 16.895 cv
359.191 16.934 358.871 16.957 358.531 16.961 cv
357.91 16.957 357.367 16.883 356.906 16.727 cv
356.438 16.574 356.051 16.336 355.742 16.02 cv
355.426 15.703 355.191 15.305 355.043 14.82 cv
354.887 14.34 354.813 13.773 354.816 13.117 cv
354.813 12.504 354.891 11.945 355.055 11.449 cv
355.211 10.953 355.445 10.535 355.758 10.187 cv
356.063 9.84399 356.438 9.578 356.875 9.39502 cv
357.313 9.21503 357.805 9.125 358.359 9.12097 cv
358.938 9.125 359.438 9.211 359.852 9.37903 cv
360.266 9.55499 360.602 9.79303 360.867 10.094 cv
361.129 10.398 361.324 10.758 361.453 11.172 cv
361.574 11.59 361.637 12.039 361.641 12.527 cv
cp
359.738 12.277 mo
359.75 11.727 359.641 11.293 359.406 10.98 cv
359.172 10.668 358.805 10.512 358.313 10.508 cv
358.063 10.512 357.848 10.559 357.664 10.648 cv
357.477 10.746 357.324 10.871 357.203 11.027 cv
357.078 11.187 356.984 11.375 356.922 11.59 cv
356.855 11.805 356.816 12.035 356.809 12.277 cv
cp
f
368.141 14.551 mo
368.137 14.949 368.063 15.297 367.918 15.598 cv
367.77 15.898 367.563 16.152 367.293 16.352 cv
367.02 16.559 366.699 16.707 366.332 16.809 cv
365.965 16.906 365.563 16.957 365.133 16.961 cv
364.867 16.957 364.621 16.937 364.387 16.902 cv
364.152 16.859 363.941 16.812 363.754 16.754 cv
363.566 16.695 363.41 16.633 363.285 16.57 cv
363.16 16.508 363.066 16.449 363.012 16.395 cv
362.953 16.34 362.91 16.258 362.883 16.141 cv
362.848 16.027 362.832 15.852 362.836 15.621 cv
362.832 15.473 362.84 15.352 362.852 15.258 cv
362.859 15.168 362.875 15.098 362.898 15.039 cv
362.918 14.988 362.941 14.949 362.977 14.93 cv
363.004 14.914 363.043 14.906 363.09 14.902 cv
363.145 14.906 363.23 14.937 363.344 15 cv
363.453 15.066 363.59 15.141 363.762 15.215 cv
363.926 15.297 364.121 15.367 364.34 15.434 cv
364.559 15.504 364.809 15.539 365.094 15.535 cv
365.27 15.539 365.426 15.52 365.566 15.48 cv
365.699 15.445 365.82 15.395 365.926 15.324 cv
366.023 15.258 366.098 15.172 366.152 15.066 cv
366.199 14.965 366.227 14.844 366.23 14.707 cv
366.227 14.551 366.18 14.418 366.086 14.309 cv
365.992 14.199 365.863 14.102 365.707 14.016 cv
365.543 13.934 365.363 13.855 365.168 13.781 cv
364.965 13.711 364.762 13.633 364.551 13.539 cv
364.34 13.453 364.133 13.352 363.938 13.234 cv
363.734 13.125 363.555 12.984 363.398 12.816 cv
363.234 12.652 363.109 12.453 363.016 12.215 cv
362.922 11.984 362.875 11.703 362.875 11.371 cv
362.875 11.043 362.938 10.738 363.066 10.457 cv
363.195 10.184 363.383 9.94501 363.629 9.74597 cv
363.871 9.55103 364.168 9.39801 364.52 9.28497 cv
364.867 9.17999 365.262 9.125 365.703 9.12097 cv
365.918 9.125 366.129 9.14099 366.336 9.16803 cv
366.539 9.203 366.727 9.242 366.895 9.28497 cv
367.059 9.336 367.199 9.38702 367.316 9.43701 cv
367.43 9.49597 367.512 9.54303 367.563 9.578 cv
367.609 9.62097 367.645 9.65997 367.668 9.69501 cv
367.688 9.73798 367.699 9.78497 367.711 9.836 cv
367.719 9.89099 367.73 9.95697 367.738 10.035 cv
367.746 10.121 367.75 10.219 367.75 10.336 cv
367.75 10.477 367.746 10.594 367.738 10.68 cv
367.73 10.773 367.715 10.844 367.699 10.891 cv
367.68 10.945 367.656 10.98 367.629 10.996 cv
367.594 11.02 367.559 11.027 367.52 11.023 cv
367.469 11.027 367.395 11 367.301 10.941 cv
367.199 10.891 367.078 10.832 366.93 10.766 cv
366.781 10.707 366.609 10.648 366.414 10.59 cv
366.219 10.539 365.996 10.512 365.75 10.508 cv
365.57 10.512 365.418 10.531 365.289 10.562 cv
365.156 10.602 365.047 10.652 364.969 10.719 cv
364.883 10.789 364.82 10.867 364.781 10.957 cv
364.734 11.051 364.715 11.148 364.719 11.25 cv
364.715 11.41 364.766 11.547 364.867 11.652 cv
364.965 11.766 365.094 11.859 365.258 11.941 cv
365.418 12.027 365.602 12.105 365.809 12.176 cv
366.012 12.25 366.219 12.332 366.43 12.414 cv
366.637 12.504 366.844 12.602 367.055 12.715 cv
367.258 12.828 367.441 12.969 367.602 13.133 cv
367.762 13.301 367.891 13.5 367.992 13.73 cv
368.086 13.965 368.137 14.238 368.141 14.551 cv
cp
f
380.461 12.969 mo
380.457 13.566 380.379 14.109 380.227 14.594 cv
380.066 15.086 379.832 15.504 379.516 15.855 cv
379.199 16.207 378.801 16.48 378.324 16.672 cv
377.844 16.863 377.285 16.957 376.648 16.961 cv
376.027 16.957 375.488 16.875 375.035 16.703 cv
374.574 16.535 374.195 16.285 373.898 15.957 cv
373.594 15.633 373.371 15.23 373.227 14.75 cv
373.082 14.273 373.012 13.727 373.012 13.109 cv
373.012 12.52 373.09 11.98 373.246 11.488 cv
373.402 11 373.641 10.578 373.961 10.227 cv
374.277 9.87903 374.672 9.60498 375.148 9.40997 cv
375.621 9.21899 376.18 9.125 376.82 9.12097 cv
377.445 9.125 377.984 9.20697 378.441 9.375 cv
378.898 9.547 379.277 9.797 379.574 10.121 cv
379.871 10.449 380.094 10.852 380.242 11.328 cv
380.387 11.809 380.457 12.355 380.461 12.969 cv
cp
378.441 13.047 mo
378.438 12.711 378.41 12.395 378.359 12.102 cv
378.301 11.816 378.207 11.566 378.082 11.352 cv
377.949 11.141 377.777 10.973 377.566 10.852 cv
377.348 10.734 377.078 10.676 376.75 10.672 cv
376.461 10.676 376.207 10.73 375.988 10.832 cv
375.77 10.941 375.59 11.098 375.449 11.301 cv
375.309 11.508 375.203 11.754 375.133 12.039 cv
375.063 12.332 375.027 12.66 375.027 13.023 cv
375.027 13.371 375.055 13.687 375.113 13.973 cv
375.168 14.266 375.262 14.516 375.391 14.727 cv
375.516 14.941 375.688 15.105 375.91 15.219 cv
376.125 15.34 376.395 15.398 376.719 15.395 cv
377.012 15.398 377.27 15.344 377.492 15.234 cv
377.707 15.129 377.887 14.977 378.027 14.77 cv
378.168 14.57 378.27 14.324 378.34 14.035 cv
378.402 13.75 378.438 13.422 378.441 13.047 cv
cp
f
386.242 6.914 mo
386.238 7.06598 386.234 7.18701 386.227 7.27698 cv
386.215 7.37097 386.199 7.44098 386.18 7.48798 cv
386.156 7.539 386.133 7.57397 386.109 7.59003 cv
386.082 7.60901 386.055 7.617 386.023 7.617 cv
385.984 7.617 385.941 7.60901 385.902 7.59003 cv
385.855 7.57397 385.801 7.55499 385.738 7.53101 cv
385.668 7.51202 385.594 7.492 385.508 7.47302 cv
385.418 7.45697 385.313 7.44897 385.195 7.44501 cv
385.051 7.44897 384.93 7.46899 384.832 7.51202 cv
384.73 7.55902 384.648 7.62903 384.582 7.72302 cv
384.512 7.82001 384.461 7.94501 384.434 8.09802 cv
384.398 8.25 384.383 8.43701 384.387 8.65997 cv
384.387 9.30103 li
385.656 9.30103 li
385.699 9.30499 385.742 9.31598 385.785 9.34003 cv
385.82 9.367 385.855 9.40997 385.883 9.46899 cv
385.906 9.53101 385.926 9.61298 385.941 9.71503 cv
385.953 9.81598 385.957 9.94501 385.961 10.094 cv
385.957 10.383 385.934 10.586 385.883 10.707 cv
385.828 10.832 385.75 10.895 385.656 10.891 cv
384.387 10.891 li
384.387 16.516 li
384.383 16.57 384.367 16.613 384.34 16.652 cv
384.305 16.691 384.254 16.727 384.184 16.75 cv
384.109 16.777 384.008 16.793 383.879 16.809 cv
383.746 16.82 383.586 16.828 383.402 16.828 cv
383.215 16.828 383.059 16.82 382.934 16.809 cv
382.805 16.793 382.703 16.777 382.629 16.75 cv
382.551 16.727 382.5 16.691 382.473 16.652 cv
382.441 16.613 382.426 16.57 382.43 16.516 cv
382.43 10.891 li
381.559 10.891 li
381.457 10.895 381.383 10.832 381.336 10.707 cv
381.285 10.586 381.258 10.383 381.262 10.094 cv
381.258 9.94501 381.266 9.81598 381.281 9.71503 cv
381.293 9.61298 381.313 9.53101 381.336 9.46899 cv
381.359 9.40997 381.391 9.367 381.43 9.34003 cv
381.469 9.31598 381.512 9.30499 381.566 9.30103 cv
382.43 9.30103 li
382.43 8.71503 li
382.426 8.24597 382.473 7.83197 382.57 7.47302 cv
382.66 7.117 382.809 6.82001 383.012 6.586 cv
383.211 6.35199 383.465 6.17603 383.773 6.05103 cv
384.082 5.93402 384.445 5.87097 384.871 5.87097 cv
385.066 5.87097 385.258 5.89099 385.445 5.922 cv
385.625 5.961 385.77 5.99597 385.875 6.03101 cv
385.977 6.07397 386.047 6.10901 386.086 6.14099 cv
386.121 6.17603 386.152 6.22699 386.176 6.289 cv
386.199 6.35498 386.215 6.43701 386.227 6.539 cv
386.234 6.64099 386.238 6.76599 386.242 6.914 cv
cp
f
396.793 13.758 mo
396.789 14.289 396.691 14.754 396.496 15.152 cv
396.297 15.555 396.031 15.891 395.695 16.156 cv
395.355 16.426 394.957 16.625 394.508 16.758 cv
394.055 16.891 393.574 16.957 393.063 16.961 cv
392.711 16.957 392.387 16.93 392.09 16.875 cv
391.789 16.816 391.527 16.75 391.301 16.668 cv
391.07 16.59 390.879 16.504 390.727 16.414 cv
390.574 16.328 390.465 16.25 390.398 16.18 cv
390.328 16.113 390.277 16.016 390.254 15.891 cv
390.223 15.766 390.211 15.582 390.211 15.34 cv
390.211 15.18 390.215 15.047 390.227 14.934 cv
390.234 14.828 390.25 14.738 390.277 14.668 cv
390.297 14.602 390.328 14.555 390.371 14.523 cv
390.406 14.5 390.453 14.484 390.504 14.48 cv
390.574 14.484 390.676 14.527 390.813 14.609 cv
390.941 14.699 391.113 14.793 391.324 14.895 cv
391.531 15 391.777 15.098 392.066 15.18 cv
392.352 15.27 392.688 15.312 393.07 15.309 cv
393.32 15.312 393.543 15.281 393.738 15.219 cv
393.934 15.16 394.102 15.074 394.242 14.965 cv
394.379 14.855 394.484 14.723 394.559 14.562 cv
394.629 14.402 394.664 14.223 394.668 14.023 cv
394.664 13.797 394.602 13.602 394.48 13.434 cv
394.352 13.273 394.188 13.129 393.992 13 cv
393.789 12.875 393.563 12.754 393.309 12.641 cv
393.055 12.531 392.793 12.414 392.523 12.285 cv
392.25 12.164 391.988 12.02 391.734 11.859 cv
391.48 11.703 391.254 11.516 391.055 11.293 cv
390.852 11.074 390.688 10.812 390.566 10.508 cv
390.441 10.207 390.379 9.84802 390.383 9.42603 cv
390.379 8.94501 390.469 8.52002 390.648 8.15198 cv
390.824 7.789 391.066 7.48401 391.375 7.23798 cv
391.676 7 392.035 6.82001 392.449 6.69897 cv
392.863 6.58197 393.301 6.52301 393.762 6.52002 cv
394 6.52301 394.238 6.539 394.48 6.57397 cv
394.719 6.61298 394.941 6.664 395.148 6.72302 cv
395.355 6.78497 395.539 6.85498 395.703 6.92999 cv
395.859 7.01202 395.969 7.07397 396.023 7.125 cv
396.074 7.17999 396.109 7.22699 396.129 7.258 cv
396.145 7.297 396.16 7.34399 396.176 7.40198 cv
396.188 7.46503 396.195 7.539 396.203 7.62903 cv
396.207 7.72302 396.211 7.836 396.211 7.96899 cv
396.211 8.12097 396.207 8.25 396.199 8.35199 cv
396.191 8.45697 396.176 8.54303 396.16 8.60498 cv
396.137 8.67603 396.113 8.72302 396.082 8.75403 cv
396.047 8.78497 396 8.80103 395.945 8.80103 cv
395.887 8.80103 395.797 8.76599 395.672 8.69098 cv
395.547 8.62097 395.391 8.54303 395.211 8.453 cv
395.027 8.37097 394.82 8.29303 394.582 8.22302 cv
394.34 8.15601 394.074 8.12097 393.793 8.117 cv
393.566 8.12097 393.375 8.14801 393.211 8.19897 cv
393.043 8.25403 392.902 8.328 392.793 8.422 cv
392.68 8.52002 392.598 8.63702 392.543 8.77002 cv
392.488 8.90997 392.461 9.05103 392.461 9.19897 cv
392.461 9.42603 392.52 9.62097 392.645 9.78101 cv
392.762 9.94501 392.926 10.09 393.137 10.215 cv
393.34 10.344 393.574 10.465 393.832 10.574 cv
394.09 10.691 394.355 10.809 394.629 10.93 cv
394.898 11.059 395.16 11.199 395.422 11.355 cv
395.68 11.512 395.914 11.703 396.117 11.922 cv
396.32 12.148 396.48 12.406 396.605 12.703 cv
396.727 13 396.789 13.352 396.793 13.758 cv
cp
f
404.84 16.516 mo
404.836 16.57 404.824 16.613 404.801 16.652 cv
404.773 16.691 404.727 16.727 404.664 16.75 cv
404.598 16.777 404.512 16.793 404.406 16.809 cv
404.301 16.82 404.168 16.828 404.008 16.828 cv
403.832 16.828 403.691 16.82 403.59 16.809 cv
403.48 16.793 403.398 16.777 403.336 16.75 cv
403.273 16.727 403.227 16.691 403.203 16.652 cv
403.172 16.613 403.16 16.57 403.164 16.516 cv
403.164 15.715 li
402.777 16.129 402.387 16.441 401.992 16.648 cv
401.59 16.855 401.18 16.957 400.758 16.961 cv
400.277 16.957 399.875 16.883 399.551 16.727 cv
399.227 16.574 398.965 16.359 398.766 16.09 cv
398.563 15.82 398.418 15.508 398.336 15.148 cv
398.246 14.793 398.203 14.352 398.207 13.82 cv
398.207 9.56598 li
398.203 9.52002 398.219 9.47302 398.25 9.42999 cv
398.277 9.39502 398.328 9.36298 398.406 9.33197 cv
398.48 9.30902 398.582 9.289 398.711 9.27301 cv
398.836 9.26599 398.992 9.258 399.184 9.25403 cv
399.371 9.258 399.531 9.26599 399.656 9.27301 cv
399.781 9.289 399.879 9.30902 399.957 9.33197 cv
400.027 9.36298 400.082 9.39502 400.117 9.42999 cv
400.145 9.47302 400.16 9.52002 400.164 9.56598 cv
400.164 13.492 li
400.16 13.859 400.184 14.137 400.234 14.328 cv
400.277 14.52 400.348 14.684 400.449 14.82 cv
400.543 14.961 400.668 15.066 400.816 15.141 cv
400.965 15.219 401.137 15.258 401.332 15.254 cv
401.582 15.258 401.832 15.168 402.086 14.98 cv
402.336 14.801 402.605 14.535 402.891 14.187 cv
402.891 9.56598 li
402.891 9.52002 402.902 9.47302 402.934 9.42999 cv
402.957 9.39502 403.012 9.36298 403.09 9.33197 cv
403.164 9.30902 403.262 9.289 403.391 9.27301 cv
403.512 9.26599 403.672 9.258 403.867 9.25403 cv
404.059 9.258 404.215 9.26599 404.34 9.27301 cv
404.461 9.289 404.563 9.30902 404.637 9.33197 cv
404.707 9.36298 404.758 9.39502 404.793 9.42999 cv
404.82 9.47302 404.836 9.52002 404.84 9.56598 cv
cp
f
413.77 12.945 mo
413.77 13.566 413.699 14.125 413.566 14.617 cv
413.426 15.113 413.23 15.531 412.98 15.879 cv
412.723 16.227 412.41 16.496 412.043 16.68 cv
411.668 16.867 411.246 16.957 410.777 16.961 cv
410.539 16.957 410.32 16.934 410.121 16.895 cv
409.914 16.848 409.723 16.781 409.539 16.68 cv
409.355 16.586 409.172 16.461 408.996 16.305 cv
408.813 16.156 408.629 15.973 408.445 15.762 cv
408.445 16.516 li
408.441 16.578 408.43 16.625 408.402 16.66 cv
408.371 16.703 408.324 16.734 408.262 16.758 cv
408.195 16.781 408.105 16.797 408 16.812 cv
407.891 16.82 407.762 16.828 407.605 16.828 cv
407.441 16.828 407.305 16.82 407.203 16.812 cv
407.094 16.797 407.008 16.781 406.945 16.758 cv
406.875 16.734 406.832 16.703 406.809 16.66 cv
406.781 16.625 406.766 16.578 406.77 16.516 cv
406.77 6.27002 li
406.766 6.21899 406.781 6.172 406.816 6.12903 cv
406.844 6.09003 406.898 6.05499 406.977 6.02301 cv
407.051 5.99597 407.152 5.97699 407.277 5.95697 cv
407.402 5.94501 407.559 5.93701 407.754 5.93402 cv
407.941 5.93701 408.102 5.94501 408.227 5.95697 cv
408.352 5.97699 408.449 5.99597 408.527 6.02301 cv
408.598 6.05499 408.652 6.09003 408.688 6.12903 cv
408.715 6.172 408.73 6.21899 408.734 6.27002 cv
408.734 10.109 li
408.91 9.93402 409.086 9.78497 409.266 9.65997 cv
409.438 9.539 409.613 9.43402 409.793 9.35199 cv
409.965 9.27301 410.148 9.21503 410.34 9.17603 cv
410.523 9.14099 410.723 9.125 410.934 9.12097 cv
411.445 9.125 411.879 9.22699 412.242 9.42999 cv
412.598 9.63702 412.891 9.914 413.117 10.262 cv
413.34 10.609 413.504 11.016 413.613 11.48 cv
413.715 11.945 413.77 12.434 413.77 12.945 cv
cp
411.734 13.086 mo
411.73 12.793 411.707 12.508 411.668 12.23 cv
411.621 11.957 411.547 11.715 411.438 11.5 cv
411.328 11.289 411.184 11.117 411.012 10.988 cv
410.836 10.863 410.617 10.801 410.355 10.797 cv
410.223 10.801 410.098 10.816 409.973 10.852 cv
409.848 10.891 409.719 10.953 409.586 11.039 cv
409.453 11.129 409.316 11.246 409.18 11.383 cv
409.035 11.523 408.887 11.695 408.734 11.902 cv
408.734 14.211 li
409.008 14.566 409.27 14.836 409.523 15.016 cv
409.773 15.203 410.039 15.293 410.316 15.293 cv
410.57 15.293 410.785 15.23 410.965 15.098 cv
411.137 14.973 411.285 14.805 411.402 14.594 cv
411.52 14.391 411.602 14.152 411.656 13.883 cv
411.703 13.621 411.73 13.355 411.734 13.086 cv
cp
f
418.855 12.863 mo
418.852 13.164 418.824 13.375 418.77 13.492 cv
418.711 13.617 418.621 13.676 418.496 13.672 cv
415.254 13.672 li
415.125 13.676 415.031 13.613 414.977 13.488 cv
414.914 13.367 414.887 13.16 414.891 12.863 cv
414.887 12.574 414.914 12.367 414.977 12.246 cv
415.031 12.129 415.125 12.07 415.254 12.066 cv
418.496 12.066 li
418.559 12.07 418.609 12.082 418.656 12.105 cv
418.695 12.133 418.734 12.18 418.77 12.238 cv
418.797 12.305 418.82 12.387 418.836 12.488 cv
418.848 12.594 418.852 12.719 418.855 12.863 cv
cp
f
422.508 16.5 mo
422.504 16.555 422.488 16.602 422.457 16.641 cv
422.422 16.684 422.363 16.719 422.289 16.742 cv
422.207 16.77 422.105 16.789 421.977 16.805 cv
421.844 16.82 421.676 16.828 421.48 16.828 cv
421.277 16.828 421.113 16.82 420.984 16.805 cv
420.848 16.789 420.742 16.77 420.668 16.742 cv
420.586 16.719 420.531 16.684 420.5 16.641 cv
420.465 16.602 420.445 16.555 420.449 16.5 cv
420.449 6.97699 li
420.445 6.92999 420.465 6.883 420.5 6.836 cv
420.531 6.797 420.586 6.76202 420.672 6.73401 cv
420.75 6.711 420.855 6.69098 420.988 6.672 cv
421.113 6.65997 421.277 6.65198 421.48 6.64801 cv
421.676 6.65198 421.844 6.65997 421.977 6.672 cv
422.105 6.69098 422.207 6.711 422.289 6.73401 cv
422.363 6.76202 422.422 6.797 422.457 6.836 cv
422.488 6.883 422.504 6.92999 422.508 6.97699 cv
cp
f
435.586 16.516 mo
435.582 16.57 435.566 16.613 435.539 16.652 cv
435.504 16.691 435.453 16.727 435.383 16.75 cv
435.309 16.777 435.207 16.793 435.086 16.809 cv
434.961 16.82 434.805 16.828 434.613 16.828 cv
434.414 16.828 434.254 16.82 434.129 16.809 cv
434.004 16.793 433.902 16.777 433.828 16.75 cv
433.75 16.727 433.699 16.691 433.672 16.652 cv
433.645 16.613 433.629 16.57 433.633 16.516 cv
433.633 12.395 li
433.629 12.164 433.609 11.949 433.566 11.754 cv
433.52 11.562 433.449 11.398 433.363 11.262 cv
433.27 11.125 433.156 11.02 433.02 10.941 cv
432.879 10.867 432.715 10.828 432.523 10.828 cv
432.289 10.828 432.051 10.922 431.813 11.102 cv
431.574 11.285 431.316 11.547 431.035 11.895 cv
431.035 16.516 li
431.035 16.57 431.02 16.613 430.988 16.652 cv
430.957 16.691 430.902 16.727 430.828 16.75 cv
430.75 16.777 430.648 16.793 430.527 16.809 cv
430.402 16.82 430.25 16.828 430.063 16.828 cv
429.867 16.828 429.707 16.82 429.586 16.809 cv
429.457 16.793 429.355 16.777 429.285 16.75 cv
429.207 16.727 429.156 16.691 429.125 16.652 cv
429.094 16.613 429.078 16.57 429.078 16.516 cv
429.078 12.395 li
429.078 12.164 429.055 11.949 429.012 11.754 cv
428.969 11.562 428.902 11.398 428.816 11.262 cv
428.723 11.125 428.609 11.02 428.473 10.941 cv
428.328 10.867 428.164 10.828 427.98 10.828 cv
427.738 10.828 427.5 10.922 427.262 11.102 cv
427.023 11.285 426.766 11.547 426.492 11.895 cv
426.492 16.516 li
426.488 16.57 426.473 16.613 426.445 16.652 cv
426.41 16.691 426.355 16.727 426.285 16.75 cv
426.207 16.777 426.109 16.793 425.984 16.809 cv
425.859 16.82 425.699 16.828 425.512 16.828 cv
425.316 16.828 425.16 16.82 425.035 16.809 cv
424.91 16.793 424.809 16.777 424.734 16.75 cv
424.656 16.727 424.602 16.691 424.574 16.652 cv
424.539 16.613 424.523 16.57 424.527 16.516 cv
424.527 9.56598 li
424.523 9.52002 424.539 9.47302 424.566 9.42999 cv
424.59 9.39502 424.637 9.36298 424.707 9.33197 cv
424.773 9.30902 424.859 9.289 424.969 9.27301 cv
425.074 9.26599 425.207 9.258 425.371 9.25403 cv
425.535 9.258 425.672 9.26599 425.781 9.27301 cv
425.887 9.289 425.973 9.30902 426.035 9.33197 cv
426.094 9.36298 426.137 9.39502 426.164 9.42999 cv
426.188 9.47302 426.199 9.52002 426.203 9.56598 cv
426.203 10.367 li
426.586 9.95697 426.969 9.64502 427.352 9.43402 cv
427.73 9.22699 428.133 9.125 428.551 9.12097 cv
428.836 9.125 429.09 9.15198 429.32 9.211 cv
429.547 9.27301 429.754 9.35901 429.934 9.46899 cv
430.113 9.58197 430.266 9.71899 430.395 9.87097 cv
430.523 10.027 430.633 10.199 430.723 10.391 cv
430.93 10.168 431.133 9.97699 431.336 9.81598 cv
431.531 9.65601 431.73 9.52301 431.926 9.422 cv
432.121 9.32001 432.316 9.24597 432.512 9.19501 cv
432.707 9.14801 432.906 9.125 433.109 9.12097 cv
433.57 9.125 433.957 9.203 434.277 9.35498 cv
434.59 9.51599 434.848 9.72699 435.043 9.992 cv
435.238 10.262 435.375 10.574 435.461 10.93 cv
435.539 11.289 435.582 11.668 435.586 12.066 cv
cp
f
443.43 16.539 mo
443.426 16.617 443.398 16.672 443.352 16.711 cv
443.297 16.754 443.215 16.781 443.105 16.801 cv
442.988 16.816 442.824 16.828 442.609 16.828 cv
442.371 16.828 442.199 16.816 442.098 16.801 cv
441.988 16.781 441.914 16.754 441.875 16.711 cv
441.828 16.672 441.809 16.617 441.809 16.539 cv
441.809 15.988 li
441.52 16.297 441.191 16.535 440.828 16.703 cv
440.461 16.875 440.055 16.957 439.609 16.961 cv
439.238 16.957 438.898 16.91 438.59 16.816 cv
438.281 16.723 438.016 16.582 437.789 16.387 cv
437.563 16.199 437.387 15.965 437.262 15.684 cv
437.137 15.406 437.074 15.078 437.078 14.699 cv
437.074 14.301 437.152 13.949 437.313 13.645 cv
437.469 13.348 437.707 13.102 438.023 12.906 cv
438.336 12.715 438.727 12.57 439.195 12.473 cv
439.664 12.383 440.207 12.336 440.824 12.332 cv
441.504 12.332 li
441.504 11.91 li
441.504 11.695 441.48 11.504 441.438 11.34 cv
441.391 11.18 441.316 11.043 441.219 10.93 cv
441.113 10.824 440.98 10.742 440.813 10.687 cv
440.641 10.637 440.43 10.613 440.188 10.609 cv
439.855 10.613 439.563 10.648 439.309 10.719 cv
439.047 10.793 438.82 10.875 438.625 10.961 cv
438.426 11.055 438.262 11.133 438.133 11.203 cv
437.996 11.277 437.887 11.316 437.809 11.312 cv
437.746 11.316 437.695 11.297 437.656 11.258 cv
437.609 11.223 437.574 11.172 437.547 11.102 cv
437.516 11.039 437.492 10.953 437.48 10.852 cv
437.461 10.754 437.453 10.645 437.457 10.523 cv
437.453 10.363 437.469 10.238 437.496 10.141 cv
437.52 10.051 437.566 9.96503 437.645 9.88702 cv
437.715 9.81201 437.844 9.72998 438.027 9.64099 cv
438.207 9.55103 438.418 9.46503 438.664 9.38702 cv
438.906 9.30902 439.176 9.24597 439.465 9.19501 cv
439.754 9.14801 440.051 9.125 440.359 9.12097 cv
440.902 9.125 441.367 9.17603 441.754 9.28101 cv
442.141 9.39099 442.461 9.55499 442.711 9.77301 cv
442.961 9.992 443.141 10.277 443.258 10.625 cv
443.367 10.977 443.426 11.391 443.43 11.863 cv
cp
441.504 13.562 mo
440.754 13.562 li
440.438 13.566 440.168 13.59 439.945 13.633 cv
439.719 13.684 439.535 13.754 439.398 13.844 cv
439.254 13.941 439.152 14.055 439.09 14.184 cv
439.023 14.32 438.988 14.469 438.992 14.637 cv
438.988 14.93 439.082 15.16 439.27 15.324 cv
439.453 15.492 439.711 15.574 440.039 15.574 cv
440.313 15.574 440.563 15.504 440.797 15.363 cv
441.023 15.223 441.262 15.02 441.504 14.746 cv
cp
f
451.652 10.047 mo
451.648 10.301 451.621 10.484 451.566 10.602 cv
451.508 10.723 451.438 10.781 451.359 10.781 cv
450.539 10.781 li
450.652 10.906 450.734 11.051 450.785 11.207 cv
450.832 11.367 450.855 11.531 450.859 11.699 cv
450.855 12.109 450.789 12.469 450.656 12.781 cv
450.52 13.098 450.324 13.363 450.074 13.574 cv
449.82 13.793 449.52 13.957 449.164 14.066 cv
448.805 14.184 448.406 14.238 447.977 14.234 cv
447.75 14.238 447.539 14.211 447.336 14.152 cv
447.133 14.102 446.977 14.039 446.867 13.961 cv
446.805 14.031 446.746 14.109 446.699 14.203 cv
446.648 14.297 446.625 14.402 446.629 14.512 cv
446.625 14.668 446.691 14.789 446.824 14.883 cv
446.953 14.98 447.141 15.035 447.383 15.043 cv
449.074 15.105 li
449.469 15.121 449.82 15.18 450.129 15.273 cv
450.438 15.375 450.699 15.508 450.91 15.68 cv
451.121 15.855 451.281 16.066 451.391 16.309 cv
451.5 16.555 451.555 16.828 451.559 17.141 cv
451.555 17.477 451.48 17.801 451.332 18.109 cv
451.184 18.41 450.957 18.672 450.656 18.898 cv
450.352 19.117 449.973 19.297 449.52 19.43 cv
449.063 19.559 448.531 19.621 447.93 19.625 cv
447.332 19.621 446.828 19.574 446.41 19.484 cv
445.992 19.387 445.648 19.258 445.383 19.094 cv
445.113 18.926 444.918 18.727 444.801 18.5 cv
444.676 18.266 444.617 18.012 444.617 17.738 cv
444.617 17.566 444.637 17.406 444.684 17.25 cv
444.723 17.094 444.789 16.941 444.879 16.801 cv
444.961 16.656 445.066 16.523 445.191 16.391 cv
445.316 16.262 445.457 16.137 445.621 16.016 cv
445.395 15.902 445.223 15.742 445.102 15.531 cv
444.98 15.328 444.922 15.102 444.922 14.855 cv
444.922 14.555 444.988 14.277 445.129 14.02 cv
445.266 13.77 445.449 13.539 445.676 13.336 cv
445.492 13.156 445.348 12.941 445.238 12.684 cv
445.129 12.434 445.074 12.113 445.078 11.73 cv
445.074 11.328 445.145 10.969 445.289 10.645 cv
445.43 10.328 445.629 10.059 445.887 9.836 cv
446.141 9.617 446.445 9.44501 446.797 9.328 cv
447.148 9.211 447.539 9.15198 447.969 9.15198 cv
448.188 9.15198 448.395 9.16803 448.594 9.19098 cv
448.793 9.22302 448.98 9.258 449.152 9.30103 cv
451.359 9.30103 li
451.441 9.30499 451.512 9.36298 451.57 9.47302 cv
451.621 9.59003 451.648 9.78101 451.652 10.047 cv
cp
449.137 11.691 mo
449.133 11.32 449.031 11.031 448.824 10.82 cv
448.613 10.617 448.32 10.512 447.945 10.508 cv
447.75 10.512 447.578 10.543 447.438 10.605 cv
447.289 10.672 447.168 10.762 447.074 10.871 cv
446.973 10.984 446.902 11.113 446.859 11.262 cv
446.809 11.41 446.785 11.566 446.789 11.723 cv
446.785 12.082 446.891 12.359 447.102 12.562 cv
447.309 12.77 447.598 12.875 447.969 12.871 cv
448.164 12.875 448.332 12.844 448.48 12.777 cv
448.621 12.719 448.742 12.633 448.844 12.52 cv
448.938 12.414 449.012 12.285 449.063 12.141 cv
449.109 12 449.133 11.852 449.137 11.691 cv
cp
449.598 17.242 mo
449.598 17.004 449.504 16.828 449.316 16.703 cv
449.129 16.582 448.871 16.512 448.543 16.5 cv
447.148 16.461 li
447.012 16.562 446.902 16.656 446.824 16.746 cv
446.742 16.836 446.68 16.922 446.633 17.008 cv
446.582 17.09 446.547 17.172 446.535 17.25 cv
446.516 17.328 446.508 17.406 446.512 17.492 cv
446.508 17.746 446.641 17.945 446.902 18.082 cv
447.164 18.215 447.535 18.281 448.016 18.285 cv
448.309 18.281 448.555 18.25 448.762 18.195 cv
448.961 18.133 449.125 18.055 449.254 17.957 cv
449.375 17.855 449.465 17.746 449.52 17.625 cv
449.57 17.504 449.598 17.375 449.598 17.242 cv
cp
f
459.262 12.84 mo
459.258 13.078 459.207 13.254 459.102 13.367 cv
458.992 13.484 458.844 13.543 458.664 13.539 cv
454.43 13.539 li
454.426 13.84 454.461 14.109 454.535 14.348 cv
454.602 14.59 454.715 14.793 454.871 14.961 cv
455.023 15.133 455.219 15.262 455.461 15.348 cv
455.699 15.437 455.988 15.48 456.332 15.48 cv
456.672 15.48 456.973 15.457 457.234 15.406 cv
457.492 15.359 457.719 15.305 457.91 15.242 cv
458.098 15.184 458.254 15.129 458.383 15.078 cv
458.504 15.031 458.605 15.008 458.688 15.004 cv
458.73 15.008 458.77 15.016 458.805 15.031 cv
458.832 15.051 458.859 15.082 458.879 15.129 cv
458.898 15.176 458.91 15.242 458.922 15.328 cv
458.926 15.414 458.93 15.523 458.934 15.652 cv
458.93 15.77 458.93 15.867 458.926 15.945 cv
458.918 16.027 458.91 16.094 458.902 16.148 cv
458.891 16.207 458.875 16.258 458.855 16.293 cv
458.836 16.336 458.809 16.371 458.777 16.406 cv
458.742 16.445 458.648 16.496 458.5 16.555 cv
458.344 16.621 458.152 16.684 457.922 16.738 cv
457.684 16.801 457.414 16.848 457.117 16.895 cv
456.813 16.934 456.492 16.957 456.152 16.961 cv
455.531 16.957 454.988 16.883 454.527 16.727 cv
454.059 16.574 453.672 16.336 453.363 16.02 cv
453.047 15.703 452.813 15.305 452.664 14.82 cv
452.508 14.34 452.434 13.773 452.438 13.117 cv
452.434 12.504 452.512 11.945 452.676 11.449 cv
452.832 10.953 453.066 10.535 453.379 10.187 cv
453.684 9.84399 454.059 9.578 454.496 9.39502 cv
454.934 9.21503 455.426 9.125 455.98 9.12097 cv
456.559 9.125 457.059 9.211 457.473 9.37903 cv
457.887 9.55499 458.223 9.79303 458.488 10.094 cv
458.75 10.398 458.945 10.758 459.074 11.172 cv
459.195 11.59 459.258 12.039 459.262 12.527 cv
cp
457.359 12.277 mo
457.371 11.727 457.262 11.293 457.027 10.98 cv
456.793 10.668 456.426 10.512 455.934 10.508 cv
455.684 10.512 455.469 10.559 455.285 10.648 cv
455.098 10.746 454.945 10.871 454.824 11.027 cv
454.699 11.187 454.605 11.375 454.543 11.59 cv
454.477 11.805 454.438 12.035 454.43 12.277 cv
cp
f
465.762 14.551 mo
465.758 14.949 465.684 15.297 465.539 15.598 cv
465.391 15.898 465.184 16.152 464.914 16.352 cv
464.641 16.559 464.32 16.707 463.953 16.809 cv
463.586 16.906 463.184 16.957 462.754 16.961 cv
462.488 16.957 462.242 16.937 462.008 16.902 cv
461.773 16.859 461.563 16.812 461.375 16.754 cv
461.188 16.695 461.031 16.633 460.906 16.57 cv
460.781 16.508 460.688 16.449 460.633 16.395 cv
460.574 16.34 460.531 16.258 460.504 16.141 cv
460.469 16.027 460.453 15.852 460.457 15.621 cv
460.453 15.473 460.461 15.352 460.473 15.258 cv
460.48 15.168 460.496 15.098 460.52 15.039 cv
460.539 14.988 460.563 14.949 460.598 14.93 cv
460.625 14.914 460.664 14.906 460.711 14.902 cv
460.766 14.906 460.852 14.937 460.965 15 cv
461.074 15.066 461.211 15.141 461.383 15.215 cv
461.547 15.297 461.742 15.367 461.961 15.434 cv
462.18 15.504 462.43 15.539 462.715 15.535 cv
462.891 15.539 463.047 15.52 463.188 15.48 cv
463.32 15.445 463.441 15.395 463.547 15.324 cv
463.645 15.258 463.719 15.172 463.773 15.066 cv
463.82 14.965 463.848 14.844 463.852 14.707 cv
463.848 14.551 463.801 14.418 463.707 14.309 cv
463.613 14.199 463.484 14.102 463.328 14.016 cv
463.164 13.934 462.984 13.855 462.789 13.781 cv
462.586 13.711 462.383 13.633 462.172 13.539 cv
461.961 13.453 461.754 13.352 461.559 13.234 cv
461.355 13.125 461.176 12.984 461.02 12.816 cv
460.855 12.652 460.73 12.453 460.637 12.215 cv
460.543 11.984 460.496 11.703 460.496 11.371 cv
460.496 11.043 460.559 10.738 460.688 10.457 cv
460.816 10.184 461.004 9.94501 461.25 9.74597 cv
461.492 9.55103 461.789 9.39801 462.141 9.28497 cv
462.488 9.17999 462.883 9.125 463.324 9.12097 cv
463.539 9.125 463.75 9.14099 463.957 9.16803 cv
464.16 9.203 464.348 9.242 464.516 9.28497 cv
464.68 9.336 464.82 9.38702 464.938 9.43701 cv
465.051 9.49597 465.133 9.54303 465.184 9.578 cv
465.23 9.62097 465.266 9.65997 465.289 9.69501 cv
465.309 9.73798 465.32 9.78497 465.332 9.836 cv
465.34 9.89099 465.352 9.95697 465.359 10.035 cv
465.367 10.121 465.371 10.219 465.371 10.336 cv
465.371 10.477 465.367 10.594 465.359 10.68 cv
465.352 10.773 465.336 10.844 465.32 10.891 cv
465.301 10.945 465.277 10.98 465.25 10.996 cv
465.215 11.02 465.18 11.027 465.141 11.023 cv
465.09 11.027 465.016 11 464.922 10.941 cv
464.82 10.891 464.699 10.832 464.551 10.766 cv
464.402 10.707 464.23 10.648 464.035 10.59 cv
463.84 10.539 463.617 10.512 463.371 10.508 cv
463.191 10.512 463.039 10.531 462.91 10.562 cv
462.777 10.602 462.668 10.652 462.59 10.719 cv
462.504 10.789 462.441 10.867 462.402 10.957 cv
462.355 11.051 462.336 11.148 462.34 11.25 cv
462.336 11.41 462.387 11.547 462.488 11.652 cv
462.586 11.766 462.715 11.859 462.879 11.941 cv
463.039 12.027 463.223 12.105 463.43 12.176 cv
463.633 12.25 463.84 12.332 464.051 12.414 cv
464.258 12.504 464.465 12.602 464.676 12.715 cv
464.879 12.828 465.063 12.969 465.223 13.133 cv
465.383 13.301 465.512 13.5 465.613 13.73 cv
465.707 13.965 465.758 14.238 465.762 14.551 cv
cp
f
474.535 12.863 mo
474.531 13.164 474.504 13.375 474.449 13.492 cv
474.391 13.617 474.301 13.676 474.176 13.672 cv
470.934 13.672 li
470.805 13.676 470.711 13.613 470.656 13.488 cv
470.594 13.367 470.566 13.16 470.57 12.863 cv
470.566 12.574 470.594 12.367 470.656 12.246 cv
470.711 12.129 470.805 12.07 470.934 12.066 cv
474.176 12.066 li
474.238 12.07 474.289 12.082 474.336 12.105 cv
474.375 12.133 474.414 12.18 474.449 12.238 cv
474.477 12.305 474.5 12.387 474.516 12.488 cv
474.527 12.594 474.531 12.719 474.535 12.863 cv
cp
f
487.207 16.516 mo
487.207 16.578 487.195 16.625 487.176 16.66 cv
487.156 16.703 487.109 16.734 487.031 16.758 cv
486.953 16.781 486.836 16.797 486.688 16.812 cv
486.531 16.82 486.328 16.828 486.07 16.828 cv
485.852 16.828 485.676 16.82 485.547 16.812 cv
485.418 16.797 485.316 16.781 485.242 16.754 cv
485.164 16.727 485.109 16.691 485.082 16.645 cv
485.047 16.605 485.023 16.551 485.004 16.484 cv
484.098 14.234 li
483.988 13.98 483.883 13.754 483.781 13.555 cv
483.672 13.359 483.559 13.195 483.434 13.062 cv
483.305 12.934 483.156 12.832 482.992 12.762 cv
482.824 12.695 482.633 12.664 482.418 12.66 cv
481.777 12.66 li
481.777 16.5 li
481.773 16.555 481.758 16.602 481.727 16.641 cv
481.691 16.684 481.637 16.719 481.559 16.742 cv
481.48 16.77 481.375 16.789 481.246 16.805 cv
481.113 16.82 480.949 16.828 480.75 16.828 cv
480.551 16.828 480.383 16.82 480.254 16.805 cv
480.117 16.789 480.012 16.77 479.938 16.742 cv
479.855 16.719 479.801 16.684 479.773 16.641 cv
479.738 16.602 479.723 16.555 479.727 16.5 cv
479.727 7.34399 li
479.723 7.117 479.781 6.953 479.902 6.84802 cv
480.016 6.75 480.16 6.69897 480.336 6.69501 cv
482.945 6.69501 li
483.207 6.69897 483.426 6.703 483.602 6.711 cv
483.77 6.72302 483.926 6.73401 484.07 6.75 cv
484.473 6.80902 484.836 6.90997 485.16 7.047 cv
485.484 7.19098 485.762 7.375 485.988 7.59802 cv
486.215 7.828 486.387 8.09399 486.508 8.40198 cv
486.625 8.711 486.684 9.06598 486.688 9.46503 cv
486.684 9.80499 486.641 10.113 486.559 10.387 cv
486.469 10.668 486.344 10.914 486.18 11.133 cv
486.012 11.352 485.805 11.543 485.563 11.699 cv
485.316 11.863 485.039 11.992 484.73 12.09 cv
484.879 12.164 485.023 12.254 485.156 12.355 cv
485.289 12.465 485.41 12.59 485.527 12.734 cv
485.641 12.883 485.754 13.051 485.859 13.238 cv
485.961 13.43 486.063 13.645 486.164 13.883 cv
487.016 15.871 li
487.09 16.07 487.141 16.211 487.168 16.301 cv
487.191 16.395 487.207 16.469 487.207 16.516 cv
cp
484.566 9.67603 mo
484.563 9.34399 484.488 9.06201 484.34 8.83197 cv
484.188 8.60498 483.941 8.44501 483.602 8.34802 cv
483.496 8.32397 483.379 8.30103 483.246 8.28497 cv
483.113 8.27002 482.93 8.26202 482.695 8.26202 cv
481.777 8.26202 li
481.777 11.125 li
482.82 11.125 li
483.109 11.129 483.367 11.094 483.586 11.02 cv
483.805 10.953 483.984 10.852 484.129 10.723 cv
484.273 10.598 484.383 10.445 484.457 10.266 cv
484.527 10.09 484.563 9.89502 484.566 9.67603 cv
cp
f
494.793 12.84 mo
494.789 13.078 494.738 13.254 494.633 13.367 cv
494.523 13.484 494.375 13.543 494.195 13.539 cv
489.961 13.539 li
489.957 13.84 489.992 14.109 490.066 14.348 cv
490.133 14.59 490.246 14.793 490.402 14.961 cv
490.555 15.133 490.75 15.262 490.992 15.348 cv
491.23 15.437 491.52 15.48 491.863 15.48 cv
492.203 15.48 492.504 15.457 492.766 15.406 cv
493.023 15.359 493.25 15.305 493.441 15.242 cv
493.629 15.184 493.785 15.129 493.914 15.078 cv
494.035 15.031 494.137 15.008 494.219 15.004 cv
494.262 15.008 494.301 15.016 494.336 15.031 cv
494.363 15.051 494.391 15.082 494.41 15.129 cv
494.43 15.176 494.441 15.242 494.453 15.328 cv
494.457 15.414 494.461 15.523 494.465 15.652 cv
494.461 15.77 494.461 15.867 494.457 15.945 cv
494.449 16.027 494.441 16.094 494.434 16.148 cv
494.422 16.207 494.406 16.258 494.387 16.293 cv
494.367 16.336 494.34 16.371 494.309 16.406 cv
494.273 16.445 494.18 16.496 494.031 16.555 cv
493.875 16.621 493.684 16.684 493.453 16.738 cv
493.215 16.801 492.945 16.848 492.648 16.895 cv
492.344 16.934 492.023 16.957 491.684 16.961 cv
491.063 16.957 490.52 16.883 490.059 16.727 cv
489.59 16.574 489.203 16.336 488.895 16.02 cv
488.578 15.703 488.344 15.305 488.195 14.82 cv
488.039 14.34 487.965 13.773 487.969 13.117 cv
487.965 12.504 488.043 11.945 488.207 11.449 cv
488.363 10.953 488.598 10.535 488.91 10.187 cv
489.215 9.84399 489.59 9.578 490.027 9.39502 cv
490.465 9.21503 490.957 9.125 491.512 9.12097 cv
492.09 9.125 492.59 9.211 493.004 9.37903 cv
493.418 9.55499 493.754 9.79303 494.02 10.094 cv
494.281 10.398 494.477 10.758 494.605 11.172 cv
494.727 11.59 494.789 12.039 494.793 12.527 cv
cp
492.891 12.277 mo
492.902 11.727 492.793 11.293 492.559 10.98 cv
492.324 10.668 491.957 10.512 491.465 10.508 cv
491.215 10.512 491 10.559 490.816 10.648 cv
490.629 10.746 490.477 10.871 490.355 11.027 cv
490.23 11.187 490.137 11.375 490.074 11.59 cv
490.008 11.805 489.969 12.035 489.961 12.277 cv
cp
f
507.457 16.516 mo
507.453 16.57 507.438 16.613 507.41 16.652 cv
507.375 16.691 507.324 16.727 507.254 16.75 cv
507.18 16.777 507.078 16.793 506.957 16.809 cv
506.832 16.82 506.676 16.828 506.484 16.828 cv
506.285 16.828 506.125 16.82 506 16.809 cv
505.875 16.793 505.773 16.777 505.699 16.75 cv
505.621 16.727 505.57 16.691 505.543 16.652 cv
505.516 16.613 505.5 16.57 505.504 16.516 cv
505.504 12.395 li
505.5 12.164 505.48 11.949 505.438 11.754 cv
505.391 11.562 505.32 11.398 505.234 11.262 cv
505.141 11.125 505.027 11.02 504.891 10.941 cv
504.75 10.867 504.586 10.828 504.395 10.828 cv
504.16 10.828 503.922 10.922 503.684 11.102 cv
503.445 11.285 503.188 11.547 502.906 11.895 cv
502.906 16.516 li
502.906 16.57 502.891 16.613 502.859 16.652 cv
502.828 16.691 502.773 16.727 502.699 16.75 cv
502.621 16.777 502.52 16.793 502.398 16.809 cv
502.273 16.82 502.121 16.828 501.934 16.828 cv
501.738 16.828 501.578 16.82 501.457 16.809 cv
501.328 16.793 501.227 16.777 501.156 16.75 cv
501.078 16.727 501.027 16.691 500.996 16.652 cv
500.965 16.613 500.949 16.57 500.949 16.516 cv
500.949 12.395 li
500.949 12.164 500.926 11.949 500.883 11.754 cv
500.84 11.562 500.773 11.398 500.688 11.262 cv
500.594 11.125 500.48 11.02 500.344 10.941 cv
500.199 10.867 500.035 10.828 499.852 10.828 cv
499.609 10.828 499.371 10.922 499.133 11.102 cv
498.895 11.285 498.637 11.547 498.363 11.895 cv
498.363 16.516 li
498.359 16.57 498.344 16.613 498.316 16.652 cv
498.281 16.691 498.227 16.727 498.156 16.75 cv
498.078 16.777 497.98 16.793 497.855 16.809 cv
497.73 16.82 497.57 16.828 497.383 16.828 cv
497.188 16.828 497.031 16.82 496.906 16.809 cv
496.781 16.793 496.68 16.777 496.605 16.75 cv
496.527 16.727 496.473 16.691 496.445 16.652 cv
496.41 16.613 496.395 16.57 496.398 16.516 cv
496.398 9.56598 li
496.395 9.52002 496.41 9.47302 496.438 9.42999 cv
496.461 9.39502 496.508 9.36298 496.578 9.33197 cv
496.645 9.30902 496.73 9.289 496.84 9.27301 cv
496.945 9.26599 497.078 9.258 497.242 9.25403 cv
497.406 9.258 497.543 9.26599 497.652 9.27301 cv
497.758 9.289 497.844 9.30902 497.906 9.33197 cv
497.965 9.36298 498.008 9.39502 498.035 9.42999 cv
498.059 9.47302 498.07 9.52002 498.074 9.56598 cv
498.074 10.367 li
498.457 9.95697 498.84 9.64502 499.223 9.43402 cv
499.602 9.22699 500.004 9.125 500.422 9.12097 cv
500.707 9.125 500.961 9.15198 501.191 9.211 cv
501.418 9.27301 501.625 9.35901 501.805 9.46899 cv
501.984 9.58197 502.137 9.71899 502.266 9.87097 cv
502.395 10.027 502.504 10.199 502.594 10.391 cv
502.801 10.168 503.004 9.97699 503.207 9.81598 cv
503.402 9.65601 503.602 9.52301 503.797 9.422 cv
503.992 9.32001 504.188 9.24597 504.383 9.19501 cv
504.578 9.14801 504.777 9.125 504.98 9.12097 cv
505.441 9.125 505.828 9.203 506.148 9.35498 cv
506.461 9.51599 506.719 9.72699 506.914 9.992 cv
507.109 10.262 507.246 10.574 507.332 10.93 cv
507.41 11.289 507.453 11.668 507.457 12.066 cv
cp
f
516.406 12.969 mo
516.402 13.566 516.324 14.109 516.172 14.594 cv
516.012 15.086 515.777 15.504 515.461 15.855 cv
515.145 16.207 514.746 16.48 514.27 16.672 cv
513.789 16.863 513.23 16.957 512.594 16.961 cv
511.973 16.957 511.434 16.875 510.98 16.703 cv
510.52 16.535 510.141 16.285 509.844 15.957 cv
509.539 15.633 509.316 15.23 509.172 14.75 cv
509.027 14.273 508.957 13.727 508.957 13.109 cv
508.957 12.52 509.035 11.98 509.191 11.488 cv
509.348 11 509.586 10.578 509.906 10.227 cv
510.223 9.87903 510.617 9.60498 511.094 9.40997 cv
511.566 9.21899 512.125 9.125 512.766 9.12097 cv
513.391 9.125 513.93 9.20697 514.387 9.375 cv
514.844 9.547 515.223 9.797 515.52 10.121 cv
515.816 10.449 516.039 10.852 516.188 11.328 cv
516.332 11.809 516.402 12.355 516.406 12.969 cv
cp
514.387 13.047 mo
514.383 12.711 514.355 12.395 514.305 12.102 cv
514.246 11.816 514.152 11.566 514.027 11.352 cv
513.895 11.141 513.723 10.973 513.512 10.852 cv
513.293 10.734 513.023 10.676 512.695 10.672 cv
512.406 10.676 512.152 10.73 511.934 10.832 cv
511.715 10.941 511.535 11.098 511.395 11.301 cv
511.254 11.508 511.148 11.754 511.078 12.039 cv
511.008 12.332 510.973 12.66 510.973 13.023 cv
510.973 13.371 511 13.687 511.059 13.973 cv
511.113 14.266 511.207 14.516 511.336 14.727 cv
511.461 14.941 511.633 15.105 511.855 15.219 cv
512.07 15.34 512.34 15.398 512.664 15.395 cv
512.957 15.398 513.215 15.344 513.438 15.234 cv
513.652 15.129 513.832 14.977 513.973 14.77 cv
514.113 14.57 514.215 14.324 514.285 14.035 cv
514.348 13.75 514.383 13.422 514.387 13.047 cv
cp
f
522.113 15.832 mo
522.113 16.059 522.098 16.234 522.07 16.355 cv
522.039 16.48 522 16.566 521.957 16.613 cv
521.906 16.664 521.84 16.707 521.75 16.746 cv
521.656 16.785 521.547 16.816 521.43 16.848 cv
521.305 16.871 521.172 16.895 521.031 16.914 cv
520.887 16.926 520.746 16.934 520.602 16.937 cv
520.211 16.934 519.871 16.883 519.586 16.789 cv
519.301 16.687 519.066 16.539 518.879 16.332 cv
518.691 16.129 518.551 15.871 518.465 15.559 cv
518.371 15.25 518.328 14.879 518.332 14.449 cv
518.332 10.891 li
517.5 10.891 li
517.398 10.895 517.324 10.832 517.273 10.707 cv
517.219 10.586 517.191 10.383 517.195 10.094 cv
517.191 9.94501 517.199 9.81598 517.215 9.71503 cv
517.227 9.61298 517.246 9.53101 517.273 9.46899 cv
517.297 9.40997 517.328 9.367 517.371 9.34003 cv
517.406 9.31598 517.453 9.30499 517.508 9.30103 cv
518.332 9.30103 li
518.332 7.75 li
518.328 7.703 518.344 7.65601 518.375 7.60901 cv
518.402 7.57001 518.453 7.53497 518.531 7.50403 cv
518.605 7.47998 518.707 7.45697 518.836 7.44098 cv
518.961 7.42999 519.117 7.42603 519.309 7.422 cv
519.496 7.42603 519.656 7.42999 519.785 7.44098 cv
519.91 7.45697 520.012 7.47998 520.086 7.50403 cv
520.156 7.53497 520.207 7.57001 520.242 7.60901 cv
520.27 7.65601 520.285 7.703 520.289 7.75 cv
520.289 9.30103 li
521.801 9.30103 li
521.852 9.30499 521.898 9.31598 521.938 9.34003 cv
521.977 9.367 522.008 9.40997 522.035 9.46899 cv
522.059 9.53101 522.078 9.61298 522.094 9.71503 cv
522.105 9.81598 522.113 9.94501 522.113 10.094 cv
522.113 10.383 522.086 10.586 522.035 10.707 cv
521.98 10.832 521.906 10.895 521.809 10.891 cv
520.289 10.891 li
520.289 14.156 li
520.285 14.535 520.344 14.82 520.469 15.008 cv
520.586 15.199 520.801 15.293 521.105 15.293 cv
521.207 15.293 521.301 15.285 521.387 15.266 cv
521.469 15.25 521.543 15.23 521.609 15.203 cv
521.672 15.184 521.727 15.16 521.773 15.141 cv
521.816 15.125 521.855 15.117 521.895 15.113 cv
521.922 15.117 521.953 15.125 521.984 15.141 cv
522.012 15.16 522.031 15.199 522.051 15.25 cv
522.063 15.309 522.078 15.383 522.094 15.473 cv
522.105 15.57 522.113 15.687 522.113 15.832 cv
cp
f
529.699 12.84 mo
529.695 13.078 529.645 13.254 529.539 13.367 cv
529.43 13.484 529.281 13.543 529.102 13.539 cv
524.867 13.539 li
524.863 13.84 524.898 14.109 524.973 14.348 cv
525.039 14.59 525.152 14.793 525.309 14.961 cv
525.461 15.133 525.656 15.262 525.898 15.348 cv
526.137 15.437 526.426 15.48 526.77 15.48 cv
527.109 15.48 527.41 15.457 527.672 15.406 cv
527.93 15.359 528.156 15.305 528.348 15.242 cv
528.535 15.184 528.691 15.129 528.82 15.078 cv
528.941 15.031 529.043 15.008 529.125 15.004 cv
529.168 15.008 529.207 15.016 529.242 15.031 cv
529.27 15.051 529.297 15.082 529.316 15.129 cv
529.336 15.176 529.348 15.242 529.359 15.328 cv
529.363 15.414 529.367 15.523 529.371 15.652 cv
529.367 15.77 529.367 15.867 529.363 15.945 cv
529.355 16.027 529.348 16.094 529.34 16.148 cv
529.328 16.207 529.313 16.258 529.293 16.293 cv
529.273 16.336 529.246 16.371 529.215 16.406 cv
529.18 16.445 529.086 16.496 528.938 16.555 cv
528.781 16.621 528.59 16.684 528.359 16.738 cv
528.121 16.801 527.852 16.848 527.555 16.895 cv
527.25 16.934 526.93 16.957 526.59 16.961 cv
525.969 16.957 525.426 16.883 524.965 16.727 cv
524.496 16.574 524.109 16.336 523.801 16.02 cv
523.484 15.703 523.25 15.305 523.102 14.82 cv
522.945 14.34 522.871 13.773 522.875 13.117 cv
522.871 12.504 522.949 11.945 523.113 11.449 cv
523.27 10.953 523.504 10.535 523.816 10.187 cv
524.121 9.84399 524.496 9.578 524.934 9.39502 cv
525.371 9.21503 525.863 9.125 526.418 9.12097 cv
526.996 9.125 527.496 9.211 527.91 9.37903 cv
528.324 9.55499 528.66 9.79303 528.926 10.094 cv
529.188 10.398 529.383 10.758 529.512 11.172 cv
529.633 11.59 529.695 12.039 529.699 12.527 cv
cp
527.797 12.277 mo
527.809 11.727 527.699 11.293 527.465 10.98 cv
527.23 10.668 526.863 10.512 526.371 10.508 cv
526.121 10.512 525.906 10.559 525.723 10.648 cv
525.535 10.746 525.383 10.871 525.262 11.027 cv
525.137 11.187 525.043 11.375 524.98 11.59 cv
524.914 11.805 524.875 12.035 524.867 12.277 cv
cp
f
546.895 16.5 mo
546.891 16.555 546.879 16.602 546.852 16.641 cv
546.82 16.684 546.766 16.719 546.695 16.742 cv
546.617 16.77 546.52 16.789 546.395 16.805 cv
546.27 16.82 546.109 16.828 545.918 16.828 cv
545.73 16.828 545.574 16.82 545.453 16.805 cv
545.324 16.789 545.227 16.77 545.156 16.742 cv
545.082 16.719 545.031 16.684 545 16.641 cv
544.969 16.602 544.953 16.555 544.953 16.5 cv
544.953 8.29303 li
544.938 8.29303 li
542.016 16.492 li
541.992 16.562 541.957 16.617 541.914 16.66 cv
541.863 16.707 541.801 16.742 541.723 16.766 cv
541.641 16.793 541.539 16.809 541.414 16.816 cv
541.289 16.824 541.137 16.828 540.965 16.828 cv
540.785 16.828 540.637 16.82 540.512 16.809 cv
540.387 16.793 540.281 16.773 540.203 16.746 cv
540.117 16.719 540.055 16.684 540.012 16.641 cv
539.961 16.602 539.93 16.555 539.918 16.492 cv
537.098 8.29303 li
537.082 8.29303 li
537.082 16.5 li
537.078 16.555 537.063 16.602 537.039 16.641 cv
537.008 16.684 536.957 16.719 536.879 16.742 cv
536.801 16.77 536.699 16.789 536.578 16.805 cv
536.453 16.82 536.297 16.828 536.109 16.828 cv
535.918 16.828 535.762 16.82 535.641 16.805 cv
535.512 16.789 535.41 16.77 535.34 16.742 cv
535.262 16.719 535.211 16.684 535.184 16.641 cv
535.152 16.602 535.137 16.555 535.141 16.5 cv
535.141 7.51599 li
535.137 7.25403 535.207 7.05103 535.352 6.90601 cv
535.488 6.77002 535.676 6.69897 535.914 6.69501 cv
537.254 6.69501 li
537.492 6.69897 537.695 6.71899 537.867 6.75403 cv
538.035 6.797 538.184 6.85901 538.313 6.94897 cv
538.434 7.04303 538.539 7.164 538.625 7.30902 cv
538.707 7.461 538.777 7.64502 538.844 7.85901 cv
541.027 13.867 li
541.059 13.867 li
543.316 7.875 li
543.383 7.65601 543.457 7.47302 543.539 7.32001 cv
543.617 7.172 543.711 7.05103 543.82 6.953 cv
543.926 6.86298 544.051 6.797 544.195 6.75403 cv
544.34 6.71899 544.508 6.69897 544.703 6.69501 cv
546.082 6.69501 li
546.219 6.69897 546.34 6.71503 546.445 6.75 cv
546.543 6.789 546.625 6.84399 546.695 6.90997 cv
546.758 6.98401 546.809 7.07001 546.844 7.16803 cv
546.875 7.27301 546.891 7.39099 546.895 7.51599 cv
cp
f
556.004 12.969 mo
556 13.566 555.922 14.109 555.77 14.594 cv
555.609 15.086 555.375 15.504 555.059 15.855 cv
554.742 16.207 554.344 16.48 553.867 16.672 cv
553.387 16.863 552.828 16.957 552.191 16.961 cv
551.57 16.957 551.031 16.875 550.578 16.703 cv
550.117 16.535 549.738 16.285 549.441 15.957 cv
549.137 15.633 548.914 15.23 548.77 14.75 cv
548.625 14.273 548.555 13.727 548.555 13.109 cv
548.555 12.52 548.633 11.98 548.789 11.488 cv
548.945 11 549.184 10.578 549.504 10.227 cv
549.82 9.87903 550.215 9.60498 550.691 9.40997 cv
551.164 9.21899 551.723 9.125 552.363 9.12097 cv
552.988 9.125 553.527 9.20697 553.984 9.375 cv
554.441 9.547 554.82 9.797 555.117 10.121 cv
555.414 10.449 555.637 10.852 555.785 11.328 cv
555.93 11.809 556 12.355 556.004 12.969 cv
cp
553.984 13.047 mo
553.98 12.711 553.953 12.395 553.902 12.102 cv
553.844 11.816 553.75 11.566 553.625 11.352 cv
553.492 11.141 553.32 10.973 553.109 10.852 cv
552.891 10.734 552.621 10.676 552.293 10.672 cv
552.004 10.676 551.75 10.73 551.531 10.832 cv
551.313 10.941 551.133 11.098 550.992 11.301 cv
550.852 11.508 550.746 11.754 550.676 12.039 cv
550.605 12.332 550.57 12.66 550.57 13.023 cv
550.57 13.371 550.598 13.687 550.656 13.973 cv
550.711 14.266 550.805 14.516 550.934 14.727 cv
551.059 14.941 551.23 15.105 551.453 15.219 cv
551.668 15.34 551.938 15.398 552.262 15.395 cv
552.555 15.398 552.813 15.344 553.035 15.234 cv
553.25 15.129 553.43 14.977 553.57 14.77 cv
553.711 14.57 553.813 14.324 553.883 14.035 cv
553.945 13.75 553.98 13.422 553.984 13.047 cv
cp
f
564.152 16.516 mo
564.148 16.578 564.137 16.625 564.113 16.66 cv
564.086 16.703 564.039 16.734 563.98 16.758 cv
563.914 16.781 563.832 16.797 563.727 16.812 cv
563.621 16.82 563.488 16.828 563.336 16.828 cv
563.164 16.828 563.031 16.82 562.93 16.812 cv
562.824 16.797 562.738 16.781 562.676 16.758 cv
562.609 16.734 562.563 16.703 562.535 16.66 cv
562.504 16.625 562.488 16.578 562.492 16.516 cv
562.492 15.746 li
562.133 16.133 561.758 16.43 561.367 16.641 cv
560.969 16.852 560.535 16.957 560.063 16.961 cv
559.527 16.957 559.078 16.855 558.715 16.652 cv
558.348 16.449 558.051 16.176 557.82 15.824 cv
557.586 15.48 557.418 15.074 557.316 14.605 cv
557.215 14.145 557.164 13.652 557.164 13.133 cv
557.164 12.52 557.227 11.965 557.359 11.469 cv
557.488 10.977 557.684 10.555 557.941 10.207 cv
558.195 9.85901 558.512 9.59399 558.891 9.40198 cv
559.27 9.21899 559.707 9.125 560.203 9.12097 cv
560.59 9.125 560.941 9.203 561.262 9.35901 cv
561.574 9.52002 561.891 9.75 562.203 10.055 cv
562.203 6.29303 li
562.203 6.242 562.215 6.19501 562.246 6.15198 cv
562.27 6.11298 562.324 6.078 562.402 6.047 cv
562.477 6.02002 562.574 6 562.703 5.97998 cv
562.824 5.96899 562.984 5.961 563.18 5.95697 cv
563.371 5.961 563.527 5.96899 563.652 5.97998 cv
563.773 6 563.875 6.02002 563.949 6.047 cv
564.02 6.078 564.07 6.11298 564.105 6.15198 cv
564.133 6.19501 564.148 6.242 564.152 6.29303 cv
cp
562.203 11.871 mo
561.922 11.52 561.652 11.25 561.398 11.062 cv
561.137 10.875 560.867 10.781 560.59 10.781 cv
560.336 10.781 560.117 10.848 559.934 10.973 cv
559.746 11.105 559.598 11.273 559.488 11.484 cv
559.375 11.695 559.293 11.934 559.238 12.195 cv
559.184 12.461 559.156 12.73 559.156 13 cv
559.156 13.297 559.18 13.578 559.227 13.852 cv
559.273 14.129 559.348 14.375 559.457 14.59 cv
559.559 14.805 559.703 14.977 559.883 15.105 cv
560.059 15.238 560.281 15.305 560.551 15.301 cv
560.684 15.305 560.813 15.285 560.945 15.242 cv
561.07 15.207 561.203 15.145 561.336 15.051 cv
561.469 14.965 561.605 14.848 561.746 14.703 cv
561.887 14.562 562.039 14.387 562.203 14.18 cv
cp
f
572.551 12.84 mo
572.547 13.078 572.496 13.254 572.391 13.367 cv
572.281 13.484 572.133 13.543 571.953 13.539 cv
567.719 13.539 li
567.715 13.84 567.75 14.109 567.824 14.348 cv
567.891 14.59 568.004 14.793 568.16 14.961 cv
568.313 15.133 568.508 15.262 568.75 15.348 cv
568.988 15.437 569.277 15.48 569.621 15.48 cv
569.961 15.48 570.262 15.457 570.523 15.406 cv
570.781 15.359 571.008 15.305 571.199 15.242 cv
571.387 15.184 571.543 15.129 571.672 15.078 cv
571.793 15.031 571.895 15.008 571.977 15.004 cv
572.02 15.008 572.059 15.016 572.094 15.031 cv
572.121 15.051 572.148 15.082 572.168 15.129 cv
572.188 15.176 572.199 15.242 572.211 15.328 cv
572.215 15.414 572.219 15.523 572.223 15.652 cv
572.219 15.77 572.219 15.867 572.215 15.945 cv
572.207 16.027 572.199 16.094 572.191 16.148 cv
572.18 16.207 572.164 16.258 572.145 16.293 cv
572.125 16.336 572.098 16.371 572.066 16.406 cv
572.031 16.445 571.938 16.496 571.789 16.555 cv
571.633 16.621 571.441 16.684 571.211 16.738 cv
570.973 16.801 570.703 16.848 570.406 16.895 cv
570.102 16.934 569.781 16.957 569.441 16.961 cv
568.82 16.957 568.277 16.883 567.816 16.727 cv
567.348 16.574 566.961 16.336 566.652 16.02 cv
566.336 15.703 566.102 15.305 565.953 14.82 cv
565.797 14.34 565.723 13.773 565.727 13.117 cv
565.723 12.504 565.801 11.945 565.965 11.449 cv
566.121 10.953 566.355 10.535 566.668 10.187 cv
566.973 9.84399 567.348 9.578 567.785 9.39502 cv
568.223 9.21503 568.715 9.125 569.27 9.12097 cv
569.848 9.125 570.348 9.211 570.762 9.37903 cv
571.176 9.55499 571.512 9.79303 571.777 10.094 cv
572.039 10.398 572.234 10.758 572.363 11.172 cv
572.484 11.59 572.547 12.039 572.551 12.527 cv
cp
570.648 12.277 mo
570.66 11.727 570.551 11.293 570.316 10.98 cv
570.082 10.668 569.715 10.512 569.223 10.508 cv
568.973 10.512 568.758 10.559 568.574 10.648 cv
568.387 10.746 568.234 10.871 568.113 11.027 cv
567.988 11.187 567.895 11.375 567.832 11.59 cv
567.766 11.805 567.727 12.035 567.719 12.277 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
