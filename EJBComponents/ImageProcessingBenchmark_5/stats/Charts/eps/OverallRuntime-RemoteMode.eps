%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OverallRuntime-RemoteMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:42:13 p.m.
%%BoundingBox: 0 0 689 558
%%HiResBoundingBox: 0 0 688.8000 557.6401
%%CropBox: 0 0 688.8000 557.6401
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -557.64 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 557.64 li
688.8 557.64 li
688.8 0 li
cp
clp
gsave
0 557.64 mo
689 557.64 li
689 -.359985 li
0 -.359985 li
cp
clp
0 0 mo
688.801 0 li
688.801 557.641 li
0 557.641 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.801 486.602 mo
672 486.602 li
64.801 438.719 mo
672 438.719 li
64.801 390.961 mo
672 390.961 li
64.801 343.078 mo
672 343.078 li
64.801 295.32 mo
672 295.32 li
64.801 247.559 mo
672 247.559 li
64.801 199.68 mo
672 199.68 li
64.801 151.922 mo
672 151.922 li
64.801 104.16 mo
672 104.16 li
64.801 56.281 mo
672 56.281 li
.140414 .108034 .108034 0 cmyk
@
64.801 462.602 mo
672 462.602 li
64.801 414.84 mo
672 414.84 li
64.801 367.078 mo
672 367.078 li
64.801 319.199 mo
672 319.199 li
64.801 271.441 mo
672 271.441 li
64.801 223.559 mo
672 223.559 li
64.801 175.801 mo
672 175.801 li
64.801 128.039 mo
672 128.039 li
64.801 80.16 mo
672 80.16 li
64.801 32.398 mo
672 32.398 li
.328344 .284215 .278569 .000915541 cmyk
@
102.719 32.398 mo
102.719 510.48 li
178.559 32.398 mo
178.559 510.48 li
254.52 32.398 mo
254.52 510.48 li
330.359 32.398 mo
330.359 510.48 li
406.32 32.398 mo
406.32 510.48 li
482.16 32.398 mo
482.16 510.48 li
558.121 32.398 mo
558.121 510.48 li
633.961 32.398 mo
633.961 510.48 li
.178592 .148898 .143923 0 cmyk
@
64.801 32.398 mo
64.801 510.48 li
140.641 32.398 mo
140.641 510.48 li
216.602 32.398 mo
216.602 510.48 li
292.441 32.398 mo
292.441 510.48 li
368.398 32.398 mo
368.398 510.48 li
444.238 32.398 mo
444.238 510.48 li
520.199 32.398 mo
520.199 510.48 li
596.039 32.398 mo
596.039 510.48 li
672 32.398 mo
672 510.48 li
.328344 .284215 .278569 .000915541 cmyk
@
30.84 501.121 mo
51.719 501.121 li
51.719 518.281 li
30.84 518.281 li
cp
0 0 0 0 cmyk
ef
30.84 453.359 mo
51.719 453.359 li
51.719 470.398 li
30.84 470.398 li
cp
ef
30.84 405.48 mo
51.719 405.48 li
51.719 422.64 li
30.84 422.64 li
cp
ef
30.84 357.719 mo
51.719 357.719 li
51.719 374.762 li
30.84 374.762 li
cp
ef
23.762 309.961 mo
51.719 309.961 li
51.719 327 li
23.762 327 li
cp
ef
23.762 262.078 mo
51.719 262.078 li
51.719 279.238 li
23.762 279.238 li
cp
ef
23.762 214.32 mo
51.719 214.32 li
51.719 231.359 li
23.762 231.359 li
cp
ef
23.762 166.441 mo
51.719 166.441 li
51.719 183.601 li
23.762 183.601 li
cp
ef
23.762 118.68 mo
51.719 118.68 li
51.719 135.84 li
23.762 135.84 li
cp
ef
23.762 70.922 mo
51.719 70.922 li
51.719 87.961 li
23.762 87.961 li
cp
ef
23.762 23.039 mo
51.719 23.039 li
51.719 40.199 li
23.762 40.199 li
cp
ef
.96 lw
64.801 510.48 mo
672 510.48 li
.367803 .29575 .300999 .00198367 cmyk
@
64.801 510.48 mo
64.801 514.922 li
140.641 510.48 mo
140.641 514.922 li
216.602 510.48 mo
216.602 514.922 li
292.441 510.48 mo
292.441 514.922 li
368.398 510.48 mo
368.398 514.922 li
444.238 510.48 mo
444.238 514.922 li
520.199 510.48 mo
520.199 514.922 li
596.039 510.48 mo
596.039 514.922 li
672 510.48 mo
672 514.922 li
@
gsave
64.68 32.398 mo
672.602 32.398 li
672.602 511.078 li
64.68 511.078 li
cp
clp
1 lc
64.801 263.762 mo
140.641 342.121 li
216.602 385.199 li
292.441 398.641 li
368.398 404.16 li
444.238 408.121 li
520.199 411 li
596.039 412.68 li
672 414.238 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
59.59 258.762 mo
69.551 258.762 li
69.551 268.719 li
59.59 268.719 li
cp
.62768 .285466 0 0 cmyk
@
135.551 337.121 mo
145.512 337.121 li
145.512 347.078 li
135.551 347.078 li
cp
@
211.391 380.199 mo
221.352 380.199 li
221.352 390.16 li
211.391 390.16 li
cp
@
287.352 393.52 mo
297.309 393.52 li
297.309 403.481 li
287.352 403.481 li
cp
@
363.191 399.039 mo
373.148 399.039 li
373.148 409 li
363.191 409 li
cp
@
439.148 403.121 mo
449.109 403.121 li
449.109 413.078 li
439.148 413.078 li
cp
@
514.988 406 mo
524.949 406 li
524.949 415.961 li
514.988 415.961 li
cp
@
590.949 407.68 mo
600.91 407.68 li
600.91 417.641 li
590.949 417.641 li
cp
@
666.789 409.238 mo
676.75 409.238 li
676.75 419.199 li
666.789 419.199 li
cp
@
gsave
64.68 32.398 mo
672.602 32.398 li
672.602 511.078 li
64.68 511.078 li
cp
clp
.96 lw
1 lc
64.801 264.602 mo
140.641 378.84 li
216.602 422.879 li
292.441 408.48 li
368.398 438.121 li
444.238 450 li
520.199 433.441 li
596.039 417.719 li
672 432.48 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
59.59 259.48 mo
69.551 259.48 li
69.551 269.441 li
59.59 269.441 li
cp
.0319219 .621851 .911223 .000427253 cmyk
@
135.551 373.84 mo
145.512 373.84 li
145.512 383.801 li
135.551 383.801 li
cp
@
211.391 417.762 mo
221.352 417.762 li
221.352 427.719 li
211.391 427.719 li
cp
@
287.352 403.48 mo
297.309 403.48 li
297.309 413.441 li
287.352 413.441 li
cp
@
363.191 433.121 mo
373.148 433.121 li
373.148 443.078 li
363.191 443.078 li
cp
@
439.148 445 mo
449.109 445 li
449.109 454.961 li
439.148 454.961 li
cp
@
514.988 428.32 mo
524.949 428.32 li
524.949 438.281 li
514.988 438.281 li
cp
@
590.949 412.602 mo
600.91 412.602 li
600.91 422.559 li
590.949 422.559 li
cp
@
666.789 427.359 mo
676.75 427.359 li
676.75 437.32 li
666.789 437.32 li
cp
@
gsave
64.68 32.398 mo
672.602 32.398 li
672.602 511.078 li
64.68 511.078 li
cp
clp
.96 lw
1 lc
64.801 264.121 mo
140.641 378.84 li
216.602 425.398 li
292.441 412.68 li
368.398 429.238 li
444.238 424.199 li
520.199 431.039 li
596.039 430.078 li
672 438.719 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
59.59 259.121 mo
69.551 259.121 li
69.551 269.078 li
59.59 269.078 li
cp
.619135 .109529 .981689 .00570687 cmyk
@
135.551 373.84 mo
145.512 373.84 li
145.512 383.801 li
135.551 383.801 li
cp
@
211.391 420.281 mo
221.352 420.281 li
221.352 430.238 li
211.391 430.238 li
cp
@
287.352 407.68 mo
297.309 407.68 li
297.309 417.641 li
287.352 417.641 li
cp
@
363.191 424.121 mo
373.148 424.121 li
373.148 434.078 li
363.191 434.078 li
cp
@
439.148 419.199 mo
449.109 419.199 li
449.109 429.16 li
439.148 429.16 li
cp
@
514.988 426.039 mo
524.949 426.039 li
524.949 436 li
514.988 436 li
cp
@
590.949 425.078 mo
600.91 425.078 li
600.91 435.039 li
590.949 435.039 li
cp
@
666.789 433.719 mo
676.75 433.719 li
676.75 443.68 li
666.789 443.68 li
cp
@
gsave
64.68 32.398 mo
672.602 32.398 li
672.602 511.078 li
64.68 511.078 li
cp
clp
.96 lw
1 lc
64.801 264.121 mo
140.641 360.359 li
216.602 390.961 li
292.441 437.16 li
368.398 424.199 li
444.238 440.52 li
520.199 428.641 li
596.039 429.961 li
672 443.52 li
0 .990631 1 .000396735 cmyk
@
grestore
59.59 259.121 mo
69.551 259.121 li
69.551 269.078 li
59.59 269.078 li
cp
0 .990631 1 .000396735 cmyk
@
135.551 355.238 mo
145.512 355.238 li
145.512 365.199 li
135.551 365.199 li
cp
@
211.391 385.84 mo
221.352 385.84 li
221.352 395.801 li
211.391 395.801 li
cp
@
287.352 432.16 mo
297.309 432.16 li
297.309 442.121 li
287.352 442.121 li
cp
@
363.191 419.199 mo
373.148 419.199 li
373.148 429.16 li
363.191 429.16 li
cp
@
439.148 435.398 mo
449.109 435.398 li
449.109 445.359 li
439.148 445.359 li
cp
@
514.988 423.52 mo
524.949 423.52 li
524.949 433.481 li
514.988 433.481 li
cp
@
590.949 424.84 mo
600.91 424.84 li
600.91 434.801 li
590.949 434.801 li
cp
@
666.789 438.52 mo
676.75 438.52 li
676.75 448.481 li
666.789 448.481 li
cp
@
gsave
64.68 32.398 mo
672.602 32.398 li
672.602 511.078 li
64.68 511.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
64.801 263.641 mo
140.641 376.078 li
216.602 416.762 li
292.441 436.199 li
368.398 430.922 li
444.238 440.641 li
520.199 444.48 li
596.039 428.281 li
672 456 li
.62768 .285466 0 0 cmyk
@
grestore
59.59 258.52 mo
69.551 258.52 li
69.551 268.481 li
59.59 268.481 li
cp
.62768 .285466 0 0 cmyk
@
135.551 370.961 mo
145.512 370.961 li
145.512 380.922 li
135.551 380.922 li
cp
@
211.391 411.641 mo
221.352 411.641 li
221.352 421.602 li
211.391 421.602 li
cp
@
287.352 431.199 mo
297.309 431.199 li
297.309 441.16 li
287.352 441.16 li
cp
@
363.191 425.801 mo
373.148 425.801 li
373.148 435.762 li
363.191 435.762 li
cp
@
439.148 435.641 mo
449.109 435.641 li
449.109 445.602 li
439.148 445.602 li
cp
@
514.988 439.359 mo
524.949 439.359 li
524.949 449.32 li
514.988 449.32 li
cp
@
590.949 423.16 mo
600.91 423.16 li
600.91 433.121 li
590.949 433.121 li
cp
@
666.789 450.879 mo
676.75 450.879 li
676.75 460.84 li
666.789 460.84 li
cp
@
gsave
64.68 32.398 mo
672.602 32.398 li
672.602 511.078 li
64.68 511.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
64.801 264.121 mo
140.641 376.559 li
216.602 423.84 li
292.441 415.801 li
368.398 432.48 li
444.238 432.961 li
520.199 427.68 li
596.039 431.52 li
672 430.922 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
60.07 259.602 mo
69.07 259.602 li
69.07 268.602 li
60.07 268.602 li
cp
.0319219 .621851 .911223 .000427253 cmyk
@
136.031 372.039 mo
145.031 372.039 li
145.031 381.039 li
136.031 381.039 li
cp
@
211.871 419.199 mo
220.871 419.199 li
220.871 428.199 li
211.871 428.199 li
cp
@
287.828 411.16 mo
296.828 411.16 li
296.828 420.16 li
287.828 420.16 li
cp
@
363.672 427.84 mo
372.672 427.84 li
372.672 436.84 li
363.672 436.84 li
cp
@
439.629 428.441 mo
448.629 428.441 li
448.629 437.441 li
439.629 437.441 li
cp
@
515.469 423.039 mo
524.469 423.039 li
524.469 432.039 li
515.469 432.039 li
cp
@
591.43 426.879 mo
600.43 426.879 li
600.43 435.879 li
591.43 435.879 li
cp
@
667.27 426.281 mo
676.27 426.281 li
676.27 435.281 li
667.27 435.281 li
cp
@
gsave
64.68 32.398 mo
672.602 32.398 li
672.602 511.078 li
64.68 511.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
64.801 263.762 mo
140.641 378.84 li
216.602 437.16 li
292.441 428.281 li
368.398 422.879 li
444.238 424.441 li
520.199 423.48 li
596.039 435.719 li
672 455.039 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
59.59 258.762 mo
69.551 258.762 li
69.551 268.719 li
59.59 268.719 li
cp
.619135 .109529 .981689 .00570687 cmyk
@
135.551 373.84 mo
145.512 373.84 li
145.512 383.801 li
135.551 383.801 li
cp
@
211.391 432.16 mo
221.352 432.16 li
221.352 442.121 li
211.391 442.121 li
cp
@
287.352 423.16 mo
297.309 423.16 li
297.309 433.121 li
287.352 433.121 li
cp
@
363.191 417.762 mo
373.148 417.762 li
373.148 427.719 li
363.191 427.719 li
cp
@
439.148 419.32 mo
449.109 419.32 li
449.109 429.281 li
439.148 429.281 li
cp
@
514.988 418.359 mo
524.949 418.359 li
524.949 428.32 li
514.988 428.32 li
cp
@
590.949 430.602 mo
600.91 430.602 li
600.91 440.559 li
590.949 440.559 li
cp
@
666.789 449.922 mo
676.75 449.922 li
676.75 459.879 li
666.789 459.879 li
cp
@
gsave
64.68 32.398 mo
672.602 32.398 li
672.602 511.078 li
64.68 511.078 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
64.801 263.762 mo
140.641 379.32 li
216.602 441.602 li
292.441 451.559 li
368.398 431.52 li
444.238 431.039 li
520.199 425.398 li
596.039 437.16 li
672 444.238 li
0 .990631 1 .000396735 cmyk
@
grestore
59.59 258.762 mo
69.551 258.762 li
69.551 268.719 li
59.59 268.719 li
cp
0 .990631 1 .000396735 cmyk
@
135.551 374.199 mo
145.512 374.199 li
145.512 384.16 li
135.551 384.16 li
cp
@
211.391 436.602 mo
221.352 436.602 li
221.352 446.559 li
211.391 446.559 li
cp
@
287.352 446.441 mo
297.309 446.441 li
297.309 456.398 li
287.352 456.398 li
cp
@
363.191 426.398 mo
373.148 426.398 li
373.148 436.359 li
363.191 436.359 li
cp
@
439.148 426.039 mo
449.109 426.039 li
449.109 436 li
439.148 436 li
cp
@
514.988 420.281 mo
524.949 420.281 li
524.949 430.238 li
514.988 430.238 li
cp
@
590.949 432.16 mo
600.91 432.16 li
600.91 442.121 li
590.949 442.121 li
cp
@
666.789 439.238 mo
676.75 439.238 li
676.75 449.199 li
666.789 449.199 li
cp
@
30.828 501.172 mo
51.719 501.172 li
51.719 518.262 li
30.828 518.262 li
cp
0 0 0 0 cmyk
ef
37.469 510.129 mo
37.465 510.812 37.414 511.434 37.309 511.996 cv
37.199 512.559 37.02 513.043 36.773 513.445 cv
36.52 513.852 36.191 514.164 35.793 514.383 cv
35.387 514.605 34.895 514.715 34.309 514.715 cv
33.75 514.715 33.277 514.617 32.898 514.418 cv
32.516 514.223 32.211 513.93 31.977 513.543 cv
31.742 513.156 31.574 512.684 31.48 512.117 cv
31.379 511.555 31.332 510.906 31.332 510.172 cv
31.332 509.5 31.387 508.879 31.496 508.312 cv
31.605 507.75 31.781 507.266 32.031 506.859 cv
32.273 506.457 32.598 506.145 33.004 505.918 cv
33.402 505.699 33.898 505.586 34.488 505.586 cv
35.047 505.586 35.52 505.687 35.902 505.883 cv
36.285 506.086 36.59 506.379 36.824 506.762 cv
37.055 507.152 37.223 507.625 37.32 508.187 cv
37.418 508.75 37.465 509.398 37.469 510.129 cv
cp
36.262 510.211 mo
36.258 509.77 36.242 509.371 36.215 509.02 cv
36.18 508.668 36.133 508.359 36.074 508.09 cv
36.008 507.82 35.93 507.59 35.832 507.395 cv
35.734 507.203 35.617 507.043 35.48 506.914 cv
35.34 506.789 35.18 506.695 35.008 506.637 cv
34.828 506.582 34.633 506.555 34.418 506.551 cv
34.027 506.555 33.711 506.645 33.473 506.828 cv
33.227 507.012 33.035 507.266 32.898 507.582 cv
32.758 507.902 32.664 508.273 32.613 508.703 cv
32.563 509.133 32.539 509.598 32.539 510.09 cv
32.539 510.754 32.57 511.316 32.641 511.777 cv
32.707 512.246 32.816 512.625 32.969 512.914 cv
33.113 513.211 33.305 513.422 33.535 513.551 cv
33.766 513.687 34.047 513.754 34.379 513.75 cv
34.633 513.754 34.855 513.715 35.051 513.629 cv
35.242 513.551 35.41 513.43 35.551 513.273 cv
35.691 513.121 35.805 512.937 35.898 512.723 cv
35.984 512.508 36.059 512.27 36.117 512.008 cv
36.168 511.75 36.207 511.469 36.23 511.164 cv
36.25 510.859 36.258 510.543 36.262 510.211 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.465 513.84 mo
40.465 514.168 40.41 514.383 40.305 514.488 cv
40.195 514.594 40 514.645 39.719 514.648 cv
39.441 514.645 39.25 514.594 39.148 514.492 cv
39.039 514.387 38.988 514.176 38.992 513.859 cv
38.988 513.535 39.043 513.32 39.152 513.211 cv
39.258 513.105 39.453 513.051 39.738 513.051 cv
40.012 513.051 40.199 513.105 40.309 513.211 cv
40.41 513.316 40.465 513.527 40.465 513.84 cv
cp
f
48.125 510.129 mo
48.121 510.812 48.07 511.434 47.965 511.996 cv
47.855 512.559 47.676 513.043 47.43 513.445 cv
47.176 513.852 46.848 514.164 46.449 514.383 cv
46.043 514.605 45.551 514.715 44.965 514.715 cv
44.406 514.715 43.934 514.617 43.555 514.418 cv
43.172 514.223 42.867 513.93 42.633 513.543 cv
42.398 513.156 42.23 512.684 42.137 512.117 cv
42.035 511.555 41.988 510.906 41.988 510.172 cv
41.988 509.5 42.043 508.879 42.152 508.312 cv
42.262 507.75 42.438 507.266 42.688 506.859 cv
42.93 506.457 43.254 506.145 43.66 505.918 cv
44.059 505.699 44.555 505.586 45.145 505.586 cv
45.703 505.586 46.176 505.687 46.559 505.883 cv
46.941 506.086 47.246 506.379 47.48 506.762 cv
47.711 507.152 47.879 507.625 47.977 508.187 cv
48.074 508.75 48.121 509.398 48.125 510.129 cv
cp
46.918 510.211 mo
46.914 509.77 46.898 509.371 46.871 509.02 cv
46.836 508.668 46.789 508.359 46.73 508.09 cv
46.664 507.82 46.586 507.59 46.488 507.395 cv
46.391 507.203 46.273 507.043 46.137 506.914 cv
45.996 506.789 45.836 506.695 45.664 506.637 cv
45.484 506.582 45.289 506.555 45.074 506.551 cv
44.684 506.555 44.367 506.645 44.129 506.828 cv
43.883 507.012 43.691 507.266 43.555 507.582 cv
43.414 507.902 43.32 508.273 43.27 508.703 cv
43.219 509.133 43.195 509.598 43.195 510.09 cv
43.195 510.754 43.227 511.316 43.297 511.777 cv
43.363 512.246 43.473 512.625 43.625 512.914 cv
43.77 513.211 43.961 513.422 44.191 513.551 cv
44.422 513.687 44.703 513.754 45.035 513.75 cv
45.289 513.754 45.512 513.715 45.707 513.629 cv
45.898 513.551 46.066 513.43 46.207 513.273 cv
46.348 513.121 46.461 512.937 46.555 512.723 cv
46.641 512.508 46.715 512.27 46.773 512.008 cv
46.824 511.75 46.863 511.469 46.887 511.164 cv
46.906 510.859 46.914 510.543 46.918 510.211 cv
cp
f
30.828 453.371 mo
51.719 453.371 li
51.719 470.461 li
30.828 470.461 li
cp
0 0 0 0 cmyk
ef
37.176 466.273 mo
37.172 466.359 37.168 466.434 37.156 466.496 cv
37.145 466.562 37.129 466.617 37.109 466.656 cv
37.086 466.703 37.059 466.734 37.027 466.75 cv
36.992 466.773 36.953 466.781 36.914 466.781 cv
32.012 466.781 li
31.949 466.781 31.891 466.773 31.844 466.758 cv
31.793 466.742 31.754 466.719 31.719 466.68 cv
31.684 466.648 31.656 466.594 31.645 466.523 cv
31.625 466.453 31.617 466.367 31.621 466.266 cv
31.617 466.176 31.621 466.098 31.629 466.027 cv
31.633 465.961 31.648 465.902 31.676 465.848 cv
31.699 465.797 31.73 465.742 31.766 465.687 cv
31.801 465.637 31.844 465.582 31.902 465.52 cv
33.676 463.695 li
34.086 463.277 34.414 462.902 34.664 462.566 cv
34.91 462.238 35.102 461.934 35.234 461.656 cv
35.367 461.383 35.453 461.133 35.5 460.906 cv
35.539 460.684 35.563 460.473 35.563 460.277 cv
35.563 460.082 35.527 459.898 35.461 459.719 cv
35.395 459.547 35.301 459.391 35.176 459.254 cv
35.051 459.125 34.895 459.02 34.707 458.937 cv
34.52 458.863 34.301 458.824 34.055 458.82 cv
33.766 458.824 33.508 458.863 33.281 458.937 cv
33.051 459.02 32.852 459.105 32.68 459.191 cv
32.508 459.285 32.363 459.367 32.246 459.445 cv
32.129 459.523 32.043 459.562 31.992 459.562 cv
31.957 459.562 31.926 459.555 31.902 459.535 cv
31.871 459.52 31.852 459.488 31.836 459.445 cv
31.82 459.406 31.805 459.352 31.797 459.281 cv
31.785 459.215 31.781 459.133 31.785 459.035 cv
31.781 458.969 31.785 458.91 31.793 458.859 cv
31.797 458.809 31.805 458.766 31.816 458.727 cv
31.824 458.691 31.84 458.656 31.859 458.625 cv
31.879 458.594 31.914 458.555 31.973 458.504 cv
32.023 458.457 32.117 458.391 32.254 458.309 cv
32.387 458.227 32.559 458.148 32.762 458.066 cv
32.965 457.988 33.188 457.918 33.434 457.863 cv
33.676 457.809 33.934 457.781 34.207 457.781 cv
34.633 457.781 35.008 457.844 35.332 457.965 cv
35.652 458.086 35.918 458.25 36.133 458.461 cv
36.344 458.672 36.504 458.918 36.609 459.191 cv
36.715 459.473 36.77 459.77 36.77 460.082 cv
36.77 460.371 36.742 460.652 36.691 460.93 cv
36.641 461.215 36.535 461.52 36.375 461.844 cv
36.211 462.172 35.977 462.535 35.672 462.934 cv
35.363 463.336 34.957 463.797 34.453 464.312 cv
33.047 465.781 li
36.906 465.781 li
36.938 465.785 36.973 465.797 37.012 465.812 cv
37.043 465.836 37.074 465.867 37.102 465.906 cv
37.125 465.949 37.145 466 37.156 466.059 cv
37.168 466.125 37.172 466.195 37.176 466.273 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.465 466.035 mo
40.465 466.363 40.41 466.578 40.305 466.684 cv
40.195 466.789 40 466.84 39.719 466.844 cv
39.441 466.84 39.25 466.789 39.148 466.687 cv
39.039 466.582 38.988 466.371 38.992 466.055 cv
38.988 465.73 39.043 465.516 39.152 465.406 cv
39.258 465.301 39.453 465.246 39.738 465.246 cv
40.012 465.246 40.199 465.301 40.309 465.406 cv
40.41 465.512 40.465 465.723 40.465 466.035 cv
cp
f
47.789 463.93 mo
47.789 464.406 47.707 464.828 47.547 465.199 cv
47.387 465.57 47.16 465.883 46.871 466.137 cv
46.574 466.391 46.227 466.586 45.824 466.715 cv
45.418 466.848 44.969 466.91 44.477 466.91 cv
44.199 466.91 43.938 466.891 43.695 466.852 cv
43.445 466.812 43.227 466.766 43.039 466.711 cv
42.844 466.656 42.688 466.602 42.563 466.543 cv
42.438 466.492 42.359 466.449 42.328 466.414 cv
42.293 466.383 42.27 466.352 42.258 466.324 cv
42.242 466.297 42.227 466.266 42.219 466.223 cv
42.203 466.187 42.195 466.137 42.195 466.074 cv
42.188 466.016 42.188 465.945 42.188 465.863 cv
42.188 465.789 42.191 465.719 42.199 465.656 cv
42.207 465.594 42.219 465.543 42.238 465.504 cv
42.254 465.465 42.273 465.437 42.301 465.418 cv
42.324 465.402 42.355 465.395 42.387 465.391 cv
42.434 465.395 42.504 465.422 42.598 465.477 cv
42.691 465.535 42.82 465.598 42.984 465.664 cv
43.148 465.73 43.348 465.793 43.59 465.852 cv
43.824 465.91 44.109 465.937 44.445 465.937 cv
44.746 465.937 45.027 465.902 45.285 465.828 cv
45.539 465.758 45.762 465.645 45.949 465.488 cv
46.133 465.336 46.277 465.141 46.383 464.902 cv
46.488 464.668 46.539 464.379 46.543 464.039 cv
46.539 463.758 46.496 463.508 46.406 463.289 cv
46.316 463.07 46.18 462.891 45.996 462.746 cv
45.809 462.605 45.574 462.5 45.293 462.426 cv
45.008 462.355 44.668 462.316 44.281 462.316 cv
43.996 462.316 43.758 462.332 43.559 462.359 cv
43.355 462.391 43.168 462.406 42.996 462.402 cv
42.867 462.406 42.773 462.375 42.723 462.312 cv
42.664 462.254 42.637 462.141 42.641 461.969 cv
42.641 458.355 li
42.637 458.207 42.672 458.098 42.746 458.02 cv
42.813 457.949 42.914 457.91 43.051 457.91 cv
46.98 457.91 li
47.016 457.91 47.051 457.922 47.086 457.941 cv
47.117 457.965 47.145 457.996 47.172 458.035 cv
47.191 458.078 47.207 458.129 47.223 458.191 cv
47.23 458.258 47.238 458.336 47.242 458.418 cv
47.238 458.586 47.215 458.711 47.176 458.801 cv
47.129 458.895 47.07 458.941 46.992 458.937 cv
43.82 458.937 li
43.82 461.426 li
43.973 461.406 44.129 461.395 44.293 461.387 cv
44.449 461.383 44.637 461.379 44.852 461.379 cv
45.336 461.379 45.762 461.441 46.129 461.562 cv
46.492 461.684 46.797 461.855 47.047 462.074 cv
47.289 462.301 47.477 462.566 47.602 462.879 cv
47.727 463.195 47.789 463.547 47.789 463.93 cv
cp
f
30.828 405.559 mo
51.719 405.559 li
51.719 422.649 li
30.828 422.649 li
cp
0 0 0 0 cmyk
ef
37.133 416.117 mo
37.133 416.594 37.051 417.016 36.891 417.387 cv
36.73 417.758 36.504 418.07 36.215 418.324 cv
35.918 418.578 35.57 418.773 35.168 418.902 cv
34.762 419.035 34.313 419.098 33.82 419.098 cv
33.543 419.098 33.281 419.078 33.039 419.039 cv
32.789 419 32.57 418.953 32.383 418.898 cv
32.188 418.844 32.031 418.789 31.906 418.73 cv
31.781 418.68 31.703 418.637 31.672 418.602 cv
31.637 418.57 31.613 418.539 31.602 418.512 cv
31.586 418.484 31.57 418.453 31.563 418.41 cv
31.547 418.375 31.539 418.324 31.539 418.262 cv
31.531 418.203 31.531 418.133 31.531 418.051 cv
31.531 417.977 31.535 417.906 31.543 417.844 cv
31.551 417.781 31.563 417.73 31.582 417.691 cv
31.598 417.652 31.617 417.625 31.645 417.605 cv
31.668 417.59 31.699 417.582 31.73 417.578 cv
31.777 417.582 31.848 417.609 31.941 417.664 cv
32.035 417.723 32.164 417.785 32.328 417.852 cv
32.492 417.918 32.691 417.98 32.934 418.039 cv
33.168 418.098 33.453 418.125 33.789 418.125 cv
34.09 418.125 34.371 418.09 34.629 418.016 cv
34.883 417.945 35.105 417.832 35.293 417.676 cv
35.477 417.523 35.621 417.328 35.727 417.09 cv
35.832 416.855 35.883 416.566 35.887 416.227 cv
35.883 415.945 35.84 415.695 35.75 415.477 cv
35.66 415.258 35.523 415.078 35.34 414.934 cv
35.152 414.793 34.918 414.687 34.637 414.613 cv
34.352 414.543 34.012 414.504 33.625 414.504 cv
33.34 414.504 33.102 414.52 32.902 414.547 cv
32.699 414.578 32.512 414.594 32.34 414.59 cv
32.211 414.594 32.117 414.562 32.066 414.5 cv
32.008 414.441 31.98 414.328 31.984 414.156 cv
31.984 410.543 li
31.98 410.395 32.016 410.285 32.09 410.207 cv
32.156 410.137 32.258 410.098 32.395 410.098 cv
36.324 410.098 li
36.359 410.098 36.395 410.109 36.43 410.129 cv
36.461 410.152 36.488 410.184 36.516 410.223 cv
36.535 410.266 36.551 410.316 36.566 410.379 cv
36.574 410.445 36.582 410.523 36.586 410.605 cv
36.582 410.773 36.559 410.898 36.52 410.988 cv
36.473 411.082 36.414 411.129 36.336 411.125 cv
33.164 411.125 li
33.164 413.613 li
33.316 413.594 33.473 413.582 33.637 413.574 cv
33.793 413.57 33.98 413.566 34.195 413.566 cv
34.68 413.566 35.105 413.629 35.473 413.75 cv
35.836 413.871 36.141 414.043 36.391 414.262 cv
36.633 414.488 36.82 414.754 36.945 415.066 cv
37.07 415.383 37.133 415.734 37.133 416.117 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.465 418.223 mo
40.465 418.551 40.41 418.766 40.305 418.871 cv
40.195 418.977 40 419.027 39.719 419.031 cv
39.441 419.027 39.25 418.977 39.148 418.875 cv
39.039 418.77 38.988 418.559 38.992 418.242 cv
38.988 417.918 39.043 417.703 39.152 417.594 cv
39.258 417.488 39.453 417.434 39.738 417.434 cv
40.012 417.434 40.199 417.488 40.309 417.594 cv
40.41 417.699 40.465 417.91 40.465 418.223 cv
cp
f
48.125 414.512 mo
48.121 415.195 48.07 415.816 47.965 416.379 cv
47.855 416.941 47.676 417.426 47.43 417.828 cv
47.176 418.234 46.848 418.547 46.449 418.766 cv
46.043 418.988 45.551 419.098 44.965 419.098 cv
44.406 419.098 43.934 419 43.555 418.801 cv
43.172 418.605 42.867 418.312 42.633 417.926 cv
42.398 417.539 42.23 417.066 42.137 416.5 cv
42.035 415.937 41.988 415.289 41.988 414.555 cv
41.988 413.883 42.043 413.262 42.152 412.695 cv
42.262 412.133 42.438 411.648 42.688 411.242 cv
42.93 410.84 43.254 410.527 43.66 410.301 cv
44.059 410.082 44.555 409.969 45.145 409.969 cv
45.703 409.969 46.176 410.07 46.559 410.266 cv
46.941 410.469 47.246 410.762 47.48 411.145 cv
47.711 411.535 47.879 412.008 47.977 412.57 cv
48.074 413.133 48.121 413.781 48.125 414.512 cv
cp
46.918 414.594 mo
46.914 414.152 46.898 413.754 46.871 413.402 cv
46.836 413.051 46.789 412.742 46.73 412.473 cv
46.664 412.203 46.586 411.973 46.488 411.777 cv
46.391 411.586 46.273 411.426 46.137 411.297 cv
45.996 411.172 45.836 411.078 45.664 411.02 cv
45.484 410.965 45.289 410.937 45.074 410.934 cv
44.684 410.937 44.367 411.027 44.129 411.211 cv
43.883 411.395 43.691 411.648 43.555 411.965 cv
43.414 412.285 43.32 412.656 43.27 413.086 cv
43.219 413.516 43.195 413.98 43.195 414.473 cv
43.195 415.137 43.227 415.699 43.297 416.16 cv
43.363 416.629 43.473 417.008 43.625 417.297 cv
43.77 417.594 43.961 417.805 44.191 417.934 cv
44.422 418.07 44.703 418.137 45.035 418.133 cv
45.289 418.137 45.512 418.098 45.707 418.012 cv
45.898 417.934 46.066 417.812 46.207 417.656 cv
46.348 417.504 46.461 417.32 46.555 417.105 cv
46.641 416.891 46.715 416.652 46.773 416.391 cv
46.824 416.133 46.863 415.852 46.887 415.547 cv
46.906 415.242 46.914 414.926 46.918 414.594 cv
cp
f
30.828 357.762 mo
51.719 357.762 li
51.719 374.852 li
30.828 374.852 li
cp
0 0 0 0 cmyk
ef
37.305 362.777 mo
37.301 362.863 37.297 362.937 37.293 363 cv
37.285 363.07 37.277 363.133 37.266 363.191 cv
37.254 363.258 37.238 363.316 37.219 363.371 cv
37.195 363.43 37.172 363.492 37.148 363.551 cv
33.953 370.914 li
33.926 370.973 33.898 371.016 33.867 371.047 cv
33.832 371.082 33.789 371.109 33.734 371.129 cv
33.68 371.148 33.609 371.16 33.531 371.172 cv
33.445 371.176 33.348 371.18 33.23 371.184 cv
33.074 371.18 32.953 371.172 32.867 371.16 cv
32.781 371.145 32.719 371.129 32.68 371.098 cv
32.641 371.07 32.621 371.031 32.629 370.988 cv
32.629 370.945 32.645 370.895 32.676 370.832 cv
36.035 363.305 li
31.777 363.305 li
31.691 363.309 31.625 363.262 31.582 363.168 cv
31.539 363.078 31.52 362.949 31.52 362.785 cv
31.52 362.699 31.523 362.625 31.535 362.559 cv
31.547 362.496 31.563 362.441 31.586 362.398 cv
31.605 362.355 31.633 362.324 31.668 362.301 cv
31.699 362.281 31.738 362.27 31.777 362.27 cv
36.949 362.27 li
37.008 362.27 37.063 362.277 37.113 362.293 cv
37.16 362.309 37.195 362.336 37.223 362.375 cv
37.246 362.414 37.266 362.469 37.281 362.531 cv
37.293 362.598 37.301 362.68 37.305 362.777 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
40.465 370.395 mo
40.465 370.723 40.41 370.937 40.305 371.043 cv
40.195 371.148 40 371.199 39.719 371.203 cv
39.441 371.199 39.25 371.148 39.148 371.047 cv
39.039 370.941 38.988 370.73 38.992 370.414 cv
38.988 370.09 39.043 369.875 39.152 369.766 cv
39.258 369.66 39.453 369.605 39.738 369.605 cv
40.012 369.605 40.199 369.66 40.309 369.766 cv
40.41 369.871 40.465 370.082 40.465 370.395 cv
cp
f
47.789 368.289 mo
47.789 368.766 47.707 369.187 47.547 369.559 cv
47.387 369.93 47.16 370.242 46.871 370.496 cv
46.574 370.75 46.227 370.945 45.824 371.074 cv
45.418 371.207 44.969 371.27 44.477 371.27 cv
44.199 371.27 43.938 371.25 43.695 371.211 cv
43.445 371.172 43.227 371.125 43.039 371.07 cv
42.844 371.016 42.688 370.961 42.563 370.902 cv
42.438 370.852 42.359 370.809 42.328 370.773 cv
42.293 370.742 42.27 370.711 42.258 370.684 cv
42.242 370.656 42.227 370.625 42.219 370.582 cv
42.203 370.547 42.195 370.496 42.195 370.434 cv
42.188 370.375 42.188 370.305 42.188 370.223 cv
42.188 370.148 42.191 370.078 42.199 370.016 cv
42.207 369.953 42.219 369.902 42.238 369.863 cv
42.254 369.824 42.273 369.797 42.301 369.777 cv
42.324 369.762 42.355 369.754 42.387 369.75 cv
42.434 369.754 42.504 369.781 42.598 369.836 cv
42.691 369.895 42.82 369.957 42.984 370.023 cv
43.148 370.09 43.348 370.152 43.59 370.211 cv
43.824 370.27 44.109 370.297 44.445 370.297 cv
44.746 370.297 45.027 370.262 45.285 370.187 cv
45.539 370.117 45.762 370.004 45.949 369.848 cv
46.133 369.695 46.277 369.5 46.383 369.262 cv
46.488 369.027 46.539 368.738 46.543 368.398 cv
46.539 368.117 46.496 367.867 46.406 367.648 cv
46.316 367.43 46.18 367.25 45.996 367.105 cv
45.809 366.965 45.574 366.859 45.293 366.785 cv
45.008 366.715 44.668 366.676 44.281 366.676 cv
43.996 366.676 43.758 366.691 43.559 366.719 cv
43.355 366.75 43.168 366.766 42.996 366.762 cv
42.867 366.766 42.773 366.734 42.723 366.672 cv
42.664 366.613 42.637 366.5 42.641 366.328 cv
42.641 362.715 li
42.637 362.566 42.672 362.457 42.746 362.379 cv
42.813 362.309 42.914 362.27 43.051 362.27 cv
46.98 362.27 li
47.016 362.27 47.051 362.281 47.086 362.301 cv
47.117 362.324 47.145 362.355 47.172 362.395 cv
47.191 362.437 47.207 362.488 47.223 362.551 cv
47.23 362.617 47.238 362.695 47.242 362.777 cv
47.238 362.945 47.215 363.07 47.176 363.16 cv
47.129 363.254 47.07 363.301 46.992 363.297 cv
43.82 363.297 li
43.82 365.785 li
43.973 365.766 44.129 365.754 44.293 365.746 cv
44.449 365.742 44.637 365.738 44.852 365.738 cv
45.336 365.738 45.762 365.801 46.129 365.922 cv
46.492 366.043 46.797 366.215 47.047 366.434 cv
47.289 366.66 47.477 366.926 47.602 367.238 cv
47.727 367.555 47.789 367.906 47.789 368.289 cv
cp
f
23.734 309.949 mo
51.718 309.949 li
51.718 327.039 li
23.734 327.039 li
cp
0 0 0 0 cmyk
ef
30.09 322.863 mo
30.086 322.953 30.078 323.023 30.066 323.082 cv
30.051 323.145 30.031 323.195 30.012 323.227 cv
29.988 323.266 29.965 323.289 29.934 323.305 cv
29.902 323.32 29.871 323.328 29.844 323.328 cv
25.207 323.328 li
25.172 323.328 25.145 323.32 25.117 323.305 cv
25.09 323.289 25.063 323.266 25.039 323.227 cv
25.012 323.195 24.992 323.145 24.98 323.082 cv
24.965 323.023 24.957 322.953 24.961 322.863 cv
24.957 322.785 24.965 322.711 24.98 322.648 cv
24.992 322.59 25.008 322.543 25.031 322.504 cv
25.047 322.469 25.074 322.437 25.105 322.414 cv
25.137 322.395 25.168 322.387 25.207 322.383 cv
27.059 322.383 li
27.059 315.637 li
25.344 316.656 li
25.254 316.707 25.184 316.734 25.137 316.742 cv
25.082 316.75 25.039 316.742 25.008 316.711 cv
24.973 316.684 24.953 316.633 24.941 316.562 cv
24.93 316.496 24.922 316.41 24.926 316.301 cv
24.922 316.227 24.926 316.16 24.938 316.102 cv
24.941 316.051 24.953 316.004 24.969 315.965 cv
24.98 315.93 25 315.898 25.023 315.871 cv
25.047 315.844 25.078 315.816 25.125 315.789 cv
27.168 314.477 li
27.184 314.465 27.203 314.453 27.234 314.445 cv
27.258 314.437 27.293 314.43 27.34 314.418 cv
27.379 314.41 27.43 314.402 27.484 314.398 cv
27.539 314.398 27.605 314.398 27.691 314.395 cv
27.797 314.398 27.891 314.402 27.965 314.41 cv
28.035 314.418 28.09 314.434 28.137 314.449 cv
28.176 314.469 28.203 314.488 28.219 314.512 cv
28.227 314.539 28.234 314.562 28.238 314.586 cv
28.238 322.383 li
29.844 322.383 li
29.879 322.387 29.914 322.395 29.945 322.414 cv
29.977 322.437 30 322.469 30.023 322.504 cv
30.039 322.543 30.055 322.59 30.07 322.648 cv
30.078 322.711 30.086 322.785 30.09 322.863 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.484 318.871 mo
37.48 319.555 37.43 320.176 37.324 320.738 cv
37.215 321.301 37.035 321.785 36.789 322.187 cv
36.535 322.594 36.207 322.906 35.809 323.125 cv
35.402 323.348 34.91 323.457 34.324 323.457 cv
33.766 323.457 33.293 323.359 32.914 323.16 cv
32.531 322.965 32.227 322.672 31.992 322.285 cv
31.758 321.898 31.59 321.426 31.496 320.859 cv
31.395 320.297 31.348 319.648 31.348 318.914 cv
31.348 318.242 31.402 317.621 31.512 317.055 cv
31.621 316.492 31.797 316.008 32.047 315.602 cv
32.289 315.199 32.613 314.887 33.02 314.66 cv
33.418 314.441 33.914 314.328 34.504 314.328 cv
35.063 314.328 35.535 314.43 35.918 314.625 cv
36.301 314.828 36.605 315.121 36.84 315.504 cv
37.07 315.895 37.238 316.367 37.336 316.93 cv
37.434 317.492 37.48 318.141 37.484 318.871 cv
cp
36.277 318.953 mo
36.273 318.512 36.258 318.113 36.23 317.762 cv
36.195 317.41 36.148 317.102 36.09 316.832 cv
36.023 316.562 35.945 316.332 35.848 316.137 cv
35.75 315.945 35.633 315.785 35.496 315.656 cv
35.355 315.531 35.195 315.437 35.023 315.379 cv
34.844 315.324 34.648 315.297 34.434 315.293 cv
34.043 315.297 33.727 315.387 33.488 315.57 cv
33.242 315.754 33.051 316.008 32.914 316.324 cv
32.773 316.645 32.68 317.016 32.629 317.445 cv
32.578 317.875 32.555 318.34 32.555 318.832 cv
32.555 319.496 32.586 320.059 32.656 320.52 cv
32.723 320.988 32.832 321.367 32.984 321.656 cv
33.129 321.953 33.32 322.164 33.551 322.293 cv
33.781 322.43 34.063 322.496 34.395 322.492 cv
34.648 322.496 34.871 322.457 35.066 322.371 cv
35.258 322.293 35.426 322.172 35.566 322.016 cv
35.707 321.863 35.82 321.68 35.914 321.465 cv
36 321.25 36.074 321.012 36.133 320.75 cv
36.184 320.492 36.223 320.211 36.246 319.906 cv
36.266 319.602 36.273 319.285 36.277 318.953 cv
cp
f
40.41 322.582 mo
40.41 322.91 40.355 323.125 40.25 323.23 cv
40.141 323.336 39.945 323.387 39.664 323.391 cv
39.387 323.387 39.195 323.336 39.094 323.234 cv
38.984 323.129 38.934 322.918 38.938 322.602 cv
38.934 322.277 38.988 322.062 39.098 321.953 cv
39.203 321.848 39.398 321.793 39.684 321.793 cv
39.957 321.793 40.145 321.848 40.254 321.953 cv
40.355 322.059 40.41 322.27 40.41 322.582 cv
cp
f
48.113 318.871 mo
48.109 319.555 48.059 320.176 47.953 320.738 cv
47.844 321.301 47.664 321.785 47.418 322.187 cv
47.164 322.594 46.836 322.906 46.438 323.125 cv
46.031 323.348 45.539 323.457 44.953 323.457 cv
44.395 323.457 43.922 323.359 43.543 323.16 cv
43.16 322.965 42.855 322.672 42.621 322.285 cv
42.387 321.898 42.219 321.426 42.125 320.859 cv
42.023 320.297 41.977 319.648 41.977 318.914 cv
41.977 318.242 42.031 317.621 42.141 317.055 cv
42.25 316.492 42.426 316.008 42.676 315.602 cv
42.918 315.199 43.242 314.887 43.648 314.66 cv
44.047 314.441 44.543 314.328 45.133 314.328 cv
45.691 314.328 46.164 314.43 46.547 314.625 cv
46.93 314.828 47.234 315.121 47.469 315.504 cv
47.699 315.895 47.867 316.367 47.965 316.93 cv
48.063 317.492 48.109 318.141 48.113 318.871 cv
cp
46.906 318.953 mo
46.902 318.512 46.887 318.113 46.859 317.762 cv
46.824 317.41 46.777 317.102 46.719 316.832 cv
46.652 316.562 46.574 316.332 46.477 316.137 cv
46.379 315.945 46.262 315.785 46.125 315.656 cv
45.984 315.531 45.824 315.437 45.652 315.379 cv
45.473 315.324 45.277 315.297 45.063 315.293 cv
44.672 315.297 44.355 315.387 44.117 315.57 cv
43.871 315.754 43.68 316.008 43.543 316.324 cv
43.402 316.645 43.309 317.016 43.258 317.445 cv
43.207 317.875 43.184 318.34 43.184 318.832 cv
43.184 319.496 43.215 320.059 43.285 320.52 cv
43.352 320.988 43.461 321.367 43.613 321.656 cv
43.758 321.953 43.949 322.164 44.18 322.293 cv
44.41 322.43 44.691 322.496 45.023 322.492 cv
45.277 322.496 45.5 322.457 45.695 322.371 cv
45.887 322.293 46.055 322.172 46.195 322.016 cv
46.336 321.863 46.449 321.68 46.543 321.465 cv
46.629 321.25 46.703 321.012 46.762 320.75 cv
46.813 320.492 46.852 320.211 46.875 319.906 cv
46.895 319.602 46.902 319.285 46.906 318.953 cv
cp
f
23.734 262.148 mo
51.718 262.148 li
51.718 279.238 li
23.734 279.238 li
cp
0 0 0 0 cmyk
ef
30.09 275.055 mo
30.086 275.145 30.078 275.215 30.066 275.273 cv
30.051 275.336 30.031 275.387 30.012 275.418 cv
29.988 275.457 29.965 275.48 29.934 275.496 cv
29.902 275.512 29.871 275.52 29.844 275.52 cv
25.207 275.52 li
25.172 275.52 25.145 275.512 25.117 275.496 cv
25.09 275.48 25.063 275.457 25.039 275.418 cv
25.012 275.387 24.992 275.336 24.98 275.273 cv
24.965 275.215 24.957 275.145 24.961 275.055 cv
24.957 274.977 24.965 274.902 24.98 274.84 cv
24.992 274.781 25.008 274.734 25.031 274.695 cv
25.047 274.66 25.074 274.629 25.105 274.605 cv
25.137 274.586 25.168 274.578 25.207 274.574 cv
27.059 274.574 li
27.059 267.828 li
25.344 268.848 li
25.254 268.898 25.184 268.926 25.137 268.934 cv
25.082 268.941 25.039 268.934 25.008 268.902 cv
24.973 268.875 24.953 268.824 24.941 268.754 cv
24.93 268.687 24.922 268.602 24.926 268.492 cv
24.922 268.418 24.926 268.352 24.938 268.293 cv
24.941 268.242 24.953 268.195 24.969 268.156 cv
24.98 268.121 25 268.09 25.023 268.062 cv
25.047 268.035 25.078 268.008 25.125 267.98 cv
27.168 266.668 li
27.184 266.656 27.203 266.645 27.234 266.637 cv
27.258 266.629 27.293 266.621 27.34 266.609 cv
27.379 266.602 27.43 266.594 27.484 266.59 cv
27.539 266.59 27.605 266.59 27.691 266.586 cv
27.797 266.59 27.891 266.594 27.965 266.602 cv
28.035 266.609 28.09 266.625 28.137 266.641 cv
28.176 266.66 28.203 266.68 28.219 266.703 cv
28.227 266.73 28.234 266.754 28.238 266.777 cv
28.238 274.574 li
29.844 274.574 li
29.879 274.578 29.914 274.586 29.945 274.605 cv
29.977 274.629 30 274.66 30.023 274.695 cv
30.039 274.734 30.055 274.781 30.07 274.84 cv
30.078 274.902 30.086 274.977 30.09 275.055 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.191 275.012 mo
37.188 275.098 37.184 275.172 37.172 275.234 cv
37.16 275.301 37.145 275.355 37.125 275.395 cv
37.102 275.441 37.074 275.473 37.043 275.488 cv
37.008 275.512 36.969 275.52 36.93 275.52 cv
32.027 275.52 li
31.965 275.52 31.906 275.512 31.859 275.496 cv
31.809 275.48 31.77 275.457 31.734 275.418 cv
31.699 275.387 31.672 275.332 31.66 275.262 cv
31.641 275.191 31.633 275.105 31.637 275.004 cv
31.633 274.914 31.637 274.836 31.645 274.766 cv
31.648 274.699 31.664 274.641 31.691 274.586 cv
31.715 274.535 31.746 274.48 31.781 274.426 cv
31.816 274.375 31.859 274.32 31.918 274.258 cv
33.691 272.434 li
34.102 272.016 34.43 271.641 34.68 271.305 cv
34.926 270.977 35.117 270.672 35.25 270.395 cv
35.383 270.121 35.469 269.871 35.516 269.645 cv
35.555 269.422 35.578 269.211 35.578 269.016 cv
35.578 268.82 35.543 268.637 35.477 268.457 cv
35.41 268.285 35.316 268.129 35.191 267.992 cv
35.066 267.863 34.91 267.758 34.723 267.676 cv
34.535 267.602 34.316 267.562 34.07 267.559 cv
33.781 267.562 33.523 267.602 33.297 267.676 cv
33.066 267.758 32.867 267.844 32.695 267.93 cv
32.523 268.023 32.379 268.105 32.262 268.184 cv
32.145 268.262 32.059 268.301 32.008 268.301 cv
31.973 268.301 31.941 268.293 31.918 268.273 cv
31.887 268.258 31.867 268.227 31.852 268.184 cv
31.836 268.145 31.82 268.09 31.813 268.02 cv
31.801 267.953 31.797 267.871 31.801 267.773 cv
31.797 267.707 31.801 267.648 31.809 267.598 cv
31.813 267.547 31.82 267.504 31.832 267.465 cv
31.84 267.43 31.855 267.395 31.875 267.363 cv
31.895 267.332 31.93 267.293 31.988 267.242 cv
32.039 267.195 32.133 267.129 32.27 267.047 cv
32.402 266.965 32.574 266.887 32.777 266.805 cv
32.98 266.727 33.203 266.656 33.449 266.602 cv
33.691 266.547 33.949 266.52 34.223 266.52 cv
34.648 266.52 35.023 266.582 35.348 266.703 cv
35.668 266.824 35.934 266.988 36.148 267.199 cv
36.359 267.41 36.52 267.656 36.625 267.93 cv
36.73 268.211 36.785 268.508 36.785 268.82 cv
36.785 269.109 36.758 269.391 36.707 269.668 cv
36.656 269.953 36.551 270.258 36.391 270.582 cv
36.227 270.91 35.992 271.273 35.688 271.672 cv
35.379 272.074 34.973 272.535 34.469 273.051 cv
33.063 274.52 li
36.922 274.52 li
36.953 274.523 36.988 274.535 37.027 274.551 cv
37.059 274.574 37.09 274.605 37.117 274.645 cv
37.141 274.687 37.16 274.738 37.172 274.797 cv
37.184 274.863 37.188 274.934 37.191 275.012 cv
cp
f
40.41 274.773 mo
40.41 275.102 40.355 275.316 40.25 275.422 cv
40.141 275.527 39.945 275.578 39.664 275.582 cv
39.387 275.578 39.195 275.527 39.094 275.426 cv
38.984 275.32 38.934 275.109 38.938 274.793 cv
38.934 274.469 38.988 274.254 39.098 274.145 cv
39.203 274.039 39.398 273.984 39.684 273.984 cv
39.957 273.984 40.145 274.039 40.254 274.145 cv
40.355 274.25 40.41 274.461 40.41 274.773 cv
cp
f
47.777 272.668 mo
47.777 273.145 47.695 273.566 47.535 273.937 cv
47.375 274.309 47.148 274.621 46.859 274.875 cv
46.563 275.129 46.215 275.324 45.813 275.453 cv
45.406 275.586 44.957 275.648 44.465 275.648 cv
44.188 275.648 43.926 275.629 43.684 275.59 cv
43.434 275.551 43.215 275.504 43.027 275.449 cv
42.832 275.395 42.676 275.34 42.551 275.281 cv
42.426 275.23 42.348 275.187 42.316 275.152 cv
42.281 275.121 42.258 275.09 42.246 275.062 cv
42.23 275.035 42.215 275.004 42.207 274.961 cv
42.191 274.926 42.184 274.875 42.184 274.812 cv
42.176 274.754 42.176 274.684 42.176 274.602 cv
42.176 274.527 42.18 274.457 42.188 274.395 cv
42.195 274.332 42.207 274.281 42.227 274.242 cv
42.242 274.203 42.262 274.176 42.289 274.156 cv
42.313 274.141 42.344 274.133 42.375 274.129 cv
42.422 274.133 42.492 274.16 42.586 274.215 cv
42.68 274.273 42.809 274.336 42.973 274.402 cv
43.137 274.469 43.336 274.531 43.578 274.59 cv
43.813 274.648 44.098 274.676 44.434 274.676 cv
44.734 274.676 45.016 274.641 45.273 274.566 cv
45.527 274.496 45.75 274.383 45.938 274.227 cv
46.121 274.074 46.266 273.879 46.371 273.641 cv
46.477 273.406 46.527 273.117 46.531 272.777 cv
46.527 272.496 46.484 272.246 46.395 272.027 cv
46.305 271.809 46.168 271.629 45.984 271.484 cv
45.797 271.344 45.563 271.238 45.281 271.164 cv
44.996 271.094 44.656 271.055 44.27 271.055 cv
43.984 271.055 43.746 271.07 43.547 271.098 cv
43.344 271.129 43.156 271.145 42.984 271.141 cv
42.855 271.145 42.762 271.113 42.711 271.051 cv
42.652 270.992 42.625 270.879 42.629 270.707 cv
42.629 267.094 li
42.625 266.945 42.66 266.836 42.734 266.758 cv
42.801 266.687 42.902 266.648 43.039 266.648 cv
46.969 266.648 li
47.004 266.648 47.039 266.66 47.074 266.68 cv
47.105 266.703 47.133 266.734 47.16 266.773 cv
47.18 266.816 47.195 266.867 47.211 266.93 cv
47.219 266.996 47.227 267.074 47.23 267.156 cv
47.227 267.324 47.203 267.449 47.164 267.539 cv
47.117 267.633 47.059 267.68 46.98 267.676 cv
43.809 267.676 li
43.809 270.164 li
43.961 270.145 44.117 270.133 44.281 270.125 cv
44.438 270.121 44.625 270.117 44.84 270.117 cv
45.324 270.117 45.75 270.18 46.117 270.301 cv
46.48 270.422 46.785 270.594 47.035 270.812 cv
47.277 271.039 47.465 271.305 47.59 271.617 cv
47.715 271.934 47.777 272.285 47.777 272.668 cv
cp
f
23.734 214.34 mo
51.718 214.34 li
51.718 231.43 li
23.734 231.43 li
cp
0 0 0 0 cmyk
ef
30.09 227.246 mo
30.086 227.336 30.078 227.406 30.066 227.465 cv
30.051 227.527 30.031 227.578 30.012 227.609 cv
29.988 227.648 29.965 227.672 29.934 227.687 cv
29.902 227.703 29.871 227.711 29.844 227.711 cv
25.207 227.711 li
25.172 227.711 25.145 227.703 25.117 227.687 cv
25.09 227.672 25.063 227.648 25.039 227.609 cv
25.012 227.578 24.992 227.527 24.98 227.465 cv
24.965 227.406 24.957 227.336 24.961 227.246 cv
24.957 227.168 24.965 227.094 24.98 227.031 cv
24.992 226.973 25.008 226.926 25.031 226.887 cv
25.047 226.852 25.074 226.82 25.105 226.797 cv
25.137 226.777 25.168 226.77 25.207 226.766 cv
27.059 226.766 li
27.059 220.02 li
25.344 221.039 li
25.254 221.09 25.184 221.117 25.137 221.125 cv
25.082 221.133 25.039 221.125 25.008 221.094 cv
24.973 221.066 24.953 221.016 24.941 220.945 cv
24.93 220.879 24.922 220.793 24.926 220.684 cv
24.922 220.609 24.926 220.543 24.938 220.484 cv
24.941 220.434 24.953 220.387 24.969 220.348 cv
24.98 220.312 25 220.281 25.023 220.254 cv
25.047 220.227 25.078 220.199 25.125 220.172 cv
27.168 218.859 li
27.184 218.848 27.203 218.836 27.234 218.828 cv
27.258 218.82 27.293 218.812 27.34 218.801 cv
27.379 218.793 27.43 218.785 27.484 218.781 cv
27.539 218.781 27.605 218.781 27.691 218.777 cv
27.797 218.781 27.891 218.785 27.965 218.793 cv
28.035 218.801 28.09 218.816 28.137 218.832 cv
28.176 218.852 28.203 218.871 28.219 218.895 cv
28.227 218.922 28.234 218.945 28.238 218.969 cv
28.238 226.766 li
29.844 226.766 li
29.879 226.77 29.914 226.777 29.945 226.797 cv
29.977 226.82 30 226.852 30.023 226.887 cv
30.039 226.926 30.055 226.973 30.07 227.031 cv
30.078 227.094 30.086 227.168 30.09 227.246 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.148 224.859 mo
37.148 225.336 37.066 225.758 36.906 226.129 cv
36.746 226.5 36.52 226.812 36.23 227.066 cv
35.934 227.32 35.586 227.516 35.184 227.645 cv
34.777 227.777 34.328 227.84 33.836 227.84 cv
33.559 227.84 33.297 227.82 33.055 227.781 cv
32.805 227.742 32.586 227.695 32.398 227.641 cv
32.203 227.586 32.047 227.531 31.922 227.473 cv
31.797 227.422 31.719 227.379 31.688 227.344 cv
31.652 227.312 31.629 227.281 31.617 227.254 cv
31.602 227.227 31.586 227.195 31.578 227.152 cv
31.563 227.117 31.555 227.066 31.555 227.004 cv
31.547 226.945 31.547 226.875 31.547 226.793 cv
31.547 226.719 31.551 226.648 31.559 226.586 cv
31.566 226.523 31.578 226.473 31.598 226.434 cv
31.613 226.395 31.633 226.367 31.66 226.348 cv
31.684 226.332 31.715 226.324 31.746 226.32 cv
31.793 226.324 31.863 226.352 31.957 226.406 cv
32.051 226.465 32.18 226.527 32.344 226.594 cv
32.508 226.66 32.707 226.723 32.949 226.781 cv
33.184 226.84 33.469 226.867 33.805 226.867 cv
34.105 226.867 34.387 226.832 34.645 226.758 cv
34.898 226.687 35.121 226.574 35.309 226.418 cv
35.492 226.266 35.637 226.07 35.742 225.832 cv
35.848 225.598 35.898 225.309 35.902 224.969 cv
35.898 224.687 35.855 224.437 35.766 224.219 cv
35.676 224 35.539 223.82 35.355 223.676 cv
35.168 223.535 34.934 223.43 34.652 223.355 cv
34.367 223.285 34.027 223.246 33.641 223.246 cv
33.355 223.246 33.117 223.262 32.918 223.289 cv
32.715 223.32 32.527 223.336 32.355 223.332 cv
32.227 223.336 32.133 223.305 32.082 223.242 cv
32.023 223.184 31.996 223.07 32 222.898 cv
32 219.285 li
31.996 219.137 32.031 219.027 32.105 218.949 cv
32.172 218.879 32.273 218.84 32.41 218.84 cv
36.34 218.84 li
36.375 218.84 36.41 218.852 36.445 218.871 cv
36.477 218.895 36.504 218.926 36.531 218.965 cv
36.551 219.008 36.566 219.059 36.582 219.121 cv
36.59 219.187 36.598 219.266 36.602 219.348 cv
36.598 219.516 36.574 219.641 36.535 219.73 cv
36.488 219.824 36.43 219.871 36.352 219.867 cv
33.18 219.867 li
33.18 222.355 li
33.332 222.336 33.488 222.324 33.652 222.316 cv
33.809 222.312 33.996 222.309 34.211 222.309 cv
34.695 222.309 35.121 222.371 35.488 222.492 cv
35.852 222.613 36.156 222.785 36.406 223.004 cv
36.648 223.23 36.836 223.496 36.961 223.809 cv
37.086 224.125 37.148 224.477 37.148 224.859 cv
cp
f
40.41 226.965 mo
40.41 227.293 40.355 227.508 40.25 227.613 cv
40.141 227.719 39.945 227.77 39.664 227.773 cv
39.387 227.77 39.195 227.719 39.094 227.617 cv
38.984 227.512 38.934 227.301 38.938 226.984 cv
38.934 226.66 38.988 226.445 39.098 226.336 cv
39.203 226.23 39.398 226.176 39.684 226.176 cv
39.957 226.176 40.145 226.23 40.254 226.336 cv
40.355 226.441 40.41 226.652 40.41 226.965 cv
cp
f
48.113 223.254 mo
48.109 223.937 48.059 224.559 47.953 225.121 cv
47.844 225.684 47.664 226.168 47.418 226.57 cv
47.164 226.977 46.836 227.289 46.438 227.508 cv
46.031 227.73 45.539 227.84 44.953 227.84 cv
44.395 227.84 43.922 227.742 43.543 227.543 cv
43.16 227.348 42.855 227.055 42.621 226.668 cv
42.387 226.281 42.219 225.809 42.125 225.242 cv
42.023 224.68 41.977 224.031 41.977 223.297 cv
41.977 222.625 42.031 222.004 42.141 221.437 cv
42.25 220.875 42.426 220.391 42.676 219.984 cv
42.918 219.582 43.242 219.27 43.648 219.043 cv
44.047 218.824 44.543 218.711 45.133 218.711 cv
45.691 218.711 46.164 218.812 46.547 219.008 cv
46.93 219.211 47.234 219.504 47.469 219.887 cv
47.699 220.277 47.867 220.75 47.965 221.312 cv
48.063 221.875 48.109 222.523 48.113 223.254 cv
cp
46.906 223.336 mo
46.902 222.895 46.887 222.496 46.859 222.145 cv
46.824 221.793 46.777 221.484 46.719 221.215 cv
46.652 220.945 46.574 220.715 46.477 220.52 cv
46.379 220.328 46.262 220.168 46.125 220.039 cv
45.984 219.914 45.824 219.82 45.652 219.762 cv
45.473 219.707 45.277 219.68 45.063 219.676 cv
44.672 219.68 44.355 219.77 44.117 219.953 cv
43.871 220.137 43.68 220.391 43.543 220.707 cv
43.402 221.027 43.309 221.398 43.258 221.828 cv
43.207 222.258 43.184 222.723 43.184 223.215 cv
43.184 223.879 43.215 224.441 43.285 224.902 cv
43.352 225.371 43.461 225.75 43.613 226.039 cv
43.758 226.336 43.949 226.547 44.18 226.676 cv
44.41 226.812 44.691 226.879 45.023 226.875 cv
45.277 226.879 45.5 226.84 45.695 226.754 cv
45.887 226.676 46.055 226.555 46.195 226.398 cv
46.336 226.246 46.449 226.062 46.543 225.848 cv
46.629 225.633 46.703 225.395 46.762 225.133 cv
46.813 224.875 46.852 224.594 46.875 224.289 cv
46.895 223.984 46.902 223.668 46.906 223.336 cv
cp
f
23.734 166.539 mo
51.718 166.539 li
51.718 183.629 li
23.734 183.629 li
cp
0 0 0 0 cmyk
ef
30.09 179.414 mo
30.086 179.504 30.078 179.574 30.066 179.633 cv
30.051 179.695 30.031 179.746 30.012 179.777 cv
29.988 179.816 29.965 179.84 29.934 179.855 cv
29.902 179.871 29.871 179.879 29.844 179.879 cv
25.207 179.879 li
25.172 179.879 25.145 179.871 25.117 179.855 cv
25.09 179.84 25.063 179.816 25.039 179.777 cv
25.012 179.746 24.992 179.695 24.98 179.633 cv
24.965 179.574 24.957 179.504 24.961 179.414 cv
24.957 179.336 24.965 179.262 24.98 179.199 cv
24.992 179.141 25.008 179.094 25.031 179.055 cv
25.047 179.02 25.074 178.988 25.105 178.965 cv
25.137 178.945 25.168 178.937 25.207 178.934 cv
27.059 178.934 li
27.059 172.187 li
25.344 173.207 li
25.254 173.258 25.184 173.285 25.137 173.293 cv
25.082 173.301 25.039 173.293 25.008 173.262 cv
24.973 173.234 24.953 173.184 24.941 173.113 cv
24.93 173.047 24.922 172.961 24.926 172.852 cv
24.922 172.777 24.926 172.711 24.938 172.652 cv
24.941 172.602 24.953 172.555 24.969 172.516 cv
24.98 172.48 25 172.449 25.023 172.422 cv
25.047 172.395 25.078 172.367 25.125 172.34 cv
27.168 171.027 li
27.184 171.016 27.203 171.004 27.234 170.996 cv
27.258 170.988 27.293 170.98 27.34 170.969 cv
27.379 170.961 27.43 170.953 27.484 170.949 cv
27.539 170.949 27.605 170.949 27.691 170.945 cv
27.797 170.949 27.891 170.953 27.965 170.961 cv
28.035 170.969 28.09 170.984 28.137 171 cv
28.176 171.02 28.203 171.039 28.219 171.062 cv
28.227 171.09 28.234 171.113 28.238 171.137 cv
28.238 178.934 li
29.844 178.934 li
29.879 178.937 29.914 178.945 29.945 178.965 cv
29.977 178.988 30 179.02 30.023 179.055 cv
30.039 179.094 30.055 179.141 30.07 179.199 cv
30.078 179.262 30.086 179.336 30.09 179.414 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.32 171.516 mo
37.316 171.602 37.313 171.676 37.309 171.738 cv
37.301 171.809 37.293 171.871 37.281 171.93 cv
37.27 171.996 37.254 172.055 37.234 172.109 cv
37.211 172.168 37.188 172.23 37.164 172.289 cv
33.969 179.652 li
33.941 179.711 33.914 179.754 33.883 179.785 cv
33.848 179.82 33.805 179.848 33.75 179.867 cv
33.695 179.887 33.625 179.898 33.547 179.91 cv
33.461 179.914 33.363 179.918 33.246 179.922 cv
33.09 179.918 32.969 179.91 32.883 179.898 cv
32.797 179.883 32.734 179.867 32.695 179.836 cv
32.656 179.809 32.637 179.77 32.645 179.727 cv
32.645 179.684 32.66 179.633 32.691 179.57 cv
36.051 172.043 li
31.793 172.043 li
31.707 172.047 31.641 172 31.598 171.906 cv
31.555 171.816 31.535 171.687 31.535 171.523 cv
31.535 171.437 31.539 171.363 31.551 171.297 cv
31.563 171.234 31.578 171.18 31.602 171.137 cv
31.621 171.094 31.648 171.062 31.684 171.039 cv
31.715 171.02 31.754 171.008 31.793 171.008 cv
36.965 171.008 li
37.023 171.008 37.078 171.016 37.129 171.031 cv
37.176 171.047 37.211 171.074 37.238 171.113 cv
37.262 171.152 37.281 171.207 37.297 171.27 cv
37.309 171.336 37.316 171.418 37.32 171.516 cv
cp
f
40.41 179.133 mo
40.41 179.461 40.355 179.676 40.25 179.781 cv
40.141 179.887 39.945 179.937 39.664 179.941 cv
39.387 179.937 39.195 179.887 39.094 179.785 cv
38.984 179.68 38.934 179.469 38.938 179.152 cv
38.934 178.828 38.988 178.613 39.098 178.504 cv
39.203 178.398 39.398 178.344 39.684 178.344 cv
39.957 178.344 40.145 178.398 40.254 178.504 cv
40.355 178.609 40.41 178.82 40.41 179.133 cv
cp
f
47.777 177.027 mo
47.777 177.504 47.695 177.926 47.535 178.297 cv
47.375 178.668 47.148 178.98 46.859 179.234 cv
46.563 179.488 46.215 179.684 45.813 179.812 cv
45.406 179.945 44.957 180.008 44.465 180.008 cv
44.188 180.008 43.926 179.988 43.684 179.949 cv
43.434 179.91 43.215 179.863 43.027 179.809 cv
42.832 179.754 42.676 179.699 42.551 179.641 cv
42.426 179.59 42.348 179.547 42.316 179.512 cv
42.281 179.48 42.258 179.449 42.246 179.422 cv
42.23 179.395 42.215 179.363 42.207 179.32 cv
42.191 179.285 42.184 179.234 42.184 179.172 cv
42.176 179.113 42.176 179.043 42.176 178.961 cv
42.176 178.887 42.18 178.816 42.188 178.754 cv
42.195 178.691 42.207 178.641 42.227 178.602 cv
42.242 178.562 42.262 178.535 42.289 178.516 cv
42.313 178.5 42.344 178.492 42.375 178.488 cv
42.422 178.492 42.492 178.52 42.586 178.574 cv
42.68 178.633 42.809 178.695 42.973 178.762 cv
43.137 178.828 43.336 178.891 43.578 178.949 cv
43.813 179.008 44.098 179.035 44.434 179.035 cv
44.734 179.035 45.016 179 45.273 178.926 cv
45.527 178.855 45.75 178.742 45.938 178.586 cv
46.121 178.434 46.266 178.238 46.371 178 cv
46.477 177.766 46.527 177.477 46.531 177.137 cv
46.527 176.855 46.484 176.605 46.395 176.387 cv
46.305 176.168 46.168 175.988 45.984 175.844 cv
45.797 175.703 45.563 175.598 45.281 175.523 cv
44.996 175.453 44.656 175.414 44.27 175.414 cv
43.984 175.414 43.746 175.43 43.547 175.457 cv
43.344 175.488 43.156 175.504 42.984 175.5 cv
42.855 175.504 42.762 175.473 42.711 175.41 cv
42.652 175.352 42.625 175.238 42.629 175.066 cv
42.629 171.453 li
42.625 171.305 42.66 171.195 42.734 171.117 cv
42.801 171.047 42.902 171.008 43.039 171.008 cv
46.969 171.008 li
47.004 171.008 47.039 171.02 47.074 171.039 cv
47.105 171.062 47.133 171.094 47.16 171.133 cv
47.18 171.176 47.195 171.227 47.211 171.289 cv
47.219 171.355 47.227 171.434 47.23 171.516 cv
47.227 171.684 47.203 171.809 47.164 171.898 cv
47.117 171.992 47.059 172.039 46.98 172.035 cv
43.809 172.035 li
43.809 174.523 li
43.961 174.504 44.117 174.492 44.281 174.484 cv
44.438 174.48 44.625 174.477 44.84 174.477 cv
45.324 174.477 45.75 174.539 46.117 174.66 cv
46.48 174.781 46.785 174.953 47.035 175.172 cv
47.277 175.398 47.465 175.664 47.59 175.977 cv
47.715 176.293 47.777 176.645 47.777 177.027 cv
cp
f
23.734 118.73 mo
51.718 118.73 li
51.718 135.82 li
23.734 135.82 li
cp
0 0 0 0 cmyk
ef
30.07 131.562 mo
30.066 131.648 30.063 131.723 30.051 131.785 cv
30.039 131.852 30.023 131.906 30.004 131.945 cv
29.98 131.992 29.953 132.023 29.922 132.039 cv
29.887 132.062 29.848 132.07 29.809 132.07 cv
24.906 132.07 li
24.844 132.07 24.785 132.062 24.738 132.047 cv
24.688 132.031 24.648 132.008 24.613 131.969 cv
24.578 131.937 24.551 131.883 24.539 131.812 cv
24.52 131.742 24.512 131.656 24.516 131.555 cv
24.512 131.465 24.516 131.387 24.523 131.316 cv
24.527 131.25 24.543 131.191 24.57 131.137 cv
24.594 131.086 24.625 131.031 24.66 130.977 cv
24.695 130.926 24.738 130.871 24.797 130.809 cv
26.57 128.984 li
26.98 128.566 27.309 128.191 27.559 127.855 cv
27.805 127.527 27.996 127.223 28.129 126.945 cv
28.262 126.672 28.348 126.422 28.395 126.195 cv
28.434 125.973 28.457 125.762 28.457 125.566 cv
28.457 125.371 28.422 125.187 28.355 125.008 cv
28.289 124.836 28.195 124.68 28.07 124.543 cv
27.945 124.414 27.789 124.309 27.602 124.227 cv
27.414 124.152 27.195 124.113 26.949 124.109 cv
26.66 124.113 26.402 124.152 26.176 124.227 cv
25.945 124.309 25.746 124.395 25.574 124.48 cv
25.402 124.574 25.258 124.656 25.141 124.734 cv
25.023 124.812 24.938 124.852 24.887 124.852 cv
24.852 124.852 24.82 124.844 24.797 124.824 cv
24.766 124.809 24.746 124.777 24.73 124.734 cv
24.715 124.695 24.699 124.641 24.691 124.57 cv
24.68 124.504 24.676 124.422 24.68 124.324 cv
24.676 124.258 24.68 124.199 24.688 124.148 cv
24.691 124.098 24.699 124.055 24.711 124.016 cv
24.719 123.98 24.734 123.945 24.754 123.914 cv
24.773 123.883 24.809 123.844 24.867 123.793 cv
24.918 123.746 25.012 123.68 25.148 123.598 cv
25.281 123.516 25.453 123.437 25.656 123.355 cv
25.859 123.277 26.082 123.207 26.328 123.152 cv
26.57 123.098 26.828 123.07 27.102 123.07 cv
27.527 123.07 27.902 123.133 28.227 123.254 cv
28.547 123.375 28.813 123.539 29.027 123.75 cv
29.238 123.961 29.398 124.207 29.504 124.48 cv
29.609 124.762 29.664 125.059 29.664 125.371 cv
29.664 125.66 29.637 125.941 29.586 126.219 cv
29.535 126.504 29.43 126.809 29.27 127.133 cv
29.105 127.461 28.871 127.824 28.566 128.223 cv
28.258 128.625 27.852 129.086 27.348 129.602 cv
25.941 131.07 li
29.801 131.07 li
29.832 131.074 29.867 131.086 29.906 131.102 cv
29.938 131.125 29.969 131.156 29.996 131.195 cv
30.02 131.238 30.039 131.289 30.051 131.348 cv
30.063 131.414 30.066 131.484 30.07 131.562 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.484 127.613 mo
37.48 128.297 37.43 128.918 37.324 129.48 cv
37.215 130.043 37.035 130.527 36.789 130.93 cv
36.535 131.336 36.207 131.648 35.809 131.867 cv
35.402 132.09 34.91 132.199 34.324 132.199 cv
33.766 132.199 33.293 132.102 32.914 131.902 cv
32.531 131.707 32.227 131.414 31.992 131.027 cv
31.758 130.641 31.59 130.168 31.496 129.602 cv
31.395 129.039 31.348 128.391 31.348 127.656 cv
31.348 126.984 31.402 126.363 31.512 125.797 cv
31.621 125.234 31.797 124.75 32.047 124.344 cv
32.289 123.941 32.613 123.629 33.02 123.402 cv
33.418 123.184 33.914 123.07 34.504 123.07 cv
35.063 123.07 35.535 123.172 35.918 123.367 cv
36.301 123.57 36.605 123.863 36.84 124.246 cv
37.07 124.637 37.238 125.109 37.336 125.672 cv
37.434 126.234 37.48 126.883 37.484 127.613 cv
cp
36.277 127.695 mo
36.273 127.254 36.258 126.855 36.23 126.504 cv
36.195 126.152 36.148 125.844 36.09 125.574 cv
36.023 125.305 35.945 125.074 35.848 124.879 cv
35.75 124.687 35.633 124.527 35.496 124.398 cv
35.355 124.273 35.195 124.18 35.023 124.121 cv
34.844 124.066 34.648 124.039 34.434 124.035 cv
34.043 124.039 33.727 124.129 33.488 124.312 cv
33.242 124.496 33.051 124.75 32.914 125.066 cv
32.773 125.387 32.68 125.758 32.629 126.187 cv
32.578 126.617 32.555 127.082 32.555 127.574 cv
32.555 128.238 32.586 128.801 32.656 129.262 cv
32.723 129.73 32.832 130.109 32.984 130.398 cv
33.129 130.695 33.32 130.906 33.551 131.035 cv
33.781 131.172 34.063 131.238 34.395 131.234 cv
34.648 131.238 34.871 131.199 35.066 131.113 cv
35.258 131.035 35.426 130.914 35.566 130.758 cv
35.707 130.605 35.82 130.422 35.914 130.207 cv
36 129.992 36.074 129.754 36.133 129.492 cv
36.184 129.234 36.223 128.953 36.246 128.648 cv
36.266 128.344 36.273 128.027 36.277 127.695 cv
cp
f
40.41 131.324 mo
40.41 131.652 40.355 131.867 40.25 131.973 cv
40.141 132.078 39.945 132.129 39.664 132.133 cv
39.387 132.129 39.195 132.078 39.094 131.977 cv
38.984 131.871 38.934 131.66 38.938 131.344 cv
38.934 131.02 38.988 130.805 39.098 130.695 cv
39.203 130.59 39.398 130.535 39.684 130.535 cv
39.957 130.535 40.145 130.59 40.254 130.695 cv
40.355 130.801 40.41 131.012 40.41 131.324 cv
cp
f
48.113 127.613 mo
48.109 128.297 48.059 128.918 47.953 129.48 cv
47.844 130.043 47.664 130.527 47.418 130.93 cv
47.164 131.336 46.836 131.648 46.438 131.867 cv
46.031 132.09 45.539 132.199 44.953 132.199 cv
44.395 132.199 43.922 132.102 43.543 131.902 cv
43.16 131.707 42.855 131.414 42.621 131.027 cv
42.387 130.641 42.219 130.168 42.125 129.602 cv
42.023 129.039 41.977 128.391 41.977 127.656 cv
41.977 126.984 42.031 126.363 42.141 125.797 cv
42.25 125.234 42.426 124.75 42.676 124.344 cv
42.918 123.941 43.242 123.629 43.648 123.402 cv
44.047 123.184 44.543 123.07 45.133 123.07 cv
45.691 123.07 46.164 123.172 46.547 123.367 cv
46.93 123.57 47.234 123.863 47.469 124.246 cv
47.699 124.637 47.867 125.109 47.965 125.672 cv
48.063 126.234 48.109 126.883 48.113 127.613 cv
cp
46.906 127.695 mo
46.902 127.254 46.887 126.855 46.859 126.504 cv
46.824 126.152 46.777 125.844 46.719 125.574 cv
46.652 125.305 46.574 125.074 46.477 124.879 cv
46.379 124.687 46.262 124.527 46.125 124.398 cv
45.984 124.273 45.824 124.18 45.652 124.121 cv
45.473 124.066 45.277 124.039 45.063 124.035 cv
44.672 124.039 44.355 124.129 44.117 124.312 cv
43.871 124.496 43.68 124.75 43.543 125.066 cv
43.402 125.387 43.309 125.758 43.258 126.187 cv
43.207 126.617 43.184 127.082 43.184 127.574 cv
43.184 128.238 43.215 128.801 43.285 129.262 cv
43.352 129.73 43.461 130.109 43.613 130.398 cv
43.758 130.695 43.949 130.906 44.18 131.035 cv
44.41 131.172 44.691 131.238 45.023 131.234 cv
45.277 131.238 45.5 131.199 45.695 131.113 cv
45.887 131.035 46.055 130.914 46.195 130.758 cv
46.336 130.605 46.449 130.422 46.543 130.207 cv
46.629 129.992 46.703 129.754 46.762 129.492 cv
46.813 129.234 46.852 128.953 46.875 128.648 cv
46.895 128.344 46.902 128.027 46.906 127.695 cv
cp
f
23.734 70.93 mo
51.718 70.93 li
51.718 88.02 li
23.734 88.02 li
cp
0 0 0 0 cmyk
ef
30.07 83.754 mo
30.066 83.84 30.063 83.914 30.051 83.977 cv
30.039 84.043 30.023 84.098 30.004 84.137 cv
29.98 84.184 29.953 84.215 29.922 84.23 cv
29.887 84.254 29.848 84.262 29.809 84.262 cv
24.906 84.262 li
24.844 84.262 24.785 84.254 24.738 84.238 cv
24.688 84.223 24.648 84.199 24.613 84.16 cv
24.578 84.129 24.551 84.074 24.539 84.004 cv
24.52 83.934 24.512 83.848 24.516 83.746 cv
24.512 83.656 24.516 83.578 24.523 83.508 cv
24.527 83.441 24.543 83.383 24.57 83.328 cv
24.594 83.277 24.625 83.223 24.66 83.168 cv
24.695 83.117 24.738 83.062 24.797 83 cv
26.57 81.176 li
26.98 80.758 27.309 80.383 27.559 80.047 cv
27.805 79.719 27.996 79.414 28.129 79.137 cv
28.262 78.863 28.348 78.613 28.395 78.387 cv
28.434 78.164 28.457 77.953 28.457 77.758 cv
28.457 77.562 28.422 77.379 28.355 77.199 cv
28.289 77.027 28.195 76.871 28.07 76.734 cv
27.945 76.605 27.789 76.5 27.602 76.418 cv
27.414 76.344 27.195 76.305 26.949 76.301 cv
26.66 76.305 26.402 76.344 26.176 76.418 cv
25.945 76.5 25.746 76.586 25.574 76.672 cv
25.402 76.766 25.258 76.848 25.141 76.926 cv
25.023 77.004 24.938 77.043 24.887 77.043 cv
24.852 77.043 24.82 77.035 24.797 77.016 cv
24.766 77 24.746 76.969 24.73 76.926 cv
24.715 76.887 24.699 76.832 24.691 76.762 cv
24.68 76.695 24.676 76.613 24.68 76.516 cv
24.676 76.449 24.68 76.391 24.688 76.34 cv
24.691 76.289 24.699 76.246 24.711 76.207 cv
24.719 76.172 24.734 76.137 24.754 76.105 cv
24.773 76.074 24.809 76.035 24.867 75.984 cv
24.918 75.937 25.012 75.871 25.148 75.789 cv
25.281 75.707 25.453 75.629 25.656 75.547 cv
25.859 75.469 26.082 75.398 26.328 75.344 cv
26.57 75.289 26.828 75.262 27.102 75.262 cv
27.527 75.262 27.902 75.324 28.227 75.445 cv
28.547 75.566 28.813 75.73 29.027 75.941 cv
29.238 76.152 29.398 76.398 29.504 76.672 cv
29.609 76.953 29.664 77.25 29.664 77.562 cv
29.664 77.852 29.637 78.133 29.586 78.41 cv
29.535 78.695 29.43 79 29.27 79.324 cv
29.105 79.652 28.871 80.016 28.566 80.414 cv
28.258 80.816 27.852 81.277 27.348 81.793 cv
25.941 83.262 li
29.801 83.262 li
29.832 83.266 29.867 83.277 29.906 83.293 cv
29.938 83.316 29.969 83.348 29.996 83.387 cv
30.02 83.43 30.039 83.48 30.051 83.539 cv
30.063 83.605 30.066 83.676 30.07 83.754 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.191 83.754 mo
37.188 83.84 37.184 83.914 37.172 83.977 cv
37.16 84.043 37.145 84.098 37.125 84.137 cv
37.102 84.184 37.074 84.215 37.043 84.23 cv
37.008 84.254 36.969 84.262 36.93 84.262 cv
32.027 84.262 li
31.965 84.262 31.906 84.254 31.859 84.238 cv
31.809 84.223 31.77 84.199 31.734 84.16 cv
31.699 84.129 31.672 84.074 31.66 84.004 cv
31.641 83.934 31.633 83.848 31.637 83.746 cv
31.633 83.656 31.637 83.578 31.645 83.508 cv
31.648 83.441 31.664 83.383 31.691 83.328 cv
31.715 83.277 31.746 83.223 31.781 83.168 cv
31.816 83.117 31.859 83.062 31.918 83 cv
33.691 81.176 li
34.102 80.758 34.43 80.383 34.68 80.047 cv
34.926 79.719 35.117 79.414 35.25 79.137 cv
35.383 78.863 35.469 78.613 35.516 78.387 cv
35.555 78.164 35.578 77.953 35.578 77.758 cv
35.578 77.562 35.543 77.379 35.477 77.199 cv
35.41 77.027 35.316 76.871 35.191 76.734 cv
35.066 76.605 34.91 76.5 34.723 76.418 cv
34.535 76.344 34.316 76.305 34.07 76.301 cv
33.781 76.305 33.523 76.344 33.297 76.418 cv
33.066 76.5 32.867 76.586 32.695 76.672 cv
32.523 76.766 32.379 76.848 32.262 76.926 cv
32.145 77.004 32.059 77.043 32.008 77.043 cv
31.973 77.043 31.941 77.035 31.918 77.016 cv
31.887 77 31.867 76.969 31.852 76.926 cv
31.836 76.887 31.82 76.832 31.813 76.762 cv
31.801 76.695 31.797 76.613 31.801 76.516 cv
31.797 76.449 31.801 76.391 31.809 76.34 cv
31.813 76.289 31.82 76.246 31.832 76.207 cv
31.84 76.172 31.855 76.137 31.875 76.105 cv
31.895 76.074 31.93 76.035 31.988 75.984 cv
32.039 75.937 32.133 75.871 32.27 75.789 cv
32.402 75.707 32.574 75.629 32.777 75.547 cv
32.98 75.469 33.203 75.398 33.449 75.344 cv
33.691 75.289 33.949 75.262 34.223 75.262 cv
34.648 75.262 35.023 75.324 35.348 75.445 cv
35.668 75.566 35.934 75.73 36.148 75.941 cv
36.359 76.152 36.52 76.398 36.625 76.672 cv
36.73 76.953 36.785 77.25 36.785 77.562 cv
36.785 77.852 36.758 78.133 36.707 78.41 cv
36.656 78.695 36.551 79 36.391 79.324 cv
36.227 79.652 35.992 80.016 35.688 80.414 cv
35.379 80.816 34.973 81.277 34.469 81.793 cv
33.063 83.262 li
36.922 83.262 li
36.953 83.266 36.988 83.277 37.027 83.293 cv
37.059 83.316 37.09 83.348 37.117 83.387 cv
37.141 83.43 37.16 83.48 37.172 83.539 cv
37.184 83.605 37.188 83.676 37.191 83.754 cv
cp
f
40.41 83.516 mo
40.41 83.844 40.355 84.059 40.25 84.164 cv
40.141 84.27 39.945 84.32 39.664 84.324 cv
39.387 84.32 39.195 84.27 39.094 84.168 cv
38.984 84.062 38.934 83.852 38.938 83.535 cv
38.934 83.211 38.988 82.996 39.098 82.887 cv
39.203 82.781 39.398 82.727 39.684 82.727 cv
39.957 82.727 40.145 82.781 40.254 82.887 cv
40.355 82.992 40.41 83.203 40.41 83.516 cv
cp
f
47.777 81.41 mo
47.777 81.887 47.695 82.309 47.535 82.68 cv
47.375 83.051 47.148 83.363 46.859 83.617 cv
46.563 83.871 46.215 84.066 45.813 84.195 cv
45.406 84.328 44.957 84.391 44.465 84.391 cv
44.188 84.391 43.926 84.371 43.684 84.332 cv
43.434 84.293 43.215 84.246 43.027 84.191 cv
42.832 84.137 42.676 84.082 42.551 84.023 cv
42.426 83.973 42.348 83.93 42.316 83.895 cv
42.281 83.863 42.258 83.832 42.246 83.805 cv
42.23 83.777 42.215 83.746 42.207 83.703 cv
42.191 83.668 42.184 83.617 42.184 83.555 cv
42.176 83.496 42.176 83.426 42.176 83.344 cv
42.176 83.27 42.18 83.199 42.188 83.137 cv
42.195 83.074 42.207 83.023 42.227 82.984 cv
42.242 82.945 42.262 82.918 42.289 82.898 cv
42.313 82.883 42.344 82.875 42.375 82.871 cv
42.422 82.875 42.492 82.902 42.586 82.957 cv
42.68 83.016 42.809 83.078 42.973 83.145 cv
43.137 83.211 43.336 83.273 43.578 83.332 cv
43.813 83.391 44.098 83.418 44.434 83.418 cv
44.734 83.418 45.016 83.383 45.273 83.309 cv
45.527 83.238 45.75 83.125 45.938 82.969 cv
46.121 82.816 46.266 82.621 46.371 82.383 cv
46.477 82.148 46.527 81.859 46.531 81.52 cv
46.527 81.238 46.484 80.988 46.395 80.77 cv
46.305 80.551 46.168 80.371 45.984 80.227 cv
45.797 80.086 45.563 79.98 45.281 79.906 cv
44.996 79.836 44.656 79.797 44.27 79.797 cv
43.984 79.797 43.746 79.812 43.547 79.84 cv
43.344 79.871 43.156 79.887 42.984 79.883 cv
42.855 79.887 42.762 79.855 42.711 79.793 cv
42.652 79.734 42.625 79.621 42.629 79.449 cv
42.629 75.836 li
42.625 75.687 42.66 75.578 42.734 75.5 cv
42.801 75.43 42.902 75.391 43.039 75.391 cv
46.969 75.391 li
47.004 75.391 47.039 75.402 47.074 75.422 cv
47.105 75.445 47.133 75.477 47.16 75.516 cv
47.18 75.559 47.195 75.609 47.211 75.672 cv
47.219 75.738 47.227 75.816 47.23 75.898 cv
47.227 76.066 47.203 76.191 47.164 76.281 cv
47.117 76.375 47.059 76.422 46.98 76.418 cv
43.809 76.418 li
43.809 78.906 li
43.961 78.887 44.117 78.875 44.281 78.867 cv
44.438 78.863 44.625 78.859 44.84 78.859 cv
45.324 78.859 45.75 78.922 46.117 79.043 cv
46.48 79.164 46.785 79.336 47.035 79.555 cv
47.277 79.781 47.465 80.047 47.59 80.359 cv
47.715 80.676 47.777 81.027 47.777 81.41 cv
cp
f
23.734 23.121 mo
51.718 23.121 li
51.718 40.2111 li
23.734 40.2111 li
cp
0 0 0 0 cmyk
ef
30.07 35.953 mo
30.066 36.039 30.063 36.113 30.051 36.176 cv
30.039 36.242 30.023 36.297 30.004 36.336 cv
29.98 36.383 29.953 36.414 29.922 36.43 cv
29.887 36.453 29.848 36.461 29.809 36.461 cv
24.906 36.461 li
24.844 36.461 24.785 36.453 24.738 36.437 cv
24.688 36.422 24.648 36.398 24.613 36.359 cv
24.578 36.328 24.551 36.273 24.539 36.203 cv
24.52 36.133 24.512 36.047 24.516 35.945 cv
24.512 35.855 24.516 35.777 24.523 35.707 cv
24.527 35.641 24.543 35.582 24.57 35.527 cv
24.594 35.477 24.625 35.422 24.66 35.367 cv
24.695 35.316 24.738 35.262 24.797 35.199 cv
26.57 33.375 li
26.98 32.957 27.309 32.582 27.559 32.246 cv
27.805 31.918 27.996 31.613 28.129 31.336 cv
28.262 31.062 28.348 30.812 28.395 30.586 cv
28.434 30.363 28.457 30.152 28.457 29.957 cv
28.457 29.762 28.422 29.578 28.355 29.398 cv
28.289 29.227 28.195 29.07 28.07 28.934 cv
27.945 28.805 27.789 28.699 27.602 28.617 cv
27.414 28.543 27.195 28.504 26.949 28.5 cv
26.66 28.504 26.402 28.543 26.176 28.617 cv
25.945 28.699 25.746 28.785 25.574 28.871 cv
25.402 28.965 25.258 29.047 25.141 29.125 cv
25.023 29.203 24.938 29.242 24.887 29.242 cv
24.852 29.242 24.82 29.234 24.797 29.215 cv
24.766 29.199 24.746 29.168 24.73 29.125 cv
24.715 29.086 24.699 29.031 24.691 28.961 cv
24.68 28.895 24.676 28.812 24.68 28.715 cv
24.676 28.648 24.68 28.59 24.688 28.539 cv
24.691 28.488 24.699 28.445 24.711 28.406 cv
24.719 28.371 24.734 28.336 24.754 28.305 cv
24.773 28.273 24.809 28.234 24.867 28.184 cv
24.918 28.137 25.012 28.07 25.148 27.988 cv
25.281 27.906 25.453 27.828 25.656 27.746 cv
25.859 27.668 26.082 27.598 26.328 27.543 cv
26.57 27.488 26.828 27.461 27.102 27.461 cv
27.527 27.461 27.902 27.523 28.227 27.645 cv
28.547 27.766 28.813 27.93 29.027 28.141 cv
29.238 28.352 29.398 28.598 29.504 28.871 cv
29.609 29.152 29.664 29.449 29.664 29.762 cv
29.664 30.051 29.637 30.332 29.586 30.609 cv
29.535 30.895 29.43 31.199 29.27 31.523 cv
29.105 31.852 28.871 32.215 28.566 32.613 cv
28.258 33.016 27.852 33.477 27.348 33.992 cv
25.941 35.461 li
29.801 35.461 li
29.832 35.465 29.867 35.477 29.906 35.492 cv
29.938 35.516 29.969 35.547 29.996 35.586 cv
30.02 35.629 30.039 35.68 30.051 35.738 cv
30.063 35.805 30.066 35.875 30.07 35.953 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
37.148 33.609 mo
37.148 34.086 37.066 34.508 36.906 34.879 cv
36.746 35.25 36.52 35.562 36.23 35.816 cv
35.934 36.07 35.586 36.266 35.184 36.395 cv
34.777 36.527 34.328 36.59 33.836 36.59 cv
33.559 36.59 33.297 36.57 33.055 36.531 cv
32.805 36.492 32.586 36.445 32.398 36.391 cv
32.203 36.336 32.047 36.281 31.922 36.223 cv
31.797 36.172 31.719 36.129 31.688 36.094 cv
31.652 36.062 31.629 36.031 31.617 36.004 cv
31.602 35.977 31.586 35.945 31.578 35.902 cv
31.563 35.867 31.555 35.816 31.555 35.754 cv
31.547 35.695 31.547 35.625 31.547 35.543 cv
31.547 35.469 31.551 35.398 31.559 35.336 cv
31.566 35.273 31.578 35.223 31.598 35.184 cv
31.613 35.145 31.633 35.117 31.66 35.098 cv
31.684 35.082 31.715 35.074 31.746 35.07 cv
31.793 35.074 31.863 35.102 31.957 35.156 cv
32.051 35.215 32.18 35.277 32.344 35.344 cv
32.508 35.41 32.707 35.473 32.949 35.531 cv
33.184 35.59 33.469 35.617 33.805 35.617 cv
34.105 35.617 34.387 35.582 34.645 35.508 cv
34.898 35.437 35.121 35.324 35.309 35.168 cv
35.492 35.016 35.637 34.82 35.742 34.582 cv
35.848 34.348 35.898 34.059 35.902 33.719 cv
35.898 33.437 35.855 33.187 35.766 32.969 cv
35.676 32.75 35.539 32.57 35.355 32.426 cv
35.168 32.285 34.934 32.18 34.652 32.105 cv
34.367 32.035 34.027 31.996 33.641 31.996 cv
33.355 31.996 33.117 32.012 32.918 32.039 cv
32.715 32.07 32.527 32.086 32.355 32.082 cv
32.227 32.086 32.133 32.055 32.082 31.992 cv
32.023 31.934 31.996 31.82 32 31.648 cv
32 28.035 li
31.996 27.887 32.031 27.777 32.105 27.699 cv
32.172 27.629 32.273 27.59 32.41 27.59 cv
36.34 27.59 li
36.375 27.59 36.41 27.602 36.445 27.621 cv
36.477 27.645 36.504 27.676 36.531 27.715 cv
36.551 27.758 36.566 27.809 36.582 27.871 cv
36.59 27.937 36.598 28.016 36.602 28.098 cv
36.598 28.266 36.574 28.391 36.535 28.48 cv
36.488 28.574 36.43 28.621 36.352 28.617 cv
33.18 28.617 li
33.18 31.105 li
33.332 31.086 33.488 31.074 33.652 31.066 cv
33.809 31.062 33.996 31.059 34.211 31.059 cv
34.695 31.059 35.121 31.121 35.488 31.242 cv
35.852 31.363 36.156 31.535 36.406 31.754 cv
36.648 31.98 36.836 32.246 36.961 32.559 cv
37.086 32.875 37.148 33.227 37.148 33.609 cv
cp
f
40.41 35.715 mo
40.41 36.043 40.355 36.258 40.25 36.363 cv
40.141 36.469 39.945 36.52 39.664 36.523 cv
39.387 36.52 39.195 36.469 39.094 36.367 cv
38.984 36.262 38.934 36.051 38.938 35.734 cv
38.934 35.41 38.988 35.195 39.098 35.086 cv
39.203 34.98 39.398 34.926 39.684 34.926 cv
39.957 34.926 40.145 34.98 40.254 35.086 cv
40.355 35.191 40.41 35.402 40.41 35.715 cv
cp
f
48.113 32.004 mo
48.109 32.687 48.059 33.309 47.953 33.871 cv
47.844 34.434 47.664 34.918 47.418 35.32 cv
47.164 35.727 46.836 36.039 46.438 36.258 cv
46.031 36.48 45.539 36.59 44.953 36.59 cv
44.395 36.59 43.922 36.492 43.543 36.293 cv
43.16 36.098 42.855 35.805 42.621 35.418 cv
42.387 35.031 42.219 34.559 42.125 33.992 cv
42.023 33.43 41.977 32.781 41.977 32.047 cv
41.977 31.375 42.031 30.754 42.141 30.187 cv
42.25 29.625 42.426 29.141 42.676 28.734 cv
42.918 28.332 43.242 28.02 43.648 27.793 cv
44.047 27.574 44.543 27.461 45.133 27.461 cv
45.691 27.461 46.164 27.562 46.547 27.758 cv
46.93 27.961 47.234 28.254 47.469 28.637 cv
47.699 29.027 47.867 29.5 47.965 30.062 cv
48.063 30.625 48.109 31.273 48.113 32.004 cv
cp
46.906 32.086 mo
46.902 31.645 46.887 31.246 46.859 30.895 cv
46.824 30.543 46.777 30.234 46.719 29.965 cv
46.652 29.695 46.574 29.465 46.477 29.27 cv
46.379 29.078 46.262 28.918 46.125 28.789 cv
45.984 28.664 45.824 28.57 45.652 28.512 cv
45.473 28.457 45.277 28.43 45.063 28.426 cv
44.672 28.43 44.355 28.52 44.117 28.703 cv
43.871 28.887 43.68 29.141 43.543 29.457 cv
43.402 29.777 43.309 30.148 43.258 30.578 cv
43.207 31.008 43.184 31.473 43.184 31.965 cv
43.184 32.629 43.215 33.191 43.285 33.652 cv
43.352 34.121 43.461 34.5 43.613 34.789 cv
43.758 35.086 43.949 35.297 44.18 35.426 cv
44.41 35.562 44.691 35.629 45.023 35.625 cv
45.277 35.629 45.5 35.59 45.695 35.504 cv
45.887 35.426 46.055 35.305 46.195 35.148 cv
46.336 34.996 46.449 34.812 46.543 34.598 cv
46.629 34.383 46.703 34.145 46.762 33.883 cv
46.813 33.625 46.852 33.344 46.875 33.039 cv
46.895 32.734 46.902 32.418 46.906 32.086 cv
cp
f
67.535 532.336 mo
67.531 532.426 67.523 532.496 67.512 532.555 cv
67.496 532.617 67.477 532.668 67.457 532.699 cv
67.434 532.738 67.41 532.762 67.379 532.777 cv
67.348 532.793 67.316 532.801 67.289 532.801 cv
62.652 532.801 li
62.617 532.801 62.59 532.793 62.563 532.777 cv
62.535 532.762 62.508 532.738 62.484 532.699 cv
62.457 532.668 62.438 532.617 62.426 532.555 cv
62.41 532.496 62.402 532.426 62.406 532.336 cv
62.402 532.258 62.41 532.184 62.426 532.121 cv
62.438 532.062 62.453 532.016 62.477 531.977 cv
62.492 531.941 62.52 531.91 62.551 531.887 cv
62.582 531.867 62.613 531.859 62.652 531.855 cv
64.504 531.855 li
64.504 525.109 li
62.789 526.129 li
62.699 526.18 62.629 526.207 62.582 526.215 cv
62.527 526.223 62.484 526.215 62.453 526.184 cv
62.418 526.156 62.398 526.105 62.387 526.035 cv
62.375 525.969 62.367 525.883 62.371 525.773 cv
62.367 525.699 62.371 525.633 62.383 525.574 cv
62.387 525.523 62.398 525.477 62.414 525.437 cv
62.426 525.402 62.445 525.371 62.469 525.344 cv
62.492 525.316 62.523 525.289 62.57 525.262 cv
64.613 523.949 li
64.629 523.937 64.648 523.926 64.68 523.918 cv
64.703 523.91 64.738 523.902 64.785 523.891 cv
64.824 523.883 64.875 523.875 64.93 523.871 cv
64.984 523.871 65.051 523.871 65.137 523.867 cv
65.242 523.871 65.336 523.875 65.41 523.883 cv
65.48 523.891 65.535 523.906 65.582 523.922 cv
65.621 523.941 65.648 523.961 65.664 523.984 cv
65.672 524.012 65.68 524.035 65.684 524.059 cv
65.684 531.855 li
67.289 531.855 li
67.324 531.859 67.359 531.867 67.391 531.887 cv
67.422 531.91 67.445 531.941 67.469 531.977 cv
67.484 532.016 67.5 532.062 67.516 532.121 cv
67.523 532.184 67.531 532.258 67.535 532.336 cv
cp
f
143.426 532.293 mo
143.422 532.379 143.418 532.453 143.406 532.516 cv
143.395 532.582 143.379 532.637 143.359 532.676 cv
143.336 532.723 143.309 532.754 143.277 532.77 cv
143.242 532.793 143.203 532.801 143.164 532.801 cv
138.262 532.801 li
138.199 532.801 138.141 532.793 138.094 532.777 cv
138.043 532.762 138.004 532.738 137.969 532.699 cv
137.934 532.668 137.906 532.613 137.895 532.543 cv
137.875 532.473 137.867 532.387 137.871 532.285 cv
137.867 532.195 137.871 532.117 137.879 532.047 cv
137.883 531.98 137.898 531.922 137.926 531.867 cv
137.949 531.816 137.98 531.762 138.016 531.707 cv
138.051 531.656 138.094 531.602 138.152 531.539 cv
139.926 529.715 li
140.336 529.297 140.664 528.922 140.914 528.586 cv
141.16 528.258 141.352 527.953 141.484 527.676 cv
141.617 527.402 141.703 527.152 141.75 526.926 cv
141.789 526.703 141.813 526.492 141.813 526.297 cv
141.813 526.102 141.777 525.918 141.711 525.738 cv
141.645 525.566 141.551 525.41 141.426 525.273 cv
141.301 525.145 141.145 525.039 140.957 524.957 cv
140.77 524.883 140.551 524.844 140.305 524.84 cv
140.016 524.844 139.758 524.883 139.531 524.957 cv
139.301 525.039 139.102 525.125 138.93 525.211 cv
138.758 525.305 138.613 525.387 138.496 525.465 cv
138.379 525.543 138.293 525.582 138.242 525.582 cv
138.207 525.582 138.176 525.574 138.152 525.555 cv
138.121 525.539 138.102 525.508 138.086 525.465 cv
138.07 525.426 138.055 525.371 138.047 525.301 cv
138.035 525.234 138.031 525.152 138.035 525.055 cv
138.031 524.988 138.035 524.93 138.043 524.879 cv
138.047 524.828 138.055 524.785 138.066 524.746 cv
138.074 524.711 138.09 524.676 138.109 524.645 cv
138.129 524.613 138.164 524.574 138.223 524.523 cv
138.273 524.477 138.367 524.41 138.504 524.328 cv
138.637 524.246 138.809 524.168 139.012 524.086 cv
139.215 524.008 139.438 523.937 139.684 523.883 cv
139.926 523.828 140.184 523.801 140.457 523.801 cv
140.883 523.801 141.258 523.863 141.582 523.984 cv
141.902 524.105 142.168 524.27 142.383 524.48 cv
142.594 524.691 142.754 524.937 142.859 525.211 cv
142.965 525.492 143.02 525.789 143.02 526.102 cv
143.02 526.391 142.992 526.672 142.941 526.949 cv
142.891 527.234 142.785 527.539 142.625 527.863 cv
142.461 528.191 142.227 528.555 141.922 528.953 cv
141.613 529.355 141.207 529.816 140.703 530.332 cv
139.297 531.801 li
143.156 531.801 li
143.188 531.805 143.223 531.816 143.262 531.832 cv
143.293 531.855 143.324 531.887 143.352 531.926 cv
143.375 531.969 143.395 532.02 143.406 532.078 cv
143.418 532.145 143.422 532.215 143.426 532.293 cv
cp
f
219.711 530.277 mo
219.707 530.43 219.684 530.551 219.641 530.637 cv
219.594 530.727 219.531 530.77 219.449 530.766 cv
218.449 530.766 li
218.449 532.629 li
218.449 532.668 218.438 532.699 218.422 532.723 cv
218.398 532.75 218.367 532.77 218.324 532.789 cv
218.273 532.805 218.211 532.816 218.141 532.828 cv
218.063 532.836 217.969 532.84 217.852 532.844 cv
217.734 532.84 217.637 532.836 217.566 532.828 cv
217.488 532.816 217.43 532.805 217.387 532.789 cv
217.34 532.77 217.309 532.75 217.293 532.723 cv
217.273 532.699 217.266 532.668 217.27 532.629 cv
217.27 530.766 li
213.641 530.766 li
213.582 530.77 213.539 530.762 213.504 530.746 cv
213.469 530.734 213.434 530.707 213.406 530.668 cv
213.375 530.633 213.355 530.582 213.344 530.512 cv
213.332 530.445 213.328 530.355 213.328 530.242 cv
213.328 530.16 213.328 530.082 213.336 530.012 cv
213.336 529.941 213.348 529.879 213.363 529.824 cv
213.375 529.77 213.391 529.715 213.418 529.66 cv
213.438 529.605 213.465 529.551 213.5 529.488 cv
216.66 524.102 li
216.68 524.066 216.715 524.035 216.762 524.008 cv
216.805 523.98 216.859 523.957 216.934 523.937 cv
217 523.922 217.086 523.91 217.191 523.898 cv
217.293 523.895 217.414 523.891 217.555 523.887 cv
217.703 523.891 217.84 523.895 217.957 523.906 cv
218.07 523.918 218.16 523.934 218.234 523.949 cv
218.301 523.969 218.355 523.992 218.395 524.023 cv
218.43 524.055 218.449 524.09 218.449 524.129 cv
218.449 529.793 li
219.449 529.793 li
219.523 529.797 219.586 529.836 219.637 529.914 cv
219.684 529.996 219.707 530.117 219.711 530.277 cv
cp
217.27 524.926 mo
217.258 524.926 li
214.406 529.793 li
217.27 529.793 li
cp
f
295.453 529.93 mo
295.453 530.32 295.391 530.699 295.273 531.059 cv
295.148 531.426 294.965 531.742 294.723 532.016 cv
294.473 532.293 294.16 532.516 293.785 532.68 cv
293.402 532.848 292.957 532.93 292.441 532.93 cv
292.07 532.93 291.742 532.887 291.461 532.793 cv
291.176 532.707 290.93 532.574 290.719 532.402 cv
290.508 532.234 290.332 532.027 290.195 531.781 cv
290.055 531.535 289.941 531.254 289.859 530.937 cv
289.773 530.625 289.715 530.281 289.68 529.902 cv
289.641 529.531 289.621 529.129 289.625 528.695 cv
289.621 528.316 289.641 527.934 289.684 527.543 cv
289.723 527.16 289.797 526.785 289.902 526.418 cv
290.008 526.059 290.152 525.719 290.332 525.402 cv
290.512 525.086 290.738 524.809 291.012 524.574 cv
291.285 524.34 291.609 524.152 291.988 524.012 cv
292.367 523.875 292.809 523.809 293.313 523.805 cv
293.48 523.809 293.652 523.816 293.824 523.836 cv
293.996 523.859 294.156 523.891 294.305 523.922 cv
294.453 523.961 294.574 523.996 294.676 524.035 cv
294.773 524.074 294.84 524.109 294.875 524.133 cv
294.902 524.16 294.926 524.187 294.945 524.215 cv
294.961 524.246 294.977 524.277 294.984 524.312 cv
294.992 524.348 294.996 524.387 295.004 524.43 cv
295.004 524.473 295.008 524.527 295.012 524.59 cv
295.008 524.676 295.008 524.746 295.008 524.801 cv
295.004 524.863 294.992 524.91 294.98 524.945 cv
294.961 524.984 294.941 525.012 294.918 525.027 cv
294.891 525.047 294.859 525.055 294.82 525.055 cv
294.77 525.055 294.699 525.039 294.613 525.008 cv
294.523 524.977 294.418 524.941 294.297 524.898 cv
294.172 524.863 294.023 524.828 293.848 524.793 cv
293.672 524.766 293.469 524.75 293.238 524.746 cv
292.809 524.75 292.441 524.836 292.137 525.008 cv
291.832 525.18 291.582 525.414 291.387 525.707 cv
291.191 526 291.047 526.34 290.957 526.723 cv
290.859 527.113 290.805 527.516 290.797 527.934 cv
290.914 527.867 291.051 527.801 291.199 527.73 cv
291.348 527.664 291.508 527.602 291.684 527.543 cv
291.859 527.492 292.047 527.445 292.242 527.41 cv
292.438 527.379 292.648 527.363 292.875 527.359 cv
293.352 527.363 293.754 527.43 294.086 527.555 cv
294.414 527.687 294.68 527.867 294.887 528.098 cv
295.086 528.328 295.23 528.598 295.32 528.91 cv
295.406 529.223 295.453 529.562 295.453 529.93 cv
cp
294.258 530.039 mo
294.258 529.777 294.23 529.535 294.18 529.316 cv
294.125 529.102 294.035 528.918 293.914 528.762 cv
293.789 528.613 293.625 528.496 293.422 528.414 cv
293.211 528.332 292.957 528.289 292.66 528.289 cv
292.488 528.289 292.32 528.305 292.152 528.336 cv
291.98 528.367 291.816 528.41 291.66 528.457 cv
291.5 528.512 291.352 528.574 291.211 528.645 cv
291.066 528.719 290.934 528.793 290.816 528.871 cv
290.813 529.465 290.852 529.961 290.93 530.355 cv
291.004 530.754 291.113 531.07 291.258 531.309 cv
291.402 531.551 291.582 531.723 291.797 531.824 cv
292.012 531.93 292.262 531.98 292.551 531.977 cv
292.84 531.98 293.094 531.926 293.309 531.812 cv
293.523 531.707 293.699 531.559 293.844 531.371 cv
293.984 531.187 294.09 530.98 294.156 530.75 cv
294.223 530.52 294.258 530.285 294.258 530.039 cv
cp
f
371.34 530.523 mo
371.34 530.91 371.27 531.254 371.133 531.551 cv
370.996 531.855 370.801 532.105 370.543 532.309 cv
370.285 532.516 369.965 532.672 369.586 532.773 cv
369.203 532.879 368.77 532.93 368.285 532.93 cv
367.824 532.93 367.414 532.883 367.055 532.789 cv
366.691 532.695 366.387 532.555 366.137 532.363 cv
365.887 532.18 365.695 531.949 365.563 531.672 cv
365.43 531.398 365.363 531.086 365.363 530.73 cv
365.363 530.457 365.406 530.199 365.5 529.965 cv
365.586 529.73 365.719 529.516 365.895 529.32 cv
366.063 529.125 366.273 528.941 366.527 528.766 cv
366.777 528.598 367.063 528.434 367.379 528.277 cv
367.105 528.137 366.863 527.988 366.652 527.828 cv
366.441 527.672 366.262 527.5 366.117 527.312 cv
365.969 527.129 365.859 526.934 365.785 526.723 cv
365.707 526.516 365.668 526.285 365.672 526.035 cv
365.668 525.727 365.723 525.434 365.84 525.16 cv
365.949 524.891 366.121 524.656 366.348 524.453 cv
366.574 524.254 366.859 524.094 367.211 523.977 cv
367.555 523.859 367.965 523.801 368.434 523.801 cv
368.879 523.801 369.266 523.855 369.594 523.961 cv
369.922 524.07 370.191 524.215 370.402 524.398 cv
370.613 524.586 370.77 524.805 370.875 525.055 cv
370.973 525.305 371.023 525.574 371.027 525.863 cv
371.023 526.098 370.984 526.324 370.914 526.535 cv
370.836 526.754 370.727 526.957 370.578 527.145 cv
370.43 527.34 370.25 527.52 370.039 527.684 cv
369.828 527.855 369.586 528.012 369.313 528.152 cv
369.633 528.316 369.918 528.48 370.176 528.648 cv
370.426 528.816 370.641 528.996 370.816 529.191 cv
370.984 529.387 371.113 529.594 371.207 529.809 cv
371.293 530.027 371.34 530.266 371.34 530.523 cv
cp
369.859 525.973 mo
369.855 525.785 369.824 525.609 369.758 525.453 cv
369.691 525.297 369.594 525.164 369.469 525.055 cv
369.34 524.945 369.18 524.863 368.992 524.805 cv
368.797 524.75 368.582 524.723 368.344 524.719 cv
367.848 524.723 367.473 524.832 367.223 525.055 cv
366.965 525.281 366.84 525.59 366.844 525.973 cv
366.84 526.152 366.871 526.316 366.934 526.469 cv
366.996 526.625 367.09 526.77 367.223 526.906 cv
367.348 527.043 367.512 527.176 367.715 527.305 cv
367.91 527.437 368.148 527.574 368.426 527.715 cv
368.887 527.48 369.242 527.219 369.488 526.926 cv
369.734 526.641 369.855 526.324 369.859 525.973 cv
cp
370.148 530.648 mo
370.145 530.441 370.105 530.25 370.031 530.078 cv
369.949 529.91 369.832 529.75 369.676 529.598 cv
369.52 529.449 369.32 529.305 369.086 529.164 cv
368.848 529.027 368.578 528.883 368.27 528.73 cv
367.98 528.875 367.727 529.016 367.512 529.156 cv
367.293 529.297 367.113 529.445 366.977 529.594 cv
366.836 529.75 366.73 529.906 366.66 530.07 cv
366.586 530.238 366.551 530.422 366.555 530.621 cv
366.551 531.066 366.703 531.41 367.012 531.648 cv
367.313 531.895 367.766 532.016 368.371 532.012 cv
368.953 532.016 369.398 531.895 369.699 531.645 cv
369.996 531.402 370.145 531.07 370.148 530.648 cv
cp
f
443.516 532.336 mo
443.512 532.426 443.504 532.496 443.492 532.555 cv
443.477 532.617 443.457 532.668 443.438 532.699 cv
443.414 532.738 443.391 532.762 443.359 532.777 cv
443.328 532.793 443.297 532.801 443.27 532.801 cv
438.633 532.801 li
438.598 532.801 438.57 532.793 438.543 532.777 cv
438.516 532.762 438.488 532.738 438.465 532.699 cv
438.438 532.668 438.418 532.617 438.406 532.555 cv
438.391 532.496 438.383 532.426 438.387 532.336 cv
438.383 532.258 438.391 532.184 438.406 532.121 cv
438.418 532.062 438.434 532.016 438.457 531.977 cv
438.473 531.941 438.5 531.91 438.531 531.887 cv
438.563 531.867 438.594 531.859 438.633 531.855 cv
440.484 531.855 li
440.484 525.109 li
438.77 526.129 li
438.68 526.18 438.609 526.207 438.563 526.215 cv
438.508 526.223 438.465 526.215 438.434 526.184 cv
438.398 526.156 438.379 526.105 438.367 526.035 cv
438.355 525.969 438.348 525.883 438.352 525.773 cv
438.348 525.699 438.352 525.633 438.363 525.574 cv
438.367 525.523 438.379 525.477 438.395 525.437 cv
438.406 525.402 438.426 525.371 438.449 525.344 cv
438.473 525.316 438.504 525.289 438.551 525.262 cv
440.594 523.949 li
440.609 523.937 440.629 523.926 440.66 523.918 cv
440.684 523.91 440.719 523.902 440.766 523.891 cv
440.805 523.883 440.855 523.875 440.91 523.871 cv
440.965 523.871 441.031 523.871 441.117 523.867 cv
441.223 523.871 441.316 523.875 441.391 523.883 cv
441.461 523.891 441.516 523.906 441.563 523.922 cv
441.602 523.941 441.629 523.961 441.645 523.984 cv
441.652 524.012 441.66 524.035 441.664 524.059 cv
441.664 531.855 li
443.27 531.855 li
443.305 531.859 443.34 531.867 443.371 531.887 cv
443.402 531.91 443.426 531.941 443.449 531.977 cv
443.465 532.016 443.48 532.062 443.496 532.121 cv
443.504 532.184 443.512 532.258 443.516 532.336 cv
cp
f
450.867 528.344 mo
450.863 529.027 450.813 529.648 450.707 530.211 cv
450.598 530.773 450.418 531.258 450.172 531.66 cv
449.918 532.066 449.59 532.379 449.191 532.598 cv
448.785 532.82 448.293 532.93 447.707 532.93 cv
447.148 532.93 446.676 532.832 446.297 532.633 cv
445.914 532.437 445.609 532.145 445.375 531.758 cv
445.141 531.371 444.973 530.898 444.879 530.332 cv
444.777 529.77 444.73 529.121 444.73 528.387 cv
444.73 527.715 444.785 527.094 444.895 526.527 cv
445.004 525.965 445.18 525.48 445.43 525.074 cv
445.672 524.672 445.996 524.359 446.402 524.133 cv
446.801 523.914 447.297 523.801 447.887 523.801 cv
448.445 523.801 448.918 523.902 449.301 524.098 cv
449.684 524.301 449.988 524.594 450.223 524.977 cv
450.453 525.367 450.621 525.84 450.719 526.402 cv
450.816 526.965 450.863 527.613 450.867 528.344 cv
cp
449.66 528.426 mo
449.656 527.984 449.641 527.586 449.613 527.234 cv
449.578 526.883 449.531 526.574 449.473 526.305 cv
449.406 526.035 449.328 525.805 449.23 525.609 cv
449.133 525.418 449.016 525.258 448.879 525.129 cv
448.738 525.004 448.578 524.91 448.406 524.852 cv
448.227 524.797 448.031 524.77 447.816 524.766 cv
447.426 524.77 447.109 524.859 446.871 525.043 cv
446.625 525.227 446.434 525.48 446.297 525.797 cv
446.156 526.117 446.063 526.488 446.012 526.918 cv
445.961 527.348 445.938 527.812 445.938 528.305 cv
445.938 528.969 445.969 529.531 446.039 529.992 cv
446.105 530.461 446.215 530.84 446.367 531.129 cv
446.512 531.426 446.703 531.637 446.934 531.766 cv
447.164 531.902 447.445 531.969 447.777 531.965 cv
448.031 531.969 448.254 531.93 448.449 531.844 cv
448.641 531.766 448.809 531.645 448.949 531.488 cv
449.09 531.336 449.203 531.152 449.297 530.937 cv
449.383 530.723 449.457 530.484 449.516 530.223 cv
449.566 529.965 449.605 529.684 449.629 529.379 cv
449.648 529.074 449.656 528.758 449.66 528.426 cv
cp
f
519.426 532.336 mo
519.422 532.426 519.414 532.496 519.402 532.555 cv
519.387 532.617 519.367 532.668 519.348 532.699 cv
519.324 532.738 519.301 532.762 519.27 532.777 cv
519.238 532.793 519.207 532.801 519.18 532.801 cv
514.543 532.801 li
514.508 532.801 514.48 532.793 514.453 532.777 cv
514.426 532.762 514.398 532.738 514.375 532.699 cv
514.348 532.668 514.328 532.617 514.316 532.555 cv
514.301 532.496 514.293 532.426 514.297 532.336 cv
514.293 532.258 514.301 532.184 514.316 532.121 cv
514.328 532.062 514.344 532.016 514.367 531.977 cv
514.383 531.941 514.41 531.91 514.441 531.887 cv
514.473 531.867 514.504 531.859 514.543 531.855 cv
516.395 531.855 li
516.395 525.109 li
514.68 526.129 li
514.59 526.18 514.52 526.207 514.473 526.215 cv
514.418 526.223 514.375 526.215 514.344 526.184 cv
514.309 526.156 514.289 526.105 514.277 526.035 cv
514.266 525.969 514.258 525.883 514.262 525.773 cv
514.258 525.699 514.262 525.633 514.273 525.574 cv
514.277 525.523 514.289 525.477 514.305 525.437 cv
514.316 525.402 514.336 525.371 514.359 525.344 cv
514.383 525.316 514.414 525.289 514.461 525.262 cv
516.504 523.949 li
516.52 523.937 516.539 523.926 516.57 523.918 cv
516.594 523.91 516.629 523.902 516.676 523.891 cv
516.715 523.883 516.766 523.875 516.82 523.871 cv
516.875 523.871 516.941 523.871 517.027 523.867 cv
517.133 523.871 517.227 523.875 517.301 523.883 cv
517.371 523.891 517.426 523.906 517.473 523.922 cv
517.512 523.941 517.539 523.961 517.555 523.984 cv
517.563 524.012 517.57 524.035 517.574 524.059 cv
517.574 531.855 li
519.18 531.855 li
519.215 531.859 519.25 531.867 519.281 531.887 cv
519.313 531.91 519.336 531.941 519.359 531.977 cv
519.375 532.016 519.391 532.062 519.406 532.121 cv
519.414 532.184 519.422 532.258 519.426 532.336 cv
cp
f
526.484 532.293 mo
526.48 532.379 526.477 532.453 526.465 532.516 cv
526.453 532.582 526.438 532.637 526.418 532.676 cv
526.395 532.723 526.367 532.754 526.336 532.77 cv
526.301 532.793 526.262 532.801 526.223 532.801 cv
521.32 532.801 li
521.258 532.801 521.199 532.793 521.152 532.777 cv
521.102 532.762 521.063 532.738 521.027 532.699 cv
520.992 532.668 520.965 532.613 520.953 532.543 cv
520.934 532.473 520.926 532.387 520.93 532.285 cv
520.926 532.195 520.93 532.117 520.938 532.047 cv
520.941 531.98 520.957 531.922 520.984 531.867 cv
521.008 531.816 521.039 531.762 521.074 531.707 cv
521.109 531.656 521.152 531.602 521.211 531.539 cv
522.984 529.715 li
523.395 529.297 523.723 528.922 523.973 528.586 cv
524.219 528.258 524.41 527.953 524.543 527.676 cv
524.676 527.402 524.762 527.152 524.809 526.926 cv
524.848 526.703 524.871 526.492 524.871 526.297 cv
524.871 526.102 524.836 525.918 524.77 525.738 cv
524.703 525.566 524.609 525.41 524.484 525.273 cv
524.359 525.145 524.203 525.039 524.016 524.957 cv
523.828 524.883 523.609 524.844 523.363 524.84 cv
523.074 524.844 522.816 524.883 522.59 524.957 cv
522.359 525.039 522.16 525.125 521.988 525.211 cv
521.816 525.305 521.672 525.387 521.555 525.465 cv
521.438 525.543 521.352 525.582 521.301 525.582 cv
521.266 525.582 521.234 525.574 521.211 525.555 cv
521.18 525.539 521.16 525.508 521.145 525.465 cv
521.129 525.426 521.113 525.371 521.105 525.301 cv
521.094 525.234 521.09 525.152 521.094 525.055 cv
521.09 524.988 521.094 524.93 521.102 524.879 cv
521.105 524.828 521.113 524.785 521.125 524.746 cv
521.133 524.711 521.148 524.676 521.168 524.645 cv
521.188 524.613 521.223 524.574 521.281 524.523 cv
521.332 524.477 521.426 524.41 521.563 524.328 cv
521.695 524.246 521.867 524.168 522.07 524.086 cv
522.273 524.008 522.496 523.937 522.742 523.883 cv
522.984 523.828 523.242 523.801 523.516 523.801 cv
523.941 523.801 524.316 523.863 524.641 523.984 cv
524.961 524.105 525.227 524.27 525.441 524.48 cv
525.652 524.691 525.813 524.937 525.918 525.211 cv
526.023 525.492 526.078 525.789 526.078 526.102 cv
526.078 526.391 526.051 526.672 526 526.949 cv
525.949 527.234 525.844 527.539 525.684 527.863 cv
525.52 528.191 525.285 528.555 524.98 528.953 cv
524.672 529.355 524.266 529.816 523.762 530.332 cv
522.355 531.801 li
526.215 531.801 li
526.246 531.805 526.281 531.816 526.32 531.832 cv
526.352 531.855 526.383 531.887 526.41 531.926 cv
526.434 531.969 526.453 532.02 526.465 532.078 cv
526.477 532.145 526.48 532.215 526.484 532.293 cv
cp
f
595.336 532.336 mo
595.332 532.426 595.324 532.496 595.313 532.555 cv
595.297 532.617 595.277 532.668 595.258 532.699 cv
595.234 532.738 595.211 532.762 595.18 532.777 cv
595.148 532.793 595.117 532.801 595.09 532.801 cv
590.453 532.801 li
590.418 532.801 590.391 532.793 590.363 532.777 cv
590.336 532.762 590.309 532.738 590.285 532.699 cv
590.258 532.668 590.238 532.617 590.227 532.555 cv
590.211 532.496 590.203 532.426 590.207 532.336 cv
590.203 532.258 590.211 532.184 590.227 532.121 cv
590.238 532.062 590.254 532.016 590.277 531.977 cv
590.293 531.941 590.32 531.91 590.352 531.887 cv
590.383 531.867 590.414 531.859 590.453 531.855 cv
592.305 531.855 li
592.305 525.109 li
590.59 526.129 li
590.5 526.18 590.43 526.207 590.383 526.215 cv
590.328 526.223 590.285 526.215 590.254 526.184 cv
590.219 526.156 590.199 526.105 590.188 526.035 cv
590.176 525.969 590.168 525.883 590.172 525.773 cv
590.168 525.699 590.172 525.633 590.184 525.574 cv
590.188 525.523 590.199 525.477 590.215 525.437 cv
590.227 525.402 590.246 525.371 590.27 525.344 cv
590.293 525.316 590.324 525.289 590.371 525.262 cv
592.414 523.949 li
592.43 523.937 592.449 523.926 592.48 523.918 cv
592.504 523.91 592.539 523.902 592.586 523.891 cv
592.625 523.883 592.676 523.875 592.73 523.871 cv
592.785 523.871 592.852 523.871 592.938 523.867 cv
593.043 523.871 593.137 523.875 593.211 523.883 cv
593.281 523.891 593.336 523.906 593.383 523.922 cv
593.422 523.941 593.449 523.961 593.465 523.984 cv
593.473 524.012 593.48 524.035 593.484 524.059 cv
593.484 531.855 li
595.09 531.855 li
595.125 531.859 595.16 531.867 595.191 531.887 cv
595.223 531.91 595.246 531.941 595.27 531.977 cv
595.285 532.016 595.301 532.062 595.316 532.121 cv
595.324 532.184 595.332 532.258 595.336 532.336 cv
cp
f
602.77 530.277 mo
602.766 530.43 602.742 530.551 602.699 530.637 cv
602.652 530.727 602.59 530.77 602.508 530.766 cv
601.508 530.766 li
601.508 532.629 li
601.508 532.668 601.496 532.699 601.48 532.723 cv
601.457 532.75 601.426 532.77 601.383 532.789 cv
601.332 532.805 601.27 532.816 601.199 532.828 cv
601.121 532.836 601.027 532.84 600.91 532.844 cv
600.793 532.84 600.695 532.836 600.625 532.828 cv
600.547 532.816 600.488 532.805 600.445 532.789 cv
600.398 532.77 600.367 532.75 600.352 532.723 cv
600.332 532.699 600.324 532.668 600.328 532.629 cv
600.328 530.766 li
596.699 530.766 li
596.641 530.77 596.598 530.762 596.563 530.746 cv
596.527 530.734 596.492 530.707 596.465 530.668 cv
596.434 530.633 596.414 530.582 596.402 530.512 cv
596.391 530.445 596.387 530.355 596.387 530.242 cv
596.387 530.16 596.387 530.082 596.395 530.012 cv
596.395 529.941 596.406 529.879 596.422 529.824 cv
596.434 529.77 596.449 529.715 596.477 529.66 cv
596.496 529.605 596.523 529.551 596.559 529.488 cv
599.719 524.102 li
599.738 524.066 599.773 524.035 599.82 524.008 cv
599.863 523.98 599.918 523.957 599.992 523.937 cv
600.059 523.922 600.145 523.91 600.25 523.898 cv
600.352 523.895 600.473 523.891 600.613 523.887 cv
600.762 523.891 600.898 523.895 601.016 523.906 cv
601.129 523.918 601.219 523.934 601.293 523.949 cv
601.359 523.969 601.414 523.992 601.453 524.023 cv
601.488 524.055 601.508 524.09 601.508 524.129 cv
601.508 529.793 li
602.508 529.793 li
602.582 529.797 602.645 529.836 602.695 529.914 cv
602.742 529.996 602.766 530.117 602.77 530.277 cv
cp
600.328 524.926 mo
600.316 524.926 li
597.465 529.793 li
600.328 529.793 li
cp
f
671.254 532.336 mo
671.25 532.426 671.242 532.496 671.23 532.555 cv
671.215 532.617 671.195 532.668 671.176 532.699 cv
671.152 532.738 671.129 532.762 671.098 532.777 cv
671.066 532.793 671.035 532.801 671.008 532.801 cv
666.371 532.801 li
666.336 532.801 666.309 532.793 666.281 532.777 cv
666.254 532.762 666.227 532.738 666.203 532.699 cv
666.176 532.668 666.156 532.617 666.145 532.555 cv
666.129 532.496 666.121 532.426 666.125 532.336 cv
666.121 532.258 666.129 532.184 666.145 532.121 cv
666.156 532.062 666.172 532.016 666.195 531.977 cv
666.211 531.941 666.238 531.91 666.27 531.887 cv
666.301 531.867 666.332 531.859 666.371 531.855 cv
668.223 531.855 li
668.223 525.109 li
666.508 526.129 li
666.418 526.18 666.348 526.207 666.301 526.215 cv
666.246 526.223 666.203 526.215 666.172 526.184 cv
666.137 526.156 666.117 526.105 666.105 526.035 cv
666.094 525.969 666.086 525.883 666.09 525.773 cv
666.086 525.699 666.09 525.633 666.102 525.574 cv
666.105 525.523 666.117 525.477 666.133 525.437 cv
666.145 525.402 666.164 525.371 666.188 525.344 cv
666.211 525.316 666.242 525.289 666.289 525.262 cv
668.332 523.949 li
668.348 523.937 668.367 523.926 668.398 523.918 cv
668.422 523.91 668.457 523.902 668.504 523.891 cv
668.543 523.883 668.594 523.875 668.648 523.871 cv
668.703 523.871 668.77 523.871 668.855 523.867 cv
668.961 523.871 669.055 523.875 669.129 523.883 cv
669.199 523.891 669.254 523.906 669.301 523.922 cv
669.34 523.941 669.367 523.961 669.383 523.984 cv
669.391 524.012 669.398 524.035 669.402 524.059 cv
669.402 531.855 li
671.008 531.855 li
671.043 531.859 671.078 531.867 671.109 531.887 cv
671.141 531.91 671.164 531.941 671.188 531.977 cv
671.203 532.016 671.219 532.062 671.234 532.121 cv
671.242 532.184 671.25 532.258 671.254 532.336 cv
cp
f
678.543 529.93 mo
678.543 530.32 678.48 530.699 678.363 531.059 cv
678.238 531.426 678.055 531.742 677.813 532.016 cv
677.563 532.293 677.25 532.516 676.875 532.68 cv
676.492 532.848 676.047 532.93 675.531 532.93 cv
675.16 532.93 674.832 532.887 674.551 532.793 cv
674.266 532.707 674.02 532.574 673.809 532.402 cv
673.598 532.234 673.422 532.027 673.285 531.781 cv
673.145 531.535 673.031 531.254 672.949 530.937 cv
672.863 530.625 672.805 530.281 672.77 529.902 cv
672.73 529.531 672.711 529.129 672.715 528.695 cv
672.711 528.316 672.73 527.934 672.773 527.543 cv
672.813 527.16 672.887 526.785 672.992 526.418 cv
673.098 526.059 673.242 525.719 673.422 525.402 cv
673.602 525.086 673.828 524.809 674.102 524.574 cv
674.375 524.34 674.699 524.152 675.078 524.012 cv
675.457 523.875 675.898 523.809 676.402 523.805 cv
676.57 523.809 676.742 523.816 676.914 523.836 cv
677.086 523.859 677.246 523.891 677.395 523.922 cv
677.543 523.961 677.664 523.996 677.766 524.035 cv
677.863 524.074 677.93 524.109 677.965 524.133 cv
677.992 524.16 678.016 524.187 678.035 524.215 cv
678.051 524.246 678.066 524.277 678.074 524.312 cv
678.082 524.348 678.086 524.387 678.094 524.43 cv
678.094 524.473 678.098 524.527 678.102 524.59 cv
678.098 524.676 678.098 524.746 678.098 524.801 cv
678.094 524.863 678.082 524.91 678.07 524.945 cv
678.051 524.984 678.031 525.012 678.008 525.027 cv
677.98 525.047 677.949 525.055 677.91 525.055 cv
677.859 525.055 677.789 525.039 677.703 525.008 cv
677.613 524.977 677.508 524.941 677.387 524.898 cv
677.262 524.863 677.113 524.828 676.938 524.793 cv
676.762 524.766 676.559 524.75 676.328 524.746 cv
675.898 524.75 675.531 524.836 675.227 525.008 cv
674.922 525.18 674.672 525.414 674.477 525.707 cv
674.281 526 674.137 526.34 674.047 526.723 cv
673.949 527.113 673.895 527.516 673.887 527.934 cv
674.004 527.867 674.141 527.801 674.289 527.73 cv
674.438 527.664 674.598 527.602 674.773 527.543 cv
674.949 527.492 675.137 527.445 675.332 527.41 cv
675.527 527.379 675.738 527.363 675.965 527.359 cv
676.441 527.363 676.844 527.43 677.176 527.555 cv
677.504 527.687 677.77 527.867 677.977 528.098 cv
678.176 528.328 678.32 528.598 678.41 528.91 cv
678.496 529.223 678.543 529.562 678.543 529.93 cv
cp
677.348 530.039 mo
677.348 529.777 677.32 529.535 677.27 529.316 cv
677.215 529.102 677.125 528.918 677.004 528.762 cv
676.879 528.613 676.715 528.496 676.512 528.414 cv
676.301 528.332 676.047 528.289 675.75 528.289 cv
675.578 528.289 675.41 528.305 675.242 528.336 cv
675.07 528.367 674.906 528.41 674.75 528.457 cv
674.59 528.512 674.441 528.574 674.301 528.645 cv
674.156 528.719 674.023 528.793 673.906 528.871 cv
673.902 529.465 673.941 529.961 674.02 530.355 cv
674.094 530.754 674.203 531.07 674.348 531.309 cv
674.492 531.551 674.672 531.723 674.887 531.824 cv
675.102 531.93 675.352 531.98 675.641 531.977 cv
675.93 531.98 676.184 531.926 676.398 531.812 cv
676.613 531.707 676.789 531.559 676.934 531.371 cv
677.074 531.187 677.18 530.98 677.246 530.75 cv
677.313 530.52 677.348 530.285 677.348 530.039 cv
cp
f
16.934 325.992 mo
16.977 325.996 17.012 326.004 17.043 326.016 cv
17.074 326.035 17.102 326.07 17.121 326.117 cv
17.141 326.172 17.152 326.242 17.168 326.336 cv
17.176 326.43 17.184 326.555 17.184 326.711 cv
17.184 326.848 17.176 326.961 17.168 327.043 cv
17.152 327.129 17.141 327.195 17.117 327.246 cv
17.098 327.301 17.063 327.34 17.02 327.367 cv
16.98 327.398 16.93 327.426 16.863 327.441 cv
14.488 328.371 li
14.219 328.484 13.973 328.598 13.742 328.711 cv
13.52 328.828 13.324 328.965 13.16 329.125 cv
13 329.289 12.871 329.48 12.777 329.695 cv
12.688 329.918 12.645 330.18 12.641 330.48 cv
12.641 331.379 li
16.934 331.379 li
16.977 331.383 17.012 331.395 17.043 331.414 cv
17.074 331.441 17.102 331.477 17.117 331.523 cv
17.137 331.574 17.148 331.641 17.164 331.727 cv
17.176 331.812 17.184 331.922 17.184 332.047 cv
17.184 332.18 17.176 332.285 17.164 332.371 cv
17.148 332.457 17.137 332.527 17.117 332.578 cv
17.102 332.633 17.074 332.668 17.043 332.687 cv
17.012 332.711 16.977 332.723 16.934 332.719 cv
7.598 332.719 li
7.395 332.723 7.254 332.668 7.172 332.559 cv
7.094 332.453 7.055 332.34 7.051 332.219 cv
7.051 330.078 li
7.055 329.828 7.059 329.613 7.07 329.441 cv
7.086 329.273 7.102 329.121 7.113 328.984 cv
7.184 328.598 7.289 328.254 7.434 327.953 cv
7.582 327.656 7.77 327.406 7.988 327.203 cv
8.215 327 8.469 326.848 8.758 326.746 cv
9.047 326.645 9.367 326.594 9.711 326.594 cv
10.051 326.594 10.352 326.641 10.617 326.73 cv
10.887 326.824 11.125 326.957 11.328 327.125 cv
11.539 327.297 11.715 327.5 11.863 327.738 cv
12.012 327.98 12.141 328.25 12.242 328.543 cv
12.32 328.379 12.41 328.227 12.52 328.09 cv
12.633 327.957 12.77 327.832 12.922 327.711 cv
13.082 327.598 13.262 327.484 13.461 327.379 cv
13.664 327.277 13.891 327.176 14.145 327.066 cv
16.363 326.164 li
16.551 326.094 16.684 326.047 16.758 326.023 cv
16.836 326.008 16.895 325.996 16.934 325.992 cv
cp
9.852 328.012 mo
9.461 328.012 9.125 328.102 8.852 328.277 cv
8.578 328.457 8.383 328.754 8.262 329.164 cv
8.227 329.297 8.199 329.441 8.184 329.605 cv
8.168 329.77 8.16 329.984 8.16 330.246 cv
8.16 331.379 li
11.559 331.379 li
11.559 330.07 li
11.559 329.719 11.516 329.414 11.43 329.152 cv
11.344 328.898 11.227 328.684 11.07 328.512 cv
10.922 328.344 10.738 328.219 10.527 328.133 cv
10.32 328.055 10.098 328.012 9.852 328.012 cv
cp
f
16.941 318.195 mo
16.988 318.199 17.023 318.207 17.047 318.223 cv
17.078 318.242 17.102 318.277 17.121 318.32 cv
17.141 318.367 17.152 318.426 17.168 318.5 cv
17.176 318.578 17.184 318.672 17.184 318.777 cv
17.184 318.902 17.176 319 17.168 319.07 cv
17.152 319.148 17.141 319.207 17.121 319.25 cv
17.102 319.297 17.078 319.328 17.047 319.34 cv
17.023 319.359 16.988 319.367 16.941 319.363 cv
16.016 319.363 li
16.461 319.766 16.781 320.16 16.98 320.547 cv
17.184 320.941 17.281 321.336 17.285 321.73 cv
17.281 322.203 17.207 322.598 17.051 322.914 cv
16.898 323.234 16.688 323.492 16.418 323.687 cv
16.152 323.891 15.84 324.031 15.48 324.113 cv
15.125 324.203 14.691 324.246 14.184 324.242 cv
9.93 324.242 li
9.891 324.246 9.855 324.238 9.824 324.215 cv
9.797 324.199 9.773 324.164 9.746 324.109 cv
9.727 324.062 9.711 323.992 9.699 323.906 cv
9.695 323.824 9.691 323.723 9.688 323.594 cv
9.691 323.473 9.695 323.367 9.699 323.281 cv
9.711 323.199 9.727 323.133 9.746 323.086 cv
9.773 323.039 9.797 323.004 9.824 322.98 cv
9.855 322.961 9.891 322.953 9.93 322.949 cv
14.012 322.949 li
14.426 322.953 14.754 322.922 15 322.859 cv
15.246 322.801 15.457 322.711 15.629 322.586 cv
15.809 322.469 15.941 322.312 16.035 322.121 cv
16.133 321.937 16.184 321.719 16.18 321.469 cv
16.184 321.148 16.066 320.828 15.836 320.504 cv
15.609 320.187 15.273 319.848 14.828 319.488 cv
9.93 319.488 li
9.891 319.488 9.855 319.48 9.824 319.461 cv
9.797 319.445 9.773 319.41 9.746 319.355 cv
9.727 319.305 9.711 319.238 9.699 319.156 cv
9.695 319.078 9.691 318.973 9.688 318.84 cv
9.691 318.719 9.695 318.613 9.699 318.527 cv
9.711 318.445 9.727 318.383 9.746 318.336 cv
9.773 318.293 9.797 318.258 9.824 318.23 cv
9.855 318.211 9.891 318.199 9.93 318.195 cv
cp
f
16.941 309.785 mo
16.988 309.785 17.023 309.797 17.047 309.816 cv
17.078 309.84 17.102 309.875 17.121 309.918 cv
17.141 309.969 17.152 310.031 17.168 310.113 cv
17.176 310.195 17.184 310.301 17.184 310.422 cv
17.184 310.555 17.176 310.66 17.168 310.742 cv
17.152 310.828 17.141 310.895 17.121 310.937 cv
17.102 310.988 17.078 311.02 17.047 311.039 cv
17.023 311.062 16.988 311.074 16.941 311.07 cv
12.836 311.07 li
12.438 311.074 12.117 311.105 11.871 311.164 cv
11.629 311.23 11.418 311.32 11.238 311.437 cv
11.063 311.555 10.926 311.711 10.832 311.898 cv
10.738 312.094 10.691 312.312 10.691 312.559 cv
10.691 312.883 10.809 313.207 11.035 313.527 cv
11.27 313.852 11.602 314.187 12.039 314.539 cv
16.941 314.539 li
16.988 314.543 17.023 314.555 17.047 314.57 cv
17.078 314.594 17.102 314.625 17.121 314.672 cv
17.141 314.719 17.152 314.785 17.168 314.863 cv
17.176 314.949 17.184 315.055 17.184 315.184 cv
17.184 315.312 17.176 315.418 17.168 315.496 cv
17.152 315.582 17.141 315.648 17.121 315.695 cv
17.102 315.75 17.078 315.781 17.047 315.797 cv
17.023 315.816 16.988 315.828 16.941 315.824 cv
9.93 315.824 li
9.891 315.828 9.855 315.82 9.824 315.801 cv
9.797 315.789 9.773 315.758 9.746 315.707 cv
9.727 315.664 9.711 315.602 9.699 315.527 cv
9.695 315.457 9.691 315.363 9.688 315.238 cv
9.691 315.129 9.695 315.031 9.699 314.953 cv
9.711 314.879 9.727 314.82 9.746 314.777 cv
9.773 314.738 9.797 314.711 9.824 314.691 cv
9.855 314.676 9.891 314.668 9.93 314.664 cv
10.855 314.664 li
10.414 314.273 10.094 313.879 9.887 313.484 cv
9.684 313.094 9.578 312.695 9.578 312.293 cv
9.578 311.824 9.66 311.434 9.816 311.113 cv
9.98 310.797 10.191 310.535 10.453 310.336 cv
10.719 310.141 11.027 310 11.383 309.914 cv
11.738 309.828 12.168 309.785 12.664 309.785 cv
cp
f
16.426 303.906 mo
16.582 303.906 16.699 303.918 16.785 303.937 cv
16.875 303.961 16.941 303.992 16.98 304.031 cv
17.023 304.074 17.063 304.137 17.098 304.219 cv
17.133 304.305 17.16 304.398 17.188 304.504 cv
17.207 304.613 17.227 304.727 17.246 304.844 cv
17.258 304.961 17.266 305.082 17.27 305.199 cv
17.266 305.566 17.219 305.879 17.125 306.137 cv
17.031 306.398 16.887 306.609 16.688 306.773 cv
16.496 306.941 16.25 307.062 15.949 307.137 cv
15.652 307.215 15.301 307.254 14.891 307.25 cv
10.793 307.25 li
10.793 308.23 li
10.797 308.309 10.754 308.371 10.668 308.418 cv
10.586 308.465 10.453 308.488 10.262 308.488 cv
10.168 308.488 10.086 308.484 10.016 308.469 cv
9.953 308.461 9.895 308.441 9.848 308.418 cv
9.805 308.398 9.773 308.371 9.754 308.336 cv
9.738 308.305 9.73 308.27 9.727 308.223 cv
9.727 307.25 li
8.059 307.25 li
8.027 307.254 7.992 307.242 7.957 307.223 cv
7.93 307.207 7.902 307.176 7.875 307.121 cv
7.855 307.074 7.84 307.008 7.824 306.922 cv
7.816 306.844 7.809 306.738 7.809 306.609 cv
7.809 306.48 7.816 306.375 7.824 306.293 cv
7.84 306.211 7.855 306.145 7.875 306.098 cv
7.902 306.051 7.93 306.02 7.957 305.996 cv
7.992 305.98 8.027 305.969 8.059 305.965 cv
9.727 305.965 li
9.727 304.164 li
9.73 304.125 9.738 304.09 9.754 304.055 cv
9.773 304.027 9.805 304 9.848 303.973 cv
9.895 303.953 9.953 303.937 10.016 303.922 cv
10.086 303.914 10.168 303.906 10.262 303.906 cv
10.453 303.906 10.586 303.93 10.668 303.977 cv
10.754 304.023 10.797 304.086 10.793 304.164 cv
10.793 305.965 li
14.707 305.965 li
15.191 305.969 15.555 305.898 15.801 305.75 cv
16.051 305.609 16.176 305.352 16.172 304.98 cv
16.176 304.867 16.164 304.762 16.137 304.664 cv
16.117 304.574 16.094 304.492 16.063 304.414 cv
16.039 304.344 16.012 304.281 15.988 304.227 cv
15.965 304.18 15.953 304.133 15.953 304.086 cv
15.953 304.062 15.961 304.035 15.973 304.012 cv
15.988 303.988 16.012 303.973 16.047 303.957 cv
16.086 303.949 16.137 303.937 16.195 303.922 cv
16.262 303.914 16.34 303.906 16.426 303.906 cv
cp
f
16.941 300.891 mo
16.988 300.895 17.023 300.906 17.047 300.922 cv
17.078 300.945 17.102 300.977 17.121 301.023 cv
17.141 301.07 17.152 301.137 17.168 301.215 cv
17.176 301.301 17.184 301.406 17.184 301.535 cv
17.184 301.664 17.176 301.77 17.168 301.848 cv
17.152 301.934 17.141 302 17.121 302.047 cv
17.102 302.102 17.078 302.133 17.047 302.148 cv
17.023 302.168 16.988 302.18 16.941 302.176 cv
9.93 302.176 li
9.895 302.18 9.863 302.168 9.828 302.148 cv
9.801 302.133 9.773 302.102 9.75 302.047 cv
9.73 302 9.715 301.934 9.703 301.848 cv
9.695 301.77 9.691 301.664 9.688 301.535 cv
9.691 301.406 9.695 301.301 9.703 301.215 cv
9.715 301.137 9.73 301.07 9.75 301.023 cv
9.773 300.977 9.801 300.945 9.828 300.922 cv
9.863 300.906 9.895 300.895 9.93 300.891 cv
cp
7.559 300.742 mo
7.863 300.742 8.07 300.801 8.176 300.914 cv
8.289 301.027 8.344 301.238 8.34 301.543 cv
8.344 301.848 8.289 302.055 8.18 302.164 cv
8.074 302.281 7.871 302.336 7.574 302.332 cv
7.273 302.336 7.07 302.277 6.961 302.16 cv
6.855 302.047 6.801 301.836 6.797 301.527 cv
6.801 301.227 6.855 301.023 6.957 300.91 cv
7.066 300.801 7.266 300.742 7.559 300.742 cv
cp
f
16.941 288.07 mo
16.988 288.074 17.023 288.082 17.047 288.102 cv
17.078 288.125 17.102 288.16 17.121 288.203 cv
17.141 288.254 17.152 288.32 17.168 288.398 cv
17.176 288.484 17.184 288.586 17.184 288.711 cv
17.184 288.844 17.176 288.953 17.168 289.031 cv
17.152 289.117 17.141 289.184 17.121 289.23 cv
17.102 289.285 17.078 289.32 17.047 289.336 cv
17.023 289.359 16.988 289.367 16.941 289.367 cv
12.68 289.367 li
12.387 289.367 12.117 289.395 11.871 289.445 cv
11.629 289.5 11.418 289.582 11.238 289.695 cv
11.063 289.809 10.926 289.953 10.832 290.129 cv
10.738 290.309 10.691 290.52 10.691 290.754 cv
10.691 291.051 10.809 291.348 11.035 291.645 cv
11.27 291.949 11.602 292.277 12.039 292.633 cv
16.941 292.633 li
16.988 292.637 17.023 292.648 17.047 292.664 cv
17.078 292.687 17.102 292.719 17.121 292.766 cv
17.141 292.816 17.152 292.883 17.168 292.965 cv
17.176 293.051 17.184 293.156 17.184 293.277 cv
17.184 293.398 17.176 293.5 17.168 293.586 cv
17.152 293.672 17.141 293.742 17.121 293.789 cv
17.102 293.844 17.078 293.875 17.047 293.891 cv
17.023 293.91 16.988 293.922 16.941 293.918 cv
12.68 293.918 li
12.387 293.922 12.117 293.949 11.871 294.004 cv
11.629 294.062 11.418 294.148 11.238 294.262 cv
11.063 294.375 10.926 294.52 10.832 294.691 cv
10.738 294.871 10.691 295.078 10.691 295.312 cv
10.691 295.613 10.809 295.91 11.035 296.211 cv
11.27 296.512 11.602 296.84 12.039 297.191 cv
16.941 297.191 li
16.988 297.195 17.023 297.207 17.047 297.223 cv
17.078 297.246 17.102 297.277 17.121 297.324 cv
17.141 297.371 17.152 297.437 17.168 297.516 cv
17.176 297.602 17.184 297.707 17.184 297.836 cv
17.184 297.965 17.176 298.07 17.168 298.148 cv
17.152 298.234 17.141 298.301 17.121 298.348 cv
17.102 298.402 17.078 298.434 17.047 298.449 cv
17.023 298.469 16.988 298.48 16.941 298.477 cv
9.93 298.477 li
9.891 298.48 9.855 298.473 9.824 298.453 cv
9.797 298.441 9.773 298.41 9.746 298.359 cv
9.727 298.316 9.711 298.254 9.699 298.18 cv
9.695 298.109 9.691 298.016 9.688 297.891 cv
9.691 297.781 9.695 297.684 9.699 297.605 cv
9.711 297.531 9.727 297.473 9.746 297.43 cv
9.773 297.391 9.797 297.363 9.824 297.344 cv
9.855 297.328 9.891 297.32 9.93 297.316 cv
10.855 297.316 li
10.414 296.926 10.094 296.543 9.887 296.168 cv
9.684 295.801 9.578 295.422 9.578 295.039 cv
9.578 294.75 9.613 294.492 9.68 294.258 cv
9.75 294.031 9.844 293.824 9.965 293.645 cv
10.086 293.469 10.23 293.32 10.398 293.191 cv
10.57 293.07 10.762 292.965 10.965 292.879 cv
10.715 292.648 10.5 292.426 10.32 292.215 cv
10.148 292.004 10.004 291.801 9.891 291.605 cv
9.785 291.41 9.707 291.223 9.652 291.039 cv
9.605 290.855 9.578 290.668 9.578 290.48 cv
9.578 290.027 9.66 289.648 9.816 289.344 cv
9.98 289.039 10.191 288.793 10.453 288.598 cv
10.719 288.41 11.027 288.273 11.383 288.191 cv
11.738 288.113 12.113 288.074 12.508 288.07 cv
cp
f
13.133 279.738 mo
13.336 279.742 13.477 279.793 13.563 279.891 cv
13.648 279.996 13.691 280.113 13.691 280.238 cv
13.691 284.855 li
14.082 284.859 14.434 284.82 14.746 284.738 cv
15.059 284.664 15.328 284.531 15.547 284.348 cv
15.773 284.168 15.945 283.934 16.063 283.637 cv
16.188 283.348 16.246 282.988 16.242 282.562 cv
16.246 282.23 16.219 281.934 16.16 281.672 cv
16.109 281.41 16.047 281.184 15.977 280.992 cv
15.91 280.805 15.852 280.648 15.793 280.523 cv
15.742 280.402 15.715 280.309 15.711 280.246 cv
15.715 280.211 15.723 280.18 15.738 280.148 cv
15.758 280.121 15.785 280.098 15.82 280.078 cv
15.859 280.066 15.91 280.055 15.973 280.043 cv
16.039 280.039 16.117 280.035 16.211 280.031 cv
16.281 280.035 16.34 280.039 16.387 280.039 cv
16.434 280.047 16.477 280.051 16.516 280.059 cv
16.555 280.066 16.59 280.082 16.621 280.098 cv
16.652 280.121 16.684 280.145 16.711 280.168 cv
16.742 280.199 16.789 280.281 16.852 280.422 cv
16.918 280.562 16.98 280.746 17.043 280.969 cv
17.105 281.195 17.16 281.453 17.211 281.746 cv
17.258 282.039 17.281 282.352 17.285 282.684 cv
17.281 283.262 17.203 283.77 17.043 284.199 cv
16.883 284.637 16.645 285 16.328 285.293 cv
16.012 285.594 15.617 285.816 15.137 285.965 cv
14.66 286.113 14.102 286.187 13.465 286.187 cv
12.867 286.187 12.328 286.113 11.844 285.957 cv
11.367 285.805 10.957 285.578 10.621 285.281 cv
10.285 284.988 10.027 284.633 9.848 284.219 cv
9.668 283.805 9.578 283.34 9.578 282.824 cv
9.578 282.273 9.668 281.805 9.844 281.418 cv
10.023 281.031 10.262 280.715 10.559 280.461 cv
10.859 280.215 11.211 280.031 11.609 279.914 cv
12.016 279.801 12.445 279.742 12.898 279.738 cv
cp
12.75 281.031 mo
12.074 281.016 11.543 281.168 11.16 281.484 cv
10.777 281.801 10.586 282.27 10.582 282.887 cv
10.586 283.211 10.645 283.492 10.762 283.73 cv
10.883 283.973 11.043 284.172 11.238 284.332 cv
11.438 284.496 11.668 284.621 11.93 284.707 cv
12.191 284.797 12.465 284.848 12.75 284.855 cv
cp
f
6.398 271.562 mo
7.445 272.059 8.516 272.426 9.613 272.668 cv
10.715 272.91 11.82 273.031 12.93 273.031 cv
14.047 273.031 15.156 272.91 16.25 272.66 cv
17.348 272.418 18.418 272.055 19.473 271.578 cv
19.531 271.555 19.586 271.543 19.633 271.535 cv
19.676 271.535 19.711 271.551 19.742 271.586 cv
19.77 271.625 19.789 271.68 19.805 271.754 cv
19.813 271.832 19.82 271.937 19.824 272.062 cv
19.82 272.16 19.816 272.238 19.816 272.305 cv
19.809 272.375 19.801 272.434 19.785 272.48 cv
19.77 272.531 19.75 272.574 19.73 272.602 cv
19.707 272.637 19.684 272.66 19.66 272.672 cv
19.129 272.953 18.594 273.199 18.051 273.41 cv
17.508 273.629 16.957 273.809 16.398 273.949 cv
15.836 274.098 15.27 274.207 14.695 274.277 cv
14.121 274.355 13.539 274.391 12.953 274.387 cv
12.367 274.391 11.789 274.352 11.215 274.266 cv
10.645 274.187 10.078 274.07 9.512 273.922 cv
8.949 273.773 8.395 273.594 7.848 273.383 cv
7.305 273.172 6.762 272.934 6.227 272.664 cv
6.207 272.66 6.191 272.645 6.172 272.621 cv
6.16 272.598 6.145 272.566 6.125 272.523 cv
6.113 272.484 6.102 272.426 6.09 272.352 cv
6.086 272.281 6.082 272.187 6.078 272.07 cv
6.082 271.953 6.09 271.859 6.102 271.781 cv
6.121 271.711 6.141 271.652 6.164 271.609 cv
6.191 271.57 6.227 271.547 6.266 271.539 cv
6.313 271.535 6.355 271.543 6.398 271.562 cv
cp
f
16.934 258.281 mo
16.977 258.281 17.012 258.293 17.043 258.312 cv
17.074 258.336 17.102 258.375 17.117 258.426 cv
17.137 258.48 17.148 258.547 17.164 258.629 cv
17.176 258.715 17.184 258.824 17.184 258.953 cv
17.184 259.082 17.176 259.187 17.164 259.273 cv
17.148 259.363 17.137 259.434 17.117 259.484 cv
17.102 259.535 17.074 259.57 17.043 259.59 cv
17.012 259.613 16.977 259.625 16.934 259.621 cv
8.152 259.621 li
8.152 259.637 li
16.973 263.191 li
17.012 263.207 17.043 263.23 17.066 263.258 cv
17.094 263.289 17.117 263.332 17.133 263.383 cv
17.152 263.441 17.164 263.504 17.172 263.578 cv
17.18 263.652 17.184 263.742 17.184 263.844 cv
17.184 263.957 17.176 264.051 17.168 264.125 cv
17.152 264.207 17.141 264.273 17.125 264.32 cv
17.109 264.375 17.09 264.414 17.059 264.441 cv
17.035 264.473 17.004 264.492 16.973 264.5 cv
8.152 267.898 li
8.152 267.906 li
16.934 267.906 li
16.977 267.91 17.012 267.918 17.043 267.937 cv
17.074 267.961 17.102 268 17.117 268.051 cv
17.137 268.105 17.148 268.176 17.164 268.258 cv
17.176 268.348 17.184 268.457 17.184 268.586 cv
17.184 268.719 17.176 268.824 17.164 268.91 cv
17.148 268.996 17.137 269.066 17.117 269.113 cv
17.102 269.168 17.074 269.203 17.043 269.219 cv
17.012 269.242 16.977 269.25 16.934 269.246 cv
7.66 269.246 li
7.445 269.25 7.289 269.191 7.191 269.074 cv
7.102 268.957 7.055 268.828 7.051 268.684 cv
7.051 267.859 li
7.055 267.695 7.07 267.547 7.098 267.418 cv
7.133 267.293 7.18 267.184 7.246 267.086 cv
7.316 266.992 7.402 266.91 7.504 266.848 cv
7.609 266.785 7.734 266.73 7.871 266.684 cv
15.172 263.797 li
15.172 263.758 li
7.895 260.758 li
7.742 260.703 7.609 260.641 7.496 260.57 cv
7.391 260.504 7.301 260.426 7.234 260.344 cv
7.172 260.262 7.125 260.172 7.094 260.07 cv
7.066 259.973 7.055 259.855 7.051 259.723 cv
7.051 258.859 li
7.055 258.781 7.066 258.703 7.086 258.633 cv
7.113 258.562 7.148 258.504 7.195 258.453 cv
7.246 258.402 7.309 258.359 7.383 258.328 cv
7.461 258.297 7.555 258.281 7.66 258.281 cv
cp
f
16.941 254.465 mo
16.988 254.469 17.023 254.48 17.047 254.496 cv
17.078 254.52 17.102 254.551 17.121 254.598 cv
17.141 254.645 17.152 254.711 17.168 254.789 cv
17.176 254.875 17.184 254.98 17.184 255.109 cv
17.184 255.238 17.176 255.344 17.168 255.422 cv
17.152 255.508 17.141 255.574 17.121 255.621 cv
17.102 255.676 17.078 255.707 17.047 255.723 cv
17.023 255.742 16.988 255.754 16.941 255.75 cv
9.93 255.75 li
9.895 255.754 9.863 255.742 9.828 255.723 cv
9.801 255.707 9.773 255.676 9.75 255.621 cv
9.73 255.574 9.715 255.508 9.703 255.422 cv
9.695 255.344 9.691 255.238 9.688 255.109 cv
9.691 254.98 9.695 254.875 9.703 254.789 cv
9.715 254.711 9.73 254.645 9.75 254.598 cv
9.773 254.551 9.801 254.52 9.828 254.496 cv
9.863 254.48 9.895 254.469 9.93 254.465 cv
cp
7.559 254.316 mo
7.863 254.316 8.07 254.375 8.176 254.488 cv
8.289 254.602 8.344 254.812 8.34 255.117 cv
8.344 255.422 8.289 255.629 8.18 255.738 cv
8.074 255.855 7.871 255.91 7.574 255.906 cv
7.273 255.91 7.07 255.852 6.961 255.734 cv
6.855 255.621 6.801 255.41 6.797 255.102 cv
6.801 254.801 6.855 254.598 6.957 254.484 cv
7.066 254.375 7.266 254.316 7.559 254.316 cv
cp
f
16.941 246.039 mo
16.988 246.039 17.023 246.051 17.047 246.07 cv
17.078 246.094 17.102 246.129 17.121 246.172 cv
17.141 246.223 17.152 246.285 17.168 246.367 cv
17.176 246.449 17.184 246.555 17.184 246.676 cv
17.184 246.809 17.176 246.914 17.168 246.996 cv
17.152 247.082 17.141 247.148 17.121 247.191 cv
17.102 247.242 17.078 247.273 17.047 247.293 cv
17.023 247.316 16.988 247.328 16.941 247.324 cv
12.836 247.324 li
12.438 247.328 12.117 247.359 11.871 247.418 cv
11.629 247.484 11.418 247.574 11.238 247.691 cv
11.063 247.809 10.926 247.965 10.832 248.152 cv
10.738 248.348 10.691 248.566 10.691 248.812 cv
10.691 249.137 10.809 249.461 11.035 249.781 cv
11.27 250.105 11.602 250.441 12.039 250.793 cv
16.941 250.793 li
16.988 250.797 17.023 250.809 17.047 250.824 cv
17.078 250.848 17.102 250.879 17.121 250.926 cv
17.141 250.973 17.152 251.039 17.168 251.117 cv
17.176 251.203 17.184 251.309 17.184 251.437 cv
17.184 251.566 17.176 251.672 17.168 251.75 cv
17.152 251.836 17.141 251.902 17.121 251.949 cv
17.102 252.004 17.078 252.035 17.047 252.051 cv
17.023 252.07 16.988 252.082 16.941 252.078 cv
9.93 252.078 li
9.891 252.082 9.855 252.074 9.824 252.055 cv
9.797 252.043 9.773 252.012 9.746 251.961 cv
9.727 251.918 9.711 251.855 9.699 251.781 cv
9.695 251.711 9.691 251.617 9.688 251.492 cv
9.691 251.383 9.695 251.285 9.699 251.207 cv
9.711 251.133 9.727 251.074 9.746 251.031 cv
9.773 250.992 9.797 250.965 9.824 250.945 cv
9.855 250.93 9.891 250.922 9.93 250.918 cv
10.855 250.918 li
10.414 250.527 10.094 250.133 9.887 249.738 cv
9.684 249.348 9.578 248.949 9.578 248.547 cv
9.578 248.078 9.66 247.687 9.816 247.367 cv
9.98 247.051 10.191 246.789 10.453 246.59 cv
10.719 246.395 11.027 246.254 11.383 246.168 cv
11.738 246.082 12.168 246.039 12.664 246.039 cv
cp
f
16.941 237.645 mo
16.988 237.648 17.023 237.656 17.047 237.672 cv
17.078 237.691 17.102 237.727 17.121 237.77 cv
17.141 237.816 17.152 237.875 17.168 237.949 cv
17.176 238.027 17.184 238.121 17.184 238.227 cv
17.184 238.352 17.176 238.449 17.168 238.52 cv
17.152 238.598 17.141 238.656 17.121 238.699 cv
17.102 238.746 17.078 238.777 17.047 238.789 cv
17.023 238.809 16.988 238.816 16.941 238.812 cv
16.016 238.812 li
16.461 239.215 16.781 239.609 16.98 239.996 cv
17.184 240.391 17.281 240.785 17.285 241.18 cv
17.281 241.652 17.207 242.047 17.051 242.363 cv
16.898 242.684 16.688 242.941 16.418 243.137 cv
16.152 243.34 15.84 243.48 15.48 243.562 cv
15.125 243.652 14.691 243.695 14.184 243.691 cv
9.93 243.691 li
9.891 243.695 9.855 243.687 9.824 243.664 cv
9.797 243.648 9.773 243.613 9.746 243.559 cv
9.727 243.512 9.711 243.441 9.699 243.355 cv
9.695 243.273 9.691 243.172 9.688 243.043 cv
9.691 242.922 9.695 242.816 9.699 242.73 cv
9.711 242.648 9.727 242.582 9.746 242.535 cv
9.773 242.488 9.797 242.453 9.824 242.43 cv
9.855 242.41 9.891 242.402 9.93 242.398 cv
14.012 242.398 li
14.426 242.402 14.754 242.371 15 242.309 cv
15.246 242.25 15.457 242.16 15.629 242.035 cv
15.809 241.918 15.941 241.762 16.035 241.57 cv
16.133 241.387 16.184 241.168 16.18 240.918 cv
16.184 240.598 16.066 240.277 15.836 239.953 cv
15.609 239.637 15.273 239.297 14.828 238.937 cv
9.93 238.937 li
9.891 238.937 9.855 238.93 9.824 238.91 cv
9.797 238.895 9.773 238.859 9.746 238.805 cv
9.727 238.754 9.711 238.687 9.699 238.605 cv
9.695 238.527 9.691 238.422 9.688 238.289 cv
9.691 238.168 9.695 238.062 9.699 237.977 cv
9.711 237.895 9.727 237.832 9.746 237.785 cv
9.773 237.742 9.797 237.707 9.824 237.68 cv
9.855 237.66 9.891 237.648 9.93 237.645 cv
cp
f
16.426 231.625 mo
16.582 231.625 16.699 231.637 16.785 231.656 cv
16.875 231.68 16.941 231.711 16.98 231.75 cv
17.023 231.793 17.063 231.855 17.098 231.937 cv
17.133 232.023 17.16 232.117 17.188 232.223 cv
17.207 232.332 17.227 232.445 17.246 232.562 cv
17.258 232.68 17.266 232.801 17.27 232.918 cv
17.266 233.285 17.219 233.598 17.125 233.855 cv
17.031 234.117 16.887 234.328 16.688 234.492 cv
16.496 234.66 16.25 234.781 15.949 234.855 cv
15.652 234.934 15.301 234.973 14.891 234.969 cv
10.793 234.969 li
10.793 235.949 li
10.797 236.027 10.754 236.09 10.668 236.137 cv
10.586 236.184 10.453 236.207 10.262 236.207 cv
10.168 236.207 10.086 236.203 10.016 236.187 cv
9.953 236.18 9.895 236.16 9.848 236.137 cv
9.805 236.117 9.773 236.09 9.754 236.055 cv
9.738 236.023 9.73 235.988 9.727 235.941 cv
9.727 234.969 li
8.059 234.969 li
8.027 234.973 7.992 234.961 7.957 234.941 cv
7.93 234.926 7.902 234.895 7.875 234.84 cv
7.855 234.793 7.84 234.727 7.824 234.641 cv
7.816 234.562 7.809 234.457 7.809 234.328 cv
7.809 234.199 7.816 234.094 7.824 234.012 cv
7.84 233.93 7.855 233.863 7.875 233.816 cv
7.902 233.77 7.93 233.738 7.957 233.715 cv
7.992 233.699 8.027 233.687 8.059 233.684 cv
9.727 233.684 li
9.727 231.883 li
9.73 231.844 9.738 231.809 9.754 231.773 cv
9.773 231.746 9.805 231.719 9.848 231.691 cv
9.895 231.672 9.953 231.656 10.016 231.641 cv
10.086 231.633 10.168 231.625 10.262 231.625 cv
10.453 231.625 10.586 231.648 10.668 231.695 cv
10.754 231.742 10.797 231.805 10.793 231.883 cv
10.793 233.684 li
14.707 233.684 li
15.191 233.687 15.555 233.617 15.801 233.469 cv
16.051 233.328 16.176 233.07 16.172 232.699 cv
16.176 232.586 16.164 232.48 16.137 232.383 cv
16.117 232.293 16.094 232.211 16.063 232.133 cv
16.039 232.062 16.012 232 15.988 231.945 cv
15.965 231.898 15.953 231.852 15.953 231.805 cv
15.953 231.781 15.961 231.754 15.973 231.73 cv
15.988 231.707 16.012 231.691 16.047 231.676 cv
16.086 231.668 16.137 231.656 16.195 231.641 cv
16.262 231.633 16.34 231.625 16.426 231.625 cv
cp
f
13.133 223.941 mo
13.336 223.945 13.477 223.996 13.563 224.094 cv
13.648 224.199 13.691 224.316 13.691 224.441 cv
13.691 229.059 li
14.082 229.062 14.434 229.023 14.746 228.941 cv
15.059 228.867 15.328 228.734 15.547 228.551 cv
15.773 228.371 15.945 228.137 16.063 227.84 cv
16.188 227.551 16.246 227.191 16.242 226.766 cv
16.246 226.434 16.219 226.137 16.16 225.875 cv
16.109 225.613 16.047 225.387 15.977 225.195 cv
15.91 225.008 15.852 224.852 15.793 224.727 cv
15.742 224.605 15.715 224.512 15.711 224.449 cv
15.715 224.414 15.723 224.383 15.738 224.352 cv
15.758 224.324 15.785 224.301 15.82 224.281 cv
15.859 224.27 15.91 224.258 15.973 224.246 cv
16.039 224.242 16.117 224.238 16.211 224.234 cv
16.281 224.238 16.34 224.242 16.387 224.242 cv
16.434 224.25 16.477 224.254 16.516 224.262 cv
16.555 224.27 16.59 224.285 16.621 224.301 cv
16.652 224.324 16.684 224.348 16.711 224.371 cv
16.742 224.402 16.789 224.484 16.852 224.625 cv
16.918 224.766 16.98 224.949 17.043 225.172 cv
17.105 225.398 17.16 225.656 17.211 225.949 cv
17.258 226.242 17.281 226.555 17.285 226.887 cv
17.281 227.465 17.203 227.973 17.043 228.402 cv
16.883 228.84 16.645 229.203 16.328 229.496 cv
16.012 229.797 15.617 230.02 15.137 230.168 cv
14.66 230.316 14.102 230.391 13.465 230.391 cv
12.867 230.391 12.328 230.316 11.844 230.16 cv
11.367 230.008 10.957 229.781 10.621 229.484 cv
10.285 229.191 10.027 228.836 9.848 228.422 cv
9.668 228.008 9.578 227.543 9.578 227.027 cv
9.578 226.477 9.668 226.008 9.844 225.621 cv
10.023 225.234 10.262 224.918 10.559 224.664 cv
10.859 224.418 11.211 224.234 11.609 224.117 cv
12.016 224.004 12.445 223.945 12.898 223.941 cv
cp
12.75 225.234 mo
12.074 225.219 11.543 225.371 11.16 225.687 cv
10.777 226.004 10.586 226.473 10.582 227.09 cv
10.586 227.414 10.645 227.695 10.762 227.934 cv
10.883 228.176 11.043 228.375 11.238 228.535 cv
11.438 228.699 11.668 228.824 11.93 228.91 cv
12.191 229 12.465 229.051 12.75 229.059 cv
cp
f
15.031 217.656 mo
15.395 217.66 15.715 217.727 15.992 217.855 cv
16.273 217.988 16.508 218.176 16.699 218.418 cv
16.895 218.664 17.039 218.957 17.137 219.293 cv
17.234 219.633 17.281 220.004 17.285 220.406 cv
17.281 220.66 17.262 220.898 17.227 221.121 cv
17.184 221.348 17.137 221.547 17.078 221.727 cv
17.02 221.906 16.957 222.059 16.891 222.184 cv
16.828 222.309 16.77 222.402 16.715 222.457 cv
16.664 222.516 16.594 222.555 16.496 222.578 cv
16.406 222.605 16.277 222.617 16.117 222.617 cv
16.02 222.617 15.938 222.613 15.867 222.602 cv
15.801 222.594 15.746 222.582 15.703 222.562 cv
15.664 222.551 15.633 222.527 15.613 222.5 cv
15.598 222.473 15.59 222.441 15.586 222.402 cv
15.59 222.348 15.625 222.262 15.691 222.148 cv
15.766 222.039 15.844 221.902 15.922 221.734 cv
16.008 221.574 16.082 221.383 16.152 221.156 cv
16.223 220.937 16.258 220.68 16.258 220.383 cv
16.258 220.168 16.234 219.969 16.188 219.789 cv
16.141 219.613 16.074 219.461 15.98 219.332 cv
15.895 219.203 15.777 219.102 15.633 219.031 cv
15.496 218.961 15.328 218.926 15.133 218.926 cv
14.938 218.926 14.773 218.977 14.637 219.078 cv
14.504 219.18 14.383 219.316 14.277 219.48 cv
14.176 219.648 14.086 219.832 14 220.039 cv
13.922 220.25 13.836 220.465 13.746 220.684 cv
13.66 220.902 13.559 221.117 13.445 221.328 cv
13.336 221.539 13.203 221.73 13.039 221.895 cv
12.883 222.066 12.688 222.199 12.461 222.297 cv
12.238 222.402 11.973 222.453 11.66 222.449 cv
11.387 222.453 11.121 222.398 10.867 222.289 cv
10.617 222.184 10.398 222.023 10.207 221.809 cv
10.02 221.598 9.867 221.332 9.75 221.012 cv
9.637 220.691 9.578 220.32 9.578 219.891 cv
9.578 219.707 9.594 219.52 9.625 219.332 cv
9.656 219.148 9.695 218.98 9.742 218.824 cv
9.789 218.676 9.84 218.547 9.895 218.437 cv
9.949 218.336 10 218.254 10.039 218.195 cv
10.086 218.145 10.121 218.109 10.148 218.086 cv
10.18 218.07 10.215 218.055 10.25 218.047 cv
10.293 218.039 10.34 218.031 10.395 218.023 cv
10.453 218.016 10.523 218.012 10.605 218.012 cv
10.695 218.012 10.773 218.016 10.836 218.023 cv
10.906 218.031 10.957 218.047 10.996 218.062 cv
11.039 218.086 11.07 218.105 11.086 218.129 cv
11.105 218.156 11.113 218.187 11.113 218.215 cv
11.113 218.266 11.086 218.332 11.027 218.418 cv
10.973 218.508 10.91 218.621 10.844 218.762 cv
10.781 218.902 10.723 219.07 10.66 219.258 cv
10.605 219.449 10.574 219.664 10.574 219.906 cv
10.574 220.129 10.602 220.32 10.648 220.484 cv
10.703 220.652 10.773 220.789 10.859 220.895 cv
10.953 221 11.059 221.082 11.184 221.133 cv
11.309 221.191 11.445 221.219 11.59 221.215 cv
11.793 221.219 11.961 221.168 12.098 221.062 cv
12.238 220.961 12.359 220.824 12.461 220.656 cv
12.566 220.492 12.66 220.301 12.742 220.086 cv
12.828 219.875 12.914 219.66 13 219.437 cv
13.09 219.219 13.191 219 13.297 218.781 cv
13.406 218.566 13.535 218.375 13.691 218.207 cv
13.848 218.043 14.035 217.91 14.254 217.809 cv
14.473 217.711 14.734 217.66 15.031 217.656 cv
cp
f
12.953 213.211 mo
13.539 213.211 14.121 213.25 14.695 213.32 cv
15.27 213.398 15.836 213.508 16.398 213.648 cv
16.957 213.797 17.508 213.973 18.051 214.184 cv
18.594 214.395 19.129 214.641 19.66 214.918 cv
19.684 214.937 19.707 214.961 19.73 214.988 cv
19.75 215.023 19.77 215.062 19.785 215.109 cv
19.801 215.16 19.809 215.219 19.816 215.285 cv
19.816 215.355 19.82 215.437 19.824 215.527 cv
19.82 215.664 19.813 215.77 19.805 215.844 cv
19.789 215.922 19.77 215.977 19.742 216.008 cv
19.711 216.043 19.676 216.059 19.633 216.055 cv
19.586 216.055 19.531 216.039 19.473 216.012 cv
18.422 215.535 17.352 215.176 16.254 214.93 cv
15.156 214.687 14.047 214.566 12.93 214.562 cv
11.82 214.566 10.715 214.687 9.613 214.93 cv
8.516 215.176 7.445 215.543 6.398 216.027 cv
6.355 216.051 6.313 216.059 6.266 216.051 cv
6.227 216.051 6.191 216.027 6.164 215.98 cv
6.141 215.941 6.121 215.883 6.102 215.809 cv
6.09 215.738 6.082 215.641 6.078 215.52 cv
6.082 215.41 6.086 215.32 6.09 215.246 cv
6.102 215.176 6.113 215.117 6.125 215.07 cv
6.145 215.027 6.16 214.996 6.172 214.973 cv
6.191 214.957 6.207 214.941 6.227 214.926 cv
7.293 214.395 8.391 213.973 9.512 213.668 cv
10.641 213.363 11.785 213.211 12.953 213.211 cv
cp
f
289.59 551.492 mo
289.586 551.598 289.57 551.687 289.535 551.758 cv
289.5 551.836 289.453 551.895 289.398 551.937 cv
289.34 551.988 289.277 552.023 289.211 552.039 cv
289.137 552.062 289.066 552.07 289.004 552.07 cv
288.559 552.07 li
288.418 552.07 288.297 552.059 288.191 552.027 cv
288.086 552.004 287.988 551.949 287.895 551.871 cv
287.801 551.797 287.707 551.695 287.613 551.562 cv
287.52 551.434 287.418 551.27 287.313 551.066 cv
284.238 545.328 li
284.074 545.035 283.91 544.727 283.75 544.398 cv
283.582 544.078 283.43 543.762 283.293 543.453 cv
283.277 543.453 li
283.285 543.828 283.293 544.211 283.301 544.598 cv
283.305 544.988 283.305 545.375 283.309 545.758 cv
283.309 551.844 li
283.305 551.883 283.293 551.918 283.273 551.949 cv
283.25 551.984 283.215 552.012 283.164 552.027 cv
283.109 552.047 283.039 552.059 282.957 552.074 cv
282.871 552.086 282.766 552.094 282.637 552.094 cv
282.5 552.094 282.391 552.086 282.309 552.074 cv
282.223 552.059 282.156 552.047 282.109 552.027 cv
282.059 552.012 282.023 551.984 282 551.949 cv
281.977 551.918 281.965 551.883 281.969 551.844 cv
281.969 542.539 li
281.965 542.332 282.023 542.184 282.145 542.094 cv
282.262 542.008 282.391 541.965 282.531 541.961 cv
283.191 541.961 li
283.344 541.965 283.477 541.977 283.582 542 cv
283.684 542.027 283.777 542.07 283.863 542.129 cv
283.945 542.191 284.023 542.273 284.105 542.379 cv
284.18 542.488 284.262 542.625 284.348 542.781 cv
286.715 547.207 li
286.859 547.48 287 547.746 287.137 548 cv
287.27 548.258 287.398 548.512 287.527 548.758 cv
287.648 549.012 287.773 549.258 287.898 549.496 cv
288.02 549.738 288.141 549.98 288.266 550.223 cv
288.273 550.223 li
288.262 549.816 288.254 549.387 288.254 548.941 cv
288.246 548.496 288.246 548.07 288.25 547.66 cv
288.25 542.187 li
288.246 542.152 288.258 542.117 288.281 542.086 cv
288.305 542.055 288.34 542.027 288.395 542.004 cv
288.441 541.98 288.512 541.965 288.598 541.953 cv
288.684 541.945 288.793 541.941 288.934 541.937 cv
289.051 541.941 289.156 541.945 289.246 541.953 cv
289.332 541.965 289.398 541.98 289.449 542.004 cv
289.496 542.027 289.531 542.055 289.555 542.086 cv
289.574 542.117 289.586 542.152 289.59 542.187 cv
cp
f
298.141 551.852 mo
298.137 551.898 298.129 551.934 298.113 551.957 cv
298.094 551.988 298.059 552.012 298.016 552.031 cv
297.969 552.051 297.91 552.062 297.836 552.078 cv
297.758 552.086 297.664 552.094 297.559 552.094 cv
297.434 552.094 297.336 552.086 297.266 552.078 cv
297.188 552.062 297.129 552.051 297.086 552.031 cv
297.039 552.012 297.008 551.988 296.996 551.957 cv
296.977 551.934 296.969 551.898 296.973 551.852 cv
296.973 550.926 li
296.57 551.371 296.176 551.691 295.789 551.891 cv
295.395 552.094 295 552.191 294.605 552.195 cv
294.133 552.191 293.738 552.117 293.422 551.961 cv
293.102 551.809 292.844 551.598 292.648 551.328 cv
292.445 551.062 292.305 550.75 292.223 550.391 cv
292.133 550.035 292.09 549.602 292.094 549.094 cv
292.094 544.84 li
292.09 544.801 292.098 544.766 292.121 544.734 cv
292.137 544.707 292.172 544.684 292.227 544.656 cv
292.273 544.637 292.344 544.621 292.43 544.609 cv
292.512 544.605 292.613 544.602 292.742 544.598 cv
292.863 544.602 292.969 544.605 293.055 544.609 cv
293.137 544.621 293.203 544.637 293.25 544.656 cv
293.297 544.684 293.332 544.707 293.355 544.734 cv
293.375 544.766 293.383 544.801 293.387 544.84 cv
293.387 548.922 li
293.383 549.336 293.414 549.664 293.477 549.91 cv
293.535 550.156 293.625 550.367 293.75 550.539 cv
293.867 550.719 294.023 550.852 294.215 550.945 cv
294.398 551.043 294.617 551.094 294.867 551.09 cv
295.188 551.094 295.508 550.977 295.832 550.746 cv
296.148 550.52 296.488 550.184 296.848 549.738 cv
296.848 544.84 li
296.848 544.801 296.855 544.766 296.875 544.734 cv
296.891 544.707 296.926 544.684 296.98 544.656 cv
297.031 544.637 297.098 544.621 297.18 544.609 cv
297.258 544.605 297.363 544.602 297.496 544.598 cv
297.617 544.602 297.723 544.605 297.809 544.609 cv
297.891 544.621 297.953 544.637 298 544.656 cv
298.043 544.684 298.078 544.707 298.105 544.734 cv
298.125 544.766 298.137 544.801 298.141 544.84 cv
cp
f
310.918 551.852 mo
310.914 551.898 310.906 551.934 310.887 551.957 cv
310.863 551.988 310.828 552.012 310.785 552.031 cv
310.734 552.051 310.668 552.062 310.59 552.078 cv
310.504 552.086 310.402 552.094 310.277 552.094 cv
310.145 552.094 310.035 552.086 309.957 552.078 cv
309.871 552.062 309.805 552.051 309.758 552.031 cv
309.703 552.012 309.668 551.988 309.652 551.957 cv
309.629 551.934 309.621 551.898 309.621 551.852 cv
309.621 547.59 li
309.621 547.297 309.594 547.027 309.543 546.781 cv
309.488 546.539 309.406 546.328 309.293 546.148 cv
309.18 545.973 309.035 545.836 308.859 545.742 cv
308.68 545.648 308.469 545.602 308.234 545.602 cv
307.938 545.602 307.641 545.719 307.344 545.945 cv
307.039 546.18 306.711 546.512 306.355 546.949 cv
306.355 551.852 li
306.352 551.898 306.34 551.934 306.324 551.957 cv
306.301 551.988 306.27 552.012 306.223 552.031 cv
306.172 552.051 306.105 552.062 306.023 552.078 cv
305.938 552.086 305.832 552.094 305.711 552.094 cv
305.59 552.094 305.488 552.086 305.402 552.078 cv
305.316 552.062 305.246 552.051 305.199 552.031 cv
305.145 552.012 305.113 551.988 305.098 551.957 cv
305.078 551.934 305.066 551.898 305.07 551.852 cv
305.07 547.59 li
305.066 547.297 305.039 547.027 304.984 546.781 cv
304.926 546.539 304.84 546.328 304.727 546.148 cv
304.613 545.973 304.469 545.836 304.297 545.742 cv
304.117 545.648 303.91 545.602 303.676 545.602 cv
303.375 545.602 303.078 545.719 302.777 545.945 cv
302.477 546.18 302.148 546.512 301.797 546.949 cv
301.797 551.852 li
301.793 551.898 301.781 551.934 301.766 551.957 cv
301.742 551.988 301.711 552.012 301.664 552.031 cv
301.617 552.051 301.551 552.062 301.473 552.078 cv
301.387 552.086 301.281 552.094 301.152 552.094 cv
301.023 552.094 300.918 552.086 300.84 552.078 cv
300.754 552.062 300.688 552.051 300.641 552.031 cv
300.586 552.012 300.555 551.988 300.539 551.957 cv
300.52 551.934 300.508 551.898 300.512 551.852 cv
300.512 544.84 li
300.508 544.801 300.516 544.766 300.535 544.734 cv
300.547 544.707 300.578 544.684 300.629 544.656 cv
300.672 544.637 300.734 544.621 300.809 544.609 cv
300.879 544.605 300.973 544.602 301.098 544.598 cv
301.207 544.602 301.305 544.605 301.383 544.609 cv
301.457 544.621 301.516 544.637 301.559 544.656 cv
301.598 544.684 301.625 544.707 301.645 544.734 cv
301.66 544.766 301.668 544.801 301.672 544.84 cv
301.672 545.766 li
302.063 545.324 302.445 545.004 302.82 544.797 cv
303.188 544.594 303.566 544.488 303.949 544.488 cv
304.238 544.488 304.496 544.523 304.73 544.59 cv
304.957 544.66 305.164 544.754 305.344 544.875 cv
305.52 544.996 305.668 545.141 305.797 545.309 cv
305.918 545.48 306.023 545.672 306.109 545.875 cv
306.34 545.625 306.563 545.41 306.773 545.23 cv
306.984 545.059 307.188 544.914 307.383 544.801 cv
307.578 544.695 307.766 544.617 307.949 544.562 cv
308.133 544.516 308.32 544.488 308.508 544.488 cv
308.961 544.488 309.34 544.57 309.645 544.727 cv
309.949 544.891 310.195 545.102 310.391 545.363 cv
310.578 545.629 310.715 545.937 310.797 546.293 cv
310.875 546.648 310.914 547.023 310.918 547.418 cv
cp
f
319.715 548.25 mo
319.711 548.859 319.645 549.41 319.516 549.895 cv
319.379 550.383 319.184 550.797 318.93 551.137 cv
318.672 551.48 318.355 551.742 317.984 551.922 cv
317.609 552.105 317.184 552.191 316.699 552.195 cv
316.473 552.191 316.266 552.172 316.078 552.129 cv
315.891 552.082 315.703 552.012 315.523 551.914 cv
315.336 551.816 315.156 551.691 314.977 551.539 cv
314.793 551.391 314.602 551.211 314.402 550.996 cv
314.402 551.852 li
314.402 551.898 314.391 551.934 314.371 551.961 cv
314.348 551.996 314.313 552.02 314.27 552.035 cv
314.219 552.051 314.16 552.062 314.094 552.078 cv
314.02 552.086 313.93 552.094 313.824 552.094 cv
313.715 552.094 313.629 552.086 313.559 552.078 cv
313.484 552.062 313.422 552.051 313.379 552.035 cv
313.328 552.02 313.297 551.996 313.285 551.961 cv
313.266 551.934 313.258 551.898 313.262 551.852 cv
313.262 541.441 li
313.258 541.402 313.27 541.367 313.289 541.332 cv
313.305 541.305 313.336 541.277 313.391 541.254 cv
313.438 541.234 313.504 541.219 313.59 541.207 cv
313.668 541.199 313.773 541.195 313.902 541.191 cv
314.031 541.195 314.137 541.199 314.223 541.207 cv
314.301 541.219 314.367 541.234 314.414 541.254 cv
314.461 541.277 314.492 541.305 314.516 541.332 cv
314.531 541.367 314.543 541.402 314.547 541.441 cv
314.547 545.641 li
314.754 545.43 314.957 545.25 315.152 545.105 cv
315.348 544.961 315.535 544.844 315.723 544.75 cv
315.906 544.664 316.094 544.598 316.285 544.551 cv
316.469 544.512 316.668 544.488 316.879 544.488 cv
317.383 544.488 317.816 544.59 318.184 544.793 cv
318.543 544.996 318.836 545.27 319.063 545.605 cv
319.285 545.949 319.453 546.348 319.559 546.805 cv
319.66 547.262 319.711 547.742 319.715 548.25 cv
cp
318.383 548.398 mo
318.379 548.043 318.352 547.695 318.301 547.355 cv
318.242 547.02 318.148 546.723 318.012 546.461 cv
317.875 546.203 317.695 545.992 317.473 545.832 cv
317.246 545.676 316.965 545.598 316.633 545.594 cv
316.465 545.598 316.301 545.621 316.141 545.664 cv
315.977 545.715 315.813 545.793 315.645 545.898 cv
315.477 546.012 315.301 546.152 315.125 546.32 cv
314.941 546.496 314.75 546.711 314.547 546.965 cv
314.547 549.762 li
314.902 550.195 315.242 550.527 315.566 550.75 cv
315.891 550.98 316.227 551.094 316.578 551.09 cv
316.898 551.094 317.176 551.016 317.41 550.855 cv
317.637 550.703 317.824 550.496 317.969 550.234 cv
318.113 549.98 318.219 549.691 318.285 549.371 cv
318.348 549.055 318.379 548.73 318.383 548.398 cv
cp
f
327.625 548.043 mo
327.621 548.246 327.57 548.387 327.473 548.473 cv
327.367 548.559 327.25 548.602 327.125 548.602 cv
322.508 548.602 li
322.504 548.992 322.543 549.344 322.625 549.656 cv
322.699 549.969 322.832 550.238 323.016 550.457 cv
323.195 550.684 323.43 550.855 323.727 550.973 cv
324.016 551.098 324.375 551.156 324.801 551.152 cv
325.133 551.156 325.43 551.129 325.691 551.07 cv
325.953 551.02 326.18 550.957 326.371 550.887 cv
326.559 550.82 326.715 550.762 326.84 550.703 cv
326.961 550.652 327.055 550.625 327.117 550.621 cv
327.152 550.625 327.184 550.633 327.215 550.648 cv
327.242 550.668 327.266 550.695 327.285 550.73 cv
327.297 550.77 327.309 550.82 327.32 550.883 cv
327.324 550.949 327.328 551.027 327.332 551.121 cv
327.328 551.191 327.324 551.25 327.324 551.297 cv
327.316 551.344 327.313 551.387 327.305 551.426 cv
327.297 551.465 327.281 551.5 327.266 551.531 cv
327.242 551.562 327.219 551.594 327.195 551.621 cv
327.164 551.652 327.082 551.699 326.941 551.762 cv
326.801 551.828 326.617 551.891 326.395 551.953 cv
326.168 552.016 325.91 552.07 325.617 552.121 cv
325.324 552.168 325.012 552.191 324.68 552.195 cv
324.102 552.191 323.594 552.113 323.164 551.953 cv
322.727 551.793 322.363 551.555 322.07 551.238 cv
321.77 550.922 321.547 550.527 321.398 550.047 cv
321.25 549.57 321.176 549.012 321.176 548.375 cv
321.176 547.777 321.25 547.238 321.406 546.754 cv
321.559 546.277 321.785 545.867 322.082 545.531 cv
322.375 545.195 322.73 544.937 323.145 544.758 cv
323.559 544.578 324.023 544.488 324.539 544.488 cv
325.09 544.488 325.559 544.578 325.945 544.754 cv
326.332 544.934 326.648 545.172 326.902 545.469 cv
327.148 545.77 327.332 546.121 327.449 546.52 cv
327.563 546.926 327.621 547.355 327.625 547.809 cv
cp
326.332 547.66 mo
326.348 546.984 326.195 546.453 325.879 546.07 cv
325.563 545.687 325.094 545.496 324.477 545.492 cv
324.152 545.496 323.871 545.555 323.633 545.672 cv
323.391 545.793 323.191 545.953 323.031 546.148 cv
322.867 546.348 322.742 546.578 322.656 546.84 cv
322.566 547.102 322.516 547.375 322.508 547.66 cv
cp
f
333.691 545.297 mo
333.688 545.414 333.688 545.512 333.684 545.586 cv
333.676 545.668 333.664 545.73 333.652 545.77 cv
333.633 545.816 333.613 545.848 333.594 545.871 cv
333.566 545.895 333.535 545.906 333.496 545.906 cv
333.453 545.906 333.402 545.895 333.344 545.871 cv
333.281 545.848 333.211 545.824 333.141 545.801 cv
333.063 545.777 332.98 545.758 332.887 545.734 cv
332.793 545.719 332.691 545.707 332.582 545.703 cv
332.449 545.707 332.32 545.734 332.199 545.781 cv
332.074 545.836 331.945 545.922 331.809 546.039 cv
331.668 546.164 331.523 546.32 331.375 546.516 cv
331.223 546.711 331.055 546.953 330.875 547.238 cv
330.875 551.852 li
330.871 551.898 330.859 551.934 330.844 551.957 cv
330.82 551.988 330.789 552.012 330.742 552.031 cv
330.695 552.051 330.629 552.062 330.551 552.078 cv
330.465 552.086 330.359 552.094 330.23 552.094 cv
330.102 552.094 329.996 552.086 329.918 552.078 cv
329.832 552.062 329.766 552.051 329.719 552.031 cv
329.664 552.012 329.633 551.988 329.617 551.957 cv
329.598 551.934 329.586 551.898 329.59 551.852 cv
329.59 544.84 li
329.586 544.801 329.594 544.766 329.613 544.734 cv
329.625 544.707 329.656 544.684 329.707 544.656 cv
329.75 544.637 329.813 544.621 329.887 544.609 cv
329.957 544.605 330.051 544.602 330.176 544.598 cv
330.285 544.602 330.383 544.605 330.461 544.609 cv
330.535 544.621 330.594 544.637 330.637 544.656 cv
330.676 544.684 330.703 544.707 330.723 544.734 cv
330.738 544.766 330.746 544.801 330.75 544.84 cv
330.75 545.859 li
330.938 545.578 331.121 545.352 331.293 545.176 cv
331.461 545 331.621 544.859 331.773 544.758 cv
331.922 544.656 332.07 544.586 332.219 544.547 cv
332.367 544.508 332.516 544.488 332.668 544.488 cv
332.734 544.488 332.813 544.492 332.898 544.5 cv
332.984 544.508 333.074 544.523 333.168 544.543 cv
333.262 544.566 333.344 544.59 333.422 544.613 cv
333.492 544.641 333.547 544.668 333.582 544.691 cv
333.609 544.723 333.629 544.746 333.645 544.766 cv
333.652 544.793 333.664 544.824 333.672 544.855 cv
333.68 544.895 333.684 544.945 333.688 545.016 cv
333.688 545.086 333.688 545.18 333.691 545.297 cv
cp
f
345.449 548.266 mo
345.445 548.844 345.371 549.371 345.223 549.848 cv
345.07 550.332 344.844 550.746 344.547 551.09 cv
344.246 551.441 343.871 551.711 343.426 551.902 cv
342.973 552.098 342.453 552.191 341.863 552.195 cv
341.285 552.191 340.781 552.109 340.355 551.937 cv
339.926 551.77 339.57 551.52 339.285 551.191 cv
338.996 550.863 338.781 550.469 338.645 550 cv
338.504 549.535 338.438 549.004 338.438 548.406 cv
338.438 547.84 338.508 547.312 338.656 546.832 cv
338.801 546.352 339.027 545.937 339.328 545.586 cv
339.625 545.238 339.996 544.969 340.445 544.777 cv
340.891 544.586 341.414 544.488 342.012 544.488 cv
342.59 544.488 343.09 544.574 343.52 544.746 cv
343.945 544.918 344.305 545.168 344.59 545.496 cv
344.875 545.824 345.09 546.223 345.234 546.687 cv
345.375 547.156 345.445 547.684 345.449 548.266 cv
cp
344.117 548.352 mo
344.113 547.977 344.078 547.617 344.012 547.277 cv
343.938 546.941 343.82 546.648 343.66 546.391 cv
343.496 546.141 343.277 545.937 343 545.785 cv
342.719 545.641 342.371 545.566 341.961 545.562 cv
341.574 545.566 341.246 545.633 340.973 545.766 cv
340.695 545.902 340.469 546.094 340.293 546.34 cv
340.113 546.586 339.98 546.879 339.898 547.215 cv
339.809 547.555 339.766 547.922 339.77 548.32 cv
339.766 548.707 339.801 549.07 339.875 549.406 cv
339.941 549.746 340.059 550.039 340.227 550.289 cv
340.391 550.543 340.613 550.746 340.891 550.891 cv
341.168 551.043 341.516 551.117 341.93 551.113 cv
342.305 551.117 342.633 551.047 342.914 550.91 cv
343.191 550.777 343.418 550.59 343.598 550.34 cv
343.773 550.098 343.902 549.805 343.988 549.469 cv
344.07 549.133 344.113 548.762 344.117 548.352 cv
cp
f
351.18 541.953 mo
351.176 542.055 351.172 542.133 351.164 542.191 cv
351.152 542.254 351.141 542.305 351.129 542.336 cv
351.113 542.375 351.098 542.398 351.078 542.41 cv
351.055 542.426 351.027 542.434 351 542.43 cv
350.961 542.434 350.914 542.422 350.863 542.395 cv
350.805 542.375 350.738 542.348 350.664 542.316 cv
350.582 542.289 350.492 542.262 350.387 542.238 cv
350.277 542.215 350.152 542.203 350.02 542.203 cv
349.824 542.203 349.66 542.234 349.527 542.297 cv
349.387 542.359 349.277 542.457 349.199 542.59 cv
349.113 542.723 349.055 542.895 349.02 543.105 cv
348.98 543.316 348.961 543.574 348.965 543.871 cv
348.965 544.637 li
350.531 544.637 li
350.57 544.641 350.605 544.648 350.637 544.664 cv
350.664 544.684 350.691 544.715 350.715 544.758 cv
350.738 544.805 350.754 544.863 350.77 544.926 cv
350.777 544.996 350.785 545.078 350.789 545.172 cv
350.785 545.363 350.762 545.496 350.719 545.578 cv
350.668 545.664 350.605 545.707 350.531 545.703 cv
348.965 545.703 li
348.965 551.852 li
348.961 551.898 348.953 551.934 348.934 551.957 cv
348.91 551.988 348.875 552.012 348.828 552.031 cv
348.777 552.051 348.711 552.062 348.629 552.078 cv
348.543 552.086 348.438 552.094 348.32 552.094 cv
348.191 552.094 348.09 552.086 348.008 552.078 cv
347.922 552.062 347.855 552.051 347.809 552.031 cv
347.758 552.012 347.723 551.988 347.703 551.957 cv
347.68 551.934 347.668 551.898 347.672 551.852 cv
347.672 545.703 li
346.684 545.703 li
346.598 545.707 346.535 545.664 346.496 545.578 cv
346.453 545.496 346.43 545.363 346.434 545.172 cv
346.43 545.078 346.438 544.996 346.449 544.926 cv
346.457 544.863 346.473 544.805 346.496 544.758 cv
346.516 544.715 346.539 544.684 346.574 544.664 cv
346.602 544.648 346.641 544.641 346.684 544.637 cv
347.672 544.637 li
347.672 543.91 li
347.668 543.426 347.715 543.008 347.809 542.652 cv
347.898 542.305 348.035 542.016 348.223 541.793 cv
348.406 541.57 348.641 541.406 348.93 541.297 cv
349.211 541.191 349.547 541.137 349.934 541.137 cv
350.109 541.137 350.285 541.156 350.461 541.187 cv
350.629 541.227 350.762 541.262 350.859 541.297 cv
350.949 541.34 351.012 541.375 351.047 541.402 cv
351.074 541.437 351.102 541.477 351.125 541.523 cv
351.145 541.574 351.156 541.637 351.168 541.703 cv
351.172 541.777 351.176 541.859 351.18 541.953 cv
cp
f
361.379 549.219 mo
361.375 549.691 361.289 550.113 361.117 550.48 cv
360.941 550.855 360.699 551.168 360.391 551.422 cv
360.082 551.68 359.719 551.871 359.301 552 cv
358.879 552.129 358.43 552.191 357.949 552.195 cv
357.609 552.191 357.293 552.164 357.008 552.109 cv
356.719 552.051 356.465 551.984 356.238 551.898 cv
356.012 551.82 355.82 551.734 355.668 551.641 cv
355.512 551.555 355.406 551.477 355.348 551.414 cv
355.289 551.352 355.246 551.273 355.219 551.18 cv
355.188 551.086 355.172 550.957 355.176 550.793 cv
355.172 550.68 355.176 550.586 355.191 550.508 cv
355.199 550.434 355.215 550.371 355.238 550.324 cv
355.254 550.277 355.281 550.246 355.316 550.227 cv
355.344 550.211 355.379 550.203 355.422 550.199 cv
355.492 550.203 355.594 550.246 355.73 550.332 cv
355.859 550.422 356.031 550.52 356.242 550.621 cv
356.449 550.73 356.699 550.828 356.992 550.914 cv
357.285 551.008 357.625 551.051 358.012 551.051 cv
358.301 551.051 358.566 551.012 358.809 550.934 cv
359.047 550.855 359.254 550.746 359.434 550.602 cv
359.605 550.461 359.742 550.285 359.836 550.074 cv
359.93 549.867 359.977 549.633 359.977 549.367 cv
359.977 549.086 359.91 548.84 359.781 548.633 cv
359.648 548.434 359.477 548.258 359.266 548.102 cv
359.051 547.953 358.809 547.812 358.535 547.68 cv
358.262 547.555 357.98 547.422 357.699 547.289 cv
357.41 547.156 357.133 547.012 356.863 546.848 cv
356.594 546.691 356.352 546.5 356.141 546.281 cv
355.922 546.062 355.75 545.809 355.621 545.512 cv
355.484 545.223 355.418 544.871 355.422 544.457 cv
355.418 544.039 355.496 543.664 355.652 543.332 cv
355.805 543.004 356.016 542.727 356.293 542.5 cv
356.563 542.281 356.887 542.109 357.266 541.992 cv
357.641 541.875 358.051 541.816 358.488 541.816 cv
358.707 541.816 358.93 541.836 359.16 541.875 cv
359.383 541.914 359.594 541.965 359.797 542.027 cv
359.992 542.094 360.172 542.168 360.332 542.246 cv
360.484 542.328 360.586 542.395 360.641 542.441 cv
360.688 542.496 360.723 542.535 360.738 542.559 cv
360.754 542.59 360.766 542.625 360.777 542.668 cv
360.785 542.715 360.793 542.77 360.801 542.828 cv
360.805 542.895 360.809 542.973 360.809 543.07 cv
360.809 543.164 360.805 543.25 360.797 543.32 cv
360.789 543.398 360.777 543.457 360.762 543.504 cv
360.746 543.551 360.723 543.586 360.695 543.609 cv
360.664 543.633 360.633 543.645 360.598 543.645 cv
360.539 543.645 360.449 543.609 360.328 543.539 cv
360.203 543.469 360.051 543.387 359.879 543.293 cv
359.699 543.203 359.492 543.121 359.254 543.043 cv
359.008 542.969 358.738 542.93 358.441 542.93 cv
358.16 542.93 357.914 542.969 357.707 543.043 cv
357.496 543.121 357.324 543.223 357.191 543.344 cv
357.055 543.469 356.953 543.613 356.887 543.785 cv
356.82 543.957 356.789 544.141 356.789 544.332 cv
356.789 544.617 356.852 544.859 356.98 545.059 cv
357.109 545.262 357.281 545.441 357.5 545.594 cv
357.711 545.754 357.957 545.895 358.234 546.023 cv
358.508 546.156 358.789 546.289 359.078 546.418 cv
359.363 546.551 359.645 546.695 359.918 546.852 cv
360.191 547.012 360.438 547.199 360.656 547.414 cv
360.871 547.633 361.043 547.887 361.18 548.18 cv
361.309 548.473 361.375 548.82 361.379 549.219 cv
cp
f
369.145 551.852 mo
369.141 551.898 369.133 551.934 369.117 551.957 cv
369.098 551.988 369.063 552.012 369.02 552.031 cv
368.973 552.051 368.914 552.062 368.84 552.078 cv
368.762 552.086 368.668 552.094 368.563 552.094 cv
368.438 552.094 368.34 552.086 368.27 552.078 cv
368.191 552.062 368.133 552.051 368.09 552.031 cv
368.043 552.012 368.012 551.988 368 551.957 cv
367.98 551.934 367.973 551.898 367.977 551.852 cv
367.977 550.926 li
367.574 551.371 367.18 551.691 366.793 551.891 cv
366.398 552.094 366.004 552.191 365.609 552.195 cv
365.137 552.191 364.742 552.117 364.426 551.961 cv
364.105 551.809 363.848 551.598 363.652 551.328 cv
363.449 551.062 363.309 550.75 363.227 550.391 cv
363.137 550.035 363.094 549.602 363.098 549.094 cv
363.098 544.84 li
363.094 544.801 363.102 544.766 363.125 544.734 cv
363.141 544.707 363.176 544.684 363.23 544.656 cv
363.277 544.637 363.348 544.621 363.434 544.609 cv
363.516 544.605 363.617 544.602 363.746 544.598 cv
363.867 544.602 363.973 544.605 364.059 544.609 cv
364.141 544.621 364.207 544.637 364.254 544.656 cv
364.301 544.684 364.336 544.707 364.359 544.734 cv
364.379 544.766 364.387 544.801 364.391 544.84 cv
364.391 548.922 li
364.387 549.336 364.418 549.664 364.48 549.91 cv
364.539 550.156 364.629 550.367 364.754 550.539 cv
364.871 550.719 365.027 550.852 365.219 550.945 cv
365.402 551.043 365.621 551.094 365.871 551.09 cv
366.191 551.094 366.512 550.977 366.836 550.746 cv
367.152 550.52 367.492 550.184 367.852 549.738 cv
367.852 544.84 li
367.852 544.801 367.859 544.766 367.879 544.734 cv
367.895 544.707 367.93 544.684 367.984 544.656 cv
368.035 544.637 368.102 544.621 368.184 544.609 cv
368.262 544.605 368.367 544.602 368.5 544.598 cv
368.621 544.602 368.727 544.605 368.813 544.609 cv
368.895 544.621 368.957 544.637 369.004 544.656 cv
369.047 544.684 369.082 544.707 369.109 544.734 cv
369.129 544.766 369.141 544.801 369.145 544.84 cv
cp
f
378 548.25 mo
377.996 548.859 377.93 549.41 377.801 549.895 cv
377.664 550.383 377.469 550.797 377.215 551.137 cv
376.957 551.48 376.641 551.742 376.27 551.922 cv
375.895 552.105 375.469 552.191 374.984 552.195 cv
374.758 552.191 374.551 552.172 374.363 552.129 cv
374.176 552.082 373.988 552.012 373.809 551.914 cv
373.621 551.816 373.441 551.691 373.262 551.539 cv
373.078 551.391 372.887 551.211 372.688 550.996 cv
372.688 551.852 li
372.688 551.898 372.676 551.934 372.656 551.961 cv
372.633 551.996 372.598 552.02 372.555 552.035 cv
372.504 552.051 372.445 552.062 372.379 552.078 cv
372.305 552.086 372.215 552.094 372.109 552.094 cv
372 552.094 371.914 552.086 371.844 552.078 cv
371.77 552.062 371.707 552.051 371.664 552.035 cv
371.613 552.02 371.582 551.996 371.57 551.961 cv
371.551 551.934 371.543 551.898 371.547 551.852 cv
371.547 541.441 li
371.543 541.402 371.555 541.367 371.574 541.332 cv
371.59 541.305 371.621 541.277 371.676 541.254 cv
371.723 541.234 371.789 541.219 371.875 541.207 cv
371.953 541.199 372.059 541.195 372.188 541.191 cv
372.316 541.195 372.422 541.199 372.508 541.207 cv
372.586 541.219 372.652 541.234 372.699 541.254 cv
372.746 541.277 372.777 541.305 372.801 541.332 cv
372.816 541.367 372.828 541.402 372.832 541.441 cv
372.832 545.641 li
373.039 545.43 373.242 545.25 373.438 545.105 cv
373.633 544.961 373.82 544.844 374.008 544.75 cv
374.191 544.664 374.379 544.598 374.57 544.551 cv
374.754 544.512 374.953 544.488 375.164 544.488 cv
375.668 544.488 376.102 544.59 376.469 544.793 cv
376.828 544.996 377.121 545.27 377.348 545.605 cv
377.57 545.949 377.738 546.348 377.844 546.805 cv
377.945 547.262 377.996 547.742 378 548.25 cv
cp
376.668 548.398 mo
376.664 548.043 376.637 547.695 376.586 547.355 cv
376.527 547.02 376.434 546.723 376.297 546.461 cv
376.16 546.203 375.98 545.992 375.758 545.832 cv
375.531 545.676 375.25 545.598 374.918 545.594 cv
374.75 545.598 374.586 545.621 374.426 545.664 cv
374.262 545.715 374.098 545.793 373.93 545.898 cv
373.762 546.012 373.586 546.152 373.41 546.32 cv
373.227 546.496 373.035 546.711 372.832 546.965 cv
372.832 549.762 li
373.188 550.195 373.527 550.527 373.852 550.75 cv
374.176 550.98 374.512 551.094 374.863 551.09 cv
375.184 551.094 375.461 551.016 375.695 550.855 cv
375.922 550.703 376.109 550.496 376.254 550.234 cv
376.398 549.98 376.504 549.691 376.57 549.371 cv
376.633 549.055 376.664 548.73 376.668 548.398 cv
cp
f
383.168 548.113 mo
383.168 548.316 383.145 548.453 383.098 548.531 cv
383.051 548.609 382.98 548.648 382.895 548.648 cv
379.637 548.648 li
379.543 548.648 379.477 548.609 379.43 548.527 cv
379.383 548.449 379.359 548.312 379.359 548.113 cv
379.359 547.918 379.383 547.777 379.43 547.699 cv
379.477 547.621 379.543 547.582 379.637 547.582 cv
382.895 547.582 li
382.934 547.582 382.973 547.59 383.008 547.605 cv
383.039 547.621 383.066 547.652 383.094 547.695 cv
383.113 547.742 383.133 547.797 383.148 547.863 cv
383.16 547.934 383.168 548.02 383.168 548.113 cv
cp
f
386.418 551.844 mo
386.414 551.887 386.406 551.922 386.387 551.953 cv
386.363 551.984 386.324 552.012 386.277 552.027 cv
386.223 552.047 386.156 552.059 386.07 552.074 cv
385.984 552.086 385.875 552.094 385.75 552.094 cv
385.621 552.094 385.516 552.086 385.43 552.074 cv
385.34 552.059 385.27 552.047 385.219 552.027 cv
385.164 552.012 385.129 551.984 385.109 551.953 cv
385.086 551.922 385.074 551.887 385.078 551.844 cv
385.078 542.164 li
385.074 542.125 385.086 542.09 385.113 542.055 cv
385.133 542.027 385.172 542 385.23 541.98 cv
385.281 541.965 385.352 541.949 385.441 541.934 cv
385.523 541.922 385.625 541.918 385.75 541.914 cv
385.875 541.918 385.984 541.922 386.07 541.934 cv
386.156 541.949 386.223 541.965 386.277 541.98 cv
386.324 542 386.363 542.027 386.387 542.055 cv
386.406 542.09 386.414 542.125 386.418 542.164 cv
cp
f
399.406 551.852 mo
399.402 551.898 399.395 551.934 399.375 551.957 cv
399.352 551.988 399.316 552.012 399.273 552.031 cv
399.223 552.051 399.156 552.062 399.078 552.078 cv
398.992 552.086 398.891 552.094 398.766 552.094 cv
398.633 552.094 398.523 552.086 398.445 552.078 cv
398.359 552.062 398.293 552.051 398.246 552.031 cv
398.191 552.012 398.156 551.988 398.141 551.957 cv
398.117 551.934 398.109 551.898 398.109 551.852 cv
398.109 547.59 li
398.109 547.297 398.082 547.027 398.031 546.781 cv
397.977 546.539 397.895 546.328 397.781 546.148 cv
397.668 545.973 397.523 545.836 397.348 545.742 cv
397.168 545.648 396.957 545.602 396.723 545.602 cv
396.426 545.602 396.129 545.719 395.832 545.945 cv
395.527 546.18 395.199 546.512 394.844 546.949 cv
394.844 551.852 li
394.84 551.898 394.828 551.934 394.813 551.957 cv
394.789 551.988 394.758 552.012 394.711 552.031 cv
394.66 552.051 394.594 552.062 394.512 552.078 cv
394.426 552.086 394.32 552.094 394.199 552.094 cv
394.078 552.094 393.977 552.086 393.891 552.078 cv
393.805 552.062 393.734 552.051 393.688 552.031 cv
393.633 552.012 393.602 551.988 393.586 551.957 cv
393.566 551.934 393.555 551.898 393.559 551.852 cv
393.559 547.59 li
393.555 547.297 393.527 547.027 393.473 546.781 cv
393.414 546.539 393.328 546.328 393.215 546.148 cv
393.102 545.973 392.957 545.836 392.785 545.742 cv
392.605 545.648 392.398 545.602 392.164 545.602 cv
391.863 545.602 391.566 545.719 391.266 545.945 cv
390.965 546.18 390.637 546.512 390.285 546.949 cv
390.285 551.852 li
390.281 551.898 390.27 551.934 390.254 551.957 cv
390.23 551.988 390.199 552.012 390.152 552.031 cv
390.105 552.051 390.039 552.062 389.961 552.078 cv
389.875 552.086 389.77 552.094 389.641 552.094 cv
389.512 552.094 389.406 552.086 389.328 552.078 cv
389.242 552.062 389.176 552.051 389.129 552.031 cv
389.074 552.012 389.043 551.988 389.027 551.957 cv
389.008 551.934 388.996 551.898 389 551.852 cv
389 544.84 li
388.996 544.801 389.004 544.766 389.023 544.734 cv
389.035 544.707 389.066 544.684 389.117 544.656 cv
389.16 544.637 389.223 544.621 389.297 544.609 cv
389.367 544.605 389.461 544.602 389.586 544.598 cv
389.695 544.602 389.793 544.605 389.871 544.609 cv
389.945 544.621 390.004 544.637 390.047 544.656 cv
390.086 544.684 390.113 544.707 390.133 544.734 cv
390.148 544.766 390.156 544.801 390.16 544.84 cv
390.16 545.766 li
390.551 545.324 390.934 545.004 391.309 544.797 cv
391.676 544.594 392.055 544.488 392.438 544.488 cv
392.727 544.488 392.984 544.523 393.219 544.59 cv
393.445 544.66 393.652 544.754 393.832 544.875 cv
394.008 544.996 394.156 545.141 394.285 545.309 cv
394.406 545.48 394.512 545.672 394.598 545.875 cv
394.828 545.625 395.051 545.41 395.262 545.23 cv
395.473 545.059 395.676 544.914 395.871 544.801 cv
396.066 544.695 396.254 544.617 396.438 544.562 cv
396.621 544.516 396.809 544.488 396.996 544.488 cv
397.449 544.488 397.828 544.57 398.133 544.727 cv
398.438 544.891 398.684 545.102 398.879 545.363 cv
399.066 545.629 399.203 545.937 399.285 546.293 cv
399.363 546.648 399.402 547.023 399.406 547.418 cv
cp
f
407.039 551.859 mo
407.035 551.922 407.016 551.969 406.977 552 cv
406.934 552.031 406.875 552.055 406.805 552.07 cv
406.727 552.086 406.621 552.094 406.484 552.094 cv
406.348 552.094 406.238 552.086 406.16 552.07 cv
406.074 552.055 406.016 552.031 405.984 552 cv
405.945 551.969 405.93 551.922 405.934 551.859 cv
405.934 551.16 li
405.625 551.488 405.281 551.742 404.906 551.922 cv
404.527 552.105 404.129 552.191 403.711 552.195 cv
403.336 552.191 403.004 552.145 402.707 552.051 cv
402.41 551.953 402.156 551.816 401.945 551.633 cv
401.734 551.453 401.57 551.23 401.453 550.965 cv
401.336 550.703 401.277 550.402 401.281 550.059 cv
401.277 549.668 401.355 549.324 401.52 549.031 cv
401.676 548.742 401.91 548.5 402.215 548.309 cv
402.516 548.117 402.883 547.973 403.32 547.875 cv
403.754 547.781 404.246 547.734 404.793 547.73 cv
405.762 547.73 li
405.762 547.184 li
405.758 546.914 405.73 546.676 405.676 546.469 cv
405.617 546.262 405.523 546.09 405.398 545.949 cv
405.266 545.812 405.102 545.707 404.902 545.637 cv
404.695 545.566 404.445 545.531 404.156 545.531 cv
403.836 545.531 403.551 545.57 403.301 545.645 cv
403.043 545.723 402.824 545.805 402.637 545.895 cv
402.449 545.988 402.289 546.074 402.164 546.145 cv
402.031 546.223 401.938 546.258 401.879 546.258 cv
401.836 546.258 401.801 546.25 401.77 546.227 cv
401.738 546.211 401.711 546.18 401.688 546.133 cv
401.664 546.094 401.645 546.039 401.637 545.973 cv
401.621 545.91 401.617 545.84 401.621 545.758 cv
401.617 545.633 401.625 545.527 401.648 545.449 cv
401.664 545.375 401.711 545.305 401.781 545.234 cv
401.852 545.168 401.973 545.09 402.145 545 cv
402.316 544.91 402.512 544.828 402.734 544.75 cv
402.957 544.68 403.203 544.617 403.469 544.562 cv
403.734 544.516 404 544.488 404.273 544.488 cv
404.773 544.488 405.203 544.547 405.555 544.66 cv
405.906 544.777 406.191 544.945 406.414 545.164 cv
406.629 545.387 406.789 545.66 406.891 545.984 cv
406.988 546.316 407.035 546.699 407.039 547.129 cv
cp
405.762 548.656 mo
404.66 548.656 li
404.305 548.66 404 548.691 403.742 548.746 cv
403.48 548.809 403.266 548.895 403.094 549.012 cv
402.922 549.129 402.797 549.27 402.719 549.434 cv
402.637 549.598 402.594 549.785 402.598 549.996 cv
402.594 550.363 402.711 550.656 402.941 550.867 cv
403.172 551.086 403.496 551.191 403.914 551.191 cv
404.25 551.191 404.563 551.105 404.852 550.934 cv
405.141 550.762 405.441 550.5 405.762 550.145 cv
cp
f
415.258 545.156 mo
415.254 545.34 415.23 545.473 415.184 545.551 cv
415.133 545.633 415.07 545.672 414.996 545.672 cv
413.988 545.672 li
414.168 545.859 414.297 546.066 414.371 546.293 cv
414.441 546.52 414.477 546.754 414.48 546.996 cv
414.477 547.402 414.41 547.762 414.285 548.074 cv
414.152 548.387 413.969 548.652 413.727 548.863 cv
413.484 549.082 413.195 549.246 412.867 549.359 cv
412.531 549.477 412.164 549.535 411.762 549.531 cv
411.473 549.535 411.199 549.496 410.945 549.418 cv
410.684 549.344 410.488 549.25 410.352 549.133 cv
410.258 549.23 410.18 549.336 410.121 549.453 cv
410.059 549.574 410.027 549.711 410.031 549.863 cv
410.027 550.047 410.113 550.199 410.285 550.316 cv
410.453 550.441 410.676 550.504 410.957 550.512 cv
412.789 550.59 li
413.137 550.602 413.453 550.648 413.746 550.734 cv
414.035 550.82 414.289 550.945 414.504 551.102 cv
414.715 551.262 414.883 551.453 415.004 551.684 cv
415.121 551.918 415.18 552.187 415.184 552.492 cv
415.18 552.812 415.113 553.117 414.98 553.41 cv
414.844 553.699 414.637 553.953 414.359 554.176 cv
414.078 554.395 413.723 554.57 413.293 554.699 cv
412.863 554.824 412.355 554.887 411.77 554.891 cv
411.199 554.887 410.715 554.84 410.32 554.746 cv
409.922 554.648 409.598 554.516 409.344 554.352 cv
409.09 554.184 408.906 553.988 408.793 553.758 cv
408.676 553.523 408.617 553.27 408.621 553.004 cv
408.617 552.832 408.637 552.668 408.684 552.508 cv
408.723 552.344 408.785 552.191 408.871 552.047 cv
408.953 551.902 409.063 551.766 409.191 551.629 cv
409.316 551.5 409.461 551.367 409.633 551.238 cv
409.375 551.109 409.188 550.945 409.066 550.746 cv
408.945 550.551 408.887 550.34 408.887 550.105 cv
408.887 549.793 408.949 549.508 409.078 549.258 cv
409.207 549.008 409.367 548.785 409.563 548.586 cv
409.398 548.395 409.273 548.18 409.18 547.937 cv
409.086 547.699 409.039 547.406 409.039 547.059 cv
409.039 546.664 409.105 546.305 409.242 545.984 cv
409.375 545.668 409.563 545.402 409.805 545.184 cv
410.043 544.969 410.328 544.801 410.664 544.68 cv
410.996 544.566 411.363 544.508 411.762 544.504 cv
411.973 544.508 412.172 544.52 412.355 544.539 cv
412.539 544.566 412.711 544.598 412.875 544.637 cv
414.996 544.637 li
415.082 544.641 415.148 544.684 415.191 544.766 cv
415.234 544.855 415.254 544.984 415.258 545.156 cv
cp
413.25 547.004 mo
413.246 546.531 413.113 546.16 412.855 545.887 cv
412.59 545.621 412.219 545.484 411.738 545.484 cv
411.484 545.484 411.266 545.527 411.086 545.609 cv
410.898 545.695 410.746 545.809 410.625 545.953 cv
410.504 546.102 410.414 546.27 410.355 546.457 cv
410.293 546.645 410.262 546.844 410.266 547.051 cv
410.262 547.516 410.395 547.879 410.656 548.145 cv
410.918 548.41 411.285 548.543 411.762 548.539 cv
412.012 548.543 412.23 548.504 412.422 548.418 cv
412.605 548.34 412.762 548.227 412.887 548.086 cv
413.008 547.945 413.098 547.781 413.16 547.59 cv
413.215 547.406 413.246 547.211 413.25 547.004 cv
cp
413.895 552.562 mo
413.891 552.258 413.766 552.027 413.523 551.863 cv
413.273 551.703 412.941 551.613 412.523 551.602 cv
410.707 551.539 li
410.539 551.672 410.402 551.797 410.301 551.91 cv
410.191 552.027 410.109 552.137 410.047 552.246 cv
409.984 552.352 409.941 552.457 409.918 552.562 cv
409.895 552.664 409.883 552.77 409.883 552.879 cv
409.883 553.215 410.051 553.469 410.395 553.648 cv
410.734 553.82 411.215 553.91 411.832 553.91 cv
412.219 553.91 412.543 553.871 412.809 553.797 cv
413.066 553.719 413.277 553.617 413.441 553.496 cv
413.598 553.367 413.715 553.227 413.789 553.066 cv
413.855 552.906 413.891 552.738 413.895 552.562 cv
cp
f
422.82 548.043 mo
422.816 548.246 422.766 548.387 422.668 548.473 cv
422.563 548.559 422.445 548.602 422.32 548.602 cv
417.703 548.602 li
417.699 548.992 417.738 549.344 417.82 549.656 cv
417.895 549.969 418.027 550.238 418.211 550.457 cv
418.391 550.684 418.625 550.855 418.922 550.973 cv
419.211 551.098 419.57 551.156 419.996 551.152 cv
420.328 551.156 420.625 551.129 420.887 551.07 cv
421.148 551.02 421.375 550.957 421.566 550.887 cv
421.754 550.82 421.91 550.762 422.035 550.703 cv
422.156 550.652 422.25 550.625 422.313 550.621 cv
422.348 550.625 422.379 550.633 422.41 550.648 cv
422.438 550.668 422.461 550.695 422.48 550.73 cv
422.492 550.77 422.504 550.82 422.516 550.883 cv
422.52 550.949 422.523 551.027 422.527 551.121 cv
422.523 551.191 422.52 551.25 422.52 551.297 cv
422.512 551.344 422.508 551.387 422.5 551.426 cv
422.492 551.465 422.477 551.5 422.461 551.531 cv
422.438 551.562 422.414 551.594 422.391 551.621 cv
422.359 551.652 422.277 551.699 422.137 551.762 cv
421.996 551.828 421.813 551.891 421.59 551.953 cv
421.363 552.016 421.105 552.07 420.813 552.121 cv
420.52 552.168 420.207 552.191 419.875 552.195 cv
419.297 552.191 418.789 552.113 418.359 551.953 cv
417.922 551.793 417.559 551.555 417.266 551.238 cv
416.965 550.922 416.742 550.527 416.594 550.047 cv
416.445 549.57 416.371 549.012 416.371 548.375 cv
416.371 547.777 416.445 547.238 416.602 546.754 cv
416.754 546.277 416.98 545.867 417.277 545.531 cv
417.57 545.195 417.926 544.937 418.34 544.758 cv
418.754 544.578 419.219 544.488 419.734 544.488 cv
420.285 544.488 420.754 544.578 421.141 544.754 cv
421.527 544.934 421.844 545.172 422.098 545.469 cv
422.344 545.77 422.527 546.121 422.645 546.52 cv
422.758 546.926 422.816 547.355 422.82 547.809 cv
cp
421.527 547.66 mo
421.543 546.984 421.391 546.453 421.074 546.07 cv
420.758 545.687 420.289 545.496 419.672 545.492 cv
419.348 545.496 419.066 545.555 418.828 545.672 cv
418.586 545.793 418.387 545.953 418.227 546.148 cv
418.063 546.348 417.938 546.578 417.852 546.84 cv
417.762 547.102 417.711 547.375 417.703 547.66 cv
cp
f
429.188 549.941 mo
429.184 550.305 429.117 550.625 428.988 550.902 cv
428.855 551.184 428.668 551.418 428.426 551.609 cv
428.18 551.805 427.887 551.949 427.551 552.047 cv
427.211 552.145 426.84 552.191 426.438 552.195 cv
426.184 552.191 425.945 552.172 425.723 552.137 cv
425.496 552.094 425.297 552.047 425.117 551.988 cv
424.938 551.93 424.785 551.867 424.66 551.801 cv
424.535 551.738 424.441 551.68 424.387 551.625 cv
424.328 551.574 424.289 551.504 424.266 551.406 cv
424.238 551.316 424.227 551.187 424.227 551.027 cv
424.227 550.93 424.23 550.848 424.242 550.777 cv
424.25 550.711 424.262 550.656 424.281 550.613 cv
424.293 550.574 424.316 550.543 424.344 550.523 cv
424.371 550.508 424.402 550.5 424.441 550.496 cv
424.496 550.5 424.582 550.535 424.695 550.602 cv
424.805 550.676 424.941 550.754 425.109 550.832 cv
425.27 550.918 425.461 550.992 425.688 551.062 cv
425.906 551.133 426.164 551.168 426.461 551.168 cv
426.676 551.168 426.875 551.145 427.055 551.098 cv
427.23 551.051 427.383 550.984 427.512 550.891 cv
427.641 550.805 427.742 550.687 427.813 550.543 cv
427.883 550.406 427.918 550.238 427.918 550.043 cv
427.918 549.848 427.867 549.684 427.766 549.547 cv
427.664 549.414 427.527 549.293 427.363 549.187 cv
427.195 549.086 427.012 548.996 426.805 548.91 cv
426.594 548.832 426.379 548.746 426.16 548.656 cv
425.941 548.57 425.727 548.469 425.516 548.355 cv
425.305 548.246 425.113 548.113 424.949 547.949 cv
424.777 547.793 424.645 547.598 424.547 547.371 cv
424.441 547.148 424.391 546.883 424.395 546.57 cv
424.391 546.297 424.445 546.031 424.555 545.777 cv
424.66 545.527 424.82 545.309 425.035 545.117 cv
425.246 544.93 425.512 544.777 425.832 544.66 cv
426.152 544.547 426.523 544.488 426.953 544.488 cv
427.137 544.488 427.324 544.504 427.512 544.535 cv
427.695 544.566 427.863 544.605 428.02 544.652 cv
428.168 544.699 428.297 544.75 428.406 544.805 cv
428.508 544.859 428.59 544.91 428.648 544.949 cv
428.699 544.996 428.734 545.031 428.758 545.059 cv
428.773 545.09 428.789 545.125 428.797 545.16 cv
428.805 545.203 428.813 545.25 428.82 545.305 cv
428.828 545.363 428.832 545.434 428.832 545.516 cv
428.832 545.605 428.828 545.684 428.82 545.746 cv
428.813 545.816 428.797 545.867 428.781 545.906 cv
428.758 545.949 428.738 545.98 428.715 545.996 cv
428.688 546.016 428.656 546.023 428.629 546.023 cv
428.578 546.023 428.512 545.996 428.426 545.937 cv
428.336 545.883 428.223 545.82 428.082 545.754 cv
427.941 545.691 427.773 545.633 427.586 545.57 cv
427.395 545.516 427.18 545.484 426.938 545.484 cv
426.715 545.484 426.523 545.512 426.359 545.559 cv
426.191 545.613 426.055 545.684 425.949 545.77 cv
425.844 545.863 425.762 545.969 425.711 546.094 cv
425.652 546.219 425.625 546.355 425.629 546.5 cv
425.625 546.703 425.676 546.871 425.781 547.008 cv
425.883 547.148 426.02 547.27 426.188 547.371 cv
426.352 547.477 426.543 547.57 426.758 547.652 cv
426.969 547.738 427.184 547.824 427.406 547.91 cv
427.625 548 427.844 548.102 428.063 548.207 cv
428.277 548.316 428.469 548.445 428.637 548.602 cv
428.801 548.758 428.934 548.945 429.035 549.164 cv
429.133 549.383 429.184 549.645 429.188 549.941 cv
cp
f
255.258 12.02 mo
255.254 12.859 255.152 13.609 254.945 14.266 cv
254.738 14.93 254.43 15.488 254.02 15.945 cv
253.609 16.406 253.102 16.758 252.496 16.996 cv
251.891 17.238 251.191 17.355 250.398 17.359 cv
249.609 17.355 248.922 17.254 248.34 17.051 cv
247.754 16.848 247.266 16.535 246.879 16.113 cv
246.488 15.691 246.199 15.156 246.004 14.508 cv
245.809 13.859 245.711 13.09 245.715 12.199 cv
245.711 11.387 245.813 10.656 246.023 10 cv
246.227 9.35199 246.535 8.797 246.949 8.336 cv
247.355 7.883 247.863 7.53101 248.473 7.28497 cv
249.074 7.04303 249.777 6.922 250.582 6.91803 cv
251.344 6.922 252.02 7.02301 252.605 7.22302 cv
253.188 7.42603 253.676 7.73401 254.07 8.15601 cv
254.461 8.578 254.758 9.10901 254.957 9.75 cv
255.156 10.391 255.254 11.148 255.258 12.02 cv
cp
253.109 12.129 mo
253.105 11.602 253.063 11.121 252.984 10.687 cv
252.898 10.254 252.758 9.883 252.559 9.57001 cv
252.355 9.26202 252.09 9.02301 251.758 8.85498 cv
251.426 8.68701 251.012 8.60199 250.516 8.60199 cv
250.008 8.60199 249.586 8.69897 249.25 8.88702 cv
248.914 9.078 248.641 9.328 248.434 9.64502 cv
248.223 9.96503 248.074 10.336 247.992 10.758 cv
247.902 11.18 247.859 11.629 247.863 12.098 cv
247.859 12.652 247.902 13.148 247.988 13.586 cv
248.07 14.027 248.211 14.402 248.41 14.711 cv
248.605 15.023 248.871 15.258 249.203 15.422 cv
249.535 15.586 249.953 15.668 250.461 15.668 cv
250.961 15.668 251.379 15.574 251.719 15.387 cv
252.055 15.199 252.328 14.945 252.539 14.625 cv
252.742 14.305 252.891 13.93 252.98 13.5 cv
253.063 13.07 253.105 12.613 253.109 12.129 cv
cp
f
263.258 9.95697 mo
263.254 9.98401 263.254 10.016 263.254 10.051 cv
263.25 10.09 263.246 10.129 263.238 10.172 cv
263.23 10.215 263.219 10.266 263.207 10.32 cv
263.191 10.379 263.176 10.445 263.156 10.516 cv
261.07 16.805 li
261.043 16.895 261.008 16.969 260.965 17.02 cv
260.918 17.078 260.844 17.121 260.746 17.148 cv
260.641 17.18 260.504 17.195 260.332 17.211 cv
260.156 17.219 259.93 17.227 259.652 17.227 cv
259.375 17.227 259.148 17.219 258.977 17.207 cv
258.801 17.191 258.664 17.172 258.566 17.141 cv
258.465 17.113 258.395 17.07 258.352 17.012 cv
258.305 16.961 258.27 16.891 258.246 16.805 cv
256.16 10.516 li
256.129 10.414 256.102 10.32 256.086 10.238 cv
256.063 10.156 256.055 10.098 256.055 10.059 cv
256.051 10.027 256.047 9.992 256.051 9.95697 cv
256.047 9.90601 256.063 9.85901 256.094 9.82001 cv
256.121 9.78101 256.172 9.75 256.246 9.72302 cv
256.316 9.69897 256.414 9.67999 256.543 9.66803 cv
256.668 9.65997 256.828 9.65601 257.023 9.65198 cv
257.234 9.65601 257.406 9.664 257.539 9.672 cv
257.664 9.68701 257.77 9.703 257.848 9.72699 cv
257.922 9.75 257.973 9.78497 258.008 9.828 cv
258.035 9.875 258.063 9.92999 258.086 9.98798 cv
259.668 15.09 li
259.715 15.285 li
259.762 15.09 li
261.32 9.98798 li
261.332 9.92999 261.355 9.875 261.391 9.828 cv
261.422 9.78497 261.477 9.75 261.551 9.72699 cv
261.621 9.703 261.719 9.68701 261.844 9.672 cv
261.965 9.664 262.125 9.65601 262.324 9.65198 cv
262.516 9.65601 262.672 9.65997 262.793 9.66803 cv
262.914 9.67999 263.008 9.69897 263.078 9.72302 cv
263.145 9.75 263.191 9.78101 263.219 9.82001 cv
263.242 9.85901 263.254 9.90601 263.258 9.95697 cv
cp
f
270.734 13.238 mo
270.73 13.477 270.68 13.652 270.574 13.766 cv
270.465 13.883 270.316 13.941 270.137 13.937 cv
265.902 13.937 li
265.898 14.238 265.934 14.508 266.008 14.746 cv
266.074 14.988 266.188 15.191 266.344 15.359 cv
266.496 15.531 266.691 15.66 266.934 15.746 cv
267.172 15.836 267.461 15.879 267.805 15.879 cv
268.145 15.879 268.445 15.855 268.707 15.805 cv
268.965 15.758 269.191 15.703 269.383 15.641 cv
269.57 15.582 269.727 15.527 269.855 15.477 cv
269.977 15.43 270.078 15.406 270.16 15.402 cv
270.203 15.406 270.242 15.414 270.277 15.43 cv
270.305 15.449 270.332 15.48 270.352 15.527 cv
270.371 15.574 270.383 15.641 270.395 15.727 cv
270.398 15.812 270.402 15.922 270.406 16.051 cv
270.402 16.168 270.402 16.266 270.398 16.344 cv
270.391 16.426 270.383 16.492 270.375 16.547 cv
270.363 16.605 270.348 16.656 270.328 16.691 cv
270.309 16.734 270.281 16.77 270.25 16.805 cv
270.215 16.844 270.121 16.895 269.973 16.953 cv
269.816 17.02 269.625 17.082 269.395 17.137 cv
269.156 17.199 268.887 17.246 268.59 17.293 cv
268.285 17.332 267.965 17.355 267.625 17.359 cv
267.004 17.355 266.461 17.281 266 17.125 cv
265.531 16.973 265.145 16.734 264.836 16.418 cv
264.52 16.102 264.285 15.703 264.137 15.219 cv
263.98 14.738 263.906 14.172 263.91 13.516 cv
263.906 12.902 263.984 12.344 264.148 11.848 cv
264.305 11.352 264.539 10.934 264.852 10.586 cv
265.156 10.242 265.531 9.97699 265.969 9.79303 cv
266.406 9.61298 266.898 9.52301 267.453 9.52002 cv
268.031 9.52301 268.531 9.60901 268.945 9.77698 cv
269.359 9.953 269.695 10.191 269.961 10.492 cv
270.223 10.797 270.418 11.156 270.547 11.57 cv
270.668 11.988 270.73 12.437 270.734 12.926 cv
cp
268.832 12.676 mo
268.844 12.125 268.734 11.691 268.5 11.379 cv
268.266 11.066 267.898 10.91 267.406 10.906 cv
267.156 10.91 266.941 10.957 266.758 11.047 cv
266.57 11.145 266.418 11.27 266.297 11.426 cv
266.172 11.586 266.078 11.773 266.016 11.988 cv
265.949 12.203 265.91 12.434 265.902 12.676 cv
cp
f
276.809 10.609 mo
276.809 10.801 276.801 10.953 276.793 11.07 cv
276.777 11.191 276.762 11.285 276.746 11.352 cv
276.723 11.422 276.695 11.469 276.664 11.492 cv
276.625 11.52 276.582 11.531 276.535 11.531 cv
276.488 11.531 276.441 11.523 276.395 11.504 cv
276.34 11.488 276.281 11.469 276.219 11.445 cv
276.148 11.426 276.078 11.406 276.004 11.387 cv
275.922 11.371 275.836 11.363 275.746 11.359 cv
275.633 11.363 275.523 11.383 275.418 11.426 cv
275.309 11.473 275.195 11.543 275.082 11.633 cv
274.961 11.727 274.84 11.852 274.715 12.004 cv
274.586 12.164 274.449 12.355 274.305 12.582 cv
274.305 16.914 li
274.301 16.969 274.285 17.012 274.258 17.051 cv
274.223 17.09 274.168 17.125 274.098 17.148 cv
274.02 17.176 273.922 17.191 273.797 17.207 cv
273.672 17.219 273.512 17.227 273.324 17.227 cv
273.129 17.227 272.973 17.219 272.848 17.207 cv
272.723 17.191 272.621 17.176 272.547 17.148 cv
272.469 17.125 272.414 17.09 272.387 17.051 cv
272.352 17.012 272.336 16.969 272.34 16.914 cv
272.34 9.96503 li
272.336 9.91803 272.352 9.87097 272.379 9.828 cv
272.402 9.79303 272.449 9.76202 272.52 9.72998 cv
272.586 9.70697 272.672 9.68701 272.781 9.672 cv
272.887 9.664 273.02 9.65601 273.184 9.65198 cv
273.348 9.65601 273.484 9.664 273.594 9.672 cv
273.699 9.68701 273.785 9.70697 273.848 9.72998 cv
273.906 9.76202 273.949 9.79303 273.977 9.828 cv
274 9.87097 274.012 9.91803 274.016 9.96503 cv
274.016 10.828 li
274.195 10.57 274.367 10.359 274.531 10.187 cv
274.688 10.023 274.844 9.88702 274.992 9.78497 cv
275.137 9.68701 275.281 9.62097 275.426 9.578 cv
275.57 9.54303 275.715 9.52301 275.863 9.52002 cv
275.93 9.52301 276.004 9.52698 276.082 9.53101 cv
276.16 9.54303 276.238 9.55499 276.324 9.57001 cv
276.402 9.59003 276.477 9.60901 276.543 9.633 cv
276.602 9.65601 276.648 9.68402 276.68 9.70697 cv
276.707 9.73798 276.727 9.76599 276.742 9.79303 cv
276.754 9.828 276.766 9.87097 276.777 9.922 cv
276.785 9.97998 276.793 10.062 276.801 10.168 cv
276.805 10.277 276.809 10.426 276.809 10.609 cv
cp
f
283.566 16.937 mo
283.563 17.016 283.535 17.07 283.488 17.109 cv
283.434 17.152 283.352 17.18 283.242 17.199 cv
283.125 17.215 282.961 17.227 282.746 17.227 cv
282.508 17.227 282.336 17.215 282.234 17.199 cv
282.125 17.18 282.051 17.152 282.012 17.109 cv
281.965 17.07 281.945 17.016 281.945 16.937 cv
281.945 16.387 li
281.656 16.695 281.328 16.934 280.965 17.102 cv
280.598 17.273 280.191 17.355 279.746 17.359 cv
279.375 17.355 279.035 17.309 278.727 17.215 cv
278.418 17.121 278.152 16.98 277.926 16.785 cv
277.699 16.598 277.523 16.363 277.398 16.082 cv
277.273 15.805 277.211 15.477 277.215 15.098 cv
277.211 14.699 277.289 14.348 277.449 14.043 cv
277.605 13.746 277.844 13.5 278.16 13.305 cv
278.473 13.113 278.863 12.969 279.332 12.871 cv
279.801 12.781 280.344 12.734 280.961 12.73 cv
281.641 12.73 li
281.641 12.309 li
281.641 12.094 281.617 11.902 281.574 11.738 cv
281.527 11.578 281.453 11.441 281.355 11.328 cv
281.25 11.223 281.117 11.141 280.949 11.086 cv
280.777 11.035 280.566 11.012 280.324 11.008 cv
279.992 11.012 279.699 11.047 279.445 11.117 cv
279.184 11.191 278.957 11.273 278.762 11.359 cv
278.563 11.453 278.398 11.531 278.27 11.602 cv
278.133 11.676 278.023 11.715 277.945 11.711 cv
277.883 11.715 277.832 11.695 277.793 11.656 cv
277.746 11.621 277.711 11.57 277.684 11.5 cv
277.652 11.437 277.629 11.352 277.617 11.25 cv
277.598 11.152 277.59 11.043 277.594 10.922 cv
277.59 10.762 277.605 10.637 277.633 10.539 cv
277.656 10.449 277.703 10.363 277.781 10.285 cv
277.852 10.211 277.98 10.129 278.164 10.039 cv
278.344 9.94897 278.555 9.86298 278.801 9.78497 cv
279.043 9.70697 279.313 9.64502 279.602 9.59399 cv
279.891 9.547 280.188 9.52301 280.496 9.52002 cv
281.039 9.52301 281.504 9.57397 281.891 9.67999 cv
282.277 9.789 282.598 9.953 282.848 10.172 cv
283.098 10.391 283.277 10.676 283.395 11.023 cv
283.504 11.375 283.563 11.789 283.566 12.262 cv
cp
281.641 13.961 mo
280.891 13.961 li
280.574 13.965 280.305 13.988 280.082 14.031 cv
279.855 14.082 279.672 14.152 279.535 14.242 cv
279.391 14.34 279.289 14.453 279.227 14.582 cv
279.16 14.719 279.125 14.867 279.129 15.035 cv
279.125 15.328 279.219 15.559 279.406 15.723 cv
279.59 15.891 279.848 15.973 280.176 15.973 cv
280.449 15.973 280.699 15.902 280.934 15.762 cv
281.16 15.621 281.398 15.418 281.641 15.145 cv
cp
f
287.488 16.914 mo
287.484 16.969 287.469 17.012 287.441 17.051 cv
287.406 17.09 287.352 17.125 287.281 17.148 cv
287.203 17.176 287.105 17.191 286.98 17.207 cv
286.855 17.219 286.695 17.227 286.508 17.227 cv
286.313 17.227 286.156 17.219 286.031 17.207 cv
285.906 17.191 285.805 17.176 285.73 17.148 cv
285.652 17.125 285.598 17.09 285.57 17.051 cv
285.535 17.012 285.52 16.969 285.523 16.914 cv
285.523 6.66803 li
285.52 6.617 285.535 6.57001 285.57 6.52698 cv
285.598 6.48798 285.652 6.453 285.73 6.422 cv
285.805 6.39502 285.906 6.375 286.031 6.35498 cv
286.156 6.34399 286.313 6.336 286.508 6.33197 cv
286.695 6.336 286.855 6.34399 286.98 6.35498 cv
287.105 6.375 287.203 6.39502 287.281 6.422 cv
287.352 6.453 287.406 6.48798 287.441 6.52698 cv
287.469 6.57001 287.484 6.617 287.488 6.66803 cv
cp
f
291.461 16.914 mo
291.457 16.969 291.441 17.012 291.414 17.051 cv
291.379 17.09 291.324 17.125 291.254 17.148 cv
291.176 17.176 291.078 17.191 290.953 17.207 cv
290.828 17.219 290.668 17.227 290.48 17.227 cv
290.285 17.227 290.129 17.219 290.004 17.207 cv
289.879 17.191 289.777 17.176 289.703 17.148 cv
289.625 17.125 289.57 17.09 289.543 17.051 cv
289.508 17.012 289.492 16.969 289.496 16.914 cv
289.496 6.66803 li
289.492 6.617 289.508 6.57001 289.543 6.52698 cv
289.57 6.48798 289.625 6.453 289.703 6.422 cv
289.777 6.39502 289.879 6.375 290.004 6.35498 cv
290.129 6.34399 290.285 6.336 290.48 6.33197 cv
290.668 6.336 290.828 6.34399 290.953 6.35498 cv
291.078 6.375 291.176 6.39502 291.254 6.422 cv
291.324 6.453 291.379 6.48798 291.414 6.52698 cv
291.441 6.57001 291.457 6.617 291.461 6.66803 cv
cp
f
304.629 16.914 mo
304.629 16.977 304.617 17.023 304.598 17.059 cv
304.578 17.102 304.531 17.133 304.453 17.156 cv
304.375 17.18 304.258 17.195 304.109 17.211 cv
303.953 17.219 303.75 17.227 303.492 17.227 cv
303.273 17.227 303.098 17.219 302.969 17.211 cv
302.84 17.195 302.738 17.18 302.664 17.152 cv
302.586 17.125 302.531 17.09 302.504 17.043 cv
302.469 17.004 302.445 16.949 302.426 16.883 cv
301.52 14.633 li
301.41 14.379 301.305 14.152 301.203 13.953 cv
301.094 13.758 300.98 13.594 300.855 13.461 cv
300.727 13.332 300.578 13.23 300.414 13.16 cv
300.246 13.094 300.055 13.062 299.84 13.059 cv
299.199 13.059 li
299.199 16.898 li
299.195 16.953 299.18 17 299.148 17.039 cv
299.113 17.082 299.059 17.117 298.98 17.141 cv
298.902 17.168 298.797 17.187 298.668 17.203 cv
298.535 17.219 298.371 17.227 298.172 17.227 cv
297.973 17.227 297.805 17.219 297.676 17.203 cv
297.539 17.187 297.434 17.168 297.359 17.141 cv
297.277 17.117 297.223 17.082 297.195 17.039 cv
297.16 17 297.145 16.953 297.148 16.898 cv
297.148 7.742 li
297.145 7.51599 297.203 7.35199 297.324 7.24597 cv
297.438 7.14801 297.582 7.09802 297.758 7.09399 cv
300.367 7.09399 li
300.629 7.09802 300.848 7.10199 301.023 7.10901 cv
301.191 7.12097 301.348 7.133 301.492 7.14801 cv
301.895 7.20697 302.258 7.30902 302.582 7.44501 cv
302.906 7.59003 303.184 7.77301 303.41 7.99597 cv
303.637 8.22699 303.809 8.492 303.93 8.80103 cv
304.047 9.10901 304.105 9.46503 304.109 9.86298 cv
304.105 10.203 304.063 10.512 303.98 10.785 cv
303.891 11.066 303.766 11.312 303.602 11.531 cv
303.434 11.75 303.227 11.941 302.984 12.098 cv
302.738 12.262 302.461 12.391 302.152 12.488 cv
302.301 12.562 302.445 12.652 302.578 12.754 cv
302.711 12.863 302.832 12.988 302.949 13.133 cv
303.063 13.281 303.176 13.449 303.281 13.637 cv
303.383 13.828 303.484 14.043 303.586 14.281 cv
304.438 16.27 li
304.512 16.469 304.563 16.609 304.59 16.699 cv
304.613 16.793 304.629 16.867 304.629 16.914 cv
cp
301.988 10.074 mo
301.984 9.742 301.91 9.461 301.762 9.22998 cv
301.609 9.00403 301.363 8.84399 301.023 8.74597 cv
300.918 8.72302 300.801 8.69897 300.668 8.68402 cv
300.535 8.66803 300.352 8.65997 300.117 8.65997 cv
299.199 8.65997 li
299.199 11.523 li
300.242 11.523 li
300.531 11.527 300.789 11.492 301.008 11.418 cv
301.227 11.352 301.406 11.25 301.551 11.121 cv
301.695 10.996 301.805 10.844 301.879 10.664 cv
301.949 10.488 301.984 10.293 301.988 10.074 cv
cp
f
312.609 16.914 mo
312.605 16.969 312.594 17.012 312.57 17.051 cv
312.543 17.09 312.496 17.125 312.434 17.148 cv
312.367 17.176 312.281 17.191 312.176 17.207 cv
312.07 17.219 311.938 17.227 311.777 17.227 cv
311.602 17.227 311.461 17.219 311.359 17.207 cv
311.25 17.191 311.168 17.176 311.105 17.148 cv
311.043 17.125 310.996 17.09 310.973 17.051 cv
310.941 17.012 310.93 16.969 310.934 16.914 cv
310.934 16.113 li
310.547 16.527 310.156 16.84 309.762 17.047 cv
309.359 17.254 308.949 17.355 308.527 17.359 cv
308.047 17.355 307.645 17.281 307.32 17.125 cv
306.996 16.973 306.734 16.758 306.535 16.488 cv
306.332 16.219 306.188 15.906 306.105 15.547 cv
306.016 15.191 305.973 14.75 305.977 14.219 cv
305.977 9.96503 li
305.973 9.91803 305.988 9.87097 306.02 9.828 cv
306.047 9.79303 306.098 9.76202 306.176 9.72998 cv
306.25 9.70697 306.352 9.68701 306.48 9.672 cv
306.605 9.664 306.762 9.65601 306.953 9.65198 cv
307.141 9.65601 307.301 9.664 307.426 9.672 cv
307.551 9.68701 307.648 9.70697 307.727 9.72998 cv
307.797 9.76202 307.852 9.79303 307.887 9.828 cv
307.914 9.87097 307.93 9.91803 307.934 9.96503 cv
307.934 13.891 li
307.93 14.258 307.953 14.535 308.004 14.727 cv
308.047 14.918 308.117 15.082 308.219 15.219 cv
308.313 15.359 308.438 15.465 308.586 15.539 cv
308.734 15.617 308.906 15.656 309.102 15.652 cv
309.352 15.656 309.602 15.566 309.855 15.379 cv
310.105 15.199 310.375 14.934 310.66 14.586 cv
310.66 9.96503 li
310.66 9.91803 310.672 9.87097 310.703 9.828 cv
310.727 9.79303 310.781 9.76202 310.859 9.72998 cv
310.934 9.70697 311.031 9.68701 311.16 9.672 cv
311.281 9.664 311.441 9.65601 311.637 9.65198 cv
311.828 9.65601 311.984 9.664 312.109 9.672 cv
312.23 9.68701 312.332 9.70697 312.406 9.72998 cv
312.477 9.76202 312.527 9.79303 312.563 9.828 cv
312.59 9.87097 312.605 9.91803 312.609 9.96503 cv
cp
f
321.227 16.914 mo
321.223 16.969 321.207 17.012 321.18 17.051 cv
321.145 17.09 321.094 17.125 321.023 17.148 cv
320.949 17.176 320.848 17.191 320.723 17.207 cv
320.594 17.219 320.438 17.227 320.254 17.227 cv
320.059 17.227 319.898 17.219 319.773 17.207 cv
319.645 17.191 319.543 17.176 319.473 17.148 cv
319.395 17.125 319.344 17.09 319.316 17.051 cv
319.281 17.012 319.266 16.969 319.27 16.914 cv
319.27 12.949 li
319.266 12.613 319.242 12.348 319.195 12.152 cv
319.145 11.961 319.07 11.797 318.98 11.66 cv
318.887 11.523 318.77 11.418 318.621 11.34 cv
318.473 11.266 318.297 11.227 318.102 11.227 cv
317.848 11.227 317.598 11.32 317.344 11.5 cv
317.09 11.684 316.824 11.945 316.551 12.293 cv
316.551 16.914 li
316.547 16.969 316.531 17.012 316.504 17.051 cv
316.469 17.09 316.414 17.125 316.344 17.148 cv
316.266 17.176 316.168 17.191 316.043 17.207 cv
315.918 17.219 315.758 17.227 315.57 17.227 cv
315.375 17.227 315.219 17.219 315.094 17.207 cv
314.969 17.191 314.867 17.176 314.793 17.148 cv
314.715 17.125 314.66 17.09 314.633 17.051 cv
314.598 17.012 314.582 16.969 314.586 16.914 cv
314.586 9.96503 li
314.582 9.91803 314.598 9.87097 314.625 9.828 cv
314.648 9.79303 314.695 9.76202 314.766 9.72998 cv
314.832 9.70697 314.918 9.68701 315.027 9.672 cv
315.133 9.664 315.266 9.65601 315.43 9.65198 cv
315.594 9.65601 315.73 9.664 315.84 9.672 cv
315.945 9.68701 316.031 9.70697 316.094 9.72998 cv
316.152 9.76202 316.195 9.79303 316.223 9.828 cv
316.246 9.87097 316.258 9.91803 316.262 9.96503 cv
316.262 10.766 li
316.645 10.355 317.035 10.043 317.434 9.83197 cv
317.828 9.625 318.246 9.52301 318.68 9.52002 cv
319.148 9.52301 319.547 9.60199 319.875 9.75403 cv
320.199 9.914 320.461 10.125 320.66 10.391 cv
320.859 10.66 321.004 10.973 321.094 11.328 cv
321.18 11.687 321.223 12.117 321.227 12.621 cv
cp
f
327.098 16.23 mo
327.098 16.457 327.082 16.633 327.055 16.754 cv
327.023 16.879 326.984 16.965 326.941 17.012 cv
326.891 17.062 326.824 17.105 326.734 17.145 cv
326.641 17.184 326.531 17.215 326.414 17.246 cv
326.289 17.27 326.156 17.293 326.016 17.312 cv
325.871 17.324 325.73 17.332 325.586 17.336 cv
325.195 17.332 324.855 17.281 324.57 17.187 cv
324.285 17.086 324.051 16.937 323.863 16.73 cv
323.676 16.527 323.535 16.27 323.449 15.957 cv
323.355 15.648 323.313 15.277 323.316 14.848 cv
323.316 11.289 li
322.484 11.289 li
322.383 11.293 322.309 11.23 322.258 11.105 cv
322.203 10.984 322.176 10.781 322.18 10.492 cv
322.176 10.344 322.184 10.215 322.199 10.113 cv
322.211 10.012 322.23 9.92999 322.258 9.867 cv
322.281 9.80902 322.313 9.76599 322.355 9.73798 cv
322.391 9.71503 322.438 9.703 322.492 9.69897 cv
323.316 9.69897 li
323.316 8.14801 li
323.313 8.10199 323.328 8.05499 323.359 8.008 cv
323.387 7.96899 323.438 7.93402 323.516 7.90198 cv
323.59 7.87903 323.691 7.85498 323.82 7.84003 cv
323.945 7.828 324.102 7.82397 324.293 7.82001 cv
324.48 7.82397 324.641 7.828 324.77 7.84003 cv
324.895 7.85498 324.996 7.87903 325.07 7.90198 cv
325.141 7.93402 325.191 7.96899 325.227 8.008 cv
325.254 8.05499 325.27 8.10199 325.273 8.14801 cv
325.273 9.69897 li
326.785 9.69897 li
326.836 9.703 326.883 9.71503 326.922 9.73798 cv
326.961 9.76599 326.992 9.80902 327.02 9.867 cv
327.043 9.92999 327.063 10.012 327.078 10.113 cv
327.09 10.215 327.098 10.344 327.098 10.492 cv
327.098 10.781 327.07 10.984 327.02 11.105 cv
326.965 11.23 326.891 11.293 326.793 11.289 cv
325.273 11.289 li
325.273 14.555 li
325.27 14.934 325.328 15.219 325.453 15.406 cv
325.57 15.598 325.785 15.691 326.09 15.691 cv
326.191 15.691 326.285 15.684 326.371 15.664 cv
326.453 15.648 326.527 15.629 326.594 15.602 cv
326.656 15.582 326.711 15.559 326.758 15.539 cv
326.801 15.523 326.84 15.516 326.879 15.512 cv
326.906 15.516 326.938 15.523 326.969 15.539 cv
326.996 15.559 327.016 15.598 327.035 15.648 cv
327.047 15.707 327.063 15.781 327.078 15.871 cv
327.09 15.969 327.098 16.086 327.098 16.23 cv
cp
f
330.484 16.914 mo
330.48 16.969 330.465 17.012 330.438 17.051 cv
330.402 17.09 330.348 17.125 330.277 17.148 cv
330.199 17.176 330.102 17.191 329.977 17.207 cv
329.852 17.219 329.691 17.227 329.504 17.227 cv
329.309 17.227 329.152 17.219 329.027 17.207 cv
328.902 17.191 328.801 17.176 328.727 17.148 cv
328.648 17.125 328.594 17.09 328.566 17.051 cv
328.531 17.012 328.516 16.969 328.52 16.914 cv
328.52 9.97998 li
328.516 9.92999 328.531 9.883 328.566 9.84399 cv
328.594 9.80499 328.648 9.77301 328.727 9.742 cv
328.801 9.71899 328.902 9.69501 329.027 9.67603 cv
329.152 9.664 329.309 9.65601 329.504 9.65198 cv
329.691 9.65601 329.852 9.664 329.977 9.67603 cv
330.102 9.69501 330.199 9.71899 330.277 9.742 cv
330.348 9.77301 330.402 9.80499 330.438 9.84399 cv
330.465 9.883 330.48 9.92999 330.484 9.97998 cv
cp
330.633 7.60901 mo
330.633 8.008 330.551 8.28101 330.391 8.42999 cv
330.227 8.58197 329.93 8.65601 329.496 8.65198 cv
329.051 8.65601 328.75 8.58197 328.602 8.43701 cv
328.445 8.29303 328.371 8.03101 328.371 7.64801 cv
328.371 7.25403 328.449 6.97998 328.609 6.828 cv
328.766 6.67603 329.066 6.59802 329.512 6.59802 cv
329.945 6.59802 330.242 6.672 330.398 6.82001 cv
330.555 6.96899 330.633 7.23401 330.633 7.60901 cv
cp
f
343.504 16.914 mo
343.5 16.969 343.484 17.012 343.457 17.051 cv
343.422 17.09 343.371 17.125 343.301 17.148 cv
343.227 17.176 343.125 17.191 343.004 17.207 cv
342.879 17.219 342.723 17.227 342.531 17.227 cv
342.332 17.227 342.172 17.219 342.047 17.207 cv
341.922 17.191 341.82 17.176 341.746 17.148 cv
341.668 17.125 341.617 17.09 341.59 17.051 cv
341.563 17.012 341.547 16.969 341.551 16.914 cv
341.551 12.793 li
341.547 12.562 341.527 12.348 341.484 12.152 cv
341.438 11.961 341.367 11.797 341.281 11.66 cv
341.188 11.523 341.074 11.418 340.938 11.34 cv
340.797 11.266 340.633 11.227 340.441 11.227 cv
340.207 11.227 339.969 11.32 339.73 11.5 cv
339.492 11.684 339.234 11.945 338.953 12.293 cv
338.953 16.914 li
338.953 16.969 338.938 17.012 338.906 17.051 cv
338.875 17.09 338.82 17.125 338.746 17.148 cv
338.668 17.176 338.566 17.191 338.445 17.207 cv
338.32 17.219 338.168 17.227 337.98 17.227 cv
337.785 17.227 337.625 17.219 337.504 17.207 cv
337.375 17.191 337.273 17.176 337.203 17.148 cv
337.125 17.125 337.074 17.09 337.043 17.051 cv
337.012 17.012 336.996 16.969 336.996 16.914 cv
336.996 12.793 li
336.996 12.562 336.973 12.348 336.93 12.152 cv
336.887 11.961 336.82 11.797 336.734 11.66 cv
336.641 11.523 336.527 11.418 336.391 11.34 cv
336.246 11.266 336.082 11.227 335.898 11.227 cv
335.656 11.227 335.418 11.32 335.18 11.5 cv
334.941 11.684 334.684 11.945 334.41 12.293 cv
334.41 16.914 li
334.406 16.969 334.391 17.012 334.363 17.051 cv
334.328 17.09 334.273 17.125 334.203 17.148 cv
334.125 17.176 334.027 17.191 333.902 17.207 cv
333.777 17.219 333.617 17.227 333.43 17.227 cv
333.234 17.227 333.078 17.219 332.953 17.207 cv
332.828 17.191 332.727 17.176 332.652 17.148 cv
332.574 17.125 332.52 17.09 332.492 17.051 cv
332.457 17.012 332.441 16.969 332.445 16.914 cv
332.445 9.96503 li
332.441 9.91803 332.457 9.87097 332.484 9.828 cv
332.508 9.79303 332.555 9.76202 332.625 9.72998 cv
332.691 9.70697 332.777 9.68701 332.887 9.672 cv
332.992 9.664 333.125 9.65601 333.289 9.65198 cv
333.453 9.65601 333.59 9.664 333.699 9.672 cv
333.805 9.68701 333.891 9.70697 333.953 9.72998 cv
334.012 9.76202 334.055 9.79303 334.082 9.828 cv
334.105 9.87097 334.117 9.91803 334.121 9.96503 cv
334.121 10.766 li
334.504 10.355 334.887 10.043 335.27 9.83197 cv
335.648 9.625 336.051 9.52301 336.469 9.52002 cv
336.754 9.52301 337.008 9.55103 337.238 9.60901 cv
337.465 9.672 337.672 9.758 337.852 9.867 cv
338.031 9.97998 338.184 10.117 338.313 10.27 cv
338.441 10.426 338.551 10.598 338.641 10.789 cv
338.848 10.566 339.051 10.375 339.254 10.215 cv
339.449 10.055 339.648 9.922 339.844 9.82001 cv
340.039 9.71899 340.234 9.64502 340.43 9.59399 cv
340.625 9.547 340.824 9.52301 341.027 9.52002 cv
341.488 9.52301 341.875 9.60199 342.195 9.75403 cv
342.508 9.914 342.766 10.125 342.961 10.391 cv
343.156 10.66 343.293 10.973 343.379 11.328 cv
343.457 11.687 343.5 12.066 343.504 12.465 cv
cp
f
351.844 13.238 mo
351.84 13.477 351.789 13.652 351.684 13.766 cv
351.574 13.883 351.426 13.941 351.246 13.937 cv
347.012 13.937 li
347.008 14.238 347.043 14.508 347.117 14.746 cv
347.184 14.988 347.297 15.191 347.453 15.359 cv
347.605 15.531 347.801 15.66 348.043 15.746 cv
348.281 15.836 348.57 15.879 348.914 15.879 cv
349.254 15.879 349.555 15.855 349.816 15.805 cv
350.074 15.758 350.301 15.703 350.492 15.641 cv
350.68 15.582 350.836 15.527 350.965 15.477 cv
351.086 15.43 351.188 15.406 351.27 15.402 cv
351.313 15.406 351.352 15.414 351.387 15.43 cv
351.414 15.449 351.441 15.48 351.461 15.527 cv
351.48 15.574 351.492 15.641 351.504 15.727 cv
351.508 15.812 351.512 15.922 351.516 16.051 cv
351.512 16.168 351.512 16.266 351.508 16.344 cv
351.5 16.426 351.492 16.492 351.484 16.547 cv
351.473 16.605 351.457 16.656 351.438 16.691 cv
351.418 16.734 351.391 16.77 351.359 16.805 cv
351.324 16.844 351.23 16.895 351.082 16.953 cv
350.926 17.02 350.734 17.082 350.504 17.137 cv
350.266 17.199 349.996 17.246 349.699 17.293 cv
349.395 17.332 349.074 17.355 348.734 17.359 cv
348.113 17.355 347.57 17.281 347.109 17.125 cv
346.641 16.973 346.254 16.734 345.945 16.418 cv
345.629 16.102 345.395 15.703 345.246 15.219 cv
345.09 14.738 345.016 14.172 345.02 13.516 cv
345.016 12.902 345.094 12.344 345.258 11.848 cv
345.414 11.352 345.648 10.934 345.961 10.586 cv
346.266 10.242 346.641 9.97699 347.078 9.79303 cv
347.516 9.61298 348.008 9.52301 348.563 9.52002 cv
349.141 9.52301 349.641 9.60901 350.055 9.77698 cv
350.469 9.953 350.805 10.191 351.07 10.492 cv
351.332 10.797 351.527 11.156 351.656 11.57 cv
351.777 11.988 351.84 12.437 351.844 12.926 cv
cp
349.941 12.676 mo
349.953 12.125 349.844 11.691 349.609 11.379 cv
349.375 11.066 349.008 10.91 348.516 10.906 cv
348.266 10.91 348.051 10.957 347.867 11.047 cv
347.68 11.145 347.527 11.27 347.406 11.426 cv
347.281 11.586 347.188 11.773 347.125 11.988 cv
347.059 12.203 347.02 12.434 347.012 12.676 cv
cp
f
358.344 14.949 mo
358.34 15.348 358.266 15.695 358.121 15.996 cv
357.973 16.297 357.766 16.551 357.496 16.75 cv
357.223 16.957 356.902 17.105 356.535 17.207 cv
356.168 17.305 355.766 17.355 355.336 17.359 cv
355.07 17.355 354.824 17.336 354.59 17.301 cv
354.355 17.258 354.145 17.211 353.957 17.152 cv
353.77 17.094 353.613 17.031 353.488 16.969 cv
353.363 16.906 353.27 16.848 353.215 16.793 cv
353.156 16.738 353.113 16.656 353.086 16.539 cv
353.051 16.426 353.035 16.25 353.039 16.02 cv
353.035 15.871 353.043 15.75 353.055 15.656 cv
353.063 15.566 353.078 15.496 353.102 15.437 cv
353.121 15.387 353.145 15.348 353.18 15.328 cv
353.207 15.312 353.246 15.305 353.293 15.301 cv
353.348 15.305 353.434 15.336 353.547 15.398 cv
353.656 15.465 353.793 15.539 353.965 15.613 cv
354.129 15.695 354.324 15.766 354.543 15.832 cv
354.762 15.902 355.012 15.937 355.297 15.934 cv
355.473 15.937 355.629 15.918 355.77 15.879 cv
355.902 15.844 356.023 15.793 356.129 15.723 cv
356.227 15.656 356.301 15.57 356.355 15.465 cv
356.402 15.363 356.43 15.242 356.434 15.105 cv
356.43 14.949 356.383 14.816 356.289 14.707 cv
356.195 14.598 356.066 14.5 355.91 14.414 cv
355.746 14.332 355.566 14.254 355.371 14.18 cv
355.168 14.109 354.965 14.031 354.754 13.937 cv
354.543 13.852 354.336 13.75 354.141 13.633 cv
353.938 13.523 353.758 13.383 353.602 13.215 cv
353.438 13.051 353.313 12.852 353.219 12.613 cv
353.125 12.383 353.078 12.102 353.078 11.77 cv
353.078 11.441 353.141 11.137 353.27 10.855 cv
353.398 10.582 353.586 10.344 353.832 10.145 cv
354.074 9.94897 354.371 9.797 354.723 9.68402 cv
355.07 9.578 355.465 9.52301 355.906 9.52002 cv
356.121 9.52301 356.332 9.539 356.539 9.56598 cv
356.742 9.60199 356.93 9.64099 357.098 9.68402 cv
357.262 9.73401 357.402 9.78497 357.52 9.836 cv
357.633 9.89502 357.715 9.94098 357.766 9.97699 cv
357.813 10.02 357.848 10.059 357.871 10.094 cv
357.891 10.137 357.902 10.184 357.914 10.234 cv
357.922 10.289 357.934 10.355 357.941 10.434 cv
357.949 10.52 357.953 10.617 357.953 10.734 cv
357.953 10.875 357.949 10.992 357.941 11.078 cv
357.934 11.172 357.918 11.242 357.902 11.289 cv
357.883 11.344 357.859 11.379 357.832 11.395 cv
357.797 11.418 357.762 11.426 357.723 11.422 cv
357.672 11.426 357.598 11.398 357.504 11.34 cv
357.402 11.289 357.281 11.23 357.133 11.164 cv
356.984 11.105 356.813 11.047 356.617 10.988 cv
356.422 10.937 356.199 10.91 355.953 10.906 cv
355.773 10.91 355.621 10.93 355.492 10.961 cv
355.359 11 355.25 11.051 355.172 11.117 cv
355.086 11.187 355.023 11.266 354.984 11.355 cv
354.938 11.449 354.918 11.547 354.922 11.648 cv
354.918 11.809 354.969 11.945 355.07 12.051 cv
355.168 12.164 355.297 12.258 355.461 12.34 cv
355.621 12.426 355.805 12.504 356.012 12.574 cv
356.215 12.648 356.422 12.73 356.633 12.812 cv
356.84 12.902 357.047 13 357.258 13.113 cv
357.461 13.227 357.645 13.367 357.805 13.531 cv
357.965 13.699 358.094 13.898 358.195 14.129 cv
358.289 14.363 358.34 14.637 358.344 14.949 cv
cp
f
367.137 13.262 mo
367.133 13.562 367.105 13.773 367.051 13.891 cv
366.992 14.016 366.902 14.074 366.777 14.07 cv
363.535 14.07 li
363.406 14.074 363.313 14.012 363.258 13.887 cv
363.195 13.766 363.168 13.559 363.172 13.262 cv
363.168 12.973 363.195 12.766 363.258 12.645 cv
363.313 12.527 363.406 12.469 363.535 12.465 cv
366.777 12.465 li
366.84 12.469 366.891 12.48 366.938 12.504 cv
366.977 12.531 367.016 12.578 367.051 12.637 cv
367.078 12.703 367.102 12.785 367.117 12.887 cv
367.129 12.992 367.133 13.117 367.137 13.262 cv
cp
f
379.809 16.914 mo
379.809 16.977 379.797 17.023 379.777 17.059 cv
379.758 17.102 379.711 17.133 379.633 17.156 cv
379.555 17.18 379.438 17.195 379.289 17.211 cv
379.133 17.219 378.93 17.227 378.672 17.227 cv
378.453 17.227 378.277 17.219 378.148 17.211 cv
378.02 17.195 377.918 17.18 377.844 17.152 cv
377.766 17.125 377.711 17.09 377.684 17.043 cv
377.648 17.004 377.625 16.949 377.605 16.883 cv
376.699 14.633 li
376.59 14.379 376.484 14.152 376.383 13.953 cv
376.273 13.758 376.16 13.594 376.035 13.461 cv
375.906 13.332 375.758 13.23 375.594 13.16 cv
375.426 13.094 375.234 13.062 375.02 13.059 cv
374.379 13.059 li
374.379 16.898 li
374.375 16.953 374.359 17 374.328 17.039 cv
374.293 17.082 374.238 17.117 374.16 17.141 cv
374.082 17.168 373.977 17.187 373.848 17.203 cv
373.715 17.219 373.551 17.227 373.352 17.227 cv
373.152 17.227 372.984 17.219 372.855 17.203 cv
372.719 17.187 372.613 17.168 372.539 17.141 cv
372.457 17.117 372.402 17.082 372.375 17.039 cv
372.34 17 372.324 16.953 372.328 16.898 cv
372.328 7.742 li
372.324 7.51599 372.383 7.35199 372.504 7.24597 cv
372.617 7.14801 372.762 7.09802 372.938 7.09399 cv
375.547 7.09399 li
375.809 7.09802 376.027 7.10199 376.203 7.10901 cv
376.371 7.12097 376.527 7.133 376.672 7.14801 cv
377.074 7.20697 377.438 7.30902 377.762 7.44501 cv
378.086 7.59003 378.363 7.77301 378.59 7.99597 cv
378.816 8.22699 378.988 8.492 379.109 8.80103 cv
379.227 9.10901 379.285 9.46503 379.289 9.86298 cv
379.285 10.203 379.242 10.512 379.16 10.785 cv
379.07 11.066 378.945 11.312 378.781 11.531 cv
378.613 11.75 378.406 11.941 378.164 12.098 cv
377.918 12.262 377.641 12.391 377.332 12.488 cv
377.48 12.562 377.625 12.652 377.758 12.754 cv
377.891 12.863 378.012 12.988 378.129 13.133 cv
378.242 13.281 378.355 13.449 378.461 13.637 cv
378.563 13.828 378.664 14.043 378.766 14.281 cv
379.617 16.27 li
379.691 16.469 379.742 16.609 379.77 16.699 cv
379.793 16.793 379.809 16.867 379.809 16.914 cv
cp
377.168 10.074 mo
377.164 9.742 377.09 9.461 376.941 9.22998 cv
376.789 9.00403 376.543 8.84399 376.203 8.74597 cv
376.098 8.72302 375.98 8.69897 375.848 8.68402 cv
375.715 8.66803 375.531 8.65997 375.297 8.65997 cv
374.379 8.65997 li
374.379 11.523 li
375.422 11.523 li
375.711 11.527 375.969 11.492 376.188 11.418 cv
376.406 11.352 376.586 11.25 376.73 11.121 cv
376.875 10.996 376.984 10.844 377.059 10.664 cv
377.129 10.488 377.164 10.293 377.168 10.074 cv
cp
f
387.395 13.238 mo
387.391 13.477 387.34 13.652 387.234 13.766 cv
387.125 13.883 386.977 13.941 386.797 13.937 cv
382.563 13.937 li
382.559 14.238 382.594 14.508 382.668 14.746 cv
382.734 14.988 382.848 15.191 383.004 15.359 cv
383.156 15.531 383.352 15.66 383.594 15.746 cv
383.832 15.836 384.121 15.879 384.465 15.879 cv
384.805 15.879 385.105 15.855 385.367 15.805 cv
385.625 15.758 385.852 15.703 386.043 15.641 cv
386.23 15.582 386.387 15.527 386.516 15.477 cv
386.637 15.43 386.738 15.406 386.82 15.402 cv
386.863 15.406 386.902 15.414 386.938 15.43 cv
386.965 15.449 386.992 15.48 387.012 15.527 cv
387.031 15.574 387.043 15.641 387.055 15.727 cv
387.059 15.812 387.063 15.922 387.066 16.051 cv
387.063 16.168 387.063 16.266 387.059 16.344 cv
387.051 16.426 387.043 16.492 387.035 16.547 cv
387.023 16.605 387.008 16.656 386.988 16.691 cv
386.969 16.734 386.941 16.77 386.91 16.805 cv
386.875 16.844 386.781 16.895 386.633 16.953 cv
386.477 17.02 386.285 17.082 386.055 17.137 cv
385.816 17.199 385.547 17.246 385.25 17.293 cv
384.945 17.332 384.625 17.355 384.285 17.359 cv
383.664 17.355 383.121 17.281 382.66 17.125 cv
382.191 16.973 381.805 16.734 381.496 16.418 cv
381.18 16.102 380.945 15.703 380.797 15.219 cv
380.641 14.738 380.566 14.172 380.57 13.516 cv
380.566 12.902 380.645 12.344 380.809 11.848 cv
380.965 11.352 381.199 10.934 381.512 10.586 cv
381.816 10.242 382.191 9.97699 382.629 9.79303 cv
383.066 9.61298 383.559 9.52301 384.113 9.52002 cv
384.691 9.52301 385.191 9.60901 385.605 9.77698 cv
386.02 9.953 386.355 10.191 386.621 10.492 cv
386.883 10.797 387.078 11.156 387.207 11.57 cv
387.328 11.988 387.391 12.437 387.395 12.926 cv
cp
385.492 12.676 mo
385.504 12.125 385.395 11.691 385.16 11.379 cv
384.926 11.066 384.559 10.91 384.066 10.906 cv
383.816 10.91 383.602 10.957 383.418 11.047 cv
383.23 11.145 383.078 11.27 382.957 11.426 cv
382.832 11.586 382.738 11.773 382.676 11.988 cv
382.609 12.203 382.57 12.434 382.563 12.676 cv
cp
f
400.059 16.914 mo
400.055 16.969 400.039 17.012 400.012 17.051 cv
399.977 17.09 399.926 17.125 399.855 17.148 cv
399.781 17.176 399.68 17.191 399.559 17.207 cv
399.434 17.219 399.277 17.227 399.086 17.227 cv
398.887 17.227 398.727 17.219 398.602 17.207 cv
398.477 17.191 398.375 17.176 398.301 17.148 cv
398.223 17.125 398.172 17.09 398.145 17.051 cv
398.117 17.012 398.102 16.969 398.105 16.914 cv
398.105 12.793 li
398.102 12.562 398.082 12.348 398.039 12.152 cv
397.992 11.961 397.922 11.797 397.836 11.66 cv
397.742 11.523 397.629 11.418 397.492 11.34 cv
397.352 11.266 397.188 11.227 396.996 11.227 cv
396.762 11.227 396.523 11.32 396.285 11.5 cv
396.047 11.684 395.789 11.945 395.508 12.293 cv
395.508 16.914 li
395.508 16.969 395.492 17.012 395.461 17.051 cv
395.43 17.09 395.375 17.125 395.301 17.148 cv
395.223 17.176 395.121 17.191 395 17.207 cv
394.875 17.219 394.723 17.227 394.535 17.227 cv
394.34 17.227 394.18 17.219 394.059 17.207 cv
393.93 17.191 393.828 17.176 393.758 17.148 cv
393.68 17.125 393.629 17.09 393.598 17.051 cv
393.566 17.012 393.551 16.969 393.551 16.914 cv
393.551 12.793 li
393.551 12.562 393.527 12.348 393.484 12.152 cv
393.441 11.961 393.375 11.797 393.289 11.66 cv
393.195 11.523 393.082 11.418 392.945 11.34 cv
392.801 11.266 392.637 11.227 392.453 11.227 cv
392.211 11.227 391.973 11.32 391.734 11.5 cv
391.496 11.684 391.238 11.945 390.965 12.293 cv
390.965 16.914 li
390.961 16.969 390.945 17.012 390.918 17.051 cv
390.883 17.09 390.828 17.125 390.758 17.148 cv
390.68 17.176 390.582 17.191 390.457 17.207 cv
390.332 17.219 390.172 17.227 389.984 17.227 cv
389.789 17.227 389.633 17.219 389.508 17.207 cv
389.383 17.191 389.281 17.176 389.207 17.148 cv
389.129 17.125 389.074 17.09 389.047 17.051 cv
389.012 17.012 388.996 16.969 389 16.914 cv
389 9.96503 li
388.996 9.91803 389.012 9.87097 389.039 9.828 cv
389.063 9.79303 389.109 9.76202 389.18 9.72998 cv
389.246 9.70697 389.332 9.68701 389.441 9.672 cv
389.547 9.664 389.68 9.65601 389.844 9.65198 cv
390.008 9.65601 390.145 9.664 390.254 9.672 cv
390.359 9.68701 390.445 9.70697 390.508 9.72998 cv
390.566 9.76202 390.609 9.79303 390.637 9.828 cv
390.66 9.87097 390.672 9.91803 390.676 9.96503 cv
390.676 10.766 li
391.059 10.355 391.441 10.043 391.824 9.83197 cv
392.203 9.625 392.605 9.52301 393.023 9.52002 cv
393.309 9.52301 393.563 9.55103 393.793 9.60901 cv
394.02 9.672 394.227 9.758 394.406 9.867 cv
394.586 9.97998 394.738 10.117 394.867 10.27 cv
394.996 10.426 395.105 10.598 395.195 10.789 cv
395.402 10.566 395.605 10.375 395.809 10.215 cv
396.004 10.055 396.203 9.922 396.398 9.82001 cv
396.594 9.71899 396.789 9.64502 396.984 9.59399 cv
397.18 9.547 397.379 9.52301 397.582 9.52002 cv
398.043 9.52301 398.43 9.60199 398.75 9.75403 cv
399.063 9.914 399.32 10.125 399.516 10.391 cv
399.711 10.66 399.848 10.973 399.934 11.328 cv
400.012 11.687 400.055 12.066 400.059 12.465 cv
cp
f
409.008 13.367 mo
409.004 13.965 408.926 14.508 408.773 14.992 cv
408.613 15.484 408.379 15.902 408.063 16.254 cv
407.746 16.605 407.348 16.879 406.871 17.07 cv
406.391 17.262 405.832 17.355 405.195 17.359 cv
404.574 17.355 404.035 17.273 403.582 17.102 cv
403.121 16.934 402.742 16.684 402.445 16.355 cv
402.141 16.031 401.918 15.629 401.773 15.148 cv
401.629 14.672 401.559 14.125 401.559 13.508 cv
401.559 12.918 401.637 12.379 401.793 11.887 cv
401.949 11.398 402.188 10.977 402.508 10.625 cv
402.824 10.277 403.219 10.004 403.695 9.80902 cv
404.168 9.617 404.727 9.52301 405.367 9.52002 cv
405.992 9.52301 406.531 9.60498 406.988 9.77301 cv
407.445 9.94501 407.824 10.195 408.121 10.52 cv
408.418 10.848 408.641 11.25 408.789 11.727 cv
408.934 12.207 409.004 12.754 409.008 13.367 cv
cp
406.988 13.445 mo
406.984 13.109 406.957 12.793 406.906 12.5 cv
406.848 12.215 406.754 11.965 406.629 11.75 cv
406.496 11.539 406.324 11.371 406.113 11.25 cv
405.895 11.133 405.625 11.074 405.297 11.07 cv
405.008 11.074 404.754 11.129 404.535 11.23 cv
404.316 11.34 404.137 11.496 403.996 11.699 cv
403.855 11.906 403.75 12.152 403.68 12.437 cv
403.609 12.73 403.574 13.059 403.574 13.422 cv
403.574 13.77 403.602 14.086 403.66 14.371 cv
403.715 14.664 403.809 14.914 403.938 15.125 cv
404.063 15.34 404.234 15.504 404.457 15.617 cv
404.672 15.738 404.941 15.797 405.266 15.793 cv
405.559 15.797 405.816 15.742 406.039 15.633 cv
406.254 15.527 406.434 15.375 406.574 15.168 cv
406.715 14.969 406.816 14.723 406.887 14.434 cv
406.949 14.148 406.984 13.82 406.988 13.445 cv
cp
f
414.742 16.23 mo
414.742 16.457 414.727 16.633 414.699 16.754 cv
414.668 16.879 414.629 16.965 414.586 17.012 cv
414.535 17.062 414.469 17.105 414.379 17.145 cv
414.285 17.184 414.176 17.215 414.059 17.246 cv
413.934 17.27 413.801 17.293 413.66 17.312 cv
413.516 17.324 413.375 17.332 413.23 17.336 cv
412.84 17.332 412.5 17.281 412.215 17.187 cv
411.93 17.086 411.695 16.937 411.508 16.73 cv
411.32 16.527 411.18 16.27 411.094 15.957 cv
411 15.648 410.957 15.277 410.961 14.848 cv
410.961 11.289 li
410.129 11.289 li
410.027 11.293 409.953 11.23 409.902 11.105 cv
409.848 10.984 409.82 10.781 409.824 10.492 cv
409.82 10.344 409.828 10.215 409.844 10.113 cv
409.855 10.012 409.875 9.92999 409.902 9.867 cv
409.926 9.80902 409.957 9.76599 410 9.73798 cv
410.035 9.71503 410.082 9.703 410.137 9.69897 cv
410.961 9.69897 li
410.961 8.14801 li
410.957 8.10199 410.973 8.05499 411.004 8.008 cv
411.031 7.96899 411.082 7.93402 411.16 7.90198 cv
411.234 7.87903 411.336 7.85498 411.465 7.84003 cv
411.59 7.828 411.746 7.82397 411.938 7.82001 cv
412.125 7.82397 412.285 7.828 412.414 7.84003 cv
412.539 7.85498 412.641 7.87903 412.715 7.90198 cv
412.785 7.93402 412.836 7.96899 412.871 8.008 cv
412.898 8.05499 412.914 8.10199 412.918 8.14801 cv
412.918 9.69897 li
414.43 9.69897 li
414.48 9.703 414.527 9.71503 414.566 9.73798 cv
414.605 9.76599 414.637 9.80902 414.664 9.867 cv
414.688 9.92999 414.707 10.012 414.723 10.113 cv
414.734 10.215 414.742 10.344 414.742 10.492 cv
414.742 10.781 414.715 10.984 414.664 11.105 cv
414.609 11.23 414.535 11.293 414.438 11.289 cv
412.918 11.289 li
412.918 14.555 li
412.914 14.934 412.973 15.219 413.098 15.406 cv
413.215 15.598 413.43 15.691 413.734 15.691 cv
413.836 15.691 413.93 15.684 414.016 15.664 cv
414.098 15.648 414.172 15.629 414.238 15.602 cv
414.301 15.582 414.355 15.559 414.402 15.539 cv
414.445 15.523 414.484 15.516 414.523 15.512 cv
414.551 15.516 414.582 15.523 414.613 15.539 cv
414.641 15.559 414.66 15.598 414.68 15.648 cv
414.691 15.707 414.707 15.781 414.723 15.871 cv
414.734 15.969 414.742 16.086 414.742 16.23 cv
cp
f
422.332 13.238 mo
422.328 13.477 422.277 13.652 422.172 13.766 cv
422.063 13.883 421.914 13.941 421.734 13.937 cv
417.5 13.937 li
417.496 14.238 417.531 14.508 417.605 14.746 cv
417.672 14.988 417.785 15.191 417.941 15.359 cv
418.094 15.531 418.289 15.66 418.531 15.746 cv
418.77 15.836 419.059 15.879 419.402 15.879 cv
419.742 15.879 420.043 15.855 420.305 15.805 cv
420.563 15.758 420.789 15.703 420.98 15.641 cv
421.168 15.582 421.324 15.527 421.453 15.477 cv
421.574 15.43 421.676 15.406 421.758 15.402 cv
421.801 15.406 421.84 15.414 421.875 15.43 cv
421.902 15.449 421.93 15.48 421.949 15.527 cv
421.969 15.574 421.98 15.641 421.992 15.727 cv
421.996 15.812 422 15.922 422.004 16.051 cv
422 16.168 422 16.266 421.996 16.344 cv
421.988 16.426 421.98 16.492 421.973 16.547 cv
421.961 16.605 421.945 16.656 421.926 16.691 cv
421.906 16.734 421.879 16.77 421.848 16.805 cv
421.813 16.844 421.719 16.895 421.57 16.953 cv
421.414 17.02 421.223 17.082 420.992 17.137 cv
420.754 17.199 420.484 17.246 420.188 17.293 cv
419.883 17.332 419.563 17.355 419.223 17.359 cv
418.602 17.355 418.059 17.281 417.598 17.125 cv
417.129 16.973 416.742 16.734 416.434 16.418 cv
416.117 16.102 415.883 15.703 415.734 15.219 cv
415.578 14.738 415.504 14.172 415.508 13.516 cv
415.504 12.902 415.582 12.344 415.746 11.848 cv
415.902 11.352 416.137 10.934 416.449 10.586 cv
416.754 10.242 417.129 9.97699 417.566 9.79303 cv
418.004 9.61298 418.496 9.52301 419.051 9.52002 cv
419.629 9.52301 420.129 9.60901 420.543 9.77698 cv
420.957 9.953 421.293 10.191 421.559 10.492 cv
421.82 10.797 422.016 11.156 422.145 11.57 cv
422.266 11.988 422.328 12.437 422.332 12.926 cv
cp
420.43 12.676 mo
420.441 12.125 420.332 11.691 420.098 11.379 cv
419.863 11.066 419.496 10.91 419.004 10.906 cv
418.754 10.91 418.539 10.957 418.355 11.047 cv
418.168 11.145 418.016 11.27 417.895 11.426 cv
417.77 11.586 417.676 11.773 417.613 11.988 cv
417.547 12.203 417.508 12.434 417.5 12.676 cv
cp
f
439.527 16.898 mo
439.523 16.953 439.512 17 439.484 17.039 cv
439.453 17.082 439.398 17.117 439.328 17.141 cv
439.25 17.168 439.152 17.187 439.027 17.203 cv
438.902 17.219 438.742 17.227 438.551 17.227 cv
438.363 17.227 438.207 17.219 438.086 17.203 cv
437.957 17.187 437.859 17.168 437.789 17.141 cv
437.715 17.117 437.664 17.082 437.633 17.039 cv
437.602 17 437.586 16.953 437.586 16.898 cv
437.586 8.69098 li
437.57 8.69098 li
434.648 16.891 li
434.625 16.961 434.59 17.016 434.547 17.059 cv
434.496 17.105 434.434 17.141 434.355 17.164 cv
434.273 17.191 434.172 17.207 434.047 17.215 cv
433.922 17.223 433.77 17.227 433.598 17.227 cv
433.418 17.227 433.27 17.219 433.145 17.207 cv
433.02 17.191 432.914 17.172 432.836 17.145 cv
432.75 17.117 432.688 17.082 432.645 17.039 cv
432.594 17 432.563 16.953 432.551 16.891 cv
429.73 8.69098 li
429.715 8.69098 li
429.715 16.898 li
429.711 16.953 429.695 17 429.672 17.039 cv
429.641 17.082 429.59 17.117 429.512 17.141 cv
429.434 17.168 429.332 17.187 429.211 17.203 cv
429.086 17.219 428.93 17.227 428.742 17.227 cv
428.551 17.227 428.395 17.219 428.273 17.203 cv
428.145 17.187 428.043 17.168 427.973 17.141 cv
427.895 17.117 427.844 17.082 427.816 17.039 cv
427.785 17 427.77 16.953 427.773 16.898 cv
427.773 7.914 li
427.77 7.65198 427.84 7.44897 427.984 7.30499 cv
428.121 7.16803 428.309 7.09802 428.547 7.09399 cv
429.887 7.09399 li
430.125 7.09802 430.328 7.117 430.5 7.15198 cv
430.668 7.19501 430.816 7.258 430.945 7.34802 cv
431.066 7.44098 431.172 7.56201 431.258 7.70697 cv
431.34 7.85901 431.41 8.04303 431.477 8.258 cv
433.66 14.266 li
433.691 14.266 li
435.949 8.27301 li
436.016 8.05499 436.09 7.87097 436.172 7.71899 cv
436.25 7.57001 436.344 7.44897 436.453 7.35199 cv
436.559 7.26202 436.684 7.19501 436.828 7.15198 cv
436.973 7.117 437.141 7.09802 437.336 7.09399 cv
438.715 7.09399 li
438.852 7.09802 438.973 7.11298 439.078 7.14801 cv
439.176 7.18701 439.258 7.242 439.328 7.30902 cv
439.391 7.383 439.441 7.46899 439.477 7.56598 cv
439.508 7.672 439.523 7.789 439.527 7.914 cv
cp
f
448.637 13.367 mo
448.633 13.965 448.555 14.508 448.402 14.992 cv
448.242 15.484 448.008 15.902 447.691 16.254 cv
447.375 16.605 446.977 16.879 446.5 17.07 cv
446.02 17.262 445.461 17.355 444.824 17.359 cv
444.203 17.355 443.664 17.273 443.211 17.102 cv
442.75 16.934 442.371 16.684 442.074 16.355 cv
441.77 16.031 441.547 15.629 441.402 15.148 cv
441.258 14.672 441.188 14.125 441.188 13.508 cv
441.188 12.918 441.266 12.379 441.422 11.887 cv
441.578 11.398 441.816 10.977 442.137 10.625 cv
442.453 10.277 442.848 10.004 443.324 9.80902 cv
443.797 9.617 444.355 9.52301 444.996 9.52002 cv
445.621 9.52301 446.16 9.60498 446.617 9.77301 cv
447.074 9.94501 447.453 10.195 447.75 10.52 cv
448.047 10.848 448.27 11.25 448.418 11.727 cv
448.563 12.207 448.633 12.754 448.637 13.367 cv
cp
446.617 13.445 mo
446.613 13.109 446.586 12.793 446.535 12.5 cv
446.477 12.215 446.383 11.965 446.258 11.75 cv
446.125 11.539 445.953 11.371 445.742 11.25 cv
445.523 11.133 445.254 11.074 444.926 11.07 cv
444.637 11.074 444.383 11.129 444.164 11.23 cv
443.945 11.34 443.766 11.496 443.625 11.699 cv
443.484 11.906 443.379 12.152 443.309 12.437 cv
443.238 12.73 443.203 13.059 443.203 13.422 cv
443.203 13.77 443.23 14.086 443.289 14.371 cv
443.344 14.664 443.438 14.914 443.566 15.125 cv
443.691 15.34 443.863 15.504 444.086 15.617 cv
444.301 15.738 444.57 15.797 444.895 15.793 cv
445.188 15.797 445.445 15.742 445.668 15.633 cv
445.883 15.527 446.063 15.375 446.203 15.168 cv
446.344 14.969 446.445 14.723 446.516 14.434 cv
446.578 14.148 446.613 13.82 446.617 13.445 cv
cp
f
456.816 16.914 mo
456.813 16.977 456.801 17.023 456.777 17.059 cv
456.75 17.102 456.703 17.133 456.645 17.156 cv
456.578 17.18 456.496 17.195 456.391 17.211 cv
456.285 17.219 456.152 17.227 456 17.227 cv
455.828 17.227 455.695 17.219 455.594 17.211 cv
455.488 17.195 455.402 17.18 455.34 17.156 cv
455.273 17.133 455.227 17.102 455.199 17.059 cv
455.168 17.023 455.152 16.977 455.156 16.914 cv
455.156 16.145 li
454.797 16.531 454.422 16.828 454.031 17.039 cv
453.633 17.25 453.199 17.355 452.727 17.359 cv
452.191 17.355 451.742 17.254 451.379 17.051 cv
451.012 16.848 450.715 16.574 450.484 16.223 cv
450.25 15.879 450.082 15.473 449.98 15.004 cv
449.879 14.543 449.828 14.051 449.828 13.531 cv
449.828 12.918 449.891 12.363 450.023 11.867 cv
450.152 11.375 450.348 10.953 450.605 10.605 cv
450.859 10.258 451.176 9.992 451.555 9.80103 cv
451.934 9.617 452.371 9.52301 452.867 9.52002 cv
453.254 9.52301 453.605 9.60199 453.926 9.758 cv
454.238 9.91803 454.555 10.148 454.867 10.453 cv
454.867 6.69098 li
454.867 6.64099 454.879 6.59399 454.91 6.55103 cv
454.934 6.51202 454.988 6.47699 455.066 6.44501 cv
455.141 6.41803 455.238 6.39801 455.367 6.37903 cv
455.488 6.367 455.648 6.35901 455.844 6.35498 cv
456.035 6.35901 456.191 6.367 456.316 6.37903 cv
456.438 6.39801 456.539 6.41803 456.613 6.44501 cv
456.684 6.47699 456.734 6.51202 456.77 6.55103 cv
456.797 6.59399 456.813 6.64099 456.816 6.69098 cv
cp
454.867 12.27 mo
454.586 11.918 454.316 11.648 454.063 11.461 cv
453.801 11.273 453.531 11.18 453.254 11.18 cv
453 11.18 452.781 11.246 452.598 11.371 cv
452.41 11.504 452.262 11.672 452.152 11.883 cv
452.039 12.094 451.957 12.332 451.902 12.594 cv
451.848 12.859 451.82 13.129 451.82 13.398 cv
451.82 13.695 451.844 13.977 451.891 14.25 cv
451.938 14.527 452.012 14.773 452.121 14.988 cv
452.223 15.203 452.367 15.375 452.547 15.504 cv
452.723 15.637 452.945 15.703 453.215 15.699 cv
453.348 15.703 453.477 15.684 453.609 15.641 cv
453.734 15.605 453.867 15.543 454 15.449 cv
454.133 15.363 454.27 15.246 454.41 15.102 cv
454.551 14.961 454.703 14.785 454.867 14.578 cv
cp
f
465.168 13.238 mo
465.164 13.477 465.113 13.652 465.008 13.766 cv
464.898 13.883 464.75 13.941 464.57 13.937 cv
460.336 13.937 li
460.332 14.238 460.367 14.508 460.441 14.746 cv
460.508 14.988 460.621 15.191 460.777 15.359 cv
460.93 15.531 461.125 15.66 461.367 15.746 cv
461.605 15.836 461.895 15.879 462.238 15.879 cv
462.578 15.879 462.879 15.855 463.141 15.805 cv
463.398 15.758 463.625 15.703 463.816 15.641 cv
464.004 15.582 464.16 15.527 464.289 15.477 cv
464.41 15.43 464.512 15.406 464.594 15.402 cv
464.637 15.406 464.676 15.414 464.711 15.43 cv
464.738 15.449 464.766 15.48 464.785 15.527 cv
464.805 15.574 464.816 15.641 464.828 15.727 cv
464.832 15.812 464.836 15.922 464.84 16.051 cv
464.836 16.168 464.836 16.266 464.832 16.344 cv
464.824 16.426 464.816 16.492 464.809 16.547 cv
464.797 16.605 464.781 16.656 464.762 16.691 cv
464.742 16.734 464.715 16.77 464.684 16.805 cv
464.648 16.844 464.555 16.895 464.406 16.953 cv
464.25 17.02 464.059 17.082 463.828 17.137 cv
463.59 17.199 463.32 17.246 463.023 17.293 cv
462.719 17.332 462.398 17.355 462.059 17.359 cv
461.438 17.355 460.895 17.281 460.434 17.125 cv
459.965 16.973 459.578 16.734 459.27 16.418 cv
458.953 16.102 458.719 15.703 458.57 15.219 cv
458.414 14.738 458.34 14.172 458.344 13.516 cv
458.34 12.902 458.418 12.344 458.582 11.848 cv
458.738 11.352 458.973 10.934 459.285 10.586 cv
459.59 10.242 459.965 9.97699 460.402 9.79303 cv
460.84 9.61298 461.332 9.52301 461.887 9.52002 cv
462.465 9.52301 462.965 9.60901 463.379 9.77698 cv
463.793 9.953 464.129 10.191 464.395 10.492 cv
464.656 10.797 464.852 11.156 464.98 11.57 cv
465.102 11.988 465.164 12.437 465.168 12.926 cv
cp
463.266 12.676 mo
463.277 12.125 463.168 11.691 462.934 11.379 cv
462.699 11.066 462.332 10.91 461.84 10.906 cv
461.59 10.91 461.375 10.957 461.191 11.047 cv
461.004 11.145 460.852 11.27 460.73 11.426 cv
460.605 11.586 460.512 11.773 460.449 11.988 cv
460.383 12.203 460.344 12.434 460.336 12.676 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
