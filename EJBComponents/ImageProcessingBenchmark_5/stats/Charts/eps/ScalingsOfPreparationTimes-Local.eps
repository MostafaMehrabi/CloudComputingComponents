%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingsOfPreparationTimes-Local.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:44:15 p.m.
%%BoundingBox: 0 0 660 540
%%HiResBoundingBox: 0 0 659.1601 540
%%CropBox: 0 0 659.1601 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
659.16 540 li
659.16 0 li
cp
clp
gsave
0 540 mo
660 540 li
660 0 li
0 0 li
cp
clp
0 0 mo
659.16 0 li
659.16 540 li
0 540 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
32.398 472.441 mo
642.961 472.441 li
32.398 450.238 mo
642.961 450.238 li
32.398 428.16 mo
642.961 428.16 li
32.398 406.078 mo
642.961 406.078 li
32.398 384 mo
642.961 384 li
32.398 361.922 mo
642.961 361.922 li
32.398 339.84 mo
642.961 339.84 li
32.398 317.762 mo
642.961 317.762 li
32.398 295.68 mo
642.961 295.68 li
32.398 273.602 mo
642.961 273.602 li
32.398 251.52 mo
642.961 251.52 li
32.398 229.441 mo
642.961 229.441 li
32.398 207.359 mo
642.961 207.359 li
32.398 185.16 mo
642.961 185.16 li
32.398 163.078 mo
642.961 163.078 li
32.398 141 mo
642.961 141 li
32.398 118.922 mo
642.961 118.922 li
32.398 96.84 mo
642.961 96.84 li
32.398 74.762 mo
642.961 74.762 li
32.398 52.68 mo
642.961 52.68 li
32.398 30.602 mo
642.961 30.602 li
.326574 .281529 .277562 0 cmyk
@
70.559 30.602 mo
70.559 494.52 li
146.879 30.602 mo
146.879 494.52 li
223.199 30.602 mo
223.199 494.52 li
299.52 30.602 mo
299.52 494.52 li
375.84 30.602 mo
375.84 494.52 li
452.16 30.602 mo
452.16 494.52 li
528.48 30.602 mo
528.48 494.52 li
604.801 30.602 mo
604.801 494.52 li
.175235 .144778 .143648 0 cmyk
@
32.398 30.602 mo
32.398 494.52 li
108.719 30.602 mo
108.719 494.52 li
185.039 30.602 mo
185.039 494.52 li
261.359 30.602 mo
261.359 494.52 li
337.68 30.602 mo
337.68 494.52 li
414 30.602 mo
414 494.52 li
490.32 30.602 mo
490.32 494.52 li
566.641 30.602 mo
566.641 494.52 li
642.961 30.602 mo
642.961 494.52 li
.326574 .281529 .277562 0 cmyk
@
12.359 485.16 mo
19.441 485.16 li
19.441 502.199 li
12.359 502.199 li
cp
0 0 0 0 cmyk
ef
12.359 463.078 mo
19.441 463.078 li
19.441 480.121 li
12.359 480.121 li
cp
ef
12.359 441 mo
19.441 441 li
19.441 458.039 li
12.359 458.039 li
cp
ef
12.359 418.922 mo
19.441 418.922 li
19.441 435.961 li
12.359 435.961 li
cp
ef
12.359 396.84 mo
19.441 396.84 li
19.441 413.879 li
12.359 413.879 li
cp
ef
12.359 374.762 mo
19.441 374.762 li
19.441 391.801 li
12.359 391.801 li
cp
ef
12.359 352.559 mo
19.441 352.559 li
19.441 369.719 li
12.359 369.719 li
cp
ef
12.359 330.48 mo
19.441 330.48 li
19.441 347.64 li
12.359 347.64 li
cp
ef
12.359 308.398 mo
19.441 308.398 li
19.441 325.558 li
12.359 325.558 li
cp
ef
5.281 286.32 mo
19.441 286.32 li
19.441 303.48 li
5.281 303.48 li
cp
ef
5.281 264.238 mo
19.441 264.238 li
19.441 281.398 li
5.281 281.398 li
cp
ef
5.281 242.16 mo
19.441 242.16 li
19.441 259.32 li
5.281 259.32 li
cp
ef
5.281 220.078 mo
19.441 220.078 li
19.441 237.121 li
5.281 237.121 li
cp
ef
5.281 198 mo
19.441 198 li
19.441 215.039 li
5.281 215.039 li
cp
ef
5.281 175.922 mo
19.441 175.922 li
19.441 192.961 li
5.281 192.961 li
cp
ef
5.281 153.84 mo
19.441 153.84 li
19.441 170.879 li
5.281 170.879 li
cp
ef
5.281 131.762 mo
19.441 131.762 li
19.441 148.801 li
5.281 148.801 li
cp
ef
5.281 109.68 mo
19.441 109.68 li
19.441 126.719 li
5.281 126.719 li
cp
ef
5.281 87.602 mo
19.441 87.602 li
19.441 104.641 li
5.281 104.641 li
cp
ef
5.281 65.398 mo
19.441 65.398 li
19.441 82.558 li
5.281 82.558 li
cp
ef
5.281 43.32 mo
19.441 43.32 li
19.441 60.48 li
5.281 60.48 li
cp
ef
5.281 21.238 mo
19.441 21.238 li
19.441 38.398 li
5.281 38.398 li
cp
ef
.96 lw
32.398 494.52 mo
642.961 494.52 li
.369879 .299321 .304356 .000976577 cmyk
@
32.398 494.52 mo
32.398 498.961 li
108.719 494.52 mo
108.719 498.961 li
185.039 494.52 mo
185.039 498.961 li
261.359 494.52 mo
261.359 498.961 li
337.68 494.52 mo
337.68 498.961 li
414 494.52 mo
414 498.961 li
490.32 494.52 mo
490.32 498.961 li
566.641 494.52 mo
566.641 498.961 li
642.961 494.52 mo
642.961 498.961 li
@
gsave
32.398 30.602 mo
643.679 30.602 li
643.679 495.122 li
32.398 495.122 li
cp
clp
1 lc
32.398 494.52 mo
108.719 469.68 li
185.039 435 li
261.359 394.68 li
337.68 352.801 li
414 312 li
490.32 270.359 li
566.641 230.16 li
642.961 189.602 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
37.43 499.449 mo
27.352 489.371 li
27.352 499.449 mo
37.43 489.371 li
.62829 .284672 0 0 cmyk
@
113.75 474.73 mo
103.672 464.648 li
103.672 474.73 mo
113.75 464.648 li
@
190.07 439.93 mo
179.988 429.852 li
179.988 439.93 mo
190.07 429.852 li
@
266.391 399.609 mo
256.309 389.531 li
256.309 399.609 mo
266.391 389.531 li
@
342.711 357.852 mo
332.629 347.77 li
332.629 357.852 mo
342.711 347.77 li
@
419.031 316.93 mo
408.949 306.852 li
408.949 316.93 mo
419.031 306.852 li
@
495.352 275.41 mo
485.27 265.328 li
485.27 275.41 mo
495.352 265.328 li
@
571.672 235.211 mo
561.59 225.129 li
561.59 235.211 mo
571.672 225.129 li
@
647.988 194.648 mo
637.91 184.57 li
637.91 194.648 mo
647.988 184.57 li
@
gsave
32.398 30.602 mo
643.679 30.602 li
643.679 495.122 li
32.398 495.122 li
cp
clp
.96 lw
1 lc
32.398 494.52 mo
108.719 473.641 li
185.039 406.68 li
261.359 350.039 li
337.68 325.68 li
414 277.68 li
490.32 229.32 li
566.641 181.199 li
642.961 132.961 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
37.43 499.449 mo
27.352 489.371 li
27.352 499.449 mo
37.43 489.371 li
.0321965 .622736 .922606 .000579843 cmyk
@
113.75 478.57 mo
103.672 468.488 li
103.672 478.57 mo
113.75 468.488 li
@
190.07 411.73 mo
179.988 401.648 li
179.988 411.73 mo
190.07 401.648 li
@
266.391 355.09 mo
256.309 345.012 li
256.309 355.09 mo
266.391 345.012 li
@
342.711 330.609 mo
332.629 320.531 li
332.629 330.609 mo
342.711 320.531 li
@
419.031 282.73 mo
408.949 272.648 li
408.949 282.73 mo
419.031 272.648 li
@
495.352 234.371 mo
485.27 224.289 li
485.27 234.371 mo
495.352 224.289 li
@
571.672 186.25 mo
561.59 176.172 li
561.59 186.25 mo
571.672 176.172 li
@
647.988 138.012 mo
637.91 127.93 li
637.91 138.012 mo
647.988 127.93 li
@
gsave
32.398 30.602 mo
643.679 30.602 li
643.679 495.122 li
32.398 495.122 li
cp
clp
.96 lw
1 lc
32.398 494.52 mo
108.719 464.398 li
185.039 407.039 li
261.359 359.039 li
337.68 326.52 li
414 279.121 li
490.32 230.52 li
566.641 182.398 li
642.961 46.199 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
37.43 499.449 mo
27.352 489.371 li
27.352 499.449 mo
37.43 489.371 li
.621118 .109194 .980743 .0040589 cmyk
@
113.75 469.449 mo
103.672 459.371 li
103.672 469.449 mo
113.75 459.371 li
@
190.07 411.969 mo
179.988 401.891 li
179.988 411.969 mo
190.07 401.891 li
@
266.391 364.09 mo
256.309 354.012 li
256.309 364.09 mo
266.391 354.012 li
@
342.711 331.57 mo
332.629 321.488 li
332.629 331.57 mo
342.711 321.488 li
@
419.031 284.051 mo
408.949 273.969 li
408.949 284.051 mo
419.031 273.969 li
@
495.352 235.57 mo
485.27 225.488 li
485.27 235.57 mo
495.352 225.488 li
@
571.672 187.328 mo
561.59 177.25 li
561.59 187.328 mo
571.672 177.25 li
@
647.988 51.25 mo
637.91 41.172 li
637.91 51.25 mo
647.988 41.172 li
@
gsave
32.398 30.602 mo
643.679 30.602 li
643.679 495.122 li
32.398 495.122 li
cp
clp
.96 lw
1 lc
32.398 494.52 mo
108.719 475.559 li
185.039 431.879 li
261.359 377.52 li
337.68 329.52 li
414 283.559 li
490.32 234.238 li
566.641 187.32 li
642.961 140.039 li
0 .993988 1 0 cmyk
@
grestore
37.43 499.449 mo
27.352 489.371 li
27.352 499.449 mo
37.43 489.371 li
0 .993988 1 0 cmyk
@
113.75 480.488 mo
103.672 470.41 li
103.672 480.488 mo
113.75 470.41 li
@
190.07 436.809 mo
179.988 426.73 li
179.988 436.809 mo
190.07 426.73 li
@
266.391 382.57 mo
256.309 372.488 li
256.309 382.57 mo
266.391 372.488 li
@
342.711 334.57 mo
332.629 324.488 li
332.629 334.57 mo
342.711 324.488 li
@
419.031 288.609 mo
408.949 278.531 li
408.949 288.609 mo
419.031 278.531 li
@
495.352 239.172 mo
485.27 229.09 li
485.27 239.172 mo
495.352 229.09 li
@
571.672 192.371 mo
561.59 182.289 li
561.59 192.371 mo
571.672 182.289 li
@
647.988 144.969 mo
637.91 134.891 li
637.91 144.969 mo
647.988 134.891 li
@
gsave
32.398 30.602 mo
643.679 30.602 li
643.679 495.122 li
32.398 495.122 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
32.398 494.52 mo
108.719 472.801 li
185.039 433.078 li
261.359 370.922 li
337.68 351.48 li
414 324.48 li
490.32 281.762 li
566.641 236.762 li
642.961 199.68 li
.62829 .284672 0 0 cmyk
@
grestore
37.43 499.449 mo
27.352 489.371 li
27.352 499.449 mo
37.43 489.371 li
.62829 .284672 0 0 cmyk
@
113.75 477.73 mo
103.672 467.648 li
103.672 477.73 mo
113.75 467.648 li
@
190.07 438.129 mo
179.988 428.051 li
179.988 438.129 mo
190.07 428.051 li
@
266.391 375.852 mo
256.309 365.77 li
256.309 375.852 mo
266.391 365.77 li
@
342.711 356.531 mo
332.629 346.449 li
332.629 356.531 mo
342.711 346.449 li
@
419.031 329.531 mo
408.949 319.449 li
408.949 329.531 mo
419.031 319.449 li
@
495.352 286.691 mo
485.27 276.609 li
485.27 286.691 mo
495.352 276.609 li
@
571.672 241.809 mo
561.59 231.73 li
561.59 241.809 mo
571.672 231.73 li
@
647.988 204.73 mo
637.91 194.648 li
637.91 204.73 mo
647.988 194.648 li
@
gsave
32.398 30.602 mo
643.679 30.602 li
643.679 495.122 li
32.398 495.122 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
32.398 494.52 mo
108.719 475.441 li
185.039 437.762 li
261.359 405.602 li
337.68 382.32 li
414 335.398 li
490.32 283.922 li
566.641 290.52 li
642.961 196.199 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
37.43 499.449 mo
27.352 489.371 li
27.352 499.449 mo
37.43 489.371 li
.0321965 .622736 .922606 .000579843 cmyk
@
113.75 480.371 mo
103.672 470.289 li
103.672 480.371 mo
113.75 470.289 li
@
190.07 442.809 mo
179.988 432.73 li
179.988 442.809 mo
190.07 432.73 li
@
266.391 410.648 mo
256.309 400.57 li
256.309 410.648 mo
266.391 400.57 li
@
342.711 387.371 mo
332.629 377.289 li
332.629 387.371 mo
342.711 377.289 li
@
419.031 340.449 mo
408.949 330.371 li
408.949 340.449 mo
419.031 330.371 li
@
495.352 288.969 mo
485.27 278.891 li
485.27 288.969 mo
495.352 278.891 li
@
571.672 295.57 mo
561.59 285.488 li
561.59 295.57 mo
571.672 285.488 li
@
647.988 201.129 mo
637.91 191.051 li
637.91 201.129 mo
647.988 191.051 li
@
gsave
32.398 30.602 mo
643.679 30.602 li
643.679 495.122 li
32.398 495.122 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
32.398 494.52 mo
108.719 473.16 li
185.039 433.441 li
261.359 415.32 li
337.68 391.801 li
414 366.602 li
490.32 334.801 li
566.641 324.238 li
642.961 285.359 li
.467353 0 .87747 0 cmyk
@
grestore
37.43 499.449 mo
27.352 489.371 li
27.352 499.449 mo
37.43 489.371 li
.621118 .109194 .980743 .0040589 cmyk
@
113.75 478.09 mo
103.672 468.012 li
103.672 478.09 mo
113.75 468.012 li
@
190.07 438.488 mo
179.988 428.41 li
179.988 438.488 mo
190.07 428.41 li
@
266.391 420.25 mo
256.309 410.172 li
256.309 420.25 mo
266.391 410.172 li
@
342.711 396.73 mo
332.629 386.648 li
332.629 396.73 mo
342.711 386.648 li
@
419.031 371.648 mo
408.949 361.57 li
408.949 371.648 mo
419.031 361.57 li
@
495.352 339.73 mo
485.27 329.648 li
485.27 339.73 mo
495.352 329.648 li
@
571.672 329.289 mo
561.59 319.211 li
561.59 329.289 mo
571.672 319.211 li
@
647.988 290.41 mo
637.91 280.328 li
637.91 290.41 mo
647.988 280.328 li
@
gsave
32.398 30.602 mo
643.679 30.602 li
643.679 495.122 li
32.398 495.122 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
32.398 494.52 mo
108.719 472.922 li
185.039 432.961 li
261.359 432.48 li
337.68 425.762 li
414 382.68 li
490.32 345.719 li
566.641 332.641 li
642.961 285.121 li
0 .993988 1 0 cmyk
@
grestore
37.43 499.449 mo
27.352 489.371 li
27.352 499.449 mo
37.43 489.371 li
0 .993988 1 0 cmyk
@
113.75 477.969 mo
103.672 467.891 li
103.672 477.969 mo
113.75 467.891 li
@
190.07 438.012 mo
179.988 427.93 li
179.988 438.012 mo
190.07 427.93 li
@
266.391 437.41 mo
256.309 427.328 li
256.309 437.41 mo
266.391 427.328 li
@
342.711 430.809 mo
332.629 420.73 li
332.629 430.809 mo
342.711 420.73 li
@
419.031 387.73 mo
408.949 377.648 li
408.949 387.73 mo
419.031 377.648 li
@
495.352 350.77 mo
485.27 340.691 li
485.27 350.77 mo
495.352 340.691 li
@
571.672 337.57 mo
561.59 327.488 li
561.59 337.57 mo
571.672 327.488 li
@
647.988 290.172 mo
637.91 280.09 li
637.91 290.172 mo
647.988 280.09 li
@
12.32 485.164 mo
19.414 485.164 li
19.414 502.258 li
12.32 502.258 li
cp
0 0 0 0 cmyk
ef
18.695 498.109 mo
18.691 498.199 18.684 498.27 18.672 498.328 cv
18.656 498.391 18.637 498.441 18.617 498.473 cv
18.594 498.512 18.57 498.535 18.539 498.551 cv
18.508 498.566 18.477 498.574 18.449 498.574 cv
13.813 498.574 li
13.777 498.574 13.75 498.566 13.723 498.551 cv
13.695 498.535 13.668 498.512 13.645 498.473 cv
13.617 498.441 13.598 498.391 13.586 498.328 cv
13.57 498.27 13.563 498.199 13.566 498.109 cv
13.563 498.031 13.57 497.957 13.586 497.895 cv
13.598 497.836 13.613 497.789 13.637 497.75 cv
13.652 497.715 13.68 497.684 13.711 497.66 cv
13.742 497.641 13.773 497.633 13.813 497.629 cv
15.664 497.629 li
15.664 490.883 li
13.949 491.902 li
13.859 491.953 13.789 491.98 13.742 491.988 cv
13.688 491.996 13.645 491.988 13.613 491.957 cv
13.578 491.93 13.559 491.879 13.547 491.809 cv
13.535 491.742 13.527 491.656 13.531 491.547 cv
13.527 491.473 13.531 491.406 13.543 491.348 cv
13.547 491.297 13.559 491.25 13.574 491.211 cv
13.586 491.176 13.605 491.145 13.629 491.117 cv
13.652 491.09 13.684 491.062 13.73 491.035 cv
15.773 489.723 li
15.789 489.711 15.809 489.699 15.84 489.691 cv
15.863 489.684 15.898 489.676 15.945 489.664 cv
15.984 489.656 16.035 489.648 16.09 489.645 cv
16.145 489.645 16.211 489.645 16.297 489.641 cv
16.402 489.645 16.496 489.648 16.57 489.656 cv
16.641 489.664 16.695 489.68 16.742 489.695 cv
16.781 489.715 16.809 489.734 16.824 489.758 cv
16.832 489.785 16.84 489.809 16.844 489.832 cv
16.844 497.629 li
18.449 497.629 li
18.484 497.633 18.52 497.641 18.551 497.66 cv
18.582 497.684 18.605 497.715 18.629 497.75 cv
18.645 497.789 18.66 497.836 18.676 497.895 cv
18.684 497.957 18.691 498.031 18.695 498.109 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
12.32 463.078 mo
19.414 463.078 li
19.414 480.168 li
12.32 480.168 li
cp
0 0 0 0 cmyk
ef
18.676 475.988 mo
18.672 476.074 18.668 476.148 18.656 476.211 cv
18.645 476.277 18.629 476.332 18.609 476.371 cv
18.586 476.418 18.559 476.449 18.527 476.465 cv
18.492 476.488 18.453 476.496 18.414 476.496 cv
13.512 476.496 li
13.449 476.496 13.391 476.488 13.344 476.473 cv
13.293 476.457 13.254 476.434 13.219 476.395 cv
13.184 476.363 13.156 476.309 13.145 476.238 cv
13.125 476.168 13.117 476.082 13.121 475.98 cv
13.117 475.891 13.121 475.812 13.129 475.742 cv
13.133 475.676 13.148 475.617 13.176 475.562 cv
13.199 475.512 13.23 475.457 13.266 475.402 cv
13.301 475.352 13.344 475.297 13.402 475.234 cv
15.176 473.41 li
15.586 472.992 15.914 472.617 16.164 472.281 cv
16.41 471.953 16.602 471.648 16.734 471.371 cv
16.867 471.098 16.953 470.848 17 470.621 cv
17.039 470.398 17.063 470.187 17.063 469.992 cv
17.063 469.797 17.027 469.613 16.961 469.434 cv
16.895 469.262 16.801 469.105 16.676 468.969 cv
16.551 468.84 16.395 468.734 16.207 468.652 cv
16.02 468.578 15.801 468.539 15.555 468.535 cv
15.266 468.539 15.008 468.578 14.781 468.652 cv
14.551 468.734 14.352 468.82 14.18 468.906 cv
14.008 469 13.863 469.082 13.746 469.16 cv
13.629 469.238 13.543 469.277 13.492 469.277 cv
13.457 469.277 13.426 469.27 13.402 469.25 cv
13.371 469.234 13.352 469.203 13.336 469.16 cv
13.32 469.121 13.305 469.066 13.297 468.996 cv
13.285 468.93 13.281 468.848 13.285 468.75 cv
13.281 468.684 13.285 468.625 13.293 468.574 cv
13.297 468.523 13.305 468.48 13.316 468.441 cv
13.324 468.406 13.34 468.371 13.359 468.34 cv
13.379 468.309 13.414 468.27 13.473 468.219 cv
13.523 468.172 13.617 468.105 13.754 468.023 cv
13.887 467.941 14.059 467.863 14.262 467.781 cv
14.465 467.703 14.688 467.633 14.934 467.578 cv
15.176 467.523 15.434 467.496 15.707 467.496 cv
16.133 467.496 16.508 467.559 16.832 467.68 cv
17.152 467.801 17.418 467.965 17.633 468.176 cv
17.844 468.387 18.004 468.633 18.109 468.906 cv
18.215 469.187 18.27 469.484 18.27 469.797 cv
18.27 470.086 18.242 470.367 18.191 470.645 cv
18.141 470.93 18.035 471.234 17.875 471.559 cv
17.711 471.887 17.477 472.25 17.172 472.648 cv
16.863 473.051 16.457 473.512 15.953 474.027 cv
14.547 475.496 li
18.406 475.496 li
18.438 475.5 18.473 475.512 18.512 475.527 cv
18.543 475.551 18.574 475.582 18.602 475.621 cv
18.625 475.664 18.645 475.715 18.656 475.773 cv
18.668 475.84 18.672 475.91 18.676 475.988 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
12.32 440.988 mo
19.414 440.988 li
19.414 458.078 li
12.32 458.078 li
cp
0 0 0 0 cmyk
ef
18.605 451.855 mo
18.602 452.266 18.531 452.633 18.391 452.957 cv
18.246 453.285 18.043 453.566 17.781 453.797 cv
17.516 454.031 17.188 454.207 16.801 454.332 cv
16.41 454.457 15.973 454.52 15.488 454.52 cv
15.184 454.52 14.906 454.492 14.652 454.445 cv
14.391 454.398 14.16 454.348 13.965 454.277 cv
13.762 454.215 13.598 454.145 13.465 454.074 cv
13.332 454.004 13.246 453.953 13.215 453.918 cv
13.176 453.891 13.152 453.859 13.137 453.824 cv
13.117 453.793 13.098 453.754 13.086 453.707 cv
13.07 453.664 13.063 453.609 13.055 453.539 cv
13.047 453.477 13.043 453.395 13.047 453.293 cv
13.043 453.133 13.059 453.02 13.094 452.953 cv
13.125 452.891 13.172 452.855 13.234 452.855 cv
13.277 452.855 13.359 452.895 13.484 452.965 cv
13.605 453.043 13.766 453.121 13.961 453.203 cv
14.152 453.289 14.379 453.367 14.645 453.437 cv
14.902 453.512 15.195 453.547 15.516 453.547 cv
15.824 453.547 16.094 453.508 16.332 453.43 cv
16.563 453.352 16.762 453.242 16.922 453.102 cv
17.078 452.961 17.195 452.793 17.277 452.598 cv
17.355 452.402 17.395 452.191 17.398 451.965 cv
17.395 451.715 17.344 451.488 17.246 451.285 cv
17.141 451.086 16.992 450.914 16.801 450.766 cv
16.602 450.621 16.363 450.508 16.078 450.43 cv
15.793 450.352 15.469 450.312 15.105 450.312 cv
14.234 450.312 li
14.191 450.312 14.156 450.305 14.121 450.289 cv
14.086 450.273 14.055 450.246 14.031 450.207 cv
14.004 450.172 13.984 450.125 13.969 450.066 cv
13.953 450.008 13.945 449.93 13.945 449.832 cv
13.945 449.746 13.949 449.676 13.965 449.617 cv
13.973 449.562 13.992 449.516 14.023 449.48 cv
14.047 449.445 14.078 449.422 14.109 449.402 cv
14.141 449.391 14.176 449.383 14.219 449.379 cv
14.992 449.379 li
15.293 449.383 15.563 449.344 15.805 449.262 cv
16.039 449.187 16.242 449.074 16.414 448.926 cv
16.578 448.781 16.707 448.605 16.797 448.402 cv
16.887 448.199 16.934 447.973 16.934 447.719 cv
16.934 447.539 16.902 447.363 16.844 447.195 cv
16.781 447.031 16.691 446.887 16.574 446.762 cv
16.453 446.637 16.301 446.539 16.121 446.469 cv
15.934 446.398 15.723 446.363 15.48 446.363 cv
15.215 446.363 14.969 446.406 14.75 446.484 cv
14.523 446.566 14.328 446.652 14.156 446.742 cv
13.98 446.836 13.836 446.922 13.723 447 cv
13.609 447.082 13.527 447.121 13.484 447.117 cv
13.449 447.121 13.422 447.113 13.398 447.102 cv
13.371 447.09 13.352 447.066 13.336 447.031 cv
13.32 447 13.309 446.953 13.301 446.887 cv
13.293 446.828 13.289 446.746 13.293 446.645 cv
13.289 446.578 13.289 446.52 13.297 446.465 cv
13.297 446.414 13.309 446.367 13.324 446.324 cv
13.34 446.289 13.355 446.254 13.375 446.219 cv
13.391 446.191 13.422 446.152 13.465 446.105 cv
13.508 446.062 13.594 446 13.73 445.918 cv
13.859 445.836 14.023 445.758 14.219 445.676 cv
14.41 445.598 14.633 445.527 14.891 445.473 cv
15.141 445.418 15.414 445.391 15.711 445.391 cv
16.117 445.391 16.48 445.445 16.793 445.547 cv
17.105 445.656 17.363 445.805 17.574 445.992 cv
17.777 446.187 17.934 446.418 18.039 446.684 cv
18.141 446.953 18.191 447.246 18.195 447.57 cv
18.191 447.852 18.156 448.113 18.086 448.348 cv
18.012 448.59 17.902 448.801 17.762 448.984 cv
17.617 449.172 17.445 449.328 17.242 449.457 cv
17.035 449.59 16.797 449.684 16.527 449.73 cv
16.527 449.742 li
16.832 449.777 17.113 449.852 17.367 449.973 cv
17.621 450.094 17.84 450.246 18.023 450.43 cv
18.203 450.613 18.344 450.828 18.449 451.07 cv
18.551 451.316 18.602 451.578 18.605 451.855 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
12.32 418.898 mo
19.414 418.898 li
19.414 435.988 li
12.32 435.988 li
cp
0 0 0 0 cmyk
ef
19.051 429.766 mo
19.047 429.918 19.023 430.039 18.98 430.125 cv
18.934 430.215 18.871 430.258 18.789 430.254 cv
17.789 430.254 li
17.789 432.117 li
17.789 432.156 17.777 432.187 17.762 432.211 cv
17.738 432.238 17.707 432.258 17.664 432.277 cv
17.613 432.293 17.551 432.305 17.48 432.316 cv
17.402 432.324 17.309 432.328 17.191 432.332 cv
17.074 432.328 16.977 432.324 16.906 432.316 cv
16.828 432.305 16.77 432.293 16.727 432.277 cv
16.68 432.258 16.648 432.238 16.633 432.211 cv
16.613 432.187 16.605 432.156 16.609 432.117 cv
16.609 430.254 li
12.98 430.254 li
12.922 430.258 12.879 430.25 12.844 430.234 cv
12.809 430.223 12.773 430.195 12.746 430.156 cv
12.715 430.121 12.695 430.07 12.684 430 cv
12.672 429.934 12.668 429.844 12.668 429.73 cv
12.668 429.648 12.668 429.57 12.676 429.5 cv
12.676 429.43 12.688 429.367 12.703 429.312 cv
12.715 429.258 12.73 429.203 12.758 429.148 cv
12.777 429.094 12.805 429.039 12.84 428.977 cv
16 423.59 li
16.02 423.555 16.055 423.523 16.102 423.496 cv
16.145 423.469 16.199 423.445 16.273 423.426 cv
16.34 423.41 16.426 423.398 16.531 423.387 cv
16.633 423.383 16.754 423.379 16.895 423.375 cv
17.043 423.379 17.18 423.383 17.297 423.395 cv
17.41 423.406 17.5 423.422 17.574 423.437 cv
17.641 423.457 17.695 423.48 17.734 423.512 cv
17.77 423.543 17.789 423.578 17.789 423.617 cv
17.789 429.281 li
18.789 429.281 li
18.863 429.285 18.926 429.324 18.977 429.402 cv
19.023 429.484 19.047 429.605 19.051 429.766 cv
cp
16.609 424.414 mo
16.598 424.414 li
13.746 429.281 li
16.609 429.281 li
cp
.629236 .549432 .540154 .282963 cmyk
f
12.32 396.809 mo
19.414 396.809 li
19.414 413.899 li
12.32 413.899 li
cp
0 0 0 0 cmyk
ef
18.633 407.359 mo
18.633 407.836 18.551 408.258 18.391 408.629 cv
18.23 409 18.004 409.312 17.715 409.566 cv
17.418 409.82 17.07 410.016 16.668 410.145 cv
16.262 410.277 15.813 410.34 15.32 410.34 cv
15.043 410.34 14.781 410.32 14.539 410.281 cv
14.289 410.242 14.07 410.195 13.883 410.141 cv
13.688 410.086 13.531 410.031 13.406 409.973 cv
13.281 409.922 13.203 409.879 13.172 409.844 cv
13.137 409.812 13.113 409.781 13.102 409.754 cv
13.086 409.727 13.07 409.695 13.063 409.652 cv
13.047 409.617 13.039 409.566 13.039 409.504 cv
13.031 409.445 13.031 409.375 13.031 409.293 cv
13.031 409.219 13.035 409.148 13.043 409.086 cv
13.051 409.023 13.063 408.973 13.082 408.934 cv
13.098 408.895 13.117 408.867 13.145 408.848 cv
13.168 408.832 13.199 408.824 13.23 408.82 cv
13.277 408.824 13.348 408.852 13.441 408.906 cv
13.535 408.965 13.664 409.027 13.828 409.094 cv
13.992 409.16 14.191 409.223 14.434 409.281 cv
14.668 409.34 14.953 409.367 15.289 409.367 cv
15.59 409.367 15.871 409.332 16.129 409.258 cv
16.383 409.187 16.605 409.074 16.793 408.918 cv
16.977 408.766 17.121 408.57 17.227 408.332 cv
17.332 408.098 17.383 407.809 17.387 407.469 cv
17.383 407.187 17.34 406.937 17.25 406.719 cv
17.16 406.5 17.023 406.32 16.84 406.176 cv
16.652 406.035 16.418 405.93 16.137 405.855 cv
15.852 405.785 15.512 405.746 15.125 405.746 cv
14.84 405.746 14.602 405.762 14.402 405.789 cv
14.199 405.82 14.012 405.836 13.84 405.832 cv
13.711 405.836 13.617 405.805 13.566 405.742 cv
13.508 405.684 13.48 405.57 13.484 405.398 cv
13.484 401.785 li
13.48 401.637 13.516 401.527 13.59 401.449 cv
13.656 401.379 13.758 401.34 13.895 401.34 cv
17.824 401.34 li
17.859 401.34 17.895 401.352 17.93 401.371 cv
17.961 401.395 17.988 401.426 18.016 401.465 cv
18.035 401.508 18.051 401.559 18.066 401.621 cv
18.074 401.687 18.082 401.766 18.086 401.848 cv
18.082 402.016 18.059 402.141 18.02 402.23 cv
17.973 402.324 17.914 402.371 17.836 402.367 cv
14.664 402.367 li
14.664 404.855 li
14.816 404.836 14.973 404.824 15.137 404.816 cv
15.293 404.812 15.48 404.809 15.695 404.809 cv
16.18 404.809 16.605 404.871 16.973 404.992 cv
17.336 405.113 17.641 405.285 17.891 405.504 cv
18.133 405.73 18.32 405.996 18.445 406.309 cv
18.57 406.625 18.633 406.977 18.633 407.359 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
12.32 374.719 mo
19.414 374.719 li
19.414 391.809 li
12.32 391.809 li
cp
0 0 0 0 cmyk
ef
18.902 385.23 mo
18.902 385.621 18.84 386 18.723 386.359 cv
18.598 386.727 18.414 387.043 18.172 387.316 cv
17.922 387.594 17.609 387.816 17.234 387.98 cv
16.852 388.148 16.406 388.23 15.891 388.23 cv
15.52 388.23 15.191 388.187 14.91 388.094 cv
14.625 388.008 14.379 387.875 14.168 387.703 cv
13.957 387.535 13.781 387.328 13.645 387.082 cv
13.504 386.836 13.391 386.555 13.309 386.238 cv
13.223 385.926 13.164 385.582 13.129 385.203 cv
13.09 384.832 13.07 384.43 13.074 383.996 cv
13.07 383.617 13.09 383.234 13.133 382.844 cv
13.172 382.461 13.246 382.086 13.352 381.719 cv
13.457 381.359 13.602 381.02 13.781 380.703 cv
13.961 380.387 14.188 380.109 14.461 379.875 cv
14.734 379.641 15.059 379.453 15.438 379.312 cv
15.816 379.176 16.258 379.109 16.762 379.105 cv
16.93 379.109 17.102 379.117 17.273 379.137 cv
17.445 379.16 17.605 379.191 17.754 379.223 cv
17.902 379.262 18.023 379.297 18.125 379.336 cv
18.223 379.375 18.289 379.41 18.324 379.434 cv
18.352 379.461 18.375 379.488 18.395 379.516 cv
18.41 379.547 18.426 379.578 18.434 379.613 cv
18.441 379.648 18.445 379.687 18.453 379.73 cv
18.453 379.773 18.457 379.828 18.461 379.891 cv
18.457 379.977 18.457 380.047 18.457 380.102 cv
18.453 380.164 18.441 380.211 18.43 380.246 cv
18.41 380.285 18.391 380.312 18.367 380.328 cv
18.34 380.348 18.309 380.355 18.27 380.355 cv
18.219 380.355 18.148 380.34 18.063 380.309 cv
17.973 380.277 17.867 380.242 17.746 380.199 cv
17.621 380.164 17.473 380.129 17.297 380.094 cv
17.121 380.066 16.918 380.051 16.688 380.047 cv
16.258 380.051 15.891 380.137 15.586 380.309 cv
15.281 380.48 15.031 380.715 14.836 381.008 cv
14.641 381.301 14.496 381.641 14.406 382.023 cv
14.309 382.414 14.254 382.816 14.246 383.234 cv
14.363 383.168 14.5 383.102 14.648 383.031 cv
14.797 382.965 14.957 382.902 15.133 382.844 cv
15.309 382.793 15.496 382.746 15.691 382.711 cv
15.887 382.68 16.098 382.664 16.324 382.66 cv
16.801 382.664 17.203 382.73 17.535 382.855 cv
17.863 382.988 18.129 383.168 18.336 383.398 cv
18.535 383.629 18.68 383.898 18.77 384.211 cv
18.855 384.523 18.902 384.863 18.902 385.23 cv
cp
17.707 385.34 mo
17.707 385.078 17.68 384.836 17.629 384.617 cv
17.574 384.402 17.484 384.219 17.363 384.062 cv
17.238 383.914 17.074 383.797 16.871 383.715 cv
16.66 383.633 16.406 383.59 16.109 383.59 cv
15.938 383.59 15.77 383.605 15.602 383.637 cv
15.43 383.668 15.266 383.711 15.109 383.758 cv
14.949 383.812 14.801 383.875 14.66 383.945 cv
14.516 384.02 14.383 384.094 14.266 384.172 cv
14.262 384.766 14.301 385.262 14.379 385.656 cv
14.453 386.055 14.563 386.371 14.707 386.609 cv
14.852 386.852 15.031 387.023 15.246 387.125 cv
15.461 387.23 15.711 387.281 16 387.277 cv
16.289 387.281 16.543 387.227 16.758 387.113 cv
16.973 387.008 17.148 386.859 17.293 386.672 cv
17.434 386.488 17.539 386.281 17.605 386.051 cv
17.672 385.82 17.707 385.586 17.707 385.34 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
12.32 352.629 mo
19.414 352.629 li
19.414 369.719 li
12.32 369.719 li
cp
0 0 0 0 cmyk
ef
18.805 357.656 mo
18.801 357.742 18.797 357.816 18.793 357.879 cv
18.785 357.949 18.777 358.012 18.766 358.07 cv
18.754 358.137 18.738 358.195 18.719 358.25 cv
18.695 358.309 18.672 358.371 18.648 358.43 cv
15.453 365.793 li
15.426 365.852 15.398 365.895 15.367 365.926 cv
15.332 365.961 15.289 365.988 15.234 366.008 cv
15.18 366.027 15.109 366.039 15.031 366.051 cv
14.945 366.055 14.848 366.059 14.73 366.062 cv
14.574 366.059 14.453 366.051 14.367 366.039 cv
14.281 366.023 14.219 366.008 14.18 365.977 cv
14.141 365.949 14.121 365.91 14.129 365.867 cv
14.129 365.824 14.145 365.773 14.176 365.711 cv
17.535 358.184 li
13.277 358.184 li
13.191 358.187 13.125 358.141 13.082 358.047 cv
13.039 357.957 13.02 357.828 13.02 357.664 cv
13.02 357.578 13.023 357.504 13.035 357.437 cv
13.047 357.375 13.063 357.32 13.086 357.277 cv
13.105 357.234 13.133 357.203 13.168 357.18 cv
13.199 357.16 13.238 357.148 13.277 357.148 cv
18.449 357.148 li
18.508 357.148 18.563 357.156 18.613 357.172 cv
18.66 357.187 18.695 357.215 18.723 357.254 cv
18.746 357.293 18.766 357.348 18.781 357.41 cv
18.793 357.477 18.801 357.559 18.805 357.656 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
12.32 330.539 mo
19.414 330.539 li
19.414 347.629 li
12.32 347.629 li
cp
0 0 0 0 cmyk
ef
18.879 341.645 mo
18.879 342.031 18.809 342.375 18.672 342.672 cv
18.535 342.977 18.34 343.227 18.082 343.43 cv
17.824 343.637 17.504 343.793 17.125 343.895 cv
16.742 344 16.309 344.051 15.824 344.051 cv
15.363 344.051 14.953 344.004 14.594 343.91 cv
14.23 343.816 13.926 343.676 13.676 343.484 cv
13.426 343.301 13.234 343.07 13.102 342.793 cv
12.969 342.52 12.902 342.207 12.902 341.852 cv
12.902 341.578 12.945 341.32 13.039 341.086 cv
13.125 340.852 13.258 340.637 13.434 340.441 cv
13.602 340.246 13.813 340.062 14.066 339.887 cv
14.316 339.719 14.602 339.555 14.918 339.398 cv
14.645 339.258 14.402 339.109 14.191 338.949 cv
13.98 338.793 13.801 338.621 13.656 338.434 cv
13.508 338.25 13.398 338.055 13.324 337.844 cv
13.246 337.637 13.207 337.406 13.211 337.156 cv
13.207 336.848 13.262 336.555 13.379 336.281 cv
13.488 336.012 13.66 335.777 13.887 335.574 cv
14.113 335.375 14.398 335.215 14.75 335.098 cv
15.094 334.98 15.504 334.922 15.973 334.922 cv
16.418 334.922 16.805 334.977 17.133 335.082 cv
17.461 335.191 17.73 335.336 17.941 335.52 cv
18.152 335.707 18.309 335.926 18.414 336.176 cv
18.512 336.426 18.563 336.695 18.566 336.984 cv
18.563 337.219 18.523 337.445 18.453 337.656 cv
18.375 337.875 18.266 338.078 18.117 338.266 cv
17.969 338.461 17.789 338.641 17.578 338.805 cv
17.367 338.977 17.125 339.133 16.852 339.273 cv
17.172 339.437 17.457 339.602 17.715 339.77 cv
17.965 339.937 18.18 340.117 18.355 340.312 cv
18.523 340.508 18.652 340.715 18.746 340.93 cv
18.832 341.148 18.879 341.387 18.879 341.645 cv
cp
17.398 337.094 mo
17.395 336.906 17.363 336.73 17.297 336.574 cv
17.23 336.418 17.133 336.285 17.008 336.176 cv
16.879 336.066 16.719 335.984 16.531 335.926 cv
16.336 335.871 16.121 335.844 15.883 335.84 cv
15.387 335.844 15.012 335.953 14.762 336.176 cv
14.504 336.402 14.379 336.711 14.383 337.094 cv
14.379 337.273 14.41 337.437 14.473 337.59 cv
14.535 337.746 14.629 337.891 14.762 338.027 cv
14.887 338.164 15.051 338.297 15.254 338.426 cv
15.449 338.559 15.688 338.695 15.965 338.836 cv
16.426 338.602 16.781 338.34 17.027 338.047 cv
17.273 337.762 17.395 337.445 17.398 337.094 cv
cp
17.688 341.77 mo
17.684 341.562 17.645 341.371 17.57 341.199 cv
17.488 341.031 17.371 340.871 17.215 340.719 cv
17.059 340.57 16.859 340.426 16.625 340.285 cv
16.387 340.148 16.117 340.004 15.809 339.852 cv
15.52 339.996 15.266 340.137 15.051 340.277 cv
14.832 340.418 14.652 340.566 14.516 340.715 cv
14.375 340.871 14.27 341.027 14.199 341.191 cv
14.125 341.359 14.09 341.543 14.094 341.742 cv
14.09 342.187 14.242 342.531 14.551 342.77 cv
14.852 343.016 15.305 343.137 15.91 343.133 cv
16.492 343.137 16.938 343.016 17.238 342.766 cv
17.535 342.523 17.684 342.191 17.688 341.77 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
12.32 308.449 mo
19.414 308.449 li
19.414 325.539 li
12.32 325.539 li
cp
0 0 0 0 cmyk
ef
18.742 317.055 mo
18.738 317.441 18.715 317.828 18.672 318.219 cv
18.625 318.613 18.547 318.992 18.441 319.355 cv
18.328 319.719 18.184 320.059 18 320.375 cv
17.813 320.695 17.578 320.977 17.301 321.211 cv
17.016 321.453 16.68 321.637 16.297 321.77 cv
15.906 321.902 15.461 321.969 14.953 321.969 cv
14.754 321.969 14.563 321.953 14.379 321.93 cv
14.191 321.902 14.023 321.875 13.879 321.84 cv
13.727 321.805 13.602 321.766 13.504 321.723 cv
13.402 321.684 13.328 321.645 13.285 321.602 cv
13.238 321.562 13.207 321.508 13.188 321.434 cv
13.164 321.363 13.152 321.266 13.156 321.148 cv
13.152 321.047 13.156 320.969 13.164 320.91 cv
13.168 320.852 13.18 320.805 13.195 320.773 cv
13.211 320.742 13.23 320.723 13.254 320.707 cv
13.277 320.699 13.309 320.691 13.348 320.687 cv
13.395 320.691 13.465 320.707 13.559 320.738 cv
13.648 320.773 13.762 320.812 13.906 320.852 cv
14.043 320.895 14.207 320.934 14.395 320.965 cv
14.578 321.004 14.789 321.02 15.027 321.016 cv
15.469 321.02 15.848 320.934 16.168 320.762 cv
16.48 320.59 16.742 320.363 16.945 320.074 cv
17.148 319.789 17.297 319.453 17.398 319.07 cv
17.496 318.691 17.551 318.293 17.563 317.871 cv
17.316 318.016 17.027 318.141 16.691 318.246 cv
16.352 318.359 15.965 318.414 15.527 318.41 cv
15.035 318.414 14.621 318.348 14.285 318.211 cv
13.949 318.078 13.676 317.895 13.473 317.66 cv
13.266 317.43 13.121 317.152 13.035 316.828 cv
12.945 316.512 12.902 316.16 12.902 315.781 cv
12.902 315.391 12.957 315.02 13.074 314.66 cv
13.184 314.309 13.363 313.996 13.609 313.727 cv
13.848 313.457 14.156 313.242 14.535 313.082 cv
14.906 312.922 15.355 312.84 15.879 312.84 cv
16.246 312.84 16.57 312.887 16.859 312.98 cv
17.141 313.074 17.391 313.211 17.605 313.387 cv
17.813 313.562 17.992 313.773 18.141 314.023 cv
18.285 314.273 18.402 314.555 18.492 314.867 cv
18.578 315.184 18.641 315.527 18.684 315.895 cv
18.719 316.266 18.738 316.652 18.742 317.055 cv
cp
17.543 316.926 mo
17.543 316.344 17.504 315.852 17.426 315.449 cv
17.348 315.051 17.23 314.727 17.082 314.477 cv
16.93 314.23 16.746 314.051 16.527 313.941 cv
16.305 313.832 16.051 313.777 15.77 313.777 cv
15.465 313.777 15.211 313.832 15.004 313.941 cv
14.793 314.051 14.621 314.195 14.488 314.371 cv
14.352 314.555 14.25 314.758 14.188 314.984 cv
14.121 315.215 14.09 315.453 14.094 315.691 cv
14.09 315.965 14.121 316.211 14.18 316.43 cv
14.234 316.656 14.324 316.844 14.457 317 cv
14.582 317.156 14.75 317.277 14.957 317.363 cv
15.16 317.449 15.414 317.492 15.719 317.488 cv
16.059 317.492 16.391 317.441 16.715 317.336 cv
17.031 317.234 17.309 317.098 17.543 316.926 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
5.219 286.359 mo
19.41 286.359 li
19.41 303.449 li
5.219 303.449 li
cp
0 0 0 0 cmyk
ef
11.586 299.273 mo
11.582 299.363 11.574 299.434 11.563 299.492 cv
11.547 299.555 11.527 299.605 11.508 299.637 cv
11.484 299.676 11.461 299.699 11.43 299.715 cv
11.398 299.73 11.367 299.738 11.34 299.738 cv
6.703 299.738 li
6.668 299.738 6.641 299.73 6.613 299.715 cv
6.586 299.699 6.559 299.676 6.535 299.637 cv
6.508 299.605 6.488 299.555 6.477 299.492 cv
6.461 299.434 6.453 299.363 6.457 299.273 cv
6.453 299.195 6.461 299.121 6.477 299.059 cv
6.488 299 6.504 298.953 6.527 298.914 cv
6.543 298.879 6.57 298.848 6.602 298.824 cv
6.633 298.805 6.664 298.797 6.703 298.793 cv
8.555 298.793 li
8.555 292.047 li
6.84 293.066 li
6.75 293.117 6.68 293.145 6.633 293.152 cv
6.578 293.16 6.535 293.152 6.504 293.121 cv
6.469 293.094 6.449 293.043 6.438 292.973 cv
6.426 292.906 6.418 292.82 6.422 292.711 cv
6.418 292.637 6.422 292.57 6.434 292.512 cv
6.438 292.461 6.449 292.414 6.465 292.375 cv
6.477 292.34 6.496 292.309 6.52 292.281 cv
6.543 292.254 6.574 292.227 6.621 292.199 cv
8.664 290.887 li
8.68 290.875 8.699 290.863 8.73 290.855 cv
8.754 290.848 8.789 290.84 8.836 290.828 cv
8.875 290.82 8.926 290.812 8.98 290.809 cv
9.035 290.809 9.102 290.809 9.188 290.805 cv
9.293 290.809 9.387 290.812 9.461 290.82 cv
9.531 290.828 9.586 290.844 9.633 290.859 cv
9.672 290.879 9.699 290.898 9.715 290.922 cv
9.723 290.949 9.73 290.973 9.734 290.996 cv
9.734 298.793 li
11.34 298.793 li
11.375 298.797 11.41 298.805 11.441 298.824 cv
11.473 298.848 11.496 298.879 11.52 298.914 cv
11.535 298.953 11.551 299 11.566 299.059 cv
11.574 299.121 11.582 299.195 11.586 299.273 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.938 295.281 mo
18.934 295.965 18.883 296.586 18.777 297.148 cv
18.668 297.711 18.488 298.195 18.242 298.598 cv
17.988 299.004 17.66 299.316 17.262 299.535 cv
16.855 299.758 16.363 299.867 15.777 299.867 cv
15.219 299.867 14.746 299.77 14.367 299.57 cv
13.984 299.375 13.68 299.082 13.445 298.695 cv
13.211 298.309 13.043 297.836 12.949 297.27 cv
12.848 296.707 12.801 296.059 12.801 295.324 cv
12.801 294.652 12.855 294.031 12.965 293.465 cv
13.074 292.902 13.25 292.418 13.5 292.012 cv
13.742 291.609 14.066 291.297 14.473 291.07 cv
14.871 290.852 15.367 290.738 15.957 290.738 cv
16.516 290.738 16.988 290.84 17.371 291.035 cv
17.754 291.238 18.059 291.531 18.293 291.914 cv
18.523 292.305 18.691 292.777 18.789 293.34 cv
18.887 293.902 18.934 294.551 18.938 295.281 cv
cp
17.73 295.363 mo
17.727 294.922 17.711 294.523 17.684 294.172 cv
17.648 293.82 17.602 293.512 17.543 293.242 cv
17.477 292.973 17.398 292.742 17.301 292.547 cv
17.203 292.355 17.086 292.195 16.949 292.066 cv
16.809 291.941 16.648 291.848 16.477 291.789 cv
16.297 291.734 16.102 291.707 15.887 291.703 cv
15.496 291.707 15.18 291.797 14.941 291.98 cv
14.695 292.164 14.504 292.418 14.367 292.734 cv
14.227 293.055 14.133 293.426 14.082 293.855 cv
14.031 294.285 14.008 294.75 14.008 295.242 cv
14.008 295.906 14.039 296.469 14.109 296.93 cv
14.176 297.398 14.285 297.777 14.438 298.066 cv
14.582 298.363 14.773 298.574 15.004 298.703 cv
15.234 298.84 15.516 298.906 15.848 298.902 cv
16.102 298.906 16.324 298.867 16.52 298.781 cv
16.711 298.703 16.879 298.582 17.02 298.426 cv
17.16 298.273 17.273 298.09 17.367 297.875 cv
17.453 297.66 17.527 297.422 17.586 297.16 cv
17.637 296.902 17.676 296.621 17.699 296.316 cv
17.719 296.012 17.727 295.695 17.73 295.363 cv
cp
f
5.219 264.27 mo
19.41 264.27 li
19.41 281.36 li
5.219 281.36 li
cp
0 0 0 0 cmyk
ef
11.598 277.191 mo
11.594 277.281 11.586 277.355 11.574 277.414 cv
11.559 277.477 11.539 277.527 11.52 277.559 cv
11.496 277.598 11.473 277.621 11.441 277.637 cv
11.41 277.652 11.379 277.66 11.348 277.66 cv
6.707 277.66 li
6.676 277.66 6.645 277.652 6.617 277.637 cv
6.59 277.621 6.563 277.598 6.539 277.559 cv
6.508 277.527 6.488 277.477 6.48 277.414 cv
6.465 277.355 6.461 277.281 6.461 277.191 cv
6.461 277.113 6.465 277.043 6.48 276.98 cv
6.488 276.922 6.508 276.875 6.531 276.832 cv
6.551 276.797 6.574 276.766 6.605 276.742 cv
6.633 276.723 6.668 276.711 6.707 276.711 cv
8.563 276.711 li
8.563 269.957 li
6.844 270.977 li
6.754 271.027 6.684 271.055 6.633 271.062 cv
6.578 271.07 6.539 271.062 6.508 271.031 cv
6.477 271.004 6.453 270.953 6.441 270.883 cv
6.43 270.816 6.426 270.73 6.426 270.621 cv
6.426 270.547 6.426 270.48 6.434 270.422 cv
6.438 270.371 6.449 270.324 6.465 270.285 cv
6.477 270.25 6.496 270.219 6.523 270.191 cv
6.547 270.164 6.582 270.137 6.625 270.105 cv
8.672 268.793 li
8.688 268.785 8.711 268.773 8.738 268.762 cv
8.766 268.754 8.801 268.746 8.844 268.734 cv
8.883 268.727 8.93 268.719 8.988 268.715 cv
9.039 268.715 9.109 268.715 9.191 268.711 cv
9.301 268.715 9.391 268.719 9.469 268.727 cv
9.539 268.738 9.598 268.75 9.637 268.766 cv
9.676 268.781 9.703 268.805 9.719 268.828 cv
9.734 268.855 9.742 268.879 9.742 268.906 cv
9.742 276.711 li
11.348 276.711 li
11.383 276.711 11.414 276.723 11.449 276.742 cv
11.48 276.766 11.508 276.797 11.531 276.832 cv
11.547 276.875 11.563 276.922 11.578 276.98 cv
11.586 277.043 11.594 277.113 11.598 277.191 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.676 277.191 mo
18.672 277.281 18.664 277.355 18.652 277.414 cv
18.637 277.477 18.617 277.527 18.598 277.559 cv
18.574 277.598 18.551 277.621 18.52 277.637 cv
18.488 277.652 18.457 277.66 18.426 277.66 cv
13.785 277.66 li
13.754 277.66 13.723 277.652 13.695 277.637 cv
13.668 277.621 13.641 277.598 13.617 277.559 cv
13.586 277.527 13.566 277.477 13.559 277.414 cv
13.543 277.355 13.539 277.281 13.539 277.191 cv
13.539 277.113 13.543 277.043 13.559 276.98 cv
13.566 276.922 13.586 276.875 13.609 276.832 cv
13.629 276.797 13.652 276.766 13.684 276.742 cv
13.711 276.723 13.746 276.711 13.785 276.711 cv
15.641 276.711 li
15.641 269.957 li
13.922 270.977 li
13.832 271.027 13.762 271.055 13.711 271.062 cv
13.656 271.07 13.617 271.062 13.586 271.031 cv
13.555 271.004 13.531 270.953 13.52 270.883 cv
13.508 270.816 13.504 270.73 13.504 270.621 cv
13.504 270.547 13.504 270.48 13.512 270.422 cv
13.516 270.371 13.527 270.324 13.543 270.285 cv
13.555 270.25 13.574 270.219 13.602 270.191 cv
13.625 270.164 13.66 270.137 13.703 270.105 cv
15.75 268.793 li
15.766 268.785 15.789 268.773 15.816 268.762 cv
15.844 268.754 15.879 268.746 15.922 268.734 cv
15.961 268.727 16.008 268.719 16.066 268.715 cv
16.117 268.715 16.188 268.715 16.27 268.711 cv
16.379 268.715 16.469 268.719 16.547 268.727 cv
16.617 268.738 16.676 268.75 16.715 268.766 cv
16.754 268.781 16.781 268.805 16.797 268.828 cv
16.813 268.855 16.82 268.879 16.82 268.906 cv
16.82 276.711 li
18.426 276.711 li
18.461 276.711 18.492 276.723 18.527 276.742 cv
18.559 276.766 18.586 276.797 18.609 276.832 cv
18.625 276.875 18.641 276.922 18.656 276.98 cv
18.664 277.043 18.672 277.113 18.676 277.191 cv
cp
f
5.219 242.18 mo
19.41 242.18 li
19.41 259.27 li
5.219 259.27 li
cp
0 0 0 0 cmyk
ef
11.586 255.086 mo
11.582 255.176 11.574 255.246 11.563 255.305 cv
11.547 255.367 11.527 255.418 11.508 255.449 cv
11.484 255.488 11.461 255.512 11.43 255.527 cv
11.398 255.543 11.367 255.551 11.34 255.551 cv
6.703 255.551 li
6.668 255.551 6.641 255.543 6.613 255.527 cv
6.586 255.512 6.559 255.488 6.535 255.449 cv
6.508 255.418 6.488 255.367 6.477 255.305 cv
6.461 255.246 6.453 255.176 6.457 255.086 cv
6.453 255.008 6.461 254.934 6.477 254.871 cv
6.488 254.812 6.504 254.766 6.527 254.727 cv
6.543 254.691 6.57 254.66 6.602 254.637 cv
6.633 254.617 6.664 254.609 6.703 254.605 cv
8.555 254.605 li
8.555 247.859 li
6.84 248.879 li
6.75 248.93 6.68 248.957 6.633 248.965 cv
6.578 248.973 6.535 248.965 6.504 248.934 cv
6.469 248.906 6.449 248.855 6.438 248.785 cv
6.426 248.719 6.418 248.633 6.422 248.523 cv
6.418 248.449 6.422 248.383 6.434 248.324 cv
6.438 248.273 6.449 248.227 6.465 248.187 cv
6.477 248.152 6.496 248.121 6.52 248.094 cv
6.543 248.066 6.574 248.039 6.621 248.012 cv
8.664 246.699 li
8.68 246.687 8.699 246.676 8.73 246.668 cv
8.754 246.66 8.789 246.652 8.836 246.641 cv
8.875 246.633 8.926 246.625 8.98 246.621 cv
9.035 246.621 9.102 246.621 9.188 246.617 cv
9.293 246.621 9.387 246.625 9.461 246.633 cv
9.531 246.641 9.586 246.656 9.633 246.672 cv
9.672 246.691 9.699 246.711 9.715 246.734 cv
9.723 246.762 9.73 246.785 9.734 246.809 cv
9.734 254.605 li
11.34 254.605 li
11.375 254.609 11.41 254.617 11.441 254.637 cv
11.473 254.66 11.496 254.691 11.52 254.727 cv
11.535 254.766 11.551 254.812 11.566 254.871 cv
11.574 254.934 11.582 255.008 11.586 255.086 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.645 255.043 mo
18.641 255.129 18.637 255.203 18.625 255.266 cv
18.613 255.332 18.598 255.387 18.578 255.426 cv
18.555 255.473 18.527 255.504 18.496 255.52 cv
18.461 255.543 18.422 255.551 18.383 255.551 cv
13.48 255.551 li
13.418 255.551 13.359 255.543 13.313 255.527 cv
13.262 255.512 13.223 255.488 13.188 255.449 cv
13.152 255.418 13.125 255.363 13.113 255.293 cv
13.094 255.223 13.086 255.137 13.09 255.035 cv
13.086 254.945 13.09 254.867 13.098 254.797 cv
13.102 254.73 13.117 254.672 13.145 254.617 cv
13.168 254.566 13.199 254.512 13.234 254.457 cv
13.27 254.406 13.313 254.352 13.371 254.289 cv
15.145 252.465 li
15.555 252.047 15.883 251.672 16.133 251.336 cv
16.379 251.008 16.57 250.703 16.703 250.426 cv
16.836 250.152 16.922 249.902 16.969 249.676 cv
17.008 249.453 17.031 249.242 17.031 249.047 cv
17.031 248.852 16.996 248.668 16.93 248.488 cv
16.863 248.316 16.77 248.16 16.645 248.023 cv
16.52 247.895 16.363 247.789 16.176 247.707 cv
15.988 247.633 15.77 247.594 15.523 247.59 cv
15.234 247.594 14.977 247.633 14.75 247.707 cv
14.52 247.789 14.32 247.875 14.148 247.961 cv
13.977 248.055 13.832 248.137 13.715 248.215 cv
13.598 248.293 13.512 248.332 13.461 248.332 cv
13.426 248.332 13.395 248.324 13.371 248.305 cv
13.34 248.289 13.32 248.258 13.305 248.215 cv
13.289 248.176 13.273 248.121 13.266 248.051 cv
13.254 247.984 13.25 247.902 13.254 247.805 cv
13.25 247.738 13.254 247.68 13.262 247.629 cv
13.266 247.578 13.273 247.535 13.285 247.496 cv
13.293 247.461 13.309 247.426 13.328 247.395 cv
13.348 247.363 13.383 247.324 13.441 247.273 cv
13.492 247.227 13.586 247.16 13.723 247.078 cv
13.855 246.996 14.027 246.918 14.23 246.836 cv
14.434 246.758 14.656 246.687 14.902 246.633 cv
15.145 246.578 15.402 246.551 15.676 246.551 cv
16.102 246.551 16.477 246.613 16.801 246.734 cv
17.121 246.855 17.387 247.02 17.602 247.23 cv
17.813 247.441 17.973 247.687 18.078 247.961 cv
18.184 248.242 18.238 248.539 18.238 248.852 cv
18.238 249.141 18.211 249.422 18.16 249.699 cv
18.109 249.984 18.004 250.289 17.844 250.613 cv
17.68 250.941 17.445 251.305 17.141 251.703 cv
16.832 252.105 16.426 252.566 15.922 253.082 cv
14.516 254.551 li
18.375 254.551 li
18.406 254.555 18.441 254.566 18.48 254.582 cv
18.512 254.605 18.543 254.637 18.57 254.676 cv
18.594 254.719 18.613 254.77 18.625 254.828 cv
18.637 254.895 18.641 254.965 18.645 255.043 cv
cp
f
5.219 220.09 mo
19.41 220.09 li
19.41 237.18 li
5.219 237.18 li
cp
0 0 0 0 cmyk
ef
11.586 232.984 mo
11.582 233.074 11.574 233.145 11.563 233.203 cv
11.547 233.266 11.527 233.316 11.508 233.348 cv
11.484 233.387 11.461 233.41 11.43 233.426 cv
11.398 233.441 11.367 233.449 11.34 233.449 cv
6.703 233.449 li
6.668 233.449 6.641 233.441 6.613 233.426 cv
6.586 233.41 6.559 233.387 6.535 233.348 cv
6.508 233.316 6.488 233.266 6.477 233.203 cv
6.461 233.145 6.453 233.074 6.457 232.984 cv
6.453 232.906 6.461 232.832 6.477 232.77 cv
6.488 232.711 6.504 232.664 6.527 232.625 cv
6.543 232.59 6.57 232.559 6.602 232.535 cv
6.633 232.516 6.664 232.508 6.703 232.504 cv
8.555 232.504 li
8.555 225.758 li
6.84 226.777 li
6.75 226.828 6.68 226.855 6.633 226.863 cv
6.578 226.871 6.535 226.863 6.504 226.832 cv
6.469 226.805 6.449 226.754 6.438 226.684 cv
6.426 226.617 6.418 226.531 6.422 226.422 cv
6.418 226.348 6.422 226.281 6.434 226.223 cv
6.438 226.172 6.449 226.125 6.465 226.086 cv
6.477 226.051 6.496 226.02 6.52 225.992 cv
6.543 225.965 6.574 225.937 6.621 225.91 cv
8.664 224.598 li
8.68 224.586 8.699 224.574 8.73 224.566 cv
8.754 224.559 8.789 224.551 8.836 224.539 cv
8.875 224.531 8.926 224.523 8.98 224.52 cv
9.035 224.52 9.102 224.52 9.188 224.516 cv
9.293 224.52 9.387 224.523 9.461 224.531 cv
9.531 224.539 9.586 224.555 9.633 224.57 cv
9.672 224.59 9.699 224.609 9.715 224.633 cv
9.723 224.66 9.73 224.684 9.734 224.707 cv
9.734 232.504 li
11.34 232.504 li
11.375 232.508 11.41 232.516 11.441 232.535 cv
11.473 232.559 11.496 232.59 11.52 232.625 cv
11.535 232.664 11.551 232.711 11.566 232.77 cv
11.574 232.832 11.582 232.906 11.586 232.984 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.574 230.914 mo
18.57 231.324 18.5 231.691 18.359 232.016 cv
18.215 232.344 18.012 232.625 17.75 232.855 cv
17.484 233.09 17.156 233.266 16.77 233.391 cv
16.379 233.516 15.941 233.578 15.457 233.578 cv
15.152 233.578 14.875 233.551 14.621 233.504 cv
14.359 233.457 14.129 233.406 13.934 233.336 cv
13.73 233.273 13.566 233.203 13.434 233.133 cv
13.301 233.062 13.215 233.012 13.184 232.977 cv
13.145 232.949 13.121 232.918 13.105 232.883 cv
13.086 232.852 13.066 232.812 13.055 232.766 cv
13.039 232.723 13.031 232.668 13.023 232.598 cv
13.016 232.535 13.012 232.453 13.016 232.352 cv
13.012 232.191 13.027 232.078 13.063 232.012 cv
13.094 231.949 13.141 231.914 13.203 231.914 cv
13.246 231.914 13.328 231.953 13.453 232.023 cv
13.574 232.102 13.734 232.18 13.93 232.262 cv
14.121 232.348 14.348 232.426 14.613 232.496 cv
14.871 232.57 15.164 232.605 15.484 232.605 cv
15.793 232.605 16.063 232.566 16.301 232.488 cv
16.531 232.41 16.73 232.301 16.891 232.16 cv
17.047 232.02 17.164 231.852 17.246 231.656 cv
17.324 231.461 17.363 231.25 17.367 231.023 cv
17.363 230.773 17.313 230.547 17.215 230.344 cv
17.109 230.145 16.961 229.973 16.77 229.824 cv
16.57 229.68 16.332 229.566 16.047 229.488 cv
15.762 229.41 15.438 229.371 15.074 229.371 cv
14.203 229.371 li
14.16 229.371 14.125 229.363 14.09 229.348 cv
14.055 229.332 14.023 229.305 14 229.266 cv
13.973 229.23 13.953 229.184 13.938 229.125 cv
13.922 229.066 13.914 228.988 13.914 228.891 cv
13.914 228.805 13.918 228.734 13.934 228.676 cv
13.941 228.621 13.961 228.574 13.992 228.539 cv
14.016 228.504 14.047 228.48 14.078 228.461 cv
14.109 228.449 14.145 228.441 14.188 228.437 cv
14.961 228.437 li
15.262 228.441 15.531 228.402 15.773 228.32 cv
16.008 228.246 16.211 228.133 16.383 227.984 cv
16.547 227.84 16.676 227.664 16.766 227.461 cv
16.855 227.258 16.902 227.031 16.902 226.777 cv
16.902 226.598 16.871 226.422 16.813 226.254 cv
16.75 226.09 16.66 225.945 16.543 225.82 cv
16.422 225.695 16.27 225.598 16.09 225.527 cv
15.902 225.457 15.691 225.422 15.449 225.422 cv
15.184 225.422 14.938 225.465 14.719 225.543 cv
14.492 225.625 14.297 225.711 14.125 225.801 cv
13.949 225.895 13.805 225.98 13.691 226.059 cv
13.578 226.141 13.496 226.18 13.453 226.176 cv
13.418 226.18 13.391 226.172 13.367 226.16 cv
13.34 226.148 13.32 226.125 13.305 226.09 cv
13.289 226.059 13.277 226.012 13.27 225.945 cv
13.262 225.887 13.258 225.805 13.262 225.703 cv
13.258 225.637 13.258 225.578 13.266 225.523 cv
13.266 225.473 13.277 225.426 13.293 225.383 cv
13.309 225.348 13.324 225.312 13.344 225.277 cv
13.359 225.25 13.391 225.211 13.434 225.164 cv
13.477 225.121 13.563 225.059 13.699 224.977 cv
13.828 224.895 13.992 224.816 14.188 224.734 cv
14.379 224.656 14.602 224.586 14.859 224.531 cv
15.109 224.477 15.383 224.449 15.68 224.449 cv
16.086 224.449 16.449 224.504 16.762 224.605 cv
17.074 224.715 17.332 224.863 17.543 225.051 cv
17.746 225.246 17.902 225.477 18.008 225.742 cv
18.109 226.012 18.16 226.305 18.164 226.629 cv
18.16 226.91 18.125 227.172 18.055 227.406 cv
17.98 227.648 17.871 227.859 17.73 228.043 cv
17.586 228.23 17.414 228.387 17.211 228.516 cv
17.004 228.648 16.766 228.742 16.496 228.789 cv
16.496 228.801 li
16.801 228.836 17.082 228.91 17.336 229.031 cv
17.59 229.152 17.809 229.305 17.992 229.488 cv
18.172 229.672 18.313 229.887 18.418 230.129 cv
18.52 230.375 18.57 230.637 18.574 230.914 cv
cp
f
5.219 198 mo
19.41 198 li
19.41 215.09 li
5.219 215.09 li
cp
0 0 0 0 cmyk
ef
11.586 210.906 mo
11.582 210.996 11.574 211.066 11.563 211.125 cv
11.547 211.187 11.527 211.238 11.508 211.27 cv
11.484 211.309 11.461 211.332 11.43 211.348 cv
11.398 211.363 11.367 211.371 11.34 211.371 cv
6.703 211.371 li
6.668 211.371 6.641 211.363 6.613 211.348 cv
6.586 211.332 6.559 211.309 6.535 211.27 cv
6.508 211.238 6.488 211.187 6.477 211.125 cv
6.461 211.066 6.453 210.996 6.457 210.906 cv
6.453 210.828 6.461 210.754 6.477 210.691 cv
6.488 210.633 6.504 210.586 6.527 210.547 cv
6.543 210.512 6.57 210.48 6.602 210.457 cv
6.633 210.437 6.664 210.43 6.703 210.426 cv
8.555 210.426 li
8.555 203.68 li
6.84 204.699 li
6.75 204.75 6.68 204.777 6.633 204.785 cv
6.578 204.793 6.535 204.785 6.504 204.754 cv
6.469 204.727 6.449 204.676 6.438 204.605 cv
6.426 204.539 6.418 204.453 6.422 204.344 cv
6.418 204.27 6.422 204.203 6.434 204.145 cv
6.438 204.094 6.449 204.047 6.465 204.008 cv
6.477 203.973 6.496 203.941 6.52 203.914 cv
6.543 203.887 6.574 203.859 6.621 203.832 cv
8.664 202.52 li
8.68 202.508 8.699 202.496 8.73 202.488 cv
8.754 202.48 8.789 202.473 8.836 202.461 cv
8.875 202.453 8.926 202.445 8.98 202.441 cv
9.035 202.441 9.102 202.441 9.188 202.437 cv
9.293 202.441 9.387 202.445 9.461 202.453 cv
9.531 202.461 9.586 202.477 9.633 202.492 cv
9.672 202.512 9.699 202.531 9.715 202.555 cv
9.723 202.582 9.73 202.605 9.734 202.629 cv
9.734 210.426 li
11.34 210.426 li
11.375 210.43 11.41 210.437 11.441 210.457 cv
11.473 210.48 11.496 210.512 11.52 210.547 cv
11.535 210.586 11.551 210.633 11.566 210.691 cv
11.574 210.754 11.582 210.828 11.586 210.906 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
19.02 208.848 mo
19.016 209 18.992 209.121 18.949 209.207 cv
18.902 209.297 18.84 209.34 18.758 209.336 cv
17.758 209.336 li
17.758 211.199 li
17.758 211.238 17.746 211.27 17.73 211.293 cv
17.707 211.32 17.676 211.34 17.633 211.359 cv
17.582 211.375 17.52 211.387 17.449 211.398 cv
17.371 211.406 17.277 211.41 17.16 211.414 cv
17.043 211.41 16.945 211.406 16.875 211.398 cv
16.797 211.387 16.738 211.375 16.695 211.359 cv
16.648 211.34 16.617 211.32 16.602 211.293 cv
16.582 211.27 16.574 211.238 16.578 211.199 cv
16.578 209.336 li
12.949 209.336 li
12.891 209.34 12.848 209.332 12.813 209.316 cv
12.777 209.305 12.742 209.277 12.715 209.238 cv
12.684 209.203 12.664 209.152 12.652 209.082 cv
12.641 209.016 12.637 208.926 12.637 208.812 cv
12.637 208.73 12.637 208.652 12.645 208.582 cv
12.645 208.512 12.656 208.449 12.672 208.395 cv
12.684 208.34 12.699 208.285 12.727 208.23 cv
12.746 208.176 12.773 208.121 12.809 208.059 cv
15.969 202.672 li
15.988 202.637 16.023 202.605 16.07 202.578 cv
16.113 202.551 16.168 202.527 16.242 202.508 cv
16.309 202.492 16.395 202.48 16.5 202.469 cv
16.602 202.465 16.723 202.461 16.863 202.457 cv
17.012 202.461 17.148 202.465 17.266 202.477 cv
17.379 202.488 17.469 202.504 17.543 202.52 cv
17.609 202.539 17.664 202.562 17.703 202.594 cv
17.738 202.625 17.758 202.66 17.758 202.699 cv
17.758 208.363 li
18.758 208.363 li
18.832 208.367 18.895 208.406 18.945 208.484 cv
18.992 208.566 19.016 208.687 19.02 208.848 cv
cp
16.578 203.496 mo
16.566 203.496 li
13.715 208.363 li
16.578 208.363 li
cp
f
5.219 175.91 mo
19.41 175.91 li
19.41 193 li
5.219 193 li
cp
0 0 0 0 cmyk
ef
11.586 188.797 mo
11.582 188.887 11.574 188.957 11.563 189.016 cv
11.547 189.078 11.527 189.129 11.508 189.16 cv
11.484 189.199 11.461 189.223 11.43 189.238 cv
11.398 189.254 11.367 189.262 11.34 189.262 cv
6.703 189.262 li
6.668 189.262 6.641 189.254 6.613 189.238 cv
6.586 189.223 6.559 189.199 6.535 189.16 cv
6.508 189.129 6.488 189.078 6.477 189.016 cv
6.461 188.957 6.453 188.887 6.457 188.797 cv
6.453 188.719 6.461 188.645 6.477 188.582 cv
6.488 188.523 6.504 188.477 6.527 188.437 cv
6.543 188.402 6.57 188.371 6.602 188.348 cv
6.633 188.328 6.664 188.32 6.703 188.316 cv
8.555 188.316 li
8.555 181.57 li
6.84 182.59 li
6.75 182.641 6.68 182.668 6.633 182.676 cv
6.578 182.684 6.535 182.676 6.504 182.645 cv
6.469 182.617 6.449 182.566 6.438 182.496 cv
6.426 182.43 6.418 182.344 6.422 182.234 cv
6.418 182.16 6.422 182.094 6.434 182.035 cv
6.438 181.984 6.449 181.937 6.465 181.898 cv
6.477 181.863 6.496 181.832 6.52 181.805 cv
6.543 181.777 6.574 181.75 6.621 181.723 cv
8.664 180.41 li
8.68 180.398 8.699 180.387 8.73 180.379 cv
8.754 180.371 8.789 180.363 8.836 180.352 cv
8.875 180.344 8.926 180.336 8.98 180.332 cv
9.035 180.332 9.102 180.332 9.188 180.328 cv
9.293 180.332 9.387 180.336 9.461 180.344 cv
9.531 180.352 9.586 180.367 9.633 180.383 cv
9.672 180.402 9.699 180.422 9.715 180.445 cv
9.723 180.473 9.73 180.496 9.734 180.52 cv
9.734 188.316 li
11.34 188.316 li
11.375 188.32 11.41 188.328 11.441 188.348 cv
11.473 188.371 11.496 188.402 11.52 188.437 cv
11.535 188.477 11.551 188.523 11.566 188.582 cv
11.574 188.645 11.582 188.719 11.586 188.797 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.602 186.41 mo
18.602 186.887 18.52 187.309 18.359 187.68 cv
18.199 188.051 17.973 188.363 17.684 188.617 cv
17.387 188.871 17.039 189.066 16.637 189.195 cv
16.23 189.328 15.781 189.391 15.289 189.391 cv
15.012 189.391 14.75 189.371 14.508 189.332 cv
14.258 189.293 14.039 189.246 13.852 189.191 cv
13.656 189.137 13.5 189.082 13.375 189.023 cv
13.25 188.973 13.172 188.93 13.141 188.895 cv
13.105 188.863 13.082 188.832 13.07 188.805 cv
13.055 188.777 13.039 188.746 13.031 188.703 cv
13.016 188.668 13.008 188.617 13.008 188.555 cv
13 188.496 13 188.426 13 188.344 cv
13 188.27 13.004 188.199 13.012 188.137 cv
13.02 188.074 13.031 188.023 13.051 187.984 cv
13.066 187.945 13.086 187.918 13.113 187.898 cv
13.137 187.883 13.168 187.875 13.199 187.871 cv
13.246 187.875 13.316 187.902 13.41 187.957 cv
13.504 188.016 13.633 188.078 13.797 188.145 cv
13.961 188.211 14.16 188.273 14.402 188.332 cv
14.637 188.391 14.922 188.418 15.258 188.418 cv
15.559 188.418 15.84 188.383 16.098 188.309 cv
16.352 188.238 16.574 188.125 16.762 187.969 cv
16.945 187.816 17.09 187.621 17.195 187.383 cv
17.301 187.148 17.352 186.859 17.355 186.52 cv
17.352 186.238 17.309 185.988 17.219 185.77 cv
17.129 185.551 16.992 185.371 16.809 185.227 cv
16.621 185.086 16.387 184.98 16.105 184.906 cv
15.82 184.836 15.48 184.797 15.094 184.797 cv
14.809 184.797 14.57 184.812 14.371 184.84 cv
14.168 184.871 13.98 184.887 13.809 184.883 cv
13.68 184.887 13.586 184.855 13.535 184.793 cv
13.477 184.734 13.449 184.621 13.453 184.449 cv
13.453 180.836 li
13.449 180.687 13.484 180.578 13.559 180.5 cv
13.625 180.43 13.727 180.391 13.863 180.391 cv
17.793 180.391 li
17.828 180.391 17.863 180.402 17.898 180.422 cv
17.93 180.445 17.957 180.477 17.984 180.516 cv
18.004 180.559 18.02 180.609 18.035 180.672 cv
18.043 180.738 18.051 180.816 18.055 180.898 cv
18.051 181.066 18.027 181.191 17.988 181.281 cv
17.941 181.375 17.883 181.422 17.805 181.418 cv
14.633 181.418 li
14.633 183.906 li
14.785 183.887 14.941 183.875 15.105 183.867 cv
15.262 183.863 15.449 183.859 15.664 183.859 cv
16.148 183.859 16.574 183.922 16.941 184.043 cv
17.305 184.164 17.609 184.336 17.859 184.555 cv
18.102 184.781 18.289 185.047 18.414 185.359 cv
18.539 185.676 18.602 186.027 18.602 186.41 cv
cp
f
5.219 153.82 mo
19.41 153.82 li
19.41 170.91 li
5.219 170.91 li
cp
0 0 0 0 cmyk
ef
11.586 166.715 mo
11.582 166.805 11.574 166.875 11.563 166.934 cv
11.547 166.996 11.527 167.047 11.508 167.078 cv
11.484 167.117 11.461 167.141 11.43 167.156 cv
11.398 167.172 11.367 167.18 11.34 167.18 cv
6.703 167.18 li
6.668 167.18 6.641 167.172 6.613 167.156 cv
6.586 167.141 6.559 167.117 6.535 167.078 cv
6.508 167.047 6.488 166.996 6.477 166.934 cv
6.461 166.875 6.453 166.805 6.457 166.715 cv
6.453 166.637 6.461 166.562 6.477 166.5 cv
6.488 166.441 6.504 166.395 6.527 166.355 cv
6.543 166.32 6.57 166.289 6.602 166.266 cv
6.633 166.246 6.664 166.238 6.703 166.234 cv
8.555 166.234 li
8.555 159.488 li
6.84 160.508 li
6.75 160.559 6.68 160.586 6.633 160.594 cv
6.578 160.602 6.535 160.594 6.504 160.562 cv
6.469 160.535 6.449 160.484 6.438 160.414 cv
6.426 160.348 6.418 160.262 6.422 160.152 cv
6.418 160.078 6.422 160.012 6.434 159.953 cv
6.438 159.902 6.449 159.855 6.465 159.816 cv
6.477 159.781 6.496 159.75 6.52 159.723 cv
6.543 159.695 6.574 159.668 6.621 159.641 cv
8.664 158.328 li
8.68 158.316 8.699 158.305 8.73 158.297 cv
8.754 158.289 8.789 158.281 8.836 158.27 cv
8.875 158.262 8.926 158.254 8.98 158.25 cv
9.035 158.25 9.102 158.25 9.188 158.246 cv
9.293 158.25 9.387 158.254 9.461 158.262 cv
9.531 158.27 9.586 158.285 9.633 158.301 cv
9.672 158.32 9.699 158.34 9.715 158.363 cv
9.723 158.391 9.73 158.414 9.734 158.437 cv
9.734 166.234 li
11.34 166.234 li
11.375 166.238 11.41 166.246 11.441 166.266 cv
11.473 166.289 11.496 166.32 11.52 166.355 cv
11.535 166.395 11.551 166.441 11.566 166.5 cv
11.574 166.562 11.582 166.637 11.586 166.715 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.871 164.309 mo
18.871 164.699 18.809 165.078 18.691 165.437 cv
18.566 165.805 18.383 166.121 18.141 166.395 cv
17.891 166.672 17.578 166.895 17.203 167.059 cv
16.82 167.227 16.375 167.309 15.859 167.309 cv
15.488 167.309 15.16 167.266 14.879 167.172 cv
14.594 167.086 14.348 166.953 14.137 166.781 cv
13.926 166.613 13.75 166.406 13.613 166.16 cv
13.473 165.914 13.359 165.633 13.277 165.316 cv
13.191 165.004 13.133 164.66 13.098 164.281 cv
13.059 163.91 13.039 163.508 13.043 163.074 cv
13.039 162.695 13.059 162.312 13.102 161.922 cv
13.141 161.539 13.215 161.164 13.32 160.797 cv
13.426 160.437 13.57 160.098 13.75 159.781 cv
13.93 159.465 14.156 159.187 14.43 158.953 cv
14.703 158.719 15.027 158.531 15.406 158.391 cv
15.785 158.254 16.227 158.187 16.73 158.184 cv
16.898 158.187 17.07 158.195 17.242 158.215 cv
17.414 158.238 17.574 158.27 17.723 158.301 cv
17.871 158.34 17.992 158.375 18.094 158.414 cv
18.191 158.453 18.258 158.488 18.293 158.512 cv
18.32 158.539 18.344 158.566 18.363 158.594 cv
18.379 158.625 18.395 158.656 18.402 158.691 cv
18.41 158.727 18.414 158.766 18.422 158.809 cv
18.422 158.852 18.426 158.906 18.43 158.969 cv
18.426 159.055 18.426 159.125 18.426 159.18 cv
18.422 159.242 18.41 159.289 18.398 159.324 cv
18.379 159.363 18.359 159.391 18.336 159.406 cv
18.309 159.426 18.277 159.434 18.238 159.434 cv
18.188 159.434 18.117 159.418 18.031 159.387 cv
17.941 159.355 17.836 159.32 17.715 159.277 cv
17.59 159.242 17.441 159.207 17.266 159.172 cv
17.09 159.145 16.887 159.129 16.656 159.125 cv
16.227 159.129 15.859 159.215 15.555 159.387 cv
15.25 159.559 15 159.793 14.805 160.086 cv
14.609 160.379 14.465 160.719 14.375 161.102 cv
14.277 161.492 14.223 161.895 14.215 162.312 cv
14.332 162.246 14.469 162.18 14.617 162.109 cv
14.766 162.043 14.926 161.98 15.102 161.922 cv
15.277 161.871 15.465 161.824 15.66 161.789 cv
15.855 161.758 16.066 161.742 16.293 161.738 cv
16.77 161.742 17.172 161.809 17.504 161.934 cv
17.832 162.066 18.098 162.246 18.305 162.477 cv
18.504 162.707 18.648 162.977 18.738 163.289 cv
18.824 163.602 18.871 163.941 18.871 164.309 cv
cp
17.676 164.418 mo
17.676 164.156 17.648 163.914 17.598 163.695 cv
17.543 163.48 17.453 163.297 17.332 163.141 cv
17.207 162.992 17.043 162.875 16.84 162.793 cv
16.629 162.711 16.375 162.668 16.078 162.668 cv
15.906 162.668 15.738 162.684 15.57 162.715 cv
15.398 162.746 15.234 162.789 15.078 162.836 cv
14.918 162.891 14.77 162.953 14.629 163.023 cv
14.484 163.098 14.352 163.172 14.234 163.25 cv
14.23 163.844 14.27 164.34 14.348 164.734 cv
14.422 165.133 14.531 165.449 14.676 165.687 cv
14.82 165.93 15 166.102 15.215 166.203 cv
15.43 166.309 15.68 166.359 15.969 166.355 cv
16.258 166.359 16.512 166.305 16.727 166.191 cv
16.941 166.086 17.117 165.937 17.262 165.75 cv
17.402 165.566 17.508 165.359 17.574 165.129 cv
17.641 164.898 17.676 164.664 17.676 164.418 cv
cp
f
5.219 131.73 mo
19.41 131.73 li
19.41 148.82 li
5.219 148.82 li
cp
0 0 0 0 cmyk
ef
11.586 144.613 mo
11.582 144.703 11.574 144.773 11.563 144.832 cv
11.547 144.895 11.527 144.945 11.508 144.977 cv
11.484 145.016 11.461 145.039 11.43 145.055 cv
11.398 145.07 11.367 145.078 11.34 145.078 cv
6.703 145.078 li
6.668 145.078 6.641 145.07 6.613 145.055 cv
6.586 145.039 6.559 145.016 6.535 144.977 cv
6.508 144.945 6.488 144.895 6.477 144.832 cv
6.461 144.773 6.453 144.703 6.457 144.613 cv
6.453 144.535 6.461 144.461 6.477 144.398 cv
6.488 144.34 6.504 144.293 6.527 144.254 cv
6.543 144.219 6.57 144.187 6.602 144.164 cv
6.633 144.145 6.664 144.137 6.703 144.133 cv
8.555 144.133 li
8.555 137.387 li
6.84 138.406 li
6.75 138.457 6.68 138.484 6.633 138.492 cv
6.578 138.5 6.535 138.492 6.504 138.461 cv
6.469 138.434 6.449 138.383 6.438 138.312 cv
6.426 138.246 6.418 138.16 6.422 138.051 cv
6.418 137.977 6.422 137.91 6.434 137.852 cv
6.438 137.801 6.449 137.754 6.465 137.715 cv
6.477 137.68 6.496 137.648 6.52 137.621 cv
6.543 137.594 6.574 137.566 6.621 137.539 cv
8.664 136.227 li
8.68 136.215 8.699 136.203 8.73 136.195 cv
8.754 136.187 8.789 136.18 8.836 136.168 cv
8.875 136.16 8.926 136.152 8.98 136.148 cv
9.035 136.148 9.102 136.148 9.188 136.145 cv
9.293 136.148 9.387 136.152 9.461 136.16 cv
9.531 136.168 9.586 136.184 9.633 136.199 cv
9.672 136.219 9.699 136.238 9.715 136.262 cv
9.723 136.289 9.73 136.312 9.734 136.336 cv
9.734 144.133 li
11.34 144.133 li
11.375 144.137 11.41 144.145 11.441 144.164 cv
11.473 144.187 11.496 144.219 11.52 144.254 cv
11.535 144.293 11.551 144.34 11.566 144.398 cv
11.574 144.461 11.582 144.535 11.586 144.613 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.773 136.715 mo
18.77 136.801 18.766 136.875 18.762 136.937 cv
18.754 137.008 18.746 137.07 18.734 137.129 cv
18.723 137.195 18.707 137.254 18.688 137.309 cv
18.664 137.367 18.641 137.43 18.617 137.488 cv
15.422 144.852 li
15.395 144.91 15.367 144.953 15.336 144.984 cv
15.301 145.02 15.258 145.047 15.203 145.066 cv
15.148 145.086 15.078 145.098 15 145.109 cv
14.914 145.113 14.816 145.117 14.699 145.121 cv
14.543 145.117 14.422 145.109 14.336 145.098 cv
14.25 145.082 14.188 145.066 14.148 145.035 cv
14.109 145.008 14.09 144.969 14.098 144.926 cv
14.098 144.883 14.113 144.832 14.145 144.77 cv
17.504 137.242 li
13.246 137.242 li
13.16 137.246 13.094 137.199 13.051 137.105 cv
13.008 137.016 12.988 136.887 12.988 136.723 cv
12.988 136.637 12.992 136.562 13.004 136.496 cv
13.016 136.434 13.031 136.379 13.055 136.336 cv
13.074 136.293 13.102 136.262 13.137 136.238 cv
13.168 136.219 13.207 136.207 13.246 136.207 cv
18.418 136.207 li
18.477 136.207 18.531 136.215 18.582 136.23 cv
18.629 136.246 18.664 136.273 18.691 136.312 cv
18.715 136.352 18.734 136.406 18.75 136.469 cv
18.762 136.535 18.77 136.617 18.773 136.715 cv
cp
f
5.219 109.641 mo
19.41 109.641 li
19.41 126.731 li
5.219 126.731 li
cp
0 0 0 0 cmyk
ef
11.586 122.535 mo
11.582 122.625 11.574 122.695 11.563 122.754 cv
11.547 122.816 11.527 122.867 11.508 122.898 cv
11.484 122.937 11.461 122.961 11.43 122.977 cv
11.398 122.992 11.367 123 11.34 123 cv
6.703 123 li
6.668 123 6.641 122.992 6.613 122.977 cv
6.586 122.961 6.559 122.937 6.535 122.898 cv
6.508 122.867 6.488 122.816 6.477 122.754 cv
6.461 122.695 6.453 122.625 6.457 122.535 cv
6.453 122.457 6.461 122.383 6.477 122.32 cv
6.488 122.262 6.504 122.215 6.527 122.176 cv
6.543 122.141 6.57 122.109 6.602 122.086 cv
6.633 122.066 6.664 122.059 6.703 122.055 cv
8.555 122.055 li
8.555 115.309 li
6.84 116.328 li
6.75 116.379 6.68 116.406 6.633 116.414 cv
6.578 116.422 6.535 116.414 6.504 116.383 cv
6.469 116.355 6.449 116.305 6.438 116.234 cv
6.426 116.168 6.418 116.082 6.422 115.973 cv
6.418 115.898 6.422 115.832 6.434 115.773 cv
6.438 115.723 6.449 115.676 6.465 115.637 cv
6.477 115.602 6.496 115.57 6.52 115.543 cv
6.543 115.516 6.574 115.488 6.621 115.461 cv
8.664 114.148 li
8.68 114.137 8.699 114.125 8.73 114.117 cv
8.754 114.109 8.789 114.102 8.836 114.09 cv
8.875 114.082 8.926 114.074 8.98 114.07 cv
9.035 114.07 9.102 114.07 9.188 114.066 cv
9.293 114.07 9.387 114.074 9.461 114.082 cv
9.531 114.09 9.586 114.105 9.633 114.121 cv
9.672 114.141 9.699 114.16 9.715 114.184 cv
9.723 114.211 9.73 114.234 9.734 114.258 cv
9.734 122.055 li
11.34 122.055 li
11.375 122.059 11.41 122.066 11.441 122.086 cv
11.473 122.109 11.496 122.141 11.52 122.176 cv
11.535 122.215 11.551 122.262 11.566 122.32 cv
11.574 122.383 11.582 122.457 11.586 122.535 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.848 120.723 mo
18.848 121.109 18.777 121.453 18.641 121.75 cv
18.504 122.055 18.309 122.305 18.051 122.508 cv
17.793 122.715 17.473 122.871 17.094 122.973 cv
16.711 123.078 16.277 123.129 15.793 123.129 cv
15.332 123.129 14.922 123.082 14.563 122.988 cv
14.199 122.895 13.895 122.754 13.645 122.562 cv
13.395 122.379 13.203 122.148 13.07 121.871 cv
12.938 121.598 12.871 121.285 12.871 120.93 cv
12.871 120.656 12.914 120.398 13.008 120.164 cv
13.094 119.93 13.227 119.715 13.402 119.52 cv
13.57 119.324 13.781 119.141 14.035 118.965 cv
14.285 118.797 14.57 118.633 14.887 118.477 cv
14.613 118.336 14.371 118.187 14.16 118.027 cv
13.949 117.871 13.77 117.699 13.625 117.512 cv
13.477 117.328 13.367 117.133 13.293 116.922 cv
13.215 116.715 13.176 116.484 13.18 116.234 cv
13.176 115.926 13.23 115.633 13.348 115.359 cv
13.457 115.09 13.629 114.855 13.855 114.652 cv
14.082 114.453 14.367 114.293 14.719 114.176 cv
15.063 114.059 15.473 114 15.941 114 cv
16.387 114 16.773 114.055 17.102 114.16 cv
17.43 114.27 17.699 114.414 17.91 114.598 cv
18.121 114.785 18.277 115.004 18.383 115.254 cv
18.48 115.504 18.531 115.773 18.535 116.062 cv
18.531 116.297 18.492 116.523 18.422 116.734 cv
18.344 116.953 18.234 117.156 18.086 117.344 cv
17.938 117.539 17.758 117.719 17.547 117.883 cv
17.336 118.055 17.094 118.211 16.82 118.352 cv
17.141 118.516 17.426 118.68 17.684 118.848 cv
17.934 119.016 18.148 119.195 18.324 119.391 cv
18.492 119.586 18.621 119.793 18.715 120.008 cv
18.801 120.227 18.848 120.465 18.848 120.723 cv
cp
17.367 116.172 mo
17.363 115.984 17.332 115.809 17.266 115.652 cv
17.199 115.496 17.102 115.363 16.977 115.254 cv
16.848 115.145 16.688 115.062 16.5 115.004 cv
16.305 114.949 16.09 114.922 15.852 114.918 cv
15.355 114.922 14.98 115.031 14.73 115.254 cv
14.473 115.48 14.348 115.789 14.352 116.172 cv
14.348 116.352 14.379 116.516 14.441 116.668 cv
14.504 116.824 14.598 116.969 14.73 117.105 cv
14.855 117.242 15.02 117.375 15.223 117.504 cv
15.418 117.637 15.656 117.773 15.934 117.914 cv
16.395 117.68 16.75 117.418 16.996 117.125 cv
17.242 116.84 17.363 116.523 17.367 116.172 cv
cp
17.656 120.848 mo
17.652 120.641 17.613 120.449 17.539 120.277 cv
17.457 120.109 17.34 119.949 17.184 119.797 cv
17.027 119.648 16.828 119.504 16.594 119.363 cv
16.355 119.227 16.086 119.082 15.777 118.93 cv
15.488 119.074 15.234 119.215 15.02 119.355 cv
14.801 119.496 14.621 119.645 14.484 119.793 cv
14.344 119.949 14.238 120.105 14.168 120.27 cv
14.094 120.437 14.059 120.621 14.063 120.82 cv
14.059 121.266 14.211 121.609 14.52 121.848 cv
14.82 122.094 15.273 122.215 15.879 122.211 cv
16.461 122.215 16.906 122.094 17.207 121.844 cv
17.504 121.602 17.652 121.27 17.656 120.848 cv
cp
f
5.219 87.551 mo
19.41 87.551 li
19.41 104.641 li
5.219 104.641 li
cp
0 0 0 0 cmyk
ef
11.586 100.434 mo
11.582 100.523 11.574 100.594 11.563 100.652 cv
11.547 100.715 11.527 100.766 11.508 100.797 cv
11.484 100.836 11.461 100.859 11.43 100.875 cv
11.398 100.891 11.367 100.898 11.34 100.898 cv
6.703 100.898 li
6.668 100.898 6.641 100.891 6.613 100.875 cv
6.586 100.859 6.559 100.836 6.535 100.797 cv
6.508 100.766 6.488 100.715 6.477 100.652 cv
6.461 100.594 6.453 100.523 6.457 100.434 cv
6.453 100.355 6.461 100.281 6.477 100.219 cv
6.488 100.16 6.504 100.113 6.527 100.074 cv
6.543 100.039 6.57 100.008 6.602 99.984 cv
6.633 99.965 6.664 99.957 6.703 99.953 cv
8.555 99.953 li
8.555 93.207 li
6.84 94.227 li
6.75 94.277 6.68 94.305 6.633 94.312 cv
6.578 94.32 6.535 94.312 6.504 94.281 cv
6.469 94.254 6.449 94.203 6.438 94.133 cv
6.426 94.066 6.418 93.98 6.422 93.871 cv
6.418 93.797 6.422 93.73 6.434 93.672 cv
6.438 93.621 6.449 93.574 6.465 93.535 cv
6.477 93.5 6.496 93.469 6.52 93.441 cv
6.543 93.414 6.574 93.387 6.621 93.359 cv
8.664 92.047 li
8.68 92.035 8.699 92.023 8.73 92.016 cv
8.754 92.008 8.789 92 8.836 91.988 cv
8.875 91.98 8.926 91.973 8.98 91.969 cv
9.035 91.969 9.102 91.969 9.188 91.965 cv
9.293 91.969 9.387 91.973 9.461 91.98 cv
9.531 91.988 9.586 92.004 9.633 92.02 cv
9.672 92.039 9.699 92.059 9.715 92.082 cv
9.723 92.109 9.73 92.133 9.734 92.156 cv
9.734 99.953 li
11.34 99.953 li
11.375 99.957 11.41 99.965 11.441 99.984 cv
11.473 100.008 11.496 100.039 11.52 100.074 cv
11.535 100.113 11.551 100.16 11.566 100.219 cv
11.574 100.281 11.582 100.355 11.586 100.434 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.711 96.113 mo
18.707 96.5 18.684 96.887 18.641 97.277 cv
18.594 97.672 18.516 98.051 18.41 98.414 cv
18.297 98.777 18.152 99.117 17.969 99.434 cv
17.781 99.754 17.547 100.035 17.27 100.27 cv
16.984 100.512 16.648 100.695 16.266 100.828 cv
15.875 100.961 15.43 101.027 14.922 101.027 cv
14.723 101.027 14.531 101.012 14.348 100.988 cv
14.16 100.961 13.992 100.934 13.848 100.898 cv
13.695 100.863 13.57 100.824 13.473 100.781 cv
13.371 100.742 13.297 100.703 13.254 100.66 cv
13.207 100.621 13.176 100.566 13.156 100.492 cv
13.133 100.422 13.121 100.324 13.125 100.207 cv
13.121 100.105 13.125 100.027 13.133 99.969 cv
13.137 99.91 13.148 99.863 13.164 99.832 cv
13.18 99.801 13.199 99.781 13.223 99.766 cv
13.246 99.758 13.277 99.75 13.316 99.746 cv
13.363 99.75 13.434 99.766 13.527 99.797 cv
13.617 99.832 13.73 99.871 13.875 99.91 cv
14.012 99.953 14.176 99.992 14.363 100.023 cv
14.547 100.062 14.758 100.078 14.996 100.074 cv
15.438 100.078 15.816 99.992 16.137 99.82 cv
16.449 99.648 16.711 99.422 16.914 99.133 cv
17.117 98.848 17.266 98.512 17.367 98.129 cv
17.465 97.75 17.52 97.352 17.531 96.93 cv
17.285 97.074 16.996 97.199 16.66 97.305 cv
16.32 97.418 15.934 97.473 15.496 97.469 cv
15.004 97.473 14.59 97.406 14.254 97.27 cv
13.918 97.137 13.645 96.953 13.441 96.719 cv
13.234 96.488 13.09 96.211 13.004 95.887 cv
12.914 95.57 12.871 95.219 12.871 94.84 cv
12.871 94.449 12.926 94.078 13.043 93.719 cv
13.152 93.367 13.332 93.055 13.578 92.785 cv
13.816 92.516 14.125 92.301 14.504 92.141 cv
14.875 91.98 15.324 91.898 15.848 91.898 cv
16.215 91.898 16.539 91.945 16.828 92.039 cv
17.109 92.133 17.359 92.27 17.574 92.445 cv
17.781 92.621 17.961 92.832 18.109 93.082 cv
18.254 93.332 18.371 93.613 18.461 93.926 cv
18.547 94.242 18.609 94.586 18.652 94.953 cv
18.688 95.324 18.707 95.711 18.711 96.113 cv
cp
17.512 95.984 mo
17.512 95.402 17.473 94.91 17.395 94.508 cv
17.316 94.109 17.199 93.785 17.051 93.535 cv
16.898 93.289 16.715 93.109 16.496 93 cv
16.273 92.891 16.02 92.836 15.738 92.836 cv
15.434 92.836 15.18 92.891 14.973 93 cv
14.762 93.109 14.59 93.254 14.457 93.43 cv
14.32 93.613 14.219 93.816 14.156 94.043 cv
14.09 94.273 14.059 94.512 14.063 94.75 cv
14.059 95.023 14.09 95.27 14.148 95.488 cv
14.203 95.715 14.293 95.902 14.426 96.059 cv
14.551 96.215 14.719 96.336 14.926 96.422 cv
15.129 96.508 15.383 96.551 15.688 96.547 cv
16.027 96.551 16.359 96.5 16.684 96.395 cv
17 96.293 17.277 96.156 17.512 95.984 cv
cp
f
5.219 65.461 mo
19.41 65.461 li
19.41 82.551 li
5.219 82.551 li
cp
0 0 0 0 cmyk
ef
11.566 78.281 mo
11.563 78.367 11.559 78.441 11.547 78.504 cv
11.535 78.57 11.52 78.625 11.5 78.664 cv
11.477 78.711 11.449 78.742 11.418 78.758 cv
11.383 78.781 11.344 78.789 11.305 78.789 cv
6.402 78.789 li
6.34 78.789 6.281 78.781 6.234 78.766 cv
6.184 78.75 6.145 78.727 6.109 78.687 cv
6.074 78.656 6.047 78.602 6.035 78.531 cv
6.016 78.461 6.008 78.375 6.012 78.273 cv
6.008 78.184 6.012 78.105 6.02 78.035 cv
6.023 77.969 6.039 77.91 6.066 77.855 cv
6.09 77.805 6.121 77.75 6.156 77.695 cv
6.191 77.645 6.234 77.59 6.293 77.527 cv
8.066 75.703 li
8.477 75.285 8.805 74.91 9.055 74.574 cv
9.301 74.246 9.492 73.941 9.625 73.664 cv
9.758 73.391 9.844 73.141 9.891 72.914 cv
9.93 72.691 9.953 72.48 9.953 72.285 cv
9.953 72.09 9.918 71.906 9.852 71.727 cv
9.785 71.555 9.691 71.398 9.566 71.262 cv
9.441 71.133 9.285 71.027 9.098 70.945 cv
8.91 70.871 8.691 70.832 8.445 70.828 cv
8.156 70.832 7.898 70.871 7.672 70.945 cv
7.441 71.027 7.242 71.113 7.07 71.199 cv
6.898 71.293 6.754 71.375 6.637 71.453 cv
6.52 71.531 6.434 71.57 6.383 71.57 cv
6.348 71.57 6.316 71.562 6.293 71.543 cv
6.262 71.527 6.242 71.496 6.227 71.453 cv
6.211 71.414 6.195 71.359 6.188 71.289 cv
6.176 71.223 6.172 71.141 6.176 71.043 cv
6.172 70.977 6.176 70.918 6.184 70.867 cv
6.188 70.816 6.195 70.773 6.207 70.734 cv
6.215 70.699 6.23 70.664 6.25 70.633 cv
6.27 70.602 6.305 70.562 6.363 70.512 cv
6.414 70.465 6.508 70.398 6.645 70.316 cv
6.777 70.234 6.949 70.156 7.152 70.074 cv
7.355 69.996 7.578 69.926 7.824 69.871 cv
8.066 69.816 8.324 69.789 8.598 69.789 cv
9.023 69.789 9.398 69.852 9.723 69.973 cv
10.043 70.094 10.309 70.258 10.523 70.469 cv
10.734 70.68 10.895 70.926 11 71.199 cv
11.105 71.48 11.16 71.777 11.16 72.09 cv
11.16 72.379 11.133 72.66 11.082 72.937 cv
11.031 73.223 10.926 73.527 10.766 73.852 cv
10.602 74.18 10.367 74.543 10.063 74.941 cv
9.754 75.344 9.348 75.805 8.844 76.32 cv
7.438 77.789 li
11.297 77.789 li
11.328 77.793 11.363 77.805 11.402 77.82 cv
11.434 77.844 11.465 77.875 11.492 77.914 cv
11.516 77.957 11.535 78.008 11.547 78.066 cv
11.559 78.133 11.563 78.203 11.566 78.281 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.938 74.332 mo
18.934 75.016 18.883 75.637 18.777 76.199 cv
18.668 76.762 18.488 77.246 18.242 77.648 cv
17.988 78.055 17.66 78.367 17.262 78.586 cv
16.855 78.809 16.363 78.918 15.777 78.918 cv
15.219 78.918 14.746 78.82 14.367 78.621 cv
13.984 78.426 13.68 78.133 13.445 77.746 cv
13.211 77.359 13.043 76.887 12.949 76.32 cv
12.848 75.758 12.801 75.109 12.801 74.375 cv
12.801 73.703 12.855 73.082 12.965 72.516 cv
13.074 71.953 13.25 71.469 13.5 71.062 cv
13.742 70.66 14.066 70.348 14.473 70.121 cv
14.871 69.902 15.367 69.789 15.957 69.789 cv
16.516 69.789 16.988 69.891 17.371 70.086 cv
17.754 70.289 18.059 70.582 18.293 70.965 cv
18.523 71.355 18.691 71.828 18.789 72.391 cv
18.887 72.953 18.934 73.602 18.938 74.332 cv
cp
17.73 74.414 mo
17.727 73.973 17.711 73.574 17.684 73.223 cv
17.648 72.871 17.602 72.562 17.543 72.293 cv
17.477 72.023 17.398 71.793 17.301 71.598 cv
17.203 71.406 17.086 71.246 16.949 71.117 cv
16.809 70.992 16.648 70.898 16.477 70.84 cv
16.297 70.785 16.102 70.758 15.887 70.754 cv
15.496 70.758 15.18 70.848 14.941 71.031 cv
14.695 71.215 14.504 71.469 14.367 71.785 cv
14.227 72.105 14.133 72.477 14.082 72.906 cv
14.031 73.336 14.008 73.801 14.008 74.293 cv
14.008 74.957 14.039 75.52 14.109 75.98 cv
14.176 76.449 14.285 76.828 14.438 77.117 cv
14.582 77.414 14.773 77.625 15.004 77.754 cv
15.234 77.891 15.516 77.957 15.848 77.953 cv
16.102 77.957 16.324 77.918 16.52 77.832 cv
16.711 77.754 16.879 77.633 17.02 77.477 cv
17.16 77.324 17.273 77.141 17.367 76.926 cv
17.453 76.711 17.527 76.473 17.586 76.211 cv
17.637 75.953 17.676 75.672 17.699 75.367 cv
17.719 75.062 17.727 74.746 17.73 74.414 cv
cp
f
5.219 43.379 mo
19.41 43.379 li
19.41 60.469 li
5.219 60.469 li
cp
0 0 0 0 cmyk
ef
11.566 56.203 mo
11.563 56.289 11.559 56.363 11.547 56.426 cv
11.535 56.492 11.52 56.547 11.5 56.586 cv
11.477 56.633 11.449 56.664 11.418 56.68 cv
11.383 56.703 11.344 56.711 11.305 56.711 cv
6.402 56.711 li
6.34 56.711 6.281 56.703 6.234 56.687 cv
6.184 56.672 6.145 56.648 6.109 56.609 cv
6.074 56.578 6.047 56.523 6.035 56.453 cv
6.016 56.383 6.008 56.297 6.012 56.195 cv
6.008 56.105 6.012 56.027 6.02 55.957 cv
6.023 55.891 6.039 55.832 6.066 55.777 cv
6.09 55.727 6.121 55.672 6.156 55.617 cv
6.191 55.566 6.234 55.512 6.293 55.449 cv
8.066 53.625 li
8.477 53.207 8.805 52.832 9.055 52.496 cv
9.301 52.168 9.492 51.863 9.625 51.586 cv
9.758 51.312 9.844 51.062 9.891 50.836 cv
9.93 50.613 9.953 50.402 9.953 50.207 cv
9.953 50.012 9.918 49.828 9.852 49.648 cv
9.785 49.477 9.691 49.32 9.566 49.184 cv
9.441 49.055 9.285 48.949 9.098 48.867 cv
8.91 48.793 8.691 48.754 8.445 48.75 cv
8.156 48.754 7.898 48.793 7.672 48.867 cv
7.441 48.949 7.242 49.035 7.07 49.121 cv
6.898 49.215 6.754 49.297 6.637 49.375 cv
6.52 49.453 6.434 49.492 6.383 49.492 cv
6.348 49.492 6.316 49.484 6.293 49.465 cv
6.262 49.449 6.242 49.418 6.227 49.375 cv
6.211 49.336 6.195 49.281 6.188 49.211 cv
6.176 49.145 6.172 49.062 6.176 48.965 cv
6.172 48.898 6.176 48.84 6.184 48.789 cv
6.188 48.738 6.195 48.695 6.207 48.656 cv
6.215 48.621 6.23 48.586 6.25 48.555 cv
6.27 48.523 6.305 48.484 6.363 48.434 cv
6.414 48.387 6.508 48.32 6.645 48.238 cv
6.777 48.156 6.949 48.078 7.152 47.996 cv
7.355 47.918 7.578 47.848 7.824 47.793 cv
8.066 47.738 8.324 47.711 8.598 47.711 cv
9.023 47.711 9.398 47.773 9.723 47.895 cv
10.043 48.016 10.309 48.18 10.523 48.391 cv
10.734 48.602 10.895 48.848 11 49.121 cv
11.105 49.402 11.16 49.699 11.16 50.012 cv
11.16 50.301 11.133 50.582 11.082 50.859 cv
11.031 51.145 10.926 51.449 10.766 51.773 cv
10.602 52.102 10.367 52.465 10.063 52.863 cv
9.754 53.266 9.348 53.727 8.844 54.242 cv
7.438 55.711 li
11.297 55.711 li
11.328 55.715 11.363 55.727 11.402 55.742 cv
11.434 55.766 11.465 55.797 11.492 55.836 cv
11.516 55.879 11.535 55.93 11.547 55.988 cv
11.559 56.055 11.563 56.125 11.566 56.203 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.664 56.246 mo
18.66 56.336 18.652 56.406 18.641 56.465 cv
18.625 56.527 18.605 56.578 18.586 56.609 cv
18.563 56.648 18.539 56.672 18.508 56.687 cv
18.477 56.703 18.445 56.711 18.418 56.711 cv
13.781 56.711 li
13.746 56.711 13.719 56.703 13.691 56.687 cv
13.664 56.672 13.637 56.648 13.613 56.609 cv
13.586 56.578 13.566 56.527 13.555 56.465 cv
13.539 56.406 13.531 56.336 13.535 56.246 cv
13.531 56.168 13.539 56.094 13.555 56.031 cv
13.566 55.973 13.582 55.926 13.605 55.887 cv
13.621 55.852 13.648 55.82 13.68 55.797 cv
13.711 55.777 13.742 55.77 13.781 55.766 cv
15.633 55.766 li
15.633 49.02 li
13.918 50.039 li
13.828 50.09 13.758 50.117 13.711 50.125 cv
13.656 50.133 13.613 50.125 13.582 50.094 cv
13.547 50.066 13.527 50.016 13.516 49.945 cv
13.504 49.879 13.496 49.793 13.5 49.684 cv
13.496 49.609 13.5 49.543 13.512 49.484 cv
13.516 49.434 13.527 49.387 13.543 49.348 cv
13.555 49.312 13.574 49.281 13.598 49.254 cv
13.621 49.227 13.652 49.199 13.699 49.172 cv
15.742 47.859 li
15.758 47.848 15.777 47.836 15.809 47.828 cv
15.832 47.82 15.867 47.812 15.914 47.801 cv
15.953 47.793 16.004 47.785 16.059 47.781 cv
16.113 47.781 16.18 47.781 16.266 47.777 cv
16.371 47.781 16.465 47.785 16.539 47.793 cv
16.609 47.801 16.664 47.816 16.711 47.832 cv
16.75 47.852 16.777 47.871 16.793 47.895 cv
16.801 47.922 16.809 47.945 16.813 47.969 cv
16.813 55.766 li
18.418 55.766 li
18.453 55.77 18.488 55.777 18.52 55.797 cv
18.551 55.82 18.574 55.852 18.598 55.887 cv
18.613 55.926 18.629 55.973 18.645 56.031 cv
18.652 56.094 18.66 56.168 18.664 56.246 cv
cp
f
5.219 21.289 mo
19.41 21.289 li
19.41 38.379 li
5.219 38.379 li
cp
0 0 0 0 cmyk
ef
11.566 34.102 mo
11.563 34.187 11.559 34.262 11.547 34.324 cv
11.535 34.391 11.52 34.445 11.5 34.484 cv
11.477 34.531 11.449 34.562 11.418 34.578 cv
11.383 34.602 11.344 34.609 11.305 34.609 cv
6.402 34.609 li
6.34 34.609 6.281 34.602 6.234 34.586 cv
6.184 34.57 6.145 34.547 6.109 34.508 cv
6.074 34.477 6.047 34.422 6.035 34.352 cv
6.016 34.281 6.008 34.195 6.012 34.094 cv
6.008 34.004 6.012 33.926 6.02 33.855 cv
6.023 33.789 6.039 33.73 6.066 33.676 cv
6.09 33.625 6.121 33.57 6.156 33.516 cv
6.191 33.465 6.234 33.41 6.293 33.348 cv
8.066 31.523 li
8.477 31.105 8.805 30.73 9.055 30.395 cv
9.301 30.066 9.492 29.762 9.625 29.484 cv
9.758 29.211 9.844 28.961 9.891 28.734 cv
9.93 28.512 9.953 28.301 9.953 28.105 cv
9.953 27.91 9.918 27.727 9.852 27.547 cv
9.785 27.375 9.691 27.219 9.566 27.082 cv
9.441 26.953 9.285 26.848 9.098 26.766 cv
8.91 26.691 8.691 26.652 8.445 26.648 cv
8.156 26.652 7.898 26.691 7.672 26.766 cv
7.441 26.848 7.242 26.934 7.07 27.02 cv
6.898 27.113 6.754 27.195 6.637 27.273 cv
6.52 27.352 6.434 27.391 6.383 27.391 cv
6.348 27.391 6.316 27.383 6.293 27.363 cv
6.262 27.348 6.242 27.316 6.227 27.273 cv
6.211 27.234 6.195 27.18 6.188 27.109 cv
6.176 27.043 6.172 26.961 6.176 26.863 cv
6.172 26.797 6.176 26.738 6.184 26.687 cv
6.188 26.637 6.195 26.594 6.207 26.555 cv
6.215 26.52 6.23 26.484 6.25 26.453 cv
6.27 26.422 6.305 26.383 6.363 26.332 cv
6.414 26.285 6.508 26.219 6.645 26.137 cv
6.777 26.055 6.949 25.977 7.152 25.895 cv
7.355 25.816 7.578 25.746 7.824 25.691 cv
8.066 25.637 8.324 25.609 8.598 25.609 cv
9.023 25.609 9.398 25.672 9.723 25.793 cv
10.043 25.914 10.309 26.078 10.523 26.289 cv
10.734 26.5 10.895 26.746 11 27.02 cv
11.105 27.301 11.16 27.598 11.16 27.91 cv
11.16 28.199 11.133 28.48 11.082 28.758 cv
11.031 29.043 10.926 29.348 10.766 29.672 cv
10.602 30 10.367 30.363 10.063 30.762 cv
9.754 31.164 9.348 31.625 8.844 32.141 cv
7.438 33.609 li
11.297 33.609 li
11.328 33.613 11.363 33.625 11.402 33.641 cv
11.434 33.664 11.465 33.695 11.492 33.734 cv
11.516 33.777 11.535 33.828 11.547 33.887 cv
11.559 33.953 11.563 34.023 11.566 34.102 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
18.645 34.102 mo
18.641 34.187 18.637 34.262 18.625 34.324 cv
18.613 34.391 18.598 34.445 18.578 34.484 cv
18.555 34.531 18.527 34.562 18.496 34.578 cv
18.461 34.602 18.422 34.609 18.383 34.609 cv
13.48 34.609 li
13.418 34.609 13.359 34.602 13.313 34.586 cv
13.262 34.57 13.223 34.547 13.188 34.508 cv
13.152 34.477 13.125 34.422 13.113 34.352 cv
13.094 34.281 13.086 34.195 13.09 34.094 cv
13.086 34.004 13.09 33.926 13.098 33.855 cv
13.102 33.789 13.117 33.73 13.145 33.676 cv
13.168 33.625 13.199 33.57 13.234 33.516 cv
13.27 33.465 13.313 33.41 13.371 33.348 cv
15.145 31.523 li
15.555 31.105 15.883 30.73 16.133 30.395 cv
16.379 30.066 16.57 29.762 16.703 29.484 cv
16.836 29.211 16.922 28.961 16.969 28.734 cv
17.008 28.512 17.031 28.301 17.031 28.105 cv
17.031 27.91 16.996 27.727 16.93 27.547 cv
16.863 27.375 16.77 27.219 16.645 27.082 cv
16.52 26.953 16.363 26.848 16.176 26.766 cv
15.988 26.691 15.77 26.652 15.523 26.648 cv
15.234 26.652 14.977 26.691 14.75 26.766 cv
14.52 26.848 14.32 26.934 14.148 27.02 cv
13.977 27.113 13.832 27.195 13.715 27.273 cv
13.598 27.352 13.512 27.391 13.461 27.391 cv
13.426 27.391 13.395 27.383 13.371 27.363 cv
13.34 27.348 13.32 27.316 13.305 27.273 cv
13.289 27.234 13.273 27.18 13.266 27.109 cv
13.254 27.043 13.25 26.961 13.254 26.863 cv
13.25 26.797 13.254 26.738 13.262 26.687 cv
13.266 26.637 13.273 26.594 13.285 26.555 cv
13.293 26.52 13.309 26.484 13.328 26.453 cv
13.348 26.422 13.383 26.383 13.441 26.332 cv
13.492 26.285 13.586 26.219 13.723 26.137 cv
13.855 26.055 14.027 25.977 14.23 25.895 cv
14.434 25.816 14.656 25.746 14.902 25.691 cv
15.145 25.637 15.402 25.609 15.676 25.609 cv
16.102 25.609 16.477 25.672 16.801 25.793 cv
17.121 25.914 17.387 26.078 17.602 26.289 cv
17.813 26.5 17.973 26.746 18.078 27.02 cv
18.184 27.301 18.238 27.598 18.238 27.91 cv
18.238 28.199 18.211 28.48 18.16 28.758 cv
18.109 29.043 18.004 29.348 17.844 29.672 cv
17.68 30 17.445 30.363 17.141 30.762 cv
16.832 31.164 16.426 31.625 15.922 32.141 cv
14.516 33.609 li
18.375 33.609 li
18.406 33.613 18.441 33.625 18.48 33.641 cv
18.512 33.664 18.543 33.695 18.57 33.734 cv
18.594 33.777 18.613 33.828 18.625 33.887 cv
18.637 33.953 18.641 34.023 18.645 34.102 cv
cp
f
35.227 516.328 mo
35.223 516.418 35.215 516.488 35.203 516.547 cv
35.188 516.609 35.168 516.66 35.148 516.691 cv
35.125 516.73 35.102 516.754 35.07 516.77 cv
35.039 516.785 35.008 516.793 34.98 516.793 cv
30.344 516.793 li
30.309 516.793 30.281 516.785 30.254 516.77 cv
30.227 516.754 30.199 516.73 30.176 516.691 cv
30.148 516.66 30.129 516.609 30.117 516.547 cv
30.102 516.488 30.094 516.418 30.098 516.328 cv
30.094 516.25 30.102 516.176 30.117 516.113 cv
30.129 516.055 30.145 516.008 30.168 515.969 cv
30.184 515.934 30.211 515.902 30.242 515.879 cv
30.273 515.859 30.305 515.852 30.344 515.848 cv
32.195 515.848 li
32.195 509.102 li
30.48 510.121 li
30.391 510.172 30.32 510.199 30.273 510.207 cv
30.219 510.215 30.176 510.207 30.145 510.176 cv
30.109 510.148 30.09 510.098 30.078 510.027 cv
30.066 509.961 30.059 509.875 30.063 509.766 cv
30.059 509.691 30.063 509.625 30.074 509.566 cv
30.078 509.516 30.09 509.469 30.105 509.43 cv
30.117 509.395 30.137 509.363 30.16 509.336 cv
30.184 509.309 30.215 509.281 30.262 509.254 cv
32.305 507.941 li
32.32 507.93 32.34 507.918 32.371 507.91 cv
32.395 507.902 32.43 507.895 32.477 507.883 cv
32.516 507.875 32.566 507.867 32.621 507.863 cv
32.676 507.863 32.742 507.863 32.828 507.859 cv
32.934 507.863 33.027 507.867 33.102 507.875 cv
33.172 507.883 33.227 507.898 33.273 507.914 cv
33.313 507.934 33.34 507.953 33.355 507.977 cv
33.363 508.004 33.371 508.027 33.375 508.051 cv
33.375 515.848 li
34.98 515.848 li
35.016 515.852 35.051 515.859 35.082 515.879 cv
35.113 515.902 35.137 515.934 35.16 515.969 cv
35.176 516.008 35.191 516.055 35.207 516.113 cv
35.215 516.176 35.223 516.25 35.227 516.328 cv
cp
f
111.555 516.285 mo
111.551 516.371 111.547 516.445 111.535 516.508 cv
111.523 516.574 111.508 516.629 111.488 516.668 cv
111.465 516.715 111.438 516.746 111.406 516.762 cv
111.371 516.785 111.332 516.793 111.293 516.793 cv
106.391 516.793 li
106.328 516.793 106.27 516.785 106.223 516.77 cv
106.172 516.754 106.133 516.73 106.098 516.691 cv
106.063 516.66 106.035 516.605 106.023 516.535 cv
106.004 516.465 105.996 516.379 106 516.277 cv
105.996 516.187 106 516.109 106.008 516.039 cv
106.012 515.973 106.027 515.914 106.055 515.859 cv
106.078 515.809 106.109 515.754 106.145 515.699 cv
106.18 515.648 106.223 515.594 106.281 515.531 cv
108.055 513.707 li
108.465 513.289 108.793 512.914 109.043 512.578 cv
109.289 512.25 109.48 511.945 109.613 511.668 cv
109.746 511.395 109.832 511.145 109.879 510.918 cv
109.918 510.695 109.941 510.484 109.941 510.289 cv
109.941 510.094 109.906 509.91 109.84 509.73 cv
109.773 509.559 109.68 509.402 109.555 509.266 cv
109.43 509.137 109.273 509.031 109.086 508.949 cv
108.898 508.875 108.68 508.836 108.434 508.832 cv
108.145 508.836 107.887 508.875 107.66 508.949 cv
107.43 509.031 107.23 509.117 107.059 509.203 cv
106.887 509.297 106.742 509.379 106.625 509.457 cv
106.508 509.535 106.422 509.574 106.371 509.574 cv
106.336 509.574 106.305 509.566 106.281 509.547 cv
106.25 509.531 106.23 509.5 106.215 509.457 cv
106.199 509.418 106.184 509.363 106.176 509.293 cv
106.164 509.227 106.16 509.145 106.164 509.047 cv
106.16 508.98 106.164 508.922 106.172 508.871 cv
106.176 508.82 106.184 508.777 106.195 508.738 cv
106.203 508.703 106.219 508.668 106.238 508.637 cv
106.258 508.605 106.293 508.566 106.352 508.516 cv
106.402 508.469 106.496 508.402 106.633 508.32 cv
106.766 508.238 106.938 508.16 107.141 508.078 cv
107.344 508 107.566 507.93 107.813 507.875 cv
108.055 507.82 108.313 507.793 108.586 507.793 cv
109.012 507.793 109.387 507.855 109.711 507.977 cv
110.031 508.098 110.297 508.262 110.512 508.473 cv
110.723 508.684 110.883 508.93 110.988 509.203 cv
111.094 509.484 111.148 509.781 111.148 510.094 cv
111.148 510.383 111.121 510.664 111.07 510.941 cv
111.02 511.227 110.914 511.531 110.754 511.855 cv
110.59 512.184 110.355 512.547 110.051 512.945 cv
109.742 513.348 109.336 513.809 108.832 514.324 cv
107.426 515.793 li
111.285 515.793 li
111.316 515.797 111.352 515.809 111.391 515.824 cv
111.422 515.848 111.453 515.879 111.48 515.918 cv
111.504 515.961 111.523 516.012 111.535 516.07 cv
111.547 516.137 111.551 516.207 111.555 516.285 cv
cp
f
188.25 514.27 mo
188.246 514.422 188.223 514.543 188.18 514.629 cv
188.133 514.719 188.07 514.762 187.988 514.758 cv
186.988 514.758 li
186.988 516.621 li
186.988 516.66 186.977 516.691 186.961 516.715 cv
186.938 516.742 186.906 516.762 186.863 516.781 cv
186.813 516.797 186.75 516.809 186.68 516.82 cv
186.602 516.828 186.508 516.832 186.391 516.836 cv
186.273 516.832 186.176 516.828 186.105 516.82 cv
186.027 516.809 185.969 516.797 185.926 516.781 cv
185.879 516.762 185.848 516.742 185.832 516.715 cv
185.813 516.691 185.805 516.66 185.809 516.621 cv
185.809 514.758 li
182.18 514.758 li
182.121 514.762 182.078 514.754 182.043 514.738 cv
182.008 514.727 181.973 514.699 181.945 514.66 cv
181.914 514.625 181.895 514.574 181.883 514.504 cv
181.871 514.437 181.867 514.348 181.867 514.234 cv
181.867 514.152 181.867 514.074 181.875 514.004 cv
181.875 513.934 181.887 513.871 181.902 513.816 cv
181.914 513.762 181.93 513.707 181.957 513.652 cv
181.977 513.598 182.004 513.543 182.039 513.48 cv
185.199 508.094 li
185.219 508.059 185.254 508.027 185.301 508 cv
185.344 507.973 185.398 507.949 185.473 507.93 cv
185.539 507.914 185.625 507.902 185.73 507.891 cv
185.832 507.887 185.953 507.883 186.094 507.879 cv
186.242 507.883 186.379 507.887 186.496 507.898 cv
186.609 507.91 186.699 507.926 186.773 507.941 cv
186.84 507.961 186.895 507.984 186.934 508.016 cv
186.969 508.047 186.988 508.082 186.988 508.121 cv
186.988 513.785 li
187.988 513.785 li
188.063 513.789 188.125 513.828 188.176 513.906 cv
188.223 513.988 188.246 514.109 188.25 514.27 cv
cp
185.809 508.918 mo
185.797 508.918 li
182.945 513.785 li
185.809 513.785 li
cp
f
264.441 513.922 mo
264.441 514.312 264.379 514.691 264.262 515.051 cv
264.137 515.418 263.953 515.734 263.711 516.008 cv
263.461 516.285 263.148 516.508 262.773 516.672 cv
262.391 516.84 261.945 516.922 261.43 516.922 cv
261.059 516.922 260.73 516.879 260.449 516.785 cv
260.164 516.699 259.918 516.566 259.707 516.395 cv
259.496 516.227 259.32 516.02 259.184 515.773 cv
259.043 515.527 258.93 515.246 258.848 514.93 cv
258.762 514.617 258.703 514.273 258.668 513.895 cv
258.629 513.523 258.609 513.121 258.613 512.687 cv
258.609 512.309 258.629 511.926 258.672 511.535 cv
258.711 511.152 258.785 510.777 258.891 510.41 cv
258.996 510.051 259.141 509.711 259.32 509.395 cv
259.5 509.078 259.727 508.801 260 508.566 cv
260.273 508.332 260.598 508.145 260.977 508.004 cv
261.355 507.867 261.797 507.801 262.301 507.797 cv
262.469 507.801 262.641 507.809 262.813 507.828 cv
262.984 507.852 263.145 507.883 263.293 507.914 cv
263.441 507.953 263.563 507.988 263.664 508.027 cv
263.762 508.066 263.828 508.102 263.863 508.125 cv
263.891 508.152 263.914 508.18 263.934 508.207 cv
263.949 508.238 263.965 508.27 263.973 508.305 cv
263.98 508.34 263.984 508.379 263.992 508.422 cv
263.992 508.465 263.996 508.52 264 508.582 cv
263.996 508.668 263.996 508.738 263.996 508.793 cv
263.992 508.855 263.98 508.902 263.969 508.937 cv
263.949 508.977 263.93 509.004 263.906 509.02 cv
263.879 509.039 263.848 509.047 263.809 509.047 cv
263.758 509.047 263.688 509.031 263.602 509 cv
263.512 508.969 263.406 508.934 263.285 508.891 cv
263.16 508.855 263.012 508.82 262.836 508.785 cv
262.66 508.758 262.457 508.742 262.227 508.738 cv
261.797 508.742 261.43 508.828 261.125 509 cv
260.82 509.172 260.57 509.406 260.375 509.699 cv
260.18 509.992 260.035 510.332 259.945 510.715 cv
259.848 511.105 259.793 511.508 259.785 511.926 cv
259.902 511.859 260.039 511.793 260.188 511.723 cv
260.336 511.656 260.496 511.594 260.672 511.535 cv
260.848 511.484 261.035 511.437 261.23 511.402 cv
261.426 511.371 261.637 511.355 261.863 511.352 cv
262.34 511.355 262.742 511.422 263.074 511.547 cv
263.402 511.68 263.668 511.859 263.875 512.09 cv
264.074 512.32 264.219 512.59 264.309 512.902 cv
264.395 513.215 264.441 513.555 264.441 513.922 cv
cp
263.246 514.031 mo
263.246 513.77 263.219 513.527 263.168 513.309 cv
263.113 513.094 263.023 512.91 262.902 512.754 cv
262.777 512.605 262.613 512.488 262.41 512.406 cv
262.199 512.324 261.945 512.281 261.648 512.281 cv
261.477 512.281 261.309 512.297 261.141 512.328 cv
260.969 512.359 260.805 512.402 260.648 512.449 cv
260.488 512.504 260.34 512.566 260.199 512.637 cv
260.055 512.711 259.922 512.785 259.805 512.863 cv
259.801 513.457 259.84 513.953 259.918 514.348 cv
259.992 514.746 260.102 515.062 260.246 515.301 cv
260.391 515.543 260.57 515.715 260.785 515.816 cv
261 515.922 261.25 515.973 261.539 515.969 cv
261.828 515.973 262.082 515.918 262.297 515.805 cv
262.512 515.699 262.688 515.551 262.832 515.363 cv
262.973 515.18 263.078 514.973 263.145 514.742 cv
263.211 514.512 263.246 514.277 263.246 514.031 cv
cp
f
340.758 514.516 mo
340.758 514.902 340.688 515.246 340.551 515.543 cv
340.414 515.848 340.219 516.098 339.961 516.301 cv
339.703 516.508 339.383 516.664 339.004 516.766 cv
338.621 516.871 338.188 516.922 337.703 516.922 cv
337.242 516.922 336.832 516.875 336.473 516.781 cv
336.109 516.687 335.805 516.547 335.555 516.355 cv
335.305 516.172 335.113 515.941 334.98 515.664 cv
334.848 515.391 334.781 515.078 334.781 514.723 cv
334.781 514.449 334.824 514.191 334.918 513.957 cv
335.004 513.723 335.137 513.508 335.313 513.312 cv
335.48 513.117 335.691 512.934 335.945 512.758 cv
336.195 512.59 336.48 512.426 336.797 512.27 cv
336.523 512.129 336.281 511.98 336.07 511.82 cv
335.859 511.664 335.68 511.492 335.535 511.305 cv
335.387 511.121 335.277 510.926 335.203 510.715 cv
335.125 510.508 335.086 510.277 335.09 510.027 cv
335.086 509.719 335.141 509.426 335.258 509.152 cv
335.367 508.883 335.539 508.648 335.766 508.445 cv
335.992 508.246 336.277 508.086 336.629 507.969 cv
336.973 507.852 337.383 507.793 337.852 507.793 cv
338.297 507.793 338.684 507.848 339.012 507.953 cv
339.34 508.062 339.609 508.207 339.82 508.391 cv
340.031 508.578 340.188 508.797 340.293 509.047 cv
340.391 509.297 340.441 509.566 340.445 509.855 cv
340.441 510.09 340.402 510.316 340.332 510.527 cv
340.254 510.746 340.145 510.949 339.996 511.137 cv
339.848 511.332 339.668 511.512 339.457 511.676 cv
339.246 511.848 339.004 512.004 338.73 512.145 cv
339.051 512.309 339.336 512.473 339.594 512.641 cv
339.844 512.809 340.059 512.988 340.234 513.184 cv
340.402 513.379 340.531 513.586 340.625 513.801 cv
340.711 514.02 340.758 514.258 340.758 514.516 cv
cp
339.277 509.965 mo
339.273 509.777 339.242 509.602 339.176 509.445 cv
339.109 509.289 339.012 509.156 338.887 509.047 cv
338.758 508.937 338.598 508.855 338.41 508.797 cv
338.215 508.742 338 508.715 337.762 508.711 cv
337.266 508.715 336.891 508.824 336.641 509.047 cv
336.383 509.273 336.258 509.582 336.262 509.965 cv
336.258 510.145 336.289 510.309 336.352 510.461 cv
336.414 510.617 336.508 510.762 336.641 510.898 cv
336.766 511.035 336.93 511.168 337.133 511.297 cv
337.328 511.43 337.566 511.566 337.844 511.707 cv
338.305 511.473 338.66 511.211 338.906 510.918 cv
339.152 510.633 339.273 510.316 339.277 509.965 cv
cp
339.566 514.641 mo
339.563 514.434 339.523 514.242 339.449 514.07 cv
339.367 513.902 339.25 513.742 339.094 513.59 cv
338.938 513.441 338.738 513.297 338.504 513.156 cv
338.266 513.02 337.996 512.875 337.688 512.723 cv
337.398 512.867 337.145 513.008 336.93 513.148 cv
336.711 513.289 336.531 513.437 336.395 513.586 cv
336.254 513.742 336.148 513.898 336.078 514.062 cv
336.004 514.23 335.969 514.414 335.973 514.613 cv
335.969 515.059 336.121 515.402 336.43 515.641 cv
336.73 515.887 337.184 516.008 337.789 516.004 cv
338.371 516.008 338.816 515.887 339.117 515.637 cv
339.414 515.395 339.563 515.062 339.566 514.641 cv
cp
f
413.344 516.328 mo
413.34 516.418 413.332 516.488 413.32 516.547 cv
413.305 516.609 413.285 516.66 413.266 516.691 cv
413.242 516.73 413.219 516.754 413.188 516.77 cv
413.156 516.785 413.125 516.793 413.098 516.793 cv
408.461 516.793 li
408.426 516.793 408.398 516.785 408.371 516.77 cv
408.344 516.754 408.316 516.73 408.293 516.691 cv
408.266 516.66 408.246 516.609 408.234 516.547 cv
408.219 516.488 408.211 516.418 408.215 516.328 cv
408.211 516.25 408.219 516.176 408.234 516.113 cv
408.246 516.055 408.262 516.008 408.285 515.969 cv
408.301 515.934 408.328 515.902 408.359 515.879 cv
408.391 515.859 408.422 515.852 408.461 515.848 cv
410.313 515.848 li
410.313 509.102 li
408.598 510.121 li
408.508 510.172 408.438 510.199 408.391 510.207 cv
408.336 510.215 408.293 510.207 408.262 510.176 cv
408.227 510.148 408.207 510.098 408.195 510.027 cv
408.184 509.961 408.176 509.875 408.18 509.766 cv
408.176 509.691 408.18 509.625 408.191 509.566 cv
408.195 509.516 408.207 509.469 408.223 509.43 cv
408.234 509.395 408.254 509.363 408.277 509.336 cv
408.301 509.309 408.332 509.281 408.379 509.254 cv
410.422 507.941 li
410.438 507.93 410.457 507.918 410.488 507.91 cv
410.512 507.902 410.547 507.895 410.594 507.883 cv
410.633 507.875 410.684 507.867 410.738 507.863 cv
410.793 507.863 410.859 507.863 410.945 507.859 cv
411.051 507.863 411.145 507.867 411.219 507.875 cv
411.289 507.883 411.344 507.898 411.391 507.914 cv
411.43 507.934 411.457 507.953 411.473 507.977 cv
411.48 508.004 411.488 508.027 411.492 508.051 cv
411.492 515.848 li
413.098 515.848 li
413.133 515.852 413.168 515.859 413.199 515.879 cv
413.23 515.902 413.254 515.934 413.277 515.969 cv
413.293 516.008 413.309 516.055 413.324 516.113 cv
413.332 516.176 413.34 516.25 413.344 516.328 cv
cp
f
420.699 512.336 mo
420.695 513.02 420.645 513.641 420.539 514.203 cv
420.43 514.766 420.25 515.25 420.004 515.652 cv
419.75 516.059 419.422 516.371 419.023 516.59 cv
418.617 516.812 418.125 516.922 417.539 516.922 cv
416.98 516.922 416.508 516.824 416.129 516.625 cv
415.746 516.43 415.441 516.137 415.207 515.75 cv
414.973 515.363 414.805 514.891 414.711 514.324 cv
414.609 513.762 414.563 513.113 414.563 512.379 cv
414.563 511.707 414.617 511.086 414.727 510.52 cv
414.836 509.957 415.012 509.473 415.262 509.066 cv
415.504 508.664 415.828 508.352 416.234 508.125 cv
416.633 507.906 417.129 507.793 417.719 507.793 cv
418.277 507.793 418.75 507.895 419.133 508.09 cv
419.516 508.293 419.82 508.586 420.055 508.969 cv
420.285 509.359 420.453 509.832 420.551 510.395 cv
420.648 510.957 420.695 511.605 420.699 512.336 cv
cp
419.492 512.418 mo
419.488 511.977 419.473 511.578 419.445 511.227 cv
419.41 510.875 419.363 510.566 419.305 510.297 cv
419.238 510.027 419.16 509.797 419.063 509.602 cv
418.965 509.41 418.848 509.25 418.711 509.121 cv
418.57 508.996 418.41 508.902 418.238 508.844 cv
418.059 508.789 417.863 508.762 417.648 508.758 cv
417.258 508.762 416.941 508.852 416.703 509.035 cv
416.457 509.219 416.266 509.473 416.129 509.789 cv
415.988 510.109 415.895 510.48 415.844 510.91 cv
415.793 511.34 415.77 511.805 415.77 512.297 cv
415.77 512.961 415.801 513.523 415.871 513.984 cv
415.938 514.453 416.047 514.832 416.199 515.121 cv
416.344 515.418 416.535 515.629 416.766 515.758 cv
416.996 515.895 417.277 515.961 417.609 515.957 cv
417.863 515.961 418.086 515.922 418.281 515.836 cv
418.473 515.758 418.641 515.637 418.781 515.48 cv
418.922 515.328 419.035 515.145 419.129 514.93 cv
419.215 514.715 419.289 514.477 419.348 514.215 cv
419.398 513.957 419.438 513.676 419.461 513.371 cv
419.48 513.066 419.488 512.75 419.492 512.418 cv
cp
f
489.695 516.328 mo
489.691 516.418 489.684 516.488 489.672 516.547 cv
489.656 516.609 489.637 516.66 489.617 516.691 cv
489.594 516.73 489.57 516.754 489.539 516.77 cv
489.508 516.785 489.477 516.793 489.449 516.793 cv
484.813 516.793 li
484.777 516.793 484.75 516.785 484.723 516.77 cv
484.695 516.754 484.668 516.73 484.645 516.691 cv
484.617 516.66 484.598 516.609 484.586 516.547 cv
484.57 516.488 484.563 516.418 484.566 516.328 cv
484.563 516.25 484.57 516.176 484.586 516.113 cv
484.598 516.055 484.613 516.008 484.637 515.969 cv
484.652 515.934 484.68 515.902 484.711 515.879 cv
484.742 515.859 484.773 515.852 484.813 515.848 cv
486.664 515.848 li
486.664 509.102 li
484.949 510.121 li
484.859 510.172 484.789 510.199 484.742 510.207 cv
484.688 510.215 484.645 510.207 484.613 510.176 cv
484.578 510.148 484.559 510.098 484.547 510.027 cv
484.535 509.961 484.527 509.875 484.531 509.766 cv
484.527 509.691 484.531 509.625 484.543 509.566 cv
484.547 509.516 484.559 509.469 484.574 509.43 cv
484.586 509.395 484.605 509.363 484.629 509.336 cv
484.652 509.309 484.684 509.281 484.73 509.254 cv
486.773 507.941 li
486.789 507.93 486.809 507.918 486.84 507.91 cv
486.863 507.902 486.898 507.895 486.945 507.883 cv
486.984 507.875 487.035 507.867 487.09 507.863 cv
487.145 507.863 487.211 507.863 487.297 507.859 cv
487.402 507.863 487.496 507.867 487.57 507.875 cv
487.641 507.883 487.695 507.898 487.742 507.914 cv
487.781 507.934 487.809 507.953 487.824 507.977 cv
487.832 508.004 487.84 508.027 487.844 508.051 cv
487.844 515.848 li
489.449 515.848 li
489.484 515.852 489.52 515.859 489.551 515.879 cv
489.582 515.902 489.605 515.934 489.629 515.969 cv
489.645 516.008 489.66 516.055 489.676 516.113 cv
489.684 516.176 489.691 516.25 489.695 516.328 cv
cp
f
496.758 516.285 mo
496.754 516.371 496.75 516.445 496.738 516.508 cv
496.727 516.574 496.711 516.629 496.691 516.668 cv
496.668 516.715 496.641 516.746 496.609 516.762 cv
496.574 516.785 496.535 516.793 496.496 516.793 cv
491.594 516.793 li
491.531 516.793 491.473 516.785 491.426 516.77 cv
491.375 516.754 491.336 516.73 491.301 516.691 cv
491.266 516.66 491.238 516.605 491.227 516.535 cv
491.207 516.465 491.199 516.379 491.203 516.277 cv
491.199 516.187 491.203 516.109 491.211 516.039 cv
491.215 515.973 491.23 515.914 491.258 515.859 cv
491.281 515.809 491.313 515.754 491.348 515.699 cv
491.383 515.648 491.426 515.594 491.484 515.531 cv
493.258 513.707 li
493.668 513.289 493.996 512.914 494.246 512.578 cv
494.492 512.25 494.684 511.945 494.816 511.668 cv
494.949 511.395 495.035 511.145 495.082 510.918 cv
495.121 510.695 495.145 510.484 495.145 510.289 cv
495.145 510.094 495.109 509.91 495.043 509.73 cv
494.977 509.559 494.883 509.402 494.758 509.266 cv
494.633 509.137 494.477 509.031 494.289 508.949 cv
494.102 508.875 493.883 508.836 493.637 508.832 cv
493.348 508.836 493.09 508.875 492.863 508.949 cv
492.633 509.031 492.434 509.117 492.262 509.203 cv
492.09 509.297 491.945 509.379 491.828 509.457 cv
491.711 509.535 491.625 509.574 491.574 509.574 cv
491.539 509.574 491.508 509.566 491.484 509.547 cv
491.453 509.531 491.434 509.5 491.418 509.457 cv
491.402 509.418 491.387 509.363 491.379 509.293 cv
491.367 509.227 491.363 509.145 491.367 509.047 cv
491.363 508.98 491.367 508.922 491.375 508.871 cv
491.379 508.82 491.387 508.777 491.398 508.738 cv
491.406 508.703 491.422 508.668 491.441 508.637 cv
491.461 508.605 491.496 508.566 491.555 508.516 cv
491.605 508.469 491.699 508.402 491.836 508.32 cv
491.969 508.238 492.141 508.16 492.344 508.078 cv
492.547 508 492.77 507.93 493.016 507.875 cv
493.258 507.82 493.516 507.793 493.789 507.793 cv
494.215 507.793 494.59 507.855 494.914 507.977 cv
495.234 508.098 495.5 508.262 495.715 508.473 cv
495.926 508.684 496.086 508.93 496.191 509.203 cv
496.297 509.484 496.352 509.781 496.352 510.094 cv
496.352 510.383 496.324 510.664 496.273 510.941 cv
496.223 511.227 496.117 511.531 495.957 511.855 cv
495.793 512.184 495.559 512.547 495.254 512.945 cv
494.945 513.348 494.539 513.809 494.035 514.324 cv
492.629 515.793 li
496.488 515.793 li
496.52 515.797 496.555 515.809 496.594 515.824 cv
496.625 515.848 496.656 515.879 496.684 515.918 cv
496.707 515.961 496.727 516.012 496.738 516.07 cv
496.75 516.137 496.754 516.207 496.758 516.285 cv
cp
f
566.035 516.328 mo
566.031 516.418 566.023 516.488 566.012 516.547 cv
565.996 516.609 565.977 516.66 565.957 516.691 cv
565.934 516.73 565.91 516.754 565.879 516.77 cv
565.848 516.785 565.816 516.793 565.789 516.793 cv
561.152 516.793 li
561.117 516.793 561.09 516.785 561.063 516.77 cv
561.035 516.754 561.008 516.73 560.984 516.691 cv
560.957 516.66 560.938 516.609 560.926 516.547 cv
560.91 516.488 560.902 516.418 560.906 516.328 cv
560.902 516.25 560.91 516.176 560.926 516.113 cv
560.938 516.055 560.953 516.008 560.977 515.969 cv
560.992 515.934 561.02 515.902 561.051 515.879 cv
561.082 515.859 561.113 515.852 561.152 515.848 cv
563.004 515.848 li
563.004 509.102 li
561.289 510.121 li
561.199 510.172 561.129 510.199 561.082 510.207 cv
561.027 510.215 560.984 510.207 560.953 510.176 cv
560.918 510.148 560.898 510.098 560.887 510.027 cv
560.875 509.961 560.867 509.875 560.871 509.766 cv
560.867 509.691 560.871 509.625 560.883 509.566 cv
560.887 509.516 560.898 509.469 560.914 509.43 cv
560.926 509.395 560.945 509.363 560.969 509.336 cv
560.992 509.309 561.023 509.281 561.07 509.254 cv
563.113 507.941 li
563.129 507.93 563.148 507.918 563.18 507.91 cv
563.203 507.902 563.238 507.895 563.285 507.883 cv
563.324 507.875 563.375 507.867 563.43 507.863 cv
563.484 507.863 563.551 507.863 563.637 507.859 cv
563.742 507.863 563.836 507.867 563.91 507.875 cv
563.98 507.883 564.035 507.898 564.082 507.914 cv
564.121 507.934 564.148 507.953 564.164 507.977 cv
564.172 508.004 564.18 508.027 564.184 508.051 cv
564.184 515.848 li
565.789 515.848 li
565.824 515.852 565.859 515.859 565.891 515.879 cv
565.922 515.902 565.945 515.934 565.969 515.969 cv
565.984 516.008 566 516.055 566.016 516.113 cv
566.023 516.176 566.031 516.25 566.035 516.328 cv
cp
f
573.473 514.27 mo
573.469 514.422 573.445 514.543 573.402 514.629 cv
573.355 514.719 573.293 514.762 573.211 514.758 cv
572.211 514.758 li
572.211 516.621 li
572.211 516.66 572.199 516.691 572.184 516.715 cv
572.16 516.742 572.129 516.762 572.086 516.781 cv
572.035 516.797 571.973 516.809 571.902 516.82 cv
571.824 516.828 571.73 516.832 571.613 516.836 cv
571.496 516.832 571.398 516.828 571.328 516.82 cv
571.25 516.809 571.191 516.797 571.148 516.781 cv
571.102 516.762 571.07 516.742 571.055 516.715 cv
571.035 516.691 571.027 516.66 571.031 516.621 cv
571.031 514.758 li
567.402 514.758 li
567.344 514.762 567.301 514.754 567.266 514.738 cv
567.23 514.727 567.195 514.699 567.168 514.66 cv
567.137 514.625 567.117 514.574 567.105 514.504 cv
567.094 514.437 567.09 514.348 567.09 514.234 cv
567.09 514.152 567.09 514.074 567.098 514.004 cv
567.098 513.934 567.109 513.871 567.125 513.816 cv
567.137 513.762 567.152 513.707 567.18 513.652 cv
567.199 513.598 567.227 513.543 567.262 513.48 cv
570.422 508.094 li
570.441 508.059 570.477 508.027 570.523 508 cv
570.566 507.973 570.621 507.949 570.695 507.93 cv
570.762 507.914 570.848 507.902 570.953 507.891 cv
571.055 507.887 571.176 507.883 571.316 507.879 cv
571.465 507.883 571.602 507.887 571.719 507.898 cv
571.832 507.91 571.922 507.926 571.996 507.941 cv
572.063 507.961 572.117 507.984 572.156 508.016 cv
572.191 508.047 572.211 508.082 572.211 508.121 cv
572.211 513.785 li
573.211 513.785 li
573.285 513.789 573.348 513.828 573.398 513.906 cv
573.445 513.988 573.469 514.109 573.473 514.27 cv
cp
571.031 508.918 mo
571.02 508.918 li
568.168 513.785 li
571.031 513.785 li
cp
f
642.355 516.328 mo
642.352 516.418 642.344 516.488 642.332 516.547 cv
642.316 516.609 642.297 516.66 642.277 516.691 cv
642.254 516.73 642.23 516.754 642.199 516.77 cv
642.168 516.785 642.137 516.793 642.109 516.793 cv
637.473 516.793 li
637.438 516.793 637.41 516.785 637.383 516.77 cv
637.355 516.754 637.328 516.73 637.305 516.691 cv
637.277 516.66 637.258 516.609 637.246 516.547 cv
637.23 516.488 637.223 516.418 637.227 516.328 cv
637.223 516.25 637.23 516.176 637.246 516.113 cv
637.258 516.055 637.273 516.008 637.297 515.969 cv
637.313 515.934 637.34 515.902 637.371 515.879 cv
637.402 515.859 637.434 515.852 637.473 515.848 cv
639.324 515.848 li
639.324 509.102 li
637.609 510.121 li
637.52 510.172 637.449 510.199 637.402 510.207 cv
637.348 510.215 637.305 510.207 637.273 510.176 cv
637.238 510.148 637.219 510.098 637.207 510.027 cv
637.195 509.961 637.188 509.875 637.191 509.766 cv
637.188 509.691 637.191 509.625 637.203 509.566 cv
637.207 509.516 637.219 509.469 637.234 509.43 cv
637.246 509.395 637.266 509.363 637.289 509.336 cv
637.313 509.309 637.344 509.281 637.391 509.254 cv
639.434 507.941 li
639.449 507.93 639.469 507.918 639.5 507.91 cv
639.523 507.902 639.559 507.895 639.605 507.883 cv
639.645 507.875 639.695 507.867 639.75 507.863 cv
639.805 507.863 639.871 507.863 639.957 507.859 cv
640.063 507.863 640.156 507.867 640.23 507.875 cv
640.301 507.883 640.355 507.898 640.402 507.914 cv
640.441 507.934 640.469 507.953 640.484 507.977 cv
640.492 508.004 640.5 508.027 640.504 508.051 cv
640.504 515.848 li
642.109 515.848 li
642.145 515.852 642.18 515.859 642.211 515.879 cv
642.242 515.902 642.266 515.934 642.289 515.969 cv
642.305 516.008 642.32 516.055 642.336 516.113 cv
642.344 516.176 642.352 516.25 642.355 516.328 cv
cp
f
649.641 513.922 mo
649.641 514.312 649.578 514.691 649.461 515.051 cv
649.336 515.418 649.152 515.734 648.91 516.008 cv
648.66 516.285 648.348 516.508 647.973 516.672 cv
647.59 516.84 647.145 516.922 646.629 516.922 cv
646.258 516.922 645.93 516.879 645.648 516.785 cv
645.363 516.699 645.117 516.566 644.906 516.395 cv
644.695 516.227 644.52 516.02 644.383 515.773 cv
644.242 515.527 644.129 515.246 644.047 514.93 cv
643.961 514.617 643.902 514.273 643.867 513.895 cv
643.828 513.523 643.809 513.121 643.813 512.687 cv
643.809 512.309 643.828 511.926 643.871 511.535 cv
643.91 511.152 643.984 510.777 644.09 510.41 cv
644.195 510.051 644.34 509.711 644.52 509.395 cv
644.699 509.078 644.926 508.801 645.199 508.566 cv
645.473 508.332 645.797 508.145 646.176 508.004 cv
646.555 507.867 646.996 507.801 647.5 507.797 cv
647.668 507.801 647.84 507.809 648.012 507.828 cv
648.184 507.852 648.344 507.883 648.492 507.914 cv
648.641 507.953 648.762 507.988 648.863 508.027 cv
648.961 508.066 649.027 508.102 649.063 508.125 cv
649.09 508.152 649.113 508.18 649.133 508.207 cv
649.148 508.238 649.164 508.27 649.172 508.305 cv
649.18 508.34 649.184 508.379 649.191 508.422 cv
649.191 508.465 649.195 508.52 649.199 508.582 cv
649.195 508.668 649.195 508.738 649.195 508.793 cv
649.191 508.855 649.18 508.902 649.168 508.937 cv
649.148 508.977 649.129 509.004 649.105 509.02 cv
649.078 509.039 649.047 509.047 649.008 509.047 cv
648.957 509.047 648.887 509.031 648.801 509 cv
648.711 508.969 648.605 508.934 648.484 508.891 cv
648.359 508.855 648.211 508.82 648.035 508.785 cv
647.859 508.758 647.656 508.742 647.426 508.738 cv
646.996 508.742 646.629 508.828 646.324 509 cv
646.02 509.172 645.77 509.406 645.574 509.699 cv
645.379 509.992 645.234 510.332 645.145 510.715 cv
645.047 511.105 644.992 511.508 644.984 511.926 cv
645.102 511.859 645.238 511.793 645.387 511.723 cv
645.535 511.656 645.695 511.594 645.871 511.535 cv
646.047 511.484 646.234 511.437 646.43 511.402 cv
646.625 511.371 646.836 511.355 647.063 511.352 cv
647.539 511.355 647.941 511.422 648.273 511.547 cv
648.602 511.68 648.867 511.859 649.074 512.09 cv
649.273 512.32 649.418 512.59 649.508 512.902 cv
649.594 513.215 649.641 513.555 649.641 513.922 cv
cp
648.445 514.031 mo
648.445 513.77 648.418 513.527 648.367 513.309 cv
648.313 513.094 648.223 512.91 648.102 512.754 cv
647.977 512.605 647.813 512.488 647.609 512.406 cv
647.398 512.324 647.145 512.281 646.848 512.281 cv
646.676 512.281 646.508 512.297 646.34 512.328 cv
646.168 512.359 646.004 512.402 645.848 512.449 cv
645.688 512.504 645.539 512.566 645.398 512.637 cv
645.254 512.711 645.121 512.785 645.004 512.863 cv
645 513.457 645.039 513.953 645.117 514.348 cv
645.191 514.746 645.301 515.062 645.445 515.301 cv
645.59 515.543 645.77 515.715 645.984 515.816 cv
646.199 515.922 646.449 515.973 646.738 515.969 cv
647.027 515.973 647.281 515.918 647.496 515.805 cv
647.711 515.699 647.887 515.551 648.031 515.363 cv
648.172 515.18 648.277 514.973 648.344 514.742 cv
648.41 514.512 648.445 514.277 648.445 514.031 cv
cp
f
277.66 533.758 mo
277.656 533.863 277.641 533.953 277.605 534.023 cv
277.57 534.102 277.523 534.16 277.469 534.203 cv
277.41 534.254 277.348 534.289 277.281 534.305 cv
277.207 534.328 277.137 534.336 277.074 534.336 cv
276.629 534.336 li
276.488 534.336 276.367 534.324 276.262 534.293 cv
276.156 534.27 276.059 534.215 275.965 534.137 cv
275.871 534.062 275.777 533.961 275.684 533.828 cv
275.59 533.699 275.488 533.535 275.383 533.332 cv
272.309 527.594 li
272.145 527.301 271.98 526.992 271.82 526.664 cv
271.652 526.344 271.5 526.027 271.363 525.719 cv
271.348 525.719 li
271.355 526.094 271.363 526.477 271.371 526.863 cv
271.375 527.254 271.375 527.641 271.379 528.023 cv
271.379 534.109 li
271.375 534.148 271.363 534.184 271.344 534.215 cv
271.32 534.25 271.285 534.277 271.234 534.293 cv
271.18 534.312 271.109 534.324 271.027 534.34 cv
270.941 534.352 270.836 534.359 270.707 534.359 cv
270.57 534.359 270.461 534.352 270.379 534.34 cv
270.293 534.324 270.227 534.312 270.18 534.293 cv
270.129 534.277 270.094 534.25 270.07 534.215 cv
270.047 534.184 270.035 534.148 270.039 534.109 cv
270.039 524.805 li
270.035 524.598 270.094 524.449 270.215 524.359 cv
270.332 524.273 270.461 524.23 270.602 524.227 cv
271.262 524.227 li
271.414 524.23 271.547 524.242 271.652 524.266 cv
271.754 524.293 271.848 524.336 271.934 524.395 cv
272.016 524.457 272.094 524.539 272.176 524.645 cv
272.25 524.754 272.332 524.891 272.418 525.047 cv
274.785 529.473 li
274.93 529.746 275.07 530.012 275.207 530.266 cv
275.34 530.523 275.469 530.777 275.598 531.023 cv
275.719 531.277 275.844 531.523 275.969 531.762 cv
276.09 532.004 276.211 532.246 276.336 532.488 cv
276.344 532.488 li
276.332 532.082 276.324 531.652 276.324 531.207 cv
276.316 530.762 276.316 530.336 276.32 529.926 cv
276.32 524.453 li
276.316 524.418 276.328 524.383 276.352 524.352 cv
276.375 524.32 276.41 524.293 276.465 524.27 cv
276.512 524.246 276.582 524.23 276.668 524.219 cv
276.754 524.211 276.863 524.207 277.004 524.203 cv
277.121 524.207 277.227 524.211 277.316 524.219 cv
277.402 524.23 277.469 524.246 277.52 524.27 cv
277.566 524.293 277.602 524.32 277.625 524.352 cv
277.645 524.383 277.656 524.418 277.66 524.453 cv
cp
f
286.211 534.117 mo
286.207 534.164 286.199 534.199 286.184 534.223 cv
286.164 534.254 286.129 534.277 286.086 534.297 cv
286.039 534.316 285.98 534.328 285.906 534.344 cv
285.828 534.352 285.734 534.359 285.629 534.359 cv
285.504 534.359 285.406 534.352 285.336 534.344 cv
285.258 534.328 285.199 534.316 285.156 534.297 cv
285.109 534.277 285.078 534.254 285.066 534.223 cv
285.047 534.199 285.039 534.164 285.043 534.117 cv
285.043 533.191 li
284.641 533.637 284.246 533.957 283.859 534.156 cv
283.465 534.359 283.07 534.457 282.676 534.461 cv
282.203 534.457 281.809 534.383 281.492 534.227 cv
281.172 534.074 280.914 533.863 280.719 533.594 cv
280.516 533.328 280.375 533.016 280.293 532.656 cv
280.203 532.301 280.16 531.867 280.164 531.359 cv
280.164 527.105 li
280.16 527.066 280.168 527.031 280.191 527 cv
280.207 526.973 280.242 526.949 280.297 526.922 cv
280.344 526.902 280.414 526.887 280.5 526.875 cv
280.582 526.871 280.684 526.867 280.813 526.863 cv
280.934 526.867 281.039 526.871 281.125 526.875 cv
281.207 526.887 281.273 526.902 281.32 526.922 cv
281.367 526.949 281.402 526.973 281.426 527 cv
281.445 527.031 281.453 527.066 281.457 527.105 cv
281.457 531.187 li
281.453 531.602 281.484 531.93 281.547 532.176 cv
281.605 532.422 281.695 532.633 281.82 532.805 cv
281.938 532.984 282.094 533.117 282.285 533.211 cv
282.469 533.309 282.688 533.359 282.938 533.355 cv
283.258 533.359 283.578 533.242 283.902 533.012 cv
284.219 532.785 284.559 532.449 284.918 532.004 cv
284.918 527.105 li
284.918 527.066 284.926 527.031 284.945 527 cv
284.961 526.973 284.996 526.949 285.051 526.922 cv
285.102 526.902 285.168 526.887 285.25 526.875 cv
285.328 526.871 285.434 526.867 285.566 526.863 cv
285.688 526.867 285.793 526.871 285.879 526.875 cv
285.961 526.887 286.023 526.902 286.07 526.922 cv
286.113 526.949 286.148 526.973 286.176 527 cv
286.195 527.031 286.207 527.066 286.211 527.105 cv
cp
f
298.988 534.117 mo
298.984 534.164 298.977 534.199 298.957 534.223 cv
298.934 534.254 298.898 534.277 298.855 534.297 cv
298.805 534.316 298.738 534.328 298.66 534.344 cv
298.574 534.352 298.473 534.359 298.348 534.359 cv
298.215 534.359 298.105 534.352 298.027 534.344 cv
297.941 534.328 297.875 534.316 297.828 534.297 cv
297.773 534.277 297.738 534.254 297.723 534.223 cv
297.699 534.199 297.691 534.164 297.691 534.117 cv
297.691 529.855 li
297.691 529.562 297.664 529.293 297.613 529.047 cv
297.559 528.805 297.477 528.594 297.363 528.414 cv
297.25 528.238 297.105 528.102 296.93 528.008 cv
296.75 527.914 296.539 527.867 296.305 527.867 cv
296.008 527.867 295.711 527.984 295.414 528.211 cv
295.109 528.445 294.781 528.777 294.426 529.215 cv
294.426 534.117 li
294.422 534.164 294.41 534.199 294.395 534.223 cv
294.371 534.254 294.34 534.277 294.293 534.297 cv
294.242 534.316 294.176 534.328 294.094 534.344 cv
294.008 534.352 293.902 534.359 293.781 534.359 cv
293.66 534.359 293.559 534.352 293.473 534.344 cv
293.387 534.328 293.316 534.316 293.27 534.297 cv
293.215 534.277 293.184 534.254 293.168 534.223 cv
293.148 534.199 293.137 534.164 293.141 534.117 cv
293.141 529.855 li
293.137 529.562 293.109 529.293 293.055 529.047 cv
292.996 528.805 292.91 528.594 292.797 528.414 cv
292.684 528.238 292.539 528.102 292.367 528.008 cv
292.188 527.914 291.98 527.867 291.746 527.867 cv
291.445 527.867 291.148 527.984 290.848 528.211 cv
290.547 528.445 290.219 528.777 289.867 529.215 cv
289.867 534.117 li
289.863 534.164 289.852 534.199 289.836 534.223 cv
289.813 534.254 289.781 534.277 289.734 534.297 cv
289.688 534.316 289.621 534.328 289.543 534.344 cv
289.457 534.352 289.352 534.359 289.223 534.359 cv
289.094 534.359 288.988 534.352 288.91 534.344 cv
288.824 534.328 288.758 534.316 288.711 534.297 cv
288.656 534.277 288.625 534.254 288.609 534.223 cv
288.59 534.199 288.578 534.164 288.582 534.117 cv
288.582 527.105 li
288.578 527.066 288.586 527.031 288.605 527 cv
288.617 526.973 288.648 526.949 288.699 526.922 cv
288.742 526.902 288.805 526.887 288.879 526.875 cv
288.949 526.871 289.043 526.867 289.168 526.863 cv
289.277 526.867 289.375 526.871 289.453 526.875 cv
289.527 526.887 289.586 526.902 289.629 526.922 cv
289.668 526.949 289.695 526.973 289.715 527 cv
289.73 527.031 289.738 527.066 289.742 527.105 cv
289.742 528.031 li
290.133 527.59 290.516 527.27 290.891 527.062 cv
291.258 526.859 291.637 526.754 292.02 526.754 cv
292.309 526.754 292.566 526.789 292.801 526.855 cv
293.027 526.926 293.234 527.02 293.414 527.141 cv
293.59 527.262 293.738 527.406 293.867 527.574 cv
293.988 527.746 294.094 527.937 294.18 528.141 cv
294.41 527.891 294.633 527.676 294.844 527.496 cv
295.055 527.324 295.258 527.18 295.453 527.066 cv
295.648 526.961 295.836 526.883 296.02 526.828 cv
296.203 526.781 296.391 526.754 296.578 526.754 cv
297.031 526.754 297.41 526.836 297.715 526.992 cv
298.02 527.156 298.266 527.367 298.461 527.629 cv
298.648 527.895 298.785 528.203 298.867 528.559 cv
298.945 528.914 298.984 529.289 298.988 529.684 cv
cp
f
307.785 530.516 mo
307.781 531.125 307.715 531.676 307.586 532.16 cv
307.449 532.648 307.254 533.062 307 533.402 cv
306.742 533.746 306.426 534.008 306.055 534.187 cv
305.68 534.371 305.254 534.457 304.77 534.461 cv
304.543 534.457 304.336 534.437 304.148 534.395 cv
303.961 534.348 303.773 534.277 303.594 534.18 cv
303.406 534.082 303.227 533.957 303.047 533.805 cv
302.863 533.656 302.672 533.477 302.473 533.262 cv
302.473 534.117 li
302.473 534.164 302.461 534.199 302.441 534.227 cv
302.418 534.262 302.383 534.285 302.34 534.301 cv
302.289 534.316 302.23 534.328 302.164 534.344 cv
302.09 534.352 302 534.359 301.895 534.359 cv
301.785 534.359 301.699 534.352 301.629 534.344 cv
301.555 534.328 301.492 534.316 301.449 534.301 cv
301.398 534.285 301.367 534.262 301.355 534.227 cv
301.336 534.199 301.328 534.164 301.332 534.117 cv
301.332 523.707 li
301.328 523.668 301.34 523.633 301.359 523.598 cv
301.375 523.57 301.406 523.543 301.461 523.52 cv
301.508 523.5 301.574 523.484 301.66 523.473 cv
301.738 523.465 301.844 523.461 301.973 523.457 cv
302.102 523.461 302.207 523.465 302.293 523.473 cv
302.371 523.484 302.438 523.5 302.484 523.52 cv
302.531 523.543 302.563 523.57 302.586 523.598 cv
302.602 523.633 302.613 523.668 302.617 523.707 cv
302.617 527.906 li
302.824 527.695 303.027 527.516 303.223 527.371 cv
303.418 527.227 303.605 527.109 303.793 527.016 cv
303.977 526.93 304.164 526.863 304.355 526.816 cv
304.539 526.777 304.738 526.754 304.949 526.754 cv
305.453 526.754 305.887 526.855 306.254 527.059 cv
306.613 527.262 306.906 527.535 307.133 527.871 cv
307.355 528.215 307.523 528.613 307.629 529.07 cv
307.73 529.527 307.781 530.008 307.785 530.516 cv
cp
306.453 530.664 mo
306.449 530.309 306.422 529.961 306.371 529.621 cv
306.313 529.285 306.219 528.988 306.082 528.727 cv
305.945 528.469 305.766 528.258 305.543 528.098 cv
305.316 527.941 305.035 527.863 304.703 527.859 cv
304.535 527.863 304.371 527.887 304.211 527.93 cv
304.047 527.98 303.883 528.059 303.715 528.164 cv
303.547 528.277 303.371 528.418 303.195 528.586 cv
303.012 528.762 302.82 528.977 302.617 529.23 cv
302.617 532.027 li
302.973 532.461 303.313 532.793 303.637 533.016 cv
303.961 533.246 304.297 533.359 304.648 533.355 cv
304.969 533.359 305.246 533.281 305.48 533.121 cv
305.707 532.969 305.895 532.762 306.039 532.5 cv
306.184 532.246 306.289 531.957 306.355 531.637 cv
306.418 531.32 306.449 530.996 306.453 530.664 cv
cp
f
315.695 530.309 mo
315.691 530.512 315.641 530.652 315.543 530.738 cv
315.438 530.824 315.32 530.867 315.195 530.867 cv
310.578 530.867 li
310.574 531.258 310.613 531.609 310.695 531.922 cv
310.77 532.234 310.902 532.504 311.086 532.723 cv
311.266 532.949 311.5 533.121 311.797 533.238 cv
312.086 533.363 312.445 533.422 312.871 533.418 cv
313.203 533.422 313.5 533.395 313.762 533.336 cv
314.023 533.285 314.25 533.223 314.441 533.152 cv
314.629 533.086 314.785 533.027 314.91 532.969 cv
315.031 532.918 315.125 532.891 315.188 532.887 cv
315.223 532.891 315.254 532.898 315.285 532.914 cv
315.313 532.934 315.336 532.961 315.355 532.996 cv
315.367 533.035 315.379 533.086 315.391 533.148 cv
315.395 533.215 315.398 533.293 315.402 533.387 cv
315.398 533.457 315.395 533.516 315.395 533.562 cv
315.387 533.609 315.383 533.652 315.375 533.691 cv
315.367 533.73 315.352 533.766 315.336 533.797 cv
315.313 533.828 315.289 533.859 315.266 533.887 cv
315.234 533.918 315.152 533.965 315.012 534.027 cv
314.871 534.094 314.688 534.156 314.465 534.219 cv
314.238 534.281 313.98 534.336 313.688 534.387 cv
313.395 534.434 313.082 534.457 312.75 534.461 cv
312.172 534.457 311.664 534.379 311.234 534.219 cv
310.797 534.059 310.434 533.82 310.141 533.504 cv
309.84 533.187 309.617 532.793 309.469 532.312 cv
309.32 531.836 309.246 531.277 309.246 530.641 cv
309.246 530.043 309.32 529.504 309.477 529.02 cv
309.629 528.543 309.855 528.133 310.152 527.797 cv
310.445 527.461 310.801 527.203 311.215 527.023 cv
311.629 526.844 312.094 526.754 312.609 526.754 cv
313.16 526.754 313.629 526.844 314.016 527.02 cv
314.402 527.199 314.719 527.437 314.973 527.734 cv
315.219 528.035 315.402 528.387 315.52 528.785 cv
315.633 529.191 315.691 529.621 315.695 530.074 cv
cp
314.402 529.926 mo
314.418 529.25 314.266 528.719 313.949 528.336 cv
313.633 527.953 313.164 527.762 312.547 527.758 cv
312.223 527.762 311.941 527.82 311.703 527.937 cv
311.461 528.059 311.262 528.219 311.102 528.414 cv
310.938 528.613 310.813 528.844 310.727 529.105 cv
310.637 529.367 310.586 529.641 310.578 529.926 cv
cp
f
321.762 527.562 mo
321.758 527.68 321.758 527.777 321.754 527.852 cv
321.746 527.934 321.734 527.996 321.723 528.035 cv
321.703 528.082 321.684 528.113 321.664 528.137 cv
321.637 528.16 321.605 528.172 321.566 528.172 cv
321.523 528.172 321.473 528.16 321.414 528.137 cv
321.352 528.113 321.281 528.09 321.211 528.066 cv
321.133 528.043 321.051 528.023 320.957 528 cv
320.863 527.984 320.762 527.973 320.652 527.969 cv
320.52 527.973 320.391 528 320.27 528.047 cv
320.145 528.102 320.016 528.187 319.879 528.305 cv
319.738 528.43 319.594 528.586 319.445 528.781 cv
319.293 528.977 319.125 529.219 318.945 529.504 cv
318.945 534.117 li
318.941 534.164 318.93 534.199 318.914 534.223 cv
318.891 534.254 318.859 534.277 318.813 534.297 cv
318.766 534.316 318.699 534.328 318.621 534.344 cv
318.535 534.352 318.43 534.359 318.301 534.359 cv
318.172 534.359 318.066 534.352 317.988 534.344 cv
317.902 534.328 317.836 534.316 317.789 534.297 cv
317.734 534.277 317.703 534.254 317.688 534.223 cv
317.668 534.199 317.656 534.164 317.66 534.117 cv
317.66 527.105 li
317.656 527.066 317.664 527.031 317.684 527 cv
317.695 526.973 317.727 526.949 317.777 526.922 cv
317.82 526.902 317.883 526.887 317.957 526.875 cv
318.027 526.871 318.121 526.867 318.246 526.863 cv
318.355 526.867 318.453 526.871 318.531 526.875 cv
318.605 526.887 318.664 526.902 318.707 526.922 cv
318.746 526.949 318.773 526.973 318.793 527 cv
318.809 527.031 318.816 527.066 318.82 527.105 cv
318.82 528.125 li
319.008 527.844 319.191 527.617 319.363 527.441 cv
319.531 527.266 319.691 527.125 319.844 527.023 cv
319.992 526.922 320.141 526.852 320.289 526.812 cv
320.438 526.773 320.586 526.754 320.738 526.754 cv
320.805 526.754 320.883 526.758 320.969 526.766 cv
321.055 526.773 321.145 526.789 321.238 526.809 cv
321.332 526.832 321.414 526.855 321.492 526.879 cv
321.563 526.906 321.617 526.934 321.652 526.957 cv
321.68 526.988 321.699 527.012 321.715 527.031 cv
321.723 527.059 321.734 527.09 321.742 527.121 cv
321.75 527.16 321.754 527.211 321.758 527.281 cv
321.758 527.352 321.758 527.445 321.762 527.562 cv
cp
f
333.52 530.531 mo
333.516 531.109 333.441 531.637 333.293 532.113 cv
333.141 532.598 332.914 533.012 332.617 533.355 cv
332.316 533.707 331.941 533.977 331.496 534.168 cv
331.043 534.363 330.523 534.457 329.934 534.461 cv
329.355 534.457 328.852 534.375 328.426 534.203 cv
327.996 534.035 327.641 533.785 327.355 533.457 cv
327.066 533.129 326.852 532.734 326.715 532.266 cv
326.574 531.801 326.508 531.27 326.508 530.672 cv
326.508 530.105 326.578 529.578 326.727 529.098 cv
326.871 528.617 327.098 528.203 327.398 527.852 cv
327.695 527.504 328.066 527.234 328.516 527.043 cv
328.961 526.852 329.484 526.754 330.082 526.754 cv
330.66 526.754 331.16 526.84 331.59 527.012 cv
332.016 527.184 332.375 527.434 332.66 527.762 cv
332.945 528.09 333.16 528.488 333.305 528.953 cv
333.445 529.422 333.516 529.949 333.52 530.531 cv
cp
332.188 530.617 mo
332.184 530.242 332.148 529.883 332.082 529.543 cv
332.008 529.207 331.891 528.914 331.73 528.656 cv
331.566 528.406 331.348 528.203 331.07 528.051 cv
330.789 527.906 330.441 527.832 330.031 527.828 cv
329.645 527.832 329.316 527.898 329.043 528.031 cv
328.766 528.168 328.539 528.359 328.363 528.605 cv
328.184 528.852 328.051 529.145 327.969 529.48 cv
327.879 529.82 327.836 530.187 327.84 530.586 cv
327.836 530.973 327.871 531.336 327.945 531.672 cv
328.012 532.012 328.129 532.305 328.297 532.555 cv
328.461 532.809 328.684 533.012 328.961 533.156 cv
329.238 533.309 329.586 533.383 330 533.379 cv
330.375 533.383 330.703 533.312 330.984 533.176 cv
331.262 533.043 331.488 532.855 331.668 532.605 cv
331.844 532.363 331.973 532.07 332.059 531.734 cv
332.141 531.398 332.184 531.027 332.188 530.617 cv
cp
f
339.25 524.219 mo
339.246 524.32 339.242 524.398 339.234 524.457 cv
339.223 524.52 339.211 524.57 339.199 524.602 cv
339.184 524.641 339.168 524.664 339.148 524.676 cv
339.125 524.691 339.098 524.699 339.07 524.695 cv
339.031 524.699 338.984 524.687 338.934 524.66 cv
338.875 524.641 338.809 524.613 338.734 524.582 cv
338.652 524.555 338.563 524.527 338.457 524.504 cv
338.348 524.48 338.223 524.469 338.09 524.469 cv
337.895 524.469 337.73 524.5 337.598 524.562 cv
337.457 524.625 337.348 524.723 337.27 524.855 cv
337.184 524.988 337.125 525.16 337.09 525.371 cv
337.051 525.582 337.031 525.84 337.035 526.137 cv
337.035 526.902 li
338.602 526.902 li
338.641 526.906 338.676 526.914 338.707 526.93 cv
338.734 526.949 338.762 526.98 338.785 527.023 cv
338.809 527.07 338.824 527.129 338.84 527.191 cv
338.848 527.262 338.855 527.344 338.859 527.437 cv
338.855 527.629 338.832 527.762 338.789 527.844 cv
338.738 527.93 338.676 527.973 338.602 527.969 cv
337.035 527.969 li
337.035 534.117 li
337.031 534.164 337.023 534.199 337.004 534.223 cv
336.98 534.254 336.945 534.277 336.898 534.297 cv
336.848 534.316 336.781 534.328 336.699 534.344 cv
336.613 534.352 336.508 534.359 336.391 534.359 cv
336.262 534.359 336.16 534.352 336.078 534.344 cv
335.992 534.328 335.926 534.316 335.879 534.297 cv
335.828 534.277 335.793 534.254 335.773 534.223 cv
335.75 534.199 335.738 534.164 335.742 534.117 cv
335.742 527.969 li
334.754 527.969 li
334.668 527.973 334.605 527.93 334.566 527.844 cv
334.523 527.762 334.5 527.629 334.504 527.437 cv
334.5 527.344 334.508 527.262 334.52 527.191 cv
334.527 527.129 334.543 527.07 334.566 527.023 cv
334.586 526.98 334.609 526.949 334.645 526.93 cv
334.672 526.914 334.711 526.906 334.754 526.902 cv
335.742 526.902 li
335.742 526.176 li
335.738 525.691 335.785 525.273 335.879 524.918 cv
335.969 524.57 336.105 524.281 336.293 524.059 cv
336.477 523.836 336.711 523.672 337 523.562 cv
337.281 523.457 337.617 523.402 338.004 523.402 cv
338.18 523.402 338.355 523.422 338.531 523.453 cv
338.699 523.492 338.832 523.527 338.93 523.562 cv
339.02 523.605 339.082 523.641 339.117 523.668 cv
339.145 523.703 339.172 523.742 339.195 523.789 cv
339.215 523.84 339.227 523.902 339.238 523.969 cv
339.242 524.043 339.246 524.125 339.25 524.219 cv
cp
f
349.449 531.484 mo
349.445 531.957 349.359 532.379 349.188 532.746 cv
349.012 533.121 348.77 533.434 348.461 533.687 cv
348.152 533.945 347.789 534.137 347.371 534.266 cv
346.949 534.395 346.5 534.457 346.02 534.461 cv
345.68 534.457 345.363 534.43 345.078 534.375 cv
344.789 534.316 344.535 534.25 344.309 534.164 cv
344.082 534.086 343.891 534 343.738 533.906 cv
343.582 533.82 343.477 533.742 343.418 533.68 cv
343.359 533.617 343.316 533.539 343.289 533.445 cv
343.258 533.352 343.242 533.223 343.246 533.059 cv
343.242 532.945 343.246 532.852 343.262 532.773 cv
343.27 532.699 343.285 532.637 343.309 532.59 cv
343.324 532.543 343.352 532.512 343.387 532.492 cv
343.414 532.477 343.449 532.469 343.492 532.465 cv
343.563 532.469 343.664 532.512 343.801 532.598 cv
343.93 532.687 344.102 532.785 344.313 532.887 cv
344.52 532.996 344.77 533.094 345.063 533.18 cv
345.355 533.273 345.695 533.316 346.082 533.316 cv
346.371 533.316 346.637 533.277 346.879 533.199 cv
347.117 533.121 347.324 533.012 347.504 532.867 cv
347.676 532.727 347.813 532.551 347.906 532.34 cv
348 532.133 348.047 531.898 348.047 531.633 cv
348.047 531.352 347.98 531.105 347.852 530.898 cv
347.719 530.699 347.547 530.523 347.336 530.367 cv
347.121 530.219 346.879 530.078 346.605 529.945 cv
346.332 529.82 346.051 529.687 345.77 529.555 cv
345.48 529.422 345.203 529.277 344.934 529.113 cv
344.664 528.957 344.422 528.766 344.211 528.547 cv
343.992 528.328 343.82 528.074 343.691 527.777 cv
343.555 527.488 343.488 527.137 343.492 526.723 cv
343.488 526.305 343.566 525.93 343.723 525.598 cv
343.875 525.27 344.086 524.992 344.363 524.766 cv
344.633 524.547 344.957 524.375 345.336 524.258 cv
345.711 524.141 346.121 524.082 346.559 524.082 cv
346.777 524.082 347 524.102 347.23 524.141 cv
347.453 524.18 347.664 524.23 347.867 524.293 cv
348.063 524.359 348.242 524.434 348.402 524.512 cv
348.555 524.594 348.656 524.66 348.711 524.707 cv
348.758 524.762 348.793 524.801 348.809 524.824 cv
348.824 524.855 348.836 524.891 348.848 524.934 cv
348.855 524.98 348.863 525.035 348.871 525.094 cv
348.875 525.16 348.879 525.238 348.879 525.336 cv
348.879 525.43 348.875 525.516 348.867 525.586 cv
348.859 525.664 348.848 525.723 348.832 525.77 cv
348.816 525.816 348.793 525.852 348.766 525.875 cv
348.734 525.898 348.703 525.91 348.668 525.91 cv
348.609 525.91 348.52 525.875 348.398 525.805 cv
348.273 525.734 348.121 525.652 347.949 525.559 cv
347.77 525.469 347.563 525.387 347.324 525.309 cv
347.078 525.234 346.809 525.195 346.512 525.195 cv
346.23 525.195 345.984 525.234 345.777 525.309 cv
345.566 525.387 345.395 525.488 345.262 525.609 cv
345.125 525.734 345.023 525.879 344.957 526.051 cv
344.891 526.223 344.859 526.406 344.859 526.598 cv
344.859 526.883 344.922 527.125 345.051 527.324 cv
345.18 527.527 345.352 527.707 345.57 527.859 cv
345.781 528.02 346.027 528.16 346.305 528.289 cv
346.578 528.422 346.859 528.555 347.148 528.684 cv
347.434 528.816 347.715 528.961 347.988 529.117 cv
348.262 529.277 348.508 529.465 348.727 529.68 cv
348.941 529.898 349.113 530.152 349.25 530.445 cv
349.379 530.738 349.445 531.086 349.449 531.484 cv
cp
f
357.215 534.117 mo
357.211 534.164 357.203 534.199 357.188 534.223 cv
357.168 534.254 357.133 534.277 357.09 534.297 cv
357.043 534.316 356.984 534.328 356.91 534.344 cv
356.832 534.352 356.738 534.359 356.633 534.359 cv
356.508 534.359 356.41 534.352 356.34 534.344 cv
356.262 534.328 356.203 534.316 356.16 534.297 cv
356.113 534.277 356.082 534.254 356.07 534.223 cv
356.051 534.199 356.043 534.164 356.047 534.117 cv
356.047 533.191 li
355.645 533.637 355.25 533.957 354.863 534.156 cv
354.469 534.359 354.074 534.457 353.68 534.461 cv
353.207 534.457 352.813 534.383 352.496 534.227 cv
352.176 534.074 351.918 533.863 351.723 533.594 cv
351.52 533.328 351.379 533.016 351.297 532.656 cv
351.207 532.301 351.164 531.867 351.168 531.359 cv
351.168 527.105 li
351.164 527.066 351.172 527.031 351.195 527 cv
351.211 526.973 351.246 526.949 351.301 526.922 cv
351.348 526.902 351.418 526.887 351.504 526.875 cv
351.586 526.871 351.688 526.867 351.816 526.863 cv
351.938 526.867 352.043 526.871 352.129 526.875 cv
352.211 526.887 352.277 526.902 352.324 526.922 cv
352.371 526.949 352.406 526.973 352.43 527 cv
352.449 527.031 352.457 527.066 352.461 527.105 cv
352.461 531.187 li
352.457 531.602 352.488 531.93 352.551 532.176 cv
352.609 532.422 352.699 532.633 352.824 532.805 cv
352.941 532.984 353.098 533.117 353.289 533.211 cv
353.473 533.309 353.691 533.359 353.941 533.355 cv
354.262 533.359 354.582 533.242 354.906 533.012 cv
355.223 532.785 355.563 532.449 355.922 532.004 cv
355.922 527.105 li
355.922 527.066 355.93 527.031 355.949 527 cv
355.965 526.973 356 526.949 356.055 526.922 cv
356.105 526.902 356.172 526.887 356.254 526.875 cv
356.332 526.871 356.438 526.867 356.57 526.863 cv
356.691 526.867 356.797 526.871 356.883 526.875 cv
356.965 526.887 357.027 526.902 357.074 526.922 cv
357.117 526.949 357.152 526.973 357.18 527 cv
357.199 527.031 357.211 527.066 357.215 527.105 cv
cp
f
366.07 530.516 mo
366.066 531.125 366 531.676 365.871 532.16 cv
365.734 532.648 365.539 533.062 365.285 533.402 cv
365.027 533.746 364.711 534.008 364.34 534.187 cv
363.965 534.371 363.539 534.457 363.055 534.461 cv
362.828 534.457 362.621 534.437 362.434 534.395 cv
362.246 534.348 362.059 534.277 361.879 534.18 cv
361.691 534.082 361.512 533.957 361.332 533.805 cv
361.148 533.656 360.957 533.477 360.758 533.262 cv
360.758 534.117 li
360.758 534.164 360.746 534.199 360.727 534.227 cv
360.703 534.262 360.668 534.285 360.625 534.301 cv
360.574 534.316 360.516 534.328 360.449 534.344 cv
360.375 534.352 360.285 534.359 360.18 534.359 cv
360.07 534.359 359.984 534.352 359.914 534.344 cv
359.84 534.328 359.777 534.316 359.734 534.301 cv
359.684 534.285 359.652 534.262 359.641 534.227 cv
359.621 534.199 359.613 534.164 359.617 534.117 cv
359.617 523.707 li
359.613 523.668 359.625 523.633 359.645 523.598 cv
359.66 523.57 359.691 523.543 359.746 523.52 cv
359.793 523.5 359.859 523.484 359.945 523.473 cv
360.023 523.465 360.129 523.461 360.258 523.457 cv
360.387 523.461 360.492 523.465 360.578 523.473 cv
360.656 523.484 360.723 523.5 360.77 523.52 cv
360.816 523.543 360.848 523.57 360.871 523.598 cv
360.887 523.633 360.898 523.668 360.902 523.707 cv
360.902 527.906 li
361.109 527.695 361.313 527.516 361.508 527.371 cv
361.703 527.227 361.891 527.109 362.078 527.016 cv
362.262 526.93 362.449 526.863 362.641 526.816 cv
362.824 526.777 363.023 526.754 363.234 526.754 cv
363.738 526.754 364.172 526.855 364.539 527.059 cv
364.898 527.262 365.191 527.535 365.418 527.871 cv
365.641 528.215 365.809 528.613 365.914 529.07 cv
366.016 529.527 366.066 530.008 366.07 530.516 cv
cp
364.738 530.664 mo
364.734 530.309 364.707 529.961 364.656 529.621 cv
364.598 529.285 364.504 528.988 364.367 528.727 cv
364.23 528.469 364.051 528.258 363.828 528.098 cv
363.602 527.941 363.32 527.863 362.988 527.859 cv
362.82 527.863 362.656 527.887 362.496 527.93 cv
362.332 527.98 362.168 528.059 362 528.164 cv
361.832 528.277 361.656 528.418 361.48 528.586 cv
361.297 528.762 361.105 528.977 360.902 529.23 cv
360.902 532.027 li
361.258 532.461 361.598 532.793 361.922 533.016 cv
362.246 533.246 362.582 533.359 362.934 533.355 cv
363.254 533.359 363.531 533.281 363.766 533.121 cv
363.992 532.969 364.18 532.762 364.324 532.5 cv
364.469 532.246 364.574 531.957 364.641 531.637 cv
364.703 531.32 364.734 530.996 364.738 530.664 cv
cp
f
371.207 530.379 mo
371.207 530.582 371.184 530.719 371.137 530.797 cv
371.09 530.875 371.02 530.914 370.934 530.914 cv
367.676 530.914 li
367.582 530.914 367.516 530.875 367.469 530.793 cv
367.422 530.715 367.398 530.578 367.398 530.379 cv
367.398 530.184 367.422 530.043 367.469 529.965 cv
367.516 529.887 367.582 529.848 367.676 529.848 cv
370.934 529.848 li
370.973 529.848 371.012 529.855 371.047 529.871 cv
371.078 529.887 371.105 529.918 371.133 529.961 cv
371.152 530.008 371.172 530.062 371.188 530.129 cv
371.199 530.199 371.207 530.285 371.207 530.379 cv
cp
f
374.461 534.109 mo
374.457 534.152 374.449 534.187 374.43 534.219 cv
374.406 534.25 374.367 534.277 374.32 534.293 cv
374.266 534.312 374.199 534.324 374.113 534.34 cv
374.027 534.352 373.918 534.359 373.793 534.359 cv
373.664 534.359 373.559 534.352 373.473 534.34 cv
373.383 534.324 373.313 534.312 373.262 534.293 cv
373.207 534.277 373.172 534.25 373.152 534.219 cv
373.129 534.187 373.117 534.152 373.121 534.109 cv
373.121 524.43 li
373.117 524.391 373.129 524.355 373.156 524.32 cv
373.176 524.293 373.215 524.266 373.273 524.246 cv
373.324 524.23 373.395 524.215 373.484 524.199 cv
373.566 524.187 373.668 524.184 373.793 524.18 cv
373.918 524.184 374.027 524.187 374.113 524.199 cv
374.199 524.215 374.266 524.23 374.32 524.246 cv
374.367 524.266 374.406 524.293 374.43 524.32 cv
374.449 524.355 374.457 524.391 374.461 524.43 cv
cp
f
387.449 534.117 mo
387.445 534.164 387.438 534.199 387.418 534.223 cv
387.395 534.254 387.359 534.277 387.316 534.297 cv
387.266 534.316 387.199 534.328 387.121 534.344 cv
387.035 534.352 386.934 534.359 386.809 534.359 cv
386.676 534.359 386.566 534.352 386.488 534.344 cv
386.402 534.328 386.336 534.316 386.289 534.297 cv
386.234 534.277 386.199 534.254 386.184 534.223 cv
386.16 534.199 386.152 534.164 386.152 534.117 cv
386.152 529.855 li
386.152 529.562 386.125 529.293 386.074 529.047 cv
386.02 528.805 385.938 528.594 385.824 528.414 cv
385.711 528.238 385.566 528.102 385.391 528.008 cv
385.211 527.914 385 527.867 384.766 527.867 cv
384.469 527.867 384.172 527.984 383.875 528.211 cv
383.57 528.445 383.242 528.777 382.887 529.215 cv
382.887 534.117 li
382.883 534.164 382.871 534.199 382.855 534.223 cv
382.832 534.254 382.801 534.277 382.754 534.297 cv
382.703 534.316 382.637 534.328 382.555 534.344 cv
382.469 534.352 382.363 534.359 382.242 534.359 cv
382.121 534.359 382.02 534.352 381.934 534.344 cv
381.848 534.328 381.777 534.316 381.73 534.297 cv
381.676 534.277 381.645 534.254 381.629 534.223 cv
381.609 534.199 381.598 534.164 381.602 534.117 cv
381.602 529.855 li
381.598 529.562 381.57 529.293 381.516 529.047 cv
381.457 528.805 381.371 528.594 381.258 528.414 cv
381.145 528.238 381 528.102 380.828 528.008 cv
380.648 527.914 380.441 527.867 380.207 527.867 cv
379.906 527.867 379.609 527.984 379.309 528.211 cv
379.008 528.445 378.68 528.777 378.328 529.215 cv
378.328 534.117 li
378.324 534.164 378.313 534.199 378.297 534.223 cv
378.273 534.254 378.242 534.277 378.195 534.297 cv
378.148 534.316 378.082 534.328 378.004 534.344 cv
377.918 534.352 377.813 534.359 377.684 534.359 cv
377.555 534.359 377.449 534.352 377.371 534.344 cv
377.285 534.328 377.219 534.316 377.172 534.297 cv
377.117 534.277 377.086 534.254 377.07 534.223 cv
377.051 534.199 377.039 534.164 377.043 534.117 cv
377.043 527.105 li
377.039 527.066 377.047 527.031 377.066 527 cv
377.078 526.973 377.109 526.949 377.16 526.922 cv
377.203 526.902 377.266 526.887 377.34 526.875 cv
377.41 526.871 377.504 526.867 377.629 526.863 cv
377.738 526.867 377.836 526.871 377.914 526.875 cv
377.988 526.887 378.047 526.902 378.09 526.922 cv
378.129 526.949 378.156 526.973 378.176 527 cv
378.191 527.031 378.199 527.066 378.203 527.105 cv
378.203 528.031 li
378.594 527.59 378.977 527.27 379.352 527.062 cv
379.719 526.859 380.098 526.754 380.48 526.754 cv
380.77 526.754 381.027 526.789 381.262 526.855 cv
381.488 526.926 381.695 527.02 381.875 527.141 cv
382.051 527.262 382.199 527.406 382.328 527.574 cv
382.449 527.746 382.555 527.937 382.641 528.141 cv
382.871 527.891 383.094 527.676 383.305 527.496 cv
383.516 527.324 383.719 527.18 383.914 527.066 cv
384.109 526.961 384.297 526.883 384.48 526.828 cv
384.664 526.781 384.852 526.754 385.039 526.754 cv
385.492 526.754 385.871 526.836 386.176 526.992 cv
386.48 527.156 386.727 527.367 386.922 527.629 cv
387.109 527.895 387.246 528.203 387.328 528.559 cv
387.406 528.914 387.445 529.289 387.449 529.684 cv
cp
f
395.078 534.125 mo
395.074 534.187 395.055 534.234 395.016 534.266 cv
394.973 534.297 394.914 534.32 394.844 534.336 cv
394.766 534.352 394.66 534.359 394.523 534.359 cv
394.387 534.359 394.277 534.352 394.199 534.336 cv
394.113 534.32 394.055 534.297 394.023 534.266 cv
393.984 534.234 393.969 534.187 393.973 534.125 cv
393.973 533.426 li
393.664 533.754 393.32 534.008 392.945 534.187 cv
392.566 534.371 392.168 534.457 391.75 534.461 cv
391.375 534.457 391.043 534.41 390.746 534.316 cv
390.449 534.219 390.195 534.082 389.984 533.898 cv
389.773 533.719 389.609 533.496 389.492 533.23 cv
389.375 532.969 389.316 532.668 389.32 532.324 cv
389.316 531.934 389.395 531.59 389.559 531.297 cv
389.715 531.008 389.949 530.766 390.254 530.574 cv
390.555 530.383 390.922 530.238 391.359 530.141 cv
391.793 530.047 392.285 530 392.832 529.996 cv
393.801 529.996 li
393.801 529.449 li
393.797 529.18 393.77 528.941 393.715 528.734 cv
393.656 528.527 393.563 528.355 393.438 528.215 cv
393.305 528.078 393.141 527.973 392.941 527.902 cv
392.734 527.832 392.484 527.797 392.195 527.797 cv
391.875 527.797 391.59 527.836 391.34 527.91 cv
391.082 527.988 390.863 528.07 390.676 528.16 cv
390.488 528.254 390.328 528.34 390.203 528.41 cv
390.07 528.488 389.977 528.523 389.918 528.523 cv
389.875 528.523 389.84 528.516 389.809 528.492 cv
389.777 528.477 389.75 528.445 389.727 528.398 cv
389.703 528.359 389.684 528.305 389.676 528.238 cv
389.66 528.176 389.656 528.105 389.66 528.023 cv
389.656 527.898 389.664 527.793 389.688 527.715 cv
389.703 527.641 389.75 527.57 389.82 527.5 cv
389.891 527.434 390.012 527.355 390.184 527.266 cv
390.355 527.176 390.551 527.094 390.773 527.016 cv
390.996 526.945 391.242 526.883 391.508 526.828 cv
391.773 526.781 392.039 526.754 392.313 526.754 cv
392.813 526.754 393.242 526.812 393.594 526.926 cv
393.945 527.043 394.23 527.211 394.453 527.43 cv
394.668 527.652 394.828 527.926 394.93 528.25 cv
395.027 528.582 395.074 528.965 395.078 529.395 cv
cp
393.801 530.922 mo
392.699 530.922 li
392.344 530.926 392.039 530.957 391.781 531.012 cv
391.52 531.074 391.305 531.16 391.133 531.277 cv
390.961 531.395 390.836 531.535 390.758 531.699 cv
390.676 531.863 390.633 532.051 390.637 532.262 cv
390.633 532.629 390.75 532.922 390.98 533.133 cv
391.211 533.352 391.535 533.457 391.953 533.457 cv
392.289 533.457 392.602 533.371 392.891 533.199 cv
393.18 533.027 393.48 532.766 393.801 532.41 cv
cp
f
403.297 527.422 mo
403.293 527.605 403.27 527.738 403.223 527.816 cv
403.172 527.898 403.109 527.937 403.035 527.937 cv
402.027 527.937 li
402.207 528.125 402.336 528.332 402.41 528.559 cv
402.48 528.785 402.516 529.02 402.52 529.262 cv
402.516 529.668 402.449 530.027 402.324 530.34 cv
402.191 530.652 402.008 530.918 401.766 531.129 cv
401.523 531.348 401.234 531.512 400.906 531.625 cv
400.57 531.742 400.203 531.801 399.801 531.797 cv
399.512 531.801 399.238 531.762 398.984 531.684 cv
398.723 531.609 398.527 531.516 398.391 531.398 cv
398.297 531.496 398.219 531.602 398.16 531.719 cv
398.098 531.84 398.066 531.977 398.07 532.129 cv
398.066 532.312 398.152 532.465 398.324 532.582 cv
398.492 532.707 398.715 532.77 398.996 532.777 cv
400.828 532.855 li
401.176 532.867 401.492 532.914 401.785 533 cv
402.074 533.086 402.328 533.211 402.543 533.367 cv
402.754 533.527 402.922 533.719 403.043 533.949 cv
403.16 534.184 403.219 534.453 403.223 534.758 cv
403.219 535.078 403.152 535.383 403.02 535.676 cv
402.883 535.965 402.676 536.219 402.398 536.441 cv
402.117 536.66 401.762 536.836 401.332 536.965 cv
400.902 537.09 400.395 537.152 399.809 537.156 cv
399.238 537.152 398.754 537.105 398.359 537.012 cv
397.961 536.914 397.637 536.781 397.383 536.617 cv
397.129 536.449 396.945 536.254 396.832 536.023 cv
396.715 535.789 396.656 535.535 396.66 535.27 cv
396.656 535.098 396.676 534.934 396.723 534.773 cv
396.762 534.609 396.824 534.457 396.91 534.312 cv
396.992 534.168 397.102 534.031 397.23 533.895 cv
397.355 533.766 397.5 533.633 397.672 533.504 cv
397.414 533.375 397.227 533.211 397.105 533.012 cv
396.984 532.816 396.926 532.605 396.926 532.371 cv
396.926 532.059 396.988 531.773 397.117 531.523 cv
397.246 531.273 397.406 531.051 397.602 530.852 cv
397.438 530.66 397.313 530.445 397.219 530.203 cv
397.125 529.965 397.078 529.672 397.078 529.324 cv
397.078 528.93 397.145 528.57 397.281 528.25 cv
397.414 527.934 397.602 527.668 397.844 527.449 cv
398.082 527.234 398.367 527.066 398.703 526.945 cv
399.035 526.832 399.402 526.773 399.801 526.77 cv
400.012 526.773 400.211 526.785 400.395 526.805 cv
400.578 526.832 400.75 526.863 400.914 526.902 cv
403.035 526.902 li
403.121 526.906 403.188 526.949 403.23 527.031 cv
403.273 527.121 403.293 527.25 403.297 527.422 cv
cp
401.289 529.27 mo
401.285 528.797 401.152 528.426 400.895 528.152 cv
400.629 527.887 400.258 527.75 399.777 527.75 cv
399.523 527.75 399.305 527.793 399.125 527.875 cv
398.938 527.961 398.785 528.074 398.664 528.219 cv
398.543 528.367 398.453 528.535 398.395 528.723 cv
398.332 528.91 398.301 529.109 398.305 529.316 cv
398.301 529.781 398.434 530.145 398.695 530.41 cv
398.957 530.676 399.324 530.809 399.801 530.805 cv
400.051 530.809 400.27 530.77 400.461 530.684 cv
400.645 530.605 400.801 530.492 400.926 530.352 cv
401.047 530.211 401.137 530.047 401.199 529.855 cv
401.254 529.672 401.285 529.477 401.289 529.27 cv
cp
401.934 534.828 mo
401.93 534.523 401.805 534.293 401.563 534.129 cv
401.313 533.969 400.98 533.879 400.563 533.867 cv
398.746 533.805 li
398.578 533.937 398.441 534.062 398.34 534.176 cv
398.23 534.293 398.148 534.402 398.086 534.512 cv
398.023 534.617 397.98 534.723 397.957 534.828 cv
397.934 534.93 397.922 535.035 397.922 535.145 cv
397.922 535.48 398.09 535.734 398.434 535.914 cv
398.773 536.086 399.254 536.176 399.871 536.176 cv
400.258 536.176 400.582 536.137 400.848 536.062 cv
401.105 535.984 401.316 535.883 401.48 535.762 cv
401.637 535.633 401.754 535.492 401.828 535.332 cv
401.895 535.172 401.93 535.004 401.934 534.828 cv
cp
f
410.859 530.309 mo
410.855 530.512 410.805 530.652 410.707 530.738 cv
410.602 530.824 410.484 530.867 410.359 530.867 cv
405.742 530.867 li
405.738 531.258 405.777 531.609 405.859 531.922 cv
405.934 532.234 406.066 532.504 406.25 532.723 cv
406.43 532.949 406.664 533.121 406.961 533.238 cv
407.25 533.363 407.609 533.422 408.035 533.418 cv
408.367 533.422 408.664 533.395 408.926 533.336 cv
409.188 533.285 409.414 533.223 409.605 533.152 cv
409.793 533.086 409.949 533.027 410.074 532.969 cv
410.195 532.918 410.289 532.891 410.352 532.887 cv
410.387 532.891 410.418 532.898 410.449 532.914 cv
410.477 532.934 410.5 532.961 410.52 532.996 cv
410.531 533.035 410.543 533.086 410.555 533.148 cv
410.559 533.215 410.563 533.293 410.566 533.387 cv
410.563 533.457 410.559 533.516 410.559 533.562 cv
410.551 533.609 410.547 533.652 410.539 533.691 cv
410.531 533.73 410.516 533.766 410.5 533.797 cv
410.477 533.828 410.453 533.859 410.43 533.887 cv
410.398 533.918 410.316 533.965 410.176 534.027 cv
410.035 534.094 409.852 534.156 409.629 534.219 cv
409.402 534.281 409.145 534.336 408.852 534.387 cv
408.559 534.434 408.246 534.457 407.914 534.461 cv
407.336 534.457 406.828 534.379 406.398 534.219 cv
405.961 534.059 405.598 533.82 405.305 533.504 cv
405.004 533.187 404.781 532.793 404.633 532.312 cv
404.484 531.836 404.41 531.277 404.41 530.641 cv
404.41 530.043 404.484 529.504 404.641 529.02 cv
404.793 528.543 405.02 528.133 405.316 527.797 cv
405.609 527.461 405.965 527.203 406.379 527.023 cv
406.793 526.844 407.258 526.754 407.773 526.754 cv
408.324 526.754 408.793 526.844 409.18 527.02 cv
409.566 527.199 409.883 527.437 410.137 527.734 cv
410.383 528.035 410.566 528.387 410.684 528.785 cv
410.797 529.191 410.855 529.621 410.859 530.074 cv
cp
409.566 529.926 mo
409.582 529.25 409.43 528.719 409.113 528.336 cv
408.797 527.953 408.328 527.762 407.711 527.758 cv
407.387 527.762 407.105 527.82 406.867 527.937 cv
406.625 528.059 406.426 528.219 406.266 528.414 cv
406.102 528.613 405.977 528.844 405.891 529.105 cv
405.801 529.367 405.75 529.641 405.742 529.926 cv
cp
f
417.227 532.207 mo
417.223 532.57 417.156 532.891 417.027 533.168 cv
416.895 533.449 416.707 533.684 416.465 533.875 cv
416.219 534.07 415.926 534.215 415.59 534.312 cv
415.25 534.41 414.879 534.457 414.477 534.461 cv
414.223 534.457 413.984 534.437 413.762 534.402 cv
413.535 534.359 413.336 534.312 413.156 534.254 cv
412.977 534.195 412.824 534.133 412.699 534.066 cv
412.574 534.004 412.48 533.945 412.426 533.891 cv
412.367 533.84 412.328 533.77 412.305 533.672 cv
412.277 533.582 412.266 533.453 412.266 533.293 cv
412.266 533.195 412.27 533.113 412.281 533.043 cv
412.289 532.977 412.301 532.922 412.32 532.879 cv
412.332 532.84 412.355 532.809 412.383 532.789 cv
412.41 532.773 412.441 532.766 412.48 532.762 cv
412.535 532.766 412.621 532.801 412.734 532.867 cv
412.844 532.941 412.98 533.02 413.148 533.098 cv
413.309 533.184 413.5 533.258 413.727 533.328 cv
413.945 533.398 414.203 533.434 414.5 533.434 cv
414.715 533.434 414.914 533.41 415.094 533.363 cv
415.27 533.316 415.422 533.25 415.551 533.156 cv
415.68 533.07 415.781 532.953 415.852 532.809 cv
415.922 532.672 415.957 532.504 415.957 532.309 cv
415.957 532.113 415.906 531.949 415.805 531.812 cv
415.703 531.68 415.566 531.559 415.402 531.453 cv
415.234 531.352 415.051 531.262 414.844 531.176 cv
414.633 531.098 414.418 531.012 414.199 530.922 cv
413.98 530.836 413.766 530.734 413.555 530.621 cv
413.344 530.512 413.152 530.379 412.988 530.215 cv
412.816 530.059 412.684 529.863 412.586 529.637 cv
412.48 529.414 412.43 529.148 412.434 528.836 cv
412.43 528.562 412.484 528.297 412.594 528.043 cv
412.699 527.793 412.859 527.574 413.074 527.383 cv
413.285 527.195 413.551 527.043 413.871 526.926 cv
414.191 526.812 414.563 526.754 414.992 526.754 cv
415.176 526.754 415.363 526.77 415.551 526.801 cv
415.734 526.832 415.902 526.871 416.059 526.918 cv
416.207 526.965 416.336 527.016 416.445 527.07 cv
416.547 527.125 416.629 527.176 416.688 527.215 cv
416.738 527.262 416.773 527.297 416.797 527.324 cv
416.813 527.355 416.828 527.391 416.836 527.426 cv
416.844 527.469 416.852 527.516 416.859 527.57 cv
416.867 527.629 416.871 527.699 416.871 527.781 cv
416.871 527.871 416.867 527.949 416.859 528.012 cv
416.852 528.082 416.836 528.133 416.82 528.172 cv
416.797 528.215 416.777 528.246 416.754 528.262 cv
416.727 528.281 416.695 528.289 416.668 528.289 cv
416.617 528.289 416.551 528.262 416.465 528.203 cv
416.375 528.148 416.262 528.086 416.121 528.02 cv
415.98 527.957 415.813 527.898 415.625 527.836 cv
415.434 527.781 415.219 527.75 414.977 527.75 cv
414.754 527.75 414.563 527.777 414.398 527.824 cv
414.23 527.879 414.094 527.949 413.988 528.035 cv
413.883 528.129 413.801 528.234 413.75 528.359 cv
413.691 528.484 413.664 528.621 413.668 528.766 cv
413.664 528.969 413.715 529.137 413.82 529.273 cv
413.922 529.414 414.059 529.535 414.227 529.637 cv
414.391 529.742 414.582 529.836 414.797 529.918 cv
415.008 530.004 415.223 530.09 415.445 530.176 cv
415.664 530.266 415.883 530.367 416.102 530.473 cv
416.316 530.582 416.508 530.711 416.676 530.867 cv
416.84 531.023 416.973 531.211 417.074 531.43 cv
417.172 531.648 417.223 531.91 417.227 532.207 cv
cp
f
144.883 13.727 mo
144.879 14.258 144.781 14.723 144.586 15.121 cv
144.387 15.523 144.121 15.859 143.785 16.125 cv
143.445 16.395 143.047 16.594 142.598 16.727 cv
142.145 16.859 141.664 16.926 141.152 16.93 cv
140.801 16.926 140.477 16.898 140.18 16.844 cv
139.879 16.785 139.617 16.719 139.391 16.637 cv
139.16 16.559 138.969 16.473 138.816 16.383 cv
138.664 16.297 138.555 16.219 138.488 16.148 cv
138.418 16.082 138.367 15.984 138.344 15.859 cv
138.313 15.734 138.301 15.551 138.301 15.309 cv
138.301 15.148 138.305 15.016 138.316 14.902 cv
138.324 14.797 138.34 14.707 138.367 14.637 cv
138.387 14.57 138.418 14.523 138.461 14.492 cv
138.496 14.469 138.543 14.453 138.594 14.449 cv
138.664 14.453 138.766 14.496 138.902 14.578 cv
139.031 14.668 139.203 14.762 139.414 14.863 cv
139.621 14.969 139.867 15.066 140.156 15.148 cv
140.441 15.238 140.777 15.281 141.16 15.277 cv
141.41 15.281 141.633 15.25 141.828 15.187 cv
142.023 15.129 142.191 15.043 142.332 14.934 cv
142.469 14.824 142.574 14.691 142.648 14.531 cv
142.719 14.371 142.754 14.191 142.758 13.992 cv
142.754 13.766 142.691 13.57 142.57 13.402 cv
142.441 13.242 142.277 13.098 142.082 12.969 cv
141.879 12.844 141.652 12.723 141.398 12.609 cv
141.145 12.5 140.883 12.383 140.613 12.254 cv
140.34 12.133 140.078 11.988 139.824 11.828 cv
139.57 11.672 139.344 11.484 139.145 11.262 cv
138.941 11.043 138.777 10.781 138.656 10.477 cv
138.531 10.176 138.469 9.81598 138.473 9.39502 cv
138.469 8.914 138.559 8.48798 138.738 8.12097 cv
138.914 7.758 139.156 7.453 139.465 7.20697 cv
139.766 6.96899 140.125 6.789 140.539 6.66803 cv
140.953 6.55103 141.391 6.492 141.852 6.48798 cv
142.09 6.492 142.328 6.508 142.57 6.54303 cv
142.809 6.58197 143.031 6.633 143.238 6.69098 cv
143.445 6.75403 143.629 6.82397 143.793 6.89801 cv
143.949 6.97998 144.059 7.04303 144.113 7.09399 cv
144.164 7.14801 144.199 7.19501 144.219 7.22699 cv
144.234 7.26599 144.25 7.31201 144.266 7.37097 cv
144.277 7.43402 144.285 7.508 144.293 7.59802 cv
144.297 7.69098 144.301 7.80499 144.301 7.93701 cv
144.301 8.09003 144.297 8.21899 144.289 8.32001 cv
144.281 8.42603 144.266 8.51202 144.25 8.57397 cv
144.227 8.64502 144.203 8.69098 144.172 8.72302 cv
144.137 8.75403 144.09 8.77002 144.035 8.77002 cv
143.977 8.77002 143.887 8.73401 143.762 8.65997 cv
143.637 8.59003 143.48 8.51202 143.301 8.422 cv
143.117 8.34003 142.91 8.26202 142.672 8.19098 cv
142.43 8.125 142.164 8.09003 141.883 8.086 cv
141.656 8.09003 141.465 8.117 141.301 8.16803 cv
141.133 8.22302 140.992 8.297 140.883 8.39099 cv
140.77 8.48798 140.688 8.60498 140.633 8.73798 cv
140.578 8.87903 140.551 9.02002 140.551 9.16803 cv
140.551 9.39502 140.609 9.59003 140.734 9.75 cv
140.852 9.914 141.016 10.059 141.227 10.184 cv
141.43 10.312 141.664 10.434 141.922 10.543 cv
142.18 10.66 142.445 10.777 142.719 10.898 cv
142.988 11.027 143.25 11.168 143.512 11.324 cv
143.77 11.48 144.004 11.672 144.207 11.891 cv
144.41 12.117 144.57 12.375 144.695 12.672 cv
144.816 12.969 144.879 13.32 144.883 13.727 cv
cp
f
151.602 15.379 mo
151.598 15.516 151.594 15.629 151.59 15.719 cv
151.578 15.812 151.57 15.891 151.559 15.949 cv
151.543 16.012 151.527 16.062 151.512 16.098 cv
151.492 16.141 151.449 16.187 151.391 16.246 cv
151.324 16.309 151.219 16.383 151.07 16.465 cv
150.918 16.555 150.746 16.633 150.555 16.695 cv
150.363 16.766 150.156 16.816 149.93 16.859 cv
149.703 16.898 149.469 16.918 149.234 16.922 cv
148.695 16.918 148.223 16.84 147.809 16.672 cv
147.395 16.508 147.047 16.262 146.77 15.937 cv
146.484 15.613 146.273 15.219 146.133 14.75 cv
145.992 14.285 145.922 13.746 145.922 13.141 cv
145.922 12.445 146.008 11.848 146.18 11.34 cv
146.352 10.836 146.594 10.414 146.91 10.082 cv
147.219 9.75 147.586 9.50403 148.016 9.34003 cv
148.438 9.17999 148.906 9.09802 149.418 9.09802 cv
149.625 9.09802 149.828 9.117 150.031 9.15198 cv
150.227 9.19098 150.414 9.242 150.59 9.30103 cv
150.762 9.367 150.918 9.43701 151.059 9.51202 cv
151.195 9.59399 151.293 9.65997 151.352 9.71503 cv
151.406 9.77301 151.445 9.82001 151.473 9.85498 cv
151.492 9.89801 151.512 9.94897 151.527 10.008 cv
151.539 10.074 151.551 10.152 151.559 10.238 cv
151.566 10.332 151.57 10.441 151.57 10.57 cv
151.57 10.875 151.543 11.086 151.492 11.207 cv
151.438 11.328 151.371 11.391 151.289 11.387 cv
151.199 11.391 151.105 11.355 151.008 11.281 cv
150.906 11.211 150.789 11.129 150.656 11.039 cv
150.523 10.953 150.363 10.871 150.176 10.797 cv
149.988 10.727 149.762 10.691 149.504 10.687 cv
148.992 10.691 148.605 10.887 148.336 11.277 cv
148.063 11.668 147.926 12.242 147.93 13 cv
147.926 13.375 147.961 13.707 148.031 13.992 cv
148.098 14.277 148.195 14.516 148.332 14.707 cv
148.461 14.902 148.629 15.047 148.832 15.141 cv
149.031 15.238 149.262 15.285 149.527 15.285 cv
149.793 15.285 150.027 15.246 150.227 15.164 cv
150.418 15.086 150.586 14.996 150.734 14.895 cv
150.875 14.797 151 14.707 151.102 14.625 cv
151.199 14.547 151.281 14.508 151.352 14.504 cv
151.395 14.508 151.434 14.52 151.469 14.543 cv
151.496 14.57 151.52 14.617 151.543 14.687 cv
151.559 14.758 151.574 14.848 151.586 14.957 cv
151.594 15.066 151.598 15.207 151.602 15.379 cv
cp
f
158.871 16.508 mo
158.867 16.586 158.84 16.641 158.793 16.68 cv
158.738 16.723 158.656 16.75 158.547 16.77 cv
158.43 16.785 158.266 16.797 158.051 16.797 cv
157.813 16.797 157.641 16.785 157.539 16.77 cv
157.43 16.75 157.355 16.723 157.316 16.68 cv
157.27 16.641 157.25 16.586 157.25 16.508 cv
157.25 15.957 li
156.961 16.266 156.633 16.504 156.27 16.672 cv
155.902 16.844 155.496 16.926 155.051 16.93 cv
154.68 16.926 154.34 16.879 154.031 16.785 cv
153.723 16.691 153.457 16.551 153.23 16.355 cv
153.004 16.168 152.828 15.934 152.703 15.652 cv
152.578 15.375 152.516 15.047 152.52 14.668 cv
152.516 14.27 152.594 13.918 152.754 13.613 cv
152.91 13.316 153.148 13.07 153.465 12.875 cv
153.777 12.684 154.168 12.539 154.637 12.441 cv
155.105 12.352 155.648 12.305 156.266 12.301 cv
156.945 12.301 li
156.945 11.879 li
156.945 11.664 156.922 11.473 156.879 11.309 cv
156.832 11.148 156.758 11.012 156.66 10.898 cv
156.555 10.793 156.422 10.711 156.254 10.656 cv
156.082 10.605 155.871 10.582 155.629 10.578 cv
155.297 10.582 155.004 10.617 154.75 10.687 cv
154.488 10.762 154.262 10.844 154.066 10.93 cv
153.867 11.023 153.703 11.102 153.574 11.172 cv
153.438 11.246 153.328 11.285 153.25 11.281 cv
153.188 11.285 153.137 11.266 153.098 11.227 cv
153.051 11.191 153.016 11.141 152.988 11.07 cv
152.957 11.008 152.934 10.922 152.922 10.82 cv
152.902 10.723 152.895 10.613 152.898 10.492 cv
152.895 10.332 152.91 10.207 152.938 10.109 cv
152.961 10.02 153.008 9.93402 153.086 9.85498 cv
153.156 9.78101 153.285 9.69897 153.469 9.60901 cv
153.648 9.52002 153.859 9.43402 154.105 9.35498 cv
154.348 9.27698 154.617 9.21503 154.906 9.164 cv
155.195 9.117 155.492 9.09399 155.801 9.09003 cv
156.344 9.09399 156.809 9.14502 157.195 9.25 cv
157.582 9.35901 157.902 9.52301 158.152 9.742 cv
158.402 9.961 158.582 10.246 158.699 10.594 cv
158.809 10.945 158.867 11.359 158.871 11.832 cv
cp
156.945 13.531 mo
156.195 13.531 li
155.879 13.535 155.609 13.559 155.387 13.602 cv
155.16 13.652 154.977 13.723 154.84 13.812 cv
154.695 13.91 154.594 14.023 154.531 14.152 cv
154.465 14.289 154.43 14.437 154.434 14.605 cv
154.43 14.898 154.523 15.129 154.711 15.293 cv
154.895 15.461 155.152 15.543 155.48 15.543 cv
155.754 15.543 156.004 15.473 156.238 15.332 cv
156.465 15.191 156.703 14.988 156.945 14.715 cv
cp
f
162.797 16.484 mo
162.793 16.539 162.777 16.582 162.75 16.621 cv
162.715 16.66 162.66 16.695 162.59 16.719 cv
162.512 16.746 162.414 16.762 162.289 16.777 cv
162.164 16.789 162.004 16.797 161.816 16.797 cv
161.621 16.797 161.465 16.789 161.34 16.777 cv
161.215 16.762 161.113 16.746 161.039 16.719 cv
160.961 16.695 160.906 16.66 160.879 16.621 cv
160.844 16.582 160.828 16.539 160.832 16.484 cv
160.832 6.23798 li
160.828 6.18701 160.844 6.14099 160.879 6.09802 cv
160.906 6.05902 160.961 6.02301 161.039 5.992 cv
161.113 5.96503 161.215 5.94501 161.34 5.92603 cv
161.465 5.914 161.621 5.90601 161.816 5.90198 cv
162.004 5.90601 162.164 5.914 162.289 5.92603 cv
162.414 5.94501 162.512 5.96503 162.59 5.992 cv
162.66 6.02301 162.715 6.05902 162.75 6.09802 cv
162.777 6.14099 162.793 6.18701 162.797 6.23798 cv
cp
f
166.77 16.484 mo
166.766 16.539 166.75 16.582 166.723 16.621 cv
166.688 16.66 166.633 16.695 166.563 16.719 cv
166.484 16.746 166.387 16.762 166.262 16.777 cv
166.137 16.789 165.977 16.797 165.789 16.797 cv
165.594 16.797 165.438 16.789 165.313 16.777 cv
165.188 16.762 165.086 16.746 165.012 16.719 cv
164.934 16.695 164.879 16.66 164.852 16.621 cv
164.816 16.582 164.801 16.539 164.805 16.484 cv
164.805 9.55103 li
164.801 9.5 164.816 9.453 164.852 9.414 cv
164.879 9.375 164.934 9.34399 165.012 9.31201 cv
165.086 9.289 165.188 9.26599 165.313 9.24597 cv
165.438 9.23401 165.594 9.22699 165.789 9.22302 cv
165.977 9.22699 166.137 9.23401 166.262 9.24597 cv
166.387 9.26599 166.484 9.289 166.563 9.31201 cv
166.633 9.34399 166.688 9.375 166.723 9.414 cv
166.75 9.453 166.766 9.5 166.77 9.55103 cv
cp
166.918 7.17999 mo
166.918 7.578 166.836 7.85199 166.676 8 cv
166.512 8.15198 166.215 8.22699 165.781 8.22302 cv
165.336 8.22699 165.035 8.15198 164.887 8.008 cv
164.73 7.86298 164.656 7.60199 164.656 7.21899 cv
164.656 6.82397 164.734 6.55103 164.895 6.39801 cv
165.051 6.24597 165.352 6.16803 165.797 6.16803 cv
166.23 6.16803 166.527 6.242 166.684 6.39099 cv
166.84 6.539 166.918 6.80499 166.918 7.17999 cv
cp
f
175.371 16.484 mo
175.367 16.539 175.352 16.582 175.324 16.621 cv
175.289 16.66 175.238 16.695 175.168 16.719 cv
175.094 16.746 174.992 16.762 174.867 16.777 cv
174.738 16.789 174.582 16.797 174.398 16.797 cv
174.203 16.797 174.043 16.789 173.918 16.777 cv
173.789 16.762 173.688 16.746 173.617 16.719 cv
173.539 16.695 173.488 16.66 173.461 16.621 cv
173.426 16.582 173.41 16.539 173.414 16.484 cv
173.414 12.52 li
173.41 12.184 173.387 11.918 173.34 11.723 cv
173.289 11.531 173.215 11.367 173.125 11.23 cv
173.031 11.094 172.914 10.988 172.766 10.91 cv
172.617 10.836 172.441 10.797 172.246 10.797 cv
171.992 10.797 171.742 10.891 171.488 11.07 cv
171.234 11.254 170.969 11.516 170.695 11.863 cv
170.695 16.484 li
170.691 16.539 170.676 16.582 170.648 16.621 cv
170.613 16.66 170.559 16.695 170.488 16.719 cv
170.41 16.746 170.313 16.762 170.188 16.777 cv
170.063 16.789 169.902 16.797 169.715 16.797 cv
169.52 16.797 169.363 16.789 169.238 16.777 cv
169.113 16.762 169.012 16.746 168.938 16.719 cv
168.859 16.695 168.805 16.66 168.777 16.621 cv
168.742 16.582 168.727 16.539 168.73 16.484 cv
168.73 9.53497 li
168.727 9.48798 168.742 9.44098 168.77 9.39801 cv
168.793 9.36298 168.84 9.33197 168.91 9.30103 cv
168.977 9.27698 169.063 9.258 169.172 9.242 cv
169.277 9.23401 169.41 9.22699 169.574 9.22302 cv
169.738 9.22699 169.875 9.23401 169.984 9.242 cv
170.09 9.258 170.176 9.27698 170.238 9.30103 cv
170.297 9.33197 170.34 9.36298 170.367 9.39801 cv
170.391 9.44098 170.402 9.48798 170.406 9.53497 cv
170.406 10.336 li
170.789 9.92603 171.18 9.61298 171.578 9.40198 cv
171.973 9.19501 172.391 9.09399 172.824 9.09003 cv
173.293 9.09399 173.691 9.172 174.02 9.32397 cv
174.344 9.48401 174.605 9.69501 174.805 9.961 cv
175.004 10.23 175.148 10.543 175.238 10.898 cv
175.324 11.258 175.367 11.687 175.371 12.191 cv
cp
f
183.566 10.016 mo
183.563 10.27 183.535 10.453 183.48 10.57 cv
183.422 10.691 183.352 10.75 183.273 10.75 cv
182.453 10.75 li
182.566 10.875 182.648 11.02 182.699 11.176 cv
182.746 11.336 182.77 11.5 182.773 11.668 cv
182.77 12.078 182.703 12.437 182.57 12.75 cv
182.434 13.066 182.238 13.332 181.988 13.543 cv
181.734 13.762 181.434 13.926 181.078 14.035 cv
180.719 14.152 180.32 14.207 179.891 14.203 cv
179.664 14.207 179.453 14.18 179.25 14.121 cv
179.047 14.07 178.891 14.008 178.781 13.93 cv
178.719 14 178.66 14.078 178.613 14.172 cv
178.563 14.266 178.539 14.371 178.543 14.48 cv
178.539 14.637 178.605 14.758 178.738 14.852 cv
178.867 14.949 179.055 15.004 179.297 15.012 cv
180.988 15.074 li
181.383 15.09 181.734 15.148 182.043 15.242 cv
182.352 15.344 182.613 15.477 182.824 15.648 cv
183.035 15.824 183.195 16.035 183.305 16.277 cv
183.414 16.523 183.469 16.797 183.473 17.109 cv
183.469 17.445 183.395 17.77 183.246 18.078 cv
183.098 18.379 182.871 18.641 182.57 18.867 cv
182.266 19.086 181.887 19.266 181.434 19.398 cv
180.977 19.527 180.445 19.59 179.844 19.594 cv
179.246 19.59 178.742 19.543 178.324 19.453 cv
177.906 19.355 177.563 19.227 177.297 19.062 cv
177.027 18.895 176.832 18.695 176.715 18.469 cv
176.59 18.234 176.531 17.98 176.531 17.707 cv
176.531 17.535 176.551 17.375 176.598 17.219 cv
176.637 17.062 176.703 16.91 176.793 16.77 cv
176.875 16.625 176.98 16.492 177.105 16.359 cv
177.23 16.23 177.371 16.105 177.535 15.984 cv
177.309 15.871 177.137 15.711 177.016 15.5 cv
176.895 15.297 176.836 15.07 176.836 14.824 cv
176.836 14.523 176.902 14.246 177.043 13.988 cv
177.18 13.738 177.363 13.508 177.59 13.305 cv
177.406 13.125 177.262 12.91 177.152 12.652 cv
177.043 12.402 176.988 12.082 176.992 11.699 cv
176.988 11.297 177.059 10.937 177.203 10.613 cv
177.344 10.297 177.543 10.027 177.801 9.80499 cv
178.055 9.586 178.359 9.414 178.711 9.297 cv
179.063 9.17999 179.453 9.12097 179.883 9.12097 cv
180.102 9.12097 180.309 9.13702 180.508 9.15997 cv
180.707 9.19098 180.895 9.22699 181.066 9.27002 cv
183.273 9.27002 li
183.355 9.27301 183.426 9.33197 183.484 9.44098 cv
183.535 9.55902 183.563 9.75 183.566 10.016 cv
cp
181.051 11.66 mo
181.047 11.289 180.945 11 180.738 10.789 cv
180.527 10.586 180.234 10.48 179.859 10.477 cv
179.664 10.48 179.492 10.512 179.352 10.574 cv
179.203 10.641 179.082 10.73 178.988 10.84 cv
178.887 10.953 178.816 11.082 178.773 11.23 cv
178.723 11.379 178.699 11.535 178.703 11.691 cv
178.699 12.051 178.805 12.328 179.016 12.531 cv
179.223 12.738 179.512 12.844 179.883 12.84 cv
180.078 12.844 180.246 12.812 180.395 12.746 cv
180.535 12.687 180.656 12.602 180.758 12.488 cv
180.852 12.383 180.926 12.254 180.977 12.109 cv
181.023 11.969 181.047 11.82 181.051 11.66 cv
cp
181.512 17.211 mo
181.512 16.973 181.418 16.797 181.23 16.672 cv
181.043 16.551 180.785 16.48 180.457 16.469 cv
179.063 16.43 li
178.926 16.531 178.816 16.625 178.738 16.715 cv
178.656 16.805 178.594 16.891 178.547 16.977 cv
178.496 17.059 178.461 17.141 178.449 17.219 cv
178.43 17.297 178.422 17.375 178.426 17.461 cv
178.422 17.715 178.555 17.914 178.816 18.051 cv
179.078 18.184 179.449 18.25 179.93 18.254 cv
180.223 18.25 180.469 18.219 180.676 18.164 cv
180.875 18.102 181.039 18.023 181.168 17.926 cv
181.289 17.824 181.379 17.715 181.434 17.594 cv
181.484 17.473 181.512 17.344 181.512 17.211 cv
cp
f
189.762 14.52 mo
189.758 14.918 189.684 15.266 189.539 15.566 cv
189.391 15.867 189.184 16.121 188.914 16.32 cv
188.641 16.527 188.32 16.676 187.953 16.777 cv
187.586 16.875 187.184 16.926 186.754 16.93 cv
186.488 16.926 186.242 16.906 186.008 16.871 cv
185.773 16.828 185.563 16.781 185.375 16.723 cv
185.188 16.664 185.031 16.602 184.906 16.539 cv
184.781 16.477 184.688 16.418 184.633 16.363 cv
184.574 16.309 184.531 16.227 184.504 16.109 cv
184.469 15.996 184.453 15.82 184.457 15.59 cv
184.453 15.441 184.461 15.32 184.473 15.227 cv
184.48 15.137 184.496 15.066 184.52 15.008 cv
184.539 14.957 184.563 14.918 184.598 14.898 cv
184.625 14.883 184.664 14.875 184.711 14.871 cv
184.766 14.875 184.852 14.906 184.965 14.969 cv
185.074 15.035 185.211 15.109 185.383 15.184 cv
185.547 15.266 185.742 15.336 185.961 15.402 cv
186.18 15.473 186.43 15.508 186.715 15.504 cv
186.891 15.508 187.047 15.488 187.188 15.449 cv
187.32 15.414 187.441 15.363 187.547 15.293 cv
187.645 15.227 187.719 15.141 187.773 15.035 cv
187.82 14.934 187.848 14.812 187.852 14.676 cv
187.848 14.52 187.801 14.387 187.707 14.277 cv
187.613 14.168 187.484 14.07 187.328 13.984 cv
187.164 13.902 186.984 13.824 186.789 13.75 cv
186.586 13.68 186.383 13.602 186.172 13.508 cv
185.961 13.422 185.754 13.32 185.559 13.203 cv
185.355 13.094 185.176 12.953 185.02 12.785 cv
184.855 12.621 184.73 12.422 184.637 12.184 cv
184.543 11.953 184.496 11.672 184.496 11.34 cv
184.496 11.012 184.559 10.707 184.688 10.426 cv
184.816 10.152 185.004 9.914 185.25 9.71503 cv
185.492 9.52002 185.789 9.367 186.141 9.25403 cv
186.488 9.14801 186.883 9.09399 187.324 9.09003 cv
187.539 9.09399 187.75 9.10901 187.957 9.13702 cv
188.16 9.172 188.348 9.211 188.516 9.25403 cv
188.68 9.30499 188.82 9.35498 188.938 9.40601 cv
189.051 9.46503 189.133 9.51202 189.184 9.547 cv
189.23 9.59003 189.266 9.62903 189.289 9.664 cv
189.309 9.70697 189.32 9.75403 189.332 9.80499 cv
189.34 9.85901 189.352 9.92603 189.359 10.004 cv
189.367 10.09 189.371 10.187 189.371 10.305 cv
189.371 10.445 189.367 10.562 189.359 10.648 cv
189.352 10.742 189.336 10.812 189.32 10.859 cv
189.301 10.914 189.277 10.949 189.25 10.965 cv
189.215 10.988 189.18 10.996 189.141 10.992 cv
189.09 10.996 189.016 10.969 188.922 10.91 cv
188.82 10.859 188.699 10.801 188.551 10.734 cv
188.402 10.676 188.23 10.617 188.035 10.559 cv
187.84 10.508 187.617 10.48 187.371 10.477 cv
187.191 10.48 187.039 10.5 186.91 10.531 cv
186.777 10.57 186.668 10.621 186.59 10.687 cv
186.504 10.758 186.441 10.836 186.402 10.926 cv
186.355 11.02 186.336 11.117 186.34 11.219 cv
186.336 11.379 186.387 11.516 186.488 11.621 cv
186.586 11.734 186.715 11.828 186.879 11.91 cv
187.039 11.996 187.223 12.074 187.43 12.145 cv
187.633 12.219 187.84 12.301 188.051 12.383 cv
188.258 12.473 188.465 12.57 188.676 12.684 cv
188.879 12.797 189.063 12.937 189.223 13.102 cv
189.383 13.27 189.512 13.469 189.613 13.699 cv
189.707 13.934 189.758 14.207 189.762 14.52 cv
cp
f
201.875 12.937 mo
201.871 13.535 201.793 14.078 201.641 14.562 cv
201.48 15.055 201.246 15.473 200.93 15.824 cv
200.613 16.176 200.215 16.449 199.738 16.641 cv
199.258 16.832 198.699 16.926 198.063 16.93 cv
197.441 16.926 196.902 16.844 196.449 16.672 cv
195.988 16.504 195.609 16.254 195.313 15.926 cv
195.008 15.602 194.785 15.199 194.641 14.719 cv
194.496 14.242 194.426 13.695 194.426 13.078 cv
194.426 12.488 194.504 11.949 194.66 11.457 cv
194.816 10.969 195.055 10.547 195.375 10.195 cv
195.691 9.84802 196.086 9.57397 196.563 9.37903 cv
197.035 9.18701 197.594 9.09399 198.234 9.09003 cv
198.859 9.09399 199.398 9.17603 199.855 9.34399 cv
200.313 9.51599 200.691 9.76599 200.988 10.09 cv
201.285 10.418 201.508 10.82 201.656 11.297 cv
201.801 11.777 201.871 12.324 201.875 12.937 cv
cp
199.855 13.016 mo
199.852 12.68 199.824 12.363 199.773 12.07 cv
199.715 11.785 199.621 11.535 199.496 11.32 cv
199.363 11.109 199.191 10.941 198.98 10.82 cv
198.762 10.703 198.492 10.645 198.164 10.641 cv
197.875 10.645 197.621 10.699 197.402 10.801 cv
197.184 10.91 197.004 11.066 196.863 11.27 cv
196.723 11.477 196.617 11.723 196.547 12.008 cv
196.477 12.301 196.441 12.629 196.441 12.992 cv
196.441 13.34 196.469 13.656 196.527 13.941 cv
196.582 14.234 196.676 14.484 196.805 14.695 cv
196.93 14.91 197.102 15.074 197.324 15.187 cv
197.539 15.309 197.809 15.367 198.133 15.363 cv
198.426 15.367 198.684 15.312 198.906 15.203 cv
199.121 15.098 199.301 14.945 199.441 14.738 cv
199.582 14.539 199.684 14.293 199.754 14.004 cv
199.816 13.719 199.852 13.391 199.855 13.016 cv
cp
f
207.625 6.883 mo
207.621 7.03497 207.617 7.15601 207.609 7.24597 cv
207.598 7.34003 207.582 7.40997 207.563 7.45697 cv
207.539 7.508 207.516 7.54303 207.492 7.55902 cv
207.465 7.578 207.438 7.586 207.406 7.586 cv
207.367 7.586 207.324 7.578 207.285 7.55902 cv
207.238 7.54303 207.184 7.52301 207.121 7.5 cv
207.051 7.47998 206.977 7.461 206.891 7.44098 cv
206.801 7.42603 206.695 7.41803 206.578 7.414 cv
206.434 7.41803 206.313 7.43701 206.215 7.47998 cv
206.113 7.52698 206.031 7.59802 205.965 7.69098 cv
205.895 7.789 205.844 7.914 205.816 8.06598 cv
205.781 8.21899 205.766 8.40601 205.77 8.62903 cv
205.77 9.27002 li
207.039 9.27002 li
207.082 9.27301 207.125 9.28497 207.168 9.30902 cv
207.203 9.336 207.238 9.37903 207.266 9.43701 cv
207.289 9.5 207.309 9.58197 207.324 9.68402 cv
207.336 9.78497 207.34 9.914 207.344 10.062 cv
207.34 10.352 207.316 10.555 207.266 10.676 cv
207.211 10.801 207.133 10.863 207.039 10.859 cv
205.77 10.859 li
205.77 16.484 li
205.766 16.539 205.75 16.582 205.723 16.621 cv
205.688 16.66 205.637 16.695 205.566 16.719 cv
205.492 16.746 205.391 16.762 205.262 16.777 cv
205.129 16.789 204.969 16.797 204.785 16.797 cv
204.598 16.797 204.441 16.789 204.316 16.777 cv
204.188 16.762 204.086 16.746 204.012 16.719 cv
203.934 16.695 203.883 16.66 203.855 16.621 cv
203.824 16.582 203.809 16.539 203.813 16.484 cv
203.813 10.859 li
202.941 10.859 li
202.84 10.863 202.766 10.801 202.719 10.676 cv
202.668 10.555 202.641 10.352 202.645 10.062 cv
202.641 9.914 202.648 9.78497 202.664 9.68402 cv
202.676 9.58197 202.695 9.5 202.719 9.43701 cv
202.742 9.37903 202.773 9.336 202.813 9.30902 cv
202.852 9.28497 202.895 9.27301 202.949 9.27002 cv
203.813 9.27002 li
203.813 8.68402 li
203.809 8.21503 203.855 7.80103 203.953 7.44098 cv
204.043 7.086 204.191 6.789 204.395 6.55499 cv
204.594 6.32001 204.848 6.14502 205.156 6.02002 cv
205.465 5.90198 205.828 5.84003 206.254 5.84003 cv
206.449 5.84003 206.641 5.85901 206.828 5.89099 cv
207.008 5.92999 207.152 5.96503 207.258 6 cv
207.359 6.04303 207.43 6.078 207.469 6.10901 cv
207.504 6.14502 207.535 6.19501 207.559 6.258 cv
207.582 6.32397 207.598 6.40601 207.609 6.508 cv
207.617 6.60901 207.621 6.73401 207.625 6.883 cv
cp
f
216.195 15.801 mo
216.195 16.027 216.18 16.203 216.152 16.324 cv
216.121 16.449 216.082 16.535 216.039 16.582 cv
215.988 16.633 215.922 16.676 215.832 16.715 cv
215.738 16.754 215.629 16.785 215.512 16.816 cv
215.387 16.84 215.254 16.863 215.113 16.883 cv
214.969 16.895 214.828 16.902 214.684 16.906 cv
214.293 16.902 213.953 16.852 213.668 16.758 cv
213.383 16.656 213.148 16.508 212.961 16.301 cv
212.773 16.098 212.633 15.84 212.547 15.527 cv
212.453 15.219 212.41 14.848 212.414 14.418 cv
212.414 10.859 li
211.582 10.859 li
211.48 10.863 211.406 10.801 211.355 10.676 cv
211.301 10.555 211.273 10.352 211.277 10.062 cv
211.273 9.914 211.281 9.78497 211.297 9.68402 cv
211.309 9.58197 211.328 9.5 211.355 9.43701 cv
211.379 9.37903 211.41 9.336 211.453 9.30902 cv
211.488 9.28497 211.535 9.27301 211.59 9.27002 cv
212.414 9.27002 li
212.414 7.71899 li
212.41 7.672 212.426 7.625 212.457 7.578 cv
212.484 7.539 212.535 7.50403 212.613 7.47302 cv
212.688 7.44897 212.789 7.42603 212.918 7.40997 cv
213.043 7.39801 213.199 7.39502 213.391 7.39099 cv
213.578 7.39502 213.738 7.39801 213.867 7.40997 cv
213.992 7.42603 214.094 7.44897 214.168 7.47302 cv
214.238 7.50403 214.289 7.539 214.324 7.578 cv
214.352 7.625 214.367 7.672 214.371 7.71899 cv
214.371 9.27002 li
215.883 9.27002 li
215.934 9.27301 215.98 9.28497 216.02 9.30902 cv
216.059 9.336 216.09 9.37903 216.117 9.43701 cv
216.141 9.5 216.16 9.58197 216.176 9.68402 cv
216.188 9.78497 216.195 9.914 216.195 10.062 cv
216.195 10.352 216.168 10.555 216.117 10.676 cv
216.063 10.801 215.988 10.863 215.891 10.859 cv
214.371 10.859 li
214.371 14.125 li
214.367 14.504 214.426 14.789 214.551 14.977 cv
214.668 15.168 214.883 15.262 215.188 15.262 cv
215.289 15.262 215.383 15.254 215.469 15.234 cv
215.551 15.219 215.625 15.199 215.691 15.172 cv
215.754 15.152 215.809 15.129 215.855 15.109 cv
215.898 15.094 215.938 15.086 215.977 15.082 cv
216.004 15.086 216.035 15.094 216.066 15.109 cv
216.094 15.129 216.113 15.168 216.133 15.219 cv
216.145 15.277 216.16 15.352 216.176 15.441 cv
216.188 15.539 216.195 15.656 216.195 15.801 cv
cp
f
224.258 16.484 mo
224.254 16.539 224.238 16.582 224.211 16.621 cv
224.176 16.66 224.125 16.695 224.055 16.719 cv
223.98 16.746 223.879 16.762 223.754 16.777 cv
223.625 16.789 223.469 16.797 223.285 16.797 cv
223.09 16.797 222.93 16.789 222.805 16.777 cv
222.676 16.762 222.574 16.746 222.504 16.719 cv
222.426 16.695 222.375 16.66 222.348 16.621 cv
222.313 16.582 222.297 16.539 222.301 16.484 cv
222.301 12.52 li
222.297 12.184 222.273 11.918 222.227 11.723 cv
222.176 11.531 222.102 11.367 222.012 11.23 cv
221.918 11.094 221.801 10.988 221.652 10.91 cv
221.504 10.836 221.328 10.797 221.133 10.797 cv
220.879 10.797 220.629 10.891 220.375 11.07 cv
220.121 11.254 219.855 11.516 219.582 11.863 cv
219.582 16.484 li
219.578 16.539 219.563 16.582 219.535 16.621 cv
219.5 16.66 219.445 16.695 219.375 16.719 cv
219.297 16.746 219.199 16.762 219.074 16.777 cv
218.949 16.789 218.789 16.797 218.602 16.797 cv
218.406 16.797 218.25 16.789 218.125 16.777 cv
218 16.762 217.898 16.746 217.824 16.719 cv
217.746 16.695 217.691 16.66 217.664 16.621 cv
217.629 16.582 217.613 16.539 217.617 16.484 cv
217.617 6.23798 li
217.613 6.18701 217.629 6.14099 217.664 6.09802 cv
217.691 6.05902 217.746 6.02301 217.824 5.992 cv
217.898 5.96503 218 5.94501 218.125 5.92603 cv
218.25 5.914 218.406 5.90601 218.602 5.90198 cv
218.789 5.90601 218.949 5.914 219.074 5.92603 cv
219.199 5.94501 219.297 5.96503 219.375 5.992 cv
219.445 6.02301 219.5 6.05902 219.535 6.09802 cv
219.563 6.14099 219.578 6.18701 219.582 6.23798 cv
219.582 10.078 li
219.918 9.75 220.262 9.50403 220.613 9.336 cv
220.961 9.17603 221.328 9.09399 221.711 9.09003 cv
222.18 9.09399 222.578 9.172 222.906 9.32397 cv
223.23 9.48401 223.492 9.69501 223.691 9.96503 cv
223.891 10.234 224.035 10.551 224.125 10.91 cv
224.211 11.273 224.254 11.711 224.258 12.223 cv
cp
f
232.547 12.809 mo
232.543 13.047 232.492 13.223 232.387 13.336 cv
232.277 13.453 232.129 13.512 231.949 13.508 cv
227.715 13.508 li
227.711 13.809 227.746 14.078 227.82 14.316 cv
227.887 14.559 228 14.762 228.156 14.93 cv
228.309 15.102 228.504 15.23 228.746 15.316 cv
228.984 15.406 229.273 15.449 229.617 15.449 cv
229.957 15.449 230.258 15.426 230.52 15.375 cv
230.777 15.328 231.004 15.273 231.195 15.211 cv
231.383 15.152 231.539 15.098 231.668 15.047 cv
231.789 15 231.891 14.977 231.973 14.973 cv
232.016 14.977 232.055 14.984 232.09 15 cv
232.117 15.02 232.145 15.051 232.164 15.098 cv
232.184 15.145 232.195 15.211 232.207 15.297 cv
232.211 15.383 232.215 15.492 232.219 15.621 cv
232.215 15.738 232.215 15.836 232.211 15.914 cv
232.203 15.996 232.195 16.062 232.188 16.117 cv
232.176 16.176 232.16 16.227 232.141 16.262 cv
232.121 16.305 232.094 16.34 232.063 16.375 cv
232.027 16.414 231.934 16.465 231.785 16.523 cv
231.629 16.59 231.438 16.652 231.207 16.707 cv
230.969 16.77 230.699 16.816 230.402 16.863 cv
230.098 16.902 229.777 16.926 229.438 16.93 cv
228.816 16.926 228.273 16.852 227.813 16.695 cv
227.344 16.543 226.957 16.305 226.648 15.988 cv
226.332 15.672 226.098 15.273 225.949 14.789 cv
225.793 14.309 225.719 13.742 225.723 13.086 cv
225.719 12.473 225.797 11.914 225.961 11.418 cv
226.117 10.922 226.352 10.504 226.664 10.156 cv
226.969 9.81201 227.344 9.547 227.781 9.36298 cv
228.219 9.18402 228.711 9.09399 229.266 9.09003 cv
229.844 9.09399 230.344 9.17999 230.758 9.34802 cv
231.172 9.52301 231.508 9.76202 231.773 10.062 cv
232.035 10.367 232.23 10.727 232.359 11.141 cv
232.48 11.559 232.543 12.008 232.547 12.496 cv
cp
230.645 12.246 mo
230.656 11.695 230.547 11.262 230.313 10.949 cv
230.078 10.637 229.711 10.48 229.219 10.477 cv
228.969 10.48 228.754 10.527 228.57 10.617 cv
228.383 10.715 228.23 10.84 228.109 10.996 cv
227.984 11.156 227.891 11.344 227.828 11.559 cv
227.762 11.773 227.723 12.004 227.715 12.246 cv
cp
f
244.895 9.72998 mo
244.895 10.297 244.805 10.801 244.629 11.234 cv
244.449 11.672 244.191 12.039 243.855 12.336 cv
243.516 12.641 243.102 12.867 242.613 13.02 cv
242.121 13.176 241.543 13.254 240.879 13.25 cv
240.039 13.25 li
240.039 16.469 li
240.035 16.523 240.02 16.57 239.988 16.609 cv
239.953 16.652 239.898 16.687 239.82 16.711 cv
239.742 16.738 239.637 16.758 239.508 16.773 cv
239.375 16.789 239.211 16.797 239.012 16.797 cv
238.813 16.797 238.645 16.789 238.516 16.773 cv
238.379 16.758 238.273 16.738 238.199 16.711 cv
238.117 16.687 238.063 16.652 238.035 16.609 cv
238 16.57 237.984 16.523 237.988 16.469 cv
237.988 7.39801 li
237.984 7.15601 238.051 6.97302 238.18 6.84802 cv
238.305 6.72699 238.473 6.66803 238.684 6.664 cv
241.059 6.664 li
241.293 6.66803 241.523 6.67603 241.742 6.69098 cv
241.957 6.711 242.215 6.75 242.516 6.80902 cv
242.816 6.87097 243.121 6.97998 243.434 7.14099 cv
243.742 7.30499 244.004 7.51202 244.223 7.75403 cv
244.438 8.00403 244.605 8.29303 244.723 8.62097 cv
244.836 8.953 244.895 9.32001 244.895 9.72998 cv
cp
242.75 9.875 mo
242.75 9.52698 242.688 9.23401 242.563 9.00403 cv
242.438 8.77698 242.281 8.60901 242.102 8.49597 cv
241.918 8.39099 241.73 8.32001 241.531 8.289 cv
241.328 8.26202 241.121 8.25 240.91 8.24597 cv
240.039 8.24597 li
240.039 11.668 li
240.957 11.668 li
241.285 11.672 241.559 11.625 241.781 11.535 cv
242 11.449 242.18 11.328 242.32 11.168 cv
242.457 11.012 242.563 10.82 242.641 10.598 cv
242.711 10.379 242.75 10.141 242.75 9.875 cv
cp
f
250.828 10.18 mo
250.828 10.371 250.82 10.523 250.813 10.641 cv
250.797 10.762 250.781 10.855 250.766 10.922 cv
250.742 10.992 250.715 11.039 250.684 11.062 cv
250.645 11.09 250.602 11.102 250.555 11.102 cv
250.508 11.102 250.461 11.094 250.414 11.074 cv
250.359 11.059 250.301 11.039 250.238 11.016 cv
250.168 10.996 250.098 10.977 250.023 10.957 cv
249.941 10.941 249.855 10.934 249.766 10.93 cv
249.652 10.934 249.543 10.953 249.438 10.996 cv
249.328 11.043 249.215 11.113 249.102 11.203 cv
248.98 11.297 248.859 11.422 248.734 11.574 cv
248.605 11.734 248.469 11.926 248.324 12.152 cv
248.324 16.484 li
248.32 16.539 248.305 16.582 248.277 16.621 cv
248.242 16.66 248.188 16.695 248.117 16.719 cv
248.039 16.746 247.941 16.762 247.816 16.777 cv
247.691 16.789 247.531 16.797 247.344 16.797 cv
247.148 16.797 246.992 16.789 246.867 16.777 cv
246.742 16.762 246.641 16.746 246.566 16.719 cv
246.488 16.695 246.434 16.66 246.406 16.621 cv
246.371 16.582 246.355 16.539 246.359 16.484 cv
246.359 9.53497 li
246.355 9.48798 246.371 9.44098 246.398 9.39801 cv
246.422 9.36298 246.469 9.33197 246.539 9.30103 cv
246.605 9.27698 246.691 9.258 246.801 9.242 cv
246.906 9.23401 247.039 9.22699 247.203 9.22302 cv
247.367 9.22699 247.504 9.23401 247.613 9.242 cv
247.719 9.258 247.805 9.27698 247.867 9.30103 cv
247.926 9.33197 247.969 9.36298 247.996 9.39801 cv
248.02 9.44098 248.031 9.48798 248.035 9.53497 cv
248.035 10.398 li
248.215 10.141 248.387 9.92999 248.551 9.758 cv
248.707 9.59399 248.863 9.45697 249.012 9.35498 cv
249.156 9.258 249.301 9.19098 249.445 9.14801 cv
249.59 9.11298 249.734 9.09399 249.883 9.09003 cv
249.949 9.09399 250.023 9.09802 250.102 9.10199 cv
250.18 9.11298 250.258 9.125 250.344 9.14099 cv
250.422 9.15997 250.496 9.17999 250.563 9.203 cv
250.621 9.22699 250.668 9.25403 250.699 9.27698 cv
250.727 9.30902 250.746 9.336 250.762 9.36298 cv
250.773 9.39801 250.785 9.44098 250.797 9.492 cv
250.805 9.55103 250.813 9.633 250.82 9.73798 cv
250.824 9.84802 250.828 9.99597 250.828 10.18 cv
cp
f
258.336 12.809 mo
258.332 13.047 258.281 13.223 258.176 13.336 cv
258.066 13.453 257.918 13.512 257.738 13.508 cv
253.504 13.508 li
253.5 13.809 253.535 14.078 253.609 14.316 cv
253.676 14.559 253.789 14.762 253.945 14.93 cv
254.098 15.102 254.293 15.23 254.535 15.316 cv
254.773 15.406 255.063 15.449 255.406 15.449 cv
255.746 15.449 256.047 15.426 256.309 15.375 cv
256.566 15.328 256.793 15.273 256.984 15.211 cv
257.172 15.152 257.328 15.098 257.457 15.047 cv
257.578 15 257.68 14.977 257.762 14.973 cv
257.805 14.977 257.844 14.984 257.879 15 cv
257.906 15.02 257.934 15.051 257.953 15.098 cv
257.973 15.145 257.984 15.211 257.996 15.297 cv
258 15.383 258.004 15.492 258.008 15.621 cv
258.004 15.738 258.004 15.836 258 15.914 cv
257.992 15.996 257.984 16.062 257.977 16.117 cv
257.965 16.176 257.949 16.227 257.93 16.262 cv
257.91 16.305 257.883 16.34 257.852 16.375 cv
257.816 16.414 257.723 16.465 257.574 16.523 cv
257.418 16.59 257.227 16.652 256.996 16.707 cv
256.758 16.77 256.488 16.816 256.191 16.863 cv
255.887 16.902 255.566 16.926 255.227 16.93 cv
254.605 16.926 254.063 16.852 253.602 16.695 cv
253.133 16.543 252.746 16.305 252.438 15.988 cv
252.121 15.672 251.887 15.273 251.738 14.789 cv
251.582 14.309 251.508 13.742 251.512 13.086 cv
251.508 12.473 251.586 11.914 251.75 11.418 cv
251.906 10.922 252.141 10.504 252.453 10.156 cv
252.758 9.81201 253.133 9.547 253.57 9.36298 cv
254.008 9.18402 254.5 9.09399 255.055 9.09003 cv
255.633 9.09399 256.133 9.17999 256.547 9.34802 cv
256.961 9.52301 257.297 9.76202 257.563 10.062 cv
257.824 10.367 258.02 10.727 258.148 11.141 cv
258.27 11.559 258.332 12.008 258.336 12.496 cv
cp
256.434 12.246 mo
256.445 11.695 256.336 11.262 256.102 10.949 cv
255.867 10.637 255.5 10.48 255.008 10.477 cv
254.758 10.48 254.543 10.527 254.359 10.617 cv
254.172 10.715 254.02 10.84 253.898 10.996 cv
253.773 11.156 253.68 11.344 253.617 11.559 cv
253.551 11.773 253.512 12.004 253.504 12.246 cv
cp
f
266.941 12.906 mo
266.941 13.527 266.875 14.086 266.742 14.582 cv
266.609 15.078 266.414 15.5 266.16 15.848 cv
265.906 16.195 265.59 16.465 265.211 16.648 cv
264.828 16.836 264.395 16.926 263.91 16.93 cv
263.703 16.926 263.516 16.906 263.352 16.871 cv
263.18 16.828 263.016 16.77 262.859 16.691 cv
262.699 16.613 262.543 16.516 262.391 16.391 cv
262.23 16.273 262.07 16.133 261.906 15.969 cv
261.906 19.242 li
261.902 19.289 261.887 19.336 261.859 19.383 cv
261.824 19.422 261.77 19.457 261.699 19.488 cv
261.621 19.512 261.523 19.535 261.398 19.555 cv
261.273 19.566 261.113 19.574 260.926 19.578 cv
260.73 19.574 260.574 19.566 260.449 19.555 cv
260.324 19.535 260.223 19.512 260.148 19.488 cv
260.07 19.457 260.016 19.422 259.988 19.383 cv
259.953 19.336 259.938 19.289 259.941 19.242 cv
259.941 9.53497 li
259.938 9.48798 259.953 9.44098 259.98 9.39801 cv
260.004 9.36298 260.047 9.33197 260.117 9.30103 cv
260.18 9.27698 260.266 9.258 260.375 9.242 cv
260.477 9.23401 260.613 9.22699 260.777 9.22302 cv
260.934 9.22699 261.063 9.23401 261.168 9.242 cv
261.273 9.258 261.359 9.27698 261.426 9.30103 cv
261.488 9.33197 261.535 9.36298 261.563 9.39801 cv
261.586 9.44098 261.598 9.48798 261.602 9.53497 cv
261.602 10.352 li
261.801 10.145 262 9.96503 262.199 9.80499 cv
262.391 9.64801 262.59 9.51599 262.793 9.40601 cv
262.996 9.30499 263.203 9.22302 263.422 9.16803 cv
263.633 9.117 263.863 9.09399 264.113 9.09003 cv
264.617 9.09399 265.051 9.19098 265.414 9.39099 cv
265.77 9.59399 266.063 9.87097 266.289 10.215 cv
266.512 10.566 266.676 10.969 266.785 11.43 cv
266.887 11.891 266.941 12.383 266.941 12.906 cv
cp
264.898 13.047 mo
264.895 12.754 264.875 12.473 264.832 12.195 cv
264.785 11.926 264.707 11.684 264.605 11.469 cv
264.496 11.258 264.355 11.086 264.184 10.957 cv
264.008 10.832 263.793 10.77 263.535 10.766 cv
263.402 10.77 263.273 10.789 263.148 10.824 cv
263.02 10.867 262.891 10.93 262.758 11.016 cv
262.625 11.105 262.488 11.219 262.352 11.359 cv
262.207 11.5 262.059 11.676 261.906 11.879 cv
261.906 14.172 li
262.18 14.52 262.441 14.789 262.691 14.977 cv
262.938 15.168 263.199 15.262 263.473 15.262 cv
263.727 15.262 263.941 15.199 264.125 15.066 cv
264.301 14.941 264.449 14.77 264.563 14.559 cv
264.676 14.348 264.758 14.109 264.816 13.844 cv
264.867 13.578 264.895 13.312 264.898 13.047 cv
cp
f
274.438 16.508 mo
274.434 16.586 274.406 16.641 274.359 16.68 cv
274.305 16.723 274.223 16.75 274.113 16.77 cv
273.996 16.785 273.832 16.797 273.617 16.797 cv
273.379 16.797 273.207 16.785 273.105 16.77 cv
272.996 16.75 272.922 16.723 272.883 16.68 cv
272.836 16.641 272.816 16.586 272.816 16.508 cv
272.816 15.957 li
272.527 16.266 272.199 16.504 271.836 16.672 cv
271.469 16.844 271.063 16.926 270.617 16.93 cv
270.246 16.926 269.906 16.879 269.598 16.785 cv
269.289 16.691 269.023 16.551 268.797 16.355 cv
268.57 16.168 268.395 15.934 268.27 15.652 cv
268.145 15.375 268.082 15.047 268.086 14.668 cv
268.082 14.27 268.16 13.918 268.32 13.613 cv
268.477 13.316 268.715 13.07 269.031 12.875 cv
269.344 12.684 269.734 12.539 270.203 12.441 cv
270.672 12.352 271.215 12.305 271.832 12.301 cv
272.512 12.301 li
272.512 11.879 li
272.512 11.664 272.488 11.473 272.445 11.309 cv
272.398 11.148 272.324 11.012 272.227 10.898 cv
272.121 10.793 271.988 10.711 271.82 10.656 cv
271.648 10.605 271.438 10.582 271.195 10.578 cv
270.863 10.582 270.57 10.617 270.316 10.687 cv
270.055 10.762 269.828 10.844 269.633 10.93 cv
269.434 11.023 269.27 11.102 269.141 11.172 cv
269.004 11.246 268.895 11.285 268.816 11.281 cv
268.754 11.285 268.703 11.266 268.664 11.227 cv
268.617 11.191 268.582 11.141 268.555 11.07 cv
268.523 11.008 268.5 10.922 268.488 10.82 cv
268.469 10.723 268.461 10.613 268.465 10.492 cv
268.461 10.332 268.477 10.207 268.504 10.109 cv
268.527 10.02 268.574 9.93402 268.652 9.85498 cv
268.723 9.78101 268.852 9.69897 269.035 9.60901 cv
269.215 9.52002 269.426 9.43402 269.672 9.35498 cv
269.914 9.27698 270.184 9.21503 270.473 9.164 cv
270.762 9.117 271.059 9.09399 271.367 9.09003 cv
271.91 9.09399 272.375 9.14502 272.762 9.25 cv
273.148 9.35901 273.469 9.52301 273.719 9.742 cv
273.969 9.961 274.148 10.246 274.266 10.594 cv
274.375 10.945 274.434 11.359 274.438 11.832 cv
cp
272.512 13.531 mo
271.762 13.531 li
271.445 13.535 271.176 13.559 270.953 13.602 cv
270.727 13.652 270.543 13.723 270.406 13.812 cv
270.262 13.91 270.16 14.023 270.098 14.152 cv
270.031 14.289 269.996 14.437 270 14.605 cv
269.996 14.898 270.09 15.129 270.277 15.293 cv
270.461 15.461 270.719 15.543 271.047 15.543 cv
271.32 15.543 271.57 15.473 271.805 15.332 cv
272.031 15.191 272.27 14.988 272.512 14.715 cv
cp
f
280.867 10.18 mo
280.867 10.371 280.859 10.523 280.852 10.641 cv
280.836 10.762 280.82 10.855 280.805 10.922 cv
280.781 10.992 280.754 11.039 280.723 11.062 cv
280.684 11.09 280.641 11.102 280.594 11.102 cv
280.547 11.102 280.5 11.094 280.453 11.074 cv
280.398 11.059 280.34 11.039 280.277 11.016 cv
280.207 10.996 280.137 10.977 280.063 10.957 cv
279.98 10.941 279.895 10.934 279.805 10.93 cv
279.691 10.934 279.582 10.953 279.477 10.996 cv
279.367 11.043 279.254 11.113 279.141 11.203 cv
279.02 11.297 278.898 11.422 278.773 11.574 cv
278.645 11.734 278.508 11.926 278.363 12.152 cv
278.363 16.484 li
278.359 16.539 278.344 16.582 278.316 16.621 cv
278.281 16.66 278.227 16.695 278.156 16.719 cv
278.078 16.746 277.98 16.762 277.855 16.777 cv
277.73 16.789 277.57 16.797 277.383 16.797 cv
277.188 16.797 277.031 16.789 276.906 16.777 cv
276.781 16.762 276.68 16.746 276.605 16.719 cv
276.527 16.695 276.473 16.66 276.445 16.621 cv
276.41 16.582 276.395 16.539 276.398 16.484 cv
276.398 9.53497 li
276.395 9.48798 276.41 9.44098 276.438 9.39801 cv
276.461 9.36298 276.508 9.33197 276.578 9.30103 cv
276.645 9.27698 276.73 9.258 276.84 9.242 cv
276.945 9.23401 277.078 9.22699 277.242 9.22302 cv
277.406 9.22699 277.543 9.23401 277.652 9.242 cv
277.758 9.258 277.844 9.27698 277.906 9.30103 cv
277.965 9.33197 278.008 9.36298 278.035 9.39801 cv
278.059 9.44098 278.07 9.48798 278.074 9.53497 cv
278.074 10.398 li
278.254 10.141 278.426 9.92999 278.59 9.758 cv
278.746 9.59399 278.902 9.45697 279.051 9.35498 cv
279.195 9.258 279.34 9.19098 279.484 9.14801 cv
279.629 9.11298 279.773 9.09399 279.922 9.09003 cv
279.988 9.09399 280.063 9.09802 280.141 9.10199 cv
280.219 9.11298 280.297 9.125 280.383 9.14099 cv
280.461 9.15997 280.535 9.17999 280.602 9.203 cv
280.66 9.22699 280.707 9.25403 280.738 9.27698 cv
280.766 9.30902 280.785 9.336 280.801 9.36298 cv
280.813 9.39801 280.824 9.44098 280.836 9.492 cv
280.844 9.55103 280.852 9.633 280.859 9.73798 cv
280.863 9.84802 280.867 9.99597 280.867 10.18 cv
cp
f
287.605 16.508 mo
287.602 16.586 287.574 16.641 287.527 16.68 cv
287.473 16.723 287.391 16.75 287.281 16.77 cv
287.164 16.785 287 16.797 286.785 16.797 cv
286.547 16.797 286.375 16.785 286.273 16.77 cv
286.164 16.75 286.09 16.723 286.051 16.68 cv
286.004 16.641 285.984 16.586 285.984 16.508 cv
285.984 15.957 li
285.695 16.266 285.367 16.504 285.004 16.672 cv
284.637 16.844 284.23 16.926 283.785 16.93 cv
283.414 16.926 283.074 16.879 282.766 16.785 cv
282.457 16.691 282.191 16.551 281.965 16.355 cv
281.738 16.168 281.563 15.934 281.438 15.652 cv
281.313 15.375 281.25 15.047 281.254 14.668 cv
281.25 14.27 281.328 13.918 281.488 13.613 cv
281.645 13.316 281.883 13.07 282.199 12.875 cv
282.512 12.684 282.902 12.539 283.371 12.441 cv
283.84 12.352 284.383 12.305 285 12.301 cv
285.68 12.301 li
285.68 11.879 li
285.68 11.664 285.656 11.473 285.613 11.309 cv
285.566 11.148 285.492 11.012 285.395 10.898 cv
285.289 10.793 285.156 10.711 284.988 10.656 cv
284.816 10.605 284.605 10.582 284.363 10.578 cv
284.031 10.582 283.738 10.617 283.484 10.687 cv
283.223 10.762 282.996 10.844 282.801 10.93 cv
282.602 11.023 282.438 11.102 282.309 11.172 cv
282.172 11.246 282.063 11.285 281.984 11.281 cv
281.922 11.285 281.871 11.266 281.832 11.227 cv
281.785 11.191 281.75 11.141 281.723 11.07 cv
281.691 11.008 281.668 10.922 281.656 10.82 cv
281.637 10.723 281.629 10.613 281.633 10.492 cv
281.629 10.332 281.645 10.207 281.672 10.109 cv
281.695 10.02 281.742 9.93402 281.82 9.85498 cv
281.891 9.78101 282.02 9.69897 282.203 9.60901 cv
282.383 9.52002 282.594 9.43402 282.84 9.35498 cv
283.082 9.27698 283.352 9.21503 283.641 9.164 cv
283.93 9.117 284.227 9.09399 284.535 9.09003 cv
285.078 9.09399 285.543 9.14502 285.93 9.25 cv
286.316 9.35901 286.637 9.52301 286.887 9.742 cv
287.137 9.961 287.316 10.246 287.434 10.594 cv
287.543 10.945 287.602 11.359 287.605 11.832 cv
cp
285.68 13.531 mo
284.93 13.531 li
284.613 13.535 284.344 13.559 284.121 13.602 cv
283.895 13.652 283.711 13.723 283.574 13.812 cv
283.43 13.91 283.328 14.023 283.266 14.152 cv
283.199 14.289 283.164 14.437 283.168 14.605 cv
283.164 14.898 283.258 15.129 283.445 15.293 cv
283.629 15.461 283.887 15.543 284.215 15.543 cv
284.488 15.543 284.738 15.473 284.973 15.332 cv
285.199 15.191 285.438 14.988 285.68 14.715 cv
cp
f
293.602 15.801 mo
293.602 16.027 293.586 16.203 293.559 16.324 cv
293.527 16.449 293.488 16.535 293.445 16.582 cv
293.395 16.633 293.328 16.676 293.238 16.715 cv
293.145 16.754 293.035 16.785 292.918 16.816 cv
292.793 16.84 292.66 16.863 292.52 16.883 cv
292.375 16.895 292.234 16.902 292.09 16.906 cv
291.699 16.902 291.359 16.852 291.074 16.758 cv
290.789 16.656 290.555 16.508 290.367 16.301 cv
290.18 16.098 290.039 15.84 289.953 15.527 cv
289.859 15.219 289.816 14.848 289.82 14.418 cv
289.82 10.859 li
288.988 10.859 li
288.887 10.863 288.813 10.801 288.762 10.676 cv
288.707 10.555 288.68 10.352 288.684 10.062 cv
288.68 9.914 288.688 9.78497 288.703 9.68402 cv
288.715 9.58197 288.734 9.5 288.762 9.43701 cv
288.785 9.37903 288.816 9.336 288.859 9.30902 cv
288.895 9.28497 288.941 9.27301 288.996 9.27002 cv
289.82 9.27002 li
289.82 7.71899 li
289.816 7.672 289.832 7.625 289.863 7.578 cv
289.891 7.539 289.941 7.50403 290.02 7.47302 cv
290.094 7.44897 290.195 7.42603 290.324 7.40997 cv
290.449 7.39801 290.605 7.39502 290.797 7.39099 cv
290.984 7.39502 291.145 7.39801 291.273 7.40997 cv
291.398 7.42603 291.5 7.44897 291.574 7.47302 cv
291.645 7.50403 291.695 7.539 291.73 7.578 cv
291.758 7.625 291.773 7.672 291.777 7.71899 cv
291.777 9.27002 li
293.289 9.27002 li
293.34 9.27301 293.387 9.28497 293.426 9.30902 cv
293.465 9.336 293.496 9.37903 293.523 9.43701 cv
293.547 9.5 293.566 9.58197 293.582 9.68402 cv
293.594 9.78497 293.602 9.914 293.602 10.062 cv
293.602 10.352 293.574 10.555 293.523 10.676 cv
293.469 10.801 293.395 10.863 293.297 10.859 cv
291.777 10.859 li
291.777 14.125 li
291.773 14.504 291.832 14.789 291.957 14.977 cv
292.074 15.168 292.289 15.262 292.594 15.262 cv
292.695 15.262 292.789 15.254 292.875 15.234 cv
292.957 15.219 293.031 15.199 293.098 15.172 cv
293.16 15.152 293.215 15.129 293.262 15.109 cv
293.305 15.094 293.344 15.086 293.383 15.082 cv
293.41 15.086 293.441 15.094 293.473 15.109 cv
293.5 15.129 293.52 15.168 293.539 15.219 cv
293.551 15.277 293.566 15.352 293.582 15.441 cv
293.594 15.539 293.602 15.656 293.602 15.801 cv
cp
f
296.988 16.484 mo
296.984 16.539 296.969 16.582 296.941 16.621 cv
296.906 16.66 296.852 16.695 296.781 16.719 cv
296.703 16.746 296.605 16.762 296.48 16.777 cv
296.355 16.789 296.195 16.797 296.008 16.797 cv
295.813 16.797 295.656 16.789 295.531 16.777 cv
295.406 16.762 295.305 16.746 295.23 16.719 cv
295.152 16.695 295.098 16.66 295.07 16.621 cv
295.035 16.582 295.02 16.539 295.023 16.484 cv
295.023 9.55103 li
295.02 9.5 295.035 9.453 295.07 9.414 cv
295.098 9.375 295.152 9.34399 295.23 9.31201 cv
295.305 9.289 295.406 9.26599 295.531 9.24597 cv
295.656 9.23401 295.813 9.22699 296.008 9.22302 cv
296.195 9.22699 296.355 9.23401 296.48 9.24597 cv
296.605 9.26599 296.703 9.289 296.781 9.31201 cv
296.852 9.34399 296.906 9.375 296.941 9.414 cv
296.969 9.453 296.984 9.5 296.988 9.55103 cv
cp
297.137 7.17999 mo
297.137 7.578 297.055 7.85199 296.895 8 cv
296.73 8.15198 296.434 8.22699 296 8.22302 cv
295.555 8.22699 295.254 8.15198 295.105 8.008 cv
294.949 7.86298 294.875 7.60199 294.875 7.21899 cv
294.875 6.82397 294.953 6.55103 295.113 6.39801 cv
295.27 6.24597 295.57 6.16803 296.016 6.16803 cv
296.449 6.16803 296.746 6.242 296.902 6.39099 cv
297.059 6.539 297.137 6.80499 297.137 7.17999 cv
cp
f
305.98 12.937 mo
305.977 13.535 305.898 14.078 305.746 14.562 cv
305.586 15.055 305.352 15.473 305.035 15.824 cv
304.719 16.176 304.32 16.449 303.844 16.641 cv
303.363 16.832 302.805 16.926 302.168 16.93 cv
301.547 16.926 301.008 16.844 300.555 16.672 cv
300.094 16.504 299.715 16.254 299.418 15.926 cv
299.113 15.602 298.891 15.199 298.746 14.719 cv
298.602 14.242 298.531 13.695 298.531 13.078 cv
298.531 12.488 298.609 11.949 298.766 11.457 cv
298.922 10.969 299.16 10.547 299.48 10.195 cv
299.797 9.84802 300.191 9.57397 300.668 9.37903 cv
301.141 9.18701 301.699 9.09399 302.34 9.09003 cv
302.965 9.09399 303.504 9.17603 303.961 9.34399 cv
304.418 9.51599 304.797 9.76599 305.094 10.09 cv
305.391 10.418 305.613 10.82 305.762 11.297 cv
305.906 11.777 305.977 12.324 305.98 12.937 cv
cp
303.961 13.016 mo
303.957 12.68 303.93 12.363 303.879 12.07 cv
303.82 11.785 303.727 11.535 303.602 11.32 cv
303.469 11.109 303.297 10.941 303.086 10.82 cv
302.867 10.703 302.598 10.645 302.27 10.641 cv
301.98 10.645 301.727 10.699 301.508 10.801 cv
301.289 10.91 301.109 11.066 300.969 11.27 cv
300.828 11.477 300.723 11.723 300.652 12.008 cv
300.582 12.301 300.547 12.629 300.547 12.992 cv
300.547 13.34 300.574 13.656 300.633 13.941 cv
300.688 14.234 300.781 14.484 300.91 14.695 cv
301.035 14.91 301.207 15.074 301.43 15.187 cv
301.645 15.309 301.914 15.367 302.238 15.363 cv
302.531 15.367 302.789 15.312 303.012 15.203 cv
303.227 15.098 303.406 14.945 303.547 14.738 cv
303.688 14.539 303.789 14.293 303.859 14.004 cv
303.922 13.719 303.957 13.391 303.961 13.016 cv
cp
f
314.223 16.484 mo
314.219 16.539 314.203 16.582 314.176 16.621 cv
314.141 16.66 314.09 16.695 314.02 16.719 cv
313.945 16.746 313.844 16.762 313.719 16.777 cv
313.59 16.789 313.434 16.797 313.25 16.797 cv
313.055 16.797 312.895 16.789 312.77 16.777 cv
312.641 16.762 312.539 16.746 312.469 16.719 cv
312.391 16.695 312.34 16.66 312.313 16.621 cv
312.277 16.582 312.262 16.539 312.266 16.484 cv
312.266 12.52 li
312.262 12.184 312.238 11.918 312.191 11.723 cv
312.141 11.531 312.066 11.367 311.977 11.23 cv
311.883 11.094 311.766 10.988 311.617 10.91 cv
311.469 10.836 311.293 10.797 311.098 10.797 cv
310.844 10.797 310.594 10.891 310.34 11.07 cv
310.086 11.254 309.82 11.516 309.547 11.863 cv
309.547 16.484 li
309.543 16.539 309.527 16.582 309.5 16.621 cv
309.465 16.66 309.41 16.695 309.34 16.719 cv
309.262 16.746 309.164 16.762 309.039 16.777 cv
308.914 16.789 308.754 16.797 308.566 16.797 cv
308.371 16.797 308.215 16.789 308.09 16.777 cv
307.965 16.762 307.863 16.746 307.789 16.719 cv
307.711 16.695 307.656 16.66 307.629 16.621 cv
307.594 16.582 307.578 16.539 307.582 16.484 cv
307.582 9.53497 li
307.578 9.48798 307.594 9.44098 307.621 9.39801 cv
307.645 9.36298 307.691 9.33197 307.762 9.30103 cv
307.828 9.27698 307.914 9.258 308.023 9.242 cv
308.129 9.23401 308.262 9.22699 308.426 9.22302 cv
308.59 9.22699 308.727 9.23401 308.836 9.242 cv
308.941 9.258 309.027 9.27698 309.09 9.30103 cv
309.148 9.33197 309.191 9.36298 309.219 9.39801 cv
309.242 9.44098 309.254 9.48798 309.258 9.53497 cv
309.258 10.336 li
309.641 9.92603 310.031 9.61298 310.43 9.40198 cv
310.824 9.19501 311.242 9.09399 311.676 9.09003 cv
312.145 9.09399 312.543 9.172 312.871 9.32397 cv
313.195 9.48401 313.457 9.69501 313.656 9.961 cv
313.855 10.23 314 10.543 314.09 10.898 cv
314.176 11.258 314.219 11.687 314.223 12.191 cv
cp
f
322.934 7.508 mo
322.93 7.664 322.922 7.79303 322.914 7.89502 cv
322.898 8.00403 322.879 8.09003 322.855 8.15198 cv
322.824 8.21899 322.793 8.26599 322.758 8.29303 cv
322.715 8.328 322.672 8.34399 322.629 8.34003 cv
320.105 8.34003 li
320.105 16.469 li
320.105 16.523 320.086 16.57 320.055 16.609 cv
320.016 16.652 319.961 16.687 319.887 16.711 cv
319.805 16.738 319.699 16.758 319.57 16.773 cv
319.434 16.789 319.27 16.797 319.074 16.797 cv
318.879 16.797 318.715 16.789 318.582 16.773 cv
318.449 16.758 318.344 16.738 318.266 16.711 cv
318.188 16.687 318.129 16.652 318.098 16.609 cv
318.059 16.57 318.043 16.523 318.047 16.469 cv
318.047 8.34003 li
315.523 8.34003 li
315.469 8.34399 315.422 8.328 315.391 8.29303 cv
315.352 8.26599 315.32 8.21899 315.297 8.15198 cv
315.266 8.09003 315.246 8.00403 315.238 7.89502 cv
315.223 7.79303 315.219 7.664 315.219 7.508 cv
315.219 7.35498 315.223 7.22302 315.238 7.10901 cv
315.246 7.00403 315.266 6.914 315.297 6.84802 cv
315.32 6.78497 315.352 6.73798 315.391 6.70697 cv
315.422 6.67999 315.469 6.66803 315.523 6.664 cv
322.629 6.664 li
322.672 6.66803 322.715 6.67999 322.758 6.70697 cv
322.793 6.73798 322.824 6.78497 322.855 6.84802 cv
322.879 6.914 322.898 7.00403 322.914 7.10901 cv
322.922 7.22302 322.93 7.35498 322.934 7.508 cv
cp
f
325.973 16.484 mo
325.969 16.539 325.953 16.582 325.926 16.621 cv
325.891 16.66 325.836 16.695 325.766 16.719 cv
325.688 16.746 325.59 16.762 325.465 16.777 cv
325.34 16.789 325.18 16.797 324.992 16.797 cv
324.797 16.797 324.641 16.789 324.516 16.777 cv
324.391 16.762 324.289 16.746 324.215 16.719 cv
324.137 16.695 324.082 16.66 324.055 16.621 cv
324.02 16.582 324.004 16.539 324.008 16.484 cv
324.008 9.55103 li
324.004 9.5 324.02 9.453 324.055 9.414 cv
324.082 9.375 324.137 9.34399 324.215 9.31201 cv
324.289 9.289 324.391 9.26599 324.516 9.24597 cv
324.641 9.23401 324.797 9.22699 324.992 9.22302 cv
325.18 9.22699 325.34 9.23401 325.465 9.24597 cv
325.59 9.26599 325.688 9.289 325.766 9.31201 cv
325.836 9.34399 325.891 9.375 325.926 9.414 cv
325.953 9.453 325.969 9.5 325.973 9.55103 cv
cp
326.121 7.17999 mo
326.121 7.578 326.039 7.85199 325.879 8 cv
325.715 8.15198 325.418 8.22699 324.984 8.22302 cv
324.539 8.22699 324.238 8.15198 324.09 8.008 cv
323.934 7.86298 323.859 7.60199 323.859 7.21899 cv
323.859 6.82397 323.938 6.55103 324.098 6.39801 cv
324.254 6.24597 324.555 6.16803 325 6.16803 cv
325.434 6.16803 325.73 6.242 325.887 6.39099 cv
326.043 6.539 326.121 6.80499 326.121 7.17999 cv
cp
f
339.023 16.484 mo
339.02 16.539 339.004 16.582 338.977 16.621 cv
338.941 16.66 338.891 16.695 338.82 16.719 cv
338.746 16.746 338.645 16.762 338.523 16.777 cv
338.398 16.789 338.242 16.797 338.051 16.797 cv
337.852 16.797 337.691 16.789 337.566 16.777 cv
337.441 16.762 337.34 16.746 337.266 16.719 cv
337.188 16.695 337.137 16.66 337.109 16.621 cv
337.082 16.582 337.066 16.539 337.07 16.484 cv
337.07 12.363 li
337.066 12.133 337.047 11.918 337.004 11.723 cv
336.957 11.531 336.887 11.367 336.801 11.23 cv
336.707 11.094 336.594 10.988 336.457 10.91 cv
336.316 10.836 336.152 10.797 335.961 10.797 cv
335.727 10.797 335.488 10.891 335.25 11.07 cv
335.012 11.254 334.754 11.516 334.473 11.863 cv
334.473 16.484 li
334.473 16.539 334.457 16.582 334.426 16.621 cv
334.395 16.66 334.34 16.695 334.266 16.719 cv
334.188 16.746 334.086 16.762 333.965 16.777 cv
333.84 16.789 333.688 16.797 333.5 16.797 cv
333.305 16.797 333.145 16.789 333.023 16.777 cv
332.895 16.762 332.793 16.746 332.723 16.719 cv
332.645 16.695 332.594 16.66 332.563 16.621 cv
332.531 16.582 332.516 16.539 332.516 16.484 cv
332.516 12.363 li
332.516 12.133 332.492 11.918 332.449 11.723 cv
332.406 11.531 332.34 11.367 332.254 11.23 cv
332.16 11.094 332.047 10.988 331.91 10.91 cv
331.766 10.836 331.602 10.797 331.418 10.797 cv
331.176 10.797 330.938 10.891 330.699 11.07 cv
330.461 11.254 330.203 11.516 329.93 11.863 cv
329.93 16.484 li
329.926 16.539 329.91 16.582 329.883 16.621 cv
329.848 16.66 329.793 16.695 329.723 16.719 cv
329.645 16.746 329.547 16.762 329.422 16.777 cv
329.297 16.789 329.137 16.797 328.949 16.797 cv
328.754 16.797 328.598 16.789 328.473 16.777 cv
328.348 16.762 328.246 16.746 328.172 16.719 cv
328.094 16.695 328.039 16.66 328.012 16.621 cv
327.977 16.582 327.961 16.539 327.965 16.484 cv
327.965 9.53497 li
327.961 9.48798 327.977 9.44098 328.004 9.39801 cv
328.027 9.36298 328.074 9.33197 328.145 9.30103 cv
328.211 9.27698 328.297 9.258 328.406 9.242 cv
328.512 9.23401 328.645 9.22699 328.809 9.22302 cv
328.973 9.22699 329.109 9.23401 329.219 9.242 cv
329.324 9.258 329.41 9.27698 329.473 9.30103 cv
329.531 9.33197 329.574 9.36298 329.602 9.39801 cv
329.625 9.44098 329.637 9.48798 329.641 9.53497 cv
329.641 10.336 li
330.023 9.92603 330.406 9.61298 330.789 9.40198 cv
331.168 9.19501 331.57 9.09399 331.988 9.09003 cv
332.273 9.09399 332.527 9.12097 332.758 9.17999 cv
332.984 9.242 333.191 9.328 333.371 9.43701 cv
333.551 9.55103 333.703 9.68701 333.832 9.84003 cv
333.961 9.99597 334.07 10.168 334.16 10.359 cv
334.367 10.137 334.57 9.94501 334.773 9.78497 cv
334.969 9.625 335.168 9.492 335.363 9.39099 cv
335.559 9.289 335.754 9.21503 335.949 9.164 cv
336.145 9.117 336.344 9.09399 336.547 9.09003 cv
337.008 9.09399 337.395 9.172 337.715 9.32397 cv
338.027 9.48401 338.285 9.69501 338.48 9.961 cv
338.676 10.23 338.813 10.543 338.898 10.898 cv
338.977 11.258 339.02 11.637 339.023 12.035 cv
cp
f
347.363 12.809 mo
347.359 13.047 347.309 13.223 347.203 13.336 cv
347.094 13.453 346.945 13.512 346.766 13.508 cv
342.531 13.508 li
342.527 13.809 342.563 14.078 342.637 14.316 cv
342.703 14.559 342.816 14.762 342.973 14.93 cv
343.125 15.102 343.32 15.23 343.563 15.316 cv
343.801 15.406 344.09 15.449 344.434 15.449 cv
344.773 15.449 345.074 15.426 345.336 15.375 cv
345.594 15.328 345.82 15.273 346.012 15.211 cv
346.199 15.152 346.355 15.098 346.484 15.047 cv
346.605 15 346.707 14.977 346.789 14.973 cv
346.832 14.977 346.871 14.984 346.906 15 cv
346.934 15.02 346.961 15.051 346.98 15.098 cv
347 15.145 347.012 15.211 347.023 15.297 cv
347.027 15.383 347.031 15.492 347.035 15.621 cv
347.031 15.738 347.031 15.836 347.027 15.914 cv
347.02 15.996 347.012 16.062 347.004 16.117 cv
346.992 16.176 346.977 16.227 346.957 16.262 cv
346.938 16.305 346.91 16.34 346.879 16.375 cv
346.844 16.414 346.75 16.465 346.602 16.523 cv
346.445 16.59 346.254 16.652 346.023 16.707 cv
345.785 16.77 345.516 16.816 345.219 16.863 cv
344.914 16.902 344.594 16.926 344.254 16.93 cv
343.633 16.926 343.09 16.852 342.629 16.695 cv
342.16 16.543 341.773 16.305 341.465 15.988 cv
341.148 15.672 340.914 15.273 340.766 14.789 cv
340.609 14.309 340.535 13.742 340.539 13.086 cv
340.535 12.473 340.613 11.914 340.777 11.418 cv
340.934 10.922 341.168 10.504 341.48 10.156 cv
341.785 9.81201 342.16 9.547 342.598 9.36298 cv
343.035 9.18402 343.527 9.09399 344.082 9.09003 cv
344.66 9.09399 345.16 9.17999 345.574 9.34802 cv
345.988 9.52301 346.324 9.76202 346.59 10.062 cv
346.852 10.367 347.047 10.727 347.176 11.141 cv
347.297 11.559 347.359 12.008 347.363 12.496 cv
cp
345.461 12.246 mo
345.473 11.695 345.363 11.262 345.129 10.949 cv
344.895 10.637 344.527 10.48 344.035 10.477 cv
343.785 10.48 343.57 10.527 343.387 10.617 cv
343.199 10.715 343.047 10.84 342.926 10.996 cv
342.801 11.156 342.707 11.344 342.645 11.559 cv
342.578 11.773 342.539 12.004 342.531 12.246 cv
cp
f
353.863 14.52 mo
353.859 14.918 353.785 15.266 353.641 15.566 cv
353.492 15.867 353.285 16.121 353.016 16.32 cv
352.742 16.527 352.422 16.676 352.055 16.777 cv
351.688 16.875 351.285 16.926 350.855 16.93 cv
350.59 16.926 350.344 16.906 350.109 16.871 cv
349.875 16.828 349.664 16.781 349.477 16.723 cv
349.289 16.664 349.133 16.602 349.008 16.539 cv
348.883 16.477 348.789 16.418 348.734 16.363 cv
348.676 16.309 348.633 16.227 348.605 16.109 cv
348.57 15.996 348.555 15.82 348.559 15.59 cv
348.555 15.441 348.563 15.32 348.574 15.227 cv
348.582 15.137 348.598 15.066 348.621 15.008 cv
348.641 14.957 348.664 14.918 348.699 14.898 cv
348.727 14.883 348.766 14.875 348.813 14.871 cv
348.867 14.875 348.953 14.906 349.066 14.969 cv
349.176 15.035 349.313 15.109 349.484 15.184 cv
349.648 15.266 349.844 15.336 350.063 15.402 cv
350.281 15.473 350.531 15.508 350.816 15.504 cv
350.992 15.508 351.148 15.488 351.289 15.449 cv
351.422 15.414 351.543 15.363 351.648 15.293 cv
351.746 15.227 351.82 15.141 351.875 15.035 cv
351.922 14.934 351.949 14.812 351.953 14.676 cv
351.949 14.52 351.902 14.387 351.809 14.277 cv
351.715 14.168 351.586 14.07 351.43 13.984 cv
351.266 13.902 351.086 13.824 350.891 13.75 cv
350.688 13.68 350.484 13.602 350.273 13.508 cv
350.063 13.422 349.855 13.32 349.66 13.203 cv
349.457 13.094 349.277 12.953 349.121 12.785 cv
348.957 12.621 348.832 12.422 348.738 12.184 cv
348.645 11.953 348.598 11.672 348.598 11.34 cv
348.598 11.012 348.66 10.707 348.789 10.426 cv
348.918 10.152 349.105 9.914 349.352 9.71503 cv
349.594 9.52002 349.891 9.367 350.242 9.25403 cv
350.59 9.14801 350.984 9.09399 351.426 9.09003 cv
351.641 9.09399 351.852 9.10901 352.059 9.13702 cv
352.262 9.172 352.449 9.211 352.617 9.25403 cv
352.781 9.30499 352.922 9.35498 353.039 9.40601 cv
353.152 9.46503 353.234 9.51202 353.285 9.547 cv
353.332 9.59003 353.367 9.62903 353.391 9.664 cv
353.41 9.70697 353.422 9.75403 353.434 9.80499 cv
353.441 9.85901 353.453 9.92603 353.461 10.004 cv
353.469 10.09 353.473 10.187 353.473 10.305 cv
353.473 10.445 353.469 10.562 353.461 10.648 cv
353.453 10.742 353.438 10.812 353.422 10.859 cv
353.402 10.914 353.379 10.949 353.352 10.965 cv
353.316 10.988 353.281 10.996 353.242 10.992 cv
353.191 10.996 353.117 10.969 353.023 10.91 cv
352.922 10.859 352.801 10.801 352.652 10.734 cv
352.504 10.676 352.332 10.617 352.137 10.559 cv
351.941 10.508 351.719 10.48 351.473 10.477 cv
351.293 10.48 351.141 10.5 351.012 10.531 cv
350.879 10.57 350.77 10.621 350.691 10.687 cv
350.605 10.758 350.543 10.836 350.504 10.926 cv
350.457 11.02 350.438 11.117 350.441 11.219 cv
350.438 11.379 350.488 11.516 350.59 11.621 cv
350.688 11.734 350.816 11.828 350.98 11.91 cv
351.141 11.996 351.324 12.074 351.531 12.145 cv
351.734 12.219 351.941 12.301 352.152 12.383 cv
352.359 12.473 352.566 12.57 352.777 12.684 cv
352.98 12.797 353.164 12.937 353.324 13.102 cv
353.484 13.27 353.613 13.469 353.715 13.699 cv
353.809 13.934 353.859 14.207 353.863 14.52 cv
cp
f
366.18 12.937 mo
366.176 13.535 366.098 14.078 365.945 14.562 cv
365.785 15.055 365.551 15.473 365.234 15.824 cv
364.918 16.176 364.52 16.449 364.043 16.641 cv
363.563 16.832 363.004 16.926 362.367 16.93 cv
361.746 16.926 361.207 16.844 360.754 16.672 cv
360.293 16.504 359.914 16.254 359.617 15.926 cv
359.313 15.602 359.09 15.199 358.945 14.719 cv
358.801 14.242 358.73 13.695 358.73 13.078 cv
358.73 12.488 358.809 11.949 358.965 11.457 cv
359.121 10.969 359.359 10.547 359.68 10.195 cv
359.996 9.84802 360.391 9.57397 360.867 9.37903 cv
361.34 9.18701 361.898 9.09399 362.539 9.09003 cv
363.164 9.09399 363.703 9.17603 364.16 9.34399 cv
364.617 9.51599 364.996 9.76599 365.293 10.09 cv
365.59 10.418 365.813 10.82 365.961 11.297 cv
366.105 11.777 366.176 12.324 366.18 12.937 cv
cp
364.16 13.016 mo
364.156 12.68 364.129 12.363 364.078 12.07 cv
364.02 11.785 363.926 11.535 363.801 11.32 cv
363.668 11.109 363.496 10.941 363.285 10.82 cv
363.066 10.703 362.797 10.645 362.469 10.641 cv
362.18 10.645 361.926 10.699 361.707 10.801 cv
361.488 10.91 361.309 11.066 361.168 11.27 cv
361.027 11.477 360.922 11.723 360.852 12.008 cv
360.781 12.301 360.746 12.629 360.746 12.992 cv
360.746 13.34 360.773 13.656 360.832 13.941 cv
360.887 14.234 360.98 14.484 361.109 14.695 cv
361.234 14.91 361.406 15.074 361.629 15.187 cv
361.844 15.309 362.113 15.367 362.438 15.363 cv
362.73 15.367 362.988 15.312 363.211 15.203 cv
363.426 15.098 363.605 14.945 363.746 14.738 cv
363.887 14.539 363.988 14.293 364.059 14.004 cv
364.121 13.719 364.156 13.391 364.16 13.016 cv
cp
f
371.965 6.883 mo
371.961 7.03497 371.957 7.15601 371.949 7.24597 cv
371.938 7.34003 371.922 7.40997 371.902 7.45697 cv
371.879 7.508 371.855 7.54303 371.832 7.55902 cv
371.805 7.578 371.777 7.586 371.746 7.586 cv
371.707 7.586 371.664 7.578 371.625 7.55902 cv
371.578 7.54303 371.523 7.52301 371.461 7.5 cv
371.391 7.47998 371.316 7.461 371.23 7.44098 cv
371.141 7.42603 371.035 7.41803 370.918 7.414 cv
370.773 7.41803 370.652 7.43701 370.555 7.47998 cv
370.453 7.52698 370.371 7.59802 370.305 7.69098 cv
370.234 7.789 370.184 7.914 370.156 8.06598 cv
370.121 8.21899 370.105 8.40601 370.109 8.62903 cv
370.109 9.27002 li
371.379 9.27002 li
371.422 9.27301 371.465 9.28497 371.508 9.30902 cv
371.543 9.336 371.578 9.37903 371.605 9.43701 cv
371.629 9.5 371.648 9.58197 371.664 9.68402 cv
371.676 9.78497 371.68 9.914 371.684 10.062 cv
371.68 10.352 371.656 10.555 371.605 10.676 cv
371.551 10.801 371.473 10.863 371.379 10.859 cv
370.109 10.859 li
370.109 16.484 li
370.105 16.539 370.09 16.582 370.063 16.621 cv
370.027 16.66 369.977 16.695 369.906 16.719 cv
369.832 16.746 369.73 16.762 369.602 16.777 cv
369.469 16.789 369.309 16.797 369.125 16.797 cv
368.938 16.797 368.781 16.789 368.656 16.777 cv
368.527 16.762 368.426 16.746 368.352 16.719 cv
368.273 16.695 368.223 16.66 368.195 16.621 cv
368.164 16.582 368.148 16.539 368.152 16.484 cv
368.152 10.859 li
367.281 10.859 li
367.18 10.863 367.105 10.801 367.059 10.676 cv
367.008 10.555 366.98 10.352 366.984 10.062 cv
366.98 9.914 366.988 9.78497 367.004 9.68402 cv
367.016 9.58197 367.035 9.5 367.059 9.43701 cv
367.082 9.37903 367.113 9.336 367.152 9.30902 cv
367.191 9.28497 367.234 9.27301 367.289 9.27002 cv
368.152 9.27002 li
368.152 8.68402 li
368.148 8.21503 368.195 7.80103 368.293 7.44098 cv
368.383 7.086 368.531 6.789 368.734 6.55499 cv
368.934 6.32001 369.188 6.14502 369.496 6.02002 cv
369.805 5.90198 370.168 5.84003 370.594 5.84003 cv
370.789 5.84003 370.98 5.85901 371.168 5.89099 cv
371.348 5.92999 371.492 5.96503 371.598 6 cv
371.699 6.04303 371.77 6.078 371.809 6.10901 cv
371.844 6.14502 371.875 6.19501 371.898 6.258 cv
371.922 6.32397 371.938 6.40601 371.949 6.508 cv
371.957 6.60901 371.961 6.73401 371.965 6.883 cv
cp
f
382.512 13.727 mo
382.508 14.258 382.41 14.723 382.215 15.121 cv
382.016 15.523 381.75 15.859 381.414 16.125 cv
381.074 16.395 380.676 16.594 380.227 16.727 cv
379.773 16.859 379.293 16.926 378.781 16.93 cv
378.43 16.926 378.105 16.898 377.809 16.844 cv
377.508 16.785 377.246 16.719 377.02 16.637 cv
376.789 16.559 376.598 16.473 376.445 16.383 cv
376.293 16.297 376.184 16.219 376.117 16.148 cv
376.047 16.082 375.996 15.984 375.973 15.859 cv
375.941 15.734 375.93 15.551 375.93 15.309 cv
375.93 15.148 375.934 15.016 375.945 14.902 cv
375.953 14.797 375.969 14.707 375.996 14.637 cv
376.016 14.57 376.047 14.523 376.09 14.492 cv
376.125 14.469 376.172 14.453 376.223 14.449 cv
376.293 14.453 376.395 14.496 376.531 14.578 cv
376.66 14.668 376.832 14.762 377.043 14.863 cv
377.25 14.969 377.496 15.066 377.785 15.148 cv
378.07 15.238 378.406 15.281 378.789 15.277 cv
379.039 15.281 379.262 15.25 379.457 15.187 cv
379.652 15.129 379.82 15.043 379.961 14.934 cv
380.098 14.824 380.203 14.691 380.277 14.531 cv
380.348 14.371 380.383 14.191 380.387 13.992 cv
380.383 13.766 380.32 13.57 380.199 13.402 cv
380.07 13.242 379.906 13.098 379.711 12.969 cv
379.508 12.844 379.281 12.723 379.027 12.609 cv
378.773 12.5 378.512 12.383 378.242 12.254 cv
377.969 12.133 377.707 11.988 377.453 11.828 cv
377.199 11.672 376.973 11.484 376.773 11.262 cv
376.57 11.043 376.406 10.781 376.285 10.477 cv
376.16 10.176 376.098 9.81598 376.102 9.39502 cv
376.098 8.914 376.188 8.48798 376.367 8.12097 cv
376.543 7.758 376.785 7.453 377.094 7.20697 cv
377.395 6.96899 377.754 6.789 378.168 6.66803 cv
378.582 6.55103 379.02 6.492 379.48 6.48798 cv
379.719 6.492 379.957 6.508 380.199 6.54303 cv
380.438 6.58197 380.66 6.633 380.867 6.69098 cv
381.074 6.75403 381.258 6.82397 381.422 6.89801 cv
381.578 6.97998 381.688 7.04303 381.742 7.09399 cv
381.793 7.14801 381.828 7.19501 381.848 7.22699 cv
381.863 7.26599 381.879 7.31201 381.895 7.37097 cv
381.906 7.43402 381.914 7.508 381.922 7.59802 cv
381.926 7.69098 381.93 7.80499 381.93 7.93701 cv
381.93 8.09003 381.926 8.21899 381.918 8.32001 cv
381.91 8.42603 381.895 8.51202 381.879 8.57397 cv
381.855 8.64502 381.832 8.69098 381.801 8.72302 cv
381.766 8.75403 381.719 8.77002 381.664 8.77002 cv
381.605 8.77002 381.516 8.73401 381.391 8.65997 cv
381.266 8.59003 381.109 8.51202 380.93 8.422 cv
380.746 8.34003 380.539 8.26202 380.301 8.19098 cv
380.059 8.125 379.793 8.09003 379.512 8.086 cv
379.285 8.09003 379.094 8.117 378.93 8.16803 cv
378.762 8.22302 378.621 8.297 378.512 8.39099 cv
378.398 8.48798 378.316 8.60498 378.262 8.73798 cv
378.207 8.87903 378.18 9.02002 378.18 9.16803 cv
378.18 9.39502 378.238 9.59003 378.363 9.75 cv
378.48 9.914 378.645 10.059 378.855 10.184 cv
379.059 10.312 379.293 10.434 379.551 10.543 cv
379.809 10.66 380.074 10.777 380.348 10.898 cv
380.617 11.027 380.879 11.168 381.141 11.324 cv
381.398 11.48 381.633 11.672 381.836 11.891 cv
382.039 12.117 382.199 12.375 382.324 12.672 cv
382.445 12.969 382.508 13.32 382.512 13.727 cv
cp
f
390.563 16.484 mo
390.559 16.539 390.547 16.582 390.523 16.621 cv
390.496 16.66 390.449 16.695 390.387 16.719 cv
390.32 16.746 390.234 16.762 390.129 16.777 cv
390.023 16.789 389.891 16.797 389.73 16.797 cv
389.555 16.797 389.414 16.789 389.313 16.777 cv
389.203 16.762 389.121 16.746 389.059 16.719 cv
388.996 16.695 388.949 16.66 388.926 16.621 cv
388.895 16.582 388.883 16.539 388.887 16.484 cv
388.887 15.684 li
388.5 16.098 388.109 16.41 387.715 16.617 cv
387.313 16.824 386.902 16.926 386.48 16.93 cv
386 16.926 385.598 16.852 385.273 16.695 cv
384.949 16.543 384.688 16.328 384.488 16.059 cv
384.285 15.789 384.141 15.477 384.059 15.117 cv
383.969 14.762 383.926 14.32 383.93 13.789 cv
383.93 9.53497 li
383.926 9.48798 383.941 9.44098 383.973 9.39801 cv
384 9.36298 384.051 9.33197 384.129 9.30103 cv
384.203 9.27698 384.305 9.258 384.434 9.242 cv
384.559 9.23401 384.715 9.22699 384.906 9.22302 cv
385.094 9.22699 385.254 9.23401 385.379 9.242 cv
385.504 9.258 385.602 9.27698 385.68 9.30103 cv
385.75 9.33197 385.805 9.36298 385.84 9.39801 cv
385.867 9.44098 385.883 9.48798 385.887 9.53497 cv
385.887 13.461 li
385.883 13.828 385.906 14.105 385.957 14.297 cv
386 14.488 386.07 14.652 386.172 14.789 cv
386.266 14.93 386.391 15.035 386.539 15.109 cv
386.688 15.187 386.859 15.227 387.055 15.223 cv
387.305 15.227 387.555 15.137 387.809 14.949 cv
388.059 14.77 388.328 14.504 388.613 14.156 cv
388.613 9.53497 li
388.613 9.48798 388.625 9.44098 388.656 9.39801 cv
388.68 9.36298 388.734 9.33197 388.813 9.30103 cv
388.887 9.27698 388.984 9.258 389.113 9.242 cv
389.234 9.23401 389.395 9.22699 389.59 9.22302 cv
389.781 9.22699 389.938 9.23401 390.063 9.242 cv
390.184 9.258 390.285 9.27698 390.359 9.30103 cv
390.43 9.33197 390.48 9.36298 390.516 9.39801 cv
390.543 9.44098 390.559 9.48798 390.563 9.53497 cv
cp
f
399.492 12.914 mo
399.492 13.535 399.422 14.094 399.289 14.586 cv
399.148 15.082 398.953 15.5 398.703 15.848 cv
398.445 16.195 398.133 16.465 397.766 16.648 cv
397.391 16.836 396.969 16.926 396.5 16.93 cv
396.262 16.926 396.043 16.902 395.844 16.863 cv
395.637 16.816 395.445 16.75 395.262 16.648 cv
395.078 16.555 394.895 16.43 394.719 16.273 cv
394.535 16.125 394.352 15.941 394.168 15.73 cv
394.168 16.484 li
394.164 16.547 394.152 16.594 394.125 16.629 cv
394.094 16.672 394.047 16.703 393.984 16.727 cv
393.918 16.75 393.828 16.766 393.723 16.781 cv
393.613 16.789 393.484 16.797 393.328 16.797 cv
393.164 16.797 393.027 16.789 392.926 16.781 cv
392.816 16.766 392.73 16.75 392.668 16.727 cv
392.598 16.703 392.555 16.672 392.531 16.629 cv
392.504 16.594 392.488 16.547 392.492 16.484 cv
392.492 6.23798 li
392.488 6.18701 392.504 6.14099 392.539 6.09802 cv
392.566 6.05902 392.621 6.02301 392.699 5.992 cv
392.773 5.96503 392.875 5.94501 393 5.92603 cv
393.125 5.914 393.281 5.90601 393.477 5.90198 cv
393.664 5.90601 393.824 5.914 393.949 5.92603 cv
394.074 5.94501 394.172 5.96503 394.25 5.992 cv
394.32 6.02301 394.375 6.05902 394.41 6.09802 cv
394.438 6.14099 394.453 6.18701 394.457 6.23798 cv
394.457 10.078 li
394.633 9.90198 394.809 9.75403 394.988 9.62903 cv
395.16 9.508 395.336 9.40198 395.516 9.32001 cv
395.688 9.242 395.871 9.18402 396.063 9.14502 cv
396.246 9.10901 396.445 9.09399 396.656 9.09003 cv
397.168 9.09399 397.602 9.19501 397.965 9.39801 cv
398.32 9.60498 398.613 9.883 398.84 10.23 cv
399.063 10.578 399.227 10.984 399.336 11.449 cv
399.438 11.914 399.492 12.402 399.492 12.914 cv
cp
397.457 13.055 mo
397.453 12.762 397.43 12.477 397.391 12.199 cv
397.344 11.926 397.27 11.684 397.16 11.469 cv
397.051 11.258 396.906 11.086 396.734 10.957 cv
396.559 10.832 396.34 10.77 396.078 10.766 cv
395.945 10.77 395.82 10.785 395.695 10.82 cv
395.57 10.859 395.441 10.922 395.309 11.008 cv
395.176 11.098 395.039 11.215 394.902 11.352 cv
394.758 11.492 394.609 11.664 394.457 11.871 cv
394.457 14.18 li
394.73 14.535 394.992 14.805 395.246 14.984 cv
395.496 15.172 395.762 15.262 396.039 15.262 cv
396.293 15.262 396.508 15.199 396.688 15.066 cv
396.859 14.941 397.008 14.773 397.125 14.562 cv
397.242 14.359 397.324 14.121 397.379 13.852 cv
397.426 13.59 397.453 13.324 397.457 13.055 cv
cp
f
404.574 12.832 mo
404.57 13.133 404.543 13.344 404.488 13.461 cv
404.43 13.586 404.34 13.645 404.215 13.641 cv
400.973 13.641 li
400.844 13.645 400.75 13.582 400.695 13.457 cv
400.633 13.336 400.605 13.129 400.609 12.832 cv
400.605 12.543 400.633 12.336 400.695 12.215 cv
400.75 12.098 400.844 12.039 400.973 12.035 cv
404.215 12.035 li
404.277 12.039 404.328 12.051 404.375 12.074 cv
404.414 12.102 404.453 12.148 404.488 12.207 cv
404.516 12.273 404.539 12.355 404.555 12.457 cv
404.566 12.562 404.57 12.687 404.574 12.832 cv
cp
f
408.227 16.469 mo
408.223 16.523 408.207 16.57 408.176 16.609 cv
408.141 16.652 408.082 16.687 408.008 16.711 cv
407.926 16.738 407.824 16.758 407.695 16.773 cv
407.563 16.789 407.395 16.797 407.199 16.797 cv
406.996 16.797 406.832 16.789 406.703 16.773 cv
406.566 16.758 406.461 16.738 406.387 16.711 cv
406.305 16.687 406.25 16.652 406.219 16.609 cv
406.184 16.57 406.164 16.523 406.168 16.469 cv
406.168 6.94501 li
406.164 6.89801 406.184 6.85199 406.219 6.80499 cv
406.25 6.76599 406.305 6.72998 406.391 6.703 cv
406.469 6.67999 406.574 6.65997 406.707 6.64099 cv
406.832 6.62903 406.996 6.62097 407.199 6.617 cv
407.395 6.62097 407.563 6.62903 407.695 6.64099 cv
407.824 6.65997 407.926 6.67999 408.008 6.703 cv
408.082 6.72998 408.141 6.76599 408.176 6.80499 cv
408.207 6.85199 408.223 6.89801 408.227 6.94501 cv
cp
f
421.305 16.484 mo
421.301 16.539 421.285 16.582 421.258 16.621 cv
421.223 16.66 421.172 16.695 421.102 16.719 cv
421.027 16.746 420.926 16.762 420.805 16.777 cv
420.68 16.789 420.523 16.797 420.332 16.797 cv
420.133 16.797 419.973 16.789 419.848 16.777 cv
419.723 16.762 419.621 16.746 419.547 16.719 cv
419.469 16.695 419.418 16.66 419.391 16.621 cv
419.363 16.582 419.348 16.539 419.352 16.484 cv
419.352 12.363 li
419.348 12.133 419.328 11.918 419.285 11.723 cv
419.238 11.531 419.168 11.367 419.082 11.23 cv
418.988 11.094 418.875 10.988 418.738 10.91 cv
418.598 10.836 418.434 10.797 418.242 10.797 cv
418.008 10.797 417.77 10.891 417.531 11.07 cv
417.293 11.254 417.035 11.516 416.754 11.863 cv
416.754 16.484 li
416.754 16.539 416.738 16.582 416.707 16.621 cv
416.676 16.66 416.621 16.695 416.547 16.719 cv
416.469 16.746 416.367 16.762 416.246 16.777 cv
416.121 16.789 415.969 16.797 415.781 16.797 cv
415.586 16.797 415.426 16.789 415.305 16.777 cv
415.176 16.762 415.074 16.746 415.004 16.719 cv
414.926 16.695 414.875 16.66 414.844 16.621 cv
414.813 16.582 414.797 16.539 414.797 16.484 cv
414.797 12.363 li
414.797 12.133 414.773 11.918 414.73 11.723 cv
414.688 11.531 414.621 11.367 414.535 11.23 cv
414.441 11.094 414.328 10.988 414.191 10.91 cv
414.047 10.836 413.883 10.797 413.699 10.797 cv
413.457 10.797 413.219 10.891 412.98 11.07 cv
412.742 11.254 412.484 11.516 412.211 11.863 cv
412.211 16.484 li
412.207 16.539 412.191 16.582 412.164 16.621 cv
412.129 16.66 412.074 16.695 412.004 16.719 cv
411.926 16.746 411.828 16.762 411.703 16.777 cv
411.578 16.789 411.418 16.797 411.23 16.797 cv
411.035 16.797 410.879 16.789 410.754 16.777 cv
410.629 16.762 410.527 16.746 410.453 16.719 cv
410.375 16.695 410.32 16.66 410.293 16.621 cv
410.258 16.582 410.242 16.539 410.246 16.484 cv
410.246 9.53497 li
410.242 9.48798 410.258 9.44098 410.285 9.39801 cv
410.309 9.36298 410.355 9.33197 410.426 9.30103 cv
410.492 9.27698 410.578 9.258 410.688 9.242 cv
410.793 9.23401 410.926 9.22699 411.09 9.22302 cv
411.254 9.22699 411.391 9.23401 411.5 9.242 cv
411.605 9.258 411.691 9.27698 411.754 9.30103 cv
411.813 9.33197 411.855 9.36298 411.883 9.39801 cv
411.906 9.44098 411.918 9.48798 411.922 9.53497 cv
411.922 10.336 li
412.305 9.92603 412.688 9.61298 413.07 9.40198 cv
413.449 9.19501 413.852 9.09399 414.27 9.09003 cv
414.555 9.09399 414.809 9.12097 415.039 9.17999 cv
415.266 9.242 415.473 9.328 415.652 9.43701 cv
415.832 9.55103 415.984 9.68701 416.113 9.84003 cv
416.242 9.99597 416.352 10.168 416.441 10.359 cv
416.648 10.137 416.852 9.94501 417.055 9.78497 cv
417.25 9.625 417.449 9.492 417.645 9.39099 cv
417.84 9.289 418.035 9.21503 418.23 9.164 cv
418.426 9.117 418.625 9.09399 418.828 9.09003 cv
419.289 9.09399 419.676 9.172 419.996 9.32397 cv
420.309 9.48401 420.566 9.69501 420.762 9.961 cv
420.957 10.23 421.094 10.543 421.18 10.898 cv
421.258 11.258 421.301 11.637 421.305 12.035 cv
cp
f
429.148 16.508 mo
429.145 16.586 429.117 16.641 429.07 16.68 cv
429.016 16.723 428.934 16.75 428.824 16.77 cv
428.707 16.785 428.543 16.797 428.328 16.797 cv
428.09 16.797 427.918 16.785 427.816 16.77 cv
427.707 16.75 427.633 16.723 427.594 16.68 cv
427.547 16.641 427.527 16.586 427.527 16.508 cv
427.527 15.957 li
427.238 16.266 426.91 16.504 426.547 16.672 cv
426.18 16.844 425.773 16.926 425.328 16.93 cv
424.957 16.926 424.617 16.879 424.309 16.785 cv
424 16.691 423.734 16.551 423.508 16.355 cv
423.281 16.168 423.105 15.934 422.98 15.652 cv
422.855 15.375 422.793 15.047 422.797 14.668 cv
422.793 14.27 422.871 13.918 423.031 13.613 cv
423.188 13.316 423.426 13.07 423.742 12.875 cv
424.055 12.684 424.445 12.539 424.914 12.441 cv
425.383 12.352 425.926 12.305 426.543 12.301 cv
427.223 12.301 li
427.223 11.879 li
427.223 11.664 427.199 11.473 427.156 11.309 cv
427.109 11.148 427.035 11.012 426.938 10.898 cv
426.832 10.793 426.699 10.711 426.531 10.656 cv
426.359 10.605 426.148 10.582 425.906 10.578 cv
425.574 10.582 425.281 10.617 425.027 10.687 cv
424.766 10.762 424.539 10.844 424.344 10.93 cv
424.145 11.023 423.98 11.102 423.852 11.172 cv
423.715 11.246 423.605 11.285 423.527 11.281 cv
423.465 11.285 423.414 11.266 423.375 11.227 cv
423.328 11.191 423.293 11.141 423.266 11.07 cv
423.234 11.008 423.211 10.922 423.199 10.82 cv
423.18 10.723 423.172 10.613 423.176 10.492 cv
423.172 10.332 423.188 10.207 423.215 10.109 cv
423.238 10.02 423.285 9.93402 423.363 9.85498 cv
423.434 9.78101 423.563 9.69897 423.746 9.60901 cv
423.926 9.52002 424.137 9.43402 424.383 9.35498 cv
424.625 9.27698 424.895 9.21503 425.184 9.164 cv
425.473 9.117 425.77 9.09399 426.078 9.09003 cv
426.621 9.09399 427.086 9.14502 427.473 9.25 cv
427.859 9.35901 428.18 9.52301 428.43 9.742 cv
428.68 9.961 428.859 10.246 428.977 10.594 cv
429.086 10.945 429.145 11.359 429.148 11.832 cv
cp
427.223 13.531 mo
426.473 13.531 li
426.156 13.535 425.887 13.559 425.664 13.602 cv
425.438 13.652 425.254 13.723 425.117 13.812 cv
424.973 13.91 424.871 14.023 424.809 14.152 cv
424.742 14.289 424.707 14.437 424.711 14.605 cv
424.707 14.898 424.801 15.129 424.988 15.293 cv
425.172 15.461 425.43 15.543 425.758 15.543 cv
426.031 15.543 426.281 15.473 426.516 15.332 cv
426.742 15.191 426.98 14.988 427.223 14.715 cv
cp
f
437.375 10.016 mo
437.371 10.27 437.344 10.453 437.289 10.57 cv
437.23 10.691 437.16 10.75 437.082 10.75 cv
436.262 10.75 li
436.375 10.875 436.457 11.02 436.508 11.176 cv
436.555 11.336 436.578 11.5 436.582 11.668 cv
436.578 12.078 436.512 12.437 436.379 12.75 cv
436.242 13.066 436.047 13.332 435.797 13.543 cv
435.543 13.762 435.242 13.926 434.887 14.035 cv
434.527 14.152 434.129 14.207 433.699 14.203 cv
433.473 14.207 433.262 14.18 433.059 14.121 cv
432.855 14.07 432.699 14.008 432.59 13.93 cv
432.527 14 432.469 14.078 432.422 14.172 cv
432.371 14.266 432.348 14.371 432.352 14.48 cv
432.348 14.637 432.414 14.758 432.547 14.852 cv
432.676 14.949 432.863 15.004 433.105 15.012 cv
434.797 15.074 li
435.191 15.09 435.543 15.148 435.852 15.242 cv
436.16 15.344 436.422 15.477 436.633 15.648 cv
436.844 15.824 437.004 16.035 437.113 16.277 cv
437.223 16.523 437.277 16.797 437.281 17.109 cv
437.277 17.445 437.203 17.77 437.055 18.078 cv
436.906 18.379 436.68 18.641 436.379 18.867 cv
436.074 19.086 435.695 19.266 435.242 19.398 cv
434.785 19.527 434.254 19.59 433.652 19.594 cv
433.055 19.59 432.551 19.543 432.133 19.453 cv
431.715 19.355 431.371 19.227 431.105 19.062 cv
430.836 18.895 430.641 18.695 430.523 18.469 cv
430.398 18.234 430.34 17.98 430.34 17.707 cv
430.34 17.535 430.359 17.375 430.406 17.219 cv
430.445 17.062 430.512 16.91 430.602 16.77 cv
430.684 16.625 430.789 16.492 430.914 16.359 cv
431.039 16.23 431.18 16.105 431.344 15.984 cv
431.117 15.871 430.945 15.711 430.824 15.5 cv
430.703 15.297 430.645 15.07 430.645 14.824 cv
430.645 14.523 430.711 14.246 430.852 13.988 cv
430.988 13.738 431.172 13.508 431.398 13.305 cv
431.215 13.125 431.07 12.91 430.961 12.652 cv
430.852 12.402 430.797 12.082 430.801 11.699 cv
430.797 11.297 430.867 10.937 431.012 10.613 cv
431.152 10.297 431.352 10.027 431.609 9.80499 cv
431.863 9.586 432.168 9.414 432.52 9.297 cv
432.871 9.17999 433.262 9.12097 433.691 9.12097 cv
433.91 9.12097 434.117 9.13702 434.316 9.15997 cv
434.516 9.19098 434.703 9.22699 434.875 9.27002 cv
437.082 9.27002 li
437.164 9.27301 437.234 9.33197 437.293 9.44098 cv
437.344 9.55902 437.371 9.75 437.375 10.016 cv
cp
434.859 11.66 mo
434.855 11.289 434.754 11 434.547 10.789 cv
434.336 10.586 434.043 10.48 433.668 10.477 cv
433.473 10.48 433.301 10.512 433.16 10.574 cv
433.012 10.641 432.891 10.73 432.797 10.84 cv
432.695 10.953 432.625 11.082 432.582 11.23 cv
432.531 11.379 432.508 11.535 432.512 11.691 cv
432.508 12.051 432.613 12.328 432.824 12.531 cv
433.031 12.738 433.32 12.844 433.691 12.84 cv
433.887 12.844 434.055 12.812 434.203 12.746 cv
434.344 12.687 434.465 12.602 434.566 12.488 cv
434.66 12.383 434.734 12.254 434.785 12.109 cv
434.832 11.969 434.855 11.82 434.859 11.66 cv
cp
435.32 17.211 mo
435.32 16.973 435.227 16.797 435.039 16.672 cv
434.852 16.551 434.594 16.48 434.266 16.469 cv
432.871 16.43 li
432.734 16.531 432.625 16.625 432.547 16.715 cv
432.465 16.805 432.402 16.891 432.355 16.977 cv
432.305 17.059 432.27 17.141 432.258 17.219 cv
432.238 17.297 432.23 17.375 432.234 17.461 cv
432.23 17.715 432.363 17.914 432.625 18.051 cv
432.887 18.184 433.258 18.25 433.738 18.254 cv
434.031 18.25 434.277 18.219 434.484 18.164 cv
434.684 18.102 434.848 18.023 434.977 17.926 cv
435.098 17.824 435.188 17.715 435.242 17.594 cv
435.293 17.473 435.32 17.344 435.32 17.211 cv
cp
f
444.984 12.809 mo
444.98 13.047 444.93 13.223 444.824 13.336 cv
444.715 13.453 444.566 13.512 444.387 13.508 cv
440.152 13.508 li
440.148 13.809 440.184 14.078 440.258 14.316 cv
440.324 14.559 440.438 14.762 440.594 14.93 cv
440.746 15.102 440.941 15.23 441.184 15.316 cv
441.422 15.406 441.711 15.449 442.055 15.449 cv
442.395 15.449 442.695 15.426 442.957 15.375 cv
443.215 15.328 443.441 15.273 443.633 15.211 cv
443.82 15.152 443.977 15.098 444.105 15.047 cv
444.227 15 444.328 14.977 444.41 14.973 cv
444.453 14.977 444.492 14.984 444.527 15 cv
444.555 15.02 444.582 15.051 444.602 15.098 cv
444.621 15.145 444.633 15.211 444.645 15.297 cv
444.648 15.383 444.652 15.492 444.656 15.621 cv
444.652 15.738 444.652 15.836 444.648 15.914 cv
444.641 15.996 444.633 16.062 444.625 16.117 cv
444.613 16.176 444.598 16.227 444.578 16.262 cv
444.559 16.305 444.531 16.34 444.5 16.375 cv
444.465 16.414 444.371 16.465 444.223 16.523 cv
444.066 16.59 443.875 16.652 443.645 16.707 cv
443.406 16.77 443.137 16.816 442.84 16.863 cv
442.535 16.902 442.215 16.926 441.875 16.93 cv
441.254 16.926 440.711 16.852 440.25 16.695 cv
439.781 16.543 439.395 16.305 439.086 15.988 cv
438.77 15.672 438.535 15.273 438.387 14.789 cv
438.23 14.309 438.156 13.742 438.16 13.086 cv
438.156 12.473 438.234 11.914 438.398 11.418 cv
438.555 10.922 438.789 10.504 439.102 10.156 cv
439.406 9.81201 439.781 9.547 440.219 9.36298 cv
440.656 9.18402 441.148 9.09399 441.703 9.09003 cv
442.281 9.09399 442.781 9.17999 443.195 9.34802 cv
443.609 9.52301 443.945 9.76202 444.211 10.062 cv
444.473 10.367 444.668 10.727 444.797 11.141 cv
444.918 11.559 444.98 12.008 444.984 12.496 cv
cp
443.082 12.246 mo
443.094 11.695 442.984 11.262 442.75 10.949 cv
442.516 10.637 442.148 10.48 441.656 10.477 cv
441.406 10.48 441.191 10.527 441.008 10.617 cv
440.82 10.715 440.668 10.84 440.547 10.996 cv
440.422 11.156 440.328 11.344 440.266 11.559 cv
440.199 11.773 440.16 12.004 440.152 12.246 cv
cp
f
451.484 14.52 mo
451.48 14.918 451.406 15.266 451.262 15.566 cv
451.113 15.867 450.906 16.121 450.637 16.32 cv
450.363 16.527 450.043 16.676 449.676 16.777 cv
449.309 16.875 448.906 16.926 448.477 16.93 cv
448.211 16.926 447.965 16.906 447.73 16.871 cv
447.496 16.828 447.285 16.781 447.098 16.723 cv
446.91 16.664 446.754 16.602 446.629 16.539 cv
446.504 16.477 446.41 16.418 446.355 16.363 cv
446.297 16.309 446.254 16.227 446.227 16.109 cv
446.191 15.996 446.176 15.82 446.18 15.59 cv
446.176 15.441 446.184 15.32 446.195 15.227 cv
446.203 15.137 446.219 15.066 446.242 15.008 cv
446.262 14.957 446.285 14.918 446.32 14.898 cv
446.348 14.883 446.387 14.875 446.434 14.871 cv
446.488 14.875 446.574 14.906 446.688 14.969 cv
446.797 15.035 446.934 15.109 447.105 15.184 cv
447.27 15.266 447.465 15.336 447.684 15.402 cv
447.902 15.473 448.152 15.508 448.438 15.504 cv
448.613 15.508 448.77 15.488 448.91 15.449 cv
449.043 15.414 449.164 15.363 449.27 15.293 cv
449.367 15.227 449.441 15.141 449.496 15.035 cv
449.543 14.934 449.57 14.812 449.574 14.676 cv
449.57 14.52 449.523 14.387 449.43 14.277 cv
449.336 14.168 449.207 14.07 449.051 13.984 cv
448.887 13.902 448.707 13.824 448.512 13.75 cv
448.309 13.68 448.105 13.602 447.895 13.508 cv
447.684 13.422 447.477 13.32 447.281 13.203 cv
447.078 13.094 446.898 12.953 446.742 12.785 cv
446.578 12.621 446.453 12.422 446.359 12.184 cv
446.266 11.953 446.219 11.672 446.219 11.34 cv
446.219 11.012 446.281 10.707 446.41 10.426 cv
446.539 10.152 446.727 9.914 446.973 9.71503 cv
447.215 9.52002 447.512 9.367 447.863 9.25403 cv
448.211 9.14801 448.605 9.09399 449.047 9.09003 cv
449.262 9.09399 449.473 9.10901 449.68 9.13702 cv
449.883 9.172 450.07 9.211 450.238 9.25403 cv
450.402 9.30499 450.543 9.35498 450.66 9.40601 cv
450.773 9.46503 450.855 9.51202 450.906 9.547 cv
450.953 9.59003 450.988 9.62903 451.012 9.664 cv
451.031 9.70697 451.043 9.75403 451.055 9.80499 cv
451.063 9.85901 451.074 9.92603 451.082 10.004 cv
451.09 10.09 451.094 10.187 451.094 10.305 cv
451.094 10.445 451.09 10.562 451.082 10.648 cv
451.074 10.742 451.059 10.812 451.043 10.859 cv
451.023 10.914 451 10.949 450.973 10.965 cv
450.938 10.988 450.902 10.996 450.863 10.992 cv
450.813 10.996 450.738 10.969 450.645 10.91 cv
450.543 10.859 450.422 10.801 450.273 10.734 cv
450.125 10.676 449.953 10.617 449.758 10.559 cv
449.563 10.508 449.34 10.48 449.094 10.477 cv
448.914 10.48 448.762 10.5 448.633 10.531 cv
448.5 10.57 448.391 10.621 448.313 10.687 cv
448.227 10.758 448.164 10.836 448.125 10.926 cv
448.078 11.02 448.059 11.117 448.063 11.219 cv
448.059 11.379 448.109 11.516 448.211 11.621 cv
448.309 11.734 448.438 11.828 448.602 11.91 cv
448.762 11.996 448.945 12.074 449.152 12.145 cv
449.355 12.219 449.563 12.301 449.773 12.383 cv
449.98 12.473 450.188 12.57 450.398 12.684 cv
450.602 12.797 450.785 12.937 450.945 13.102 cv
451.105 13.27 451.234 13.469 451.336 13.699 cv
451.43 13.934 451.48 14.207 451.484 14.52 cv
cp
f
460.254 12.832 mo
460.25 13.133 460.223 13.344 460.168 13.461 cv
460.109 13.586 460.02 13.645 459.895 13.641 cv
456.652 13.641 li
456.523 13.645 456.43 13.582 456.375 13.457 cv
456.313 13.336 456.285 13.129 456.289 12.832 cv
456.285 12.543 456.313 12.336 456.375 12.215 cv
456.43 12.098 456.523 12.039 456.652 12.035 cv
459.895 12.035 li
459.957 12.039 460.008 12.051 460.055 12.074 cv
460.094 12.102 460.133 12.148 460.168 12.207 cv
460.195 12.273 460.219 12.355 460.234 12.457 cv
460.246 12.562 460.25 12.687 460.254 12.832 cv
cp
f
470.992 15.895 mo
470.988 16.051 470.984 16.184 470.973 16.285 cv
470.957 16.395 470.938 16.48 470.914 16.551 cv
470.887 16.621 470.852 16.672 470.816 16.703 cv
470.773 16.734 470.73 16.75 470.68 16.75 cv
466.059 16.75 li
465.883 16.75 465.738 16.699 465.625 16.598 cv
465.504 16.496 465.445 16.332 465.449 16.102 cv
465.449 6.94501 li
465.445 6.89801 465.465 6.85199 465.5 6.80499 cv
465.531 6.76599 465.586 6.72998 465.668 6.703 cv
465.742 6.67999 465.848 6.65997 465.984 6.64099 cv
466.113 6.62903 466.277 6.62097 466.48 6.617 cv
466.676 6.62097 466.844 6.62903 466.977 6.64099 cv
467.105 6.65997 467.207 6.67999 467.289 6.703 cv
467.363 6.72998 467.422 6.76599 467.457 6.80499 cv
467.488 6.85199 467.504 6.89801 467.508 6.94501 cv
467.508 15.059 li
470.68 15.059 li
470.73 15.062 470.773 15.078 470.816 15.102 cv
470.852 15.133 470.887 15.18 470.914 15.242 cv
470.938 15.312 470.957 15.398 470.973 15.5 cv
470.984 15.609 470.988 15.738 470.992 15.895 cv
cp
f
479.113 12.937 mo
479.109 13.535 479.031 14.078 478.879 14.562 cv
478.719 15.055 478.484 15.473 478.168 15.824 cv
477.852 16.176 477.453 16.449 476.977 16.641 cv
476.496 16.832 475.938 16.926 475.301 16.93 cv
474.68 16.926 474.141 16.844 473.688 16.672 cv
473.227 16.504 472.848 16.254 472.551 15.926 cv
472.246 15.602 472.023 15.199 471.879 14.719 cv
471.734 14.242 471.664 13.695 471.664 13.078 cv
471.664 12.488 471.742 11.949 471.898 11.457 cv
472.055 10.969 472.293 10.547 472.613 10.195 cv
472.93 9.84802 473.324 9.57397 473.801 9.37903 cv
474.273 9.18701 474.832 9.09399 475.473 9.09003 cv
476.098 9.09399 476.637 9.17603 477.094 9.34399 cv
477.551 9.51599 477.93 9.76599 478.227 10.09 cv
478.523 10.418 478.746 10.82 478.895 11.297 cv
479.039 11.777 479.109 12.324 479.113 12.937 cv
cp
477.094 13.016 mo
477.09 12.68 477.063 12.363 477.012 12.07 cv
476.953 11.785 476.859 11.535 476.734 11.32 cv
476.602 11.109 476.43 10.941 476.219 10.82 cv
476 10.703 475.73 10.645 475.402 10.641 cv
475.113 10.645 474.859 10.699 474.641 10.801 cv
474.422 10.91 474.242 11.066 474.102 11.27 cv
473.961 11.477 473.855 11.723 473.785 12.008 cv
473.715 12.301 473.68 12.629 473.68 12.992 cv
473.68 13.34 473.707 13.656 473.766 13.941 cv
473.82 14.234 473.914 14.484 474.043 14.695 cv
474.168 14.91 474.34 15.074 474.563 15.187 cv
474.777 15.309 475.047 15.367 475.371 15.363 cv
475.664 15.367 475.922 15.312 476.145 15.203 cv
476.359 15.098 476.539 14.945 476.68 14.738 cv
476.82 14.539 476.922 14.293 476.992 14.004 cv
477.055 13.719 477.09 13.391 477.094 13.016 cv
cp
f
485.93 15.379 mo
485.926 15.516 485.922 15.629 485.918 15.719 cv
485.906 15.812 485.898 15.891 485.887 15.949 cv
485.871 16.012 485.855 16.062 485.84 16.098 cv
485.82 16.141 485.777 16.187 485.719 16.246 cv
485.652 16.309 485.547 16.383 485.398 16.465 cv
485.246 16.555 485.074 16.633 484.883 16.695 cv
484.691 16.766 484.484 16.816 484.258 16.859 cv
484.031 16.898 483.797 16.918 483.563 16.922 cv
483.023 16.918 482.551 16.84 482.137 16.672 cv
481.723 16.508 481.375 16.262 481.098 15.937 cv
480.813 15.613 480.602 15.219 480.461 14.75 cv
480.32 14.285 480.25 13.746 480.25 13.141 cv
480.25 12.445 480.336 11.848 480.508 11.34 cv
480.68 10.836 480.922 10.414 481.238 10.082 cv
481.547 9.75 481.914 9.50403 482.344 9.34003 cv
482.766 9.17999 483.234 9.09802 483.746 9.09802 cv
483.953 9.09802 484.156 9.117 484.359 9.15198 cv
484.555 9.19098 484.742 9.242 484.918 9.30103 cv
485.09 9.367 485.246 9.43701 485.387 9.51202 cv
485.523 9.59399 485.621 9.65997 485.68 9.71503 cv
485.734 9.77301 485.773 9.82001 485.801 9.85498 cv
485.82 9.89801 485.84 9.94897 485.855 10.008 cv
485.867 10.074 485.879 10.152 485.887 10.238 cv
485.895 10.332 485.898 10.441 485.898 10.57 cv
485.898 10.875 485.871 11.086 485.82 11.207 cv
485.766 11.328 485.699 11.391 485.617 11.387 cv
485.527 11.391 485.434 11.355 485.336 11.281 cv
485.234 11.211 485.117 11.129 484.984 11.039 cv
484.852 10.953 484.691 10.871 484.504 10.797 cv
484.316 10.727 484.09 10.691 483.832 10.687 cv
483.32 10.691 482.934 10.887 482.664 11.277 cv
482.391 11.668 482.254 12.242 482.258 13 cv
482.254 13.375 482.289 13.707 482.359 13.992 cv
482.426 14.277 482.523 14.516 482.66 14.707 cv
482.789 14.902 482.957 15.047 483.16 15.141 cv
483.359 15.238 483.59 15.285 483.855 15.285 cv
484.121 15.285 484.355 15.246 484.555 15.164 cv
484.746 15.086 484.914 14.996 485.063 14.895 cv
485.203 14.797 485.328 14.707 485.43 14.625 cv
485.527 14.547 485.609 14.508 485.68 14.504 cv
485.723 14.508 485.762 14.52 485.797 14.543 cv
485.824 14.57 485.848 14.617 485.871 14.687 cv
485.887 14.758 485.902 14.848 485.914 14.957 cv
485.922 15.066 485.926 15.207 485.93 15.379 cv
cp
f
493.219 16.508 mo
493.215 16.586 493.188 16.641 493.141 16.68 cv
493.086 16.723 493.004 16.75 492.895 16.77 cv
492.777 16.785 492.613 16.797 492.398 16.797 cv
492.16 16.797 491.988 16.785 491.887 16.77 cv
491.777 16.75 491.703 16.723 491.664 16.68 cv
491.617 16.641 491.598 16.586 491.598 16.508 cv
491.598 15.957 li
491.309 16.266 490.98 16.504 490.617 16.672 cv
490.25 16.844 489.844 16.926 489.398 16.93 cv
489.027 16.926 488.688 16.879 488.379 16.785 cv
488.07 16.691 487.805 16.551 487.578 16.355 cv
487.352 16.168 487.176 15.934 487.051 15.652 cv
486.926 15.375 486.863 15.047 486.867 14.668 cv
486.863 14.27 486.941 13.918 487.102 13.613 cv
487.258 13.316 487.496 13.07 487.813 12.875 cv
488.125 12.684 488.516 12.539 488.984 12.441 cv
489.453 12.352 489.996 12.305 490.613 12.301 cv
491.293 12.301 li
491.293 11.879 li
491.293 11.664 491.27 11.473 491.227 11.309 cv
491.18 11.148 491.105 11.012 491.008 10.898 cv
490.902 10.793 490.77 10.711 490.602 10.656 cv
490.43 10.605 490.219 10.582 489.977 10.578 cv
489.645 10.582 489.352 10.617 489.098 10.687 cv
488.836 10.762 488.609 10.844 488.414 10.93 cv
488.215 11.023 488.051 11.102 487.922 11.172 cv
487.785 11.246 487.676 11.285 487.598 11.281 cv
487.535 11.285 487.484 11.266 487.445 11.227 cv
487.398 11.191 487.363 11.141 487.336 11.07 cv
487.305 11.008 487.281 10.922 487.27 10.82 cv
487.25 10.723 487.242 10.613 487.246 10.492 cv
487.242 10.332 487.258 10.207 487.285 10.109 cv
487.309 10.02 487.355 9.93402 487.434 9.85498 cv
487.504 9.78101 487.633 9.69897 487.816 9.60901 cv
487.996 9.52002 488.207 9.43402 488.453 9.35498 cv
488.695 9.27698 488.965 9.21503 489.254 9.164 cv
489.543 9.117 489.84 9.09399 490.148 9.09003 cv
490.691 9.09399 491.156 9.14502 491.543 9.25 cv
491.93 9.35901 492.25 9.52301 492.5 9.742 cv
492.75 9.961 492.93 10.246 493.047 10.594 cv
493.156 10.945 493.215 11.359 493.219 11.832 cv
cp
491.293 13.531 mo
490.543 13.531 li
490.227 13.535 489.957 13.559 489.734 13.602 cv
489.508 13.652 489.324 13.723 489.188 13.812 cv
489.043 13.91 488.941 14.023 488.879 14.152 cv
488.813 14.289 488.777 14.437 488.781 14.605 cv
488.777 14.898 488.871 15.129 489.059 15.293 cv
489.242 15.461 489.5 15.543 489.828 15.543 cv
490.102 15.543 490.352 15.473 490.586 15.332 cv
490.813 15.191 491.051 14.988 491.293 14.715 cv
cp
f
497.141 16.484 mo
497.137 16.539 497.121 16.582 497.094 16.621 cv
497.059 16.66 497.004 16.695 496.934 16.719 cv
496.855 16.746 496.758 16.762 496.633 16.777 cv
496.508 16.789 496.348 16.797 496.16 16.797 cv
495.965 16.797 495.809 16.789 495.684 16.777 cv
495.559 16.762 495.457 16.746 495.383 16.719 cv
495.305 16.695 495.25 16.66 495.223 16.621 cv
495.188 16.582 495.172 16.539 495.176 16.484 cv
495.176 6.23798 li
495.172 6.18701 495.188 6.14099 495.223 6.09802 cv
495.25 6.05902 495.305 6.02301 495.383 5.992 cv
495.457 5.96503 495.559 5.94501 495.684 5.92603 cv
495.809 5.914 495.965 5.90601 496.16 5.90198 cv
496.348 5.90601 496.508 5.914 496.633 5.92603 cv
496.758 5.94501 496.855 5.96503 496.934 5.992 cv
497.004 6.02301 497.059 6.05902 497.094 6.09802 cv
497.121 6.14099 497.137 6.18701 497.141 6.23798 cv
cp
f
514.629 16.469 mo
514.625 16.523 514.613 16.57 514.586 16.609 cv
514.555 16.652 514.5 16.687 514.43 16.711 cv
514.352 16.738 514.254 16.758 514.129 16.773 cv
514.004 16.789 513.844 16.797 513.652 16.797 cv
513.465 16.797 513.309 16.789 513.188 16.773 cv
513.059 16.758 512.961 16.738 512.891 16.711 cv
512.816 16.687 512.766 16.652 512.734 16.609 cv
512.703 16.57 512.688 16.523 512.688 16.469 cv
512.688 8.26202 li
512.672 8.26202 li
509.75 16.461 li
509.727 16.531 509.691 16.586 509.648 16.629 cv
509.598 16.676 509.535 16.711 509.457 16.734 cv
509.375 16.762 509.273 16.777 509.148 16.785 cv
509.023 16.793 508.871 16.797 508.699 16.797 cv
508.52 16.797 508.371 16.789 508.246 16.777 cv
508.121 16.762 508.016 16.742 507.938 16.715 cv
507.852 16.687 507.789 16.652 507.746 16.609 cv
507.695 16.57 507.664 16.523 507.652 16.461 cv
504.832 8.26202 li
504.816 8.26202 li
504.816 16.469 li
504.813 16.523 504.797 16.57 504.773 16.609 cv
504.742 16.652 504.691 16.687 504.613 16.711 cv
504.535 16.738 504.434 16.758 504.313 16.773 cv
504.188 16.789 504.031 16.797 503.844 16.797 cv
503.652 16.797 503.496 16.789 503.375 16.773 cv
503.246 16.758 503.145 16.738 503.074 16.711 cv
502.996 16.687 502.945 16.652 502.918 16.609 cv
502.887 16.57 502.871 16.523 502.875 16.469 cv
502.875 7.48401 li
502.871 7.22302 502.941 7.02002 503.086 6.875 cv
503.223 6.73798 503.41 6.66803 503.648 6.664 cv
504.988 6.664 li
505.227 6.66803 505.43 6.68701 505.602 6.72302 cv
505.77 6.76599 505.918 6.828 506.047 6.91803 cv
506.168 7.01202 506.273 7.133 506.359 7.27698 cv
506.441 7.42999 506.512 7.61298 506.578 7.828 cv
508.762 13.836 li
508.793 13.836 li
511.051 7.84399 li
511.117 7.625 511.191 7.44098 511.273 7.289 cv
511.352 7.14099 511.445 7.02002 511.555 6.922 cv
511.66 6.83197 511.785 6.76599 511.93 6.72302 cv
512.074 6.68701 512.242 6.66803 512.438 6.664 cv
513.816 6.664 li
513.953 6.66803 514.074 6.68402 514.18 6.71899 cv
514.277 6.758 514.359 6.81201 514.43 6.87903 cv
514.492 6.953 514.543 7.039 514.578 7.13702 cv
514.609 7.242 514.625 7.35901 514.629 7.48401 cv
cp
f
523.738 12.937 mo
523.734 13.535 523.656 14.078 523.504 14.562 cv
523.344 15.055 523.109 15.473 522.793 15.824 cv
522.477 16.176 522.078 16.449 521.602 16.641 cv
521.121 16.832 520.563 16.926 519.926 16.93 cv
519.305 16.926 518.766 16.844 518.313 16.672 cv
517.852 16.504 517.473 16.254 517.176 15.926 cv
516.871 15.602 516.648 15.199 516.504 14.719 cv
516.359 14.242 516.289 13.695 516.289 13.078 cv
516.289 12.488 516.367 11.949 516.523 11.457 cv
516.68 10.969 516.918 10.547 517.238 10.195 cv
517.555 9.84802 517.949 9.57397 518.426 9.37903 cv
518.898 9.18701 519.457 9.09399 520.098 9.09003 cv
520.723 9.09399 521.262 9.17603 521.719 9.34399 cv
522.176 9.51599 522.555 9.76599 522.852 10.09 cv
523.148 10.418 523.371 10.82 523.52 11.297 cv
523.664 11.777 523.734 12.324 523.738 12.937 cv
cp
521.719 13.016 mo
521.715 12.68 521.688 12.363 521.637 12.07 cv
521.578 11.785 521.484 11.535 521.359 11.32 cv
521.227 11.109 521.055 10.941 520.844 10.82 cv
520.625 10.703 520.355 10.645 520.027 10.641 cv
519.738 10.645 519.484 10.699 519.266 10.801 cv
519.047 10.91 518.867 11.066 518.727 11.27 cv
518.586 11.477 518.48 11.723 518.41 12.008 cv
518.34 12.301 518.305 12.629 518.305 12.992 cv
518.305 13.34 518.332 13.656 518.391 13.941 cv
518.445 14.234 518.539 14.484 518.668 14.695 cv
518.793 14.91 518.965 15.074 519.188 15.187 cv
519.402 15.309 519.672 15.367 519.996 15.363 cv
520.289 15.367 520.547 15.312 520.77 15.203 cv
520.984 15.098 521.164 14.945 521.305 14.738 cv
521.445 14.539 521.547 14.293 521.617 14.004 cv
521.68 13.719 521.715 13.391 521.719 13.016 cv
cp
f
531.887 16.484 mo
531.883 16.547 531.871 16.594 531.848 16.629 cv
531.82 16.672 531.773 16.703 531.715 16.727 cv
531.648 16.75 531.566 16.766 531.461 16.781 cv
531.355 16.789 531.223 16.797 531.07 16.797 cv
530.898 16.797 530.766 16.789 530.664 16.781 cv
530.559 16.766 530.473 16.75 530.41 16.727 cv
530.344 16.703 530.297 16.672 530.27 16.629 cv
530.238 16.594 530.223 16.547 530.227 16.484 cv
530.227 15.715 li
529.867 16.102 529.492 16.398 529.102 16.609 cv
528.703 16.82 528.27 16.926 527.797 16.93 cv
527.262 16.926 526.813 16.824 526.449 16.621 cv
526.082 16.418 525.785 16.145 525.555 15.793 cv
525.32 15.449 525.152 15.043 525.051 14.574 cv
524.949 14.113 524.898 13.621 524.898 13.102 cv
524.898 12.488 524.961 11.934 525.094 11.437 cv
525.223 10.945 525.418 10.523 525.676 10.176 cv
525.93 9.828 526.246 9.56201 526.625 9.37097 cv
527.004 9.18701 527.441 9.09399 527.938 9.09003 cv
528.324 9.09399 528.676 9.172 528.996 9.328 cv
529.309 9.48798 529.625 9.71899 529.938 10.023 cv
529.938 6.26202 li
529.938 6.211 529.949 6.164 529.98 6.12097 cv
530.004 6.08197 530.059 6.047 530.137 6.01599 cv
530.211 5.98798 530.309 5.96899 530.438 5.94897 cv
530.559 5.93701 530.719 5.92999 530.914 5.92603 cv
531.105 5.92999 531.262 5.93701 531.387 5.94897 cv
531.508 5.96899 531.609 5.98798 531.684 6.01599 cv
531.754 6.047 531.805 6.08197 531.84 6.12097 cv
531.867 6.164 531.883 6.211 531.887 6.26202 cv
cp
529.938 11.84 mo
529.656 11.488 529.387 11.219 529.133 11.031 cv
528.871 10.844 528.602 10.75 528.324 10.75 cv
528.07 10.75 527.852 10.816 527.668 10.941 cv
527.48 11.074 527.332 11.242 527.223 11.453 cv
527.109 11.664 527.027 11.902 526.973 12.164 cv
526.918 12.43 526.891 12.699 526.891 12.969 cv
526.891 13.266 526.914 13.547 526.961 13.82 cv
527.008 14.098 527.082 14.344 527.191 14.559 cv
527.293 14.773 527.438 14.945 527.617 15.074 cv
527.793 15.207 528.016 15.273 528.285 15.27 cv
528.418 15.273 528.547 15.254 528.68 15.211 cv
528.805 15.176 528.938 15.113 529.07 15.02 cv
529.203 14.934 529.34 14.816 529.48 14.672 cv
529.621 14.531 529.773 14.355 529.938 14.148 cv
cp
f
540.285 12.809 mo
540.281 13.047 540.23 13.223 540.125 13.336 cv
540.016 13.453 539.867 13.512 539.688 13.508 cv
535.453 13.508 li
535.449 13.809 535.484 14.078 535.559 14.316 cv
535.625 14.559 535.738 14.762 535.895 14.93 cv
536.047 15.102 536.242 15.23 536.484 15.316 cv
536.723 15.406 537.012 15.449 537.355 15.449 cv
537.695 15.449 537.996 15.426 538.258 15.375 cv
538.516 15.328 538.742 15.273 538.934 15.211 cv
539.121 15.152 539.277 15.098 539.406 15.047 cv
539.527 15 539.629 14.977 539.711 14.973 cv
539.754 14.977 539.793 14.984 539.828 15 cv
539.855 15.02 539.883 15.051 539.902 15.098 cv
539.922 15.145 539.934 15.211 539.945 15.297 cv
539.949 15.383 539.953 15.492 539.957 15.621 cv
539.953 15.738 539.953 15.836 539.949 15.914 cv
539.941 15.996 539.934 16.062 539.926 16.117 cv
539.914 16.176 539.898 16.227 539.879 16.262 cv
539.859 16.305 539.832 16.34 539.801 16.375 cv
539.766 16.414 539.672 16.465 539.523 16.523 cv
539.367 16.59 539.176 16.652 538.945 16.707 cv
538.707 16.77 538.438 16.816 538.141 16.863 cv
537.836 16.902 537.516 16.926 537.176 16.93 cv
536.555 16.926 536.012 16.852 535.551 16.695 cv
535.082 16.543 534.695 16.305 534.387 15.988 cv
534.07 15.672 533.836 15.273 533.688 14.789 cv
533.531 14.309 533.457 13.742 533.461 13.086 cv
533.457 12.473 533.535 11.914 533.699 11.418 cv
533.855 10.922 534.09 10.504 534.402 10.156 cv
534.707 9.81201 535.082 9.547 535.52 9.36298 cv
535.957 9.18402 536.449 9.09399 537.004 9.09003 cv
537.582 9.09399 538.082 9.17999 538.496 9.34802 cv
538.91 9.52301 539.246 9.76202 539.512 10.062 cv
539.773 10.367 539.969 10.727 540.098 11.141 cv
540.219 11.559 540.281 12.008 540.285 12.496 cv
cp
538.383 12.246 mo
538.395 11.695 538.285 11.262 538.051 10.949 cv
537.816 10.637 537.449 10.48 536.957 10.477 cv
536.707 10.48 536.492 10.527 536.309 10.617 cv
536.121 10.715 535.969 10.84 535.848 10.996 cv
535.723 11.156 535.629 11.344 535.566 11.559 cv
535.5 11.773 535.461 12.004 535.453 12.246 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
