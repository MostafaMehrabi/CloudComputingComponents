%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: EnergyConsumption-LocalMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:41:05 p.m.
%%BoundingBox: 0 0 668 553
%%HiResBoundingBox: 0 0 667.8000 552.3600
%%CropBox: 0 0 667.8000 552.3600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -552.36 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 552.36 li
667.8 552.36 li
667.8 0 li
cp
clp
gsave
0 552.36 mo
668 552.36 li
668 -.640015 li
0 -.640015 li
cp
clp
0 0 mo
667.801 0 li
667.801 552.359 li
0 552.359 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
56.281 488.52 mo
649.801 488.52 li
56.281 448.559 mo
649.801 448.559 li
56.281 408.602 mo
649.801 408.602 li
56.281 368.641 mo
649.801 368.641 li
56.281 328.68 mo
649.801 328.68 li
56.281 288.719 mo
649.801 288.719 li
56.281 248.762 mo
649.801 248.762 li
56.281 208.922 mo
649.801 208.922 li
56.281 168.961 mo
649.801 168.961 li
56.281 129 mo
649.801 129 li
56.281 89.039 mo
649.801 89.039 li
56.281 49.078 mo
649.801 49.078 li
.135805 .104005 .108583 0 cmyk
@
56.281 468.48 mo
649.801 468.48 li
56.281 428.52 mo
649.801 428.52 li
56.281 388.559 mo
649.801 388.559 li
56.281 348.719 mo
649.801 348.719 li
56.281 308.762 mo
649.801 308.762 li
56.281 268.801 mo
649.801 268.801 li
56.281 228.84 mo
649.801 228.84 li
56.281 188.879 mo
649.801 188.879 li
56.281 148.922 mo
649.801 148.922 li
56.281 108.961 mo
649.801 108.961 li
56.281 69.121 mo
649.801 69.121 li
56.281 29.16 mo
649.801 29.16 li
.326574 .281529 .277562 0 cmyk
@
93.359 29.16 mo
93.359 508.441 li
167.641 29.16 mo
167.641 508.441 li
241.801 29.16 mo
241.801 508.441 li
315.961 29.16 mo
315.961 508.441 li
390.121 29.16 mo
390.121 508.441 li
464.281 29.16 mo
464.281 508.441 li
538.441 29.16 mo
538.441 508.441 li
612.719 29.16 mo
612.719 508.441 li
.175235 .144778 .143648 0 cmyk
@
56.281 29.16 mo
56.281 508.441 li
130.559 29.16 mo
130.559 508.441 li
204.719 29.16 mo
204.719 508.441 li
278.879 29.16 mo
278.879 508.441 li
353.039 29.16 mo
353.039 508.441 li
427.199 29.16 mo
427.199 508.441 li
501.359 29.16 mo
501.359 508.441 li
575.641 29.16 mo
575.641 508.441 li
649.801 29.16 mo
649.801 508.441 li
.326574 .281529 .277562 0 cmyk
@
36.238 499.078 mo
43.32 499.078 li
43.32 516.238 li
36.238 516.238 li
cp
0 0 0 0 cmyk
ef
36.238 459.238 mo
43.32 459.238 li
43.32 476.281 li
36.238 476.281 li
cp
ef
29.16 419.281 mo
43.32 419.281 li
43.32 436.32 li
29.16 436.32 li
cp
ef
29.16 379.32 mo
43.32 379.32 li
43.32 396.359 li
29.16 396.359 li
cp
ef
29.16 339.359 mo
43.32 339.359 li
43.32 356.398 li
29.16 356.398 li
cp
ef
29.16 299.398 mo
43.32 299.398 li
43.32 316.558 li
29.16 316.558 li
cp
ef
29.16 259.441 mo
43.32 259.441 li
43.32 276.601 li
29.16 276.601 li
cp
ef
29.16 219.48 mo
43.32 219.48 li
43.32 236.64 li
29.16 236.64 li
cp
ef
29.16 179.641 mo
43.32 179.641 li
43.32 196.68 li
29.16 196.68 li
cp
ef
29.16 139.68 mo
43.32 139.68 li
43.32 156.719 li
29.16 156.719 li
cp
ef
29.16 99.719 mo
43.32 99.719 li
43.32 116.762 li
29.16 116.762 li
cp
ef
29.16 59.762 mo
43.32 59.762 li
43.32 76.801 li
29.16 76.801 li
cp
ef
29.16 19.801 mo
43.32 19.801 li
43.32 36.9609 li
29.16 36.9609 li
cp
ef
.96 lw
56.281 508.441 mo
649.801 508.441 li
.369879 .299321 .304356 .000976577 cmyk
@
56.281 508.441 mo
56.281 512.879 li
130.559 508.441 mo
130.559 512.879 li
204.719 508.441 mo
204.719 512.879 li
278.879 508.441 mo
278.879 512.879 li
353.039 508.441 mo
353.039 512.879 li
427.199 508.441 mo
427.199 512.879 li
501.359 508.441 mo
501.359 512.879 li
575.641 508.441 mo
575.641 512.879 li
649.801 508.441 mo
649.801 512.879 li
@
gsave
56.281 29.039 mo
650.398 29.039 li
650.398 509.16 li
56.281 509.16 li
cp
clp
1 lc
56.281 134.879 mo
130.559 67.68 li
204.719 29.16 li
278.879 135.48 li
353.039 115.68 li
427.199 114.961 li
501.359 115.32 li
575.641 114.359 li
649.801 114.359 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
61.32 139.82 mo
51.238 129.738 li
51.238 139.82 mo
61.32 129.738 li
.62829 .284672 0 0 cmyk
@
135.48 72.621 mo
125.398 62.539 li
125.398 72.621 mo
135.48 62.539 li
@
209.641 34.102 mo
199.559 24.02 li
199.559 34.102 mo
209.641 24.02 li
@
283.801 140.422 mo
273.719 130.34 li
273.719 140.422 mo
283.801 130.34 li
@
358.078 120.738 mo
348 110.66 li
348 120.738 mo
358.078 110.66 li
@
432.238 119.898 mo
422.16 109.82 li
422.16 119.898 mo
432.238 109.82 li
@
506.398 120.379 mo
496.32 110.301 li
496.32 120.379 mo
506.398 110.301 li
@
580.559 119.422 mo
570.48 109.34 li
570.48 119.422 mo
580.559 109.34 li
@
654.719 119.422 mo
644.641 109.34 li
644.641 119.422 mo
654.719 109.34 li
@
gsave
56.281 29.039 mo
650.398 29.039 li
650.398 509.16 li
56.281 509.16 li
cp
clp
.96 lw
1 lc
56.281 207.121 mo
130.559 225.238 li
204.719 215.879 li
278.879 303.961 li
353.039 254.398 li
427.199 254.16 li
501.359 253.68 li
575.641 254.16 li
649.801 253.68 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
61.32 212.059 mo
51.238 201.98 li
51.238 212.059 mo
61.32 201.98 li
.0321965 .622736 .922606 .000579843 cmyk
@
135.48 230.18 mo
125.398 220.102 li
125.398 230.18 mo
135.48 220.102 li
@
209.641 220.82 mo
199.559 210.738 li
199.559 220.82 mo
209.641 210.738 li
@
283.801 309.02 mo
273.719 298.941 li
273.719 309.02 mo
283.801 298.941 li
@
358.078 259.461 mo
348 249.379 li
348 259.461 mo
358.078 249.379 li
@
432.238 259.219 mo
422.16 249.141 li
422.16 259.219 mo
432.238 249.141 li
@
506.398 258.738 mo
496.32 248.66 li
496.32 258.738 mo
506.398 248.66 li
@
580.559 259.219 mo
570.48 249.141 li
570.48 259.219 mo
580.559 249.141 li
@
654.719 258.738 mo
644.641 248.66 li
644.641 258.738 mo
654.719 248.66 li
@
gsave
56.281 29.039 mo
650.398 29.039 li
650.398 509.16 li
56.281 509.16 li
cp
clp
.96 lw
1 lc
56.281 189.719 mo
130.559 217.199 li
204.719 282.238 li
278.879 343.559 li
353.039 252.238 li
427.199 249.359 li
501.359 263.762 li
575.641 255.121 li
649.801 259.68 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
61.32 194.781 mo
51.238 184.699 li
51.238 194.781 mo
61.32 184.699 li
.621118 .109194 .980743 .0040589 cmyk
@
135.48 222.262 mo
125.398 212.18 li
125.398 222.262 mo
135.48 212.18 li
@
209.641 287.18 mo
199.559 277.102 li
199.559 287.18 mo
209.641 277.102 li
@
283.801 348.621 mo
273.719 338.539 li
273.719 348.621 mo
283.801 338.539 li
@
358.078 257.18 mo
348 247.102 li
348 257.18 mo
358.078 247.102 li
@
432.238 254.301 mo
422.16 244.219 li
422.16 254.301 mo
432.238 244.219 li
@
506.398 268.699 mo
496.32 258.621 li
496.32 268.699 mo
506.398 258.621 li
@
580.559 260.059 mo
570.48 249.98 li
570.48 260.059 mo
580.559 249.98 li
@
654.719 264.621 mo
644.641 254.539 li
644.641 264.621 mo
654.719 254.539 li
@
gsave
56.281 29.039 mo
650.398 29.039 li
650.398 509.16 li
56.281 509.16 li
cp
clp
.96 lw
1 lc
56.281 147.602 mo
130.559 261.84 li
204.719 339.602 li
278.879 279.359 li
353.039 287.281 li
427.199 266.52 li
501.359 282 li
575.641 268.801 li
649.801 275.762 li
0 .993988 1 0 cmyk
@
grestore
61.32 152.66 mo
51.238 142.578 li
51.238 152.66 mo
61.32 142.578 li
0 .993988 1 0 cmyk
@
135.48 266.781 mo
125.398 256.699 li
125.398 266.781 mo
135.48 256.699 li
@
209.641 344.66 mo
199.559 334.578 li
199.559 344.66 mo
209.641 334.578 li
@
283.801 284.422 mo
273.719 274.34 li
273.719 284.422 mo
283.801 274.34 li
@
358.078 292.219 mo
348 282.141 li
348 292.219 mo
358.078 282.141 li
@
432.238 271.578 mo
422.16 261.5 li
422.16 271.578 mo
432.238 261.5 li
@
506.398 287.059 mo
496.32 276.98 li
496.32 287.059 mo
506.398 276.98 li
@
580.559 273.738 mo
570.48 263.66 li
570.48 273.738 mo
580.559 263.66 li
@
654.719 280.699 mo
644.641 270.621 li
644.641 280.699 mo
654.719 270.621 li
@
gsave
56.281 29.039 mo
650.398 29.039 li
650.398 509.16 li
56.281 509.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
56.281 161.039 mo
130.559 307.078 li
204.719 339.602 li
278.879 282.84 li
353.039 277.922 li
427.199 283.078 li
501.359 270.961 li
575.641 284.762 li
649.801 273.719 li
.62829 .284672 0 0 cmyk
@
grestore
60.84 165.621 mo
51.719 156.5 li
51.719 165.621 mo
60.84 156.5 li
.62829 .284672 0 0 cmyk
@
135 311.66 mo
125.879 302.539 li
125.879 311.66 mo
135 302.539 li
@
209.16 344.18 mo
200.039 335.059 li
200.039 344.18 mo
209.16 335.059 li
@
283.32 287.301 mo
274.199 278.18 li
274.199 287.301 mo
283.32 278.18 li
@
357.602 282.379 mo
348.48 273.262 li
348.48 282.379 mo
357.602 273.262 li
@
431.762 287.66 mo
422.641 278.539 li
422.641 287.66 mo
431.762 278.539 li
@
505.922 275.539 mo
496.801 266.422 li
496.801 275.539 mo
505.922 266.422 li
@
580.078 289.34 mo
570.961 280.219 li
570.961 289.34 mo
580.078 280.219 li
@
654.238 278.301 mo
645.121 269.18 li
645.121 278.301 mo
654.238 269.18 li
@
gsave
56.281 29.039 mo
650.398 29.039 li
650.398 509.16 li
56.281 509.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
56.281 157.441 mo
130.559 258.961 li
204.719 351.359 li
278.879 336.602 li
353.039 283.801 li
427.199 285.84 li
501.359 290.039 li
575.641 276.238 li
649.801 324.359 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
61.32 162.379 mo
51.238 152.301 li
51.238 162.379 mo
61.32 152.301 li
.0321965 .622736 .922606 .000579843 cmyk
@
135.48 264.02 mo
125.398 253.941 li
125.398 264.02 mo
135.48 253.941 li
@
209.641 356.422 mo
199.559 346.34 li
199.559 356.422 mo
209.641 346.34 li
@
283.801 341.539 mo
273.719 331.461 li
273.719 341.539 mo
283.801 331.461 li
@
358.078 288.738 mo
348 278.66 li
348 288.738 mo
358.078 278.66 li
@
432.238 290.898 mo
422.16 280.82 li
422.16 290.898 mo
432.238 280.82 li
@
506.398 294.98 mo
496.32 284.898 li
496.32 294.98 mo
506.398 284.898 li
@
580.559 281.18 mo
570.48 271.102 li
570.48 281.18 mo
580.559 271.102 li
@
654.719 329.422 mo
644.641 319.34 li
644.641 329.422 mo
654.719 319.34 li
@
gsave
56.281 29.039 mo
650.398 29.039 li
650.398 509.16 li
56.281 509.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
56.281 157.441 mo
130.559 262.559 li
204.719 338.281 li
278.879 321 li
353.039 275.16 li
427.199 275.762 li
501.359 293.398 li
575.641 290.039 li
649.801 317.879 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
61.32 162.379 mo
51.238 152.301 li
51.238 162.379 mo
61.32 152.301 li
.621118 .109194 .980743 .0040589 cmyk
@
135.48 267.5 mo
125.398 257.422 li
125.398 267.5 mo
135.48 257.422 li
@
209.641 343.34 mo
199.559 333.262 li
199.559 343.34 mo
209.641 333.262 li
@
283.801 326.059 mo
273.719 315.98 li
273.719 326.059 mo
283.801 315.98 li
@
358.078 280.102 mo
348 270.02 li
348 280.102 mo
358.078 270.02 li
@
432.238 280.699 mo
422.16 270.621 li
422.16 280.699 mo
432.238 270.621 li
@
506.398 298.461 mo
496.32 288.379 li
496.32 298.461 mo
506.398 288.379 li
@
580.559 294.98 mo
570.48 284.898 li
570.48 294.98 mo
580.559 284.898 li
@
654.719 322.82 mo
644.641 312.738 li
644.641 322.82 mo
654.719 312.738 li
@
gsave
56.281 29.039 mo
650.398 29.039 li
650.398 509.16 li
56.281 509.16 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
56.281 146.281 mo
130.559 262.559 li
204.719 355.559 li
278.879 315.238 li
353.039 294.719 li
427.199 275.52 li
501.359 288.238 li
575.641 285.48 li
649.801 320.398 li
0 .993988 1 0 cmyk
@
grestore
61.32 151.34 mo
51.238 141.262 li
51.238 151.34 mo
61.32 141.262 li
0 .993988 1 0 cmyk
@
135.48 267.5 mo
125.398 257.422 li
125.398 267.5 mo
135.48 257.422 li
@
209.641 360.5 mo
199.559 350.422 li
199.559 360.5 mo
209.641 350.422 li
@
283.801 320.18 mo
273.719 310.102 li
273.719 320.18 mo
283.801 310.102 li
@
358.078 299.781 mo
348 289.699 li
348 299.781 mo
358.078 289.699 li
@
432.238 280.461 mo
422.16 270.379 li
422.16 280.461 mo
432.238 270.379 li
@
506.398 293.301 mo
496.32 283.219 li
496.32 293.301 mo
506.398 283.219 li
@
580.559 290.539 mo
570.48 280.461 li
570.48 290.539 mo
580.559 280.461 li
@
654.719 325.34 mo
644.641 315.262 li
644.641 325.34 mo
654.719 315.262 li
@
36.238 499.145 mo
43.336 499.145 li
43.336 516.235 li
36.238 516.235 li
cp
0 0 0 0 cmyk
ef
42.902 508.102 mo
42.898 508.785 42.844 509.41 42.738 509.973 cv
42.629 510.539 42.453 511.023 42.203 511.426 cv
41.953 511.832 41.625 512.145 41.227 512.363 cv
40.82 512.586 40.324 512.695 39.738 512.695 cv
39.176 512.695 38.707 512.598 38.324 512.398 cv
37.941 512.199 37.633 511.906 37.398 511.52 cv
37.164 511.133 36.996 510.656 36.902 510.09 cv
36.801 509.527 36.754 508.879 36.758 508.145 cv
36.754 507.469 36.809 506.848 36.922 506.281 cv
37.027 505.715 37.207 505.23 37.457 504.824 cv
37.703 504.422 38.027 504.105 38.43 503.883 cv
38.832 503.664 39.324 503.555 39.914 503.551 cv
40.473 503.555 40.945 503.656 41.332 503.852 cv
41.711 504.055 42.02 504.348 42.254 504.73 cv
42.484 505.121 42.652 505.594 42.754 506.156 cv
42.852 506.723 42.898 507.371 42.902 508.102 cv
cp
41.695 508.184 mo
41.691 507.742 41.676 507.348 41.645 506.992 cv
41.609 506.641 41.563 506.328 41.504 506.059 cv
41.438 505.789 41.355 505.555 41.262 505.359 cv
41.16 505.164 41.043 505.004 40.91 504.879 cv
40.77 504.754 40.613 504.664 40.438 504.605 cv
40.262 504.551 40.066 504.523 39.848 504.52 cv
39.457 504.523 39.141 504.613 38.898 504.793 cv
38.656 504.977 38.465 505.227 38.324 505.547 cv
38.184 505.867 38.086 506.246 38.039 506.676 cv
37.984 507.109 37.961 507.57 37.965 508.062 cv
37.961 508.73 37.996 509.297 38.066 509.758 cv
38.137 510.227 38.246 510.605 38.395 510.895 cv
38.543 511.191 38.73 511.402 38.965 511.531 cv
39.191 511.668 39.473 511.734 39.805 511.73 cv
40.059 511.734 40.285 511.691 40.48 511.605 cv
40.676 511.523 40.84 511.406 40.98 511.25 cv
41.117 511.098 41.234 510.914 41.328 510.699 cv
41.418 510.484 41.492 510.246 41.551 509.984 cv
41.602 509.727 41.641 509.445 41.664 509.137 cv
41.684 508.836 41.691 508.516 41.695 508.184 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
36.238 459.199 mo
43.336 459.199 li
43.336 476.289 li
36.238 476.289 li
cp
0 0 0 0 cmyk
ef
42.555 469.758 mo
42.555 470.234 42.473 470.656 42.313 471.027 cv
42.152 471.398 41.926 471.711 41.637 471.965 cv
41.34 472.219 40.992 472.414 40.59 472.543 cv
40.184 472.676 39.734 472.738 39.242 472.738 cv
38.965 472.738 38.703 472.719 38.461 472.68 cv
38.211 472.641 37.992 472.594 37.805 472.539 cv
37.609 472.484 37.453 472.43 37.328 472.371 cv
37.203 472.32 37.125 472.277 37.094 472.242 cv
37.059 472.211 37.035 472.18 37.023 472.152 cv
37.008 472.125 36.992 472.094 36.984 472.051 cv
36.969 472.016 36.961 471.965 36.961 471.902 cv
36.953 471.844 36.953 471.773 36.953 471.691 cv
36.953 471.617 36.957 471.547 36.965 471.484 cv
36.973 471.422 36.984 471.371 37.004 471.332 cv
37.02 471.293 37.039 471.266 37.066 471.246 cv
37.09 471.23 37.121 471.223 37.152 471.219 cv
37.199 471.223 37.27 471.25 37.363 471.305 cv
37.457 471.363 37.586 471.426 37.75 471.492 cv
37.914 471.559 38.113 471.621 38.355 471.68 cv
38.59 471.738 38.875 471.766 39.211 471.766 cv
39.512 471.766 39.793 471.73 40.051 471.656 cv
40.305 471.586 40.527 471.473 40.715 471.316 cv
40.898 471.164 41.043 470.969 41.148 470.73 cv
41.254 470.496 41.305 470.207 41.309 469.867 cv
41.305 469.586 41.262 469.336 41.172 469.117 cv
41.082 468.898 40.945 468.719 40.762 468.574 cv
40.574 468.434 40.34 468.328 40.059 468.254 cv
39.773 468.184 39.434 468.145 39.047 468.145 cv
38.762 468.145 38.523 468.16 38.324 468.187 cv
38.121 468.219 37.934 468.234 37.762 468.23 cv
37.633 468.234 37.539 468.203 37.488 468.141 cv
37.43 468.082 37.402 467.969 37.406 467.797 cv
37.406 464.184 li
37.402 464.035 37.438 463.926 37.512 463.848 cv
37.578 463.777 37.68 463.738 37.816 463.738 cv
41.746 463.738 li
41.781 463.738 41.816 463.75 41.852 463.77 cv
41.883 463.793 41.91 463.824 41.938 463.863 cv
41.957 463.906 41.973 463.957 41.988 464.02 cv
41.996 464.086 42.004 464.164 42.008 464.246 cv
42.004 464.414 41.98 464.539 41.941 464.629 cv
41.895 464.723 41.836 464.77 41.758 464.766 cv
38.586 464.766 li
38.586 467.254 li
38.738 467.234 38.895 467.223 39.059 467.215 cv
39.215 467.211 39.402 467.207 39.617 467.207 cv
40.102 467.207 40.527 467.27 40.895 467.391 cv
41.258 467.512 41.563 467.684 41.813 467.902 cv
42.055 468.129 42.242 468.395 42.367 468.707 cv
42.492 469.023 42.555 469.375 42.555 469.758 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
29.148 419.262 mo
43.339 419.262 li
43.339 436.352 li
29.148 436.352 li
cp
0 0 0 0 cmyk
ef
35.516 432.184 mo
35.512 432.273 35.504 432.344 35.492 432.402 cv
35.477 432.465 35.457 432.516 35.438 432.547 cv
35.414 432.586 35.391 432.609 35.359 432.625 cv
35.328 432.641 35.297 432.648 35.27 432.648 cv
30.633 432.648 li
30.598 432.648 30.57 432.641 30.543 432.625 cv
30.516 432.609 30.488 432.586 30.465 432.547 cv
30.438 432.516 30.418 432.465 30.406 432.402 cv
30.391 432.344 30.383 432.273 30.387 432.184 cv
30.383 432.105 30.391 432.031 30.406 431.969 cv
30.418 431.91 30.434 431.863 30.457 431.824 cv
30.473 431.789 30.5 431.758 30.531 431.734 cv
30.563 431.715 30.594 431.707 30.633 431.703 cv
32.484 431.703 li
32.484 424.957 li
30.77 425.977 li
30.68 426.027 30.609 426.055 30.563 426.062 cv
30.508 426.07 30.465 426.062 30.434 426.031 cv
30.398 426.004 30.379 425.953 30.367 425.883 cv
30.355 425.816 30.348 425.73 30.352 425.621 cv
30.348 425.547 30.352 425.48 30.363 425.422 cv
30.367 425.371 30.379 425.324 30.395 425.285 cv
30.406 425.25 30.426 425.219 30.449 425.191 cv
30.473 425.164 30.504 425.137 30.551 425.109 cv
32.594 423.797 li
32.609 423.785 32.629 423.773 32.66 423.766 cv
32.684 423.758 32.719 423.75 32.766 423.738 cv
32.805 423.73 32.855 423.723 32.91 423.719 cv
32.965 423.719 33.031 423.719 33.117 423.715 cv
33.223 423.719 33.316 423.723 33.391 423.73 cv
33.461 423.738 33.516 423.754 33.563 423.77 cv
33.602 423.789 33.629 423.809 33.645 423.832 cv
33.652 423.859 33.66 423.883 33.664 423.906 cv
33.664 431.703 li
35.27 431.703 li
35.305 431.707 35.34 431.715 35.371 431.734 cv
35.402 431.758 35.426 431.789 35.449 431.824 cv
35.465 431.863 35.48 431.91 35.496 431.969 cv
35.504 432.031 35.512 432.105 35.516 432.184 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.867 428.191 mo
42.863 428.875 42.813 429.496 42.707 430.059 cv
42.598 430.621 42.418 431.105 42.172 431.508 cv
41.918 431.914 41.59 432.227 41.191 432.445 cv
40.785 432.668 40.293 432.777 39.707 432.777 cv
39.148 432.777 38.676 432.68 38.297 432.48 cv
37.914 432.285 37.609 431.992 37.375 431.605 cv
37.141 431.219 36.973 430.746 36.879 430.18 cv
36.777 429.617 36.73 428.969 36.73 428.234 cv
36.73 427.562 36.785 426.941 36.895 426.375 cv
37.004 425.812 37.18 425.328 37.43 424.922 cv
37.672 424.52 37.996 424.207 38.402 423.98 cv
38.801 423.762 39.297 423.648 39.887 423.648 cv
40.445 423.648 40.918 423.75 41.301 423.945 cv
41.684 424.148 41.988 424.441 42.223 424.824 cv
42.453 425.215 42.621 425.687 42.719 426.25 cv
42.816 426.812 42.863 427.461 42.867 428.191 cv
cp
41.66 428.273 mo
41.656 427.832 41.641 427.434 41.613 427.082 cv
41.578 426.73 41.531 426.422 41.473 426.152 cv
41.406 425.883 41.328 425.652 41.23 425.457 cv
41.133 425.266 41.016 425.105 40.879 424.977 cv
40.738 424.852 40.578 424.758 40.406 424.699 cv
40.227 424.645 40.031 424.617 39.816 424.613 cv
39.426 424.617 39.109 424.707 38.871 424.891 cv
38.625 425.074 38.434 425.328 38.297 425.645 cv
38.156 425.965 38.063 426.336 38.012 426.766 cv
37.961 427.195 37.938 427.66 37.938 428.152 cv
37.938 428.816 37.969 429.379 38.039 429.84 cv
38.105 430.309 38.215 430.687 38.367 430.977 cv
38.512 431.273 38.703 431.484 38.934 431.613 cv
39.164 431.75 39.445 431.816 39.777 431.812 cv
40.031 431.816 40.254 431.777 40.449 431.691 cv
40.641 431.613 40.809 431.492 40.949 431.336 cv
41.09 431.184 41.203 431 41.297 430.785 cv
41.383 430.57 41.457 430.332 41.516 430.07 cv
41.566 429.812 41.605 429.531 41.629 429.227 cv
41.648 428.922 41.656 428.605 41.66 428.273 cv
cp
f
29.148 379.32 mo
43.339 379.32 li
43.339 396.41 li
29.148 396.41 li
cp
0 0 0 0 cmyk
ef
35.516 392.246 mo
35.512 392.336 35.504 392.406 35.492 392.465 cv
35.477 392.527 35.457 392.578 35.438 392.609 cv
35.414 392.648 35.391 392.672 35.359 392.687 cv
35.328 392.703 35.297 392.711 35.27 392.711 cv
30.633 392.711 li
30.598 392.711 30.57 392.703 30.543 392.687 cv
30.516 392.672 30.488 392.648 30.465 392.609 cv
30.438 392.578 30.418 392.527 30.406 392.465 cv
30.391 392.406 30.383 392.336 30.387 392.246 cv
30.383 392.168 30.391 392.094 30.406 392.031 cv
30.418 391.973 30.434 391.926 30.457 391.887 cv
30.473 391.852 30.5 391.82 30.531 391.797 cv
30.563 391.777 30.594 391.77 30.633 391.766 cv
32.484 391.766 li
32.484 385.02 li
30.77 386.039 li
30.68 386.09 30.609 386.117 30.563 386.125 cv
30.508 386.133 30.465 386.125 30.434 386.094 cv
30.398 386.066 30.379 386.016 30.367 385.945 cv
30.355 385.879 30.348 385.793 30.352 385.684 cv
30.348 385.609 30.352 385.543 30.363 385.484 cv
30.367 385.434 30.379 385.387 30.395 385.348 cv
30.406 385.312 30.426 385.281 30.449 385.254 cv
30.473 385.227 30.504 385.199 30.551 385.172 cv
32.594 383.859 li
32.609 383.848 32.629 383.836 32.66 383.828 cv
32.684 383.82 32.719 383.812 32.766 383.801 cv
32.805 383.793 32.855 383.785 32.91 383.781 cv
32.965 383.781 33.031 383.781 33.117 383.777 cv
33.223 383.781 33.316 383.785 33.391 383.793 cv
33.461 383.801 33.516 383.816 33.563 383.832 cv
33.602 383.852 33.629 383.871 33.645 383.895 cv
33.652 383.922 33.66 383.945 33.664 383.969 cv
33.664 391.766 li
35.27 391.766 li
35.305 391.77 35.34 391.777 35.371 391.797 cv
35.402 391.82 35.426 391.852 35.449 391.887 cv
35.465 391.926 35.48 391.973 35.496 392.031 cv
35.504 392.094 35.512 392.168 35.516 392.246 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.531 389.859 mo
42.531 390.336 42.449 390.758 42.289 391.129 cv
42.129 391.5 41.902 391.812 41.613 392.066 cv
41.316 392.32 40.969 392.516 40.566 392.645 cv
40.16 392.777 39.711 392.84 39.219 392.84 cv
38.941 392.84 38.68 392.82 38.438 392.781 cv
38.188 392.742 37.969 392.695 37.781 392.641 cv
37.586 392.586 37.43 392.531 37.305 392.473 cv
37.18 392.422 37.102 392.379 37.07 392.344 cv
37.035 392.312 37.012 392.281 37 392.254 cv
36.984 392.227 36.969 392.195 36.961 392.152 cv
36.945 392.117 36.938 392.066 36.938 392.004 cv
36.93 391.945 36.93 391.875 36.93 391.793 cv
36.93 391.719 36.934 391.648 36.941 391.586 cv
36.949 391.523 36.961 391.473 36.98 391.434 cv
36.996 391.395 37.016 391.367 37.043 391.348 cv
37.066 391.332 37.098 391.324 37.129 391.32 cv
37.176 391.324 37.246 391.352 37.34 391.406 cv
37.434 391.465 37.563 391.527 37.727 391.594 cv
37.891 391.66 38.09 391.723 38.332 391.781 cv
38.566 391.84 38.852 391.867 39.188 391.867 cv
39.488 391.867 39.77 391.832 40.027 391.758 cv
40.281 391.687 40.504 391.574 40.691 391.418 cv
40.875 391.266 41.02 391.07 41.125 390.832 cv
41.23 390.598 41.281 390.309 41.285 389.969 cv
41.281 389.687 41.238 389.437 41.148 389.219 cv
41.059 389 40.922 388.82 40.738 388.676 cv
40.551 388.535 40.316 388.43 40.035 388.355 cv
39.75 388.285 39.41 388.246 39.023 388.246 cv
38.738 388.246 38.5 388.262 38.301 388.289 cv
38.098 388.32 37.91 388.336 37.738 388.332 cv
37.609 388.336 37.516 388.305 37.465 388.242 cv
37.406 388.184 37.379 388.07 37.383 387.898 cv
37.383 384.285 li
37.379 384.137 37.414 384.027 37.488 383.949 cv
37.555 383.879 37.656 383.84 37.793 383.84 cv
41.723 383.84 li
41.758 383.84 41.793 383.852 41.828 383.871 cv
41.859 383.895 41.887 383.926 41.914 383.965 cv
41.934 384.008 41.949 384.059 41.965 384.121 cv
41.973 384.187 41.98 384.266 41.984 384.348 cv
41.98 384.516 41.957 384.641 41.918 384.73 cv
41.871 384.824 41.813 384.871 41.734 384.867 cv
38.563 384.867 li
38.563 387.355 li
38.715 387.336 38.871 387.324 39.035 387.316 cv
39.191 387.312 39.379 387.309 39.594 387.309 cv
40.078 387.309 40.504 387.371 40.871 387.492 cv
41.234 387.613 41.539 387.785 41.789 388.004 cv
42.031 388.23 42.219 388.496 42.344 388.809 cv
42.469 389.125 42.531 389.477 42.531 389.859 cv
cp
f
29.148 339.371 mo
43.339 339.371 li
43.339 356.461 li
29.148 356.461 li
cp
0 0 0 0 cmyk
ef
35.496 352.242 mo
35.492 352.328 35.488 352.402 35.477 352.465 cv
35.465 352.531 35.449 352.586 35.43 352.625 cv
35.406 352.672 35.379 352.703 35.348 352.719 cv
35.313 352.742 35.273 352.75 35.234 352.75 cv
30.332 352.75 li
30.27 352.75 30.211 352.742 30.164 352.727 cv
30.113 352.711 30.074 352.687 30.039 352.648 cv
30.004 352.617 29.977 352.562 29.965 352.492 cv
29.945 352.422 29.938 352.336 29.941 352.234 cv
29.938 352.145 29.941 352.066 29.949 351.996 cv
29.953 351.93 29.969 351.871 29.996 351.816 cv
30.02 351.766 30.051 351.711 30.086 351.656 cv
30.121 351.605 30.164 351.551 30.223 351.488 cv
31.996 349.664 li
32.406 349.246 32.734 348.871 32.984 348.535 cv
33.23 348.207 33.422 347.902 33.555 347.625 cv
33.688 347.352 33.773 347.102 33.82 346.875 cv
33.859 346.652 33.883 346.441 33.883 346.246 cv
33.883 346.051 33.848 345.867 33.781 345.687 cv
33.715 345.516 33.621 345.359 33.496 345.223 cv
33.371 345.094 33.215 344.988 33.027 344.906 cv
32.84 344.832 32.621 344.793 32.375 344.789 cv
32.086 344.793 31.828 344.832 31.602 344.906 cv
31.371 344.988 31.172 345.074 31 345.16 cv
30.828 345.254 30.684 345.336 30.566 345.414 cv
30.449 345.492 30.363 345.531 30.313 345.531 cv
30.277 345.531 30.246 345.523 30.223 345.504 cv
30.191 345.488 30.172 345.457 30.156 345.414 cv
30.141 345.375 30.125 345.32 30.117 345.25 cv
30.105 345.184 30.102 345.102 30.105 345.004 cv
30.102 344.937 30.105 344.879 30.113 344.828 cv
30.117 344.777 30.125 344.734 30.137 344.695 cv
30.145 344.66 30.16 344.625 30.18 344.594 cv
30.199 344.562 30.234 344.523 30.293 344.473 cv
30.344 344.426 30.438 344.359 30.574 344.277 cv
30.707 344.195 30.879 344.117 31.082 344.035 cv
31.285 343.957 31.508 343.887 31.754 343.832 cv
31.996 343.777 32.254 343.75 32.527 343.75 cv
32.953 343.75 33.328 343.812 33.652 343.934 cv
33.973 344.055 34.238 344.219 34.453 344.43 cv
34.664 344.641 34.824 344.887 34.93 345.16 cv
35.035 345.441 35.09 345.738 35.09 346.051 cv
35.09 346.34 35.063 346.621 35.012 346.898 cv
34.961 347.184 34.855 347.488 34.695 347.812 cv
34.531 348.141 34.297 348.504 33.992 348.902 cv
33.684 349.305 33.277 349.766 32.773 350.281 cv
31.367 351.75 li
35.227 351.75 li
35.258 351.754 35.293 351.766 35.332 351.781 cv
35.363 351.805 35.395 351.836 35.422 351.875 cv
35.445 351.918 35.465 351.969 35.477 352.027 cv
35.488 352.094 35.492 352.164 35.496 352.242 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.867 348.293 mo
42.863 348.977 42.813 349.598 42.707 350.16 cv
42.598 350.723 42.418 351.207 42.172 351.609 cv
41.918 352.016 41.59 352.328 41.191 352.547 cv
40.785 352.77 40.293 352.879 39.707 352.879 cv
39.148 352.879 38.676 352.781 38.297 352.582 cv
37.914 352.387 37.609 352.094 37.375 351.707 cv
37.141 351.32 36.973 350.848 36.879 350.281 cv
36.777 349.719 36.73 349.07 36.73 348.336 cv
36.73 347.664 36.785 347.043 36.895 346.477 cv
37.004 345.914 37.18 345.43 37.43 345.023 cv
37.672 344.621 37.996 344.309 38.402 344.082 cv
38.801 343.863 39.297 343.75 39.887 343.75 cv
40.445 343.75 40.918 343.852 41.301 344.047 cv
41.684 344.25 41.988 344.543 42.223 344.926 cv
42.453 345.316 42.621 345.789 42.719 346.352 cv
42.816 346.914 42.863 347.562 42.867 348.293 cv
cp
41.66 348.375 mo
41.656 347.934 41.641 347.535 41.613 347.184 cv
41.578 346.832 41.531 346.523 41.473 346.254 cv
41.406 345.984 41.328 345.754 41.23 345.559 cv
41.133 345.367 41.016 345.207 40.879 345.078 cv
40.738 344.953 40.578 344.859 40.406 344.801 cv
40.227 344.746 40.031 344.719 39.816 344.715 cv
39.426 344.719 39.109 344.809 38.871 344.992 cv
38.625 345.176 38.434 345.43 38.297 345.746 cv
38.156 346.066 38.063 346.437 38.012 346.867 cv
37.961 347.297 37.938 347.762 37.938 348.254 cv
37.938 348.918 37.969 349.48 38.039 349.941 cv
38.105 350.41 38.215 350.789 38.367 351.078 cv
38.512 351.375 38.703 351.586 38.934 351.715 cv
39.164 351.852 39.445 351.918 39.777 351.914 cv
40.031 351.918 40.254 351.879 40.449 351.793 cv
40.641 351.715 40.809 351.594 40.949 351.437 cv
41.09 351.285 41.203 351.102 41.297 350.887 cv
41.383 350.672 41.457 350.434 41.516 350.172 cv
41.566 349.914 41.605 349.633 41.629 349.328 cv
41.648 349.023 41.656 348.707 41.66 348.375 cv
cp
f
29.148 299.43 mo
43.339 299.43 li
43.339 316.52 li
29.148 316.52 li
cp
0 0 0 0 cmyk
ef
35.496 312.312 mo
35.492 312.398 35.488 312.473 35.477 312.535 cv
35.465 312.602 35.449 312.656 35.43 312.695 cv
35.406 312.742 35.379 312.773 35.348 312.789 cv
35.313 312.812 35.273 312.82 35.234 312.82 cv
30.332 312.82 li
30.27 312.82 30.211 312.812 30.164 312.797 cv
30.113 312.781 30.074 312.758 30.039 312.719 cv
30.004 312.687 29.977 312.633 29.965 312.562 cv
29.945 312.492 29.938 312.406 29.941 312.305 cv
29.938 312.215 29.941 312.137 29.949 312.066 cv
29.953 312 29.969 311.941 29.996 311.887 cv
30.02 311.836 30.051 311.781 30.086 311.727 cv
30.121 311.676 30.164 311.621 30.223 311.559 cv
31.996 309.734 li
32.406 309.316 32.734 308.941 32.984 308.605 cv
33.23 308.277 33.422 307.973 33.555 307.695 cv
33.688 307.422 33.773 307.172 33.82 306.945 cv
33.859 306.723 33.883 306.512 33.883 306.316 cv
33.883 306.121 33.848 305.937 33.781 305.758 cv
33.715 305.586 33.621 305.43 33.496 305.293 cv
33.371 305.164 33.215 305.059 33.027 304.977 cv
32.84 304.902 32.621 304.863 32.375 304.859 cv
32.086 304.863 31.828 304.902 31.602 304.977 cv
31.371 305.059 31.172 305.145 31 305.23 cv
30.828 305.324 30.684 305.406 30.566 305.484 cv
30.449 305.562 30.363 305.602 30.313 305.602 cv
30.277 305.602 30.246 305.594 30.223 305.574 cv
30.191 305.559 30.172 305.527 30.156 305.484 cv
30.141 305.445 30.125 305.391 30.117 305.32 cv
30.105 305.254 30.102 305.172 30.105 305.074 cv
30.102 305.008 30.105 304.949 30.113 304.898 cv
30.117 304.848 30.125 304.805 30.137 304.766 cv
30.145 304.73 30.16 304.695 30.18 304.664 cv
30.199 304.633 30.234 304.594 30.293 304.543 cv
30.344 304.496 30.438 304.43 30.574 304.348 cv
30.707 304.266 30.879 304.187 31.082 304.105 cv
31.285 304.027 31.508 303.957 31.754 303.902 cv
31.996 303.848 32.254 303.82 32.527 303.82 cv
32.953 303.82 33.328 303.883 33.652 304.004 cv
33.973 304.125 34.238 304.289 34.453 304.5 cv
34.664 304.711 34.824 304.957 34.93 305.23 cv
35.035 305.512 35.09 305.809 35.09 306.121 cv
35.09 306.41 35.063 306.691 35.012 306.969 cv
34.961 307.254 34.855 307.559 34.695 307.883 cv
34.531 308.211 34.297 308.574 33.992 308.973 cv
33.684 309.375 33.277 309.836 32.773 310.352 cv
31.367 311.82 li
35.227 311.82 li
35.258 311.824 35.293 311.836 35.332 311.852 cv
35.363 311.875 35.395 311.906 35.422 311.945 cv
35.445 311.988 35.465 312.039 35.477 312.098 cv
35.488 312.164 35.492 312.234 35.496 312.312 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.531 309.969 mo
42.531 310.445 42.449 310.867 42.289 311.238 cv
42.129 311.609 41.902 311.922 41.613 312.176 cv
41.316 312.43 40.969 312.625 40.566 312.754 cv
40.16 312.887 39.711 312.949 39.219 312.949 cv
38.941 312.949 38.68 312.93 38.438 312.891 cv
38.188 312.852 37.969 312.805 37.781 312.75 cv
37.586 312.695 37.43 312.641 37.305 312.582 cv
37.18 312.531 37.102 312.488 37.07 312.453 cv
37.035 312.422 37.012 312.391 37 312.363 cv
36.984 312.336 36.969 312.305 36.961 312.262 cv
36.945 312.227 36.938 312.176 36.938 312.113 cv
36.93 312.055 36.93 311.984 36.93 311.902 cv
36.93 311.828 36.934 311.758 36.941 311.695 cv
36.949 311.633 36.961 311.582 36.98 311.543 cv
36.996 311.504 37.016 311.477 37.043 311.457 cv
37.066 311.441 37.098 311.434 37.129 311.43 cv
37.176 311.434 37.246 311.461 37.34 311.516 cv
37.434 311.574 37.563 311.637 37.727 311.703 cv
37.891 311.77 38.09 311.832 38.332 311.891 cv
38.566 311.949 38.852 311.977 39.188 311.977 cv
39.488 311.977 39.77 311.941 40.027 311.867 cv
40.281 311.797 40.504 311.684 40.691 311.527 cv
40.875 311.375 41.02 311.18 41.125 310.941 cv
41.23 310.707 41.281 310.418 41.285 310.078 cv
41.281 309.797 41.238 309.547 41.148 309.328 cv
41.059 309.109 40.922 308.93 40.738 308.785 cv
40.551 308.645 40.316 308.539 40.035 308.465 cv
39.75 308.395 39.41 308.355 39.023 308.355 cv
38.738 308.355 38.5 308.371 38.301 308.398 cv
38.098 308.43 37.91 308.445 37.738 308.441 cv
37.609 308.445 37.516 308.414 37.465 308.352 cv
37.406 308.293 37.379 308.18 37.383 308.008 cv
37.383 304.395 li
37.379 304.246 37.414 304.137 37.488 304.059 cv
37.555 303.988 37.656 303.949 37.793 303.949 cv
41.723 303.949 li
41.758 303.949 41.793 303.961 41.828 303.98 cv
41.859 304.004 41.887 304.035 41.914 304.074 cv
41.934 304.117 41.949 304.168 41.965 304.23 cv
41.973 304.297 41.98 304.375 41.984 304.457 cv
41.98 304.625 41.957 304.75 41.918 304.84 cv
41.871 304.934 41.813 304.98 41.734 304.977 cv
38.563 304.977 li
38.563 307.465 li
38.715 307.445 38.871 307.434 39.035 307.426 cv
39.191 307.422 39.379 307.418 39.594 307.418 cv
40.078 307.418 40.504 307.48 40.871 307.602 cv
41.234 307.723 41.539 307.895 41.789 308.113 cv
42.031 308.34 42.219 308.605 42.344 308.918 cv
42.469 309.234 42.531 309.586 42.531 309.969 cv
cp
f
29.148 259.488 mo
43.339 259.488 li
43.339 276.578 li
29.148 276.578 li
cp
0 0 0 0 cmyk
ef
35.426 270.324 mo
35.422 270.734 35.352 271.102 35.211 271.426 cv
35.066 271.754 34.863 272.035 34.602 272.266 cv
34.336 272.5 34.008 272.676 33.621 272.801 cv
33.23 272.926 32.793 272.988 32.309 272.988 cv
32.004 272.988 31.727 272.961 31.473 272.914 cv
31.211 272.867 30.98 272.816 30.785 272.746 cv
30.582 272.684 30.418 272.613 30.285 272.543 cv
30.152 272.473 30.066 272.422 30.035 272.387 cv
29.996 272.359 29.973 272.328 29.957 272.293 cv
29.938 272.262 29.918 272.223 29.906 272.176 cv
29.891 272.133 29.883 272.078 29.875 272.008 cv
29.867 271.945 29.863 271.863 29.867 271.762 cv
29.863 271.602 29.879 271.488 29.914 271.422 cv
29.945 271.359 29.992 271.324 30.055 271.324 cv
30.098 271.324 30.18 271.363 30.305 271.434 cv
30.426 271.512 30.586 271.59 30.781 271.672 cv
30.973 271.758 31.199 271.836 31.465 271.906 cv
31.723 271.98 32.016 272.016 32.336 272.016 cv
32.645 272.016 32.914 271.977 33.152 271.898 cv
33.383 271.82 33.582 271.711 33.742 271.57 cv
33.898 271.43 34.016 271.262 34.098 271.066 cv
34.176 270.871 34.215 270.66 34.219 270.434 cv
34.215 270.184 34.164 269.957 34.066 269.754 cv
33.961 269.555 33.813 269.383 33.621 269.234 cv
33.422 269.09 33.184 268.977 32.898 268.898 cv
32.613 268.82 32.289 268.781 31.926 268.781 cv
31.055 268.781 li
31.012 268.781 30.977 268.773 30.941 268.758 cv
30.906 268.742 30.875 268.715 30.852 268.676 cv
30.824 268.641 30.805 268.594 30.789 268.535 cv
30.773 268.477 30.766 268.398 30.766 268.301 cv
30.766 268.215 30.77 268.145 30.785 268.086 cv
30.793 268.031 30.813 267.984 30.844 267.949 cv
30.867 267.914 30.898 267.891 30.93 267.871 cv
30.961 267.859 30.996 267.852 31.039 267.848 cv
31.813 267.848 li
32.113 267.852 32.383 267.812 32.625 267.73 cv
32.859 267.656 33.063 267.543 33.234 267.395 cv
33.398 267.25 33.527 267.074 33.617 266.871 cv
33.707 266.668 33.754 266.441 33.754 266.187 cv
33.754 266.008 33.723 265.832 33.664 265.664 cv
33.602 265.5 33.512 265.355 33.395 265.23 cv
33.273 265.105 33.121 265.008 32.941 264.937 cv
32.754 264.867 32.543 264.832 32.301 264.832 cv
32.035 264.832 31.789 264.875 31.57 264.953 cv
31.344 265.035 31.148 265.121 30.977 265.211 cv
30.801 265.305 30.656 265.391 30.543 265.469 cv
30.43 265.551 30.348 265.59 30.305 265.586 cv
30.27 265.59 30.242 265.582 30.219 265.57 cv
30.191 265.559 30.172 265.535 30.156 265.5 cv
30.141 265.469 30.129 265.422 30.121 265.355 cv
30.113 265.297 30.109 265.215 30.113 265.113 cv
30.109 265.047 30.109 264.988 30.117 264.934 cv
30.117 264.883 30.129 264.836 30.145 264.793 cv
30.16 264.758 30.176 264.723 30.195 264.687 cv
30.211 264.66 30.242 264.621 30.285 264.574 cv
30.328 264.531 30.414 264.469 30.551 264.387 cv
30.68 264.305 30.844 264.227 31.039 264.145 cv
31.23 264.066 31.453 263.996 31.711 263.941 cv
31.961 263.887 32.234 263.859 32.531 263.859 cv
32.938 263.859 33.301 263.914 33.613 264.016 cv
33.926 264.125 34.184 264.273 34.395 264.461 cv
34.598 264.656 34.754 264.887 34.859 265.152 cv
34.961 265.422 35.012 265.715 35.016 266.039 cv
35.012 266.32 34.977 266.582 34.906 266.816 cv
34.832 267.059 34.723 267.27 34.582 267.453 cv
34.438 267.641 34.266 267.797 34.063 267.926 cv
33.855 268.059 33.617 268.152 33.348 268.199 cv
33.348 268.211 li
33.652 268.246 33.934 268.32 34.188 268.441 cv
34.441 268.562 34.66 268.715 34.844 268.898 cv
35.023 269.082 35.164 269.297 35.27 269.539 cv
35.371 269.785 35.422 270.047 35.426 270.324 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.867 268.402 mo
42.863 269.086 42.813 269.707 42.707 270.27 cv
42.598 270.832 42.418 271.316 42.172 271.719 cv
41.918 272.125 41.59 272.437 41.191 272.656 cv
40.785 272.879 40.293 272.988 39.707 272.988 cv
39.148 272.988 38.676 272.891 38.297 272.691 cv
37.914 272.496 37.609 272.203 37.375 271.816 cv
37.141 271.43 36.973 270.957 36.879 270.391 cv
36.777 269.828 36.73 269.18 36.73 268.445 cv
36.73 267.773 36.785 267.152 36.895 266.586 cv
37.004 266.023 37.18 265.539 37.43 265.133 cv
37.672 264.73 37.996 264.418 38.402 264.191 cv
38.801 263.973 39.297 263.859 39.887 263.859 cv
40.445 263.859 40.918 263.961 41.301 264.156 cv
41.684 264.359 41.988 264.652 42.223 265.035 cv
42.453 265.426 42.621 265.898 42.719 266.461 cv
42.816 267.023 42.863 267.672 42.867 268.402 cv
cp
41.66 268.484 mo
41.656 268.043 41.641 267.645 41.613 267.293 cv
41.578 266.941 41.531 266.633 41.473 266.363 cv
41.406 266.094 41.328 265.863 41.23 265.668 cv
41.133 265.477 41.016 265.316 40.879 265.187 cv
40.738 265.062 40.578 264.969 40.406 264.91 cv
40.227 264.855 40.031 264.828 39.816 264.824 cv
39.426 264.828 39.109 264.918 38.871 265.102 cv
38.625 265.285 38.434 265.539 38.297 265.855 cv
38.156 266.176 38.063 266.547 38.012 266.977 cv
37.961 267.406 37.938 267.871 37.938 268.363 cv
37.938 269.027 37.969 269.59 38.039 270.051 cv
38.105 270.52 38.215 270.898 38.367 271.187 cv
38.512 271.484 38.703 271.695 38.934 271.824 cv
39.164 271.961 39.445 272.027 39.777 272.023 cv
40.031 272.027 40.254 271.988 40.449 271.902 cv
40.641 271.824 40.809 271.703 40.949 271.547 cv
41.09 271.395 41.203 271.211 41.297 270.996 cv
41.383 270.781 41.457 270.543 41.516 270.281 cv
41.566 270.023 41.605 269.742 41.629 269.437 cv
41.648 269.133 41.656 268.816 41.66 268.484 cv
cp
f
29.148 219.539 mo
43.339 219.539 li
43.339 236.629 li
29.148 236.629 li
cp
0 0 0 0 cmyk
ef
35.438 230.383 mo
35.434 230.793 35.363 231.16 35.223 231.484 cv
35.078 231.812 34.875 232.09 34.613 232.324 cv
34.344 232.559 34.016 232.738 33.629 232.863 cv
33.238 232.988 32.801 233.051 32.313 233.051 cv
32.016 233.051 31.734 233.023 31.477 232.977 cv
31.215 232.93 30.984 232.879 30.785 232.809 cv
30.582 232.746 30.418 232.676 30.285 232.605 cv
30.152 232.535 30.066 232.484 30.035 232.449 cv
29.996 232.418 29.973 232.387 29.957 232.352 cv
29.938 232.324 29.918 232.285 29.906 232.238 cv
29.891 232.195 29.883 232.141 29.875 232.07 cv
29.867 232.008 29.863 231.926 29.867 231.824 cv
29.863 231.66 29.879 231.543 29.914 231.48 cv
29.945 231.418 29.992 231.387 30.059 231.383 cv
30.098 231.387 30.184 231.422 30.309 231.492 cv
30.434 231.566 30.59 231.648 30.785 231.73 cv
30.977 231.82 31.207 231.898 31.469 231.969 cv
31.727 232.043 32.016 232.078 32.34 232.078 cv
32.648 232.078 32.922 232.039 33.156 231.961 cv
33.391 231.883 33.586 231.773 33.746 231.633 cv
33.906 231.492 34.027 231.324 34.105 231.129 cv
34.184 230.934 34.223 230.723 34.227 230.492 cv
34.223 230.242 34.172 230.016 34.074 229.812 cv
33.969 229.613 33.82 229.437 33.629 229.289 cv
33.43 229.145 33.188 229.035 32.906 228.953 cv
32.617 228.879 32.293 228.84 31.93 228.836 cv
31.059 228.836 li
31.02 228.84 30.98 228.832 30.945 228.812 cv
30.91 228.801 30.879 228.773 30.855 228.734 cv
30.824 228.699 30.805 228.652 30.789 228.59 cv
30.773 228.535 30.766 228.457 30.766 228.355 cv
30.766 228.273 30.77 228.199 30.785 228.141 cv
30.797 228.086 30.816 228.043 30.844 228.004 cv
30.867 227.973 30.898 227.945 30.93 227.926 cv
30.961 227.914 30.996 227.906 31.043 227.902 cv
31.816 227.902 li
32.113 227.906 32.387 227.867 32.629 227.785 cv
32.871 227.711 33.074 227.598 33.242 227.449 cv
33.406 227.305 33.535 227.133 33.625 226.926 cv
33.715 226.723 33.758 226.492 33.762 226.238 cv
33.758 226.059 33.73 225.883 33.672 225.715 cv
33.609 225.551 33.52 225.406 33.402 225.281 cv
33.285 225.156 33.133 225.059 32.945 224.988 cv
32.758 224.918 32.543 224.883 32.305 224.879 cv
32.035 224.883 31.793 224.922 31.574 225 cv
31.352 225.082 31.152 225.168 30.98 225.258 cv
30.805 225.352 30.66 225.437 30.547 225.516 cv
30.43 225.598 30.352 225.641 30.309 225.637 cv
30.273 225.641 30.242 225.633 30.219 225.621 cv
30.191 225.609 30.172 225.586 30.16 225.551 cv
30.141 225.52 30.129 225.473 30.125 225.406 cv
30.113 225.348 30.109 225.266 30.113 225.16 cv
30.109 225.094 30.113 225.035 30.121 224.98 cv
30.125 224.934 30.133 224.887 30.148 224.844 cv
30.16 224.809 30.176 224.773 30.195 224.738 cv
30.211 224.707 30.242 224.668 30.289 224.625 cv
30.332 224.582 30.422 224.52 30.555 224.434 cv
30.688 224.352 30.848 224.27 31.043 224.191 cv
31.234 224.113 31.461 224.047 31.715 223.988 cv
31.969 223.937 32.242 223.91 32.539 223.906 cv
32.949 223.91 33.309 223.965 33.621 224.066 cv
33.93 224.176 34.191 224.324 34.402 224.512 cv
34.609 224.707 34.766 224.934 34.867 225.199 cv
34.969 225.469 35.02 225.766 35.023 226.09 cv
35.02 226.371 34.984 226.633 34.914 226.871 cv
34.84 227.113 34.73 227.324 34.59 227.508 cv
34.445 227.695 34.273 227.855 34.07 227.98 cv
33.863 228.113 33.625 228.203 33.355 228.254 cv
33.355 228.266 li
33.66 228.301 33.938 228.379 34.195 228.496 cv
34.445 228.621 34.664 228.773 34.852 228.953 cv
35.031 229.141 35.176 229.352 35.281 229.594 cv
35.383 229.84 35.434 230.105 35.438 230.383 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.543 230.066 mo
42.543 230.547 42.461 230.969 42.301 231.336 cv
42.141 231.707 41.914 232.02 41.621 232.273 cv
41.328 232.527 40.98 232.719 40.574 232.852 cv
40.168 232.984 39.719 233.051 39.227 233.051 cv
38.949 233.051 38.688 233.031 38.441 232.992 cv
38.191 232.953 37.969 232.906 37.781 232.852 cv
37.586 232.797 37.43 232.742 37.309 232.684 cv
37.184 232.629 37.105 232.586 37.07 232.551 cv
37.035 232.523 37.012 232.492 37 232.465 cv
36.984 232.437 36.969 232.406 36.961 232.363 cv
36.945 232.328 36.938 232.277 36.938 232.215 cv
36.93 232.156 36.93 232.086 36.934 232 cv
36.93 231.93 36.934 231.859 36.941 231.793 cv
36.949 231.734 36.961 231.684 36.98 231.641 cv
36.996 231.605 37.016 231.578 37.043 231.555 cv
37.066 231.539 37.098 231.527 37.133 231.527 cv
37.176 231.527 37.246 231.559 37.344 231.613 cv
37.438 231.676 37.566 231.738 37.73 231.801 cv
37.891 231.871 38.094 231.934 38.336 231.988 cv
38.574 232.051 38.859 232.078 39.191 232.078 cv
39.496 232.078 39.777 232.043 40.035 231.969 cv
40.293 231.898 40.512 231.785 40.699 231.625 cv
40.879 231.473 41.023 231.277 41.133 231.039 cv
41.234 230.805 41.289 230.516 41.293 230.176 cv
41.289 229.895 41.242 229.645 41.156 229.426 cv
41.063 229.211 40.926 229.031 40.746 228.883 cv
40.559 228.742 40.324 228.633 40.043 228.559 cv
39.754 228.492 39.418 228.457 39.027 228.453 cv
38.746 228.457 38.504 228.473 38.305 228.496 cv
38.102 228.527 37.914 228.539 37.742 228.535 cv
37.613 228.539 37.523 228.508 37.469 228.445 cv
37.414 228.387 37.387 228.273 37.387 228.102 cv
37.387 224.48 li
37.387 224.332 37.422 224.219 37.492 224.145 cv
37.563 224.074 37.664 224.039 37.797 224.035 cv
41.73 224.035 li
41.762 224.039 41.797 224.051 41.836 224.066 cv
41.867 224.09 41.898 224.121 41.922 224.16 cv
41.945 224.207 41.961 224.258 41.973 224.32 cv
41.984 224.383 41.992 224.457 41.992 224.543 cv
41.992 224.711 41.969 224.84 41.926 224.93 cv
41.883 225.023 41.82 225.07 41.742 225.066 cv
38.566 225.066 li
38.566 227.559 li
38.715 227.539 38.875 227.523 39.039 227.52 cv
39.199 227.516 39.383 227.516 39.598 227.512 cv
40.082 227.516 40.512 227.574 40.879 227.695 cv
41.246 227.816 41.551 227.988 41.797 228.207 cv
42.039 228.43 42.223 228.699 42.352 229.016 cv
42.477 229.332 42.543 229.684 42.543 230.066 cv
cp
f
29.148 179.602 mo
43.339 179.602 li
43.339 196.692 li
29.148 196.692 li
cp
0 0 0 0 cmyk
ef
35.871 190.437 mo
35.867 190.59 35.844 190.711 35.801 190.797 cv
35.754 190.887 35.691 190.93 35.609 190.926 cv
34.609 190.926 li
34.609 192.789 li
34.609 192.828 34.598 192.859 34.582 192.883 cv
34.559 192.91 34.527 192.93 34.484 192.949 cv
34.434 192.965 34.371 192.977 34.301 192.988 cv
34.223 192.996 34.129 193 34.012 193.004 cv
33.895 193 33.797 192.996 33.727 192.988 cv
33.648 192.977 33.59 192.965 33.547 192.949 cv
33.5 192.93 33.469 192.91 33.453 192.883 cv
33.434 192.859 33.426 192.828 33.43 192.789 cv
33.43 190.926 li
29.801 190.926 li
29.742 190.93 29.699 190.922 29.664 190.906 cv
29.629 190.895 29.594 190.867 29.566 190.828 cv
29.535 190.793 29.516 190.742 29.504 190.672 cv
29.492 190.605 29.488 190.516 29.488 190.402 cv
29.488 190.32 29.488 190.242 29.496 190.172 cv
29.496 190.102 29.508 190.039 29.523 189.984 cv
29.535 189.93 29.551 189.875 29.578 189.82 cv
29.598 189.766 29.625 189.711 29.66 189.648 cv
32.82 184.262 li
32.84 184.227 32.875 184.195 32.922 184.168 cv
32.965 184.141 33.02 184.117 33.094 184.098 cv
33.16 184.082 33.246 184.07 33.352 184.059 cv
33.453 184.055 33.574 184.051 33.715 184.047 cv
33.863 184.051 34 184.055 34.117 184.066 cv
34.23 184.078 34.32 184.094 34.395 184.109 cv
34.461 184.129 34.516 184.152 34.555 184.184 cv
34.59 184.215 34.609 184.25 34.609 184.289 cv
34.609 189.953 li
35.609 189.953 li
35.684 189.957 35.746 189.996 35.797 190.074 cv
35.844 190.156 35.867 190.277 35.871 190.437 cv
cp
33.43 185.086 mo
33.418 185.086 li
30.566 189.953 li
33.43 189.953 li
cp
.629236 .549432 .540154 .282963 cmyk
f
42.867 188.504 mo
42.863 189.187 42.813 189.809 42.707 190.371 cv
42.598 190.934 42.418 191.418 42.172 191.82 cv
41.918 192.227 41.59 192.539 41.191 192.758 cv
40.785 192.98 40.293 193.09 39.707 193.09 cv
39.148 193.09 38.676 192.992 38.297 192.793 cv
37.914 192.598 37.609 192.305 37.375 191.918 cv
37.141 191.531 36.973 191.059 36.879 190.492 cv
36.777 189.93 36.73 189.281 36.73 188.547 cv
36.73 187.875 36.785 187.254 36.895 186.687 cv
37.004 186.125 37.18 185.641 37.43 185.234 cv
37.672 184.832 37.996 184.52 38.402 184.293 cv
38.801 184.074 39.297 183.961 39.887 183.961 cv
40.445 183.961 40.918 184.062 41.301 184.258 cv
41.684 184.461 41.988 184.754 42.223 185.137 cv
42.453 185.527 42.621 186 42.719 186.562 cv
42.816 187.125 42.863 187.773 42.867 188.504 cv
cp
41.66 188.586 mo
41.656 188.145 41.641 187.746 41.613 187.395 cv
41.578 187.043 41.531 186.734 41.473 186.465 cv
41.406 186.195 41.328 185.965 41.23 185.77 cv
41.133 185.578 41.016 185.418 40.879 185.289 cv
40.738 185.164 40.578 185.07 40.406 185.012 cv
40.227 184.957 40.031 184.93 39.816 184.926 cv
39.426 184.93 39.109 185.02 38.871 185.203 cv
38.625 185.387 38.434 185.641 38.297 185.957 cv
38.156 186.277 38.063 186.648 38.012 187.078 cv
37.961 187.508 37.938 187.973 37.938 188.465 cv
37.938 189.129 37.969 189.691 38.039 190.152 cv
38.105 190.621 38.215 191 38.367 191.289 cv
38.512 191.586 38.703 191.797 38.934 191.926 cv
39.164 192.062 39.445 192.129 39.777 192.125 cv
40.031 192.129 40.254 192.09 40.449 192.004 cv
40.641 191.926 40.809 191.805 40.949 191.648 cv
41.09 191.496 41.203 191.312 41.297 191.098 cv
41.383 190.883 41.457 190.645 41.516 190.383 cv
41.566 190.125 41.605 189.844 41.629 189.539 cv
41.648 189.234 41.656 188.918 41.66 188.586 cv
cp
f
29.148 139.66 mo
43.339 139.66 li
43.339 156.75 li
29.148 156.75 li
cp
0 0 0 0 cmyk
ef
35.871 150.477 mo
35.867 150.629 35.844 150.75 35.801 150.836 cv
35.754 150.926 35.691 150.969 35.609 150.965 cv
34.609 150.965 li
34.609 152.828 li
34.609 152.867 34.598 152.898 34.582 152.922 cv
34.559 152.949 34.527 152.969 34.484 152.988 cv
34.434 153.004 34.371 153.016 34.301 153.027 cv
34.223 153.035 34.129 153.039 34.012 153.043 cv
33.895 153.039 33.797 153.035 33.727 153.027 cv
33.648 153.016 33.59 153.004 33.547 152.988 cv
33.5 152.969 33.469 152.949 33.453 152.922 cv
33.434 152.898 33.426 152.867 33.43 152.828 cv
33.43 150.965 li
29.801 150.965 li
29.742 150.969 29.699 150.961 29.664 150.945 cv
29.629 150.934 29.594 150.906 29.566 150.867 cv
29.535 150.832 29.516 150.781 29.504 150.711 cv
29.492 150.645 29.488 150.555 29.488 150.441 cv
29.488 150.359 29.488 150.281 29.496 150.211 cv
29.496 150.141 29.508 150.078 29.523 150.023 cv
29.535 149.969 29.551 149.914 29.578 149.859 cv
29.598 149.805 29.625 149.75 29.66 149.687 cv
32.82 144.301 li
32.84 144.266 32.875 144.234 32.922 144.207 cv
32.965 144.18 33.02 144.156 33.094 144.137 cv
33.16 144.121 33.246 144.109 33.352 144.098 cv
33.453 144.094 33.574 144.09 33.715 144.086 cv
33.863 144.09 34 144.094 34.117 144.105 cv
34.23 144.117 34.32 144.133 34.395 144.148 cv
34.461 144.168 34.516 144.191 34.555 144.223 cv
34.59 144.254 34.609 144.289 34.609 144.328 cv
34.609 149.992 li
35.609 149.992 li
35.684 149.996 35.746 150.035 35.797 150.113 cv
35.844 150.195 35.867 150.316 35.871 150.477 cv
cp
33.43 145.125 mo
33.418 145.125 li
30.566 149.992 li
33.43 149.992 li
cp
.629236 .549432 .540154 .282963 cmyk
f
42.531 150.148 mo
42.531 150.625 42.449 151.047 42.289 151.418 cv
42.129 151.789 41.902 152.102 41.613 152.355 cv
41.316 152.609 40.969 152.805 40.566 152.934 cv
40.16 153.066 39.711 153.129 39.219 153.129 cv
38.941 153.129 38.68 153.109 38.438 153.07 cv
38.188 153.031 37.969 152.984 37.781 152.93 cv
37.586 152.875 37.43 152.82 37.305 152.762 cv
37.18 152.711 37.102 152.668 37.07 152.633 cv
37.035 152.602 37.012 152.57 37 152.543 cv
36.984 152.516 36.969 152.484 36.961 152.441 cv
36.945 152.406 36.938 152.355 36.938 152.293 cv
36.93 152.234 36.93 152.164 36.93 152.082 cv
36.93 152.008 36.934 151.937 36.941 151.875 cv
36.949 151.812 36.961 151.762 36.98 151.723 cv
36.996 151.684 37.016 151.656 37.043 151.637 cv
37.066 151.621 37.098 151.613 37.129 151.609 cv
37.176 151.613 37.246 151.641 37.34 151.695 cv
37.434 151.754 37.563 151.816 37.727 151.883 cv
37.891 151.949 38.09 152.012 38.332 152.07 cv
38.566 152.129 38.852 152.156 39.188 152.156 cv
39.488 152.156 39.77 152.121 40.027 152.047 cv
40.281 151.977 40.504 151.863 40.691 151.707 cv
40.875 151.555 41.02 151.359 41.125 151.121 cv
41.23 150.887 41.281 150.598 41.285 150.258 cv
41.281 149.977 41.238 149.727 41.148 149.508 cv
41.059 149.289 40.922 149.109 40.738 148.965 cv
40.551 148.824 40.316 148.719 40.035 148.645 cv
39.75 148.574 39.41 148.535 39.023 148.535 cv
38.738 148.535 38.5 148.551 38.301 148.578 cv
38.098 148.609 37.91 148.625 37.738 148.621 cv
37.609 148.625 37.516 148.594 37.465 148.531 cv
37.406 148.473 37.379 148.359 37.383 148.187 cv
37.383 144.574 li
37.379 144.426 37.414 144.316 37.488 144.238 cv
37.555 144.168 37.656 144.129 37.793 144.129 cv
41.723 144.129 li
41.758 144.129 41.793 144.141 41.828 144.16 cv
41.859 144.184 41.887 144.215 41.914 144.254 cv
41.934 144.297 41.949 144.348 41.965 144.41 cv
41.973 144.477 41.98 144.555 41.984 144.637 cv
41.98 144.805 41.957 144.93 41.918 145.02 cv
41.871 145.113 41.813 145.16 41.734 145.156 cv
38.563 145.156 li
38.563 147.645 li
38.715 147.625 38.871 147.613 39.035 147.605 cv
39.191 147.602 39.379 147.598 39.594 147.598 cv
40.078 147.598 40.504 147.66 40.871 147.781 cv
41.234 147.902 41.539 148.074 41.789 148.293 cv
42.031 148.52 42.219 148.785 42.344 149.098 cv
42.469 149.414 42.531 149.766 42.531 150.148 cv
cp
f
29.148 99.719 mo
43.339 99.719 li
43.339 116.809 li
29.148 116.809 li
cp
0 0 0 0 cmyk
ef
35.453 110.207 mo
35.453 110.684 35.371 111.105 35.211 111.477 cv
35.051 111.848 34.824 112.16 34.535 112.414 cv
34.238 112.668 33.891 112.863 33.488 112.992 cv
33.082 113.125 32.633 113.187 32.141 113.187 cv
31.863 113.187 31.602 113.168 31.359 113.129 cv
31.109 113.09 30.891 113.043 30.703 112.988 cv
30.508 112.934 30.352 112.879 30.227 112.82 cv
30.102 112.77 30.023 112.727 29.992 112.691 cv
29.957 112.66 29.934 112.629 29.922 112.602 cv
29.906 112.574 29.891 112.543 29.883 112.5 cv
29.867 112.465 29.859 112.414 29.859 112.352 cv
29.852 112.293 29.852 112.223 29.852 112.141 cv
29.852 112.066 29.855 111.996 29.863 111.934 cv
29.871 111.871 29.883 111.82 29.902 111.781 cv
29.918 111.742 29.938 111.715 29.965 111.695 cv
29.988 111.68 30.02 111.672 30.051 111.668 cv
30.098 111.672 30.168 111.699 30.262 111.754 cv
30.355 111.812 30.484 111.875 30.648 111.941 cv
30.813 112.008 31.012 112.07 31.254 112.129 cv
31.488 112.187 31.773 112.215 32.109 112.215 cv
32.41 112.215 32.691 112.18 32.949 112.105 cv
33.203 112.035 33.426 111.922 33.613 111.766 cv
33.797 111.613 33.941 111.418 34.047 111.18 cv
34.152 110.945 34.203 110.656 34.207 110.316 cv
34.203 110.035 34.16 109.785 34.07 109.566 cv
33.98 109.348 33.844 109.168 33.66 109.023 cv
33.473 108.883 33.238 108.777 32.957 108.703 cv
32.672 108.633 32.332 108.594 31.945 108.594 cv
31.66 108.594 31.422 108.609 31.223 108.637 cv
31.02 108.668 30.832 108.684 30.66 108.68 cv
30.531 108.684 30.438 108.652 30.387 108.59 cv
30.328 108.531 30.301 108.418 30.305 108.246 cv
30.305 104.633 li
30.301 104.484 30.336 104.375 30.41 104.297 cv
30.477 104.227 30.578 104.187 30.715 104.187 cv
34.645 104.187 li
34.68 104.187 34.715 104.199 34.75 104.219 cv
34.781 104.242 34.809 104.273 34.836 104.312 cv
34.855 104.355 34.871 104.406 34.887 104.469 cv
34.895 104.535 34.902 104.613 34.906 104.695 cv
34.902 104.863 34.879 104.988 34.84 105.078 cv
34.793 105.172 34.734 105.219 34.656 105.215 cv
31.484 105.215 li
31.484 107.703 li
31.637 107.684 31.793 107.672 31.957 107.664 cv
32.113 107.66 32.301 107.656 32.516 107.656 cv
33 107.656 33.426 107.719 33.793 107.84 cv
34.156 107.961 34.461 108.133 34.711 108.352 cv
34.953 108.578 35.141 108.844 35.266 109.156 cv
35.391 109.473 35.453 109.824 35.453 110.207 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.867 108.602 mo
42.863 109.285 42.813 109.906 42.707 110.469 cv
42.598 111.031 42.418 111.516 42.172 111.918 cv
41.918 112.324 41.59 112.637 41.191 112.855 cv
40.785 113.078 40.293 113.187 39.707 113.187 cv
39.148 113.187 38.676 113.09 38.297 112.891 cv
37.914 112.695 37.609 112.402 37.375 112.016 cv
37.141 111.629 36.973 111.156 36.879 110.59 cv
36.777 110.027 36.73 109.379 36.73 108.645 cv
36.73 107.973 36.785 107.352 36.895 106.785 cv
37.004 106.223 37.18 105.738 37.43 105.332 cv
37.672 104.93 37.996 104.617 38.402 104.391 cv
38.801 104.172 39.297 104.059 39.887 104.059 cv
40.445 104.059 40.918 104.16 41.301 104.355 cv
41.684 104.559 41.988 104.852 42.223 105.234 cv
42.453 105.625 42.621 106.098 42.719 106.66 cv
42.816 107.223 42.863 107.871 42.867 108.602 cv
cp
41.66 108.684 mo
41.656 108.242 41.641 107.844 41.613 107.492 cv
41.578 107.141 41.531 106.832 41.473 106.562 cv
41.406 106.293 41.328 106.062 41.23 105.867 cv
41.133 105.676 41.016 105.516 40.879 105.387 cv
40.738 105.262 40.578 105.168 40.406 105.109 cv
40.227 105.055 40.031 105.027 39.816 105.023 cv
39.426 105.027 39.109 105.117 38.871 105.301 cv
38.625 105.484 38.434 105.738 38.297 106.055 cv
38.156 106.375 38.063 106.746 38.012 107.176 cv
37.961 107.605 37.938 108.07 37.938 108.562 cv
37.938 109.227 37.969 109.789 38.039 110.25 cv
38.105 110.719 38.215 111.098 38.367 111.387 cv
38.512 111.684 38.703 111.895 38.934 112.023 cv
39.164 112.16 39.445 112.227 39.777 112.223 cv
40.031 112.227 40.254 112.187 40.449 112.102 cv
40.641 112.023 40.809 111.902 40.949 111.746 cv
41.09 111.594 41.203 111.41 41.297 111.195 cv
41.383 110.98 41.457 110.742 41.516 110.48 cv
41.566 110.223 41.605 109.941 41.629 109.637 cv
41.648 109.332 41.656 109.016 41.66 108.684 cv
cp
f
29.148 59.77 mo
43.339 59.77 li
43.339 76.86 li
29.148 76.86 li
cp
0 0 0 0 cmyk
ef
35.453 70.25 mo
35.453 70.727 35.371 71.148 35.211 71.52 cv
35.051 71.891 34.824 72.203 34.535 72.457 cv
34.238 72.711 33.891 72.906 33.488 73.035 cv
33.082 73.168 32.633 73.23 32.141 73.23 cv
31.863 73.23 31.602 73.211 31.359 73.172 cv
31.109 73.133 30.891 73.086 30.703 73.031 cv
30.508 72.977 30.352 72.922 30.227 72.863 cv
30.102 72.812 30.023 72.77 29.992 72.734 cv
29.957 72.703 29.934 72.672 29.922 72.645 cv
29.906 72.617 29.891 72.586 29.883 72.543 cv
29.867 72.508 29.859 72.457 29.859 72.395 cv
29.852 72.336 29.852 72.266 29.852 72.184 cv
29.852 72.109 29.855 72.039 29.863 71.977 cv
29.871 71.914 29.883 71.863 29.902 71.824 cv
29.918 71.785 29.938 71.758 29.965 71.738 cv
29.988 71.723 30.02 71.715 30.051 71.711 cv
30.098 71.715 30.168 71.742 30.262 71.797 cv
30.355 71.855 30.484 71.918 30.648 71.984 cv
30.813 72.051 31.012 72.113 31.254 72.172 cv
31.488 72.23 31.773 72.258 32.109 72.258 cv
32.41 72.258 32.691 72.223 32.949 72.148 cv
33.203 72.078 33.426 71.965 33.613 71.809 cv
33.797 71.656 33.941 71.461 34.047 71.223 cv
34.152 70.988 34.203 70.699 34.207 70.359 cv
34.203 70.078 34.16 69.828 34.07 69.609 cv
33.98 69.391 33.844 69.211 33.66 69.066 cv
33.473 68.926 33.238 68.82 32.957 68.746 cv
32.672 68.676 32.332 68.637 31.945 68.637 cv
31.66 68.637 31.422 68.652 31.223 68.68 cv
31.02 68.711 30.832 68.727 30.66 68.723 cv
30.531 68.727 30.438 68.695 30.387 68.633 cv
30.328 68.574 30.301 68.461 30.305 68.289 cv
30.305 64.676 li
30.301 64.527 30.336 64.418 30.41 64.34 cv
30.477 64.27 30.578 64.23 30.715 64.23 cv
34.645 64.23 li
34.68 64.23 34.715 64.242 34.75 64.262 cv
34.781 64.285 34.809 64.316 34.836 64.355 cv
34.855 64.398 34.871 64.449 34.887 64.512 cv
34.895 64.578 34.902 64.656 34.906 64.738 cv
34.902 64.906 34.879 65.031 34.84 65.121 cv
34.793 65.215 34.734 65.262 34.656 65.258 cv
31.484 65.258 li
31.484 67.746 li
31.637 67.727 31.793 67.715 31.957 67.707 cv
32.113 67.703 32.301 67.699 32.516 67.699 cv
33 67.699 33.426 67.762 33.793 67.883 cv
34.156 68.004 34.461 68.176 34.711 68.395 cv
34.953 68.621 35.141 68.887 35.266 69.199 cv
35.391 69.516 35.453 69.867 35.453 70.25 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.531 70.25 mo
42.531 70.727 42.449 71.148 42.289 71.52 cv
42.129 71.891 41.902 72.203 41.613 72.457 cv
41.316 72.711 40.969 72.906 40.566 73.035 cv
40.16 73.168 39.711 73.23 39.219 73.23 cv
38.941 73.23 38.68 73.211 38.438 73.172 cv
38.188 73.133 37.969 73.086 37.781 73.031 cv
37.586 72.977 37.43 72.922 37.305 72.863 cv
37.18 72.812 37.102 72.77 37.07 72.734 cv
37.035 72.703 37.012 72.672 37 72.645 cv
36.984 72.617 36.969 72.586 36.961 72.543 cv
36.945 72.508 36.938 72.457 36.938 72.395 cv
36.93 72.336 36.93 72.266 36.93 72.184 cv
36.93 72.109 36.934 72.039 36.941 71.977 cv
36.949 71.914 36.961 71.863 36.98 71.824 cv
36.996 71.785 37.016 71.758 37.043 71.738 cv
37.066 71.723 37.098 71.715 37.129 71.711 cv
37.176 71.715 37.246 71.742 37.34 71.797 cv
37.434 71.855 37.563 71.918 37.727 71.984 cv
37.891 72.051 38.09 72.113 38.332 72.172 cv
38.566 72.23 38.852 72.258 39.188 72.258 cv
39.488 72.258 39.77 72.223 40.027 72.148 cv
40.281 72.078 40.504 71.965 40.691 71.809 cv
40.875 71.656 41.02 71.461 41.125 71.223 cv
41.23 70.988 41.281 70.699 41.285 70.359 cv
41.281 70.078 41.238 69.828 41.148 69.609 cv
41.059 69.391 40.922 69.211 40.738 69.066 cv
40.551 68.926 40.316 68.82 40.035 68.746 cv
39.75 68.676 39.41 68.637 39.023 68.637 cv
38.738 68.637 38.5 68.652 38.301 68.68 cv
38.098 68.711 37.91 68.727 37.738 68.723 cv
37.609 68.727 37.516 68.695 37.465 68.633 cv
37.406 68.574 37.379 68.461 37.383 68.289 cv
37.383 64.676 li
37.379 64.527 37.414 64.418 37.488 64.34 cv
37.555 64.27 37.656 64.23 37.793 64.23 cv
41.723 64.23 li
41.758 64.23 41.793 64.242 41.828 64.262 cv
41.859 64.285 41.887 64.316 41.914 64.355 cv
41.934 64.398 41.949 64.449 41.965 64.512 cv
41.973 64.578 41.98 64.656 41.984 64.738 cv
41.98 64.906 41.957 65.031 41.918 65.121 cv
41.871 65.215 41.813 65.262 41.734 65.258 cv
38.563 65.258 li
38.563 67.746 li
38.715 67.727 38.871 67.715 39.035 67.707 cv
39.191 67.703 39.379 67.699 39.594 67.699 cv
40.078 67.699 40.504 67.762 40.871 67.883 cv
41.234 68.004 41.539 68.176 41.789 68.395 cv
42.031 68.621 42.219 68.887 42.344 69.199 cv
42.469 69.516 42.531 69.867 42.531 70.25 cv
cp
f
29.148 19.828 mo
43.339 19.828 li
43.339 36.922 li
29.148 36.922 li
cp
0 0 0 0 cmyk
ef
35.723 30.301 mo
35.723 30.691 35.66 31.07 35.543 31.43 cv
35.418 31.797 35.234 32.113 34.992 32.387 cv
34.742 32.664 34.43 32.887 34.055 33.051 cv
33.672 33.219 33.227 33.301 32.711 33.301 cv
32.34 33.301 32.012 33.258 31.73 33.164 cv
31.445 33.078 31.199 32.945 30.988 32.773 cv
30.777 32.605 30.602 32.398 30.465 32.152 cv
30.324 31.906 30.211 31.625 30.129 31.309 cv
30.043 30.996 29.984 30.652 29.949 30.273 cv
29.91 29.902 29.891 29.5 29.895 29.066 cv
29.891 28.687 29.91 28.305 29.953 27.914 cv
29.992 27.531 30.066 27.156 30.172 26.789 cv
30.277 26.43 30.422 26.09 30.602 25.773 cv
30.781 25.457 31.008 25.18 31.281 24.945 cv
31.555 24.711 31.879 24.523 32.258 24.383 cv
32.637 24.246 33.078 24.18 33.582 24.176 cv
33.75 24.18 33.922 24.187 34.094 24.207 cv
34.266 24.23 34.426 24.262 34.574 24.293 cv
34.723 24.332 34.844 24.367 34.945 24.406 cv
35.043 24.445 35.109 24.48 35.145 24.504 cv
35.172 24.531 35.195 24.559 35.215 24.586 cv
35.23 24.617 35.246 24.648 35.254 24.684 cv
35.262 24.719 35.266 24.758 35.273 24.801 cv
35.273 24.844 35.277 24.898 35.281 24.961 cv
35.277 25.047 35.277 25.117 35.277 25.172 cv
35.273 25.234 35.262 25.281 35.25 25.316 cv
35.23 25.355 35.211 25.383 35.188 25.398 cv
35.16 25.418 35.129 25.426 35.09 25.426 cv
35.039 25.426 34.969 25.41 34.883 25.379 cv
34.793 25.348 34.688 25.312 34.566 25.27 cv
34.441 25.234 34.293 25.199 34.117 25.164 cv
33.941 25.137 33.738 25.121 33.508 25.117 cv
33.078 25.121 32.711 25.207 32.406 25.379 cv
32.102 25.551 31.852 25.785 31.656 26.078 cv
31.461 26.371 31.316 26.711 31.227 27.094 cv
31.129 27.484 31.074 27.887 31.066 28.305 cv
31.184 28.238 31.32 28.172 31.469 28.102 cv
31.617 28.035 31.777 27.973 31.953 27.914 cv
32.129 27.863 32.316 27.816 32.512 27.781 cv
32.707 27.75 32.918 27.734 33.145 27.73 cv
33.621 27.734 34.023 27.801 34.355 27.926 cv
34.684 28.059 34.949 28.238 35.156 28.469 cv
35.355 28.699 35.5 28.969 35.59 29.281 cv
35.676 29.594 35.723 29.934 35.723 30.301 cv
cp
34.527 30.41 mo
34.527 30.148 34.5 29.906 34.449 29.687 cv
34.395 29.473 34.305 29.289 34.184 29.133 cv
34.059 28.984 33.895 28.867 33.691 28.785 cv
33.48 28.703 33.227 28.66 32.93 28.66 cv
32.758 28.66 32.59 28.676 32.422 28.707 cv
32.25 28.738 32.086 28.781 31.93 28.828 cv
31.77 28.883 31.621 28.945 31.48 29.016 cv
31.336 29.09 31.203 29.164 31.086 29.242 cv
31.082 29.836 31.121 30.332 31.199 30.727 cv
31.273 31.125 31.383 31.441 31.527 31.68 cv
31.672 31.922 31.852 32.094 32.066 32.195 cv
32.281 32.301 32.531 32.352 32.82 32.348 cv
33.109 32.352 33.363 32.297 33.578 32.184 cv
33.793 32.078 33.969 31.93 34.113 31.742 cv
34.254 31.559 34.359 31.352 34.426 31.121 cv
34.492 30.891 34.527 30.656 34.527 30.41 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
42.867 28.715 mo
42.863 29.398 42.813 30.02 42.707 30.582 cv
42.598 31.145 42.418 31.629 42.172 32.031 cv
41.918 32.437 41.59 32.75 41.191 32.969 cv
40.785 33.191 40.293 33.301 39.707 33.301 cv
39.148 33.301 38.676 33.203 38.297 33.004 cv
37.914 32.809 37.609 32.516 37.375 32.129 cv
37.141 31.742 36.973 31.27 36.879 30.703 cv
36.777 30.141 36.73 29.492 36.73 28.758 cv
36.73 28.086 36.785 27.465 36.895 26.898 cv
37.004 26.336 37.18 25.852 37.43 25.445 cv
37.672 25.043 37.996 24.73 38.402 24.504 cv
38.801 24.285 39.297 24.172 39.887 24.172 cv
40.445 24.172 40.918 24.273 41.301 24.469 cv
41.684 24.672 41.988 24.965 42.223 25.348 cv
42.453 25.738 42.621 26.211 42.719 26.773 cv
42.816 27.336 42.863 27.984 42.867 28.715 cv
cp
41.66 28.797 mo
41.656 28.355 41.641 27.957 41.613 27.605 cv
41.578 27.254 41.531 26.945 41.473 26.676 cv
41.406 26.406 41.328 26.176 41.23 25.98 cv
41.133 25.789 41.016 25.629 40.879 25.5 cv
40.738 25.375 40.578 25.281 40.406 25.223 cv
40.227 25.168 40.031 25.141 39.816 25.137 cv
39.426 25.141 39.109 25.23 38.871 25.414 cv
38.625 25.598 38.434 25.852 38.297 26.168 cv
38.156 26.488 38.063 26.859 38.012 27.289 cv
37.961 27.719 37.938 28.184 37.938 28.676 cv
37.938 29.34 37.969 29.902 38.039 30.363 cv
38.105 30.832 38.215 31.211 38.367 31.5 cv
38.512 31.797 38.703 32.008 38.934 32.137 cv
39.164 32.273 39.445 32.34 39.777 32.336 cv
40.031 32.34 40.254 32.301 40.449 32.215 cv
40.641 32.137 40.809 32.016 40.949 31.859 cv
41.09 31.707 41.203 31.523 41.297 31.309 cv
41.383 31.094 41.457 30.855 41.516 30.594 cv
41.566 30.336 41.605 30.055 41.629 29.75 cv
41.648 29.445 41.656 29.129 41.66 28.797 cv
cp
f
59.156 530.297 mo
59.152 530.387 59.145 530.457 59.133 530.516 cv
59.117 530.578 59.098 530.629 59.078 530.66 cv
59.055 530.699 59.031 530.723 59 530.738 cv
58.969 530.754 58.938 530.762 58.91 530.762 cv
54.273 530.762 li
54.238 530.762 54.211 530.754 54.184 530.738 cv
54.156 530.723 54.129 530.699 54.105 530.66 cv
54.078 530.629 54.059 530.578 54.047 530.516 cv
54.031 530.457 54.023 530.387 54.027 530.297 cv
54.023 530.219 54.031 530.145 54.047 530.082 cv
54.059 530.023 54.074 529.977 54.098 529.937 cv
54.113 529.902 54.141 529.871 54.172 529.848 cv
54.203 529.828 54.234 529.82 54.273 529.816 cv
56.125 529.816 li
56.125 523.07 li
54.41 524.09 li
54.32 524.141 54.25 524.168 54.203 524.176 cv
54.148 524.184 54.105 524.176 54.074 524.145 cv
54.039 524.117 54.02 524.066 54.008 523.996 cv
53.996 523.93 53.988 523.844 53.992 523.734 cv
53.988 523.66 53.992 523.594 54.004 523.535 cv
54.008 523.484 54.02 523.437 54.035 523.398 cv
54.047 523.363 54.066 523.332 54.09 523.305 cv
54.113 523.277 54.145 523.25 54.191 523.223 cv
56.234 521.91 li
56.25 521.898 56.27 521.887 56.301 521.879 cv
56.324 521.871 56.359 521.863 56.406 521.852 cv
56.445 521.844 56.496 521.836 56.551 521.832 cv
56.605 521.832 56.672 521.832 56.758 521.828 cv
56.863 521.832 56.957 521.836 57.031 521.844 cv
57.102 521.852 57.156 521.867 57.203 521.883 cv
57.242 521.902 57.27 521.922 57.285 521.945 cv
57.293 521.973 57.301 521.996 57.305 522.02 cv
57.305 529.816 li
58.91 529.816 li
58.945 529.82 58.98 529.828 59.012 529.848 cv
59.043 529.871 59.066 529.902 59.09 529.937 cv
59.105 529.977 59.121 530.023 59.137 530.082 cv
59.145 530.145 59.152 530.219 59.156 530.297 cv
cp
f
133.316 530.254 mo
133.313 530.34 133.309 530.414 133.297 530.477 cv
133.285 530.543 133.27 530.598 133.25 530.637 cv
133.227 530.684 133.199 530.715 133.168 530.73 cv
133.133 530.754 133.094 530.762 133.055 530.762 cv
128.152 530.762 li
128.09 530.762 128.031 530.754 127.984 530.738 cv
127.934 530.723 127.895 530.699 127.859 530.66 cv
127.824 530.629 127.797 530.574 127.785 530.504 cv
127.766 530.434 127.758 530.348 127.762 530.246 cv
127.758 530.156 127.762 530.078 127.77 530.008 cv
127.773 529.941 127.789 529.883 127.816 529.828 cv
127.84 529.777 127.871 529.723 127.906 529.668 cv
127.941 529.617 127.984 529.562 128.043 529.5 cv
129.816 527.676 li
130.227 527.258 130.555 526.883 130.805 526.547 cv
131.051 526.219 131.242 525.914 131.375 525.637 cv
131.508 525.363 131.594 525.113 131.641 524.887 cv
131.68 524.664 131.703 524.453 131.703 524.258 cv
131.703 524.062 131.668 523.879 131.602 523.699 cv
131.535 523.527 131.441 523.371 131.316 523.234 cv
131.191 523.105 131.035 523 130.848 522.918 cv
130.66 522.844 130.441 522.805 130.195 522.801 cv
129.906 522.805 129.648 522.844 129.422 522.918 cv
129.191 523 128.992 523.086 128.82 523.172 cv
128.648 523.266 128.504 523.348 128.387 523.426 cv
128.27 523.504 128.184 523.543 128.133 523.543 cv
128.098 523.543 128.066 523.535 128.043 523.516 cv
128.012 523.5 127.992 523.469 127.977 523.426 cv
127.961 523.387 127.945 523.332 127.938 523.262 cv
127.926 523.195 127.922 523.113 127.926 523.016 cv
127.922 522.949 127.926 522.891 127.934 522.84 cv
127.938 522.789 127.945 522.746 127.957 522.707 cv
127.965 522.672 127.98 522.637 128 522.605 cv
128.02 522.574 128.055 522.535 128.113 522.484 cv
128.164 522.437 128.258 522.371 128.395 522.289 cv
128.527 522.207 128.699 522.129 128.902 522.047 cv
129.105 521.969 129.328 521.898 129.574 521.844 cv
129.816 521.789 130.074 521.762 130.348 521.762 cv
130.773 521.762 131.148 521.824 131.473 521.945 cv
131.793 522.066 132.059 522.23 132.273 522.441 cv
132.484 522.652 132.645 522.898 132.75 523.172 cv
132.855 523.453 132.91 523.75 132.91 524.062 cv
132.91 524.352 132.883 524.633 132.832 524.91 cv
132.781 525.195 132.676 525.5 132.516 525.824 cv
132.352 526.152 132.117 526.516 131.813 526.914 cv
131.504 527.316 131.098 527.777 130.594 528.293 cv
129.188 529.762 li
133.047 529.762 li
133.078 529.766 133.113 529.777 133.152 529.793 cv
133.184 529.816 133.215 529.848 133.242 529.887 cv
133.266 529.93 133.285 529.98 133.297 530.039 cv
133.309 530.105 133.313 530.176 133.316 530.254 cv
cp
f
207.883 528.238 mo
207.879 528.391 207.855 528.512 207.813 528.598 cv
207.766 528.687 207.703 528.73 207.621 528.727 cv
206.621 528.727 li
206.621 530.59 li
206.621 530.629 206.609 530.66 206.594 530.684 cv
206.57 530.711 206.539 530.73 206.496 530.75 cv
206.445 530.766 206.383 530.777 206.313 530.789 cv
206.234 530.797 206.141 530.801 206.023 530.805 cv
205.906 530.801 205.809 530.797 205.738 530.789 cv
205.66 530.777 205.602 530.766 205.559 530.75 cv
205.512 530.73 205.48 530.711 205.465 530.684 cv
205.445 530.66 205.438 530.629 205.441 530.59 cv
205.441 528.727 li
201.813 528.727 li
201.754 528.73 201.711 528.723 201.676 528.707 cv
201.641 528.695 201.605 528.668 201.578 528.629 cv
201.547 528.594 201.527 528.543 201.516 528.473 cv
201.504 528.406 201.5 528.316 201.5 528.203 cv
201.5 528.121 201.5 528.043 201.508 527.973 cv
201.508 527.902 201.52 527.84 201.535 527.785 cv
201.547 527.73 201.563 527.676 201.59 527.621 cv
201.609 527.566 201.637 527.512 201.672 527.449 cv
204.832 522.062 li
204.852 522.027 204.887 521.996 204.934 521.969 cv
204.977 521.941 205.031 521.918 205.105 521.898 cv
205.172 521.883 205.258 521.871 205.363 521.859 cv
205.465 521.855 205.586 521.852 205.727 521.848 cv
205.875 521.852 206.012 521.855 206.129 521.867 cv
206.242 521.879 206.332 521.895 206.406 521.91 cv
206.473 521.93 206.527 521.953 206.566 521.984 cv
206.602 522.016 206.621 522.051 206.621 522.09 cv
206.621 527.754 li
207.621 527.754 li
207.695 527.758 207.758 527.797 207.809 527.875 cv
207.855 527.957 207.879 528.078 207.883 528.238 cv
cp
205.441 522.887 mo
205.43 522.887 li
202.578 527.754 li
205.441 527.754 li
cp
f
281.914 527.891 mo
281.914 528.281 281.852 528.66 281.734 529.02 cv
281.609 529.387 281.426 529.703 281.184 529.977 cv
280.934 530.254 280.621 530.477 280.246 530.641 cv
279.863 530.809 279.418 530.891 278.902 530.891 cv
278.531 530.891 278.203 530.848 277.922 530.754 cv
277.637 530.668 277.391 530.535 277.18 530.363 cv
276.969 530.195 276.793 529.988 276.656 529.742 cv
276.516 529.496 276.402 529.215 276.32 528.898 cv
276.234 528.586 276.176 528.242 276.141 527.863 cv
276.102 527.492 276.082 527.09 276.086 526.656 cv
276.082 526.277 276.102 525.895 276.145 525.504 cv
276.184 525.121 276.258 524.746 276.363 524.379 cv
276.469 524.02 276.613 523.68 276.793 523.363 cv
276.973 523.047 277.199 522.77 277.473 522.535 cv
277.746 522.301 278.07 522.113 278.449 521.973 cv
278.828 521.836 279.27 521.77 279.773 521.766 cv
279.941 521.77 280.113 521.777 280.285 521.797 cv
280.457 521.82 280.617 521.852 280.766 521.883 cv
280.914 521.922 281.035 521.957 281.137 521.996 cv
281.234 522.035 281.301 522.07 281.336 522.094 cv
281.363 522.121 281.387 522.148 281.406 522.176 cv
281.422 522.207 281.438 522.238 281.445 522.273 cv
281.453 522.309 281.457 522.348 281.465 522.391 cv
281.465 522.434 281.469 522.488 281.473 522.551 cv
281.469 522.637 281.469 522.707 281.469 522.762 cv
281.465 522.824 281.453 522.871 281.441 522.906 cv
281.422 522.945 281.402 522.973 281.379 522.988 cv
281.352 523.008 281.32 523.016 281.281 523.016 cv
281.23 523.016 281.16 523 281.074 522.969 cv
280.984 522.937 280.879 522.902 280.758 522.859 cv
280.633 522.824 280.484 522.789 280.309 522.754 cv
280.133 522.727 279.93 522.711 279.699 522.707 cv
279.27 522.711 278.902 522.797 278.598 522.969 cv
278.293 523.141 278.043 523.375 277.848 523.668 cv
277.652 523.961 277.508 524.301 277.418 524.684 cv
277.32 525.074 277.266 525.477 277.258 525.895 cv
277.375 525.828 277.512 525.762 277.66 525.691 cv
277.809 525.625 277.969 525.562 278.145 525.504 cv
278.32 525.453 278.508 525.406 278.703 525.371 cv
278.898 525.34 279.109 525.324 279.336 525.32 cv
279.813 525.324 280.215 525.391 280.547 525.516 cv
280.875 525.648 281.141 525.828 281.348 526.059 cv
281.547 526.289 281.691 526.559 281.781 526.871 cv
281.867 527.184 281.914 527.523 281.914 527.891 cv
cp
280.719 528 mo
280.719 527.738 280.691 527.496 280.641 527.277 cv
280.586 527.062 280.496 526.879 280.375 526.723 cv
280.25 526.574 280.086 526.457 279.883 526.375 cv
279.672 526.293 279.418 526.25 279.121 526.25 cv
278.949 526.25 278.781 526.266 278.613 526.297 cv
278.441 526.328 278.277 526.371 278.121 526.418 cv
277.961 526.473 277.813 526.535 277.672 526.605 cv
277.527 526.68 277.395 526.754 277.277 526.832 cv
277.273 527.426 277.313 527.922 277.391 528.316 cv
277.465 528.715 277.574 529.031 277.719 529.27 cv
277.863 529.512 278.043 529.684 278.258 529.785 cv
278.473 529.891 278.723 529.941 279.012 529.937 cv
279.301 529.941 279.555 529.887 279.77 529.773 cv
279.984 529.668 280.16 529.52 280.305 529.332 cv
280.445 529.148 280.551 528.941 280.617 528.711 cv
280.684 528.48 280.719 528.246 280.719 528 cv
cp
f
356.098 528.484 mo
356.098 528.871 356.027 529.215 355.891 529.512 cv
355.754 529.816 355.559 530.066 355.301 530.27 cv
355.043 530.477 354.723 530.633 354.344 530.734 cv
353.961 530.84 353.527 530.891 353.043 530.891 cv
352.582 530.891 352.172 530.844 351.813 530.75 cv
351.449 530.656 351.145 530.516 350.895 530.324 cv
350.645 530.141 350.453 529.91 350.32 529.633 cv
350.188 529.359 350.121 529.047 350.121 528.691 cv
350.121 528.418 350.164 528.16 350.258 527.926 cv
350.344 527.691 350.477 527.477 350.652 527.281 cv
350.82 527.086 351.031 526.902 351.285 526.727 cv
351.535 526.559 351.82 526.395 352.137 526.238 cv
351.863 526.098 351.621 525.949 351.41 525.789 cv
351.199 525.633 351.02 525.461 350.875 525.273 cv
350.727 525.09 350.617 524.895 350.543 524.684 cv
350.465 524.477 350.426 524.246 350.43 523.996 cv
350.426 523.687 350.48 523.395 350.598 523.121 cv
350.707 522.852 350.879 522.617 351.105 522.414 cv
351.332 522.215 351.617 522.055 351.969 521.937 cv
352.313 521.82 352.723 521.762 353.191 521.762 cv
353.637 521.762 354.023 521.816 354.352 521.922 cv
354.68 522.031 354.949 522.176 355.16 522.359 cv
355.371 522.547 355.527 522.766 355.633 523.016 cv
355.73 523.266 355.781 523.535 355.785 523.824 cv
355.781 524.059 355.742 524.285 355.672 524.496 cv
355.594 524.715 355.484 524.918 355.336 525.105 cv
355.188 525.301 355.008 525.48 354.797 525.645 cv
354.586 525.816 354.344 525.973 354.07 526.113 cv
354.391 526.277 354.676 526.441 354.934 526.609 cv
355.184 526.777 355.398 526.957 355.574 527.152 cv
355.742 527.348 355.871 527.555 355.965 527.77 cv
356.051 527.988 356.098 528.227 356.098 528.484 cv
cp
354.617 523.934 mo
354.613 523.746 354.582 523.57 354.516 523.414 cv
354.449 523.258 354.352 523.125 354.227 523.016 cv
354.098 522.906 353.938 522.824 353.75 522.766 cv
353.555 522.711 353.34 522.684 353.102 522.68 cv
352.605 522.684 352.23 522.793 351.98 523.016 cv
351.723 523.242 351.598 523.551 351.602 523.934 cv
351.598 524.113 351.629 524.277 351.691 524.43 cv
351.754 524.586 351.848 524.73 351.98 524.867 cv
352.105 525.004 352.27 525.137 352.473 525.266 cv
352.668 525.398 352.906 525.535 353.184 525.676 cv
353.645 525.441 354 525.18 354.246 524.887 cv
354.492 524.602 354.613 524.285 354.617 523.934 cv
cp
354.906 528.609 mo
354.902 528.402 354.863 528.211 354.789 528.039 cv
354.707 527.871 354.59 527.711 354.434 527.559 cv
354.277 527.41 354.078 527.266 353.844 527.125 cv
353.605 526.988 353.336 526.844 353.027 526.691 cv
352.738 526.836 352.484 526.977 352.27 527.117 cv
352.051 527.258 351.871 527.406 351.734 527.555 cv
351.594 527.711 351.488 527.867 351.418 528.031 cv
351.344 528.199 351.309 528.383 351.313 528.582 cv
351.309 529.027 351.461 529.371 351.77 529.609 cv
352.07 529.855 352.523 529.977 353.129 529.973 cv
353.711 529.977 354.156 529.855 354.457 529.605 cv
354.754 529.363 354.902 529.031 354.906 528.609 cv
cp
f
426.547 530.297 mo
426.543 530.387 426.535 530.457 426.523 530.516 cv
426.508 530.578 426.488 530.629 426.469 530.66 cv
426.445 530.699 426.422 530.723 426.391 530.738 cv
426.359 530.754 426.328 530.762 426.301 530.762 cv
421.664 530.762 li
421.629 530.762 421.602 530.754 421.574 530.738 cv
421.547 530.723 421.52 530.699 421.496 530.66 cv
421.469 530.629 421.449 530.578 421.438 530.516 cv
421.422 530.457 421.414 530.387 421.418 530.297 cv
421.414 530.219 421.422 530.145 421.438 530.082 cv
421.449 530.023 421.465 529.977 421.488 529.937 cv
421.504 529.902 421.531 529.871 421.563 529.848 cv
421.594 529.828 421.625 529.82 421.664 529.816 cv
423.516 529.816 li
423.516 523.07 li
421.801 524.09 li
421.711 524.141 421.641 524.168 421.594 524.176 cv
421.539 524.184 421.496 524.176 421.465 524.145 cv
421.43 524.117 421.41 524.066 421.398 523.996 cv
421.387 523.93 421.379 523.844 421.383 523.734 cv
421.379 523.66 421.383 523.594 421.395 523.535 cv
421.398 523.484 421.41 523.437 421.426 523.398 cv
421.438 523.363 421.457 523.332 421.48 523.305 cv
421.504 523.277 421.535 523.25 421.582 523.223 cv
423.625 521.91 li
423.641 521.898 423.66 521.887 423.691 521.879 cv
423.715 521.871 423.75 521.863 423.797 521.852 cv
423.836 521.844 423.887 521.836 423.941 521.832 cv
423.996 521.832 424.063 521.832 424.148 521.828 cv
424.254 521.832 424.348 521.836 424.422 521.844 cv
424.492 521.852 424.547 521.867 424.594 521.883 cv
424.633 521.902 424.66 521.922 424.676 521.945 cv
424.684 521.973 424.691 521.996 424.695 522.02 cv
424.695 529.816 li
426.301 529.816 li
426.336 529.82 426.371 529.828 426.402 529.848 cv
426.434 529.871 426.457 529.902 426.48 529.937 cv
426.496 529.977 426.512 530.023 426.527 530.082 cv
426.535 530.145 426.543 530.219 426.547 530.297 cv
cp
f
433.898 526.305 mo
433.895 526.988 433.844 527.609 433.738 528.172 cv
433.629 528.734 433.449 529.219 433.203 529.621 cv
432.949 530.027 432.621 530.34 432.223 530.559 cv
431.816 530.781 431.324 530.891 430.738 530.891 cv
430.18 530.891 429.707 530.793 429.328 530.594 cv
428.945 530.398 428.641 530.105 428.406 529.719 cv
428.172 529.332 428.004 528.859 427.91 528.293 cv
427.809 527.73 427.762 527.082 427.762 526.348 cv
427.762 525.676 427.816 525.055 427.926 524.488 cv
428.035 523.926 428.211 523.441 428.461 523.035 cv
428.703 522.633 429.027 522.32 429.434 522.094 cv
429.832 521.875 430.328 521.762 430.918 521.762 cv
431.477 521.762 431.949 521.863 432.332 522.059 cv
432.715 522.262 433.02 522.555 433.254 522.937 cv
433.484 523.328 433.652 523.801 433.75 524.363 cv
433.848 524.926 433.895 525.574 433.898 526.305 cv
cp
432.691 526.387 mo
432.688 525.945 432.672 525.547 432.645 525.195 cv
432.609 524.844 432.563 524.535 432.504 524.266 cv
432.438 523.996 432.359 523.766 432.262 523.57 cv
432.164 523.379 432.047 523.219 431.91 523.09 cv
431.77 522.965 431.609 522.871 431.438 522.812 cv
431.258 522.758 431.063 522.73 430.848 522.727 cv
430.457 522.73 430.141 522.82 429.902 523.004 cv
429.656 523.187 429.465 523.441 429.328 523.758 cv
429.188 524.078 429.094 524.449 429.043 524.879 cv
428.992 525.309 428.969 525.773 428.969 526.266 cv
428.969 526.93 429 527.492 429.07 527.953 cv
429.137 528.422 429.246 528.801 429.398 529.09 cv
429.543 529.387 429.734 529.598 429.965 529.727 cv
430.195 529.863 430.477 529.93 430.809 529.926 cv
431.063 529.93 431.285 529.891 431.48 529.805 cv
431.672 529.727 431.84 529.605 431.98 529.449 cv
432.121 529.297 432.234 529.113 432.328 528.898 cv
432.414 528.684 432.488 528.445 432.547 528.184 cv
432.598 527.926 432.637 527.645 432.66 527.34 cv
432.68 527.035 432.688 526.719 432.691 526.387 cv
cp
f
500.734 530.297 mo
500.73 530.387 500.723 530.457 500.711 530.516 cv
500.695 530.578 500.676 530.629 500.656 530.66 cv
500.633 530.699 500.609 530.723 500.578 530.738 cv
500.547 530.754 500.516 530.762 500.488 530.762 cv
495.852 530.762 li
495.816 530.762 495.789 530.754 495.762 530.738 cv
495.734 530.723 495.707 530.699 495.684 530.66 cv
495.656 530.629 495.637 530.578 495.625 530.516 cv
495.609 530.457 495.602 530.387 495.605 530.297 cv
495.602 530.219 495.609 530.145 495.625 530.082 cv
495.637 530.023 495.652 529.977 495.676 529.937 cv
495.691 529.902 495.719 529.871 495.75 529.848 cv
495.781 529.828 495.813 529.82 495.852 529.816 cv
497.703 529.816 li
497.703 523.07 li
495.988 524.09 li
495.898 524.141 495.828 524.168 495.781 524.176 cv
495.727 524.184 495.684 524.176 495.652 524.145 cv
495.617 524.117 495.598 524.066 495.586 523.996 cv
495.574 523.93 495.566 523.844 495.57 523.734 cv
495.566 523.66 495.57 523.594 495.582 523.535 cv
495.586 523.484 495.598 523.437 495.613 523.398 cv
495.625 523.363 495.645 523.332 495.668 523.305 cv
495.691 523.277 495.723 523.25 495.77 523.223 cv
497.813 521.91 li
497.828 521.898 497.848 521.887 497.879 521.879 cv
497.902 521.871 497.938 521.863 497.984 521.852 cv
498.023 521.844 498.074 521.836 498.129 521.832 cv
498.184 521.832 498.25 521.832 498.336 521.828 cv
498.441 521.832 498.535 521.836 498.609 521.844 cv
498.68 521.852 498.734 521.867 498.781 521.883 cv
498.82 521.902 498.848 521.922 498.863 521.945 cv
498.871 521.973 498.879 521.996 498.883 522.02 cv
498.883 529.816 li
500.488 529.816 li
500.523 529.82 500.559 529.828 500.59 529.848 cv
500.621 529.871 500.645 529.902 500.668 529.937 cv
500.684 529.977 500.699 530.023 500.715 530.082 cv
500.723 530.145 500.73 530.219 500.734 530.297 cv
cp
f
507.797 530.254 mo
507.793 530.34 507.789 530.414 507.777 530.477 cv
507.766 530.543 507.75 530.598 507.73 530.637 cv
507.707 530.684 507.68 530.715 507.648 530.73 cv
507.613 530.754 507.574 530.762 507.535 530.762 cv
502.633 530.762 li
502.57 530.762 502.512 530.754 502.465 530.738 cv
502.414 530.723 502.375 530.699 502.34 530.66 cv
502.305 530.629 502.277 530.574 502.266 530.504 cv
502.246 530.434 502.238 530.348 502.242 530.246 cv
502.238 530.156 502.242 530.078 502.25 530.008 cv
502.254 529.941 502.27 529.883 502.297 529.828 cv
502.32 529.777 502.352 529.723 502.387 529.668 cv
502.422 529.617 502.465 529.562 502.523 529.5 cv
504.297 527.676 li
504.707 527.258 505.035 526.883 505.285 526.547 cv
505.531 526.219 505.723 525.914 505.855 525.637 cv
505.988 525.363 506.074 525.113 506.121 524.887 cv
506.16 524.664 506.184 524.453 506.184 524.258 cv
506.184 524.062 506.148 523.879 506.082 523.699 cv
506.016 523.527 505.922 523.371 505.797 523.234 cv
505.672 523.105 505.516 523 505.328 522.918 cv
505.141 522.844 504.922 522.805 504.676 522.801 cv
504.387 522.805 504.129 522.844 503.902 522.918 cv
503.672 523 503.473 523.086 503.301 523.172 cv
503.129 523.266 502.984 523.348 502.867 523.426 cv
502.75 523.504 502.664 523.543 502.613 523.543 cv
502.578 523.543 502.547 523.535 502.523 523.516 cv
502.492 523.5 502.473 523.469 502.457 523.426 cv
502.441 523.387 502.426 523.332 502.418 523.262 cv
502.406 523.195 502.402 523.113 502.406 523.016 cv
502.402 522.949 502.406 522.891 502.414 522.84 cv
502.418 522.789 502.426 522.746 502.438 522.707 cv
502.445 522.672 502.461 522.637 502.48 522.605 cv
502.5 522.574 502.535 522.535 502.594 522.484 cv
502.645 522.437 502.738 522.371 502.875 522.289 cv
503.008 522.207 503.18 522.129 503.383 522.047 cv
503.586 521.969 503.809 521.898 504.055 521.844 cv
504.297 521.789 504.555 521.762 504.828 521.762 cv
505.254 521.762 505.629 521.824 505.953 521.945 cv
506.273 522.066 506.539 522.23 506.754 522.441 cv
506.965 522.652 507.125 522.898 507.23 523.172 cv
507.336 523.453 507.391 523.75 507.391 524.062 cv
507.391 524.352 507.363 524.633 507.313 524.91 cv
507.262 525.195 507.156 525.5 506.996 525.824 cv
506.832 526.152 506.598 526.516 506.293 526.914 cv
505.984 527.316 505.578 527.777 505.074 528.293 cv
503.668 529.762 li
507.527 529.762 li
507.559 529.766 507.594 529.777 507.633 529.793 cv
507.664 529.816 507.695 529.848 507.723 529.887 cv
507.746 529.93 507.766 529.98 507.777 530.039 cv
507.789 530.105 507.793 530.176 507.797 530.254 cv
cp
f
574.914 530.297 mo
574.91 530.387 574.902 530.457 574.891 530.516 cv
574.875 530.578 574.855 530.629 574.836 530.66 cv
574.813 530.699 574.789 530.723 574.758 530.738 cv
574.727 530.754 574.695 530.762 574.668 530.762 cv
570.031 530.762 li
569.996 530.762 569.969 530.754 569.941 530.738 cv
569.914 530.723 569.887 530.699 569.863 530.66 cv
569.836 530.629 569.816 530.578 569.805 530.516 cv
569.789 530.457 569.781 530.387 569.785 530.297 cv
569.781 530.219 569.789 530.145 569.805 530.082 cv
569.816 530.023 569.832 529.977 569.855 529.937 cv
569.871 529.902 569.898 529.871 569.93 529.848 cv
569.961 529.828 569.992 529.82 570.031 529.816 cv
571.883 529.816 li
571.883 523.07 li
570.168 524.09 li
570.078 524.141 570.008 524.168 569.961 524.176 cv
569.906 524.184 569.863 524.176 569.832 524.145 cv
569.797 524.117 569.777 524.066 569.766 523.996 cv
569.754 523.93 569.746 523.844 569.75 523.734 cv
569.746 523.66 569.75 523.594 569.762 523.535 cv
569.766 523.484 569.777 523.437 569.793 523.398 cv
569.805 523.363 569.824 523.332 569.848 523.305 cv
569.871 523.277 569.902 523.25 569.949 523.223 cv
571.992 521.91 li
572.008 521.898 572.027 521.887 572.059 521.879 cv
572.082 521.871 572.117 521.863 572.164 521.852 cv
572.203 521.844 572.254 521.836 572.309 521.832 cv
572.363 521.832 572.43 521.832 572.516 521.828 cv
572.621 521.832 572.715 521.836 572.789 521.844 cv
572.859 521.852 572.914 521.867 572.961 521.883 cv
573 521.902 573.027 521.922 573.043 521.945 cv
573.051 521.973 573.059 521.996 573.063 522.02 cv
573.063 529.816 li
574.668 529.816 li
574.703 529.82 574.738 529.828 574.77 529.848 cv
574.801 529.871 574.824 529.902 574.848 529.937 cv
574.863 529.977 574.879 530.023 574.895 530.082 cv
574.902 530.145 574.91 530.219 574.914 530.297 cv
cp
f
582.352 528.238 mo
582.348 528.391 582.324 528.512 582.281 528.598 cv
582.234 528.687 582.172 528.73 582.09 528.727 cv
581.09 528.727 li
581.09 530.59 li
581.09 530.629 581.078 530.66 581.063 530.684 cv
581.039 530.711 581.008 530.73 580.965 530.75 cv
580.914 530.766 580.852 530.777 580.781 530.789 cv
580.703 530.797 580.609 530.801 580.492 530.805 cv
580.375 530.801 580.277 530.797 580.207 530.789 cv
580.129 530.777 580.07 530.766 580.027 530.75 cv
579.98 530.73 579.949 530.711 579.934 530.684 cv
579.914 530.66 579.906 530.629 579.91 530.59 cv
579.91 528.727 li
576.281 528.727 li
576.223 528.73 576.18 528.723 576.145 528.707 cv
576.109 528.695 576.074 528.668 576.047 528.629 cv
576.016 528.594 575.996 528.543 575.984 528.473 cv
575.973 528.406 575.969 528.316 575.969 528.203 cv
575.969 528.121 575.969 528.043 575.977 527.973 cv
575.977 527.902 575.988 527.84 576.004 527.785 cv
576.016 527.73 576.031 527.676 576.059 527.621 cv
576.078 527.566 576.105 527.512 576.141 527.449 cv
579.301 522.062 li
579.32 522.027 579.355 521.996 579.402 521.969 cv
579.445 521.941 579.5 521.918 579.574 521.898 cv
579.641 521.883 579.727 521.871 579.832 521.859 cv
579.934 521.855 580.055 521.852 580.195 521.848 cv
580.344 521.852 580.48 521.855 580.598 521.867 cv
580.711 521.879 580.801 521.895 580.875 521.91 cv
580.941 521.93 580.996 521.953 581.035 521.984 cv
581.07 522.016 581.09 522.051 581.09 522.09 cv
581.09 527.754 li
582.09 527.754 li
582.164 527.758 582.227 527.797 582.277 527.875 cv
582.324 527.957 582.348 528.078 582.352 528.238 cv
cp
579.91 522.887 mo
579.898 522.887 li
577.047 527.754 li
579.91 527.754 li
cp
f
649.125 530.297 mo
649.121 530.387 649.113 530.457 649.102 530.516 cv
649.086 530.578 649.066 530.629 649.047 530.66 cv
649.023 530.699 649 530.723 648.969 530.738 cv
648.938 530.754 648.906 530.762 648.879 530.762 cv
644.242 530.762 li
644.207 530.762 644.18 530.754 644.152 530.738 cv
644.125 530.723 644.098 530.699 644.074 530.66 cv
644.047 530.629 644.027 530.578 644.016 530.516 cv
644 530.457 643.992 530.387 643.996 530.297 cv
643.992 530.219 644 530.145 644.016 530.082 cv
644.027 530.023 644.043 529.977 644.066 529.937 cv
644.082 529.902 644.109 529.871 644.141 529.848 cv
644.172 529.828 644.203 529.82 644.242 529.816 cv
646.094 529.816 li
646.094 523.07 li
644.379 524.09 li
644.289 524.141 644.219 524.168 644.172 524.176 cv
644.117 524.184 644.074 524.176 644.043 524.145 cv
644.008 524.117 643.988 524.066 643.977 523.996 cv
643.965 523.93 643.957 523.844 643.961 523.734 cv
643.957 523.66 643.961 523.594 643.973 523.535 cv
643.977 523.484 643.988 523.437 644.004 523.398 cv
644.016 523.363 644.035 523.332 644.059 523.305 cv
644.082 523.277 644.113 523.25 644.16 523.223 cv
646.203 521.91 li
646.219 521.898 646.238 521.887 646.27 521.879 cv
646.293 521.871 646.328 521.863 646.375 521.852 cv
646.414 521.844 646.465 521.836 646.52 521.832 cv
646.574 521.832 646.641 521.832 646.727 521.828 cv
646.832 521.832 646.926 521.836 647 521.844 cv
647.07 521.852 647.125 521.867 647.172 521.883 cv
647.211 521.902 647.238 521.922 647.254 521.945 cv
647.262 521.973 647.27 521.996 647.273 522.02 cv
647.273 529.816 li
648.879 529.816 li
648.914 529.82 648.949 529.828 648.98 529.848 cv
649.012 529.871 649.035 529.902 649.059 529.937 cv
649.074 529.977 649.09 530.023 649.105 530.082 cv
649.113 530.145 649.121 530.219 649.125 530.297 cv
cp
f
656.414 527.891 mo
656.414 528.281 656.352 528.66 656.234 529.02 cv
656.109 529.387 655.926 529.703 655.684 529.977 cv
655.434 530.254 655.121 530.477 654.746 530.641 cv
654.363 530.809 653.918 530.891 653.402 530.891 cv
653.031 530.891 652.703 530.848 652.422 530.754 cv
652.137 530.668 651.891 530.535 651.68 530.363 cv
651.469 530.195 651.293 529.988 651.156 529.742 cv
651.016 529.496 650.902 529.215 650.82 528.898 cv
650.734 528.586 650.676 528.242 650.641 527.863 cv
650.602 527.492 650.582 527.09 650.586 526.656 cv
650.582 526.277 650.602 525.895 650.645 525.504 cv
650.684 525.121 650.758 524.746 650.863 524.379 cv
650.969 524.02 651.113 523.68 651.293 523.363 cv
651.473 523.047 651.699 522.77 651.973 522.535 cv
652.246 522.301 652.57 522.113 652.949 521.973 cv
653.328 521.836 653.77 521.77 654.273 521.766 cv
654.441 521.77 654.613 521.777 654.785 521.797 cv
654.957 521.82 655.117 521.852 655.266 521.883 cv
655.414 521.922 655.535 521.957 655.637 521.996 cv
655.734 522.035 655.801 522.07 655.836 522.094 cv
655.863 522.121 655.887 522.148 655.906 522.176 cv
655.922 522.207 655.938 522.238 655.945 522.273 cv
655.953 522.309 655.957 522.348 655.965 522.391 cv
655.965 522.434 655.969 522.488 655.973 522.551 cv
655.969 522.637 655.969 522.707 655.969 522.762 cv
655.965 522.824 655.953 522.871 655.941 522.906 cv
655.922 522.945 655.902 522.973 655.879 522.988 cv
655.852 523.008 655.82 523.016 655.781 523.016 cv
655.73 523.016 655.66 523 655.574 522.969 cv
655.484 522.937 655.379 522.902 655.258 522.859 cv
655.133 522.824 654.984 522.789 654.809 522.754 cv
654.633 522.727 654.43 522.711 654.199 522.707 cv
653.77 522.711 653.402 522.797 653.098 522.969 cv
652.793 523.141 652.543 523.375 652.348 523.668 cv
652.152 523.961 652.008 524.301 651.918 524.684 cv
651.82 525.074 651.766 525.477 651.758 525.895 cv
651.875 525.828 652.012 525.762 652.16 525.691 cv
652.309 525.625 652.469 525.562 652.645 525.504 cv
652.82 525.453 653.008 525.406 653.203 525.371 cv
653.398 525.34 653.609 525.324 653.836 525.32 cv
654.313 525.324 654.715 525.391 655.047 525.516 cv
655.375 525.648 655.641 525.828 655.848 526.059 cv
656.047 526.289 656.191 526.559 656.281 526.871 cv
656.367 527.184 656.414 527.523 656.414 527.891 cv
cp
655.219 528 mo
655.219 527.738 655.191 527.496 655.141 527.277 cv
655.086 527.062 654.996 526.879 654.875 526.723 cv
654.75 526.574 654.586 526.457 654.383 526.375 cv
654.172 526.293 653.918 526.25 653.621 526.25 cv
653.449 526.25 653.281 526.266 653.113 526.297 cv
652.941 526.328 652.777 526.371 652.621 526.418 cv
652.461 526.473 652.313 526.535 652.172 526.605 cv
652.027 526.68 651.895 526.754 651.777 526.832 cv
651.773 527.426 651.813 527.922 651.891 528.316 cv
651.965 528.715 652.074 529.031 652.219 529.27 cv
652.363 529.512 652.543 529.684 652.758 529.785 cv
652.973 529.891 653.223 529.941 653.512 529.937 cv
653.801 529.941 654.055 529.887 654.27 529.773 cv
654.484 529.668 654.66 529.52 654.805 529.332 cv
654.945 529.148 655.051 528.941 655.117 528.711 cv
655.184 528.48 655.219 528.246 655.219 528 cv
cp
f
16.625 384.176 mo
16.723 384.18 16.805 384.184 16.871 384.191 cv
16.945 384.203 17.004 384.223 17.047 384.246 cv
17.098 384.273 17.133 384.305 17.148 384.336 cv
17.172 384.375 17.18 384.41 17.18 384.449 cv
17.18 389.289 li
17.18 389.41 17.141 389.523 17.059 389.629 cv
16.98 389.738 16.84 389.793 16.633 389.789 cv
7.641 389.789 li
7.438 389.793 7.297 389.738 7.215 389.629 cv
7.137 389.523 7.098 389.41 7.094 389.289 cv
7.094 384.504 li
7.098 384.465 7.105 384.426 7.125 384.391 cv
7.148 384.359 7.184 384.332 7.227 384.309 cv
7.277 384.289 7.336 384.273 7.402 384.258 cv
7.477 384.246 7.563 384.238 7.664 384.238 cv
7.758 384.238 7.84 384.246 7.91 384.258 cv
7.98 384.273 8.039 384.289 8.082 384.309 cv
8.129 384.332 8.16 384.359 8.18 384.391 cv
8.203 384.426 8.215 384.465 8.211 384.504 cv
8.211 388.449 li
11.375 388.449 li
11.375 385.066 li
11.379 385.027 11.391 384.988 11.41 384.953 cv
11.438 384.922 11.469 384.895 11.508 384.867 cv
11.551 384.848 11.609 384.832 11.68 384.816 cv
11.754 384.809 11.84 384.801 11.934 384.801 cv
12.031 384.801 12.109 384.809 12.176 384.816 cv
12.246 384.832 12.301 384.848 12.34 384.867 cv
12.383 384.895 12.414 384.922 12.43 384.953 cv
12.449 384.988 12.457 385.027 12.457 385.066 cv
12.457 388.449 li
16.066 388.449 li
16.066 384.449 li
16.066 384.41 16.078 384.375 16.098 384.336 cv
16.121 384.305 16.152 384.273 16.195 384.246 cv
16.242 384.223 16.301 384.203 16.367 384.191 cv
16.438 384.184 16.523 384.18 16.625 384.176 cv
cp
f
16.984 376.109 mo
17.031 376.109 17.066 376.121 17.09 376.141 cv
17.121 376.164 17.145 376.199 17.164 376.242 cv
17.184 376.293 17.195 376.355 17.211 376.437 cv
17.219 376.52 17.227 376.625 17.227 376.746 cv
17.227 376.879 17.219 376.984 17.211 377.066 cv
17.195 377.152 17.184 377.219 17.164 377.262 cv
17.145 377.312 17.121 377.344 17.09 377.363 cv
17.066 377.387 17.031 377.398 16.984 377.395 cv
12.879 377.395 li
12.48 377.398 12.16 377.43 11.914 377.488 cv
11.672 377.555 11.461 377.645 11.281 377.762 cv
11.105 377.879 10.969 378.035 10.875 378.223 cv
10.781 378.418 10.734 378.637 10.734 378.883 cv
10.734 379.207 10.852 379.531 11.078 379.852 cv
11.313 380.176 11.645 380.512 12.082 380.863 cv
16.984 380.863 li
17.031 380.867 17.066 380.879 17.09 380.895 cv
17.121 380.918 17.145 380.949 17.164 380.996 cv
17.184 381.043 17.195 381.109 17.211 381.187 cv
17.219 381.273 17.227 381.379 17.227 381.508 cv
17.227 381.637 17.219 381.742 17.211 381.82 cv
17.195 381.906 17.184 381.973 17.164 382.02 cv
17.145 382.074 17.121 382.105 17.09 382.121 cv
17.066 382.141 17.031 382.152 16.984 382.148 cv
9.973 382.148 li
9.934 382.152 9.898 382.145 9.867 382.125 cv
9.84 382.113 9.816 382.082 9.789 382.031 cv
9.77 381.988 9.754 381.926 9.742 381.852 cv
9.738 381.781 9.734 381.687 9.73 381.562 cv
9.734 381.453 9.738 381.355 9.742 381.277 cv
9.754 381.203 9.77 381.145 9.789 381.102 cv
9.816 381.062 9.84 381.035 9.867 381.016 cv
9.898 381 9.934 380.992 9.973 380.988 cv
10.898 380.988 li
10.457 380.598 10.137 380.203 9.93 379.809 cv
9.727 379.418 9.621 379.02 9.621 378.617 cv
9.621 378.148 9.703 377.758 9.859 377.437 cv
10.023 377.121 10.234 376.859 10.496 376.66 cv
10.762 376.465 11.07 376.324 11.426 376.238 cv
11.781 376.152 12.211 376.109 12.707 376.109 cv
cp
f
13.176 367.785 mo
13.379 367.789 13.52 367.84 13.605 367.937 cv
13.691 368.043 13.734 368.16 13.734 368.285 cv
13.734 372.902 li
14.125 372.906 14.477 372.867 14.789 372.785 cv
15.102 372.711 15.371 372.578 15.59 372.395 cv
15.816 372.215 15.988 371.98 16.105 371.684 cv
16.23 371.395 16.289 371.035 16.285 370.609 cv
16.289 370.277 16.262 369.98 16.203 369.719 cv
16.152 369.457 16.09 369.23 16.02 369.039 cv
15.953 368.852 15.895 368.695 15.836 368.57 cv
15.785 368.449 15.758 368.355 15.754 368.293 cv
15.758 368.258 15.766 368.227 15.781 368.195 cv
15.801 368.168 15.828 368.145 15.863 368.125 cv
15.902 368.113 15.953 368.102 16.016 368.09 cv
16.082 368.086 16.16 368.082 16.254 368.078 cv
16.324 368.082 16.383 368.086 16.43 368.086 cv
16.477 368.094 16.52 368.098 16.559 368.105 cv
16.598 368.113 16.633 368.129 16.664 368.145 cv
16.695 368.168 16.727 368.191 16.754 368.215 cv
16.785 368.246 16.832 368.328 16.895 368.469 cv
16.961 368.609 17.023 368.793 17.086 369.016 cv
17.148 369.242 17.203 369.5 17.254 369.793 cv
17.301 370.086 17.324 370.398 17.328 370.73 cv
17.324 371.309 17.246 371.816 17.086 372.246 cv
16.926 372.684 16.688 373.047 16.371 373.34 cv
16.055 373.641 15.66 373.863 15.18 374.012 cv
14.703 374.16 14.145 374.234 13.508 374.234 cv
12.91 374.234 12.371 374.16 11.887 374.004 cv
11.41 373.852 11 373.625 10.664 373.328 cv
10.328 373.035 10.07 372.68 9.891 372.266 cv
9.711 371.852 9.621 371.387 9.621 370.871 cv
9.621 370.32 9.711 369.852 9.887 369.465 cv
10.066 369.078 10.305 368.762 10.602 368.508 cv
10.902 368.262 11.254 368.078 11.652 367.961 cv
12.059 367.848 12.488 367.789 12.941 367.785 cv
cp
12.793 369.078 mo
12.117 369.062 11.586 369.215 11.203 369.531 cv
10.82 369.848 10.629 370.316 10.625 370.934 cv
10.629 371.258 10.688 371.539 10.805 371.777 cv
10.926 372.02 11.086 372.219 11.281 372.379 cv
11.48 372.543 11.711 372.668 11.973 372.754 cv
12.234 372.844 12.508 372.895 12.793 372.902 cv
cp
f
10.43 361.723 mo
10.547 361.727 10.645 361.727 10.719 361.73 cv
10.801 361.738 10.863 361.75 10.902 361.762 cv
10.949 361.781 10.98 361.801 11.004 361.82 cv
11.027 361.848 11.039 361.879 11.039 361.918 cv
11.039 361.961 11.027 362.012 11.004 362.07 cv
10.98 362.133 10.957 362.203 10.934 362.273 cv
10.91 362.352 10.891 362.434 10.867 362.527 cv
10.852 362.621 10.84 362.723 10.836 362.832 cv
10.84 362.965 10.867 363.094 10.914 363.215 cv
10.969 363.34 11.055 363.469 11.172 363.605 cv
11.297 363.746 11.453 363.891 11.648 364.039 cv
11.844 364.191 12.086 364.359 12.371 364.539 cv
16.984 364.539 li
17.031 364.543 17.066 364.555 17.09 364.57 cv
17.121 364.594 17.145 364.625 17.164 364.672 cv
17.184 364.719 17.195 364.785 17.211 364.863 cv
17.219 364.949 17.227 365.055 17.227 365.184 cv
17.227 365.312 17.219 365.418 17.211 365.496 cv
17.195 365.582 17.184 365.648 17.164 365.695 cv
17.145 365.75 17.121 365.781 17.09 365.797 cv
17.066 365.816 17.031 365.828 16.984 365.824 cv
9.973 365.824 li
9.934 365.828 9.898 365.82 9.867 365.801 cv
9.84 365.789 9.816 365.758 9.789 365.707 cv
9.77 365.664 9.754 365.602 9.742 365.527 cv
9.738 365.457 9.734 365.363 9.73 365.238 cv
9.734 365.129 9.738 365.031 9.742 364.953 cv
9.754 364.879 9.77 364.82 9.789 364.777 cv
9.816 364.738 9.84 364.711 9.867 364.691 cv
9.898 364.676 9.934 364.668 9.973 364.664 cv
10.992 364.664 li
10.711 364.477 10.484 364.293 10.309 364.121 cv
10.133 363.953 9.992 363.793 9.891 363.641 cv
9.789 363.492 9.719 363.344 9.68 363.195 cv
9.641 363.047 9.621 362.898 9.621 362.746 cv
9.621 362.68 9.625 362.602 9.633 362.516 cv
9.641 362.43 9.656 362.34 9.676 362.246 cv
9.699 362.152 9.723 362.07 9.746 361.992 cv
9.773 361.922 9.801 361.867 9.824 361.832 cv
9.855 361.805 9.879 361.785 9.898 361.77 cv
9.926 361.762 9.957 361.75 9.988 361.742 cv
10.027 361.734 10.078 361.73 10.148 361.727 cv
10.219 361.727 10.313 361.727 10.43 361.723 cv
cp
f
10.289 354.68 mo
10.473 354.684 10.605 354.707 10.684 354.754 cv
10.766 354.805 10.805 354.867 10.805 354.941 cv
10.805 355.949 li
10.992 355.77 11.199 355.641 11.426 355.566 cv
11.652 355.496 11.887 355.461 12.129 355.457 cv
12.535 355.461 12.895 355.527 13.207 355.652 cv
13.52 355.785 13.785 355.969 13.996 356.211 cv
14.215 356.453 14.379 356.742 14.492 357.07 cv
14.609 357.406 14.668 357.773 14.664 358.176 cv
14.668 358.465 14.629 358.738 14.551 358.992 cv
14.477 359.254 14.383 359.449 14.266 359.586 cv
14.363 359.68 14.469 359.758 14.586 359.816 cv
14.707 359.879 14.844 359.91 14.996 359.906 cv
15.18 359.91 15.332 359.824 15.449 359.652 cv
15.574 359.484 15.637 359.262 15.645 358.98 cv
15.723 357.148 li
15.734 356.801 15.781 356.484 15.867 356.191 cv
15.953 355.902 16.078 355.648 16.234 355.434 cv
16.395 355.223 16.586 355.055 16.816 354.934 cv
17.051 354.816 17.32 354.758 17.625 354.754 cv
17.945 354.758 18.25 354.824 18.543 354.957 cv
18.832 355.094 19.086 355.301 19.309 355.578 cv
19.527 355.859 19.703 356.215 19.832 356.645 cv
19.957 357.074 20.02 357.582 20.023 358.168 cv
20.02 358.738 19.973 359.223 19.879 359.617 cv
19.781 360.016 19.648 360.34 19.484 360.594 cv
19.316 360.848 19.121 361.031 18.891 361.145 cv
18.656 361.262 18.402 361.32 18.137 361.316 cv
17.965 361.32 17.801 361.301 17.641 361.254 cv
17.477 361.215 17.324 361.152 17.18 361.066 cv
17.035 360.984 16.898 360.875 16.762 360.746 cv
16.633 360.621 16.5 360.477 16.371 360.305 cv
16.242 360.562 16.078 360.75 15.879 360.871 cv
15.684 360.992 15.473 361.051 15.238 361.051 cv
14.926 361.051 14.641 360.988 14.391 360.859 cv
14.141 360.73 13.918 360.57 13.719 360.375 cv
13.527 360.539 13.313 360.664 13.07 360.758 cv
12.832 360.852 12.539 360.898 12.191 360.898 cv
11.797 360.898 11.438 360.832 11.117 360.695 cv
10.801 360.562 10.535 360.375 10.316 360.133 cv
10.102 359.895 9.934 359.609 9.813 359.273 cv
9.699 358.941 9.641 358.574 9.637 358.176 cv
9.641 357.965 9.652 357.766 9.672 357.582 cv
9.699 357.398 9.73 357.227 9.77 357.062 cv
9.77 354.941 li
9.773 354.855 9.816 354.789 9.898 354.746 cv
9.988 354.703 10.117 354.684 10.289 354.68 cv
cp
12.137 356.687 mo
11.664 356.691 11.293 356.824 11.02 357.082 cv
10.754 357.348 10.617 357.719 10.617 358.199 cv
10.617 358.453 10.66 358.672 10.742 358.852 cv
10.828 359.039 10.941 359.191 11.086 359.312 cv
11.234 359.434 11.402 359.523 11.59 359.582 cv
11.777 359.645 11.977 359.676 12.184 359.672 cv
12.648 359.676 13.012 359.543 13.277 359.281 cv
13.543 359.02 13.676 358.652 13.672 358.176 cv
13.676 357.926 13.637 357.707 13.551 357.516 cv
13.473 357.332 13.359 357.176 13.219 357.051 cv
13.078 356.93 12.914 356.84 12.723 356.777 cv
12.539 356.723 12.344 356.691 12.137 356.687 cv
cp
17.695 356.043 mo
17.391 356.047 17.16 356.172 16.996 356.414 cv
16.836 356.664 16.746 356.996 16.734 357.414 cv
16.672 359.23 li
16.805 359.398 16.93 359.535 17.043 359.637 cv
17.16 359.746 17.27 359.828 17.379 359.891 cv
17.484 359.953 17.59 359.996 17.695 360.02 cv
17.797 360.043 17.902 360.055 18.012 360.055 cv
18.348 360.055 18.602 359.887 18.781 359.543 cv
18.953 359.203 19.043 358.723 19.043 358.105 cv
19.043 357.719 19.004 357.395 18.93 357.129 cv
18.852 356.871 18.75 356.66 18.629 356.496 cv
18.5 356.34 18.359 356.223 18.199 356.148 cv
18.039 356.082 17.871 356.047 17.695 356.043 cv
cp
f
17.18 349.828 mo
19.758 350.762 li
19.84 350.797 19.902 350.875 19.949 351 cv
19.992 351.129 20.016 351.324 20.016 351.582 cv
20.016 351.723 20.008 351.832 19.996 351.91 cv
19.98 351.996 19.957 352.059 19.93 352.098 cv
19.895 352.145 19.855 352.168 19.805 352.172 cv
19.75 352.18 19.688 352.168 19.617 352.133 cv
17.18 351.168 li
17.16 351.215 17.129 351.262 17.078 351.301 cv
17.035 351.348 16.984 351.375 16.93 351.387 cv
10.227 353.887 li
10.121 353.93 10.035 353.953 9.973 353.949 cv
9.91 353.953 9.863 353.93 9.824 353.887 cv
9.793 353.848 9.766 353.781 9.75 353.684 cv
9.738 353.594 9.734 353.469 9.73 353.312 cv
9.734 353.156 9.738 353.035 9.742 352.945 cv
9.754 352.859 9.766 352.789 9.785 352.734 cv
9.809 352.684 9.84 352.645 9.875 352.621 cv
9.918 352.598 9.973 352.574 10.035 352.547 cv
15.66 350.543 li
15.66 350.52 li
10.004 348.59 li
9.906 348.559 9.844 348.523 9.813 348.477 cv
9.789 348.437 9.766 348.371 9.75 348.277 cv
9.738 348.191 9.734 348.062 9.73 347.895 cv
9.734 347.75 9.738 347.629 9.75 347.535 cv
9.766 347.441 9.793 347.375 9.824 347.328 cv
9.863 347.289 9.91 347.266 9.973 347.262 cv
10.035 347.266 10.113 347.281 10.203 347.309 cv
cp
f
15.754 335.191 mo
15.84 335.191 15.91 335.195 15.973 335.199 cv
16.035 335.207 16.09 335.215 16.137 335.227 cv
16.184 335.242 16.227 335.262 16.262 335.277 cv
16.301 335.301 16.344 335.336 16.395 335.387 cv
16.445 335.441 16.523 335.551 16.629 335.715 cv
16.738 335.883 16.844 336.09 16.941 336.336 cv
17.047 336.582 17.129 336.863 17.199 337.184 cv
17.266 337.504 17.301 337.855 17.305 338.23 cv
17.301 338.891 17.195 339.48 16.977 340.008 cv
16.762 340.535 16.441 340.984 16.012 341.355 cv
15.59 341.727 15.063 342.012 14.434 342.211 cv
13.809 342.41 13.086 342.512 12.27 342.508 cv
11.434 342.512 10.691 342.402 10.035 342.187 cv
9.383 341.973 8.828 341.672 8.371 341.281 cv
7.918 340.895 7.57 340.43 7.332 339.883 cv
7.094 339.344 6.973 338.738 6.973 338.074 cv
6.973 337.785 7 337.504 7.055 337.227 cv
7.109 336.953 7.18 336.699 7.258 336.465 cv
7.344 336.234 7.438 336.027 7.547 335.84 cv
7.656 335.66 7.746 335.531 7.816 335.461 cv
7.887 335.391 7.941 335.348 7.977 335.324 cv
8.016 335.309 8.059 335.289 8.105 335.273 cv
8.156 335.262 8.215 335.254 8.281 335.242 cv
8.352 335.238 8.434 335.234 8.523 335.23 cv
8.629 335.234 8.715 335.238 8.785 335.246 cv
8.859 335.258 8.922 335.273 8.969 335.293 cv
9.023 335.316 9.059 335.34 9.078 335.367 cv
9.105 335.398 9.117 335.434 9.113 335.473 cv
9.117 335.547 9.066 335.652 8.961 335.781 cv
8.863 335.914 8.754 336.082 8.629 336.285 cv
8.512 336.496 8.398 336.746 8.293 337.039 cv
8.195 337.336 8.145 337.687 8.141 338.098 cv
8.145 338.551 8.234 338.961 8.41 339.328 cv
8.59 339.695 8.852 340.012 9.199 340.27 cv
9.551 340.535 9.977 340.734 10.477 340.875 cv
10.977 341.02 11.551 341.094 12.191 341.09 cv
12.836 341.094 13.402 341.023 13.891 340.883 cv
14.383 340.746 14.793 340.547 15.121 340.289 cv
15.453 340.031 15.699 339.715 15.867 339.34 cv
16.039 338.965 16.125 338.539 16.121 338.059 cv
16.125 337.66 16.074 337.309 15.973 337.008 cv
15.875 336.707 15.766 336.453 15.641 336.238 cv
15.52 336.031 15.41 335.855 15.309 335.719 cv
15.215 335.582 15.164 335.477 15.16 335.395 cv
15.164 335.363 15.172 335.332 15.184 335.301 cv
15.203 335.277 15.234 335.254 15.273 335.238 cv
15.32 335.223 15.379 335.211 15.457 335.203 cv
15.535 335.195 15.637 335.191 15.754 335.191 cv
cp
f
13.398 327.043 mo
13.977 327.047 14.504 327.121 14.98 327.27 cv
15.465 327.422 15.879 327.648 16.223 327.945 cv
16.574 328.246 16.844 328.621 17.035 329.066 cv
17.23 329.52 17.324 330.039 17.328 330.629 cv
17.324 331.207 17.242 331.711 17.07 332.137 cv
16.902 332.566 16.652 332.922 16.324 333.207 cv
15.996 333.496 15.602 333.711 15.133 333.848 cv
14.668 333.988 14.137 334.055 13.539 334.055 cv
12.973 334.055 12.445 333.984 11.965 333.836 cv
11.484 333.691 11.07 333.465 10.719 333.164 cv
10.371 332.867 10.102 332.496 9.91 332.047 cv
9.719 331.602 9.621 331.078 9.621 330.48 cv
9.621 329.902 9.707 329.402 9.879 328.973 cv
10.051 328.547 10.301 328.187 10.629 327.902 cv
10.957 327.617 11.355 327.402 11.82 327.258 cv
12.289 327.117 12.816 327.047 13.398 327.043 cv
cp
13.484 328.375 mo
13.109 328.379 12.75 328.414 12.41 328.48 cv
12.074 328.555 11.781 328.672 11.523 328.832 cv
11.273 328.996 11.07 329.215 10.918 329.492 cv
10.773 329.773 10.699 330.121 10.695 330.531 cv
10.699 330.918 10.766 331.246 10.898 331.52 cv
11.035 331.797 11.227 332.023 11.473 332.199 cv
11.719 332.379 12.012 332.512 12.348 332.594 cv
12.688 332.684 13.055 332.727 13.453 332.723 cv
13.84 332.727 14.203 332.691 14.539 332.617 cv
14.879 332.551 15.172 332.434 15.422 332.266 cv
15.676 332.102 15.879 331.879 16.023 331.602 cv
16.176 331.324 16.25 330.977 16.246 330.562 cv
16.25 330.187 16.18 329.859 16.043 329.578 cv
15.91 329.301 15.723 329.074 15.473 328.895 cv
15.23 328.719 14.938 328.59 14.602 328.504 cv
14.266 328.422 13.895 328.379 13.484 328.375 cv
cp
f
16.984 319.117 mo
17.031 319.117 17.066 319.129 17.09 319.148 cv
17.121 319.172 17.145 319.207 17.164 319.25 cv
17.184 319.301 17.195 319.363 17.211 319.445 cv
17.219 319.527 17.227 319.633 17.227 319.754 cv
17.227 319.887 17.219 319.992 17.211 320.074 cv
17.195 320.16 17.184 320.227 17.164 320.27 cv
17.145 320.32 17.121 320.352 17.09 320.371 cv
17.066 320.395 17.031 320.406 16.984 320.402 cv
12.879 320.402 li
12.48 320.406 12.16 320.437 11.914 320.496 cv
11.672 320.562 11.461 320.652 11.281 320.77 cv
11.105 320.887 10.969 321.043 10.875 321.23 cv
10.781 321.426 10.734 321.645 10.734 321.891 cv
10.734 322.215 10.852 322.539 11.078 322.859 cv
11.313 323.184 11.645 323.52 12.082 323.871 cv
16.984 323.871 li
17.031 323.875 17.066 323.887 17.09 323.902 cv
17.121 323.926 17.145 323.957 17.164 324.004 cv
17.184 324.051 17.195 324.117 17.211 324.195 cv
17.219 324.281 17.227 324.387 17.227 324.516 cv
17.227 324.645 17.219 324.75 17.211 324.828 cv
17.195 324.914 17.184 324.98 17.164 325.027 cv
17.145 325.082 17.121 325.113 17.09 325.129 cv
17.066 325.148 17.031 325.16 16.984 325.156 cv
9.973 325.156 li
9.934 325.16 9.898 325.152 9.867 325.133 cv
9.84 325.121 9.816 325.09 9.789 325.039 cv
9.77 324.996 9.754 324.934 9.742 324.859 cv
9.738 324.789 9.734 324.695 9.73 324.57 cv
9.734 324.461 9.738 324.363 9.742 324.285 cv
9.754 324.211 9.77 324.152 9.789 324.109 cv
9.816 324.07 9.84 324.043 9.867 324.023 cv
9.898 324.008 9.934 324 9.973 323.996 cv
10.898 323.996 li
10.457 323.605 10.137 323.211 9.93 322.816 cv
9.727 322.426 9.621 322.027 9.621 321.625 cv
9.621 321.156 9.703 320.766 9.859 320.445 cv
10.023 320.129 10.234 319.867 10.496 319.668 cv
10.762 319.473 11.07 319.332 11.426 319.246 cv
11.781 319.16 12.211 319.117 12.707 319.117 cv
cp
f
15.074 312.375 mo
15.438 312.379 15.758 312.445 16.035 312.574 cv
16.316 312.707 16.551 312.895 16.742 313.137 cv
16.938 313.383 17.082 313.676 17.18 314.012 cv
17.277 314.352 17.324 314.723 17.328 315.125 cv
17.324 315.379 17.305 315.617 17.27 315.84 cv
17.227 316.066 17.18 316.266 17.121 316.445 cv
17.063 316.625 17 316.777 16.934 316.902 cv
16.871 317.027 16.813 317.121 16.758 317.176 cv
16.707 317.234 16.637 317.273 16.539 317.297 cv
16.449 317.324 16.32 317.336 16.16 317.336 cv
16.063 317.336 15.98 317.332 15.91 317.32 cv
15.844 317.312 15.789 317.301 15.746 317.281 cv
15.707 317.27 15.676 317.246 15.656 317.219 cv
15.641 317.191 15.633 317.16 15.629 317.121 cv
15.633 317.066 15.668 316.98 15.734 316.867 cv
15.809 316.758 15.887 316.621 15.965 316.453 cv
16.051 316.293 16.125 316.102 16.195 315.875 cv
16.266 315.656 16.301 315.398 16.301 315.102 cv
16.301 314.887 16.277 314.687 16.23 314.508 cv
16.184 314.332 16.117 314.18 16.023 314.051 cv
15.938 313.922 15.82 313.82 15.676 313.75 cv
15.539 313.68 15.371 313.645 15.176 313.645 cv
14.98 313.645 14.816 313.695 14.68 313.797 cv
14.547 313.898 14.426 314.035 14.32 314.199 cv
14.219 314.367 14.129 314.551 14.043 314.758 cv
13.965 314.969 13.879 315.184 13.789 315.402 cv
13.703 315.621 13.602 315.836 13.488 316.047 cv
13.379 316.258 13.246 316.449 13.082 316.613 cv
12.926 316.785 12.73 316.918 12.504 317.016 cv
12.281 317.121 12.016 317.172 11.703 317.168 cv
11.43 317.172 11.164 317.117 10.91 317.008 cv
10.66 316.902 10.441 316.742 10.25 316.527 cv
10.063 316.316 9.91 316.051 9.793 315.73 cv
9.68 315.41 9.621 315.039 9.621 314.609 cv
9.621 314.426 9.637 314.238 9.668 314.051 cv
9.699 313.867 9.738 313.699 9.785 313.543 cv
9.832 313.395 9.883 313.266 9.938 313.156 cv
9.992 313.055 10.043 312.973 10.082 312.914 cv
10.129 312.863 10.164 312.828 10.191 312.805 cv
10.223 312.789 10.258 312.773 10.293 312.766 cv
10.336 312.758 10.383 312.75 10.438 312.742 cv
10.496 312.734 10.566 312.73 10.648 312.73 cv
10.738 312.73 10.816 312.734 10.879 312.742 cv
10.949 312.75 11 312.766 11.039 312.781 cv
11.082 312.805 11.113 312.824 11.129 312.848 cv
11.148 312.875 11.156 312.906 11.156 312.934 cv
11.156 312.984 11.129 313.051 11.07 313.137 cv
11.016 313.227 10.953 313.34 10.887 313.48 cv
10.824 313.621 10.766 313.789 10.703 313.977 cv
10.648 314.168 10.617 314.383 10.617 314.625 cv
10.617 314.848 10.645 315.039 10.691 315.203 cv
10.746 315.371 10.816 315.508 10.902 315.613 cv
10.996 315.719 11.102 315.801 11.227 315.852 cv
11.352 315.91 11.488 315.937 11.633 315.934 cv
11.836 315.937 12.004 315.887 12.141 315.781 cv
12.281 315.68 12.402 315.543 12.504 315.375 cv
12.609 315.211 12.703 315.02 12.785 314.805 cv
12.871 314.594 12.957 314.379 13.043 314.156 cv
13.133 313.937 13.234 313.719 13.34 313.5 cv
13.449 313.285 13.578 313.094 13.734 312.926 cv
13.891 312.762 14.078 312.629 14.297 312.527 cv
14.516 312.43 14.777 312.379 15.074 312.375 cv
cp
f
16.984 304.531 mo
17.031 304.535 17.066 304.543 17.09 304.559 cv
17.121 304.578 17.145 304.613 17.164 304.656 cv
17.184 304.703 17.195 304.762 17.211 304.836 cv
17.219 304.914 17.227 305.008 17.227 305.113 cv
17.227 305.238 17.219 305.336 17.211 305.406 cv
17.195 305.484 17.184 305.543 17.164 305.586 cv
17.145 305.633 17.121 305.664 17.09 305.676 cv
17.066 305.695 17.031 305.703 16.984 305.699 cv
16.059 305.699 li
16.504 306.102 16.824 306.496 17.023 306.883 cv
17.227 307.277 17.324 307.672 17.328 308.066 cv
17.324 308.539 17.25 308.934 17.094 309.25 cv
16.941 309.57 16.73 309.828 16.461 310.023 cv
16.195 310.227 15.883 310.367 15.523 310.449 cv
15.168 310.539 14.734 310.582 14.227 310.578 cv
9.973 310.578 li
9.934 310.582 9.898 310.574 9.867 310.551 cv
9.84 310.535 9.816 310.5 9.789 310.445 cv
9.77 310.398 9.754 310.328 9.742 310.242 cv
9.738 310.16 9.734 310.059 9.73 309.93 cv
9.734 309.809 9.738 309.703 9.742 309.617 cv
9.754 309.535 9.77 309.469 9.789 309.422 cv
9.816 309.375 9.84 309.34 9.867 309.316 cv
9.898 309.297 9.934 309.289 9.973 309.285 cv
14.055 309.285 li
14.469 309.289 14.797 309.258 15.043 309.195 cv
15.289 309.137 15.5 309.047 15.672 308.922 cv
15.852 308.805 15.984 308.648 16.078 308.457 cv
16.176 308.273 16.227 308.055 16.223 307.805 cv
16.227 307.484 16.109 307.164 15.879 306.84 cv
15.652 306.523 15.316 306.184 14.871 305.824 cv
9.973 305.824 li
9.934 305.824 9.898 305.816 9.867 305.797 cv
9.84 305.781 9.816 305.746 9.789 305.691 cv
9.77 305.641 9.754 305.574 9.742 305.492 cv
9.738 305.414 9.734 305.309 9.73 305.176 cv
9.734 305.055 9.738 304.949 9.742 304.863 cv
9.754 304.781 9.77 304.719 9.789 304.672 cv
9.816 304.629 9.84 304.594 9.867 304.566 cv
9.898 304.547 9.934 304.535 9.973 304.531 cv
cp
f
16.984 291.754 mo
17.031 291.758 17.066 291.766 17.09 291.785 cv
17.121 291.809 17.145 291.844 17.164 291.887 cv
17.184 291.937 17.195 292.004 17.211 292.082 cv
17.219 292.168 17.227 292.27 17.227 292.395 cv
17.227 292.527 17.219 292.637 17.211 292.715 cv
17.195 292.801 17.184 292.867 17.164 292.914 cv
17.145 292.969 17.121 293.004 17.09 293.02 cv
17.066 293.043 17.031 293.051 16.984 293.051 cv
12.723 293.051 li
12.43 293.051 12.16 293.078 11.914 293.129 cv
11.672 293.184 11.461 293.266 11.281 293.379 cv
11.105 293.492 10.969 293.637 10.875 293.812 cv
10.781 293.992 10.734 294.203 10.734 294.437 cv
10.734 294.734 10.852 295.031 11.078 295.328 cv
11.313 295.633 11.645 295.961 12.082 296.316 cv
16.984 296.316 li
17.031 296.32 17.066 296.332 17.09 296.348 cv
17.121 296.371 17.145 296.402 17.164 296.449 cv
17.184 296.5 17.195 296.566 17.211 296.648 cv
17.219 296.734 17.227 296.84 17.227 296.961 cv
17.227 297.082 17.219 297.184 17.211 297.27 cv
17.195 297.355 17.184 297.426 17.164 297.473 cv
17.145 297.527 17.121 297.559 17.09 297.574 cv
17.066 297.594 17.031 297.605 16.984 297.602 cv
12.723 297.602 li
12.43 297.605 12.16 297.633 11.914 297.687 cv
11.672 297.746 11.461 297.832 11.281 297.945 cv
11.105 298.059 10.969 298.203 10.875 298.375 cv
10.781 298.555 10.734 298.762 10.734 298.996 cv
10.734 299.297 10.852 299.594 11.078 299.895 cv
11.313 300.195 11.645 300.523 12.082 300.875 cv
16.984 300.875 li
17.031 300.879 17.066 300.891 17.09 300.906 cv
17.121 300.93 17.145 300.961 17.164 301.008 cv
17.184 301.055 17.195 301.121 17.211 301.199 cv
17.219 301.285 17.227 301.391 17.227 301.52 cv
17.227 301.648 17.219 301.754 17.211 301.832 cv
17.195 301.918 17.184 301.984 17.164 302.031 cv
17.145 302.086 17.121 302.117 17.09 302.133 cv
17.066 302.152 17.031 302.164 16.984 302.16 cv
9.973 302.16 li
9.934 302.164 9.898 302.156 9.867 302.137 cv
9.84 302.125 9.816 302.094 9.789 302.043 cv
9.77 302 9.754 301.937 9.742 301.863 cv
9.738 301.793 9.734 301.699 9.73 301.574 cv
9.734 301.465 9.738 301.367 9.742 301.289 cv
9.754 301.215 9.77 301.156 9.789 301.113 cv
9.816 301.074 9.84 301.047 9.867 301.027 cv
9.898 301.012 9.934 301.004 9.973 301 cv
10.898 301 li
10.457 300.609 10.137 300.227 9.93 299.852 cv
9.727 299.484 9.621 299.105 9.621 298.723 cv
9.621 298.434 9.656 298.176 9.723 297.941 cv
9.793 297.715 9.887 297.508 10.008 297.328 cv
10.129 297.152 10.273 297.004 10.441 296.875 cv
10.613 296.754 10.805 296.648 11.008 296.562 cv
10.758 296.332 10.543 296.109 10.363 295.898 cv
10.191 295.687 10.047 295.484 9.934 295.289 cv
9.828 295.094 9.75 294.906 9.695 294.723 cv
9.648 294.539 9.621 294.352 9.621 294.164 cv
9.621 293.711 9.703 293.332 9.859 293.027 cv
10.023 292.723 10.234 292.477 10.496 292.281 cv
10.762 292.094 11.07 291.957 11.426 291.875 cv
11.781 291.797 12.156 291.758 12.551 291.754 cv
cp
f
13.367 282.953 mo
13.984 282.957 14.535 283.023 15.023 283.152 cv
15.512 283.289 15.926 283.484 16.266 283.738 cv
16.605 283.996 16.867 284.312 17.051 284.691 cv
17.234 285.07 17.324 285.504 17.328 285.992 cv
17.324 286.203 17.305 286.398 17.266 286.57 cv
17.223 286.75 17.16 286.922 17.07 287.086 cv
16.984 287.258 16.871 287.426 16.734 287.59 cv
16.602 287.762 16.445 287.937 16.262 288.121 cv
19.766 288.121 li
19.805 288.125 19.844 288.137 19.875 288.152 cv
19.906 288.176 19.93 288.207 19.953 288.254 cv
19.969 288.301 19.984 288.367 20 288.445 cv
20.008 288.531 20.016 288.637 20.016 288.766 cv
20.016 288.895 20.008 289 20 289.078 cv
19.984 289.164 19.969 289.23 19.953 289.277 cv
19.93 289.332 19.906 289.363 19.875 289.379 cv
19.844 289.398 19.805 289.41 19.766 289.406 cv
9.973 289.406 li
9.926 289.41 9.891 289.402 9.859 289.383 cv
9.836 289.371 9.809 289.34 9.785 289.289 cv
9.766 289.246 9.754 289.184 9.742 289.109 cv
9.738 289.039 9.734 288.953 9.73 288.844 cv
9.734 288.738 9.738 288.648 9.742 288.574 cv
9.754 288.508 9.766 288.449 9.785 288.398 cv
9.809 288.355 9.836 288.32 9.859 288.301 cv
9.891 288.285 9.926 288.277 9.973 288.273 cv
10.914 288.273 li
10.699 288.066 10.508 287.863 10.348 287.66 cv
10.188 287.465 10.055 287.266 9.945 287.062 cv
9.84 286.867 9.758 286.66 9.703 286.449 cv
9.648 286.238 9.621 286.016 9.621 285.781 cv
9.621 285.273 9.723 284.84 9.918 284.48 cv
10.117 284.121 10.387 283.832 10.727 283.605 cv
11.074 283.383 11.473 283.215 11.926 283.109 cv
12.383 283.008 12.863 282.957 13.367 282.953 cv
cp
13.516 284.285 mo
13.164 284.289 12.816 284.316 12.477 284.367 cv
12.145 284.426 11.848 284.52 11.586 284.652 cv
11.328 284.789 11.121 284.969 10.961 285.187 cv
10.809 285.414 10.73 285.691 10.727 286.027 cv
10.73 286.195 10.754 286.359 10.801 286.52 cv
10.852 286.684 10.93 286.852 11.035 287.016 cv
11.145 287.187 11.285 287.359 11.457 287.539 cv
11.633 287.723 11.848 287.918 12.098 288.121 cv
14.887 288.121 li
15.324 287.766 15.652 287.43 15.879 287.109 cv
16.109 286.793 16.227 286.457 16.223 286.105 cv
16.227 285.781 16.148 285.504 15.988 285.27 cv
15.836 285.043 15.625 284.855 15.363 284.707 cv
15.105 284.566 14.816 284.457 14.492 284.387 cv
14.172 284.32 13.848 284.289 13.516 284.285 cv
cp
f
16.469 277.457 mo
16.625 277.457 16.742 277.469 16.828 277.488 cv
16.918 277.512 16.984 277.543 17.023 277.582 cv
17.066 277.625 17.105 277.687 17.141 277.77 cv
17.176 277.855 17.203 277.949 17.23 278.055 cv
17.25 278.164 17.27 278.277 17.289 278.395 cv
17.301 278.512 17.309 278.633 17.313 278.75 cv
17.309 279.117 17.262 279.43 17.168 279.687 cv
17.074 279.949 16.93 280.16 16.73 280.324 cv
16.539 280.492 16.293 280.613 15.992 280.687 cv
15.695 280.766 15.344 280.805 14.934 280.801 cv
10.836 280.801 li
10.836 281.781 li
10.84 281.859 10.797 281.922 10.711 281.969 cv
10.629 282.016 10.496 282.039 10.305 282.039 cv
10.211 282.039 10.129 282.035 10.059 282.02 cv
9.996 282.012 9.938 281.992 9.891 281.969 cv
9.848 281.949 9.816 281.922 9.797 281.887 cv
9.781 281.855 9.773 281.82 9.77 281.773 cv
9.77 280.801 li
8.102 280.801 li
8.07 280.805 8.035 280.793 8 280.773 cv
7.973 280.758 7.945 280.727 7.918 280.672 cv
7.898 280.625 7.883 280.559 7.867 280.473 cv
7.859 280.395 7.852 280.289 7.852 280.16 cv
7.852 280.031 7.859 279.926 7.867 279.844 cv
7.883 279.762 7.898 279.695 7.918 279.648 cv
7.945 279.602 7.973 279.57 8 279.547 cv
8.035 279.531 8.07 279.52 8.102 279.516 cv
9.77 279.516 li
9.77 277.715 li
9.773 277.676 9.781 277.641 9.797 277.605 cv
9.816 277.578 9.848 277.551 9.891 277.523 cv
9.938 277.504 9.996 277.488 10.059 277.473 cv
10.129 277.465 10.211 277.457 10.305 277.457 cv
10.496 277.457 10.629 277.48 10.711 277.527 cv
10.797 277.574 10.84 277.637 10.836 277.715 cv
10.836 279.516 li
14.75 279.516 li
15.234 279.52 15.598 279.449 15.844 279.301 cv
16.094 279.16 16.219 278.902 16.215 278.531 cv
16.219 278.418 16.207 278.312 16.18 278.215 cv
16.16 278.125 16.137 278.043 16.105 277.965 cv
16.082 277.895 16.055 277.832 16.031 277.777 cv
16.008 277.73 15.996 277.684 15.996 277.637 cv
15.996 277.613 16.004 277.586 16.016 277.562 cv
16.031 277.539 16.055 277.523 16.09 277.508 cv
16.129 277.5 16.18 277.488 16.238 277.473 cv
16.305 277.465 16.383 277.457 16.469 277.457 cv
cp
f
16.984 274.445 mo
17.031 274.449 17.066 274.461 17.09 274.477 cv
17.121 274.5 17.145 274.531 17.164 274.578 cv
17.184 274.625 17.195 274.691 17.211 274.77 cv
17.219 274.855 17.227 274.961 17.227 275.09 cv
17.227 275.219 17.219 275.324 17.211 275.402 cv
17.195 275.488 17.184 275.555 17.164 275.602 cv
17.145 275.656 17.121 275.687 17.09 275.703 cv
17.066 275.723 17.031 275.734 16.984 275.73 cv
9.973 275.73 li
9.938 275.734 9.906 275.723 9.871 275.703 cv
9.844 275.687 9.816 275.656 9.793 275.602 cv
9.773 275.555 9.758 275.488 9.746 275.402 cv
9.738 275.324 9.734 275.219 9.73 275.09 cv
9.734 274.961 9.738 274.855 9.746 274.77 cv
9.758 274.691 9.773 274.625 9.793 274.578 cv
9.816 274.531 9.844 274.5 9.871 274.477 cv
9.906 274.461 9.938 274.449 9.973 274.445 cv
cp
7.602 274.297 mo
7.906 274.297 8.113 274.355 8.219 274.469 cv
8.332 274.582 8.387 274.793 8.383 275.098 cv
8.387 275.402 8.332 275.609 8.223 275.719 cv
8.117 275.836 7.914 275.891 7.617 275.887 cv
7.316 275.891 7.113 275.832 7.004 275.715 cv
6.898 275.602 6.844 275.391 6.84 275.082 cv
6.844 274.781 6.898 274.578 7 274.465 cv
7.109 274.355 7.309 274.297 7.602 274.297 cv
cp
f
13.398 265.504 mo
13.977 265.508 14.504 265.582 14.98 265.73 cv
15.465 265.883 15.879 266.109 16.223 266.406 cv
16.574 266.707 16.844 267.082 17.035 267.527 cv
17.23 267.98 17.324 268.5 17.328 269.09 cv
17.324 269.668 17.242 270.172 17.07 270.598 cv
16.902 271.027 16.652 271.383 16.324 271.668 cv
15.996 271.957 15.602 272.172 15.133 272.309 cv
14.668 272.449 14.137 272.516 13.539 272.516 cv
12.973 272.516 12.445 272.445 11.965 272.297 cv
11.484 272.152 11.07 271.926 10.719 271.625 cv
10.371 271.328 10.102 270.957 9.91 270.508 cv
9.719 270.062 9.621 269.539 9.621 268.941 cv
9.621 268.363 9.707 267.863 9.879 267.434 cv
10.051 267.008 10.301 266.648 10.629 266.363 cv
10.957 266.078 11.355 265.863 11.82 265.719 cv
12.289 265.578 12.816 265.508 13.398 265.504 cv
cp
13.484 266.836 mo
13.109 266.84 12.75 266.875 12.41 266.941 cv
12.074 267.016 11.781 267.133 11.523 267.293 cv
11.273 267.457 11.07 267.676 10.918 267.953 cv
10.773 268.234 10.699 268.582 10.695 268.992 cv
10.699 269.379 10.766 269.707 10.898 269.98 cv
11.035 270.258 11.227 270.484 11.473 270.66 cv
11.719 270.84 12.012 270.973 12.348 271.055 cv
12.688 271.145 13.055 271.187 13.453 271.184 cv
13.84 271.187 14.203 271.152 14.539 271.078 cv
14.879 271.012 15.172 270.895 15.422 270.727 cv
15.676 270.562 15.879 270.34 16.023 270.062 cv
16.176 269.785 16.25 269.437 16.246 269.023 cv
16.25 268.648 16.18 268.32 16.043 268.039 cv
15.91 267.762 15.723 267.535 15.473 267.355 cv
15.23 267.18 14.938 267.051 14.602 266.965 cv
14.266 266.883 13.895 266.84 13.484 266.836 cv
cp
f
16.984 257.574 mo
17.031 257.574 17.066 257.586 17.09 257.605 cv
17.121 257.629 17.145 257.664 17.164 257.707 cv
17.184 257.758 17.195 257.82 17.211 257.902 cv
17.219 257.984 17.227 258.09 17.227 258.211 cv
17.227 258.344 17.219 258.449 17.211 258.531 cv
17.195 258.617 17.184 258.684 17.164 258.727 cv
17.145 258.777 17.121 258.809 17.09 258.828 cv
17.066 258.852 17.031 258.863 16.984 258.859 cv
12.879 258.859 li
12.48 258.863 12.16 258.895 11.914 258.953 cv
11.672 259.02 11.461 259.109 11.281 259.227 cv
11.105 259.344 10.969 259.5 10.875 259.687 cv
10.781 259.883 10.734 260.102 10.734 260.348 cv
10.734 260.672 10.852 260.996 11.078 261.316 cv
11.313 261.641 11.645 261.977 12.082 262.328 cv
16.984 262.328 li
17.031 262.332 17.066 262.344 17.09 262.359 cv
17.121 262.383 17.145 262.414 17.164 262.461 cv
17.184 262.508 17.195 262.574 17.211 262.652 cv
17.219 262.738 17.227 262.844 17.227 262.973 cv
17.227 263.102 17.219 263.207 17.211 263.285 cv
17.195 263.371 17.184 263.437 17.164 263.484 cv
17.145 263.539 17.121 263.57 17.09 263.586 cv
17.066 263.605 17.031 263.617 16.984 263.613 cv
9.973 263.613 li
9.934 263.617 9.898 263.609 9.867 263.59 cv
9.84 263.578 9.816 263.547 9.789 263.496 cv
9.77 263.453 9.754 263.391 9.742 263.316 cv
9.738 263.246 9.734 263.152 9.73 263.027 cv
9.734 262.918 9.738 262.82 9.742 262.742 cv
9.754 262.668 9.77 262.609 9.789 262.566 cv
9.816 262.527 9.84 262.5 9.867 262.48 cv
9.898 262.465 9.934 262.457 9.973 262.453 cv
10.898 262.453 li
10.457 262.062 10.137 261.668 9.93 261.273 cv
9.727 260.883 9.621 260.484 9.621 260.082 cv
9.621 259.613 9.703 259.223 9.859 258.902 cv
10.023 258.586 10.234 258.324 10.496 258.125 cv
10.762 257.93 11.07 257.789 11.426 257.703 cv
11.781 257.617 12.211 257.574 12.707 257.574 cv
cp
f
6.441 248.738 mo
7.488 249.234 8.559 249.602 9.656 249.844 cv
10.758 250.086 11.863 250.207 12.973 250.207 cv
14.09 250.207 15.199 250.086 16.293 249.836 cv
17.391 249.594 18.461 249.23 19.516 248.754 cv
19.574 248.73 19.629 248.719 19.676 248.711 cv
19.719 248.711 19.754 248.727 19.785 248.762 cv
19.813 248.801 19.832 248.855 19.848 248.93 cv
19.855 249.008 19.863 249.113 19.867 249.238 cv
19.863 249.336 19.859 249.414 19.859 249.48 cv
19.852 249.551 19.844 249.609 19.828 249.656 cv
19.813 249.707 19.793 249.75 19.773 249.777 cv
19.75 249.812 19.727 249.836 19.703 249.848 cv
19.172 250.129 18.637 250.375 18.094 250.586 cv
17.551 250.805 17 250.984 16.441 251.125 cv
15.879 251.273 15.313 251.383 14.738 251.453 cv
14.164 251.531 13.582 251.566 12.996 251.562 cv
12.41 251.566 11.832 251.527 11.258 251.441 cv
10.688 251.363 10.121 251.246 9.555 251.098 cv
8.992 250.949 8.438 250.77 7.891 250.559 cv
7.348 250.348 6.805 250.109 6.27 249.84 cv
6.25 249.836 6.234 249.82 6.215 249.797 cv
6.203 249.773 6.188 249.742 6.168 249.699 cv
6.156 249.66 6.145 249.602 6.133 249.527 cv
6.129 249.457 6.125 249.363 6.121 249.246 cv
6.125 249.129 6.133 249.035 6.145 248.957 cv
6.164 248.887 6.184 248.828 6.207 248.785 cv
6.234 248.746 6.27 248.723 6.309 248.715 cv
6.355 248.711 6.398 248.719 6.441 248.738 cv
cp
f
16.961 239.844 mo
17.008 239.848 17.043 239.855 17.074 239.871 cv
17.109 239.891 17.137 239.926 17.156 239.977 cv
17.176 240.031 17.191 240.102 17.207 240.187 cv
17.219 240.277 17.227 240.391 17.227 240.531 cv
17.227 240.711 17.219 240.859 17.203 240.973 cv
17.188 241.09 17.16 241.176 17.117 241.23 cv
17.078 241.289 17.031 241.336 16.977 241.371 cv
11.934 245.082 li
16.977 245.082 li
17.016 245.086 17.051 245.094 17.082 245.113 cv
17.117 245.137 17.145 245.176 17.16 245.223 cv
17.18 245.277 17.191 245.344 17.207 245.43 cv
17.219 245.516 17.227 245.625 17.227 245.75 cv
17.227 245.879 17.219 245.984 17.207 246.07 cv
17.191 246.16 17.18 246.23 17.16 246.281 cv
17.145 246.336 17.117 246.371 17.082 246.391 cv
17.051 246.414 17.016 246.426 16.977 246.422 cv
7.297 246.422 li
7.258 246.426 7.223 246.414 7.188 246.391 cv
7.16 246.371 7.133 246.336 7.113 246.281 cv
7.098 246.23 7.082 246.16 7.066 246.07 cv
7.055 245.984 7.051 245.879 7.047 245.75 cv
7.051 245.625 7.055 245.516 7.066 245.43 cv
7.082 245.344 7.098 245.277 7.113 245.223 cv
7.133 245.176 7.16 245.137 7.188 245.113 cv
7.223 245.094 7.258 245.086 7.297 245.082 cv
11.777 245.082 li
7.297 241.512 li
7.254 241.484 7.215 241.449 7.18 241.402 cv
7.152 241.363 7.129 241.312 7.105 241.25 cv
7.09 241.195 7.074 241.121 7.063 241.031 cv
7.055 240.949 7.051 240.84 7.047 240.703 cv
7.051 240.57 7.055 240.461 7.066 240.375 cv
7.082 240.293 7.102 240.227 7.117 240.176 cv
7.141 240.129 7.164 240.094 7.195 240.074 cv
7.227 240.059 7.262 240.051 7.297 240.047 cv
7.367 240.051 7.434 240.066 7.5 240.098 cv
7.57 240.133 7.664 240.199 7.781 240.289 cv
11.777 243.633 li
16.563 240.031 li
16.703 239.945 16.793 239.891 16.84 239.871 cv
16.891 239.855 16.934 239.848 16.961 239.844 cv
cp
f
16.984 237.035 mo
17.031 237.039 17.066 237.051 17.09 237.066 cv
17.121 237.09 17.145 237.121 17.164 237.168 cv
17.184 237.215 17.195 237.281 17.211 237.359 cv
17.219 237.445 17.227 237.551 17.227 237.68 cv
17.227 237.809 17.219 237.914 17.211 237.992 cv
17.195 238.078 17.184 238.145 17.164 238.191 cv
17.145 238.246 17.121 238.277 17.09 238.293 cv
17.066 238.312 17.031 238.324 16.984 238.32 cv
9.973 238.32 li
9.938 238.324 9.906 238.312 9.871 238.293 cv
9.844 238.277 9.816 238.246 9.793 238.191 cv
9.773 238.145 9.758 238.078 9.746 237.992 cv
9.738 237.914 9.734 237.809 9.73 237.68 cv
9.734 237.551 9.738 237.445 9.746 237.359 cv
9.758 237.281 9.773 237.215 9.793 237.168 cv
9.816 237.121 9.844 237.09 9.871 237.066 cv
9.906 237.051 9.938 237.039 9.973 237.035 cv
cp
7.602 236.887 mo
7.906 236.887 8.113 236.945 8.219 237.059 cv
8.332 237.172 8.387 237.383 8.383 237.687 cv
8.387 237.992 8.332 238.199 8.223 238.309 cv
8.117 238.426 7.914 238.48 7.617 238.477 cv
7.316 238.48 7.113 238.422 7.004 238.305 cv
6.898 238.191 6.844 237.98 6.84 237.672 cv
6.844 237.371 6.898 237.168 7 237.055 cv
7.109 236.945 7.309 236.887 7.602 236.887 cv
cp
f
16.984 233.332 mo
17.031 233.336 17.066 233.348 17.09 233.363 cv
17.121 233.387 17.145 233.418 17.164 233.465 cv
17.184 233.512 17.195 233.578 17.211 233.656 cv
17.219 233.742 17.227 233.848 17.227 233.977 cv
17.227 234.105 17.219 234.211 17.211 234.289 cv
17.195 234.375 17.184 234.441 17.164 234.488 cv
17.145 234.543 17.121 234.574 17.09 234.59 cv
17.066 234.609 17.031 234.621 16.984 234.617 cv
6.574 234.617 li
6.535 234.621 6.5 234.609 6.465 234.59 cv
6.438 234.574 6.41 234.543 6.387 234.488 cv
6.367 234.441 6.352 234.375 6.34 234.289 cv
6.332 234.211 6.328 234.105 6.324 233.977 cv
6.328 233.848 6.332 233.742 6.34 233.656 cv
6.352 233.578 6.367 233.512 6.387 233.465 cv
6.41 233.418 6.438 233.387 6.465 233.363 cv
6.5 233.348 6.535 233.336 6.574 233.332 cv
cp
f
13.398 224.391 mo
13.977 224.395 14.504 224.469 14.98 224.617 cv
15.465 224.77 15.879 224.996 16.223 225.293 cv
16.574 225.594 16.844 225.969 17.035 226.414 cv
17.23 226.867 17.324 227.387 17.328 227.977 cv
17.324 228.555 17.242 229.059 17.07 229.484 cv
16.902 229.914 16.652 230.27 16.324 230.555 cv
15.996 230.844 15.602 231.059 15.133 231.195 cv
14.668 231.336 14.137 231.402 13.539 231.402 cv
12.973 231.402 12.445 231.332 11.965 231.184 cv
11.484 231.039 11.07 230.812 10.719 230.512 cv
10.371 230.215 10.102 229.844 9.91 229.395 cv
9.719 228.949 9.621 228.426 9.621 227.828 cv
9.621 227.25 9.707 226.75 9.879 226.32 cv
10.051 225.895 10.301 225.535 10.629 225.25 cv
10.957 224.965 11.355 224.75 11.82 224.605 cv
12.289 224.465 12.816 224.395 13.398 224.391 cv
cp
13.484 225.723 mo
13.109 225.727 12.75 225.762 12.41 225.828 cv
12.074 225.902 11.781 226.02 11.523 226.18 cv
11.273 226.344 11.07 226.562 10.918 226.84 cv
10.773 227.121 10.699 227.469 10.695 227.879 cv
10.699 228.266 10.766 228.594 10.898 228.867 cv
11.035 229.145 11.227 229.371 11.473 229.547 cv
11.719 229.727 12.012 229.859 12.348 229.941 cv
12.688 230.031 13.055 230.074 13.453 230.07 cv
13.84 230.074 14.203 230.039 14.539 229.965 cv
14.879 229.898 15.172 229.781 15.422 229.613 cv
15.676 229.449 15.879 229.227 16.023 228.949 cv
16.176 228.672 16.25 228.324 16.246 227.91 cv
16.25 227.535 16.18 227.207 16.043 226.926 cv
15.91 226.648 15.723 226.422 15.473 226.242 cv
15.23 226.066 14.938 225.937 14.602 225.852 cv
14.266 225.77 13.895 225.727 13.484 225.723 cv
cp
f
16.883 209.09 mo
16.957 209.113 17.016 209.145 17.059 209.184 cv
17.105 209.227 17.141 209.285 17.16 209.355 cv
17.184 209.434 17.195 209.523 17.211 209.625 cv
17.219 209.734 17.227 209.863 17.227 210.016 cv
17.227 210.18 17.219 210.316 17.211 210.426 cv
17.195 210.539 17.184 210.633 17.16 210.703 cv
17.141 210.781 17.105 210.836 17.059 210.867 cv
17.016 210.906 16.957 210.934 16.883 210.953 cv
9.27 213.066 li
9.27 213.078 li
16.883 215.027 li
16.957 215.047 17.016 215.07 17.059 215.105 cv
17.105 215.145 17.141 215.199 17.16 215.262 cv
17.184 215.332 17.195 215.418 17.211 215.523 cv
17.219 215.633 17.227 215.77 17.227 215.934 cv
17.227 216.105 17.219 216.246 17.211 216.359 cv
17.195 216.477 17.184 216.57 17.16 216.641 cv
17.141 216.715 17.105 216.773 17.059 216.809 cv
17.016 216.852 16.957 216.879 16.883 216.891 cv
7.57 219.555 li
7.453 219.59 7.359 219.605 7.289 219.605 cv
7.223 219.609 7.172 219.59 7.133 219.543 cv
7.098 219.5 7.074 219.43 7.063 219.332 cv
7.055 219.234 7.051 219.102 7.047 218.934 cv
7.051 218.773 7.055 218.645 7.059 218.551 cv
7.07 218.457 7.082 218.387 7.102 218.336 cv
7.125 218.289 7.156 218.254 7.188 218.234 cv
7.227 218.219 7.273 218.207 7.328 218.191 cv
15.777 215.926 li
15.777 215.918 li
7.344 213.766 li
7.289 213.754 7.242 213.734 7.199 213.707 cv
7.164 213.687 7.133 213.648 7.109 213.594 cv
7.09 213.543 7.074 213.469 7.063 213.371 cv
7.055 213.277 7.051 213.152 7.047 212.996 cv
7.051 212.852 7.055 212.738 7.063 212.648 cv
7.074 212.566 7.09 212.496 7.109 212.441 cv
7.133 212.391 7.164 212.352 7.199 212.328 cv
7.242 212.305 7.289 212.285 7.344 212.27 cv
15.777 209.953 li
15.777 209.941 li
7.336 207.719 li
7.285 207.707 7.242 207.691 7.199 207.672 cv
7.164 207.66 7.133 207.629 7.109 207.574 cv
7.09 207.527 7.074 207.457 7.063 207.363 cv
7.055 207.277 7.051 207.156 7.047 207 cv
7.051 206.852 7.055 206.727 7.066 206.633 cv
7.082 206.543 7.109 206.477 7.141 206.434 cv
7.18 206.395 7.23 206.375 7.297 206.375 cv
7.367 206.379 7.461 206.395 7.578 206.418 cv
cp
f
16.992 200.059 mo
17.055 200.062 17.102 200.082 17.133 200.121 cv
17.164 200.164 17.188 200.223 17.203 200.293 cv
17.219 200.371 17.227 200.477 17.227 200.613 cv
17.227 200.75 17.219 200.859 17.203 200.937 cv
17.188 201.023 17.164 201.082 17.133 201.113 cv
17.102 201.152 17.055 201.168 16.992 201.164 cv
16.293 201.164 li
16.621 201.473 16.875 201.816 17.055 202.191 cv
17.238 202.57 17.324 202.969 17.328 203.387 cv
17.324 203.762 17.277 204.094 17.184 204.391 cv
17.086 204.687 16.949 204.941 16.766 205.152 cv
16.586 205.363 16.363 205.527 16.098 205.645 cv
15.836 205.762 15.535 205.82 15.191 205.816 cv
14.801 205.82 14.457 205.742 14.164 205.578 cv
13.875 205.422 13.633 205.187 13.441 204.883 cv
13.25 204.582 13.105 204.215 13.008 203.777 cv
12.914 203.344 12.867 202.852 12.863 202.305 cv
12.863 201.336 li
12.316 201.336 li
12.047 201.34 11.809 201.367 11.602 201.422 cv
11.395 201.48 11.223 201.574 11.082 201.699 cv
10.945 201.832 10.84 201.996 10.77 202.195 cv
10.699 202.402 10.664 202.652 10.664 202.941 cv
10.664 203.262 10.703 203.547 10.777 203.797 cv
10.855 204.055 10.938 204.273 11.027 204.461 cv
11.121 204.648 11.207 204.809 11.277 204.934 cv
11.355 205.066 11.391 205.16 11.391 205.219 cv
11.391 205.262 11.383 205.297 11.359 205.328 cv
11.344 205.359 11.313 205.387 11.266 205.41 cv
11.227 205.434 11.172 205.453 11.105 205.461 cv
11.043 205.477 10.973 205.48 10.891 205.477 cv
10.766 205.48 10.66 205.473 10.582 205.449 cv
10.508 205.434 10.438 205.387 10.367 205.316 cv
10.301 205.246 10.223 205.125 10.133 204.953 cv
10.043 204.781 9.961 204.586 9.883 204.363 cv
9.813 204.141 9.75 203.895 9.695 203.629 cv
9.648 203.363 9.621 203.098 9.621 202.824 cv
9.621 202.324 9.68 201.895 9.793 201.543 cv
9.91 201.191 10.078 200.906 10.297 200.684 cv
10.52 200.469 10.793 200.309 11.117 200.207 cv
11.449 200.109 11.832 200.062 12.262 200.059 cv
cp
13.789 201.336 mo
13.789 202.437 li
13.793 202.793 13.824 203.098 13.879 203.355 cv
13.941 203.617 14.027 203.832 14.145 204.004 cv
14.262 204.176 14.402 204.301 14.566 204.379 cv
14.73 204.461 14.918 204.504 15.129 204.5 cv
15.496 204.504 15.789 204.387 16 204.156 cv
16.219 203.926 16.324 203.602 16.324 203.184 cv
16.324 202.848 16.238 202.535 16.066 202.246 cv
15.895 201.957 15.633 201.656 15.277 201.336 cv
cp
f
16.469 194.133 mo
16.625 194.133 16.742 194.145 16.828 194.164 cv
16.918 194.187 16.984 194.219 17.023 194.258 cv
17.066 194.301 17.105 194.363 17.141 194.445 cv
17.176 194.531 17.203 194.625 17.23 194.73 cv
17.25 194.84 17.27 194.953 17.289 195.07 cv
17.301 195.187 17.309 195.309 17.313 195.426 cv
17.309 195.793 17.262 196.105 17.168 196.363 cv
17.074 196.625 16.93 196.836 16.73 197 cv
16.539 197.168 16.293 197.289 15.992 197.363 cv
15.695 197.441 15.344 197.48 14.934 197.477 cv
10.836 197.477 li
10.836 198.457 li
10.84 198.535 10.797 198.598 10.711 198.645 cv
10.629 198.691 10.496 198.715 10.305 198.715 cv
10.211 198.715 10.129 198.711 10.059 198.695 cv
9.996 198.687 9.938 198.668 9.891 198.645 cv
9.848 198.625 9.816 198.598 9.797 198.562 cv
9.781 198.531 9.773 198.496 9.77 198.449 cv
9.77 197.477 li
8.102 197.477 li
8.07 197.48 8.035 197.469 8 197.449 cv
7.973 197.434 7.945 197.402 7.918 197.348 cv
7.898 197.301 7.883 197.234 7.867 197.148 cv
7.859 197.07 7.852 196.965 7.852 196.836 cv
7.852 196.707 7.859 196.602 7.867 196.52 cv
7.883 196.437 7.898 196.371 7.918 196.324 cv
7.945 196.277 7.973 196.246 8 196.223 cv
8.035 196.207 8.07 196.195 8.102 196.191 cv
9.77 196.191 li
9.77 194.391 li
9.773 194.352 9.781 194.316 9.797 194.281 cv
9.816 194.254 9.848 194.227 9.891 194.199 cv
9.938 194.18 9.996 194.164 10.059 194.148 cv
10.129 194.141 10.211 194.133 10.305 194.133 cv
10.496 194.133 10.629 194.156 10.711 194.203 cv
10.797 194.25 10.84 194.312 10.836 194.391 cv
10.836 196.191 li
14.75 196.191 li
15.234 196.195 15.598 196.125 15.844 195.977 cv
16.094 195.836 16.219 195.578 16.215 195.207 cv
16.219 195.094 16.207 194.988 16.18 194.891 cv
16.16 194.801 16.137 194.719 16.105 194.641 cv
16.082 194.57 16.055 194.508 16.031 194.453 cv
16.008 194.406 15.996 194.359 15.996 194.312 cv
15.996 194.289 16.004 194.262 16.016 194.238 cv
16.031 194.215 16.055 194.199 16.09 194.184 cv
16.129 194.176 16.18 194.164 16.238 194.148 cv
16.305 194.141 16.383 194.133 16.469 194.133 cv
cp
f
16.469 188.977 mo
16.625 188.977 16.742 188.988 16.828 189.008 cv
16.918 189.031 16.984 189.062 17.023 189.102 cv
17.066 189.145 17.105 189.207 17.141 189.289 cv
17.176 189.375 17.203 189.469 17.23 189.574 cv
17.25 189.684 17.27 189.797 17.289 189.914 cv
17.301 190.031 17.309 190.152 17.313 190.27 cv
17.309 190.637 17.262 190.949 17.168 191.207 cv
17.074 191.469 16.93 191.68 16.73 191.844 cv
16.539 192.012 16.293 192.133 15.992 192.207 cv
15.695 192.285 15.344 192.324 14.934 192.32 cv
10.836 192.32 li
10.836 193.301 li
10.84 193.379 10.797 193.441 10.711 193.488 cv
10.629 193.535 10.496 193.559 10.305 193.559 cv
10.211 193.559 10.129 193.555 10.059 193.539 cv
9.996 193.531 9.938 193.512 9.891 193.488 cv
9.848 193.469 9.816 193.441 9.797 193.406 cv
9.781 193.375 9.773 193.34 9.77 193.293 cv
9.77 192.32 li
8.102 192.32 li
8.07 192.324 8.035 192.312 8 192.293 cv
7.973 192.277 7.945 192.246 7.918 192.191 cv
7.898 192.145 7.883 192.078 7.867 191.992 cv
7.859 191.914 7.852 191.809 7.852 191.68 cv
7.852 191.551 7.859 191.445 7.867 191.363 cv
7.883 191.281 7.898 191.215 7.918 191.168 cv
7.945 191.121 7.973 191.09 8 191.066 cv
8.035 191.051 8.07 191.039 8.102 191.035 cv
9.77 191.035 li
9.77 189.234 li
9.773 189.195 9.781 189.16 9.797 189.125 cv
9.816 189.098 9.848 189.07 9.891 189.043 cv
9.938 189.023 9.996 189.008 10.059 188.992 cv
10.129 188.984 10.211 188.977 10.305 188.977 cv
10.496 188.977 10.629 189 10.711 189.047 cv
10.797 189.094 10.84 189.156 10.836 189.234 cv
10.836 191.035 li
14.75 191.035 li
15.234 191.039 15.598 190.969 15.844 190.82 cv
16.094 190.68 16.219 190.422 16.215 190.051 cv
16.219 189.937 16.207 189.832 16.18 189.734 cv
16.16 189.645 16.137 189.562 16.105 189.484 cv
16.082 189.414 16.055 189.352 16.031 189.297 cv
16.008 189.25 15.996 189.203 15.996 189.156 cv
15.996 189.133 16.004 189.105 16.016 189.082 cv
16.031 189.059 16.055 189.043 16.09 189.027 cv
16.129 189.02 16.18 189.008 16.238 188.992 cv
16.305 188.984 16.383 188.977 16.469 188.977 cv
cp
f
15.074 182.844 mo
15.438 182.848 15.758 182.914 16.035 183.043 cv
16.316 183.176 16.551 183.363 16.742 183.605 cv
16.938 183.852 17.082 184.145 17.18 184.48 cv
17.277 184.82 17.324 185.191 17.328 185.594 cv
17.324 185.848 17.305 186.086 17.27 186.309 cv
17.227 186.535 17.18 186.734 17.121 186.914 cv
17.063 187.094 17 187.246 16.934 187.371 cv
16.871 187.496 16.813 187.59 16.758 187.645 cv
16.707 187.703 16.637 187.742 16.539 187.766 cv
16.449 187.793 16.32 187.805 16.16 187.805 cv
16.063 187.805 15.98 187.801 15.91 187.789 cv
15.844 187.781 15.789 187.77 15.746 187.75 cv
15.707 187.738 15.676 187.715 15.656 187.687 cv
15.641 187.66 15.633 187.629 15.629 187.59 cv
15.633 187.535 15.668 187.449 15.734 187.336 cv
15.809 187.227 15.887 187.09 15.965 186.922 cv
16.051 186.762 16.125 186.57 16.195 186.344 cv
16.266 186.125 16.301 185.867 16.301 185.57 cv
16.301 185.355 16.277 185.156 16.23 184.977 cv
16.184 184.801 16.117 184.648 16.023 184.52 cv
15.938 184.391 15.82 184.289 15.676 184.219 cv
15.539 184.148 15.371 184.113 15.176 184.113 cv
14.98 184.113 14.816 184.164 14.68 184.266 cv
14.547 184.367 14.426 184.504 14.32 184.668 cv
14.219 184.836 14.129 185.02 14.043 185.227 cv
13.965 185.437 13.879 185.652 13.789 185.871 cv
13.703 186.09 13.602 186.305 13.488 186.516 cv
13.379 186.727 13.246 186.918 13.082 187.082 cv
12.926 187.254 12.73 187.387 12.504 187.484 cv
12.281 187.59 12.016 187.641 11.703 187.637 cv
11.43 187.641 11.164 187.586 10.91 187.477 cv
10.66 187.371 10.441 187.211 10.25 186.996 cv
10.063 186.785 9.91 186.52 9.793 186.199 cv
9.68 185.879 9.621 185.508 9.621 185.078 cv
9.621 184.895 9.637 184.707 9.668 184.52 cv
9.699 184.336 9.738 184.168 9.785 184.012 cv
9.832 183.863 9.883 183.734 9.938 183.625 cv
9.992 183.523 10.043 183.441 10.082 183.383 cv
10.129 183.332 10.164 183.297 10.191 183.273 cv
10.223 183.258 10.258 183.242 10.293 183.234 cv
10.336 183.227 10.383 183.219 10.438 183.211 cv
10.496 183.203 10.566 183.199 10.648 183.199 cv
10.738 183.199 10.816 183.203 10.879 183.211 cv
10.949 183.219 11 183.234 11.039 183.25 cv
11.082 183.273 11.113 183.293 11.129 183.316 cv
11.148 183.344 11.156 183.375 11.156 183.402 cv
11.156 183.453 11.129 183.52 11.07 183.605 cv
11.016 183.695 10.953 183.809 10.887 183.949 cv
10.824 184.09 10.766 184.258 10.703 184.445 cv
10.648 184.637 10.617 184.852 10.617 185.094 cv
10.617 185.316 10.645 185.508 10.691 185.672 cv
10.746 185.84 10.816 185.977 10.902 186.082 cv
10.996 186.187 11.102 186.27 11.227 186.32 cv
11.352 186.379 11.488 186.406 11.633 186.402 cv
11.836 186.406 12.004 186.355 12.141 186.25 cv
12.281 186.148 12.402 186.012 12.504 185.844 cv
12.609 185.68 12.703 185.488 12.785 185.273 cv
12.871 185.062 12.957 184.848 13.043 184.625 cv
13.133 184.406 13.234 184.187 13.34 183.969 cv
13.449 183.754 13.578 183.562 13.734 183.395 cv
13.891 183.23 14.078 183.098 14.297 182.996 cv
14.516 182.898 14.777 182.848 15.074 182.844 cv
cp
f
12.996 178.402 mo
13.582 178.402 14.164 178.441 14.738 178.512 cv
15.313 178.59 15.879 178.699 16.441 178.84 cv
17 178.988 17.551 179.164 18.094 179.375 cv
18.637 179.586 19.172 179.832 19.703 180.109 cv
19.727 180.129 19.75 180.152 19.773 180.18 cv
19.793 180.215 19.813 180.254 19.828 180.301 cv
19.844 180.352 19.852 180.41 19.859 180.477 cv
19.859 180.547 19.863 180.629 19.867 180.719 cv
19.863 180.855 19.855 180.961 19.848 181.035 cv
19.832 181.113 19.813 181.168 19.785 181.199 cv
19.754 181.234 19.719 181.25 19.676 181.246 cv
19.629 181.246 19.574 181.23 19.516 181.203 cv
18.465 180.727 17.395 180.367 16.297 180.121 cv
15.199 179.879 14.09 179.758 12.973 179.754 cv
11.863 179.758 10.758 179.879 9.656 180.121 cv
8.559 180.367 7.488 180.734 6.441 181.219 cv
6.398 181.242 6.355 181.25 6.309 181.242 cv
6.27 181.242 6.234 181.219 6.207 181.172 cv
6.184 181.133 6.164 181.074 6.145 181 cv
6.133 180.93 6.125 180.832 6.121 180.711 cv
6.125 180.602 6.129 180.512 6.133 180.437 cv
6.145 180.367 6.156 180.309 6.168 180.262 cv
6.188 180.219 6.203 180.187 6.215 180.164 cv
6.234 180.148 6.25 180.133 6.27 180.117 cv
7.336 179.586 8.434 179.164 9.555 178.859 cv
10.684 178.555 11.828 178.402 12.996 178.402 cv
cp
f
286.332 546.164 mo
286.328 546.27 286.313 546.359 286.277 546.43 cv
286.242 546.508 286.195 546.566 286.141 546.609 cv
286.082 546.66 286.02 546.695 285.953 546.711 cv
285.879 546.734 285.809 546.742 285.746 546.742 cv
285.301 546.742 li
285.16 546.742 285.039 546.73 284.934 546.699 cv
284.828 546.676 284.73 546.621 284.637 546.543 cv
284.543 546.469 284.449 546.367 284.355 546.234 cv
284.262 546.105 284.16 545.941 284.055 545.738 cv
280.98 540 li
280.816 539.707 280.652 539.398 280.492 539.07 cv
280.324 538.75 280.172 538.434 280.035 538.125 cv
280.02 538.125 li
280.027 538.5 280.035 538.883 280.043 539.27 cv
280.047 539.66 280.047 540.047 280.051 540.43 cv
280.051 546.516 li
280.047 546.555 280.035 546.59 280.016 546.621 cv
279.992 546.656 279.957 546.684 279.906 546.699 cv
279.852 546.719 279.781 546.73 279.699 546.746 cv
279.613 546.758 279.508 546.766 279.379 546.766 cv
279.242 546.766 279.133 546.758 279.051 546.746 cv
278.965 546.73 278.898 546.719 278.852 546.699 cv
278.801 546.684 278.766 546.656 278.742 546.621 cv
278.719 546.59 278.707 546.555 278.711 546.516 cv
278.711 537.211 li
278.707 537.004 278.766 536.855 278.887 536.766 cv
279.004 536.68 279.133 536.637 279.273 536.633 cv
279.934 536.633 li
280.086 536.637 280.219 536.648 280.324 536.672 cv
280.426 536.699 280.52 536.742 280.605 536.801 cv
280.688 536.863 280.766 536.945 280.848 537.051 cv
280.922 537.16 281.004 537.297 281.09 537.453 cv
283.457 541.879 li
283.602 542.152 283.742 542.418 283.879 542.672 cv
284.012 542.93 284.141 543.184 284.27 543.43 cv
284.391 543.684 284.516 543.93 284.641 544.168 cv
284.762 544.41 284.883 544.652 285.008 544.895 cv
285.016 544.895 li
285.004 544.488 284.996 544.059 284.996 543.613 cv
284.988 543.168 284.988 542.742 284.992 542.332 cv
284.992 536.859 li
284.988 536.824 285 536.789 285.023 536.758 cv
285.047 536.727 285.082 536.699 285.137 536.676 cv
285.184 536.652 285.254 536.637 285.34 536.625 cv
285.426 536.617 285.535 536.613 285.676 536.609 cv
285.793 536.613 285.898 536.617 285.988 536.625 cv
286.074 536.637 286.141 536.652 286.191 536.676 cv
286.238 536.699 286.273 536.727 286.297 536.758 cv
286.316 536.789 286.328 536.824 286.332 536.859 cv
cp
f
294.879 546.523 mo
294.875 546.57 294.867 546.605 294.852 546.629 cv
294.832 546.66 294.797 546.684 294.754 546.703 cv
294.707 546.723 294.648 546.734 294.574 546.75 cv
294.496 546.758 294.402 546.766 294.297 546.766 cv
294.172 546.766 294.074 546.758 294.004 546.75 cv
293.926 546.734 293.867 546.723 293.824 546.703 cv
293.777 546.684 293.746 546.66 293.734 546.629 cv
293.715 546.605 293.707 546.57 293.711 546.523 cv
293.711 545.598 li
293.309 546.043 292.914 546.363 292.527 546.562 cv
292.133 546.766 291.738 546.863 291.344 546.867 cv
290.871 546.863 290.477 546.789 290.16 546.633 cv
289.84 546.48 289.582 546.27 289.387 546 cv
289.184 545.734 289.043 545.422 288.961 545.062 cv
288.871 544.707 288.828 544.273 288.832 543.766 cv
288.832 539.512 li
288.828 539.473 288.836 539.437 288.859 539.406 cv
288.875 539.379 288.91 539.355 288.965 539.328 cv
289.012 539.309 289.082 539.293 289.168 539.281 cv
289.25 539.277 289.352 539.273 289.48 539.27 cv
289.602 539.273 289.707 539.277 289.793 539.281 cv
289.875 539.293 289.941 539.309 289.988 539.328 cv
290.035 539.355 290.07 539.379 290.094 539.406 cv
290.113 539.437 290.121 539.473 290.125 539.512 cv
290.125 543.594 li
290.121 544.008 290.152 544.336 290.215 544.582 cv
290.273 544.828 290.363 545.039 290.488 545.211 cv
290.605 545.391 290.762 545.523 290.953 545.617 cv
291.137 545.715 291.355 545.766 291.605 545.762 cv
291.926 545.766 292.246 545.648 292.57 545.418 cv
292.887 545.191 293.227 544.855 293.586 544.41 cv
293.586 539.512 li
293.586 539.473 293.594 539.437 293.613 539.406 cv
293.629 539.379 293.664 539.355 293.719 539.328 cv
293.77 539.309 293.836 539.293 293.918 539.281 cv
293.996 539.277 294.102 539.273 294.234 539.27 cv
294.355 539.273 294.461 539.277 294.547 539.281 cv
294.629 539.293 294.691 539.309 294.738 539.328 cv
294.781 539.355 294.816 539.379 294.844 539.406 cv
294.863 539.437 294.875 539.473 294.879 539.512 cv
cp
f
307.656 546.523 mo
307.652 546.57 307.645 546.605 307.625 546.629 cv
307.602 546.66 307.566 546.684 307.523 546.703 cv
307.473 546.723 307.406 546.734 307.328 546.75 cv
307.242 546.758 307.141 546.766 307.016 546.766 cv
306.883 546.766 306.773 546.758 306.695 546.75 cv
306.609 546.734 306.543 546.723 306.496 546.703 cv
306.441 546.684 306.406 546.66 306.391 546.629 cv
306.367 546.605 306.359 546.57 306.359 546.523 cv
306.359 542.262 li
306.359 541.969 306.332 541.699 306.281 541.453 cv
306.227 541.211 306.145 541 306.031 540.82 cv
305.918 540.645 305.773 540.508 305.598 540.414 cv
305.418 540.32 305.207 540.273 304.973 540.273 cv
304.676 540.273 304.379 540.391 304.082 540.617 cv
303.777 540.852 303.449 541.184 303.094 541.621 cv
303.094 546.523 li
303.09 546.57 303.078 546.605 303.063 546.629 cv
303.039 546.66 303.008 546.684 302.961 546.703 cv
302.91 546.723 302.844 546.734 302.762 546.75 cv
302.676 546.758 302.57 546.766 302.449 546.766 cv
302.328 546.766 302.227 546.758 302.141 546.75 cv
302.055 546.734 301.984 546.723 301.938 546.703 cv
301.883 546.684 301.852 546.66 301.836 546.629 cv
301.816 546.605 301.805 546.57 301.809 546.523 cv
301.809 542.262 li
301.805 541.969 301.777 541.699 301.723 541.453 cv
301.664 541.211 301.578 541 301.465 540.82 cv
301.352 540.645 301.207 540.508 301.035 540.414 cv
300.855 540.32 300.648 540.273 300.414 540.273 cv
300.113 540.273 299.816 540.391 299.516 540.617 cv
299.215 540.852 298.887 541.184 298.535 541.621 cv
298.535 546.523 li
298.531 546.57 298.52 546.605 298.504 546.629 cv
298.48 546.66 298.449 546.684 298.402 546.703 cv
298.355 546.723 298.289 546.734 298.211 546.75 cv
298.125 546.758 298.02 546.766 297.891 546.766 cv
297.762 546.766 297.656 546.758 297.578 546.75 cv
297.492 546.734 297.426 546.723 297.379 546.703 cv
297.324 546.684 297.293 546.66 297.277 546.629 cv
297.258 546.605 297.246 546.57 297.25 546.523 cv
297.25 539.512 li
297.246 539.473 297.254 539.437 297.273 539.406 cv
297.285 539.379 297.316 539.355 297.367 539.328 cv
297.41 539.309 297.473 539.293 297.547 539.281 cv
297.617 539.277 297.711 539.273 297.836 539.27 cv
297.945 539.273 298.043 539.277 298.121 539.281 cv
298.195 539.293 298.254 539.309 298.297 539.328 cv
298.336 539.355 298.363 539.379 298.383 539.406 cv
298.398 539.437 298.406 539.473 298.41 539.512 cv
298.41 540.437 li
298.801 539.996 299.184 539.676 299.559 539.469 cv
299.926 539.266 300.305 539.16 300.688 539.16 cv
300.977 539.16 301.234 539.195 301.469 539.262 cv
301.695 539.332 301.902 539.426 302.082 539.547 cv
302.258 539.668 302.406 539.812 302.535 539.98 cv
302.656 540.152 302.762 540.344 302.848 540.547 cv
303.078 540.297 303.301 540.082 303.512 539.902 cv
303.723 539.73 303.926 539.586 304.121 539.473 cv
304.316 539.367 304.504 539.289 304.688 539.234 cv
304.871 539.187 305.059 539.16 305.246 539.16 cv
305.699 539.16 306.078 539.242 306.383 539.398 cv
306.688 539.562 306.934 539.773 307.129 540.035 cv
307.316 540.301 307.453 540.609 307.535 540.965 cv
307.613 541.32 307.652 541.695 307.656 542.09 cv
cp
f
316.457 542.922 mo
316.453 543.531 316.387 544.082 316.258 544.566 cv
316.121 545.055 315.926 545.469 315.672 545.809 cv
315.414 546.152 315.098 546.414 314.727 546.594 cv
314.352 546.777 313.926 546.863 313.441 546.867 cv
313.215 546.863 313.008 546.844 312.82 546.801 cv
312.633 546.754 312.445 546.684 312.266 546.586 cv
312.078 546.488 311.898 546.363 311.719 546.211 cv
311.535 546.062 311.344 545.883 311.145 545.668 cv
311.145 546.523 li
311.145 546.57 311.133 546.605 311.113 546.633 cv
311.09 546.668 311.055 546.691 311.012 546.707 cv
310.961 546.723 310.902 546.734 310.836 546.75 cv
310.762 546.758 310.672 546.766 310.566 546.766 cv
310.457 546.766 310.371 546.758 310.301 546.75 cv
310.227 546.734 310.164 546.723 310.121 546.707 cv
310.07 546.691 310.039 546.668 310.027 546.633 cv
310.008 546.605 310 546.57 310.004 546.523 cv
310.004 536.113 li
310 536.074 310.012 536.039 310.031 536.004 cv
310.047 535.977 310.078 535.949 310.133 535.926 cv
310.18 535.906 310.246 535.891 310.332 535.879 cv
310.41 535.871 310.516 535.867 310.645 535.863 cv
310.773 535.867 310.879 535.871 310.965 535.879 cv
311.043 535.891 311.109 535.906 311.156 535.926 cv
311.203 535.949 311.234 535.977 311.258 536.004 cv
311.273 536.039 311.285 536.074 311.289 536.113 cv
311.289 540.312 li
311.496 540.102 311.699 539.922 311.895 539.777 cv
312.09 539.633 312.277 539.516 312.465 539.422 cv
312.648 539.336 312.836 539.27 313.027 539.223 cv
313.211 539.184 313.41 539.16 313.621 539.16 cv
314.125 539.16 314.559 539.262 314.926 539.465 cv
315.285 539.668 315.578 539.941 315.805 540.277 cv
316.027 540.621 316.195 541.02 316.301 541.477 cv
316.402 541.934 316.453 542.414 316.457 542.922 cv
cp
315.125 543.07 mo
315.121 542.715 315.094 542.367 315.043 542.027 cv
314.984 541.691 314.891 541.395 314.754 541.133 cv
314.617 540.875 314.438 540.664 314.215 540.504 cv
313.988 540.348 313.707 540.27 313.375 540.266 cv
313.207 540.27 313.043 540.293 312.883 540.336 cv
312.719 540.387 312.555 540.465 312.387 540.57 cv
312.219 540.684 312.043 540.824 311.867 540.992 cv
311.684 541.168 311.492 541.383 311.289 541.637 cv
311.289 544.434 li
311.645 544.867 311.984 545.199 312.309 545.422 cv
312.633 545.652 312.969 545.766 313.32 545.762 cv
313.641 545.766 313.918 545.687 314.152 545.527 cv
314.379 545.375 314.566 545.168 314.711 544.906 cv
314.855 544.652 314.961 544.363 315.027 544.043 cv
315.09 543.727 315.121 543.402 315.125 543.07 cv
cp
f
324.367 542.715 mo
324.363 542.918 324.313 543.059 324.215 543.145 cv
324.109 543.23 323.992 543.273 323.867 543.273 cv
319.25 543.273 li
319.246 543.664 319.285 544.016 319.367 544.328 cv
319.441 544.641 319.574 544.91 319.758 545.129 cv
319.938 545.355 320.172 545.527 320.469 545.645 cv
320.758 545.77 321.117 545.828 321.543 545.824 cv
321.875 545.828 322.172 545.801 322.434 545.742 cv
322.695 545.691 322.922 545.629 323.113 545.559 cv
323.301 545.492 323.457 545.434 323.582 545.375 cv
323.703 545.324 323.797 545.297 323.859 545.293 cv
323.895 545.297 323.926 545.305 323.957 545.32 cv
323.984 545.34 324.008 545.367 324.027 545.402 cv
324.039 545.441 324.051 545.492 324.063 545.555 cv
324.066 545.621 324.07 545.699 324.074 545.793 cv
324.07 545.863 324.066 545.922 324.066 545.969 cv
324.059 546.016 324.055 546.059 324.047 546.098 cv
324.039 546.137 324.023 546.172 324.008 546.203 cv
323.984 546.234 323.961 546.266 323.938 546.293 cv
323.906 546.324 323.824 546.371 323.684 546.434 cv
323.543 546.5 323.359 546.562 323.137 546.625 cv
322.91 546.687 322.652 546.742 322.359 546.793 cv
322.066 546.84 321.754 546.863 321.422 546.867 cv
320.844 546.863 320.336 546.785 319.906 546.625 cv
319.469 546.465 319.105 546.227 318.813 545.91 cv
318.512 545.594 318.289 545.199 318.141 544.719 cv
317.992 544.242 317.918 543.684 317.918 543.047 cv
317.918 542.449 317.992 541.91 318.148 541.426 cv
318.301 540.949 318.527 540.539 318.824 540.203 cv
319.117 539.867 319.473 539.609 319.887 539.43 cv
320.301 539.25 320.766 539.16 321.281 539.16 cv
321.832 539.16 322.301 539.25 322.688 539.426 cv
323.074 539.605 323.391 539.844 323.645 540.141 cv
323.891 540.441 324.074 540.793 324.191 541.191 cv
324.305 541.598 324.363 542.027 324.367 542.48 cv
cp
323.074 542.332 mo
323.09 541.656 322.938 541.125 322.621 540.742 cv
322.305 540.359 321.836 540.168 321.219 540.164 cv
320.895 540.168 320.613 540.227 320.375 540.344 cv
320.133 540.465 319.934 540.625 319.773 540.82 cv
319.609 541.02 319.484 541.25 319.398 541.512 cv
319.309 541.773 319.258 542.047 319.25 542.332 cv
cp
f
330.43 539.969 mo
330.426 540.086 330.426 540.184 330.422 540.258 cv
330.414 540.34 330.402 540.402 330.391 540.441 cv
330.371 540.488 330.352 540.52 330.332 540.543 cv
330.305 540.566 330.273 540.578 330.234 540.578 cv
330.191 540.578 330.141 540.566 330.082 540.543 cv
330.02 540.52 329.949 540.496 329.879 540.473 cv
329.801 540.449 329.719 540.43 329.625 540.406 cv
329.531 540.391 329.43 540.379 329.32 540.375 cv
329.188 540.379 329.059 540.406 328.938 540.453 cv
328.813 540.508 328.684 540.594 328.547 540.711 cv
328.406 540.836 328.262 540.992 328.113 541.187 cv
327.961 541.383 327.793 541.625 327.613 541.91 cv
327.613 546.523 li
327.609 546.57 327.598 546.605 327.582 546.629 cv
327.559 546.66 327.527 546.684 327.48 546.703 cv
327.434 546.723 327.367 546.734 327.289 546.75 cv
327.203 546.758 327.098 546.766 326.969 546.766 cv
326.84 546.766 326.734 546.758 326.656 546.75 cv
326.57 546.734 326.504 546.723 326.457 546.703 cv
326.402 546.684 326.371 546.66 326.355 546.629 cv
326.336 546.605 326.324 546.57 326.328 546.523 cv
326.328 539.512 li
326.324 539.473 326.332 539.437 326.352 539.406 cv
326.363 539.379 326.395 539.355 326.445 539.328 cv
326.488 539.309 326.551 539.293 326.625 539.281 cv
326.695 539.277 326.789 539.273 326.914 539.27 cv
327.023 539.273 327.121 539.277 327.199 539.281 cv
327.273 539.293 327.332 539.309 327.375 539.328 cv
327.414 539.355 327.441 539.379 327.461 539.406 cv
327.477 539.437 327.484 539.473 327.488 539.512 cv
327.488 540.531 li
327.676 540.25 327.859 540.023 328.031 539.848 cv
328.199 539.672 328.359 539.531 328.512 539.43 cv
328.66 539.328 328.809 539.258 328.957 539.219 cv
329.105 539.18 329.254 539.16 329.406 539.16 cv
329.473 539.16 329.551 539.164 329.637 539.172 cv
329.723 539.18 329.813 539.195 329.906 539.215 cv
330 539.238 330.082 539.262 330.16 539.285 cv
330.23 539.312 330.285 539.34 330.32 539.363 cv
330.348 539.395 330.367 539.418 330.383 539.437 cv
330.391 539.465 330.402 539.496 330.41 539.527 cv
330.418 539.566 330.422 539.617 330.426 539.687 cv
330.426 539.758 330.426 539.852 330.43 539.969 cv
cp
f
342.191 542.937 mo
342.188 543.516 342.113 544.043 341.965 544.52 cv
341.813 545.004 341.586 545.418 341.289 545.762 cv
340.988 546.113 340.613 546.383 340.168 546.574 cv
339.715 546.77 339.195 546.863 338.605 546.867 cv
338.027 546.863 337.523 546.781 337.098 546.609 cv
336.668 546.441 336.313 546.191 336.027 545.863 cv
335.738 545.535 335.523 545.141 335.387 544.672 cv
335.246 544.207 335.18 543.676 335.18 543.078 cv
335.18 542.512 335.25 541.984 335.398 541.504 cv
335.543 541.023 335.77 540.609 336.07 540.258 cv
336.367 539.91 336.738 539.641 337.188 539.449 cv
337.633 539.258 338.156 539.16 338.754 539.16 cv
339.332 539.16 339.832 539.246 340.262 539.418 cv
340.688 539.59 341.047 539.84 341.332 540.168 cv
341.617 540.496 341.832 540.895 341.977 541.359 cv
342.117 541.828 342.188 542.355 342.191 542.937 cv
cp
340.859 543.023 mo
340.855 542.648 340.82 542.289 340.754 541.949 cv
340.68 541.613 340.563 541.32 340.402 541.062 cv
340.238 540.812 340.02 540.609 339.742 540.457 cv
339.461 540.312 339.113 540.238 338.703 540.234 cv
338.316 540.238 337.988 540.305 337.715 540.437 cv
337.438 540.574 337.211 540.766 337.035 541.012 cv
336.855 541.258 336.723 541.551 336.641 541.887 cv
336.551 542.227 336.508 542.594 336.512 542.992 cv
336.508 543.379 336.543 543.742 336.617 544.078 cv
336.684 544.418 336.801 544.711 336.969 544.961 cv
337.133 545.215 337.355 545.418 337.633 545.562 cv
337.91 545.715 338.258 545.789 338.672 545.785 cv
339.047 545.789 339.375 545.719 339.656 545.582 cv
339.934 545.449 340.16 545.262 340.34 545.012 cv
340.516 544.77 340.645 544.477 340.73 544.141 cv
340.813 543.805 340.855 543.434 340.859 543.023 cv
cp
f
347.922 536.625 mo
347.918 536.727 347.914 536.805 347.906 536.863 cv
347.895 536.926 347.883 536.977 347.871 537.008 cv
347.855 537.047 347.84 537.07 347.82 537.082 cv
347.797 537.098 347.77 537.105 347.742 537.102 cv
347.703 537.105 347.656 537.094 347.605 537.066 cv
347.547 537.047 347.48 537.02 347.406 536.988 cv
347.324 536.961 347.234 536.934 347.129 536.91 cv
347.02 536.887 346.895 536.875 346.762 536.875 cv
346.566 536.875 346.402 536.906 346.27 536.969 cv
346.129 537.031 346.02 537.129 345.941 537.262 cv
345.855 537.395 345.797 537.566 345.762 537.777 cv
345.723 537.988 345.703 538.246 345.707 538.543 cv
345.707 539.309 li
347.273 539.309 li
347.313 539.312 347.348 539.32 347.379 539.336 cv
347.406 539.355 347.434 539.387 347.457 539.43 cv
347.48 539.477 347.496 539.535 347.512 539.598 cv
347.52 539.668 347.527 539.75 347.531 539.844 cv
347.527 540.035 347.504 540.168 347.461 540.25 cv
347.41 540.336 347.348 540.379 347.273 540.375 cv
345.707 540.375 li
345.707 546.523 li
345.703 546.57 345.695 546.605 345.676 546.629 cv
345.652 546.66 345.617 546.684 345.57 546.703 cv
345.52 546.723 345.453 546.734 345.371 546.75 cv
345.285 546.758 345.18 546.766 345.063 546.766 cv
344.934 546.766 344.832 546.758 344.75 546.75 cv
344.664 546.734 344.598 546.723 344.551 546.703 cv
344.5 546.684 344.465 546.66 344.445 546.629 cv
344.422 546.605 344.41 546.57 344.414 546.523 cv
344.414 540.375 li
343.426 540.375 li
343.34 540.379 343.277 540.336 343.238 540.25 cv
343.195 540.168 343.172 540.035 343.176 539.844 cv
343.172 539.75 343.18 539.668 343.191 539.598 cv
343.199 539.535 343.215 539.477 343.238 539.43 cv
343.258 539.387 343.281 539.355 343.316 539.336 cv
343.344 539.32 343.383 539.312 343.426 539.309 cv
344.414 539.309 li
344.414 538.582 li
344.41 538.098 344.457 537.68 344.551 537.324 cv
344.641 536.977 344.777 536.687 344.965 536.465 cv
345.148 536.242 345.383 536.078 345.672 535.969 cv
345.953 535.863 346.289 535.809 346.676 535.809 cv
346.852 535.809 347.027 535.828 347.203 535.859 cv
347.371 535.898 347.504 535.934 347.602 535.969 cv
347.691 536.012 347.754 536.047 347.789 536.074 cv
347.816 536.109 347.844 536.148 347.867 536.195 cv
347.887 536.246 347.898 536.309 347.91 536.375 cv
347.914 536.449 347.918 536.531 347.922 536.625 cv
cp
f
358.117 543.891 mo
358.113 544.363 358.027 544.785 357.855 545.152 cv
357.68 545.527 357.438 545.84 357.129 546.094 cv
356.82 546.352 356.457 546.543 356.039 546.672 cv
355.617 546.801 355.168 546.863 354.688 546.867 cv
354.348 546.863 354.031 546.836 353.746 546.781 cv
353.457 546.723 353.203 546.656 352.977 546.57 cv
352.75 546.492 352.559 546.406 352.406 546.312 cv
352.25 546.227 352.145 546.148 352.086 546.086 cv
352.027 546.023 351.984 545.945 351.957 545.852 cv
351.926 545.758 351.91 545.629 351.914 545.465 cv
351.91 545.352 351.914 545.258 351.93 545.18 cv
351.938 545.105 351.953 545.043 351.977 544.996 cv
351.992 544.949 352.02 544.918 352.055 544.898 cv
352.082 544.883 352.117 544.875 352.16 544.871 cv
352.23 544.875 352.332 544.918 352.469 545.004 cv
352.598 545.094 352.77 545.191 352.98 545.293 cv
353.188 545.402 353.438 545.5 353.73 545.586 cv
354.023 545.68 354.363 545.723 354.75 545.723 cv
355.039 545.723 355.305 545.684 355.547 545.605 cv
355.785 545.527 355.992 545.418 356.172 545.273 cv
356.344 545.133 356.48 544.957 356.574 544.746 cv
356.668 544.539 356.715 544.305 356.715 544.039 cv
356.715 543.758 356.648 543.512 356.52 543.305 cv
356.387 543.105 356.215 542.93 356.004 542.773 cv
355.789 542.625 355.547 542.484 355.273 542.352 cv
355 542.227 354.719 542.094 354.438 541.961 cv
354.148 541.828 353.871 541.684 353.602 541.52 cv
353.332 541.363 353.09 541.172 352.879 540.953 cv
352.66 540.734 352.488 540.48 352.359 540.184 cv
352.223 539.895 352.156 539.543 352.16 539.129 cv
352.156 538.711 352.234 538.336 352.391 538.004 cv
352.543 537.676 352.754 537.398 353.031 537.172 cv
353.301 536.953 353.625 536.781 354.004 536.664 cv
354.379 536.547 354.789 536.488 355.227 536.488 cv
355.445 536.488 355.668 536.508 355.898 536.547 cv
356.121 536.586 356.332 536.637 356.535 536.699 cv
356.73 536.766 356.91 536.84 357.07 536.918 cv
357.223 537 357.324 537.066 357.379 537.113 cv
357.426 537.168 357.461 537.207 357.477 537.23 cv
357.492 537.262 357.504 537.297 357.516 537.34 cv
357.523 537.387 357.531 537.441 357.539 537.5 cv
357.543 537.566 357.547 537.645 357.547 537.742 cv
357.547 537.836 357.543 537.922 357.535 537.992 cv
357.527 538.07 357.516 538.129 357.5 538.176 cv
357.484 538.223 357.461 538.258 357.434 538.281 cv
357.402 538.305 357.371 538.316 357.336 538.316 cv
357.277 538.316 357.188 538.281 357.066 538.211 cv
356.941 538.141 356.789 538.059 356.617 537.965 cv
356.438 537.875 356.23 537.793 355.992 537.715 cv
355.746 537.641 355.477 537.602 355.18 537.602 cv
354.898 537.602 354.652 537.641 354.445 537.715 cv
354.234 537.793 354.063 537.895 353.93 538.016 cv
353.793 538.141 353.691 538.285 353.625 538.457 cv
353.559 538.629 353.527 538.812 353.527 539.004 cv
353.527 539.289 353.59 539.531 353.719 539.73 cv
353.848 539.934 354.02 540.113 354.238 540.266 cv
354.449 540.426 354.695 540.566 354.973 540.695 cv
355.246 540.828 355.527 540.961 355.816 541.09 cv
356.102 541.223 356.383 541.367 356.656 541.523 cv
356.93 541.684 357.176 541.871 357.395 542.086 cv
357.609 542.305 357.781 542.559 357.918 542.852 cv
358.047 543.145 358.113 543.492 358.117 543.891 cv
cp
f
365.887 546.523 mo
365.883 546.57 365.875 546.605 365.859 546.629 cv
365.84 546.66 365.805 546.684 365.762 546.703 cv
365.715 546.723 365.656 546.734 365.582 546.75 cv
365.504 546.758 365.41 546.766 365.305 546.766 cv
365.18 546.766 365.082 546.758 365.012 546.75 cv
364.934 546.734 364.875 546.723 364.832 546.703 cv
364.785 546.684 364.754 546.66 364.742 546.629 cv
364.723 546.605 364.715 546.57 364.719 546.523 cv
364.719 545.598 li
364.316 546.043 363.922 546.363 363.535 546.562 cv
363.141 546.766 362.746 546.863 362.352 546.867 cv
361.879 546.863 361.484 546.789 361.168 546.633 cv
360.848 546.48 360.59 546.27 360.395 546 cv
360.191 545.734 360.051 545.422 359.969 545.062 cv
359.879 544.707 359.836 544.273 359.84 543.766 cv
359.84 539.512 li
359.836 539.473 359.844 539.437 359.867 539.406 cv
359.883 539.379 359.918 539.355 359.973 539.328 cv
360.02 539.309 360.09 539.293 360.176 539.281 cv
360.258 539.277 360.359 539.273 360.488 539.27 cv
360.609 539.273 360.715 539.277 360.801 539.281 cv
360.883 539.293 360.949 539.309 360.996 539.328 cv
361.043 539.355 361.078 539.379 361.102 539.406 cv
361.121 539.437 361.129 539.473 361.133 539.512 cv
361.133 543.594 li
361.129 544.008 361.16 544.336 361.223 544.582 cv
361.281 544.828 361.371 545.039 361.496 545.211 cv
361.613 545.391 361.77 545.523 361.961 545.617 cv
362.145 545.715 362.363 545.766 362.613 545.762 cv
362.934 545.766 363.254 545.648 363.578 545.418 cv
363.895 545.191 364.234 544.855 364.594 544.41 cv
364.594 539.512 li
364.594 539.473 364.602 539.437 364.621 539.406 cv
364.637 539.379 364.672 539.355 364.727 539.328 cv
364.777 539.309 364.844 539.293 364.926 539.281 cv
365.004 539.277 365.109 539.273 365.242 539.27 cv
365.363 539.273 365.469 539.277 365.555 539.281 cv
365.637 539.293 365.699 539.309 365.746 539.328 cv
365.789 539.355 365.824 539.379 365.852 539.406 cv
365.871 539.437 365.883 539.473 365.887 539.512 cv
cp
f
374.742 542.922 mo
374.738 543.531 374.672 544.082 374.543 544.566 cv
374.406 545.055 374.211 545.469 373.957 545.809 cv
373.699 546.152 373.383 546.414 373.012 546.594 cv
372.637 546.777 372.211 546.863 371.727 546.867 cv
371.5 546.863 371.293 546.844 371.105 546.801 cv
370.918 546.754 370.73 546.684 370.551 546.586 cv
370.363 546.488 370.184 546.363 370.004 546.211 cv
369.82 546.062 369.629 545.883 369.43 545.668 cv
369.43 546.523 li
369.43 546.57 369.418 546.605 369.398 546.633 cv
369.375 546.668 369.34 546.691 369.297 546.707 cv
369.246 546.723 369.188 546.734 369.121 546.75 cv
369.047 546.758 368.957 546.766 368.852 546.766 cv
368.742 546.766 368.656 546.758 368.586 546.75 cv
368.512 546.734 368.449 546.723 368.406 546.707 cv
368.355 546.691 368.324 546.668 368.313 546.633 cv
368.293 546.605 368.285 546.57 368.289 546.523 cv
368.289 536.113 li
368.285 536.074 368.297 536.039 368.316 536.004 cv
368.332 535.977 368.363 535.949 368.418 535.926 cv
368.465 535.906 368.531 535.891 368.617 535.879 cv
368.695 535.871 368.801 535.867 368.93 535.863 cv
369.059 535.867 369.164 535.871 369.25 535.879 cv
369.328 535.891 369.395 535.906 369.441 535.926 cv
369.488 535.949 369.52 535.977 369.543 536.004 cv
369.559 536.039 369.57 536.074 369.574 536.113 cv
369.574 540.312 li
369.781 540.102 369.984 539.922 370.18 539.777 cv
370.375 539.633 370.563 539.516 370.75 539.422 cv
370.934 539.336 371.121 539.27 371.313 539.223 cv
371.496 539.184 371.695 539.16 371.906 539.16 cv
372.41 539.16 372.844 539.262 373.211 539.465 cv
373.57 539.668 373.863 539.941 374.09 540.277 cv
374.313 540.621 374.48 541.02 374.586 541.477 cv
374.688 541.934 374.738 542.414 374.742 542.922 cv
cp
373.41 543.07 mo
373.406 542.715 373.379 542.367 373.328 542.027 cv
373.27 541.691 373.176 541.395 373.039 541.133 cv
372.902 540.875 372.723 540.664 372.5 540.504 cv
372.273 540.348 371.992 540.27 371.66 540.266 cv
371.492 540.27 371.328 540.293 371.168 540.336 cv
371.004 540.387 370.84 540.465 370.672 540.57 cv
370.504 540.684 370.328 540.824 370.152 540.992 cv
369.969 541.168 369.777 541.383 369.574 541.637 cv
369.574 544.434 li
369.93 544.867 370.27 545.199 370.594 545.422 cv
370.918 545.652 371.254 545.766 371.605 545.762 cv
371.926 545.766 372.203 545.687 372.438 545.527 cv
372.664 545.375 372.852 545.168 372.996 544.906 cv
373.141 544.652 373.246 544.363 373.313 544.043 cv
373.375 543.727 373.406 543.402 373.41 543.07 cv
cp
f
379.879 542.785 mo
379.879 542.988 379.855 543.125 379.809 543.203 cv
379.762 543.281 379.691 543.32 379.605 543.32 cv
376.348 543.32 li
376.254 543.32 376.188 543.281 376.141 543.199 cv
376.094 543.121 376.07 542.984 376.07 542.785 cv
376.07 542.59 376.094 542.449 376.141 542.371 cv
376.188 542.293 376.254 542.254 376.348 542.254 cv
379.605 542.254 li
379.645 542.254 379.684 542.262 379.719 542.277 cv
379.75 542.293 379.777 542.324 379.805 542.367 cv
379.824 542.414 379.844 542.469 379.859 542.535 cv
379.871 542.605 379.879 542.691 379.879 542.785 cv
cp
f
383.129 546.516 mo
383.125 546.559 383.117 546.594 383.098 546.625 cv
383.074 546.656 383.035 546.684 382.988 546.699 cv
382.934 546.719 382.867 546.73 382.781 546.746 cv
382.695 546.758 382.586 546.766 382.461 546.766 cv
382.332 546.766 382.227 546.758 382.141 546.746 cv
382.051 546.73 381.98 546.719 381.93 546.699 cv
381.875 546.684 381.84 546.656 381.82 546.625 cv
381.797 546.594 381.785 546.559 381.789 546.516 cv
381.789 536.836 li
381.785 536.797 381.797 536.762 381.824 536.727 cv
381.844 536.699 381.883 536.672 381.941 536.652 cv
381.992 536.637 382.063 536.621 382.152 536.605 cv
382.234 536.594 382.336 536.59 382.461 536.586 cv
382.586 536.59 382.695 536.594 382.781 536.605 cv
382.867 536.621 382.934 536.637 382.988 536.652 cv
383.035 536.672 383.074 536.699 383.098 536.727 cv
383.117 536.762 383.125 536.797 383.129 536.836 cv
cp
f
396.117 546.523 mo
396.113 546.57 396.105 546.605 396.086 546.629 cv
396.063 546.66 396.027 546.684 395.984 546.703 cv
395.934 546.723 395.867 546.734 395.789 546.75 cv
395.703 546.758 395.602 546.766 395.477 546.766 cv
395.344 546.766 395.234 546.758 395.156 546.75 cv
395.07 546.734 395.004 546.723 394.957 546.703 cv
394.902 546.684 394.867 546.66 394.852 546.629 cv
394.828 546.605 394.82 546.57 394.82 546.523 cv
394.82 542.262 li
394.82 541.969 394.793 541.699 394.742 541.453 cv
394.688 541.211 394.605 541 394.492 540.82 cv
394.379 540.645 394.234 540.508 394.059 540.414 cv
393.879 540.32 393.668 540.273 393.434 540.273 cv
393.137 540.273 392.84 540.391 392.543 540.617 cv
392.238 540.852 391.91 541.184 391.555 541.621 cv
391.555 546.523 li
391.551 546.57 391.539 546.605 391.523 546.629 cv
391.5 546.66 391.469 546.684 391.422 546.703 cv
391.371 546.723 391.305 546.734 391.223 546.75 cv
391.137 546.758 391.031 546.766 390.91 546.766 cv
390.789 546.766 390.688 546.758 390.602 546.75 cv
390.516 546.734 390.445 546.723 390.398 546.703 cv
390.344 546.684 390.313 546.66 390.297 546.629 cv
390.277 546.605 390.266 546.57 390.27 546.523 cv
390.27 542.262 li
390.266 541.969 390.238 541.699 390.184 541.453 cv
390.125 541.211 390.039 541 389.926 540.82 cv
389.813 540.645 389.668 540.508 389.496 540.414 cv
389.316 540.32 389.109 540.273 388.875 540.273 cv
388.574 540.273 388.277 540.391 387.977 540.617 cv
387.676 540.852 387.348 541.184 386.996 541.621 cv
386.996 546.523 li
386.992 546.57 386.98 546.605 386.965 546.629 cv
386.941 546.66 386.91 546.684 386.863 546.703 cv
386.816 546.723 386.75 546.734 386.672 546.75 cv
386.586 546.758 386.48 546.766 386.352 546.766 cv
386.223 546.766 386.117 546.758 386.039 546.75 cv
385.953 546.734 385.887 546.723 385.84 546.703 cv
385.785 546.684 385.754 546.66 385.738 546.629 cv
385.719 546.605 385.707 546.57 385.711 546.523 cv
385.711 539.512 li
385.707 539.473 385.715 539.437 385.734 539.406 cv
385.746 539.379 385.777 539.355 385.828 539.328 cv
385.871 539.309 385.934 539.293 386.008 539.281 cv
386.078 539.277 386.172 539.273 386.297 539.27 cv
386.406 539.273 386.504 539.277 386.582 539.281 cv
386.656 539.293 386.715 539.309 386.758 539.328 cv
386.797 539.355 386.824 539.379 386.844 539.406 cv
386.859 539.437 386.867 539.473 386.871 539.512 cv
386.871 540.437 li
387.262 539.996 387.645 539.676 388.02 539.469 cv
388.387 539.266 388.766 539.16 389.148 539.16 cv
389.438 539.16 389.695 539.195 389.93 539.262 cv
390.156 539.332 390.363 539.426 390.543 539.547 cv
390.719 539.668 390.867 539.812 390.996 539.98 cv
391.117 540.152 391.223 540.344 391.309 540.547 cv
391.539 540.297 391.762 540.082 391.973 539.902 cv
392.184 539.73 392.387 539.586 392.582 539.473 cv
392.777 539.367 392.965 539.289 393.148 539.234 cv
393.332 539.187 393.52 539.16 393.707 539.16 cv
394.16 539.16 394.539 539.242 394.844 539.398 cv
395.148 539.562 395.395 539.773 395.59 540.035 cv
395.777 540.301 395.914 540.609 395.996 540.965 cv
396.074 541.32 396.113 541.695 396.117 542.09 cv
cp
f
403.75 546.531 mo
403.746 546.594 403.727 546.641 403.688 546.672 cv
403.645 546.703 403.586 546.727 403.516 546.742 cv
403.438 546.758 403.332 546.766 403.195 546.766 cv
403.059 546.766 402.949 546.758 402.871 546.742 cv
402.785 546.727 402.727 546.703 402.695 546.672 cv
402.656 546.641 402.641 546.594 402.645 546.531 cv
402.645 545.832 li
402.336 546.16 401.992 546.414 401.617 546.594 cv
401.238 546.777 400.84 546.863 400.422 546.867 cv
400.047 546.863 399.715 546.816 399.418 546.723 cv
399.121 546.625 398.867 546.488 398.656 546.305 cv
398.445 546.125 398.281 545.902 398.164 545.637 cv
398.047 545.375 397.988 545.074 397.992 544.73 cv
397.988 544.34 398.066 543.996 398.23 543.703 cv
398.387 543.414 398.621 543.172 398.926 542.98 cv
399.227 542.789 399.594 542.645 400.031 542.547 cv
400.465 542.453 400.957 542.406 401.504 542.402 cv
402.473 542.402 li
402.473 541.855 li
402.469 541.586 402.441 541.348 402.387 541.141 cv
402.328 540.934 402.234 540.762 402.109 540.621 cv
401.977 540.484 401.813 540.379 401.613 540.309 cv
401.406 540.238 401.156 540.203 400.867 540.203 cv
400.547 540.203 400.262 540.242 400.012 540.316 cv
399.754 540.395 399.535 540.477 399.348 540.566 cv
399.16 540.66 399 540.746 398.875 540.816 cv
398.742 540.895 398.648 540.93 398.59 540.93 cv
398.547 540.93 398.512 540.922 398.48 540.898 cv
398.449 540.883 398.422 540.852 398.398 540.805 cv
398.375 540.766 398.355 540.711 398.348 540.645 cv
398.332 540.582 398.328 540.512 398.332 540.43 cv
398.328 540.305 398.336 540.199 398.359 540.121 cv
398.375 540.047 398.422 539.977 398.492 539.906 cv
398.563 539.84 398.684 539.762 398.855 539.672 cv
399.027 539.582 399.223 539.5 399.445 539.422 cv
399.668 539.352 399.914 539.289 400.18 539.234 cv
400.445 539.187 400.711 539.16 400.984 539.16 cv
401.484 539.16 401.914 539.219 402.266 539.332 cv
402.617 539.449 402.902 539.617 403.125 539.836 cv
403.34 540.059 403.5 540.332 403.602 540.656 cv
403.699 540.988 403.746 541.371 403.75 541.801 cv
cp
402.473 543.328 mo
401.371 543.328 li
401.016 543.332 400.711 543.363 400.453 543.418 cv
400.191 543.48 399.977 543.566 399.805 543.684 cv
399.633 543.801 399.508 543.941 399.43 544.105 cv
399.348 544.27 399.305 544.457 399.309 544.668 cv
399.305 545.035 399.422 545.328 399.652 545.539 cv
399.883 545.758 400.207 545.863 400.625 545.863 cv
400.961 545.863 401.273 545.777 401.563 545.605 cv
401.852 545.434 402.152 545.172 402.473 544.816 cv
cp
f
411.969 539.828 mo
411.965 540.012 411.941 540.145 411.895 540.223 cv
411.844 540.305 411.781 540.344 411.707 540.344 cv
410.699 540.344 li
410.879 540.531 411.008 540.738 411.082 540.965 cv
411.152 541.191 411.188 541.426 411.191 541.668 cv
411.188 542.074 411.121 542.434 410.996 542.746 cv
410.863 543.059 410.68 543.324 410.438 543.535 cv
410.195 543.754 409.906 543.918 409.578 544.031 cv
409.242 544.148 408.875 544.207 408.473 544.203 cv
408.184 544.207 407.91 544.168 407.656 544.09 cv
407.395 544.016 407.199 543.922 407.063 543.805 cv
406.969 543.902 406.891 544.008 406.832 544.125 cv
406.77 544.246 406.738 544.383 406.742 544.535 cv
406.738 544.719 406.824 544.871 406.996 544.988 cv
407.164 545.113 407.387 545.176 407.668 545.184 cv
409.5 545.262 li
409.848 545.273 410.164 545.32 410.457 545.406 cv
410.746 545.492 411 545.617 411.215 545.773 cv
411.426 545.934 411.594 546.125 411.715 546.355 cv
411.832 546.59 411.891 546.859 411.895 547.164 cv
411.891 547.484 411.824 547.789 411.691 548.082 cv
411.555 548.371 411.348 548.625 411.07 548.848 cv
410.789 549.066 410.434 549.242 410.004 549.371 cv
409.574 549.496 409.066 549.559 408.48 549.562 cv
407.91 549.559 407.426 549.512 407.031 549.418 cv
406.633 549.32 406.309 549.187 406.055 549.023 cv
405.801 548.855 405.617 548.66 405.504 548.43 cv
405.387 548.195 405.328 547.941 405.332 547.676 cv
405.328 547.504 405.348 547.34 405.395 547.18 cv
405.434 547.016 405.496 546.863 405.582 546.719 cv
405.664 546.574 405.773 546.437 405.902 546.301 cv
406.027 546.172 406.172 546.039 406.344 545.91 cv
406.086 545.781 405.898 545.617 405.777 545.418 cv
405.656 545.223 405.598 545.012 405.598 544.777 cv
405.598 544.465 405.66 544.18 405.789 543.93 cv
405.918 543.68 406.078 543.457 406.273 543.258 cv
406.109 543.066 405.984 542.852 405.891 542.609 cv
405.797 542.371 405.75 542.078 405.75 541.73 cv
405.75 541.336 405.816 540.977 405.953 540.656 cv
406.086 540.34 406.273 540.074 406.516 539.855 cv
406.754 539.641 407.039 539.473 407.375 539.352 cv
407.707 539.238 408.074 539.18 408.473 539.176 cv
408.684 539.18 408.883 539.191 409.066 539.211 cv
409.25 539.238 409.422 539.27 409.586 539.309 cv
411.707 539.309 li
411.793 539.312 411.859 539.355 411.902 539.437 cv
411.945 539.527 411.965 539.656 411.969 539.828 cv
cp
409.961 541.676 mo
409.957 541.203 409.824 540.832 409.566 540.559 cv
409.301 540.293 408.93 540.156 408.449 540.156 cv
408.195 540.156 407.977 540.199 407.797 540.281 cv
407.609 540.367 407.457 540.48 407.336 540.625 cv
407.215 540.773 407.125 540.941 407.066 541.129 cv
407.004 541.316 406.973 541.516 406.977 541.723 cv
406.973 542.187 407.105 542.551 407.367 542.816 cv
407.629 543.082 407.996 543.215 408.473 543.211 cv
408.723 543.215 408.941 543.176 409.133 543.09 cv
409.316 543.012 409.473 542.898 409.598 542.758 cv
409.719 542.617 409.809 542.453 409.871 542.262 cv
409.926 542.078 409.957 541.883 409.961 541.676 cv
cp
410.605 547.234 mo
410.602 546.93 410.477 546.699 410.234 546.535 cv
409.984 546.375 409.652 546.285 409.234 546.273 cv
407.418 546.211 li
407.25 546.344 407.113 546.469 407.012 546.582 cv
406.902 546.699 406.82 546.809 406.758 546.918 cv
406.695 547.023 406.652 547.129 406.629 547.234 cv
406.605 547.336 406.594 547.441 406.594 547.551 cv
406.594 547.887 406.762 548.141 407.105 548.32 cv
407.445 548.492 407.926 548.582 408.543 548.582 cv
408.93 548.582 409.254 548.543 409.52 548.469 cv
409.777 548.391 409.988 548.289 410.152 548.168 cv
410.309 548.039 410.426 547.898 410.5 547.738 cv
410.566 547.578 410.602 547.41 410.605 547.234 cv
cp
f
419.531 542.715 mo
419.527 542.918 419.477 543.059 419.379 543.145 cv
419.273 543.23 419.156 543.273 419.031 543.273 cv
414.414 543.273 li
414.41 543.664 414.449 544.016 414.531 544.328 cv
414.605 544.641 414.738 544.91 414.922 545.129 cv
415.102 545.355 415.336 545.527 415.633 545.645 cv
415.922 545.77 416.281 545.828 416.707 545.824 cv
417.039 545.828 417.336 545.801 417.598 545.742 cv
417.859 545.691 418.086 545.629 418.277 545.559 cv
418.465 545.492 418.621 545.434 418.746 545.375 cv
418.867 545.324 418.961 545.297 419.023 545.293 cv
419.059 545.297 419.09 545.305 419.121 545.32 cv
419.148 545.34 419.172 545.367 419.191 545.402 cv
419.203 545.441 419.215 545.492 419.227 545.555 cv
419.23 545.621 419.234 545.699 419.238 545.793 cv
419.234 545.863 419.23 545.922 419.23 545.969 cv
419.223 546.016 419.219 546.059 419.211 546.098 cv
419.203 546.137 419.188 546.172 419.172 546.203 cv
419.148 546.234 419.125 546.266 419.102 546.293 cv
419.07 546.324 418.988 546.371 418.848 546.434 cv
418.707 546.5 418.523 546.562 418.301 546.625 cv
418.074 546.687 417.816 546.742 417.523 546.793 cv
417.23 546.84 416.918 546.863 416.586 546.867 cv
416.008 546.863 415.5 546.785 415.07 546.625 cv
414.633 546.465 414.27 546.227 413.977 545.91 cv
413.676 545.594 413.453 545.199 413.305 544.719 cv
413.156 544.242 413.082 543.684 413.082 543.047 cv
413.082 542.449 413.156 541.91 413.313 541.426 cv
413.465 540.949 413.691 540.539 413.988 540.203 cv
414.281 539.867 414.637 539.609 415.051 539.43 cv
415.465 539.25 415.93 539.16 416.445 539.16 cv
416.996 539.16 417.465 539.25 417.852 539.426 cv
418.238 539.605 418.555 539.844 418.809 540.141 cv
419.055 540.441 419.238 540.793 419.355 541.191 cv
419.469 541.598 419.527 542.027 419.531 542.48 cv
cp
418.238 542.332 mo
418.254 541.656 418.102 541.125 417.785 540.742 cv
417.469 540.359 417 540.168 416.383 540.164 cv
416.059 540.168 415.777 540.227 415.539 540.344 cv
415.297 540.465 415.098 540.625 414.938 540.82 cv
414.773 541.02 414.648 541.25 414.563 541.512 cv
414.473 541.773 414.422 542.047 414.414 542.332 cv
cp
f
425.895 544.613 mo
425.891 544.977 425.824 545.297 425.695 545.574 cv
425.563 545.855 425.375 546.09 425.133 546.281 cv
424.887 546.477 424.594 546.621 424.258 546.719 cv
423.918 546.816 423.547 546.863 423.145 546.867 cv
422.891 546.863 422.652 546.844 422.43 546.809 cv
422.203 546.766 422.004 546.719 421.824 546.66 cv
421.645 546.602 421.492 546.539 421.367 546.473 cv
421.242 546.41 421.148 546.352 421.094 546.297 cv
421.035 546.246 420.996 546.176 420.973 546.078 cv
420.945 545.988 420.934 545.859 420.934 545.699 cv
420.934 545.602 420.938 545.52 420.949 545.449 cv
420.957 545.383 420.969 545.328 420.988 545.285 cv
421 545.246 421.023 545.215 421.051 545.195 cv
421.078 545.18 421.109 545.172 421.148 545.168 cv
421.203 545.172 421.289 545.207 421.402 545.273 cv
421.512 545.348 421.648 545.426 421.816 545.504 cv
421.977 545.59 422.168 545.664 422.395 545.734 cv
422.613 545.805 422.871 545.84 423.168 545.84 cv
423.383 545.84 423.582 545.816 423.762 545.77 cv
423.938 545.723 424.09 545.656 424.219 545.562 cv
424.348 545.477 424.449 545.359 424.52 545.215 cv
424.59 545.078 424.625 544.91 424.625 544.715 cv
424.625 544.52 424.574 544.355 424.473 544.219 cv
424.371 544.086 424.234 543.965 424.07 543.859 cv
423.902 543.758 423.719 543.668 423.512 543.582 cv
423.301 543.504 423.086 543.418 422.867 543.328 cv
422.648 543.242 422.434 543.141 422.223 543.027 cv
422.012 542.918 421.82 542.785 421.656 542.621 cv
421.484 542.465 421.352 542.27 421.254 542.043 cv
421.148 541.82 421.098 541.555 421.102 541.242 cv
421.098 540.969 421.152 540.703 421.262 540.449 cv
421.367 540.199 421.527 539.98 421.742 539.789 cv
421.953 539.602 422.219 539.449 422.539 539.332 cv
422.859 539.219 423.23 539.16 423.66 539.16 cv
423.844 539.16 424.031 539.176 424.219 539.207 cv
424.402 539.238 424.57 539.277 424.727 539.324 cv
424.875 539.371 425.004 539.422 425.113 539.477 cv
425.215 539.531 425.297 539.582 425.355 539.621 cv
425.406 539.668 425.441 539.703 425.465 539.73 cv
425.48 539.762 425.496 539.797 425.504 539.832 cv
425.512 539.875 425.52 539.922 425.527 539.977 cv
425.535 540.035 425.539 540.105 425.539 540.187 cv
425.539 540.277 425.535 540.355 425.527 540.418 cv
425.52 540.488 425.504 540.539 425.488 540.578 cv
425.465 540.621 425.445 540.652 425.422 540.668 cv
425.395 540.687 425.363 540.695 425.336 540.695 cv
425.285 540.695 425.219 540.668 425.133 540.609 cv
425.043 540.555 424.93 540.492 424.789 540.426 cv
424.648 540.363 424.48 540.305 424.293 540.242 cv
424.102 540.187 423.887 540.156 423.645 540.156 cv
423.422 540.156 423.23 540.184 423.066 540.23 cv
422.898 540.285 422.762 540.355 422.656 540.441 cv
422.551 540.535 422.469 540.641 422.418 540.766 cv
422.359 540.891 422.332 541.027 422.336 541.172 cv
422.332 541.375 422.383 541.543 422.488 541.68 cv
422.59 541.82 422.727 541.941 422.895 542.043 cv
423.059 542.148 423.25 542.242 423.465 542.324 cv
423.676 542.41 423.891 542.496 424.113 542.582 cv
424.332 542.672 424.551 542.773 424.77 542.879 cv
424.984 542.988 425.176 543.117 425.344 543.273 cv
425.508 543.43 425.641 543.617 425.742 543.836 cv
425.84 544.055 425.891 544.316 425.895 544.613 cv
cp
f
245.395 18.348 mo
245.391 18.5 245.387 18.625 245.375 18.723 cv
245.359 18.828 245.34 18.91 245.316 18.969 cv
245.293 19.035 245.262 19.082 245.223 19.105 cv
245.184 19.137 245.141 19.148 245.094 19.148 cv
240.027 19.148 li
239.852 19.148 239.707 19.098 239.594 18.996 cv
239.473 18.895 239.414 18.73 239.418 18.5 cv
239.418 9.711 li
239.414 9.48401 239.473 9.32001 239.594 9.21503 cv
239.707 9.117 239.852 9.06598 240.027 9.06201 cv
245.063 9.06201 li
245.105 9.06598 245.148 9.078 245.188 9.10199 cv
245.223 9.12903 245.254 9.17603 245.281 9.23798 cv
245.305 9.30902 245.32 9.39099 245.336 9.48798 cv
245.344 9.59399 245.352 9.72302 245.355 9.875 cv
245.352 10.023 245.344 10.148 245.336 10.246 cv
245.32 10.352 245.305 10.434 245.281 10.492 cv
245.254 10.555 245.223 10.598 245.188 10.625 cv
245.148 10.656 245.105 10.672 245.063 10.668 cv
241.461 10.668 li
241.461 13.133 li
244.508 13.133 li
244.555 13.137 244.598 13.152 244.637 13.176 cv
244.676 13.207 244.707 13.25 244.734 13.309 cv
244.758 13.371 244.777 13.453 244.793 13.551 cv
244.805 13.652 244.813 13.773 244.813 13.918 cv
244.813 14.07 244.805 14.195 244.793 14.293 cv
244.777 14.395 244.758 14.473 244.734 14.531 cv
244.707 14.594 244.676 14.637 244.637 14.66 cv
244.598 14.687 244.555 14.703 244.508 14.699 cv
241.461 14.699 li
241.461 17.543 li
245.094 17.543 li
245.141 17.543 245.184 17.559 245.223 17.586 cv
245.262 17.617 245.293 17.664 245.316 17.723 cv
245.34 17.789 245.359 17.871 245.375 17.969 cv
245.387 18.074 245.391 18.199 245.395 18.348 cv
cp
f
253.73 18.883 mo
253.727 18.937 253.711 18.98 253.684 19.02 cv
253.648 19.059 253.598 19.094 253.527 19.117 cv
253.453 19.145 253.352 19.16 253.227 19.176 cv
253.098 19.187 252.941 19.195 252.758 19.195 cv
252.563 19.195 252.402 19.187 252.277 19.176 cv
252.148 19.16 252.047 19.145 251.977 19.117 cv
251.898 19.094 251.848 19.059 251.82 19.02 cv
251.785 18.98 251.77 18.937 251.773 18.883 cv
251.773 14.918 li
251.77 14.582 251.746 14.316 251.699 14.121 cv
251.648 13.93 251.574 13.766 251.484 13.629 cv
251.391 13.492 251.273 13.387 251.125 13.309 cv
250.977 13.234 250.801 13.195 250.605 13.195 cv
250.352 13.195 250.102 13.289 249.848 13.469 cv
249.594 13.652 249.328 13.914 249.055 14.262 cv
249.055 18.883 li
249.051 18.937 249.035 18.98 249.008 19.02 cv
248.973 19.059 248.918 19.094 248.848 19.117 cv
248.77 19.145 248.672 19.16 248.547 19.176 cv
248.422 19.187 248.262 19.195 248.074 19.195 cv
247.879 19.195 247.723 19.187 247.598 19.176 cv
247.473 19.16 247.371 19.145 247.297 19.117 cv
247.219 19.094 247.164 19.059 247.137 19.02 cv
247.102 18.98 247.086 18.937 247.09 18.883 cv
247.09 11.934 li
247.086 11.887 247.102 11.84 247.129 11.797 cv
247.152 11.762 247.199 11.73 247.27 11.699 cv
247.336 11.676 247.422 11.656 247.531 11.641 cv
247.637 11.633 247.77 11.625 247.934 11.621 cv
248.098 11.625 248.234 11.633 248.344 11.641 cv
248.449 11.656 248.535 11.676 248.598 11.699 cv
248.656 11.73 248.699 11.762 248.727 11.797 cv
248.75 11.84 248.762 11.887 248.766 11.934 cv
248.766 12.734 li
249.148 12.324 249.539 12.012 249.938 11.801 cv
250.332 11.594 250.75 11.492 251.184 11.488 cv
251.652 11.492 252.051 11.57 252.379 11.723 cv
252.703 11.883 252.965 12.094 253.164 12.359 cv
253.363 12.629 253.508 12.941 253.598 13.297 cv
253.684 13.656 253.727 14.086 253.73 14.59 cv
cp
f
262.082 15.207 mo
262.078 15.445 262.027 15.621 261.922 15.734 cv
261.813 15.852 261.664 15.91 261.484 15.906 cv
257.25 15.906 li
257.246 16.207 257.281 16.477 257.355 16.715 cv
257.422 16.957 257.535 17.16 257.691 17.328 cv
257.844 17.5 258.039 17.629 258.281 17.715 cv
258.52 17.805 258.809 17.848 259.152 17.848 cv
259.492 17.848 259.793 17.824 260.055 17.773 cv
260.313 17.727 260.539 17.672 260.73 17.609 cv
260.918 17.551 261.074 17.496 261.203 17.445 cv
261.324 17.398 261.426 17.375 261.508 17.371 cv
261.551 17.375 261.59 17.383 261.625 17.398 cv
261.652 17.418 261.68 17.449 261.699 17.496 cv
261.719 17.543 261.73 17.609 261.742 17.695 cv
261.746 17.781 261.75 17.891 261.754 18.02 cv
261.75 18.137 261.75 18.234 261.746 18.312 cv
261.738 18.395 261.73 18.461 261.723 18.516 cv
261.711 18.574 261.695 18.625 261.676 18.66 cv
261.656 18.703 261.629 18.738 261.598 18.773 cv
261.563 18.812 261.469 18.863 261.32 18.922 cv
261.164 18.988 260.973 19.051 260.742 19.105 cv
260.504 19.168 260.234 19.215 259.938 19.262 cv
259.633 19.301 259.313 19.324 258.973 19.328 cv
258.352 19.324 257.809 19.25 257.348 19.094 cv
256.879 18.941 256.492 18.703 256.184 18.387 cv
255.867 18.07 255.633 17.672 255.484 17.187 cv
255.328 16.707 255.254 16.141 255.258 15.484 cv
255.254 14.871 255.332 14.312 255.496 13.816 cv
255.652 13.32 255.887 12.902 256.199 12.555 cv
256.504 12.211 256.879 11.945 257.316 11.762 cv
257.754 11.582 258.246 11.492 258.801 11.488 cv
259.379 11.492 259.879 11.578 260.293 11.746 cv
260.707 11.922 261.043 12.16 261.309 12.461 cv
261.57 12.766 261.766 13.125 261.895 13.539 cv
262.016 13.957 262.078 14.406 262.082 14.895 cv
cp
260.18 14.645 mo
260.191 14.094 260.082 13.66 259.848 13.348 cv
259.613 13.035 259.246 12.879 258.754 12.875 cv
258.504 12.879 258.289 12.926 258.105 13.016 cv
257.918 13.113 257.766 13.238 257.645 13.395 cv
257.52 13.555 257.426 13.742 257.363 13.957 cv
257.297 14.172 257.258 14.402 257.25 14.645 cv
cp
f
268.156 12.578 mo
268.156 12.77 268.148 12.922 268.141 13.039 cv
268.125 13.16 268.109 13.254 268.094 13.32 cv
268.07 13.391 268.043 13.437 268.012 13.461 cv
267.973 13.488 267.93 13.5 267.883 13.5 cv
267.836 13.5 267.789 13.492 267.742 13.473 cv
267.688 13.457 267.629 13.437 267.566 13.414 cv
267.496 13.395 267.426 13.375 267.352 13.355 cv
267.27 13.34 267.184 13.332 267.094 13.328 cv
266.98 13.332 266.871 13.352 266.766 13.395 cv
266.656 13.441 266.543 13.512 266.43 13.602 cv
266.309 13.695 266.188 13.82 266.063 13.973 cv
265.934 14.133 265.797 14.324 265.652 14.551 cv
265.652 18.883 li
265.648 18.937 265.633 18.98 265.605 19.02 cv
265.57 19.059 265.516 19.094 265.445 19.117 cv
265.367 19.145 265.27 19.16 265.145 19.176 cv
265.02 19.187 264.859 19.195 264.672 19.195 cv
264.477 19.195 264.32 19.187 264.195 19.176 cv
264.07 19.16 263.969 19.145 263.895 19.117 cv
263.816 19.094 263.762 19.059 263.734 19.02 cv
263.699 18.98 263.684 18.937 263.688 18.883 cv
263.688 11.934 li
263.684 11.887 263.699 11.84 263.727 11.797 cv
263.75 11.762 263.797 11.73 263.867 11.699 cv
263.934 11.676 264.02 11.656 264.129 11.641 cv
264.234 11.633 264.367 11.625 264.531 11.621 cv
264.695 11.625 264.832 11.633 264.941 11.641 cv
265.047 11.656 265.133 11.676 265.195 11.699 cv
265.254 11.73 265.297 11.762 265.324 11.797 cv
265.348 11.84 265.359 11.887 265.363 11.934 cv
265.363 12.797 li
265.543 12.539 265.715 12.328 265.879 12.156 cv
266.035 11.992 266.191 11.855 266.34 11.754 cv
266.484 11.656 266.629 11.59 266.773 11.547 cv
266.918 11.512 267.063 11.492 267.211 11.488 cv
267.277 11.492 267.352 11.496 267.43 11.5 cv
267.508 11.512 267.586 11.523 267.672 11.539 cv
267.75 11.559 267.824 11.578 267.891 11.602 cv
267.949 11.625 267.996 11.652 268.027 11.676 cv
268.055 11.707 268.074 11.734 268.09 11.762 cv
268.102 11.797 268.113 11.84 268.125 11.891 cv
268.133 11.949 268.141 12.031 268.148 12.137 cv
268.152 12.246 268.156 12.395 268.156 12.578 cv
cp
f
275.332 12.414 mo
275.328 12.668 275.301 12.852 275.246 12.969 cv
275.188 13.09 275.117 13.148 275.039 13.148 cv
274.219 13.148 li
274.332 13.273 274.414 13.418 274.465 13.574 cv
274.512 13.734 274.535 13.898 274.539 14.066 cv
274.535 14.477 274.469 14.836 274.336 15.148 cv
274.199 15.465 274.004 15.73 273.754 15.941 cv
273.5 16.16 273.199 16.324 272.844 16.434 cv
272.484 16.551 272.086 16.605 271.656 16.602 cv
271.43 16.605 271.219 16.578 271.016 16.52 cv
270.813 16.469 270.656 16.406 270.547 16.328 cv
270.484 16.398 270.426 16.477 270.379 16.57 cv
270.328 16.664 270.305 16.77 270.309 16.879 cv
270.305 17.035 270.371 17.156 270.504 17.25 cv
270.633 17.348 270.82 17.402 271.063 17.41 cv
272.754 17.473 li
273.148 17.488 273.5 17.547 273.809 17.641 cv
274.117 17.742 274.379 17.875 274.59 18.047 cv
274.801 18.223 274.961 18.434 275.07 18.676 cv
275.18 18.922 275.234 19.195 275.238 19.508 cv
275.234 19.844 275.16 20.168 275.012 20.477 cv
274.863 20.777 274.637 21.039 274.336 21.266 cv
274.031 21.484 273.652 21.664 273.199 21.797 cv
272.742 21.926 272.211 21.988 271.609 21.992 cv
271.012 21.988 270.508 21.941 270.09 21.852 cv
269.672 21.754 269.328 21.625 269.063 21.461 cv
268.793 21.293 268.598 21.094 268.48 20.867 cv
268.355 20.633 268.297 20.379 268.297 20.105 cv
268.297 19.934 268.316 19.773 268.363 19.617 cv
268.402 19.461 268.469 19.309 268.559 19.168 cv
268.641 19.023 268.746 18.891 268.871 18.758 cv
268.996 18.629 269.137 18.504 269.301 18.383 cv
269.074 18.27 268.902 18.109 268.781 17.898 cv
268.66 17.695 268.602 17.469 268.602 17.223 cv
268.602 16.922 268.668 16.645 268.809 16.387 cv
268.945 16.137 269.129 15.906 269.355 15.703 cv
269.172 15.523 269.027 15.309 268.918 15.051 cv
268.809 14.801 268.754 14.48 268.758 14.098 cv
268.754 13.695 268.824 13.336 268.969 13.012 cv
269.109 12.695 269.309 12.426 269.566 12.203 cv
269.82 11.984 270.125 11.812 270.477 11.695 cv
270.828 11.578 271.219 11.52 271.648 11.52 cv
271.867 11.52 272.074 11.535 272.273 11.559 cv
272.473 11.59 272.66 11.625 272.832 11.668 cv
275.039 11.668 li
275.121 11.672 275.191 11.73 275.25 11.84 cv
275.301 11.957 275.328 12.148 275.332 12.414 cv
cp
272.816 14.059 mo
272.813 13.687 272.711 13.398 272.504 13.187 cv
272.293 12.984 272 12.879 271.625 12.875 cv
271.43 12.879 271.258 12.91 271.117 12.973 cv
270.969 13.039 270.848 13.129 270.754 13.238 cv
270.652 13.352 270.582 13.48 270.539 13.629 cv
270.488 13.777 270.465 13.934 270.469 14.09 cv
270.465 14.449 270.57 14.727 270.781 14.93 cv
270.988 15.137 271.277 15.242 271.648 15.238 cv
271.844 15.242 272.012 15.211 272.16 15.145 cv
272.301 15.086 272.422 15 272.523 14.887 cv
272.617 14.781 272.691 14.652 272.742 14.508 cv
272.789 14.367 272.813 14.219 272.816 14.059 cv
cp
273.277 19.609 mo
273.277 19.371 273.184 19.195 272.996 19.07 cv
272.809 18.949 272.551 18.879 272.223 18.867 cv
270.828 18.828 li
270.691 18.93 270.582 19.023 270.504 19.113 cv
270.422 19.203 270.359 19.289 270.313 19.375 cv
270.262 19.457 270.227 19.539 270.215 19.617 cv
270.195 19.695 270.188 19.773 270.191 19.859 cv
270.188 20.113 270.32 20.312 270.582 20.449 cv
270.844 20.582 271.215 20.648 271.695 20.652 cv
271.988 20.648 272.234 20.617 272.441 20.562 cv
272.641 20.5 272.805 20.422 272.934 20.324 cv
273.055 20.223 273.145 20.113 273.199 19.992 cv
273.25 19.871 273.277 19.742 273.277 19.609 cv
cp
f
280.664 19.148 mo
279.82 21.609 li
279.77 21.738 279.645 21.832 279.438 21.891 cv
279.23 21.945 278.926 21.973 278.527 21.977 cv
278.316 21.973 278.148 21.965 278.027 21.949 cv
277.902 21.93 277.813 21.898 277.75 21.859 cv
277.688 21.816 277.652 21.766 277.648 21.703 cv
277.641 21.641 277.656 21.566 277.695 21.48 cv
278.621 19.148 li
278.551 19.117 278.488 19.07 278.438 19.004 cv
278.379 18.941 278.34 18.871 278.316 18.797 cv
275.926 12.406 li
275.855 12.227 275.82 12.09 275.824 11.992 cv
275.82 11.898 275.852 11.82 275.918 11.766 cv
275.977 11.711 276.082 11.676 276.23 11.652 cv
276.375 11.637 276.57 11.625 276.82 11.621 cv
277.039 11.625 277.219 11.629 277.352 11.633 cv
277.48 11.645 277.582 11.664 277.656 11.691 cv
277.727 11.727 277.781 11.773 277.82 11.836 cv
277.855 11.902 277.891 11.996 277.93 12.113 cv
279.563 16.766 li
279.586 16.766 li
281.086 12.02 li
281.109 11.887 281.148 11.797 281.203 11.75 cv
281.25 11.707 281.332 11.676 281.449 11.652 cv
281.559 11.637 281.762 11.625 282.051 11.621 cv
282.273 11.625 282.457 11.637 282.605 11.652 cv
282.75 11.676 282.859 11.715 282.934 11.77 cv
283 11.832 283.035 11.906 283.039 12 cv
283.035 12.094 283.016 12.207 282.977 12.336 cv
cp
f
295.105 17.621 mo
295.105 17.754 295.102 17.863 295.094 17.953 cv
295.086 18.047 295.074 18.125 295.059 18.187 cv
295.043 18.254 295.02 18.312 294.996 18.355 cv
294.965 18.402 294.926 18.453 294.871 18.512 cv
294.813 18.574 294.699 18.652 294.539 18.742 cv
294.371 18.84 294.172 18.93 293.938 19.012 cv
293.699 19.102 293.43 19.168 293.129 19.227 cv
292.82 19.281 292.492 19.312 292.145 19.312 cv
291.449 19.312 290.824 19.207 290.27 18.992 cv
289.711 18.781 289.238 18.465 288.852 18.039 cv
288.461 17.617 288.164 17.086 287.957 16.453 cv
287.75 15.82 287.645 15.082 287.648 14.238 cv
287.645 13.383 287.758 12.625 287.988 11.957 cv
288.215 11.293 288.535 10.734 288.945 10.281 cv
289.355 9.83197 289.848 9.48798 290.422 9.25403 cv
290.996 9.02301 291.629 8.90601 292.324 8.90198 cv
292.598 8.90601 292.867 8.92999 293.133 8.97302 cv
293.391 9.02002 293.633 9.078 293.852 9.15198 cv
294.07 9.22998 294.27 9.32001 294.449 9.414 cv
294.625 9.51599 294.746 9.59802 294.82 9.66803 cv
294.887 9.73798 294.938 9.797 294.965 9.84399 cv
294.988 9.89099 295.008 9.953 295.027 10.023 cv
295.039 10.102 295.051 10.187 295.063 10.281 cv
295.066 10.383 295.07 10.504 295.074 10.645 cv
295.07 10.805 295.066 10.937 295.059 11.043 cv
295.047 11.156 295.027 11.242 295.004 11.309 cv
294.977 11.379 294.945 11.43 294.91 11.457 cv
294.871 11.492 294.828 11.508 294.785 11.504 cv
294.703 11.508 294.605 11.461 294.488 11.367 cv
294.367 11.277 294.211 11.176 294.023 11.062 cv
293.832 10.953 293.609 10.852 293.348 10.758 cv
293.082 10.668 292.77 10.625 292.41 10.621 cv
292.008 10.625 291.648 10.707 291.336 10.867 cv
291.02 11.035 290.754 11.27 290.535 11.57 cv
290.313 11.879 290.145 12.246 290.031 12.676 cv
289.914 13.109 289.855 13.594 289.859 14.129 cv
289.855 14.727 289.918 15.242 290.043 15.672 cv
290.164 16.109 290.336 16.465 290.566 16.742 cv
290.789 17.023 291.063 17.23 291.383 17.367 cv
291.699 17.508 292.059 17.578 292.465 17.574 cv
292.824 17.578 293.141 17.535 293.406 17.445 cv
293.672 17.363 293.898 17.27 294.086 17.16 cv
294.273 17.059 294.43 16.965 294.555 16.883 cv
294.676 16.801 294.77 16.758 294.84 16.758 cv
294.891 16.758 294.934 16.77 294.965 16.789 cv
294.996 16.809 295.02 16.848 295.043 16.91 cv
295.059 16.973 295.074 17.062 295.09 17.172 cv
295.098 17.289 295.105 17.437 295.105 17.621 cv
cp
f
303.484 15.336 mo
303.48 15.934 303.402 16.477 303.25 16.961 cv
303.09 17.453 302.855 17.871 302.539 18.223 cv
302.223 18.574 301.824 18.848 301.348 19.039 cv
300.867 19.23 300.309 19.324 299.672 19.328 cv
299.051 19.324 298.512 19.242 298.059 19.07 cv
297.598 18.902 297.219 18.652 296.922 18.324 cv
296.617 18 296.395 17.598 296.25 17.117 cv
296.105 16.641 296.035 16.094 296.035 15.477 cv
296.035 14.887 296.113 14.348 296.27 13.855 cv
296.426 13.367 296.664 12.945 296.984 12.594 cv
297.301 12.246 297.695 11.973 298.172 11.777 cv
298.645 11.586 299.203 11.492 299.844 11.488 cv
300.469 11.492 301.008 11.574 301.465 11.742 cv
301.922 11.914 302.301 12.164 302.598 12.488 cv
302.895 12.816 303.117 13.219 303.266 13.695 cv
303.41 14.176 303.48 14.723 303.484 15.336 cv
cp
301.465 15.414 mo
301.461 15.078 301.434 14.762 301.383 14.469 cv
301.324 14.184 301.23 13.934 301.105 13.719 cv
300.973 13.508 300.801 13.34 300.59 13.219 cv
300.371 13.102 300.102 13.043 299.773 13.039 cv
299.484 13.043 299.23 13.098 299.012 13.199 cv
298.793 13.309 298.613 13.465 298.473 13.668 cv
298.332 13.875 298.227 14.121 298.156 14.406 cv
298.086 14.699 298.051 15.027 298.051 15.391 cv
298.051 15.738 298.078 16.055 298.137 16.34 cv
298.191 16.633 298.285 16.883 298.414 17.094 cv
298.539 17.309 298.711 17.473 298.934 17.586 cv
299.148 17.707 299.418 17.766 299.742 17.762 cv
300.035 17.766 300.293 17.711 300.516 17.602 cv
300.73 17.496 300.91 17.344 301.051 17.137 cv
301.191 16.937 301.293 16.691 301.363 16.402 cv
301.426 16.117 301.461 15.789 301.465 15.414 cv
cp
f
311.68 18.883 mo
311.676 18.937 311.66 18.98 311.633 19.02 cv
311.598 19.059 311.547 19.094 311.477 19.117 cv
311.402 19.145 311.301 19.16 311.176 19.176 cv
311.047 19.187 310.891 19.195 310.707 19.195 cv
310.512 19.195 310.352 19.187 310.227 19.176 cv
310.098 19.16 309.996 19.145 309.926 19.117 cv
309.848 19.094 309.797 19.059 309.77 19.02 cv
309.734 18.98 309.719 18.937 309.723 18.883 cv
309.723 14.918 li
309.719 14.582 309.695 14.316 309.648 14.121 cv
309.598 13.93 309.523 13.766 309.434 13.629 cv
309.34 13.492 309.223 13.387 309.074 13.309 cv
308.926 13.234 308.75 13.195 308.555 13.195 cv
308.301 13.195 308.051 13.289 307.797 13.469 cv
307.543 13.652 307.277 13.914 307.004 14.262 cv
307.004 18.883 li
307 18.937 306.984 18.98 306.957 19.02 cv
306.922 19.059 306.867 19.094 306.797 19.117 cv
306.719 19.145 306.621 19.16 306.496 19.176 cv
306.371 19.187 306.211 19.195 306.023 19.195 cv
305.828 19.195 305.672 19.187 305.547 19.176 cv
305.422 19.16 305.32 19.145 305.246 19.117 cv
305.168 19.094 305.113 19.059 305.086 19.02 cv
305.051 18.98 305.035 18.937 305.039 18.883 cv
305.039 11.934 li
305.035 11.887 305.051 11.84 305.078 11.797 cv
305.102 11.762 305.148 11.73 305.219 11.699 cv
305.285 11.676 305.371 11.656 305.48 11.641 cv
305.586 11.633 305.719 11.625 305.883 11.621 cv
306.047 11.625 306.184 11.633 306.293 11.641 cv
306.398 11.656 306.484 11.676 306.547 11.699 cv
306.605 11.73 306.648 11.762 306.676 11.797 cv
306.699 11.84 306.711 11.887 306.715 11.934 cv
306.715 12.734 li
307.098 12.324 307.488 12.012 307.887 11.801 cv
308.281 11.594 308.699 11.492 309.133 11.488 cv
309.602 11.492 310 11.57 310.328 11.723 cv
310.652 11.883 310.914 12.094 311.113 12.359 cv
311.313 12.629 311.457 12.941 311.547 13.297 cv
311.633 13.656 311.676 14.086 311.68 14.59 cv
cp
f
318.504 16.918 mo
318.5 17.316 318.426 17.664 318.281 17.965 cv
318.133 18.266 317.926 18.52 317.656 18.719 cv
317.383 18.926 317.063 19.074 316.695 19.176 cv
316.328 19.273 315.926 19.324 315.496 19.328 cv
315.23 19.324 314.984 19.305 314.75 19.27 cv
314.516 19.227 314.305 19.18 314.117 19.121 cv
313.93 19.062 313.773 19 313.648 18.937 cv
313.523 18.875 313.43 18.816 313.375 18.762 cv
313.316 18.707 313.273 18.625 313.246 18.508 cv
313.211 18.395 313.195 18.219 313.199 17.988 cv
313.195 17.84 313.203 17.719 313.215 17.625 cv
313.223 17.535 313.238 17.465 313.262 17.406 cv
313.281 17.355 313.305 17.316 313.34 17.297 cv
313.367 17.281 313.406 17.273 313.453 17.27 cv
313.508 17.273 313.594 17.305 313.707 17.367 cv
313.816 17.434 313.953 17.508 314.125 17.582 cv
314.289 17.664 314.484 17.734 314.703 17.801 cv
314.922 17.871 315.172 17.906 315.457 17.902 cv
315.633 17.906 315.789 17.887 315.93 17.848 cv
316.063 17.812 316.184 17.762 316.289 17.691 cv
316.387 17.625 316.461 17.539 316.516 17.434 cv
316.563 17.332 316.59 17.211 316.594 17.074 cv
316.59 16.918 316.543 16.785 316.449 16.676 cv
316.355 16.566 316.227 16.469 316.07 16.383 cv
315.906 16.301 315.727 16.223 315.531 16.148 cv
315.328 16.078 315.125 16 314.914 15.906 cv
314.703 15.82 314.496 15.719 314.301 15.602 cv
314.098 15.492 313.918 15.352 313.762 15.184 cv
313.598 15.02 313.473 14.82 313.379 14.582 cv
313.285 14.352 313.238 14.07 313.238 13.738 cv
313.238 13.41 313.301 13.105 313.43 12.824 cv
313.559 12.551 313.746 12.312 313.992 12.113 cv
314.234 11.918 314.531 11.766 314.883 11.652 cv
315.23 11.547 315.625 11.492 316.066 11.488 cv
316.281 11.492 316.492 11.508 316.699 11.535 cv
316.902 11.57 317.09 11.609 317.258 11.652 cv
317.422 11.703 317.563 11.754 317.68 11.805 cv
317.793 11.863 317.875 11.91 317.926 11.945 cv
317.973 11.988 318.008 12.027 318.031 12.062 cv
318.051 12.105 318.063 12.152 318.074 12.203 cv
318.082 12.258 318.094 12.324 318.102 12.402 cv
318.109 12.488 318.113 12.586 318.113 12.703 cv
318.113 12.844 318.109 12.961 318.102 13.047 cv
318.094 13.141 318.078 13.211 318.063 13.258 cv
318.043 13.312 318.02 13.348 317.992 13.363 cv
317.957 13.387 317.922 13.395 317.883 13.391 cv
317.832 13.395 317.758 13.367 317.664 13.309 cv
317.563 13.258 317.441 13.199 317.293 13.133 cv
317.145 13.074 316.973 13.016 316.777 12.957 cv
316.582 12.906 316.359 12.879 316.113 12.875 cv
315.934 12.879 315.781 12.898 315.652 12.93 cv
315.52 12.969 315.41 13.02 315.332 13.086 cv
315.246 13.156 315.184 13.234 315.145 13.324 cv
315.098 13.418 315.078 13.516 315.082 13.617 cv
315.078 13.777 315.129 13.914 315.23 14.02 cv
315.328 14.133 315.457 14.227 315.621 14.309 cv
315.781 14.395 315.965 14.473 316.172 14.543 cv
316.375 14.617 316.582 14.699 316.793 14.781 cv
317 14.871 317.207 14.969 317.418 15.082 cv
317.621 15.195 317.805 15.336 317.965 15.5 cv
318.125 15.668 318.254 15.867 318.355 16.098 cv
318.449 16.332 318.5 16.605 318.504 16.918 cv
cp
f
326.57 18.883 mo
326.566 18.937 326.555 18.98 326.531 19.02 cv
326.504 19.059 326.457 19.094 326.395 19.117 cv
326.328 19.145 326.242 19.16 326.137 19.176 cv
326.031 19.187 325.898 19.195 325.738 19.195 cv
325.563 19.195 325.422 19.187 325.32 19.176 cv
325.211 19.16 325.129 19.145 325.066 19.117 cv
325.004 19.094 324.957 19.059 324.934 19.02 cv
324.902 18.98 324.891 18.937 324.895 18.883 cv
324.895 18.082 li
324.508 18.496 324.117 18.809 323.723 19.016 cv
323.32 19.223 322.91 19.324 322.488 19.328 cv
322.008 19.324 321.605 19.25 321.281 19.094 cv
320.957 18.941 320.695 18.727 320.496 18.457 cv
320.293 18.187 320.148 17.875 320.066 17.516 cv
319.977 17.16 319.934 16.719 319.938 16.187 cv
319.938 11.934 li
319.934 11.887 319.949 11.84 319.98 11.797 cv
320.008 11.762 320.059 11.73 320.137 11.699 cv
320.211 11.676 320.313 11.656 320.441 11.641 cv
320.566 11.633 320.723 11.625 320.914 11.621 cv
321.102 11.625 321.262 11.633 321.387 11.641 cv
321.512 11.656 321.609 11.676 321.688 11.699 cv
321.758 11.73 321.813 11.762 321.848 11.797 cv
321.875 11.84 321.891 11.887 321.895 11.934 cv
321.895 15.859 li
321.891 16.227 321.914 16.504 321.965 16.695 cv
322.008 16.887 322.078 17.051 322.18 17.187 cv
322.273 17.328 322.398 17.434 322.547 17.508 cv
322.695 17.586 322.867 17.625 323.063 17.621 cv
323.313 17.625 323.563 17.535 323.816 17.348 cv
324.066 17.168 324.336 16.902 324.621 16.555 cv
324.621 11.934 li
324.621 11.887 324.633 11.84 324.664 11.797 cv
324.688 11.762 324.742 11.73 324.82 11.699 cv
324.895 11.676 324.992 11.656 325.121 11.641 cv
325.242 11.633 325.402 11.625 325.598 11.621 cv
325.789 11.625 325.945 11.633 326.07 11.641 cv
326.191 11.656 326.293 11.676 326.367 11.699 cv
326.438 11.73 326.488 11.762 326.523 11.797 cv
326.551 11.84 326.566 11.887 326.57 11.934 cv
cp
f
339.512 18.883 mo
339.508 18.937 339.492 18.98 339.465 19.02 cv
339.43 19.059 339.379 19.094 339.309 19.117 cv
339.234 19.145 339.133 19.16 339.012 19.176 cv
338.887 19.187 338.73 19.195 338.539 19.195 cv
338.34 19.195 338.18 19.187 338.055 19.176 cv
337.93 19.16 337.828 19.145 337.754 19.117 cv
337.676 19.094 337.625 19.059 337.598 19.02 cv
337.57 18.98 337.555 18.937 337.559 18.883 cv
337.559 14.762 li
337.555 14.531 337.535 14.316 337.492 14.121 cv
337.445 13.93 337.375 13.766 337.289 13.629 cv
337.195 13.492 337.082 13.387 336.945 13.309 cv
336.805 13.234 336.641 13.195 336.449 13.195 cv
336.215 13.195 335.977 13.289 335.738 13.469 cv
335.5 13.652 335.242 13.914 334.961 14.262 cv
334.961 18.883 li
334.961 18.937 334.945 18.98 334.914 19.02 cv
334.883 19.059 334.828 19.094 334.754 19.117 cv
334.676 19.145 334.574 19.16 334.453 19.176 cv
334.328 19.187 334.176 19.195 333.988 19.195 cv
333.793 19.195 333.633 19.187 333.512 19.176 cv
333.383 19.16 333.281 19.145 333.211 19.117 cv
333.133 19.094 333.082 19.059 333.051 19.02 cv
333.02 18.98 333.004 18.937 333.004 18.883 cv
333.004 14.762 li
333.004 14.531 332.98 14.316 332.938 14.121 cv
332.895 13.93 332.828 13.766 332.742 13.629 cv
332.648 13.492 332.535 13.387 332.398 13.309 cv
332.254 13.234 332.09 13.195 331.906 13.195 cv
331.664 13.195 331.426 13.289 331.188 13.469 cv
330.949 13.652 330.691 13.914 330.418 14.262 cv
330.418 18.883 li
330.414 18.937 330.398 18.98 330.371 19.02 cv
330.336 19.059 330.281 19.094 330.211 19.117 cv
330.133 19.145 330.035 19.16 329.91 19.176 cv
329.785 19.187 329.625 19.195 329.438 19.195 cv
329.242 19.195 329.086 19.187 328.961 19.176 cv
328.836 19.16 328.734 19.145 328.66 19.117 cv
328.582 19.094 328.527 19.059 328.5 19.02 cv
328.465 18.98 328.449 18.937 328.453 18.883 cv
328.453 11.934 li
328.449 11.887 328.465 11.84 328.492 11.797 cv
328.516 11.762 328.563 11.73 328.633 11.699 cv
328.699 11.676 328.785 11.656 328.895 11.641 cv
329 11.633 329.133 11.625 329.297 11.621 cv
329.461 11.625 329.598 11.633 329.707 11.641 cv
329.813 11.656 329.898 11.676 329.961 11.699 cv
330.02 11.73 330.063 11.762 330.09 11.797 cv
330.113 11.84 330.125 11.887 330.129 11.934 cv
330.129 12.734 li
330.512 12.324 330.895 12.012 331.277 11.801 cv
331.656 11.594 332.059 11.492 332.477 11.488 cv
332.762 11.492 333.016 11.52 333.246 11.578 cv
333.473 11.641 333.68 11.727 333.859 11.836 cv
334.039 11.949 334.191 12.086 334.32 12.238 cv
334.449 12.395 334.559 12.566 334.648 12.758 cv
334.855 12.535 335.059 12.344 335.262 12.184 cv
335.457 12.023 335.656 11.891 335.852 11.789 cv
336.047 11.687 336.242 11.613 336.438 11.562 cv
336.633 11.516 336.832 11.492 337.035 11.488 cv
337.496 11.492 337.883 11.57 338.203 11.723 cv
338.516 11.883 338.773 12.094 338.969 12.359 cv
339.164 12.629 339.301 12.941 339.387 13.297 cv
339.465 13.656 339.508 14.035 339.512 14.434 cv
cp
f
348.43 15.305 mo
348.43 15.926 348.363 16.484 348.23 16.98 cv
348.098 17.477 347.902 17.898 347.648 18.246 cv
347.395 18.594 347.078 18.863 346.699 19.047 cv
346.316 19.234 345.883 19.324 345.398 19.328 cv
345.191 19.324 345.004 19.305 344.84 19.27 cv
344.668 19.227 344.504 19.168 344.348 19.09 cv
344.188 19.012 344.031 18.914 343.879 18.789 cv
343.719 18.672 343.559 18.531 343.395 18.367 cv
343.395 21.641 li
343.391 21.687 343.375 21.734 343.348 21.781 cv
343.313 21.82 343.258 21.855 343.188 21.887 cv
343.109 21.91 343.012 21.934 342.887 21.953 cv
342.762 21.965 342.602 21.973 342.414 21.977 cv
342.219 21.973 342.063 21.965 341.938 21.953 cv
341.813 21.934 341.711 21.91 341.637 21.887 cv
341.559 21.855 341.504 21.82 341.477 21.781 cv
341.441 21.734 341.426 21.687 341.43 21.641 cv
341.43 11.934 li
341.426 11.887 341.441 11.84 341.469 11.797 cv
341.492 11.762 341.535 11.73 341.605 11.699 cv
341.668 11.676 341.754 11.656 341.863 11.641 cv
341.965 11.633 342.102 11.625 342.266 11.621 cv
342.422 11.625 342.551 11.633 342.656 11.641 cv
342.762 11.656 342.848 11.676 342.914 11.699 cv
342.977 11.73 343.023 11.762 343.051 11.797 cv
343.074 11.84 343.086 11.887 343.09 11.934 cv
343.09 12.75 li
343.289 12.543 343.488 12.363 343.688 12.203 cv
343.879 12.047 344.078 11.914 344.281 11.805 cv
344.484 11.703 344.691 11.621 344.91 11.566 cv
345.121 11.516 345.352 11.492 345.602 11.488 cv
346.105 11.492 346.539 11.59 346.902 11.789 cv
347.258 11.992 347.551 12.27 347.777 12.613 cv
348 12.965 348.164 13.367 348.273 13.828 cv
348.375 14.289 348.43 14.781 348.43 15.305 cv
cp
346.387 15.445 mo
346.383 15.152 346.363 14.871 346.32 14.594 cv
346.273 14.324 346.195 14.082 346.094 13.867 cv
345.984 13.656 345.844 13.484 345.672 13.355 cv
345.496 13.23 345.281 13.168 345.023 13.164 cv
344.891 13.168 344.762 13.187 344.637 13.223 cv
344.508 13.266 344.379 13.328 344.246 13.414 cv
344.113 13.504 343.977 13.617 343.84 13.758 cv
343.695 13.898 343.547 14.074 343.395 14.277 cv
343.395 16.57 li
343.668 16.918 343.93 17.187 344.18 17.375 cv
344.426 17.566 344.688 17.66 344.961 17.66 cv
345.215 17.66 345.43 17.598 345.613 17.465 cv
345.789 17.34 345.938 17.168 346.051 16.957 cv
346.164 16.746 346.246 16.508 346.305 16.242 cv
346.355 15.977 346.383 15.711 346.387 15.445 cv
cp
f
353.926 18.199 mo
353.926 18.426 353.91 18.602 353.883 18.723 cv
353.852 18.848 353.813 18.934 353.77 18.98 cv
353.719 19.031 353.652 19.074 353.563 19.113 cv
353.469 19.152 353.359 19.184 353.242 19.215 cv
353.117 19.238 352.984 19.262 352.844 19.281 cv
352.699 19.293 352.559 19.301 352.414 19.305 cv
352.023 19.301 351.684 19.25 351.398 19.156 cv
351.113 19.055 350.879 18.906 350.691 18.699 cv
350.504 18.496 350.363 18.238 350.277 17.926 cv
350.184 17.617 350.141 17.246 350.145 16.816 cv
350.145 13.258 li
349.313 13.258 li
349.211 13.262 349.137 13.199 349.086 13.074 cv
349.031 12.953 349.004 12.75 349.008 12.461 cv
349.004 12.312 349.012 12.184 349.027 12.082 cv
349.039 11.98 349.059 11.898 349.086 11.836 cv
349.109 11.777 349.141 11.734 349.184 11.707 cv
349.219 11.684 349.266 11.672 349.32 11.668 cv
350.145 11.668 li
350.145 10.117 li
350.141 10.07 350.156 10.023 350.188 9.97699 cv
350.215 9.93701 350.266 9.90198 350.344 9.87097 cv
350.418 9.84802 350.52 9.82397 350.648 9.80902 cv
350.773 9.797 350.93 9.79303 351.121 9.789 cv
351.309 9.79303 351.469 9.797 351.598 9.80902 cv
351.723 9.82397 351.824 9.84802 351.898 9.87097 cv
351.969 9.90198 352.02 9.93701 352.055 9.97699 cv
352.082 10.023 352.098 10.07 352.102 10.117 cv
352.102 11.668 li
353.613 11.668 li
353.664 11.672 353.711 11.684 353.75 11.707 cv
353.789 11.734 353.82 11.777 353.848 11.836 cv
353.871 11.898 353.891 11.98 353.906 12.082 cv
353.918 12.184 353.926 12.312 353.926 12.461 cv
353.926 12.75 353.898 12.953 353.848 13.074 cv
353.793 13.199 353.719 13.262 353.621 13.258 cv
352.102 13.258 li
352.102 16.523 li
352.098 16.902 352.156 17.187 352.281 17.375 cv
352.398 17.566 352.613 17.66 352.918 17.66 cv
353.02 17.66 353.113 17.652 353.199 17.633 cv
353.281 17.617 353.355 17.598 353.422 17.57 cv
353.484 17.551 353.539 17.527 353.586 17.508 cv
353.629 17.492 353.668 17.484 353.707 17.48 cv
353.734 17.484 353.766 17.492 353.797 17.508 cv
353.824 17.527 353.844 17.566 353.863 17.617 cv
353.875 17.676 353.891 17.75 353.906 17.84 cv
353.918 17.937 353.926 18.055 353.926 18.199 cv
cp
f
357.309 18.883 mo
357.305 18.937 357.289 18.98 357.262 19.02 cv
357.227 19.059 357.172 19.094 357.102 19.117 cv
357.023 19.145 356.926 19.16 356.801 19.176 cv
356.676 19.187 356.516 19.195 356.328 19.195 cv
356.133 19.195 355.977 19.187 355.852 19.176 cv
355.727 19.16 355.625 19.145 355.551 19.117 cv
355.473 19.094 355.418 19.059 355.391 19.02 cv
355.355 18.98 355.34 18.937 355.344 18.883 cv
355.344 11.949 li
355.34 11.898 355.355 11.852 355.391 11.812 cv
355.418 11.773 355.473 11.742 355.551 11.711 cv
355.625 11.687 355.727 11.664 355.852 11.645 cv
355.977 11.633 356.133 11.625 356.328 11.621 cv
356.516 11.625 356.676 11.633 356.801 11.645 cv
356.926 11.664 357.023 11.687 357.102 11.711 cv
357.172 11.742 357.227 11.773 357.262 11.812 cv
357.289 11.852 357.305 11.898 357.309 11.949 cv
cp
357.457 9.578 mo
357.457 9.97699 357.375 10.25 357.215 10.398 cv
357.051 10.551 356.754 10.625 356.32 10.621 cv
355.875 10.625 355.574 10.551 355.426 10.406 cv
355.27 10.262 355.195 10 355.195 9.617 cv
355.195 9.22302 355.273 8.94897 355.434 8.797 cv
355.59 8.64502 355.891 8.56598 356.336 8.56598 cv
356.77 8.56598 357.066 8.64099 357.223 8.789 cv
357.379 8.93701 357.457 9.203 357.457 9.578 cv
cp
f
366.305 15.336 mo
366.301 15.934 366.223 16.477 366.07 16.961 cv
365.91 17.453 365.676 17.871 365.359 18.223 cv
365.043 18.574 364.645 18.848 364.168 19.039 cv
363.688 19.23 363.129 19.324 362.492 19.328 cv
361.871 19.324 361.332 19.242 360.879 19.07 cv
360.418 18.902 360.039 18.652 359.742 18.324 cv
359.438 18 359.215 17.598 359.07 17.117 cv
358.926 16.641 358.855 16.094 358.855 15.477 cv
358.855 14.887 358.934 14.348 359.09 13.855 cv
359.246 13.367 359.484 12.945 359.805 12.594 cv
360.121 12.246 360.516 11.973 360.992 11.777 cv
361.465 11.586 362.023 11.492 362.664 11.488 cv
363.289 11.492 363.828 11.574 364.285 11.742 cv
364.742 11.914 365.121 12.164 365.418 12.488 cv
365.715 12.816 365.938 13.219 366.086 13.695 cv
366.23 14.176 366.301 14.723 366.305 15.336 cv
cp
364.285 15.414 mo
364.281 15.078 364.254 14.762 364.203 14.469 cv
364.145 14.184 364.051 13.934 363.926 13.719 cv
363.793 13.508 363.621 13.34 363.41 13.219 cv
363.191 13.102 362.922 13.043 362.594 13.039 cv
362.305 13.043 362.051 13.098 361.832 13.199 cv
361.613 13.309 361.434 13.465 361.293 13.668 cv
361.152 13.875 361.047 14.121 360.977 14.406 cv
360.906 14.699 360.871 15.027 360.871 15.391 cv
360.871 15.738 360.898 16.055 360.957 16.34 cv
361.012 16.633 361.105 16.883 361.234 17.094 cv
361.359 17.309 361.531 17.473 361.754 17.586 cv
361.969 17.707 362.238 17.766 362.563 17.762 cv
362.855 17.766 363.113 17.711 363.336 17.602 cv
363.551 17.496 363.73 17.344 363.871 17.137 cv
364.012 16.937 364.113 16.691 364.184 16.402 cv
364.246 16.117 364.281 15.789 364.285 15.414 cv
cp
f
374.547 18.883 mo
374.543 18.937 374.527 18.98 374.5 19.02 cv
374.465 19.059 374.414 19.094 374.344 19.117 cv
374.27 19.145 374.168 19.16 374.043 19.176 cv
373.914 19.187 373.758 19.195 373.574 19.195 cv
373.379 19.195 373.219 19.187 373.094 19.176 cv
372.965 19.16 372.863 19.145 372.793 19.117 cv
372.715 19.094 372.664 19.059 372.637 19.02 cv
372.602 18.98 372.586 18.937 372.59 18.883 cv
372.59 14.918 li
372.586 14.582 372.563 14.316 372.516 14.121 cv
372.465 13.93 372.391 13.766 372.301 13.629 cv
372.207 13.492 372.09 13.387 371.941 13.309 cv
371.793 13.234 371.617 13.195 371.422 13.195 cv
371.168 13.195 370.918 13.289 370.664 13.469 cv
370.41 13.652 370.145 13.914 369.871 14.262 cv
369.871 18.883 li
369.867 18.937 369.852 18.98 369.824 19.02 cv
369.789 19.059 369.734 19.094 369.664 19.117 cv
369.586 19.145 369.488 19.16 369.363 19.176 cv
369.238 19.187 369.078 19.195 368.891 19.195 cv
368.695 19.195 368.539 19.187 368.414 19.176 cv
368.289 19.16 368.188 19.145 368.113 19.117 cv
368.035 19.094 367.98 19.059 367.953 19.02 cv
367.918 18.98 367.902 18.937 367.906 18.883 cv
367.906 11.934 li
367.902 11.887 367.918 11.84 367.945 11.797 cv
367.969 11.762 368.016 11.73 368.086 11.699 cv
368.152 11.676 368.238 11.656 368.348 11.641 cv
368.453 11.633 368.586 11.625 368.75 11.621 cv
368.914 11.625 369.051 11.633 369.16 11.641 cv
369.266 11.656 369.352 11.676 369.414 11.699 cv
369.473 11.73 369.516 11.762 369.543 11.797 cv
369.566 11.84 369.578 11.887 369.582 11.934 cv
369.582 12.734 li
369.965 12.324 370.355 12.012 370.754 11.801 cv
371.148 11.594 371.566 11.492 372 11.488 cv
372.469 11.492 372.867 11.57 373.195 11.723 cv
373.52 11.883 373.781 12.094 373.98 12.359 cv
374.18 12.629 374.324 12.941 374.414 13.297 cv
374.5 13.656 374.543 14.086 374.547 14.59 cv
cp
f
383.867 15.23 mo
383.863 15.531 383.836 15.742 383.781 15.859 cv
383.723 15.984 383.633 16.043 383.508 16.039 cv
380.266 16.039 li
380.137 16.043 380.043 15.98 379.988 15.855 cv
379.926 15.734 379.898 15.527 379.902 15.23 cv
379.898 14.941 379.926 14.734 379.988 14.613 cv
380.043 14.496 380.137 14.437 380.266 14.434 cv
383.508 14.434 li
383.57 14.437 383.621 14.449 383.668 14.473 cv
383.707 14.5 383.746 14.547 383.781 14.605 cv
383.809 14.672 383.832 14.754 383.848 14.855 cv
383.859 14.961 383.863 15.086 383.867 15.23 cv
cp
f
394.621 18.293 mo
394.617 18.449 394.613 18.582 394.602 18.684 cv
394.586 18.793 394.566 18.879 394.543 18.949 cv
394.516 19.02 394.48 19.07 394.445 19.102 cv
394.402 19.133 394.359 19.148 394.309 19.148 cv
389.688 19.148 li
389.512 19.148 389.367 19.098 389.254 18.996 cv
389.133 18.895 389.074 18.73 389.078 18.5 cv
389.078 9.34399 li
389.074 9.297 389.094 9.25 389.129 9.203 cv
389.16 9.164 389.215 9.12903 389.297 9.10199 cv
389.371 9.078 389.477 9.05902 389.613 9.039 cv
389.742 9.02698 389.906 9.02002 390.109 9.01599 cv
390.305 9.02002 390.473 9.02698 390.605 9.039 cv
390.734 9.05902 390.836 9.078 390.918 9.10199 cv
390.992 9.12903 391.051 9.164 391.086 9.203 cv
391.117 9.25 391.133 9.297 391.137 9.34399 cv
391.137 17.457 li
394.309 17.457 li
394.359 17.461 394.402 17.477 394.445 17.5 cv
394.48 17.531 394.516 17.578 394.543 17.641 cv
394.566 17.711 394.586 17.797 394.602 17.898 cv
394.613 18.008 394.617 18.137 394.621 18.293 cv
cp
f
402.742 15.336 mo
402.738 15.934 402.66 16.477 402.508 16.961 cv
402.348 17.453 402.113 17.871 401.797 18.223 cv
401.48 18.574 401.082 18.848 400.605 19.039 cv
400.125 19.23 399.566 19.324 398.93 19.328 cv
398.309 19.324 397.77 19.242 397.316 19.07 cv
396.855 18.902 396.477 18.652 396.18 18.324 cv
395.875 18 395.652 17.598 395.508 17.117 cv
395.363 16.641 395.293 16.094 395.293 15.477 cv
395.293 14.887 395.371 14.348 395.527 13.855 cv
395.684 13.367 395.922 12.945 396.242 12.594 cv
396.559 12.246 396.953 11.973 397.43 11.777 cv
397.902 11.586 398.461 11.492 399.102 11.488 cv
399.727 11.492 400.266 11.574 400.723 11.742 cv
401.18 11.914 401.559 12.164 401.855 12.488 cv
402.152 12.816 402.375 13.219 402.523 13.695 cv
402.668 14.176 402.738 14.723 402.742 15.336 cv
cp
400.723 15.414 mo
400.719 15.078 400.691 14.762 400.641 14.469 cv
400.582 14.184 400.488 13.934 400.363 13.719 cv
400.23 13.508 400.059 13.34 399.848 13.219 cv
399.629 13.102 399.359 13.043 399.031 13.039 cv
398.742 13.043 398.488 13.098 398.27 13.199 cv
398.051 13.309 397.871 13.465 397.73 13.668 cv
397.59 13.875 397.484 14.121 397.414 14.406 cv
397.344 14.699 397.309 15.027 397.309 15.391 cv
397.309 15.738 397.336 16.055 397.395 16.34 cv
397.449 16.633 397.543 16.883 397.672 17.094 cv
397.797 17.309 397.969 17.473 398.191 17.586 cv
398.406 17.707 398.676 17.766 399 17.762 cv
399.293 17.766 399.551 17.711 399.773 17.602 cv
399.988 17.496 400.168 17.344 400.309 17.137 cv
400.449 16.937 400.551 16.691 400.621 16.402 cv
400.684 16.117 400.719 15.789 400.723 15.414 cv
cp
f
409.559 17.777 mo
409.555 17.914 409.551 18.027 409.547 18.117 cv
409.535 18.211 409.527 18.289 409.516 18.348 cv
409.5 18.41 409.484 18.461 409.469 18.496 cv
409.449 18.539 409.406 18.586 409.348 18.645 cv
409.281 18.707 409.176 18.781 409.027 18.863 cv
408.875 18.953 408.703 19.031 408.512 19.094 cv
408.32 19.164 408.113 19.215 407.887 19.258 cv
407.66 19.297 407.426 19.316 407.191 19.32 cv
406.652 19.316 406.18 19.238 405.766 19.07 cv
405.352 18.906 405.004 18.66 404.727 18.336 cv
404.441 18.012 404.23 17.617 404.09 17.148 cv
403.949 16.684 403.879 16.145 403.879 15.539 cv
403.879 14.844 403.965 14.246 404.137 13.738 cv
404.309 13.234 404.551 12.812 404.867 12.48 cv
405.176 12.148 405.543 11.902 405.973 11.738 cv
406.395 11.578 406.863 11.496 407.375 11.496 cv
407.582 11.496 407.785 11.516 407.988 11.551 cv
408.184 11.59 408.371 11.641 408.547 11.699 cv
408.719 11.766 408.875 11.836 409.016 11.91 cv
409.152 11.992 409.25 12.059 409.309 12.113 cv
409.363 12.172 409.402 12.219 409.43 12.254 cv
409.449 12.297 409.469 12.348 409.484 12.406 cv
409.496 12.473 409.508 12.551 409.516 12.637 cv
409.523 12.73 409.527 12.84 409.527 12.969 cv
409.527 13.273 409.5 13.484 409.449 13.605 cv
409.395 13.727 409.328 13.789 409.246 13.785 cv
409.156 13.789 409.063 13.754 408.965 13.68 cv
408.863 13.609 408.746 13.527 408.613 13.437 cv
408.48 13.352 408.32 13.27 408.133 13.195 cv
407.945 13.125 407.719 13.09 407.461 13.086 cv
406.949 13.09 406.563 13.285 406.293 13.676 cv
406.02 14.066 405.883 14.641 405.887 15.398 cv
405.883 15.773 405.918 16.105 405.988 16.391 cv
406.055 16.676 406.152 16.914 406.289 17.105 cv
406.418 17.301 406.586 17.445 406.789 17.539 cv
406.988 17.637 407.219 17.684 407.484 17.684 cv
407.75 17.684 407.984 17.645 408.184 17.562 cv
408.375 17.484 408.543 17.395 408.691 17.293 cv
408.832 17.195 408.957 17.105 409.059 17.023 cv
409.156 16.945 409.238 16.906 409.309 16.902 cv
409.352 16.906 409.391 16.918 409.426 16.941 cv
409.453 16.969 409.477 17.016 409.5 17.086 cv
409.516 17.156 409.531 17.246 409.543 17.355 cv
409.551 17.465 409.555 17.605 409.559 17.777 cv
cp
f
416.848 18.906 mo
416.844 18.984 416.816 19.039 416.77 19.078 cv
416.715 19.121 416.633 19.148 416.523 19.168 cv
416.406 19.184 416.242 19.195 416.027 19.195 cv
415.789 19.195 415.617 19.184 415.516 19.168 cv
415.406 19.148 415.332 19.121 415.293 19.078 cv
415.246 19.039 415.227 18.984 415.227 18.906 cv
415.227 18.355 li
414.938 18.664 414.609 18.902 414.246 19.07 cv
413.879 19.242 413.473 19.324 413.027 19.328 cv
412.656 19.324 412.316 19.277 412.008 19.184 cv
411.699 19.09 411.434 18.949 411.207 18.754 cv
410.98 18.566 410.805 18.332 410.68 18.051 cv
410.555 17.773 410.492 17.445 410.496 17.066 cv
410.492 16.668 410.57 16.316 410.73 16.012 cv
410.887 15.715 411.125 15.469 411.441 15.273 cv
411.754 15.082 412.145 14.937 412.613 14.84 cv
413.082 14.75 413.625 14.703 414.242 14.699 cv
414.922 14.699 li
414.922 14.277 li
414.922 14.062 414.898 13.871 414.855 13.707 cv
414.809 13.547 414.734 13.41 414.637 13.297 cv
414.531 13.191 414.398 13.109 414.23 13.055 cv
414.059 13.004 413.848 12.98 413.605 12.977 cv
413.273 12.98 412.98 13.016 412.727 13.086 cv
412.465 13.16 412.238 13.242 412.043 13.328 cv
411.844 13.422 411.68 13.5 411.551 13.57 cv
411.414 13.645 411.305 13.684 411.227 13.68 cv
411.164 13.684 411.113 13.664 411.074 13.625 cv
411.027 13.59 410.992 13.539 410.965 13.469 cv
410.934 13.406 410.91 13.32 410.898 13.219 cv
410.879 13.121 410.871 13.012 410.875 12.891 cv
410.871 12.73 410.887 12.605 410.914 12.508 cv
410.938 12.418 410.984 12.332 411.063 12.254 cv
411.133 12.18 411.262 12.098 411.445 12.008 cv
411.625 11.918 411.836 11.832 412.082 11.754 cv
412.324 11.676 412.594 11.613 412.883 11.562 cv
413.172 11.516 413.469 11.492 413.777 11.488 cv
414.32 11.492 414.785 11.543 415.172 11.648 cv
415.559 11.758 415.879 11.922 416.129 12.141 cv
416.379 12.359 416.559 12.645 416.676 12.992 cv
416.785 13.344 416.844 13.758 416.848 14.23 cv
cp
414.922 15.93 mo
414.172 15.93 li
413.855 15.934 413.586 15.957 413.363 16 cv
413.137 16.051 412.953 16.121 412.816 16.211 cv
412.672 16.309 412.57 16.422 412.508 16.551 cv
412.441 16.687 412.406 16.836 412.41 17.004 cv
412.406 17.297 412.5 17.527 412.688 17.691 cv
412.871 17.859 413.129 17.941 413.457 17.941 cv
413.73 17.941 413.98 17.871 414.215 17.73 cv
414.441 17.59 414.68 17.387 414.922 17.113 cv
cp
f
420.77 18.883 mo
420.766 18.937 420.75 18.98 420.723 19.02 cv
420.688 19.059 420.633 19.094 420.563 19.117 cv
420.484 19.145 420.387 19.16 420.262 19.176 cv
420.137 19.187 419.977 19.195 419.789 19.195 cv
419.594 19.195 419.438 19.187 419.313 19.176 cv
419.188 19.16 419.086 19.145 419.012 19.117 cv
418.934 19.094 418.879 19.059 418.852 19.02 cv
418.816 18.98 418.801 18.937 418.805 18.883 cv
418.805 8.63702 li
418.801 8.586 418.816 8.539 418.852 8.49597 cv
418.879 8.45697 418.934 8.422 419.012 8.39099 cv
419.086 8.36298 419.188 8.34399 419.313 8.32397 cv
419.438 8.31201 419.594 8.30499 419.789 8.30103 cv
419.977 8.30499 420.137 8.31201 420.262 8.32397 cv
420.387 8.34399 420.484 8.36298 420.563 8.39099 cv
420.633 8.422 420.688 8.45697 420.723 8.49597 cv
420.75 8.539 420.766 8.586 420.77 8.63702 cv
cp
f
438.258 18.867 mo
438.254 18.922 438.242 18.969 438.215 19.008 cv
438.184 19.051 438.129 19.086 438.059 19.109 cv
437.98 19.137 437.883 19.156 437.758 19.172 cv
437.633 19.187 437.473 19.195 437.281 19.195 cv
437.094 19.195 436.938 19.187 436.816 19.172 cv
436.688 19.156 436.59 19.137 436.52 19.109 cv
436.445 19.086 436.395 19.051 436.363 19.008 cv
436.332 18.969 436.316 18.922 436.316 18.867 cv
436.316 10.66 li
436.301 10.66 li
433.379 18.859 li
433.355 18.93 433.32 18.984 433.277 19.027 cv
433.227 19.074 433.164 19.109 433.086 19.133 cv
433.004 19.16 432.902 19.176 432.777 19.184 cv
432.652 19.191 432.5 19.195 432.328 19.195 cv
432.148 19.195 432 19.187 431.875 19.176 cv
431.75 19.16 431.645 19.141 431.566 19.113 cv
431.48 19.086 431.418 19.051 431.375 19.008 cv
431.324 18.969 431.293 18.922 431.281 18.859 cv
428.461 10.66 li
428.445 10.66 li
428.445 18.867 li
428.441 18.922 428.426 18.969 428.402 19.008 cv
428.371 19.051 428.32 19.086 428.242 19.109 cv
428.164 19.137 428.063 19.156 427.941 19.172 cv
427.816 19.187 427.66 19.195 427.473 19.195 cv
427.281 19.195 427.125 19.187 427.004 19.172 cv
426.875 19.156 426.773 19.137 426.703 19.109 cv
426.625 19.086 426.574 19.051 426.547 19.008 cv
426.516 18.969 426.5 18.922 426.504 18.867 cv
426.504 9.883 li
426.5 9.62097 426.57 9.41803 426.715 9.27301 cv
426.852 9.13702 427.039 9.06598 427.277 9.06201 cv
428.617 9.06201 li
428.855 9.06598 429.059 9.086 429.23 9.12097 cv
429.398 9.164 429.547 9.22699 429.676 9.31598 cv
429.797 9.40997 429.902 9.53101 429.988 9.67603 cv
430.07 9.828 430.141 10.012 430.207 10.227 cv
432.391 16.234 li
432.422 16.234 li
434.68 10.242 li
434.746 10.023 434.82 9.84003 434.902 9.68701 cv
434.98 9.539 435.074 9.41803 435.184 9.32001 cv
435.289 9.22998 435.414 9.164 435.559 9.12097 cv
435.703 9.086 435.871 9.06598 436.066 9.06201 cv
437.445 9.06201 li
437.582 9.06598 437.703 9.08197 437.809 9.117 cv
437.906 9.15601 437.988 9.211 438.059 9.27698 cv
438.121 9.35199 438.172 9.43701 438.207 9.53497 cv
438.238 9.64099 438.254 9.758 438.258 9.883 cv
cp
f
447.367 15.336 mo
447.363 15.934 447.285 16.477 447.133 16.961 cv
446.973 17.453 446.738 17.871 446.422 18.223 cv
446.105 18.574 445.707 18.848 445.23 19.039 cv
444.75 19.23 444.191 19.324 443.555 19.328 cv
442.934 19.324 442.395 19.242 441.941 19.07 cv
441.48 18.902 441.102 18.652 440.805 18.324 cv
440.5 18 440.277 17.598 440.133 17.117 cv
439.988 16.641 439.918 16.094 439.918 15.477 cv
439.918 14.887 439.996 14.348 440.152 13.855 cv
440.309 13.367 440.547 12.945 440.867 12.594 cv
441.184 12.246 441.578 11.973 442.055 11.777 cv
442.527 11.586 443.086 11.492 443.727 11.488 cv
444.352 11.492 444.891 11.574 445.348 11.742 cv
445.805 11.914 446.184 12.164 446.48 12.488 cv
446.777 12.816 447 13.219 447.148 13.695 cv
447.293 14.176 447.363 14.723 447.367 15.336 cv
cp
445.348 15.414 mo
445.344 15.078 445.316 14.762 445.266 14.469 cv
445.207 14.184 445.113 13.934 444.988 13.719 cv
444.855 13.508 444.684 13.34 444.473 13.219 cv
444.254 13.102 443.984 13.043 443.656 13.039 cv
443.367 13.043 443.113 13.098 442.895 13.199 cv
442.676 13.309 442.496 13.465 442.355 13.668 cv
442.215 13.875 442.109 14.121 442.039 14.406 cv
441.969 14.699 441.934 15.027 441.934 15.391 cv
441.934 15.738 441.961 16.055 442.02 16.34 cv
442.074 16.633 442.168 16.883 442.297 17.094 cv
442.422 17.309 442.594 17.473 442.816 17.586 cv
443.031 17.707 443.301 17.766 443.625 17.762 cv
443.918 17.766 444.176 17.711 444.398 17.602 cv
444.613 17.496 444.793 17.344 444.934 17.137 cv
445.074 16.937 445.176 16.691 445.246 16.402 cv
445.309 16.117 445.344 15.789 445.348 15.414 cv
cp
f
455.516 18.883 mo
455.512 18.945 455.5 18.992 455.477 19.027 cv
455.449 19.07 455.402 19.102 455.344 19.125 cv
455.277 19.148 455.195 19.164 455.09 19.18 cv
454.984 19.187 454.852 19.195 454.699 19.195 cv
454.527 19.195 454.395 19.187 454.293 19.18 cv
454.188 19.164 454.102 19.148 454.039 19.125 cv
453.973 19.102 453.926 19.07 453.898 19.027 cv
453.867 18.992 453.852 18.945 453.855 18.883 cv
453.855 18.113 li
453.496 18.5 453.121 18.797 452.73 19.008 cv
452.332 19.219 451.898 19.324 451.426 19.328 cv
450.891 19.324 450.441 19.223 450.078 19.02 cv
449.711 18.816 449.414 18.543 449.184 18.191 cv
448.949 17.848 448.781 17.441 448.68 16.973 cv
448.578 16.512 448.527 16.02 448.527 15.5 cv
448.527 14.887 448.59 14.332 448.723 13.836 cv
448.852 13.344 449.047 12.922 449.305 12.574 cv
449.559 12.227 449.875 11.961 450.254 11.77 cv
450.633 11.586 451.07 11.492 451.566 11.488 cv
451.953 11.492 452.305 11.57 452.625 11.727 cv
452.938 11.887 453.254 12.117 453.566 12.422 cv
453.566 8.65997 li
453.566 8.60901 453.578 8.56201 453.609 8.52002 cv
453.633 8.47998 453.688 8.44501 453.766 8.414 cv
453.84 8.38702 453.938 8.367 454.066 8.34802 cv
454.188 8.336 454.348 8.328 454.543 8.32397 cv
454.734 8.328 454.891 8.336 455.016 8.34802 cv
455.137 8.367 455.238 8.38702 455.313 8.414 cv
455.383 8.44501 455.434 8.47998 455.469 8.52002 cv
455.496 8.56201 455.512 8.60901 455.516 8.65997 cv
cp
453.566 14.238 mo
453.285 13.887 453.016 13.617 452.762 13.43 cv
452.5 13.242 452.23 13.148 451.953 13.148 cv
451.699 13.148 451.48 13.215 451.297 13.34 cv
451.109 13.473 450.961 13.641 450.852 13.852 cv
450.738 14.062 450.656 14.301 450.602 14.562 cv
450.547 14.828 450.52 15.098 450.52 15.367 cv
450.52 15.664 450.543 15.945 450.59 16.219 cv
450.637 16.496 450.711 16.742 450.82 16.957 cv
450.922 17.172 451.066 17.344 451.246 17.473 cv
451.422 17.605 451.645 17.672 451.914 17.668 cv
452.047 17.672 452.176 17.652 452.309 17.609 cv
452.434 17.574 452.566 17.512 452.699 17.418 cv
452.832 17.332 452.969 17.215 453.109 17.07 cv
453.25 16.93 453.402 16.754 453.566 16.547 cv
cp
f
463.914 15.207 mo
463.91 15.445 463.859 15.621 463.754 15.734 cv
463.645 15.852 463.496 15.91 463.316 15.906 cv
459.082 15.906 li
459.078 16.207 459.113 16.477 459.188 16.715 cv
459.254 16.957 459.367 17.16 459.523 17.328 cv
459.676 17.5 459.871 17.629 460.113 17.715 cv
460.352 17.805 460.641 17.848 460.984 17.848 cv
461.324 17.848 461.625 17.824 461.887 17.773 cv
462.145 17.727 462.371 17.672 462.563 17.609 cv
462.75 17.551 462.906 17.496 463.035 17.445 cv
463.156 17.398 463.258 17.375 463.34 17.371 cv
463.383 17.375 463.422 17.383 463.457 17.398 cv
463.484 17.418 463.512 17.449 463.531 17.496 cv
463.551 17.543 463.563 17.609 463.574 17.695 cv
463.578 17.781 463.582 17.891 463.586 18.02 cv
463.582 18.137 463.582 18.234 463.578 18.312 cv
463.57 18.395 463.563 18.461 463.555 18.516 cv
463.543 18.574 463.527 18.625 463.508 18.66 cv
463.488 18.703 463.461 18.738 463.43 18.773 cv
463.395 18.812 463.301 18.863 463.152 18.922 cv
462.996 18.988 462.805 19.051 462.574 19.105 cv
462.336 19.168 462.066 19.215 461.77 19.262 cv
461.465 19.301 461.145 19.324 460.805 19.328 cv
460.184 19.324 459.641 19.25 459.18 19.094 cv
458.711 18.941 458.324 18.703 458.016 18.387 cv
457.699 18.07 457.465 17.672 457.316 17.187 cv
457.16 16.707 457.086 16.141 457.09 15.484 cv
457.086 14.871 457.164 14.312 457.328 13.816 cv
457.484 13.32 457.719 12.902 458.031 12.555 cv
458.336 12.211 458.711 11.945 459.148 11.762 cv
459.586 11.582 460.078 11.492 460.633 11.488 cv
461.211 11.492 461.711 11.578 462.125 11.746 cv
462.539 11.922 462.875 12.16 463.141 12.461 cv
463.402 12.766 463.598 13.125 463.727 13.539 cv
463.848 13.957 463.91 14.406 463.914 14.895 cv
cp
462.012 14.645 mo
462.023 14.094 461.914 13.66 461.68 13.348 cv
461.445 13.035 461.078 12.879 460.586 12.875 cv
460.336 12.879 460.121 12.926 459.938 13.016 cv
459.75 13.113 459.598 13.238 459.477 13.395 cv
459.352 13.555 459.258 13.742 459.195 13.957 cv
459.129 14.172 459.09 14.402 459.082 14.645 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
