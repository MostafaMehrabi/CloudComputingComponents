%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AveragePreparationTimes.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:40:30 p.m.
%%BoundingBox: 0 0 704 534
%%HiResBoundingBox: 0 0 703.8000 533.7601
%%CropBox: 0 0 703.8000 533.7601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -533.76 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 533.76 li
703.8 533.76 li
703.8 0 li
cp
clp
gsave
0 533.76 mo
704 533.76 li
704 -.23999 li
0 -.23999 li
cp
clp
0 0 mo
703.801 0 li
703.801 533.762 li
0 533.762 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.398 463.922 mo
686.641 463.922 li
53.398 418.559 mo
686.641 418.559 li
53.398 373.078 mo
686.641 373.078 li
53.398 327.602 mo
686.641 327.602 li
53.398 282.238 mo
686.641 282.238 li
53.398 236.762 mo
686.641 236.762 li
53.398 191.398 mo
686.641 191.398 li
53.398 145.922 mo
686.641 145.922 li
53.398 100.441 mo
686.641 100.441 li
53.398 55.078 mo
686.641 55.078 li
.135805 .104005 .108583 0 cmyk
@
53.398 441.238 mo
686.641 441.238 li
53.398 395.762 mo
686.641 395.762 li
53.398 350.398 mo
686.641 350.398 li
53.398 304.922 mo
686.641 304.922 li
53.398 259.559 mo
686.641 259.559 li
53.398 214.078 mo
686.641 214.078 li
53.398 168.602 mo
686.641 168.602 li
53.398 123.238 mo
686.641 123.238 li
53.398 77.762 mo
686.641 77.762 li
53.398 32.281 mo
686.641 32.281 li
.326574 .281529 .277562 0 cmyk
@
92.879 32.281 mo
92.879 486.719 li
172.078 32.281 mo
172.078 486.719 li
251.281 32.281 mo
251.281 486.719 li
330.359 32.281 mo
330.359 486.719 li
409.559 32.281 mo
409.559 486.719 li
488.762 32.281 mo
488.762 486.719 li
567.84 32.281 mo
567.84 486.719 li
647.039 32.281 mo
647.039 486.719 li
.175235 .144778 .143648 0 cmyk
@
53.398 32.281 mo
53.398 486.719 li
132.48 32.281 mo
132.48 486.719 li
211.68 32.281 mo
211.68 486.719 li
290.879 32.281 mo
290.879 486.719 li
369.961 32.281 mo
369.961 486.719 li
449.16 32.281 mo
449.16 486.719 li
528.359 32.281 mo
528.359 486.719 li
607.441 32.281 mo
607.441 486.719 li
686.641 32.281 mo
686.641 486.719 li
.326574 .281529 .277562 0 cmyk
@
33.238 477.359 mo
40.32 477.359 li
40.32 494.519 li
33.238 494.519 li
cp
0 0 0 0 cmyk
ef
33.238 431.879 mo
40.32 431.879 li
40.32 449.039 li
33.238 449.039 li
cp
ef
26.16 386.52 mo
40.32 386.52 li
40.32 403.559 li
26.16 403.559 li
cp
ef
26.16 341.039 mo
40.32 341.039 li
40.32 358.199 li
26.16 358.199 li
cp
ef
26.16 295.68 mo
40.32 295.68 li
40.32 312.719 li
26.16 312.719 li
cp
ef
26.16 250.199 mo
40.32 250.199 li
40.32 267.238 li
26.16 267.238 li
cp
ef
26.16 204.719 mo
40.32 204.719 li
40.32 221.879 li
26.16 221.879 li
cp
ef
26.16 159.359 mo
40.32 159.359 li
40.32 176.398 li
26.16 176.398 li
cp
ef
26.16 113.879 mo
40.32 113.879 li
40.32 130.922 li
26.16 130.922 li
cp
ef
26.16 68.398 mo
40.32 68.398 li
40.32 85.558 li
26.16 85.558 li
cp
ef
26.16 23.039 mo
40.32 23.039 li
40.32 40.078 li
26.16 40.078 li
cp
ef
.96 lw
53.398 486.719 mo
686.641 486.719 li
.369879 .299321 .304356 .000976577 cmyk
@
53.398 486.719 mo
53.398 491.16 li
132.48 486.719 mo
132.48 491.16 li
211.68 486.719 mo
211.68 491.16 li
290.879 486.719 mo
290.879 491.16 li
369.961 486.719 mo
369.961 491.16 li
449.16 486.719 mo
449.16 491.16 li
528.359 486.719 mo
528.359 491.16 li
607.441 486.719 mo
607.441 491.16 li
686.641 486.719 mo
686.641 491.16 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
1 lc
53.398 132.84 mo
132.48 319.801 li
211.68 390.84 li
290.879 422.52 li
369.961 438.961 li
449.16 448.441 li
528.359 454.922 li
607.441 459.359 li
686.641 462.84 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
58.359 137.711 mo
48.281 127.629 li
48.281 137.711 mo
58.359 127.629 li
.62829 .284672 0 0 cmyk
@
137.559 324.672 mo
127.48 314.59 li
127.48 324.672 mo
137.559 314.59 li
@
216.641 395.828 mo
206.559 385.75 li
206.559 395.828 mo
216.641 385.75 li
@
295.84 427.512 mo
285.762 417.43 li
285.762 427.512 mo
295.84 417.43 li
@
375.039 443.828 mo
364.961 433.75 li
364.961 443.828 mo
375.039 433.75 li
@
454.121 453.43 mo
444.039 443.352 li
444.039 453.43 mo
454.121 443.352 li
@
533.32 459.91 mo
523.238 449.828 li
523.238 459.91 mo
533.32 449.828 li
@
612.52 464.352 mo
602.441 454.27 li
602.441 464.352 mo
612.52 454.27 li
@
691.602 467.711 mo
681.52 457.629 li
681.52 467.711 mo
691.602 457.629 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
53.398 97.801 mo
132.48 285.48 li
211.68 388.441 li
290.879 421.32 li
369.961 437.762 li
449.16 447.48 li
528.359 454.199 li
607.441 458.762 li
686.641 462.238 li
@
grestore
48.281 92.59 mo
58.238 92.59 li
58.238 102.551 li
48.281 102.551 li
cp
@
127.48 280.27 mo
137.441 280.27 li
137.441 290.231 li
127.48 290.231 li
cp
@
206.559 383.352 mo
216.52 383.352 li
216.52 393.309 li
206.559 393.309 li
cp
@
285.762 416.23 mo
295.719 416.23 li
295.719 426.191 li
285.762 426.191 li
cp
@
364.961 432.672 mo
374.922 432.672 li
374.922 442.629 li
364.961 442.629 li
cp
@
444.039 442.27 mo
454 442.27 li
454 452.231 li
444.039 452.231 li
cp
@
523.238 448.988 mo
533.199 448.988 li
533.199 458.949 li
523.238 458.949 li
cp
@
602.441 453.672 mo
612.398 453.672 li
612.398 463.629 li
602.441 463.629 li
cp
@
681.52 457.148 mo
691.481 457.148 li
691.481 467.109 li
681.52 467.109 li
cp
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
53.398 68.879 mo
132.48 271.68 li
211.68 402.719 li
290.879 431.281 li
369.961 438.359 li
449.16 448.078 li
528.359 454.559 li
607.441 459.121 li
686.641 462.602 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
58.359 73.75 mo
48.281 63.672 li
48.281 73.75 mo
58.359 63.672 li
.0321965 .622736 .922606 .000579843 cmyk
@
137.559 276.672 mo
127.48 266.59 li
127.48 276.672 mo
137.559 266.59 li
@
216.641 407.59 mo
206.559 397.512 li
206.559 407.59 mo
216.641 397.512 li
@
295.84 436.148 mo
285.762 426.07 li
285.762 436.148 mo
295.84 426.07 li
@
375.039 443.23 mo
364.961 433.148 li
364.961 443.23 mo
375.039 433.148 li
@
454.121 452.949 mo
444.039 442.871 li
444.039 452.949 mo
454.121 442.871 li
@
533.32 459.43 mo
523.238 449.352 li
523.238 459.43 mo
533.32 449.352 li
@
612.52 464.109 mo
602.441 454.031 li
602.441 464.109 mo
612.52 454.031 li
@
691.602 467.59 mo
681.52 457.512 li
681.52 467.59 mo
691.602 457.512 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
53.398 97.559 mo
132.48 256.68 li
211.68 380.16 li
290.879 422.762 li
369.961 438 li
449.16 447.48 li
528.359 454.32 li
607.441 459.121 li
686.641 462.602 li
@
grestore
48.281 92.352 mo
58.238 92.352 li
58.238 102.309 li
48.281 102.309 li
cp
@
127.48 251.469 mo
137.441 251.469 li
137.441 261.43 li
127.48 261.43 li
cp
@
206.559 375.07 mo
216.52 375.07 li
216.52 385.031 li
206.559 385.031 li
cp
@
285.762 417.551 mo
295.719 417.551 li
295.719 427.512 li
285.762 427.512 li
cp
@
364.961 432.789 mo
374.922 432.789 li
374.922 442.75 li
364.961 442.75 li
cp
@
444.039 442.391 mo
454 442.391 li
454 452.352 li
444.039 452.352 li
cp
@
523.238 449.23 mo
533.199 449.23 li
533.199 459.191 li
523.238 459.191 li
cp
@
602.441 453.91 mo
612.398 453.91 li
612.398 463.871 li
602.441 463.871 li
cp
@
681.52 457.391 mo
691.481 457.391 li
691.481 467.352 li
681.52 467.352 li
cp
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
53.398 65.879 mo
132.48 308.398 li
211.68 401.879 li
290.879 427.68 li
369.961 437.762 li
449.16 447.602 li
528.359 454.199 li
607.441 458.879 li
686.641 466.922 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
58.359 70.75 mo
48.281 60.672 li
48.281 70.75 mo
58.359 60.672 li
.621118 .109194 .980743 .0040589 cmyk
@
137.559 313.391 mo
127.48 303.309 li
127.48 313.391 mo
137.559 303.309 li
@
216.641 406.75 mo
206.559 396.672 li
206.559 406.75 mo
216.641 396.672 li
@
295.84 432.551 mo
285.762 422.469 li
285.762 432.551 mo
295.84 422.469 li
@
375.039 442.75 mo
364.961 432.672 li
364.961 442.75 mo
375.039 432.672 li
@
454.121 452.469 mo
444.039 442.391 li
444.039 452.469 mo
454.121 442.391 li
@
533.32 459.07 mo
523.238 448.988 li
523.238 459.07 mo
533.32 448.988 li
@
612.52 463.75 mo
602.441 453.672 li
602.441 463.75 mo
612.52 453.672 li
@
691.602 471.91 mo
681.52 461.828 li
681.52 471.91 mo
691.602 461.828 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
53.398 97.199 mo
132.48 256.68 li
211.68 388.559 li
290.879 416.16 li
369.961 437.762 li
449.16 454.68 li
528.359 453.961 li
607.441 458.762 li
686.641 462.238 li
@
grestore
48.281 91.988 mo
58.238 91.988 li
58.238 101.949 li
48.281 101.949 li
cp
@
127.48 251.469 mo
137.441 251.469 li
137.441 261.43 li
127.48 261.43 li
cp
@
206.559 383.469 mo
216.52 383.469 li
216.52 393.43 li
206.559 393.43 li
cp
@
285.762 411.07 mo
295.719 411.07 li
295.719 421.031 li
285.762 421.031 li
cp
@
364.961 432.672 mo
374.922 432.672 li
374.922 442.629 li
364.961 442.629 li
cp
@
444.039 449.469 mo
454 449.469 li
454 459.43 li
444.039 459.43 li
cp
@
523.238 448.871 mo
533.199 448.871 li
533.199 458.828 li
523.238 458.828 li
cp
@
602.441 453.551 mo
612.398 453.551 li
612.398 463.512 li
602.441 463.512 li
cp
@
681.52 457.031 mo
691.481 457.031 li
691.481 466.988 li
681.52 466.988 li
cp
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
53.398 65.641 mo
132.48 260.039 li
211.68 376.922 li
290.879 419.762 li
369.961 436.922 li
449.16 446.762 li
528.359 453.719 li
607.441 458.398 li
686.641 462 li
0 .993988 1 0 cmyk
@
grestore
58.359 70.512 mo
48.281 60.43 li
48.281 70.512 mo
58.359 60.43 li
0 .993988 1 0 cmyk
@
137.559 265.031 mo
127.48 254.949 li
127.48 265.031 mo
137.559 254.949 li
@
216.641 381.789 mo
206.559 371.711 li
206.559 381.789 mo
216.641 371.711 li
@
295.84 424.75 mo
285.762 414.672 li
285.762 424.75 mo
295.84 414.672 li
@
375.039 441.91 mo
364.961 431.828 li
364.961 441.91 mo
375.039 431.828 li
@
454.121 451.75 mo
444.039 441.672 li
444.039 451.75 mo
454.121 441.672 li
@
533.32 458.711 mo
523.238 448.629 li
523.238 458.711 mo
533.32 448.629 li
@
612.52 463.391 mo
602.441 453.309 li
602.441 463.391 mo
612.52 453.309 li
@
691.602 466.871 mo
681.52 456.789 li
681.52 466.871 mo
691.602 456.789 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
53.398 97.801 mo
132.48 257.762 li
211.68 365.281 li
290.879 422.879 li
369.961 436.922 li
449.16 447.121 li
528.359 453.719 li
607.441 458.52 li
686.641 462 li
@
grestore
48.281 92.59 mo
58.238 92.59 li
58.238 102.551 li
48.281 102.551 li
cp
@
127.48 252.551 mo
137.441 252.551 li
137.441 262.512 li
127.48 262.512 li
cp
@
206.559 360.07 mo
216.52 360.07 li
216.52 370.031 li
206.559 370.031 li
cp
@
285.762 417.789 mo
295.719 417.789 li
295.719 427.75 li
285.762 427.75 li
cp
@
364.961 431.828 mo
374.922 431.828 li
374.922 441.789 li
364.961 441.789 li
cp
@
444.039 441.91 mo
454 441.91 li
454 451.871 li
444.039 451.871 li
cp
@
523.238 448.629 mo
533.199 448.629 li
533.199 458.59 li
523.238 458.59 li
cp
@
602.441 453.43 mo
612.398 453.43 li
612.398 463.391 li
602.441 463.391 li
cp
@
681.52 456.91 mo
691.481 456.91 li
691.481 466.871 li
681.52 466.871 li
cp
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 60.359 mo
132.48 271.68 li
211.68 373.922 li
290.879 422.039 li
369.961 429.602 li
449.16 437.641 li
528.359 446.641 li
607.441 453 li
686.641 456.961 li
.62829 .284672 0 0 cmyk
@
grestore
58.359 65.352 mo
48.281 55.27 li
48.281 65.352 mo
58.359 55.27 li
.62829 .284672 0 0 cmyk
@
137.559 276.672 mo
127.48 266.59 li
127.48 276.672 mo
137.559 266.59 li
@
216.641 378.789 mo
206.559 368.711 li
206.559 378.789 mo
216.641 368.711 li
@
295.84 427.031 mo
285.762 416.949 li
285.762 427.031 mo
295.84 416.949 li
@
375.039 434.59 mo
364.961 424.512 li
364.961 434.59 mo
375.039 424.512 li
@
454.121 442.629 mo
444.039 432.551 li
444.039 442.629 mo
454.121 432.551 li
@
533.32 451.512 mo
523.238 441.43 li
523.238 451.512 mo
533.32 441.43 li
@
612.52 457.988 mo
602.441 447.91 li
602.441 457.988 mo
612.52 447.91 li
@
691.602 461.949 mo
681.52 451.871 li
681.52 461.949 mo
691.602 451.871 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 96.719 mo
132.48 244.801 li
211.68 371.16 li
290.879 410.398 li
369.961 439.922 li
449.16 437.52 li
528.359 446.762 li
607.441 453.238 li
686.641 456.48 li
@
grestore
[4 3 ] 0 dsh
48.281 91.629 mo
58.238 91.629 li
58.238 101.59 li
48.281 101.59 li
cp
@
127.48 239.59 mo
137.441 239.59 li
137.441 249.551 li
127.48 249.551 li
cp
@
206.559 365.949 mo
216.52 365.949 li
216.52 375.91 li
206.559 375.91 li
cp
@
285.762 405.309 mo
295.719 405.309 li
295.719 415.27 li
285.762 415.27 li
cp
@
364.961 434.711 mo
374.922 434.711 li
374.922 444.672 li
364.961 444.672 li
cp
@
444.039 432.309 mo
454 432.309 li
454 442.27 li
444.039 442.27 li
cp
@
523.238 441.672 mo
533.199 441.672 li
533.199 451.629 li
523.238 451.629 li
cp
@
602.441 448.148 mo
612.398 448.148 li
612.398 458.109 li
602.441 458.109 li
cp
@
681.52 451.391 mo
691.481 451.391 li
691.481 461.352 li
681.52 461.352 li
cp
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 65.398 mo
132.48 260.52 li
211.68 368.641 li
290.879 402.84 li
369.961 417.359 li
449.16 435.359 li
528.359 446.641 li
607.441 445.559 li
686.641 457.68 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
[] 0 dsh
58.359 70.391 mo
48.281 60.309 li
48.281 70.391 mo
58.359 60.309 li
.0321965 .622736 .922606 .000579843 cmyk
@
137.559 265.512 mo
127.48 255.43 li
127.48 265.512 mo
137.559 255.43 li
@
216.641 373.512 mo
206.559 363.43 li
206.559 373.512 mo
216.641 363.43 li
@
295.84 407.711 mo
285.762 397.629 li
285.762 407.711 mo
295.84 397.629 li
@
375.039 422.23 mo
364.961 412.148 li
364.961 422.23 mo
375.039 412.148 li
@
454.121 440.23 mo
444.039 430.148 li
444.039 440.23 mo
454.121 430.148 li
@
533.32 451.629 mo
523.238 441.551 li
523.238 451.629 mo
533.32 441.551 li
@
612.52 450.43 mo
602.441 440.352 li
602.441 450.43 mo
612.52 440.352 li
@
691.602 462.551 mo
681.52 452.469 li
681.52 462.551 mo
691.602 452.469 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 98.16 mo
132.48 245.039 li
211.68 348.961 li
290.879 365.762 li
369.961 419.879 li
449.16 434.398 li
528.359 438.121 li
607.441 446.281 li
686.641 452.641 li
@
grestore
48.281 92.949 mo
58.238 92.949 li
58.238 102.91 li
48.281 102.91 li
cp
@
127.48 239.828 mo
137.441 239.828 li
137.441 249.789 li
127.48 249.789 li
cp
@
206.559 343.75 mo
216.52 343.75 li
216.52 353.711 li
206.559 353.711 li
cp
@
285.762 360.672 mo
295.719 360.672 li
295.719 370.629 li
285.762 370.629 li
cp
@
364.961 414.672 mo
374.922 414.672 li
374.922 424.629 li
364.961 424.629 li
cp
@
444.039 429.191 mo
454 429.191 li
454 439.148 li
444.039 439.148 li
cp
@
523.238 433.031 mo
533.199 433.031 li
533.199 442.988 li
523.238 442.988 li
cp
@
602.441 441.191 mo
612.398 441.191 li
612.398 451.148 li
602.441 451.148 li
cp
@
681.52 447.43 mo
691.481 447.43 li
691.481 457.391 li
681.52 457.391 li
cp
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 65.16 mo
132.48 272.281 li
211.68 374.641 li
290.879 394.801 li
369.961 412.078 li
449.16 424.559 li
528.359 435.48 li
607.441 438.238 li
686.641 446.398 li
.467353 0 .87747 0 cmyk
@
grestore
58.359 70.031 mo
48.281 59.949 li
48.281 70.031 mo
58.359 59.949 li
.621118 .109194 .980743 .0040589 cmyk
@
137.559 277.27 mo
127.48 267.191 li
127.48 277.27 mo
137.559 267.191 li
@
216.641 379.512 mo
206.559 369.43 li
206.559 379.512 mo
216.641 369.43 li
@
295.84 399.672 mo
285.762 389.59 li
285.762 399.672 mo
295.84 389.59 li
@
375.039 416.949 mo
364.961 406.871 li
364.961 416.949 mo
375.039 406.871 li
@
454.121 429.551 mo
444.039 419.469 li
444.039 429.551 mo
454.121 419.469 li
@
533.32 440.352 mo
523.238 430.27 li
523.238 440.352 mo
533.32 430.27 li
@
612.52 443.23 mo
602.441 433.148 li
602.441 443.23 mo
612.52 433.148 li
@
691.602 451.391 mo
681.52 441.309 li
681.52 451.391 mo
691.602 441.309 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 97.078 mo
132.48 256.68 li
211.68 371.039 li
290.879 371.52 li
369.961 407.52 li
449.16 426.84 li
528.359 434.281 li
607.441 437.16 li
686.641 445.801 li
.467353 0 .87747 0 cmyk
@
grestore
48.281 91.871 mo
58.238 91.871 li
58.238 101.828 li
48.281 101.828 li
cp
@
127.48 251.59 mo
137.441 251.59 li
137.441 261.551 li
127.48 261.551 li
cp
@
206.559 365.949 mo
216.52 365.949 li
216.52 375.91 li
206.559 375.91 li
cp
@
285.762 366.309 mo
295.719 366.309 li
295.719 376.27 li
285.762 376.27 li
cp
@
364.961 402.309 mo
374.922 402.309 li
374.922 412.27 li
364.961 412.27 li
cp
@
444.039 421.629 mo
454 421.629 li
454 431.59 li
444.039 431.59 li
cp
@
523.238 429.07 mo
533.199 429.07 li
533.199 439.031 li
523.238 439.031 li
cp
@
602.441 431.949 mo
612.398 431.949 li
612.398 441.91 li
602.441 441.91 li
cp
@
681.52 440.711 mo
691.481 440.711 li
691.481 450.672 li
681.52 450.672 li
cp
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 63.359 mo
132.48 272.398 li
211.68 374.762 li
290.879 375.48 li
369.961 383.641 li
449.16 416.879 li
528.359 432 li
607.441 435.84 li
686.641 446.281 li
0 .993988 1 0 cmyk
@
grestore
58.359 68.23 mo
48.281 58.148 li
48.281 68.23 mo
58.359 58.148 li
0 .993988 1 0 cmyk
@
137.559 277.391 mo
127.48 267.309 li
127.48 277.391 mo
137.559 267.309 li
@
216.641 379.75 mo
206.559 369.672 li
206.559 379.75 mo
216.641 369.672 li
@
295.84 380.469 mo
285.762 370.391 li
285.762 380.469 mo
295.84 370.391 li
@
375.039 388.629 mo
364.961 378.551 li
364.961 388.629 mo
375.039 378.551 li
@
454.121 421.75 mo
444.039 411.672 li
444.039 421.75 mo
454.121 411.672 li
@
533.32 436.871 mo
523.238 426.789 li
523.238 436.871 mo
533.32 426.789 li
@
612.52 440.828 mo
602.441 430.75 li
602.441 440.828 mo
612.52 430.75 li
@
691.602 451.27 mo
681.52 441.191 li
681.52 451.27 mo
691.602 441.191 li
@
gsave
53.281 32.281 mo
687.359 32.281 li
687.359 487.32 li
53.281 487.32 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.398 96.84 mo
132.48 256.441 li
211.68 371.281 li
290.879 371.52 li
369.961 373.441 li
449.16 417.602 li
528.359 430.801 li
607.441 436.078 li
686.641 437.039 li
@
grestore
48.281 91.629 mo
58.238 91.629 li
58.238 101.59 li
48.281 101.59 li
cp
@
127.48 251.23 mo
137.441 251.23 li
137.441 261.191 li
127.48 261.191 li
cp
@
206.559 366.07 mo
216.52 366.07 li
216.52 376.031 li
206.559 376.031 li
cp
@
285.762 366.309 mo
295.719 366.309 li
295.719 376.27 li
285.762 376.27 li
cp
@
364.961 368.352 mo
374.922 368.352 li
374.922 378.309 li
364.961 378.309 li
cp
@
444.039 412.512 mo
454 412.512 li
454 422.469 li
444.039 422.469 li
cp
@
523.238 425.59 mo
533.199 425.59 li
533.199 435.551 li
523.238 435.551 li
cp
@
602.441 430.988 mo
612.398 430.988 li
612.398 440.949 li
602.441 440.949 li
cp
@
681.52 431.828 mo
691.481 431.828 li
691.481 441.789 li
681.52 441.789 li
cp
@
33.309 477.328 mo
40.407 477.328 li
40.407 494.418 li
33.309 494.418 li
cp
0 0 0 0 cmyk
ef
39.953 486.289 mo
39.949 486.973 39.895 487.598 39.789 488.16 cv
39.68 488.727 39.504 489.211 39.254 489.613 cv
39.004 490.02 38.676 490.332 38.277 490.551 cv
37.871 490.773 37.375 490.883 36.789 490.883 cv
36.227 490.883 35.758 490.785 35.375 490.586 cv
34.992 490.387 34.684 490.094 34.449 489.707 cv
34.215 489.32 34.047 488.844 33.953 488.277 cv
33.852 487.715 33.805 487.066 33.809 486.332 cv
33.805 485.656 33.859 485.035 33.973 484.469 cv
34.078 483.902 34.258 483.418 34.508 483.012 cv
34.754 482.609 35.078 482.293 35.48 482.07 cv
35.883 481.852 36.375 481.742 36.965 481.738 cv
37.523 481.742 37.996 481.844 38.383 482.039 cv
38.762 482.242 39.07 482.535 39.305 482.918 cv
39.535 483.309 39.703 483.781 39.805 484.344 cv
39.902 484.91 39.949 485.559 39.953 486.289 cv
cp
38.746 486.371 mo
38.742 485.93 38.727 485.535 38.695 485.18 cv
38.66 484.828 38.613 484.516 38.555 484.246 cv
38.488 483.977 38.406 483.742 38.313 483.547 cv
38.211 483.352 38.094 483.191 37.961 483.066 cv
37.82 482.941 37.664 482.852 37.488 482.793 cv
37.313 482.738 37.117 482.711 36.898 482.707 cv
36.508 482.711 36.191 482.801 35.949 482.98 cv
35.707 483.164 35.516 483.414 35.375 483.734 cv
35.234 484.055 35.137 484.434 35.09 484.863 cv
35.035 485.297 35.012 485.758 35.016 486.25 cv
35.012 486.918 35.047 487.484 35.117 487.945 cv
35.188 488.414 35.297 488.793 35.445 489.082 cv
35.594 489.379 35.781 489.59 36.016 489.719 cv
36.242 489.855 36.523 489.922 36.855 489.918 cv
37.109 489.922 37.336 489.879 37.531 489.793 cv
37.727 489.711 37.891 489.594 38.031 489.437 cv
38.168 489.285 38.285 489.102 38.379 488.887 cv
38.469 488.672 38.543 488.434 38.602 488.172 cv
38.652 487.914 38.691 487.633 38.715 487.324 cv
38.734 487.023 38.742 486.703 38.746 486.371 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
33.309 431.891 mo
40.407 431.891 li
40.407 448.981 li
33.309 448.981 li
cp
0 0 0 0 cmyk
ef
39.605 442.449 mo
39.605 442.926 39.523 443.348 39.363 443.719 cv
39.203 444.09 38.977 444.402 38.688 444.656 cv
38.391 444.91 38.043 445.105 37.641 445.234 cv
37.234 445.367 36.785 445.43 36.293 445.43 cv
36.016 445.43 35.754 445.41 35.512 445.371 cv
35.262 445.332 35.043 445.285 34.855 445.23 cv
34.66 445.176 34.504 445.121 34.379 445.062 cv
34.254 445.012 34.176 444.969 34.145 444.934 cv
34.109 444.902 34.086 444.871 34.074 444.844 cv
34.059 444.816 34.043 444.785 34.035 444.742 cv
34.02 444.707 34.012 444.656 34.012 444.594 cv
34.004 444.535 34.004 444.465 34.004 444.383 cv
34.004 444.309 34.008 444.238 34.016 444.176 cv
34.023 444.113 34.035 444.062 34.055 444.023 cv
34.07 443.984 34.09 443.957 34.117 443.937 cv
34.141 443.922 34.172 443.914 34.203 443.91 cv
34.25 443.914 34.32 443.941 34.414 443.996 cv
34.508 444.055 34.637 444.117 34.801 444.184 cv
34.965 444.25 35.164 444.312 35.406 444.371 cv
35.641 444.43 35.926 444.457 36.262 444.457 cv
36.563 444.457 36.844 444.422 37.102 444.348 cv
37.355 444.277 37.578 444.164 37.766 444.008 cv
37.949 443.855 38.094 443.66 38.199 443.422 cv
38.305 443.187 38.355 442.898 38.359 442.559 cv
38.355 442.277 38.313 442.027 38.223 441.809 cv
38.133 441.59 37.996 441.41 37.813 441.266 cv
37.625 441.125 37.391 441.02 37.109 440.945 cv
36.824 440.875 36.484 440.836 36.098 440.836 cv
35.813 440.836 35.574 440.852 35.375 440.879 cv
35.172 440.91 34.984 440.926 34.813 440.922 cv
34.684 440.926 34.59 440.895 34.539 440.832 cv
34.48 440.773 34.453 440.66 34.457 440.488 cv
34.457 436.875 li
34.453 436.727 34.488 436.617 34.563 436.539 cv
34.629 436.469 34.73 436.43 34.867 436.43 cv
38.797 436.43 li
38.832 436.43 38.867 436.441 38.902 436.461 cv
38.934 436.484 38.961 436.516 38.988 436.555 cv
39.008 436.598 39.023 436.648 39.039 436.711 cv
39.047 436.777 39.055 436.855 39.059 436.937 cv
39.055 437.105 39.031 437.23 38.992 437.32 cv
38.945 437.414 38.887 437.461 38.809 437.457 cv
35.637 437.457 li
35.637 439.945 li
35.789 439.926 35.945 439.914 36.109 439.906 cv
36.266 439.902 36.453 439.898 36.668 439.898 cv
37.152 439.898 37.578 439.961 37.945 440.082 cv
38.309 440.203 38.613 440.375 38.863 440.594 cv
39.105 440.82 39.293 441.086 39.418 441.398 cv
39.543 441.715 39.605 442.066 39.605 442.449 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
26.215 386.449 mo
40.406 386.449 li
40.406 403.539 li
26.215 403.539 li
cp
0 0 0 0 cmyk
ef
32.586 399.375 mo
32.582 399.465 32.574 399.535 32.563 399.594 cv
32.547 399.656 32.527 399.707 32.508 399.738 cv
32.484 399.777 32.461 399.801 32.43 399.816 cv
32.398 399.832 32.367 399.84 32.34 399.84 cv
27.703 399.84 li
27.668 399.84 27.641 399.832 27.613 399.816 cv
27.586 399.801 27.559 399.777 27.535 399.738 cv
27.508 399.707 27.488 399.656 27.477 399.594 cv
27.461 399.535 27.453 399.465 27.457 399.375 cv
27.453 399.297 27.461 399.223 27.477 399.16 cv
27.488 399.102 27.504 399.055 27.527 399.016 cv
27.543 398.98 27.57 398.949 27.602 398.926 cv
27.633 398.906 27.664 398.898 27.703 398.895 cv
29.555 398.895 li
29.555 392.148 li
27.84 393.168 li
27.75 393.219 27.68 393.246 27.633 393.254 cv
27.578 393.262 27.535 393.254 27.504 393.223 cv
27.469 393.195 27.449 393.145 27.438 393.074 cv
27.426 393.008 27.418 392.922 27.422 392.812 cv
27.418 392.738 27.422 392.672 27.434 392.613 cv
27.438 392.562 27.449 392.516 27.465 392.477 cv
27.477 392.441 27.496 392.41 27.52 392.383 cv
27.543 392.355 27.574 392.328 27.621 392.301 cv
29.664 390.988 li
29.68 390.977 29.699 390.965 29.73 390.957 cv
29.754 390.949 29.789 390.941 29.836 390.93 cv
29.875 390.922 29.926 390.914 29.98 390.91 cv
30.035 390.91 30.102 390.91 30.188 390.906 cv
30.293 390.91 30.387 390.914 30.461 390.922 cv
30.531 390.93 30.586 390.945 30.633 390.961 cv
30.672 390.98 30.699 391 30.715 391.023 cv
30.723 391.051 30.73 391.074 30.734 391.098 cv
30.734 398.895 li
32.34 398.895 li
32.375 398.898 32.41 398.906 32.441 398.926 cv
32.473 398.949 32.496 398.98 32.52 399.016 cv
32.535 399.055 32.551 399.102 32.566 399.16 cv
32.574 399.223 32.582 399.297 32.586 399.375 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.941 395.383 mo
39.938 396.066 39.887 396.687 39.781 397.25 cv
39.672 397.812 39.492 398.297 39.246 398.699 cv
38.992 399.105 38.664 399.418 38.266 399.637 cv
37.859 399.859 37.367 399.969 36.781 399.969 cv
36.223 399.969 35.75 399.871 35.371 399.672 cv
34.988 399.477 34.684 399.184 34.449 398.797 cv
34.215 398.41 34.047 397.937 33.953 397.371 cv
33.852 396.809 33.805 396.16 33.805 395.426 cv
33.805 394.754 33.859 394.133 33.969 393.566 cv
34.078 393.004 34.254 392.52 34.504 392.113 cv
34.746 391.711 35.07 391.398 35.477 391.172 cv
35.875 390.953 36.371 390.84 36.961 390.84 cv
37.52 390.84 37.992 390.941 38.375 391.137 cv
38.758 391.34 39.063 391.633 39.297 392.016 cv
39.527 392.406 39.695 392.879 39.793 393.441 cv
39.891 394.004 39.938 394.652 39.941 395.383 cv
cp
38.734 395.465 mo
38.73 395.023 38.715 394.625 38.688 394.273 cv
38.652 393.922 38.605 393.613 38.547 393.344 cv
38.48 393.074 38.402 392.844 38.305 392.648 cv
38.207 392.457 38.09 392.297 37.953 392.168 cv
37.813 392.043 37.652 391.949 37.48 391.891 cv
37.301 391.836 37.105 391.809 36.891 391.805 cv
36.5 391.809 36.184 391.898 35.945 392.082 cv
35.699 392.266 35.508 392.52 35.371 392.836 cv
35.23 393.156 35.137 393.527 35.086 393.957 cv
35.035 394.387 35.012 394.852 35.012 395.344 cv
35.012 396.008 35.043 396.57 35.113 397.031 cv
35.18 397.5 35.289 397.879 35.441 398.168 cv
35.586 398.465 35.777 398.676 36.008 398.805 cv
36.238 398.941 36.52 399.008 36.852 399.004 cv
37.105 399.008 37.328 398.969 37.523 398.883 cv
37.715 398.805 37.883 398.684 38.023 398.527 cv
38.164 398.375 38.277 398.191 38.371 397.977 cv
38.457 397.762 38.531 397.523 38.59 397.262 cv
38.641 397.004 38.68 396.723 38.703 396.418 cv
38.723 396.113 38.73 395.797 38.734 395.465 cv
cp
f
26.215 341.012 mo
40.406 341.012 li
40.406 358.102 li
26.215 358.102 li
cp
0 0 0 0 cmyk
ef
32.586 353.945 mo
32.582 354.035 32.574 354.105 32.563 354.164 cv
32.547 354.227 32.527 354.277 32.508 354.309 cv
32.484 354.348 32.461 354.371 32.43 354.387 cv
32.398 354.402 32.367 354.41 32.34 354.41 cv
27.703 354.41 li
27.668 354.41 27.641 354.402 27.613 354.387 cv
27.586 354.371 27.559 354.348 27.535 354.309 cv
27.508 354.277 27.488 354.227 27.477 354.164 cv
27.461 354.105 27.453 354.035 27.457 353.945 cv
27.453 353.867 27.461 353.793 27.477 353.73 cv
27.488 353.672 27.504 353.625 27.527 353.586 cv
27.543 353.551 27.57 353.52 27.602 353.496 cv
27.633 353.477 27.664 353.469 27.703 353.465 cv
29.555 353.465 li
29.555 346.719 li
27.84 347.738 li
27.75 347.789 27.68 347.816 27.633 347.824 cv
27.578 347.832 27.535 347.824 27.504 347.793 cv
27.469 347.766 27.449 347.715 27.438 347.645 cv
27.426 347.578 27.418 347.492 27.422 347.383 cv
27.418 347.309 27.422 347.242 27.434 347.184 cv
27.438 347.133 27.449 347.086 27.465 347.047 cv
27.477 347.012 27.496 346.98 27.52 346.953 cv
27.543 346.926 27.574 346.898 27.621 346.871 cv
29.664 345.559 li
29.68 345.547 29.699 345.535 29.73 345.527 cv
29.754 345.52 29.789 345.512 29.836 345.5 cv
29.875 345.492 29.926 345.484 29.98 345.48 cv
30.035 345.48 30.102 345.48 30.188 345.477 cv
30.293 345.48 30.387 345.484 30.461 345.492 cv
30.531 345.5 30.586 345.516 30.633 345.531 cv
30.672 345.551 30.699 345.57 30.715 345.594 cv
30.723 345.621 30.73 345.645 30.734 345.668 cv
30.734 353.465 li
32.34 353.465 li
32.375 353.469 32.41 353.477 32.441 353.496 cv
32.473 353.52 32.496 353.551 32.52 353.586 cv
32.535 353.625 32.551 353.672 32.566 353.73 cv
32.574 353.793 32.582 353.867 32.586 353.945 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.605 351.559 mo
39.605 352.035 39.523 352.457 39.363 352.828 cv
39.203 353.199 38.977 353.512 38.688 353.766 cv
38.391 354.02 38.043 354.215 37.641 354.344 cv
37.234 354.477 36.785 354.539 36.293 354.539 cv
36.016 354.539 35.754 354.52 35.512 354.48 cv
35.262 354.441 35.043 354.395 34.855 354.34 cv
34.66 354.285 34.504 354.23 34.379 354.172 cv
34.254 354.121 34.176 354.078 34.145 354.043 cv
34.109 354.012 34.086 353.98 34.074 353.953 cv
34.059 353.926 34.043 353.895 34.035 353.852 cv
34.02 353.816 34.012 353.766 34.012 353.703 cv
34.004 353.645 34.004 353.574 34.004 353.492 cv
34.004 353.418 34.008 353.348 34.016 353.285 cv
34.023 353.223 34.035 353.172 34.055 353.133 cv
34.07 353.094 34.09 353.066 34.117 353.047 cv
34.141 353.031 34.172 353.023 34.203 353.02 cv
34.25 353.023 34.32 353.051 34.414 353.105 cv
34.508 353.164 34.637 353.227 34.801 353.293 cv
34.965 353.359 35.164 353.422 35.406 353.48 cv
35.641 353.539 35.926 353.566 36.262 353.566 cv
36.563 353.566 36.844 353.531 37.102 353.457 cv
37.355 353.387 37.578 353.273 37.766 353.117 cv
37.949 352.965 38.094 352.77 38.199 352.531 cv
38.305 352.297 38.355 352.008 38.359 351.668 cv
38.355 351.387 38.313 351.137 38.223 350.918 cv
38.133 350.699 37.996 350.52 37.813 350.375 cv
37.625 350.234 37.391 350.129 37.109 350.055 cv
36.824 349.984 36.484 349.945 36.098 349.945 cv
35.813 349.945 35.574 349.961 35.375 349.988 cv
35.172 350.02 34.984 350.035 34.813 350.031 cv
34.684 350.035 34.59 350.004 34.539 349.941 cv
34.48 349.883 34.453 349.77 34.457 349.598 cv
34.457 345.984 li
34.453 345.836 34.488 345.727 34.563 345.648 cv
34.629 345.578 34.73 345.539 34.867 345.539 cv
38.797 345.539 li
38.832 345.539 38.867 345.551 38.902 345.57 cv
38.934 345.594 38.961 345.625 38.988 345.664 cv
39.008 345.707 39.023 345.758 39.039 345.82 cv
39.047 345.887 39.055 345.965 39.059 346.047 cv
39.055 346.215 39.031 346.34 38.992 346.43 cv
38.945 346.523 38.887 346.57 38.809 346.566 cv
35.637 346.566 li
35.637 349.055 li
35.789 349.035 35.945 349.023 36.109 349.016 cv
36.266 349.012 36.453 349.008 36.668 349.008 cv
37.152 349.008 37.578 349.07 37.945 349.191 cv
38.309 349.312 38.613 349.484 38.863 349.703 cv
39.105 349.93 39.293 350.195 39.418 350.508 cv
39.543 350.824 39.605 351.176 39.605 351.559 cv
cp
f
26.215 295.57 mo
40.406 295.57 li
40.406 312.66 li
26.215 312.66 li
cp
0 0 0 0 cmyk
ef
32.566 308.441 mo
32.563 308.527 32.559 308.602 32.547 308.664 cv
32.535 308.73 32.52 308.785 32.5 308.824 cv
32.477 308.871 32.449 308.902 32.418 308.918 cv
32.383 308.941 32.344 308.949 32.305 308.949 cv
27.402 308.949 li
27.34 308.949 27.281 308.941 27.234 308.926 cv
27.184 308.91 27.145 308.887 27.109 308.848 cv
27.074 308.816 27.047 308.762 27.035 308.691 cv
27.016 308.621 27.008 308.535 27.012 308.434 cv
27.008 308.344 27.012 308.266 27.02 308.195 cv
27.023 308.129 27.039 308.07 27.066 308.016 cv
27.09 307.965 27.121 307.91 27.156 307.855 cv
27.191 307.805 27.234 307.75 27.293 307.687 cv
29.066 305.863 li
29.477 305.445 29.805 305.07 30.055 304.734 cv
30.301 304.406 30.492 304.102 30.625 303.824 cv
30.758 303.551 30.844 303.301 30.891 303.074 cv
30.93 302.852 30.953 302.641 30.953 302.445 cv
30.953 302.25 30.918 302.066 30.852 301.887 cv
30.785 301.715 30.691 301.559 30.566 301.422 cv
30.441 301.293 30.285 301.187 30.098 301.105 cv
29.91 301.031 29.691 300.992 29.445 300.988 cv
29.156 300.992 28.898 301.031 28.672 301.105 cv
28.441 301.187 28.242 301.273 28.07 301.359 cv
27.898 301.453 27.754 301.535 27.637 301.613 cv
27.52 301.691 27.434 301.73 27.383 301.73 cv
27.348 301.73 27.316 301.723 27.293 301.703 cv
27.262 301.687 27.242 301.656 27.227 301.613 cv
27.211 301.574 27.195 301.52 27.188 301.449 cv
27.176 301.383 27.172 301.301 27.176 301.203 cv
27.172 301.137 27.176 301.078 27.184 301.027 cv
27.188 300.977 27.195 300.934 27.207 300.895 cv
27.215 300.859 27.23 300.824 27.25 300.793 cv
27.27 300.762 27.305 300.723 27.363 300.672 cv
27.414 300.625 27.508 300.559 27.645 300.477 cv
27.777 300.395 27.949 300.316 28.152 300.234 cv
28.355 300.156 28.578 300.086 28.824 300.031 cv
29.066 299.977 29.324 299.949 29.598 299.949 cv
30.023 299.949 30.398 300.012 30.723 300.133 cv
31.043 300.254 31.309 300.418 31.523 300.629 cv
31.734 300.84 31.895 301.086 32 301.359 cv
32.105 301.641 32.16 301.937 32.16 302.25 cv
32.16 302.539 32.133 302.82 32.082 303.098 cv
32.031 303.383 31.926 303.687 31.766 304.012 cv
31.602 304.34 31.367 304.703 31.063 305.102 cv
30.754 305.504 30.348 305.965 29.844 306.48 cv
28.438 307.949 li
32.297 307.949 li
32.328 307.953 32.363 307.965 32.402 307.98 cv
32.434 308.004 32.465 308.035 32.492 308.074 cv
32.516 308.117 32.535 308.168 32.547 308.227 cv
32.559 308.293 32.563 308.363 32.566 308.441 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.941 304.492 mo
39.938 305.176 39.887 305.797 39.781 306.359 cv
39.672 306.922 39.492 307.406 39.246 307.809 cv
38.992 308.215 38.664 308.527 38.266 308.746 cv
37.859 308.969 37.367 309.078 36.781 309.078 cv
36.223 309.078 35.75 308.98 35.371 308.781 cv
34.988 308.586 34.684 308.293 34.449 307.906 cv
34.215 307.52 34.047 307.047 33.953 306.48 cv
33.852 305.918 33.805 305.27 33.805 304.535 cv
33.805 303.863 33.859 303.242 33.969 302.676 cv
34.078 302.113 34.254 301.629 34.504 301.223 cv
34.746 300.82 35.07 300.508 35.477 300.281 cv
35.875 300.062 36.371 299.949 36.961 299.949 cv
37.52 299.949 37.992 300.051 38.375 300.246 cv
38.758 300.449 39.063 300.742 39.297 301.125 cv
39.527 301.516 39.695 301.988 39.793 302.551 cv
39.891 303.113 39.938 303.762 39.941 304.492 cv
cp
38.734 304.574 mo
38.73 304.133 38.715 303.734 38.688 303.383 cv
38.652 303.031 38.605 302.723 38.547 302.453 cv
38.48 302.184 38.402 301.953 38.305 301.758 cv
38.207 301.566 38.09 301.406 37.953 301.277 cv
37.813 301.152 37.652 301.059 37.48 301 cv
37.301 300.945 37.105 300.918 36.891 300.914 cv
36.5 300.918 36.184 301.008 35.945 301.191 cv
35.699 301.375 35.508 301.629 35.371 301.945 cv
35.23 302.266 35.137 302.637 35.086 303.066 cv
35.035 303.496 35.012 303.961 35.012 304.453 cv
35.012 305.117 35.043 305.68 35.113 306.141 cv
35.18 306.609 35.289 306.988 35.441 307.277 cv
35.586 307.574 35.777 307.785 36.008 307.914 cv
36.238 308.051 36.52 308.117 36.852 308.113 cv
37.105 308.117 37.328 308.078 37.523 307.992 cv
37.715 307.914 37.883 307.793 38.023 307.637 cv
38.164 307.484 38.277 307.301 38.371 307.086 cv
38.457 306.871 38.531 306.633 38.59 306.371 cv
38.641 306.113 38.68 305.832 38.703 305.527 cv
38.723 305.223 38.73 304.906 38.734 304.574 cv
cp
f
26.215 250.129 mo
40.406 250.129 li
40.406 267.219 li
26.215 267.219 li
cp
0 0 0 0 cmyk
ef
32.566 262.992 mo
32.563 263.078 32.559 263.152 32.547 263.215 cv
32.535 263.281 32.52 263.336 32.5 263.375 cv
32.477 263.422 32.449 263.453 32.418 263.469 cv
32.383 263.492 32.344 263.5 32.305 263.5 cv
27.402 263.5 li
27.34 263.5 27.281 263.492 27.234 263.477 cv
27.184 263.461 27.145 263.437 27.109 263.398 cv
27.074 263.367 27.047 263.312 27.035 263.242 cv
27.016 263.172 27.008 263.086 27.012 262.984 cv
27.008 262.895 27.012 262.816 27.02 262.746 cv
27.023 262.68 27.039 262.621 27.066 262.566 cv
27.09 262.516 27.121 262.461 27.156 262.406 cv
27.191 262.355 27.234 262.301 27.293 262.238 cv
29.066 260.414 li
29.477 259.996 29.805 259.621 30.055 259.285 cv
30.301 258.957 30.492 258.652 30.625 258.375 cv
30.758 258.102 30.844 257.852 30.891 257.625 cv
30.93 257.402 30.953 257.191 30.953 256.996 cv
30.953 256.801 30.918 256.617 30.852 256.437 cv
30.785 256.266 30.691 256.109 30.566 255.973 cv
30.441 255.844 30.285 255.738 30.098 255.656 cv
29.91 255.582 29.691 255.543 29.445 255.539 cv
29.156 255.543 28.898 255.582 28.672 255.656 cv
28.441 255.738 28.242 255.824 28.07 255.91 cv
27.898 256.004 27.754 256.086 27.637 256.164 cv
27.52 256.242 27.434 256.281 27.383 256.281 cv
27.348 256.281 27.316 256.273 27.293 256.254 cv
27.262 256.238 27.242 256.207 27.227 256.164 cv
27.211 256.125 27.195 256.07 27.188 256 cv
27.176 255.934 27.172 255.852 27.176 255.754 cv
27.172 255.687 27.176 255.629 27.184 255.578 cv
27.188 255.527 27.195 255.484 27.207 255.445 cv
27.215 255.41 27.23 255.375 27.25 255.344 cv
27.27 255.312 27.305 255.273 27.363 255.223 cv
27.414 255.176 27.508 255.109 27.645 255.027 cv
27.777 254.945 27.949 254.867 28.152 254.785 cv
28.355 254.707 28.578 254.637 28.824 254.582 cv
29.066 254.527 29.324 254.5 29.598 254.5 cv
30.023 254.5 30.398 254.562 30.723 254.684 cv
31.043 254.805 31.309 254.969 31.523 255.18 cv
31.734 255.391 31.895 255.637 32 255.91 cv
32.105 256.191 32.16 256.488 32.16 256.801 cv
32.16 257.09 32.133 257.371 32.082 257.648 cv
32.031 257.934 31.926 258.238 31.766 258.562 cv
31.602 258.891 31.367 259.254 31.063 259.652 cv
30.754 260.055 30.348 260.516 29.844 261.031 cv
28.438 262.5 li
32.297 262.5 li
32.328 262.504 32.363 262.516 32.402 262.531 cv
32.434 262.555 32.465 262.586 32.492 262.625 cv
32.516 262.668 32.535 262.719 32.547 262.777 cv
32.559 262.844 32.563 262.914 32.566 262.992 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.605 260.648 mo
39.605 261.125 39.523 261.547 39.363 261.918 cv
39.203 262.289 38.977 262.602 38.688 262.855 cv
38.391 263.109 38.043 263.305 37.641 263.434 cv
37.234 263.566 36.785 263.629 36.293 263.629 cv
36.016 263.629 35.754 263.609 35.512 263.57 cv
35.262 263.531 35.043 263.484 34.855 263.43 cv
34.66 263.375 34.504 263.32 34.379 263.262 cv
34.254 263.211 34.176 263.168 34.145 263.133 cv
34.109 263.102 34.086 263.07 34.074 263.043 cv
34.059 263.016 34.043 262.984 34.035 262.941 cv
34.02 262.906 34.012 262.855 34.012 262.793 cv
34.004 262.734 34.004 262.664 34.004 262.582 cv
34.004 262.508 34.008 262.437 34.016 262.375 cv
34.023 262.312 34.035 262.262 34.055 262.223 cv
34.07 262.184 34.09 262.156 34.117 262.137 cv
34.141 262.121 34.172 262.113 34.203 262.109 cv
34.25 262.113 34.32 262.141 34.414 262.195 cv
34.508 262.254 34.637 262.316 34.801 262.383 cv
34.965 262.449 35.164 262.512 35.406 262.57 cv
35.641 262.629 35.926 262.656 36.262 262.656 cv
36.563 262.656 36.844 262.621 37.102 262.547 cv
37.355 262.477 37.578 262.363 37.766 262.207 cv
37.949 262.055 38.094 261.859 38.199 261.621 cv
38.305 261.387 38.355 261.098 38.359 260.758 cv
38.355 260.477 38.313 260.227 38.223 260.008 cv
38.133 259.789 37.996 259.609 37.813 259.465 cv
37.625 259.324 37.391 259.219 37.109 259.145 cv
36.824 259.074 36.484 259.035 36.098 259.035 cv
35.813 259.035 35.574 259.051 35.375 259.078 cv
35.172 259.109 34.984 259.125 34.813 259.121 cv
34.684 259.125 34.59 259.094 34.539 259.031 cv
34.48 258.973 34.453 258.859 34.457 258.687 cv
34.457 255.074 li
34.453 254.926 34.488 254.816 34.563 254.738 cv
34.629 254.668 34.73 254.629 34.867 254.629 cv
38.797 254.629 li
38.832 254.629 38.867 254.641 38.902 254.66 cv
38.934 254.684 38.961 254.715 38.988 254.754 cv
39.008 254.797 39.023 254.848 39.039 254.91 cv
39.047 254.977 39.055 255.055 39.059 255.137 cv
39.055 255.305 39.031 255.43 38.992 255.52 cv
38.945 255.613 38.887 255.66 38.809 255.656 cv
35.637 255.656 li
35.637 258.145 li
35.789 258.125 35.945 258.113 36.109 258.105 cv
36.266 258.102 36.453 258.098 36.668 258.098 cv
37.152 258.098 37.578 258.16 37.945 258.281 cv
38.309 258.402 38.613 258.574 38.863 258.793 cv
39.105 259.02 39.293 259.285 39.418 259.598 cv
39.543 259.914 39.605 260.266 39.605 260.648 cv
cp
f
26.215 204.699 mo
40.406 204.699 li
40.406 221.789 li
26.215 221.789 li
cp
0 0 0 0 cmyk
ef
32.496 215.523 mo
32.492 215.934 32.422 216.301 32.281 216.625 cv
32.137 216.953 31.934 217.234 31.672 217.465 cv
31.406 217.699 31.078 217.875 30.691 218 cv
30.301 218.125 29.863 218.187 29.379 218.187 cv
29.074 218.187 28.797 218.16 28.543 218.113 cv
28.281 218.066 28.051 218.016 27.855 217.945 cv
27.652 217.883 27.488 217.812 27.355 217.742 cv
27.223 217.672 27.137 217.621 27.105 217.586 cv
27.066 217.559 27.043 217.527 27.027 217.492 cv
27.008 217.461 26.988 217.422 26.977 217.375 cv
26.961 217.332 26.953 217.277 26.945 217.207 cv
26.938 217.145 26.934 217.062 26.938 216.961 cv
26.934 216.801 26.949 216.687 26.984 216.621 cv
27.016 216.559 27.063 216.523 27.125 216.523 cv
27.168 216.523 27.25 216.562 27.375 216.633 cv
27.496 216.711 27.656 216.789 27.852 216.871 cv
28.043 216.957 28.27 217.035 28.535 217.105 cv
28.793 217.18 29.086 217.215 29.406 217.215 cv
29.715 217.215 29.984 217.176 30.223 217.098 cv
30.453 217.02 30.652 216.91 30.813 216.77 cv
30.969 216.629 31.086 216.461 31.168 216.266 cv
31.246 216.07 31.285 215.859 31.289 215.633 cv
31.285 215.383 31.234 215.156 31.137 214.953 cv
31.031 214.754 30.883 214.582 30.691 214.434 cv
30.492 214.289 30.254 214.176 29.969 214.098 cv
29.684 214.02 29.359 213.98 28.996 213.98 cv
28.125 213.98 li
28.082 213.98 28.047 213.973 28.012 213.957 cv
27.977 213.941 27.945 213.914 27.922 213.875 cv
27.895 213.84 27.875 213.793 27.859 213.734 cv
27.844 213.676 27.836 213.598 27.836 213.5 cv
27.836 213.414 27.84 213.344 27.855 213.285 cv
27.863 213.23 27.883 213.184 27.914 213.148 cv
27.938 213.113 27.969 213.09 28 213.07 cv
28.031 213.059 28.066 213.051 28.109 213.047 cv
28.883 213.047 li
29.184 213.051 29.453 213.012 29.695 212.93 cv
29.93 212.855 30.133 212.742 30.305 212.594 cv
30.469 212.449 30.598 212.273 30.688 212.07 cv
30.777 211.867 30.824 211.641 30.824 211.387 cv
30.824 211.207 30.793 211.031 30.734 210.863 cv
30.672 210.699 30.582 210.555 30.465 210.43 cv
30.344 210.305 30.191 210.207 30.012 210.137 cv
29.824 210.066 29.613 210.031 29.371 210.031 cv
29.105 210.031 28.859 210.074 28.641 210.152 cv
28.414 210.234 28.219 210.32 28.047 210.41 cv
27.871 210.504 27.727 210.59 27.613 210.668 cv
27.5 210.75 27.418 210.789 27.375 210.785 cv
27.34 210.789 27.313 210.781 27.289 210.77 cv
27.262 210.758 27.242 210.734 27.227 210.699 cv
27.211 210.668 27.199 210.621 27.191 210.555 cv
27.184 210.496 27.18 210.414 27.184 210.312 cv
27.18 210.246 27.18 210.187 27.188 210.133 cv
27.188 210.082 27.199 210.035 27.215 209.992 cv
27.23 209.957 27.246 209.922 27.266 209.887 cv
27.281 209.859 27.313 209.82 27.355 209.773 cv
27.398 209.73 27.484 209.668 27.621 209.586 cv
27.75 209.504 27.914 209.426 28.109 209.344 cv
28.301 209.266 28.523 209.195 28.781 209.141 cv
29.031 209.086 29.305 209.059 29.602 209.059 cv
30.008 209.059 30.371 209.113 30.684 209.215 cv
30.996 209.324 31.254 209.473 31.465 209.66 cv
31.668 209.855 31.824 210.086 31.93 210.352 cv
32.031 210.621 32.082 210.914 32.086 211.238 cv
32.082 211.52 32.047 211.781 31.977 212.016 cv
31.902 212.258 31.793 212.469 31.652 212.652 cv
31.508 212.84 31.336 212.996 31.133 213.125 cv
30.926 213.258 30.688 213.352 30.418 213.398 cv
30.418 213.41 li
30.723 213.445 31.004 213.52 31.258 213.641 cv
31.512 213.762 31.73 213.914 31.914 214.098 cv
32.094 214.281 32.234 214.496 32.34 214.738 cv
32.441 214.984 32.492 215.246 32.496 215.523 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.941 213.602 mo
39.938 214.285 39.887 214.906 39.781 215.469 cv
39.672 216.031 39.492 216.516 39.246 216.918 cv
38.992 217.324 38.664 217.637 38.266 217.855 cv
37.859 218.078 37.367 218.187 36.781 218.187 cv
36.223 218.187 35.75 218.09 35.371 217.891 cv
34.988 217.695 34.684 217.402 34.449 217.016 cv
34.215 216.629 34.047 216.156 33.953 215.59 cv
33.852 215.027 33.805 214.379 33.805 213.645 cv
33.805 212.973 33.859 212.352 33.969 211.785 cv
34.078 211.223 34.254 210.738 34.504 210.332 cv
34.746 209.93 35.07 209.617 35.477 209.391 cv
35.875 209.172 36.371 209.059 36.961 209.059 cv
37.52 209.059 37.992 209.16 38.375 209.355 cv
38.758 209.559 39.063 209.852 39.297 210.234 cv
39.527 210.625 39.695 211.098 39.793 211.66 cv
39.891 212.223 39.938 212.871 39.941 213.602 cv
cp
38.734 213.684 mo
38.73 213.242 38.715 212.844 38.688 212.492 cv
38.652 212.141 38.605 211.832 38.547 211.562 cv
38.48 211.293 38.402 211.062 38.305 210.867 cv
38.207 210.676 38.09 210.516 37.953 210.387 cv
37.813 210.262 37.652 210.168 37.48 210.109 cv
37.301 210.055 37.105 210.027 36.891 210.023 cv
36.5 210.027 36.184 210.117 35.945 210.301 cv
35.699 210.484 35.508 210.738 35.371 211.055 cv
35.23 211.375 35.137 211.746 35.086 212.176 cv
35.035 212.605 35.012 213.07 35.012 213.562 cv
35.012 214.227 35.043 214.789 35.113 215.25 cv
35.18 215.719 35.289 216.098 35.441 216.387 cv
35.586 216.684 35.777 216.895 36.008 217.023 cv
36.238 217.16 36.52 217.227 36.852 217.223 cv
37.105 217.227 37.328 217.187 37.523 217.102 cv
37.715 217.023 37.883 216.902 38.023 216.746 cv
38.164 216.594 38.277 216.41 38.371 216.195 cv
38.457 215.98 38.531 215.742 38.59 215.48 cv
38.641 215.223 38.68 214.941 38.703 214.637 cv
38.723 214.332 38.73 214.016 38.734 213.684 cv
cp
f
26.215 159.262 mo
40.406 159.262 li
40.406 176.352 li
26.215 176.352 li
cp
0 0 0 0 cmyk
ef
32.496 170.074 mo
32.492 170.484 32.422 170.852 32.281 171.176 cv
32.137 171.504 31.934 171.785 31.672 172.016 cv
31.406 172.25 31.078 172.426 30.691 172.551 cv
30.301 172.676 29.863 172.738 29.379 172.738 cv
29.074 172.738 28.797 172.711 28.543 172.664 cv
28.281 172.617 28.051 172.566 27.855 172.496 cv
27.652 172.434 27.488 172.363 27.355 172.293 cv
27.223 172.223 27.137 172.172 27.105 172.137 cv
27.066 172.109 27.043 172.078 27.027 172.043 cv
27.008 172.012 26.988 171.973 26.977 171.926 cv
26.961 171.883 26.953 171.828 26.945 171.758 cv
26.938 171.695 26.934 171.613 26.938 171.512 cv
26.934 171.352 26.949 171.238 26.984 171.172 cv
27.016 171.109 27.063 171.074 27.125 171.074 cv
27.168 171.074 27.25 171.113 27.375 171.184 cv
27.496 171.262 27.656 171.34 27.852 171.422 cv
28.043 171.508 28.27 171.586 28.535 171.656 cv
28.793 171.73 29.086 171.766 29.406 171.766 cv
29.715 171.766 29.984 171.727 30.223 171.648 cv
30.453 171.57 30.652 171.461 30.813 171.32 cv
30.969 171.18 31.086 171.012 31.168 170.816 cv
31.246 170.621 31.285 170.41 31.289 170.184 cv
31.285 169.934 31.234 169.707 31.137 169.504 cv
31.031 169.305 30.883 169.133 30.691 168.984 cv
30.492 168.84 30.254 168.727 29.969 168.648 cv
29.684 168.57 29.359 168.531 28.996 168.531 cv
28.125 168.531 li
28.082 168.531 28.047 168.523 28.012 168.508 cv
27.977 168.492 27.945 168.465 27.922 168.426 cv
27.895 168.391 27.875 168.344 27.859 168.285 cv
27.844 168.227 27.836 168.148 27.836 168.051 cv
27.836 167.965 27.84 167.895 27.855 167.836 cv
27.863 167.781 27.883 167.734 27.914 167.699 cv
27.938 167.664 27.969 167.641 28 167.621 cv
28.031 167.609 28.066 167.602 28.109 167.598 cv
28.883 167.598 li
29.184 167.602 29.453 167.562 29.695 167.48 cv
29.93 167.406 30.133 167.293 30.305 167.145 cv
30.469 167 30.598 166.824 30.688 166.621 cv
30.777 166.418 30.824 166.191 30.824 165.937 cv
30.824 165.758 30.793 165.582 30.734 165.414 cv
30.672 165.25 30.582 165.105 30.465 164.98 cv
30.344 164.855 30.191 164.758 30.012 164.687 cv
29.824 164.617 29.613 164.582 29.371 164.582 cv
29.105 164.582 28.859 164.625 28.641 164.703 cv
28.414 164.785 28.219 164.871 28.047 164.961 cv
27.871 165.055 27.727 165.141 27.613 165.219 cv
27.5 165.301 27.418 165.34 27.375 165.336 cv
27.34 165.34 27.313 165.332 27.289 165.32 cv
27.262 165.309 27.242 165.285 27.227 165.25 cv
27.211 165.219 27.199 165.172 27.191 165.105 cv
27.184 165.047 27.18 164.965 27.184 164.863 cv
27.18 164.797 27.18 164.738 27.188 164.684 cv
27.188 164.633 27.199 164.586 27.215 164.543 cv
27.23 164.508 27.246 164.473 27.266 164.437 cv
27.281 164.41 27.313 164.371 27.355 164.324 cv
27.398 164.281 27.484 164.219 27.621 164.137 cv
27.75 164.055 27.914 163.977 28.109 163.895 cv
28.301 163.816 28.523 163.746 28.781 163.691 cv
29.031 163.637 29.305 163.609 29.602 163.609 cv
30.008 163.609 30.371 163.664 30.684 163.766 cv
30.996 163.875 31.254 164.023 31.465 164.211 cv
31.668 164.406 31.824 164.637 31.93 164.902 cv
32.031 165.172 32.082 165.465 32.086 165.789 cv
32.082 166.07 32.047 166.332 31.977 166.566 cv
31.902 166.809 31.793 167.02 31.652 167.203 cv
31.508 167.391 31.336 167.547 31.133 167.676 cv
30.926 167.809 30.688 167.902 30.418 167.949 cv
30.418 167.961 li
30.723 167.996 31.004 168.07 31.258 168.191 cv
31.512 168.312 31.73 168.465 31.914 168.648 cv
32.094 168.832 32.234 169.047 32.34 169.289 cv
32.441 169.535 32.492 169.797 32.496 170.074 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.605 169.758 mo
39.605 170.234 39.523 170.656 39.363 171.027 cv
39.203 171.398 38.977 171.711 38.688 171.965 cv
38.391 172.219 38.043 172.414 37.641 172.543 cv
37.234 172.676 36.785 172.738 36.293 172.738 cv
36.016 172.738 35.754 172.719 35.512 172.68 cv
35.262 172.641 35.043 172.594 34.855 172.539 cv
34.66 172.484 34.504 172.43 34.379 172.371 cv
34.254 172.32 34.176 172.277 34.145 172.242 cv
34.109 172.211 34.086 172.18 34.074 172.152 cv
34.059 172.125 34.043 172.094 34.035 172.051 cv
34.02 172.016 34.012 171.965 34.012 171.902 cv
34.004 171.844 34.004 171.773 34.004 171.691 cv
34.004 171.617 34.008 171.547 34.016 171.484 cv
34.023 171.422 34.035 171.371 34.055 171.332 cv
34.07 171.293 34.09 171.266 34.117 171.246 cv
34.141 171.23 34.172 171.223 34.203 171.219 cv
34.25 171.223 34.32 171.25 34.414 171.305 cv
34.508 171.363 34.637 171.426 34.801 171.492 cv
34.965 171.559 35.164 171.621 35.406 171.68 cv
35.641 171.738 35.926 171.766 36.262 171.766 cv
36.563 171.766 36.844 171.73 37.102 171.656 cv
37.355 171.586 37.578 171.473 37.766 171.316 cv
37.949 171.164 38.094 170.969 38.199 170.73 cv
38.305 170.496 38.355 170.207 38.359 169.867 cv
38.355 169.586 38.313 169.336 38.223 169.117 cv
38.133 168.898 37.996 168.719 37.813 168.574 cv
37.625 168.434 37.391 168.328 37.109 168.254 cv
36.824 168.184 36.484 168.145 36.098 168.145 cv
35.813 168.145 35.574 168.16 35.375 168.187 cv
35.172 168.219 34.984 168.234 34.813 168.23 cv
34.684 168.234 34.59 168.203 34.539 168.141 cv
34.48 168.082 34.453 167.969 34.457 167.797 cv
34.457 164.184 li
34.453 164.035 34.488 163.926 34.563 163.848 cv
34.629 163.777 34.73 163.738 34.867 163.738 cv
38.797 163.738 li
38.832 163.738 38.867 163.75 38.902 163.77 cv
38.934 163.793 38.961 163.824 38.988 163.863 cv
39.008 163.906 39.023 163.957 39.039 164.02 cv
39.047 164.086 39.055 164.164 39.059 164.246 cv
39.055 164.414 39.031 164.539 38.992 164.629 cv
38.945 164.723 38.887 164.77 38.809 164.766 cv
35.637 164.766 li
35.637 167.254 li
35.789 167.234 35.945 167.223 36.109 167.215 cv
36.266 167.211 36.453 167.207 36.668 167.207 cv
37.152 167.207 37.578 167.27 37.945 167.391 cv
38.309 167.512 38.613 167.684 38.863 167.902 cv
39.105 168.129 39.293 168.395 39.418 168.707 cv
39.543 169.023 39.605 169.375 39.605 169.758 cv
cp
f
26.215 113.82 mo
40.406 113.82 li
40.406 130.91 li
26.215 130.91 li
cp
0 0 0 0 cmyk
ef
32.941 124.656 mo
32.938 124.809 32.914 124.93 32.871 125.016 cv
32.824 125.105 32.762 125.148 32.68 125.145 cv
31.68 125.145 li
31.68 127.008 li
31.68 127.047 31.668 127.078 31.652 127.102 cv
31.629 127.129 31.598 127.148 31.555 127.168 cv
31.504 127.184 31.441 127.195 31.371 127.207 cv
31.293 127.215 31.199 127.219 31.082 127.223 cv
30.965 127.219 30.867 127.215 30.797 127.207 cv
30.719 127.195 30.66 127.184 30.617 127.168 cv
30.57 127.148 30.539 127.129 30.523 127.102 cv
30.504 127.078 30.496 127.047 30.5 127.008 cv
30.5 125.145 li
26.871 125.145 li
26.813 125.148 26.77 125.141 26.734 125.125 cv
26.699 125.113 26.664 125.086 26.637 125.047 cv
26.605 125.012 26.586 124.961 26.574 124.891 cv
26.563 124.824 26.559 124.734 26.559 124.621 cv
26.559 124.539 26.559 124.461 26.566 124.391 cv
26.566 124.32 26.578 124.258 26.594 124.203 cv
26.605 124.148 26.621 124.094 26.648 124.039 cv
26.668 123.984 26.695 123.93 26.73 123.867 cv
29.891 118.48 li
29.91 118.445 29.945 118.414 29.992 118.387 cv
30.035 118.359 30.09 118.336 30.164 118.316 cv
30.23 118.301 30.316 118.289 30.422 118.277 cv
30.523 118.273 30.645 118.27 30.785 118.266 cv
30.934 118.27 31.07 118.273 31.188 118.285 cv
31.301 118.297 31.391 118.312 31.465 118.328 cv
31.531 118.348 31.586 118.371 31.625 118.402 cv
31.66 118.434 31.68 118.469 31.68 118.508 cv
31.68 124.172 li
32.68 124.172 li
32.754 124.176 32.816 124.215 32.867 124.293 cv
32.914 124.375 32.938 124.496 32.941 124.656 cv
cp
30.5 119.305 mo
30.488 119.305 li
27.637 124.172 li
30.5 124.172 li
cp
.629236 .549432 .540154 .282963 cmyk
f
39.941 122.723 mo
39.938 123.406 39.887 124.027 39.781 124.59 cv
39.672 125.152 39.492 125.637 39.246 126.039 cv
38.992 126.445 38.664 126.758 38.266 126.977 cv
37.859 127.199 37.367 127.309 36.781 127.309 cv
36.223 127.309 35.75 127.211 35.371 127.012 cv
34.988 126.816 34.684 126.523 34.449 126.137 cv
34.215 125.75 34.047 125.277 33.953 124.711 cv
33.852 124.148 33.805 123.5 33.805 122.766 cv
33.805 122.094 33.859 121.473 33.969 120.906 cv
34.078 120.344 34.254 119.859 34.504 119.453 cv
34.746 119.051 35.07 118.738 35.477 118.512 cv
35.875 118.293 36.371 118.18 36.961 118.18 cv
37.52 118.18 37.992 118.281 38.375 118.477 cv
38.758 118.68 39.063 118.973 39.297 119.355 cv
39.527 119.746 39.695 120.219 39.793 120.781 cv
39.891 121.344 39.938 121.992 39.941 122.723 cv
cp
38.734 122.805 mo
38.73 122.363 38.715 121.965 38.688 121.613 cv
38.652 121.262 38.605 120.953 38.547 120.684 cv
38.48 120.414 38.402 120.184 38.305 119.988 cv
38.207 119.797 38.09 119.637 37.953 119.508 cv
37.813 119.383 37.652 119.289 37.48 119.23 cv
37.301 119.176 37.105 119.148 36.891 119.145 cv
36.5 119.148 36.184 119.238 35.945 119.422 cv
35.699 119.605 35.508 119.859 35.371 120.176 cv
35.23 120.496 35.137 120.867 35.086 121.297 cv
35.035 121.727 35.012 122.191 35.012 122.684 cv
35.012 123.348 35.043 123.91 35.113 124.371 cv
35.18 124.84 35.289 125.219 35.441 125.508 cv
35.586 125.805 35.777 126.016 36.008 126.145 cv
36.238 126.281 36.52 126.348 36.852 126.344 cv
37.105 126.348 37.328 126.309 37.523 126.223 cv
37.715 126.145 37.883 126.023 38.023 125.867 cv
38.164 125.715 38.277 125.531 38.371 125.316 cv
38.457 125.102 38.531 124.863 38.59 124.602 cv
38.641 124.344 38.68 124.062 38.703 123.758 cv
38.723 123.453 38.73 123.137 38.734 122.805 cv
cp
f
26.215 68.379 mo
40.406 68.379 li
40.406 85.469 li
26.215 85.469 li
cp
0 0 0 0 cmyk
ef
32.941 79.195 mo
32.938 79.348 32.914 79.469 32.871 79.555 cv
32.824 79.645 32.762 79.687 32.68 79.684 cv
31.68 79.684 li
31.68 81.547 li
31.68 81.586 31.668 81.617 31.652 81.641 cv
31.629 81.668 31.598 81.687 31.555 81.707 cv
31.504 81.723 31.441 81.734 31.371 81.746 cv
31.293 81.754 31.199 81.758 31.082 81.762 cv
30.965 81.758 30.867 81.754 30.797 81.746 cv
30.719 81.734 30.66 81.723 30.617 81.707 cv
30.57 81.687 30.539 81.668 30.523 81.641 cv
30.504 81.617 30.496 81.586 30.5 81.547 cv
30.5 79.684 li
26.871 79.684 li
26.813 79.687 26.77 79.68 26.734 79.664 cv
26.699 79.652 26.664 79.625 26.637 79.586 cv
26.605 79.551 26.586 79.5 26.574 79.43 cv
26.563 79.363 26.559 79.273 26.559 79.16 cv
26.559 79.078 26.559 79 26.566 78.93 cv
26.566 78.859 26.578 78.797 26.594 78.742 cv
26.605 78.687 26.621 78.633 26.648 78.578 cv
26.668 78.523 26.695 78.469 26.73 78.406 cv
29.891 73.02 li
29.91 72.984 29.945 72.953 29.992 72.926 cv
30.035 72.898 30.09 72.875 30.164 72.855 cv
30.23 72.84 30.316 72.828 30.422 72.816 cv
30.523 72.812 30.645 72.809 30.785 72.805 cv
30.934 72.809 31.07 72.812 31.188 72.824 cv
31.301 72.836 31.391 72.852 31.465 72.867 cv
31.531 72.887 31.586 72.91 31.625 72.941 cv
31.66 72.973 31.68 73.008 31.68 73.047 cv
31.68 78.711 li
32.68 78.711 li
32.754 78.715 32.816 78.754 32.867 78.832 cv
32.914 78.914 32.938 79.035 32.941 79.195 cv
cp
30.5 73.844 mo
30.488 73.844 li
27.637 78.711 li
30.5 78.711 li
cp
.629236 .549432 .540154 .282963 cmyk
f
39.605 78.867 mo
39.605 79.344 39.523 79.766 39.363 80.137 cv
39.203 80.508 38.977 80.82 38.688 81.074 cv
38.391 81.328 38.043 81.523 37.641 81.652 cv
37.234 81.785 36.785 81.848 36.293 81.848 cv
36.016 81.848 35.754 81.828 35.512 81.789 cv
35.262 81.75 35.043 81.703 34.855 81.648 cv
34.66 81.594 34.504 81.539 34.379 81.48 cv
34.254 81.43 34.176 81.387 34.145 81.352 cv
34.109 81.32 34.086 81.289 34.074 81.262 cv
34.059 81.234 34.043 81.203 34.035 81.16 cv
34.02 81.125 34.012 81.074 34.012 81.012 cv
34.004 80.953 34.004 80.883 34.004 80.801 cv
34.004 80.727 34.008 80.656 34.016 80.594 cv
34.023 80.531 34.035 80.48 34.055 80.441 cv
34.07 80.402 34.09 80.375 34.117 80.355 cv
34.141 80.34 34.172 80.332 34.203 80.328 cv
34.25 80.332 34.32 80.359 34.414 80.414 cv
34.508 80.473 34.637 80.535 34.801 80.602 cv
34.965 80.668 35.164 80.73 35.406 80.789 cv
35.641 80.848 35.926 80.875 36.262 80.875 cv
36.563 80.875 36.844 80.84 37.102 80.766 cv
37.355 80.695 37.578 80.582 37.766 80.426 cv
37.949 80.273 38.094 80.078 38.199 79.84 cv
38.305 79.605 38.355 79.316 38.359 78.977 cv
38.355 78.695 38.313 78.445 38.223 78.227 cv
38.133 78.008 37.996 77.828 37.813 77.684 cv
37.625 77.543 37.391 77.437 37.109 77.363 cv
36.824 77.293 36.484 77.254 36.098 77.254 cv
35.813 77.254 35.574 77.27 35.375 77.297 cv
35.172 77.328 34.984 77.344 34.813 77.34 cv
34.684 77.344 34.59 77.312 34.539 77.25 cv
34.48 77.191 34.453 77.078 34.457 76.906 cv
34.457 73.293 li
34.453 73.145 34.488 73.035 34.563 72.957 cv
34.629 72.887 34.73 72.848 34.867 72.848 cv
38.797 72.848 li
38.832 72.848 38.867 72.859 38.902 72.879 cv
38.934 72.902 38.961 72.934 38.988 72.973 cv
39.008 73.016 39.023 73.066 39.039 73.129 cv
39.047 73.195 39.055 73.273 39.059 73.355 cv
39.055 73.523 39.031 73.648 38.992 73.738 cv
38.945 73.832 38.887 73.879 38.809 73.875 cv
35.637 73.875 li
35.637 76.363 li
35.789 76.344 35.945 76.332 36.109 76.324 cv
36.266 76.32 36.453 76.316 36.668 76.316 cv
37.152 76.316 37.578 76.379 37.945 76.5 cv
38.309 76.621 38.613 76.793 38.863 77.012 cv
39.105 77.238 39.293 77.504 39.418 77.816 cv
39.543 78.133 39.605 78.484 39.605 78.867 cv
cp
f
26.215 22.941 mo
40.406 22.941 li
40.406 40.031 li
26.215 40.031 li
cp
0 0 0 0 cmyk
ef
32.523 33.41 mo
32.523 33.887 32.441 34.309 32.281 34.68 cv
32.121 35.051 31.895 35.363 31.605 35.617 cv
31.309 35.871 30.961 36.066 30.559 36.195 cv
30.152 36.328 29.703 36.391 29.211 36.391 cv
28.934 36.391 28.672 36.371 28.43 36.332 cv
28.18 36.293 27.961 36.246 27.773 36.191 cv
27.578 36.137 27.422 36.082 27.297 36.023 cv
27.172 35.973 27.094 35.93 27.063 35.895 cv
27.027 35.863 27.004 35.832 26.992 35.805 cv
26.977 35.777 26.961 35.746 26.953 35.703 cv
26.938 35.668 26.93 35.617 26.93 35.555 cv
26.922 35.496 26.922 35.426 26.922 35.344 cv
26.922 35.27 26.926 35.199 26.934 35.137 cv
26.941 35.074 26.953 35.023 26.973 34.984 cv
26.988 34.945 27.008 34.918 27.035 34.898 cv
27.059 34.883 27.09 34.875 27.121 34.871 cv
27.168 34.875 27.238 34.902 27.332 34.957 cv
27.426 35.016 27.555 35.078 27.719 35.145 cv
27.883 35.211 28.082 35.273 28.324 35.332 cv
28.559 35.391 28.844 35.418 29.18 35.418 cv
29.48 35.418 29.762 35.383 30.02 35.309 cv
30.273 35.238 30.496 35.125 30.684 34.969 cv
30.867 34.816 31.012 34.621 31.117 34.383 cv
31.223 34.148 31.273 33.859 31.277 33.52 cv
31.273 33.238 31.23 32.988 31.141 32.77 cv
31.051 32.551 30.914 32.371 30.73 32.227 cv
30.543 32.086 30.309 31.98 30.027 31.906 cv
29.742 31.836 29.402 31.797 29.016 31.797 cv
28.73 31.797 28.492 31.812 28.293 31.84 cv
28.09 31.871 27.902 31.887 27.73 31.883 cv
27.602 31.887 27.508 31.855 27.457 31.793 cv
27.398 31.734 27.371 31.621 27.375 31.449 cv
27.375 27.836 li
27.371 27.687 27.406 27.578 27.48 27.5 cv
27.547 27.43 27.648 27.391 27.785 27.391 cv
31.715 27.391 li
31.75 27.391 31.785 27.402 31.82 27.422 cv
31.852 27.445 31.879 27.477 31.906 27.516 cv
31.926 27.559 31.941 27.609 31.957 27.672 cv
31.965 27.738 31.973 27.816 31.977 27.898 cv
31.973 28.066 31.949 28.191 31.91 28.281 cv
31.863 28.375 31.805 28.422 31.727 28.418 cv
28.555 28.418 li
28.555 30.906 li
28.707 30.887 28.863 30.875 29.027 30.867 cv
29.184 30.863 29.371 30.859 29.586 30.859 cv
30.07 30.859 30.496 30.922 30.863 31.043 cv
31.227 31.164 31.531 31.336 31.781 31.555 cv
32.023 31.781 32.211 32.047 32.336 32.359 cv
32.461 32.676 32.523 33.027 32.523 33.41 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.941 31.805 mo
39.938 32.488 39.887 33.109 39.781 33.672 cv
39.672 34.234 39.492 34.719 39.246 35.121 cv
38.992 35.527 38.664 35.84 38.266 36.059 cv
37.859 36.281 37.367 36.391 36.781 36.391 cv
36.223 36.391 35.75 36.293 35.371 36.094 cv
34.988 35.898 34.684 35.605 34.449 35.219 cv
34.215 34.832 34.047 34.359 33.953 33.793 cv
33.852 33.23 33.805 32.582 33.805 31.848 cv
33.805 31.176 33.859 30.555 33.969 29.988 cv
34.078 29.426 34.254 28.941 34.504 28.535 cv
34.746 28.133 35.07 27.82 35.477 27.594 cv
35.875 27.375 36.371 27.262 36.961 27.262 cv
37.52 27.262 37.992 27.363 38.375 27.559 cv
38.758 27.762 39.063 28.055 39.297 28.437 cv
39.527 28.828 39.695 29.301 39.793 29.863 cv
39.891 30.426 39.938 31.074 39.941 31.805 cv
cp
38.734 31.887 mo
38.73 31.445 38.715 31.047 38.688 30.695 cv
38.652 30.344 38.605 30.035 38.547 29.766 cv
38.48 29.496 38.402 29.266 38.305 29.07 cv
38.207 28.879 38.09 28.719 37.953 28.59 cv
37.813 28.465 37.652 28.371 37.48 28.312 cv
37.301 28.258 37.105 28.23 36.891 28.227 cv
36.5 28.23 36.184 28.32 35.945 28.504 cv
35.699 28.687 35.508 28.941 35.371 29.258 cv
35.23 29.578 35.137 29.949 35.086 30.379 cv
35.035 30.809 35.012 31.273 35.012 31.766 cv
35.012 32.43 35.043 32.992 35.113 33.453 cv
35.18 33.922 35.289 34.301 35.441 34.59 cv
35.586 34.887 35.777 35.098 36.008 35.227 cv
36.238 35.363 36.52 35.43 36.852 35.426 cv
37.105 35.43 37.328 35.391 37.523 35.305 cv
37.715 35.227 37.883 35.105 38.023 34.949 cv
38.164 34.797 38.277 34.613 38.371 34.398 cv
38.457 34.184 38.531 33.945 38.59 33.684 cv
38.641 33.426 38.68 33.145 38.703 32.84 cv
38.723 32.535 38.73 32.219 38.734 31.887 cv
cp
f
56.227 508.48 mo
56.223 508.57 56.215 508.641 56.203 508.699 cv
56.188 508.762 56.168 508.812 56.148 508.844 cv
56.125 508.883 56.102 508.906 56.07 508.922 cv
56.039 508.937 56.008 508.945 55.98 508.945 cv
51.344 508.945 li
51.309 508.945 51.281 508.937 51.254 508.922 cv
51.227 508.906 51.199 508.883 51.176 508.844 cv
51.148 508.812 51.129 508.762 51.117 508.699 cv
51.102 508.641 51.094 508.57 51.098 508.48 cv
51.094 508.402 51.102 508.328 51.117 508.266 cv
51.129 508.207 51.145 508.16 51.168 508.121 cv
51.184 508.086 51.211 508.055 51.242 508.031 cv
51.273 508.012 51.305 508.004 51.344 508 cv
53.195 508 li
53.195 501.254 li
51.48 502.273 li
51.391 502.324 51.32 502.352 51.273 502.359 cv
51.219 502.367 51.176 502.359 51.145 502.328 cv
51.109 502.301 51.09 502.25 51.078 502.18 cv
51.066 502.113 51.059 502.027 51.063 501.918 cv
51.059 501.844 51.063 501.777 51.074 501.719 cv
51.078 501.668 51.09 501.621 51.105 501.582 cv
51.117 501.547 51.137 501.516 51.16 501.488 cv
51.184 501.461 51.215 501.434 51.262 501.406 cv
53.305 500.094 li
53.32 500.082 53.34 500.07 53.371 500.062 cv
53.395 500.055 53.43 500.047 53.477 500.035 cv
53.516 500.027 53.566 500.02 53.621 500.016 cv
53.676 500.016 53.742 500.016 53.828 500.012 cv
53.934 500.016 54.027 500.02 54.102 500.027 cv
54.172 500.035 54.227 500.051 54.273 500.066 cv
54.313 500.086 54.34 500.105 54.355 500.129 cv
54.363 500.156 54.371 500.18 54.375 500.203 cv
54.375 508 li
55.98 508 li
56.016 508.004 56.051 508.012 56.082 508.031 cv
56.113 508.055 56.137 508.086 56.16 508.121 cv
56.176 508.16 56.191 508.207 56.207 508.266 cv
56.215 508.328 56.223 508.402 56.227 508.48 cv
cp
f
135.355 508.437 mo
135.352 508.523 135.348 508.598 135.336 508.66 cv
135.324 508.727 135.309 508.781 135.289 508.82 cv
135.266 508.867 135.238 508.898 135.207 508.914 cv
135.172 508.937 135.133 508.945 135.094 508.945 cv
130.191 508.945 li
130.129 508.945 130.07 508.937 130.023 508.922 cv
129.973 508.906 129.934 508.883 129.898 508.844 cv
129.863 508.812 129.836 508.758 129.824 508.687 cv
129.805 508.617 129.797 508.531 129.801 508.43 cv
129.797 508.34 129.801 508.262 129.809 508.191 cv
129.813 508.125 129.828 508.066 129.855 508.012 cv
129.879 507.961 129.91 507.906 129.945 507.852 cv
129.98 507.801 130.023 507.746 130.082 507.684 cv
131.855 505.859 li
132.266 505.441 132.594 505.066 132.844 504.73 cv
133.09 504.402 133.281 504.098 133.414 503.82 cv
133.547 503.547 133.633 503.297 133.68 503.07 cv
133.719 502.848 133.742 502.637 133.742 502.441 cv
133.742 502.246 133.707 502.062 133.641 501.883 cv
133.574 501.711 133.48 501.555 133.355 501.418 cv
133.23 501.289 133.074 501.184 132.887 501.102 cv
132.699 501.027 132.48 500.988 132.234 500.984 cv
131.945 500.988 131.688 501.027 131.461 501.102 cv
131.23 501.184 131.031 501.27 130.859 501.355 cv
130.688 501.449 130.543 501.531 130.426 501.609 cv
130.309 501.687 130.223 501.727 130.172 501.727 cv
130.137 501.727 130.105 501.719 130.082 501.699 cv
130.051 501.684 130.031 501.652 130.016 501.609 cv
130 501.57 129.984 501.516 129.977 501.445 cv
129.965 501.379 129.961 501.297 129.965 501.199 cv
129.961 501.133 129.965 501.074 129.973 501.023 cv
129.977 500.973 129.984 500.93 129.996 500.891 cv
130.004 500.855 130.02 500.82 130.039 500.789 cv
130.059 500.758 130.094 500.719 130.152 500.668 cv
130.203 500.621 130.297 500.555 130.434 500.473 cv
130.566 500.391 130.738 500.312 130.941 500.23 cv
131.145 500.152 131.367 500.082 131.613 500.027 cv
131.855 499.973 132.113 499.945 132.387 499.945 cv
132.813 499.945 133.188 500.008 133.512 500.129 cv
133.832 500.25 134.098 500.414 134.313 500.625 cv
134.523 500.836 134.684 501.082 134.789 501.355 cv
134.895 501.637 134.949 501.934 134.949 502.246 cv
134.949 502.535 134.922 502.816 134.871 503.094 cv
134.82 503.379 134.715 503.684 134.555 504.008 cv
134.391 504.336 134.156 504.699 133.852 505.098 cv
133.543 505.5 133.137 505.961 132.633 506.477 cv
131.227 507.945 li
135.086 507.945 li
135.117 507.949 135.152 507.961 135.191 507.977 cv
135.223 508 135.254 508.031 135.281 508.07 cv
135.305 508.113 135.324 508.164 135.336 508.223 cv
135.348 508.289 135.352 508.359 135.355 508.437 cv
cp
f
214.91 506.422 mo
214.906 506.574 214.883 506.695 214.84 506.781 cv
214.793 506.871 214.73 506.914 214.648 506.91 cv
213.648 506.91 li
213.648 508.773 li
213.648 508.812 213.637 508.844 213.621 508.867 cv
213.598 508.895 213.566 508.914 213.523 508.934 cv
213.473 508.949 213.41 508.961 213.34 508.973 cv
213.262 508.98 213.168 508.984 213.051 508.988 cv
212.934 508.984 212.836 508.98 212.766 508.973 cv
212.688 508.961 212.629 508.949 212.586 508.934 cv
212.539 508.914 212.508 508.895 212.492 508.867 cv
212.473 508.844 212.465 508.812 212.469 508.773 cv
212.469 506.91 li
208.84 506.91 li
208.781 506.914 208.738 506.906 208.703 506.891 cv
208.668 506.879 208.633 506.852 208.605 506.812 cv
208.574 506.777 208.555 506.727 208.543 506.656 cv
208.531 506.59 208.527 506.5 208.527 506.387 cv
208.527 506.305 208.527 506.227 208.535 506.156 cv
208.535 506.086 208.547 506.023 208.563 505.969 cv
208.574 505.914 208.59 505.859 208.617 505.805 cv
208.637 505.75 208.664 505.695 208.699 505.633 cv
211.859 500.246 li
211.879 500.211 211.914 500.18 211.961 500.152 cv
212.004 500.125 212.059 500.102 212.133 500.082 cv
212.199 500.066 212.285 500.055 212.391 500.043 cv
212.492 500.039 212.613 500.035 212.754 500.031 cv
212.902 500.035 213.039 500.039 213.156 500.051 cv
213.27 500.062 213.359 500.078 213.434 500.094 cv
213.5 500.113 213.555 500.137 213.594 500.168 cv
213.629 500.199 213.648 500.234 213.648 500.273 cv
213.648 505.937 li
214.648 505.937 li
214.723 505.941 214.785 505.98 214.836 506.059 cv
214.883 506.141 214.906 506.262 214.91 506.422 cv
cp
212.469 501.07 mo
212.457 501.07 li
209.605 505.937 li
212.469 505.937 li
cp
f
293.941 506.074 mo
293.941 506.465 293.879 506.844 293.762 507.203 cv
293.637 507.57 293.453 507.887 293.211 508.16 cv
292.961 508.437 292.648 508.66 292.273 508.824 cv
291.891 508.992 291.445 509.074 290.93 509.074 cv
290.559 509.074 290.23 509.031 289.949 508.937 cv
289.664 508.852 289.418 508.719 289.207 508.547 cv
288.996 508.379 288.82 508.172 288.684 507.926 cv
288.543 507.68 288.43 507.398 288.348 507.082 cv
288.262 506.77 288.203 506.426 288.168 506.047 cv
288.129 505.676 288.109 505.273 288.113 504.84 cv
288.109 504.461 288.129 504.078 288.172 503.687 cv
288.211 503.305 288.285 502.93 288.391 502.562 cv
288.496 502.203 288.641 501.863 288.82 501.547 cv
289 501.23 289.227 500.953 289.5 500.719 cv
289.773 500.484 290.098 500.297 290.477 500.156 cv
290.855 500.02 291.297 499.953 291.801 499.949 cv
291.969 499.953 292.141 499.961 292.313 499.98 cv
292.484 500.004 292.645 500.035 292.793 500.066 cv
292.941 500.105 293.063 500.141 293.164 500.18 cv
293.262 500.219 293.328 500.254 293.363 500.277 cv
293.391 500.305 293.414 500.332 293.434 500.359 cv
293.449 500.391 293.465 500.422 293.473 500.457 cv
293.48 500.492 293.484 500.531 293.492 500.574 cv
293.492 500.617 293.496 500.672 293.5 500.734 cv
293.496 500.82 293.496 500.891 293.496 500.945 cv
293.492 501.008 293.48 501.055 293.469 501.09 cv
293.449 501.129 293.43 501.156 293.406 501.172 cv
293.379 501.191 293.348 501.199 293.309 501.199 cv
293.258 501.199 293.188 501.184 293.102 501.152 cv
293.012 501.121 292.906 501.086 292.785 501.043 cv
292.66 501.008 292.512 500.973 292.336 500.937 cv
292.16 500.91 291.957 500.895 291.727 500.891 cv
291.297 500.895 290.93 500.98 290.625 501.152 cv
290.32 501.324 290.07 501.559 289.875 501.852 cv
289.68 502.145 289.535 502.484 289.445 502.867 cv
289.348 503.258 289.293 503.66 289.285 504.078 cv
289.402 504.012 289.539 503.945 289.688 503.875 cv
289.836 503.809 289.996 503.746 290.172 503.687 cv
290.348 503.637 290.535 503.59 290.73 503.555 cv
290.926 503.523 291.137 503.508 291.363 503.504 cv
291.84 503.508 292.242 503.574 292.574 503.699 cv
292.902 503.832 293.168 504.012 293.375 504.242 cv
293.574 504.473 293.719 504.742 293.809 505.055 cv
293.895 505.367 293.941 505.707 293.941 506.074 cv
cp
292.746 506.184 mo
292.746 505.922 292.719 505.68 292.668 505.461 cv
292.613 505.246 292.523 505.062 292.402 504.906 cv
292.277 504.758 292.113 504.641 291.91 504.559 cv
291.699 504.477 291.445 504.434 291.148 504.434 cv
290.977 504.434 290.809 504.449 290.641 504.48 cv
290.469 504.512 290.305 504.555 290.148 504.602 cv
289.988 504.656 289.84 504.719 289.699 504.789 cv
289.555 504.863 289.422 504.937 289.305 505.016 cv
289.301 505.609 289.34 506.105 289.418 506.5 cv
289.492 506.898 289.602 507.215 289.746 507.453 cv
289.891 507.695 290.07 507.867 290.285 507.969 cv
290.5 508.074 290.75 508.125 291.039 508.121 cv
291.328 508.125 291.582 508.07 291.797 507.957 cv
292.012 507.852 292.188 507.703 292.332 507.516 cv
292.473 507.332 292.578 507.125 292.645 506.895 cv
292.711 506.664 292.746 506.43 292.746 506.184 cv
cp
f
373.07 506.668 mo
373.07 507.055 373 507.398 372.863 507.695 cv
372.727 508 372.531 508.25 372.273 508.453 cv
372.016 508.66 371.695 508.816 371.316 508.918 cv
370.934 509.023 370.5 509.074 370.016 509.074 cv
369.555 509.074 369.145 509.027 368.785 508.934 cv
368.422 508.84 368.117 508.699 367.867 508.508 cv
367.617 508.324 367.426 508.094 367.293 507.816 cv
367.16 507.543 367.094 507.23 367.094 506.875 cv
367.094 506.602 367.137 506.344 367.23 506.109 cv
367.316 505.875 367.449 505.66 367.625 505.465 cv
367.793 505.27 368.004 505.086 368.258 504.91 cv
368.508 504.742 368.793 504.578 369.109 504.422 cv
368.836 504.281 368.594 504.133 368.383 503.973 cv
368.172 503.816 367.992 503.645 367.848 503.457 cv
367.699 503.273 367.59 503.078 367.516 502.867 cv
367.438 502.66 367.398 502.43 367.402 502.18 cv
367.398 501.871 367.453 501.578 367.57 501.305 cv
367.68 501.035 367.852 500.801 368.078 500.598 cv
368.305 500.398 368.59 500.238 368.941 500.121 cv
369.285 500.004 369.695 499.945 370.164 499.945 cv
370.609 499.945 370.996 500 371.324 500.105 cv
371.652 500.215 371.922 500.359 372.133 500.543 cv
372.344 500.73 372.5 500.949 372.605 501.199 cv
372.703 501.449 372.754 501.719 372.758 502.008 cv
372.754 502.242 372.715 502.469 372.645 502.68 cv
372.566 502.898 372.457 503.102 372.309 503.289 cv
372.16 503.484 371.98 503.664 371.77 503.828 cv
371.559 504 371.316 504.156 371.043 504.297 cv
371.363 504.461 371.648 504.625 371.906 504.793 cv
372.156 504.961 372.371 505.141 372.547 505.336 cv
372.715 505.531 372.844 505.738 372.938 505.953 cv
373.023 506.172 373.07 506.41 373.07 506.668 cv
cp
371.59 502.117 mo
371.586 501.93 371.555 501.754 371.488 501.598 cv
371.422 501.441 371.324 501.309 371.199 501.199 cv
371.07 501.09 370.91 501.008 370.723 500.949 cv
370.527 500.895 370.313 500.867 370.074 500.863 cv
369.578 500.867 369.203 500.977 368.953 501.199 cv
368.695 501.426 368.57 501.734 368.574 502.117 cv
368.57 502.297 368.602 502.461 368.664 502.613 cv
368.727 502.77 368.82 502.914 368.953 503.051 cv
369.078 503.187 369.242 503.32 369.445 503.449 cv
369.641 503.582 369.879 503.719 370.156 503.859 cv
370.617 503.625 370.973 503.363 371.219 503.07 cv
371.465 502.785 371.586 502.469 371.59 502.117 cv
cp
371.879 506.793 mo
371.875 506.586 371.836 506.395 371.762 506.223 cv
371.68 506.055 371.563 505.895 371.406 505.742 cv
371.25 505.594 371.051 505.449 370.816 505.309 cv
370.578 505.172 370.309 505.027 370 504.875 cv
369.711 505.02 369.457 505.16 369.242 505.301 cv
369.023 505.441 368.844 505.59 368.707 505.738 cv
368.566 505.895 368.461 506.051 368.391 506.215 cv
368.316 506.383 368.281 506.566 368.285 506.766 cv
368.281 507.211 368.434 507.555 368.742 507.793 cv
369.043 508.039 369.496 508.16 370.102 508.156 cv
370.684 508.16 371.129 508.039 371.43 507.789 cv
371.727 507.547 371.875 507.215 371.879 506.793 cv
cp
f
448.504 508.48 mo
448.5 508.57 448.492 508.641 448.48 508.699 cv
448.465 508.762 448.445 508.812 448.426 508.844 cv
448.402 508.883 448.379 508.906 448.348 508.922 cv
448.316 508.937 448.285 508.945 448.258 508.945 cv
443.621 508.945 li
443.586 508.945 443.559 508.937 443.531 508.922 cv
443.504 508.906 443.477 508.883 443.453 508.844 cv
443.426 508.812 443.406 508.762 443.395 508.699 cv
443.379 508.641 443.371 508.57 443.375 508.48 cv
443.371 508.402 443.379 508.328 443.395 508.266 cv
443.406 508.207 443.422 508.16 443.445 508.121 cv
443.461 508.086 443.488 508.055 443.52 508.031 cv
443.551 508.012 443.582 508.004 443.621 508 cv
445.473 508 li
445.473 501.254 li
443.758 502.273 li
443.668 502.324 443.598 502.352 443.551 502.359 cv
443.496 502.367 443.453 502.359 443.422 502.328 cv
443.387 502.301 443.367 502.25 443.355 502.18 cv
443.344 502.113 443.336 502.027 443.34 501.918 cv
443.336 501.844 443.34 501.777 443.352 501.719 cv
443.355 501.668 443.367 501.621 443.383 501.582 cv
443.395 501.547 443.414 501.516 443.438 501.488 cv
443.461 501.461 443.492 501.434 443.539 501.406 cv
445.582 500.094 li
445.598 500.082 445.617 500.07 445.648 500.062 cv
445.672 500.055 445.707 500.047 445.754 500.035 cv
445.793 500.027 445.844 500.02 445.898 500.016 cv
445.953 500.016 446.02 500.016 446.105 500.012 cv
446.211 500.016 446.305 500.02 446.379 500.027 cv
446.449 500.035 446.504 500.051 446.551 500.066 cv
446.59 500.086 446.617 500.105 446.633 500.129 cv
446.641 500.156 446.648 500.18 446.652 500.203 cv
446.652 508 li
448.258 508 li
448.293 508.004 448.328 508.012 448.359 508.031 cv
448.391 508.055 448.414 508.086 448.438 508.121 cv
448.453 508.16 448.469 508.207 448.484 508.266 cv
448.492 508.328 448.5 508.402 448.504 508.48 cv
cp
f
455.859 504.488 mo
455.855 505.172 455.805 505.793 455.699 506.355 cv
455.59 506.918 455.41 507.402 455.164 507.805 cv
454.91 508.211 454.582 508.523 454.184 508.742 cv
453.777 508.965 453.285 509.074 452.699 509.074 cv
452.141 509.074 451.668 508.977 451.289 508.777 cv
450.906 508.582 450.602 508.289 450.367 507.902 cv
450.133 507.516 449.965 507.043 449.871 506.477 cv
449.77 505.914 449.723 505.266 449.723 504.531 cv
449.723 503.859 449.777 503.238 449.887 502.672 cv
449.996 502.109 450.172 501.625 450.422 501.219 cv
450.664 500.816 450.988 500.504 451.395 500.277 cv
451.793 500.059 452.289 499.945 452.879 499.945 cv
453.438 499.945 453.91 500.047 454.293 500.242 cv
454.676 500.445 454.98 500.738 455.215 501.121 cv
455.445 501.512 455.613 501.984 455.711 502.547 cv
455.809 503.109 455.855 503.758 455.859 504.488 cv
cp
454.652 504.57 mo
454.648 504.129 454.633 503.73 454.605 503.379 cv
454.57 503.027 454.523 502.719 454.465 502.449 cv
454.398 502.18 454.32 501.949 454.223 501.754 cv
454.125 501.562 454.008 501.402 453.871 501.273 cv
453.73 501.148 453.57 501.055 453.398 500.996 cv
453.219 500.941 453.023 500.914 452.809 500.91 cv
452.418 500.914 452.102 501.004 451.863 501.187 cv
451.617 501.371 451.426 501.625 451.289 501.941 cv
451.148 502.262 451.055 502.633 451.004 503.062 cv
450.953 503.492 450.93 503.957 450.93 504.449 cv
450.93 505.113 450.961 505.676 451.031 506.137 cv
451.098 506.605 451.207 506.984 451.359 507.273 cv
451.504 507.57 451.695 507.781 451.926 507.91 cv
452.156 508.047 452.438 508.113 452.77 508.109 cv
453.023 508.113 453.246 508.074 453.441 507.988 cv
453.633 507.91 453.801 507.789 453.941 507.633 cv
454.082 507.48 454.195 507.297 454.289 507.082 cv
454.375 506.867 454.449 506.629 454.508 506.367 cv
454.559 506.109 454.598 505.828 454.621 505.523 cv
454.641 505.219 454.648 504.902 454.652 504.57 cv
cp
f
527.684 508.48 mo
527.68 508.57 527.672 508.641 527.66 508.699 cv
527.645 508.762 527.625 508.812 527.605 508.844 cv
527.582 508.883 527.559 508.906 527.527 508.922 cv
527.496 508.937 527.465 508.945 527.438 508.945 cv
522.801 508.945 li
522.766 508.945 522.738 508.937 522.711 508.922 cv
522.684 508.906 522.656 508.883 522.633 508.844 cv
522.605 508.812 522.586 508.762 522.574 508.699 cv
522.559 508.641 522.551 508.57 522.555 508.48 cv
522.551 508.402 522.559 508.328 522.574 508.266 cv
522.586 508.207 522.602 508.16 522.625 508.121 cv
522.641 508.086 522.668 508.055 522.699 508.031 cv
522.73 508.012 522.762 508.004 522.801 508 cv
524.652 508 li
524.652 501.254 li
522.938 502.273 li
522.848 502.324 522.777 502.352 522.73 502.359 cv
522.676 502.367 522.633 502.359 522.602 502.328 cv
522.566 502.301 522.547 502.25 522.535 502.18 cv
522.523 502.113 522.516 502.027 522.52 501.918 cv
522.516 501.844 522.52 501.777 522.531 501.719 cv
522.535 501.668 522.547 501.621 522.563 501.582 cv
522.574 501.547 522.594 501.516 522.617 501.488 cv
522.641 501.461 522.672 501.434 522.719 501.406 cv
524.762 500.094 li
524.777 500.082 524.797 500.07 524.828 500.062 cv
524.852 500.055 524.887 500.047 524.934 500.035 cv
524.973 500.027 525.023 500.02 525.078 500.016 cv
525.133 500.016 525.199 500.016 525.285 500.012 cv
525.391 500.016 525.484 500.02 525.559 500.027 cv
525.629 500.035 525.684 500.051 525.73 500.066 cv
525.77 500.086 525.797 500.105 525.813 500.129 cv
525.82 500.156 525.828 500.18 525.832 500.203 cv
525.832 508 li
527.438 508 li
527.473 508.004 527.508 508.012 527.539 508.031 cv
527.57 508.055 527.594 508.086 527.617 508.121 cv
527.633 508.16 527.648 508.207 527.664 508.266 cv
527.672 508.328 527.68 508.402 527.684 508.48 cv
cp
f
534.746 508.437 mo
534.742 508.523 534.738 508.598 534.727 508.66 cv
534.715 508.727 534.699 508.781 534.68 508.82 cv
534.656 508.867 534.629 508.898 534.598 508.914 cv
534.563 508.937 534.523 508.945 534.484 508.945 cv
529.582 508.945 li
529.52 508.945 529.461 508.937 529.414 508.922 cv
529.363 508.906 529.324 508.883 529.289 508.844 cv
529.254 508.812 529.227 508.758 529.215 508.687 cv
529.195 508.617 529.188 508.531 529.191 508.43 cv
529.188 508.34 529.191 508.262 529.199 508.191 cv
529.203 508.125 529.219 508.066 529.246 508.012 cv
529.27 507.961 529.301 507.906 529.336 507.852 cv
529.371 507.801 529.414 507.746 529.473 507.684 cv
531.246 505.859 li
531.656 505.441 531.984 505.066 532.234 504.73 cv
532.48 504.402 532.672 504.098 532.805 503.82 cv
532.938 503.547 533.023 503.297 533.07 503.07 cv
533.109 502.848 533.133 502.637 533.133 502.441 cv
533.133 502.246 533.098 502.062 533.031 501.883 cv
532.965 501.711 532.871 501.555 532.746 501.418 cv
532.621 501.289 532.465 501.184 532.277 501.102 cv
532.09 501.027 531.871 500.988 531.625 500.984 cv
531.336 500.988 531.078 501.027 530.852 501.102 cv
530.621 501.184 530.422 501.27 530.25 501.355 cv
530.078 501.449 529.934 501.531 529.816 501.609 cv
529.699 501.687 529.613 501.727 529.563 501.727 cv
529.527 501.727 529.496 501.719 529.473 501.699 cv
529.441 501.684 529.422 501.652 529.406 501.609 cv
529.391 501.57 529.375 501.516 529.367 501.445 cv
529.355 501.379 529.352 501.297 529.355 501.199 cv
529.352 501.133 529.355 501.074 529.363 501.023 cv
529.367 500.973 529.375 500.93 529.387 500.891 cv
529.395 500.855 529.41 500.82 529.43 500.789 cv
529.449 500.758 529.484 500.719 529.543 500.668 cv
529.594 500.621 529.688 500.555 529.824 500.473 cv
529.957 500.391 530.129 500.312 530.332 500.23 cv
530.535 500.152 530.758 500.082 531.004 500.027 cv
531.246 499.973 531.504 499.945 531.777 499.945 cv
532.203 499.945 532.578 500.008 532.902 500.129 cv
533.223 500.25 533.488 500.414 533.703 500.625 cv
533.914 500.836 534.074 501.082 534.18 501.355 cv
534.285 501.637 534.34 501.934 534.34 502.246 cv
534.34 502.535 534.313 502.816 534.262 503.094 cv
534.211 503.379 534.105 503.684 533.945 504.008 cv
533.781 504.336 533.547 504.699 533.242 505.098 cv
532.934 505.5 532.527 505.961 532.023 506.477 cv
530.617 507.945 li
534.477 507.945 li
534.508 507.949 534.543 507.961 534.582 507.977 cv
534.613 508 534.645 508.031 534.672 508.07 cv
534.695 508.113 534.715 508.164 534.727 508.223 cv
534.738 508.289 534.742 508.359 534.746 508.437 cv
cp
f
606.855 508.48 mo
606.852 508.57 606.844 508.641 606.832 508.699 cv
606.816 508.762 606.797 508.812 606.777 508.844 cv
606.754 508.883 606.73 508.906 606.699 508.922 cv
606.668 508.937 606.637 508.945 606.609 508.945 cv
601.973 508.945 li
601.938 508.945 601.91 508.937 601.883 508.922 cv
601.855 508.906 601.828 508.883 601.805 508.844 cv
601.777 508.812 601.758 508.762 601.746 508.699 cv
601.73 508.641 601.723 508.57 601.727 508.48 cv
601.723 508.402 601.73 508.328 601.746 508.266 cv
601.758 508.207 601.773 508.16 601.797 508.121 cv
601.813 508.086 601.84 508.055 601.871 508.031 cv
601.902 508.012 601.934 508.004 601.973 508 cv
603.824 508 li
603.824 501.254 li
602.109 502.273 li
602.02 502.324 601.949 502.352 601.902 502.359 cv
601.848 502.367 601.805 502.359 601.773 502.328 cv
601.738 502.301 601.719 502.25 601.707 502.18 cv
601.695 502.113 601.688 502.027 601.691 501.918 cv
601.688 501.844 601.691 501.777 601.703 501.719 cv
601.707 501.668 601.719 501.621 601.734 501.582 cv
601.746 501.547 601.766 501.516 601.789 501.488 cv
601.813 501.461 601.844 501.434 601.891 501.406 cv
603.934 500.094 li
603.949 500.082 603.969 500.07 604 500.062 cv
604.023 500.055 604.059 500.047 604.105 500.035 cv
604.145 500.027 604.195 500.02 604.25 500.016 cv
604.305 500.016 604.371 500.016 604.457 500.012 cv
604.563 500.016 604.656 500.02 604.73 500.027 cv
604.801 500.035 604.855 500.051 604.902 500.066 cv
604.941 500.086 604.969 500.105 604.984 500.129 cv
604.992 500.156 605 500.18 605.004 500.203 cv
605.004 508 li
606.609 508 li
606.645 508.004 606.68 508.012 606.711 508.031 cv
606.742 508.055 606.766 508.086 606.789 508.121 cv
606.805 508.16 606.82 508.207 606.836 508.266 cv
606.844 508.328 606.852 508.402 606.855 508.48 cv
cp
f
614.289 506.422 mo
614.285 506.574 614.262 506.695 614.219 506.781 cv
614.172 506.871 614.109 506.914 614.027 506.91 cv
613.027 506.91 li
613.027 508.773 li
613.027 508.812 613.016 508.844 613 508.867 cv
612.977 508.895 612.945 508.914 612.902 508.934 cv
612.852 508.949 612.789 508.961 612.719 508.973 cv
612.641 508.98 612.547 508.984 612.43 508.988 cv
612.313 508.984 612.215 508.98 612.145 508.973 cv
612.066 508.961 612.008 508.949 611.965 508.934 cv
611.918 508.914 611.887 508.895 611.871 508.867 cv
611.852 508.844 611.844 508.812 611.848 508.773 cv
611.848 506.91 li
608.219 506.91 li
608.16 506.914 608.117 506.906 608.082 506.891 cv
608.047 506.879 608.012 506.852 607.984 506.812 cv
607.953 506.777 607.934 506.727 607.922 506.656 cv
607.91 506.59 607.906 506.5 607.906 506.387 cv
607.906 506.305 607.906 506.227 607.914 506.156 cv
607.914 506.086 607.926 506.023 607.941 505.969 cv
607.953 505.914 607.969 505.859 607.996 505.805 cv
608.016 505.75 608.043 505.695 608.078 505.633 cv
611.238 500.246 li
611.258 500.211 611.293 500.18 611.34 500.152 cv
611.383 500.125 611.438 500.102 611.512 500.082 cv
611.578 500.066 611.664 500.055 611.77 500.043 cv
611.871 500.039 611.992 500.035 612.133 500.031 cv
612.281 500.035 612.418 500.039 612.535 500.051 cv
612.648 500.062 612.738 500.078 612.813 500.094 cv
612.879 500.113 612.934 500.137 612.973 500.168 cv
613.008 500.199 613.027 500.234 613.027 500.273 cv
613.027 505.937 li
614.027 505.937 li
614.102 505.941 614.164 505.98 614.215 506.059 cv
614.262 506.141 614.285 506.262 614.289 506.422 cv
cp
611.848 501.07 mo
611.836 501.07 li
608.984 505.937 li
611.848 505.937 li
cp
f
686.016 508.48 mo
686.012 508.57 686.004 508.641 685.992 508.699 cv
685.977 508.762 685.957 508.812 685.938 508.844 cv
685.914 508.883 685.891 508.906 685.859 508.922 cv
685.828 508.937 685.797 508.945 685.77 508.945 cv
681.133 508.945 li
681.098 508.945 681.07 508.937 681.043 508.922 cv
681.016 508.906 680.988 508.883 680.965 508.844 cv
680.938 508.812 680.918 508.762 680.906 508.699 cv
680.891 508.641 680.883 508.57 680.887 508.48 cv
680.883 508.402 680.891 508.328 680.906 508.266 cv
680.918 508.207 680.934 508.16 680.957 508.121 cv
680.973 508.086 681 508.055 681.031 508.031 cv
681.063 508.012 681.094 508.004 681.133 508 cv
682.984 508 li
682.984 501.254 li
681.27 502.273 li
681.18 502.324 681.109 502.352 681.063 502.359 cv
681.008 502.367 680.965 502.359 680.934 502.328 cv
680.898 502.301 680.879 502.25 680.867 502.18 cv
680.855 502.113 680.848 502.027 680.852 501.918 cv
680.848 501.844 680.852 501.777 680.863 501.719 cv
680.867 501.668 680.879 501.621 680.895 501.582 cv
680.906 501.547 680.926 501.516 680.949 501.488 cv
680.973 501.461 681.004 501.434 681.051 501.406 cv
683.094 500.094 li
683.109 500.082 683.129 500.07 683.16 500.062 cv
683.184 500.055 683.219 500.047 683.266 500.035 cv
683.305 500.027 683.355 500.02 683.41 500.016 cv
683.465 500.016 683.531 500.016 683.617 500.012 cv
683.723 500.016 683.816 500.02 683.891 500.027 cv
683.961 500.035 684.016 500.051 684.063 500.066 cv
684.102 500.086 684.129 500.105 684.145 500.129 cv
684.152 500.156 684.16 500.18 684.164 500.203 cv
684.164 508 li
685.77 508 li
685.805 508.004 685.84 508.012 685.871 508.031 cv
685.902 508.055 685.926 508.086 685.949 508.121 cv
685.965 508.16 685.98 508.207 685.996 508.266 cv
686.004 508.328 686.012 508.402 686.016 508.48 cv
cp
f
693.301 506.074 mo
693.301 506.465 693.238 506.844 693.121 507.203 cv
692.996 507.57 692.813 507.887 692.57 508.16 cv
692.32 508.437 692.008 508.66 691.633 508.824 cv
691.25 508.992 690.805 509.074 690.289 509.074 cv
689.918 509.074 689.59 509.031 689.309 508.937 cv
689.023 508.852 688.777 508.719 688.566 508.547 cv
688.355 508.379 688.18 508.172 688.043 507.926 cv
687.902 507.68 687.789 507.398 687.707 507.082 cv
687.621 506.77 687.563 506.426 687.527 506.047 cv
687.488 505.676 687.469 505.273 687.473 504.84 cv
687.469 504.461 687.488 504.078 687.531 503.687 cv
687.57 503.305 687.645 502.93 687.75 502.562 cv
687.855 502.203 688 501.863 688.18 501.547 cv
688.359 501.23 688.586 500.953 688.859 500.719 cv
689.133 500.484 689.457 500.297 689.836 500.156 cv
690.215 500.02 690.656 499.953 691.16 499.949 cv
691.328 499.953 691.5 499.961 691.672 499.98 cv
691.844 500.004 692.004 500.035 692.152 500.066 cv
692.301 500.105 692.422 500.141 692.523 500.18 cv
692.621 500.219 692.688 500.254 692.723 500.277 cv
692.75 500.305 692.773 500.332 692.793 500.359 cv
692.809 500.391 692.824 500.422 692.832 500.457 cv
692.84 500.492 692.844 500.531 692.852 500.574 cv
692.852 500.617 692.855 500.672 692.859 500.734 cv
692.855 500.82 692.855 500.891 692.855 500.945 cv
692.852 501.008 692.84 501.055 692.828 501.09 cv
692.809 501.129 692.789 501.156 692.766 501.172 cv
692.738 501.191 692.707 501.199 692.668 501.199 cv
692.617 501.199 692.547 501.184 692.461 501.152 cv
692.371 501.121 692.266 501.086 692.145 501.043 cv
692.02 501.008 691.871 500.973 691.695 500.937 cv
691.52 500.91 691.316 500.895 691.086 500.891 cv
690.656 500.895 690.289 500.98 689.984 501.152 cv
689.68 501.324 689.43 501.559 689.234 501.852 cv
689.039 502.145 688.895 502.484 688.805 502.867 cv
688.707 503.258 688.652 503.66 688.645 504.078 cv
688.762 504.012 688.898 503.945 689.047 503.875 cv
689.195 503.809 689.355 503.746 689.531 503.687 cv
689.707 503.637 689.895 503.59 690.09 503.555 cv
690.285 503.523 690.496 503.508 690.723 503.504 cv
691.199 503.508 691.602 503.574 691.934 503.699 cv
692.262 503.832 692.527 504.012 692.734 504.242 cv
692.934 504.473 693.078 504.742 693.168 505.055 cv
693.254 505.367 693.301 505.707 693.301 506.074 cv
cp
692.105 506.184 mo
692.105 505.922 692.078 505.68 692.027 505.461 cv
691.973 505.246 691.883 505.062 691.762 504.906 cv
691.637 504.758 691.473 504.641 691.27 504.559 cv
691.059 504.477 690.805 504.434 690.508 504.434 cv
690.336 504.434 690.168 504.449 690 504.48 cv
689.828 504.512 689.664 504.555 689.508 504.602 cv
689.348 504.656 689.199 504.719 689.059 504.789 cv
688.914 504.863 688.781 504.937 688.664 505.016 cv
688.66 505.609 688.699 506.105 688.777 506.5 cv
688.852 506.898 688.961 507.215 689.105 507.453 cv
689.25 507.695 689.43 507.867 689.645 507.969 cv
689.859 508.074 690.109 508.125 690.398 508.121 cv
690.688 508.125 690.941 508.07 691.156 507.957 cv
691.371 507.852 691.547 507.703 691.691 507.516 cv
691.832 507.332 691.938 507.125 692.004 506.895 cv
692.07 506.664 692.105 506.43 692.105 506.184 cv
cp
f
7.75 318.93 mo
7.852 318.934 7.938 318.937 8.008 318.945 cv
8.082 318.957 8.141 318.973 8.184 318.996 cv
8.23 319.02 8.262 319.051 8.281 319.082 cv
8.305 319.121 8.316 319.156 8.313 319.195 cv
8.313 322.031 li
17.055 322.031 li
17.098 322.031 17.133 322.043 17.164 322.062 cv
17.195 322.086 17.223 322.121 17.238 322.172 cv
17.258 322.227 17.27 322.297 17.285 322.379 cv
17.297 322.469 17.305 322.574 17.305 322.699 cv
17.305 322.824 17.297 322.934 17.285 323.02 cv
17.27 323.113 17.258 323.184 17.238 323.23 cv
17.223 323.285 17.195 323.32 17.164 323.34 cv
17.133 323.363 17.098 323.375 17.055 323.371 cv
8.313 323.371 li
8.313 326.207 li
8.316 326.254 8.305 326.289 8.281 326.32 cv
8.262 326.355 8.23 326.383 8.184 326.402 cv
8.141 326.426 8.082 326.445 8.008 326.453 cv
7.938 326.469 7.852 326.473 7.75 326.473 cv
7.652 326.473 7.566 326.469 7.488 326.453 cv
7.418 326.445 7.355 326.426 7.305 326.402 cv
7.262 326.383 7.227 326.355 7.203 326.32 cv
7.184 326.289 7.176 326.254 7.172 326.207 cv
7.172 319.195 li
7.176 319.156 7.184 319.121 7.203 319.082 cv
7.227 319.051 7.262 319.02 7.305 318.996 cv
7.355 318.973 7.418 318.957 7.488 318.945 cv
7.566 318.937 7.652 318.934 7.75 318.93 cv
cp
f
17.063 316.34 mo
17.109 316.344 17.145 316.355 17.168 316.371 cv
17.199 316.395 17.223 316.426 17.242 316.473 cv
17.262 316.52 17.273 316.586 17.289 316.664 cv
17.297 316.75 17.305 316.855 17.305 316.984 cv
17.305 317.113 17.297 317.219 17.289 317.297 cv
17.273 317.383 17.262 317.449 17.242 317.496 cv
17.223 317.551 17.199 317.582 17.168 317.598 cv
17.145 317.617 17.109 317.629 17.063 317.625 cv
10.051 317.625 li
10.016 317.629 9.984 317.617 9.949 317.598 cv
9.922 317.582 9.895 317.551 9.871 317.496 cv
9.852 317.449 9.836 317.383 9.824 317.297 cv
9.816 317.219 9.813 317.113 9.809 316.984 cv
9.813 316.855 9.816 316.75 9.824 316.664 cv
9.836 316.586 9.852 316.52 9.871 316.473 cv
9.895 316.426 9.922 316.395 9.949 316.371 cv
9.984 316.355 10.016 316.344 10.051 316.34 cv
cp
7.68 316.191 mo
7.984 316.191 8.191 316.25 8.297 316.363 cv
8.41 316.477 8.465 316.687 8.461 316.992 cv
8.465 317.297 8.41 317.504 8.301 317.613 cv
8.195 317.73 7.992 317.785 7.695 317.781 cv
7.395 317.785 7.191 317.727 7.082 317.609 cv
6.977 317.496 6.922 317.285 6.918 316.977 cv
6.922 316.676 6.977 316.473 7.078 316.359 cv
7.188 316.25 7.387 316.191 7.68 316.191 cv
cp
f
17.063 303.484 mo
17.109 303.488 17.145 303.496 17.168 303.516 cv
17.199 303.539 17.223 303.574 17.242 303.617 cv
17.262 303.668 17.273 303.734 17.289 303.812 cv
17.297 303.898 17.305 304 17.305 304.125 cv
17.305 304.258 17.297 304.367 17.289 304.445 cv
17.273 304.531 17.262 304.598 17.242 304.645 cv
17.223 304.699 17.199 304.734 17.168 304.75 cv
17.145 304.773 17.109 304.781 17.063 304.781 cv
12.801 304.781 li
12.508 304.781 12.238 304.809 11.992 304.859 cv
11.75 304.914 11.539 304.996 11.359 305.109 cv
11.184 305.223 11.047 305.367 10.953 305.543 cv
10.859 305.723 10.813 305.934 10.813 306.168 cv
10.813 306.465 10.93 306.762 11.156 307.059 cv
11.391 307.363 11.723 307.691 12.16 308.047 cv
17.063 308.047 li
17.109 308.051 17.145 308.062 17.168 308.078 cv
17.199 308.102 17.223 308.133 17.242 308.18 cv
17.262 308.23 17.273 308.297 17.289 308.379 cv
17.297 308.465 17.305 308.57 17.305 308.691 cv
17.305 308.812 17.297 308.914 17.289 309 cv
17.273 309.086 17.262 309.156 17.242 309.203 cv
17.223 309.258 17.199 309.289 17.168 309.305 cv
17.145 309.324 17.109 309.336 17.063 309.332 cv
12.801 309.332 li
12.508 309.336 12.238 309.363 11.992 309.418 cv
11.75 309.477 11.539 309.562 11.359 309.676 cv
11.184 309.789 11.047 309.934 10.953 310.105 cv
10.859 310.285 10.813 310.492 10.813 310.727 cv
10.813 311.027 10.93 311.324 11.156 311.625 cv
11.391 311.926 11.723 312.254 12.16 312.605 cv
17.063 312.605 li
17.109 312.609 17.145 312.621 17.168 312.637 cv
17.199 312.66 17.223 312.691 17.242 312.738 cv
17.262 312.785 17.273 312.852 17.289 312.93 cv
17.297 313.016 17.305 313.121 17.305 313.25 cv
17.305 313.379 17.297 313.484 17.289 313.562 cv
17.273 313.648 17.262 313.715 17.242 313.762 cv
17.223 313.816 17.199 313.848 17.168 313.863 cv
17.145 313.883 17.109 313.895 17.063 313.891 cv
10.051 313.891 li
10.012 313.895 9.977 313.887 9.945 313.867 cv
9.918 313.855 9.895 313.824 9.867 313.773 cv
9.848 313.73 9.832 313.668 9.82 313.594 cv
9.816 313.523 9.813 313.43 9.809 313.305 cv
9.813 313.195 9.816 313.098 9.82 313.02 cv
9.832 312.945 9.848 312.887 9.867 312.844 cv
9.895 312.805 9.918 312.777 9.945 312.758 cv
9.977 312.742 10.012 312.734 10.051 312.73 cv
10.977 312.73 li
10.535 312.34 10.215 311.957 10.008 311.582 cv
9.805 311.215 9.699 310.836 9.699 310.453 cv
9.699 310.164 9.734 309.906 9.801 309.672 cv
9.871 309.445 9.965 309.238 10.086 309.059 cv
10.207 308.883 10.352 308.734 10.52 308.605 cv
10.691 308.484 10.883 308.379 11.086 308.293 cv
10.836 308.062 10.621 307.84 10.441 307.629 cv
10.27 307.418 10.125 307.215 10.012 307.02 cv
9.906 306.824 9.828 306.637 9.773 306.453 cv
9.727 306.27 9.699 306.082 9.699 305.895 cv
9.699 305.441 9.781 305.062 9.938 304.758 cv
10.102 304.453 10.313 304.207 10.574 304.012 cv
10.84 303.824 11.148 303.687 11.504 303.605 cv
11.859 303.527 12.234 303.488 12.629 303.484 cv
cp
f
13.254 295.156 mo
13.457 295.16 13.598 295.211 13.684 295.309 cv
13.77 295.414 13.813 295.531 13.813 295.656 cv
13.813 300.273 li
14.203 300.277 14.555 300.238 14.867 300.156 cv
15.18 300.082 15.449 299.949 15.668 299.766 cv
15.895 299.586 16.066 299.352 16.184 299.055 cv
16.309 298.766 16.367 298.406 16.363 297.98 cv
16.367 297.648 16.34 297.352 16.281 297.09 cv
16.23 296.828 16.168 296.602 16.098 296.41 cv
16.031 296.223 15.973 296.066 15.914 295.941 cv
15.863 295.82 15.836 295.727 15.832 295.664 cv
15.836 295.629 15.844 295.598 15.859 295.566 cv
15.879 295.539 15.906 295.516 15.941 295.496 cv
15.98 295.484 16.031 295.473 16.094 295.461 cv
16.16 295.457 16.238 295.453 16.332 295.449 cv
16.402 295.453 16.461 295.457 16.508 295.457 cv
16.555 295.465 16.598 295.469 16.637 295.477 cv
16.676 295.484 16.711 295.5 16.742 295.516 cv
16.773 295.539 16.805 295.562 16.832 295.586 cv
16.863 295.617 16.91 295.699 16.973 295.84 cv
17.039 295.98 17.102 296.164 17.164 296.387 cv
17.227 296.613 17.281 296.871 17.332 297.164 cv
17.379 297.457 17.402 297.77 17.406 298.102 cv
17.402 298.68 17.324 299.187 17.164 299.617 cv
17.004 300.055 16.766 300.418 16.449 300.711 cv
16.133 301.012 15.738 301.234 15.258 301.383 cv
14.781 301.531 14.223 301.605 13.586 301.605 cv
12.988 301.605 12.449 301.531 11.965 301.375 cv
11.488 301.223 11.078 300.996 10.742 300.699 cv
10.406 300.406 10.148 300.051 9.969 299.637 cv
9.789 299.223 9.699 298.758 9.699 298.242 cv
9.699 297.691 9.789 297.223 9.965 296.836 cv
10.145 296.449 10.383 296.133 10.68 295.879 cv
10.98 295.633 11.332 295.449 11.73 295.332 cv
12.137 295.219 12.566 295.16 13.02 295.156 cv
cp
12.871 296.449 mo
12.195 296.434 11.664 296.586 11.281 296.902 cv
10.898 297.219 10.707 297.687 10.703 298.305 cv
10.707 298.629 10.766 298.91 10.883 299.148 cv
11.004 299.391 11.164 299.59 11.359 299.75 cv
11.559 299.914 11.789 300.039 12.051 300.125 cv
12.313 300.215 12.586 300.266 12.871 300.273 cv
cp
f
6.52 286.98 mo
7.566 287.477 8.637 287.844 9.734 288.086 cv
10.836 288.328 11.941 288.449 13.051 288.449 cv
14.168 288.449 15.277 288.328 16.371 288.078 cv
17.469 287.836 18.539 287.473 19.594 286.996 cv
19.652 286.973 19.707 286.961 19.754 286.953 cv
19.797 286.953 19.832 286.969 19.863 287.004 cv
19.891 287.043 19.91 287.098 19.926 287.172 cv
19.934 287.25 19.941 287.355 19.945 287.48 cv
19.941 287.578 19.938 287.656 19.938 287.723 cv
19.93 287.793 19.922 287.852 19.906 287.898 cv
19.891 287.949 19.871 287.992 19.852 288.02 cv
19.828 288.055 19.805 288.078 19.781 288.09 cv
19.25 288.371 18.715 288.617 18.172 288.828 cv
17.629 289.047 17.078 289.227 16.52 289.367 cv
15.957 289.516 15.391 289.625 14.816 289.695 cv
14.242 289.773 13.66 289.809 13.074 289.805 cv
12.488 289.809 11.91 289.77 11.336 289.684 cv
10.766 289.605 10.199 289.488 9.633 289.34 cv
9.07 289.191 8.516 289.012 7.969 288.801 cv
7.426 288.59 6.883 288.352 6.348 288.082 cv
6.328 288.078 6.313 288.062 6.293 288.039 cv
6.281 288.016 6.266 287.984 6.246 287.941 cv
6.234 287.902 6.223 287.844 6.211 287.77 cv
6.207 287.699 6.203 287.605 6.199 287.488 cv
6.203 287.371 6.211 287.277 6.223 287.199 cv
6.242 287.129 6.262 287.07 6.285 287.027 cv
6.313 286.988 6.348 286.965 6.387 286.957 cv
6.434 286.953 6.477 286.961 6.52 286.98 cv
cp
f
14.43 279.246 mo
14.902 279.25 15.324 279.336 15.691 279.508 cv
16.066 279.684 16.379 279.926 16.633 280.234 cv
16.891 280.543 17.082 280.906 17.211 281.324 cv
17.34 281.746 17.402 282.195 17.406 282.676 cv
17.402 283.016 17.375 283.332 17.32 283.617 cv
17.262 283.906 17.195 284.16 17.109 284.387 cv
17.031 284.613 16.945 284.805 16.852 284.957 cv
16.766 285.113 16.688 285.219 16.625 285.277 cv
16.563 285.336 16.484 285.379 16.391 285.406 cv
16.297 285.437 16.168 285.453 16.004 285.449 cv
15.891 285.453 15.797 285.449 15.719 285.434 cv
15.645 285.426 15.582 285.41 15.535 285.387 cv
15.488 285.371 15.457 285.344 15.438 285.309 cv
15.422 285.281 15.414 285.246 15.41 285.203 cv
15.414 285.133 15.457 285.031 15.543 284.895 cv
15.633 284.766 15.73 284.594 15.832 284.383 cv
15.941 284.176 16.039 283.926 16.125 283.633 cv
16.219 283.34 16.262 283 16.262 282.613 cv
16.262 282.324 16.223 282.059 16.145 281.816 cv
16.066 281.578 15.957 281.371 15.813 281.191 cv
15.672 281.02 15.496 280.883 15.285 280.789 cv
15.078 280.695 14.844 280.648 14.578 280.648 cv
14.297 280.648 14.051 280.715 13.844 280.844 cv
13.645 280.977 13.469 281.148 13.313 281.359 cv
13.164 281.574 13.023 281.816 12.891 282.09 cv
12.766 282.363 12.633 282.645 12.5 282.926 cv
12.367 283.215 12.223 283.492 12.059 283.762 cv
11.902 284.031 11.711 284.273 11.492 284.484 cv
11.273 284.703 11.02 284.875 10.723 285.004 cv
10.434 285.141 10.082 285.207 9.668 285.203 cv
9.25 285.207 8.875 285.129 8.543 284.973 cv
8.215 284.82 7.938 284.609 7.711 284.332 cv
7.492 284.062 7.32 283.738 7.203 283.359 cv
7.086 282.984 7.027 282.574 7.027 282.137 cv
7.027 281.918 7.047 281.695 7.086 281.465 cv
7.125 281.242 7.176 281.031 7.238 280.828 cv
7.305 280.633 7.379 280.453 7.457 280.293 cv
7.539 280.141 7.605 280.039 7.652 279.984 cv
7.707 279.937 7.746 279.902 7.77 279.887 cv
7.801 279.871 7.836 279.859 7.879 279.848 cv
7.926 279.84 7.98 279.832 8.039 279.824 cv
8.105 279.82 8.184 279.816 8.281 279.816 cv
8.375 279.816 8.461 279.82 8.531 279.828 cv
8.609 279.836 8.668 279.848 8.715 279.863 cv
8.762 279.879 8.797 279.902 8.82 279.93 cv
8.844 279.961 8.855 279.992 8.855 280.027 cv
8.855 280.086 8.82 280.176 8.75 280.297 cv
8.68 280.422 8.598 280.574 8.504 280.746 cv
8.414 280.926 8.332 281.133 8.254 281.371 cv
8.18 281.617 8.141 281.887 8.141 282.184 cv
8.141 282.465 8.18 282.711 8.254 282.918 cv
8.332 283.129 8.434 283.301 8.555 283.434 cv
8.68 283.57 8.824 283.672 8.996 283.738 cv
9.168 283.805 9.352 283.836 9.543 283.836 cv
9.828 283.836 10.07 283.773 10.27 283.645 cv
10.473 283.516 10.652 283.344 10.805 283.125 cv
10.965 282.914 11.105 282.668 11.234 282.391 cv
11.367 282.117 11.5 281.836 11.629 281.547 cv
11.762 281.262 11.906 280.98 12.063 280.707 cv
12.223 280.434 12.41 280.187 12.625 279.969 cv
12.844 279.754 13.098 279.582 13.391 279.445 cv
13.684 279.316 14.031 279.25 14.43 279.246 cv
cp
f
13.254 271.551 mo
13.457 271.555 13.598 271.605 13.684 271.703 cv
13.77 271.809 13.813 271.926 13.813 272.051 cv
13.813 276.668 li
14.203 276.672 14.555 276.633 14.867 276.551 cv
15.18 276.477 15.449 276.344 15.668 276.16 cv
15.895 275.98 16.066 275.746 16.184 275.449 cv
16.309 275.16 16.367 274.801 16.363 274.375 cv
16.367 274.043 16.34 273.746 16.281 273.484 cv
16.23 273.223 16.168 272.996 16.098 272.805 cv
16.031 272.617 15.973 272.461 15.914 272.336 cv
15.863 272.215 15.836 272.121 15.832 272.059 cv
15.836 272.023 15.844 271.992 15.859 271.961 cv
15.879 271.934 15.906 271.91 15.941 271.891 cv
15.98 271.879 16.031 271.867 16.094 271.855 cv
16.16 271.852 16.238 271.848 16.332 271.844 cv
16.402 271.848 16.461 271.852 16.508 271.852 cv
16.555 271.859 16.598 271.863 16.637 271.871 cv
16.676 271.879 16.711 271.895 16.742 271.91 cv
16.773 271.934 16.805 271.957 16.832 271.98 cv
16.863 272.012 16.91 272.094 16.973 272.234 cv
17.039 272.375 17.102 272.559 17.164 272.781 cv
17.227 273.008 17.281 273.266 17.332 273.559 cv
17.379 273.852 17.402 274.164 17.406 274.496 cv
17.402 275.074 17.324 275.582 17.164 276.012 cv
17.004 276.449 16.766 276.812 16.449 277.105 cv
16.133 277.406 15.738 277.629 15.258 277.777 cv
14.781 277.926 14.223 278 13.586 278 cv
12.988 278 12.449 277.926 11.965 277.77 cv
11.488 277.617 11.078 277.391 10.742 277.094 cv
10.406 276.801 10.148 276.445 9.969 276.031 cv
9.789 275.617 9.699 275.152 9.699 274.637 cv
9.699 274.086 9.789 273.617 9.965 273.23 cv
10.145 272.844 10.383 272.527 10.68 272.273 cv
10.98 272.027 11.332 271.844 11.73 271.727 cv
12.137 271.613 12.566 271.555 13.02 271.551 cv
cp
12.871 272.844 mo
12.195 272.828 11.664 272.98 11.281 273.297 cv
10.898 273.613 10.707 274.082 10.703 274.699 cv
10.707 275.023 10.766 275.305 10.883 275.543 cv
11.004 275.785 11.164 275.984 11.359 276.145 cv
11.559 276.309 11.789 276.434 12.051 276.52 cv
12.313 276.609 12.586 276.66 12.871 276.668 cv
cp
f
15.996 264.543 mo
16.09 264.543 16.164 264.547 16.227 264.551 cv
16.293 264.559 16.348 264.566 16.391 264.578 cv
16.438 264.594 16.477 264.609 16.508 264.625 cv
16.539 264.645 16.59 264.687 16.652 264.75 cv
16.723 264.816 16.801 264.926 16.895 265.082 cv
16.992 265.238 17.078 265.414 17.152 265.609 cv
17.227 265.805 17.285 266.016 17.336 266.242 cv
17.379 266.473 17.402 266.711 17.406 266.949 cv
17.402 267.457 17.324 267.902 17.156 268.293 cv
16.992 268.684 16.75 269.012 16.43 269.27 cv
16.113 269.535 15.719 269.734 15.254 269.871 cv
14.789 270.008 14.254 270.074 13.641 270.074 cv
12.953 270.074 12.359 269.992 11.863 269.824 cv
11.367 269.656 10.961 269.426 10.645 269.129 cv
10.328 268.84 10.094 268.492 9.938 268.094 cv
9.789 267.695 9.711 267.266 9.707 266.805 cv
9.711 266.582 9.73 266.367 9.77 266.152 cv
9.813 265.945 9.867 265.75 9.934 265.574 cv
10.004 265.398 10.082 265.242 10.168 265.102 cv
10.254 264.965 10.328 264.863 10.391 264.801 cv
10.453 264.738 10.504 264.695 10.539 264.672 cv
10.578 264.648 10.621 264.629 10.668 264.613 cv
10.719 264.598 10.773 264.59 10.836 264.582 cv
10.898 264.582 10.977 264.578 11.07 264.574 cv
11.273 264.578 11.418 264.602 11.496 264.645 cv
11.582 264.695 11.621 264.754 11.617 264.816 cv
11.621 264.898 11.578 264.988 11.488 265.086 cv
11.406 265.191 11.313 265.32 11.203 265.473 cv
11.102 265.629 11.004 265.816 10.918 266.035 cv
10.832 266.262 10.789 266.523 10.789 266.82 cv
10.789 267.441 11.027 267.914 11.504 268.242 cv
11.98 268.574 12.672 268.738 13.57 268.734 cv
14.027 268.738 14.422 268.695 14.762 268.605 cv
15.102 268.523 15.387 268.398 15.613 268.23 cv
15.844 268.066 16.016 267.863 16.125 267.617 cv
16.242 267.379 16.297 267.102 16.293 266.789 cv
16.297 266.496 16.25 266.234 16.152 266.008 cv
16.063 265.785 15.961 265.594 15.844 265.43 cv
15.734 265.27 15.633 265.133 15.539 265.016 cv
15.453 264.906 15.406 264.816 15.402 264.754 cv
15.406 264.719 15.418 264.687 15.434 264.66 cv
15.457 264.637 15.492 264.617 15.539 264.594 cv
15.594 264.578 15.656 264.562 15.727 264.555 cv
15.805 264.547 15.895 264.543 15.996 264.543 cv
cp
f
13.477 256.488 mo
14.055 256.492 14.582 256.566 15.059 256.715 cv
15.543 256.867 15.957 257.094 16.301 257.391 cv
16.652 257.691 16.922 258.066 17.113 258.512 cv
17.309 258.965 17.402 259.484 17.406 260.074 cv
17.402 260.652 17.32 261.156 17.148 261.582 cv
16.98 262.012 16.73 262.367 16.402 262.652 cv
16.074 262.941 15.68 263.156 15.211 263.293 cv
14.746 263.434 14.215 263.5 13.617 263.5 cv
13.051 263.5 12.523 263.43 12.043 263.281 cv
11.563 263.137 11.148 262.91 10.797 262.609 cv
10.449 262.312 10.18 261.941 9.988 261.492 cv
9.797 261.047 9.699 260.523 9.699 259.926 cv
9.699 259.348 9.785 258.848 9.957 258.418 cv
10.129 257.992 10.379 257.633 10.707 257.348 cv
11.035 257.062 11.434 256.848 11.898 256.703 cv
12.367 256.562 12.895 256.492 13.477 256.488 cv
cp
13.563 257.82 mo
13.188 257.824 12.828 257.859 12.488 257.926 cv
12.152 258 11.859 258.117 11.602 258.277 cv
11.352 258.441 11.148 258.66 10.996 258.937 cv
10.852 259.219 10.777 259.566 10.773 259.977 cv
10.777 260.363 10.844 260.691 10.977 260.965 cv
11.113 261.242 11.305 261.469 11.551 261.645 cv
11.797 261.824 12.09 261.957 12.426 262.039 cv
12.766 262.129 13.133 262.172 13.531 262.168 cv
13.918 262.172 14.281 262.137 14.617 262.062 cv
14.957 261.996 15.25 261.879 15.5 261.711 cv
15.754 261.547 15.957 261.324 16.102 261.047 cv
16.254 260.77 16.328 260.422 16.324 260.008 cv
16.328 259.633 16.258 259.305 16.121 259.023 cv
15.988 258.746 15.801 258.52 15.551 258.34 cv
15.309 258.164 15.016 258.035 14.68 257.949 cv
14.344 257.867 13.973 257.824 13.563 257.82 cv
cp
f
17.063 248.562 mo
17.109 248.562 17.145 248.574 17.168 248.594 cv
17.199 248.617 17.223 248.652 17.242 248.695 cv
17.262 248.746 17.273 248.809 17.289 248.891 cv
17.297 248.973 17.305 249.078 17.305 249.199 cv
17.305 249.332 17.297 249.437 17.289 249.52 cv
17.273 249.605 17.262 249.672 17.242 249.715 cv
17.223 249.766 17.199 249.797 17.168 249.816 cv
17.145 249.84 17.109 249.852 17.063 249.848 cv
12.957 249.848 li
12.559 249.852 12.238 249.883 11.992 249.941 cv
11.75 250.008 11.539 250.098 11.359 250.215 cv
11.184 250.332 11.047 250.488 10.953 250.676 cv
10.859 250.871 10.813 251.09 10.813 251.336 cv
10.813 251.66 10.93 251.984 11.156 252.305 cv
11.391 252.629 11.723 252.965 12.16 253.316 cv
17.063 253.316 li
17.109 253.32 17.145 253.332 17.168 253.348 cv
17.199 253.371 17.223 253.402 17.242 253.449 cv
17.262 253.496 17.273 253.562 17.289 253.641 cv
17.297 253.727 17.305 253.832 17.305 253.961 cv
17.305 254.09 17.297 254.195 17.289 254.273 cv
17.273 254.359 17.262 254.426 17.242 254.473 cv
17.223 254.527 17.199 254.559 17.168 254.574 cv
17.145 254.594 17.109 254.605 17.063 254.602 cv
10.051 254.602 li
10.012 254.605 9.977 254.598 9.945 254.578 cv
9.918 254.566 9.895 254.535 9.867 254.484 cv
9.848 254.441 9.832 254.379 9.82 254.305 cv
9.816 254.234 9.813 254.141 9.809 254.016 cv
9.813 253.906 9.816 253.809 9.82 253.73 cv
9.832 253.656 9.848 253.598 9.867 253.555 cv
9.895 253.516 9.918 253.488 9.945 253.469 cv
9.977 253.453 10.012 253.445 10.051 253.441 cv
10.977 253.441 li
10.535 253.051 10.215 252.656 10.008 252.262 cv
9.805 251.871 9.699 251.473 9.699 251.07 cv
9.699 250.602 9.781 250.211 9.938 249.891 cv
10.102 249.574 10.313 249.312 10.574 249.113 cv
10.84 248.918 11.148 248.777 11.504 248.691 cv
11.859 248.605 12.289 248.562 12.785 248.562 cv
cp
f
17.063 240.215 mo
17.109 240.219 17.145 240.227 17.172 240.242 cv
17.207 240.262 17.23 240.293 17.246 240.336 cv
17.262 240.379 17.273 240.437 17.289 240.508 cv
17.297 240.582 17.305 240.672 17.305 240.773 cv
17.305 240.887 17.297 240.977 17.289 241.047 cv
17.273 241.121 17.262 241.18 17.246 241.227 cv
17.23 241.273 17.207 241.309 17.172 241.328 cv
17.145 241.352 17.109 241.363 17.063 241.359 cv
16.137 241.359 li
16.539 241.734 16.848 242.117 17.07 242.512 cv
17.293 242.91 17.402 243.344 17.406 243.812 cv
17.402 244.332 17.305 244.773 17.105 245.133 cv
16.906 245.5 16.637 245.793 16.297 246.016 cv
15.957 246.246 15.559 246.41 15.098 246.512 cv
14.641 246.613 14.156 246.664 13.641 246.664 cv
13.043 246.664 12.5 246.602 12.012 246.473 cv
11.527 246.344 11.109 246.152 10.766 245.895 cv
10.422 245.645 10.16 245.328 9.977 244.949 cv
9.793 244.574 9.699 244.137 9.699 243.641 cv
9.699 243.234 9.789 242.859 9.969 242.516 cv
10.148 242.176 10.414 241.84 10.758 241.508 cv
6.684 241.508 li
6.648 241.508 6.613 241.5 6.578 241.48 cv
6.547 241.465 6.52 241.43 6.5 241.375 cv
6.484 241.324 6.469 241.258 6.453 241.176 cv
6.441 241.098 6.438 240.996 6.434 240.867 cv
6.438 240.742 6.441 240.633 6.453 240.547 cv
6.469 240.465 6.484 240.402 6.5 240.355 cv
6.52 240.312 6.547 240.277 6.578 240.25 cv
6.613 240.23 6.648 240.219 6.684 240.215 cv
cp
12.129 241.508 mo
11.703 241.855 11.375 242.191 11.145 242.516 cv
10.922 242.844 10.809 243.184 10.805 243.531 cv
10.809 243.863 10.887 244.141 11.039 244.367 cv
11.199 244.598 11.402 244.785 11.656 244.926 cv
11.91 245.07 12.199 245.172 12.52 245.234 cv
12.844 245.301 13.172 245.336 13.5 245.332 cv
13.859 245.336 14.203 245.309 14.539 245.25 cv
14.875 245.199 15.176 245.105 15.438 244.969 cv
15.703 244.836 15.914 244.656 16.07 244.43 cv
16.23 244.211 16.309 243.93 16.309 243.586 cv
16.309 243.422 16.285 243.258 16.238 243.094 cv
16.191 242.937 16.113 242.773 16.004 242.605 cv
15.895 242.441 15.754 242.27 15.578 242.086 cv
15.406 241.906 15.191 241.711 14.934 241.508 cv
cp
f
15.152 233.441 mo
15.516 233.445 15.836 233.512 16.113 233.641 cv
16.395 233.773 16.629 233.961 16.82 234.203 cv
17.016 234.449 17.16 234.742 17.258 235.078 cv
17.355 235.418 17.402 235.789 17.406 236.191 cv
17.402 236.445 17.383 236.684 17.348 236.906 cv
17.305 237.133 17.258 237.332 17.199 237.512 cv
17.141 237.691 17.078 237.844 17.012 237.969 cv
16.949 238.094 16.891 238.187 16.836 238.242 cv
16.785 238.301 16.715 238.34 16.617 238.363 cv
16.527 238.391 16.398 238.402 16.238 238.402 cv
16.141 238.402 16.059 238.398 15.988 238.387 cv
15.922 238.379 15.867 238.367 15.824 238.348 cv
15.785 238.336 15.754 238.312 15.734 238.285 cv
15.719 238.258 15.711 238.227 15.707 238.187 cv
15.711 238.133 15.746 238.047 15.813 237.934 cv
15.887 237.824 15.965 237.687 16.043 237.52 cv
16.129 237.359 16.203 237.168 16.273 236.941 cv
16.344 236.723 16.379 236.465 16.379 236.168 cv
16.379 235.953 16.355 235.754 16.309 235.574 cv
16.262 235.398 16.195 235.246 16.102 235.117 cv
16.016 234.988 15.898 234.887 15.754 234.816 cv
15.617 234.746 15.449 234.711 15.254 234.711 cv
15.059 234.711 14.895 234.762 14.758 234.863 cv
14.625 234.965 14.504 235.102 14.398 235.266 cv
14.297 235.434 14.207 235.617 14.121 235.824 cv
14.043 236.035 13.957 236.25 13.867 236.469 cv
13.781 236.687 13.68 236.902 13.566 237.113 cv
13.457 237.324 13.324 237.516 13.16 237.68 cv
13.004 237.852 12.809 237.984 12.582 238.082 cv
12.359 238.187 12.094 238.238 11.781 238.234 cv
11.508 238.238 11.242 238.184 10.988 238.074 cv
10.738 237.969 10.52 237.809 10.328 237.594 cv
10.141 237.383 9.988 237.117 9.871 236.797 cv
9.758 236.477 9.699 236.105 9.699 235.676 cv
9.699 235.492 9.715 235.305 9.746 235.117 cv
9.777 234.934 9.816 234.766 9.863 234.609 cv
9.91 234.461 9.961 234.332 10.016 234.223 cv
10.07 234.121 10.121 234.039 10.16 233.98 cv
10.207 233.93 10.242 233.895 10.27 233.871 cv
10.301 233.855 10.336 233.84 10.371 233.832 cv
10.414 233.824 10.461 233.816 10.516 233.809 cv
10.574 233.801 10.645 233.797 10.727 233.797 cv
10.816 233.797 10.895 233.801 10.957 233.809 cv
11.027 233.816 11.078 233.832 11.117 233.848 cv
11.16 233.871 11.191 233.891 11.207 233.914 cv
11.227 233.941 11.234 233.973 11.234 234 cv
11.234 234.051 11.207 234.117 11.148 234.203 cv
11.094 234.293 11.031 234.406 10.965 234.547 cv
10.902 234.687 10.844 234.855 10.781 235.043 cv
10.727 235.234 10.695 235.449 10.695 235.691 cv
10.695 235.914 10.723 236.105 10.77 236.27 cv
10.824 236.437 10.895 236.574 10.98 236.68 cv
11.074 236.785 11.18 236.867 11.305 236.918 cv
11.43 236.977 11.566 237.004 11.711 237 cv
11.914 237.004 12.082 236.953 12.219 236.848 cv
12.359 236.746 12.48 236.609 12.582 236.441 cv
12.688 236.277 12.781 236.086 12.863 235.871 cv
12.949 235.66 13.035 235.445 13.121 235.223 cv
13.211 235.004 13.313 234.785 13.418 234.566 cv
13.527 234.352 13.656 234.16 13.813 233.992 cv
13.969 233.828 14.156 233.695 14.375 233.594 cv
14.594 233.496 14.855 233.445 15.152 233.441 cv
cp
f
13.074 228.996 mo
13.66 228.996 14.242 229.035 14.816 229.105 cv
15.391 229.184 15.957 229.293 16.52 229.434 cv
17.078 229.582 17.629 229.758 18.172 229.969 cv
18.715 230.18 19.25 230.426 19.781 230.703 cv
19.805 230.723 19.828 230.746 19.852 230.773 cv
19.871 230.809 19.891 230.848 19.906 230.895 cv
19.922 230.945 19.93 231.004 19.938 231.07 cv
19.938 231.141 19.941 231.223 19.945 231.312 cv
19.941 231.449 19.934 231.555 19.926 231.629 cv
19.91 231.707 19.891 231.762 19.863 231.793 cv
19.832 231.828 19.797 231.844 19.754 231.84 cv
19.707 231.84 19.652 231.824 19.594 231.797 cv
18.543 231.32 17.473 230.961 16.375 230.715 cv
15.277 230.473 14.168 230.352 13.051 230.348 cv
11.941 230.352 10.836 230.473 9.734 230.715 cv
8.637 230.961 7.566 231.328 6.52 231.812 cv
6.477 231.836 6.434 231.844 6.387 231.836 cv
6.348 231.836 6.313 231.812 6.285 231.766 cv
6.262 231.727 6.242 231.668 6.223 231.594 cv
6.211 231.523 6.203 231.426 6.199 231.305 cv
6.203 231.195 6.207 231.105 6.211 231.031 cv
6.223 230.961 6.234 230.902 6.246 230.855 cv
6.266 230.812 6.281 230.781 6.293 230.758 cv
6.313 230.742 6.328 230.727 6.348 230.711 cv
7.414 230.18 8.512 229.758 9.633 229.453 cv
10.762 229.148 11.906 228.996 13.074 228.996 cv
cp
f
295.742 527.445 mo
295.738 527.551 295.723 527.641 295.688 527.711 cv
295.652 527.789 295.605 527.848 295.551 527.891 cv
295.492 527.941 295.43 527.977 295.363 527.992 cv
295.289 528.016 295.219 528.023 295.156 528.023 cv
294.711 528.023 li
294.57 528.023 294.449 528.012 294.344 527.98 cv
294.238 527.957 294.141 527.902 294.047 527.824 cv
293.953 527.75 293.859 527.648 293.766 527.516 cv
293.672 527.387 293.57 527.223 293.465 527.02 cv
290.391 521.281 li
290.227 520.988 290.063 520.68 289.902 520.352 cv
289.734 520.031 289.582 519.715 289.445 519.406 cv
289.43 519.406 li
289.438 519.781 289.445 520.164 289.453 520.551 cv
289.457 520.941 289.457 521.328 289.461 521.711 cv
289.461 527.797 li
289.457 527.836 289.445 527.871 289.426 527.902 cv
289.402 527.937 289.367 527.965 289.316 527.98 cv
289.262 528 289.191 528.012 289.109 528.027 cv
289.023 528.039 288.918 528.047 288.789 528.047 cv
288.652 528.047 288.543 528.039 288.461 528.027 cv
288.375 528.012 288.309 528 288.262 527.98 cv
288.211 527.965 288.176 527.937 288.152 527.902 cv
288.129 527.871 288.117 527.836 288.121 527.797 cv
288.121 518.492 li
288.117 518.285 288.176 518.137 288.297 518.047 cv
288.414 517.961 288.543 517.918 288.684 517.914 cv
289.344 517.914 li
289.496 517.918 289.629 517.93 289.734 517.953 cv
289.836 517.98 289.93 518.023 290.016 518.082 cv
290.098 518.145 290.176 518.227 290.258 518.332 cv
290.332 518.441 290.414 518.578 290.5 518.734 cv
292.867 523.16 li
293.012 523.434 293.152 523.699 293.289 523.953 cv
293.422 524.211 293.551 524.465 293.68 524.711 cv
293.801 524.965 293.926 525.211 294.051 525.449 cv
294.172 525.691 294.293 525.934 294.418 526.176 cv
294.426 526.176 li
294.414 525.77 294.406 525.34 294.406 524.895 cv
294.398 524.449 294.398 524.023 294.402 523.613 cv
294.402 518.141 li
294.398 518.105 294.41 518.07 294.434 518.039 cv
294.457 518.008 294.492 517.98 294.547 517.957 cv
294.594 517.934 294.664 517.918 294.75 517.906 cv
294.836 517.898 294.945 517.895 295.086 517.891 cv
295.203 517.895 295.309 517.898 295.398 517.906 cv
295.484 517.918 295.551 517.934 295.602 517.957 cv
295.648 517.98 295.684 518.008 295.707 518.039 cv
295.727 518.07 295.738 518.105 295.742 518.141 cv
cp
f
304.289 527.805 mo
304.285 527.852 304.277 527.887 304.262 527.91 cv
304.242 527.941 304.207 527.965 304.164 527.984 cv
304.117 528.004 304.059 528.016 303.984 528.031 cv
303.906 528.039 303.813 528.047 303.707 528.047 cv
303.582 528.047 303.484 528.039 303.414 528.031 cv
303.336 528.016 303.277 528.004 303.234 527.984 cv
303.188 527.965 303.156 527.941 303.145 527.91 cv
303.125 527.887 303.117 527.852 303.121 527.805 cv
303.121 526.879 li
302.719 527.324 302.324 527.645 301.938 527.844 cv
301.543 528.047 301.148 528.145 300.754 528.148 cv
300.281 528.145 299.887 528.07 299.57 527.914 cv
299.25 527.762 298.992 527.551 298.797 527.281 cv
298.594 527.016 298.453 526.703 298.371 526.344 cv
298.281 525.988 298.238 525.555 298.242 525.047 cv
298.242 520.793 li
298.238 520.754 298.246 520.719 298.27 520.687 cv
298.285 520.66 298.32 520.637 298.375 520.609 cv
298.422 520.59 298.492 520.574 298.578 520.562 cv
298.66 520.559 298.762 520.555 298.891 520.551 cv
299.012 520.555 299.117 520.559 299.203 520.562 cv
299.285 520.574 299.352 520.59 299.398 520.609 cv
299.445 520.637 299.48 520.66 299.504 520.687 cv
299.523 520.719 299.531 520.754 299.535 520.793 cv
299.535 524.875 li
299.531 525.289 299.563 525.617 299.625 525.863 cv
299.684 526.109 299.773 526.32 299.898 526.492 cv
300.016 526.672 300.172 526.805 300.363 526.898 cv
300.547 526.996 300.766 527.047 301.016 527.043 cv
301.336 527.047 301.656 526.93 301.98 526.699 cv
302.297 526.473 302.637 526.137 302.996 525.691 cv
302.996 520.793 li
302.996 520.754 303.004 520.719 303.023 520.687 cv
303.039 520.66 303.074 520.637 303.129 520.609 cv
303.18 520.59 303.246 520.574 303.328 520.562 cv
303.406 520.559 303.512 520.555 303.645 520.551 cv
303.766 520.555 303.871 520.559 303.957 520.562 cv
304.039 520.574 304.102 520.59 304.148 520.609 cv
304.191 520.637 304.227 520.66 304.254 520.687 cv
304.273 520.719 304.285 520.754 304.289 520.793 cv
cp
f
317.066 527.805 mo
317.063 527.852 317.055 527.887 317.035 527.91 cv
317.012 527.941 316.977 527.965 316.934 527.984 cv
316.883 528.004 316.816 528.016 316.738 528.031 cv
316.652 528.039 316.551 528.047 316.426 528.047 cv
316.293 528.047 316.184 528.039 316.105 528.031 cv
316.02 528.016 315.953 528.004 315.906 527.984 cv
315.852 527.965 315.816 527.941 315.801 527.91 cv
315.777 527.887 315.77 527.852 315.77 527.805 cv
315.77 523.543 li
315.77 523.25 315.742 522.98 315.691 522.734 cv
315.637 522.492 315.555 522.281 315.441 522.102 cv
315.328 521.926 315.184 521.789 315.008 521.695 cv
314.828 521.602 314.617 521.555 314.383 521.555 cv
314.086 521.555 313.789 521.672 313.492 521.898 cv
313.188 522.133 312.859 522.465 312.504 522.902 cv
312.504 527.805 li
312.5 527.852 312.488 527.887 312.473 527.91 cv
312.449 527.941 312.418 527.965 312.371 527.984 cv
312.32 528.004 312.254 528.016 312.172 528.031 cv
312.086 528.039 311.98 528.047 311.859 528.047 cv
311.738 528.047 311.637 528.039 311.551 528.031 cv
311.465 528.016 311.395 528.004 311.348 527.984 cv
311.293 527.965 311.262 527.941 311.246 527.91 cv
311.227 527.887 311.215 527.852 311.219 527.805 cv
311.219 523.543 li
311.215 523.25 311.188 522.98 311.133 522.734 cv
311.074 522.492 310.988 522.281 310.875 522.102 cv
310.762 521.926 310.617 521.789 310.445 521.695 cv
310.266 521.602 310.059 521.555 309.824 521.555 cv
309.523 521.555 309.227 521.672 308.926 521.898 cv
308.625 522.133 308.297 522.465 307.945 522.902 cv
307.945 527.805 li
307.941 527.852 307.93 527.887 307.914 527.91 cv
307.891 527.941 307.859 527.965 307.813 527.984 cv
307.766 528.004 307.699 528.016 307.621 528.031 cv
307.535 528.039 307.43 528.047 307.301 528.047 cv
307.172 528.047 307.066 528.039 306.988 528.031 cv
306.902 528.016 306.836 528.004 306.789 527.984 cv
306.734 527.965 306.703 527.941 306.688 527.91 cv
306.668 527.887 306.656 527.852 306.66 527.805 cv
306.66 520.793 li
306.656 520.754 306.664 520.719 306.684 520.687 cv
306.695 520.66 306.727 520.637 306.777 520.609 cv
306.82 520.59 306.883 520.574 306.957 520.562 cv
307.027 520.559 307.121 520.555 307.246 520.551 cv
307.355 520.555 307.453 520.559 307.531 520.562 cv
307.605 520.574 307.664 520.59 307.707 520.609 cv
307.746 520.637 307.773 520.66 307.793 520.687 cv
307.809 520.719 307.816 520.754 307.82 520.793 cv
307.82 521.719 li
308.211 521.277 308.594 520.957 308.969 520.75 cv
309.336 520.547 309.715 520.441 310.098 520.441 cv
310.387 520.441 310.645 520.477 310.879 520.543 cv
311.105 520.613 311.313 520.707 311.492 520.828 cv
311.668 520.949 311.816 521.094 311.945 521.262 cv
312.066 521.434 312.172 521.625 312.258 521.828 cv
312.488 521.578 312.711 521.363 312.922 521.184 cv
313.133 521.012 313.336 520.867 313.531 520.754 cv
313.727 520.648 313.914 520.57 314.098 520.516 cv
314.281 520.469 314.469 520.441 314.656 520.441 cv
315.109 520.441 315.488 520.523 315.793 520.68 cv
316.098 520.844 316.344 521.055 316.539 521.316 cv
316.727 521.582 316.863 521.891 316.945 522.246 cv
317.023 522.602 317.063 522.977 317.066 523.371 cv
cp
f
325.867 524.203 mo
325.863 524.812 325.797 525.363 325.668 525.848 cv
325.531 526.336 325.336 526.75 325.082 527.09 cv
324.824 527.434 324.508 527.695 324.137 527.875 cv
323.762 528.059 323.336 528.145 322.852 528.148 cv
322.625 528.145 322.418 528.125 322.23 528.082 cv
322.043 528.035 321.855 527.965 321.676 527.867 cv
321.488 527.77 321.309 527.645 321.129 527.492 cv
320.945 527.344 320.754 527.164 320.555 526.949 cv
320.555 527.805 li
320.555 527.852 320.543 527.887 320.523 527.914 cv
320.5 527.949 320.465 527.973 320.422 527.988 cv
320.371 528.004 320.313 528.016 320.246 528.031 cv
320.172 528.039 320.082 528.047 319.977 528.047 cv
319.867 528.047 319.781 528.039 319.711 528.031 cv
319.637 528.016 319.574 528.004 319.531 527.988 cv
319.48 527.973 319.449 527.949 319.438 527.914 cv
319.418 527.887 319.41 527.852 319.414 527.805 cv
319.414 517.395 li
319.41 517.355 319.422 517.32 319.441 517.285 cv
319.457 517.258 319.488 517.23 319.543 517.207 cv
319.59 517.187 319.656 517.172 319.742 517.16 cv
319.82 517.152 319.926 517.148 320.055 517.145 cv
320.184 517.148 320.289 517.152 320.375 517.16 cv
320.453 517.172 320.52 517.187 320.566 517.207 cv
320.613 517.23 320.645 517.258 320.668 517.285 cv
320.684 517.32 320.695 517.355 320.699 517.395 cv
320.699 521.594 li
320.906 521.383 321.109 521.203 321.305 521.059 cv
321.5 520.914 321.688 520.797 321.875 520.703 cv
322.059 520.617 322.246 520.551 322.438 520.504 cv
322.621 520.465 322.82 520.441 323.031 520.441 cv
323.535 520.441 323.969 520.543 324.336 520.746 cv
324.695 520.949 324.988 521.223 325.215 521.559 cv
325.438 521.902 325.605 522.301 325.711 522.758 cv
325.813 523.215 325.863 523.695 325.867 524.203 cv
cp
324.535 524.352 mo
324.531 523.996 324.504 523.648 324.453 523.309 cv
324.395 522.973 324.301 522.676 324.164 522.414 cv
324.027 522.156 323.848 521.945 323.625 521.785 cv
323.398 521.629 323.117 521.551 322.785 521.547 cv
322.617 521.551 322.453 521.574 322.293 521.617 cv
322.129 521.668 321.965 521.746 321.797 521.852 cv
321.629 521.965 321.453 522.105 321.277 522.273 cv
321.094 522.449 320.902 522.664 320.699 522.918 cv
320.699 525.715 li
321.055 526.148 321.395 526.48 321.719 526.703 cv
322.043 526.934 322.379 527.047 322.73 527.043 cv
323.051 527.047 323.328 526.969 323.563 526.809 cv
323.789 526.656 323.977 526.449 324.121 526.187 cv
324.266 525.934 324.371 525.645 324.438 525.324 cv
324.5 525.008 324.531 524.684 324.535 524.352 cv
cp
f
333.777 523.996 mo
333.773 524.199 333.723 524.34 333.625 524.426 cv
333.52 524.512 333.402 524.555 333.277 524.555 cv
328.66 524.555 li
328.656 524.945 328.695 525.297 328.777 525.609 cv
328.852 525.922 328.984 526.191 329.168 526.41 cv
329.348 526.637 329.582 526.809 329.879 526.926 cv
330.168 527.051 330.527 527.109 330.953 527.105 cv
331.285 527.109 331.582 527.082 331.844 527.023 cv
332.105 526.973 332.332 526.91 332.523 526.84 cv
332.711 526.773 332.867 526.715 332.992 526.656 cv
333.113 526.605 333.207 526.578 333.27 526.574 cv
333.305 526.578 333.336 526.586 333.367 526.602 cv
333.395 526.621 333.418 526.648 333.438 526.684 cv
333.449 526.723 333.461 526.773 333.473 526.836 cv
333.477 526.902 333.48 526.98 333.484 527.074 cv
333.48 527.145 333.477 527.203 333.477 527.25 cv
333.469 527.297 333.465 527.34 333.457 527.379 cv
333.449 527.418 333.434 527.453 333.418 527.484 cv
333.395 527.516 333.371 527.547 333.348 527.574 cv
333.316 527.605 333.234 527.652 333.094 527.715 cv
332.953 527.781 332.77 527.844 332.547 527.906 cv
332.32 527.969 332.063 528.023 331.77 528.074 cv
331.477 528.121 331.164 528.145 330.832 528.148 cv
330.254 528.145 329.746 528.066 329.316 527.906 cv
328.879 527.746 328.516 527.508 328.223 527.191 cv
327.922 526.875 327.699 526.48 327.551 526 cv
327.402 525.523 327.328 524.965 327.328 524.328 cv
327.328 523.73 327.402 523.191 327.559 522.707 cv
327.711 522.23 327.938 521.82 328.234 521.484 cv
328.527 521.148 328.883 520.891 329.297 520.711 cv
329.711 520.531 330.176 520.441 330.691 520.441 cv
331.242 520.441 331.711 520.531 332.098 520.707 cv
332.484 520.887 332.801 521.125 333.055 521.422 cv
333.301 521.723 333.484 522.074 333.602 522.473 cv
333.715 522.879 333.773 523.309 333.777 523.762 cv
cp
332.484 523.613 mo
332.5 522.937 332.348 522.406 332.031 522.023 cv
331.715 521.641 331.246 521.449 330.629 521.445 cv
330.305 521.449 330.023 521.508 329.785 521.625 cv
329.543 521.746 329.344 521.906 329.184 522.102 cv
329.02 522.301 328.895 522.531 328.809 522.793 cv
328.719 523.055 328.668 523.328 328.66 523.613 cv
cp
f
339.84 521.25 mo
339.836 521.367 339.836 521.465 339.832 521.539 cv
339.824 521.621 339.813 521.684 339.801 521.723 cv
339.781 521.77 339.762 521.801 339.742 521.824 cv
339.715 521.848 339.684 521.859 339.645 521.859 cv
339.602 521.859 339.551 521.848 339.492 521.824 cv
339.43 521.801 339.359 521.777 339.289 521.754 cv
339.211 521.73 339.129 521.711 339.035 521.687 cv
338.941 521.672 338.84 521.66 338.73 521.656 cv
338.598 521.66 338.469 521.687 338.348 521.734 cv
338.223 521.789 338.094 521.875 337.957 521.992 cv
337.816 522.117 337.672 522.273 337.523 522.469 cv
337.371 522.664 337.203 522.906 337.023 523.191 cv
337.023 527.805 li
337.02 527.852 337.008 527.887 336.992 527.91 cv
336.969 527.941 336.938 527.965 336.891 527.984 cv
336.844 528.004 336.777 528.016 336.699 528.031 cv
336.613 528.039 336.508 528.047 336.379 528.047 cv
336.25 528.047 336.145 528.039 336.066 528.031 cv
335.98 528.016 335.914 528.004 335.867 527.984 cv
335.813 527.965 335.781 527.941 335.766 527.91 cv
335.746 527.887 335.734 527.852 335.738 527.805 cv
335.738 520.793 li
335.734 520.754 335.742 520.719 335.762 520.687 cv
335.773 520.66 335.805 520.637 335.855 520.609 cv
335.898 520.59 335.961 520.574 336.035 520.562 cv
336.105 520.559 336.199 520.555 336.324 520.551 cv
336.434 520.555 336.531 520.559 336.609 520.562 cv
336.684 520.574 336.742 520.59 336.785 520.609 cv
336.824 520.637 336.852 520.66 336.871 520.687 cv
336.887 520.719 336.895 520.754 336.898 520.793 cv
336.898 521.812 li
337.086 521.531 337.27 521.305 337.441 521.129 cv
337.609 520.953 337.77 520.812 337.922 520.711 cv
338.07 520.609 338.219 520.539 338.367 520.5 cv
338.516 520.461 338.664 520.441 338.816 520.441 cv
338.883 520.441 338.961 520.445 339.047 520.453 cv
339.133 520.461 339.223 520.477 339.316 520.496 cv
339.41 520.52 339.492 520.543 339.57 520.566 cv
339.641 520.594 339.695 520.621 339.73 520.645 cv
339.758 520.676 339.777 520.699 339.793 520.719 cv
339.801 520.746 339.813 520.777 339.82 520.809 cv
339.828 520.848 339.832 520.898 339.836 520.969 cv
339.836 521.039 339.836 521.133 339.84 521.25 cv
cp
f
351.602 524.219 mo
351.598 524.797 351.523 525.324 351.375 525.801 cv
351.223 526.285 350.996 526.699 350.699 527.043 cv
350.398 527.395 350.023 527.664 349.578 527.855 cv
349.125 528.051 348.605 528.145 348.016 528.148 cv
347.438 528.145 346.934 528.062 346.508 527.891 cv
346.078 527.723 345.723 527.473 345.438 527.145 cv
345.148 526.816 344.934 526.422 344.797 525.953 cv
344.656 525.488 344.59 524.957 344.59 524.359 cv
344.59 523.793 344.66 523.266 344.809 522.785 cv
344.953 522.305 345.18 521.891 345.48 521.539 cv
345.777 521.191 346.148 520.922 346.598 520.73 cv
347.043 520.539 347.566 520.441 348.164 520.441 cv
348.742 520.441 349.242 520.527 349.672 520.699 cv
350.098 520.871 350.457 521.121 350.742 521.449 cv
351.027 521.777 351.242 522.176 351.387 522.641 cv
351.527 523.109 351.598 523.637 351.602 524.219 cv
cp
350.27 524.305 mo
350.266 523.93 350.23 523.57 350.164 523.23 cv
350.09 522.895 349.973 522.602 349.813 522.344 cv
349.648 522.094 349.43 521.891 349.152 521.738 cv
348.871 521.594 348.523 521.52 348.113 521.516 cv
347.727 521.52 347.398 521.586 347.125 521.719 cv
346.848 521.855 346.621 522.047 346.445 522.293 cv
346.266 522.539 346.133 522.832 346.051 523.168 cv
345.961 523.508 345.918 523.875 345.922 524.273 cv
345.918 524.66 345.953 525.023 346.027 525.359 cv
346.094 525.699 346.211 525.992 346.379 526.242 cv
346.543 526.496 346.766 526.699 347.043 526.844 cv
347.32 526.996 347.668 527.07 348.082 527.066 cv
348.457 527.07 348.785 527 349.066 526.863 cv
349.344 526.73 349.57 526.543 349.75 526.293 cv
349.926 526.051 350.055 525.758 350.141 525.422 cv
350.223 525.086 350.266 524.715 350.27 524.305 cv
cp
f
357.332 517.906 mo
357.328 518.008 357.324 518.086 357.316 518.145 cv
357.305 518.207 357.293 518.258 357.281 518.289 cv
357.266 518.328 357.25 518.352 357.23 518.363 cv
357.207 518.379 357.18 518.387 357.152 518.383 cv
357.113 518.387 357.066 518.375 357.016 518.348 cv
356.957 518.328 356.891 518.301 356.816 518.27 cv
356.734 518.242 356.645 518.215 356.539 518.191 cv
356.43 518.168 356.305 518.156 356.172 518.156 cv
355.977 518.156 355.813 518.187 355.68 518.25 cv
355.539 518.312 355.43 518.41 355.352 518.543 cv
355.266 518.676 355.207 518.848 355.172 519.059 cv
355.133 519.27 355.113 519.527 355.117 519.824 cv
355.117 520.59 li
356.684 520.59 li
356.723 520.594 356.758 520.602 356.789 520.617 cv
356.816 520.637 356.844 520.668 356.867 520.711 cv
356.891 520.758 356.906 520.816 356.922 520.879 cv
356.93 520.949 356.938 521.031 356.941 521.125 cv
356.938 521.316 356.914 521.449 356.871 521.531 cv
356.82 521.617 356.758 521.66 356.684 521.656 cv
355.117 521.656 li
355.117 527.805 li
355.113 527.852 355.105 527.887 355.086 527.91 cv
355.063 527.941 355.027 527.965 354.98 527.984 cv
354.93 528.004 354.863 528.016 354.781 528.031 cv
354.695 528.039 354.59 528.047 354.473 528.047 cv
354.344 528.047 354.242 528.039 354.16 528.031 cv
354.074 528.016 354.008 528.004 353.961 527.984 cv
353.91 527.965 353.875 527.941 353.855 527.91 cv
353.832 527.887 353.82 527.852 353.824 527.805 cv
353.824 521.656 li
352.836 521.656 li
352.75 521.66 352.688 521.617 352.648 521.531 cv
352.605 521.449 352.582 521.316 352.586 521.125 cv
352.582 521.031 352.59 520.949 352.602 520.879 cv
352.609 520.816 352.625 520.758 352.648 520.711 cv
352.668 520.668 352.691 520.637 352.727 520.617 cv
352.754 520.602 352.793 520.594 352.836 520.59 cv
353.824 520.59 li
353.824 519.863 li
353.82 519.379 353.867 518.961 353.961 518.605 cv
354.051 518.258 354.188 517.969 354.375 517.746 cv
354.559 517.523 354.793 517.359 355.082 517.25 cv
355.363 517.145 355.699 517.09 356.086 517.09 cv
356.262 517.09 356.438 517.109 356.613 517.141 cv
356.781 517.18 356.914 517.215 357.012 517.25 cv
357.102 517.293 357.164 517.328 357.199 517.355 cv
357.227 517.391 357.254 517.43 357.277 517.477 cv
357.297 517.527 357.309 517.59 357.32 517.656 cv
357.324 517.73 357.328 517.812 357.332 517.906 cv
cp
f
367.527 525.172 mo
367.523 525.645 367.438 526.066 367.266 526.434 cv
367.09 526.809 366.848 527.121 366.539 527.375 cv
366.23 527.633 365.867 527.824 365.449 527.953 cv
365.027 528.082 364.578 528.145 364.098 528.148 cv
363.758 528.145 363.441 528.117 363.156 528.062 cv
362.867 528.004 362.613 527.937 362.387 527.852 cv
362.16 527.773 361.969 527.687 361.816 527.594 cv
361.66 527.508 361.555 527.43 361.496 527.367 cv
361.438 527.305 361.395 527.227 361.367 527.133 cv
361.336 527.039 361.32 526.91 361.324 526.746 cv
361.32 526.633 361.324 526.539 361.34 526.461 cv
361.348 526.387 361.363 526.324 361.387 526.277 cv
361.402 526.23 361.43 526.199 361.465 526.18 cv
361.492 526.164 361.527 526.156 361.57 526.152 cv
361.641 526.156 361.742 526.199 361.879 526.285 cv
362.008 526.375 362.18 526.473 362.391 526.574 cv
362.598 526.684 362.848 526.781 363.141 526.867 cv
363.434 526.961 363.773 527.004 364.16 527.004 cv
364.449 527.004 364.715 526.965 364.957 526.887 cv
365.195 526.809 365.402 526.699 365.582 526.555 cv
365.754 526.414 365.891 526.238 365.984 526.027 cv
366.078 525.82 366.125 525.586 366.125 525.32 cv
366.125 525.039 366.059 524.793 365.93 524.586 cv
365.797 524.387 365.625 524.211 365.414 524.055 cv
365.199 523.906 364.957 523.766 364.684 523.633 cv
364.41 523.508 364.129 523.375 363.848 523.242 cv
363.559 523.109 363.281 522.965 363.012 522.801 cv
362.742 522.645 362.5 522.453 362.289 522.234 cv
362.07 522.016 361.898 521.762 361.77 521.465 cv
361.633 521.176 361.566 520.824 361.57 520.41 cv
361.566 519.992 361.645 519.617 361.801 519.285 cv
361.953 518.957 362.164 518.68 362.441 518.453 cv
362.711 518.234 363.035 518.062 363.414 517.945 cv
363.789 517.828 364.199 517.77 364.637 517.77 cv
364.855 517.77 365.078 517.789 365.309 517.828 cv
365.531 517.867 365.742 517.918 365.945 517.98 cv
366.141 518.047 366.32 518.121 366.48 518.199 cv
366.633 518.281 366.734 518.348 366.789 518.395 cv
366.836 518.449 366.871 518.488 366.887 518.512 cv
366.902 518.543 366.914 518.578 366.926 518.621 cv
366.934 518.668 366.941 518.723 366.949 518.781 cv
366.953 518.848 366.957 518.926 366.957 519.023 cv
366.957 519.117 366.953 519.203 366.945 519.273 cv
366.938 519.352 366.926 519.41 366.91 519.457 cv
366.895 519.504 366.871 519.539 366.844 519.562 cv
366.813 519.586 366.781 519.598 366.746 519.598 cv
366.688 519.598 366.598 519.562 366.477 519.492 cv
366.352 519.422 366.199 519.34 366.027 519.246 cv
365.848 519.156 365.641 519.074 365.402 518.996 cv
365.156 518.922 364.887 518.883 364.59 518.883 cv
364.309 518.883 364.063 518.922 363.855 518.996 cv
363.645 519.074 363.473 519.176 363.34 519.297 cv
363.203 519.422 363.102 519.566 363.035 519.738 cv
362.969 519.91 362.938 520.094 362.938 520.285 cv
362.938 520.57 363 520.812 363.129 521.012 cv
363.258 521.215 363.43 521.395 363.648 521.547 cv
363.859 521.707 364.105 521.848 364.383 521.977 cv
364.656 522.109 364.938 522.242 365.227 522.371 cv
365.512 522.504 365.793 522.648 366.066 522.805 cv
366.34 522.965 366.586 523.152 366.805 523.367 cv
367.02 523.586 367.191 523.84 367.328 524.133 cv
367.457 524.426 367.523 524.773 367.527 525.172 cv
cp
f
375.297 527.805 mo
375.293 527.852 375.285 527.887 375.27 527.91 cv
375.25 527.941 375.215 527.965 375.172 527.984 cv
375.125 528.004 375.066 528.016 374.992 528.031 cv
374.914 528.039 374.82 528.047 374.715 528.047 cv
374.59 528.047 374.492 528.039 374.422 528.031 cv
374.344 528.016 374.285 528.004 374.242 527.984 cv
374.195 527.965 374.164 527.941 374.152 527.91 cv
374.133 527.887 374.125 527.852 374.129 527.805 cv
374.129 526.879 li
373.727 527.324 373.332 527.645 372.945 527.844 cv
372.551 528.047 372.156 528.145 371.762 528.148 cv
371.289 528.145 370.895 528.07 370.578 527.914 cv
370.258 527.762 370 527.551 369.805 527.281 cv
369.602 527.016 369.461 526.703 369.379 526.344 cv
369.289 525.988 369.246 525.555 369.25 525.047 cv
369.25 520.793 li
369.246 520.754 369.254 520.719 369.277 520.687 cv
369.293 520.66 369.328 520.637 369.383 520.609 cv
369.43 520.59 369.5 520.574 369.586 520.562 cv
369.668 520.559 369.77 520.555 369.898 520.551 cv
370.02 520.555 370.125 520.559 370.211 520.562 cv
370.293 520.574 370.359 520.59 370.406 520.609 cv
370.453 520.637 370.488 520.66 370.512 520.687 cv
370.531 520.719 370.539 520.754 370.543 520.793 cv
370.543 524.875 li
370.539 525.289 370.57 525.617 370.633 525.863 cv
370.691 526.109 370.781 526.32 370.906 526.492 cv
371.023 526.672 371.18 526.805 371.371 526.898 cv
371.555 526.996 371.773 527.047 372.023 527.043 cv
372.344 527.047 372.664 526.93 372.988 526.699 cv
373.305 526.473 373.645 526.137 374.004 525.691 cv
374.004 520.793 li
374.004 520.754 374.012 520.719 374.031 520.687 cv
374.047 520.66 374.082 520.637 374.137 520.609 cv
374.188 520.59 374.254 520.574 374.336 520.562 cv
374.414 520.559 374.52 520.555 374.652 520.551 cv
374.773 520.555 374.879 520.559 374.965 520.562 cv
375.047 520.574 375.109 520.59 375.156 520.609 cv
375.199 520.637 375.234 520.66 375.262 520.687 cv
375.281 520.719 375.293 520.754 375.297 520.793 cv
cp
f
384.152 524.203 mo
384.148 524.812 384.082 525.363 383.953 525.848 cv
383.816 526.336 383.621 526.75 383.367 527.09 cv
383.109 527.434 382.793 527.695 382.422 527.875 cv
382.047 528.059 381.621 528.145 381.137 528.148 cv
380.91 528.145 380.703 528.125 380.516 528.082 cv
380.328 528.035 380.141 527.965 379.961 527.867 cv
379.773 527.77 379.594 527.645 379.414 527.492 cv
379.23 527.344 379.039 527.164 378.84 526.949 cv
378.84 527.805 li
378.84 527.852 378.828 527.887 378.809 527.914 cv
378.785 527.949 378.75 527.973 378.707 527.988 cv
378.656 528.004 378.598 528.016 378.531 528.031 cv
378.457 528.039 378.367 528.047 378.262 528.047 cv
378.152 528.047 378.066 528.039 377.996 528.031 cv
377.922 528.016 377.859 528.004 377.816 527.988 cv
377.766 527.973 377.734 527.949 377.723 527.914 cv
377.703 527.887 377.695 527.852 377.699 527.805 cv
377.699 517.395 li
377.695 517.355 377.707 517.32 377.727 517.285 cv
377.742 517.258 377.773 517.23 377.828 517.207 cv
377.875 517.187 377.941 517.172 378.027 517.16 cv
378.105 517.152 378.211 517.148 378.34 517.145 cv
378.469 517.148 378.574 517.152 378.66 517.16 cv
378.738 517.172 378.805 517.187 378.852 517.207 cv
378.898 517.23 378.93 517.258 378.953 517.285 cv
378.969 517.32 378.98 517.355 378.984 517.395 cv
378.984 521.594 li
379.191 521.383 379.395 521.203 379.59 521.059 cv
379.785 520.914 379.973 520.797 380.16 520.703 cv
380.344 520.617 380.531 520.551 380.723 520.504 cv
380.906 520.465 381.105 520.441 381.316 520.441 cv
381.82 520.441 382.254 520.543 382.621 520.746 cv
382.98 520.949 383.273 521.223 383.5 521.559 cv
383.723 521.902 383.891 522.301 383.996 522.758 cv
384.098 523.215 384.148 523.695 384.152 524.203 cv
cp
382.82 524.352 mo
382.816 523.996 382.789 523.648 382.738 523.309 cv
382.68 522.973 382.586 522.676 382.449 522.414 cv
382.313 522.156 382.133 521.945 381.91 521.785 cv
381.684 521.629 381.402 521.551 381.07 521.547 cv
380.902 521.551 380.738 521.574 380.578 521.617 cv
380.414 521.668 380.25 521.746 380.082 521.852 cv
379.914 521.965 379.738 522.105 379.563 522.273 cv
379.379 522.449 379.188 522.664 378.984 522.918 cv
378.984 525.715 li
379.34 526.148 379.68 526.48 380.004 526.703 cv
380.328 526.934 380.664 527.047 381.016 527.043 cv
381.336 527.047 381.613 526.969 381.848 526.809 cv
382.074 526.656 382.262 526.449 382.406 526.187 cv
382.551 525.934 382.656 525.645 382.723 525.324 cv
382.785 525.008 382.816 524.684 382.82 524.352 cv
cp
f
389.289 524.066 mo
389.289 524.27 389.266 524.406 389.219 524.484 cv
389.172 524.562 389.102 524.602 389.016 524.602 cv
385.758 524.602 li
385.664 524.602 385.598 524.562 385.551 524.48 cv
385.504 524.402 385.48 524.266 385.48 524.066 cv
385.48 523.871 385.504 523.73 385.551 523.652 cv
385.598 523.574 385.664 523.535 385.758 523.535 cv
389.016 523.535 li
389.055 523.535 389.094 523.543 389.129 523.559 cv
389.16 523.574 389.188 523.605 389.215 523.648 cv
389.234 523.695 389.254 523.75 389.27 523.816 cv
389.281 523.887 389.289 523.973 389.289 524.066 cv
cp
f
392.539 527.797 mo
392.535 527.84 392.527 527.875 392.508 527.906 cv
392.484 527.937 392.445 527.965 392.398 527.98 cv
392.344 528 392.277 528.012 392.191 528.027 cv
392.105 528.039 391.996 528.047 391.871 528.047 cv
391.742 528.047 391.637 528.039 391.551 528.027 cv
391.461 528.012 391.391 528 391.34 527.98 cv
391.285 527.965 391.25 527.937 391.23 527.906 cv
391.207 527.875 391.195 527.84 391.199 527.797 cv
391.199 518.117 li
391.195 518.078 391.207 518.043 391.234 518.008 cv
391.254 517.98 391.293 517.953 391.352 517.934 cv
391.402 517.918 391.473 517.902 391.563 517.887 cv
391.645 517.875 391.746 517.871 391.871 517.867 cv
391.996 517.871 392.105 517.875 392.191 517.887 cv
392.277 517.902 392.344 517.918 392.398 517.934 cv
392.445 517.953 392.484 517.98 392.508 518.008 cv
392.527 518.043 392.535 518.078 392.539 518.117 cv
cp
f
405.527 527.805 mo
405.523 527.852 405.516 527.887 405.496 527.91 cv
405.473 527.941 405.438 527.965 405.395 527.984 cv
405.344 528.004 405.277 528.016 405.199 528.031 cv
405.113 528.039 405.012 528.047 404.887 528.047 cv
404.754 528.047 404.645 528.039 404.566 528.031 cv
404.48 528.016 404.414 528.004 404.367 527.984 cv
404.313 527.965 404.277 527.941 404.262 527.91 cv
404.238 527.887 404.23 527.852 404.23 527.805 cv
404.23 523.543 li
404.23 523.25 404.203 522.98 404.152 522.734 cv
404.098 522.492 404.016 522.281 403.902 522.102 cv
403.789 521.926 403.645 521.789 403.469 521.695 cv
403.289 521.602 403.078 521.555 402.844 521.555 cv
402.547 521.555 402.25 521.672 401.953 521.898 cv
401.648 522.133 401.32 522.465 400.965 522.902 cv
400.965 527.805 li
400.961 527.852 400.949 527.887 400.934 527.91 cv
400.91 527.941 400.879 527.965 400.832 527.984 cv
400.781 528.004 400.715 528.016 400.633 528.031 cv
400.547 528.039 400.441 528.047 400.32 528.047 cv
400.199 528.047 400.098 528.039 400.012 528.031 cv
399.926 528.016 399.855 528.004 399.809 527.984 cv
399.754 527.965 399.723 527.941 399.707 527.91 cv
399.688 527.887 399.676 527.852 399.68 527.805 cv
399.68 523.543 li
399.676 523.25 399.648 522.98 399.594 522.734 cv
399.535 522.492 399.449 522.281 399.336 522.102 cv
399.223 521.926 399.078 521.789 398.906 521.695 cv
398.727 521.602 398.52 521.555 398.285 521.555 cv
397.984 521.555 397.688 521.672 397.387 521.898 cv
397.086 522.133 396.758 522.465 396.406 522.902 cv
396.406 527.805 li
396.402 527.852 396.391 527.887 396.375 527.91 cv
396.352 527.941 396.32 527.965 396.273 527.984 cv
396.227 528.004 396.16 528.016 396.082 528.031 cv
395.996 528.039 395.891 528.047 395.762 528.047 cv
395.633 528.047 395.527 528.039 395.449 528.031 cv
395.363 528.016 395.297 528.004 395.25 527.984 cv
395.195 527.965 395.164 527.941 395.148 527.91 cv
395.129 527.887 395.117 527.852 395.121 527.805 cv
395.121 520.793 li
395.117 520.754 395.125 520.719 395.145 520.687 cv
395.156 520.66 395.188 520.637 395.238 520.609 cv
395.281 520.59 395.344 520.574 395.418 520.562 cv
395.488 520.559 395.582 520.555 395.707 520.551 cv
395.816 520.555 395.914 520.559 395.992 520.562 cv
396.066 520.574 396.125 520.59 396.168 520.609 cv
396.207 520.637 396.234 520.66 396.254 520.687 cv
396.27 520.719 396.277 520.754 396.281 520.793 cv
396.281 521.719 li
396.672 521.277 397.055 520.957 397.43 520.75 cv
397.797 520.547 398.176 520.441 398.559 520.441 cv
398.848 520.441 399.105 520.477 399.34 520.543 cv
399.566 520.613 399.773 520.707 399.953 520.828 cv
400.129 520.949 400.277 521.094 400.406 521.262 cv
400.527 521.434 400.633 521.625 400.719 521.828 cv
400.949 521.578 401.172 521.363 401.383 521.184 cv
401.594 521.012 401.797 520.867 401.992 520.754 cv
402.188 520.648 402.375 520.57 402.559 520.516 cv
402.742 520.469 402.93 520.441 403.117 520.441 cv
403.57 520.441 403.949 520.523 404.254 520.68 cv
404.559 520.844 404.805 521.055 405 521.316 cv
405.188 521.582 405.324 521.891 405.406 522.246 cv
405.484 522.602 405.523 522.977 405.527 523.371 cv
cp
f
413.16 527.812 mo
413.156 527.875 413.137 527.922 413.098 527.953 cv
413.055 527.984 412.996 528.008 412.926 528.023 cv
412.848 528.039 412.742 528.047 412.605 528.047 cv
412.469 528.047 412.359 528.039 412.281 528.023 cv
412.195 528.008 412.137 527.984 412.105 527.953 cv
412.066 527.922 412.051 527.875 412.055 527.812 cv
412.055 527.113 li
411.746 527.441 411.402 527.695 411.027 527.875 cv
410.648 528.059 410.25 528.145 409.832 528.148 cv
409.457 528.145 409.125 528.098 408.828 528.004 cv
408.531 527.906 408.277 527.77 408.066 527.586 cv
407.855 527.406 407.691 527.184 407.574 526.918 cv
407.457 526.656 407.398 526.355 407.402 526.012 cv
407.398 525.621 407.477 525.277 407.641 524.984 cv
407.797 524.695 408.031 524.453 408.336 524.262 cv
408.637 524.07 409.004 523.926 409.441 523.828 cv
409.875 523.734 410.367 523.687 410.914 523.684 cv
411.883 523.684 li
411.883 523.137 li
411.879 522.867 411.852 522.629 411.797 522.422 cv
411.738 522.215 411.645 522.043 411.52 521.902 cv
411.387 521.766 411.223 521.66 411.023 521.59 cv
410.816 521.52 410.566 521.484 410.277 521.484 cv
409.957 521.484 409.672 521.523 409.422 521.598 cv
409.164 521.676 408.945 521.758 408.758 521.848 cv
408.57 521.941 408.41 522.027 408.285 522.098 cv
408.152 522.176 408.059 522.211 408 522.211 cv
407.957 522.211 407.922 522.203 407.891 522.18 cv
407.859 522.164 407.832 522.133 407.809 522.086 cv
407.785 522.047 407.766 521.992 407.758 521.926 cv
407.742 521.863 407.738 521.793 407.742 521.711 cv
407.738 521.586 407.746 521.48 407.77 521.402 cv
407.785 521.328 407.832 521.258 407.902 521.187 cv
407.973 521.121 408.094 521.043 408.266 520.953 cv
408.438 520.863 408.633 520.781 408.855 520.703 cv
409.078 520.633 409.324 520.57 409.59 520.516 cv
409.855 520.469 410.121 520.441 410.395 520.441 cv
410.895 520.441 411.324 520.5 411.676 520.613 cv
412.027 520.73 412.313 520.898 412.535 521.117 cv
412.75 521.34 412.91 521.613 413.012 521.937 cv
413.109 522.27 413.156 522.652 413.16 523.082 cv
cp
411.883 524.609 mo
410.781 524.609 li
410.426 524.613 410.121 524.645 409.863 524.699 cv
409.602 524.762 409.387 524.848 409.215 524.965 cv
409.043 525.082 408.918 525.223 408.84 525.387 cv
408.758 525.551 408.715 525.738 408.719 525.949 cv
408.715 526.316 408.832 526.609 409.063 526.82 cv
409.293 527.039 409.617 527.145 410.035 527.145 cv
410.371 527.145 410.684 527.059 410.973 526.887 cv
411.262 526.715 411.563 526.453 411.883 526.098 cv
cp
f
421.379 521.109 mo
421.375 521.293 421.352 521.426 421.305 521.504 cv
421.254 521.586 421.191 521.625 421.117 521.625 cv
420.109 521.625 li
420.289 521.812 420.418 522.02 420.492 522.246 cv
420.563 522.473 420.598 522.707 420.602 522.949 cv
420.598 523.355 420.531 523.715 420.406 524.027 cv
420.273 524.34 420.09 524.605 419.848 524.816 cv
419.605 525.035 419.316 525.199 418.988 525.312 cv
418.652 525.43 418.285 525.488 417.883 525.484 cv
417.594 525.488 417.32 525.449 417.066 525.371 cv
416.805 525.297 416.609 525.203 416.473 525.086 cv
416.379 525.184 416.301 525.289 416.242 525.406 cv
416.18 525.527 416.148 525.664 416.152 525.816 cv
416.148 526 416.234 526.152 416.406 526.27 cv
416.574 526.395 416.797 526.457 417.078 526.465 cv
418.91 526.543 li
419.258 526.555 419.574 526.602 419.867 526.687 cv
420.156 526.773 420.41 526.898 420.625 527.055 cv
420.836 527.215 421.004 527.406 421.125 527.637 cv
421.242 527.871 421.301 528.141 421.305 528.445 cv
421.301 528.766 421.234 529.07 421.102 529.363 cv
420.965 529.652 420.758 529.906 420.48 530.129 cv
420.199 530.348 419.844 530.523 419.414 530.652 cv
418.984 530.777 418.477 530.84 417.891 530.844 cv
417.32 530.84 416.836 530.793 416.441 530.699 cv
416.043 530.602 415.719 530.469 415.465 530.305 cv
415.211 530.137 415.027 529.941 414.914 529.711 cv
414.797 529.477 414.738 529.223 414.742 528.957 cv
414.738 528.785 414.758 528.621 414.805 528.461 cv
414.844 528.297 414.906 528.145 414.992 528 cv
415.074 527.855 415.184 527.719 415.313 527.582 cv
415.438 527.453 415.582 527.32 415.754 527.191 cv
415.496 527.062 415.309 526.898 415.188 526.699 cv
415.066 526.504 415.008 526.293 415.008 526.059 cv
415.008 525.746 415.07 525.461 415.199 525.211 cv
415.328 524.961 415.488 524.738 415.684 524.539 cv
415.52 524.348 415.395 524.133 415.301 523.891 cv
415.207 523.652 415.16 523.359 415.16 523.012 cv
415.16 522.617 415.227 522.258 415.363 521.937 cv
415.496 521.621 415.684 521.355 415.926 521.137 cv
416.164 520.922 416.449 520.754 416.785 520.633 cv
417.117 520.52 417.484 520.461 417.883 520.457 cv
418.094 520.461 418.293 520.473 418.477 520.492 cv
418.66 520.52 418.832 520.551 418.996 520.59 cv
421.117 520.59 li
421.203 520.594 421.27 520.637 421.313 520.719 cv
421.355 520.809 421.375 520.937 421.379 521.109 cv
cp
419.371 522.957 mo
419.367 522.484 419.234 522.113 418.977 521.84 cv
418.711 521.574 418.34 521.437 417.859 521.437 cv
417.605 521.437 417.387 521.48 417.207 521.562 cv
417.02 521.648 416.867 521.762 416.746 521.906 cv
416.625 522.055 416.535 522.223 416.477 522.41 cv
416.414 522.598 416.383 522.797 416.387 523.004 cv
416.383 523.469 416.516 523.832 416.777 524.098 cv
417.039 524.363 417.406 524.496 417.883 524.492 cv
418.133 524.496 418.352 524.457 418.543 524.371 cv
418.727 524.293 418.883 524.18 419.008 524.039 cv
419.129 523.898 419.219 523.734 419.281 523.543 cv
419.336 523.359 419.367 523.164 419.371 522.957 cv
cp
420.016 528.516 mo
420.012 528.211 419.887 527.98 419.645 527.816 cv
419.395 527.656 419.063 527.566 418.645 527.555 cv
416.828 527.492 li
416.66 527.625 416.523 527.75 416.422 527.863 cv
416.313 527.98 416.23 528.09 416.168 528.199 cv
416.105 528.305 416.063 528.41 416.039 528.516 cv
416.016 528.617 416.004 528.723 416.004 528.832 cv
416.004 529.168 416.172 529.422 416.516 529.602 cv
416.855 529.773 417.336 529.863 417.953 529.863 cv
418.34 529.863 418.664 529.824 418.93 529.75 cv
419.188 529.672 419.398 529.57 419.563 529.449 cv
419.719 529.32 419.836 529.18 419.91 529.02 cv
419.977 528.859 420.012 528.691 420.016 528.516 cv
cp
f
428.941 523.996 mo
428.938 524.199 428.887 524.34 428.789 524.426 cv
428.684 524.512 428.566 524.555 428.441 524.555 cv
423.824 524.555 li
423.82 524.945 423.859 525.297 423.941 525.609 cv
424.016 525.922 424.148 526.191 424.332 526.41 cv
424.512 526.637 424.746 526.809 425.043 526.926 cv
425.332 527.051 425.691 527.109 426.117 527.105 cv
426.449 527.109 426.746 527.082 427.008 527.023 cv
427.27 526.973 427.496 526.91 427.688 526.84 cv
427.875 526.773 428.031 526.715 428.156 526.656 cv
428.277 526.605 428.371 526.578 428.434 526.574 cv
428.469 526.578 428.5 526.586 428.531 526.602 cv
428.559 526.621 428.582 526.648 428.602 526.684 cv
428.613 526.723 428.625 526.773 428.637 526.836 cv
428.641 526.902 428.645 526.98 428.648 527.074 cv
428.645 527.145 428.641 527.203 428.641 527.25 cv
428.633 527.297 428.629 527.34 428.621 527.379 cv
428.613 527.418 428.598 527.453 428.582 527.484 cv
428.559 527.516 428.535 527.547 428.512 527.574 cv
428.48 527.605 428.398 527.652 428.258 527.715 cv
428.117 527.781 427.934 527.844 427.711 527.906 cv
427.484 527.969 427.227 528.023 426.934 528.074 cv
426.641 528.121 426.328 528.145 425.996 528.148 cv
425.418 528.145 424.91 528.066 424.48 527.906 cv
424.043 527.746 423.68 527.508 423.387 527.191 cv
423.086 526.875 422.863 526.48 422.715 526 cv
422.566 525.523 422.492 524.965 422.492 524.328 cv
422.492 523.73 422.566 523.191 422.723 522.707 cv
422.875 522.23 423.102 521.82 423.398 521.484 cv
423.691 521.148 424.047 520.891 424.461 520.711 cv
424.875 520.531 425.34 520.441 425.855 520.441 cv
426.406 520.441 426.875 520.531 427.262 520.707 cv
427.648 520.887 427.965 521.125 428.219 521.422 cv
428.465 521.723 428.648 522.074 428.766 522.473 cv
428.879 522.879 428.938 523.309 428.941 523.762 cv
cp
427.648 523.613 mo
427.664 522.937 427.512 522.406 427.195 522.023 cv
426.879 521.641 426.41 521.449 425.793 521.445 cv
425.469 521.449 425.188 521.508 424.949 521.625 cv
424.707 521.746 424.508 521.906 424.348 522.102 cv
424.184 522.301 424.059 522.531 423.973 522.793 cv
423.883 523.055 423.832 523.328 423.824 523.613 cv
cp
f
435.305 525.895 mo
435.301 526.258 435.234 526.578 435.105 526.855 cv
434.973 527.137 434.785 527.371 434.543 527.562 cv
434.297 527.758 434.004 527.902 433.668 528 cv
433.328 528.098 432.957 528.145 432.555 528.148 cv
432.301 528.145 432.063 528.125 431.84 528.09 cv
431.613 528.047 431.414 528 431.234 527.941 cv
431.055 527.883 430.902 527.82 430.777 527.754 cv
430.652 527.691 430.559 527.633 430.504 527.578 cv
430.445 527.527 430.406 527.457 430.383 527.359 cv
430.355 527.27 430.344 527.141 430.344 526.98 cv
430.344 526.883 430.348 526.801 430.359 526.73 cv
430.367 526.664 430.379 526.609 430.398 526.566 cv
430.41 526.527 430.434 526.496 430.461 526.477 cv
430.488 526.461 430.52 526.453 430.559 526.449 cv
430.613 526.453 430.699 526.488 430.813 526.555 cv
430.922 526.629 431.059 526.707 431.227 526.785 cv
431.387 526.871 431.578 526.945 431.805 527.016 cv
432.023 527.086 432.281 527.121 432.578 527.121 cv
432.793 527.121 432.992 527.098 433.172 527.051 cv
433.348 527.004 433.5 526.937 433.629 526.844 cv
433.758 526.758 433.859 526.641 433.93 526.496 cv
434 526.359 434.035 526.191 434.035 525.996 cv
434.035 525.801 433.984 525.637 433.883 525.5 cv
433.781 525.367 433.645 525.246 433.48 525.141 cv
433.313 525.039 433.129 524.949 432.922 524.863 cv
432.711 524.785 432.496 524.699 432.277 524.609 cv
432.059 524.523 431.844 524.422 431.633 524.309 cv
431.422 524.199 431.23 524.066 431.066 523.902 cv
430.895 523.746 430.762 523.551 430.664 523.324 cv
430.559 523.102 430.508 522.836 430.512 522.523 cv
430.508 522.25 430.563 521.984 430.672 521.73 cv
430.777 521.48 430.938 521.262 431.152 521.07 cv
431.363 520.883 431.629 520.73 431.949 520.613 cv
432.27 520.5 432.641 520.441 433.07 520.441 cv
433.254 520.441 433.441 520.457 433.629 520.488 cv
433.813 520.52 433.98 520.559 434.137 520.605 cv
434.285 520.652 434.414 520.703 434.523 520.758 cv
434.625 520.812 434.707 520.863 434.766 520.902 cv
434.816 520.949 434.852 520.984 434.875 521.012 cv
434.891 521.043 434.906 521.078 434.914 521.113 cv
434.922 521.156 434.93 521.203 434.938 521.258 cv
434.945 521.316 434.949 521.387 434.949 521.469 cv
434.949 521.559 434.945 521.637 434.938 521.699 cv
434.93 521.77 434.914 521.82 434.898 521.859 cv
434.875 521.902 434.855 521.934 434.832 521.949 cv
434.805 521.969 434.773 521.977 434.746 521.977 cv
434.695 521.977 434.629 521.949 434.543 521.891 cv
434.453 521.836 434.34 521.773 434.199 521.707 cv
434.059 521.645 433.891 521.586 433.703 521.523 cv
433.512 521.469 433.297 521.437 433.055 521.437 cv
432.832 521.437 432.641 521.465 432.477 521.512 cv
432.309 521.566 432.172 521.637 432.066 521.723 cv
431.961 521.816 431.879 521.922 431.828 522.047 cv
431.77 522.172 431.742 522.309 431.746 522.453 cv
431.742 522.656 431.793 522.824 431.898 522.961 cv
432 523.102 432.137 523.223 432.305 523.324 cv
432.469 523.43 432.66 523.523 432.875 523.605 cv
433.086 523.691 433.301 523.777 433.523 523.863 cv
433.742 523.953 433.961 524.055 434.18 524.16 cv
434.395 524.27 434.586 524.398 434.754 524.555 cv
434.918 524.711 435.051 524.898 435.152 525.117 cv
435.25 525.336 435.301 525.598 435.305 525.895 cv
cp
f
229.848 15.934 mo
229.906 16.125 229.945 16.273 229.965 16.379 cv
229.977 16.492 229.957 16.574 229.902 16.625 cv
229.844 16.68 229.742 16.711 229.598 16.727 cv
229.449 16.738 229.25 16.746 229 16.746 cv
228.73 16.746 228.523 16.742 228.379 16.734 cv
228.227 16.727 228.113 16.711 228.039 16.687 cv
227.957 16.664 227.902 16.633 227.875 16.59 cv
227.84 16.551 227.813 16.496 227.797 16.426 cv
227.121 14.398 li
223.332 14.398 li
222.695 16.371 li
222.672 16.445 222.645 16.508 222.613 16.555 cv
222.578 16.605 222.523 16.645 222.449 16.672 cv
222.371 16.699 222.266 16.715 222.129 16.73 cv
221.988 16.738 221.805 16.746 221.586 16.746 cv
221.344 16.746 221.16 16.738 221.027 16.723 cv
220.891 16.707 220.797 16.672 220.746 16.609 cv
220.691 16.555 220.672 16.469 220.691 16.355 cv
220.703 16.25 220.742 16.105 220.809 15.918 cv
223.918 6.97302 li
223.945 6.88702 223.984 6.81598 224.027 6.758 cv
224.066 6.70697 224.133 6.664 224.227 6.633 cv
224.316 6.60498 224.441 6.59003 224.602 6.578 cv
224.762 6.57397 224.973 6.57001 225.242 6.56598 cv
225.547 6.57001 225.793 6.57397 225.973 6.578 cv
226.152 6.59003 226.293 6.60498 226.398 6.633 cv
226.496 6.664 226.57 6.70697 226.617 6.76202 cv
226.66 6.82001 226.695 6.89801 226.73 6.99597 cv
cp
225.219 8.539 mo
225.211 8.539 li
223.785 12.824 li
226.645 12.824 li
cp
f
237.223 9.47699 mo
237.219 9.50403 237.219 9.53497 237.219 9.57001 cv
237.215 9.60901 237.211 9.64801 237.203 9.69098 cv
237.195 9.73401 237.184 9.78497 237.172 9.84003 cv
237.156 9.89801 237.141 9.96503 237.121 10.035 cv
235.035 16.324 li
235.008 16.414 234.973 16.488 234.93 16.539 cv
234.883 16.598 234.809 16.641 234.711 16.668 cv
234.605 16.699 234.469 16.715 234.297 16.73 cv
234.121 16.738 233.895 16.746 233.617 16.746 cv
233.34 16.746 233.113 16.738 232.941 16.727 cv
232.766 16.711 232.629 16.691 232.531 16.66 cv
232.43 16.633 232.359 16.59 232.316 16.531 cv
232.27 16.48 232.234 16.41 232.211 16.324 cv
230.125 10.035 li
230.094 9.93402 230.066 9.84003 230.051 9.758 cv
230.027 9.67603 230.02 9.617 230.02 9.578 cv
230.016 9.547 230.012 9.51202 230.016 9.47699 cv
230.012 9.42603 230.027 9.37903 230.059 9.34003 cv
230.086 9.30103 230.137 9.27002 230.211 9.242 cv
230.281 9.21899 230.379 9.19897 230.508 9.18701 cv
230.633 9.17999 230.793 9.17603 230.988 9.172 cv
231.199 9.17603 231.371 9.18402 231.504 9.19098 cv
231.629 9.20697 231.734 9.22302 231.813 9.24597 cv
231.887 9.27002 231.938 9.30499 231.973 9.34802 cv
232 9.39502 232.027 9.44897 232.051 9.508 cv
233.633 14.609 li
233.68 14.805 li
233.727 14.609 li
235.285 9.508 li
235.297 9.44897 235.32 9.39502 235.355 9.34802 cv
235.387 9.30499 235.441 9.27002 235.516 9.24597 cv
235.586 9.22302 235.684 9.20697 235.809 9.19098 cv
235.93 9.18402 236.09 9.17603 236.289 9.172 cv
236.48 9.17603 236.637 9.17999 236.758 9.18701 cv
236.879 9.19897 236.973 9.21899 237.043 9.242 cv
237.109 9.27002 237.156 9.30103 237.184 9.34003 cv
237.207 9.37903 237.219 9.42603 237.223 9.47699 cv
cp
f
244.684 12.758 mo
244.68 12.996 244.629 13.172 244.523 13.285 cv
244.414 13.402 244.266 13.461 244.086 13.457 cv
239.852 13.457 li
239.848 13.758 239.883 14.027 239.957 14.266 cv
240.023 14.508 240.137 14.711 240.293 14.879 cv
240.445 15.051 240.641 15.18 240.883 15.266 cv
241.121 15.355 241.41 15.398 241.754 15.398 cv
242.094 15.398 242.395 15.375 242.656 15.324 cv
242.914 15.277 243.141 15.223 243.332 15.16 cv
243.52 15.102 243.676 15.047 243.805 14.996 cv
243.926 14.949 244.027 14.926 244.109 14.922 cv
244.152 14.926 244.191 14.934 244.227 14.949 cv
244.254 14.969 244.281 15 244.301 15.047 cv
244.32 15.094 244.332 15.16 244.344 15.246 cv
244.348 15.332 244.352 15.441 244.355 15.57 cv
244.352 15.687 244.352 15.785 244.348 15.863 cv
244.34 15.945 244.332 16.012 244.324 16.066 cv
244.313 16.125 244.297 16.176 244.277 16.211 cv
244.258 16.254 244.23 16.289 244.199 16.324 cv
244.164 16.363 244.07 16.414 243.922 16.473 cv
243.766 16.539 243.574 16.602 243.344 16.656 cv
243.105 16.719 242.836 16.766 242.539 16.812 cv
242.234 16.852 241.914 16.875 241.574 16.879 cv
240.953 16.875 240.41 16.801 239.949 16.645 cv
239.48 16.492 239.094 16.254 238.785 15.937 cv
238.469 15.621 238.234 15.223 238.086 14.738 cv
237.93 14.258 237.855 13.691 237.859 13.035 cv
237.855 12.422 237.934 11.863 238.098 11.367 cv
238.254 10.871 238.488 10.453 238.801 10.105 cv
239.105 9.76202 239.48 9.49597 239.918 9.31201 cv
240.355 9.133 240.848 9.04303 241.402 9.039 cv
241.98 9.04303 242.48 9.12903 242.895 9.297 cv
243.309 9.47302 243.645 9.711 243.91 10.012 cv
244.172 10.316 244.367 10.676 244.496 11.09 cv
244.617 11.508 244.68 11.957 244.684 12.445 cv
cp
242.781 12.195 mo
242.793 11.645 242.684 11.211 242.449 10.898 cv
242.215 10.586 241.848 10.43 241.355 10.426 cv
241.105 10.43 240.891 10.477 240.707 10.566 cv
240.52 10.664 240.367 10.789 240.246 10.945 cv
240.121 11.105 240.027 11.293 239.965 11.508 cv
239.898 11.723 239.859 11.953 239.852 12.195 cv
cp
f
250.758 10.129 mo
250.758 10.32 250.75 10.473 250.742 10.59 cv
250.727 10.711 250.711 10.805 250.695 10.871 cv
250.672 10.941 250.645 10.988 250.613 11.012 cv
250.574 11.039 250.531 11.051 250.484 11.051 cv
250.438 11.051 250.391 11.043 250.344 11.023 cv
250.289 11.008 250.23 10.988 250.168 10.965 cv
250.098 10.945 250.027 10.926 249.953 10.906 cv
249.871 10.891 249.785 10.883 249.695 10.879 cv
249.582 10.883 249.473 10.902 249.367 10.945 cv
249.258 10.992 249.145 11.062 249.031 11.152 cv
248.91 11.246 248.789 11.371 248.664 11.523 cv
248.535 11.684 248.398 11.875 248.254 12.102 cv
248.254 16.434 li
248.25 16.488 248.234 16.531 248.207 16.57 cv
248.172 16.609 248.117 16.645 248.047 16.668 cv
247.969 16.695 247.871 16.711 247.746 16.727 cv
247.621 16.738 247.461 16.746 247.273 16.746 cv
247.078 16.746 246.922 16.738 246.797 16.727 cv
246.672 16.711 246.57 16.695 246.496 16.668 cv
246.418 16.645 246.363 16.609 246.336 16.57 cv
246.301 16.531 246.285 16.488 246.289 16.434 cv
246.289 9.48401 li
246.285 9.43701 246.301 9.39099 246.328 9.34802 cv
246.352 9.31201 246.398 9.28101 246.469 9.25 cv
246.535 9.22699 246.621 9.20697 246.73 9.19098 cv
246.836 9.18402 246.969 9.17603 247.133 9.172 cv
247.297 9.17603 247.434 9.18402 247.543 9.19098 cv
247.648 9.20697 247.734 9.22699 247.797 9.25 cv
247.855 9.28101 247.898 9.31201 247.926 9.34802 cv
247.949 9.39099 247.961 9.43701 247.965 9.48401 cv
247.965 10.348 li
248.145 10.09 248.316 9.87903 248.48 9.70697 cv
248.637 9.54303 248.793 9.40601 248.941 9.30499 cv
249.086 9.20697 249.23 9.14099 249.375 9.09802 cv
249.52 9.06201 249.664 9.04303 249.813 9.039 cv
249.879 9.04303 249.953 9.047 250.031 9.05103 cv
250.109 9.06201 250.188 9.07397 250.273 9.09003 cv
250.352 9.10901 250.426 9.12903 250.492 9.15198 cv
250.551 9.17603 250.598 9.203 250.629 9.22699 cv
250.656 9.258 250.676 9.28497 250.691 9.31201 cv
250.703 9.34802 250.715 9.39099 250.727 9.44098 cv
250.734 9.5 250.742 9.58197 250.75 9.68701 cv
250.754 9.797 250.758 9.94501 250.758 10.129 cv
cp
f
257.512 16.457 mo
257.508 16.535 257.48 16.59 257.434 16.629 cv
257.379 16.672 257.297 16.699 257.188 16.719 cv
257.07 16.734 256.906 16.746 256.691 16.746 cv
256.453 16.746 256.281 16.734 256.18 16.719 cv
256.07 16.699 255.996 16.672 255.957 16.629 cv
255.91 16.59 255.891 16.535 255.891 16.457 cv
255.891 15.906 li
255.602 16.215 255.273 16.453 254.91 16.621 cv
254.543 16.793 254.137 16.875 253.691 16.879 cv
253.32 16.875 252.98 16.828 252.672 16.734 cv
252.363 16.641 252.098 16.5 251.871 16.305 cv
251.645 16.117 251.469 15.883 251.344 15.602 cv
251.219 15.324 251.156 14.996 251.16 14.617 cv
251.156 14.219 251.234 13.867 251.395 13.562 cv
251.551 13.266 251.789 13.02 252.105 12.824 cv
252.418 12.633 252.809 12.488 253.277 12.391 cv
253.746 12.301 254.289 12.254 254.906 12.25 cv
255.586 12.25 li
255.586 11.828 li
255.586 11.613 255.563 11.422 255.52 11.258 cv
255.473 11.098 255.398 10.961 255.301 10.848 cv
255.195 10.742 255.063 10.66 254.895 10.605 cv
254.723 10.555 254.512 10.531 254.27 10.527 cv
253.938 10.531 253.645 10.566 253.391 10.637 cv
253.129 10.711 252.902 10.793 252.707 10.879 cv
252.508 10.973 252.344 11.051 252.215 11.121 cv
252.078 11.195 251.969 11.234 251.891 11.23 cv
251.828 11.234 251.777 11.215 251.738 11.176 cv
251.691 11.141 251.656 11.09 251.629 11.02 cv
251.598 10.957 251.574 10.871 251.563 10.77 cv
251.543 10.672 251.535 10.562 251.539 10.441 cv
251.535 10.281 251.551 10.156 251.578 10.059 cv
251.602 9.96899 251.648 9.883 251.727 9.80499 cv
251.797 9.72998 251.926 9.64801 252.109 9.55902 cv
252.289 9.46899 252.5 9.383 252.746 9.30499 cv
252.988 9.22699 253.258 9.164 253.547 9.11298 cv
253.836 9.06598 254.133 9.04303 254.441 9.039 cv
254.984 9.04303 255.449 9.09399 255.836 9.19897 cv
256.223 9.30902 256.543 9.47302 256.793 9.69098 cv
257.043 9.90997 257.223 10.195 257.34 10.543 cv
257.449 10.895 257.508 11.309 257.512 11.781 cv
cp
255.586 13.48 mo
254.836 13.48 li
254.52 13.484 254.25 13.508 254.027 13.551 cv
253.801 13.602 253.617 13.672 253.48 13.762 cv
253.336 13.859 253.234 13.973 253.172 14.102 cv
253.105 14.238 253.07 14.387 253.074 14.555 cv
253.07 14.848 253.164 15.078 253.352 15.242 cv
253.535 15.41 253.793 15.492 254.121 15.492 cv
254.395 15.492 254.645 15.422 254.879 15.281 cv
255.105 15.141 255.344 14.937 255.586 14.664 cv
cp
f
265.738 9.96503 mo
265.734 10.219 265.707 10.402 265.652 10.52 cv
265.594 10.641 265.523 10.699 265.445 10.699 cv
264.625 10.699 li
264.738 10.824 264.82 10.969 264.871 11.125 cv
264.918 11.285 264.941 11.449 264.945 11.617 cv
264.941 12.027 264.875 12.387 264.742 12.699 cv
264.605 13.016 264.41 13.281 264.16 13.492 cv
263.906 13.711 263.605 13.875 263.25 13.984 cv
262.891 14.102 262.492 14.156 262.063 14.152 cv
261.836 14.156 261.625 14.129 261.422 14.07 cv
261.219 14.02 261.063 13.957 260.953 13.879 cv
260.891 13.949 260.832 14.027 260.785 14.121 cv
260.734 14.215 260.711 14.32 260.715 14.43 cv
260.711 14.586 260.777 14.707 260.91 14.801 cv
261.039 14.898 261.227 14.953 261.469 14.961 cv
263.16 15.023 li
263.555 15.039 263.906 15.098 264.215 15.191 cv
264.523 15.293 264.785 15.426 264.996 15.598 cv
265.207 15.773 265.367 15.984 265.477 16.227 cv
265.586 16.473 265.641 16.746 265.645 17.059 cv
265.641 17.395 265.566 17.719 265.418 18.027 cv
265.27 18.328 265.043 18.59 264.742 18.816 cv
264.438 19.035 264.059 19.215 263.605 19.348 cv
263.148 19.477 262.617 19.539 262.016 19.543 cv
261.418 19.539 260.914 19.492 260.496 19.402 cv
260.078 19.305 259.734 19.176 259.469 19.012 cv
259.199 18.844 259.004 18.645 258.887 18.418 cv
258.762 18.184 258.703 17.93 258.703 17.656 cv
258.703 17.484 258.723 17.324 258.77 17.168 cv
258.809 17.012 258.875 16.859 258.965 16.719 cv
259.047 16.574 259.152 16.441 259.277 16.309 cv
259.402 16.18 259.543 16.055 259.707 15.934 cv
259.48 15.82 259.309 15.66 259.188 15.449 cv
259.066 15.246 259.008 15.02 259.008 14.773 cv
259.008 14.473 259.074 14.195 259.215 13.937 cv
259.352 13.687 259.535 13.457 259.762 13.254 cv
259.578 13.074 259.434 12.859 259.324 12.602 cv
259.215 12.352 259.16 12.031 259.164 11.648 cv
259.16 11.246 259.23 10.887 259.375 10.562 cv
259.516 10.246 259.715 9.97699 259.973 9.75403 cv
260.227 9.53497 260.531 9.36298 260.883 9.24597 cv
261.234 9.12903 261.625 9.07001 262.055 9.07001 cv
262.273 9.07001 262.48 9.086 262.68 9.10901 cv
262.879 9.14099 263.066 9.17603 263.238 9.21899 cv
265.445 9.21899 li
265.527 9.22302 265.598 9.28101 265.656 9.39099 cv
265.707 9.508 265.734 9.69897 265.738 9.96503 cv
cp
263.223 11.609 mo
263.219 11.238 263.117 10.949 262.91 10.738 cv
262.699 10.535 262.406 10.43 262.031 10.426 cv
261.836 10.43 261.664 10.461 261.523 10.523 cv
261.375 10.59 261.254 10.68 261.16 10.789 cv
261.059 10.902 260.988 11.031 260.945 11.18 cv
260.895 11.328 260.871 11.484 260.875 11.641 cv
260.871 12 260.977 12.277 261.188 12.48 cv
261.395 12.687 261.684 12.793 262.055 12.789 cv
262.25 12.793 262.418 12.762 262.566 12.695 cv
262.707 12.637 262.828 12.551 262.93 12.437 cv
263.023 12.332 263.098 12.203 263.148 12.059 cv
263.195 11.918 263.219 11.77 263.223 11.609 cv
cp
263.684 17.16 mo
263.684 16.922 263.59 16.746 263.402 16.621 cv
263.215 16.5 262.957 16.43 262.629 16.418 cv
261.234 16.379 li
261.098 16.48 260.988 16.574 260.91 16.664 cv
260.828 16.754 260.766 16.84 260.719 16.926 cv
260.668 17.008 260.633 17.09 260.621 17.168 cv
260.602 17.246 260.594 17.324 260.598 17.41 cv
260.594 17.664 260.727 17.863 260.988 18 cv
261.25 18.133 261.621 18.199 262.102 18.203 cv
262.395 18.199 262.641 18.168 262.848 18.113 cv
263.047 18.051 263.211 17.973 263.34 17.875 cv
263.461 17.773 263.551 17.664 263.605 17.543 cv
263.656 17.422 263.684 17.293 263.684 17.16 cv
cp
f
273.363 12.758 mo
273.359 12.996 273.309 13.172 273.203 13.285 cv
273.094 13.402 272.945 13.461 272.766 13.457 cv
268.531 13.457 li
268.527 13.758 268.563 14.027 268.637 14.266 cv
268.703 14.508 268.816 14.711 268.973 14.879 cv
269.125 15.051 269.32 15.18 269.563 15.266 cv
269.801 15.355 270.09 15.398 270.434 15.398 cv
270.773 15.398 271.074 15.375 271.336 15.324 cv
271.594 15.277 271.82 15.223 272.012 15.16 cv
272.199 15.102 272.355 15.047 272.484 14.996 cv
272.605 14.949 272.707 14.926 272.789 14.922 cv
272.832 14.926 272.871 14.934 272.906 14.949 cv
272.934 14.969 272.961 15 272.98 15.047 cv
273 15.094 273.012 15.16 273.023 15.246 cv
273.027 15.332 273.031 15.441 273.035 15.57 cv
273.031 15.687 273.031 15.785 273.027 15.863 cv
273.02 15.945 273.012 16.012 273.004 16.066 cv
272.992 16.125 272.977 16.176 272.957 16.211 cv
272.938 16.254 272.91 16.289 272.879 16.324 cv
272.844 16.363 272.75 16.414 272.602 16.473 cv
272.445 16.539 272.254 16.602 272.023 16.656 cv
271.785 16.719 271.516 16.766 271.219 16.812 cv
270.914 16.852 270.594 16.875 270.254 16.879 cv
269.633 16.875 269.09 16.801 268.629 16.645 cv
268.16 16.492 267.773 16.254 267.465 15.937 cv
267.148 15.621 266.914 15.223 266.766 14.738 cv
266.609 14.258 266.535 13.691 266.539 13.035 cv
266.535 12.422 266.613 11.863 266.777 11.367 cv
266.934 10.871 267.168 10.453 267.48 10.105 cv
267.785 9.76202 268.16 9.49597 268.598 9.31201 cv
269.035 9.133 269.527 9.04303 270.082 9.039 cv
270.66 9.04303 271.16 9.12903 271.574 9.297 cv
271.988 9.47302 272.324 9.711 272.59 10.012 cv
272.852 10.316 273.047 10.676 273.176 11.09 cv
273.297 11.508 273.359 11.957 273.363 12.445 cv
cp
271.461 12.195 mo
271.473 11.645 271.363 11.211 271.129 10.898 cv
270.895 10.586 270.527 10.43 270.035 10.426 cv
269.785 10.43 269.57 10.477 269.387 10.566 cv
269.199 10.664 269.047 10.789 268.926 10.945 cv
268.801 11.105 268.707 11.293 268.645 11.508 cv
268.578 11.723 268.539 11.953 268.531 12.195 cv
cp
f
285.598 9.67999 mo
285.598 10.246 285.508 10.75 285.332 11.184 cv
285.152 11.621 284.895 11.988 284.559 12.285 cv
284.219 12.59 283.805 12.816 283.316 12.969 cv
282.824 13.125 282.246 13.203 281.582 13.199 cv
280.742 13.199 li
280.742 16.418 li
280.738 16.473 280.723 16.52 280.691 16.559 cv
280.656 16.602 280.602 16.637 280.523 16.66 cv
280.445 16.687 280.34 16.707 280.211 16.723 cv
280.078 16.738 279.914 16.746 279.715 16.746 cv
279.516 16.746 279.348 16.738 279.219 16.723 cv
279.082 16.707 278.977 16.687 278.902 16.66 cv
278.82 16.637 278.766 16.602 278.738 16.559 cv
278.703 16.52 278.688 16.473 278.691 16.418 cv
278.691 7.34802 li
278.688 7.10498 278.754 6.922 278.883 6.797 cv
279.008 6.67603 279.176 6.617 279.387 6.61298 cv
281.762 6.61298 li
281.996 6.617 282.227 6.625 282.445 6.64099 cv
282.66 6.65997 282.918 6.69897 283.219 6.758 cv
283.52 6.82001 283.824 6.92999 284.137 7.09003 cv
284.445 7.25403 284.707 7.461 284.926 7.703 cv
285.141 7.953 285.309 8.242 285.426 8.57001 cv
285.539 8.90198 285.598 9.27002 285.598 9.67999 cv
cp
283.453 9.82397 mo
283.453 9.47699 283.391 9.18402 283.266 8.953 cv
283.141 8.72699 282.984 8.55902 282.805 8.44501 cv
282.621 8.34003 282.434 8.27002 282.234 8.23798 cv
282.031 8.211 281.824 8.19897 281.613 8.19501 cv
280.742 8.19501 li
280.742 11.617 li
281.66 11.617 li
281.988 11.621 282.262 11.574 282.484 11.484 cv
282.703 11.398 282.883 11.277 283.023 11.117 cv
283.16 10.961 283.266 10.77 283.344 10.547 cv
283.414 10.328 283.453 10.09 283.453 9.82397 cv
cp
f
291.535 10.129 mo
291.535 10.32 291.527 10.473 291.52 10.59 cv
291.504 10.711 291.488 10.805 291.473 10.871 cv
291.449 10.941 291.422 10.988 291.391 11.012 cv
291.352 11.039 291.309 11.051 291.262 11.051 cv
291.215 11.051 291.168 11.043 291.121 11.023 cv
291.066 11.008 291.008 10.988 290.945 10.965 cv
290.875 10.945 290.805 10.926 290.73 10.906 cv
290.648 10.891 290.563 10.883 290.473 10.879 cv
290.359 10.883 290.25 10.902 290.145 10.945 cv
290.035 10.992 289.922 11.062 289.809 11.152 cv
289.688 11.246 289.566 11.371 289.441 11.523 cv
289.313 11.684 289.176 11.875 289.031 12.102 cv
289.031 16.434 li
289.027 16.488 289.012 16.531 288.984 16.57 cv
288.949 16.609 288.895 16.645 288.824 16.668 cv
288.746 16.695 288.648 16.711 288.523 16.727 cv
288.398 16.738 288.238 16.746 288.051 16.746 cv
287.855 16.746 287.699 16.738 287.574 16.727 cv
287.449 16.711 287.348 16.695 287.273 16.668 cv
287.195 16.645 287.141 16.609 287.113 16.57 cv
287.078 16.531 287.063 16.488 287.066 16.434 cv
287.066 9.48401 li
287.063 9.43701 287.078 9.39099 287.105 9.34802 cv
287.129 9.31201 287.176 9.28101 287.246 9.25 cv
287.313 9.22699 287.398 9.20697 287.508 9.19098 cv
287.613 9.18402 287.746 9.17603 287.91 9.172 cv
288.074 9.17603 288.211 9.18402 288.32 9.19098 cv
288.426 9.20697 288.512 9.22699 288.574 9.25 cv
288.633 9.28101 288.676 9.31201 288.703 9.34802 cv
288.727 9.39099 288.738 9.43701 288.742 9.48401 cv
288.742 10.348 li
288.922 10.09 289.094 9.87903 289.258 9.70697 cv
289.414 9.54303 289.57 9.40601 289.719 9.30499 cv
289.863 9.20697 290.008 9.14099 290.152 9.09802 cv
290.297 9.06201 290.441 9.04303 290.59 9.039 cv
290.656 9.04303 290.73 9.047 290.809 9.05103 cv
290.887 9.06201 290.965 9.07397 291.051 9.09003 cv
291.129 9.10901 291.203 9.12903 291.27 9.15198 cv
291.328 9.17603 291.375 9.203 291.406 9.22699 cv
291.434 9.258 291.453 9.28497 291.469 9.31201 cv
291.48 9.34802 291.492 9.39099 291.504 9.44098 cv
291.512 9.5 291.52 9.58197 291.527 9.68701 cv
291.531 9.797 291.535 9.94501 291.535 10.129 cv
cp
f
299.043 12.758 mo
299.039 12.996 298.988 13.172 298.883 13.285 cv
298.773 13.402 298.625 13.461 298.445 13.457 cv
294.211 13.457 li
294.207 13.758 294.242 14.027 294.316 14.266 cv
294.383 14.508 294.496 14.711 294.652 14.879 cv
294.805 15.051 295 15.18 295.242 15.266 cv
295.48 15.355 295.77 15.398 296.113 15.398 cv
296.453 15.398 296.754 15.375 297.016 15.324 cv
297.273 15.277 297.5 15.223 297.691 15.16 cv
297.879 15.102 298.035 15.047 298.164 14.996 cv
298.285 14.949 298.387 14.926 298.469 14.922 cv
298.512 14.926 298.551 14.934 298.586 14.949 cv
298.613 14.969 298.641 15 298.66 15.047 cv
298.68 15.094 298.691 15.16 298.703 15.246 cv
298.707 15.332 298.711 15.441 298.715 15.57 cv
298.711 15.687 298.711 15.785 298.707 15.863 cv
298.699 15.945 298.691 16.012 298.684 16.066 cv
298.672 16.125 298.656 16.176 298.637 16.211 cv
298.617 16.254 298.59 16.289 298.559 16.324 cv
298.523 16.363 298.43 16.414 298.281 16.473 cv
298.125 16.539 297.934 16.602 297.703 16.656 cv
297.465 16.719 297.195 16.766 296.898 16.812 cv
296.594 16.852 296.273 16.875 295.934 16.879 cv
295.313 16.875 294.77 16.801 294.309 16.645 cv
293.84 16.492 293.453 16.254 293.145 15.937 cv
292.828 15.621 292.594 15.223 292.445 14.738 cv
292.289 14.258 292.215 13.691 292.219 13.035 cv
292.215 12.422 292.293 11.863 292.457 11.367 cv
292.613 10.871 292.848 10.453 293.16 10.105 cv
293.465 9.76202 293.84 9.49597 294.277 9.31201 cv
294.715 9.133 295.207 9.04303 295.762 9.039 cv
296.34 9.04303 296.84 9.12903 297.254 9.297 cv
297.668 9.47302 298.004 9.711 298.27 10.012 cv
298.531 10.316 298.727 10.676 298.855 11.09 cv
298.977 11.508 299.039 11.957 299.043 12.445 cv
cp
297.141 12.195 mo
297.152 11.645 297.043 11.211 296.809 10.898 cv
296.574 10.586 296.207 10.43 295.715 10.426 cv
295.465 10.43 295.25 10.477 295.066 10.566 cv
294.879 10.664 294.727 10.789 294.605 10.945 cv
294.48 11.105 294.387 11.293 294.324 11.508 cv
294.258 11.723 294.219 11.953 294.211 12.195 cv
cp
f
307.648 12.855 mo
307.648 13.477 307.582 14.035 307.449 14.531 cv
307.316 15.027 307.121 15.449 306.867 15.797 cv
306.613 16.145 306.297 16.414 305.918 16.598 cv
305.535 16.785 305.102 16.875 304.617 16.879 cv
304.41 16.875 304.223 16.855 304.059 16.82 cv
303.887 16.777 303.723 16.719 303.566 16.641 cv
303.406 16.562 303.25 16.465 303.098 16.34 cv
302.938 16.223 302.777 16.082 302.613 15.918 cv
302.613 19.191 li
302.609 19.238 302.594 19.285 302.566 19.332 cv
302.531 19.371 302.477 19.406 302.406 19.437 cv
302.328 19.461 302.23 19.484 302.105 19.504 cv
301.98 19.516 301.82 19.523 301.633 19.527 cv
301.438 19.523 301.281 19.516 301.156 19.504 cv
301.031 19.484 300.93 19.461 300.855 19.437 cv
300.777 19.406 300.723 19.371 300.695 19.332 cv
300.66 19.285 300.645 19.238 300.648 19.191 cv
300.648 9.48401 li
300.645 9.43701 300.66 9.39099 300.688 9.34802 cv
300.711 9.31201 300.754 9.28101 300.824 9.25 cv
300.887 9.22699 300.973 9.20697 301.082 9.19098 cv
301.184 9.18402 301.32 9.17603 301.484 9.172 cv
301.641 9.17603 301.77 9.18402 301.875 9.19098 cv
301.98 9.20697 302.066 9.22699 302.133 9.25 cv
302.195 9.28101 302.242 9.31201 302.27 9.34802 cv
302.293 9.39099 302.305 9.43701 302.309 9.48401 cv
302.309 10.301 li
302.508 10.094 302.707 9.914 302.906 9.75403 cv
303.098 9.59802 303.297 9.46503 303.5 9.35498 cv
303.703 9.25403 303.91 9.172 304.129 9.117 cv
304.34 9.06598 304.57 9.04303 304.82 9.039 cv
305.324 9.04303 305.758 9.14099 306.121 9.34003 cv
306.477 9.54303 306.77 9.82001 306.996 10.164 cv
307.219 10.516 307.383 10.918 307.492 11.379 cv
307.594 11.84 307.648 12.332 307.648 12.855 cv
cp
305.605 12.996 mo
305.602 12.703 305.582 12.422 305.539 12.145 cv
305.492 11.875 305.414 11.633 305.313 11.418 cv
305.203 11.207 305.063 11.035 304.891 10.906 cv
304.715 10.781 304.5 10.719 304.242 10.715 cv
304.109 10.719 303.98 10.738 303.855 10.773 cv
303.727 10.816 303.598 10.879 303.465 10.965 cv
303.332 11.055 303.195 11.168 303.059 11.309 cv
302.914 11.449 302.766 11.625 302.613 11.828 cv
302.613 14.121 li
302.887 14.469 303.148 14.738 303.398 14.926 cv
303.645 15.117 303.906 15.211 304.18 15.211 cv
304.434 15.211 304.648 15.148 304.832 15.016 cv
305.008 14.891 305.156 14.719 305.27 14.508 cv
305.383 14.297 305.465 14.059 305.523 13.793 cv
305.574 13.527 305.602 13.262 305.605 12.996 cv
cp
f
315.145 16.457 mo
315.141 16.535 315.113 16.59 315.066 16.629 cv
315.012 16.672 314.93 16.699 314.82 16.719 cv
314.703 16.734 314.539 16.746 314.324 16.746 cv
314.086 16.746 313.914 16.734 313.813 16.719 cv
313.703 16.699 313.629 16.672 313.59 16.629 cv
313.543 16.59 313.523 16.535 313.523 16.457 cv
313.523 15.906 li
313.234 16.215 312.906 16.453 312.543 16.621 cv
312.176 16.793 311.77 16.875 311.324 16.879 cv
310.953 16.875 310.613 16.828 310.305 16.734 cv
309.996 16.641 309.73 16.5 309.504 16.305 cv
309.277 16.117 309.102 15.883 308.977 15.602 cv
308.852 15.324 308.789 14.996 308.793 14.617 cv
308.789 14.219 308.867 13.867 309.027 13.562 cv
309.184 13.266 309.422 13.02 309.738 12.824 cv
310.051 12.633 310.441 12.488 310.91 12.391 cv
311.379 12.301 311.922 12.254 312.539 12.25 cv
313.219 12.25 li
313.219 11.828 li
313.219 11.613 313.195 11.422 313.152 11.258 cv
313.105 11.098 313.031 10.961 312.934 10.848 cv
312.828 10.742 312.695 10.66 312.527 10.605 cv
312.355 10.555 312.145 10.531 311.902 10.527 cv
311.57 10.531 311.277 10.566 311.023 10.637 cv
310.762 10.711 310.535 10.793 310.34 10.879 cv
310.141 10.973 309.977 11.051 309.848 11.121 cv
309.711 11.195 309.602 11.234 309.523 11.23 cv
309.461 11.234 309.41 11.215 309.371 11.176 cv
309.324 11.141 309.289 11.09 309.262 11.02 cv
309.23 10.957 309.207 10.871 309.195 10.77 cv
309.176 10.672 309.168 10.562 309.172 10.441 cv
309.168 10.281 309.184 10.156 309.211 10.059 cv
309.234 9.96899 309.281 9.883 309.359 9.80499 cv
309.43 9.72998 309.559 9.64801 309.742 9.55902 cv
309.922 9.46899 310.133 9.383 310.379 9.30499 cv
310.621 9.22699 310.891 9.164 311.18 9.11298 cv
311.469 9.06598 311.766 9.04303 312.074 9.039 cv
312.617 9.04303 313.082 9.09399 313.469 9.19897 cv
313.855 9.30902 314.176 9.47302 314.426 9.69098 cv
314.676 9.90997 314.855 10.195 314.973 10.543 cv
315.082 10.895 315.141 11.309 315.145 11.781 cv
cp
313.219 13.48 mo
312.469 13.48 li
312.152 13.484 311.883 13.508 311.66 13.551 cv
311.434 13.602 311.25 13.672 311.113 13.762 cv
310.969 13.859 310.867 13.973 310.805 14.102 cv
310.738 14.238 310.703 14.387 310.707 14.555 cv
310.703 14.848 310.797 15.078 310.984 15.242 cv
311.168 15.41 311.426 15.492 311.754 15.492 cv
312.027 15.492 312.277 15.422 312.512 15.281 cv
312.738 15.141 312.977 14.937 313.219 14.664 cv
cp
f
321.57 10.129 mo
321.57 10.32 321.563 10.473 321.555 10.59 cv
321.539 10.711 321.523 10.805 321.508 10.871 cv
321.484 10.941 321.457 10.988 321.426 11.012 cv
321.387 11.039 321.344 11.051 321.297 11.051 cv
321.25 11.051 321.203 11.043 321.156 11.023 cv
321.102 11.008 321.043 10.988 320.98 10.965 cv
320.91 10.945 320.84 10.926 320.766 10.906 cv
320.684 10.891 320.598 10.883 320.508 10.879 cv
320.395 10.883 320.285 10.902 320.18 10.945 cv
320.07 10.992 319.957 11.062 319.844 11.152 cv
319.723 11.246 319.602 11.371 319.477 11.523 cv
319.348 11.684 319.211 11.875 319.066 12.102 cv
319.066 16.434 li
319.063 16.488 319.047 16.531 319.02 16.57 cv
318.984 16.609 318.93 16.645 318.859 16.668 cv
318.781 16.695 318.684 16.711 318.559 16.727 cv
318.434 16.738 318.273 16.746 318.086 16.746 cv
317.891 16.746 317.734 16.738 317.609 16.727 cv
317.484 16.711 317.383 16.695 317.309 16.668 cv
317.23 16.645 317.176 16.609 317.148 16.57 cv
317.113 16.531 317.098 16.488 317.102 16.434 cv
317.102 9.48401 li
317.098 9.43701 317.113 9.39099 317.141 9.34802 cv
317.164 9.31201 317.211 9.28101 317.281 9.25 cv
317.348 9.22699 317.434 9.20697 317.543 9.19098 cv
317.648 9.18402 317.781 9.17603 317.945 9.172 cv
318.109 9.17603 318.246 9.18402 318.355 9.19098 cv
318.461 9.20697 318.547 9.22699 318.609 9.25 cv
318.668 9.28101 318.711 9.31201 318.738 9.34802 cv
318.762 9.39099 318.773 9.43701 318.777 9.48401 cv
318.777 10.348 li
318.957 10.09 319.129 9.87903 319.293 9.70697 cv
319.449 9.54303 319.605 9.40601 319.754 9.30499 cv
319.898 9.20697 320.043 9.14099 320.188 9.09802 cv
320.332 9.06201 320.477 9.04303 320.625 9.039 cv
320.691 9.04303 320.766 9.047 320.844 9.05103 cv
320.922 9.06201 321 9.07397 321.086 9.09003 cv
321.164 9.10901 321.238 9.12903 321.305 9.15198 cv
321.363 9.17603 321.41 9.203 321.441 9.22699 cv
321.469 9.258 321.488 9.28497 321.504 9.31201 cv
321.516 9.34802 321.527 9.39099 321.539 9.44098 cv
321.547 9.5 321.555 9.58197 321.563 9.68701 cv
321.566 9.797 321.57 9.94501 321.57 10.129 cv
cp
f
328.313 16.457 mo
328.309 16.535 328.281 16.59 328.234 16.629 cv
328.18 16.672 328.098 16.699 327.988 16.719 cv
327.871 16.734 327.707 16.746 327.492 16.746 cv
327.254 16.746 327.082 16.734 326.98 16.719 cv
326.871 16.699 326.797 16.672 326.758 16.629 cv
326.711 16.59 326.691 16.535 326.691 16.457 cv
326.691 15.906 li
326.402 16.215 326.074 16.453 325.711 16.621 cv
325.344 16.793 324.938 16.875 324.492 16.879 cv
324.121 16.875 323.781 16.828 323.473 16.734 cv
323.164 16.641 322.898 16.5 322.672 16.305 cv
322.445 16.117 322.27 15.883 322.145 15.602 cv
322.02 15.324 321.957 14.996 321.961 14.617 cv
321.957 14.219 322.035 13.867 322.195 13.562 cv
322.352 13.266 322.59 13.02 322.906 12.824 cv
323.219 12.633 323.609 12.488 324.078 12.391 cv
324.547 12.301 325.09 12.254 325.707 12.25 cv
326.387 12.25 li
326.387 11.828 li
326.387 11.613 326.363 11.422 326.32 11.258 cv
326.273 11.098 326.199 10.961 326.102 10.848 cv
325.996 10.742 325.863 10.66 325.695 10.605 cv
325.523 10.555 325.313 10.531 325.07 10.527 cv
324.738 10.531 324.445 10.566 324.191 10.637 cv
323.93 10.711 323.703 10.793 323.508 10.879 cv
323.309 10.973 323.145 11.051 323.016 11.121 cv
322.879 11.195 322.77 11.234 322.691 11.23 cv
322.629 11.234 322.578 11.215 322.539 11.176 cv
322.492 11.141 322.457 11.09 322.43 11.02 cv
322.398 10.957 322.375 10.871 322.363 10.77 cv
322.344 10.672 322.336 10.562 322.34 10.441 cv
322.336 10.281 322.352 10.156 322.379 10.059 cv
322.402 9.96899 322.449 9.883 322.527 9.80499 cv
322.598 9.72998 322.727 9.64801 322.91 9.55902 cv
323.09 9.46899 323.301 9.383 323.547 9.30499 cv
323.789 9.22699 324.059 9.164 324.348 9.11298 cv
324.637 9.06598 324.934 9.04303 325.242 9.039 cv
325.785 9.04303 326.25 9.09399 326.637 9.19897 cv
327.023 9.30902 327.344 9.47302 327.594 9.69098 cv
327.844 9.90997 328.023 10.195 328.141 10.543 cv
328.25 10.895 328.309 11.309 328.313 11.781 cv
cp
326.387 13.48 mo
325.637 13.48 li
325.32 13.484 325.051 13.508 324.828 13.551 cv
324.602 13.602 324.418 13.672 324.281 13.762 cv
324.137 13.859 324.035 13.973 323.973 14.102 cv
323.906 14.238 323.871 14.387 323.875 14.555 cv
323.871 14.848 323.965 15.078 324.152 15.242 cv
324.336 15.41 324.594 15.492 324.922 15.492 cv
325.195 15.492 325.445 15.422 325.68 15.281 cv
325.906 15.141 326.145 14.937 326.387 14.664 cv
cp
f
334.309 15.75 mo
334.309 15.977 334.293 16.152 334.266 16.273 cv
334.234 16.398 334.195 16.484 334.152 16.531 cv
334.102 16.582 334.035 16.625 333.945 16.664 cv
333.852 16.703 333.742 16.734 333.625 16.766 cv
333.5 16.789 333.367 16.812 333.227 16.832 cv
333.082 16.844 332.941 16.852 332.797 16.855 cv
332.406 16.852 332.066 16.801 331.781 16.707 cv
331.496 16.605 331.262 16.457 331.074 16.25 cv
330.887 16.047 330.746 15.789 330.66 15.477 cv
330.566 15.168 330.523 14.797 330.527 14.367 cv
330.527 10.809 li
329.695 10.809 li
329.594 10.812 329.52 10.75 329.469 10.625 cv
329.414 10.504 329.387 10.301 329.391 10.012 cv
329.387 9.86298 329.395 9.73401 329.41 9.633 cv
329.422 9.53101 329.441 9.44897 329.469 9.38702 cv
329.492 9.328 329.523 9.28497 329.566 9.258 cv
329.602 9.23401 329.648 9.22302 329.703 9.21899 cv
330.527 9.21899 li
330.527 7.66803 li
330.523 7.62097 330.539 7.57397 330.57 7.52698 cv
330.598 7.48798 330.648 7.453 330.727 7.422 cv
330.801 7.39801 330.902 7.375 331.031 7.35901 cv
331.156 7.34802 331.313 7.34399 331.504 7.34003 cv
331.691 7.34399 331.852 7.34802 331.98 7.35901 cv
332.105 7.375 332.207 7.39801 332.281 7.422 cv
332.352 7.453 332.402 7.48798 332.438 7.52698 cv
332.465 7.57397 332.48 7.62097 332.484 7.66803 cv
332.484 9.21899 li
333.996 9.21899 li
334.047 9.22302 334.094 9.23401 334.133 9.258 cv
334.172 9.28497 334.203 9.328 334.23 9.38702 cv
334.254 9.44897 334.273 9.53101 334.289 9.633 cv
334.301 9.73401 334.309 9.86298 334.309 10.012 cv
334.309 10.301 334.281 10.504 334.23 10.625 cv
334.176 10.75 334.102 10.812 334.004 10.809 cv
332.484 10.809 li
332.484 14.074 li
332.48 14.453 332.539 14.738 332.664 14.926 cv
332.781 15.117 332.996 15.211 333.301 15.211 cv
333.402 15.211 333.496 15.203 333.582 15.184 cv
333.664 15.168 333.738 15.148 333.805 15.121 cv
333.867 15.102 333.922 15.078 333.969 15.059 cv
334.012 15.043 334.051 15.035 334.09 15.031 cv
334.117 15.035 334.148 15.043 334.18 15.059 cv
334.207 15.078 334.227 15.117 334.246 15.168 cv
334.258 15.227 334.273 15.301 334.289 15.391 cv
334.301 15.488 334.309 15.605 334.309 15.75 cv
cp
f
337.691 16.434 mo
337.688 16.488 337.672 16.531 337.645 16.57 cv
337.609 16.609 337.555 16.645 337.484 16.668 cv
337.406 16.695 337.309 16.711 337.184 16.727 cv
337.059 16.738 336.898 16.746 336.711 16.746 cv
336.516 16.746 336.359 16.738 336.234 16.727 cv
336.109 16.711 336.008 16.695 335.934 16.668 cv
335.855 16.645 335.801 16.609 335.773 16.57 cv
335.738 16.531 335.723 16.488 335.727 16.434 cv
335.727 9.5 li
335.723 9.44897 335.738 9.40198 335.773 9.36298 cv
335.801 9.32397 335.855 9.29303 335.934 9.26202 cv
336.008 9.23798 336.109 9.21503 336.234 9.19501 cv
336.359 9.18402 336.516 9.17603 336.711 9.172 cv
336.898 9.17603 337.059 9.18402 337.184 9.19501 cv
337.309 9.21503 337.406 9.23798 337.484 9.26202 cv
337.555 9.29303 337.609 9.32397 337.645 9.36298 cv
337.672 9.40198 337.688 9.44897 337.691 9.5 cv
cp
337.84 7.12903 mo
337.84 7.52698 337.758 7.80103 337.598 7.94897 cv
337.434 8.10199 337.137 8.17603 336.703 8.172 cv
336.258 8.17603 335.957 8.10199 335.809 7.95697 cv
335.652 7.81201 335.578 7.55103 335.578 7.16803 cv
335.578 6.77301 335.656 6.5 335.816 6.34802 cv
335.973 6.19501 336.273 6.117 336.719 6.117 cv
337.152 6.117 337.449 6.19098 337.605 6.34003 cv
337.762 6.48798 337.84 6.75403 337.84 7.12903 cv
cp
f
346.684 12.887 mo
346.68 13.484 346.602 14.027 346.449 14.512 cv
346.289 15.004 346.055 15.422 345.738 15.773 cv
345.422 16.125 345.023 16.398 344.547 16.59 cv
344.066 16.781 343.508 16.875 342.871 16.879 cv
342.25 16.875 341.711 16.793 341.258 16.621 cv
340.797 16.453 340.418 16.203 340.121 15.875 cv
339.816 15.551 339.594 15.148 339.449 14.668 cv
339.305 14.191 339.234 13.645 339.234 13.027 cv
339.234 12.437 339.313 11.898 339.469 11.406 cv
339.625 10.918 339.863 10.496 340.184 10.145 cv
340.5 9.797 340.895 9.52301 341.371 9.328 cv
341.844 9.13702 342.402 9.04303 343.043 9.039 cv
343.668 9.04303 344.207 9.125 344.664 9.29303 cv
345.121 9.46503 345.5 9.71503 345.797 10.039 cv
346.094 10.367 346.316 10.77 346.465 11.246 cv
346.609 11.727 346.68 12.273 346.684 12.887 cv
cp
344.664 12.965 mo
344.66 12.629 344.633 12.312 344.582 12.02 cv
344.523 11.734 344.43 11.484 344.305 11.27 cv
344.172 11.059 344 10.891 343.789 10.77 cv
343.57 10.652 343.301 10.594 342.973 10.59 cv
342.684 10.594 342.43 10.648 342.211 10.75 cv
341.992 10.859 341.813 11.016 341.672 11.219 cv
341.531 11.426 341.426 11.672 341.355 11.957 cv
341.285 12.25 341.25 12.578 341.25 12.941 cv
341.25 13.289 341.277 13.605 341.336 13.891 cv
341.391 14.184 341.484 14.434 341.613 14.645 cv
341.738 14.859 341.91 15.023 342.133 15.137 cv
342.348 15.258 342.617 15.316 342.941 15.312 cv
343.234 15.316 343.492 15.262 343.715 15.152 cv
343.93 15.047 344.109 14.895 344.25 14.687 cv
344.391 14.488 344.492 14.242 344.563 13.953 cv
344.625 13.668 344.66 13.34 344.664 12.965 cv
cp
f
354.93 16.434 mo
354.926 16.488 354.91 16.531 354.883 16.57 cv
354.848 16.609 354.797 16.645 354.727 16.668 cv
354.652 16.695 354.551 16.711 354.426 16.727 cv
354.297 16.738 354.141 16.746 353.957 16.746 cv
353.762 16.746 353.602 16.738 353.477 16.727 cv
353.348 16.711 353.246 16.695 353.176 16.668 cv
353.098 16.645 353.047 16.609 353.02 16.57 cv
352.984 16.531 352.969 16.488 352.973 16.434 cv
352.973 12.469 li
352.969 12.133 352.945 11.867 352.898 11.672 cv
352.848 11.48 352.773 11.316 352.684 11.18 cv
352.59 11.043 352.473 10.937 352.324 10.859 cv
352.176 10.785 352 10.746 351.805 10.746 cv
351.551 10.746 351.301 10.84 351.047 11.02 cv
350.793 11.203 350.527 11.465 350.254 11.812 cv
350.254 16.434 li
350.25 16.488 350.234 16.531 350.207 16.57 cv
350.172 16.609 350.117 16.645 350.047 16.668 cv
349.969 16.695 349.871 16.711 349.746 16.727 cv
349.621 16.738 349.461 16.746 349.273 16.746 cv
349.078 16.746 348.922 16.738 348.797 16.727 cv
348.672 16.711 348.57 16.695 348.496 16.668 cv
348.418 16.645 348.363 16.609 348.336 16.57 cv
348.301 16.531 348.285 16.488 348.289 16.434 cv
348.289 9.48401 li
348.285 9.43701 348.301 9.39099 348.328 9.34802 cv
348.352 9.31201 348.398 9.28101 348.469 9.25 cv
348.535 9.22699 348.621 9.20697 348.73 9.19098 cv
348.836 9.18402 348.969 9.17603 349.133 9.172 cv
349.297 9.17603 349.434 9.18402 349.543 9.19098 cv
349.648 9.20697 349.734 9.22699 349.797 9.25 cv
349.855 9.28101 349.898 9.31201 349.926 9.34802 cv
349.949 9.39099 349.961 9.43701 349.965 9.48401 cv
349.965 10.285 li
350.348 9.875 350.738 9.56201 351.137 9.35199 cv
351.531 9.14502 351.949 9.04303 352.383 9.039 cv
352.852 9.04303 353.25 9.12097 353.578 9.27301 cv
353.902 9.43402 354.164 9.64502 354.363 9.90997 cv
354.563 10.18 354.707 10.492 354.797 10.848 cv
354.883 11.207 354.926 11.637 354.93 12.141 cv
cp
f
367.344 7.45697 mo
367.34 7.61298 367.332 7.742 367.324 7.84399 cv
367.309 7.953 367.289 8.039 367.266 8.10199 cv
367.234 8.16803 367.203 8.21503 367.168 8.242 cv
367.125 8.27698 367.082 8.29303 367.039 8.289 cv
364.516 8.289 li
364.516 16.418 li
364.516 16.473 364.496 16.52 364.465 16.559 cv
364.426 16.602 364.371 16.637 364.297 16.66 cv
364.215 16.687 364.109 16.707 363.98 16.723 cv
363.844 16.738 363.68 16.746 363.484 16.746 cv
363.289 16.746 363.125 16.738 362.992 16.723 cv
362.859 16.707 362.754 16.687 362.676 16.66 cv
362.598 16.637 362.539 16.602 362.508 16.559 cv
362.469 16.52 362.453 16.473 362.457 16.418 cv
362.457 8.289 li
359.934 8.289 li
359.879 8.29303 359.832 8.27698 359.801 8.242 cv
359.762 8.21503 359.73 8.16803 359.707 8.10199 cv
359.676 8.039 359.656 7.953 359.648 7.84399 cv
359.633 7.742 359.629 7.61298 359.629 7.45697 cv
359.629 7.30499 359.633 7.172 359.648 7.05902 cv
359.656 6.953 359.676 6.86298 359.707 6.797 cv
359.73 6.73401 359.762 6.68701 359.801 6.65601 cv
359.832 6.62903 359.879 6.617 359.934 6.61298 cv
367.039 6.61298 li
367.082 6.617 367.125 6.62903 367.168 6.65601 cv
367.203 6.68701 367.234 6.73401 367.266 6.797 cv
367.289 6.86298 367.309 6.953 367.324 7.05902 cv
367.332 7.172 367.34 7.30499 367.344 7.45697 cv
cp
f
370.379 16.434 mo
370.375 16.488 370.359 16.531 370.332 16.57 cv
370.297 16.609 370.242 16.645 370.172 16.668 cv
370.094 16.695 369.996 16.711 369.871 16.727 cv
369.746 16.738 369.586 16.746 369.398 16.746 cv
369.203 16.746 369.047 16.738 368.922 16.727 cv
368.797 16.711 368.695 16.695 368.621 16.668 cv
368.543 16.645 368.488 16.609 368.461 16.57 cv
368.426 16.531 368.41 16.488 368.414 16.434 cv
368.414 9.5 li
368.41 9.44897 368.426 9.40198 368.461 9.36298 cv
368.488 9.32397 368.543 9.29303 368.621 9.26202 cv
368.695 9.23798 368.797 9.21503 368.922 9.19501 cv
369.047 9.18402 369.203 9.17603 369.398 9.172 cv
369.586 9.17603 369.746 9.18402 369.871 9.19501 cv
369.996 9.21503 370.094 9.23798 370.172 9.26202 cv
370.242 9.29303 370.297 9.32397 370.332 9.36298 cv
370.359 9.40198 370.375 9.44897 370.379 9.5 cv
cp
370.527 7.12903 mo
370.527 7.52698 370.445 7.80103 370.285 7.94897 cv
370.121 8.10199 369.824 8.17603 369.391 8.172 cv
368.945 8.17603 368.645 8.10199 368.496 7.95697 cv
368.34 7.81201 368.266 7.55103 368.266 7.16803 cv
368.266 6.77301 368.344 6.5 368.504 6.34802 cv
368.66 6.19501 368.961 6.117 369.406 6.117 cv
369.84 6.117 370.137 6.19098 370.293 6.34003 cv
370.449 6.48798 370.527 6.75403 370.527 7.12903 cv
cp
f
383.43 16.434 mo
383.426 16.488 383.41 16.531 383.383 16.57 cv
383.348 16.609 383.297 16.645 383.227 16.668 cv
383.152 16.695 383.051 16.711 382.93 16.727 cv
382.805 16.738 382.648 16.746 382.457 16.746 cv
382.258 16.746 382.098 16.738 381.973 16.727 cv
381.848 16.711 381.746 16.695 381.672 16.668 cv
381.594 16.645 381.543 16.609 381.516 16.57 cv
381.488 16.531 381.473 16.488 381.477 16.434 cv
381.477 12.312 li
381.473 12.082 381.453 11.867 381.41 11.672 cv
381.363 11.48 381.293 11.316 381.207 11.18 cv
381.113 11.043 381 10.937 380.863 10.859 cv
380.723 10.785 380.559 10.746 380.367 10.746 cv
380.133 10.746 379.895 10.84 379.656 11.02 cv
379.418 11.203 379.16 11.465 378.879 11.812 cv
378.879 16.434 li
378.879 16.488 378.863 16.531 378.832 16.57 cv
378.801 16.609 378.746 16.645 378.672 16.668 cv
378.594 16.695 378.492 16.711 378.371 16.727 cv
378.246 16.738 378.094 16.746 377.906 16.746 cv
377.711 16.746 377.551 16.738 377.43 16.727 cv
377.301 16.711 377.199 16.695 377.129 16.668 cv
377.051 16.645 377 16.609 376.969 16.57 cv
376.938 16.531 376.922 16.488 376.922 16.434 cv
376.922 12.312 li
376.922 12.082 376.898 11.867 376.855 11.672 cv
376.813 11.48 376.746 11.316 376.66 11.18 cv
376.566 11.043 376.453 10.937 376.316 10.859 cv
376.172 10.785 376.008 10.746 375.824 10.746 cv
375.582 10.746 375.344 10.84 375.105 11.02 cv
374.867 11.203 374.609 11.465 374.336 11.812 cv
374.336 16.434 li
374.332 16.488 374.316 16.531 374.289 16.57 cv
374.254 16.609 374.199 16.645 374.129 16.668 cv
374.051 16.695 373.953 16.711 373.828 16.727 cv
373.703 16.738 373.543 16.746 373.355 16.746 cv
373.16 16.746 373.004 16.738 372.879 16.727 cv
372.754 16.711 372.652 16.695 372.578 16.668 cv
372.5 16.645 372.445 16.609 372.418 16.57 cv
372.383 16.531 372.367 16.488 372.371 16.434 cv
372.371 9.48401 li
372.367 9.43701 372.383 9.39099 372.41 9.34802 cv
372.434 9.31201 372.48 9.28101 372.551 9.25 cv
372.617 9.22699 372.703 9.20697 372.813 9.19098 cv
372.918 9.18402 373.051 9.17603 373.215 9.172 cv
373.379 9.17603 373.516 9.18402 373.625 9.19098 cv
373.73 9.20697 373.816 9.22699 373.879 9.25 cv
373.938 9.28101 373.98 9.31201 374.008 9.34802 cv
374.031 9.39099 374.043 9.43701 374.047 9.48401 cv
374.047 10.285 li
374.43 9.875 374.813 9.56201 375.195 9.35199 cv
375.574 9.14502 375.977 9.04303 376.395 9.039 cv
376.68 9.04303 376.934 9.07001 377.164 9.12903 cv
377.391 9.19098 377.598 9.27698 377.777 9.38702 cv
377.957 9.5 378.109 9.63702 378.238 9.789 cv
378.367 9.94501 378.477 10.117 378.566 10.309 cv
378.773 10.086 378.977 9.89502 379.18 9.73401 cv
379.375 9.57397 379.574 9.44098 379.77 9.34003 cv
379.965 9.23798 380.16 9.164 380.355 9.11298 cv
380.551 9.06598 380.75 9.04303 380.953 9.039 cv
381.414 9.04303 381.801 9.12097 382.121 9.27301 cv
382.434 9.43402 382.691 9.64502 382.887 9.90997 cv
383.082 10.18 383.219 10.492 383.305 10.848 cv
383.383 11.207 383.426 11.586 383.43 11.984 cv
cp
f
391.77 12.758 mo
391.766 12.996 391.715 13.172 391.609 13.285 cv
391.5 13.402 391.352 13.461 391.172 13.457 cv
386.938 13.457 li
386.934 13.758 386.969 14.027 387.043 14.266 cv
387.109 14.508 387.223 14.711 387.379 14.879 cv
387.531 15.051 387.727 15.18 387.969 15.266 cv
388.207 15.355 388.496 15.398 388.84 15.398 cv
389.18 15.398 389.48 15.375 389.742 15.324 cv
390 15.277 390.227 15.223 390.418 15.16 cv
390.605 15.102 390.762 15.047 390.891 14.996 cv
391.012 14.949 391.113 14.926 391.195 14.922 cv
391.238 14.926 391.277 14.934 391.313 14.949 cv
391.34 14.969 391.367 15 391.387 15.047 cv
391.406 15.094 391.418 15.16 391.43 15.246 cv
391.434 15.332 391.438 15.441 391.441 15.57 cv
391.438 15.687 391.438 15.785 391.434 15.863 cv
391.426 15.945 391.418 16.012 391.41 16.066 cv
391.398 16.125 391.383 16.176 391.363 16.211 cv
391.344 16.254 391.316 16.289 391.285 16.324 cv
391.25 16.363 391.156 16.414 391.008 16.473 cv
390.852 16.539 390.66 16.602 390.43 16.656 cv
390.191 16.719 389.922 16.766 389.625 16.812 cv
389.32 16.852 389 16.875 388.66 16.879 cv
388.039 16.875 387.496 16.801 387.035 16.645 cv
386.566 16.492 386.18 16.254 385.871 15.937 cv
385.555 15.621 385.32 15.223 385.172 14.738 cv
385.016 14.258 384.941 13.691 384.945 13.035 cv
384.941 12.422 385.02 11.863 385.184 11.367 cv
385.34 10.871 385.574 10.453 385.887 10.105 cv
386.191 9.76202 386.566 9.49597 387.004 9.31201 cv
387.441 9.133 387.934 9.04303 388.488 9.039 cv
389.066 9.04303 389.566 9.12903 389.98 9.297 cv
390.395 9.47302 390.73 9.711 390.996 10.012 cv
391.258 10.316 391.453 10.676 391.582 11.09 cv
391.703 11.508 391.766 11.957 391.77 12.445 cv
cp
389.867 12.195 mo
389.879 11.645 389.77 11.211 389.535 10.898 cv
389.301 10.586 388.934 10.43 388.441 10.426 cv
388.191 10.43 387.977 10.477 387.793 10.566 cv
387.605 10.664 387.453 10.789 387.332 10.945 cv
387.207 11.105 387.113 11.293 387.051 11.508 cv
386.984 11.723 386.945 11.953 386.938 12.195 cv
cp
f
398.27 14.469 mo
398.266 14.867 398.191 15.215 398.047 15.516 cv
397.898 15.816 397.691 16.07 397.422 16.27 cv
397.148 16.477 396.828 16.625 396.461 16.727 cv
396.094 16.824 395.691 16.875 395.262 16.879 cv
394.996 16.875 394.75 16.855 394.516 16.82 cv
394.281 16.777 394.07 16.73 393.883 16.672 cv
393.695 16.613 393.539 16.551 393.414 16.488 cv
393.289 16.426 393.195 16.367 393.141 16.312 cv
393.082 16.258 393.039 16.176 393.012 16.059 cv
392.977 15.945 392.961 15.77 392.965 15.539 cv
392.961 15.391 392.969 15.27 392.98 15.176 cv
392.988 15.086 393.004 15.016 393.027 14.957 cv
393.047 14.906 393.07 14.867 393.105 14.848 cv
393.133 14.832 393.172 14.824 393.219 14.82 cv
393.273 14.824 393.359 14.855 393.473 14.918 cv
393.582 14.984 393.719 15.059 393.891 15.133 cv
394.055 15.215 394.25 15.285 394.469 15.352 cv
394.688 15.422 394.938 15.457 395.223 15.453 cv
395.398 15.457 395.555 15.437 395.695 15.398 cv
395.828 15.363 395.949 15.312 396.055 15.242 cv
396.152 15.176 396.227 15.09 396.281 14.984 cv
396.328 14.883 396.355 14.762 396.359 14.625 cv
396.355 14.469 396.309 14.336 396.215 14.227 cv
396.121 14.117 395.992 14.02 395.836 13.934 cv
395.672 13.852 395.492 13.773 395.297 13.699 cv
395.094 13.629 394.891 13.551 394.68 13.457 cv
394.469 13.371 394.262 13.27 394.066 13.152 cv
393.863 13.043 393.684 12.902 393.527 12.734 cv
393.363 12.57 393.238 12.371 393.145 12.133 cv
393.051 11.902 393.004 11.621 393.004 11.289 cv
393.004 10.961 393.066 10.656 393.195 10.375 cv
393.324 10.102 393.512 9.86298 393.758 9.664 cv
394 9.46899 394.297 9.31598 394.648 9.203 cv
394.996 9.09802 395.391 9.04303 395.832 9.039 cv
396.047 9.04303 396.258 9.05902 396.465 9.086 cv
396.668 9.12097 396.855 9.15997 397.023 9.203 cv
397.188 9.25403 397.328 9.30499 397.445 9.35498 cv
397.559 9.414 397.641 9.461 397.691 9.49597 cv
397.738 9.539 397.773 9.578 397.797 9.61298 cv
397.816 9.65601 397.828 9.703 397.84 9.75403 cv
397.848 9.80902 397.859 9.875 397.867 9.953 cv
397.875 10.039 397.879 10.137 397.879 10.254 cv
397.879 10.395 397.875 10.512 397.867 10.598 cv
397.859 10.691 397.844 10.762 397.828 10.809 cv
397.809 10.863 397.785 10.898 397.758 10.914 cv
397.723 10.937 397.688 10.945 397.648 10.941 cv
397.598 10.945 397.523 10.918 397.43 10.859 cv
397.328 10.809 397.207 10.75 397.059 10.684 cv
396.91 10.625 396.738 10.566 396.543 10.508 cv
396.348 10.457 396.125 10.43 395.879 10.426 cv
395.699 10.43 395.547 10.449 395.418 10.48 cv
395.285 10.52 395.176 10.57 395.098 10.637 cv
395.012 10.707 394.949 10.785 394.91 10.875 cv
394.863 10.969 394.844 11.066 394.848 11.168 cv
394.844 11.328 394.895 11.465 394.996 11.57 cv
395.094 11.684 395.223 11.777 395.387 11.859 cv
395.547 11.945 395.73 12.023 395.938 12.094 cv
396.141 12.168 396.348 12.25 396.559 12.332 cv
396.766 12.422 396.973 12.52 397.184 12.633 cv
397.387 12.746 397.57 12.887 397.73 13.051 cv
397.891 13.219 398.02 13.418 398.121 13.648 cv
398.215 13.883 398.266 14.156 398.27 14.469 cv
cp
f
410.383 12.887 mo
410.379 13.484 410.301 14.027 410.148 14.512 cv
409.988 15.004 409.754 15.422 409.438 15.773 cv
409.121 16.125 408.723 16.398 408.246 16.59 cv
407.766 16.781 407.207 16.875 406.57 16.879 cv
405.949 16.875 405.41 16.793 404.957 16.621 cv
404.496 16.453 404.117 16.203 403.82 15.875 cv
403.516 15.551 403.293 15.148 403.148 14.668 cv
403.004 14.191 402.934 13.645 402.934 13.027 cv
402.934 12.437 403.012 11.898 403.168 11.406 cv
403.324 10.918 403.563 10.496 403.883 10.145 cv
404.199 9.797 404.594 9.52301 405.07 9.328 cv
405.543 9.13702 406.102 9.04303 406.742 9.039 cv
407.367 9.04303 407.906 9.125 408.363 9.29303 cv
408.82 9.46503 409.199 9.71503 409.496 10.039 cv
409.793 10.367 410.016 10.77 410.164 11.246 cv
410.309 11.727 410.379 12.273 410.383 12.887 cv
cp
408.363 12.965 mo
408.359 12.629 408.332 12.312 408.281 12.02 cv
408.223 11.734 408.129 11.484 408.004 11.27 cv
407.871 11.059 407.699 10.891 407.488 10.77 cv
407.27 10.652 407 10.594 406.672 10.59 cv
406.383 10.594 406.129 10.648 405.91 10.75 cv
405.691 10.859 405.512 11.016 405.371 11.219 cv
405.23 11.426 405.125 11.672 405.055 11.957 cv
404.984 12.25 404.949 12.578 404.949 12.941 cv
404.949 13.289 404.977 13.605 405.035 13.891 cv
405.09 14.184 405.184 14.434 405.313 14.645 cv
405.438 14.859 405.609 15.023 405.832 15.137 cv
406.047 15.258 406.316 15.316 406.641 15.312 cv
406.934 15.316 407.191 15.262 407.414 15.152 cv
407.629 15.047 407.809 14.895 407.949 14.687 cv
408.09 14.488 408.191 14.242 408.262 13.953 cv
408.324 13.668 408.359 13.34 408.363 12.965 cv
cp
f
416.133 6.83197 mo
416.129 6.98401 416.125 7.10498 416.117 7.19501 cv
416.105 7.289 416.09 7.35901 416.07 7.40601 cv
416.047 7.45697 416.023 7.492 416 7.508 cv
415.973 7.52698 415.945 7.53497 415.914 7.53497 cv
415.875 7.53497 415.832 7.52698 415.793 7.508 cv
415.746 7.492 415.691 7.47302 415.629 7.44897 cv
415.559 7.42999 415.484 7.40997 415.398 7.39099 cv
415.309 7.375 415.203 7.367 415.086 7.36298 cv
414.941 7.367 414.82 7.38702 414.723 7.42999 cv
414.621 7.47699 414.539 7.547 414.473 7.64099 cv
414.402 7.73798 414.352 7.86298 414.324 8.01599 cv
414.289 8.16803 414.273 8.35498 414.277 8.578 cv
414.277 9.21899 li
415.547 9.21899 li
415.59 9.22302 415.633 9.23401 415.676 9.258 cv
415.711 9.28497 415.746 9.328 415.773 9.38702 cv
415.797 9.44897 415.816 9.53101 415.832 9.633 cv
415.844 9.73401 415.848 9.86298 415.852 10.012 cv
415.848 10.301 415.824 10.504 415.773 10.625 cv
415.719 10.75 415.641 10.812 415.547 10.809 cv
414.277 10.809 li
414.277 16.434 li
414.273 16.488 414.258 16.531 414.23 16.57 cv
414.195 16.609 414.145 16.645 414.074 16.668 cv
414 16.695 413.898 16.711 413.77 16.727 cv
413.637 16.738 413.477 16.746 413.293 16.746 cv
413.105 16.746 412.949 16.738 412.824 16.727 cv
412.695 16.711 412.594 16.695 412.52 16.668 cv
412.441 16.645 412.391 16.609 412.363 16.57 cv
412.332 16.531 412.316 16.488 412.32 16.434 cv
412.32 10.809 li
411.449 10.809 li
411.348 10.812 411.273 10.75 411.227 10.625 cv
411.176 10.504 411.148 10.301 411.152 10.012 cv
411.148 9.86298 411.156 9.73401 411.172 9.633 cv
411.184 9.53101 411.203 9.44897 411.227 9.38702 cv
411.25 9.328 411.281 9.28497 411.32 9.258 cv
411.359 9.23401 411.402 9.22302 411.457 9.21899 cv
412.32 9.21899 li
412.32 8.633 li
412.316 8.164 412.363 7.75 412.461 7.39099 cv
412.551 7.03497 412.699 6.73798 412.902 6.50403 cv
413.102 6.27002 413.355 6.09399 413.664 5.96899 cv
413.973 5.85199 414.336 5.789 414.762 5.789 cv
414.957 5.789 415.148 5.80902 415.336 5.84003 cv
415.516 5.87903 415.66 5.914 415.766 5.94897 cv
415.867 5.992 415.938 6.02698 415.977 6.05902 cv
416.012 6.09399 416.043 6.14502 416.066 6.20697 cv
416.09 6.27301 416.105 6.35498 416.117 6.45697 cv
416.125 6.55902 416.129 6.68402 416.133 6.83197 cv
cp
f
426.68 13.676 mo
426.676 14.207 426.578 14.672 426.383 15.07 cv
426.184 15.473 425.918 15.809 425.582 16.074 cv
425.242 16.344 424.844 16.543 424.395 16.676 cv
423.941 16.809 423.461 16.875 422.949 16.879 cv
422.598 16.875 422.273 16.848 421.977 16.793 cv
421.676 16.734 421.414 16.668 421.188 16.586 cv
420.957 16.508 420.766 16.422 420.613 16.332 cv
420.461 16.246 420.352 16.168 420.285 16.098 cv
420.215 16.031 420.164 15.934 420.141 15.809 cv
420.109 15.684 420.098 15.5 420.098 15.258 cv
420.098 15.098 420.102 14.965 420.113 14.852 cv
420.121 14.746 420.137 14.656 420.164 14.586 cv
420.184 14.52 420.215 14.473 420.258 14.441 cv
420.293 14.418 420.34 14.402 420.391 14.398 cv
420.461 14.402 420.563 14.445 420.699 14.527 cv
420.828 14.617 421 14.711 421.211 14.812 cv
421.418 14.918 421.664 15.016 421.953 15.098 cv
422.238 15.187 422.574 15.23 422.957 15.227 cv
423.207 15.23 423.43 15.199 423.625 15.137 cv
423.82 15.078 423.988 14.992 424.129 14.883 cv
424.266 14.773 424.371 14.641 424.445 14.48 cv
424.516 14.32 424.551 14.141 424.555 13.941 cv
424.551 13.715 424.488 13.52 424.367 13.352 cv
424.238 13.191 424.074 13.047 423.879 12.918 cv
423.676 12.793 423.449 12.672 423.195 12.559 cv
422.941 12.449 422.68 12.332 422.41 12.203 cv
422.137 12.082 421.875 11.937 421.621 11.777 cv
421.367 11.621 421.141 11.434 420.941 11.211 cv
420.738 10.992 420.574 10.73 420.453 10.426 cv
420.328 10.125 420.266 9.76599 420.27 9.34399 cv
420.266 8.86298 420.355 8.43701 420.535 8.07001 cv
420.711 7.70697 420.953 7.40198 421.262 7.15601 cv
421.563 6.91803 421.922 6.73798 422.336 6.617 cv
422.75 6.5 423.188 6.44098 423.648 6.43701 cv
423.887 6.44098 424.125 6.45697 424.367 6.492 cv
424.605 6.53101 424.828 6.58197 425.035 6.64099 cv
425.242 6.703 425.426 6.77301 425.59 6.84802 cv
425.746 6.92999 425.855 6.992 425.91 7.04303 cv
425.961 7.09802 425.996 7.14502 426.016 7.17603 cv
426.031 7.21503 426.047 7.26202 426.063 7.32001 cv
426.074 7.383 426.082 7.45697 426.09 7.547 cv
426.094 7.64099 426.098 7.75403 426.098 7.88702 cv
426.098 8.039 426.094 8.16803 426.086 8.27002 cv
426.078 8.375 426.063 8.461 426.047 8.52301 cv
426.023 8.59399 426 8.64099 425.969 8.672 cv
425.934 8.703 425.887 8.71899 425.832 8.71899 cv
425.773 8.71899 425.684 8.68402 425.559 8.60901 cv
425.434 8.539 425.277 8.461 425.098 8.37097 cv
424.914 8.289 424.707 8.211 424.469 8.14099 cv
424.227 8.07397 423.961 8.039 423.68 8.03497 cv
423.453 8.039 423.262 8.06598 423.098 8.117 cv
422.93 8.172 422.789 8.24597 422.68 8.34003 cv
422.566 8.43701 422.484 8.55499 422.43 8.68701 cv
422.375 8.828 422.348 8.96899 422.348 9.117 cv
422.348 9.34399 422.406 9.539 422.531 9.69897 cv
422.648 9.86298 422.813 10.008 423.023 10.133 cv
423.227 10.262 423.461 10.383 423.719 10.492 cv
423.977 10.609 424.242 10.727 424.516 10.848 cv
424.785 10.977 425.047 11.117 425.309 11.273 cv
425.566 11.43 425.801 11.621 426.004 11.84 cv
426.207 12.066 426.367 12.324 426.492 12.621 cv
426.613 12.918 426.676 13.27 426.68 13.676 cv
cp
f
434.73 16.434 mo
434.727 16.488 434.715 16.531 434.691 16.57 cv
434.664 16.609 434.617 16.645 434.555 16.668 cv
434.488 16.695 434.402 16.711 434.297 16.727 cv
434.191 16.738 434.059 16.746 433.898 16.746 cv
433.723 16.746 433.582 16.738 433.48 16.727 cv
433.371 16.711 433.289 16.695 433.227 16.668 cv
433.164 16.645 433.117 16.609 433.094 16.57 cv
433.063 16.531 433.051 16.488 433.055 16.434 cv
433.055 15.633 li
432.668 16.047 432.277 16.359 431.883 16.566 cv
431.48 16.773 431.07 16.875 430.648 16.879 cv
430.168 16.875 429.766 16.801 429.441 16.645 cv
429.117 16.492 428.855 16.277 428.656 16.008 cv
428.453 15.738 428.309 15.426 428.227 15.066 cv
428.137 14.711 428.094 14.27 428.098 13.738 cv
428.098 9.48401 li
428.094 9.43701 428.109 9.39099 428.141 9.34802 cv
428.168 9.31201 428.219 9.28101 428.297 9.25 cv
428.371 9.22699 428.473 9.20697 428.602 9.19098 cv
428.727 9.18402 428.883 9.17603 429.074 9.172 cv
429.262 9.17603 429.422 9.18402 429.547 9.19098 cv
429.672 9.20697 429.77 9.22699 429.848 9.25 cv
429.918 9.28101 429.973 9.31201 430.008 9.34802 cv
430.035 9.39099 430.051 9.43701 430.055 9.48401 cv
430.055 13.41 li
430.051 13.777 430.074 14.055 430.125 14.246 cv
430.168 14.437 430.238 14.602 430.34 14.738 cv
430.434 14.879 430.559 14.984 430.707 15.059 cv
430.855 15.137 431.027 15.176 431.223 15.172 cv
431.473 15.176 431.723 15.086 431.977 14.898 cv
432.227 14.719 432.496 14.453 432.781 14.105 cv
432.781 9.48401 li
432.781 9.43701 432.793 9.39099 432.824 9.34802 cv
432.848 9.31201 432.902 9.28101 432.98 9.25 cv
433.055 9.22699 433.152 9.20697 433.281 9.19098 cv
433.402 9.18402 433.563 9.17603 433.758 9.172 cv
433.949 9.17603 434.105 9.18402 434.23 9.19098 cv
434.352 9.20697 434.453 9.22699 434.527 9.25 cv
434.598 9.28101 434.648 9.31201 434.684 9.34802 cv
434.711 9.39099 434.727 9.43701 434.73 9.48401 cv
cp
f
443.707 12.863 mo
443.707 13.484 443.637 14.043 443.504 14.535 cv
443.363 15.031 443.168 15.449 442.918 15.797 cv
442.66 16.145 442.348 16.414 441.98 16.598 cv
441.605 16.785 441.184 16.875 440.715 16.879 cv
440.477 16.875 440.258 16.852 440.059 16.812 cv
439.852 16.766 439.66 16.699 439.477 16.598 cv
439.293 16.504 439.109 16.379 438.934 16.223 cv
438.75 16.074 438.566 15.891 438.383 15.68 cv
438.383 16.434 li
438.379 16.496 438.367 16.543 438.34 16.578 cv
438.309 16.621 438.262 16.652 438.199 16.676 cv
438.133 16.699 438.043 16.715 437.938 16.73 cv
437.828 16.738 437.699 16.746 437.543 16.746 cv
437.379 16.746 437.242 16.738 437.141 16.73 cv
437.031 16.715 436.945 16.699 436.883 16.676 cv
436.813 16.652 436.77 16.621 436.746 16.578 cv
436.719 16.543 436.703 16.496 436.707 16.434 cv
436.707 6.18701 li
436.703 6.13702 436.719 6.09003 436.754 6.047 cv
436.781 6.008 436.836 5.97302 436.914 5.94098 cv
436.988 5.914 437.09 5.89502 437.215 5.875 cv
437.34 5.86298 437.496 5.85498 437.691 5.85199 cv
437.879 5.85498 438.039 5.86298 438.164 5.875 cv
438.289 5.89502 438.387 5.914 438.465 5.94098 cv
438.535 5.97302 438.59 6.008 438.625 6.047 cv
438.652 6.09003 438.668 6.13702 438.672 6.18701 cv
438.672 10.027 li
438.848 9.85199 439.023 9.703 439.203 9.578 cv
439.375 9.45697 439.551 9.35199 439.73 9.27002 cv
439.902 9.19098 440.086 9.133 440.277 9.09399 cv
440.461 9.05902 440.66 9.04303 440.871 9.039 cv
441.383 9.04303 441.816 9.14502 442.18 9.34802 cv
442.535 9.55499 442.828 9.83197 443.055 10.18 cv
443.277 10.527 443.441 10.934 443.551 11.398 cv
443.652 11.863 443.707 12.352 443.707 12.863 cv
cp
441.672 13.004 mo
441.668 12.711 441.645 12.426 441.605 12.148 cv
441.559 11.875 441.484 11.633 441.375 11.418 cv
441.266 11.207 441.121 11.035 440.949 10.906 cv
440.773 10.781 440.555 10.719 440.293 10.715 cv
440.16 10.719 440.035 10.734 439.91 10.77 cv
439.785 10.809 439.656 10.871 439.523 10.957 cv
439.391 11.047 439.254 11.164 439.117 11.301 cv
438.973 11.441 438.824 11.613 438.672 11.82 cv
438.672 14.129 li
438.945 14.484 439.207 14.754 439.461 14.934 cv
439.711 15.121 439.977 15.211 440.254 15.211 cv
440.508 15.211 440.723 15.148 440.902 15.016 cv
441.074 14.891 441.223 14.723 441.34 14.512 cv
441.457 14.309 441.539 14.07 441.594 13.801 cv
441.641 13.539 441.668 13.273 441.672 13.004 cv
cp
f
448.734 12.781 mo
448.73 13.082 448.703 13.293 448.648 13.41 cv
448.59 13.535 448.5 13.594 448.375 13.59 cv
445.133 13.59 li
445.004 13.594 444.91 13.531 444.855 13.406 cv
444.793 13.285 444.766 13.078 444.77 12.781 cv
444.766 12.492 444.793 12.285 444.855 12.164 cv
444.91 12.047 445.004 11.988 445.133 11.984 cv
448.375 11.984 li
448.438 11.988 448.488 12 448.535 12.023 cv
448.574 12.051 448.613 12.098 448.648 12.156 cv
448.676 12.223 448.699 12.305 448.715 12.406 cv
448.727 12.512 448.73 12.637 448.734 12.781 cv
cp
f
452.387 16.418 mo
452.383 16.473 452.367 16.52 452.336 16.559 cv
452.301 16.602 452.242 16.637 452.168 16.66 cv
452.086 16.687 451.984 16.707 451.855 16.723 cv
451.723 16.738 451.555 16.746 451.359 16.746 cv
451.156 16.746 450.992 16.738 450.863 16.723 cv
450.727 16.707 450.621 16.687 450.547 16.66 cv
450.465 16.637 450.41 16.602 450.379 16.559 cv
450.344 16.52 450.324 16.473 450.328 16.418 cv
450.328 6.89502 li
450.324 6.84802 450.344 6.80103 450.379 6.75403 cv
450.41 6.71503 450.465 6.67999 450.551 6.65198 cv
450.629 6.62903 450.734 6.60901 450.867 6.59003 cv
450.992 6.578 451.156 6.57001 451.359 6.56598 cv
451.555 6.57001 451.723 6.578 451.855 6.59003 cv
451.984 6.60901 452.086 6.62903 452.168 6.65198 cv
452.242 6.67999 452.301 6.71503 452.336 6.75403 cv
452.367 6.80103 452.383 6.84802 452.387 6.89502 cv
cp
f
465.465 16.434 mo
465.461 16.488 465.445 16.531 465.418 16.57 cv
465.383 16.609 465.332 16.645 465.262 16.668 cv
465.188 16.695 465.086 16.711 464.965 16.727 cv
464.84 16.738 464.684 16.746 464.492 16.746 cv
464.293 16.746 464.133 16.738 464.008 16.727 cv
463.883 16.711 463.781 16.695 463.707 16.668 cv
463.629 16.645 463.578 16.609 463.551 16.57 cv
463.523 16.531 463.508 16.488 463.512 16.434 cv
463.512 12.312 li
463.508 12.082 463.488 11.867 463.445 11.672 cv
463.398 11.48 463.328 11.316 463.242 11.18 cv
463.148 11.043 463.035 10.937 462.898 10.859 cv
462.758 10.785 462.594 10.746 462.402 10.746 cv
462.168 10.746 461.93 10.84 461.691 11.02 cv
461.453 11.203 461.195 11.465 460.914 11.812 cv
460.914 16.434 li
460.914 16.488 460.898 16.531 460.867 16.57 cv
460.836 16.609 460.781 16.645 460.707 16.668 cv
460.629 16.695 460.527 16.711 460.406 16.727 cv
460.281 16.738 460.129 16.746 459.941 16.746 cv
459.746 16.746 459.586 16.738 459.465 16.727 cv
459.336 16.711 459.234 16.695 459.164 16.668 cv
459.086 16.645 459.035 16.609 459.004 16.57 cv
458.973 16.531 458.957 16.488 458.957 16.434 cv
458.957 12.312 li
458.957 12.082 458.934 11.867 458.891 11.672 cv
458.848 11.48 458.781 11.316 458.695 11.18 cv
458.602 11.043 458.488 10.937 458.352 10.859 cv
458.207 10.785 458.043 10.746 457.859 10.746 cv
457.617 10.746 457.379 10.84 457.141 11.02 cv
456.902 11.203 456.645 11.465 456.371 11.812 cv
456.371 16.434 li
456.367 16.488 456.352 16.531 456.324 16.57 cv
456.289 16.609 456.234 16.645 456.164 16.668 cv
456.086 16.695 455.988 16.711 455.863 16.727 cv
455.738 16.738 455.578 16.746 455.391 16.746 cv
455.195 16.746 455.039 16.738 454.914 16.727 cv
454.789 16.711 454.688 16.695 454.613 16.668 cv
454.535 16.645 454.48 16.609 454.453 16.57 cv
454.418 16.531 454.402 16.488 454.406 16.434 cv
454.406 9.48401 li
454.402 9.43701 454.418 9.39099 454.445 9.34802 cv
454.469 9.31201 454.516 9.28101 454.586 9.25 cv
454.652 9.22699 454.738 9.20697 454.848 9.19098 cv
454.953 9.18402 455.086 9.17603 455.25 9.172 cv
455.414 9.17603 455.551 9.18402 455.66 9.19098 cv
455.766 9.20697 455.852 9.22699 455.914 9.25 cv
455.973 9.28101 456.016 9.31201 456.043 9.34802 cv
456.066 9.39099 456.078 9.43701 456.082 9.48401 cv
456.082 10.285 li
456.465 9.875 456.848 9.56201 457.23 9.35199 cv
457.609 9.14502 458.012 9.04303 458.43 9.039 cv
458.715 9.04303 458.969 9.07001 459.199 9.12903 cv
459.426 9.19098 459.633 9.27698 459.813 9.38702 cv
459.992 9.5 460.145 9.63702 460.273 9.789 cv
460.402 9.94501 460.512 10.117 460.602 10.309 cv
460.809 10.086 461.012 9.89502 461.215 9.73401 cv
461.41 9.57397 461.609 9.44098 461.805 9.34003 cv
462 9.23798 462.195 9.164 462.391 9.11298 cv
462.586 9.06598 462.785 9.04303 462.988 9.039 cv
463.449 9.04303 463.836 9.12097 464.156 9.27301 cv
464.469 9.43402 464.727 9.64502 464.922 9.90997 cv
465.117 10.18 465.254 10.492 465.34 10.848 cv
465.418 11.207 465.461 11.586 465.465 11.984 cv
cp
f
473.309 16.457 mo
473.305 16.535 473.277 16.59 473.23 16.629 cv
473.176 16.672 473.094 16.699 472.984 16.719 cv
472.867 16.734 472.703 16.746 472.488 16.746 cv
472.25 16.746 472.078 16.734 471.977 16.719 cv
471.867 16.699 471.793 16.672 471.754 16.629 cv
471.707 16.59 471.688 16.535 471.688 16.457 cv
471.688 15.906 li
471.398 16.215 471.07 16.453 470.707 16.621 cv
470.34 16.793 469.934 16.875 469.488 16.879 cv
469.117 16.875 468.777 16.828 468.469 16.734 cv
468.16 16.641 467.895 16.5 467.668 16.305 cv
467.441 16.117 467.266 15.883 467.141 15.602 cv
467.016 15.324 466.953 14.996 466.957 14.617 cv
466.953 14.219 467.031 13.867 467.191 13.562 cv
467.348 13.266 467.586 13.02 467.902 12.824 cv
468.215 12.633 468.605 12.488 469.074 12.391 cv
469.543 12.301 470.086 12.254 470.703 12.25 cv
471.383 12.25 li
471.383 11.828 li
471.383 11.613 471.359 11.422 471.316 11.258 cv
471.27 11.098 471.195 10.961 471.098 10.848 cv
470.992 10.742 470.859 10.66 470.691 10.605 cv
470.52 10.555 470.309 10.531 470.066 10.527 cv
469.734 10.531 469.441 10.566 469.188 10.637 cv
468.926 10.711 468.699 10.793 468.504 10.879 cv
468.305 10.973 468.141 11.051 468.012 11.121 cv
467.875 11.195 467.766 11.234 467.688 11.23 cv
467.625 11.234 467.574 11.215 467.535 11.176 cv
467.488 11.141 467.453 11.09 467.426 11.02 cv
467.395 10.957 467.371 10.871 467.359 10.77 cv
467.34 10.672 467.332 10.562 467.336 10.441 cv
467.332 10.281 467.348 10.156 467.375 10.059 cv
467.398 9.96899 467.445 9.883 467.523 9.80499 cv
467.594 9.72998 467.723 9.64801 467.906 9.55902 cv
468.086 9.46899 468.297 9.383 468.543 9.30499 cv
468.785 9.22699 469.055 9.164 469.344 9.11298 cv
469.633 9.06598 469.93 9.04303 470.238 9.039 cv
470.781 9.04303 471.246 9.09399 471.633 9.19897 cv
472.02 9.30902 472.34 9.47302 472.59 9.69098 cv
472.84 9.90997 473.02 10.195 473.137 10.543 cv
473.246 10.895 473.305 11.309 473.309 11.781 cv
cp
471.383 13.48 mo
470.633 13.48 li
470.316 13.484 470.047 13.508 469.824 13.551 cv
469.598 13.602 469.414 13.672 469.277 13.762 cv
469.133 13.859 469.031 13.973 468.969 14.102 cv
468.902 14.238 468.867 14.387 468.871 14.555 cv
468.867 14.848 468.961 15.078 469.148 15.242 cv
469.332 15.41 469.59 15.492 469.918 15.492 cv
470.191 15.492 470.441 15.422 470.676 15.281 cv
470.902 15.141 471.141 14.937 471.383 14.664 cv
cp
f
481.535 9.96503 mo
481.531 10.219 481.504 10.402 481.449 10.52 cv
481.391 10.641 481.32 10.699 481.242 10.699 cv
480.422 10.699 li
480.535 10.824 480.617 10.969 480.668 11.125 cv
480.715 11.285 480.738 11.449 480.742 11.617 cv
480.738 12.027 480.672 12.387 480.539 12.699 cv
480.402 13.016 480.207 13.281 479.957 13.492 cv
479.703 13.711 479.402 13.875 479.047 13.984 cv
478.688 14.102 478.289 14.156 477.859 14.152 cv
477.633 14.156 477.422 14.129 477.219 14.07 cv
477.016 14.02 476.859 13.957 476.75 13.879 cv
476.688 13.949 476.629 14.027 476.582 14.121 cv
476.531 14.215 476.508 14.32 476.512 14.43 cv
476.508 14.586 476.574 14.707 476.707 14.801 cv
476.836 14.898 477.023 14.953 477.266 14.961 cv
478.957 15.023 li
479.352 15.039 479.703 15.098 480.012 15.191 cv
480.32 15.293 480.582 15.426 480.793 15.598 cv
481.004 15.773 481.164 15.984 481.273 16.227 cv
481.383 16.473 481.438 16.746 481.441 17.059 cv
481.438 17.395 481.363 17.719 481.215 18.027 cv
481.066 18.328 480.84 18.59 480.539 18.816 cv
480.234 19.035 479.855 19.215 479.402 19.348 cv
478.945 19.477 478.414 19.539 477.813 19.543 cv
477.215 19.539 476.711 19.492 476.293 19.402 cv
475.875 19.305 475.531 19.176 475.266 19.012 cv
474.996 18.844 474.801 18.645 474.684 18.418 cv
474.559 18.184 474.5 17.93 474.5 17.656 cv
474.5 17.484 474.52 17.324 474.566 17.168 cv
474.605 17.012 474.672 16.859 474.762 16.719 cv
474.844 16.574 474.949 16.441 475.074 16.309 cv
475.199 16.18 475.34 16.055 475.504 15.934 cv
475.277 15.82 475.105 15.66 474.984 15.449 cv
474.863 15.246 474.805 15.02 474.805 14.773 cv
474.805 14.473 474.871 14.195 475.012 13.937 cv
475.148 13.687 475.332 13.457 475.559 13.254 cv
475.375 13.074 475.23 12.859 475.121 12.602 cv
475.012 12.352 474.957 12.031 474.961 11.648 cv
474.957 11.246 475.027 10.887 475.172 10.562 cv
475.313 10.246 475.512 9.97699 475.77 9.75403 cv
476.023 9.53497 476.328 9.36298 476.68 9.24597 cv
477.031 9.12903 477.422 9.07001 477.852 9.07001 cv
478.07 9.07001 478.277 9.086 478.477 9.10901 cv
478.676 9.14099 478.863 9.17603 479.035 9.21899 cv
481.242 9.21899 li
481.324 9.22302 481.395 9.28101 481.453 9.39099 cv
481.504 9.508 481.531 9.69897 481.535 9.96503 cv
cp
479.02 11.609 mo
479.016 11.238 478.914 10.949 478.707 10.738 cv
478.496 10.535 478.203 10.43 477.828 10.426 cv
477.633 10.43 477.461 10.461 477.32 10.523 cv
477.172 10.59 477.051 10.68 476.957 10.789 cv
476.855 10.902 476.785 11.031 476.742 11.18 cv
476.691 11.328 476.668 11.484 476.672 11.641 cv
476.668 12 476.773 12.277 476.984 12.48 cv
477.191 12.687 477.48 12.793 477.852 12.789 cv
478.047 12.793 478.215 12.762 478.363 12.695 cv
478.504 12.637 478.625 12.551 478.727 12.437 cv
478.82 12.332 478.895 12.203 478.945 12.059 cv
478.992 11.918 479.016 11.77 479.02 11.609 cv
cp
479.48 17.16 mo
479.48 16.922 479.387 16.746 479.199 16.621 cv
479.012 16.5 478.754 16.43 478.426 16.418 cv
477.031 16.379 li
476.895 16.48 476.785 16.574 476.707 16.664 cv
476.625 16.754 476.563 16.84 476.516 16.926 cv
476.465 17.008 476.43 17.09 476.418 17.168 cv
476.398 17.246 476.391 17.324 476.395 17.41 cv
476.391 17.664 476.523 17.863 476.785 18 cv
477.047 18.133 477.418 18.199 477.898 18.203 cv
478.191 18.199 478.438 18.168 478.645 18.113 cv
478.844 18.051 479.008 17.973 479.137 17.875 cv
479.258 17.773 479.348 17.664 479.402 17.543 cv
479.453 17.422 479.48 17.293 479.48 17.16 cv
cp
f
489.145 12.758 mo
489.141 12.996 489.09 13.172 488.984 13.285 cv
488.875 13.402 488.727 13.461 488.547 13.457 cv
484.313 13.457 li
484.309 13.758 484.344 14.027 484.418 14.266 cv
484.484 14.508 484.598 14.711 484.754 14.879 cv
484.906 15.051 485.102 15.18 485.344 15.266 cv
485.582 15.355 485.871 15.398 486.215 15.398 cv
486.555 15.398 486.855 15.375 487.117 15.324 cv
487.375 15.277 487.602 15.223 487.793 15.16 cv
487.98 15.102 488.137 15.047 488.266 14.996 cv
488.387 14.949 488.488 14.926 488.57 14.922 cv
488.613 14.926 488.652 14.934 488.688 14.949 cv
488.715 14.969 488.742 15 488.762 15.047 cv
488.781 15.094 488.793 15.16 488.805 15.246 cv
488.809 15.332 488.813 15.441 488.816 15.57 cv
488.813 15.687 488.813 15.785 488.809 15.863 cv
488.801 15.945 488.793 16.012 488.785 16.066 cv
488.773 16.125 488.758 16.176 488.738 16.211 cv
488.719 16.254 488.691 16.289 488.66 16.324 cv
488.625 16.363 488.531 16.414 488.383 16.473 cv
488.227 16.539 488.035 16.602 487.805 16.656 cv
487.566 16.719 487.297 16.766 487 16.812 cv
486.695 16.852 486.375 16.875 486.035 16.879 cv
485.414 16.875 484.871 16.801 484.41 16.645 cv
483.941 16.492 483.555 16.254 483.246 15.937 cv
482.93 15.621 482.695 15.223 482.547 14.738 cv
482.391 14.258 482.316 13.691 482.32 13.035 cv
482.316 12.422 482.395 11.863 482.559 11.367 cv
482.715 10.871 482.949 10.453 483.262 10.105 cv
483.566 9.76202 483.941 9.49597 484.379 9.31201 cv
484.816 9.133 485.309 9.04303 485.863 9.039 cv
486.441 9.04303 486.941 9.12903 487.355 9.297 cv
487.77 9.47302 488.105 9.711 488.371 10.012 cv
488.633 10.316 488.828 10.676 488.957 11.09 cv
489.078 11.508 489.141 11.957 489.145 12.445 cv
cp
487.242 12.195 mo
487.254 11.645 487.145 11.211 486.91 10.898 cv
486.676 10.586 486.309 10.43 485.816 10.426 cv
485.566 10.43 485.352 10.477 485.168 10.566 cv
484.98 10.664 484.828 10.789 484.707 10.945 cv
484.582 11.105 484.488 11.293 484.426 11.508 cv
484.359 11.723 484.32 11.953 484.313 12.195 cv
cp
f
495.645 14.469 mo
495.641 14.867 495.566 15.215 495.422 15.516 cv
495.273 15.816 495.066 16.07 494.797 16.27 cv
494.523 16.477 494.203 16.625 493.836 16.727 cv
493.469 16.824 493.066 16.875 492.637 16.879 cv
492.371 16.875 492.125 16.855 491.891 16.82 cv
491.656 16.777 491.445 16.73 491.258 16.672 cv
491.07 16.613 490.914 16.551 490.789 16.488 cv
490.664 16.426 490.57 16.367 490.516 16.312 cv
490.457 16.258 490.414 16.176 490.387 16.059 cv
490.352 15.945 490.336 15.77 490.34 15.539 cv
490.336 15.391 490.344 15.27 490.355 15.176 cv
490.363 15.086 490.379 15.016 490.402 14.957 cv
490.422 14.906 490.445 14.867 490.48 14.848 cv
490.508 14.832 490.547 14.824 490.594 14.82 cv
490.648 14.824 490.734 14.855 490.848 14.918 cv
490.957 14.984 491.094 15.059 491.266 15.133 cv
491.43 15.215 491.625 15.285 491.844 15.352 cv
492.063 15.422 492.313 15.457 492.598 15.453 cv
492.773 15.457 492.93 15.437 493.07 15.398 cv
493.203 15.363 493.324 15.312 493.43 15.242 cv
493.527 15.176 493.602 15.09 493.656 14.984 cv
493.703 14.883 493.73 14.762 493.734 14.625 cv
493.73 14.469 493.684 14.336 493.59 14.227 cv
493.496 14.117 493.367 14.02 493.211 13.934 cv
493.047 13.852 492.867 13.773 492.672 13.699 cv
492.469 13.629 492.266 13.551 492.055 13.457 cv
491.844 13.371 491.637 13.27 491.441 13.152 cv
491.238 13.043 491.059 12.902 490.902 12.734 cv
490.738 12.57 490.613 12.371 490.52 12.133 cv
490.426 11.902 490.379 11.621 490.379 11.289 cv
490.379 10.961 490.441 10.656 490.57 10.375 cv
490.699 10.102 490.887 9.86298 491.133 9.664 cv
491.375 9.46899 491.672 9.31598 492.023 9.203 cv
492.371 9.09802 492.766 9.04303 493.207 9.039 cv
493.422 9.04303 493.633 9.05902 493.84 9.086 cv
494.043 9.12097 494.23 9.15997 494.398 9.203 cv
494.563 9.25403 494.703 9.30499 494.82 9.35498 cv
494.934 9.414 495.016 9.461 495.066 9.49597 cv
495.113 9.539 495.148 9.578 495.172 9.61298 cv
495.191 9.65601 495.203 9.703 495.215 9.75403 cv
495.223 9.80902 495.234 9.875 495.242 9.953 cv
495.25 10.039 495.254 10.137 495.254 10.254 cv
495.254 10.395 495.25 10.512 495.242 10.598 cv
495.234 10.691 495.219 10.762 495.203 10.809 cv
495.184 10.863 495.16 10.898 495.133 10.914 cv
495.098 10.937 495.063 10.945 495.023 10.941 cv
494.973 10.945 494.898 10.918 494.805 10.859 cv
494.703 10.809 494.582 10.75 494.434 10.684 cv
494.285 10.625 494.113 10.566 493.918 10.508 cv
493.723 10.457 493.5 10.43 493.254 10.426 cv
493.074 10.43 492.922 10.449 492.793 10.48 cv
492.66 10.52 492.551 10.57 492.473 10.637 cv
492.387 10.707 492.324 10.785 492.285 10.875 cv
492.238 10.969 492.219 11.066 492.223 11.168 cv
492.219 11.328 492.27 11.465 492.371 11.57 cv
492.469 11.684 492.598 11.777 492.762 11.859 cv
492.922 11.945 493.105 12.023 493.313 12.094 cv
493.516 12.168 493.723 12.25 493.934 12.332 cv
494.141 12.422 494.348 12.52 494.559 12.633 cv
494.762 12.746 494.945 12.887 495.105 13.051 cv
495.266 13.219 495.395 13.418 495.496 13.648 cv
495.59 13.883 495.641 14.156 495.645 14.469 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
