%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AverageFilteringTimes.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:40:13 p.m.
%%BoundingBox: 0 0 701 541
%%HiResBoundingBox: 0 0 700.6800 540.4800
%%CropBox: 0 0 700.6800 540.4800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540.48 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540.48 li
700.68 540.48 li
700.68 0 li
cp
clp
gsave
0 540.48 mo
701 540.48 li
701 -.52002 li
0 -.52002 li
cp
clp
0 0 mo
700.68 0 li
700.68 540.48 li
0 540.48 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
59.039 468.961 mo
683.52 468.961 li
59.039 422.879 mo
683.52 422.879 li
59.039 376.801 mo
683.52 376.801 li
59.039 330.84 mo
683.52 330.84 li
59.039 284.762 mo
683.52 284.762 li
59.039 238.801 mo
683.52 238.801 li
59.039 192.719 mo
683.52 192.719 li
59.039 146.641 mo
683.52 146.641 li
59.039 100.68 mo
683.52 100.68 li
59.039 54.602 mo
683.52 54.602 li
.140414 .108034 .108034 0 cmyk
@
59.039 445.922 mo
683.52 445.922 li
59.039 399.84 mo
683.52 399.84 li
59.039 353.879 mo
683.52 353.879 li
59.039 307.801 mo
683.52 307.801 li
59.039 261.719 mo
683.52 261.719 li
59.039 215.762 mo
683.52 215.762 li
59.039 169.68 mo
683.52 169.68 li
59.039 123.719 mo
683.52 123.719 li
59.039 77.641 mo
683.52 77.641 li
59.039 31.559 mo
683.52 31.559 li
.328344 .284215 .278569 .000915541 cmyk
@
98.039 31.559 mo
98.039 491.879 li
176.16 31.559 mo
176.16 491.879 li
254.16 31.559 mo
254.16 491.879 li
332.281 31.559 mo
332.281 491.879 li
410.281 31.559 mo
410.281 491.879 li
488.398 31.559 mo
488.398 491.879 li
566.398 31.559 mo
566.398 491.879 li
644.52 31.559 mo
644.52 491.879 li
.178592 .148898 .143923 0 cmyk
@
59.039 31.559 mo
59.039 491.879 li
137.16 31.559 mo
137.16 491.879 li
215.16 31.559 mo
215.16 491.879 li
293.281 31.559 mo
293.281 491.879 li
371.281 31.559 mo
371.281 491.879 li
449.398 31.559 mo
449.398 491.879 li
527.398 31.559 mo
527.398 491.879 li
605.398 31.559 mo
605.398 491.879 li
683.52 31.559 mo
683.52 491.879 li
.328344 .284215 .278569 .000915541 cmyk
@
39 482.641 mo
46.078 482.641 li
46.078 499.68 li
39 499.68 li
cp
0 0 0 0 cmyk
ef
31.922 436.559 mo
46.078 436.559 li
46.078 453.719 li
31.922 453.719 li
cp
ef
31.922 390.602 mo
46.078 390.602 li
46.078 407.641 li
31.922 407.641 li
cp
ef
31.922 344.52 mo
46.078 344.52 li
46.078 361.559 li
31.922 361.559 li
cp
ef
24.84 298.441 mo
46.078 298.441 li
46.078 315.601 li
24.84 315.601 li
cp
ef
24.84 252.48 mo
46.078 252.48 li
46.078 269.519 li
24.84 269.519 li
cp
ef
24.84 206.398 mo
46.078 206.398 li
46.078 223.558 li
24.84 223.558 li
cp
ef
24.84 160.441 mo
46.078 160.441 li
46.078 177.48 li
24.84 177.48 li
cp
ef
24.84 114.359 mo
46.078 114.359 li
46.078 131.398 li
24.84 131.398 li
cp
ef
24.84 68.281 mo
46.078 68.281 li
46.078 85.441 li
24.84 85.441 li
cp
ef
24.84 22.32 mo
46.078 22.32 li
46.078 39.359 li
24.84 39.359 li
cp
ef
.96 lw
59.039 491.879 mo
683.52 491.879 li
.367803 .29575 .300999 .00198367 cmyk
@
59.039 491.879 mo
59.039 496.441 li
137.16 491.879 mo
137.16 496.441 li
215.16 491.879 mo
215.16 496.441 li
293.281 491.879 mo
293.281 496.441 li
371.281 491.879 mo
371.281 496.441 li
449.398 491.879 mo
449.398 496.441 li
527.398 491.879 mo
527.398 496.441 li
605.398 491.879 mo
605.398 496.441 li
683.52 491.879 mo
683.52 496.441 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
1 lc
59.039 186.121 mo
137.16 303.238 li
215.16 396.359 li
293.281 442.078 li
371.281 453.238 li
449.398 460.922 li
527.398 466.078 li
605.398 469.801 li
683.52 472.559 li
.62768 .285466 0 0 cmyk
@
grestore
1 lw
64.141 191.172 mo
54.059 181.09 li
54.059 191.172 mo
64.141 181.09 li
.62768 .285466 0 0 cmyk
@
142.141 308.172 mo
132.059 298.09 li
132.059 308.172 mo
142.141 298.09 li
@
220.262 401.41 mo
210.18 391.328 li
210.18 401.41 mo
220.262 391.328 li
@
298.262 447.129 mo
288.18 437.051 li
288.18 447.129 mo
298.262 437.051 li
@
376.379 458.289 mo
366.301 448.211 li
366.301 458.289 mo
376.379 448.211 li
@
454.379 465.969 mo
444.301 455.891 li
444.301 465.969 mo
454.379 455.891 li
@
532.379 471.129 mo
522.301 461.051 li
522.301 471.129 mo
532.379 461.051 li
@
610.5 474.73 mo
600.422 464.648 li
600.422 474.73 mo
610.5 464.648 li
@
688.5 477.488 mo
678.422 467.41 li
678.422 477.488 mo
688.5 467.41 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
59.039 43.922 mo
137.16 268.441 li
215.16 379.922 li
293.281 417.121 li
371.281 435.719 li
449.398 445.922 li
527.398 453.359 li
605.398 457.441 li
683.52 461.762 li
@
grestore
54.059 38.891 mo
64.02 38.891 li
64.02 48.852 li
54.059 48.852 li
cp
@
132.059 263.289 mo
142.02 263.289 li
142.02 273.25 li
132.059 273.25 li
cp
@
210.18 374.77 mo
220.141 374.77 li
220.141 384.731 li
210.18 384.731 li
cp
@
288.18 411.969 mo
298.141 411.969 li
298.141 421.93 li
288.18 421.93 li
cp
@
366.301 430.691 mo
376.262 430.691 li
376.262 440.648 li
366.301 440.648 li
cp
@
444.301 440.891 mo
454.262 440.891 li
454.262 450.852 li
444.301 450.852 li
cp
@
522.301 448.211 mo
532.262 448.211 li
532.262 458.172 li
522.301 458.172 li
cp
@
600.422 452.41 mo
610.379 452.41 li
610.379 462.371 li
600.422 462.371 li
cp
@
678.422 456.609 mo
688.379 456.609 li
688.379 466.57 li
678.422 466.57 li
cp
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
59.039 184.68 mo
137.16 313.68 li
215.16 396.719 li
293.281 450.961 li
371.281 453 li
449.398 460.801 li
527.398 465.961 li
605.398 469.68 li
683.52 472.441 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
64.141 189.73 mo
54.059 179.648 li
54.059 189.73 mo
64.141 179.648 li
.0319219 .621851 .911223 .000427253 cmyk
@
142.141 318.609 mo
132.059 308.531 li
132.059 318.609 mo
142.141 308.531 li
@
220.262 401.648 mo
210.18 391.57 li
210.18 401.648 mo
220.262 391.57 li
@
298.262 455.891 mo
288.18 445.809 li
288.18 455.891 mo
298.262 445.809 li
@
376.379 458.051 mo
366.301 447.969 li
366.301 458.051 mo
376.379 447.969 li
@
454.379 465.73 mo
444.301 455.648 li
444.301 465.73 mo
454.379 455.648 li
@
532.379 470.891 mo
522.301 460.809 li
522.301 470.891 mo
532.379 460.809 li
@
610.5 474.609 mo
600.422 464.531 li
600.422 474.609 mo
610.5 464.531 li
@
688.5 477.371 mo
678.422 467.289 li
678.422 477.371 mo
688.5 467.289 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
59.039 46.32 mo
137.16 268.922 li
215.16 379.68 li
293.281 417.238 li
371.281 435.84 li
449.398 446.641 li
527.398 454.32 li
605.398 459.961 li
683.52 463.801 li
@
grestore
54.059 41.172 mo
64.02 41.172 li
64.02 51.129 li
54.059 51.129 li
cp
@
132.059 263.77 mo
142.02 263.77 li
142.02 273.731 li
132.059 273.731 li
cp
@
210.18 374.648 mo
220.141 374.648 li
220.141 384.609 li
210.18 384.609 li
cp
@
288.18 412.211 mo
298.141 412.211 li
298.141 422.172 li
288.18 422.172 li
cp
@
366.301 430.809 mo
376.262 430.809 li
376.262 440.77 li
366.301 440.77 li
cp
@
444.301 441.488 mo
454.262 441.488 li
454.262 451.449 li
444.301 451.449 li
cp
@
522.301 449.289 mo
532.262 449.289 li
532.262 459.25 li
522.301 459.25 li
cp
@
600.422 454.93 mo
610.379 454.93 li
610.379 464.891 li
600.422 464.891 li
cp
@
678.422 458.648 mo
688.379 458.648 li
688.379 468.609 li
678.422 468.609 li
cp
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
59.039 183.961 mo
137.16 313.199 li
215.16 415.32 li
293.281 450.602 li
371.281 443.52 li
449.398 453.121 li
527.398 459.359 li
605.398 464.039 li
683.52 467.52 li
.619135 .109529 .981689 .00570687 cmyk
@
grestore
64.141 188.891 mo
54.059 178.809 li
54.059 188.891 mo
64.141 178.809 li
.619135 .109529 .981689 .00570687 cmyk
@
142.141 318.25 mo
132.059 308.172 li
132.059 318.25 mo
142.141 308.172 li
@
220.262 420.371 mo
210.18 410.289 li
210.18 420.371 mo
220.262 410.289 li
@
298.262 455.648 mo
288.18 445.57 li
288.18 455.648 mo
298.262 445.57 li
@
376.379 448.57 mo
366.301 438.488 li
366.301 448.57 mo
376.379 438.488 li
@
454.379 458.051 mo
444.301 447.969 li
444.301 458.051 mo
454.379 447.969 li
@
532.379 464.41 mo
522.301 454.328 li
522.301 464.41 mo
532.379 454.328 li
@
610.5 469.09 mo
600.422 459.012 li
600.422 469.09 mo
610.5 459.012 li
@
688.5 472.449 mo
678.422 462.371 li
678.422 472.449 mo
688.5 462.371 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
59.039 46.199 mo
137.16 268.559 li
215.16 379.801 li
293.281 417.238 li
371.281 435.719 li
449.398 447 li
527.398 454.441 li
605.398 459.719 li
683.52 463.68 li
@
grestore
54.059 41.172 mo
64.02 41.172 li
64.02 51.129 li
54.059 51.129 li
cp
@
132.059 263.531 mo
142.02 263.531 li
142.02 273.488 li
132.059 273.488 li
cp
@
210.18 374.77 mo
220.141 374.77 li
220.141 384.731 li
210.18 384.731 li
cp
@
288.18 412.09 mo
298.141 412.09 li
298.141 422.051 li
288.18 422.051 li
cp
@
366.301 430.57 mo
376.262 430.57 li
376.262 440.531 li
366.301 440.531 li
cp
@
444.301 441.852 mo
454.262 441.852 li
454.262 451.809 li
444.301 451.809 li
cp
@
522.301 449.41 mo
532.262 449.41 li
532.262 459.371 li
522.301 459.371 li
cp
@
600.422 454.691 mo
610.379 454.691 li
610.379 464.648 li
600.422 464.648 li
cp
@
678.422 458.648 mo
688.379 458.648 li
688.379 468.609 li
678.422 468.609 li
cp
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
59.039 183.238 mo
137.16 311.16 li
215.16 424.68 li
293.281 432.602 li
371.281 443.16 li
449.398 452.641 li
527.398 458.879 li
605.398 463.68 li
683.52 466.801 li
0 .990631 1 .000396735 cmyk
@
grestore
64.141 188.172 mo
54.059 178.09 li
54.059 188.172 mo
64.141 178.09 li
0 .990631 1 .000396735 cmyk
@
142.141 316.09 mo
132.059 306.012 li
132.059 316.09 mo
142.141 306.012 li
@
220.262 429.609 mo
210.18 419.531 li
210.18 429.609 mo
220.262 419.531 li
@
298.262 437.648 mo
288.18 427.57 li
288.18 437.648 mo
298.262 427.57 li
@
376.379 448.09 mo
366.301 438.012 li
366.301 448.09 mo
376.379 438.012 li
@
454.379 457.691 mo
444.301 447.609 li
444.301 457.691 mo
454.379 447.609 li
@
532.379 463.93 mo
522.301 453.852 li
522.301 463.93 mo
532.379 453.852 li
@
610.5 468.73 mo
600.422 458.648 li
600.422 468.73 mo
610.5 458.648 li
@
688.5 471.852 mo
678.422 461.77 li
678.422 471.852 mo
688.5 461.77 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
59.039 45.84 mo
137.16 267.602 li
215.16 379.559 li
293.281 415.32 li
371.281 435.238 li
449.398 446.52 li
527.398 450.719 li
605.398 459.719 li
683.52 457.078 li
@
grestore
54.059 40.691 mo
64.02 40.691 li
64.02 50.648 li
54.059 50.648 li
cp
@
132.059 262.449 mo
142.02 262.449 li
142.02 272.41 li
132.059 272.41 li
cp
@
210.18 374.531 mo
220.141 374.531 li
220.141 384.488 li
210.18 384.488 li
cp
@
288.18 410.289 mo
298.141 410.289 li
298.141 420.25 li
288.18 420.25 li
cp
@
366.301 430.211 mo
376.262 430.211 li
376.262 440.172 li
366.301 440.172 li
cp
@
444.301 441.371 mo
454.262 441.371 li
454.262 451.328 li
444.301 451.328 li
cp
@
522.301 445.691 mo
532.262 445.691 li
532.262 455.648 li
522.301 455.648 li
cp
@
600.422 454.691 mo
610.379 454.691 li
610.379 464.648 li
600.422 464.648 li
cp
@
678.422 452.051 mo
688.379 452.051 li
688.379 462.012 li
678.422 462.012 li
cp
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.039 182.16 mo
137.16 348.961 li
215.16 421.32 li
293.281 420.719 li
371.281 433.078 li
449.398 443.16 li
527.398 452.039 li
605.398 458.281 li
683.52 461.641 li
.62768 .285466 0 0 cmyk
@
grestore
64.141 187.211 mo
54.059 177.129 li
54.059 187.211 mo
64.141 177.129 li
.62768 .285466 0 0 cmyk
@
142.141 354.012 mo
132.059 343.93 li
132.059 354.012 mo
142.141 343.93 li
@
220.262 426.371 mo
210.18 416.289 li
210.18 426.371 mo
220.262 416.289 li
@
298.262 425.77 mo
288.18 415.691 li
288.18 425.77 mo
298.262 415.691 li
@
376.379 438.129 mo
366.301 428.051 li
366.301 438.129 mo
376.379 428.051 li
@
454.379 448.09 mo
444.301 438.012 li
444.301 448.09 mo
454.379 438.012 li
@
532.379 457.09 mo
522.301 447.012 li
522.301 457.09 mo
532.379 447.012 li
@
610.5 463.211 mo
600.422 453.129 li
600.422 463.211 mo
610.5 453.129 li
@
688.5 466.57 mo
678.422 456.488 li
678.422 466.57 mo
688.5 456.488 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.039 44.762 mo
137.16 268.32 li
215.16 380.16 li
293.281 417.48 li
371.281 436.199 li
449.398 444 li
527.398 454.68 li
605.398 459.961 li
683.52 450 li
@
grestore
[4 3 ] 0 dsh
54.059 39.73 mo
64.02 39.73 li
64.02 49.691 li
54.059 49.691 li
cp
@
132.059 263.289 mo
142.02 263.289 li
142.02 273.25 li
132.059 273.25 li
cp
@
210.18 375.129 mo
220.141 375.129 li
220.141 385.09 li
210.18 385.09 li
cp
@
288.18 412.449 mo
298.141 412.449 li
298.141 422.41 li
288.18 422.41 li
cp
@
366.301 431.051 mo
376.262 431.051 li
376.262 441.012 li
366.301 441.012 li
cp
@
444.301 438.969 mo
454.262 438.969 li
454.262 448.93 li
444.301 448.93 li
cp
@
522.301 449.648 mo
532.262 449.648 li
532.262 459.609 li
522.301 459.609 li
cp
@
600.422 454.93 mo
610.379 454.93 li
610.379 464.891 li
600.422 464.891 li
cp
@
678.422 444.852 mo
688.379 444.852 li
688.379 454.809 li
678.422 454.809 li
cp
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.039 182.762 mo
137.16 311.762 li
215.16 433.922 li
293.281 420.121 li
371.281 427.199 li
449.398 440.641 li
527.398 443.16 li
605.398 451.441 li
683.52 464.879 li
.0319219 .621851 .911223 .000427253 cmyk
@
grestore
[] 0 dsh
64.141 187.809 mo
54.059 177.73 li
54.059 187.809 mo
64.141 177.73 li
.0319219 .621851 .911223 .000427253 cmyk
@
142.141 316.691 mo
132.059 306.609 li
132.059 316.691 mo
142.141 306.609 li
@
220.262 438.969 mo
210.18 428.891 li
210.18 438.969 mo
220.262 428.891 li
@
298.262 425.051 mo
288.18 414.969 li
288.18 425.051 mo
298.262 414.969 li
@
376.379 432.25 mo
366.301 422.172 li
366.301 432.25 mo
376.379 422.172 li
@
454.379 445.691 mo
444.301 435.609 li
444.301 445.691 mo
454.379 435.609 li
@
532.379 448.211 mo
522.301 438.129 li
522.301 448.211 mo
532.379 438.129 li
@
610.5 456.488 mo
600.422 446.41 li
600.422 456.488 mo
610.5 446.41 li
@
688.5 469.93 mo
678.422 459.852 li
678.422 469.93 mo
688.5 459.852 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.039 47.281 mo
137.16 269.16 li
215.16 380.52 li
293.281 417.84 li
371.281 436.199 li
449.398 446.52 li
527.398 452.281 li
605.398 460.078 li
683.52 463.32 li
@
grestore
54.059 42.25 mo
64.02 42.25 li
64.02 52.211 li
54.059 52.211 li
cp
@
132.059 264.129 mo
142.02 264.129 li
142.02 274.09 li
132.059 274.09 li
cp
@
210.18 375.488 mo
220.141 375.488 li
220.141 385.449 li
210.18 385.449 li
cp
@
288.18 412.691 mo
298.141 412.691 li
298.141 422.648 li
288.18 422.648 li
cp
@
366.301 431.172 mo
376.262 431.172 li
376.262 441.129 li
366.301 441.129 li
cp
@
444.301 441.371 mo
454.262 441.371 li
454.262 451.328 li
444.301 451.328 li
cp
@
522.301 447.129 mo
532.262 447.129 li
532.262 457.09 li
522.301 457.09 li
cp
@
600.422 454.93 mo
610.379 454.93 li
610.379 464.891 li
600.422 464.891 li
cp
@
678.422 458.289 mo
688.379 458.289 li
688.379 468.25 li
678.422 468.25 li
cp
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.039 182.762 mo
137.16 311.52 li
215.16 424.68 li
293.281 412.078 li
371.281 415.801 li
449.398 428.52 li
527.398 443.281 li
605.398 443.52 li
683.52 458.641 li
.466651 0 .889799 0 cmyk
@
grestore
64.141 187.691 mo
54.059 177.609 li
54.059 187.691 mo
64.141 177.609 li
.619135 .109529 .981689 .00570687 cmyk
@
142.141 316.449 mo
132.059 306.371 li
132.059 316.449 mo
142.141 306.371 li
@
220.262 429.609 mo
210.18 419.531 li
210.18 429.609 mo
220.262 419.531 li
@
298.262 417.012 mo
288.18 406.93 li
288.18 417.012 mo
298.262 406.93 li
@
376.379 420.852 mo
366.301 410.77 li
366.301 420.852 mo
376.379 410.77 li
@
454.379 433.57 mo
444.301 423.488 li
444.301 433.57 mo
454.379 423.488 li
@
532.379 448.328 mo
522.301 438.25 li
522.301 448.328 mo
532.379 438.25 li
@
610.5 448.57 mo
600.422 438.488 li
600.422 448.57 mo
610.5 438.488 li
@
688.5 463.691 mo
678.422 453.609 li
678.422 463.691 mo
688.5 453.609 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.039 49.199 mo
137.16 268.801 li
215.16 380.039 li
293.281 417.359 li
371.281 436.199 li
449.398 447.359 li
527.398 454.801 li
605.398 459.48 li
683.52 451.801 li
.466651 0 .889799 0 cmyk
@
grestore
54.059 44.172 mo
64.02 44.172 li
64.02 54.129 li
54.059 54.129 li
cp
@
132.059 263.648 mo
142.02 263.648 li
142.02 273.609 li
132.059 273.609 li
cp
@
210.18 375.012 mo
220.141 375.012 li
220.141 384.969 li
210.18 384.969 li
cp
@
288.18 412.328 mo
298.141 412.328 li
298.141 422.289 li
288.18 422.289 li
cp
@
366.301 431.051 mo
376.262 431.051 li
376.262 441.012 li
366.301 441.012 li
cp
@
444.301 442.328 mo
454.262 442.328 li
454.262 452.289 li
444.301 452.289 li
cp
@
522.301 449.648 mo
532.262 449.648 li
532.262 459.609 li
522.301 459.609 li
cp
@
600.422 454.328 mo
610.379 454.328 li
610.379 464.289 li
600.422 464.289 li
cp
@
678.422 446.77 mo
688.379 446.77 li
688.379 456.731 li
678.422 456.731 li
cp
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.039 182.039 mo
137.16 311.641 li
215.16 433.801 li
293.281 411.602 li
371.281 401.16 li
449.398 419.52 li
527.398 438.238 li
605.398 439.441 li
683.52 451.32 li
0 .990631 1 .000396735 cmyk
@
grestore
64.141 186.969 mo
54.059 176.891 li
54.059 186.969 mo
64.141 176.891 li
0 .990631 1 .000396735 cmyk
@
142.141 316.57 mo
132.059 306.488 li
132.059 316.57 mo
142.141 306.488 li
@
220.262 438.73 mo
210.18 428.648 li
210.18 438.73 mo
220.262 428.648 li
@
298.262 416.648 mo
288.18 406.57 li
288.18 416.648 mo
298.262 406.57 li
@
376.379 406.09 mo
366.301 396.012 li
366.301 406.09 mo
376.379 396.012 li
@
454.379 424.57 mo
444.301 414.488 li
444.301 424.57 mo
454.379 414.488 li
@
532.379 443.289 mo
522.301 433.211 li
522.301 443.289 mo
532.379 433.211 li
@
610.5 444.488 mo
600.422 434.41 li
600.422 444.488 mo
610.5 434.41 li
@
688.5 456.25 mo
678.422 446.172 li
678.422 456.25 mo
688.5 446.172 li
@
gsave
59.039 31.559 mo
684.238 31.559 li
684.238 492.602 li
59.039 492.602 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.039 46.559 mo
137.16 269.281 li
215.16 378.359 li
293.281 407.281 li
371.281 435.719 li
449.398 447.359 li
527.398 454.801 li
605.398 455.281 li
683.52 458.52 li
@
grestore
54.059 41.41 mo
64.02 41.41 li
64.02 51.371 li
54.059 51.371 li
cp
@
132.059 264.25 mo
142.02 264.25 li
142.02 274.211 li
132.059 274.211 li
cp
@
210.18 373.211 mo
220.141 373.211 li
220.141 383.172 li
210.18 383.172 li
cp
@
288.18 402.129 mo
298.141 402.129 li
298.141 412.09 li
288.18 412.09 li
cp
@
366.301 430.57 mo
376.262 430.57 li
376.262 440.531 li
366.301 440.531 li
cp
@
444.301 442.328 mo
454.262 442.328 li
454.262 452.289 li
444.301 452.289 li
cp
@
522.301 449.648 mo
532.262 449.648 li
532.262 459.609 li
522.301 459.609 li
cp
@
600.422 450.129 mo
610.379 450.129 li
610.379 460.09 li
600.422 460.09 li
cp
@
678.422 453.371 mo
688.379 453.371 li
688.379 463.328 li
678.422 463.328 li
cp
@
39.051 482.629 mo
46.145 482.629 li
46.145 499.719 li
39.051 499.719 li
cp
0 0 0 0 cmyk
ef
45.699 491.574 mo
45.695 492.258 45.645 492.879 45.539 493.441 cv
45.43 494.004 45.25 494.488 45.004 494.891 cv
44.75 495.297 44.422 495.609 44.023 495.828 cv
43.617 496.051 43.125 496.16 42.539 496.16 cv
41.98 496.16 41.508 496.062 41.129 495.863 cv
40.746 495.668 40.441 495.375 40.207 494.988 cv
39.973 494.602 39.805 494.129 39.711 493.562 cv
39.609 493 39.563 492.352 39.563 491.617 cv
39.563 490.945 39.617 490.324 39.727 489.758 cv
39.836 489.195 40.012 488.711 40.262 488.305 cv
40.504 487.902 40.828 487.59 41.234 487.363 cv
41.633 487.145 42.129 487.031 42.719 487.031 cv
43.277 487.031 43.75 487.133 44.133 487.328 cv
44.516 487.531 44.82 487.824 45.055 488.207 cv
45.285 488.598 45.453 489.07 45.551 489.633 cv
45.648 490.195 45.695 490.844 45.699 491.574 cv
cp
44.492 491.656 mo
44.488 491.215 44.473 490.816 44.445 490.465 cv
44.41 490.113 44.363 489.805 44.305 489.535 cv
44.238 489.266 44.16 489.035 44.063 488.84 cv
43.965 488.648 43.848 488.488 43.711 488.359 cv
43.57 488.234 43.41 488.141 43.238 488.082 cv
43.059 488.027 42.863 488 42.648 487.996 cv
42.258 488 41.941 488.09 41.703 488.273 cv
41.457 488.457 41.266 488.711 41.129 489.027 cv
40.988 489.348 40.895 489.719 40.844 490.148 cv
40.793 490.578 40.77 491.043 40.77 491.535 cv
40.77 492.199 40.801 492.762 40.871 493.223 cv
40.938 493.691 41.047 494.07 41.199 494.359 cv
41.344 494.656 41.535 494.867 41.766 494.996 cv
41.996 495.133 42.277 495.199 42.609 495.195 cv
42.863 495.199 43.086 495.16 43.281 495.074 cv
43.473 494.996 43.641 494.875 43.781 494.719 cv
43.922 494.566 44.035 494.383 44.129 494.168 cv
44.215 493.953 44.289 493.715 44.348 493.453 cv
44.398 493.195 44.438 492.914 44.461 492.609 cv
44.48 492.305 44.488 491.988 44.492 491.656 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
31.949 436.602 mo
46.14 436.602 li
46.14 453.692 li
31.949 453.692 li
cp
0 0 0 0 cmyk
ef
38.305 449.492 mo
38.301 449.578 38.297 449.652 38.285 449.715 cv
38.273 449.781 38.258 449.836 38.238 449.875 cv
38.215 449.922 38.188 449.953 38.156 449.969 cv
38.121 449.992 38.082 450 38.043 450 cv
33.141 450 li
33.078 450 33.02 449.992 32.973 449.977 cv
32.922 449.961 32.883 449.937 32.848 449.898 cv
32.813 449.867 32.785 449.812 32.773 449.742 cv
32.754 449.672 32.746 449.586 32.75 449.484 cv
32.746 449.395 32.75 449.316 32.758 449.246 cv
32.762 449.18 32.777 449.121 32.805 449.066 cv
32.828 449.016 32.859 448.961 32.895 448.906 cv
32.93 448.855 32.973 448.801 33.031 448.738 cv
34.805 446.914 li
35.215 446.496 35.543 446.121 35.793 445.785 cv
36.039 445.457 36.23 445.152 36.363 444.875 cv
36.496 444.602 36.582 444.352 36.629 444.125 cv
36.668 443.902 36.691 443.691 36.691 443.496 cv
36.691 443.301 36.656 443.117 36.59 442.937 cv
36.523 442.766 36.43 442.609 36.305 442.473 cv
36.18 442.344 36.023 442.238 35.836 442.156 cv
35.648 442.082 35.43 442.043 35.184 442.039 cv
34.895 442.043 34.637 442.082 34.41 442.156 cv
34.18 442.238 33.98 442.324 33.809 442.41 cv
33.637 442.504 33.492 442.586 33.375 442.664 cv
33.258 442.742 33.172 442.781 33.121 442.781 cv
33.086 442.781 33.055 442.773 33.031 442.754 cv
33 442.738 32.98 442.707 32.965 442.664 cv
32.949 442.625 32.934 442.57 32.926 442.5 cv
32.914 442.434 32.91 442.352 32.914 442.254 cv
32.91 442.187 32.914 442.129 32.922 442.078 cv
32.926 442.027 32.934 441.984 32.945 441.945 cv
32.953 441.91 32.969 441.875 32.988 441.844 cv
33.008 441.812 33.043 441.773 33.102 441.723 cv
33.152 441.676 33.246 441.609 33.383 441.527 cv
33.516 441.445 33.688 441.367 33.891 441.285 cv
34.094 441.207 34.316 441.137 34.563 441.082 cv
34.805 441.027 35.063 441 35.336 441 cv
35.762 441 36.137 441.062 36.461 441.184 cv
36.781 441.305 37.047 441.469 37.262 441.68 cv
37.473 441.891 37.633 442.137 37.738 442.41 cv
37.844 442.691 37.898 442.988 37.898 443.301 cv
37.898 443.59 37.871 443.871 37.82 444.148 cv
37.77 444.434 37.664 444.738 37.504 445.062 cv
37.34 445.391 37.105 445.754 36.801 446.152 cv
36.492 446.555 36.086 447.016 35.582 447.531 cv
34.176 449 li
38.035 449 li
38.066 449.004 38.102 449.016 38.141 449.031 cv
38.172 449.055 38.203 449.086 38.23 449.125 cv
38.254 449.168 38.273 449.219 38.285 449.277 cv
38.297 449.344 38.301 449.414 38.305 449.492 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
45.344 447.148 mo
45.344 447.625 45.262 448.047 45.102 448.418 cv
44.941 448.789 44.715 449.102 44.426 449.355 cv
44.129 449.609 43.781 449.805 43.379 449.934 cv
42.973 450.066 42.523 450.129 42.031 450.129 cv
41.754 450.129 41.492 450.109 41.25 450.07 cv
41 450.031 40.781 449.984 40.594 449.93 cv
40.398 449.875 40.242 449.82 40.117 449.762 cv
39.992 449.711 39.914 449.668 39.883 449.633 cv
39.848 449.602 39.824 449.57 39.813 449.543 cv
39.797 449.516 39.781 449.484 39.773 449.441 cv
39.758 449.406 39.75 449.355 39.75 449.293 cv
39.742 449.234 39.742 449.164 39.742 449.082 cv
39.742 449.008 39.746 448.937 39.754 448.875 cv
39.762 448.812 39.773 448.762 39.793 448.723 cv
39.809 448.684 39.828 448.656 39.855 448.637 cv
39.879 448.621 39.91 448.613 39.941 448.609 cv
39.988 448.613 40.059 448.641 40.152 448.695 cv
40.246 448.754 40.375 448.816 40.539 448.883 cv
40.703 448.949 40.902 449.012 41.145 449.07 cv
41.379 449.129 41.664 449.156 42 449.156 cv
42.301 449.156 42.582 449.121 42.84 449.047 cv
43.094 448.977 43.316 448.863 43.504 448.707 cv
43.688 448.555 43.832 448.359 43.938 448.121 cv
44.043 447.887 44.094 447.598 44.098 447.258 cv
44.094 446.977 44.051 446.727 43.961 446.508 cv
43.871 446.289 43.734 446.109 43.551 445.965 cv
43.363 445.824 43.129 445.719 42.848 445.645 cv
42.563 445.574 42.223 445.535 41.836 445.535 cv
41.551 445.535 41.313 445.551 41.113 445.578 cv
40.91 445.609 40.723 445.625 40.551 445.621 cv
40.422 445.625 40.328 445.594 40.277 445.531 cv
40.219 445.473 40.191 445.359 40.195 445.187 cv
40.195 441.574 li
40.191 441.426 40.227 441.316 40.301 441.238 cv
40.367 441.168 40.469 441.129 40.605 441.129 cv
44.535 441.129 li
44.57 441.129 44.605 441.141 44.641 441.16 cv
44.672 441.184 44.699 441.215 44.727 441.254 cv
44.746 441.297 44.762 441.348 44.777 441.41 cv
44.785 441.477 44.793 441.555 44.797 441.637 cv
44.793 441.805 44.77 441.93 44.73 442.02 cv
44.684 442.113 44.625 442.16 44.547 442.156 cv
41.375 442.156 li
41.375 444.645 li
41.527 444.625 41.684 444.613 41.848 444.605 cv
42.004 444.602 42.191 444.598 42.406 444.598 cv
42.891 444.598 43.316 444.66 43.684 444.781 cv
44.047 444.902 44.352 445.074 44.602 445.293 cv
44.844 445.52 45.031 445.785 45.156 446.098 cv
45.281 446.414 45.344 446.766 45.344 447.148 cv
cp
f
31.949 390.57 mo
46.14 390.57 li
46.14 407.66 li
31.949 407.66 li
cp
0 0 0 0 cmyk
ef
38.262 401.117 mo
38.262 401.594 38.18 402.016 38.02 402.387 cv
37.859 402.758 37.633 403.07 37.344 403.324 cv
37.047 403.578 36.699 403.773 36.297 403.902 cv
35.891 404.035 35.441 404.098 34.949 404.098 cv
34.672 404.098 34.41 404.078 34.168 404.039 cv
33.918 404 33.699 403.953 33.512 403.898 cv
33.316 403.844 33.16 403.789 33.035 403.73 cv
32.91 403.68 32.832 403.637 32.801 403.602 cv
32.766 403.57 32.742 403.539 32.73 403.512 cv
32.715 403.484 32.699 403.453 32.691 403.41 cv
32.676 403.375 32.668 403.324 32.668 403.262 cv
32.66 403.203 32.66 403.133 32.66 403.051 cv
32.66 402.977 32.664 402.906 32.672 402.844 cv
32.68 402.781 32.691 402.73 32.711 402.691 cv
32.727 402.652 32.746 402.625 32.773 402.605 cv
32.797 402.59 32.828 402.582 32.859 402.578 cv
32.906 402.582 32.977 402.609 33.07 402.664 cv
33.164 402.723 33.293 402.785 33.457 402.852 cv
33.621 402.918 33.82 402.98 34.063 403.039 cv
34.297 403.098 34.582 403.125 34.918 403.125 cv
35.219 403.125 35.5 403.09 35.758 403.016 cv
36.012 402.945 36.234 402.832 36.422 402.676 cv
36.605 402.523 36.75 402.328 36.855 402.09 cv
36.961 401.855 37.012 401.566 37.016 401.227 cv
37.012 400.945 36.969 400.695 36.879 400.477 cv
36.789 400.258 36.652 400.078 36.469 399.934 cv
36.281 399.793 36.047 399.687 35.766 399.613 cv
35.48 399.543 35.141 399.504 34.754 399.504 cv
34.469 399.504 34.23 399.52 34.031 399.547 cv
33.828 399.578 33.641 399.594 33.469 399.59 cv
33.34 399.594 33.246 399.562 33.195 399.5 cv
33.137 399.441 33.109 399.328 33.113 399.156 cv
33.113 395.543 li
33.109 395.395 33.145 395.285 33.219 395.207 cv
33.285 395.137 33.387 395.098 33.523 395.098 cv
37.453 395.098 li
37.488 395.098 37.523 395.109 37.559 395.129 cv
37.59 395.152 37.617 395.184 37.645 395.223 cv
37.664 395.266 37.68 395.316 37.695 395.379 cv
37.703 395.445 37.711 395.523 37.715 395.605 cv
37.711 395.773 37.688 395.898 37.648 395.988 cv
37.602 396.082 37.543 396.129 37.465 396.125 cv
34.293 396.125 li
34.293 398.613 li
34.445 398.594 34.602 398.582 34.766 398.574 cv
34.922 398.57 35.109 398.566 35.324 398.566 cv
35.809 398.566 36.234 398.629 36.602 398.75 cv
36.965 398.871 37.27 399.043 37.52 399.262 cv
37.762 399.488 37.949 399.754 38.074 400.066 cv
38.199 400.383 38.262 400.734 38.262 401.117 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
45.68 399.512 mo
45.676 400.195 45.625 400.816 45.52 401.379 cv
45.41 401.941 45.23 402.426 44.984 402.828 cv
44.73 403.234 44.402 403.547 44.004 403.766 cv
43.598 403.988 43.105 404.098 42.52 404.098 cv
41.961 404.098 41.488 404 41.109 403.801 cv
40.727 403.605 40.422 403.312 40.188 402.926 cv
39.953 402.539 39.785 402.066 39.691 401.5 cv
39.59 400.937 39.543 400.289 39.543 399.555 cv
39.543 398.883 39.598 398.262 39.707 397.695 cv
39.816 397.133 39.992 396.648 40.242 396.242 cv
40.484 395.84 40.809 395.527 41.215 395.301 cv
41.613 395.082 42.109 394.969 42.699 394.969 cv
43.258 394.969 43.73 395.07 44.113 395.266 cv
44.496 395.469 44.801 395.762 45.035 396.145 cv
45.266 396.535 45.434 397.008 45.531 397.57 cv
45.629 398.133 45.676 398.781 45.68 399.512 cv
cp
44.473 399.594 mo
44.469 399.152 44.453 398.754 44.426 398.402 cv
44.391 398.051 44.344 397.742 44.285 397.473 cv
44.219 397.203 44.141 396.973 44.043 396.777 cv
43.945 396.586 43.828 396.426 43.691 396.297 cv
43.551 396.172 43.391 396.078 43.219 396.02 cv
43.039 395.965 42.844 395.937 42.629 395.934 cv
42.238 395.937 41.922 396.027 41.684 396.211 cv
41.438 396.395 41.246 396.648 41.109 396.965 cv
40.969 397.285 40.875 397.656 40.824 398.086 cv
40.773 398.516 40.75 398.98 40.75 399.473 cv
40.75 400.137 40.781 400.699 40.852 401.16 cv
40.918 401.629 41.027 402.008 41.18 402.297 cv
41.324 402.594 41.516 402.805 41.746 402.934 cv
41.977 403.07 42.258 403.137 42.59 403.133 cv
42.844 403.137 43.066 403.098 43.262 403.012 cv
43.453 402.934 43.621 402.812 43.762 402.656 cv
43.902 402.504 44.016 402.32 44.109 402.105 cv
44.195 401.891 44.27 401.652 44.328 401.391 cv
44.379 401.133 44.418 400.852 44.441 400.547 cv
44.461 400.242 44.469 399.926 44.473 399.594 cv
cp
f
31.949 344.531 mo
46.14 344.531 li
46.14 361.621 li
31.949 361.621 li
cp
0 0 0 0 cmyk
ef
38.434 349.547 mo
38.43 349.633 38.426 349.707 38.422 349.77 cv
38.414 349.84 38.406 349.902 38.395 349.961 cv
38.383 350.027 38.367 350.086 38.348 350.141 cv
38.324 350.199 38.301 350.262 38.277 350.32 cv
35.082 357.684 li
35.055 357.742 35.027 357.785 34.996 357.816 cv
34.961 357.852 34.918 357.879 34.863 357.898 cv
34.809 357.918 34.738 357.93 34.66 357.941 cv
34.574 357.945 34.477 357.949 34.359 357.953 cv
34.203 357.949 34.082 357.941 33.996 357.93 cv
33.91 357.914 33.848 357.898 33.809 357.867 cv
33.77 357.84 33.75 357.801 33.758 357.758 cv
33.758 357.715 33.773 357.664 33.805 357.602 cv
37.164 350.074 li
32.906 350.074 li
32.82 350.078 32.754 350.031 32.711 349.937 cv
32.668 349.848 32.648 349.719 32.648 349.555 cv
32.648 349.469 32.652 349.395 32.664 349.328 cv
32.676 349.266 32.691 349.211 32.715 349.168 cv
32.734 349.125 32.762 349.094 32.797 349.07 cv
32.828 349.051 32.867 349.039 32.906 349.039 cv
38.078 349.039 li
38.137 349.039 38.191 349.047 38.242 349.062 cv
38.289 349.078 38.324 349.105 38.352 349.145 cv
38.375 349.184 38.395 349.238 38.41 349.301 cv
38.422 349.367 38.43 349.449 38.434 349.547 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
45.344 355.059 mo
45.344 355.535 45.262 355.957 45.102 356.328 cv
44.941 356.699 44.715 357.012 44.426 357.266 cv
44.129 357.52 43.781 357.715 43.379 357.844 cv
42.973 357.977 42.523 358.039 42.031 358.039 cv
41.754 358.039 41.492 358.02 41.25 357.98 cv
41 357.941 40.781 357.895 40.594 357.84 cv
40.398 357.785 40.242 357.73 40.117 357.672 cv
39.992 357.621 39.914 357.578 39.883 357.543 cv
39.848 357.512 39.824 357.48 39.813 357.453 cv
39.797 357.426 39.781 357.395 39.773 357.352 cv
39.758 357.316 39.75 357.266 39.75 357.203 cv
39.742 357.145 39.742 357.074 39.742 356.992 cv
39.742 356.918 39.746 356.848 39.754 356.785 cv
39.762 356.723 39.773 356.672 39.793 356.633 cv
39.809 356.594 39.828 356.566 39.855 356.547 cv
39.879 356.531 39.91 356.523 39.941 356.52 cv
39.988 356.523 40.059 356.551 40.152 356.605 cv
40.246 356.664 40.375 356.727 40.539 356.793 cv
40.703 356.859 40.902 356.922 41.145 356.98 cv
41.379 357.039 41.664 357.066 42 357.066 cv
42.301 357.066 42.582 357.031 42.84 356.957 cv
43.094 356.887 43.316 356.773 43.504 356.617 cv
43.688 356.465 43.832 356.27 43.938 356.031 cv
44.043 355.797 44.094 355.508 44.098 355.168 cv
44.094 354.887 44.051 354.637 43.961 354.418 cv
43.871 354.199 43.734 354.02 43.551 353.875 cv
43.363 353.734 43.129 353.629 42.848 353.555 cv
42.563 353.484 42.223 353.445 41.836 353.445 cv
41.551 353.445 41.313 353.461 41.113 353.488 cv
40.91 353.52 40.723 353.535 40.551 353.531 cv
40.422 353.535 40.328 353.504 40.277 353.441 cv
40.219 353.383 40.191 353.27 40.195 353.098 cv
40.195 349.484 li
40.191 349.336 40.227 349.227 40.301 349.148 cv
40.367 349.078 40.469 349.039 40.605 349.039 cv
44.535 349.039 li
44.57 349.039 44.605 349.051 44.641 349.07 cv
44.672 349.094 44.699 349.125 44.727 349.164 cv
44.746 349.207 44.762 349.258 44.777 349.32 cv
44.785 349.387 44.793 349.465 44.797 349.547 cv
44.793 349.715 44.77 349.84 44.73 349.93 cv
44.684 350.023 44.625 350.07 44.547 350.066 cv
41.375 350.066 li
41.375 352.555 li
41.527 352.535 41.684 352.523 41.848 352.516 cv
42.004 352.512 42.191 352.508 42.406 352.508 cv
42.891 352.508 43.316 352.57 43.684 352.691 cv
44.047 352.812 44.352 352.984 44.602 353.203 cv
44.844 353.43 45.031 353.695 45.156 354.008 cv
45.281 354.324 45.344 354.676 45.344 355.059 cv
cp
f
24.859 298.5 mo
46.144 298.5 li
46.144 315.59 li
24.859 315.59 li
cp
0 0 0 0 cmyk
ef
31.219 311.414 mo
31.215 311.504 31.207 311.574 31.195 311.633 cv
31.18 311.695 31.16 311.746 31.141 311.777 cv
31.117 311.816 31.094 311.84 31.063 311.855 cv
31.031 311.871 31 311.879 30.973 311.879 cv
26.336 311.879 li
26.301 311.879 26.273 311.871 26.246 311.855 cv
26.219 311.84 26.191 311.816 26.168 311.777 cv
26.141 311.746 26.121 311.695 26.109 311.633 cv
26.094 311.574 26.086 311.504 26.09 311.414 cv
26.086 311.336 26.094 311.262 26.109 311.199 cv
26.121 311.141 26.137 311.094 26.16 311.055 cv
26.176 311.02 26.203 310.988 26.234 310.965 cv
26.266 310.945 26.297 310.937 26.336 310.934 cv
28.188 310.934 li
28.188 304.187 li
26.473 305.207 li
26.383 305.258 26.313 305.285 26.266 305.293 cv
26.211 305.301 26.168 305.293 26.137 305.262 cv
26.102 305.234 26.082 305.184 26.07 305.113 cv
26.059 305.047 26.051 304.961 26.055 304.852 cv
26.051 304.777 26.055 304.711 26.066 304.652 cv
26.07 304.602 26.082 304.555 26.098 304.516 cv
26.109 304.48 26.129 304.449 26.152 304.422 cv
26.176 304.395 26.207 304.367 26.254 304.34 cv
28.297 303.027 li
28.313 303.016 28.332 303.004 28.363 302.996 cv
28.387 302.988 28.422 302.98 28.469 302.969 cv
28.508 302.961 28.559 302.953 28.613 302.949 cv
28.668 302.949 28.734 302.949 28.82 302.945 cv
28.926 302.949 29.02 302.953 29.094 302.961 cv
29.164 302.969 29.219 302.984 29.266 303 cv
29.305 303.02 29.332 303.039 29.348 303.062 cv
29.355 303.09 29.363 303.113 29.367 303.137 cv
29.367 310.934 li
30.973 310.934 li
31.008 310.937 31.043 310.945 31.074 310.965 cv
31.105 310.988 31.129 311.02 31.152 311.055 cv
31.168 311.094 31.184 311.141 31.199 311.199 cv
31.207 311.262 31.215 311.336 31.219 311.414 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.574 307.422 mo
38.57 308.105 38.52 308.727 38.414 309.289 cv
38.305 309.852 38.125 310.336 37.879 310.738 cv
37.625 311.145 37.297 311.457 36.898 311.676 cv
36.492 311.898 36 312.008 35.414 312.008 cv
34.855 312.008 34.383 311.91 34.004 311.711 cv
33.621 311.516 33.316 311.223 33.082 310.836 cv
32.848 310.449 32.68 309.977 32.586 309.41 cv
32.484 308.848 32.438 308.199 32.438 307.465 cv
32.438 306.793 32.492 306.172 32.602 305.605 cv
32.711 305.043 32.887 304.559 33.137 304.152 cv
33.379 303.75 33.703 303.437 34.109 303.211 cv
34.508 302.992 35.004 302.879 35.594 302.879 cv
36.152 302.879 36.625 302.98 37.008 303.176 cv
37.391 303.379 37.695 303.672 37.93 304.055 cv
38.16 304.445 38.328 304.918 38.426 305.48 cv
38.523 306.043 38.57 306.691 38.574 307.422 cv
cp
37.367 307.504 mo
37.363 307.062 37.348 306.664 37.32 306.312 cv
37.285 305.961 37.238 305.652 37.18 305.383 cv
37.113 305.113 37.035 304.883 36.938 304.687 cv
36.84 304.496 36.723 304.336 36.586 304.207 cv
36.445 304.082 36.285 303.988 36.113 303.93 cv
35.934 303.875 35.738 303.848 35.523 303.844 cv
35.133 303.848 34.816 303.937 34.578 304.121 cv
34.332 304.305 34.141 304.559 34.004 304.875 cv
33.863 305.195 33.77 305.566 33.719 305.996 cv
33.668 306.426 33.645 306.891 33.645 307.383 cv
33.645 308.047 33.676 308.609 33.746 309.07 cv
33.813 309.539 33.922 309.918 34.074 310.207 cv
34.219 310.504 34.41 310.715 34.641 310.844 cv
34.871 310.98 35.152 311.047 35.484 311.043 cv
35.738 311.047 35.961 311.008 36.156 310.922 cv
36.348 310.844 36.516 310.723 36.656 310.566 cv
36.797 310.414 36.91 310.23 37.004 310.016 cv
37.09 309.801 37.164 309.562 37.223 309.301 cv
37.273 309.043 37.313 308.762 37.336 308.457 cv
37.355 308.152 37.363 307.836 37.367 307.504 cv
cp
f
45.652 307.422 mo
45.648 308.105 45.598 308.727 45.492 309.289 cv
45.383 309.852 45.203 310.336 44.957 310.738 cv
44.703 311.145 44.375 311.457 43.977 311.676 cv
43.57 311.898 43.078 312.008 42.492 312.008 cv
41.934 312.008 41.461 311.91 41.082 311.711 cv
40.699 311.516 40.395 311.223 40.16 310.836 cv
39.926 310.449 39.758 309.977 39.664 309.41 cv
39.563 308.848 39.516 308.199 39.516 307.465 cv
39.516 306.793 39.57 306.172 39.68 305.605 cv
39.789 305.043 39.965 304.559 40.215 304.152 cv
40.457 303.75 40.781 303.437 41.188 303.211 cv
41.586 302.992 42.082 302.879 42.672 302.879 cv
43.23 302.879 43.703 302.98 44.086 303.176 cv
44.469 303.379 44.773 303.672 45.008 304.055 cv
45.238 304.445 45.406 304.918 45.504 305.48 cv
45.602 306.043 45.648 306.691 45.652 307.422 cv
cp
44.445 307.504 mo
44.441 307.062 44.426 306.664 44.398 306.312 cv
44.363 305.961 44.316 305.652 44.258 305.383 cv
44.191 305.113 44.113 304.883 44.016 304.687 cv
43.918 304.496 43.801 304.336 43.664 304.207 cv
43.523 304.082 43.363 303.988 43.191 303.93 cv
43.012 303.875 42.816 303.848 42.602 303.844 cv
42.211 303.848 41.895 303.937 41.656 304.121 cv
41.41 304.305 41.219 304.559 41.082 304.875 cv
40.941 305.195 40.848 305.566 40.797 305.996 cv
40.746 306.426 40.723 306.891 40.723 307.383 cv
40.723 308.047 40.754 308.609 40.824 309.07 cv
40.891 309.539 41 309.918 41.152 310.207 cv
41.297 310.504 41.488 310.715 41.719 310.844 cv
41.949 310.98 42.23 311.047 42.563 311.043 cv
42.816 311.047 43.039 311.008 43.234 310.922 cv
43.426 310.844 43.594 310.723 43.734 310.566 cv
43.875 310.414 43.988 310.23 44.082 310.016 cv
44.168 309.801 44.242 309.562 44.301 309.301 cv
44.352 309.043 44.391 308.762 44.414 308.457 cv
44.434 308.152 44.441 307.836 44.445 307.504 cv
cp
f
24.859 252.469 mo
46.144 252.469 li
46.144 269.559 li
24.859 269.559 li
cp
0 0 0 0 cmyk
ef
31.219 265.387 mo
31.215 265.477 31.207 265.547 31.195 265.605 cv
31.18 265.668 31.16 265.719 31.141 265.75 cv
31.117 265.789 31.094 265.812 31.063 265.828 cv
31.031 265.844 31 265.852 30.973 265.852 cv
26.336 265.852 li
26.301 265.852 26.273 265.844 26.246 265.828 cv
26.219 265.812 26.191 265.789 26.168 265.75 cv
26.141 265.719 26.121 265.668 26.109 265.605 cv
26.094 265.547 26.086 265.477 26.09 265.387 cv
26.086 265.309 26.094 265.234 26.109 265.172 cv
26.121 265.113 26.137 265.066 26.16 265.027 cv
26.176 264.992 26.203 264.961 26.234 264.937 cv
26.266 264.918 26.297 264.91 26.336 264.906 cv
28.188 264.906 li
28.188 258.16 li
26.473 259.18 li
26.383 259.23 26.313 259.258 26.266 259.266 cv
26.211 259.273 26.168 259.266 26.137 259.234 cv
26.102 259.207 26.082 259.156 26.07 259.086 cv
26.059 259.02 26.051 258.934 26.055 258.824 cv
26.051 258.75 26.055 258.684 26.066 258.625 cv
26.07 258.574 26.082 258.527 26.098 258.488 cv
26.109 258.453 26.129 258.422 26.152 258.395 cv
26.176 258.367 26.207 258.34 26.254 258.312 cv
28.297 257 li
28.313 256.988 28.332 256.977 28.363 256.969 cv
28.387 256.961 28.422 256.953 28.469 256.941 cv
28.508 256.934 28.559 256.926 28.613 256.922 cv
28.668 256.922 28.734 256.922 28.82 256.918 cv
28.926 256.922 29.02 256.926 29.094 256.934 cv
29.164 256.941 29.219 256.957 29.266 256.973 cv
29.305 256.992 29.332 257.012 29.348 257.035 cv
29.355 257.062 29.363 257.086 29.367 257.109 cv
29.367 264.906 li
30.973 264.906 li
31.008 264.91 31.043 264.918 31.074 264.937 cv
31.105 264.961 31.129 264.992 31.152 265.027 cv
31.168 265.066 31.184 265.113 31.199 265.172 cv
31.207 265.234 31.215 265.309 31.219 265.387 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.281 265.344 mo
38.277 265.43 38.273 265.504 38.262 265.566 cv
38.25 265.633 38.234 265.687 38.215 265.727 cv
38.191 265.773 38.164 265.805 38.133 265.82 cv
38.098 265.844 38.059 265.852 38.02 265.852 cv
33.117 265.852 li
33.055 265.852 32.996 265.844 32.949 265.828 cv
32.898 265.812 32.859 265.789 32.824 265.75 cv
32.789 265.719 32.762 265.664 32.75 265.594 cv
32.73 265.523 32.723 265.437 32.727 265.336 cv
32.723 265.246 32.727 265.168 32.734 265.098 cv
32.738 265.031 32.754 264.973 32.781 264.918 cv
32.805 264.867 32.836 264.812 32.871 264.758 cv
32.906 264.707 32.949 264.652 33.008 264.59 cv
34.781 262.766 li
35.191 262.348 35.52 261.973 35.77 261.637 cv
36.016 261.309 36.207 261.004 36.34 260.727 cv
36.473 260.453 36.559 260.203 36.605 259.977 cv
36.645 259.754 36.668 259.543 36.668 259.348 cv
36.668 259.152 36.633 258.969 36.566 258.789 cv
36.5 258.617 36.406 258.461 36.281 258.324 cv
36.156 258.195 36 258.09 35.813 258.008 cv
35.625 257.934 35.406 257.895 35.16 257.891 cv
34.871 257.895 34.613 257.934 34.387 258.008 cv
34.156 258.09 33.957 258.176 33.785 258.262 cv
33.613 258.355 33.469 258.437 33.352 258.516 cv
33.234 258.594 33.148 258.633 33.098 258.633 cv
33.063 258.633 33.031 258.625 33.008 258.605 cv
32.977 258.59 32.957 258.559 32.941 258.516 cv
32.926 258.477 32.91 258.422 32.902 258.352 cv
32.891 258.285 32.887 258.203 32.891 258.105 cv
32.887 258.039 32.891 257.98 32.898 257.93 cv
32.902 257.879 32.91 257.836 32.922 257.797 cv
32.93 257.762 32.945 257.727 32.965 257.695 cv
32.984 257.664 33.02 257.625 33.078 257.574 cv
33.129 257.527 33.223 257.461 33.359 257.379 cv
33.492 257.297 33.664 257.219 33.867 257.137 cv
34.07 257.059 34.293 256.988 34.539 256.934 cv
34.781 256.879 35.039 256.852 35.313 256.852 cv
35.738 256.852 36.113 256.914 36.438 257.035 cv
36.758 257.156 37.023 257.32 37.238 257.531 cv
37.449 257.742 37.609 257.988 37.715 258.262 cv
37.82 258.543 37.875 258.84 37.875 259.152 cv
37.875 259.441 37.848 259.723 37.797 260 cv
37.746 260.285 37.641 260.59 37.48 260.914 cv
37.316 261.242 37.082 261.605 36.777 262.004 cv
36.469 262.406 36.063 262.867 35.559 263.383 cv
34.152 264.852 li
38.012 264.852 li
38.043 264.855 38.078 264.867 38.117 264.883 cv
38.148 264.906 38.18 264.937 38.207 264.977 cv
38.23 265.02 38.25 265.07 38.262 265.129 cv
38.273 265.195 38.277 265.266 38.281 265.344 cv
cp
f
45.316 263 mo
45.316 263.477 45.234 263.898 45.074 264.27 cv
44.914 264.641 44.688 264.953 44.398 265.207 cv
44.102 265.461 43.754 265.656 43.352 265.785 cv
42.945 265.918 42.496 265.98 42.004 265.98 cv
41.727 265.98 41.465 265.961 41.223 265.922 cv
40.973 265.883 40.754 265.836 40.566 265.781 cv
40.371 265.727 40.215 265.672 40.09 265.613 cv
39.965 265.562 39.887 265.52 39.855 265.484 cv
39.82 265.453 39.797 265.422 39.785 265.395 cv
39.77 265.367 39.754 265.336 39.746 265.293 cv
39.73 265.258 39.723 265.207 39.723 265.145 cv
39.715 265.086 39.715 265.016 39.715 264.934 cv
39.715 264.859 39.719 264.789 39.727 264.727 cv
39.734 264.664 39.746 264.613 39.766 264.574 cv
39.781 264.535 39.801 264.508 39.828 264.488 cv
39.852 264.473 39.883 264.465 39.914 264.461 cv
39.961 264.465 40.031 264.492 40.125 264.547 cv
40.219 264.605 40.348 264.668 40.512 264.734 cv
40.676 264.801 40.875 264.863 41.117 264.922 cv
41.352 264.98 41.637 265.008 41.973 265.008 cv
42.273 265.008 42.555 264.973 42.813 264.898 cv
43.066 264.828 43.289 264.715 43.477 264.559 cv
43.66 264.406 43.805 264.211 43.91 263.973 cv
44.016 263.738 44.066 263.449 44.07 263.109 cv
44.066 262.828 44.023 262.578 43.934 262.359 cv
43.844 262.141 43.707 261.961 43.523 261.816 cv
43.336 261.676 43.102 261.57 42.82 261.496 cv
42.535 261.426 42.195 261.387 41.809 261.387 cv
41.523 261.387 41.285 261.402 41.086 261.43 cv
40.883 261.461 40.695 261.477 40.523 261.473 cv
40.395 261.477 40.301 261.445 40.25 261.383 cv
40.191 261.324 40.164 261.211 40.168 261.039 cv
40.168 257.426 li
40.164 257.277 40.199 257.168 40.273 257.09 cv
40.34 257.02 40.441 256.98 40.578 256.98 cv
44.508 256.98 li
44.543 256.98 44.578 256.992 44.613 257.012 cv
44.645 257.035 44.672 257.066 44.699 257.105 cv
44.719 257.148 44.734 257.199 44.75 257.262 cv
44.758 257.328 44.766 257.406 44.77 257.488 cv
44.766 257.656 44.742 257.781 44.703 257.871 cv
44.656 257.965 44.598 258.012 44.52 258.008 cv
41.348 258.008 li
41.348 260.496 li
41.5 260.477 41.656 260.465 41.82 260.457 cv
41.977 260.453 42.164 260.449 42.379 260.449 cv
42.863 260.449 43.289 260.512 43.656 260.633 cv
44.02 260.754 44.324 260.926 44.574 261.145 cv
44.816 261.371 45.004 261.637 45.129 261.949 cv
45.254 262.266 45.316 262.617 45.316 263 cv
cp
f
24.859 206.441 mo
46.144 206.441 li
46.144 223.531 li
24.859 223.531 li
cp
0 0 0 0 cmyk
ef
31.219 219.324 mo
31.215 219.414 31.207 219.484 31.195 219.543 cv
31.18 219.605 31.16 219.656 31.141 219.687 cv
31.117 219.727 31.094 219.75 31.063 219.766 cv
31.031 219.781 31 219.789 30.973 219.789 cv
26.336 219.789 li
26.301 219.789 26.273 219.781 26.246 219.766 cv
26.219 219.75 26.191 219.727 26.168 219.687 cv
26.141 219.656 26.121 219.605 26.109 219.543 cv
26.094 219.484 26.086 219.414 26.09 219.324 cv
26.086 219.246 26.094 219.172 26.109 219.109 cv
26.121 219.051 26.137 219.004 26.16 218.965 cv
26.176 218.93 26.203 218.898 26.234 218.875 cv
26.266 218.855 26.297 218.848 26.336 218.844 cv
28.188 218.844 li
28.188 212.098 li
26.473 213.117 li
26.383 213.168 26.313 213.195 26.266 213.203 cv
26.211 213.211 26.168 213.203 26.137 213.172 cv
26.102 213.145 26.082 213.094 26.07 213.023 cv
26.059 212.957 26.051 212.871 26.055 212.762 cv
26.051 212.687 26.055 212.621 26.066 212.562 cv
26.07 212.512 26.082 212.465 26.098 212.426 cv
26.109 212.391 26.129 212.359 26.152 212.332 cv
26.176 212.305 26.207 212.277 26.254 212.25 cv
28.297 210.937 li
28.313 210.926 28.332 210.914 28.363 210.906 cv
28.387 210.898 28.422 210.891 28.469 210.879 cv
28.508 210.871 28.559 210.863 28.613 210.859 cv
28.668 210.859 28.734 210.859 28.82 210.855 cv
28.926 210.859 29.02 210.863 29.094 210.871 cv
29.164 210.879 29.219 210.895 29.266 210.91 cv
29.305 210.93 29.332 210.949 29.348 210.973 cv
29.355 211 29.363 211.023 29.367 211.047 cv
29.367 218.844 li
30.973 218.844 li
31.008 218.848 31.043 218.855 31.074 218.875 cv
31.105 218.898 31.129 218.93 31.152 218.965 cv
31.168 219.004 31.184 219.051 31.199 219.109 cv
31.207 219.172 31.215 219.246 31.219 219.324 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.238 216.937 mo
38.238 217.414 38.156 217.836 37.996 218.207 cv
37.836 218.578 37.609 218.891 37.32 219.145 cv
37.023 219.398 36.676 219.594 36.273 219.723 cv
35.867 219.855 35.418 219.918 34.926 219.918 cv
34.648 219.918 34.387 219.898 34.145 219.859 cv
33.895 219.82 33.676 219.773 33.488 219.719 cv
33.293 219.664 33.137 219.609 33.012 219.551 cv
32.887 219.5 32.809 219.457 32.777 219.422 cv
32.742 219.391 32.719 219.359 32.707 219.332 cv
32.691 219.305 32.676 219.273 32.668 219.23 cv
32.652 219.195 32.645 219.145 32.645 219.082 cv
32.637 219.023 32.637 218.953 32.637 218.871 cv
32.637 218.797 32.641 218.727 32.648 218.664 cv
32.656 218.602 32.668 218.551 32.688 218.512 cv
32.703 218.473 32.723 218.445 32.75 218.426 cv
32.773 218.41 32.805 218.402 32.836 218.398 cv
32.883 218.402 32.953 218.43 33.047 218.484 cv
33.141 218.543 33.27 218.605 33.434 218.672 cv
33.598 218.738 33.797 218.801 34.039 218.859 cv
34.273 218.918 34.559 218.945 34.895 218.945 cv
35.195 218.945 35.477 218.91 35.734 218.836 cv
35.988 218.766 36.211 218.652 36.398 218.496 cv
36.582 218.344 36.727 218.148 36.832 217.91 cv
36.938 217.676 36.988 217.387 36.992 217.047 cv
36.988 216.766 36.945 216.516 36.855 216.297 cv
36.766 216.078 36.629 215.898 36.445 215.754 cv
36.258 215.613 36.023 215.508 35.742 215.434 cv
35.457 215.363 35.117 215.324 34.73 215.324 cv
34.445 215.324 34.207 215.34 34.008 215.367 cv
33.805 215.398 33.617 215.414 33.445 215.41 cv
33.316 215.414 33.223 215.383 33.172 215.32 cv
33.113 215.262 33.086 215.148 33.09 214.977 cv
33.09 211.363 li
33.086 211.215 33.121 211.105 33.195 211.027 cv
33.262 210.957 33.363 210.918 33.5 210.918 cv
37.43 210.918 li
37.465 210.918 37.5 210.93 37.535 210.949 cv
37.566 210.973 37.594 211.004 37.621 211.043 cv
37.641 211.086 37.656 211.137 37.672 211.199 cv
37.68 211.266 37.688 211.344 37.691 211.426 cv
37.688 211.594 37.664 211.719 37.625 211.809 cv
37.578 211.902 37.52 211.949 37.441 211.945 cv
34.27 211.945 li
34.27 214.434 li
34.422 214.414 34.578 214.402 34.742 214.395 cv
34.898 214.391 35.086 214.387 35.301 214.387 cv
35.785 214.387 36.211 214.449 36.578 214.57 cv
36.941 214.691 37.246 214.863 37.496 215.082 cv
37.738 215.309 37.926 215.574 38.051 215.887 cv
38.176 216.203 38.238 216.555 38.238 216.937 cv
cp
f
45.652 215.332 mo
45.648 216.016 45.598 216.637 45.492 217.199 cv
45.383 217.762 45.203 218.246 44.957 218.648 cv
44.703 219.055 44.375 219.367 43.977 219.586 cv
43.57 219.809 43.078 219.918 42.492 219.918 cv
41.934 219.918 41.461 219.82 41.082 219.621 cv
40.699 219.426 40.395 219.133 40.16 218.746 cv
39.926 218.359 39.758 217.887 39.664 217.32 cv
39.563 216.758 39.516 216.109 39.516 215.375 cv
39.516 214.703 39.57 214.082 39.68 213.516 cv
39.789 212.953 39.965 212.469 40.215 212.062 cv
40.457 211.66 40.781 211.348 41.188 211.121 cv
41.586 210.902 42.082 210.789 42.672 210.789 cv
43.23 210.789 43.703 210.891 44.086 211.086 cv
44.469 211.289 44.773 211.582 45.008 211.965 cv
45.238 212.355 45.406 212.828 45.504 213.391 cv
45.602 213.953 45.648 214.602 45.652 215.332 cv
cp
44.445 215.414 mo
44.441 214.973 44.426 214.574 44.398 214.223 cv
44.363 213.871 44.316 213.562 44.258 213.293 cv
44.191 213.023 44.113 212.793 44.016 212.598 cv
43.918 212.406 43.801 212.246 43.664 212.117 cv
43.523 211.992 43.363 211.898 43.191 211.84 cv
43.012 211.785 42.816 211.758 42.602 211.754 cv
42.211 211.758 41.895 211.848 41.656 212.031 cv
41.41 212.215 41.219 212.469 41.082 212.785 cv
40.941 213.105 40.848 213.477 40.797 213.906 cv
40.746 214.336 40.723 214.801 40.723 215.293 cv
40.723 215.957 40.754 216.52 40.824 216.98 cv
40.891 217.449 41 217.828 41.152 218.117 cv
41.297 218.414 41.488 218.625 41.719 218.754 cv
41.949 218.891 42.23 218.957 42.563 218.953 cv
42.816 218.957 43.039 218.918 43.234 218.832 cv
43.426 218.754 43.594 218.633 43.734 218.477 cv
43.875 218.324 43.988 218.141 44.082 217.926 cv
44.168 217.711 44.242 217.473 44.301 217.211 cv
44.352 216.953 44.391 216.672 44.414 216.367 cv
44.434 216.062 44.441 215.746 44.445 215.414 cv
cp
f
24.859 160.398 mo
46.144 160.398 li
46.144 177.488 li
24.859 177.488 li
cp
0 0 0 0 cmyk
ef
31.219 173.297 mo
31.215 173.387 31.207 173.457 31.195 173.516 cv
31.18 173.578 31.16 173.629 31.141 173.66 cv
31.117 173.699 31.094 173.723 31.063 173.738 cv
31.031 173.754 31 173.762 30.973 173.762 cv
26.336 173.762 li
26.301 173.762 26.273 173.754 26.246 173.738 cv
26.219 173.723 26.191 173.699 26.168 173.66 cv
26.141 173.629 26.121 173.578 26.109 173.516 cv
26.094 173.457 26.086 173.387 26.09 173.297 cv
26.086 173.219 26.094 173.145 26.109 173.082 cv
26.121 173.023 26.137 172.977 26.16 172.937 cv
26.176 172.902 26.203 172.871 26.234 172.848 cv
26.266 172.828 26.297 172.82 26.336 172.816 cv
28.188 172.816 li
28.188 166.07 li
26.473 167.09 li
26.383 167.141 26.313 167.168 26.266 167.176 cv
26.211 167.184 26.168 167.176 26.137 167.145 cv
26.102 167.117 26.082 167.066 26.07 166.996 cv
26.059 166.93 26.051 166.844 26.055 166.734 cv
26.051 166.66 26.055 166.594 26.066 166.535 cv
26.07 166.484 26.082 166.437 26.098 166.398 cv
26.109 166.363 26.129 166.332 26.152 166.305 cv
26.176 166.277 26.207 166.25 26.254 166.223 cv
28.297 164.91 li
28.313 164.898 28.332 164.887 28.363 164.879 cv
28.387 164.871 28.422 164.863 28.469 164.852 cv
28.508 164.844 28.559 164.836 28.613 164.832 cv
28.668 164.832 28.734 164.832 28.82 164.828 cv
28.926 164.832 29.02 164.836 29.094 164.844 cv
29.164 164.852 29.219 164.867 29.266 164.883 cv
29.305 164.902 29.332 164.922 29.348 164.945 cv
29.355 164.973 29.363 164.996 29.367 165.02 cv
29.367 172.816 li
30.973 172.816 li
31.008 172.82 31.043 172.828 31.074 172.848 cv
31.105 172.871 31.129 172.902 31.152 172.937 cv
31.168 172.977 31.184 173.023 31.199 173.082 cv
31.207 173.145 31.215 173.219 31.219 173.297 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.41 165.398 mo
38.406 165.484 38.402 165.559 38.398 165.621 cv
38.391 165.691 38.383 165.754 38.371 165.812 cv
38.359 165.879 38.344 165.937 38.324 165.992 cv
38.301 166.051 38.277 166.113 38.254 166.172 cv
35.059 173.535 li
35.031 173.594 35.004 173.637 34.973 173.668 cv
34.938 173.703 34.895 173.73 34.84 173.75 cv
34.785 173.77 34.715 173.781 34.637 173.793 cv
34.551 173.797 34.453 173.801 34.336 173.805 cv
34.18 173.801 34.059 173.793 33.973 173.781 cv
33.887 173.766 33.824 173.75 33.785 173.719 cv
33.746 173.691 33.727 173.652 33.734 173.609 cv
33.734 173.566 33.75 173.516 33.781 173.453 cv
37.141 165.926 li
32.883 165.926 li
32.797 165.93 32.73 165.883 32.688 165.789 cv
32.645 165.699 32.625 165.57 32.625 165.406 cv
32.625 165.32 32.629 165.246 32.641 165.18 cv
32.652 165.117 32.668 165.062 32.691 165.02 cv
32.711 164.977 32.738 164.945 32.773 164.922 cv
32.805 164.902 32.844 164.891 32.883 164.891 cv
38.055 164.891 li
38.113 164.891 38.168 164.898 38.219 164.914 cv
38.266 164.93 38.301 164.957 38.328 164.996 cv
38.352 165.035 38.371 165.09 38.387 165.152 cv
38.398 165.219 38.406 165.301 38.41 165.398 cv
cp
f
45.316 170.91 mo
45.316 171.387 45.234 171.809 45.074 172.18 cv
44.914 172.551 44.688 172.863 44.398 173.117 cv
44.102 173.371 43.754 173.566 43.352 173.695 cv
42.945 173.828 42.496 173.891 42.004 173.891 cv
41.727 173.891 41.465 173.871 41.223 173.832 cv
40.973 173.793 40.754 173.746 40.566 173.691 cv
40.371 173.637 40.215 173.582 40.09 173.523 cv
39.965 173.473 39.887 173.43 39.855 173.395 cv
39.82 173.363 39.797 173.332 39.785 173.305 cv
39.77 173.277 39.754 173.246 39.746 173.203 cv
39.73 173.168 39.723 173.117 39.723 173.055 cv
39.715 172.996 39.715 172.926 39.715 172.844 cv
39.715 172.77 39.719 172.699 39.727 172.637 cv
39.734 172.574 39.746 172.523 39.766 172.484 cv
39.781 172.445 39.801 172.418 39.828 172.398 cv
39.852 172.383 39.883 172.375 39.914 172.371 cv
39.961 172.375 40.031 172.402 40.125 172.457 cv
40.219 172.516 40.348 172.578 40.512 172.645 cv
40.676 172.711 40.875 172.773 41.117 172.832 cv
41.352 172.891 41.637 172.918 41.973 172.918 cv
42.273 172.918 42.555 172.883 42.813 172.809 cv
43.066 172.738 43.289 172.625 43.477 172.469 cv
43.66 172.316 43.805 172.121 43.91 171.883 cv
44.016 171.648 44.066 171.359 44.07 171.02 cv
44.066 170.738 44.023 170.488 43.934 170.27 cv
43.844 170.051 43.707 169.871 43.523 169.727 cv
43.336 169.586 43.102 169.48 42.82 169.406 cv
42.535 169.336 42.195 169.297 41.809 169.297 cv
41.523 169.297 41.285 169.312 41.086 169.34 cv
40.883 169.371 40.695 169.387 40.523 169.383 cv
40.395 169.387 40.301 169.355 40.25 169.293 cv
40.191 169.234 40.164 169.121 40.168 168.949 cv
40.168 165.336 li
40.164 165.187 40.199 165.078 40.273 165 cv
40.34 164.93 40.441 164.891 40.578 164.891 cv
44.508 164.891 li
44.543 164.891 44.578 164.902 44.613 164.922 cv
44.645 164.945 44.672 164.977 44.699 165.016 cv
44.719 165.059 44.734 165.109 44.75 165.172 cv
44.758 165.238 44.766 165.316 44.77 165.398 cv
44.766 165.566 44.742 165.691 44.703 165.781 cv
44.656 165.875 44.598 165.922 44.52 165.918 cv
41.348 165.918 li
41.348 168.406 li
41.5 168.387 41.656 168.375 41.82 168.367 cv
41.977 168.363 42.164 168.359 42.379 168.359 cv
42.863 168.359 43.289 168.422 43.656 168.543 cv
44.02 168.664 44.324 168.836 44.574 169.055 cv
44.816 169.281 45.004 169.547 45.129 169.859 cv
45.254 170.176 45.316 170.527 45.316 170.91 cv
cp
f
24.859 114.371 mo
46.144 114.371 li
46.144 131.461 li
24.859 131.461 li
cp
0 0 0 0 cmyk
ef
31.199 127.223 mo
31.195 127.309 31.191 127.383 31.18 127.445 cv
31.168 127.512 31.152 127.566 31.133 127.605 cv
31.109 127.652 31.082 127.684 31.051 127.699 cv
31.016 127.723 30.977 127.73 30.938 127.73 cv
26.035 127.73 li
25.973 127.73 25.914 127.723 25.867 127.707 cv
25.816 127.691 25.777 127.668 25.742 127.629 cv
25.707 127.598 25.68 127.543 25.668 127.473 cv
25.648 127.402 25.641 127.316 25.645 127.215 cv
25.641 127.125 25.645 127.047 25.652 126.977 cv
25.656 126.91 25.672 126.852 25.699 126.797 cv
25.723 126.746 25.754 126.691 25.789 126.637 cv
25.824 126.586 25.867 126.531 25.926 126.469 cv
27.699 124.645 li
28.109 124.227 28.438 123.852 28.688 123.516 cv
28.934 123.187 29.125 122.883 29.258 122.605 cv
29.391 122.332 29.477 122.082 29.523 121.855 cv
29.563 121.633 29.586 121.422 29.586 121.227 cv
29.586 121.031 29.551 120.848 29.484 120.668 cv
29.418 120.496 29.324 120.34 29.199 120.203 cv
29.074 120.074 28.918 119.969 28.73 119.887 cv
28.543 119.812 28.324 119.773 28.078 119.77 cv
27.789 119.773 27.531 119.812 27.305 119.887 cv
27.074 119.969 26.875 120.055 26.703 120.141 cv
26.531 120.234 26.387 120.316 26.27 120.395 cv
26.152 120.473 26.066 120.512 26.016 120.512 cv
25.98 120.512 25.949 120.504 25.926 120.484 cv
25.895 120.469 25.875 120.437 25.859 120.395 cv
25.844 120.355 25.828 120.301 25.82 120.23 cv
25.809 120.164 25.805 120.082 25.809 119.984 cv
25.805 119.918 25.809 119.859 25.816 119.809 cv
25.82 119.758 25.828 119.715 25.84 119.676 cv
25.848 119.641 25.863 119.605 25.883 119.574 cv
25.902 119.543 25.938 119.504 25.996 119.453 cv
26.047 119.406 26.141 119.34 26.277 119.258 cv
26.41 119.176 26.582 119.098 26.785 119.016 cv
26.988 118.937 27.211 118.867 27.457 118.812 cv
27.699 118.758 27.957 118.73 28.23 118.73 cv
28.656 118.73 29.031 118.793 29.355 118.914 cv
29.676 119.035 29.941 119.199 30.156 119.41 cv
30.367 119.621 30.527 119.867 30.633 120.141 cv
30.738 120.422 30.793 120.719 30.793 121.031 cv
30.793 121.32 30.766 121.602 30.715 121.879 cv
30.664 122.164 30.559 122.469 30.398 122.793 cv
30.234 123.121 30 123.484 29.695 123.883 cv
29.387 124.285 28.98 124.746 28.477 125.262 cv
27.07 126.73 li
30.93 126.73 li
30.961 126.734 30.996 126.746 31.035 126.762 cv
31.066 126.785 31.098 126.816 31.125 126.855 cv
31.148 126.898 31.168 126.949 31.18 127.008 cv
31.191 127.074 31.195 127.145 31.199 127.223 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.574 123.273 mo
38.57 123.957 38.52 124.578 38.414 125.141 cv
38.305 125.703 38.125 126.187 37.879 126.59 cv
37.625 126.996 37.297 127.309 36.898 127.527 cv
36.492 127.75 36 127.859 35.414 127.859 cv
34.855 127.859 34.383 127.762 34.004 127.562 cv
33.621 127.367 33.316 127.074 33.082 126.687 cv
32.848 126.301 32.68 125.828 32.586 125.262 cv
32.484 124.699 32.438 124.051 32.438 123.316 cv
32.438 122.645 32.492 122.023 32.602 121.457 cv
32.711 120.895 32.887 120.41 33.137 120.004 cv
33.379 119.602 33.703 119.289 34.109 119.062 cv
34.508 118.844 35.004 118.73 35.594 118.73 cv
36.152 118.73 36.625 118.832 37.008 119.027 cv
37.391 119.23 37.695 119.523 37.93 119.906 cv
38.16 120.297 38.328 120.77 38.426 121.332 cv
38.523 121.895 38.57 122.543 38.574 123.273 cv
cp
37.367 123.355 mo
37.363 122.914 37.348 122.516 37.32 122.164 cv
37.285 121.812 37.238 121.504 37.18 121.234 cv
37.113 120.965 37.035 120.734 36.938 120.539 cv
36.84 120.348 36.723 120.187 36.586 120.059 cv
36.445 119.934 36.285 119.84 36.113 119.781 cv
35.934 119.727 35.738 119.699 35.523 119.695 cv
35.133 119.699 34.816 119.789 34.578 119.973 cv
34.332 120.156 34.141 120.41 34.004 120.727 cv
33.863 121.047 33.77 121.418 33.719 121.848 cv
33.668 122.277 33.645 122.742 33.645 123.234 cv
33.645 123.898 33.676 124.461 33.746 124.922 cv
33.813 125.391 33.922 125.77 34.074 126.059 cv
34.219 126.355 34.41 126.566 34.641 126.695 cv
34.871 126.832 35.152 126.898 35.484 126.895 cv
35.738 126.898 35.961 126.859 36.156 126.773 cv
36.348 126.695 36.516 126.574 36.656 126.418 cv
36.797 126.266 36.91 126.082 37.004 125.867 cv
37.09 125.652 37.164 125.414 37.223 125.152 cv
37.273 124.895 37.313 124.613 37.336 124.309 cv
37.355 124.004 37.363 123.687 37.367 123.355 cv
cp
f
45.652 123.273 mo
45.648 123.957 45.598 124.578 45.492 125.141 cv
45.383 125.703 45.203 126.187 44.957 126.59 cv
44.703 126.996 44.375 127.309 43.977 127.527 cv
43.57 127.75 43.078 127.859 42.492 127.859 cv
41.934 127.859 41.461 127.762 41.082 127.562 cv
40.699 127.367 40.395 127.074 40.16 126.687 cv
39.926 126.301 39.758 125.828 39.664 125.262 cv
39.563 124.699 39.516 124.051 39.516 123.316 cv
39.516 122.645 39.57 122.023 39.68 121.457 cv
39.789 120.895 39.965 120.41 40.215 120.004 cv
40.457 119.602 40.781 119.289 41.188 119.062 cv
41.586 118.844 42.082 118.73 42.672 118.73 cv
43.23 118.73 43.703 118.832 44.086 119.027 cv
44.469 119.23 44.773 119.523 45.008 119.906 cv
45.238 120.297 45.406 120.77 45.504 121.332 cv
45.602 121.895 45.648 122.543 45.652 123.273 cv
cp
44.445 123.355 mo
44.441 122.914 44.426 122.516 44.398 122.164 cv
44.363 121.812 44.316 121.504 44.258 121.234 cv
44.191 120.965 44.113 120.734 44.016 120.539 cv
43.918 120.348 43.801 120.187 43.664 120.059 cv
43.523 119.934 43.363 119.84 43.191 119.781 cv
43.012 119.727 42.816 119.699 42.602 119.695 cv
42.211 119.699 41.895 119.789 41.656 119.973 cv
41.41 120.156 41.219 120.41 41.082 120.727 cv
40.941 121.047 40.848 121.418 40.797 121.848 cv
40.746 122.277 40.723 122.742 40.723 123.234 cv
40.723 123.898 40.754 124.461 40.824 124.922 cv
40.891 125.391 41 125.77 41.152 126.059 cv
41.297 126.355 41.488 126.566 41.719 126.695 cv
41.949 126.832 42.23 126.898 42.563 126.895 cv
42.816 126.898 43.039 126.859 43.234 126.773 cv
43.426 126.695 43.594 126.574 43.734 126.418 cv
43.875 126.266 43.988 126.082 44.082 125.867 cv
44.168 125.652 44.242 125.414 44.301 125.152 cv
44.352 124.895 44.391 124.613 44.414 124.309 cv
44.434 124.004 44.441 123.687 44.445 123.355 cv
cp
f
24.859 68.34 mo
46.144 68.34 li
46.144 85.43 li
24.859 85.43 li
cp
0 0 0 0 cmyk
ef
31.199 81.164 mo
31.195 81.25 31.191 81.324 31.18 81.387 cv
31.168 81.453 31.152 81.508 31.133 81.547 cv
31.109 81.594 31.082 81.625 31.051 81.641 cv
31.016 81.664 30.977 81.672 30.938 81.672 cv
26.035 81.672 li
25.973 81.672 25.914 81.664 25.867 81.648 cv
25.816 81.633 25.777 81.609 25.742 81.57 cv
25.707 81.539 25.68 81.484 25.668 81.414 cv
25.648 81.344 25.641 81.258 25.645 81.156 cv
25.641 81.066 25.645 80.988 25.652 80.918 cv
25.656 80.852 25.672 80.793 25.699 80.738 cv
25.723 80.687 25.754 80.633 25.789 80.578 cv
25.824 80.527 25.867 80.473 25.926 80.41 cv
27.699 78.586 li
28.109 78.168 28.438 77.793 28.688 77.457 cv
28.934 77.129 29.125 76.824 29.258 76.547 cv
29.391 76.273 29.477 76.023 29.523 75.797 cv
29.563 75.574 29.586 75.363 29.586 75.168 cv
29.586 74.973 29.551 74.789 29.484 74.609 cv
29.418 74.437 29.324 74.281 29.199 74.145 cv
29.074 74.016 28.918 73.91 28.73 73.828 cv
28.543 73.754 28.324 73.715 28.078 73.711 cv
27.789 73.715 27.531 73.754 27.305 73.828 cv
27.074 73.91 26.875 73.996 26.703 74.082 cv
26.531 74.176 26.387 74.258 26.27 74.336 cv
26.152 74.414 26.066 74.453 26.016 74.453 cv
25.98 74.453 25.949 74.445 25.926 74.426 cv
25.895 74.41 25.875 74.379 25.859 74.336 cv
25.844 74.297 25.828 74.242 25.82 74.172 cv
25.809 74.105 25.805 74.023 25.809 73.926 cv
25.805 73.859 25.809 73.801 25.816 73.75 cv
25.82 73.699 25.828 73.656 25.84 73.617 cv
25.848 73.582 25.863 73.547 25.883 73.516 cv
25.902 73.484 25.938 73.445 25.996 73.395 cv
26.047 73.348 26.141 73.281 26.277 73.199 cv
26.41 73.117 26.582 73.039 26.785 72.957 cv
26.988 72.879 27.211 72.809 27.457 72.754 cv
27.699 72.699 27.957 72.672 28.23 72.672 cv
28.656 72.672 29.031 72.734 29.355 72.855 cv
29.676 72.977 29.941 73.141 30.156 73.352 cv
30.367 73.562 30.527 73.809 30.633 74.082 cv
30.738 74.363 30.793 74.66 30.793 74.973 cv
30.793 75.262 30.766 75.543 30.715 75.82 cv
30.664 76.105 30.559 76.41 30.398 76.734 cv
30.234 77.062 30 77.426 29.695 77.824 cv
29.387 78.227 28.98 78.687 28.477 79.203 cv
27.07 80.672 li
30.93 80.672 li
30.961 80.676 30.996 80.687 31.035 80.703 cv
31.066 80.727 31.098 80.758 31.125 80.797 cv
31.148 80.84 31.168 80.891 31.18 80.949 cv
31.191 81.016 31.195 81.086 31.199 81.164 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.281 81.164 mo
38.277 81.25 38.273 81.324 38.262 81.387 cv
38.25 81.453 38.234 81.508 38.215 81.547 cv
38.191 81.594 38.164 81.625 38.133 81.641 cv
38.098 81.664 38.059 81.672 38.02 81.672 cv
33.117 81.672 li
33.055 81.672 32.996 81.664 32.949 81.648 cv
32.898 81.633 32.859 81.609 32.824 81.57 cv
32.789 81.539 32.762 81.484 32.75 81.414 cv
32.73 81.344 32.723 81.258 32.727 81.156 cv
32.723 81.066 32.727 80.988 32.734 80.918 cv
32.738 80.852 32.754 80.793 32.781 80.738 cv
32.805 80.687 32.836 80.633 32.871 80.578 cv
32.906 80.527 32.949 80.473 33.008 80.41 cv
34.781 78.586 li
35.191 78.168 35.52 77.793 35.77 77.457 cv
36.016 77.129 36.207 76.824 36.34 76.547 cv
36.473 76.273 36.559 76.023 36.605 75.797 cv
36.645 75.574 36.668 75.363 36.668 75.168 cv
36.668 74.973 36.633 74.789 36.566 74.609 cv
36.5 74.437 36.406 74.281 36.281 74.145 cv
36.156 74.016 36 73.91 35.813 73.828 cv
35.625 73.754 35.406 73.715 35.16 73.711 cv
34.871 73.715 34.613 73.754 34.387 73.828 cv
34.156 73.91 33.957 73.996 33.785 74.082 cv
33.613 74.176 33.469 74.258 33.352 74.336 cv
33.234 74.414 33.148 74.453 33.098 74.453 cv
33.063 74.453 33.031 74.445 33.008 74.426 cv
32.977 74.41 32.957 74.379 32.941 74.336 cv
32.926 74.297 32.91 74.242 32.902 74.172 cv
32.891 74.105 32.887 74.023 32.891 73.926 cv
32.887 73.859 32.891 73.801 32.898 73.75 cv
32.902 73.699 32.91 73.656 32.922 73.617 cv
32.93 73.582 32.945 73.547 32.965 73.516 cv
32.984 73.484 33.02 73.445 33.078 73.395 cv
33.129 73.348 33.223 73.281 33.359 73.199 cv
33.492 73.117 33.664 73.039 33.867 72.957 cv
34.07 72.879 34.293 72.809 34.539 72.754 cv
34.781 72.699 35.039 72.672 35.313 72.672 cv
35.738 72.672 36.113 72.734 36.438 72.855 cv
36.758 72.977 37.023 73.141 37.238 73.352 cv
37.449 73.562 37.609 73.809 37.715 74.082 cv
37.82 74.363 37.875 74.66 37.875 74.973 cv
37.875 75.262 37.848 75.543 37.797 75.82 cv
37.746 76.105 37.641 76.41 37.48 76.734 cv
37.316 77.062 37.082 77.426 36.777 77.824 cv
36.469 78.227 36.063 78.687 35.559 79.203 cv
34.152 80.672 li
38.012 80.672 li
38.043 80.676 38.078 80.687 38.117 80.703 cv
38.148 80.727 38.18 80.758 38.207 80.797 cv
38.23 80.84 38.25 80.891 38.262 80.949 cv
38.273 81.016 38.277 81.086 38.281 81.164 cv
cp
f
45.316 78.82 mo
45.316 79.297 45.234 79.719 45.074 80.09 cv
44.914 80.461 44.688 80.773 44.398 81.027 cv
44.102 81.281 43.754 81.477 43.352 81.605 cv
42.945 81.738 42.496 81.801 42.004 81.801 cv
41.727 81.801 41.465 81.781 41.223 81.742 cv
40.973 81.703 40.754 81.656 40.566 81.602 cv
40.371 81.547 40.215 81.492 40.09 81.434 cv
39.965 81.383 39.887 81.34 39.855 81.305 cv
39.82 81.273 39.797 81.242 39.785 81.215 cv
39.77 81.187 39.754 81.156 39.746 81.113 cv
39.73 81.078 39.723 81.027 39.723 80.965 cv
39.715 80.906 39.715 80.836 39.715 80.754 cv
39.715 80.68 39.719 80.609 39.727 80.547 cv
39.734 80.484 39.746 80.434 39.766 80.395 cv
39.781 80.355 39.801 80.328 39.828 80.309 cv
39.852 80.293 39.883 80.285 39.914 80.281 cv
39.961 80.285 40.031 80.312 40.125 80.367 cv
40.219 80.426 40.348 80.488 40.512 80.555 cv
40.676 80.621 40.875 80.684 41.117 80.742 cv
41.352 80.801 41.637 80.828 41.973 80.828 cv
42.273 80.828 42.555 80.793 42.813 80.719 cv
43.066 80.648 43.289 80.535 43.477 80.379 cv
43.66 80.227 43.805 80.031 43.91 79.793 cv
44.016 79.559 44.066 79.27 44.07 78.93 cv
44.066 78.648 44.023 78.398 43.934 78.18 cv
43.844 77.961 43.707 77.781 43.523 77.637 cv
43.336 77.496 43.102 77.391 42.82 77.316 cv
42.535 77.246 42.195 77.207 41.809 77.207 cv
41.523 77.207 41.285 77.223 41.086 77.25 cv
40.883 77.281 40.695 77.297 40.523 77.293 cv
40.395 77.297 40.301 77.266 40.25 77.203 cv
40.191 77.145 40.164 77.031 40.168 76.859 cv
40.168 73.246 li
40.164 73.098 40.199 72.988 40.273 72.91 cv
40.34 72.84 40.441 72.801 40.578 72.801 cv
44.508 72.801 li
44.543 72.801 44.578 72.812 44.613 72.832 cv
44.645 72.855 44.672 72.887 44.699 72.926 cv
44.719 72.969 44.734 73.02 44.75 73.082 cv
44.758 73.148 44.766 73.227 44.77 73.309 cv
44.766 73.477 44.742 73.602 44.703 73.691 cv
44.656 73.785 44.598 73.832 44.52 73.828 cv
41.348 73.828 li
41.348 76.316 li
41.5 76.297 41.656 76.285 41.82 76.277 cv
41.977 76.273 42.164 76.27 42.379 76.27 cv
42.863 76.27 43.289 76.332 43.656 76.453 cv
44.02 76.574 44.324 76.746 44.574 76.965 cv
44.816 77.191 45.004 77.457 45.129 77.77 cv
45.254 78.086 45.316 78.437 45.316 78.82 cv
cp
f
24.859 22.309 mo
46.144 22.309 li
46.144 39.399 li
24.859 39.399 li
cp
0 0 0 0 cmyk
ef
31.199 35.133 mo
31.195 35.219 31.191 35.293 31.18 35.355 cv
31.168 35.422 31.152 35.477 31.133 35.516 cv
31.109 35.562 31.082 35.594 31.051 35.609 cv
31.016 35.633 30.977 35.641 30.938 35.641 cv
26.035 35.641 li
25.973 35.641 25.914 35.633 25.867 35.617 cv
25.816 35.602 25.777 35.578 25.742 35.539 cv
25.707 35.508 25.68 35.453 25.668 35.383 cv
25.648 35.312 25.641 35.227 25.645 35.125 cv
25.641 35.035 25.645 34.957 25.652 34.887 cv
25.656 34.82 25.672 34.762 25.699 34.707 cv
25.723 34.656 25.754 34.602 25.789 34.547 cv
25.824 34.496 25.867 34.441 25.926 34.379 cv
27.699 32.555 li
28.109 32.137 28.438 31.762 28.688 31.426 cv
28.934 31.098 29.125 30.793 29.258 30.516 cv
29.391 30.242 29.477 29.992 29.523 29.766 cv
29.563 29.543 29.586 29.332 29.586 29.137 cv
29.586 28.941 29.551 28.758 29.484 28.578 cv
29.418 28.406 29.324 28.25 29.199 28.113 cv
29.074 27.984 28.918 27.879 28.73 27.797 cv
28.543 27.723 28.324 27.684 28.078 27.68 cv
27.789 27.684 27.531 27.723 27.305 27.797 cv
27.074 27.879 26.875 27.965 26.703 28.051 cv
26.531 28.145 26.387 28.227 26.27 28.305 cv
26.152 28.383 26.066 28.422 26.016 28.422 cv
25.98 28.422 25.949 28.414 25.926 28.395 cv
25.895 28.379 25.875 28.348 25.859 28.305 cv
25.844 28.266 25.828 28.211 25.82 28.141 cv
25.809 28.074 25.805 27.992 25.809 27.895 cv
25.805 27.828 25.809 27.77 25.816 27.719 cv
25.82 27.668 25.828 27.625 25.84 27.586 cv
25.848 27.551 25.863 27.516 25.883 27.484 cv
25.902 27.453 25.938 27.414 25.996 27.363 cv
26.047 27.316 26.141 27.25 26.277 27.168 cv
26.41 27.086 26.582 27.008 26.785 26.926 cv
26.988 26.848 27.211 26.777 27.457 26.723 cv
27.699 26.668 27.957 26.641 28.23 26.641 cv
28.656 26.641 29.031 26.703 29.355 26.824 cv
29.676 26.945 29.941 27.109 30.156 27.32 cv
30.367 27.531 30.527 27.777 30.633 28.051 cv
30.738 28.332 30.793 28.629 30.793 28.941 cv
30.793 29.23 30.766 29.512 30.715 29.789 cv
30.664 30.074 30.559 30.379 30.398 30.703 cv
30.234 31.031 30 31.395 29.695 31.793 cv
29.387 32.195 28.98 32.656 28.477 33.172 cv
27.07 34.641 li
30.93 34.641 li
30.961 34.645 30.996 34.656 31.035 34.672 cv
31.066 34.695 31.098 34.727 31.125 34.766 cv
31.148 34.809 31.168 34.859 31.18 34.918 cv
31.191 34.984 31.195 35.055 31.199 35.133 cv
cp
.629114 .553033 .543389 .289647 cmyk
f
38.238 32.789 mo
38.238 33.266 38.156 33.687 37.996 34.059 cv
37.836 34.43 37.609 34.742 37.32 34.996 cv
37.023 35.25 36.676 35.445 36.273 35.574 cv
35.867 35.707 35.418 35.77 34.926 35.77 cv
34.648 35.77 34.387 35.75 34.145 35.711 cv
33.895 35.672 33.676 35.625 33.488 35.57 cv
33.293 35.516 33.137 35.461 33.012 35.402 cv
32.887 35.352 32.809 35.309 32.777 35.273 cv
32.742 35.242 32.719 35.211 32.707 35.184 cv
32.691 35.156 32.676 35.125 32.668 35.082 cv
32.652 35.047 32.645 34.996 32.645 34.934 cv
32.637 34.875 32.637 34.805 32.637 34.723 cv
32.637 34.648 32.641 34.578 32.648 34.516 cv
32.656 34.453 32.668 34.402 32.688 34.363 cv
32.703 34.324 32.723 34.297 32.75 34.277 cv
32.773 34.262 32.805 34.254 32.836 34.25 cv
32.883 34.254 32.953 34.281 33.047 34.336 cv
33.141 34.395 33.27 34.457 33.434 34.523 cv
33.598 34.59 33.797 34.652 34.039 34.711 cv
34.273 34.77 34.559 34.797 34.895 34.797 cv
35.195 34.797 35.477 34.762 35.734 34.687 cv
35.988 34.617 36.211 34.504 36.398 34.348 cv
36.582 34.195 36.727 34 36.832 33.762 cv
36.938 33.527 36.988 33.238 36.992 32.898 cv
36.988 32.617 36.945 32.367 36.855 32.148 cv
36.766 31.93 36.629 31.75 36.445 31.605 cv
36.258 31.465 36.023 31.359 35.742 31.285 cv
35.457 31.215 35.117 31.176 34.73 31.176 cv
34.445 31.176 34.207 31.191 34.008 31.219 cv
33.805 31.25 33.617 31.266 33.445 31.262 cv
33.316 31.266 33.223 31.234 33.172 31.172 cv
33.113 31.113 33.086 31 33.09 30.828 cv
33.09 27.215 li
33.086 27.066 33.121 26.957 33.195 26.879 cv
33.262 26.809 33.363 26.77 33.5 26.77 cv
37.43 26.77 li
37.465 26.77 37.5 26.781 37.535 26.801 cv
37.566 26.824 37.594 26.855 37.621 26.895 cv
37.641 26.937 37.656 26.988 37.672 27.051 cv
37.68 27.117 37.688 27.195 37.691 27.277 cv
37.688 27.445 37.664 27.57 37.625 27.66 cv
37.578 27.754 37.52 27.801 37.441 27.797 cv
34.27 27.797 li
34.27 30.285 li
34.422 30.266 34.578 30.254 34.742 30.246 cv
34.898 30.242 35.086 30.238 35.301 30.238 cv
35.785 30.238 36.211 30.301 36.578 30.422 cv
36.941 30.543 37.246 30.715 37.496 30.934 cv
37.738 31.16 37.926 31.426 38.051 31.738 cv
38.176 32.055 38.238 32.406 38.238 32.789 cv
cp
f
45.652 31.184 mo
45.648 31.867 45.598 32.488 45.492 33.051 cv
45.383 33.613 45.203 34.098 44.957 34.5 cv
44.703 34.906 44.375 35.219 43.977 35.437 cv
43.57 35.66 43.078 35.77 42.492 35.77 cv
41.934 35.77 41.461 35.672 41.082 35.473 cv
40.699 35.277 40.395 34.984 40.16 34.598 cv
39.926 34.211 39.758 33.738 39.664 33.172 cv
39.563 32.609 39.516 31.961 39.516 31.227 cv
39.516 30.555 39.57 29.934 39.68 29.367 cv
39.789 28.805 39.965 28.32 40.215 27.914 cv
40.457 27.512 40.781 27.199 41.188 26.973 cv
41.586 26.754 42.082 26.641 42.672 26.641 cv
43.23 26.641 43.703 26.742 44.086 26.937 cv
44.469 27.141 44.773 27.434 45.008 27.816 cv
45.238 28.207 45.406 28.68 45.504 29.242 cv
45.602 29.805 45.648 30.453 45.652 31.184 cv
cp
44.445 31.266 mo
44.441 30.824 44.426 30.426 44.398 30.074 cv
44.363 29.723 44.316 29.414 44.258 29.145 cv
44.191 28.875 44.113 28.645 44.016 28.449 cv
43.918 28.258 43.801 28.098 43.664 27.969 cv
43.523 27.844 43.363 27.75 43.191 27.691 cv
43.012 27.637 42.816 27.609 42.602 27.605 cv
42.211 27.609 41.895 27.699 41.656 27.883 cv
41.41 28.066 41.219 28.32 41.082 28.637 cv
40.941 28.957 40.848 29.328 40.797 29.758 cv
40.746 30.187 40.723 30.652 40.723 31.145 cv
40.723 31.809 40.754 32.371 40.824 32.832 cv
40.891 33.301 41 33.68 41.152 33.969 cv
41.297 34.266 41.488 34.477 41.719 34.605 cv
41.949 34.742 42.23 34.809 42.563 34.805 cv
42.816 34.809 43.039 34.77 43.234 34.684 cv
43.426 34.605 43.594 34.484 43.734 34.328 cv
43.875 34.176 43.988 33.992 44.082 33.777 cv
44.168 33.562 44.242 33.324 44.301 33.062 cv
44.352 32.805 44.391 32.523 44.414 32.219 cv
44.434 31.914 44.441 31.598 44.445 31.266 cv
cp
f
61.965 513.781 mo
61.961 513.871 61.953 513.941 61.941 514 cv
61.926 514.062 61.906 514.113 61.887 514.145 cv
61.863 514.184 61.84 514.207 61.809 514.223 cv
61.777 514.238 61.746 514.246 61.719 514.246 cv
57.082 514.246 li
57.047 514.246 57.02 514.238 56.992 514.223 cv
56.965 514.207 56.938 514.184 56.914 514.145 cv
56.887 514.113 56.867 514.062 56.855 514 cv
56.84 513.941 56.832 513.871 56.836 513.781 cv
56.832 513.703 56.84 513.629 56.855 513.566 cv
56.867 513.508 56.883 513.461 56.906 513.422 cv
56.922 513.387 56.949 513.355 56.98 513.332 cv
57.012 513.312 57.043 513.305 57.082 513.301 cv
58.934 513.301 li
58.934 506.555 li
57.219 507.574 li
57.129 507.625 57.059 507.652 57.012 507.66 cv
56.957 507.668 56.914 507.66 56.883 507.629 cv
56.848 507.602 56.828 507.551 56.816 507.48 cv
56.805 507.414 56.797 507.328 56.801 507.219 cv
56.797 507.145 56.801 507.078 56.813 507.02 cv
56.816 506.969 56.828 506.922 56.844 506.883 cv
56.855 506.848 56.875 506.816 56.898 506.789 cv
56.922 506.762 56.953 506.734 57 506.707 cv
59.043 505.395 li
59.059 505.383 59.078 505.371 59.109 505.363 cv
59.133 505.355 59.168 505.348 59.215 505.336 cv
59.254 505.328 59.305 505.32 59.359 505.316 cv
59.414 505.316 59.48 505.316 59.566 505.312 cv
59.672 505.316 59.766 505.32 59.84 505.328 cv
59.91 505.336 59.965 505.352 60.012 505.367 cv
60.051 505.387 60.078 505.406 60.094 505.43 cv
60.102 505.457 60.109 505.48 60.113 505.504 cv
60.113 513.301 li
61.719 513.301 li
61.754 513.305 61.789 513.312 61.82 513.332 cv
61.852 513.355 61.875 513.387 61.898 513.422 cv
61.914 513.461 61.93 513.508 61.945 513.566 cv
61.953 513.629 61.961 513.703 61.965 513.781 cv
cp
f
139.996 513.738 mo
139.992 513.824 139.988 513.898 139.977 513.961 cv
139.965 514.027 139.949 514.082 139.93 514.121 cv
139.906 514.168 139.879 514.199 139.848 514.215 cv
139.813 514.238 139.773 514.246 139.734 514.246 cv
134.832 514.246 li
134.77 514.246 134.711 514.238 134.664 514.223 cv
134.613 514.207 134.574 514.184 134.539 514.145 cv
134.504 514.113 134.477 514.059 134.465 513.988 cv
134.445 513.918 134.438 513.832 134.441 513.73 cv
134.438 513.641 134.441 513.562 134.449 513.492 cv
134.453 513.426 134.469 513.367 134.496 513.312 cv
134.52 513.262 134.551 513.207 134.586 513.152 cv
134.621 513.102 134.664 513.047 134.723 512.984 cv
136.496 511.16 li
136.906 510.742 137.234 510.367 137.484 510.031 cv
137.73 509.703 137.922 509.398 138.055 509.121 cv
138.188 508.848 138.273 508.598 138.32 508.371 cv
138.359 508.148 138.383 507.937 138.383 507.742 cv
138.383 507.547 138.348 507.363 138.281 507.184 cv
138.215 507.012 138.121 506.855 137.996 506.719 cv
137.871 506.59 137.715 506.484 137.527 506.402 cv
137.34 506.328 137.121 506.289 136.875 506.285 cv
136.586 506.289 136.328 506.328 136.102 506.402 cv
135.871 506.484 135.672 506.57 135.5 506.656 cv
135.328 506.75 135.184 506.832 135.066 506.91 cv
134.949 506.988 134.863 507.027 134.813 507.027 cv
134.777 507.027 134.746 507.02 134.723 507 cv
134.691 506.984 134.672 506.953 134.656 506.91 cv
134.641 506.871 134.625 506.816 134.617 506.746 cv
134.605 506.68 134.602 506.598 134.605 506.5 cv
134.602 506.434 134.605 506.375 134.613 506.324 cv
134.617 506.273 134.625 506.23 134.637 506.191 cv
134.645 506.156 134.66 506.121 134.68 506.09 cv
134.699 506.059 134.734 506.02 134.793 505.969 cv
134.844 505.922 134.938 505.855 135.074 505.773 cv
135.207 505.691 135.379 505.613 135.582 505.531 cv
135.785 505.453 136.008 505.383 136.254 505.328 cv
136.496 505.273 136.754 505.246 137.027 505.246 cv
137.453 505.246 137.828 505.309 138.152 505.43 cv
138.473 505.551 138.738 505.715 138.953 505.926 cv
139.164 506.137 139.324 506.383 139.43 506.656 cv
139.535 506.937 139.59 507.234 139.59 507.547 cv
139.59 507.836 139.563 508.117 139.512 508.395 cv
139.461 508.68 139.355 508.984 139.195 509.309 cv
139.031 509.637 138.797 510 138.492 510.398 cv
138.184 510.801 137.777 511.262 137.273 511.777 cv
135.867 513.246 li
139.727 513.246 li
139.758 513.25 139.793 513.262 139.832 513.277 cv
139.863 513.301 139.895 513.332 139.922 513.371 cv
139.945 513.414 139.965 513.465 139.977 513.523 cv
139.988 513.59 139.992 513.66 139.996 513.738 cv
cp
f
218.441 511.723 mo
218.438 511.875 218.414 511.996 218.371 512.082 cv
218.324 512.172 218.262 512.215 218.18 512.211 cv
217.18 512.211 li
217.18 514.074 li
217.18 514.113 217.168 514.145 217.152 514.168 cv
217.129 514.195 217.098 514.215 217.055 514.234 cv
217.004 514.25 216.941 514.262 216.871 514.273 cv
216.793 514.281 216.699 514.285 216.582 514.289 cv
216.465 514.285 216.367 514.281 216.297 514.273 cv
216.219 514.262 216.16 514.25 216.117 514.234 cv
216.07 514.215 216.039 514.195 216.023 514.168 cv
216.004 514.145 215.996 514.113 216 514.074 cv
216 512.211 li
212.371 512.211 li
212.313 512.215 212.27 512.207 212.234 512.191 cv
212.199 512.18 212.164 512.152 212.137 512.113 cv
212.105 512.078 212.086 512.027 212.074 511.957 cv
212.063 511.891 212.059 511.801 212.059 511.687 cv
212.059 511.605 212.059 511.527 212.066 511.457 cv
212.066 511.387 212.078 511.324 212.094 511.27 cv
212.105 511.215 212.121 511.16 212.148 511.105 cv
212.168 511.051 212.195 510.996 212.23 510.934 cv
215.391 505.547 li
215.41 505.512 215.445 505.48 215.492 505.453 cv
215.535 505.426 215.59 505.402 215.664 505.383 cv
215.73 505.367 215.816 505.355 215.922 505.344 cv
216.023 505.34 216.145 505.336 216.285 505.332 cv
216.434 505.336 216.57 505.34 216.688 505.352 cv
216.801 505.363 216.891 505.379 216.965 505.395 cv
217.031 505.414 217.086 505.437 217.125 505.469 cv
217.16 505.5 217.18 505.535 217.18 505.574 cv
217.18 511.238 li
218.18 511.238 li
218.254 511.242 218.316 511.281 218.367 511.359 cv
218.414 511.441 218.438 511.562 218.441 511.723 cv
cp
216 506.371 mo
215.988 506.371 li
213.137 511.238 li
216 511.238 li
cp
f
296.363 511.375 mo
296.363 511.766 296.301 512.145 296.184 512.504 cv
296.059 512.871 295.875 513.187 295.633 513.461 cv
295.383 513.738 295.07 513.961 294.695 514.125 cv
294.313 514.293 293.867 514.375 293.352 514.375 cv
292.98 514.375 292.652 514.332 292.371 514.238 cv
292.086 514.152 291.84 514.02 291.629 513.848 cv
291.418 513.68 291.242 513.473 291.105 513.227 cv
290.965 512.98 290.852 512.699 290.77 512.383 cv
290.684 512.07 290.625 511.727 290.59 511.348 cv
290.551 510.977 290.531 510.574 290.535 510.141 cv
290.531 509.762 290.551 509.379 290.594 508.988 cv
290.633 508.605 290.707 508.23 290.813 507.863 cv
290.918 507.504 291.063 507.164 291.242 506.848 cv
291.422 506.531 291.648 506.254 291.922 506.02 cv
292.195 505.785 292.52 505.598 292.898 505.457 cv
293.277 505.32 293.719 505.254 294.223 505.25 cv
294.391 505.254 294.563 505.262 294.734 505.281 cv
294.906 505.305 295.066 505.336 295.215 505.367 cv
295.363 505.406 295.484 505.441 295.586 505.48 cv
295.684 505.52 295.75 505.555 295.785 505.578 cv
295.813 505.605 295.836 505.633 295.855 505.66 cv
295.871 505.691 295.887 505.723 295.895 505.758 cv
295.902 505.793 295.906 505.832 295.914 505.875 cv
295.914 505.918 295.918 505.973 295.922 506.035 cv
295.918 506.121 295.918 506.191 295.918 506.246 cv
295.914 506.309 295.902 506.355 295.891 506.391 cv
295.871 506.43 295.852 506.457 295.828 506.473 cv
295.801 506.492 295.77 506.5 295.73 506.5 cv
295.68 506.5 295.609 506.484 295.523 506.453 cv
295.434 506.422 295.328 506.387 295.207 506.344 cv
295.082 506.309 294.934 506.273 294.758 506.238 cv
294.582 506.211 294.379 506.195 294.148 506.191 cv
293.719 506.195 293.352 506.281 293.047 506.453 cv
292.742 506.625 292.492 506.859 292.297 507.152 cv
292.102 507.445 291.957 507.785 291.867 508.168 cv
291.77 508.559 291.715 508.961 291.707 509.379 cv
291.824 509.312 291.961 509.246 292.109 509.176 cv
292.258 509.109 292.418 509.047 292.594 508.988 cv
292.77 508.937 292.957 508.891 293.152 508.855 cv
293.348 508.824 293.559 508.809 293.785 508.805 cv
294.262 508.809 294.664 508.875 294.996 509 cv
295.324 509.133 295.59 509.312 295.797 509.543 cv
295.996 509.773 296.141 510.043 296.23 510.355 cv
296.316 510.668 296.363 511.008 296.363 511.375 cv
cp
295.168 511.484 mo
295.168 511.223 295.141 510.98 295.09 510.762 cv
295.035 510.547 294.945 510.363 294.824 510.207 cv
294.699 510.059 294.535 509.941 294.332 509.859 cv
294.121 509.777 293.867 509.734 293.57 509.734 cv
293.398 509.734 293.23 509.75 293.063 509.781 cv
292.891 509.812 292.727 509.855 292.57 509.902 cv
292.41 509.957 292.262 510.02 292.121 510.09 cv
291.977 510.164 291.844 510.238 291.727 510.316 cv
291.723 510.91 291.762 511.406 291.84 511.801 cv
291.914 512.199 292.023 512.516 292.168 512.754 cv
292.313 512.996 292.492 513.168 292.707 513.27 cv
292.922 513.375 293.172 513.426 293.461 513.422 cv
293.75 513.426 294.004 513.371 294.219 513.258 cv
294.434 513.152 294.609 513.004 294.754 512.816 cv
294.895 512.633 295 512.426 295.066 512.195 cv
295.133 511.965 295.168 511.73 295.168 511.484 cv
cp
f
374.391 511.969 mo
374.391 512.355 374.32 512.699 374.184 512.996 cv
374.047 513.301 373.852 513.551 373.594 513.754 cv
373.336 513.961 373.016 514.117 372.637 514.219 cv
372.254 514.324 371.82 514.375 371.336 514.375 cv
370.875 514.375 370.465 514.328 370.105 514.234 cv
369.742 514.141 369.438 514 369.188 513.809 cv
368.938 513.625 368.746 513.395 368.613 513.117 cv
368.48 512.844 368.414 512.531 368.414 512.176 cv
368.414 511.902 368.457 511.645 368.551 511.41 cv
368.637 511.176 368.77 510.961 368.945 510.766 cv
369.113 510.57 369.324 510.387 369.578 510.211 cv
369.828 510.043 370.113 509.879 370.43 509.723 cv
370.156 509.582 369.914 509.434 369.703 509.273 cv
369.492 509.117 369.313 508.945 369.168 508.758 cv
369.02 508.574 368.91 508.379 368.836 508.168 cv
368.758 507.961 368.719 507.73 368.723 507.48 cv
368.719 507.172 368.773 506.879 368.891 506.605 cv
369 506.336 369.172 506.102 369.398 505.898 cv
369.625 505.699 369.91 505.539 370.262 505.422 cv
370.605 505.305 371.016 505.246 371.484 505.246 cv
371.93 505.246 372.316 505.301 372.645 505.406 cv
372.973 505.516 373.242 505.66 373.453 505.844 cv
373.664 506.031 373.82 506.25 373.926 506.5 cv
374.023 506.75 374.074 507.02 374.078 507.309 cv
374.074 507.543 374.035 507.77 373.965 507.98 cv
373.887 508.199 373.777 508.402 373.629 508.59 cv
373.48 508.785 373.301 508.965 373.09 509.129 cv
372.879 509.301 372.637 509.457 372.363 509.598 cv
372.684 509.762 372.969 509.926 373.227 510.094 cv
373.477 510.262 373.691 510.441 373.867 510.637 cv
374.035 510.832 374.164 511.039 374.258 511.254 cv
374.344 511.473 374.391 511.711 374.391 511.969 cv
cp
372.91 507.418 mo
372.906 507.23 372.875 507.055 372.809 506.898 cv
372.742 506.742 372.645 506.609 372.52 506.5 cv
372.391 506.391 372.23 506.309 372.043 506.25 cv
371.848 506.195 371.633 506.168 371.395 506.164 cv
370.898 506.168 370.523 506.277 370.273 506.5 cv
370.016 506.727 369.891 507.035 369.895 507.418 cv
369.891 507.598 369.922 507.762 369.984 507.914 cv
370.047 508.07 370.141 508.215 370.273 508.352 cv
370.398 508.488 370.563 508.621 370.766 508.75 cv
370.961 508.883 371.199 509.02 371.477 509.16 cv
371.938 508.926 372.293 508.664 372.539 508.371 cv
372.785 508.086 372.906 507.77 372.91 507.418 cv
cp
373.199 512.094 mo
373.195 511.887 373.156 511.695 373.082 511.523 cv
373 511.355 372.883 511.195 372.727 511.043 cv
372.57 510.895 372.371 510.75 372.137 510.609 cv
371.898 510.473 371.629 510.328 371.32 510.176 cv
371.031 510.32 370.777 510.461 370.563 510.602 cv
370.344 510.742 370.164 510.891 370.027 511.039 cv
369.887 511.195 369.781 511.352 369.711 511.516 cv
369.637 511.684 369.602 511.867 369.605 512.066 cv
369.602 512.512 369.754 512.855 370.063 513.094 cv
370.363 513.34 370.816 513.461 371.422 513.457 cv
372.004 513.461 372.449 513.34 372.75 513.09 cv
373.047 512.848 373.195 512.516 373.199 512.094 cv
cp
f
448.727 513.781 mo
448.723 513.871 448.715 513.941 448.703 514 cv
448.688 514.062 448.668 514.113 448.648 514.145 cv
448.625 514.184 448.602 514.207 448.57 514.223 cv
448.539 514.238 448.508 514.246 448.48 514.246 cv
443.844 514.246 li
443.809 514.246 443.781 514.238 443.754 514.223 cv
443.727 514.207 443.699 514.184 443.676 514.145 cv
443.648 514.113 443.629 514.062 443.617 514 cv
443.602 513.941 443.594 513.871 443.598 513.781 cv
443.594 513.703 443.602 513.629 443.617 513.566 cv
443.629 513.508 443.645 513.461 443.668 513.422 cv
443.684 513.387 443.711 513.355 443.742 513.332 cv
443.773 513.312 443.805 513.305 443.844 513.301 cv
445.695 513.301 li
445.695 506.555 li
443.98 507.574 li
443.891 507.625 443.82 507.652 443.773 507.66 cv
443.719 507.668 443.676 507.66 443.645 507.629 cv
443.609 507.602 443.59 507.551 443.578 507.48 cv
443.566 507.414 443.559 507.328 443.563 507.219 cv
443.559 507.145 443.563 507.078 443.574 507.02 cv
443.578 506.969 443.59 506.922 443.605 506.883 cv
443.617 506.848 443.637 506.816 443.66 506.789 cv
443.684 506.762 443.715 506.734 443.762 506.707 cv
445.805 505.395 li
445.82 505.383 445.84 505.371 445.871 505.363 cv
445.895 505.355 445.93 505.348 445.977 505.336 cv
446.016 505.328 446.066 505.32 446.121 505.316 cv
446.176 505.316 446.242 505.316 446.328 505.312 cv
446.434 505.316 446.527 505.32 446.602 505.328 cv
446.672 505.336 446.727 505.352 446.773 505.367 cv
446.813 505.387 446.84 505.406 446.855 505.43 cv
446.863 505.457 446.871 505.48 446.875 505.504 cv
446.875 513.301 li
448.48 513.301 li
448.516 513.305 448.551 513.312 448.582 513.332 cv
448.613 513.355 448.637 513.387 448.66 513.422 cv
448.676 513.461 448.691 513.508 448.707 513.566 cv
448.715 513.629 448.723 513.703 448.727 513.781 cv
cp
f
456.078 509.789 mo
456.074 510.473 456.023 511.094 455.918 511.656 cv
455.809 512.219 455.629 512.703 455.383 513.105 cv
455.129 513.512 454.801 513.824 454.402 514.043 cv
453.996 514.266 453.504 514.375 452.918 514.375 cv
452.359 514.375 451.887 514.277 451.508 514.078 cv
451.125 513.883 450.82 513.59 450.586 513.203 cv
450.352 512.816 450.184 512.344 450.09 511.777 cv
449.988 511.215 449.941 510.566 449.941 509.832 cv
449.941 509.16 449.996 508.539 450.105 507.973 cv
450.215 507.41 450.391 506.926 450.641 506.52 cv
450.883 506.117 451.207 505.805 451.613 505.578 cv
452.012 505.359 452.508 505.246 453.098 505.246 cv
453.656 505.246 454.129 505.348 454.512 505.543 cv
454.895 505.746 455.199 506.039 455.434 506.422 cv
455.664 506.812 455.832 507.285 455.93 507.848 cv
456.027 508.41 456.074 509.059 456.078 509.789 cv
cp
454.871 509.871 mo
454.867 509.43 454.852 509.031 454.824 508.68 cv
454.789 508.328 454.742 508.02 454.684 507.75 cv
454.617 507.48 454.539 507.25 454.441 507.055 cv
454.344 506.863 454.227 506.703 454.09 506.574 cv
453.949 506.449 453.789 506.355 453.617 506.297 cv
453.438 506.242 453.242 506.215 453.027 506.211 cv
452.637 506.215 452.32 506.305 452.082 506.488 cv
451.836 506.672 451.645 506.926 451.508 507.242 cv
451.367 507.562 451.273 507.934 451.223 508.363 cv
451.172 508.793 451.148 509.258 451.148 509.75 cv
451.148 510.414 451.18 510.977 451.25 511.437 cv
451.316 511.906 451.426 512.285 451.578 512.574 cv
451.723 512.871 451.914 513.082 452.145 513.211 cv
452.375 513.348 452.656 513.414 452.988 513.41 cv
453.242 513.414 453.465 513.375 453.66 513.289 cv
453.852 513.211 454.02 513.09 454.16 512.934 cv
454.301 512.781 454.414 512.598 454.508 512.383 cv
454.594 512.168 454.668 511.93 454.727 511.668 cv
454.777 511.41 454.816 511.129 454.84 510.824 cv
454.859 510.52 454.867 510.203 454.871 509.871 cv
cp
f
526.797 513.781 mo
526.793 513.871 526.785 513.941 526.773 514 cv
526.758 514.062 526.738 514.113 526.719 514.145 cv
526.695 514.184 526.672 514.207 526.641 514.223 cv
526.609 514.238 526.578 514.246 526.551 514.246 cv
521.914 514.246 li
521.879 514.246 521.852 514.238 521.824 514.223 cv
521.797 514.207 521.77 514.184 521.746 514.145 cv
521.719 514.113 521.699 514.062 521.688 514 cv
521.672 513.941 521.664 513.871 521.668 513.781 cv
521.664 513.703 521.672 513.629 521.688 513.566 cv
521.699 513.508 521.715 513.461 521.738 513.422 cv
521.754 513.387 521.781 513.355 521.813 513.332 cv
521.844 513.312 521.875 513.305 521.914 513.301 cv
523.766 513.301 li
523.766 506.555 li
522.051 507.574 li
521.961 507.625 521.891 507.652 521.844 507.66 cv
521.789 507.668 521.746 507.66 521.715 507.629 cv
521.68 507.602 521.66 507.551 521.648 507.48 cv
521.637 507.414 521.629 507.328 521.633 507.219 cv
521.629 507.145 521.633 507.078 521.645 507.02 cv
521.648 506.969 521.66 506.922 521.676 506.883 cv
521.688 506.848 521.707 506.816 521.73 506.789 cv
521.754 506.762 521.785 506.734 521.832 506.707 cv
523.875 505.395 li
523.891 505.383 523.91 505.371 523.941 505.363 cv
523.965 505.355 524 505.348 524.047 505.336 cv
524.086 505.328 524.137 505.32 524.191 505.316 cv
524.246 505.316 524.313 505.316 524.398 505.312 cv
524.504 505.316 524.598 505.32 524.672 505.328 cv
524.742 505.336 524.797 505.352 524.844 505.367 cv
524.883 505.387 524.91 505.406 524.926 505.43 cv
524.934 505.457 524.941 505.48 524.945 505.504 cv
524.945 513.301 li
526.551 513.301 li
526.586 513.305 526.621 513.312 526.652 513.332 cv
526.684 513.355 526.707 513.387 526.73 513.422 cv
526.746 513.461 526.762 513.508 526.777 513.566 cv
526.785 513.629 526.793 513.703 526.797 513.781 cv
cp
f
533.855 513.738 mo
533.852 513.824 533.848 513.898 533.836 513.961 cv
533.824 514.027 533.809 514.082 533.789 514.121 cv
533.766 514.168 533.738 514.199 533.707 514.215 cv
533.672 514.238 533.633 514.246 533.594 514.246 cv
528.691 514.246 li
528.629 514.246 528.57 514.238 528.523 514.223 cv
528.473 514.207 528.434 514.184 528.398 514.145 cv
528.363 514.113 528.336 514.059 528.324 513.988 cv
528.305 513.918 528.297 513.832 528.301 513.73 cv
528.297 513.641 528.301 513.562 528.309 513.492 cv
528.313 513.426 528.328 513.367 528.355 513.312 cv
528.379 513.262 528.41 513.207 528.445 513.152 cv
528.48 513.102 528.523 513.047 528.582 512.984 cv
530.355 511.16 li
530.766 510.742 531.094 510.367 531.344 510.031 cv
531.59 509.703 531.781 509.398 531.914 509.121 cv
532.047 508.848 532.133 508.598 532.18 508.371 cv
532.219 508.148 532.242 507.937 532.242 507.742 cv
532.242 507.547 532.207 507.363 532.141 507.184 cv
532.074 507.012 531.98 506.855 531.855 506.719 cv
531.73 506.59 531.574 506.484 531.387 506.402 cv
531.199 506.328 530.98 506.289 530.734 506.285 cv
530.445 506.289 530.188 506.328 529.961 506.402 cv
529.73 506.484 529.531 506.57 529.359 506.656 cv
529.188 506.75 529.043 506.832 528.926 506.91 cv
528.809 506.988 528.723 507.027 528.672 507.027 cv
528.637 507.027 528.605 507.02 528.582 507 cv
528.551 506.984 528.531 506.953 528.516 506.91 cv
528.5 506.871 528.484 506.816 528.477 506.746 cv
528.465 506.68 528.461 506.598 528.465 506.5 cv
528.461 506.434 528.465 506.375 528.473 506.324 cv
528.477 506.273 528.484 506.23 528.496 506.191 cv
528.504 506.156 528.52 506.121 528.539 506.09 cv
528.559 506.059 528.594 506.02 528.652 505.969 cv
528.703 505.922 528.797 505.855 528.934 505.773 cv
529.066 505.691 529.238 505.613 529.441 505.531 cv
529.645 505.453 529.867 505.383 530.113 505.328 cv
530.355 505.273 530.613 505.246 530.887 505.246 cv
531.313 505.246 531.688 505.309 532.012 505.43 cv
532.332 505.551 532.598 505.715 532.813 505.926 cv
533.023 506.137 533.184 506.383 533.289 506.656 cv
533.395 506.937 533.449 507.234 533.449 507.547 cv
533.449 507.836 533.422 508.117 533.371 508.395 cv
533.32 508.68 533.215 508.984 533.055 509.309 cv
532.891 509.637 532.656 510 532.352 510.398 cv
532.043 510.801 531.637 511.262 531.133 511.777 cv
529.727 513.246 li
533.586 513.246 li
533.617 513.25 533.652 513.262 533.691 513.277 cv
533.723 513.301 533.754 513.332 533.781 513.371 cv
533.805 513.414 533.824 513.465 533.836 513.523 cv
533.848 513.59 533.852 513.66 533.855 513.738 cv
cp
f
604.844 513.781 mo
604.84 513.871 604.832 513.941 604.82 514 cv
604.805 514.062 604.785 514.113 604.766 514.145 cv
604.742 514.184 604.719 514.207 604.688 514.223 cv
604.656 514.238 604.625 514.246 604.598 514.246 cv
599.961 514.246 li
599.926 514.246 599.898 514.238 599.871 514.223 cv
599.844 514.207 599.816 514.184 599.793 514.145 cv
599.766 514.113 599.746 514.062 599.734 514 cv
599.719 513.941 599.711 513.871 599.715 513.781 cv
599.711 513.703 599.719 513.629 599.734 513.566 cv
599.746 513.508 599.762 513.461 599.785 513.422 cv
599.801 513.387 599.828 513.355 599.859 513.332 cv
599.891 513.312 599.922 513.305 599.961 513.301 cv
601.813 513.301 li
601.813 506.555 li
600.098 507.574 li
600.008 507.625 599.938 507.652 599.891 507.66 cv
599.836 507.668 599.793 507.66 599.762 507.629 cv
599.727 507.602 599.707 507.551 599.695 507.48 cv
599.684 507.414 599.676 507.328 599.68 507.219 cv
599.676 507.145 599.68 507.078 599.691 507.02 cv
599.695 506.969 599.707 506.922 599.723 506.883 cv
599.734 506.848 599.754 506.816 599.777 506.789 cv
599.801 506.762 599.832 506.734 599.879 506.707 cv
601.922 505.395 li
601.938 505.383 601.957 505.371 601.988 505.363 cv
602.012 505.355 602.047 505.348 602.094 505.336 cv
602.133 505.328 602.184 505.32 602.238 505.316 cv
602.293 505.316 602.359 505.316 602.445 505.312 cv
602.551 505.316 602.645 505.32 602.719 505.328 cv
602.789 505.336 602.844 505.352 602.891 505.367 cv
602.93 505.387 602.957 505.406 602.973 505.43 cv
602.98 505.457 602.988 505.48 602.992 505.504 cv
602.992 513.301 li
604.598 513.301 li
604.633 513.305 604.668 513.312 604.699 513.332 cv
604.73 513.355 604.754 513.387 604.777 513.422 cv
604.793 513.461 604.809 513.508 604.824 513.566 cv
604.832 513.629 604.84 513.703 604.844 513.781 cv
cp
f
612.281 511.723 mo
612.277 511.875 612.254 511.996 612.211 512.082 cv
612.164 512.172 612.102 512.215 612.02 512.211 cv
611.02 512.211 li
611.02 514.074 li
611.02 514.113 611.008 514.145 610.992 514.168 cv
610.969 514.195 610.938 514.215 610.895 514.234 cv
610.844 514.25 610.781 514.262 610.711 514.273 cv
610.633 514.281 610.539 514.285 610.422 514.289 cv
610.305 514.285 610.207 514.281 610.137 514.273 cv
610.059 514.262 610 514.25 609.957 514.234 cv
609.91 514.215 609.879 514.195 609.863 514.168 cv
609.844 514.145 609.836 514.113 609.84 514.074 cv
609.84 512.211 li
606.211 512.211 li
606.152 512.215 606.109 512.207 606.074 512.191 cv
606.039 512.18 606.004 512.152 605.977 512.113 cv
605.945 512.078 605.926 512.027 605.914 511.957 cv
605.902 511.891 605.898 511.801 605.898 511.687 cv
605.898 511.605 605.898 511.527 605.906 511.457 cv
605.906 511.387 605.918 511.324 605.934 511.27 cv
605.945 511.215 605.961 511.16 605.988 511.105 cv
606.008 511.051 606.035 510.996 606.07 510.934 cv
609.23 505.547 li
609.25 505.512 609.285 505.48 609.332 505.453 cv
609.375 505.426 609.43 505.402 609.504 505.383 cv
609.57 505.367 609.656 505.355 609.762 505.344 cv
609.863 505.34 609.984 505.336 610.125 505.332 cv
610.273 505.336 610.41 505.34 610.527 505.352 cv
610.641 505.363 610.73 505.379 610.805 505.395 cv
610.871 505.414 610.926 505.437 610.965 505.469 cv
611 505.5 611.02 505.535 611.02 505.574 cv
611.02 511.238 li
612.02 511.238 li
612.094 511.242 612.156 511.281 612.207 511.359 cv
612.254 511.441 612.277 511.562 612.281 511.723 cv
cp
609.84 506.371 mo
609.828 506.371 li
606.977 511.238 li
609.84 511.238 li
cp
f
682.914 513.781 mo
682.91 513.871 682.902 513.941 682.891 514 cv
682.875 514.062 682.855 514.113 682.836 514.145 cv
682.813 514.184 682.789 514.207 682.758 514.223 cv
682.727 514.238 682.695 514.246 682.668 514.246 cv
678.031 514.246 li
677.996 514.246 677.969 514.238 677.941 514.223 cv
677.914 514.207 677.887 514.184 677.863 514.145 cv
677.836 514.113 677.816 514.062 677.805 514 cv
677.789 513.941 677.781 513.871 677.785 513.781 cv
677.781 513.703 677.789 513.629 677.805 513.566 cv
677.816 513.508 677.832 513.461 677.855 513.422 cv
677.871 513.387 677.898 513.355 677.93 513.332 cv
677.961 513.312 677.992 513.305 678.031 513.301 cv
679.883 513.301 li
679.883 506.555 li
678.168 507.574 li
678.078 507.625 678.008 507.652 677.961 507.66 cv
677.906 507.668 677.863 507.66 677.832 507.629 cv
677.797 507.602 677.777 507.551 677.766 507.48 cv
677.754 507.414 677.746 507.328 677.75 507.219 cv
677.746 507.145 677.75 507.078 677.762 507.02 cv
677.766 506.969 677.777 506.922 677.793 506.883 cv
677.805 506.848 677.824 506.816 677.848 506.789 cv
677.871 506.762 677.902 506.734 677.949 506.707 cv
679.992 505.395 li
680.008 505.383 680.027 505.371 680.059 505.363 cv
680.082 505.355 680.117 505.348 680.164 505.336 cv
680.203 505.328 680.254 505.32 680.309 505.316 cv
680.363 505.316 680.43 505.316 680.516 505.312 cv
680.621 505.316 680.715 505.32 680.789 505.328 cv
680.859 505.336 680.914 505.352 680.961 505.367 cv
681 505.387 681.027 505.406 681.043 505.43 cv
681.051 505.457 681.059 505.48 681.063 505.504 cv
681.063 513.301 li
682.668 513.301 li
682.703 513.305 682.738 513.312 682.77 513.332 cv
682.801 513.355 682.824 513.387 682.848 513.422 cv
682.863 513.461 682.879 513.508 682.895 513.566 cv
682.902 513.629 682.91 513.703 682.914 513.781 cv
cp
f
690.203 511.375 mo
690.203 511.766 690.141 512.145 690.023 512.504 cv
689.898 512.871 689.715 513.187 689.473 513.461 cv
689.223 513.738 688.91 513.961 688.535 514.125 cv
688.152 514.293 687.707 514.375 687.191 514.375 cv
686.82 514.375 686.492 514.332 686.211 514.238 cv
685.926 514.152 685.68 514.02 685.469 513.848 cv
685.258 513.68 685.082 513.473 684.945 513.227 cv
684.805 512.98 684.691 512.699 684.609 512.383 cv
684.523 512.07 684.465 511.727 684.43 511.348 cv
684.391 510.977 684.371 510.574 684.375 510.141 cv
684.371 509.762 684.391 509.379 684.434 508.988 cv
684.473 508.605 684.547 508.23 684.652 507.863 cv
684.758 507.504 684.902 507.164 685.082 506.848 cv
685.262 506.531 685.488 506.254 685.762 506.02 cv
686.035 505.785 686.359 505.598 686.738 505.457 cv
687.117 505.32 687.559 505.254 688.063 505.25 cv
688.23 505.254 688.402 505.262 688.574 505.281 cv
688.746 505.305 688.906 505.336 689.055 505.367 cv
689.203 505.406 689.324 505.441 689.426 505.48 cv
689.523 505.52 689.59 505.555 689.625 505.578 cv
689.652 505.605 689.676 505.633 689.695 505.66 cv
689.711 505.691 689.727 505.723 689.734 505.758 cv
689.742 505.793 689.746 505.832 689.754 505.875 cv
689.754 505.918 689.758 505.973 689.762 506.035 cv
689.758 506.121 689.758 506.191 689.758 506.246 cv
689.754 506.309 689.742 506.355 689.73 506.391 cv
689.711 506.43 689.691 506.457 689.668 506.473 cv
689.641 506.492 689.609 506.5 689.57 506.5 cv
689.52 506.5 689.449 506.484 689.363 506.453 cv
689.273 506.422 689.168 506.387 689.047 506.344 cv
688.922 506.309 688.773 506.273 688.598 506.238 cv
688.422 506.211 688.219 506.195 687.988 506.191 cv
687.559 506.195 687.191 506.281 686.887 506.453 cv
686.582 506.625 686.332 506.859 686.137 507.152 cv
685.941 507.445 685.797 507.785 685.707 508.168 cv
685.609 508.559 685.555 508.961 685.547 509.379 cv
685.664 509.312 685.801 509.246 685.949 509.176 cv
686.098 509.109 686.258 509.047 686.434 508.988 cv
686.609 508.937 686.797 508.891 686.992 508.855 cv
687.188 508.824 687.398 508.809 687.625 508.805 cv
688.102 508.809 688.504 508.875 688.836 509 cv
689.164 509.133 689.43 509.312 689.637 509.543 cv
689.836 509.773 689.98 510.043 690.07 510.355 cv
690.156 510.668 690.203 511.008 690.203 511.375 cv
cp
689.008 511.484 mo
689.008 511.223 688.98 510.98 688.93 510.762 cv
688.875 510.547 688.785 510.363 688.664 510.207 cv
688.539 510.059 688.375 509.941 688.172 509.859 cv
687.961 509.777 687.707 509.734 687.41 509.734 cv
687.238 509.734 687.07 509.75 686.902 509.781 cv
686.73 509.812 686.566 509.855 686.41 509.902 cv
686.25 509.957 686.102 510.02 685.961 510.09 cv
685.816 510.164 685.684 510.238 685.566 510.316 cv
685.563 510.91 685.602 511.406 685.68 511.801 cv
685.754 512.199 685.863 512.516 686.008 512.754 cv
686.152 512.996 686.332 513.168 686.547 513.27 cv
686.762 513.375 687.012 513.426 687.301 513.422 cv
687.59 513.426 687.844 513.371 688.059 513.258 cv
688.273 513.152 688.449 513.004 688.594 512.816 cv
688.734 512.633 688.84 512.426 688.906 512.195 cv
688.973 511.965 689.008 511.73 689.008 511.484 cv
cp
f
7.75 310.941 mo
7.852 310.945 7.938 310.949 8.008 310.957 cv
8.082 310.969 8.141 310.984 8.184 311.008 cv
8.23 311.031 8.262 311.062 8.281 311.094 cv
8.305 311.133 8.316 311.168 8.313 311.207 cv
8.313 314.043 li
17.055 314.043 li
17.098 314.043 17.133 314.055 17.164 314.074 cv
17.195 314.098 17.223 314.133 17.238 314.184 cv
17.258 314.238 17.27 314.309 17.285 314.391 cv
17.297 314.48 17.305 314.586 17.305 314.711 cv
17.305 314.836 17.297 314.945 17.285 315.031 cv
17.27 315.125 17.258 315.195 17.238 315.242 cv
17.223 315.297 17.195 315.332 17.164 315.352 cv
17.133 315.375 17.098 315.387 17.055 315.383 cv
8.313 315.383 li
8.313 318.219 li
8.316 318.266 8.305 318.301 8.281 318.332 cv
8.262 318.367 8.23 318.395 8.184 318.414 cv
8.141 318.437 8.082 318.457 8.008 318.465 cv
7.938 318.48 7.852 318.484 7.75 318.484 cv
7.652 318.484 7.566 318.48 7.488 318.465 cv
7.418 318.457 7.355 318.437 7.305 318.414 cv
7.262 318.395 7.227 318.367 7.203 318.332 cv
7.184 318.301 7.176 318.266 7.172 318.219 cv
7.172 311.207 li
7.176 311.168 7.184 311.133 7.203 311.094 cv
7.227 311.062 7.262 311.031 7.305 311.008 cv
7.355 310.984 7.418 310.969 7.488 310.957 cv
7.566 310.949 7.652 310.945 7.75 310.941 cv
cp
f
17.063 308.352 mo
17.109 308.355 17.145 308.367 17.168 308.383 cv
17.199 308.406 17.223 308.437 17.242 308.484 cv
17.262 308.531 17.273 308.598 17.289 308.676 cv
17.297 308.762 17.305 308.867 17.305 308.996 cv
17.305 309.125 17.297 309.23 17.289 309.309 cv
17.273 309.395 17.262 309.461 17.242 309.508 cv
17.223 309.562 17.199 309.594 17.168 309.609 cv
17.145 309.629 17.109 309.641 17.063 309.637 cv
10.051 309.637 li
10.016 309.641 9.984 309.629 9.949 309.609 cv
9.922 309.594 9.895 309.562 9.871 309.508 cv
9.852 309.461 9.836 309.395 9.824 309.309 cv
9.816 309.23 9.813 309.125 9.809 308.996 cv
9.813 308.867 9.816 308.762 9.824 308.676 cv
9.836 308.598 9.852 308.531 9.871 308.484 cv
9.895 308.437 9.922 308.406 9.949 308.383 cv
9.984 308.367 10.016 308.355 10.051 308.352 cv
cp
7.68 308.203 mo
7.984 308.203 8.191 308.262 8.297 308.375 cv
8.41 308.488 8.465 308.699 8.461 309.004 cv
8.465 309.309 8.41 309.516 8.301 309.625 cv
8.195 309.742 7.992 309.797 7.695 309.793 cv
7.395 309.797 7.191 309.738 7.082 309.621 cv
6.977 309.508 6.922 309.297 6.918 308.988 cv
6.922 308.687 6.977 308.484 7.078 308.371 cv
7.188 308.262 7.387 308.203 7.68 308.203 cv
cp
f
17.063 295.496 mo
17.109 295.5 17.145 295.508 17.168 295.527 cv
17.199 295.551 17.223 295.586 17.242 295.629 cv
17.262 295.68 17.273 295.746 17.289 295.824 cv
17.297 295.91 17.305 296.012 17.305 296.137 cv
17.305 296.27 17.297 296.379 17.289 296.457 cv
17.273 296.543 17.262 296.609 17.242 296.656 cv
17.223 296.711 17.199 296.746 17.168 296.762 cv
17.145 296.785 17.109 296.793 17.063 296.793 cv
12.801 296.793 li
12.508 296.793 12.238 296.82 11.992 296.871 cv
11.75 296.926 11.539 297.008 11.359 297.121 cv
11.184 297.234 11.047 297.379 10.953 297.555 cv
10.859 297.734 10.813 297.945 10.813 298.18 cv
10.813 298.477 10.93 298.773 11.156 299.07 cv
11.391 299.375 11.723 299.703 12.16 300.059 cv
17.063 300.059 li
17.109 300.062 17.145 300.074 17.168 300.09 cv
17.199 300.113 17.223 300.145 17.242 300.191 cv
17.262 300.242 17.273 300.309 17.289 300.391 cv
17.297 300.477 17.305 300.582 17.305 300.703 cv
17.305 300.824 17.297 300.926 17.289 301.012 cv
17.273 301.098 17.262 301.168 17.242 301.215 cv
17.223 301.27 17.199 301.301 17.168 301.316 cv
17.145 301.336 17.109 301.348 17.063 301.344 cv
12.801 301.344 li
12.508 301.348 12.238 301.375 11.992 301.43 cv
11.75 301.488 11.539 301.574 11.359 301.687 cv
11.184 301.801 11.047 301.945 10.953 302.117 cv
10.859 302.297 10.813 302.504 10.813 302.738 cv
10.813 303.039 10.93 303.336 11.156 303.637 cv
11.391 303.937 11.723 304.266 12.16 304.617 cv
17.063 304.617 li
17.109 304.621 17.145 304.633 17.168 304.648 cv
17.199 304.672 17.223 304.703 17.242 304.75 cv
17.262 304.797 17.273 304.863 17.289 304.941 cv
17.297 305.027 17.305 305.133 17.305 305.262 cv
17.305 305.391 17.297 305.496 17.289 305.574 cv
17.273 305.66 17.262 305.727 17.242 305.773 cv
17.223 305.828 17.199 305.859 17.168 305.875 cv
17.145 305.895 17.109 305.906 17.063 305.902 cv
10.051 305.902 li
10.012 305.906 9.977 305.898 9.945 305.879 cv
9.918 305.867 9.895 305.836 9.867 305.785 cv
9.848 305.742 9.832 305.68 9.82 305.605 cv
9.816 305.535 9.813 305.441 9.809 305.316 cv
9.813 305.207 9.816 305.109 9.82 305.031 cv
9.832 304.957 9.848 304.898 9.867 304.855 cv
9.895 304.816 9.918 304.789 9.945 304.77 cv
9.977 304.754 10.012 304.746 10.051 304.742 cv
10.977 304.742 li
10.535 304.352 10.215 303.969 10.008 303.594 cv
9.805 303.227 9.699 302.848 9.699 302.465 cv
9.699 302.176 9.734 301.918 9.801 301.684 cv
9.871 301.457 9.965 301.25 10.086 301.07 cv
10.207 300.895 10.352 300.746 10.52 300.617 cv
10.691 300.496 10.883 300.391 11.086 300.305 cv
10.836 300.074 10.621 299.852 10.441 299.641 cv
10.27 299.43 10.125 299.227 10.012 299.031 cv
9.906 298.836 9.828 298.648 9.773 298.465 cv
9.727 298.281 9.699 298.094 9.699 297.906 cv
9.699 297.453 9.781 297.074 9.938 296.77 cv
10.102 296.465 10.313 296.219 10.574 296.023 cv
10.84 295.836 11.148 295.699 11.504 295.617 cv
11.859 295.539 12.234 295.5 12.629 295.496 cv
cp
f
13.254 287.164 mo
13.457 287.168 13.598 287.219 13.684 287.316 cv
13.77 287.422 13.813 287.539 13.813 287.664 cv
13.813 292.281 li
14.203 292.285 14.555 292.246 14.867 292.164 cv
15.18 292.09 15.449 291.957 15.668 291.773 cv
15.895 291.594 16.066 291.359 16.184 291.062 cv
16.309 290.773 16.367 290.414 16.363 289.988 cv
16.367 289.656 16.34 289.359 16.281 289.098 cv
16.23 288.836 16.168 288.609 16.098 288.418 cv
16.031 288.23 15.973 288.074 15.914 287.949 cv
15.863 287.828 15.836 287.734 15.832 287.672 cv
15.836 287.637 15.844 287.605 15.859 287.574 cv
15.879 287.547 15.906 287.523 15.941 287.504 cv
15.98 287.492 16.031 287.48 16.094 287.469 cv
16.16 287.465 16.238 287.461 16.332 287.457 cv
16.402 287.461 16.461 287.465 16.508 287.465 cv
16.555 287.473 16.598 287.477 16.637 287.484 cv
16.676 287.492 16.711 287.508 16.742 287.523 cv
16.773 287.547 16.805 287.57 16.832 287.594 cv
16.863 287.625 16.91 287.707 16.973 287.848 cv
17.039 287.988 17.102 288.172 17.164 288.395 cv
17.227 288.621 17.281 288.879 17.332 289.172 cv
17.379 289.465 17.402 289.777 17.406 290.109 cv
17.402 290.687 17.324 291.195 17.164 291.625 cv
17.004 292.062 16.766 292.426 16.449 292.719 cv
16.133 293.02 15.738 293.242 15.258 293.391 cv
14.781 293.539 14.223 293.613 13.586 293.613 cv
12.988 293.613 12.449 293.539 11.965 293.383 cv
11.488 293.23 11.078 293.004 10.742 292.707 cv
10.406 292.414 10.148 292.059 9.969 291.645 cv
9.789 291.23 9.699 290.766 9.699 290.25 cv
9.699 289.699 9.789 289.23 9.965 288.844 cv
10.145 288.457 10.383 288.141 10.68 287.887 cv
10.98 287.641 11.332 287.457 11.73 287.34 cv
12.137 287.227 12.566 287.168 13.02 287.164 cv
cp
12.871 288.457 mo
12.195 288.441 11.664 288.594 11.281 288.91 cv
10.898 289.227 10.707 289.695 10.703 290.312 cv
10.707 290.637 10.766 290.918 10.883 291.156 cv
11.004 291.398 11.164 291.598 11.359 291.758 cv
11.559 291.922 11.789 292.047 12.051 292.133 cv
12.313 292.223 12.586 292.273 12.871 292.281 cv
cp
f
6.52 278.988 mo
7.566 279.484 8.637 279.852 9.734 280.094 cv
10.836 280.336 11.941 280.457 13.051 280.457 cv
14.168 280.457 15.277 280.336 16.371 280.086 cv
17.469 279.844 18.539 279.48 19.594 279.004 cv
19.652 278.98 19.707 278.969 19.754 278.961 cv
19.797 278.961 19.832 278.977 19.863 279.012 cv
19.891 279.051 19.91 279.105 19.926 279.18 cv
19.934 279.258 19.941 279.363 19.945 279.488 cv
19.941 279.586 19.938 279.664 19.938 279.73 cv
19.93 279.801 19.922 279.859 19.906 279.906 cv
19.891 279.957 19.871 280 19.852 280.027 cv
19.828 280.062 19.805 280.086 19.781 280.098 cv
19.25 280.379 18.715 280.625 18.172 280.836 cv
17.629 281.055 17.078 281.234 16.52 281.375 cv
15.957 281.523 15.391 281.633 14.816 281.703 cv
14.242 281.781 13.66 281.816 13.074 281.812 cv
12.488 281.816 11.91 281.777 11.336 281.691 cv
10.766 281.613 10.199 281.496 9.633 281.348 cv
9.07 281.199 8.516 281.02 7.969 280.809 cv
7.426 280.598 6.883 280.359 6.348 280.09 cv
6.328 280.086 6.313 280.07 6.293 280.047 cv
6.281 280.023 6.266 279.992 6.246 279.949 cv
6.234 279.91 6.223 279.852 6.211 279.777 cv
6.207 279.707 6.203 279.613 6.199 279.496 cv
6.203 279.379 6.211 279.285 6.223 279.207 cv
6.242 279.137 6.262 279.078 6.285 279.035 cv
6.313 278.996 6.348 278.973 6.387 278.965 cv
6.434 278.961 6.477 278.969 6.52 278.988 cv
cp
f
14.43 271.258 mo
14.902 271.262 15.324 271.348 15.691 271.52 cv
16.066 271.695 16.379 271.937 16.633 272.246 cv
16.891 272.555 17.082 272.918 17.211 273.336 cv
17.34 273.758 17.402 274.207 17.406 274.687 cv
17.402 275.027 17.375 275.344 17.32 275.629 cv
17.262 275.918 17.195 276.172 17.109 276.398 cv
17.031 276.625 16.945 276.816 16.852 276.969 cv
16.766 277.125 16.688 277.23 16.625 277.289 cv
16.563 277.348 16.484 277.391 16.391 277.418 cv
16.297 277.449 16.168 277.465 16.004 277.461 cv
15.891 277.465 15.797 277.461 15.719 277.445 cv
15.645 277.437 15.582 277.422 15.535 277.398 cv
15.488 277.383 15.457 277.355 15.438 277.32 cv
15.422 277.293 15.414 277.258 15.41 277.215 cv
15.414 277.145 15.457 277.043 15.543 276.906 cv
15.633 276.777 15.73 276.605 15.832 276.395 cv
15.941 276.187 16.039 275.937 16.125 275.645 cv
16.219 275.352 16.262 275.012 16.262 274.625 cv
16.262 274.336 16.223 274.07 16.145 273.828 cv
16.066 273.59 15.957 273.383 15.813 273.203 cv
15.672 273.031 15.496 272.895 15.285 272.801 cv
15.078 272.707 14.844 272.66 14.578 272.66 cv
14.297 272.66 14.051 272.727 13.844 272.855 cv
13.645 272.988 13.469 273.16 13.313 273.371 cv
13.164 273.586 13.023 273.828 12.891 274.102 cv
12.766 274.375 12.633 274.656 12.5 274.937 cv
12.367 275.227 12.223 275.504 12.059 275.773 cv
11.902 276.043 11.711 276.285 11.492 276.496 cv
11.273 276.715 11.02 276.887 10.723 277.016 cv
10.434 277.152 10.082 277.219 9.668 277.215 cv
9.25 277.219 8.875 277.141 8.543 276.984 cv
8.215 276.832 7.938 276.621 7.711 276.344 cv
7.492 276.074 7.32 275.75 7.203 275.371 cv
7.086 274.996 7.027 274.586 7.027 274.148 cv
7.027 273.93 7.047 273.707 7.086 273.477 cv
7.125 273.254 7.176 273.043 7.238 272.84 cv
7.305 272.645 7.379 272.465 7.457 272.305 cv
7.539 272.152 7.605 272.051 7.652 271.996 cv
7.707 271.949 7.746 271.914 7.77 271.898 cv
7.801 271.883 7.836 271.871 7.879 271.859 cv
7.926 271.852 7.98 271.844 8.039 271.836 cv
8.105 271.832 8.184 271.828 8.281 271.828 cv
8.375 271.828 8.461 271.832 8.531 271.84 cv
8.609 271.848 8.668 271.859 8.715 271.875 cv
8.762 271.891 8.797 271.914 8.82 271.941 cv
8.844 271.973 8.855 272.004 8.855 272.039 cv
8.855 272.098 8.82 272.187 8.75 272.309 cv
8.68 272.434 8.598 272.586 8.504 272.758 cv
8.414 272.937 8.332 273.145 8.254 273.383 cv
8.18 273.629 8.141 273.898 8.141 274.195 cv
8.141 274.477 8.18 274.723 8.254 274.93 cv
8.332 275.141 8.434 275.312 8.555 275.445 cv
8.68 275.582 8.824 275.684 8.996 275.75 cv
9.168 275.816 9.352 275.848 9.543 275.848 cv
9.828 275.848 10.07 275.785 10.27 275.656 cv
10.473 275.527 10.652 275.355 10.805 275.137 cv
10.965 274.926 11.105 274.68 11.234 274.402 cv
11.367 274.129 11.5 273.848 11.629 273.559 cv
11.762 273.273 11.906 272.992 12.063 272.719 cv
12.223 272.445 12.41 272.199 12.625 271.98 cv
12.844 271.766 13.098 271.594 13.391 271.457 cv
13.684 271.328 14.031 271.262 14.43 271.258 cv
cp
f
13.254 263.559 mo
13.457 263.562 13.598 263.613 13.684 263.711 cv
13.77 263.816 13.813 263.934 13.813 264.059 cv
13.813 268.676 li
14.203 268.68 14.555 268.641 14.867 268.559 cv
15.18 268.484 15.449 268.352 15.668 268.168 cv
15.895 267.988 16.066 267.754 16.184 267.457 cv
16.309 267.168 16.367 266.809 16.363 266.383 cv
16.367 266.051 16.34 265.754 16.281 265.492 cv
16.23 265.23 16.168 265.004 16.098 264.812 cv
16.031 264.625 15.973 264.469 15.914 264.344 cv
15.863 264.223 15.836 264.129 15.832 264.066 cv
15.836 264.031 15.844 264 15.859 263.969 cv
15.879 263.941 15.906 263.918 15.941 263.898 cv
15.98 263.887 16.031 263.875 16.094 263.863 cv
16.16 263.859 16.238 263.855 16.332 263.852 cv
16.402 263.855 16.461 263.859 16.508 263.859 cv
16.555 263.867 16.598 263.871 16.637 263.879 cv
16.676 263.887 16.711 263.902 16.742 263.918 cv
16.773 263.941 16.805 263.965 16.832 263.988 cv
16.863 264.02 16.91 264.102 16.973 264.242 cv
17.039 264.383 17.102 264.566 17.164 264.789 cv
17.227 265.016 17.281 265.273 17.332 265.566 cv
17.379 265.859 17.402 266.172 17.406 266.504 cv
17.402 267.082 17.324 267.59 17.164 268.02 cv
17.004 268.457 16.766 268.82 16.449 269.113 cv
16.133 269.414 15.738 269.637 15.258 269.785 cv
14.781 269.934 14.223 270.008 13.586 270.008 cv
12.988 270.008 12.449 269.934 11.965 269.777 cv
11.488 269.625 11.078 269.398 10.742 269.102 cv
10.406 268.809 10.148 268.453 9.969 268.039 cv
9.789 267.625 9.699 267.16 9.699 266.645 cv
9.699 266.094 9.789 265.625 9.965 265.238 cv
10.145 264.852 10.383 264.535 10.68 264.281 cv
10.98 264.035 11.332 263.852 11.73 263.734 cv
12.137 263.621 12.566 263.562 13.02 263.559 cv
cp
12.871 264.852 mo
12.195 264.836 11.664 264.988 11.281 265.305 cv
10.898 265.621 10.707 266.09 10.703 266.707 cv
10.707 267.031 10.766 267.312 10.883 267.551 cv
11.004 267.793 11.164 267.992 11.359 268.152 cv
11.559 268.316 11.789 268.441 12.051 268.527 cv
12.313 268.617 12.586 268.668 12.871 268.676 cv
cp
f
15.996 256.555 mo
16.09 256.555 16.164 256.559 16.227 256.562 cv
16.293 256.57 16.348 256.578 16.391 256.59 cv
16.438 256.605 16.477 256.621 16.508 256.637 cv
16.539 256.656 16.59 256.699 16.652 256.762 cv
16.723 256.828 16.801 256.937 16.895 257.094 cv
16.992 257.25 17.078 257.426 17.152 257.621 cv
17.227 257.816 17.285 258.027 17.336 258.254 cv
17.379 258.484 17.402 258.723 17.406 258.961 cv
17.402 259.469 17.324 259.914 17.156 260.305 cv
16.992 260.695 16.75 261.023 16.43 261.281 cv
16.113 261.547 15.719 261.746 15.254 261.883 cv
14.789 262.02 14.254 262.086 13.641 262.086 cv
12.953 262.086 12.359 262.004 11.863 261.836 cv
11.367 261.668 10.961 261.437 10.645 261.141 cv
10.328 260.852 10.094 260.504 9.938 260.105 cv
9.789 259.707 9.711 259.277 9.707 258.816 cv
9.711 258.594 9.73 258.379 9.77 258.164 cv
9.813 257.957 9.867 257.762 9.934 257.586 cv
10.004 257.41 10.082 257.254 10.168 257.113 cv
10.254 256.977 10.328 256.875 10.391 256.812 cv
10.453 256.75 10.504 256.707 10.539 256.684 cv
10.578 256.66 10.621 256.641 10.668 256.625 cv
10.719 256.609 10.773 256.602 10.836 256.594 cv
10.898 256.594 10.977 256.59 11.07 256.586 cv
11.273 256.59 11.418 256.613 11.496 256.656 cv
11.582 256.707 11.621 256.766 11.617 256.828 cv
11.621 256.91 11.578 257 11.488 257.098 cv
11.406 257.203 11.313 257.332 11.203 257.484 cv
11.102 257.641 11.004 257.828 10.918 258.047 cv
10.832 258.273 10.789 258.535 10.789 258.832 cv
10.789 259.453 11.027 259.926 11.504 260.254 cv
11.98 260.586 12.672 260.75 13.57 260.746 cv
14.027 260.75 14.422 260.707 14.762 260.617 cv
15.102 260.535 15.387 260.41 15.613 260.242 cv
15.844 260.078 16.016 259.875 16.125 259.629 cv
16.242 259.391 16.297 259.113 16.293 258.801 cv
16.297 258.508 16.25 258.246 16.152 258.02 cv
16.063 257.797 15.961 257.605 15.844 257.441 cv
15.734 257.281 15.633 257.145 15.539 257.027 cv
15.453 256.918 15.406 256.828 15.402 256.766 cv
15.406 256.73 15.418 256.699 15.434 256.672 cv
15.457 256.648 15.492 256.629 15.539 256.605 cv
15.594 256.59 15.656 256.574 15.727 256.566 cv
15.805 256.559 15.895 256.555 15.996 256.555 cv
cp
f
13.477 248.496 mo
14.055 248.5 14.582 248.574 15.059 248.723 cv
15.543 248.875 15.957 249.102 16.301 249.398 cv
16.652 249.699 16.922 250.074 17.113 250.52 cv
17.309 250.973 17.402 251.492 17.406 252.082 cv
17.402 252.66 17.32 253.164 17.148 253.59 cv
16.98 254.02 16.73 254.375 16.402 254.66 cv
16.074 254.949 15.68 255.164 15.211 255.301 cv
14.746 255.441 14.215 255.508 13.617 255.508 cv
13.051 255.508 12.523 255.437 12.043 255.289 cv
11.563 255.145 11.148 254.918 10.797 254.617 cv
10.449 254.32 10.18 253.949 9.988 253.5 cv
9.797 253.055 9.699 252.531 9.699 251.934 cv
9.699 251.355 9.785 250.855 9.957 250.426 cv
10.129 250 10.379 249.641 10.707 249.355 cv
11.035 249.07 11.434 248.855 11.898 248.711 cv
12.367 248.57 12.895 248.5 13.477 248.496 cv
cp
13.563 249.828 mo
13.188 249.832 12.828 249.867 12.488 249.934 cv
12.152 250.008 11.859 250.125 11.602 250.285 cv
11.352 250.449 11.148 250.668 10.996 250.945 cv
10.852 251.227 10.777 251.574 10.773 251.984 cv
10.777 252.371 10.844 252.699 10.977 252.973 cv
11.113 253.25 11.305 253.477 11.551 253.652 cv
11.797 253.832 12.09 253.965 12.426 254.047 cv
12.766 254.137 13.133 254.18 13.531 254.176 cv
13.918 254.18 14.281 254.145 14.617 254.07 cv
14.957 254.004 15.25 253.887 15.5 253.719 cv
15.754 253.555 15.957 253.332 16.102 253.055 cv
16.254 252.777 16.328 252.43 16.324 252.016 cv
16.328 251.641 16.258 251.312 16.121 251.031 cv
15.988 250.754 15.801 250.527 15.551 250.348 cv
15.309 250.172 15.016 250.043 14.68 249.957 cv
14.344 249.875 13.973 249.832 13.563 249.828 cv
cp
f
17.063 240.57 mo
17.109 240.57 17.145 240.582 17.168 240.602 cv
17.199 240.625 17.223 240.66 17.242 240.703 cv
17.262 240.754 17.273 240.816 17.289 240.898 cv
17.297 240.98 17.305 241.086 17.305 241.207 cv
17.305 241.34 17.297 241.445 17.289 241.527 cv
17.273 241.613 17.262 241.68 17.242 241.723 cv
17.223 241.773 17.199 241.805 17.168 241.824 cv
17.145 241.848 17.109 241.859 17.063 241.855 cv
12.957 241.855 li
12.559 241.859 12.238 241.891 11.992 241.949 cv
11.75 242.016 11.539 242.105 11.359 242.223 cv
11.184 242.34 11.047 242.496 10.953 242.684 cv
10.859 242.879 10.813 243.098 10.813 243.344 cv
10.813 243.668 10.93 243.992 11.156 244.312 cv
11.391 244.637 11.723 244.973 12.16 245.324 cv
17.063 245.324 li
17.109 245.328 17.145 245.34 17.168 245.355 cv
17.199 245.379 17.223 245.41 17.242 245.457 cv
17.262 245.504 17.273 245.57 17.289 245.648 cv
17.297 245.734 17.305 245.84 17.305 245.969 cv
17.305 246.098 17.297 246.203 17.289 246.281 cv
17.273 246.367 17.262 246.434 17.242 246.48 cv
17.223 246.535 17.199 246.566 17.168 246.582 cv
17.145 246.602 17.109 246.613 17.063 246.609 cv
10.051 246.609 li
10.012 246.613 9.977 246.605 9.945 246.586 cv
9.918 246.574 9.895 246.543 9.867 246.492 cv
9.848 246.449 9.832 246.387 9.82 246.312 cv
9.816 246.242 9.813 246.148 9.809 246.023 cv
9.813 245.914 9.816 245.816 9.82 245.738 cv
9.832 245.664 9.848 245.605 9.867 245.562 cv
9.895 245.523 9.918 245.496 9.945 245.477 cv
9.977 245.461 10.012 245.453 10.051 245.449 cv
10.977 245.449 li
10.535 245.059 10.215 244.664 10.008 244.27 cv
9.805 243.879 9.699 243.48 9.699 243.078 cv
9.699 242.609 9.781 242.219 9.938 241.898 cv
10.102 241.582 10.313 241.32 10.574 241.121 cv
10.84 240.926 11.148 240.785 11.504 240.699 cv
11.859 240.613 12.289 240.57 12.785 240.57 cv
cp
f
17.063 232.223 mo
17.109 232.227 17.145 232.234 17.172 232.25 cv
17.207 232.27 17.23 232.301 17.246 232.344 cv
17.262 232.387 17.273 232.445 17.289 232.516 cv
17.297 232.59 17.305 232.68 17.305 232.781 cv
17.305 232.895 17.297 232.984 17.289 233.055 cv
17.273 233.129 17.262 233.187 17.246 233.234 cv
17.23 233.281 17.207 233.316 17.172 233.336 cv
17.145 233.359 17.109 233.371 17.063 233.367 cv
16.137 233.367 li
16.539 233.742 16.848 234.125 17.07 234.52 cv
17.293 234.918 17.402 235.352 17.406 235.82 cv
17.402 236.34 17.305 236.781 17.105 237.141 cv
16.906 237.508 16.637 237.801 16.297 238.023 cv
15.957 238.254 15.559 238.418 15.098 238.52 cv
14.641 238.621 14.156 238.672 13.641 238.672 cv
13.043 238.672 12.5 238.609 12.012 238.48 cv
11.527 238.352 11.109 238.16 10.766 237.902 cv
10.422 237.652 10.16 237.336 9.977 236.957 cv
9.793 236.582 9.699 236.145 9.699 235.648 cv
9.699 235.242 9.789 234.867 9.969 234.523 cv
10.148 234.184 10.414 233.848 10.758 233.516 cv
6.684 233.516 li
6.648 233.516 6.613 233.508 6.578 233.488 cv
6.547 233.473 6.52 233.437 6.5 233.383 cv
6.484 233.332 6.469 233.266 6.453 233.184 cv
6.441 233.105 6.438 233.004 6.434 232.875 cv
6.438 232.75 6.441 232.641 6.453 232.555 cv
6.469 232.473 6.484 232.41 6.5 232.363 cv
6.52 232.32 6.547 232.285 6.578 232.258 cv
6.613 232.238 6.648 232.227 6.684 232.223 cv
cp
12.129 233.516 mo
11.703 233.863 11.375 234.199 11.145 234.523 cv
10.922 234.852 10.809 235.191 10.805 235.539 cv
10.809 235.871 10.887 236.148 11.039 236.375 cv
11.199 236.605 11.402 236.793 11.656 236.934 cv
11.91 237.078 12.199 237.18 12.52 237.242 cv
12.844 237.309 13.172 237.344 13.5 237.34 cv
13.859 237.344 14.203 237.316 14.539 237.258 cv
14.875 237.207 15.176 237.113 15.438 236.977 cv
15.703 236.844 15.914 236.664 16.07 236.437 cv
16.23 236.219 16.309 235.937 16.309 235.594 cv
16.309 235.43 16.285 235.266 16.238 235.102 cv
16.191 234.945 16.113 234.781 16.004 234.613 cv
15.895 234.449 15.754 234.277 15.578 234.094 cv
15.406 233.914 15.191 233.719 14.934 233.516 cv
cp
f
15.152 225.449 mo
15.516 225.453 15.836 225.52 16.113 225.648 cv
16.395 225.781 16.629 225.969 16.82 226.211 cv
17.016 226.457 17.16 226.75 17.258 227.086 cv
17.355 227.426 17.402 227.797 17.406 228.199 cv
17.402 228.453 17.383 228.691 17.348 228.914 cv
17.305 229.141 17.258 229.34 17.199 229.52 cv
17.141 229.699 17.078 229.852 17.012 229.977 cv
16.949 230.102 16.891 230.195 16.836 230.25 cv
16.785 230.309 16.715 230.348 16.617 230.371 cv
16.527 230.398 16.398 230.41 16.238 230.41 cv
16.141 230.41 16.059 230.406 15.988 230.395 cv
15.922 230.387 15.867 230.375 15.824 230.355 cv
15.785 230.344 15.754 230.32 15.734 230.293 cv
15.719 230.266 15.711 230.234 15.707 230.195 cv
15.711 230.141 15.746 230.055 15.813 229.941 cv
15.887 229.832 15.965 229.695 16.043 229.527 cv
16.129 229.367 16.203 229.176 16.273 228.949 cv
16.344 228.73 16.379 228.473 16.379 228.176 cv
16.379 227.961 16.355 227.762 16.309 227.582 cv
16.262 227.406 16.195 227.254 16.102 227.125 cv
16.016 226.996 15.898 226.895 15.754 226.824 cv
15.617 226.754 15.449 226.719 15.254 226.719 cv
15.059 226.719 14.895 226.77 14.758 226.871 cv
14.625 226.973 14.504 227.109 14.398 227.273 cv
14.297 227.441 14.207 227.625 14.121 227.832 cv
14.043 228.043 13.957 228.258 13.867 228.477 cv
13.781 228.695 13.68 228.91 13.566 229.121 cv
13.457 229.332 13.324 229.523 13.16 229.687 cv
13.004 229.859 12.809 229.992 12.582 230.09 cv
12.359 230.195 12.094 230.246 11.781 230.242 cv
11.508 230.246 11.242 230.191 10.988 230.082 cv
10.738 229.977 10.52 229.816 10.328 229.602 cv
10.141 229.391 9.988 229.125 9.871 228.805 cv
9.758 228.484 9.699 228.113 9.699 227.684 cv
9.699 227.5 9.715 227.312 9.746 227.125 cv
9.777 226.941 9.816 226.773 9.863 226.617 cv
9.91 226.469 9.961 226.34 10.016 226.23 cv
10.07 226.129 10.121 226.047 10.16 225.988 cv
10.207 225.937 10.242 225.902 10.27 225.879 cv
10.301 225.863 10.336 225.848 10.371 225.84 cv
10.414 225.832 10.461 225.824 10.516 225.816 cv
10.574 225.809 10.645 225.805 10.727 225.805 cv
10.816 225.805 10.895 225.809 10.957 225.816 cv
11.027 225.824 11.078 225.84 11.117 225.855 cv
11.16 225.879 11.191 225.898 11.207 225.922 cv
11.227 225.949 11.234 225.98 11.234 226.008 cv
11.234 226.059 11.207 226.125 11.148 226.211 cv
11.094 226.301 11.031 226.414 10.965 226.555 cv
10.902 226.695 10.844 226.863 10.781 227.051 cv
10.727 227.242 10.695 227.457 10.695 227.699 cv
10.695 227.922 10.723 228.113 10.77 228.277 cv
10.824 228.445 10.895 228.582 10.98 228.687 cv
11.074 228.793 11.18 228.875 11.305 228.926 cv
11.43 228.984 11.566 229.012 11.711 229.008 cv
11.914 229.012 12.082 228.961 12.219 228.855 cv
12.359 228.754 12.48 228.617 12.582 228.449 cv
12.688 228.285 12.781 228.094 12.863 227.879 cv
12.949 227.668 13.035 227.453 13.121 227.23 cv
13.211 227.012 13.313 226.793 13.418 226.574 cv
13.527 226.359 13.656 226.168 13.813 226 cv
13.969 225.836 14.156 225.703 14.375 225.602 cv
14.594 225.504 14.855 225.453 15.152 225.449 cv
cp
f
13.074 221.008 mo
13.66 221.008 14.242 221.047 14.816 221.117 cv
15.391 221.195 15.957 221.305 16.52 221.445 cv
17.078 221.594 17.629 221.77 18.172 221.98 cv
18.715 222.191 19.25 222.437 19.781 222.715 cv
19.805 222.734 19.828 222.758 19.852 222.785 cv
19.871 222.82 19.891 222.859 19.906 222.906 cv
19.922 222.957 19.93 223.016 19.938 223.082 cv
19.938 223.152 19.941 223.234 19.945 223.324 cv
19.941 223.461 19.934 223.566 19.926 223.641 cv
19.91 223.719 19.891 223.773 19.863 223.805 cv
19.832 223.84 19.797 223.855 19.754 223.852 cv
19.707 223.852 19.652 223.836 19.594 223.809 cv
18.543 223.332 17.473 222.973 16.375 222.727 cv
15.277 222.484 14.168 222.363 13.051 222.359 cv
11.941 222.363 10.836 222.484 9.734 222.727 cv
8.637 222.973 7.566 223.34 6.52 223.824 cv
6.477 223.848 6.434 223.855 6.387 223.848 cv
6.348 223.848 6.313 223.824 6.285 223.777 cv
6.262 223.738 6.242 223.68 6.223 223.605 cv
6.211 223.535 6.203 223.437 6.199 223.316 cv
6.203 223.207 6.207 223.117 6.211 223.043 cv
6.223 222.973 6.234 222.914 6.246 222.867 cv
6.266 222.824 6.281 222.793 6.293 222.77 cv
6.313 222.754 6.328 222.738 6.348 222.723 cv
7.414 222.191 8.512 221.77 9.633 221.465 cv
10.762 221.16 11.906 221.008 13.074 221.008 cv
cp
f
294.539 534.262 mo
294.535 534.367 294.52 534.457 294.484 534.527 cv
294.449 534.605 294.402 534.664 294.348 534.707 cv
294.289 534.758 294.227 534.793 294.16 534.809 cv
294.086 534.832 294.016 534.84 293.953 534.84 cv
293.508 534.84 li
293.367 534.84 293.246 534.828 293.141 534.797 cv
293.035 534.773 292.938 534.719 292.844 534.641 cv
292.75 534.566 292.656 534.465 292.563 534.332 cv
292.469 534.203 292.367 534.039 292.262 533.836 cv
289.188 528.098 li
289.023 527.805 288.859 527.496 288.699 527.168 cv
288.531 526.848 288.379 526.531 288.242 526.223 cv
288.227 526.223 li
288.234 526.598 288.242 526.98 288.25 527.367 cv
288.254 527.758 288.254 528.145 288.258 528.527 cv
288.258 534.613 li
288.254 534.652 288.242 534.687 288.223 534.719 cv
288.199 534.754 288.164 534.781 288.113 534.797 cv
288.059 534.816 287.988 534.828 287.906 534.844 cv
287.82 534.855 287.715 534.863 287.586 534.863 cv
287.449 534.863 287.34 534.855 287.258 534.844 cv
287.172 534.828 287.105 534.816 287.059 534.797 cv
287.008 534.781 286.973 534.754 286.949 534.719 cv
286.926 534.687 286.914 534.652 286.918 534.613 cv
286.918 525.309 li
286.914 525.102 286.973 524.953 287.094 524.863 cv
287.211 524.777 287.34 524.734 287.48 524.73 cv
288.141 524.73 li
288.293 524.734 288.426 524.746 288.531 524.77 cv
288.633 524.797 288.727 524.84 288.813 524.898 cv
288.895 524.961 288.973 525.043 289.055 525.148 cv
289.129 525.258 289.211 525.395 289.297 525.551 cv
291.664 529.977 li
291.809 530.25 291.949 530.516 292.086 530.77 cv
292.219 531.027 292.348 531.281 292.477 531.527 cv
292.598 531.781 292.723 532.027 292.848 532.266 cv
292.969 532.508 293.09 532.75 293.215 532.992 cv
293.223 532.992 li
293.211 532.586 293.203 532.156 293.203 531.711 cv
293.195 531.266 293.195 530.84 293.199 530.43 cv
293.199 524.957 li
293.195 524.922 293.207 524.887 293.23 524.855 cv
293.254 524.824 293.289 524.797 293.344 524.773 cv
293.391 524.75 293.461 524.734 293.547 524.723 cv
293.633 524.715 293.742 524.711 293.883 524.707 cv
294 524.711 294.105 524.715 294.195 524.723 cv
294.281 524.734 294.348 524.75 294.398 524.773 cv
294.445 524.797 294.48 524.824 294.504 524.855 cv
294.523 524.887 294.535 524.922 294.539 524.957 cv
cp
f
303.09 534.621 mo
303.086 534.668 303.078 534.703 303.063 534.727 cv
303.043 534.758 303.008 534.781 302.965 534.801 cv
302.918 534.82 302.859 534.832 302.785 534.848 cv
302.707 534.855 302.613 534.863 302.508 534.863 cv
302.383 534.863 302.285 534.855 302.215 534.848 cv
302.137 534.832 302.078 534.82 302.035 534.801 cv
301.988 534.781 301.957 534.758 301.945 534.727 cv
301.926 534.703 301.918 534.668 301.922 534.621 cv
301.922 533.695 li
301.52 534.141 301.125 534.461 300.738 534.66 cv
300.344 534.863 299.949 534.961 299.555 534.965 cv
299.082 534.961 298.688 534.887 298.371 534.73 cv
298.051 534.578 297.793 534.367 297.598 534.098 cv
297.395 533.832 297.254 533.52 297.172 533.16 cv
297.082 532.805 297.039 532.371 297.043 531.863 cv
297.043 527.609 li
297.039 527.57 297.047 527.535 297.07 527.504 cv
297.086 527.477 297.121 527.453 297.176 527.426 cv
297.223 527.406 297.293 527.391 297.379 527.379 cv
297.461 527.375 297.563 527.371 297.691 527.367 cv
297.813 527.371 297.918 527.375 298.004 527.379 cv
298.086 527.391 298.152 527.406 298.199 527.426 cv
298.246 527.453 298.281 527.477 298.305 527.504 cv
298.324 527.535 298.332 527.57 298.336 527.609 cv
298.336 531.691 li
298.332 532.105 298.363 532.434 298.426 532.68 cv
298.484 532.926 298.574 533.137 298.699 533.309 cv
298.816 533.488 298.973 533.621 299.164 533.715 cv
299.348 533.812 299.566 533.863 299.816 533.859 cv
300.137 533.863 300.457 533.746 300.781 533.516 cv
301.098 533.289 301.438 532.953 301.797 532.508 cv
301.797 527.609 li
301.797 527.57 301.805 527.535 301.824 527.504 cv
301.84 527.477 301.875 527.453 301.93 527.426 cv
301.98 527.406 302.047 527.391 302.129 527.379 cv
302.207 527.375 302.313 527.371 302.445 527.367 cv
302.566 527.371 302.672 527.375 302.758 527.379 cv
302.84 527.391 302.902 527.406 302.949 527.426 cv
302.992 527.453 303.027 527.477 303.055 527.504 cv
303.074 527.535 303.086 527.57 303.09 527.609 cv
cp
f
315.867 534.621 mo
315.863 534.668 315.855 534.703 315.836 534.727 cv
315.813 534.758 315.777 534.781 315.734 534.801 cv
315.684 534.82 315.617 534.832 315.539 534.848 cv
315.453 534.855 315.352 534.863 315.227 534.863 cv
315.094 534.863 314.984 534.855 314.906 534.848 cv
314.82 534.832 314.754 534.82 314.707 534.801 cv
314.652 534.781 314.617 534.758 314.602 534.727 cv
314.578 534.703 314.57 534.668 314.57 534.621 cv
314.57 530.359 li
314.57 530.066 314.543 529.797 314.492 529.551 cv
314.438 529.309 314.355 529.098 314.242 528.918 cv
314.129 528.742 313.984 528.605 313.809 528.512 cv
313.629 528.418 313.418 528.371 313.184 528.371 cv
312.887 528.371 312.59 528.488 312.293 528.715 cv
311.988 528.949 311.66 529.281 311.305 529.719 cv
311.305 534.621 li
311.301 534.668 311.289 534.703 311.273 534.727 cv
311.25 534.758 311.219 534.781 311.172 534.801 cv
311.121 534.82 311.055 534.832 310.973 534.848 cv
310.887 534.855 310.781 534.863 310.66 534.863 cv
310.539 534.863 310.438 534.855 310.352 534.848 cv
310.266 534.832 310.195 534.82 310.148 534.801 cv
310.094 534.781 310.063 534.758 310.047 534.727 cv
310.027 534.703 310.016 534.668 310.02 534.621 cv
310.02 530.359 li
310.016 530.066 309.988 529.797 309.934 529.551 cv
309.875 529.309 309.789 529.098 309.676 528.918 cv
309.563 528.742 309.418 528.605 309.246 528.512 cv
309.066 528.418 308.859 528.371 308.625 528.371 cv
308.324 528.371 308.027 528.488 307.727 528.715 cv
307.426 528.949 307.098 529.281 306.746 529.719 cv
306.746 534.621 li
306.742 534.668 306.73 534.703 306.715 534.727 cv
306.691 534.758 306.66 534.781 306.613 534.801 cv
306.566 534.82 306.5 534.832 306.422 534.848 cv
306.336 534.855 306.23 534.863 306.102 534.863 cv
305.973 534.863 305.867 534.855 305.789 534.848 cv
305.703 534.832 305.637 534.82 305.59 534.801 cv
305.535 534.781 305.504 534.758 305.488 534.727 cv
305.469 534.703 305.457 534.668 305.461 534.621 cv
305.461 527.609 li
305.457 527.57 305.465 527.535 305.484 527.504 cv
305.496 527.477 305.527 527.453 305.578 527.426 cv
305.621 527.406 305.684 527.391 305.758 527.379 cv
305.828 527.375 305.922 527.371 306.047 527.367 cv
306.156 527.371 306.254 527.375 306.332 527.379 cv
306.406 527.391 306.465 527.406 306.508 527.426 cv
306.547 527.453 306.574 527.477 306.594 527.504 cv
306.609 527.535 306.617 527.57 306.621 527.609 cv
306.621 528.535 li
307.012 528.094 307.395 527.773 307.77 527.566 cv
308.137 527.363 308.516 527.258 308.898 527.258 cv
309.188 527.258 309.445 527.293 309.68 527.359 cv
309.906 527.43 310.113 527.523 310.293 527.645 cv
310.469 527.766 310.617 527.91 310.746 528.078 cv
310.867 528.25 310.973 528.441 311.059 528.645 cv
311.289 528.395 311.512 528.18 311.723 528 cv
311.934 527.828 312.137 527.684 312.332 527.57 cv
312.527 527.465 312.715 527.387 312.898 527.332 cv
313.082 527.285 313.27 527.258 313.457 527.258 cv
313.91 527.258 314.289 527.34 314.594 527.496 cv
314.898 527.66 315.145 527.871 315.34 528.133 cv
315.527 528.398 315.664 528.707 315.746 529.062 cv
315.824 529.418 315.863 529.793 315.867 530.187 cv
cp
f
324.664 531.02 mo
324.66 531.629 324.594 532.18 324.465 532.664 cv
324.328 533.152 324.133 533.566 323.879 533.906 cv
323.621 534.25 323.305 534.512 322.934 534.691 cv
322.559 534.875 322.133 534.961 321.648 534.965 cv
321.422 534.961 321.215 534.941 321.027 534.898 cv
320.84 534.852 320.652 534.781 320.473 534.684 cv
320.285 534.586 320.105 534.461 319.926 534.309 cv
319.742 534.16 319.551 533.98 319.352 533.766 cv
319.352 534.621 li
319.352 534.668 319.34 534.703 319.32 534.73 cv
319.297 534.766 319.262 534.789 319.219 534.805 cv
319.168 534.82 319.109 534.832 319.043 534.848 cv
318.969 534.855 318.879 534.863 318.773 534.863 cv
318.664 534.863 318.578 534.855 318.508 534.848 cv
318.434 534.832 318.371 534.82 318.328 534.805 cv
318.277 534.789 318.246 534.766 318.234 534.73 cv
318.215 534.703 318.207 534.668 318.211 534.621 cv
318.211 524.211 li
318.207 524.172 318.219 524.137 318.238 524.102 cv
318.254 524.074 318.285 524.047 318.34 524.023 cv
318.387 524.004 318.453 523.988 318.539 523.977 cv
318.617 523.969 318.723 523.965 318.852 523.961 cv
318.98 523.965 319.086 523.969 319.172 523.977 cv
319.25 523.988 319.316 524.004 319.363 524.023 cv
319.41 524.047 319.441 524.074 319.465 524.102 cv
319.48 524.137 319.492 524.172 319.496 524.211 cv
319.496 528.41 li
319.703 528.199 319.906 528.02 320.102 527.875 cv
320.297 527.73 320.484 527.613 320.672 527.52 cv
320.855 527.434 321.043 527.367 321.234 527.32 cv
321.418 527.281 321.617 527.258 321.828 527.258 cv
322.332 527.258 322.766 527.359 323.133 527.562 cv
323.492 527.766 323.785 528.039 324.012 528.375 cv
324.234 528.719 324.402 529.117 324.508 529.574 cv
324.609 530.031 324.66 530.512 324.664 531.02 cv
cp
323.332 531.168 mo
323.328 530.812 323.301 530.465 323.25 530.125 cv
323.191 529.789 323.098 529.492 322.961 529.23 cv
322.824 528.973 322.645 528.762 322.422 528.602 cv
322.195 528.445 321.914 528.367 321.582 528.363 cv
321.414 528.367 321.25 528.391 321.09 528.434 cv
320.926 528.484 320.762 528.562 320.594 528.668 cv
320.426 528.781 320.25 528.922 320.074 529.09 cv
319.891 529.266 319.699 529.48 319.496 529.734 cv
319.496 532.531 li
319.852 532.965 320.191 533.297 320.516 533.52 cv
320.84 533.75 321.176 533.863 321.527 533.859 cv
321.848 533.863 322.125 533.785 322.359 533.625 cv
322.586 533.473 322.773 533.266 322.918 533.004 cv
323.063 532.75 323.168 532.461 323.234 532.141 cv
323.297 531.824 323.328 531.5 323.332 531.168 cv
cp
f
332.574 530.812 mo
332.57 531.016 332.52 531.156 332.422 531.242 cv
332.316 531.328 332.199 531.371 332.074 531.371 cv
327.457 531.371 li
327.453 531.762 327.492 532.113 327.574 532.426 cv
327.648 532.738 327.781 533.008 327.965 533.227 cv
328.145 533.453 328.379 533.625 328.676 533.742 cv
328.965 533.867 329.324 533.926 329.75 533.922 cv
330.082 533.926 330.379 533.898 330.641 533.84 cv
330.902 533.789 331.129 533.727 331.32 533.656 cv
331.508 533.59 331.664 533.531 331.789 533.473 cv
331.91 533.422 332.004 533.395 332.066 533.391 cv
332.102 533.395 332.133 533.402 332.164 533.418 cv
332.191 533.437 332.215 533.465 332.234 533.5 cv
332.246 533.539 332.258 533.59 332.27 533.652 cv
332.273 533.719 332.277 533.797 332.281 533.891 cv
332.277 533.961 332.273 534.02 332.273 534.066 cv
332.266 534.113 332.262 534.156 332.254 534.195 cv
332.246 534.234 332.23 534.27 332.215 534.301 cv
332.191 534.332 332.168 534.363 332.145 534.391 cv
332.113 534.422 332.031 534.469 331.891 534.531 cv
331.75 534.598 331.566 534.66 331.344 534.723 cv
331.117 534.785 330.859 534.84 330.566 534.891 cv
330.273 534.937 329.961 534.961 329.629 534.965 cv
329.051 534.961 328.543 534.883 328.113 534.723 cv
327.676 534.562 327.313 534.324 327.02 534.008 cv
326.719 533.691 326.496 533.297 326.348 532.816 cv
326.199 532.34 326.125 531.781 326.125 531.145 cv
326.125 530.547 326.199 530.008 326.355 529.523 cv
326.508 529.047 326.734 528.637 327.031 528.301 cv
327.324 527.965 327.68 527.707 328.094 527.527 cv
328.508 527.348 328.973 527.258 329.488 527.258 cv
330.039 527.258 330.508 527.348 330.895 527.523 cv
331.281 527.703 331.598 527.941 331.852 528.238 cv
332.098 528.539 332.281 528.891 332.398 529.289 cv
332.512 529.695 332.57 530.125 332.574 530.578 cv
cp
331.281 530.43 mo
331.297 529.754 331.145 529.223 330.828 528.84 cv
330.512 528.457 330.043 528.266 329.426 528.262 cv
329.102 528.266 328.82 528.324 328.582 528.441 cv
328.34 528.562 328.141 528.723 327.98 528.918 cv
327.816 529.117 327.691 529.348 327.605 529.609 cv
327.516 529.871 327.465 530.145 327.457 530.43 cv
cp
f
338.641 528.066 mo
338.637 528.184 338.637 528.281 338.633 528.355 cv
338.625 528.437 338.613 528.5 338.602 528.539 cv
338.582 528.586 338.563 528.617 338.543 528.641 cv
338.516 528.664 338.484 528.676 338.445 528.676 cv
338.402 528.676 338.352 528.664 338.293 528.641 cv
338.23 528.617 338.16 528.594 338.09 528.57 cv
338.012 528.547 337.93 528.527 337.836 528.504 cv
337.742 528.488 337.641 528.477 337.531 528.473 cv
337.398 528.477 337.27 528.504 337.148 528.551 cv
337.023 528.605 336.895 528.691 336.758 528.809 cv
336.617 528.934 336.473 529.09 336.324 529.285 cv
336.172 529.48 336.004 529.723 335.824 530.008 cv
335.824 534.621 li
335.82 534.668 335.809 534.703 335.793 534.727 cv
335.77 534.758 335.738 534.781 335.691 534.801 cv
335.645 534.82 335.578 534.832 335.5 534.848 cv
335.414 534.855 335.309 534.863 335.18 534.863 cv
335.051 534.863 334.945 534.855 334.867 534.848 cv
334.781 534.832 334.715 534.82 334.668 534.801 cv
334.613 534.781 334.582 534.758 334.566 534.727 cv
334.547 534.703 334.535 534.668 334.539 534.621 cv
334.539 527.609 li
334.535 527.57 334.543 527.535 334.563 527.504 cv
334.574 527.477 334.605 527.453 334.656 527.426 cv
334.699 527.406 334.762 527.391 334.836 527.379 cv
334.906 527.375 335 527.371 335.125 527.367 cv
335.234 527.371 335.332 527.375 335.41 527.379 cv
335.484 527.391 335.543 527.406 335.586 527.426 cv
335.625 527.453 335.652 527.477 335.672 527.504 cv
335.688 527.535 335.695 527.57 335.699 527.609 cv
335.699 528.629 li
335.887 528.348 336.07 528.121 336.242 527.945 cv
336.41 527.77 336.57 527.629 336.723 527.527 cv
336.871 527.426 337.02 527.355 337.168 527.316 cv
337.316 527.277 337.465 527.258 337.617 527.258 cv
337.684 527.258 337.762 527.262 337.848 527.27 cv
337.934 527.277 338.023 527.293 338.117 527.312 cv
338.211 527.336 338.293 527.359 338.371 527.383 cv
338.441 527.41 338.496 527.437 338.531 527.461 cv
338.559 527.492 338.578 527.516 338.594 527.535 cv
338.602 527.562 338.613 527.594 338.621 527.625 cv
338.629 527.664 338.633 527.715 338.637 527.785 cv
338.637 527.855 338.637 527.949 338.641 528.066 cv
cp
f
350.398 531.035 mo
350.395 531.613 350.32 532.141 350.172 532.617 cv
350.02 533.102 349.793 533.516 349.496 533.859 cv
349.195 534.211 348.82 534.48 348.375 534.672 cv
347.922 534.867 347.402 534.961 346.813 534.965 cv
346.234 534.961 345.73 534.879 345.305 534.707 cv
344.875 534.539 344.52 534.289 344.234 533.961 cv
343.945 533.633 343.73 533.238 343.594 532.77 cv
343.453 532.305 343.387 531.773 343.387 531.176 cv
343.387 530.609 343.457 530.082 343.605 529.602 cv
343.75 529.121 343.977 528.707 344.277 528.355 cv
344.574 528.008 344.945 527.738 345.395 527.547 cv
345.84 527.355 346.363 527.258 346.961 527.258 cv
347.539 527.258 348.039 527.344 348.469 527.516 cv
348.895 527.687 349.254 527.937 349.539 528.266 cv
349.824 528.594 350.039 528.992 350.184 529.457 cv
350.324 529.926 350.395 530.453 350.398 531.035 cv
cp
349.066 531.121 mo
349.063 530.746 349.027 530.387 348.961 530.047 cv
348.887 529.711 348.77 529.418 348.609 529.16 cv
348.445 528.91 348.227 528.707 347.949 528.555 cv
347.668 528.41 347.32 528.336 346.91 528.332 cv
346.523 528.336 346.195 528.402 345.922 528.535 cv
345.645 528.672 345.418 528.863 345.242 529.109 cv
345.063 529.355 344.93 529.648 344.848 529.984 cv
344.758 530.324 344.715 530.691 344.719 531.09 cv
344.715 531.477 344.75 531.84 344.824 532.176 cv
344.891 532.516 345.008 532.809 345.176 533.059 cv
345.34 533.312 345.563 533.516 345.84 533.66 cv
346.117 533.812 346.465 533.887 346.879 533.883 cv
347.254 533.887 347.582 533.816 347.863 533.68 cv
348.141 533.547 348.367 533.359 348.547 533.109 cv
348.723 532.867 348.852 532.574 348.938 532.238 cv
349.02 531.902 349.063 531.531 349.066 531.121 cv
cp
f
356.133 524.723 mo
356.129 524.824 356.125 524.902 356.117 524.961 cv
356.105 525.023 356.094 525.074 356.082 525.105 cv
356.066 525.145 356.051 525.168 356.031 525.18 cv
356.008 525.195 355.98 525.203 355.953 525.199 cv
355.914 525.203 355.867 525.191 355.816 525.164 cv
355.758 525.145 355.691 525.117 355.617 525.086 cv
355.535 525.059 355.445 525.031 355.34 525.008 cv
355.23 524.984 355.105 524.973 354.973 524.973 cv
354.777 524.973 354.613 525.004 354.48 525.066 cv
354.34 525.129 354.23 525.227 354.152 525.359 cv
354.066 525.492 354.008 525.664 353.973 525.875 cv
353.934 526.086 353.914 526.344 353.918 526.641 cv
353.918 527.406 li
355.484 527.406 li
355.523 527.41 355.559 527.418 355.59 527.434 cv
355.617 527.453 355.645 527.484 355.668 527.527 cv
355.691 527.574 355.707 527.633 355.723 527.695 cv
355.73 527.766 355.738 527.848 355.742 527.941 cv
355.738 528.133 355.715 528.266 355.672 528.348 cv
355.621 528.434 355.559 528.477 355.484 528.473 cv
353.918 528.473 li
353.918 534.621 li
353.914 534.668 353.906 534.703 353.887 534.727 cv
353.863 534.758 353.828 534.781 353.781 534.801 cv
353.73 534.82 353.664 534.832 353.582 534.848 cv
353.496 534.855 353.391 534.863 353.273 534.863 cv
353.145 534.863 353.043 534.855 352.961 534.848 cv
352.875 534.832 352.809 534.82 352.762 534.801 cv
352.711 534.781 352.676 534.758 352.656 534.727 cv
352.633 534.703 352.621 534.668 352.625 534.621 cv
352.625 528.473 li
351.637 528.473 li
351.551 528.477 351.488 528.434 351.449 528.348 cv
351.406 528.266 351.383 528.133 351.387 527.941 cv
351.383 527.848 351.391 527.766 351.402 527.695 cv
351.41 527.633 351.426 527.574 351.449 527.527 cv
351.469 527.484 351.492 527.453 351.527 527.434 cv
351.555 527.418 351.594 527.41 351.637 527.406 cv
352.625 527.406 li
352.625 526.68 li
352.621 526.195 352.668 525.777 352.762 525.422 cv
352.852 525.074 352.988 524.785 353.176 524.562 cv
353.359 524.34 353.594 524.176 353.883 524.066 cv
354.164 523.961 354.5 523.906 354.887 523.906 cv
355.063 523.906 355.238 523.926 355.414 523.957 cv
355.582 523.996 355.715 524.031 355.813 524.066 cv
355.902 524.109 355.965 524.145 356 524.172 cv
356.027 524.207 356.055 524.246 356.078 524.293 cv
356.098 524.344 356.109 524.406 356.121 524.473 cv
356.125 524.547 356.129 524.629 356.133 524.723 cv
cp
f
366.328 531.988 mo
366.324 532.461 366.238 532.883 366.066 533.25 cv
365.891 533.625 365.648 533.937 365.34 534.191 cv
365.031 534.449 364.668 534.641 364.25 534.77 cv
363.828 534.898 363.379 534.961 362.898 534.965 cv
362.559 534.961 362.242 534.934 361.957 534.879 cv
361.668 534.82 361.414 534.754 361.188 534.668 cv
360.961 534.59 360.77 534.504 360.617 534.41 cv
360.461 534.324 360.355 534.246 360.297 534.184 cv
360.238 534.121 360.195 534.043 360.168 533.949 cv
360.137 533.855 360.121 533.727 360.125 533.562 cv
360.121 533.449 360.125 533.355 360.141 533.277 cv
360.148 533.203 360.164 533.141 360.188 533.094 cv
360.203 533.047 360.23 533.016 360.266 532.996 cv
360.293 532.98 360.328 532.973 360.371 532.969 cv
360.441 532.973 360.543 533.016 360.68 533.102 cv
360.809 533.191 360.98 533.289 361.191 533.391 cv
361.398 533.5 361.648 533.598 361.941 533.684 cv
362.234 533.777 362.574 533.82 362.961 533.82 cv
363.25 533.82 363.516 533.781 363.758 533.703 cv
363.996 533.625 364.203 533.516 364.383 533.371 cv
364.555 533.23 364.691 533.055 364.785 532.844 cv
364.879 532.637 364.926 532.402 364.926 532.137 cv
364.926 531.855 364.859 531.609 364.73 531.402 cv
364.598 531.203 364.426 531.027 364.215 530.871 cv
364 530.723 363.758 530.582 363.484 530.449 cv
363.211 530.324 362.93 530.191 362.648 530.059 cv
362.359 529.926 362.082 529.781 361.813 529.617 cv
361.543 529.461 361.301 529.27 361.09 529.051 cv
360.871 528.832 360.699 528.578 360.57 528.281 cv
360.434 527.992 360.367 527.641 360.371 527.227 cv
360.367 526.809 360.445 526.434 360.602 526.102 cv
360.754 525.773 360.965 525.496 361.242 525.27 cv
361.512 525.051 361.836 524.879 362.215 524.762 cv
362.59 524.645 363 524.586 363.438 524.586 cv
363.656 524.586 363.879 524.605 364.109 524.645 cv
364.332 524.684 364.543 524.734 364.746 524.797 cv
364.941 524.863 365.121 524.937 365.281 525.016 cv
365.434 525.098 365.535 525.164 365.59 525.211 cv
365.637 525.266 365.672 525.305 365.688 525.328 cv
365.703 525.359 365.715 525.395 365.727 525.437 cv
365.734 525.484 365.742 525.539 365.75 525.598 cv
365.754 525.664 365.758 525.742 365.758 525.84 cv
365.758 525.934 365.754 526.02 365.746 526.09 cv
365.738 526.168 365.727 526.227 365.711 526.273 cv
365.695 526.32 365.672 526.355 365.645 526.379 cv
365.613 526.402 365.582 526.414 365.547 526.414 cv
365.488 526.414 365.398 526.379 365.277 526.309 cv
365.152 526.238 365 526.156 364.828 526.062 cv
364.648 525.973 364.441 525.891 364.203 525.812 cv
363.957 525.738 363.688 525.699 363.391 525.699 cv
363.109 525.699 362.863 525.738 362.656 525.812 cv
362.445 525.891 362.273 525.992 362.141 526.113 cv
362.004 526.238 361.902 526.383 361.836 526.555 cv
361.77 526.727 361.738 526.91 361.738 527.102 cv
361.738 527.387 361.801 527.629 361.93 527.828 cv
362.059 528.031 362.23 528.211 362.449 528.363 cv
362.66 528.523 362.906 528.664 363.184 528.793 cv
363.457 528.926 363.738 529.059 364.027 529.187 cv
364.313 529.32 364.594 529.465 364.867 529.621 cv
365.141 529.781 365.387 529.969 365.605 530.184 cv
365.82 530.402 365.992 530.656 366.129 530.949 cv
366.258 531.242 366.324 531.59 366.328 531.988 cv
cp
f
374.094 534.621 mo
374.09 534.668 374.082 534.703 374.066 534.727 cv
374.047 534.758 374.012 534.781 373.969 534.801 cv
373.922 534.82 373.863 534.832 373.789 534.848 cv
373.711 534.855 373.617 534.863 373.512 534.863 cv
373.387 534.863 373.289 534.855 373.219 534.848 cv
373.141 534.832 373.082 534.82 373.039 534.801 cv
372.992 534.781 372.961 534.758 372.949 534.727 cv
372.93 534.703 372.922 534.668 372.926 534.621 cv
372.926 533.695 li
372.523 534.141 372.129 534.461 371.742 534.66 cv
371.348 534.863 370.953 534.961 370.559 534.965 cv
370.086 534.961 369.691 534.887 369.375 534.73 cv
369.055 534.578 368.797 534.367 368.602 534.098 cv
368.398 533.832 368.258 533.52 368.176 533.16 cv
368.086 532.805 368.043 532.371 368.047 531.863 cv
368.047 527.609 li
368.043 527.57 368.051 527.535 368.074 527.504 cv
368.09 527.477 368.125 527.453 368.18 527.426 cv
368.227 527.406 368.297 527.391 368.383 527.379 cv
368.465 527.375 368.566 527.371 368.695 527.367 cv
368.816 527.371 368.922 527.375 369.008 527.379 cv
369.09 527.391 369.156 527.406 369.203 527.426 cv
369.25 527.453 369.285 527.477 369.309 527.504 cv
369.328 527.535 369.336 527.57 369.34 527.609 cv
369.34 531.691 li
369.336 532.105 369.367 532.434 369.43 532.68 cv
369.488 532.926 369.578 533.137 369.703 533.309 cv
369.82 533.488 369.977 533.621 370.168 533.715 cv
370.352 533.812 370.57 533.863 370.82 533.859 cv
371.141 533.863 371.461 533.746 371.785 533.516 cv
372.102 533.289 372.441 532.953 372.801 532.508 cv
372.801 527.609 li
372.801 527.57 372.809 527.535 372.828 527.504 cv
372.844 527.477 372.879 527.453 372.934 527.426 cv
372.984 527.406 373.051 527.391 373.133 527.379 cv
373.211 527.375 373.316 527.371 373.449 527.367 cv
373.57 527.371 373.676 527.375 373.762 527.379 cv
373.844 527.391 373.906 527.406 373.953 527.426 cv
373.996 527.453 374.031 527.477 374.059 527.504 cv
374.078 527.535 374.09 527.57 374.094 527.609 cv
cp
f
382.953 531.02 mo
382.949 531.629 382.883 532.18 382.754 532.664 cv
382.617 533.152 382.422 533.566 382.168 533.906 cv
381.91 534.25 381.594 534.512 381.223 534.691 cv
380.848 534.875 380.422 534.961 379.938 534.965 cv
379.711 534.961 379.504 534.941 379.316 534.898 cv
379.129 534.852 378.941 534.781 378.762 534.684 cv
378.574 534.586 378.395 534.461 378.215 534.309 cv
378.031 534.16 377.84 533.98 377.641 533.766 cv
377.641 534.621 li
377.641 534.668 377.629 534.703 377.609 534.73 cv
377.586 534.766 377.551 534.789 377.508 534.805 cv
377.457 534.82 377.398 534.832 377.332 534.848 cv
377.258 534.855 377.168 534.863 377.063 534.863 cv
376.953 534.863 376.867 534.855 376.797 534.848 cv
376.723 534.832 376.66 534.82 376.617 534.805 cv
376.566 534.789 376.535 534.766 376.523 534.73 cv
376.504 534.703 376.496 534.668 376.5 534.621 cv
376.5 524.211 li
376.496 524.172 376.508 524.137 376.527 524.102 cv
376.543 524.074 376.574 524.047 376.629 524.023 cv
376.676 524.004 376.742 523.988 376.828 523.977 cv
376.906 523.969 377.012 523.965 377.141 523.961 cv
377.27 523.965 377.375 523.969 377.461 523.977 cv
377.539 523.988 377.605 524.004 377.652 524.023 cv
377.699 524.047 377.73 524.074 377.754 524.102 cv
377.77 524.137 377.781 524.172 377.785 524.211 cv
377.785 528.41 li
377.992 528.199 378.195 528.02 378.391 527.875 cv
378.586 527.73 378.773 527.613 378.961 527.52 cv
379.145 527.434 379.332 527.367 379.523 527.32 cv
379.707 527.281 379.906 527.258 380.117 527.258 cv
380.621 527.258 381.055 527.359 381.422 527.562 cv
381.781 527.766 382.074 528.039 382.301 528.375 cv
382.523 528.719 382.691 529.117 382.797 529.574 cv
382.898 530.031 382.949 530.512 382.953 531.02 cv
cp
381.621 531.168 mo
381.617 530.812 381.59 530.465 381.539 530.125 cv
381.48 529.789 381.387 529.492 381.25 529.23 cv
381.113 528.973 380.934 528.762 380.711 528.602 cv
380.484 528.445 380.203 528.367 379.871 528.363 cv
379.703 528.367 379.539 528.391 379.379 528.434 cv
379.215 528.484 379.051 528.562 378.883 528.668 cv
378.715 528.781 378.539 528.922 378.363 529.09 cv
378.18 529.266 377.988 529.48 377.785 529.734 cv
377.785 532.531 li
378.141 532.965 378.48 533.297 378.805 533.52 cv
379.129 533.75 379.465 533.863 379.816 533.859 cv
380.137 533.863 380.414 533.785 380.648 533.625 cv
380.875 533.473 381.063 533.266 381.207 533.004 cv
381.352 532.75 381.457 532.461 381.523 532.141 cv
381.586 531.824 381.617 531.5 381.621 531.168 cv
cp
f
388.086 530.883 mo
388.086 531.086 388.063 531.223 388.016 531.301 cv
387.969 531.379 387.898 531.418 387.813 531.418 cv
384.555 531.418 li
384.461 531.418 384.395 531.379 384.348 531.297 cv
384.301 531.219 384.277 531.082 384.277 530.883 cv
384.277 530.687 384.301 530.547 384.348 530.469 cv
384.395 530.391 384.461 530.352 384.555 530.352 cv
387.813 530.352 li
387.852 530.352 387.891 530.359 387.926 530.375 cv
387.957 530.391 387.984 530.422 388.012 530.465 cv
388.031 530.512 388.051 530.566 388.066 530.633 cv
388.078 530.703 388.086 530.789 388.086 530.883 cv
cp
f
391.34 534.613 mo
391.336 534.656 391.328 534.691 391.309 534.723 cv
391.285 534.754 391.246 534.781 391.199 534.797 cv
391.145 534.816 391.078 534.828 390.992 534.844 cv
390.906 534.855 390.797 534.863 390.672 534.863 cv
390.543 534.863 390.438 534.855 390.352 534.844 cv
390.262 534.828 390.191 534.816 390.141 534.797 cv
390.086 534.781 390.051 534.754 390.031 534.723 cv
390.008 534.691 389.996 534.656 390 534.613 cv
390 524.934 li
389.996 524.895 390.008 524.859 390.035 524.824 cv
390.055 524.797 390.094 524.77 390.152 524.75 cv
390.203 524.734 390.273 524.719 390.363 524.703 cv
390.445 524.691 390.547 524.687 390.672 524.684 cv
390.797 524.687 390.906 524.691 390.992 524.703 cv
391.078 524.719 391.145 524.734 391.199 524.75 cv
391.246 524.77 391.285 524.797 391.309 524.824 cv
391.328 524.859 391.336 524.895 391.34 524.934 cv
cp
f
404.328 534.621 mo
404.324 534.668 404.316 534.703 404.297 534.727 cv
404.273 534.758 404.238 534.781 404.195 534.801 cv
404.145 534.82 404.078 534.832 404 534.848 cv
403.914 534.855 403.813 534.863 403.688 534.863 cv
403.555 534.863 403.445 534.855 403.367 534.848 cv
403.281 534.832 403.215 534.82 403.168 534.801 cv
403.113 534.781 403.078 534.758 403.063 534.727 cv
403.039 534.703 403.031 534.668 403.031 534.621 cv
403.031 530.359 li
403.031 530.066 403.004 529.797 402.953 529.551 cv
402.898 529.309 402.816 529.098 402.703 528.918 cv
402.59 528.742 402.445 528.605 402.27 528.512 cv
402.09 528.418 401.879 528.371 401.645 528.371 cv
401.348 528.371 401.051 528.488 400.754 528.715 cv
400.449 528.949 400.121 529.281 399.766 529.719 cv
399.766 534.621 li
399.762 534.668 399.75 534.703 399.734 534.727 cv
399.711 534.758 399.68 534.781 399.633 534.801 cv
399.582 534.82 399.516 534.832 399.434 534.848 cv
399.348 534.855 399.242 534.863 399.121 534.863 cv
399 534.863 398.898 534.855 398.813 534.848 cv
398.727 534.832 398.656 534.82 398.609 534.801 cv
398.555 534.781 398.523 534.758 398.508 534.727 cv
398.488 534.703 398.477 534.668 398.48 534.621 cv
398.48 530.359 li
398.477 530.066 398.449 529.797 398.395 529.551 cv
398.336 529.309 398.25 529.098 398.137 528.918 cv
398.023 528.742 397.879 528.605 397.707 528.512 cv
397.527 528.418 397.32 528.371 397.086 528.371 cv
396.785 528.371 396.488 528.488 396.188 528.715 cv
395.887 528.949 395.559 529.281 395.207 529.719 cv
395.207 534.621 li
395.203 534.668 395.191 534.703 395.176 534.727 cv
395.152 534.758 395.121 534.781 395.074 534.801 cv
395.027 534.82 394.961 534.832 394.883 534.848 cv
394.797 534.855 394.691 534.863 394.563 534.863 cv
394.434 534.863 394.328 534.855 394.25 534.848 cv
394.164 534.832 394.098 534.82 394.051 534.801 cv
393.996 534.781 393.965 534.758 393.949 534.727 cv
393.93 534.703 393.918 534.668 393.922 534.621 cv
393.922 527.609 li
393.918 527.57 393.926 527.535 393.945 527.504 cv
393.957 527.477 393.988 527.453 394.039 527.426 cv
394.082 527.406 394.145 527.391 394.219 527.379 cv
394.289 527.375 394.383 527.371 394.508 527.367 cv
394.617 527.371 394.715 527.375 394.793 527.379 cv
394.867 527.391 394.926 527.406 394.969 527.426 cv
395.008 527.453 395.035 527.477 395.055 527.504 cv
395.07 527.535 395.078 527.57 395.082 527.609 cv
395.082 528.535 li
395.473 528.094 395.855 527.773 396.23 527.566 cv
396.598 527.363 396.977 527.258 397.359 527.258 cv
397.648 527.258 397.906 527.293 398.141 527.359 cv
398.367 527.43 398.574 527.523 398.754 527.645 cv
398.93 527.766 399.078 527.91 399.207 528.078 cv
399.328 528.25 399.434 528.441 399.52 528.645 cv
399.75 528.395 399.973 528.18 400.184 528 cv
400.395 527.828 400.598 527.684 400.793 527.57 cv
400.988 527.465 401.176 527.387 401.359 527.332 cv
401.543 527.285 401.73 527.258 401.918 527.258 cv
402.371 527.258 402.75 527.34 403.055 527.496 cv
403.359 527.66 403.605 527.871 403.801 528.133 cv
403.988 528.398 404.125 528.707 404.207 529.062 cv
404.285 529.418 404.324 529.793 404.328 530.187 cv
cp
f
411.957 534.629 mo
411.953 534.691 411.934 534.738 411.895 534.77 cv
411.852 534.801 411.793 534.824 411.723 534.84 cv
411.645 534.855 411.539 534.863 411.402 534.863 cv
411.266 534.863 411.156 534.855 411.078 534.84 cv
410.992 534.824 410.934 534.801 410.902 534.77 cv
410.863 534.738 410.848 534.691 410.852 534.629 cv
410.852 533.93 li
410.543 534.258 410.199 534.512 409.824 534.691 cv
409.445 534.875 409.047 534.961 408.629 534.965 cv
408.254 534.961 407.922 534.914 407.625 534.82 cv
407.328 534.723 407.074 534.586 406.863 534.402 cv
406.652 534.223 406.488 534 406.371 533.734 cv
406.254 533.473 406.195 533.172 406.199 532.828 cv
406.195 532.437 406.273 532.094 406.438 531.801 cv
406.594 531.512 406.828 531.27 407.133 531.078 cv
407.434 530.887 407.801 530.742 408.238 530.645 cv
408.672 530.551 409.164 530.504 409.711 530.5 cv
410.68 530.5 li
410.68 529.953 li
410.676 529.684 410.648 529.445 410.594 529.238 cv
410.535 529.031 410.441 528.859 410.316 528.719 cv
410.184 528.582 410.02 528.477 409.82 528.406 cv
409.613 528.336 409.363 528.301 409.074 528.301 cv
408.754 528.301 408.469 528.34 408.219 528.414 cv
407.961 528.492 407.742 528.574 407.555 528.664 cv
407.367 528.758 407.207 528.844 407.082 528.914 cv
406.949 528.992 406.855 529.027 406.797 529.027 cv
406.754 529.027 406.719 529.02 406.688 528.996 cv
406.656 528.98 406.629 528.949 406.605 528.902 cv
406.582 528.863 406.563 528.809 406.555 528.742 cv
406.539 528.68 406.535 528.609 406.539 528.527 cv
406.535 528.402 406.543 528.297 406.566 528.219 cv
406.582 528.145 406.629 528.074 406.699 528.004 cv
406.77 527.937 406.891 527.859 407.063 527.77 cv
407.234 527.68 407.43 527.598 407.652 527.52 cv
407.875 527.449 408.121 527.387 408.387 527.332 cv
408.652 527.285 408.918 527.258 409.191 527.258 cv
409.691 527.258 410.121 527.316 410.473 527.43 cv
410.824 527.547 411.109 527.715 411.332 527.934 cv
411.547 528.156 411.707 528.43 411.809 528.754 cv
411.906 529.086 411.953 529.469 411.957 529.898 cv
cp
410.68 531.426 mo
409.578 531.426 li
409.223 531.43 408.918 531.461 408.66 531.516 cv
408.398 531.578 408.184 531.664 408.012 531.781 cv
407.84 531.898 407.715 532.039 407.637 532.203 cv
407.555 532.367 407.512 532.555 407.516 532.766 cv
407.512 533.133 407.629 533.426 407.859 533.637 cv
408.09 533.855 408.414 533.961 408.832 533.961 cv
409.168 533.961 409.48 533.875 409.77 533.703 cv
410.059 533.531 410.359 533.27 410.68 532.914 cv
cp
f
420.176 527.926 mo
420.172 528.109 420.148 528.242 420.102 528.32 cv
420.051 528.402 419.988 528.441 419.914 528.441 cv
418.906 528.441 li
419.086 528.629 419.215 528.836 419.289 529.062 cv
419.359 529.289 419.395 529.523 419.398 529.766 cv
419.395 530.172 419.328 530.531 419.203 530.844 cv
419.07 531.156 418.887 531.422 418.645 531.633 cv
418.402 531.852 418.113 532.016 417.785 532.129 cv
417.449 532.246 417.082 532.305 416.68 532.301 cv
416.391 532.305 416.117 532.266 415.863 532.187 cv
415.602 532.113 415.406 532.02 415.27 531.902 cv
415.176 532 415.098 532.105 415.039 532.223 cv
414.977 532.344 414.945 532.48 414.949 532.633 cv
414.945 532.816 415.031 532.969 415.203 533.086 cv
415.371 533.211 415.594 533.273 415.875 533.281 cv
417.707 533.359 li
418.055 533.371 418.371 533.418 418.664 533.504 cv
418.953 533.59 419.207 533.715 419.422 533.871 cv
419.633 534.031 419.801 534.223 419.922 534.453 cv
420.039 534.687 420.098 534.957 420.102 535.262 cv
420.098 535.582 420.031 535.887 419.898 536.18 cv
419.762 536.469 419.555 536.723 419.277 536.945 cv
418.996 537.164 418.641 537.34 418.211 537.469 cv
417.781 537.594 417.273 537.656 416.688 537.66 cv
416.117 537.656 415.633 537.609 415.238 537.516 cv
414.84 537.418 414.516 537.285 414.262 537.121 cv
414.008 536.953 413.824 536.758 413.711 536.527 cv
413.594 536.293 413.535 536.039 413.539 535.773 cv
413.535 535.602 413.555 535.437 413.602 535.277 cv
413.641 535.113 413.703 534.961 413.789 534.816 cv
413.871 534.672 413.98 534.535 414.109 534.398 cv
414.234 534.27 414.379 534.137 414.551 534.008 cv
414.293 533.879 414.105 533.715 413.984 533.516 cv
413.863 533.32 413.805 533.109 413.805 532.875 cv
413.805 532.562 413.867 532.277 413.996 532.027 cv
414.125 531.777 414.285 531.555 414.48 531.355 cv
414.316 531.164 414.191 530.949 414.098 530.707 cv
414.004 530.469 413.957 530.176 413.957 529.828 cv
413.957 529.434 414.023 529.074 414.16 528.754 cv
414.293 528.437 414.48 528.172 414.723 527.953 cv
414.961 527.738 415.246 527.57 415.582 527.449 cv
415.914 527.336 416.281 527.277 416.68 527.273 cv
416.891 527.277 417.09 527.289 417.273 527.309 cv
417.457 527.336 417.629 527.367 417.793 527.406 cv
419.914 527.406 li
420 527.41 420.066 527.453 420.109 527.535 cv
420.152 527.625 420.172 527.754 420.176 527.926 cv
cp
418.168 529.773 mo
418.164 529.301 418.031 528.93 417.773 528.656 cv
417.508 528.391 417.137 528.254 416.656 528.254 cv
416.402 528.254 416.184 528.297 416.004 528.379 cv
415.816 528.465 415.664 528.578 415.543 528.723 cv
415.422 528.871 415.332 529.039 415.273 529.227 cv
415.211 529.414 415.18 529.613 415.184 529.82 cv
415.18 530.285 415.313 530.648 415.574 530.914 cv
415.836 531.18 416.203 531.312 416.68 531.309 cv
416.93 531.312 417.148 531.273 417.34 531.187 cv
417.523 531.109 417.68 530.996 417.805 530.855 cv
417.926 530.715 418.016 530.551 418.078 530.359 cv
418.133 530.176 418.164 529.98 418.168 529.773 cv
cp
418.813 535.332 mo
418.809 535.027 418.684 534.797 418.441 534.633 cv
418.191 534.473 417.859 534.383 417.441 534.371 cv
415.625 534.309 li
415.457 534.441 415.32 534.566 415.219 534.68 cv
415.109 534.797 415.027 534.906 414.965 535.016 cv
414.902 535.121 414.859 535.227 414.836 535.332 cv
414.813 535.434 414.801 535.539 414.801 535.648 cv
414.801 535.984 414.969 536.238 415.313 536.418 cv
415.652 536.59 416.133 536.68 416.75 536.68 cv
417.137 536.68 417.461 536.641 417.727 536.566 cv
417.984 536.488 418.195 536.387 418.359 536.266 cv
418.516 536.137 418.633 535.996 418.707 535.836 cv
418.773 535.676 418.809 535.508 418.813 535.332 cv
cp
f
427.738 530.812 mo
427.734 531.016 427.684 531.156 427.586 531.242 cv
427.48 531.328 427.363 531.371 427.238 531.371 cv
422.621 531.371 li
422.617 531.762 422.656 532.113 422.738 532.426 cv
422.813 532.738 422.945 533.008 423.129 533.227 cv
423.309 533.453 423.543 533.625 423.84 533.742 cv
424.129 533.867 424.488 533.926 424.914 533.922 cv
425.246 533.926 425.543 533.898 425.805 533.84 cv
426.066 533.789 426.293 533.727 426.484 533.656 cv
426.672 533.59 426.828 533.531 426.953 533.473 cv
427.074 533.422 427.168 533.395 427.23 533.391 cv
427.266 533.395 427.297 533.402 427.328 533.418 cv
427.355 533.437 427.379 533.465 427.398 533.5 cv
427.41 533.539 427.422 533.59 427.434 533.652 cv
427.438 533.719 427.441 533.797 427.445 533.891 cv
427.441 533.961 427.438 534.02 427.438 534.066 cv
427.43 534.113 427.426 534.156 427.418 534.195 cv
427.41 534.234 427.395 534.27 427.379 534.301 cv
427.355 534.332 427.332 534.363 427.309 534.391 cv
427.277 534.422 427.195 534.469 427.055 534.531 cv
426.914 534.598 426.73 534.66 426.508 534.723 cv
426.281 534.785 426.023 534.84 425.73 534.891 cv
425.438 534.937 425.125 534.961 424.793 534.965 cv
424.215 534.961 423.707 534.883 423.277 534.723 cv
422.84 534.562 422.477 534.324 422.184 534.008 cv
421.883 533.691 421.66 533.297 421.512 532.816 cv
421.363 532.34 421.289 531.781 421.289 531.145 cv
421.289 530.547 421.363 530.008 421.52 529.523 cv
421.672 529.047 421.898 528.637 422.195 528.301 cv
422.488 527.965 422.844 527.707 423.258 527.527 cv
423.672 527.348 424.137 527.258 424.652 527.258 cv
425.203 527.258 425.672 527.348 426.059 527.523 cv
426.445 527.703 426.762 527.941 427.016 528.238 cv
427.262 528.539 427.445 528.891 427.563 529.289 cv
427.676 529.695 427.734 530.125 427.738 530.578 cv
cp
426.445 530.43 mo
426.461 529.754 426.309 529.223 425.992 528.84 cv
425.676 528.457 425.207 528.266 424.59 528.262 cv
424.266 528.266 423.984 528.324 423.746 528.441 cv
423.504 528.562 423.305 528.723 423.145 528.918 cv
422.98 529.117 422.855 529.348 422.77 529.609 cv
422.68 529.871 422.629 530.145 422.621 530.43 cv
cp
f
434.105 532.711 mo
434.102 533.074 434.035 533.395 433.906 533.672 cv
433.773 533.953 433.586 534.187 433.344 534.379 cv
433.098 534.574 432.805 534.719 432.469 534.816 cv
432.129 534.914 431.758 534.961 431.355 534.965 cv
431.102 534.961 430.863 534.941 430.641 534.906 cv
430.414 534.863 430.215 534.816 430.035 534.758 cv
429.855 534.699 429.703 534.637 429.578 534.57 cv
429.453 534.508 429.359 534.449 429.305 534.395 cv
429.246 534.344 429.207 534.273 429.184 534.176 cv
429.156 534.086 429.145 533.957 429.145 533.797 cv
429.145 533.699 429.148 533.617 429.16 533.547 cv
429.168 533.48 429.18 533.426 429.199 533.383 cv
429.211 533.344 429.234 533.312 429.262 533.293 cv
429.289 533.277 429.32 533.27 429.359 533.266 cv
429.414 533.27 429.5 533.305 429.613 533.371 cv
429.723 533.445 429.859 533.523 430.027 533.602 cv
430.188 533.687 430.379 533.762 430.605 533.832 cv
430.824 533.902 431.082 533.937 431.379 533.937 cv
431.594 533.937 431.793 533.914 431.973 533.867 cv
432.148 533.82 432.301 533.754 432.43 533.66 cv
432.559 533.574 432.66 533.457 432.73 533.312 cv
432.801 533.176 432.836 533.008 432.836 532.812 cv
432.836 532.617 432.785 532.453 432.684 532.316 cv
432.582 532.184 432.445 532.062 432.281 531.957 cv
432.113 531.855 431.93 531.766 431.723 531.68 cv
431.512 531.602 431.297 531.516 431.078 531.426 cv
430.859 531.34 430.645 531.238 430.434 531.125 cv
430.223 531.016 430.031 530.883 429.867 530.719 cv
429.695 530.562 429.563 530.367 429.465 530.141 cv
429.359 529.918 429.309 529.652 429.313 529.34 cv
429.309 529.066 429.363 528.801 429.473 528.547 cv
429.578 528.297 429.738 528.078 429.953 527.887 cv
430.164 527.699 430.43 527.547 430.75 527.43 cv
431.07 527.316 431.441 527.258 431.871 527.258 cv
432.055 527.258 432.242 527.273 432.43 527.305 cv
432.613 527.336 432.781 527.375 432.938 527.422 cv
433.086 527.469 433.215 527.52 433.324 527.574 cv
433.426 527.629 433.508 527.68 433.566 527.719 cv
433.617 527.766 433.652 527.801 433.676 527.828 cv
433.691 527.859 433.707 527.895 433.715 527.93 cv
433.723 527.973 433.73 528.02 433.738 528.074 cv
433.746 528.133 433.75 528.203 433.75 528.285 cv
433.75 528.375 433.746 528.453 433.738 528.516 cv
433.73 528.586 433.715 528.637 433.699 528.676 cv
433.676 528.719 433.656 528.75 433.633 528.766 cv
433.605 528.785 433.574 528.793 433.547 528.793 cv
433.496 528.793 433.43 528.766 433.344 528.707 cv
433.254 528.652 433.141 528.59 433 528.523 cv
432.859 528.461 432.691 528.402 432.504 528.34 cv
432.313 528.285 432.098 528.254 431.855 528.254 cv
431.633 528.254 431.441 528.281 431.277 528.328 cv
431.109 528.383 430.973 528.453 430.867 528.539 cv
430.762 528.633 430.68 528.738 430.629 528.863 cv
430.57 528.988 430.543 529.125 430.547 529.27 cv
430.543 529.473 430.594 529.641 430.699 529.777 cv
430.801 529.918 430.938 530.039 431.105 530.141 cv
431.27 530.246 431.461 530.34 431.676 530.422 cv
431.887 530.508 432.102 530.594 432.324 530.68 cv
432.543 530.77 432.762 530.871 432.98 530.977 cv
433.195 531.086 433.387 531.215 433.555 531.371 cv
433.719 531.527 433.852 531.715 433.953 531.934 cv
434.051 532.152 434.102 532.414 434.105 532.711 cv
cp
f
237.77 15.984 mo
237.828 16.176 237.867 16.324 237.887 16.43 cv
237.898 16.543 237.879 16.625 237.824 16.676 cv
237.766 16.73 237.664 16.762 237.52 16.777 cv
237.371 16.789 237.172 16.797 236.922 16.797 cv
236.652 16.797 236.445 16.793 236.301 16.785 cv
236.148 16.777 236.035 16.762 235.961 16.738 cv
235.879 16.715 235.824 16.684 235.797 16.641 cv
235.762 16.602 235.734 16.547 235.719 16.477 cv
235.043 14.449 li
231.254 14.449 li
230.617 16.422 li
230.594 16.496 230.566 16.559 230.535 16.605 cv
230.5 16.656 230.445 16.695 230.371 16.723 cv
230.293 16.75 230.188 16.766 230.051 16.781 cv
229.91 16.789 229.727 16.797 229.508 16.797 cv
229.266 16.797 229.082 16.789 228.949 16.773 cv
228.813 16.758 228.719 16.723 228.668 16.66 cv
228.613 16.605 228.594 16.52 228.613 16.406 cv
228.625 16.301 228.664 16.156 228.73 15.969 cv
231.84 7.02301 li
231.867 6.93701 231.906 6.867 231.949 6.80902 cv
231.988 6.758 232.055 6.71503 232.148 6.68402 cv
232.238 6.65601 232.363 6.64099 232.523 6.62903 cv
232.684 6.625 232.895 6.62097 233.164 6.617 cv
233.469 6.62097 233.715 6.625 233.895 6.62903 cv
234.074 6.64099 234.215 6.65601 234.32 6.68402 cv
234.418 6.71503 234.492 6.758 234.539 6.81201 cv
234.582 6.87097 234.617 6.94897 234.652 7.047 cv
cp
233.141 8.59003 mo
233.133 8.59003 li
231.707 12.875 li
234.566 12.875 li
cp
f
245.141 9.52698 mo
245.137 9.55499 245.137 9.586 245.137 9.62097 cv
245.133 9.65997 245.129 9.69897 245.121 9.742 cv
245.113 9.78497 245.102 9.836 245.09 9.89099 cv
245.074 9.94897 245.059 10.016 245.039 10.086 cv
242.953 16.375 li
242.926 16.465 242.891 16.539 242.848 16.59 cv
242.801 16.648 242.727 16.691 242.629 16.719 cv
242.523 16.75 242.387 16.766 242.215 16.781 cv
242.039 16.789 241.813 16.797 241.535 16.797 cv
241.258 16.797 241.031 16.789 240.859 16.777 cv
240.684 16.762 240.547 16.742 240.449 16.711 cv
240.348 16.684 240.277 16.641 240.234 16.582 cv
240.188 16.531 240.152 16.461 240.129 16.375 cv
238.043 10.086 li
238.012 9.98401 237.984 9.89099 237.969 9.80902 cv
237.945 9.72699 237.938 9.66803 237.938 9.62903 cv
237.934 9.59802 237.93 9.56201 237.934 9.52698 cv
237.93 9.47699 237.945 9.42999 237.977 9.39099 cv
238.004 9.35199 238.055 9.32001 238.129 9.29303 cv
238.199 9.27002 238.297 9.25 238.426 9.23798 cv
238.551 9.22998 238.711 9.22699 238.906 9.22302 cv
239.117 9.22699 239.289 9.23401 239.422 9.242 cv
239.547 9.258 239.652 9.27301 239.73 9.297 cv
239.805 9.32001 239.855 9.35498 239.891 9.39801 cv
239.918 9.44501 239.945 9.5 239.969 9.55902 cv
241.551 14.66 li
241.598 14.855 li
241.645 14.66 li
243.203 9.55902 li
243.215 9.5 243.238 9.44501 243.273 9.39801 cv
243.305 9.35498 243.359 9.32001 243.434 9.297 cv
243.504 9.27301 243.602 9.258 243.727 9.242 cv
243.848 9.23401 244.008 9.22699 244.207 9.22302 cv
244.398 9.22699 244.555 9.22998 244.676 9.23798 cv
244.797 9.25 244.891 9.27002 244.961 9.29303 cv
245.027 9.32001 245.074 9.35199 245.102 9.39099 cv
245.125 9.42999 245.137 9.47699 245.141 9.52698 cv
cp
f
252.602 12.809 mo
252.598 13.047 252.547 13.223 252.441 13.336 cv
252.332 13.453 252.184 13.512 252.004 13.508 cv
247.77 13.508 li
247.766 13.809 247.801 14.078 247.875 14.316 cv
247.941 14.559 248.055 14.762 248.211 14.93 cv
248.363 15.102 248.559 15.23 248.801 15.316 cv
249.039 15.406 249.328 15.449 249.672 15.449 cv
250.012 15.449 250.313 15.426 250.574 15.375 cv
250.832 15.328 251.059 15.273 251.25 15.211 cv
251.438 15.152 251.594 15.098 251.723 15.047 cv
251.844 15 251.945 14.977 252.027 14.973 cv
252.07 14.977 252.109 14.984 252.145 15 cv
252.172 15.02 252.199 15.051 252.219 15.098 cv
252.238 15.145 252.25 15.211 252.262 15.297 cv
252.266 15.383 252.27 15.492 252.273 15.621 cv
252.27 15.738 252.27 15.836 252.266 15.914 cv
252.258 15.996 252.25 16.062 252.242 16.117 cv
252.23 16.176 252.215 16.227 252.195 16.262 cv
252.176 16.305 252.148 16.34 252.117 16.375 cv
252.082 16.414 251.988 16.465 251.84 16.523 cv
251.684 16.59 251.492 16.652 251.262 16.707 cv
251.023 16.77 250.754 16.816 250.457 16.863 cv
250.152 16.902 249.832 16.926 249.492 16.93 cv
248.871 16.926 248.328 16.852 247.867 16.695 cv
247.398 16.543 247.012 16.305 246.703 15.988 cv
246.387 15.672 246.152 15.273 246.004 14.789 cv
245.848 14.309 245.773 13.742 245.777 13.086 cv
245.773 12.473 245.852 11.914 246.016 11.418 cv
246.172 10.922 246.406 10.504 246.719 10.156 cv
247.023 9.81201 247.398 9.547 247.836 9.36298 cv
248.273 9.18402 248.766 9.09399 249.32 9.09003 cv
249.898 9.09399 250.398 9.17999 250.813 9.34802 cv
251.227 9.52301 251.563 9.76202 251.828 10.062 cv
252.09 10.367 252.285 10.727 252.414 11.141 cv
252.535 11.559 252.598 12.008 252.602 12.496 cv
cp
250.699 12.246 mo
250.711 11.695 250.602 11.262 250.367 10.949 cv
250.133 10.637 249.766 10.48 249.273 10.477 cv
249.023 10.48 248.809 10.527 248.625 10.617 cv
248.438 10.715 248.285 10.84 248.164 10.996 cv
248.039 11.156 247.945 11.344 247.883 11.559 cv
247.816 11.773 247.777 12.004 247.77 12.246 cv
cp
f
258.676 10.18 mo
258.676 10.371 258.668 10.523 258.66 10.641 cv
258.645 10.762 258.629 10.855 258.613 10.922 cv
258.59 10.992 258.563 11.039 258.531 11.062 cv
258.492 11.09 258.449 11.102 258.402 11.102 cv
258.355 11.102 258.309 11.094 258.262 11.074 cv
258.207 11.059 258.148 11.039 258.086 11.016 cv
258.016 10.996 257.945 10.977 257.871 10.957 cv
257.789 10.941 257.703 10.934 257.613 10.93 cv
257.5 10.934 257.391 10.953 257.285 10.996 cv
257.176 11.043 257.063 11.113 256.949 11.203 cv
256.828 11.297 256.707 11.422 256.582 11.574 cv
256.453 11.734 256.316 11.926 256.172 12.152 cv
256.172 16.484 li
256.168 16.539 256.152 16.582 256.125 16.621 cv
256.09 16.66 256.035 16.695 255.965 16.719 cv
255.887 16.746 255.789 16.762 255.664 16.777 cv
255.539 16.789 255.379 16.797 255.191 16.797 cv
254.996 16.797 254.84 16.789 254.715 16.777 cv
254.59 16.762 254.488 16.746 254.414 16.719 cv
254.336 16.695 254.281 16.66 254.254 16.621 cv
254.219 16.582 254.203 16.539 254.207 16.484 cv
254.207 9.53497 li
254.203 9.48798 254.219 9.44098 254.246 9.39801 cv
254.27 9.36298 254.316 9.33197 254.387 9.30103 cv
254.453 9.27698 254.539 9.258 254.648 9.242 cv
254.754 9.23401 254.887 9.22699 255.051 9.22302 cv
255.215 9.22699 255.352 9.23401 255.461 9.242 cv
255.566 9.258 255.652 9.27698 255.715 9.30103 cv
255.773 9.33197 255.816 9.36298 255.844 9.39801 cv
255.867 9.44098 255.879 9.48798 255.883 9.53497 cv
255.883 10.398 li
256.063 10.141 256.234 9.92999 256.398 9.758 cv
256.555 9.59399 256.711 9.45697 256.859 9.35498 cv
257.004 9.258 257.148 9.19098 257.293 9.14801 cv
257.438 9.11298 257.582 9.09399 257.73 9.09003 cv
257.797 9.09399 257.871 9.09802 257.949 9.10199 cv
258.027 9.11298 258.105 9.125 258.191 9.14099 cv
258.27 9.15997 258.344 9.17999 258.41 9.203 cv
258.469 9.22699 258.516 9.25403 258.547 9.27698 cv
258.574 9.30902 258.594 9.336 258.609 9.36298 cv
258.621 9.39801 258.633 9.44098 258.645 9.492 cv
258.652 9.55103 258.66 9.633 258.668 9.73798 cv
258.672 9.84802 258.676 9.99597 258.676 10.18 cv
cp
f
265.434 16.508 mo
265.43 16.586 265.402 16.641 265.355 16.68 cv
265.301 16.723 265.219 16.75 265.109 16.77 cv
264.992 16.785 264.828 16.797 264.613 16.797 cv
264.375 16.797 264.203 16.785 264.102 16.77 cv
263.992 16.75 263.918 16.723 263.879 16.68 cv
263.832 16.641 263.813 16.586 263.813 16.508 cv
263.813 15.957 li
263.523 16.266 263.195 16.504 262.832 16.672 cv
262.465 16.844 262.059 16.926 261.613 16.93 cv
261.242 16.926 260.902 16.879 260.594 16.785 cv
260.285 16.691 260.02 16.551 259.793 16.355 cv
259.566 16.168 259.391 15.934 259.266 15.652 cv
259.141 15.375 259.078 15.047 259.082 14.668 cv
259.078 14.27 259.156 13.918 259.316 13.613 cv
259.473 13.316 259.711 13.07 260.027 12.875 cv
260.34 12.684 260.73 12.539 261.199 12.441 cv
261.668 12.352 262.211 12.305 262.828 12.301 cv
263.508 12.301 li
263.508 11.879 li
263.508 11.664 263.484 11.473 263.441 11.309 cv
263.395 11.148 263.32 11.012 263.223 10.898 cv
263.117 10.793 262.984 10.711 262.816 10.656 cv
262.645 10.605 262.434 10.582 262.191 10.578 cv
261.859 10.582 261.566 10.617 261.313 10.687 cv
261.051 10.762 260.824 10.844 260.629 10.93 cv
260.43 11.023 260.266 11.102 260.137 11.172 cv
260 11.246 259.891 11.285 259.813 11.281 cv
259.75 11.285 259.699 11.266 259.66 11.227 cv
259.613 11.191 259.578 11.141 259.551 11.07 cv
259.52 11.008 259.496 10.922 259.484 10.82 cv
259.465 10.723 259.457 10.613 259.461 10.492 cv
259.457 10.332 259.473 10.207 259.5 10.109 cv
259.523 10.02 259.57 9.93402 259.648 9.85498 cv
259.719 9.78101 259.848 9.69897 260.031 9.60901 cv
260.211 9.52002 260.422 9.43402 260.668 9.35498 cv
260.91 9.27698 261.18 9.21503 261.469 9.164 cv
261.758 9.117 262.055 9.09399 262.363 9.09003 cv
262.906 9.09399 263.371 9.14502 263.758 9.25 cv
264.145 9.35901 264.465 9.52301 264.715 9.742 cv
264.965 9.961 265.145 10.246 265.262 10.594 cv
265.371 10.945 265.43 11.359 265.434 11.832 cv
cp
263.508 13.531 mo
262.758 13.531 li
262.441 13.535 262.172 13.559 261.949 13.602 cv
261.723 13.652 261.539 13.723 261.402 13.812 cv
261.258 13.91 261.156 14.023 261.094 14.152 cv
261.027 14.289 260.992 14.437 260.996 14.605 cv
260.992 14.898 261.086 15.129 261.273 15.293 cv
261.457 15.461 261.715 15.543 262.043 15.543 cv
262.316 15.543 262.566 15.473 262.801 15.332 cv
263.027 15.191 263.266 14.988 263.508 14.715 cv
cp
f
273.656 10.016 mo
273.652 10.27 273.625 10.453 273.57 10.57 cv
273.512 10.691 273.441 10.75 273.363 10.75 cv
272.543 10.75 li
272.656 10.875 272.738 11.02 272.789 11.176 cv
272.836 11.336 272.859 11.5 272.863 11.668 cv
272.859 12.078 272.793 12.437 272.66 12.75 cv
272.523 13.066 272.328 13.332 272.078 13.543 cv
271.824 13.762 271.523 13.926 271.168 14.035 cv
270.809 14.152 270.41 14.207 269.98 14.203 cv
269.754 14.207 269.543 14.18 269.34 14.121 cv
269.137 14.07 268.98 14.008 268.871 13.93 cv
268.809 14 268.75 14.078 268.703 14.172 cv
268.652 14.266 268.629 14.371 268.633 14.48 cv
268.629 14.637 268.695 14.758 268.828 14.852 cv
268.957 14.949 269.145 15.004 269.387 15.012 cv
271.078 15.074 li
271.473 15.09 271.824 15.148 272.133 15.242 cv
272.441 15.344 272.703 15.477 272.914 15.648 cv
273.125 15.824 273.285 16.035 273.395 16.277 cv
273.504 16.523 273.559 16.797 273.563 17.109 cv
273.559 17.445 273.484 17.77 273.336 18.078 cv
273.188 18.379 272.961 18.641 272.66 18.867 cv
272.355 19.086 271.977 19.266 271.523 19.398 cv
271.066 19.527 270.535 19.59 269.934 19.594 cv
269.336 19.59 268.832 19.543 268.414 19.453 cv
267.996 19.355 267.652 19.227 267.387 19.062 cv
267.117 18.895 266.922 18.695 266.805 18.469 cv
266.68 18.234 266.621 17.98 266.621 17.707 cv
266.621 17.535 266.641 17.375 266.688 17.219 cv
266.727 17.062 266.793 16.91 266.883 16.77 cv
266.965 16.625 267.07 16.492 267.195 16.359 cv
267.32 16.23 267.461 16.105 267.625 15.984 cv
267.398 15.871 267.227 15.711 267.105 15.5 cv
266.984 15.297 266.926 15.07 266.926 14.824 cv
266.926 14.523 266.992 14.246 267.133 13.988 cv
267.27 13.738 267.453 13.508 267.68 13.305 cv
267.496 13.125 267.352 12.91 267.242 12.652 cv
267.133 12.402 267.078 12.082 267.082 11.699 cv
267.078 11.297 267.148 10.937 267.293 10.613 cv
267.434 10.297 267.633 10.027 267.891 9.80499 cv
268.145 9.586 268.449 9.414 268.801 9.297 cv
269.152 9.17999 269.543 9.12097 269.973 9.12097 cv
270.191 9.12097 270.398 9.13702 270.598 9.15997 cv
270.797 9.19098 270.984 9.22699 271.156 9.27002 cv
273.363 9.27002 li
273.445 9.27301 273.516 9.33197 273.574 9.44098 cv
273.625 9.55902 273.652 9.75 273.656 10.016 cv
cp
271.141 11.66 mo
271.137 11.289 271.035 11 270.828 10.789 cv
270.617 10.586 270.324 10.48 269.949 10.477 cv
269.754 10.48 269.582 10.512 269.441 10.574 cv
269.293 10.641 269.172 10.73 269.078 10.84 cv
268.977 10.953 268.906 11.082 268.863 11.23 cv
268.813 11.379 268.789 11.535 268.793 11.691 cv
268.789 12.051 268.895 12.328 269.105 12.531 cv
269.313 12.738 269.602 12.844 269.973 12.84 cv
270.168 12.844 270.336 12.812 270.484 12.746 cv
270.625 12.687 270.746 12.602 270.848 12.488 cv
270.941 12.383 271.016 12.254 271.066 12.109 cv
271.113 11.969 271.137 11.82 271.141 11.66 cv
cp
271.602 17.211 mo
271.602 16.973 271.508 16.797 271.32 16.672 cv
271.133 16.551 270.875 16.48 270.547 16.469 cv
269.152 16.43 li
269.016 16.531 268.906 16.625 268.828 16.715 cv
268.746 16.805 268.684 16.891 268.637 16.977 cv
268.586 17.059 268.551 17.141 268.539 17.219 cv
268.52 17.297 268.512 17.375 268.516 17.461 cv
268.512 17.715 268.645 17.914 268.906 18.051 cv
269.168 18.184 269.539 18.25 270.02 18.254 cv
270.313 18.25 270.559 18.219 270.766 18.164 cv
270.965 18.102 271.129 18.023 271.258 17.926 cv
271.379 17.824 271.469 17.715 271.523 17.594 cv
271.574 17.473 271.602 17.344 271.602 17.211 cv
cp
f
281.281 12.809 mo
281.277 13.047 281.227 13.223 281.121 13.336 cv
281.012 13.453 280.863 13.512 280.684 13.508 cv
276.449 13.508 li
276.445 13.809 276.48 14.078 276.555 14.316 cv
276.621 14.559 276.734 14.762 276.891 14.93 cv
277.043 15.102 277.238 15.23 277.48 15.316 cv
277.719 15.406 278.008 15.449 278.352 15.449 cv
278.691 15.449 278.992 15.426 279.254 15.375 cv
279.512 15.328 279.738 15.273 279.93 15.211 cv
280.117 15.152 280.273 15.098 280.402 15.047 cv
280.523 15 280.625 14.977 280.707 14.973 cv
280.75 14.977 280.789 14.984 280.824 15 cv
280.852 15.02 280.879 15.051 280.898 15.098 cv
280.918 15.145 280.93 15.211 280.941 15.297 cv
280.945 15.383 280.949 15.492 280.953 15.621 cv
280.949 15.738 280.949 15.836 280.945 15.914 cv
280.938 15.996 280.93 16.062 280.922 16.117 cv
280.91 16.176 280.895 16.227 280.875 16.262 cv
280.855 16.305 280.828 16.34 280.797 16.375 cv
280.762 16.414 280.668 16.465 280.52 16.523 cv
280.363 16.59 280.172 16.652 279.941 16.707 cv
279.703 16.77 279.434 16.816 279.137 16.863 cv
278.832 16.902 278.512 16.926 278.172 16.93 cv
277.551 16.926 277.008 16.852 276.547 16.695 cv
276.078 16.543 275.691 16.305 275.383 15.988 cv
275.066 15.672 274.832 15.273 274.684 14.789 cv
274.527 14.309 274.453 13.742 274.457 13.086 cv
274.453 12.473 274.531 11.914 274.695 11.418 cv
274.852 10.922 275.086 10.504 275.398 10.156 cv
275.703 9.81201 276.078 9.547 276.516 9.36298 cv
276.953 9.18402 277.445 9.09399 278 9.09003 cv
278.578 9.09399 279.078 9.17999 279.492 9.34802 cv
279.906 9.52301 280.242 9.76202 280.508 10.062 cv
280.77 10.367 280.965 10.727 281.094 11.141 cv
281.215 11.559 281.277 12.008 281.281 12.496 cv
cp
279.379 12.246 mo
279.391 11.695 279.281 11.262 279.047 10.949 cv
278.813 10.637 278.445 10.48 277.953 10.477 cv
277.703 10.48 277.488 10.527 277.305 10.617 cv
277.117 10.715 276.965 10.84 276.844 10.996 cv
276.719 11.156 276.625 11.344 276.563 11.559 cv
276.496 11.773 276.457 12.004 276.449 12.246 cv
cp
f
292.273 7.508 mo
292.27 7.66803 292.266 7.797 292.254 7.90198 cv
292.238 8.01202 292.215 8.09802 292.191 8.15601 cv
292.16 8.21899 292.129 8.26599 292.094 8.29303 cv
292.055 8.328 292.012 8.34399 291.969 8.34003 cv
288.672 8.34003 li
288.672 11.055 li
291.766 11.055 li
291.809 11.055 291.852 11.07 291.891 11.094 cv
291.926 11.125 291.957 11.168 291.988 11.227 cv
292.016 11.289 292.035 11.371 292.051 11.473 cv
292.059 11.578 292.066 11.707 292.07 11.863 cv
292.066 12.02 292.059 12.152 292.051 12.254 cv
292.035 12.363 292.016 12.449 291.988 12.512 cv
291.957 12.582 291.926 12.629 291.891 12.656 cv
291.852 12.687 291.809 12.703 291.766 12.699 cv
288.672 12.699 li
288.672 16.453 li
288.668 16.512 288.652 16.562 288.625 16.602 cv
288.59 16.648 288.535 16.684 288.457 16.707 cv
288.375 16.738 288.27 16.758 288.141 16.773 cv
288.008 16.789 287.84 16.797 287.645 16.797 cv
287.441 16.797 287.277 16.789 287.148 16.773 cv
287.012 16.758 286.906 16.738 286.832 16.707 cv
286.75 16.684 286.695 16.648 286.664 16.602 cv
286.629 16.562 286.609 16.512 286.613 16.453 cv
286.613 7.31201 li
286.609 7.086 286.668 6.922 286.789 6.81598 cv
286.902 6.71899 287.047 6.66803 287.223 6.664 cv
291.969 6.664 li
292.012 6.66803 292.055 6.67999 292.094 6.70697 cv
292.129 6.73798 292.16 6.78497 292.191 6.84802 cv
292.215 6.914 292.238 7.00403 292.254 7.10901 cv
292.266 7.22302 292.27 7.35498 292.273 7.508 cv
cp
f
295.785 16.484 mo
295.781 16.539 295.766 16.582 295.738 16.621 cv
295.703 16.66 295.648 16.695 295.578 16.719 cv
295.5 16.746 295.402 16.762 295.277 16.777 cv
295.152 16.789 294.992 16.797 294.805 16.797 cv
294.609 16.797 294.453 16.789 294.328 16.777 cv
294.203 16.762 294.102 16.746 294.027 16.719 cv
293.949 16.695 293.895 16.66 293.867 16.621 cv
293.832 16.582 293.816 16.539 293.82 16.484 cv
293.82 9.55103 li
293.816 9.5 293.832 9.453 293.867 9.414 cv
293.895 9.375 293.949 9.34399 294.027 9.31201 cv
294.102 9.289 294.203 9.26599 294.328 9.24597 cv
294.453 9.23401 294.609 9.22699 294.805 9.22302 cv
294.992 9.22699 295.152 9.23401 295.277 9.24597 cv
295.402 9.26599 295.5 9.289 295.578 9.31201 cv
295.648 9.34399 295.703 9.375 295.738 9.414 cv
295.766 9.453 295.781 9.5 295.785 9.55103 cv
cp
295.934 7.17999 mo
295.934 7.578 295.852 7.85199 295.691 8 cv
295.527 8.15198 295.23 8.22699 294.797 8.22302 cv
294.352 8.22699 294.051 8.15198 293.902 8.008 cv
293.746 7.86298 293.672 7.60199 293.672 7.21899 cv
293.672 6.82397 293.75 6.55103 293.91 6.39801 cv
294.066 6.24597 294.367 6.16803 294.813 6.16803 cv
295.246 6.16803 295.543 6.242 295.699 6.39099 cv
295.855 6.539 295.934 6.80499 295.934 7.17999 cv
cp
f
299.711 16.484 mo
299.707 16.539 299.691 16.582 299.664 16.621 cv
299.629 16.66 299.574 16.695 299.504 16.719 cv
299.426 16.746 299.328 16.762 299.203 16.777 cv
299.078 16.789 298.918 16.797 298.73 16.797 cv
298.535 16.797 298.379 16.789 298.254 16.777 cv
298.129 16.762 298.027 16.746 297.953 16.719 cv
297.875 16.695 297.82 16.66 297.793 16.621 cv
297.758 16.582 297.742 16.539 297.746 16.484 cv
297.746 6.23798 li
297.742 6.18701 297.758 6.14099 297.793 6.09802 cv
297.82 6.05902 297.875 6.02301 297.953 5.992 cv
298.027 5.96503 298.129 5.94501 298.254 5.92603 cv
298.379 5.914 298.535 5.90601 298.73 5.90198 cv
298.918 5.90601 299.078 5.914 299.203 5.92603 cv
299.328 5.94501 299.426 5.96503 299.504 5.992 cv
299.574 6.02301 299.629 6.05902 299.664 6.09802 cv
299.691 6.14099 299.707 6.18701 299.711 6.23798 cv
cp
f
305.84 15.801 mo
305.84 16.027 305.824 16.203 305.797 16.324 cv
305.766 16.449 305.727 16.535 305.684 16.582 cv
305.633 16.633 305.566 16.676 305.477 16.715 cv
305.383 16.754 305.273 16.785 305.156 16.816 cv
305.031 16.84 304.898 16.863 304.758 16.883 cv
304.613 16.895 304.473 16.902 304.328 16.906 cv
303.938 16.902 303.598 16.852 303.313 16.758 cv
303.027 16.656 302.793 16.508 302.605 16.301 cv
302.418 16.098 302.277 15.84 302.191 15.527 cv
302.098 15.219 302.055 14.848 302.059 14.418 cv
302.059 10.859 li
301.227 10.859 li
301.125 10.863 301.051 10.801 301 10.676 cv
300.945 10.555 300.918 10.352 300.922 10.062 cv
300.918 9.914 300.926 9.78497 300.941 9.68402 cv
300.953 9.58197 300.973 9.5 301 9.43701 cv
301.023 9.37903 301.055 9.336 301.098 9.30902 cv
301.133 9.28497 301.18 9.27301 301.234 9.27002 cv
302.059 9.27002 li
302.059 7.71899 li
302.055 7.672 302.07 7.625 302.102 7.578 cv
302.129 7.539 302.18 7.50403 302.258 7.47302 cv
302.332 7.44897 302.434 7.42603 302.563 7.40997 cv
302.688 7.39801 302.844 7.39502 303.035 7.39099 cv
303.223 7.39502 303.383 7.39801 303.512 7.40997 cv
303.637 7.42603 303.738 7.44897 303.813 7.47302 cv
303.883 7.50403 303.934 7.539 303.969 7.578 cv
303.996 7.625 304.012 7.672 304.016 7.71899 cv
304.016 9.27002 li
305.527 9.27002 li
305.578 9.27301 305.625 9.28497 305.664 9.30902 cv
305.703 9.336 305.734 9.37903 305.762 9.43701 cv
305.785 9.5 305.805 9.58197 305.82 9.68402 cv
305.832 9.78497 305.84 9.914 305.84 10.062 cv
305.84 10.352 305.813 10.555 305.762 10.676 cv
305.707 10.801 305.633 10.863 305.535 10.859 cv
304.016 10.859 li
304.016 14.125 li
304.012 14.504 304.07 14.789 304.195 14.977 cv
304.313 15.168 304.527 15.262 304.832 15.262 cv
304.934 15.262 305.027 15.254 305.113 15.234 cv
305.195 15.219 305.27 15.199 305.336 15.172 cv
305.398 15.152 305.453 15.129 305.5 15.109 cv
305.543 15.094 305.582 15.086 305.621 15.082 cv
305.648 15.086 305.68 15.094 305.711 15.109 cv
305.738 15.129 305.758 15.168 305.777 15.219 cv
305.789 15.277 305.805 15.352 305.82 15.441 cv
305.832 15.539 305.84 15.656 305.84 15.801 cv
cp
f
313.426 12.809 mo
313.422 13.047 313.371 13.223 313.266 13.336 cv
313.156 13.453 313.008 13.512 312.828 13.508 cv
308.594 13.508 li
308.59 13.809 308.625 14.078 308.699 14.316 cv
308.766 14.559 308.879 14.762 309.035 14.93 cv
309.188 15.102 309.383 15.23 309.625 15.316 cv
309.863 15.406 310.152 15.449 310.496 15.449 cv
310.836 15.449 311.137 15.426 311.398 15.375 cv
311.656 15.328 311.883 15.273 312.074 15.211 cv
312.262 15.152 312.418 15.098 312.547 15.047 cv
312.668 15 312.77 14.977 312.852 14.973 cv
312.895 14.977 312.934 14.984 312.969 15 cv
312.996 15.02 313.023 15.051 313.043 15.098 cv
313.063 15.145 313.074 15.211 313.086 15.297 cv
313.09 15.383 313.094 15.492 313.098 15.621 cv
313.094 15.738 313.094 15.836 313.09 15.914 cv
313.082 15.996 313.074 16.062 313.066 16.117 cv
313.055 16.176 313.039 16.227 313.02 16.262 cv
313 16.305 312.973 16.34 312.941 16.375 cv
312.906 16.414 312.813 16.465 312.664 16.523 cv
312.508 16.59 312.316 16.652 312.086 16.707 cv
311.848 16.77 311.578 16.816 311.281 16.863 cv
310.977 16.902 310.656 16.926 310.316 16.93 cv
309.695 16.926 309.152 16.852 308.691 16.695 cv
308.223 16.543 307.836 16.305 307.527 15.988 cv
307.211 15.672 306.977 15.273 306.828 14.789 cv
306.672 14.309 306.598 13.742 306.602 13.086 cv
306.598 12.473 306.676 11.914 306.84 11.418 cv
306.996 10.922 307.23 10.504 307.543 10.156 cv
307.848 9.81201 308.223 9.547 308.66 9.36298 cv
309.098 9.18402 309.59 9.09399 310.145 9.09003 cv
310.723 9.09399 311.223 9.17999 311.637 9.34802 cv
312.051 9.52301 312.387 9.76202 312.652 10.062 cv
312.914 10.367 313.109 10.727 313.238 11.141 cv
313.359 11.559 313.422 12.008 313.426 12.496 cv
cp
311.523 12.246 mo
311.535 11.695 311.426 11.262 311.191 10.949 cv
310.957 10.637 310.59 10.48 310.098 10.477 cv
309.848 10.48 309.633 10.527 309.449 10.617 cv
309.262 10.715 309.109 10.84 308.988 10.996 cv
308.863 11.156 308.77 11.344 308.707 11.559 cv
308.641 11.773 308.602 12.004 308.594 12.246 cv
cp
f
319.5 10.18 mo
319.5 10.371 319.492 10.523 319.484 10.641 cv
319.469 10.762 319.453 10.855 319.438 10.922 cv
319.414 10.992 319.387 11.039 319.355 11.062 cv
319.316 11.09 319.273 11.102 319.227 11.102 cv
319.18 11.102 319.133 11.094 319.086 11.074 cv
319.031 11.059 318.973 11.039 318.91 11.016 cv
318.84 10.996 318.77 10.977 318.695 10.957 cv
318.613 10.941 318.527 10.934 318.438 10.93 cv
318.324 10.934 318.215 10.953 318.109 10.996 cv
318 11.043 317.887 11.113 317.773 11.203 cv
317.652 11.297 317.531 11.422 317.406 11.574 cv
317.277 11.734 317.141 11.926 316.996 12.152 cv
316.996 16.484 li
316.992 16.539 316.977 16.582 316.949 16.621 cv
316.914 16.66 316.859 16.695 316.789 16.719 cv
316.711 16.746 316.613 16.762 316.488 16.777 cv
316.363 16.789 316.203 16.797 316.016 16.797 cv
315.82 16.797 315.664 16.789 315.539 16.777 cv
315.414 16.762 315.313 16.746 315.238 16.719 cv
315.16 16.695 315.105 16.66 315.078 16.621 cv
315.043 16.582 315.027 16.539 315.031 16.484 cv
315.031 9.53497 li
315.027 9.48798 315.043 9.44098 315.07 9.39801 cv
315.094 9.36298 315.141 9.33197 315.211 9.30103 cv
315.277 9.27698 315.363 9.258 315.473 9.242 cv
315.578 9.23401 315.711 9.22699 315.875 9.22302 cv
316.039 9.22699 316.176 9.23401 316.285 9.242 cv
316.391 9.258 316.477 9.27698 316.539 9.30103 cv
316.598 9.33197 316.641 9.36298 316.668 9.39801 cv
316.691 9.44098 316.703 9.48798 316.707 9.53497 cv
316.707 10.398 li
316.887 10.141 317.059 9.92999 317.223 9.758 cv
317.379 9.59399 317.535 9.45697 317.684 9.35498 cv
317.828 9.258 317.973 9.19098 318.117 9.14801 cv
318.262 9.11298 318.406 9.09399 318.555 9.09003 cv
318.621 9.09399 318.695 9.09802 318.773 9.10199 cv
318.852 9.11298 318.93 9.125 319.016 9.14099 cv
319.094 9.15997 319.168 9.17999 319.234 9.203 cv
319.293 9.22699 319.34 9.25403 319.371 9.27698 cv
319.398 9.30902 319.418 9.336 319.434 9.36298 cv
319.445 9.39801 319.457 9.44098 319.469 9.492 cv
319.477 9.55103 319.484 9.633 319.492 9.73798 cv
319.496 9.84802 319.5 9.99597 319.5 10.18 cv
cp
f
322.664 16.484 mo
322.66 16.539 322.645 16.582 322.617 16.621 cv
322.582 16.66 322.527 16.695 322.457 16.719 cv
322.379 16.746 322.281 16.762 322.156 16.777 cv
322.031 16.789 321.871 16.797 321.684 16.797 cv
321.488 16.797 321.332 16.789 321.207 16.777 cv
321.082 16.762 320.98 16.746 320.906 16.719 cv
320.828 16.695 320.773 16.66 320.746 16.621 cv
320.711 16.582 320.695 16.539 320.699 16.484 cv
320.699 9.55103 li
320.695 9.5 320.711 9.453 320.746 9.414 cv
320.773 9.375 320.828 9.34399 320.906 9.31201 cv
320.98 9.289 321.082 9.26599 321.207 9.24597 cv
321.332 9.23401 321.488 9.22699 321.684 9.22302 cv
321.871 9.22699 322.031 9.23401 322.156 9.24597 cv
322.281 9.26599 322.379 9.289 322.457 9.31201 cv
322.527 9.34399 322.582 9.375 322.617 9.414 cv
322.645 9.453 322.66 9.5 322.664 9.55103 cv
cp
322.813 7.17999 mo
322.813 7.578 322.73 7.85199 322.57 8 cv
322.406 8.15198 322.109 8.22699 321.676 8.22302 cv
321.23 8.22699 320.93 8.15198 320.781 8.008 cv
320.625 7.86298 320.551 7.60199 320.551 7.21899 cv
320.551 6.82397 320.629 6.55103 320.789 6.39801 cv
320.945 6.24597 321.246 6.16803 321.691 6.16803 cv
322.125 6.16803 322.422 6.242 322.578 6.39099 cv
322.734 6.539 322.813 6.80499 322.813 7.17999 cv
cp
f
331.266 16.484 mo
331.262 16.539 331.246 16.582 331.219 16.621 cv
331.184 16.66 331.133 16.695 331.063 16.719 cv
330.988 16.746 330.887 16.762 330.762 16.777 cv
330.633 16.789 330.477 16.797 330.293 16.797 cv
330.098 16.797 329.938 16.789 329.813 16.777 cv
329.684 16.762 329.582 16.746 329.512 16.719 cv
329.434 16.695 329.383 16.66 329.355 16.621 cv
329.32 16.582 329.305 16.539 329.309 16.484 cv
329.309 12.52 li
329.305 12.184 329.281 11.918 329.234 11.723 cv
329.184 11.531 329.109 11.367 329.02 11.23 cv
328.926 11.094 328.809 10.988 328.66 10.91 cv
328.512 10.836 328.336 10.797 328.141 10.797 cv
327.887 10.797 327.637 10.891 327.383 11.07 cv
327.129 11.254 326.863 11.516 326.59 11.863 cv
326.59 16.484 li
326.586 16.539 326.57 16.582 326.543 16.621 cv
326.508 16.66 326.453 16.695 326.383 16.719 cv
326.305 16.746 326.207 16.762 326.082 16.777 cv
325.957 16.789 325.797 16.797 325.609 16.797 cv
325.414 16.797 325.258 16.789 325.133 16.777 cv
325.008 16.762 324.906 16.746 324.832 16.719 cv
324.754 16.695 324.699 16.66 324.672 16.621 cv
324.637 16.582 324.621 16.539 324.625 16.484 cv
324.625 9.53497 li
324.621 9.48798 324.637 9.44098 324.664 9.39801 cv
324.688 9.36298 324.734 9.33197 324.805 9.30103 cv
324.871 9.27698 324.957 9.258 325.066 9.242 cv
325.172 9.23401 325.305 9.22699 325.469 9.22302 cv
325.633 9.22699 325.77 9.23401 325.879 9.242 cv
325.984 9.258 326.07 9.27698 326.133 9.30103 cv
326.191 9.33197 326.234 9.36298 326.262 9.39801 cv
326.285 9.44098 326.297 9.48798 326.301 9.53497 cv
326.301 10.336 li
326.684 9.92603 327.074 9.61298 327.473 9.40198 cv
327.867 9.19501 328.285 9.09399 328.719 9.09003 cv
329.188 9.09399 329.586 9.172 329.914 9.32397 cv
330.238 9.48401 330.5 9.69501 330.699 9.961 cv
330.898 10.23 331.043 10.543 331.133 10.898 cv
331.219 11.258 331.262 11.687 331.266 12.191 cv
cp
f
339.461 10.016 mo
339.457 10.27 339.43 10.453 339.375 10.57 cv
339.316 10.691 339.246 10.75 339.168 10.75 cv
338.348 10.75 li
338.461 10.875 338.543 11.02 338.594 11.176 cv
338.641 11.336 338.664 11.5 338.668 11.668 cv
338.664 12.078 338.598 12.437 338.465 12.75 cv
338.328 13.066 338.133 13.332 337.883 13.543 cv
337.629 13.762 337.328 13.926 336.973 14.035 cv
336.613 14.152 336.215 14.207 335.785 14.203 cv
335.559 14.207 335.348 14.18 335.145 14.121 cv
334.941 14.07 334.785 14.008 334.676 13.93 cv
334.613 14 334.555 14.078 334.508 14.172 cv
334.457 14.266 334.434 14.371 334.438 14.48 cv
334.434 14.637 334.5 14.758 334.633 14.852 cv
334.762 14.949 334.949 15.004 335.191 15.012 cv
336.883 15.074 li
337.277 15.09 337.629 15.148 337.938 15.242 cv
338.246 15.344 338.508 15.477 338.719 15.648 cv
338.93 15.824 339.09 16.035 339.199 16.277 cv
339.309 16.523 339.363 16.797 339.367 17.109 cv
339.363 17.445 339.289 17.77 339.141 18.078 cv
338.992 18.379 338.766 18.641 338.465 18.867 cv
338.16 19.086 337.781 19.266 337.328 19.398 cv
336.871 19.527 336.34 19.59 335.738 19.594 cv
335.141 19.59 334.637 19.543 334.219 19.453 cv
333.801 19.355 333.457 19.227 333.191 19.062 cv
332.922 18.895 332.727 18.695 332.609 18.469 cv
332.484 18.234 332.426 17.98 332.426 17.707 cv
332.426 17.535 332.445 17.375 332.492 17.219 cv
332.531 17.062 332.598 16.91 332.688 16.77 cv
332.77 16.625 332.875 16.492 333 16.359 cv
333.125 16.23 333.266 16.105 333.43 15.984 cv
333.203 15.871 333.031 15.711 332.91 15.5 cv
332.789 15.297 332.73 15.07 332.73 14.824 cv
332.73 14.523 332.797 14.246 332.938 13.988 cv
333.074 13.738 333.258 13.508 333.484 13.305 cv
333.301 13.125 333.156 12.91 333.047 12.652 cv
332.938 12.402 332.883 12.082 332.887 11.699 cv
332.883 11.297 332.953 10.937 333.098 10.613 cv
333.238 10.297 333.438 10.027 333.695 9.80499 cv
333.949 9.586 334.254 9.414 334.605 9.297 cv
334.957 9.17999 335.348 9.12097 335.777 9.12097 cv
335.996 9.12097 336.203 9.13702 336.402 9.15997 cv
336.602 9.19098 336.789 9.22699 336.961 9.27002 cv
339.168 9.27002 li
339.25 9.27301 339.32 9.33197 339.379 9.44098 cv
339.43 9.55902 339.457 9.75 339.461 10.016 cv
cp
336.945 11.66 mo
336.941 11.289 336.84 11 336.633 10.789 cv
336.422 10.586 336.129 10.48 335.754 10.477 cv
335.559 10.48 335.387 10.512 335.246 10.574 cv
335.098 10.641 334.977 10.73 334.883 10.84 cv
334.781 10.953 334.711 11.082 334.668 11.23 cv
334.617 11.379 334.594 11.535 334.598 11.691 cv
334.594 12.051 334.699 12.328 334.91 12.531 cv
335.117 12.738 335.406 12.844 335.777 12.84 cv
335.973 12.844 336.141 12.812 336.289 12.746 cv
336.43 12.687 336.551 12.602 336.652 12.488 cv
336.746 12.383 336.82 12.254 336.871 12.109 cv
336.918 11.969 336.941 11.82 336.945 11.66 cv
cp
337.406 17.211 mo
337.406 16.973 337.313 16.797 337.125 16.672 cv
336.938 16.551 336.68 16.48 336.352 16.469 cv
334.957 16.43 li
334.82 16.531 334.711 16.625 334.633 16.715 cv
334.551 16.805 334.488 16.891 334.441 16.977 cv
334.391 17.059 334.355 17.141 334.344 17.219 cv
334.324 17.297 334.316 17.375 334.32 17.461 cv
334.316 17.715 334.449 17.914 334.711 18.051 cv
334.973 18.184 335.344 18.25 335.824 18.254 cv
336.117 18.25 336.363 18.219 336.57 18.164 cv
336.77 18.102 336.934 18.023 337.063 17.926 cv
337.184 17.824 337.273 17.715 337.328 17.594 cv
337.379 17.473 337.406 17.344 337.406 17.211 cv
cp
f
351.258 7.508 mo
351.254 7.664 351.246 7.79303 351.238 7.89502 cv
351.223 8.00403 351.203 8.09003 351.18 8.15198 cv
351.148 8.21899 351.117 8.26599 351.082 8.29303 cv
351.039 8.328 350.996 8.34399 350.953 8.34003 cv
348.43 8.34003 li
348.43 16.469 li
348.43 16.523 348.41 16.57 348.379 16.609 cv
348.34 16.652 348.285 16.687 348.211 16.711 cv
348.129 16.738 348.023 16.758 347.895 16.773 cv
347.758 16.789 347.594 16.797 347.398 16.797 cv
347.203 16.797 347.039 16.789 346.906 16.773 cv
346.773 16.758 346.668 16.738 346.59 16.711 cv
346.512 16.687 346.453 16.652 346.422 16.609 cv
346.383 16.57 346.367 16.523 346.371 16.469 cv
346.371 8.34003 li
343.848 8.34003 li
343.793 8.34399 343.746 8.328 343.715 8.29303 cv
343.676 8.26599 343.645 8.21899 343.621 8.15198 cv
343.59 8.09003 343.57 8.00403 343.563 7.89502 cv
343.547 7.79303 343.543 7.664 343.543 7.508 cv
343.543 7.35498 343.547 7.22302 343.563 7.10901 cv
343.57 7.00403 343.59 6.914 343.621 6.84802 cv
343.645 6.78497 343.676 6.73798 343.715 6.70697 cv
343.746 6.67999 343.793 6.66803 343.848 6.664 cv
350.953 6.664 li
350.996 6.66803 351.039 6.67999 351.082 6.70697 cv
351.117 6.73798 351.148 6.78497 351.18 6.84802 cv
351.203 6.914 351.223 7.00403 351.238 7.10901 cv
351.246 7.22302 351.254 7.35498 351.258 7.508 cv
cp
f
354.297 16.484 mo
354.293 16.539 354.277 16.582 354.25 16.621 cv
354.215 16.66 354.16 16.695 354.09 16.719 cv
354.012 16.746 353.914 16.762 353.789 16.777 cv
353.664 16.789 353.504 16.797 353.316 16.797 cv
353.121 16.797 352.965 16.789 352.84 16.777 cv
352.715 16.762 352.613 16.746 352.539 16.719 cv
352.461 16.695 352.406 16.66 352.379 16.621 cv
352.344 16.582 352.328 16.539 352.332 16.484 cv
352.332 9.55103 li
352.328 9.5 352.344 9.453 352.379 9.414 cv
352.406 9.375 352.461 9.34399 352.539 9.31201 cv
352.613 9.289 352.715 9.26599 352.84 9.24597 cv
352.965 9.23401 353.121 9.22699 353.316 9.22302 cv
353.504 9.22699 353.664 9.23401 353.789 9.24597 cv
353.914 9.26599 354.012 9.289 354.09 9.31201 cv
354.16 9.34399 354.215 9.375 354.25 9.414 cv
354.277 9.453 354.293 9.5 354.297 9.55103 cv
cp
354.445 7.17999 mo
354.445 7.578 354.363 7.85199 354.203 8 cv
354.039 8.15198 353.742 8.22699 353.309 8.22302 cv
352.863 8.22699 352.563 8.15198 352.414 8.008 cv
352.258 7.86298 352.184 7.60199 352.184 7.21899 cv
352.184 6.82397 352.262 6.55103 352.422 6.39801 cv
352.578 6.24597 352.879 6.16803 353.324 6.16803 cv
353.758 6.16803 354.055 6.242 354.211 6.39099 cv
354.367 6.539 354.445 6.80499 354.445 7.17999 cv
cp
f
367.348 16.484 mo
367.344 16.539 367.328 16.582 367.301 16.621 cv
367.266 16.66 367.215 16.695 367.145 16.719 cv
367.07 16.746 366.969 16.762 366.848 16.777 cv
366.723 16.789 366.566 16.797 366.375 16.797 cv
366.176 16.797 366.016 16.789 365.891 16.777 cv
365.766 16.762 365.664 16.746 365.59 16.719 cv
365.512 16.695 365.461 16.66 365.434 16.621 cv
365.406 16.582 365.391 16.539 365.395 16.484 cv
365.395 12.363 li
365.391 12.133 365.371 11.918 365.328 11.723 cv
365.281 11.531 365.211 11.367 365.125 11.23 cv
365.031 11.094 364.918 10.988 364.781 10.91 cv
364.641 10.836 364.477 10.797 364.285 10.797 cv
364.051 10.797 363.813 10.891 363.574 11.07 cv
363.336 11.254 363.078 11.516 362.797 11.863 cv
362.797 16.484 li
362.797 16.539 362.781 16.582 362.75 16.621 cv
362.719 16.66 362.664 16.695 362.59 16.719 cv
362.512 16.746 362.41 16.762 362.289 16.777 cv
362.164 16.789 362.012 16.797 361.824 16.797 cv
361.629 16.797 361.469 16.789 361.348 16.777 cv
361.219 16.762 361.117 16.746 361.047 16.719 cv
360.969 16.695 360.918 16.66 360.887 16.621 cv
360.855 16.582 360.84 16.539 360.84 16.484 cv
360.84 12.363 li
360.84 12.133 360.816 11.918 360.773 11.723 cv
360.73 11.531 360.664 11.367 360.578 11.23 cv
360.484 11.094 360.371 10.988 360.234 10.91 cv
360.09 10.836 359.926 10.797 359.742 10.797 cv
359.5 10.797 359.262 10.891 359.023 11.07 cv
358.785 11.254 358.527 11.516 358.254 11.863 cv
358.254 16.484 li
358.25 16.539 358.234 16.582 358.207 16.621 cv
358.172 16.66 358.117 16.695 358.047 16.719 cv
357.969 16.746 357.871 16.762 357.746 16.777 cv
357.621 16.789 357.461 16.797 357.273 16.797 cv
357.078 16.797 356.922 16.789 356.797 16.777 cv
356.672 16.762 356.57 16.746 356.496 16.719 cv
356.418 16.695 356.363 16.66 356.336 16.621 cv
356.301 16.582 356.285 16.539 356.289 16.484 cv
356.289 9.53497 li
356.285 9.48798 356.301 9.44098 356.328 9.39801 cv
356.352 9.36298 356.398 9.33197 356.469 9.30103 cv
356.535 9.27698 356.621 9.258 356.73 9.242 cv
356.836 9.23401 356.969 9.22699 357.133 9.22302 cv
357.297 9.22699 357.434 9.23401 357.543 9.242 cv
357.648 9.258 357.734 9.27698 357.797 9.30103 cv
357.855 9.33197 357.898 9.36298 357.926 9.39801 cv
357.949 9.44098 357.961 9.48798 357.965 9.53497 cv
357.965 10.336 li
358.348 9.92603 358.73 9.61298 359.113 9.40198 cv
359.492 9.19501 359.895 9.09399 360.313 9.09003 cv
360.598 9.09399 360.852 9.12097 361.082 9.17999 cv
361.309 9.242 361.516 9.328 361.695 9.43701 cv
361.875 9.55103 362.027 9.68701 362.156 9.84003 cv
362.285 9.99597 362.395 10.168 362.484 10.359 cv
362.691 10.137 362.895 9.94501 363.098 9.78497 cv
363.293 9.625 363.492 9.492 363.688 9.39099 cv
363.883 9.289 364.078 9.21503 364.273 9.164 cv
364.469 9.117 364.668 9.09399 364.871 9.09003 cv
365.332 9.09399 365.719 9.172 366.039 9.32397 cv
366.352 9.48401 366.609 9.69501 366.805 9.961 cv
367 10.23 367.137 10.543 367.223 10.898 cv
367.301 11.258 367.344 11.637 367.348 12.035 cv
cp
f
375.688 12.809 mo
375.684 13.047 375.633 13.223 375.527 13.336 cv
375.418 13.453 375.27 13.512 375.09 13.508 cv
370.855 13.508 li
370.852 13.809 370.887 14.078 370.961 14.316 cv
371.027 14.559 371.141 14.762 371.297 14.93 cv
371.449 15.102 371.645 15.23 371.887 15.316 cv
372.125 15.406 372.414 15.449 372.758 15.449 cv
373.098 15.449 373.398 15.426 373.66 15.375 cv
373.918 15.328 374.145 15.273 374.336 15.211 cv
374.523 15.152 374.68 15.098 374.809 15.047 cv
374.93 15 375.031 14.977 375.113 14.973 cv
375.156 14.977 375.195 14.984 375.23 15 cv
375.258 15.02 375.285 15.051 375.305 15.098 cv
375.324 15.145 375.336 15.211 375.348 15.297 cv
375.352 15.383 375.355 15.492 375.359 15.621 cv
375.355 15.738 375.355 15.836 375.352 15.914 cv
375.344 15.996 375.336 16.062 375.328 16.117 cv
375.316 16.176 375.301 16.227 375.281 16.262 cv
375.262 16.305 375.234 16.34 375.203 16.375 cv
375.168 16.414 375.074 16.465 374.926 16.523 cv
374.77 16.59 374.578 16.652 374.348 16.707 cv
374.109 16.77 373.84 16.816 373.543 16.863 cv
373.238 16.902 372.918 16.926 372.578 16.93 cv
371.957 16.926 371.414 16.852 370.953 16.695 cv
370.484 16.543 370.098 16.305 369.789 15.988 cv
369.473 15.672 369.238 15.273 369.09 14.789 cv
368.934 14.309 368.859 13.742 368.863 13.086 cv
368.859 12.473 368.938 11.914 369.102 11.418 cv
369.258 10.922 369.492 10.504 369.805 10.156 cv
370.109 9.81201 370.484 9.547 370.922 9.36298 cv
371.359 9.18402 371.852 9.09399 372.406 9.09003 cv
372.984 9.09399 373.484 9.17999 373.898 9.34802 cv
374.313 9.52301 374.648 9.76202 374.914 10.062 cv
375.176 10.367 375.371 10.727 375.5 11.141 cv
375.621 11.559 375.684 12.008 375.688 12.496 cv
cp
373.785 12.246 mo
373.797 11.695 373.688 11.262 373.453 10.949 cv
373.219 10.637 372.852 10.48 372.359 10.477 cv
372.109 10.48 371.895 10.527 371.711 10.617 cv
371.523 10.715 371.371 10.84 371.25 10.996 cv
371.125 11.156 371.031 11.344 370.969 11.559 cv
370.902 11.773 370.863 12.004 370.855 12.246 cv
cp
f
382.188 14.52 mo
382.184 14.918 382.109 15.266 381.965 15.566 cv
381.816 15.867 381.609 16.121 381.34 16.32 cv
381.066 16.527 380.746 16.676 380.379 16.777 cv
380.012 16.875 379.609 16.926 379.18 16.93 cv
378.914 16.926 378.668 16.906 378.434 16.871 cv
378.199 16.828 377.988 16.781 377.801 16.723 cv
377.613 16.664 377.457 16.602 377.332 16.539 cv
377.207 16.477 377.113 16.418 377.059 16.363 cv
377 16.309 376.957 16.227 376.93 16.109 cv
376.895 15.996 376.879 15.82 376.883 15.59 cv
376.879 15.441 376.887 15.32 376.898 15.227 cv
376.906 15.137 376.922 15.066 376.945 15.008 cv
376.965 14.957 376.988 14.918 377.023 14.898 cv
377.051 14.883 377.09 14.875 377.137 14.871 cv
377.191 14.875 377.277 14.906 377.391 14.969 cv
377.5 15.035 377.637 15.109 377.809 15.184 cv
377.973 15.266 378.168 15.336 378.387 15.402 cv
378.605 15.473 378.855 15.508 379.141 15.504 cv
379.316 15.508 379.473 15.488 379.613 15.449 cv
379.746 15.414 379.867 15.363 379.973 15.293 cv
380.07 15.227 380.145 15.141 380.199 15.035 cv
380.246 14.934 380.273 14.812 380.277 14.676 cv
380.273 14.52 380.227 14.387 380.133 14.277 cv
380.039 14.168 379.91 14.07 379.754 13.984 cv
379.59 13.902 379.41 13.824 379.215 13.75 cv
379.012 13.68 378.809 13.602 378.598 13.508 cv
378.387 13.422 378.18 13.32 377.984 13.203 cv
377.781 13.094 377.602 12.953 377.445 12.785 cv
377.281 12.621 377.156 12.422 377.063 12.184 cv
376.969 11.953 376.922 11.672 376.922 11.34 cv
376.922 11.012 376.984 10.707 377.113 10.426 cv
377.242 10.152 377.43 9.914 377.676 9.71503 cv
377.918 9.52002 378.215 9.367 378.566 9.25403 cv
378.914 9.14801 379.309 9.09399 379.75 9.09003 cv
379.965 9.09399 380.176 9.10901 380.383 9.13702 cv
380.586 9.172 380.773 9.211 380.941 9.25403 cv
381.105 9.30499 381.246 9.35498 381.363 9.40601 cv
381.477 9.46503 381.559 9.51202 381.609 9.547 cv
381.656 9.59003 381.691 9.62903 381.715 9.664 cv
381.734 9.70697 381.746 9.75403 381.758 9.80499 cv
381.766 9.85901 381.777 9.92603 381.785 10.004 cv
381.793 10.09 381.797 10.187 381.797 10.305 cv
381.797 10.445 381.793 10.562 381.785 10.648 cv
381.777 10.742 381.762 10.812 381.746 10.859 cv
381.727 10.914 381.703 10.949 381.676 10.965 cv
381.641 10.988 381.605 10.996 381.566 10.992 cv
381.516 10.996 381.441 10.969 381.348 10.91 cv
381.246 10.859 381.125 10.801 380.977 10.734 cv
380.828 10.676 380.656 10.617 380.461 10.559 cv
380.266 10.508 380.043 10.48 379.797 10.477 cv
379.617 10.48 379.465 10.5 379.336 10.531 cv
379.203 10.57 379.094 10.621 379.016 10.687 cv
378.93 10.758 378.867 10.836 378.828 10.926 cv
378.781 11.02 378.762 11.117 378.766 11.219 cv
378.762 11.379 378.813 11.516 378.914 11.621 cv
379.012 11.734 379.141 11.828 379.305 11.91 cv
379.465 11.996 379.648 12.074 379.855 12.145 cv
380.059 12.219 380.266 12.301 380.477 12.383 cv
380.684 12.473 380.891 12.57 381.102 12.684 cv
381.305 12.797 381.488 12.937 381.648 13.102 cv
381.809 13.27 381.938 13.469 382.039 13.699 cv
382.133 13.934 382.184 14.207 382.188 14.52 cv
cp
f
394.379 12.937 mo
394.375 13.535 394.297 14.078 394.145 14.562 cv
393.984 15.055 393.75 15.473 393.434 15.824 cv
393.117 16.176 392.719 16.449 392.242 16.641 cv
391.762 16.832 391.203 16.926 390.566 16.93 cv
389.945 16.926 389.406 16.844 388.953 16.672 cv
388.492 16.504 388.113 16.254 387.816 15.926 cv
387.512 15.602 387.289 15.199 387.145 14.719 cv
387 14.242 386.93 13.695 386.93 13.078 cv
386.93 12.488 387.008 11.949 387.164 11.457 cv
387.32 10.969 387.559 10.547 387.879 10.195 cv
388.195 9.84802 388.59 9.57397 389.066 9.37903 cv
389.539 9.18701 390.098 9.09399 390.738 9.09003 cv
391.363 9.09399 391.902 9.17603 392.359 9.34399 cv
392.816 9.51599 393.195 9.76599 393.492 10.09 cv
393.789 10.418 394.012 10.82 394.16 11.297 cv
394.305 11.777 394.375 12.324 394.379 12.937 cv
cp
392.359 13.016 mo
392.355 12.68 392.328 12.363 392.277 12.07 cv
392.219 11.785 392.125 11.535 392 11.32 cv
391.867 11.109 391.695 10.941 391.484 10.82 cv
391.266 10.703 390.996 10.645 390.668 10.641 cv
390.379 10.645 390.125 10.699 389.906 10.801 cv
389.688 10.91 389.508 11.066 389.367 11.27 cv
389.227 11.477 389.121 11.723 389.051 12.008 cv
388.98 12.301 388.945 12.629 388.945 12.992 cv
388.945 13.34 388.973 13.656 389.031 13.941 cv
389.086 14.234 389.18 14.484 389.309 14.695 cv
389.434 14.91 389.605 15.074 389.828 15.187 cv
390.043 15.309 390.313 15.367 390.637 15.363 cv
390.93 15.367 391.188 15.312 391.41 15.203 cv
391.625 15.098 391.805 14.945 391.945 14.738 cv
392.086 14.539 392.188 14.293 392.258 14.004 cv
392.32 13.719 392.355 13.391 392.359 13.016 cv
cp
f
400.16 6.883 mo
400.156 7.03497 400.152 7.15601 400.145 7.24597 cv
400.133 7.34003 400.117 7.40997 400.098 7.45697 cv
400.074 7.508 400.051 7.54303 400.027 7.55902 cv
400 7.578 399.973 7.586 399.941 7.586 cv
399.902 7.586 399.859 7.578 399.82 7.55902 cv
399.773 7.54303 399.719 7.52301 399.656 7.5 cv
399.586 7.47998 399.512 7.461 399.426 7.44098 cv
399.336 7.42603 399.23 7.41803 399.113 7.414 cv
398.969 7.41803 398.848 7.43701 398.75 7.47998 cv
398.648 7.52698 398.566 7.59802 398.5 7.69098 cv
398.43 7.789 398.379 7.914 398.352 8.06598 cv
398.316 8.21899 398.301 8.40601 398.305 8.62903 cv
398.305 9.27002 li
399.574 9.27002 li
399.617 9.27301 399.66 9.28497 399.703 9.30902 cv
399.738 9.336 399.773 9.37903 399.801 9.43701 cv
399.824 9.5 399.844 9.58197 399.859 9.68402 cv
399.871 9.78497 399.875 9.914 399.879 10.062 cv
399.875 10.352 399.852 10.555 399.801 10.676 cv
399.746 10.801 399.668 10.863 399.574 10.859 cv
398.305 10.859 li
398.305 16.484 li
398.301 16.539 398.285 16.582 398.258 16.621 cv
398.223 16.66 398.172 16.695 398.102 16.719 cv
398.027 16.746 397.926 16.762 397.797 16.777 cv
397.664 16.789 397.504 16.797 397.32 16.797 cv
397.133 16.797 396.977 16.789 396.852 16.777 cv
396.723 16.762 396.621 16.746 396.547 16.719 cv
396.469 16.695 396.418 16.66 396.391 16.621 cv
396.359 16.582 396.344 16.539 396.348 16.484 cv
396.348 10.859 li
395.477 10.859 li
395.375 10.863 395.301 10.801 395.254 10.676 cv
395.203 10.555 395.176 10.352 395.18 10.062 cv
395.176 9.914 395.184 9.78497 395.199 9.68402 cv
395.211 9.58197 395.23 9.5 395.254 9.43701 cv
395.277 9.37903 395.309 9.336 395.348 9.30902 cv
395.387 9.28497 395.43 9.27301 395.484 9.27002 cv
396.348 9.27002 li
396.348 8.68402 li
396.344 8.21503 396.391 7.80103 396.488 7.44098 cv
396.578 7.086 396.727 6.789 396.93 6.55499 cv
397.129 6.32001 397.383 6.14502 397.691 6.02002 cv
398 5.90198 398.363 5.84003 398.789 5.84003 cv
398.984 5.84003 399.176 5.85901 399.363 5.89099 cv
399.543 5.92999 399.688 5.96503 399.793 6 cv
399.895 6.04303 399.965 6.078 400.004 6.10901 cv
400.039 6.14502 400.07 6.19501 400.094 6.258 cv
400.117 6.32397 400.133 6.40601 400.145 6.508 cv
400.152 6.60901 400.156 6.73401 400.16 6.883 cv
cp
f
410.711 13.727 mo
410.707 14.258 410.609 14.723 410.414 15.121 cv
410.215 15.523 409.949 15.859 409.613 16.125 cv
409.273 16.395 408.875 16.594 408.426 16.727 cv
407.973 16.859 407.492 16.926 406.98 16.93 cv
406.629 16.926 406.305 16.898 406.008 16.844 cv
405.707 16.785 405.445 16.719 405.219 16.637 cv
404.988 16.559 404.797 16.473 404.645 16.383 cv
404.492 16.297 404.383 16.219 404.316 16.148 cv
404.246 16.082 404.195 15.984 404.172 15.859 cv
404.141 15.734 404.129 15.551 404.129 15.309 cv
404.129 15.148 404.133 15.016 404.145 14.902 cv
404.152 14.797 404.168 14.707 404.195 14.637 cv
404.215 14.57 404.246 14.523 404.289 14.492 cv
404.324 14.469 404.371 14.453 404.422 14.449 cv
404.492 14.453 404.594 14.496 404.73 14.578 cv
404.859 14.668 405.031 14.762 405.242 14.863 cv
405.449 14.969 405.695 15.066 405.984 15.148 cv
406.27 15.238 406.605 15.281 406.988 15.277 cv
407.238 15.281 407.461 15.25 407.656 15.187 cv
407.852 15.129 408.02 15.043 408.16 14.934 cv
408.297 14.824 408.402 14.691 408.477 14.531 cv
408.547 14.371 408.582 14.191 408.586 13.992 cv
408.582 13.766 408.52 13.57 408.398 13.402 cv
408.27 13.242 408.105 13.098 407.91 12.969 cv
407.707 12.844 407.48 12.723 407.227 12.609 cv
406.973 12.5 406.711 12.383 406.441 12.254 cv
406.168 12.133 405.906 11.988 405.652 11.828 cv
405.398 11.672 405.172 11.484 404.973 11.262 cv
404.77 11.043 404.605 10.781 404.484 10.477 cv
404.359 10.176 404.297 9.81598 404.301 9.39502 cv
404.297 8.914 404.387 8.48798 404.566 8.12097 cv
404.742 7.758 404.984 7.453 405.293 7.20697 cv
405.594 6.96899 405.953 6.789 406.367 6.66803 cv
406.781 6.55103 407.219 6.492 407.68 6.48798 cv
407.918 6.492 408.156 6.508 408.398 6.54303 cv
408.637 6.58197 408.859 6.633 409.066 6.69098 cv
409.273 6.75403 409.457 6.82397 409.621 6.89801 cv
409.777 6.97998 409.887 7.04303 409.941 7.09399 cv
409.992 7.14801 410.027 7.19501 410.047 7.22699 cv
410.063 7.26599 410.078 7.31201 410.094 7.37097 cv
410.105 7.43402 410.113 7.508 410.121 7.59802 cv
410.125 7.69098 410.129 7.80499 410.129 7.93701 cv
410.129 8.09003 410.125 8.21899 410.117 8.32001 cv
410.109 8.42603 410.094 8.51202 410.078 8.57397 cv
410.055 8.64502 410.031 8.69098 410 8.72302 cv
409.965 8.75403 409.918 8.77002 409.863 8.77002 cv
409.805 8.77002 409.715 8.73401 409.59 8.65997 cv
409.465 8.59003 409.309 8.51202 409.129 8.422 cv
408.945 8.34003 408.738 8.26202 408.5 8.19098 cv
408.258 8.125 407.992 8.09003 407.711 8.086 cv
407.484 8.09003 407.293 8.117 407.129 8.16803 cv
406.961 8.22302 406.82 8.297 406.711 8.39099 cv
406.598 8.48798 406.516 8.60498 406.461 8.73798 cv
406.406 8.87903 406.379 9.02002 406.379 9.16803 cv
406.379 9.39502 406.438 9.59003 406.563 9.75 cv
406.68 9.914 406.844 10.059 407.055 10.184 cv
407.258 10.312 407.492 10.434 407.75 10.543 cv
408.008 10.66 408.273 10.777 408.547 10.898 cv
408.816 11.027 409.078 11.168 409.34 11.324 cv
409.598 11.48 409.832 11.672 410.035 11.891 cv
410.238 12.117 410.398 12.375 410.523 12.672 cv
410.645 12.969 410.707 13.32 410.711 13.727 cv
cp
f
418.758 16.484 mo
418.754 16.539 418.742 16.582 418.719 16.621 cv
418.691 16.66 418.645 16.695 418.582 16.719 cv
418.516 16.746 418.43 16.762 418.324 16.777 cv
418.219 16.789 418.086 16.797 417.926 16.797 cv
417.75 16.797 417.609 16.789 417.508 16.777 cv
417.398 16.762 417.316 16.746 417.254 16.719 cv
417.191 16.695 417.145 16.66 417.121 16.621 cv
417.09 16.582 417.078 16.539 417.082 16.484 cv
417.082 15.684 li
416.695 16.098 416.305 16.41 415.91 16.617 cv
415.508 16.824 415.098 16.926 414.676 16.93 cv
414.195 16.926 413.793 16.852 413.469 16.695 cv
413.145 16.543 412.883 16.328 412.684 16.059 cv
412.48 15.789 412.336 15.477 412.254 15.117 cv
412.164 14.762 412.121 14.32 412.125 13.789 cv
412.125 9.53497 li
412.121 9.48798 412.137 9.44098 412.168 9.39801 cv
412.195 9.36298 412.246 9.33197 412.324 9.30103 cv
412.398 9.27698 412.5 9.258 412.629 9.242 cv
412.754 9.23401 412.91 9.22699 413.102 9.22302 cv
413.289 9.22699 413.449 9.23401 413.574 9.242 cv
413.699 9.258 413.797 9.27698 413.875 9.30103 cv
413.945 9.33197 414 9.36298 414.035 9.39801 cv
414.063 9.44098 414.078 9.48798 414.082 9.53497 cv
414.082 13.461 li
414.078 13.828 414.102 14.105 414.152 14.297 cv
414.195 14.488 414.266 14.652 414.367 14.789 cv
414.461 14.93 414.586 15.035 414.734 15.109 cv
414.883 15.187 415.055 15.227 415.25 15.223 cv
415.5 15.227 415.75 15.137 416.004 14.949 cv
416.254 14.77 416.523 14.504 416.809 14.156 cv
416.809 9.53497 li
416.809 9.48798 416.82 9.44098 416.852 9.39801 cv
416.875 9.36298 416.93 9.33197 417.008 9.30103 cv
417.082 9.27698 417.18 9.258 417.309 9.242 cv
417.43 9.23401 417.59 9.22699 417.785 9.22302 cv
417.977 9.22699 418.133 9.23401 418.258 9.242 cv
418.379 9.258 418.48 9.27698 418.555 9.30103 cv
418.625 9.33197 418.676 9.36298 418.711 9.39801 cv
418.738 9.44098 418.754 9.48798 418.758 9.53497 cv
cp
f
427.688 12.914 mo
427.688 13.535 427.617 14.094 427.484 14.586 cv
427.344 15.082 427.148 15.5 426.898 15.848 cv
426.641 16.195 426.328 16.465 425.961 16.648 cv
425.586 16.836 425.164 16.926 424.695 16.93 cv
424.457 16.926 424.238 16.902 424.039 16.863 cv
423.832 16.816 423.641 16.75 423.457 16.648 cv
423.273 16.555 423.09 16.43 422.914 16.273 cv
422.73 16.125 422.547 15.941 422.363 15.73 cv
422.363 16.484 li
422.359 16.547 422.348 16.594 422.32 16.629 cv
422.289 16.672 422.242 16.703 422.18 16.727 cv
422.113 16.75 422.023 16.766 421.918 16.781 cv
421.809 16.789 421.68 16.797 421.523 16.797 cv
421.359 16.797 421.223 16.789 421.121 16.781 cv
421.012 16.766 420.926 16.75 420.863 16.727 cv
420.793 16.703 420.75 16.672 420.727 16.629 cv
420.699 16.594 420.684 16.547 420.688 16.484 cv
420.688 6.23798 li
420.684 6.18701 420.699 6.14099 420.734 6.09802 cv
420.762 6.05902 420.816 6.02301 420.895 5.992 cv
420.969 5.96503 421.07 5.94501 421.195 5.92603 cv
421.32 5.914 421.477 5.90601 421.672 5.90198 cv
421.859 5.90601 422.02 5.914 422.145 5.92603 cv
422.27 5.94501 422.367 5.96503 422.445 5.992 cv
422.516 6.02301 422.57 6.05902 422.605 6.09802 cv
422.633 6.14099 422.648 6.18701 422.652 6.23798 cv
422.652 10.078 li
422.828 9.90198 423.004 9.75403 423.184 9.62903 cv
423.355 9.508 423.531 9.40198 423.711 9.32001 cv
423.883 9.242 424.066 9.18402 424.258 9.14502 cv
424.441 9.10901 424.641 9.09399 424.852 9.09003 cv
425.363 9.09399 425.797 9.19501 426.16 9.39801 cv
426.516 9.60498 426.809 9.883 427.035 10.23 cv
427.258 10.578 427.422 10.984 427.531 11.449 cv
427.633 11.914 427.688 12.402 427.688 12.914 cv
cp
425.652 13.055 mo
425.648 12.762 425.625 12.477 425.586 12.199 cv
425.539 11.926 425.465 11.684 425.355 11.469 cv
425.246 11.258 425.102 11.086 424.93 10.957 cv
424.754 10.832 424.535 10.77 424.273 10.766 cv
424.141 10.77 424.016 10.785 423.891 10.82 cv
423.766 10.859 423.637 10.922 423.504 11.008 cv
423.371 11.098 423.234 11.215 423.098 11.352 cv
422.953 11.492 422.805 11.664 422.652 11.871 cv
422.652 14.18 li
422.926 14.535 423.188 14.805 423.441 14.984 cv
423.691 15.172 423.957 15.262 424.234 15.262 cv
424.488 15.262 424.703 15.199 424.883 15.066 cv
425.055 14.941 425.203 14.773 425.32 14.562 cv
425.438 14.359 425.52 14.121 425.574 13.852 cv
425.621 13.59 425.648 13.324 425.652 13.055 cv
cp
f
432.777 12.832 mo
432.773 13.133 432.746 13.344 432.691 13.461 cv
432.633 13.586 432.543 13.645 432.418 13.641 cv
429.176 13.641 li
429.047 13.645 428.953 13.582 428.898 13.457 cv
428.836 13.336 428.809 13.129 428.813 12.832 cv
428.809 12.543 428.836 12.336 428.898 12.215 cv
428.953 12.098 429.047 12.039 429.176 12.035 cv
432.418 12.035 li
432.48 12.039 432.531 12.051 432.578 12.074 cv
432.617 12.102 432.656 12.148 432.691 12.207 cv
432.719 12.273 432.742 12.355 432.758 12.457 cv
432.77 12.562 432.773 12.687 432.777 12.832 cv
cp
f
436.426 16.469 mo
436.422 16.523 436.406 16.57 436.375 16.609 cv
436.34 16.652 436.281 16.687 436.207 16.711 cv
436.125 16.738 436.023 16.758 435.895 16.773 cv
435.762 16.789 435.594 16.797 435.398 16.797 cv
435.195 16.797 435.031 16.789 434.902 16.773 cv
434.766 16.758 434.66 16.738 434.586 16.711 cv
434.504 16.687 434.449 16.652 434.418 16.609 cv
434.383 16.57 434.363 16.523 434.367 16.469 cv
434.367 6.94501 li
434.363 6.89801 434.383 6.85199 434.418 6.80499 cv
434.449 6.76599 434.504 6.72998 434.59 6.703 cv
434.668 6.67999 434.773 6.65997 434.906 6.64099 cv
435.031 6.62903 435.195 6.62097 435.398 6.617 cv
435.594 6.62097 435.762 6.62903 435.895 6.64099 cv
436.023 6.65997 436.125 6.67999 436.207 6.703 cv
436.281 6.72998 436.34 6.76599 436.375 6.80499 cv
436.406 6.85199 436.422 6.89801 436.426 6.94501 cv
cp
f
449.508 16.484 mo
449.504 16.539 449.488 16.582 449.461 16.621 cv
449.426 16.66 449.375 16.695 449.305 16.719 cv
449.23 16.746 449.129 16.762 449.008 16.777 cv
448.883 16.789 448.727 16.797 448.535 16.797 cv
448.336 16.797 448.176 16.789 448.051 16.777 cv
447.926 16.762 447.824 16.746 447.75 16.719 cv
447.672 16.695 447.621 16.66 447.594 16.621 cv
447.566 16.582 447.551 16.539 447.555 16.484 cv
447.555 12.363 li
447.551 12.133 447.531 11.918 447.488 11.723 cv
447.441 11.531 447.371 11.367 447.285 11.23 cv
447.191 11.094 447.078 10.988 446.941 10.91 cv
446.801 10.836 446.637 10.797 446.445 10.797 cv
446.211 10.797 445.973 10.891 445.734 11.07 cv
445.496 11.254 445.238 11.516 444.957 11.863 cv
444.957 16.484 li
444.957 16.539 444.941 16.582 444.91 16.621 cv
444.879 16.66 444.824 16.695 444.75 16.719 cv
444.672 16.746 444.57 16.762 444.449 16.777 cv
444.324 16.789 444.172 16.797 443.984 16.797 cv
443.789 16.797 443.629 16.789 443.508 16.777 cv
443.379 16.762 443.277 16.746 443.207 16.719 cv
443.129 16.695 443.078 16.66 443.047 16.621 cv
443.016 16.582 443 16.539 443 16.484 cv
443 12.363 li
443 12.133 442.977 11.918 442.934 11.723 cv
442.891 11.531 442.824 11.367 442.738 11.23 cv
442.645 11.094 442.531 10.988 442.395 10.91 cv
442.25 10.836 442.086 10.797 441.902 10.797 cv
441.66 10.797 441.422 10.891 441.184 11.07 cv
440.945 11.254 440.688 11.516 440.414 11.863 cv
440.414 16.484 li
440.41 16.539 440.395 16.582 440.367 16.621 cv
440.332 16.66 440.277 16.695 440.207 16.719 cv
440.129 16.746 440.031 16.762 439.906 16.777 cv
439.781 16.789 439.621 16.797 439.434 16.797 cv
439.238 16.797 439.082 16.789 438.957 16.777 cv
438.832 16.762 438.73 16.746 438.656 16.719 cv
438.578 16.695 438.523 16.66 438.496 16.621 cv
438.461 16.582 438.445 16.539 438.449 16.484 cv
438.449 9.53497 li
438.445 9.48798 438.461 9.44098 438.488 9.39801 cv
438.512 9.36298 438.559 9.33197 438.629 9.30103 cv
438.695 9.27698 438.781 9.258 438.891 9.242 cv
438.996 9.23401 439.129 9.22699 439.293 9.22302 cv
439.457 9.22699 439.594 9.23401 439.703 9.242 cv
439.809 9.258 439.895 9.27698 439.957 9.30103 cv
440.016 9.33197 440.059 9.36298 440.086 9.39801 cv
440.109 9.44098 440.121 9.48798 440.125 9.53497 cv
440.125 10.336 li
440.508 9.92603 440.891 9.61298 441.273 9.40198 cv
441.652 9.19501 442.055 9.09399 442.473 9.09003 cv
442.758 9.09399 443.012 9.12097 443.242 9.17999 cv
443.469 9.242 443.676 9.328 443.855 9.43701 cv
444.035 9.55103 444.188 9.68701 444.316 9.84003 cv
444.445 9.99597 444.555 10.168 444.645 10.359 cv
444.852 10.137 445.055 9.94501 445.258 9.78497 cv
445.453 9.625 445.652 9.492 445.848 9.39099 cv
446.043 9.289 446.238 9.21503 446.434 9.164 cv
446.629 9.117 446.828 9.09399 447.031 9.09003 cv
447.492 9.09399 447.879 9.172 448.199 9.32397 cv
448.512 9.48401 448.77 9.69501 448.965 9.961 cv
449.16 10.23 449.297 10.543 449.383 10.898 cv
449.461 11.258 449.504 11.637 449.508 12.035 cv
cp
f
457.348 16.508 mo
457.344 16.586 457.316 16.641 457.27 16.68 cv
457.215 16.723 457.133 16.75 457.023 16.77 cv
456.906 16.785 456.742 16.797 456.527 16.797 cv
456.289 16.797 456.117 16.785 456.016 16.77 cv
455.906 16.75 455.832 16.723 455.793 16.68 cv
455.746 16.641 455.727 16.586 455.727 16.508 cv
455.727 15.957 li
455.438 16.266 455.109 16.504 454.746 16.672 cv
454.379 16.844 453.973 16.926 453.527 16.93 cv
453.156 16.926 452.816 16.879 452.508 16.785 cv
452.199 16.691 451.934 16.551 451.707 16.355 cv
451.48 16.168 451.305 15.934 451.18 15.652 cv
451.055 15.375 450.992 15.047 450.996 14.668 cv
450.992 14.27 451.07 13.918 451.23 13.613 cv
451.387 13.316 451.625 13.07 451.941 12.875 cv
452.254 12.684 452.645 12.539 453.113 12.441 cv
453.582 12.352 454.125 12.305 454.742 12.301 cv
455.422 12.301 li
455.422 11.879 li
455.422 11.664 455.398 11.473 455.355 11.309 cv
455.309 11.148 455.234 11.012 455.137 10.898 cv
455.031 10.793 454.898 10.711 454.73 10.656 cv
454.559 10.605 454.348 10.582 454.105 10.578 cv
453.773 10.582 453.48 10.617 453.227 10.687 cv
452.965 10.762 452.738 10.844 452.543 10.93 cv
452.344 11.023 452.18 11.102 452.051 11.172 cv
451.914 11.246 451.805 11.285 451.727 11.281 cv
451.664 11.285 451.613 11.266 451.574 11.227 cv
451.527 11.191 451.492 11.141 451.465 11.07 cv
451.434 11.008 451.41 10.922 451.398 10.82 cv
451.379 10.723 451.371 10.613 451.375 10.492 cv
451.371 10.332 451.387 10.207 451.414 10.109 cv
451.438 10.02 451.484 9.93402 451.563 9.85498 cv
451.633 9.78101 451.762 9.69897 451.945 9.60901 cv
452.125 9.52002 452.336 9.43402 452.582 9.35498 cv
452.824 9.27698 453.094 9.21503 453.383 9.164 cv
453.672 9.117 453.969 9.09399 454.277 9.09003 cv
454.82 9.09399 455.285 9.14502 455.672 9.25 cv
456.059 9.35901 456.379 9.52301 456.629 9.742 cv
456.879 9.961 457.059 10.246 457.176 10.594 cv
457.285 10.945 457.344 11.359 457.348 11.832 cv
cp
455.422 13.531 mo
454.672 13.531 li
454.355 13.535 454.086 13.559 453.863 13.602 cv
453.637 13.652 453.453 13.723 453.316 13.812 cv
453.172 13.91 453.07 14.023 453.008 14.152 cv
452.941 14.289 452.906 14.437 452.91 14.605 cv
452.906 14.898 453 15.129 453.188 15.293 cv
453.371 15.461 453.629 15.543 453.957 15.543 cv
454.23 15.543 454.48 15.473 454.715 15.332 cv
454.941 15.191 455.18 14.988 455.422 14.715 cv
cp
f
465.574 10.016 mo
465.57 10.27 465.543 10.453 465.488 10.57 cv
465.43 10.691 465.359 10.75 465.281 10.75 cv
464.461 10.75 li
464.574 10.875 464.656 11.02 464.707 11.176 cv
464.754 11.336 464.777 11.5 464.781 11.668 cv
464.777 12.078 464.711 12.437 464.578 12.75 cv
464.441 13.066 464.246 13.332 463.996 13.543 cv
463.742 13.762 463.441 13.926 463.086 14.035 cv
462.727 14.152 462.328 14.207 461.898 14.203 cv
461.672 14.207 461.461 14.18 461.258 14.121 cv
461.055 14.07 460.898 14.008 460.789 13.93 cv
460.727 14 460.668 14.078 460.621 14.172 cv
460.57 14.266 460.547 14.371 460.551 14.48 cv
460.547 14.637 460.613 14.758 460.746 14.852 cv
460.875 14.949 461.063 15.004 461.305 15.012 cv
462.996 15.074 li
463.391 15.09 463.742 15.148 464.051 15.242 cv
464.359 15.344 464.621 15.477 464.832 15.648 cv
465.043 15.824 465.203 16.035 465.313 16.277 cv
465.422 16.523 465.477 16.797 465.48 17.109 cv
465.477 17.445 465.402 17.77 465.254 18.078 cv
465.105 18.379 464.879 18.641 464.578 18.867 cv
464.273 19.086 463.895 19.266 463.441 19.398 cv
462.984 19.527 462.453 19.59 461.852 19.594 cv
461.254 19.59 460.75 19.543 460.332 19.453 cv
459.914 19.355 459.57 19.227 459.305 19.062 cv
459.035 18.895 458.84 18.695 458.723 18.469 cv
458.598 18.234 458.539 17.98 458.539 17.707 cv
458.539 17.535 458.559 17.375 458.605 17.219 cv
458.645 17.062 458.711 16.91 458.801 16.77 cv
458.883 16.625 458.988 16.492 459.113 16.359 cv
459.238 16.23 459.379 16.105 459.543 15.984 cv
459.316 15.871 459.145 15.711 459.023 15.5 cv
458.902 15.297 458.844 15.07 458.844 14.824 cv
458.844 14.523 458.91 14.246 459.051 13.988 cv
459.188 13.738 459.371 13.508 459.598 13.305 cv
459.414 13.125 459.27 12.91 459.16 12.652 cv
459.051 12.402 458.996 12.082 459 11.699 cv
458.996 11.297 459.066 10.937 459.211 10.613 cv
459.352 10.297 459.551 10.027 459.809 9.80499 cv
460.063 9.586 460.367 9.414 460.719 9.297 cv
461.07 9.17999 461.461 9.12097 461.891 9.12097 cv
462.109 9.12097 462.316 9.13702 462.516 9.15997 cv
462.715 9.19098 462.902 9.22699 463.074 9.27002 cv
465.281 9.27002 li
465.363 9.27301 465.434 9.33197 465.492 9.44098 cv
465.543 9.55902 465.57 9.75 465.574 10.016 cv
cp
463.059 11.66 mo
463.055 11.289 462.953 11 462.746 10.789 cv
462.535 10.586 462.242 10.48 461.867 10.477 cv
461.672 10.48 461.5 10.512 461.359 10.574 cv
461.211 10.641 461.09 10.73 460.996 10.84 cv
460.895 10.953 460.824 11.082 460.781 11.23 cv
460.73 11.379 460.707 11.535 460.711 11.691 cv
460.707 12.051 460.813 12.328 461.023 12.531 cv
461.23 12.738 461.52 12.844 461.891 12.84 cv
462.086 12.844 462.254 12.812 462.402 12.746 cv
462.543 12.687 462.664 12.602 462.766 12.488 cv
462.859 12.383 462.934 12.254 462.984 12.109 cv
463.031 11.969 463.055 11.82 463.059 11.66 cv
cp
463.52 17.211 mo
463.52 16.973 463.426 16.797 463.238 16.672 cv
463.051 16.551 462.793 16.48 462.465 16.469 cv
461.07 16.43 li
460.934 16.531 460.824 16.625 460.746 16.715 cv
460.664 16.805 460.602 16.891 460.555 16.977 cv
460.504 17.059 460.469 17.141 460.457 17.219 cv
460.438 17.297 460.43 17.375 460.434 17.461 cv
460.43 17.715 460.563 17.914 460.824 18.051 cv
461.086 18.184 461.457 18.25 461.938 18.254 cv
462.23 18.25 462.477 18.219 462.684 18.164 cv
462.883 18.102 463.047 18.023 463.176 17.926 cv
463.297 17.824 463.387 17.715 463.441 17.594 cv
463.492 17.473 463.52 17.344 463.52 17.211 cv
cp
f
473.184 12.809 mo
473.18 13.047 473.129 13.223 473.023 13.336 cv
472.914 13.453 472.766 13.512 472.586 13.508 cv
468.352 13.508 li
468.348 13.809 468.383 14.078 468.457 14.316 cv
468.523 14.559 468.637 14.762 468.793 14.93 cv
468.945 15.102 469.141 15.23 469.383 15.316 cv
469.621 15.406 469.91 15.449 470.254 15.449 cv
470.594 15.449 470.895 15.426 471.156 15.375 cv
471.414 15.328 471.641 15.273 471.832 15.211 cv
472.02 15.152 472.176 15.098 472.305 15.047 cv
472.426 15 472.527 14.977 472.609 14.973 cv
472.652 14.977 472.691 14.984 472.727 15 cv
472.754 15.02 472.781 15.051 472.801 15.098 cv
472.82 15.145 472.832 15.211 472.844 15.297 cv
472.848 15.383 472.852 15.492 472.855 15.621 cv
472.852 15.738 472.852 15.836 472.848 15.914 cv
472.84 15.996 472.832 16.062 472.824 16.117 cv
472.813 16.176 472.797 16.227 472.777 16.262 cv
472.758 16.305 472.73 16.34 472.699 16.375 cv
472.664 16.414 472.57 16.465 472.422 16.523 cv
472.266 16.59 472.074 16.652 471.844 16.707 cv
471.605 16.77 471.336 16.816 471.039 16.863 cv
470.734 16.902 470.414 16.926 470.074 16.93 cv
469.453 16.926 468.91 16.852 468.449 16.695 cv
467.98 16.543 467.594 16.305 467.285 15.988 cv
466.969 15.672 466.734 15.273 466.586 14.789 cv
466.43 14.309 466.355 13.742 466.359 13.086 cv
466.355 12.473 466.434 11.914 466.598 11.418 cv
466.754 10.922 466.988 10.504 467.301 10.156 cv
467.605 9.81201 467.98 9.547 468.418 9.36298 cv
468.855 9.18402 469.348 9.09399 469.902 9.09003 cv
470.48 9.09399 470.98 9.17999 471.395 9.34802 cv
471.809 9.52301 472.145 9.76202 472.41 10.062 cv
472.672 10.367 472.867 10.727 472.996 11.141 cv
473.117 11.559 473.18 12.008 473.184 12.496 cv
cp
471.281 12.246 mo
471.293 11.695 471.184 11.262 470.949 10.949 cv
470.715 10.637 470.348 10.48 469.855 10.477 cv
469.605 10.48 469.391 10.527 469.207 10.617 cv
469.02 10.715 468.867 10.84 468.746 10.996 cv
468.621 11.156 468.527 11.344 468.465 11.559 cv
468.398 11.773 468.359 12.004 468.352 12.246 cv
cp
f
479.684 14.52 mo
479.68 14.918 479.605 15.266 479.461 15.566 cv
479.313 15.867 479.105 16.121 478.836 16.32 cv
478.563 16.527 478.242 16.676 477.875 16.777 cv
477.508 16.875 477.105 16.926 476.676 16.93 cv
476.41 16.926 476.164 16.906 475.93 16.871 cv
475.695 16.828 475.484 16.781 475.297 16.723 cv
475.109 16.664 474.953 16.602 474.828 16.539 cv
474.703 16.477 474.609 16.418 474.555 16.363 cv
474.496 16.309 474.453 16.227 474.426 16.109 cv
474.391 15.996 474.375 15.82 474.379 15.59 cv
474.375 15.441 474.383 15.32 474.395 15.227 cv
474.402 15.137 474.418 15.066 474.441 15.008 cv
474.461 14.957 474.484 14.918 474.52 14.898 cv
474.547 14.883 474.586 14.875 474.633 14.871 cv
474.688 14.875 474.773 14.906 474.887 14.969 cv
474.996 15.035 475.133 15.109 475.305 15.184 cv
475.469 15.266 475.664 15.336 475.883 15.402 cv
476.102 15.473 476.352 15.508 476.637 15.504 cv
476.813 15.508 476.969 15.488 477.109 15.449 cv
477.242 15.414 477.363 15.363 477.469 15.293 cv
477.566 15.227 477.641 15.141 477.695 15.035 cv
477.742 14.934 477.77 14.812 477.773 14.676 cv
477.77 14.52 477.723 14.387 477.629 14.277 cv
477.535 14.168 477.406 14.07 477.25 13.984 cv
477.086 13.902 476.906 13.824 476.711 13.75 cv
476.508 13.68 476.305 13.602 476.094 13.508 cv
475.883 13.422 475.676 13.32 475.48 13.203 cv
475.277 13.094 475.098 12.953 474.941 12.785 cv
474.777 12.621 474.652 12.422 474.559 12.184 cv
474.465 11.953 474.418 11.672 474.418 11.34 cv
474.418 11.012 474.48 10.707 474.609 10.426 cv
474.738 10.152 474.926 9.914 475.172 9.71503 cv
475.414 9.52002 475.711 9.367 476.063 9.25403 cv
476.41 9.14801 476.805 9.09399 477.246 9.09003 cv
477.461 9.09399 477.672 9.10901 477.879 9.13702 cv
478.082 9.172 478.27 9.211 478.438 9.25403 cv
478.602 9.30499 478.742 9.35498 478.859 9.40601 cv
478.973 9.46503 479.055 9.51202 479.105 9.547 cv
479.152 9.59003 479.188 9.62903 479.211 9.664 cv
479.23 9.70697 479.242 9.75403 479.254 9.80499 cv
479.262 9.85901 479.273 9.92603 479.281 10.004 cv
479.289 10.09 479.293 10.187 479.293 10.305 cv
479.293 10.445 479.289 10.562 479.281 10.648 cv
479.273 10.742 479.258 10.812 479.242 10.859 cv
479.223 10.914 479.199 10.949 479.172 10.965 cv
479.137 10.988 479.102 10.996 479.063 10.992 cv
479.012 10.996 478.938 10.969 478.844 10.91 cv
478.742 10.859 478.621 10.801 478.473 10.734 cv
478.324 10.676 478.152 10.617 477.957 10.559 cv
477.762 10.508 477.539 10.48 477.293 10.477 cv
477.113 10.48 476.961 10.5 476.832 10.531 cv
476.699 10.57 476.59 10.621 476.512 10.687 cv
476.426 10.758 476.363 10.836 476.324 10.926 cv
476.277 11.02 476.258 11.117 476.262 11.219 cv
476.258 11.379 476.309 11.516 476.41 11.621 cv
476.508 11.734 476.637 11.828 476.801 11.91 cv
476.961 11.996 477.145 12.074 477.352 12.145 cv
477.555 12.219 477.762 12.301 477.973 12.383 cv
478.18 12.473 478.387 12.57 478.598 12.684 cv
478.801 12.797 478.984 12.937 479.145 13.102 cv
479.305 13.27 479.434 13.469 479.535 13.699 cv
479.629 13.934 479.68 14.207 479.684 14.52 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
